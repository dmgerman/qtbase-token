begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the utils of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"re2nfa.h"
end_include
begin_include
include|#
directive|include
file|"tokenizer.cpp"
end_include
begin_constructor
DECL|function|RE2NFA
name|RE2NFA
operator|::
name|RE2NFA
parameter_list|(
specifier|const
name|QMap
argument_list|<
name|QString
argument_list|,
name|NFA
argument_list|>
modifier|&
name|macros
parameter_list|,
specifier|const
name|QSet
argument_list|<
name|InputType
argument_list|>
modifier|&
name|maxInputSet
parameter_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
parameter_list|)
member_init_list|:
name|macros
argument_list|(
name|macros
argument_list|)
member_init_list|,
name|index
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|errorColumn
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|maxInputSet
argument_list|(
name|maxInputSet
argument_list|)
member_init_list|,
name|caseSensitivity
argument_list|(
name|cs
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|parse
name|NFA
name|RE2NFA
operator|::
name|parse
parameter_list|(
specifier|const
name|QString
modifier|&
name|expression
parameter_list|,
name|int
modifier|*
name|errCol
parameter_list|)
block|{
name|tokenize
argument_list|(
name|expression
argument_list|)
expr_stmt|;
if|if
condition|(
name|symbols
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|NFA
argument_list|()
return|;
name|index
operator|=
literal|0
expr_stmt|;
name|NFA
name|result
init|=
name|parseExpr
argument_list|()
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|errCol
condition|)
operator|*
name|errCol
operator|=
name|errorColumn
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|parseExpr
name|NFA
name|RE2NFA
operator|::
name|parseExpr
parameter_list|()
block|{
name|NFA
name|value
init|=
name|parseBranch
argument_list|()
decl_stmt|;
while|while
condition|(
name|test
argument_list|(
name|TOK_OR
argument_list|)
condition|)
block|{
name|NFA
name|rhs
init|=
name|parseBranch
argument_list|()
decl_stmt|;
name|value
operator|=
name|NFA
operator|::
name|createAlternatingNFA
argument_list|(
name|value
argument_list|,
name|rhs
argument_list|)
expr_stmt|;
block|}
return|return
name|value
return|;
block|}
end_function
begin_function
DECL|function|parseBranch
name|NFA
name|RE2NFA
operator|::
name|parseBranch
parameter_list|()
block|{
name|NFA
name|value
init|=
name|parsePiece
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|hasNext
argument_list|()
condition|)
return|return
name|value
return|;
name|NFA
name|next
decl_stmt|;
do|do
block|{
name|next
operator|=
name|parsePiece
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|next
operator|.
name|isEmpty
argument_list|()
condition|)
name|value
operator|=
name|NFA
operator|::
name|createConcatenatingNFA
argument_list|(
name|value
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
operator|!
name|next
operator|.
name|isEmpty
argument_list|()
operator|&&
name|hasNext
argument_list|()
condition|)
do|;
return|return
name|value
return|;
block|}
end_function
begin_function
DECL|function|parsePiece
name|NFA
name|RE2NFA
operator|::
name|parsePiece
parameter_list|()
block|{
name|NFA
name|atom
init|=
name|parseAtom
argument_list|()
decl_stmt|;
if|if
condition|(
name|atom
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|hasNext
argument_list|()
condition|)
return|return
name|atom
return|;
return|return
name|parseMaybeQuantifier
argument_list|(
name|atom
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|parseAtom
name|NFA
name|RE2NFA
operator|::
name|parseAtom
parameter_list|()
block|{
comment|// ####
switch|switch
condition|(
name|next
argument_list|()
condition|)
block|{
case|case
name|TOK_STRING
case|:
return|return
name|createCharNFA
argument_list|()
return|;
case|case
name|TOK_LPAREN
case|:
block|{
name|NFA
name|subExpr
init|=
name|parseExpr
argument_list|()
decl_stmt|;
name|next
argument_list|(
name|TOK_RPAREN
argument_list|)
expr_stmt|;
return|return
name|subExpr
return|;
block|}
case|case
name|TOK_LBRACE
case|:
block|{
name|QString
name|macroName
init|=
name|lexemUntil
argument_list|(
name|TOK_RBRACE
argument_list|)
decl_stmt|;
name|QMap
argument_list|<
name|QString
argument_list|,
name|NFA
argument_list|>
operator|::
name|ConstIterator
name|macro
init|=
name|macros
operator|.
name|find
argument_list|(
name|macroName
argument_list|)
decl_stmt|;
if|if
condition|(
name|macro
operator|==
name|macros
operator|.
name|end
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"Unknown macro '%s' - probably used before defined"
argument_list|,
name|qPrintable
argument_list|(
name|macroName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|NFA
argument_list|()
return|;
block|}
return|return
operator|*
name|macro
return|;
block|}
case|case
name|TOK_LBRACKET
case|:
block|{
name|NFA
name|set
init|=
name|parseSet
argument_list|()
decl_stmt|;
name|next
argument_list|(
name|TOK_RBRACKET
argument_list|)
expr_stmt|;
return|return
name|set
return|;
block|}
case|case
name|TOK_SEQUENCE
case|:
return|return
name|parseSet2
argument_list|()
return|;
case|case
name|TOK_DOT
case|:
return|return
name|NFA
operator|::
name|createSetNFA
argument_list|(
name|maxInputSet
argument_list|)
return|;
default|default:
name|prev
argument_list|()
expr_stmt|;
return|return
name|NFA
argument_list|()
return|;
block|}
block|}
end_function
begin_function
DECL|function|parseMaybeQuantifier
name|NFA
name|RE2NFA
operator|::
name|parseMaybeQuantifier
parameter_list|(
specifier|const
name|NFA
modifier|&
name|nfa
parameter_list|)
block|{
comment|// ####
switch|switch
condition|(
name|next
argument_list|()
condition|)
block|{
case|case
name|TOK_STAR
case|:
return|return
name|NFA
operator|::
name|createOptionalNFA
argument_list|(
name|nfa
argument_list|)
return|;
case|case
name|TOK_QUESTION
case|:
return|return
name|NFA
operator|::
name|createZeroOrOneNFA
argument_list|(
name|nfa
argument_list|)
return|;
case|case
name|TOK_PLUS
case|:
return|return
name|NFA
operator|::
name|createConcatenatingNFA
argument_list|(
name|nfa
argument_list|,
name|NFA
operator|::
name|createOptionalNFA
argument_list|(
name|nfa
argument_list|)
argument_list|)
return|;
case|case
name|TOK_LBRACE
case|:
block|{
specifier|const
name|int
name|rewind
init|=
name|index
operator|-
literal|1
decl_stmt|;
name|QString
name|lexemBeforeComma
decl_stmt|;
name|QString
name|lexemAfterComma
decl_stmt|;
name|bool
name|seenComma
init|=
literal|false
decl_stmt|;
forever|forever
block|{
if|if
condition|(
name|test
argument_list|(
name|TOK_COMMA
argument_list|)
condition|)
block|{
if|if
condition|(
name|seenComma
condition|)
block|{
name|errorColumn
operator|=
name|symbol
argument_list|()
operator|.
name|column
expr_stmt|;
return|return
name|NFA
argument_list|()
return|;
block|}
name|seenComma
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|test
argument_list|(
name|TOK_RBRACE
argument_list|)
condition|)
block|{
break|break;
block|}
else|else
block|{
name|next
argument_list|(
name|TOK_STRING
argument_list|)
expr_stmt|;
if|if
condition|(
name|seenComma
condition|)
name|lexemAfterComma
operator|+=
name|symbol
argument_list|()
operator|.
name|lexem
expr_stmt|;
else|else
name|lexemBeforeComma
operator|+=
name|symbol
argument_list|()
operator|.
name|lexem
expr_stmt|;
block|}
block|}
name|bool
name|isNumber
init|=
literal|false
decl_stmt|;
name|int
name|min
init|=
name|lexemBeforeComma
operator|.
name|toInt
argument_list|(
operator|&
name|isNumber
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isNumber
condition|)
block|{
name|index
operator|=
name|rewind
expr_stmt|;
return|return
name|nfa
return|;
block|}
name|int
name|max
init|=
name|min
decl_stmt|;
if|if
condition|(
name|seenComma
condition|)
block|{
name|max
operator|=
name|lexemAfterComma
operator|.
name|toInt
argument_list|(
operator|&
name|isNumber
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isNumber
condition|)
block|{
name|errorColumn
operator|=
name|symbol
argument_list|()
operator|.
name|column
expr_stmt|;
return|return
name|NFA
argument_list|()
return|;
block|}
block|}
return|return
name|NFA
operator|::
name|applyQuantity
argument_list|(
name|nfa
argument_list|,
name|min
argument_list|,
name|max
argument_list|)
return|;
block|}
default|default:
name|prev
argument_list|()
expr_stmt|;
return|return
name|nfa
return|;
block|}
block|}
end_function
begin_function
DECL|function|parseSet
name|NFA
name|RE2NFA
operator|::
name|parseSet
parameter_list|()
block|{
name|QSet
argument_list|<
name|InputType
argument_list|>
name|set
decl_stmt|;
name|bool
name|negate
init|=
literal|false
decl_stmt|;
name|next
argument_list|(
name|TOK_STRING
argument_list|)
expr_stmt|;
do|do
block|{
name|Q_ASSERT
argument_list|(
name|symbol
argument_list|()
operator|.
name|lexem
operator|.
name|length
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// ###
name|QChar
name|ch
init|=
name|symbol
argument_list|()
operator|.
name|lexem
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|set
operator|.
name|isEmpty
argument_list|()
operator|&&
name|ch
operator|==
name|QLatin1Char
argument_list|(
literal|'^'
argument_list|)
condition|)
block|{
name|negate
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
comment|// look ahead for ranges like a-z
name|bool
name|rangeFound
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|test
argument_list|(
name|TOK_STRING
argument_list|)
condition|)
block|{
if|if
condition|(
name|symbol
argument_list|()
operator|.
name|lexem
operator|.
name|length
argument_list|()
operator|==
literal|1
operator|&&
name|symbol
argument_list|()
operator|.
name|lexem
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
condition|)
block|{
name|next
argument_list|(
name|TOK_STRING
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|symbol
argument_list|()
operator|.
name|lexem
operator|.
name|length
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QChar
name|last
init|=
name|symbol
argument_list|()
operator|.
name|lexem
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|.
name|unicode
argument_list|()
operator|>
name|last
operator|.
name|unicode
argument_list|()
condition|)
name|qSwap
argument_list|(
name|ch
argument_list|,
name|last
argument_list|)
expr_stmt|;
for|for
control|(
name|ushort
name|i
init|=
name|ch
operator|.
name|unicode
argument_list|()
init|;
name|i
operator|<=
name|last
operator|.
name|unicode
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|caseSensitivity
operator|==
name|Qt
operator|::
name|CaseInsensitive
condition|)
block|{
name|set
operator|.
name|insert
argument_list|(
name|QChar
argument_list|(
name|i
argument_list|)
operator|.
name|toLower
argument_list|()
operator|.
name|unicode
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|set
operator|.
name|insert
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|rangeFound
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|prev
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|rangeFound
condition|)
block|{
if|if
condition|(
name|caseSensitivity
operator|==
name|Qt
operator|::
name|CaseInsensitive
condition|)
block|{
name|set
operator|.
name|insert
argument_list|(
name|ch
operator|.
name|toLower
argument_list|()
operator|.
name|unicode
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|set
operator|.
name|insert
argument_list|(
name|ch
operator|.
name|unicode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
do|while
condition|(
name|test
argument_list|(
name|TOK_STRING
argument_list|)
condition|)
do|;
if|if
condition|(
name|negate
condition|)
block|{
name|QSet
argument_list|<
name|InputType
argument_list|>
name|negatedSet
init|=
name|maxInputSet
decl_stmt|;
name|negatedSet
operator|.
name|subtract
argument_list|(
name|set
argument_list|)
expr_stmt|;
name|set
operator|=
name|negatedSet
expr_stmt|;
block|}
return|return
name|NFA
operator|::
name|createSetNFA
argument_list|(
name|set
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|parseSet2
name|NFA
name|RE2NFA
operator|::
name|parseSet2
parameter_list|()
block|{
name|QSet
argument_list|<
name|InputType
argument_list|>
name|set
decl_stmt|;
name|bool
name|negate
init|=
literal|false
decl_stmt|;
name|QString
name|str
init|=
name|symbol
argument_list|()
operator|.
name|lexem
decl_stmt|;
comment|// strip off brackets
name|str
operator|.
name|chop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|str
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|str
operator|.
name|length
argument_list|()
condition|)
block|{
comment|// ###
name|QChar
name|ch
init|=
name|str
operator|.
name|at
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
if|if
condition|(
name|set
operator|.
name|isEmpty
argument_list|()
operator|&&
name|ch
operator|==
name|QLatin1Char
argument_list|(
literal|'^'
argument_list|)
condition|)
block|{
name|negate
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
comment|// look ahead for ranges like a-z
name|bool
name|rangeFound
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|i
operator|<
name|str
operator|.
name|length
argument_list|()
operator|-
literal|1
operator|&&
name|str
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
condition|)
block|{
operator|++
name|i
expr_stmt|;
name|QChar
name|last
init|=
name|str
operator|.
name|at
argument_list|(
name|i
operator|++
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|.
name|unicode
argument_list|()
operator|>
name|last
operator|.
name|unicode
argument_list|()
condition|)
name|qSwap
argument_list|(
name|ch
argument_list|,
name|last
argument_list|)
expr_stmt|;
for|for
control|(
name|ushort
name|i
init|=
name|ch
operator|.
name|unicode
argument_list|()
init|;
name|i
operator|<=
name|last
operator|.
name|unicode
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|caseSensitivity
operator|==
name|Qt
operator|::
name|CaseInsensitive
condition|)
block|{
name|set
operator|.
name|insert
argument_list|(
name|QChar
argument_list|(
name|i
argument_list|)
operator|.
name|toLower
argument_list|()
operator|.
name|unicode
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|set
operator|.
name|insert
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
name|rangeFound
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|rangeFound
condition|)
block|{
if|if
condition|(
name|caseSensitivity
operator|==
name|Qt
operator|::
name|CaseInsensitive
condition|)
block|{
name|set
operator|.
name|insert
argument_list|(
name|ch
operator|.
name|toLower
argument_list|()
operator|.
name|unicode
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|set
operator|.
name|insert
argument_list|(
name|ch
operator|.
name|unicode
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|negate
condition|)
block|{
name|QSet
argument_list|<
name|InputType
argument_list|>
name|negatedSet
init|=
name|maxInputSet
decl_stmt|;
name|negatedSet
operator|.
name|subtract
argument_list|(
name|set
argument_list|)
expr_stmt|;
name|set
operator|=
name|negatedSet
expr_stmt|;
block|}
return|return
name|NFA
operator|::
name|createSetNFA
argument_list|(
name|set
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|createCharNFA
name|NFA
name|RE2NFA
operator|::
name|createCharNFA
parameter_list|()
block|{
name|NFA
name|nfa
decl_stmt|;
comment|// ####
if|if
condition|(
name|caseSensitivity
operator|==
name|Qt
operator|::
name|CaseInsensitive
condition|)
block|{
name|nfa
operator|=
name|NFA
operator|::
name|createStringNFA
argument_list|(
name|symbol
argument_list|()
operator|.
name|lexem
operator|.
name|toLower
argument_list|()
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|nfa
operator|=
name|NFA
operator|::
name|createStringNFA
argument_list|(
name|symbol
argument_list|()
operator|.
name|lexem
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|nfa
return|;
block|}
end_function
begin_function
DECL|function|skipQuote
specifier|static
specifier|inline
name|int
name|skipQuote
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|,
name|int
name|pos
parameter_list|)
block|{
while|while
condition|(
name|pos
operator|<
name|str
operator|.
name|length
argument_list|()
operator|&&
name|str
operator|.
name|at
argument_list|(
name|pos
argument_list|)
operator|!=
name|QLatin1Char
argument_list|(
literal|'"'
argument_list|)
condition|)
block|{
if|if
condition|(
name|str
operator|.
name|at
argument_list|(
name|pos
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'\\'
argument_list|)
condition|)
block|{
operator|++
name|pos
expr_stmt|;
if|if
condition|(
name|pos
operator|>=
name|str
operator|.
name|length
argument_list|()
condition|)
break|break;
block|}
operator|++
name|pos
expr_stmt|;
block|}
if|if
condition|(
name|pos
operator|<
name|str
operator|.
name|length
argument_list|()
condition|)
operator|++
name|pos
expr_stmt|;
return|return
name|pos
return|;
block|}
end_function
begin_if
if|#
directive|if
literal|0
end_if
begin_endif
unit|static const char*tokStr(Token t) {     switch (t) {         case TOK_INVALID: return "TOK_INVALID";         case TOK_STRING: return "TOK_STRING";         case TOK_LBRACE: return "TOK_LBRACE";         case TOK_RBRACE: return "TOK_RBRACE";         case TOK_LBRACKET: return "TOK_LBRACKET";         case TOK_RBRACKET: return "TOK_RBRACKET";         case TOK_LPAREN: return "TOK_LPAREN";         case TOK_RPAREN: return "TOK_RPAREN";         case TOK_COMMA: return "TOK_COMMA";         case TOK_STAR: return "TOK_STAR";         case TOK_OR: return "TOK_OR";         case TOK_QUESTION: return "TOK_QUESTION";         case TOK_DOT: return "TOK_DOT";         case TOK_PLUS: return "TOK_PLUS";         case TOK_SEQUENCE: return "TOK_SEQUENCE";         case TOK_QUOTED_STRING: return "TOK_QUOTED_STRING";     }     return ""; }
endif|#
directive|endif
end_endif
begin_function
DECL|function|tokenize
name|void
name|RE2NFA
operator|::
name|tokenize
parameter_list|(
specifier|const
name|QString
modifier|&
name|input
parameter_list|)
block|{
name|symbols
operator|.
name|clear
argument_list|()
expr_stmt|;
if|#
directive|if
literal|1
name|RegExpTokenizer
name|tokenizer
argument_list|(
name|input
argument_list|)
decl_stmt|;
name|Symbol
name|sym
decl_stmt|;
name|int
name|tok
init|=
name|tokenizer
operator|.
name|lex
argument_list|()
decl_stmt|;
while|while
condition|(
name|tok
operator|!=
operator|-
literal|1
condition|)
block|{
name|Symbol
name|sym
decl_stmt|;
name|sym
operator|.
name|token
operator|=
cast|static_cast
argument_list|<
name|Token
argument_list|>
argument_list|(
name|tok
argument_list|)
expr_stmt|;
name|sym
operator|.
name|lexem
operator|=
name|input
operator|.
name|mid
argument_list|(
name|tokenizer
operator|.
name|lexemStart
argument_list|,
name|tokenizer
operator|.
name|lexemLength
argument_list|)
expr_stmt|;
if|if
condition|(
name|sym
operator|.
name|token
operator|==
name|TOK_QUOTED_STRING
condition|)
block|{
name|sym
operator|.
name|lexem
operator|.
name|chop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|sym
operator|.
name|lexem
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|sym
operator|.
name|token
operator|=
name|TOK_STRING
expr_stmt|;
block|}
if|if
condition|(
name|sym
operator|.
name|token
operator|==
name|TOK_STRING
operator|||
name|sym
operator|.
name|token
operator|==
name|TOK_SEQUENCE
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sym
operator|.
name|lexem
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|sym
operator|.
name|lexem
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|'\\'
condition|)
block|{
if|if
condition|(
name|i
operator|>=
name|sym
operator|.
name|lexem
operator|.
name|length
argument_list|()
operator|-
literal|1
condition|)
break|break;
name|QChar
name|ch
init|=
name|sym
operator|.
name|lexem
operator|.
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|ch
operator|==
name|QLatin1Char
argument_list|(
literal|'n'
argument_list|)
condition|)
block|{
name|ch
operator|=
literal|'\n'
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch
operator|==
name|QLatin1Char
argument_list|(
literal|'r'
argument_list|)
condition|)
block|{
name|ch
operator|=
literal|'\r'
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch
operator|==
name|QLatin1Char
argument_list|(
literal|'t'
argument_list|)
condition|)
block|{
name|ch
operator|=
literal|'\t'
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch
operator|==
name|QLatin1Char
argument_list|(
literal|'f'
argument_list|)
condition|)
block|{
name|ch
operator|=
literal|'\f'
expr_stmt|;
block|}
name|sym
operator|.
name|lexem
operator|.
name|replace
argument_list|(
name|i
argument_list|,
literal|2
argument_list|,
name|ch
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*         if (sym.token == TOK_SEQUENCE) {             Symbol s;             s.token = TOK_LBRACKET;             s.lexem = "[";             symbols.append(s);              for (int i = 1; i< sym.lexem.length() - 1; ++i) {                 s.token = TOK_STRING;                 s.lexem = sym.lexem.at(i);                 symbols.append(s);             }              s.token = TOK_RBRACKET;             s.lexem = "]";             symbols.append(s);              tok = tokenizer.lex();             continue;         }         */
name|symbols
operator|.
name|append
argument_list|(
name|sym
argument_list|)
expr_stmt|;
name|tok
operator|=
name|tokenizer
operator|.
name|lex
argument_list|()
expr_stmt|;
block|}
else|#
directive|else
name|int
name|pos
init|=
literal|0
decl_stmt|;
name|bool
name|insideSet
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|pos
operator|<
name|input
operator|.
name|length
argument_list|()
condition|)
block|{
name|QChar
name|ch
init|=
name|input
operator|.
name|at
argument_list|(
name|pos
argument_list|)
decl_stmt|;
name|Symbol
name|sym
decl_stmt|;
name|sym
operator|.
name|column
operator|=
name|pos
expr_stmt|;
name|sym
operator|.
name|token
operator|=
name|TOK_INVALID
expr_stmt|;
name|sym
operator|.
name|lexem
operator|=
name|QString
argument_list|(
name|ch
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|ch
operator|.
name|toLatin1
argument_list|()
condition|)
block|{
case|case
literal|'"'
case|:
block|{
if|if
condition|(
name|insideSet
condition|)
block|{
name|sym
operator|.
name|token
operator|=
name|TOK_STRING
expr_stmt|;
name|sym
operator|.
name|lexem
operator|=
name|QString
argument_list|(
name|ch
argument_list|)
expr_stmt|;
name|symbols
operator|+=
name|sym
expr_stmt|;
operator|++
name|pos
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|pos
operator|+
literal|1
operator|>=
name|input
operator|.
name|length
argument_list|()
condition|)
return|return;
name|int
name|quoteEnd
init|=
name|skipQuote
argument_list|(
name|input
argument_list|,
name|pos
operator|+
literal|1
argument_list|)
decl_stmt|;
name|sym
operator|.
name|token
operator|=
name|TOK_STRING
expr_stmt|;
name|sym
operator|.
name|lexem
operator|=
name|input
operator|.
name|mid
argument_list|(
name|pos
operator|+
literal|1
argument_list|,
name|quoteEnd
operator|-
name|pos
operator|-
literal|2
argument_list|)
expr_stmt|;
name|symbols
operator|+=
name|sym
expr_stmt|;
name|pos
operator|=
name|quoteEnd
expr_stmt|;
continue|continue;
block|}
case|case
literal|'{'
case|:
name|sym
operator|.
name|token
operator|=
operator|(
name|insideSet
condition|?
name|TOK_STRING
else|:
name|TOK_LBRACE
operator|)
expr_stmt|;
break|break;
case|case
literal|'}'
case|:
name|sym
operator|.
name|token
operator|=
operator|(
name|insideSet
condition|?
name|TOK_STRING
else|:
name|TOK_RBRACE
operator|)
expr_stmt|;
break|break;
case|case
literal|'['
case|:
name|insideSet
operator|=
literal|true
expr_stmt|;
name|sym
operator|.
name|token
operator|=
name|TOK_LBRACKET
expr_stmt|;
break|break;
case|case
literal|']'
case|:
name|insideSet
operator|=
literal|false
expr_stmt|;
name|sym
operator|.
name|token
operator|=
name|TOK_RBRACKET
expr_stmt|;
break|break;
case|case
literal|'('
case|:
name|sym
operator|.
name|token
operator|=
operator|(
name|insideSet
condition|?
name|TOK_STRING
else|:
name|TOK_LPAREN
operator|)
expr_stmt|;
break|break;
case|case
literal|')'
case|:
name|sym
operator|.
name|token
operator|=
operator|(
name|insideSet
condition|?
name|TOK_STRING
else|:
name|TOK_RPAREN
operator|)
expr_stmt|;
break|break;
case|case
literal|','
case|:
name|sym
operator|.
name|token
operator|=
operator|(
name|insideSet
condition|?
name|TOK_STRING
else|:
name|TOK_COMMA
operator|)
expr_stmt|;
break|break;
case|case
literal|'*'
case|:
name|sym
operator|.
name|token
operator|=
operator|(
name|insideSet
condition|?
name|TOK_STRING
else|:
name|TOK_STAR
operator|)
expr_stmt|;
break|break;
case|case
literal|'|'
case|:
name|sym
operator|.
name|token
operator|=
operator|(
name|insideSet
condition|?
name|TOK_STRING
else|:
name|TOK_OR
operator|)
expr_stmt|;
break|break;
case|case
literal|'?'
case|:
name|sym
operator|.
name|token
operator|=
operator|(
name|insideSet
condition|?
name|TOK_STRING
else|:
name|TOK_QUESTION
operator|)
expr_stmt|;
break|break;
case|case
literal|'.'
case|:
name|sym
operator|.
name|token
operator|=
operator|(
name|insideSet
condition|?
name|TOK_STRING
else|:
name|TOK_DOT
operator|)
expr_stmt|;
break|break;
case|case
literal|'+'
case|:
name|sym
operator|.
name|token
operator|=
operator|(
name|insideSet
condition|?
name|TOK_STRING
else|:
name|TOK_PLUS
operator|)
expr_stmt|;
break|break;
case|case
literal|'\\'
case|:
operator|++
name|pos
expr_stmt|;
if|if
condition|(
name|pos
operator|>=
name|input
operator|.
name|length
argument_list|()
condition|)
return|return;
name|ch
operator|=
name|input
operator|.
name|at
argument_list|(
name|pos
argument_list|)
expr_stmt|;
if|if
condition|(
name|ch
operator|==
name|QLatin1Char
argument_list|(
literal|'n'
argument_list|)
condition|)
block|{
name|ch
operator|=
literal|'\n'
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch
operator|==
name|QLatin1Char
argument_list|(
literal|'r'
argument_list|)
condition|)
block|{
name|ch
operator|=
literal|'\r'
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch
operator|==
name|QLatin1Char
argument_list|(
literal|'t'
argument_list|)
condition|)
block|{
name|ch
operator|=
literal|'\t'
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ch
operator|==
name|QLatin1Char
argument_list|(
literal|'f'
argument_list|)
condition|)
block|{
name|ch
operator|=
literal|'\f'
expr_stmt|;
block|}
comment|// fall through
default|default:
name|sym
operator|.
name|token
operator|=
name|TOK_STRING
expr_stmt|;
name|sym
operator|.
name|lexem
operator|=
name|QString
argument_list|(
name|ch
argument_list|)
expr_stmt|;
name|symbols
operator|+=
name|sym
expr_stmt|;
operator|++
name|pos
expr_stmt|;
continue|continue;
block|}
name|symbols
operator|+=
name|sym
expr_stmt|;
operator|++
name|pos
expr_stmt|;
block|}
endif|#
directive|endif
if|#
directive|if
literal|0
block|foreach (Symbol s, symbols) {         qDebug()<< "Tok"<< tokStr(s.token)<< "lexem"<< s.lexem;     }
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|next
name|bool
name|RE2NFA
operator|::
name|next
parameter_list|(
name|Token
name|t
parameter_list|)
block|{
if|if
condition|(
name|hasNext
argument_list|()
operator|&&
name|next
argument_list|()
operator|==
name|t
condition|)
return|return
literal|true
return|;
name|errorColumn
operator|=
name|symbol
argument_list|()
operator|.
name|column
expr_stmt|;
name|Q_ASSERT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|test
name|bool
name|RE2NFA
operator|::
name|test
parameter_list|(
name|Token
name|t
parameter_list|)
block|{
if|if
condition|(
name|index
operator|>=
name|symbols
operator|.
name|count
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|symbols
operator|.
name|at
argument_list|(
name|index
argument_list|)
operator|.
name|token
operator|==
name|t
condition|)
block|{
operator|++
name|index
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|lexemUntil
name|QString
name|RE2NFA
operator|::
name|lexemUntil
parameter_list|(
name|Token
name|t
parameter_list|)
block|{
name|QString
name|lexem
decl_stmt|;
while|while
condition|(
name|hasNext
argument_list|()
operator|&&
name|next
argument_list|()
operator|!=
name|t
condition|)
name|lexem
operator|+=
name|symbol
argument_list|()
operator|.
name|lexem
expr_stmt|;
return|return
name|lexem
return|;
block|}
end_function
end_unit
