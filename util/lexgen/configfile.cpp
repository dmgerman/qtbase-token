begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the utils of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"configfile.h"
end_include
begin_include
include|#
directive|include
file|<QFile>
end_include
begin_function
DECL|function|parse
name|ConfigFile
operator|::
name|SectionMap
name|ConfigFile
operator|::
name|parse
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
block|{
name|QFile
name|f
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|f
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
return|return
name|ConfigFile
operator|::
name|SectionMap
argument_list|()
return|;
return|return
name|parse
argument_list|(
operator|&
name|f
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|parse
name|ConfigFile
operator|::
name|SectionMap
name|ConfigFile
operator|::
name|parse
parameter_list|(
name|QIODevice
modifier|*
name|dev
parameter_list|)
block|{
name|SectionMap
name|sections
decl_stmt|;
name|SectionMap
operator|::
name|Iterator
name|currentSection
init|=
name|sections
operator|.
name|end
argument_list|()
decl_stmt|;
name|ConfigFile
operator|::
name|SectionMap
name|result
decl_stmt|;
name|int
name|currentLineNumber
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|dev
operator|->
name|atEnd
argument_list|()
condition|)
block|{
name|QString
name|line
init|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|dev
operator|->
name|readLine
argument_list|()
argument_list|)
operator|.
name|trimmed
argument_list|()
decl_stmt|;
operator|++
name|currentLineNumber
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|isEmpty
argument_list|()
operator|||
name|line
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'#'
argument_list|)
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'['
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|line
operator|.
name|endsWith
argument_list|(
literal|']'
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"Syntax error at line %d: Missing ']' at start of new section."
argument_list|,
name|currentLineNumber
argument_list|)
expr_stmt|;
return|return
name|SectionMap
argument_list|()
return|;
block|}
name|line
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|line
operator|.
name|chop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|sectionName
init|=
name|line
decl_stmt|;
name|currentSection
operator|=
name|sections
operator|.
name|insert
argument_list|(
name|sectionName
argument_list|,
name|Section
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|currentSection
operator|==
name|sections
operator|.
name|end
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"Syntax error at line %d: Entry found outside of any section."
argument_list|,
name|currentLineNumber
argument_list|)
expr_stmt|;
return|return
name|SectionMap
argument_list|()
return|;
block|}
name|Entry
name|e
decl_stmt|;
name|e
operator|.
name|lineNumber
operator|=
name|currentLineNumber
expr_stmt|;
name|int
name|equalPos
init|=
name|line
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'='
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|equalPos
operator|==
operator|-
literal|1
condition|)
block|{
name|e
operator|.
name|key
operator|=
name|line
expr_stmt|;
block|}
else|else
block|{
name|e
operator|.
name|key
operator|=
name|line
expr_stmt|;
name|e
operator|.
name|key
operator|.
name|truncate
argument_list|(
name|equalPos
argument_list|)
expr_stmt|;
name|e
operator|.
name|key
operator|=
name|e
operator|.
name|key
operator|.
name|trimmed
argument_list|()
expr_stmt|;
name|e
operator|.
name|value
operator|=
name|line
operator|.
name|mid
argument_list|(
name|equalPos
operator|+
literal|1
argument_list|)
operator|.
name|trimmed
argument_list|()
expr_stmt|;
block|}
name|currentSection
operator|->
name|append
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
return|return
name|sections
return|;
block|}
end_function
end_unit
