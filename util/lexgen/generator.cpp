begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the utils of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"generator.h"
end_include
begin_include
include|#
directive|include
file|<QFile>
end_include
begin_function
DECL|function|printDeclaration
name|void
name|Function
operator|::
name|printDeclaration
parameter_list|(
name|CodeBlock
modifier|&
name|block
parameter_list|,
specifier|const
name|QString
modifier|&
name|funcNamePrefix
parameter_list|)
specifier|const
block|{
name|block
operator|<<
operator|(
name|iline
condition|?
literal|"inline "
else|:
literal|""
operator|)
operator|<<
name|signature
argument_list|(
name|funcNamePrefix
argument_list|)
operator|<<
operator|(
name|iline
condition|?
name|QLatin1String
argument_list|(
literal|" {"
argument_list|)
else|:
name|QLatin1String
argument_list|(
literal|";"
argument_list|)
operator|)
expr_stmt|;
if|if
condition|(
operator|!
name|iline
condition|)
return|return;
name|block
operator|.
name|indent
argument_list|()
expr_stmt|;
name|QString
name|tmp
init|=
name|body
decl_stmt|;
if|if
condition|(
name|tmp
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
condition|)
name|tmp
operator|.
name|chop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|QString
name|line
decl|,
name|tmp
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
control|)
name|block
operator|<<
name|line
expr_stmt|;
name|block
operator|.
name|outdent
argument_list|()
expr_stmt|;
name|block
operator|<<
literal|"}"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|signature
name|QString
name|Function
operator|::
name|signature
parameter_list|(
specifier|const
name|QString
modifier|&
name|funcNamePrefix
parameter_list|)
specifier|const
block|{
name|QString
name|sig
decl_stmt|;
if|if
condition|(
operator|!
name|rtype
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sig
operator|+=
name|rtype
expr_stmt|;
name|sig
operator|+=
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
name|sig
operator|+=
name|funcNamePrefix
expr_stmt|;
name|sig
operator|+=
name|fname
expr_stmt|;
if|if
condition|(
name|cnst
condition|)
name|sig
operator|+=
literal|" const"
expr_stmt|;
return|return
name|sig
return|;
block|}
end_function
begin_function
DECL|function|definition
name|QString
name|Function
operator|::
name|definition
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|iline
condition|)
return|return
name|QString
argument_list|()
return|;
name|QString
name|result
decl_stmt|;
name|result
operator|+=
name|signature
argument_list|()
expr_stmt|;
name|result
operator|+=
name|QLatin1String
argument_list|(
literal|"\n{\n"
argument_list|)
expr_stmt|;
name|QString
name|tmp
init|=
name|body
decl_stmt|;
if|if
condition|(
name|tmp
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
condition|)
name|tmp
operator|.
name|chop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tmp
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
condition|)
name|tmp
operator|.
name|prepend
argument_list|(
literal|"    "
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|replace
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"\n    "
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|+=
name|tmp
expr_stmt|;
name|result
operator|+=
name|QLatin1String
argument_list|(
literal|"\n}\n"
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|printDeclaration
name|void
name|Class
operator|::
name|Section
operator|::
name|printDeclaration
parameter_list|(
specifier|const
name|Class
modifier|*
name|klass
parameter_list|,
name|CodeBlock
modifier|&
name|block
parameter_list|)
specifier|const
block|{
foreach|foreach
control|(
name|Function
name|ctor
decl|,
name|constructors
control|)
name|ctor
operator|.
name|printDeclaration
argument_list|(
name|block
argument_list|,
name|klass
operator|->
name|name
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|constructors
operator|.
name|isEmpty
argument_list|()
condition|)
name|block
operator|.
name|addNewLine
argument_list|()
expr_stmt|;
foreach|foreach
control|(
name|Function
name|func
decl|,
name|functions
control|)
name|func
operator|.
name|printDeclaration
argument_list|(
name|block
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|functions
operator|.
name|isEmpty
argument_list|()
condition|)
name|block
operator|.
name|addNewLine
argument_list|()
expr_stmt|;
foreach|foreach
control|(
name|QString
name|var
decl|,
name|variables
control|)
name|block
operator|<<
name|var
operator|<<
literal|';'
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addConstructor
name|void
name|Class
operator|::
name|addConstructor
parameter_list|(
name|Access
name|access
parameter_list|,
specifier|const
name|QString
modifier|&
name|body
parameter_list|,
specifier|const
name|QString
modifier|&
name|_args
parameter_list|)
block|{
name|Function
name|ctor
decl_stmt|;
name|QString
name|args
init|=
name|_args
decl_stmt|;
if|if
condition|(
operator|!
name|args
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'('
argument_list|)
argument_list|)
operator|&&
operator|!
name|args
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|')'
argument_list|)
argument_list|)
condition|)
block|{
name|args
operator|.
name|prepend
argument_list|(
literal|'('
argument_list|)
expr_stmt|;
name|args
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
block|}
name|ctor
operator|.
name|setName
argument_list|(
name|args
argument_list|)
expr_stmt|;
name|ctor
operator|.
name|addBody
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|sections
index|[
name|access
index|]
operator|.
name|constructors
operator|.
name|append
argument_list|(
name|ctor
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|definition
name|QString
name|Class
operator|::
name|Section
operator|::
name|definition
parameter_list|(
specifier|const
name|Class
modifier|*
name|klass
parameter_list|)
specifier|const
block|{
name|QString
name|result
decl_stmt|;
foreach|foreach
control|(
name|Function
name|ctor
decl|,
name|constructors
control|)
block|{
name|ctor
operator|.
name|setName
argument_list|(
name|klass
operator|->
name|name
argument_list|()
operator|+
literal|"::"
operator|+
name|klass
operator|->
name|name
argument_list|()
operator|+
name|ctor
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|+=
name|ctor
operator|.
name|definition
argument_list|()
expr_stmt|;
name|result
operator|+=
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
foreach|foreach
control|(
name|Function
name|func
decl|,
name|functions
control|)
block|{
if|if
condition|(
operator|!
name|func
operator|.
name|hasBody
argument_list|()
condition|)
continue|continue;
name|func
operator|.
name|setName
argument_list|(
name|klass
operator|->
name|name
argument_list|()
operator|+
literal|"::"
operator|+
name|func
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|+=
name|func
operator|.
name|definition
argument_list|()
expr_stmt|;
name|result
operator|+=
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|declaration
name|QString
name|Class
operator|::
name|declaration
parameter_list|()
specifier|const
block|{
name|CodeBlock
name|block
decl_stmt|;
name|block
operator|<<
name|QLatin1String
argument_list|(
literal|"class "
argument_list|)
operator|<<
name|cname
expr_stmt|;
name|block
operator|<<
literal|"{"
expr_stmt|;
if|if
condition|(
operator|!
name|sections
index|[
name|PublicMember
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|block
operator|<<
literal|"public:"
expr_stmt|;
name|block
operator|.
name|indent
argument_list|()
expr_stmt|;
name|sections
index|[
name|PublicMember
index|]
operator|.
name|printDeclaration
argument_list|(
name|this
argument_list|,
name|block
argument_list|)
expr_stmt|;
name|block
operator|.
name|outdent
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|sections
index|[
name|ProtectedMember
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|block
operator|<<
literal|"protected:"
expr_stmt|;
name|block
operator|.
name|indent
argument_list|()
expr_stmt|;
name|sections
index|[
name|ProtectedMember
index|]
operator|.
name|printDeclaration
argument_list|(
name|this
argument_list|,
name|block
argument_list|)
expr_stmt|;
name|block
operator|.
name|outdent
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|sections
index|[
name|PrivateMember
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|block
operator|<<
literal|"private:"
expr_stmt|;
name|block
operator|.
name|indent
argument_list|()
expr_stmt|;
name|sections
index|[
name|PrivateMember
index|]
operator|.
name|printDeclaration
argument_list|(
name|this
argument_list|,
name|block
argument_list|)
expr_stmt|;
name|block
operator|.
name|outdent
argument_list|()
expr_stmt|;
block|}
name|block
operator|<<
literal|"};"
expr_stmt|;
name|block
operator|.
name|addNewLine
argument_list|()
expr_stmt|;
return|return
name|block
operator|.
name|toString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|definition
name|QString
name|Class
operator|::
name|definition
parameter_list|()
specifier|const
block|{
return|return
name|sections
index|[
name|PrivateMember
index|]
operator|.
name|definition
argument_list|(
name|this
argument_list|)
operator|+
name|sections
index|[
name|ProtectedMember
index|]
operator|.
name|definition
argument_list|(
name|this
argument_list|)
operator|+
name|sections
index|[
name|PublicMember
index|]
operator|.
name|definition
argument_list|(
name|this
argument_list|)
return|;
block|}
end_function
begin_constructor
DECL|function|Generator
name|Generator
operator|::
name|Generator
parameter_list|(
specifier|const
name|DFA
modifier|&
name|_dfa
parameter_list|,
specifier|const
name|Config
modifier|&
name|config
parameter_list|)
member_init_list|:
name|dfa
argument_list|(
name|_dfa
argument_list|)
member_init_list|,
name|cfg
argument_list|(
name|config
argument_list|)
block|{
name|QList
argument_list|<
name|InputType
argument_list|>
name|lst
init|=
name|cfg
operator|.
name|maxInputSet
operator|.
name|toList
argument_list|()
decl_stmt|;
name|qSort
argument_list|(
name|lst
argument_list|)
expr_stmt|;
name|minInput
operator|=
name|lst
operator|.
name|first
argument_list|()
expr_stmt|;
name|maxInput
operator|=
name|lst
operator|.
name|last
argument_list|()
expr_stmt|;
name|ConfigFile
operator|::
name|Section
name|section
init|=
name|config
operator|.
name|configSections
operator|.
name|value
argument_list|(
literal|"Code Generator Options"
argument_list|)
decl_stmt|;
foreach|foreach
control|(
name|ConfigFile
operator|::
name|Entry
name|entry
decl|,
name|section
control|)
block|{
if|if
condition|(
operator|!
name|entry
operator|.
name|key
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"MapToCode["
argument_list|)
argument_list|)
operator|||
operator|!
name|entry
operator|.
name|key
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|']'
argument_list|)
argument_list|)
condition|)
continue|continue;
name|QString
name|range
init|=
name|entry
operator|.
name|key
decl_stmt|;
name|range
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
name|qstrlen
argument_list|(
literal|"MapToCode["
argument_list|)
argument_list|)
expr_stmt|;
name|range
operator|.
name|chop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|range
operator|.
name|length
argument_list|()
operator|!=
literal|3
operator|||
name|range
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|!=
name|QLatin1Char
argument_list|(
literal|'-'
argument_list|)
condition|)
block|{
name|qWarning
argument_list|(
literal|"Invalid range for char mapping function: %s"
argument_list|,
name|qPrintable
argument_list|(
name|range
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|TransitionSequence
name|seq
decl_stmt|;
name|seq
operator|.
name|first
operator|=
name|range
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|unicode
argument_list|()
expr_stmt|;
name|seq
operator|.
name|last
operator|=
name|range
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|unicode
argument_list|()
expr_stmt|;
name|seq
operator|.
name|testFunction
operator|=
name|entry
operator|.
name|value
expr_stmt|;
name|charFunctionRanges
operator|.
name|append
argument_list|(
name|seq
argument_list|)
expr_stmt|;
block|}
name|QString
name|tokenPrefix
init|=
name|section
operator|.
name|value
argument_list|(
literal|"TokenPrefix"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tokenPrefix
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dfa
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
operator|!
name|dfa
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|symbol
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|dfa
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|symbol
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"()"
argument_list|)
argument_list|)
condition|)
name|dfa
index|[
name|i
index|]
operator|.
name|symbol
operator|.
name|prepend
argument_list|(
name|tokenPrefix
argument_list|)
expr_stmt|;
block|}
name|headerFileName
operator|=
name|section
operator|.
name|value
argument_list|(
literal|"FileHeader"
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|adjacentKeys
specifier|static
specifier|inline
name|bool
name|adjacentKeys
parameter_list|(
name|int
name|left
parameter_list|,
name|int
name|right
parameter_list|)
block|{
return|return
name|left
operator|+
literal|1
operator|==
name|right
return|;
block|}
end_function
begin_comment
comment|//static inline bool adjacentKeys(const InputType&left, const InputType&right)
end_comment
begin_comment
comment|//{ return left.val + 1 == right.val; }
end_comment
begin_function
DECL|function|convertToSequences
specifier|static
name|QVector
argument_list|<
name|Generator
operator|::
name|TransitionSequence
argument_list|>
name|convertToSequences
parameter_list|(
specifier|const
name|TransitionMap
modifier|&
name|transitions
parameter_list|)
block|{
name|QVector
argument_list|<
name|Generator
operator|::
name|TransitionSequence
argument_list|>
name|sequences
decl_stmt|;
if|if
condition|(
name|transitions
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|sequences
return|;
name|QList
argument_list|<
name|InputType
argument_list|>
name|keys
init|=
name|transitions
operator|.
name|keys
argument_list|()
decl_stmt|;
name|qSort
argument_list|(
name|keys
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|Generator
operator|::
name|TransitionSequence
name|sequence
decl_stmt|;
name|sequence
operator|.
name|first
operator|=
name|keys
operator|.
name|at
argument_list|(
literal|0
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|keys
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|adjacentKeys
argument_list|(
name|keys
operator|.
name|at
argument_list|(
name|i
operator|-
literal|1
argument_list|)
argument_list|,
name|keys
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
operator|&&
name|transitions
operator|.
name|value
argument_list|(
name|keys
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
operator|==
name|transitions
operator|.
name|value
argument_list|(
name|keys
operator|.
name|at
argument_list|(
name|i
operator|-
literal|1
argument_list|)
argument_list|)
condition|)
block|{
continue|continue;
block|}
name|sequence
operator|.
name|last
operator|=
name|keys
operator|.
name|at
argument_list|(
name|i
operator|-
literal|1
argument_list|)
expr_stmt|;
name|sequence
operator|.
name|transition
operator|=
name|transitions
operator|.
name|value
argument_list|(
name|sequence
operator|.
name|last
argument_list|)
expr_stmt|;
name|sequences
operator|.
name|append
argument_list|(
name|sequence
argument_list|)
expr_stmt|;
name|sequence
operator|.
name|first
operator|=
name|keys
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|sequence
operator|.
name|last
operator|=
name|keys
operator|.
name|at
argument_list|(
name|i
operator|-
literal|1
argument_list|)
expr_stmt|;
name|sequence
operator|.
name|transition
operator|=
name|transitions
operator|.
name|value
argument_list|(
name|sequence
operator|.
name|last
argument_list|)
expr_stmt|;
name|sequences
operator|.
name|append
argument_list|(
name|sequence
argument_list|)
expr_stmt|;
return|return
name|sequences
return|;
block|}
end_function
begin_function
DECL|function|operator <<
name|QDebug
modifier|&
name|operator
name|<<
parameter_list|(
name|QDebug
modifier|&
name|debug
parameter_list|,
specifier|const
name|Generator
operator|::
name|TransitionSequence
modifier|&
name|seq
parameter_list|)
block|{
return|return
name|debug
operator|<<
literal|"[first:"
operator|<<
name|seq
operator|.
name|first
operator|<<
literal|"; last:"
operator|<<
name|seq
operator|.
name|last
operator|<<
literal|"; transition:"
operator|<<
name|seq
operator|.
name|transition
operator|<<
operator|(
name|seq
operator|.
name|testFunction
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
argument_list|()
else|:
name|QString
argument_list|(
name|QString
argument_list|(
literal|"; testfunction:"
operator|+
name|seq
operator|.
name|testFunction
argument_list|)
argument_list|)
operator|)
operator|<<
literal|"]"
return|;
block|}
end_function
begin_function
DECL|function|isSingleReferencedFinalState
name|bool
name|Generator
operator|::
name|isSingleReferencedFinalState
parameter_list|(
name|int
name|i
parameter_list|)
specifier|const
block|{
return|return
name|backReferenceMap
operator|.
name|value
argument_list|(
name|i
argument_list|)
operator|==
literal|1
operator|&&
name|dfa
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|transitions
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|dfa
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|symbol
operator|.
name|isEmpty
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|generateTransitions
name|void
name|Generator
operator|::
name|generateTransitions
parameter_list|(
name|CodeBlock
modifier|&
name|body
parameter_list|,
specifier|const
name|TransitionMap
modifier|&
name|transitions
parameter_list|)
block|{
if|if
condition|(
name|transitions
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|QVector
argument_list|<
name|TransitionSequence
argument_list|>
name|sequences
init|=
name|convertToSequences
argument_list|(
name|transitions
argument_list|)
decl_stmt|;
name|bool
name|needsCharFunction
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|charFunctionRanges
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|sequences
operator|.
name|count
argument_list|()
condition|)
block|{
specifier|const
name|TransitionSequence
modifier|&
name|seq
init|=
name|sequences
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|seq
operator|.
name|testFunction
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
operator|++
name|i
expr_stmt|;
continue|continue;
block|}
foreach|foreach
control|(
name|TransitionSequence
name|range
decl|,
name|charFunctionRanges
control|)
if|if
condition|(
name|range
operator|.
name|first
operator|>=
name|seq
operator|.
name|first
operator|&&
name|range
operator|.
name|last
operator|<=
name|seq
operator|.
name|last
condition|)
block|{
name|needsCharFunction
operator|=
literal|true
expr_stmt|;
name|TransitionSequence
name|left
decl_stmt|,
name|middle
decl_stmt|,
name|right
decl_stmt|;
name|left
operator|.
name|first
operator|=
name|seq
operator|.
name|first
expr_stmt|;
name|left
operator|.
name|last
operator|=
name|range
operator|.
name|first
operator|-
literal|1
expr_stmt|;
name|left
operator|.
name|transition
operator|=
name|seq
operator|.
name|transition
expr_stmt|;
name|middle
operator|=
name|range
expr_stmt|;
name|middle
operator|.
name|transition
operator|=
name|seq
operator|.
name|transition
expr_stmt|;
name|right
operator|.
name|first
operator|=
name|range
operator|.
name|last
operator|+
literal|1
expr_stmt|;
name|right
operator|.
name|last
operator|=
name|seq
operator|.
name|last
expr_stmt|;
name|right
operator|.
name|transition
operator|=
name|seq
operator|.
name|transition
expr_stmt|;
name|sequences
operator|.
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|left
operator|.
name|last
operator|>=
name|left
operator|.
name|first
condition|)
block|{
name|sequences
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|left
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
name|sequences
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|middle
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|right
operator|.
name|last
operator|>=
name|right
operator|.
name|first
condition|)
block|{
name|sequences
operator|.
name|insert
argument_list|(
name|i
argument_list|,
name|right
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
name|i
operator|=
operator|-
literal|1
expr_stmt|;
break|break;
block|}
operator|++
name|i
expr_stmt|;
block|}
block|}
comment|//qDebug()<< "sequence count"<< sequences.count();
comment|//qDebug()<< sequences;
if|if
condition|(
name|sequences
operator|.
name|count
argument_list|()
operator|<
literal|10
operator|||
name|sequences
operator|.
name|last
argument_list|()
operator|.
name|last
operator|==
name|maxInput
operator|||
name|needsCharFunction
condition|)
block|{
foreach|foreach
control|(
name|TransitionSequence
name|seq
decl|,
name|sequences
control|)
block|{
specifier|const
name|bool
name|embedFinalState
init|=
name|isSingleReferencedFinalState
argument_list|(
name|seq
operator|.
name|transition
argument_list|)
decl_stmt|;
name|QString
name|brace
decl_stmt|;
if|if
condition|(
name|embedFinalState
condition|)
name|brace
operator|=
literal|" {"
expr_stmt|;
if|if
condition|(
operator|!
name|seq
operator|.
name|testFunction
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|body
operator|<<
literal|"if ("
operator|<<
name|seq
operator|.
name|testFunction
operator|<<
literal|")"
operator|<<
name|brace
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|seq
operator|.
name|first
operator|==
name|seq
operator|.
name|last
condition|)
block|{
name|body
operator|<<
literal|"if (ch.unicode() == "
operator|<<
name|seq
operator|.
name|first
operator|<<
literal|")"
operator|<<
name|brace
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|seq
operator|.
name|last
operator|<
name|maxInput
condition|)
name|body
operator|<<
literal|"if (ch.unicode()>= "
operator|<<
name|seq
operator|.
name|first
operator|<<
literal|"&& ch.unicode()<= "
operator|<<
name|seq
operator|.
name|last
operator|<<
literal|")"
operator|<<
name|brace
expr_stmt|;
else|else
name|body
operator|<<
literal|"if (ch.unicode()>= "
operator|<<
name|seq
operator|.
name|first
operator|<<
literal|")"
operator|<<
name|brace
expr_stmt|;
block|}
name|body
operator|.
name|indent
argument_list|()
expr_stmt|;
if|if
condition|(
name|embedFinalState
condition|)
block|{
name|body
operator|<<
literal|"token = "
operator|<<
name|dfa
operator|.
name|at
argument_list|(
name|seq
operator|.
name|transition
argument_list|)
operator|.
name|symbol
operator|<<
literal|";"
expr_stmt|;
name|body
operator|<<
literal|"goto found;"
expr_stmt|;
name|body
operator|.
name|outdent
argument_list|()
expr_stmt|;
name|body
operator|<<
literal|"}"
expr_stmt|;
block|}
else|else
block|{
name|body
operator|<<
literal|"goto state_"
operator|<<
name|seq
operator|.
name|transition
operator|<<
literal|";"
expr_stmt|;
name|body
operator|.
name|outdent
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|QList
argument_list|<
name|InputType
argument_list|>
name|keys
init|=
name|transitions
operator|.
name|keys
argument_list|()
decl_stmt|;
name|qSort
argument_list|(
name|keys
argument_list|)
expr_stmt|;
name|body
operator|<<
literal|"switch (ch.unicode()) {"
expr_stmt|;
name|body
operator|.
name|indent
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
name|keys
operator|.
name|count
argument_list|()
condition|;
operator|++
name|k
control|)
block|{
specifier|const
name|InputType
name|key
init|=
name|keys
operator|.
name|at
argument_list|(
name|k
argument_list|)
decl_stmt|;
specifier|const
name|int
name|trans
init|=
name|transitions
operator|.
name|value
argument_list|(
name|key
argument_list|)
decl_stmt|;
name|QString
name|keyStr
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|'\\'
condition|)
name|keyStr
operator|=
name|QString
argument_list|(
literal|"\'\\\\\'"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|key
operator|>=
literal|48
operator|&&
name|key
operator|<
literal|127
condition|)
name|keyStr
operator|=
name|QString
argument_list|(
literal|'\''
argument_list|)
operator|+
name|QChar
operator|::
name|fromLatin1
argument_list|(
name|char
argument_list|(
name|key
argument_list|)
argument_list|)
operator|+
name|QChar
argument_list|(
literal|'\''
argument_list|)
expr_stmt|;
else|else
name|keyStr
operator|=
name|QString
operator|::
name|number
argument_list|(
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|k
operator|<
name|keys
operator|.
name|count
argument_list|()
operator|-
literal|1
operator|&&
name|transitions
operator|.
name|value
argument_list|(
name|keys
operator|.
name|at
argument_list|(
name|k
operator|+
literal|1
argument_list|)
argument_list|)
operator|==
name|trans
condition|)
block|{
name|body
operator|<<
literal|"case "
operator|<<
name|keyStr
operator|<<
literal|":"
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|isSingleReferencedFinalState
argument_list|(
name|trans
argument_list|)
condition|)
block|{
name|body
operator|<<
literal|"case "
operator|<<
name|keyStr
operator|<<
literal|": token = "
operator|<<
name|dfa
operator|.
name|at
argument_list|(
name|trans
argument_list|)
operator|.
name|symbol
operator|<<
literal|"; goto found;"
expr_stmt|;
block|}
else|else
block|{
name|body
operator|<<
literal|"case "
operator|<<
name|keyStr
operator|<<
literal|": goto state_"
operator|<<
name|trans
operator|<<
literal|";"
expr_stmt|;
block|}
block|}
block|}
name|body
operator|.
name|outdent
argument_list|()
expr_stmt|;
name|body
operator|<<
literal|"}"
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|generate
name|QString
name|Generator
operator|::
name|generate
parameter_list|()
block|{
name|Class
name|klass
argument_list|(
name|cfg
operator|.
name|className
argument_list|)
decl_stmt|;
name|klass
operator|.
name|addMember
argument_list|(
name|Class
operator|::
name|PublicMember
argument_list|,
literal|"QString input"
argument_list|)
expr_stmt|;
name|klass
operator|.
name|addMember
argument_list|(
name|Class
operator|::
name|PublicMember
argument_list|,
literal|"int pos"
argument_list|)
expr_stmt|;
name|klass
operator|.
name|addMember
argument_list|(
name|Class
operator|::
name|PublicMember
argument_list|,
literal|"int lexemStart"
argument_list|)
expr_stmt|;
name|klass
operator|.
name|addMember
argument_list|(
name|Class
operator|::
name|PublicMember
argument_list|,
literal|"int lexemLength"
argument_list|)
expr_stmt|;
block|{
name|CodeBlock
name|body
decl_stmt|;
name|body
operator|<<
literal|"input = inp;"
expr_stmt|;
name|body
operator|<<
literal|"pos = 0;"
expr_stmt|;
name|body
operator|<<
literal|"lexemStart = 0;"
expr_stmt|;
name|body
operator|<<
literal|"lexemLength = 0;"
expr_stmt|;
name|klass
operator|.
name|addConstructor
argument_list|(
name|Class
operator|::
name|PublicMember
argument_list|,
name|body
argument_list|,
literal|"const QString&inp"
argument_list|)
expr_stmt|;
block|}
block|{
name|Function
name|next
argument_list|(
literal|"QChar"
argument_list|,
literal|"next()"
argument_list|)
decl_stmt|;
name|next
operator|.
name|setInline
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|cfg
operator|.
name|caseSensitivity
operator|==
name|Qt
operator|::
name|CaseSensitive
condition|)
name|next
operator|.
name|addBody
argument_list|(
literal|"return (pos< input.length()) ? input.at(pos++) : QChar();"
argument_list|)
expr_stmt|;
else|else
name|next
operator|.
name|addBody
argument_list|(
literal|"return (pos< input.length()) ? input.at(pos++).toLower() : QChar();"
argument_list|)
expr_stmt|;
name|klass
operator|.
name|addMember
argument_list|(
name|Class
operator|::
name|PublicMember
argument_list|,
name|next
argument_list|)
expr_stmt|;
block|}
comment|/*     {         Function lexem("QString", "lexem()");         lexem.setConst(true);         lexem.setInline(true);         lexem.addBody("return input.mid(lexemStart, lexemLength);");         klass.addMember(Class::PublicMember, lexem);     }     */
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dfa
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|dfa
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|symbol
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"()"
argument_list|)
argument_list|)
condition|)
block|{
name|Function
name|handlerFunc
argument_list|(
literal|"int"
argument_list|,
name|dfa
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|symbol
argument_list|)
decl_stmt|;
name|klass
operator|.
name|addMember
argument_list|(
name|Class
operator|::
name|PublicMember
argument_list|,
name|handlerFunc
argument_list|)
expr_stmt|;
block|}
name|Function
name|lexFunc
decl_stmt|;
name|lexFunc
operator|.
name|setReturnType
argument_list|(
literal|"int"
argument_list|)
expr_stmt|;
name|lexFunc
operator|.
name|setName
argument_list|(
literal|"lex()"
argument_list|)
expr_stmt|;
name|CodeBlock
name|body
decl_stmt|;
name|body
operator|<<
literal|"lexemStart = pos;"
expr_stmt|;
name|body
operator|<<
literal|"lexemLength = 0;"
expr_stmt|;
name|body
operator|<<
literal|"int lastAcceptingPos = -1;"
expr_stmt|;
name|body
operator|<<
literal|"int token = -1;"
expr_stmt|;
name|body
operator|<<
literal|"QChar ch;"
expr_stmt|;
name|body
operator|.
name|addNewLine
argument_list|()
expr_stmt|;
name|backReferenceMap
operator|.
name|clear
argument_list|()
expr_stmt|;
foreach|foreach
control|(
name|State
name|s
decl|,
name|dfa
control|)
foreach|foreach
control|(
name|int
name|state
decl|,
name|s
operator|.
name|transitions
control|)
name|backReferenceMap
index|[
name|state
index|]
operator|++
expr_stmt|;
name|bool
name|haveSingleReferencedFinalState
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dfa
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|isSingleReferencedFinalState
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|haveSingleReferencedFinalState
operator|=
literal|true
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|body
operator|<<
literal|"state_"
operator|<<
name|i
operator|<<
literal|":"
expr_stmt|;
else|else
name|body
operator|<<
literal|"// initial state"
expr_stmt|;
name|body
operator|.
name|indent
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|dfa
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|symbol
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|body
operator|<<
literal|"lastAcceptingPos = pos;"
expr_stmt|;
name|body
operator|<<
literal|"token = "
operator|<<
name|dfa
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|symbol
operator|<<
literal|";"
expr_stmt|;
block|}
name|body
operator|.
name|outdent
argument_list|()
expr_stmt|;
name|body
operator|.
name|indent
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|dfa
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|transitions
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|body
operator|<<
literal|"ch = next();"
expr_stmt|;
name|generateTransitions
argument_list|(
name|body
argument_list|,
name|dfa
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|transitions
argument_list|)
expr_stmt|;
block|}
name|body
operator|<<
literal|"goto out;"
expr_stmt|;
name|body
operator|.
name|outdent
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|haveSingleReferencedFinalState
condition|)
block|{
name|body
operator|<<
literal|"found:"
expr_stmt|;
name|body
operator|<<
literal|"lastAcceptingPos = pos;"
expr_stmt|;
name|body
operator|.
name|addNewLine
argument_list|()
expr_stmt|;
block|}
name|body
operator|<<
literal|"out:"
expr_stmt|;
name|body
operator|<<
literal|"if (lastAcceptingPos != -1) {"
expr_stmt|;
name|body
operator|.
name|indent
argument_list|()
expr_stmt|;
name|body
operator|<<
literal|"lexemLength = lastAcceptingPos - lexemStart;"
expr_stmt|;
name|body
operator|<<
literal|"pos = lastAcceptingPos;"
expr_stmt|;
name|body
operator|.
name|outdent
argument_list|()
expr_stmt|;
name|body
operator|<<
literal|"}"
expr_stmt|;
name|body
operator|<<
literal|"return token;"
expr_stmt|;
name|lexFunc
operator|.
name|addBody
argument_list|(
name|body
argument_list|)
expr_stmt|;
name|klass
operator|.
name|addMember
argument_list|(
name|Class
operator|::
name|PublicMember
argument_list|,
name|lexFunc
argument_list|)
expr_stmt|;
name|QString
name|header
decl_stmt|;
name|QFile
name|headerFile
argument_list|(
name|headerFileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|headerFileName
operator|.
name|isEmpty
argument_list|()
operator|&&
name|headerFile
operator|.
name|exists
argument_list|()
operator|&&
name|headerFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|header
operator|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|headerFile
operator|.
name|readAll
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|header
operator|+=
name|QLatin1String
argument_list|(
literal|"// auto generated. DO NOT EDIT.\n"
argument_list|)
expr_stmt|;
return|return
name|header
operator|+
name|klass
operator|.
name|declaration
argument_list|()
operator|+
name|klass
operator|.
name|definition
argument_list|()
return|;
block|}
end_function
end_unit
