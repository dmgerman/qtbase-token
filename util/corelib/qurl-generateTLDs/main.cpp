begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the utils of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore>
end_include
begin_function
DECL|function|utf8encode
specifier|static
name|QString
name|utf8encode
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|array
parameter_list|)
comment|// turns e.g. tranÃ¸y.no to tran\xc3\xb8y.no
block|{
name|QString
name|result
decl_stmt|;
name|result
operator|.
name|reserve
argument_list|(
name|array
operator|.
name|length
argument_list|()
operator|+
name|array
operator|.
name|length
argument_list|()
operator|/
literal|3
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|array
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|char
name|c
init|=
name|array
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// if char is non-ascii, escape it
if|if
condition|(
name|c
operator|<
literal|0x20
operator|||
name|uchar
argument_list|(
name|c
argument_list|)
operator|>=
literal|0x7f
condition|)
block|{
name|result
operator|+=
literal|"\\x"
operator|+
name|QString
operator|::
name|number
argument_list|(
name|uchar
argument_list|(
name|c
argument_list|)
argument_list|,
literal|16
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// if previous char was escaped, we need to make sure the next char is not
comment|// interpreted as part of the hex value, e.g. "Ã¤c.com" -> "\xabc.com"; this
comment|// should be "\xab""c.com"
name|QRegExp
name|hexEscape
argument_list|(
literal|"\\\\x[a-fA-F0-9][a-fA-F0-9]$"
argument_list|)
decl_stmt|;
name|bool
name|isHexChar
init|=
operator|(
operator|(
name|c
operator|>=
literal|'0'
operator|&&
name|c
operator|<=
literal|'9'
operator|)
operator|||
operator|(
name|c
operator|>=
literal|'a'
operator|&&
name|c
operator|<=
literal|'f'
operator|)
operator|||
operator|(
name|c
operator|>=
literal|'A'
operator|&&
name|c
operator|<=
literal|'F'
operator|)
operator|)
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|contains
argument_list|(
name|hexEscape
argument_list|)
operator|&&
name|isHexChar
condition|)
name|result
operator|+=
literal|"\"\""
expr_stmt|;
name|result
operator|+=
name|c
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
modifier|*
name|argv
parameter_list|)
block|{
name|QCoreApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
if|if
condition|(
name|argc
operator|<
literal|3
condition|)
block|{
name|printf
argument_list|(
literal|"\nusage: %s inputFile outputFile\n\n"
argument_list|,
name|argv
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"'inputFile' should be a list of effective TLDs, one per line,\n"
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"as obtained from http://publicsuffix.org . To create indices and data file\n"
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"file, do the following:\n\n"
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"       wget http://mxr.mozilla.org/mozilla-central/source/netwerk/dns/effective_tld_names.dat?raw=1 -O effective_tld_names.dat\n"
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"       grep '^[^\\/\\/]' effective_tld_names.dat> effective_tld_names.dat.trimmed\n"
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"       %s effective_tld_names.dat.trimmed effective_tld_names.dat.qt\n\n"
argument_list|,
name|argv
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"Now copy the data from effective_tld_names.dat.qt to the file src/corelib/io/qurltlds_p.h in your Qt repo\n\n"
argument_list|)
expr_stmt|;
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|QFile
name|file
argument_list|(
name|argv
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|QFile
name|outFile
argument_list|(
name|argv
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|outFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|QByteArray
name|outIndicesBufferBA
decl_stmt|;
name|QBuffer
name|outIndicesBuffer
argument_list|(
operator|&
name|outIndicesBufferBA
argument_list|)
decl_stmt|;
name|outIndicesBuffer
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|QByteArray
name|outDataBufferBA
decl_stmt|;
name|QBuffer
name|outDataBuffer
argument_list|(
operator|&
name|outDataBufferBA
argument_list|)
decl_stmt|;
name|outDataBuffer
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|int
name|lineCount
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|!
name|file
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|file
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|lineCount
operator|++
expr_stmt|;
block|}
name|file
operator|.
name|reset
argument_list|()
expr_stmt|;
name|QVector
argument_list|<
name|QString
argument_list|>
name|strings
argument_list|(
name|lineCount
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|file
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|QString
name|s
init|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|file
operator|.
name|readLine
argument_list|()
argument_list|)
decl_stmt|;
name|QString
name|st
init|=
name|s
operator|.
name|trimmed
argument_list|()
decl_stmt|;
name|int
name|num
init|=
name|qt_hash
argument_list|(
name|st
argument_list|)
operator|%
name|lineCount
decl_stmt|;
name|QString
name|utf8String
init|=
name|utf8encode
argument_list|(
name|st
operator|.
name|toUtf8
argument_list|()
argument_list|)
decl_stmt|;
comment|// for domain 1.com, we could get something like
comment|// a.com\01.com, which would be interpreted as octal 01,
comment|// so we need to separate those strings with quotes
name|QRegExp
name|regexpOctalEscape
argument_list|(
name|QLatin1String
argument_list|(
literal|"^[0-9]"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|strings
operator|.
name|at
argument_list|(
name|num
argument_list|)
operator|.
name|isEmpty
argument_list|()
operator|&&
name|st
operator|.
name|contains
argument_list|(
name|regexpOctalEscape
argument_list|)
condition|)
name|strings
index|[
name|num
index|]
operator|.
name|append
argument_list|(
literal|"\"\""
argument_list|)
expr_stmt|;
name|strings
index|[
name|num
index|]
operator|.
name|append
argument_list|(
name|utf8String
argument_list|)
expr_stmt|;
name|strings
index|[
name|num
index|]
operator|.
name|append
argument_list|(
literal|"\\0"
argument_list|)
expr_stmt|;
block|}
name|outIndicesBuffer
operator|.
name|write
argument_list|(
literal|"static const quint16 tldCount = "
argument_list|)
expr_stmt|;
name|outIndicesBuffer
operator|.
name|write
argument_list|(
name|QByteArray
operator|::
name|number
argument_list|(
name|lineCount
argument_list|)
argument_list|)
expr_stmt|;
name|outIndicesBuffer
operator|.
name|write
argument_list|(
literal|";\n"
argument_list|)
expr_stmt|;
name|outIndicesBuffer
operator|.
name|write
argument_list|(
literal|"static const quint16 tldIndices["
argument_list|)
expr_stmt|;
comment|//    outIndicesBuffer.write(QByteArray::number(lineCount+1)); // not needed
name|outIndicesBuffer
operator|.
name|write
argument_list|(
literal|"] = {\n"
argument_list|)
expr_stmt|;
name|int
name|utf8Size
init|=
literal|0
decl_stmt|;
comment|//    int charSize = 0;
for|for
control|(
name|int
name|a
init|=
literal|0
init|;
name|a
operator|<
name|lineCount
condition|;
name|a
operator|++
control|)
block|{
name|bool
name|lineIsEmpty
init|=
name|strings
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|lineIsEmpty
condition|)
block|{
name|strings
index|[
name|a
index|]
operator|.
name|prepend
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
name|strings
index|[
name|a
index|]
operator|.
name|append
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
name|int
name|zeroCount
init|=
name|strings
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|.
name|count
argument_list|(
name|QLatin1String
argument_list|(
literal|"\\0"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|utf8CharsCount
init|=
name|strings
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|.
name|count
argument_list|(
name|QLatin1String
argument_list|(
literal|"\\x"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|quoteCount
init|=
name|strings
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|.
name|count
argument_list|(
literal|'"'
argument_list|)
decl_stmt|;
name|outDataBuffer
operator|.
name|write
argument_list|(
name|strings
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|lineIsEmpty
condition|)
name|outDataBuffer
operator|.
name|write
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|outIndicesBuffer
operator|.
name|write
argument_list|(
name|QByteArray
operator|::
name|number
argument_list|(
name|utf8Size
argument_list|)
argument_list|)
expr_stmt|;
name|outIndicesBuffer
operator|.
name|write
argument_list|(
literal|",\n"
argument_list|)
expr_stmt|;
name|utf8Size
operator|+=
name|strings
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|.
name|count
argument_list|()
operator|-
operator|(
name|zeroCount
operator|+
name|quoteCount
operator|+
name|utf8CharsCount
operator|*
literal|3
operator|)
expr_stmt|;
comment|//        charSize += strings.at(a).count();
block|}
name|outIndicesBuffer
operator|.
name|write
argument_list|(
name|QByteArray
operator|::
name|number
argument_list|(
name|utf8Size
argument_list|)
argument_list|)
expr_stmt|;
name|outIndicesBuffer
operator|.
name|write
argument_list|(
literal|"};\n"
argument_list|)
expr_stmt|;
name|outIndicesBuffer
operator|.
name|close
argument_list|()
expr_stmt|;
name|outFile
operator|.
name|write
argument_list|(
name|outIndicesBufferBA
argument_list|)
expr_stmt|;
name|outDataBuffer
operator|.
name|close
argument_list|()
expr_stmt|;
name|outFile
operator|.
name|write
argument_list|(
literal|"\nstatic const char tldData["
argument_list|)
expr_stmt|;
comment|//    outFile.write(QByteArray::number(charSize)); // not needed
name|outFile
operator|.
name|write
argument_list|(
literal|"] = {\n"
argument_list|)
expr_stmt|;
name|outFile
operator|.
name|write
argument_list|(
name|outDataBufferBA
argument_list|)
expr_stmt|;
name|outFile
operator|.
name|write
argument_list|(
literal|"};\n"
argument_list|)
expr_stmt|;
name|outFile
operator|.
name|close
argument_list|()
expr_stmt|;
name|printf
argument_list|(
literal|"data generated to %s . Now copy the data from this file to src/corelib/io/qurltlds_p.h in your Qt repo\n"
argument_list|,
name|argv
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
end_unit
