begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the utils of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qtextcodec.h>
end_include
begin_include
include|#
directive|include
file|<qbytearray.h>
end_include
begin_include
include|#
directive|include
file|<qstring.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qfile.h>
end_include
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<qset.h>
end_include
begin_struct
DECL|function|Map
DECL|function|Map
DECL|member|uc
DECL|member|b5
struct|struct
name|Map
block|{
name|Map
parameter_list|(
name|uint
name|u
parameter_list|,
name|uint
name|b
parameter_list|)
member_init_list|:
name|uc
argument_list|(
name|u
argument_list|)
member_init_list|,
name|b5
argument_list|(
name|b
argument_list|)
block|{}
name|uint
name|uc
decl_stmt|;
name|uint
name|b5
decl_stmt|;
block|}
struct|;
end_struct
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
modifier|*
name|argv
parameter_list|)
block|{
name|QCoreApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|QTextCodec
modifier|*
name|big5
init|=
name|QTextCodec
operator|::
name|codecForName
argument_list|(
literal|"Big5-hkscs"
argument_list|)
decl_stmt|;
if|#
directive|if
literal|0
block|QFile f("/home/lars/dev/qt-4.0/util/unicode/data/big5-eten.txt");     f.open(QFile::ReadOnly);      while (!f.atEnd()) {         QByteArray line = f.readLine();         if (line.startsWith("#"))             continue;         line.replace("0x", "");         line.replace("U+", "");         line.replace("\t", " ");         line = line.simplified();         QList<QByteArray> split = line.split(' ');         bool ok;         int b5 = split.at(0).toInt(&ok, 16);         Q_ASSERT(ok);         int uc = split.at(1).toInt(&ok, 16);         Q_ASSERT(ok);         if (b5< 0x100)             continue;
else|#
directive|else
name|QFile
name|f
argument_list|(
literal|":/BIG5"
argument_list|)
decl_stmt|;
name|f
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|f
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|QByteArray
name|line
init|=
name|f
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"CHARMAP"
argument_list|)
condition|)
break|break;
block|}
name|QSet
argument_list|<
name|uint
argument_list|>
name|b5_ok
decl_stmt|;
name|QSet
argument_list|<
name|uint
argument_list|>
name|uc_ok
decl_stmt|;
name|QList
argument_list|<
name|Map
argument_list|>
name|b5_to_uc_map
decl_stmt|;
name|QList
argument_list|<
name|Map
argument_list|>
name|uc_to_b5_map
decl_stmt|;
while|while
condition|(
operator|!
name|f
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|QByteArray
name|line
init|=
name|f
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"%"
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"END CHARMAP"
argument_list|)
condition|)
break|break;
name|line
operator|.
name|replace
argument_list|(
literal|"/x"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|line
operator|.
name|replace
argument_list|(
literal|"<U"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|line
operator|.
name|replace
argument_list|(
literal|">"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|line
operator|.
name|replace
argument_list|(
literal|"\t"
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
name|line
operator|=
name|line
operator|.
name|simplified
argument_list|()
expr_stmt|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|split
init|=
name|line
operator|.
name|split
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
name|bool
name|ok
decl_stmt|;
name|int
name|b5
init|=
name|split
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|ok
argument_list|)
expr_stmt|;
name|int
name|uc
init|=
name|split
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|ok
argument_list|)
expr_stmt|;
if|if
condition|(
name|b5
argument_list|<
literal|0x100
operator|||
name|uc
argument_list|>
literal|0xffff
condition|)
continue|continue;
endif|#
directive|endif
comment|//         qDebug()<< hex<< "testing: '"<< b5<< "' - '"<< uc<< "'";
name|QByteArray
name|ba
decl_stmt|;
name|ba
operator|+=
call|(
name|char
call|)
argument_list|(
name|uchar
argument_list|)
argument_list|(
name|b5
operator|>>
literal|8
argument_list|)
expr_stmt|;
name|ba
operator|+=
call|(
name|char
call|)
argument_list|(
name|uchar
argument_list|)
argument_list|(
name|b5
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|QString
name|s
init|=
name|big5
operator|->
name|toUnicode
argument_list|(
name|ba
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|s
operator|.
name|length
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QString
name|s2
decl_stmt|;
name|s2
operator|=
name|QChar
argument_list|(
name|uc
argument_list|)
expr_stmt|;
name|ba
operator|=
name|big5
operator|->
name|fromUnicode
argument_list|(
name|s2
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|ba
operator|.
name|length
argument_list|()
operator|<=
literal|2
argument_list|)
expr_stmt|;
name|int
name|round
decl_stmt|;
if|if
condition|(
name|ba
operator|.
name|length
argument_list|()
operator|==
literal|1
condition|)
name|round
operator|=
operator|(
name|int
operator|)
operator|(
name|uchar
operator|)
name|ba
index|[
literal|0
index|]
expr_stmt|;
else|else
name|round
operator|=
operator|(
operator|(
name|int
operator|)
operator|(
name|uchar
operator|)
name|ba
index|[
literal|0
index|]
operator|<<
literal|8
operator|)
operator|+
operator|(
name|int
operator|)
operator|(
name|uchar
operator|)
name|ba
index|[
literal|1
index|]
expr_stmt|;
if|if
condition|(
name|b5
operator|!=
name|round
condition|)
name|uc_to_b5_map
operator|+=
name|Map
argument_list|(
name|uc
argument_list|,
name|b5
argument_list|)
expr_stmt|;
else|else
name|b5_ok
operator|.
name|insert
argument_list|(
name|b5
argument_list|)
expr_stmt|;
if|if
condition|(
name|s
index|[
literal|0
index|]
operator|.
name|unicode
argument_list|()
operator|!=
name|uc
condition|)
name|b5_to_uc_map
operator|+=
name|Map
argument_list|(
name|uc
argument_list|,
name|b5
argument_list|)
expr_stmt|;
else|else
name|uc_ok
operator|.
name|insert
argument_list|(
name|uc
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|list
decl_stmt|;
foreach|foreach
control|(
name|Map
name|m
decl|,
name|b5_to_uc_map
control|)
block|{
if|if
condition|(
operator|!
name|uc_ok
operator|.
name|contains
argument_list|(
name|m
operator|.
name|b5
argument_list|)
condition|)
name|list
operator|+=
name|QByteArray
argument_list|(
literal|"    { 0x"
operator|+
name|QByteArray
operator|::
name|number
argument_list|(
name|m
operator|.
name|b5
argument_list|,
literal|16
argument_list|)
operator|+
literal|", 0x"
operator|+
name|QByteArray
operator|::
name|number
argument_list|(
name|m
operator|.
name|uc
argument_list|,
literal|16
argument_list|)
operator|+
literal|" }\n"
argument_list|)
expr_stmt|;
empty_stmt|;
block|}
name|QByteArray
name|ba
decl_stmt|;
name|qSort
argument_list|(
name|list
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|QByteArray
name|a
decl|,
name|list
control|)
name|ba
operator|+=
name|a
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"struct B5Map b5_to_uc_map = {\n"
operator|<<
name|ba
operator|+
literal|"\n};"
expr_stmt|;
name|list
operator|=
name|QList
argument_list|<
name|QByteArray
argument_list|>
argument_list|()
expr_stmt|;
foreach|foreach
control|(
name|Map
name|m
decl|,
name|uc_to_b5_map
control|)
if|if
condition|(
operator|!
name|b5_ok
operator|.
name|contains
argument_list|(
name|m
operator|.
name|uc
argument_list|)
condition|)
name|list
operator|+=
name|QByteArray
argument_list|(
literal|"    { 0x"
operator|+
name|QByteArray
operator|::
name|number
argument_list|(
name|m
operator|.
name|uc
argument_list|,
literal|16
argument_list|)
operator|+
literal|", 0x"
operator|+
name|QByteArray
operator|::
name|number
argument_list|(
name|m
operator|.
name|b5
argument_list|,
literal|16
argument_list|)
operator|+
literal|" }\n"
argument_list|)
expr_stmt|;
empty_stmt|;
name|ba
operator|=
name|QByteArray
argument_list|()
expr_stmt|;
name|qSort
argument_list|(
name|list
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|QByteArray
name|a
decl|,
name|list
control|)
name|ba
operator|+=
name|a
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"struct B5Map uc_to_b5_map = {\n"
operator|<<
name|ba
operator|+
literal|"\n};"
expr_stmt|;
block|}
end_function
end_unit
