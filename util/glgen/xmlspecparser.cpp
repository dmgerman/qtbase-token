begin_unit
begin_comment
comment|/*************************************************************************** ** ** Copyright (C) 2014 Klaralvdalens Datakonsult AB (KDAB) ** Contact: http://www.qt-project.org/legal ** ** This file is part of the utilities of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"xmlspecparser.h"
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<QFile>
end_include
begin_include
include|#
directive|include
file|<QRegularExpression>
end_include
begin_include
include|#
directive|include
file|<QStringList>
end_include
begin_include
include|#
directive|include
file|<QTextStream>
end_include
begin_include
include|#
directive|include
file|<QXmlStreamReader>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|SPECPARSER_DEBUG
end_ifdef
begin_define
DECL|macro|qXmlSpecParserDebug
define|#
directive|define
name|qXmlSpecParserDebug
value|qDebug
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|qXmlSpecParserDebug
define|#
directive|define
name|qXmlSpecParserDebug
value|QT_NO_QDEBUG_MACRO
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|parse
name|bool
name|XmlSpecParser
operator|::
name|parse
parameter_list|()
block|{
comment|// Open up a stream on the actual OpenGL function spec file
name|QFile
name|file
argument_list|(
name|specFileName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Failed to open spec file:"
operator|<<
name|specFileName
argument_list|()
operator|<<
literal|"Aborting"
expr_stmt|;
return|return
literal|false
return|;
block|}
name|QXmlStreamReader
name|stream
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
comment|// Extract the info that we need
name|parseFunctions
argument_list|(
name|stream
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|parseParam
name|void
name|XmlSpecParser
operator|::
name|parseParam
parameter_list|(
name|QXmlStreamReader
modifier|&
name|stream
parameter_list|,
name|Function
modifier|&
name|func
parameter_list|)
block|{
name|Argument
name|arg
decl_stmt|;
name|arg
operator|.
name|type
operator|=
name|QString
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|stream
operator|.
name|isEndDocument
argument_list|()
condition|)
block|{
name|stream
operator|.
name|readNext
argument_list|()
expr_stmt|;
if|if
condition|(
name|stream
operator|.
name|isStartElement
argument_list|()
condition|)
block|{
name|QString
name|tag
init|=
name|stream
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
literal|"ptype"
condition|)
block|{
if|if
condition|(
name|stream
operator|.
name|readNext
argument_list|()
operator|==
name|QXmlStreamReader
operator|::
name|Characters
condition|)
name|arg
operator|.
name|type
operator|.
name|append
argument_list|(
name|stream
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tag
operator|==
literal|"name"
condition|)
block|{
if|if
condition|(
name|stream
operator|.
name|readNext
argument_list|()
operator|==
name|QXmlStreamReader
operator|::
name|Characters
condition|)
name|arg
operator|.
name|name
operator|=
name|stream
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|trimmed
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|stream
operator|.
name|isCharacters
argument_list|()
condition|)
block|{
name|arg
operator|.
name|type
operator|.
name|append
argument_list|(
name|stream
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|stream
operator|.
name|isEndElement
argument_list|()
condition|)
block|{
name|QString
name|tag
init|=
name|stream
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
literal|"param"
condition|)
block|{
comment|// compatibility with old spec
name|QRegularExpression
name|typeRegExp
argument_list|(
literal|"(const )?(.+)(?<!\\*)((?:(?!\\*$)\\*)*)(\\*)?"
argument_list|)
decl_stmt|;
comment|// remove extra whitespace
name|arg
operator|.
name|type
operator|=
name|arg
operator|.
name|type
operator|.
name|trimmed
argument_list|()
expr_stmt|;
comment|// set default
name|arg
operator|.
name|direction
operator|=
name|Argument
operator|::
name|In
expr_stmt|;
name|arg
operator|.
name|mode
operator|=
name|Argument
operator|::
name|Value
expr_stmt|;
name|QRegularExpressionMatch
name|exp
init|=
name|typeRegExp
operator|.
name|match
argument_list|(
name|arg
operator|.
name|type
argument_list|)
decl_stmt|;
if|if
condition|(
name|exp
operator|.
name|hasMatch
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|exp
operator|.
name|captured
argument_list|(
literal|4
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|arg
operator|.
name|mode
operator|=
name|Argument
operator|::
name|Reference
expr_stmt|;
if|if
condition|(
name|exp
operator|.
name|captured
argument_list|(
literal|1
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
name|arg
operator|.
name|direction
operator|=
name|Argument
operator|::
name|Out
expr_stmt|;
block|}
name|arg
operator|.
name|type
operator|=
name|exp
operator|.
name|captured
argument_list|(
literal|2
argument_list|)
operator|+
name|exp
operator|.
name|captured
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
block|}
block|}
comment|// remove any excess whitespace
name|arg
operator|.
name|type
operator|=
name|arg
operator|.
name|type
operator|.
name|trimmed
argument_list|()
expr_stmt|;
name|arg
operator|.
name|name
operator|=
name|arg
operator|.
name|name
operator|.
name|trimmed
argument_list|()
expr_stmt|;
comment|// maybe some checks?
name|func
operator|.
name|arguments
operator|.
name|append
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|parseCommand
name|void
name|XmlSpecParser
operator|::
name|parseCommand
parameter_list|(
name|QXmlStreamReader
modifier|&
name|stream
parameter_list|)
block|{
name|Function
name|func
decl_stmt|;
while|while
condition|(
operator|!
name|stream
operator|.
name|isEndDocument
argument_list|()
condition|)
block|{
name|stream
operator|.
name|readNext
argument_list|()
expr_stmt|;
if|if
condition|(
name|stream
operator|.
name|isStartElement
argument_list|()
condition|)
block|{
name|QString
name|tag
init|=
name|stream
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
literal|"proto"
condition|)
block|{
while|while
condition|(
operator|!
name|stream
operator|.
name|isEndDocument
argument_list|()
condition|)
block|{
name|stream
operator|.
name|readNext
argument_list|()
expr_stmt|;
if|if
condition|(
name|stream
operator|.
name|isStartElement
argument_list|()
operator|&&
operator|(
name|stream
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|==
literal|"name"
operator|)
condition|)
block|{
if|if
condition|(
name|stream
operator|.
name|readNext
argument_list|()
operator|==
name|QXmlStreamReader
operator|::
name|Characters
condition|)
name|func
operator|.
name|name
operator|=
name|stream
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|stream
operator|.
name|isCharacters
argument_list|()
condition|)
block|{
name|func
operator|.
name|returnType
operator|.
name|append
argument_list|(
name|stream
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|stream
operator|.
name|isEndElement
argument_list|()
operator|&&
operator|(
name|stream
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|==
literal|"proto"
operator|)
condition|)
block|{
break|break;
block|}
block|}
block|}
if|if
condition|(
name|tag
operator|==
literal|"param"
condition|)
name|parseParam
argument_list|(
name|stream
argument_list|,
name|func
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|stream
operator|.
name|isEndElement
argument_list|()
condition|)
block|{
name|QString
name|tag
init|=
name|stream
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
literal|"command"
condition|)
break|break;
block|}
block|}
comment|// maybe checks?
name|func
operator|.
name|returnType
operator|=
name|func
operator|.
name|returnType
operator|.
name|trimmed
argument_list|()
expr_stmt|;
comment|// for compatibility with old spec
if|if
condition|(
name|func
operator|.
name|name
operator|.
name|startsWith
argument_list|(
literal|"gl"
argument_list|)
condition|)
name|func
operator|.
name|name
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|m_functionList
operator|.
name|insert
argument_list|(
name|func
operator|.
name|name
argument_list|,
name|func
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|parseCommands
name|void
name|XmlSpecParser
operator|::
name|parseCommands
parameter_list|(
name|QXmlStreamReader
modifier|&
name|stream
parameter_list|)
block|{
while|while
condition|(
operator|!
name|stream
operator|.
name|isEndDocument
argument_list|()
condition|)
block|{
name|stream
operator|.
name|readNext
argument_list|()
expr_stmt|;
if|if
condition|(
name|stream
operator|.
name|isStartElement
argument_list|()
condition|)
block|{
name|QString
name|tag
init|=
name|stream
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
literal|"command"
condition|)
name|parseCommand
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|stream
operator|.
name|isEndElement
argument_list|()
condition|)
block|{
name|QString
name|tag
init|=
name|stream
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
literal|"commands"
condition|)
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|parseRequire
name|void
name|XmlSpecParser
operator|::
name|parseRequire
parameter_list|(
name|QXmlStreamReader
modifier|&
name|stream
parameter_list|,
name|FunctionList
modifier|&
name|funcs
parameter_list|)
block|{
while|while
condition|(
operator|!
name|stream
operator|.
name|isEndDocument
argument_list|()
condition|)
block|{
name|stream
operator|.
name|readNext
argument_list|()
expr_stmt|;
if|if
condition|(
name|stream
operator|.
name|isStartElement
argument_list|()
condition|)
block|{
name|QString
name|tag
init|=
name|stream
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
literal|"command"
condition|)
block|{
name|QString
name|func
init|=
name|stream
operator|.
name|attributes
argument_list|()
operator|.
name|value
argument_list|(
literal|"name"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// for compatibility with old spec
if|if
condition|(
name|func
operator|.
name|startsWith
argument_list|(
literal|"gl"
argument_list|)
condition|)
name|func
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|funcs
operator|.
name|append
argument_list|(
name|m_functionList
index|[
name|func
index|]
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|stream
operator|.
name|isEndElement
argument_list|()
condition|)
block|{
name|QString
name|tag
init|=
name|stream
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
literal|"require"
condition|)
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|parseRemoveCore
name|void
name|XmlSpecParser
operator|::
name|parseRemoveCore
parameter_list|(
name|QXmlStreamReader
modifier|&
name|stream
parameter_list|)
block|{
while|while
condition|(
operator|!
name|stream
operator|.
name|isEndDocument
argument_list|()
condition|)
block|{
name|stream
operator|.
name|readNext
argument_list|()
expr_stmt|;
if|if
condition|(
name|stream
operator|.
name|isStartElement
argument_list|()
condition|)
block|{
name|QString
name|tag
init|=
name|stream
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
literal|"command"
condition|)
block|{
name|QString
name|func
init|=
name|stream
operator|.
name|attributes
argument_list|()
operator|.
name|value
argument_list|(
literal|"name"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
comment|// for compatibility with old spec
if|if
condition|(
name|func
operator|.
name|startsWith
argument_list|(
literal|"gl"
argument_list|)
condition|)
name|func
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// go through list of version and mark as incompatible
name|Q_FOREACH
argument_list|(
argument|const Version& v
argument_list|,
argument|m_versions
argument_list|)
block|{
comment|// Combine version and profile for this subset of functions
name|VersionProfile
name|version
decl_stmt|;
name|version
operator|.
name|version
operator|=
name|v
expr_stmt|;
name|version
operator|.
name|profile
operator|=
name|VersionProfile
operator|::
name|CoreProfile
expr_stmt|;
comment|// Fetch the functions and add to collection for this class
name|Q_FOREACH
argument_list|(
argument|const Function& f
argument_list|,
argument|m_functions.values(version)
argument_list|)
block|{
if|if
condition|(
name|f
operator|.
name|name
operator|==
name|func
condition|)
block|{
name|VersionProfile
name|newVersion
decl_stmt|;
name|newVersion
operator|.
name|version
operator|=
name|v
expr_stmt|;
name|newVersion
operator|.
name|profile
operator|=
name|VersionProfile
operator|::
name|CompatibilityProfile
expr_stmt|;
name|m_functions
operator|.
name|insert
argument_list|(
name|newVersion
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|m_functions
operator|.
name|remove
argument_list|(
name|version
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|stream
operator|.
name|isEndElement
argument_list|()
condition|)
block|{
name|QString
name|tag
init|=
name|stream
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
literal|"remove"
condition|)
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|parseFeature
name|void
name|XmlSpecParser
operator|::
name|parseFeature
parameter_list|(
name|QXmlStreamReader
modifier|&
name|stream
parameter_list|)
block|{
name|QRegularExpression
name|versionRegExp
argument_list|(
literal|"(\\d).(\\d)"
argument_list|)
decl_stmt|;
name|QXmlStreamAttributes
name|attributes
init|=
name|stream
operator|.
name|attributes
argument_list|()
decl_stmt|;
name|QRegularExpressionMatch
name|match
init|=
name|versionRegExp
operator|.
name|match
argument_list|(
name|attributes
operator|.
name|value
argument_list|(
literal|"number"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|match
operator|.
name|hasMatch
argument_list|()
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Malformed version indicator"
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|attributes
operator|.
name|value
argument_list|(
literal|"api"
argument_list|)
operator|.
name|toString
argument_list|()
operator|!=
literal|"gl"
condition|)
return|return;
name|int
name|majorVersion
init|=
name|match
operator|.
name|captured
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|minorVersion
init|=
name|match
operator|.
name|captured
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|Version
name|v
decl_stmt|;
name|VersionProfile
name|core
decl_stmt|,
name|compat
decl_stmt|;
name|v
operator|.
name|major
operator|=
name|majorVersion
expr_stmt|;
name|v
operator|.
name|minor
operator|=
name|minorVersion
expr_stmt|;
name|core
operator|.
name|version
operator|=
name|compat
operator|.
name|version
operator|=
name|v
expr_stmt|;
name|core
operator|.
name|profile
operator|=
name|VersionProfile
operator|::
name|CoreProfile
expr_stmt|;
name|compat
operator|.
name|profile
operator|=
name|VersionProfile
operator|::
name|CompatibilityProfile
expr_stmt|;
while|while
condition|(
operator|!
name|stream
operator|.
name|isEndDocument
argument_list|()
condition|)
block|{
name|stream
operator|.
name|readNext
argument_list|()
expr_stmt|;
if|if
condition|(
name|stream
operator|.
name|isStartElement
argument_list|()
condition|)
block|{
name|QString
name|tag
init|=
name|stream
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
literal|"require"
condition|)
block|{
name|FunctionList
name|funcs
decl_stmt|;
if|if
condition|(
name|stream
operator|.
name|attributes
argument_list|()
operator|.
name|value
argument_list|(
literal|"profile"
argument_list|)
operator|.
name|toString
argument_list|()
operator|==
literal|"compatibility"
condition|)
block|{
name|parseRequire
argument_list|(
name|stream
argument_list|,
name|funcs
argument_list|)
expr_stmt|;
name|Q_FOREACH
argument_list|(
argument|const Function& f
argument_list|,
argument|funcs
argument_list|)
block|{
name|m_functions
operator|.
name|insert
argument_list|(
name|compat
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|parseRequire
argument_list|(
name|stream
argument_list|,
name|funcs
argument_list|)
expr_stmt|;
name|Q_FOREACH
argument_list|(
argument|const Function& f
argument_list|,
argument|funcs
argument_list|)
block|{
name|m_functions
operator|.
name|insert
argument_list|(
name|core
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|tag
operator|==
literal|"remove"
condition|)
block|{
if|if
condition|(
name|stream
operator|.
name|attributes
argument_list|()
operator|.
name|value
argument_list|(
literal|"profile"
argument_list|)
operator|.
name|toString
argument_list|()
operator|==
literal|"core"
condition|)
name|parseRemoveCore
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|stream
operator|.
name|isEndElement
argument_list|()
condition|)
block|{
name|QString
name|tag
init|=
name|stream
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
literal|"feature"
condition|)
break|break;
block|}
block|}
name|m_versions
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|parseExtension
name|void
name|XmlSpecParser
operator|::
name|parseExtension
parameter_list|(
name|QXmlStreamReader
modifier|&
name|stream
parameter_list|)
block|{
name|QXmlStreamAttributes
name|attributes
init|=
name|stream
operator|.
name|attributes
argument_list|()
decl_stmt|;
name|QString
name|name
init|=
name|attributes
operator|.
name|value
argument_list|(
literal|"name"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|stream
operator|.
name|isEndDocument
argument_list|()
condition|)
block|{
name|stream
operator|.
name|readNext
argument_list|()
expr_stmt|;
if|if
condition|(
name|stream
operator|.
name|isStartElement
argument_list|()
condition|)
block|{
name|QString
name|tag
init|=
name|stream
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
literal|"require"
condition|)
block|{
if|if
condition|(
name|stream
operator|.
name|attributes
argument_list|()
operator|.
name|value
argument_list|(
literal|"profile"
argument_list|)
operator|.
name|toString
argument_list|()
operator|==
literal|"compatibility"
condition|)
block|{
name|FunctionList
name|funcs
decl_stmt|;
name|parseRequire
argument_list|(
name|stream
argument_list|,
name|funcs
argument_list|)
expr_stmt|;
name|Q_FOREACH
argument_list|(
argument|const Function& f
argument_list|,
argument|funcs
argument_list|)
block|{
name|FunctionProfile
name|fp
decl_stmt|;
name|fp
operator|.
name|function
operator|=
name|f
expr_stmt|;
name|fp
operator|.
name|profile
operator|=
name|VersionProfile
operator|::
name|CompatibilityProfile
expr_stmt|;
name|m_extensionFunctions
operator|.
name|insert
argument_list|(
name|name
argument_list|,
name|fp
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|FunctionList
name|funcs
decl_stmt|;
name|parseRequire
argument_list|(
name|stream
argument_list|,
name|funcs
argument_list|)
expr_stmt|;
name|Q_FOREACH
argument_list|(
argument|const Function& f
argument_list|,
argument|funcs
argument_list|)
block|{
name|FunctionProfile
name|fp
decl_stmt|;
name|fp
operator|.
name|function
operator|=
name|f
expr_stmt|;
name|fp
operator|.
name|profile
operator|=
name|VersionProfile
operator|::
name|CoreProfile
expr_stmt|;
name|m_extensionFunctions
operator|.
name|insert
argument_list|(
name|name
argument_list|,
name|fp
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|stream
operator|.
name|isEndElement
argument_list|()
condition|)
block|{
name|QString
name|tag
init|=
name|stream
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
literal|"extension"
condition|)
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|parseFunctions
name|void
name|XmlSpecParser
operator|::
name|parseFunctions
parameter_list|(
name|QXmlStreamReader
modifier|&
name|stream
parameter_list|)
block|{
while|while
condition|(
operator|!
name|stream
operator|.
name|isEndDocument
argument_list|()
condition|)
block|{
name|stream
operator|.
name|readNext
argument_list|()
expr_stmt|;
if|if
condition|(
name|stream
operator|.
name|isStartElement
argument_list|()
condition|)
block|{
name|QString
name|tag
init|=
name|stream
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|tag
operator|==
literal|"feature"
condition|)
block|{
name|parseFeature
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tag
operator|==
literal|"commands"
condition|)
block|{
name|parseCommands
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tag
operator|==
literal|"extension"
condition|)
block|{
name|parseExtension
argument_list|(
name|stream
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|stream
operator|.
name|isEndElement
argument_list|()
condition|)
block|{
name|stream
operator|.
name|readNext
argument_list|()
expr_stmt|;
block|}
block|}
comment|// hack - add GL_ARB_imaging to every version after 1.2 inclusive
name|Version
name|versionThreshold
decl_stmt|;
name|versionThreshold
operator|.
name|major
operator|=
literal|1
expr_stmt|;
name|versionThreshold
operator|.
name|minor
operator|=
literal|2
expr_stmt|;
name|QList
argument_list|<
name|FunctionProfile
argument_list|>
name|funcs
init|=
name|m_extensionFunctions
operator|.
name|values
argument_list|(
literal|"GL_ARB_imaging"
argument_list|)
decl_stmt|;
name|VersionProfile
name|vp
decl_stmt|;
name|vp
operator|.
name|version
operator|=
name|versionThreshold
expr_stmt|;
name|Q_FOREACH
argument_list|(
argument|const FunctionProfile& fp
argument_list|,
argument|funcs
argument_list|)
block|{
name|vp
operator|.
name|profile
operator|=
name|fp
operator|.
name|profile
expr_stmt|;
name|m_functions
operator|.
name|insert
argument_list|(
name|vp
argument_list|,
name|fp
operator|.
name|function
argument_list|)
expr_stmt|;
block|}
comment|// now we will prune any duplicates
name|QSet
argument_list|<
name|QString
argument_list|>
name|funcset
decl_stmt|;
name|Q_FOREACH
argument_list|(
argument|const Version& v
argument_list|,
argument|m_versions
argument_list|)
block|{
comment|// check compatibility first
name|VersionProfile
name|vp
decl_stmt|;
name|vp
operator|.
name|version
operator|=
name|v
expr_stmt|;
name|vp
operator|.
name|profile
operator|=
name|VersionProfile
operator|::
name|CompatibilityProfile
expr_stmt|;
name|Q_FOREACH
argument_list|(
argument|const Function& f
argument_list|,
argument|m_functions.values(vp)
argument_list|)
block|{
comment|// remove duplicate
if|if
condition|(
name|funcset
operator|.
name|contains
argument_list|(
name|f
operator|.
name|name
argument_list|)
condition|)
name|m_functions
operator|.
name|remove
argument_list|(
name|vp
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|funcset
operator|.
name|insert
argument_list|(
name|f
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
name|vp
operator|.
name|profile
operator|=
name|VersionProfile
operator|::
name|CoreProfile
expr_stmt|;
name|Q_FOREACH
argument_list|(
argument|const Function& f
argument_list|,
argument|m_functions.values(vp)
argument_list|)
block|{
comment|// remove duplicate
if|if
condition|(
name|funcset
operator|.
name|contains
argument_list|(
name|f
operator|.
name|name
argument_list|)
condition|)
name|m_functions
operator|.
name|remove
argument_list|(
name|vp
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|funcset
operator|.
name|insert
argument_list|(
name|f
operator|.
name|name
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
end_unit
