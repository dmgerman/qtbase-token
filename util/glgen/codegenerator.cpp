begin_unit
begin_comment
comment|/*************************************************************************** ** ** Copyright (C) 2013 Klaralvdalens Datakonsult AB (KDAB) ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the utilities of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"codegenerator.h"
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<QFile>
end_include
begin_include
include|#
directive|include
file|<QSettings>
end_include
begin_include
include|#
directive|include
file|<QTextStream>
end_include
begin_decl_stmt
DECL|variable|extensionRegistryFileName
specifier|static
specifier|const
name|QString
name|extensionRegistryFileName
init|=
name|QStringLiteral
argument_list|(
literal|"qopengl-extension-registry.ini"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|extensionIdGroupName
specifier|static
specifier|const
name|QString
name|extensionIdGroupName
init|=
name|QStringLiteral
argument_list|(
literal|"ExtensionIds"
argument_list|)
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|CodeGenerator
name|CodeGenerator
operator|::
name|CodeGenerator
parameter_list|()
member_init_list|:
name|m_parser
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|generateCoreClasses
name|void
name|CodeGenerator
operator|::
name|generateCoreClasses
parameter_list|(
specifier|const
name|QString
modifier|&
name|baseFileName
parameter_list|)
specifier|const
block|{
comment|// Output header and implementation files for the backend and base class
name|writeCoreHelperClasses
argument_list|(
name|baseFileName
operator|+
name|QStringLiteral
argument_list|(
literal|".h"
argument_list|)
argument_list|,
name|Declaration
argument_list|)
expr_stmt|;
name|writeCoreHelperClasses
argument_list|(
name|baseFileName
operator|+
name|QStringLiteral
argument_list|(
literal|".cpp"
argument_list|)
argument_list|,
name|Definition
argument_list|)
expr_stmt|;
comment|// Output the per-version and profile public classes
name|writeCoreClasses
argument_list|(
name|baseFileName
argument_list|)
expr_stmt|;
comment|// We also need to generate a factory class that can be used by
comment|// QOpenGLContext to actually create version function objects
name|writeCoreFactoryHeader
argument_list|(
name|baseFileName
operator|+
name|QStringLiteral
argument_list|(
literal|"factory_p.h"
argument_list|)
argument_list|)
expr_stmt|;
name|writeCoreFactoryImplementation
argument_list|(
name|baseFileName
operator|+
name|QStringLiteral
argument_list|(
literal|"factory.cpp"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|generateExtensionClasses
name|void
name|CodeGenerator
operator|::
name|generateExtensionClasses
parameter_list|(
specifier|const
name|QString
modifier|&
name|baseFileName
parameter_list|)
specifier|const
block|{
name|writeExtensionHeader
argument_list|(
name|baseFileName
operator|+
name|QStringLiteral
argument_list|(
literal|".h"
argument_list|)
argument_list|)
expr_stmt|;
name|writeExtensionImplementation
argument_list|(
name|baseFileName
operator|+
name|QStringLiteral
argument_list|(
literal|".cpp"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isLegacyVersion
name|bool
name|CodeGenerator
operator|::
name|isLegacyVersion
parameter_list|(
name|Version
name|v
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|v
operator|.
name|major
operator|<
literal|3
operator|||
operator|(
name|v
operator|.
name|major
operator|==
literal|3
operator|&&
name|v
operator|.
name|minor
operator|==
literal|0
operator|)
operator|)
return|;
block|}
end_function
begin_function
DECL|function|versionHasProfiles
name|bool
name|CodeGenerator
operator|::
name|versionHasProfiles
parameter_list|(
name|Version
name|v
parameter_list|)
specifier|const
block|{
name|VersionProfile
name|vp
decl_stmt|;
name|vp
operator|.
name|version
operator|=
name|v
expr_stmt|;
return|return
name|vp
operator|.
name|hasProfiles
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|writeCoreHelperClasses
name|void
name|CodeGenerator
operator|::
name|writeCoreHelperClasses
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|,
name|ClassComponent
name|component
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|m_parser
condition|)
return|return;
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
condition|)
return|return;
name|QTextStream
name|stream
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
comment|// Write the preamble
name|writePreamble
argument_list|(
name|fileName
argument_list|,
name|stream
argument_list|)
expr_stmt|;
comment|// Iterate over each OpenGL version. For each version output a private class for
comment|// core functions and a private class for deprecated functions.
specifier|const
name|QString
name|privateRootClass
init|=
name|QStringLiteral
argument_list|(
literal|"QOpenGLVersionFunctionsBackend"
argument_list|)
decl_stmt|;
name|Q_FOREACH
argument_list|(
argument|const VersionProfile&versionProfile
argument_list|,
argument|m_parser->versionProfiles()
argument_list|)
block|{
switch|switch
condition|(
name|component
condition|)
block|{
case|case
name|Declaration
case|:
name|writeBackendClassDeclaration
argument_list|(
name|stream
argument_list|,
name|versionProfile
argument_list|,
name|privateRootClass
argument_list|)
expr_stmt|;
break|break;
case|case
name|Definition
case|:
name|writeBackendClassImplementation
argument_list|(
name|stream
argument_list|,
name|versionProfile
argument_list|,
name|privateRootClass
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|// Write the postamble
name|writePostamble
argument_list|(
name|fileName
argument_list|,
name|stream
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeCoreClasses
name|void
name|CodeGenerator
operator|::
name|writeCoreClasses
parameter_list|(
specifier|const
name|QString
modifier|&
name|baseFileName
parameter_list|)
specifier|const
block|{
comment|// Iterate over each OpenGL version. For each version output a public class (for legacy
comment|// versions or two public classes (for modern versions with profiles). Each public class
comment|// is given pointers to private classes containing the actual entry points. For example,
comment|// the class for OpenGL 1.1 will have pointers to the private classes for 1.0 core, 1.1
comment|// core, 1.0 deprecated and 1.1 deprecated. Whereas the class for OpenGL 3.2 Core profile
comment|// will have pointers to the private classes for 1.0 core, 1.1 core, ..., 3.2 core but
comment|// not to any of the deprecated private classes
name|QList
argument_list|<
name|ClassComponent
argument_list|>
name|components
init|=
operator|(
name|QList
argument_list|<
name|ClassComponent
argument_list|>
argument_list|()
operator|<<
name|Declaration
operator|<<
name|Definition
operator|)
decl_stmt|;
name|Q_FOREACH
argument_list|(
argument|const ClassComponent&component
argument_list|,
argument|components
argument_list|)
block|{
specifier|const
name|QString
name|rootClass
init|=
name|QStringLiteral
argument_list|(
literal|"QAbstractOpenGLFunctions"
argument_list|)
decl_stmt|;
name|Q_FOREACH
argument_list|(
argument|const Version&classVersion
argument_list|,
argument|m_parser->versions()
argument_list|)
block|{
name|VersionProfile
name|v
decl_stmt|;
name|v
operator|.
name|version
operator|=
name|classVersion
expr_stmt|;
name|v
operator|.
name|profile
operator|=
name|VersionProfile
operator|::
name|CompatibilityProfile
expr_stmt|;
if|if
condition|(
name|isLegacyVersion
argument_list|(
name|classVersion
argument_list|)
condition|)
block|{
switch|switch
condition|(
name|component
condition|)
block|{
case|case
name|Declaration
case|:
name|writePublicClassDeclaration
argument_list|(
name|baseFileName
argument_list|,
name|v
argument_list|,
name|rootClass
argument_list|)
expr_stmt|;
break|break;
case|case
name|Definition
case|:
name|writePublicClassImplementation
argument_list|(
name|baseFileName
argument_list|,
name|v
argument_list|,
name|rootClass
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
else|else
block|{
switch|switch
condition|(
name|component
condition|)
block|{
case|case
name|Declaration
case|:
name|writePublicClassDeclaration
argument_list|(
name|baseFileName
argument_list|,
name|v
argument_list|,
name|rootClass
argument_list|)
expr_stmt|;
name|v
operator|.
name|profile
operator|=
name|VersionProfile
operator|::
name|CoreProfile
expr_stmt|;
name|writePublicClassDeclaration
argument_list|(
name|baseFileName
argument_list|,
name|v
argument_list|,
name|rootClass
argument_list|)
expr_stmt|;
break|break;
case|case
name|Definition
case|:
name|writePublicClassImplementation
argument_list|(
name|baseFileName
argument_list|,
name|v
argument_list|,
name|rootClass
argument_list|)
expr_stmt|;
name|v
operator|.
name|profile
operator|=
name|VersionProfile
operator|::
name|CoreProfile
expr_stmt|;
name|writePublicClassImplementation
argument_list|(
name|baseFileName
argument_list|,
name|v
argument_list|,
name|rootClass
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|writeCoreFactoryHeader
name|void
name|CodeGenerator
operator|::
name|writeCoreFactoryHeader
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|m_parser
condition|)
return|return;
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
condition|)
return|return;
name|QTextStream
name|stream
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
comment|// Write the preamble
name|writePreamble
argument_list|(
name|fileName
argument_list|,
name|stream
argument_list|)
expr_stmt|;
comment|// Write the postamble
name|writePostamble
argument_list|(
name|fileName
argument_list|,
name|stream
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeCoreFactoryImplementation
name|void
name|CodeGenerator
operator|::
name|writeCoreFactoryImplementation
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|m_parser
condition|)
return|return;
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
condition|)
return|return;
name|QTextStream
name|stream
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
comment|// Write the preamble
name|writePreamble
argument_list|(
name|fileName
argument_list|,
name|stream
argument_list|)
expr_stmt|;
comment|// Get the set of version functions classes we need to create
name|QList
argument_list|<
name|Version
argument_list|>
name|versions
init|=
name|m_parser
operator|->
name|versions
argument_list|()
decl_stmt|;
name|qSort
argument_list|(
name|versions
operator|.
name|begin
argument_list|()
argument_list|,
name|versions
operator|.
name|end
argument_list|()
argument_list|,
name|qGreater
argument_list|<
name|Version
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
comment|// Outout the #include statements
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"#if !defined(QT_OPENGL_ES_2)"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|Q_FOREACH
argument_list|(
argument|const Version&classVersion
argument_list|,
argument|versions
argument_list|)
block|{
if|if
condition|(
operator|!
name|versionHasProfiles
argument_list|(
name|classVersion
argument_list|)
condition|)
block|{
name|stream
operator|<<
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"#include \"qopenglfunctions_%1_%2.h\""
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|classVersion
operator|.
name|major
argument_list|)
operator|.
name|arg
argument_list|(
name|classVersion
operator|.
name|minor
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|QList
argument_list|<
name|VersionProfile
operator|::
name|OpenGLProfile
argument_list|>
name|profiles
init|=
operator|(
name|QList
argument_list|<
name|VersionProfile
operator|::
name|OpenGLProfile
argument_list|>
argument_list|()
operator|<<
name|VersionProfile
operator|::
name|CoreProfile
operator|<<
name|VersionProfile
operator|::
name|CompatibilityProfile
operator|)
decl_stmt|;
name|Q_FOREACH
argument_list|(
argument|const VersionProfile::OpenGLProfile profile
argument_list|,
argument|profiles
argument_list|)
block|{
specifier|const
name|QString
name|profileSuffix
init|=
name|profile
operator|==
name|VersionProfile
operator|::
name|CoreProfile
condition|?
name|QStringLiteral
argument_list|(
literal|"core"
argument_list|)
else|:
name|QStringLiteral
argument_list|(
literal|"compatibility"
argument_list|)
decl_stmt|;
name|stream
operator|<<
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"#include \"qopenglfunctions_%1_%2_%3.h\""
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|classVersion
operator|.
name|major
argument_list|)
operator|.
name|arg
argument_list|(
name|classVersion
operator|.
name|minor
argument_list|)
operator|.
name|arg
argument_list|(
name|profileSuffix
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
block|}
block|}
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"#else"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"#include \"qopenglfunctions_es2.h\""
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"#endif"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"QT_BEGIN_NAMESPACE"
argument_list|)
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"QAbstractOpenGLFunctions *QOpenGLVersionFunctionsFactory::create(const QOpenGLVersionProfile&versionProfile)"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"{"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"#if !defined(QT_OPENGL_ES_2)"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"    const int major = versionProfile.version().first;"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"    const int minor = versionProfile.version().second;"
argument_list|)
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
comment|// Iterate over classes with profiles
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"    if (versionProfile.hasProfiles()) {"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"        switch (versionProfile.profile()) {"
argument_list|)
operator|<<
name|endl
expr_stmt|;
specifier|const
name|QList
argument_list|<
name|VersionProfile
operator|::
name|OpenGLProfile
argument_list|>
name|profiles
init|=
operator|(
name|QList
argument_list|<
name|VersionProfile
operator|::
name|OpenGLProfile
argument_list|>
argument_list|()
operator|<<
name|VersionProfile
operator|::
name|CoreProfile
operator|<<
name|VersionProfile
operator|::
name|CompatibilityProfile
operator|)
decl_stmt|;
name|Q_FOREACH
argument_list|(
argument|const VersionProfile::OpenGLProfile profile
argument_list|,
argument|profiles
argument_list|)
block|{
specifier|const
name|QString
name|caseLabel
init|=
name|profile
operator|==
name|VersionProfile
operator|::
name|CoreProfile
condition|?
name|QStringLiteral
argument_list|(
literal|"QSurfaceFormat::CoreProfile"
argument_list|)
else|:
name|QStringLiteral
argument_list|(
literal|"QSurfaceFormat::CompatibilityProfile"
argument_list|)
decl_stmt|;
name|stream
operator|<<
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"        case %1:"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|caseLabel
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|Q_FOREACH
argument_list|(
argument|const Version&classVersion
argument_list|,
argument|versions
argument_list|)
block|{
if|if
condition|(
operator|!
name|versionHasProfiles
argument_list|(
name|classVersion
argument_list|)
condition|)
continue|continue;
specifier|const
name|QString
name|ifString
init|=
operator|(
name|i
operator|++
operator|==
literal|0
operator|)
condition|?
name|QStringLiteral
argument_list|(
literal|"if"
argument_list|)
else|:
name|QStringLiteral
argument_list|(
literal|"else if"
argument_list|)
decl_stmt|;
name|stream
operator|<<
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"            %1 (major == %2&& minor == %3)"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|ifString
argument_list|)
operator|.
name|arg
argument_list|(
name|classVersion
operator|.
name|major
argument_list|)
operator|.
name|arg
argument_list|(
name|classVersion
operator|.
name|minor
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|VersionProfile
name|v
decl_stmt|;
name|v
operator|.
name|version
operator|=
name|classVersion
expr_stmt|;
name|v
operator|.
name|profile
operator|=
name|profile
expr_stmt|;
name|stream
operator|<<
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"                return new %1;"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|generateClassName
argument_list|(
name|v
argument_list|)
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"            break;"
argument_list|)
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"        case QSurfaceFormat::NoProfile:"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"        default:"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"            break;"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"        };"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"    } else {"
argument_list|)
operator|<<
name|endl
expr_stmt|;
comment|// Iterate over the legacy classes (no profiles)
name|int
name|i
init|=
literal|0
decl_stmt|;
name|Q_FOREACH
argument_list|(
argument|const Version&classVersion
argument_list|,
argument|versions
argument_list|)
block|{
if|if
condition|(
name|versionHasProfiles
argument_list|(
name|classVersion
argument_list|)
condition|)
continue|continue;
specifier|const
name|QString
name|ifString
init|=
operator|(
name|i
operator|++
operator|==
literal|0
operator|)
condition|?
name|QStringLiteral
argument_list|(
literal|"if"
argument_list|)
else|:
name|QStringLiteral
argument_list|(
literal|"else if"
argument_list|)
decl_stmt|;
name|stream
operator|<<
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"        %1 (major == %2&& minor == %3)"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|ifString
argument_list|)
operator|.
name|arg
argument_list|(
name|classVersion
operator|.
name|major
argument_list|)
operator|.
name|arg
argument_list|(
name|classVersion
operator|.
name|minor
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|VersionProfile
name|v
decl_stmt|;
name|v
operator|.
name|version
operator|=
name|classVersion
expr_stmt|;
name|stream
operator|<<
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"            return new %1;"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|generateClassName
argument_list|(
name|v
argument_list|)
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"    }"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"    return 0;"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"#else"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"    Q_UNUSED(versionProfile);"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"    return new QOpenGLFunctions_ES2;"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"#endif"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"}"
argument_list|)
operator|<<
name|endl
expr_stmt|;
comment|// Write the postamble
name|writePostamble
argument_list|(
name|fileName
argument_list|,
name|stream
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/**   \returns all functions to be included in the class defined by \a classVersionProfile  */
end_comment
begin_function
DECL|function|functionCollection
name|FunctionCollection
name|CodeGenerator
operator|::
name|functionCollection
parameter_list|(
specifier|const
name|VersionProfile
modifier|&
name|classVersionProfile
parameter_list|)
specifier|const
block|{
specifier|const
name|Version
name|classVersion
init|=
name|classVersionProfile
operator|.
name|version
decl_stmt|;
name|FunctionCollection
name|functionSet
decl_stmt|;
name|QList
argument_list|<
name|Version
argument_list|>
name|versions
init|=
name|m_parser
operator|->
name|versions
argument_list|()
decl_stmt|;
comment|// Populate these based upon the class version and profile
name|Version
name|minVersion
decl_stmt|;
name|minVersion
operator|.
name|major
operator|=
literal|1
expr_stmt|;
name|minVersion
operator|.
name|minor
operator|=
literal|0
expr_stmt|;
name|Version
name|maxVersion
init|=
name|classVersion
decl_stmt|;
name|QList
argument_list|<
name|VersionProfile
operator|::
name|OpenGLProfile
argument_list|>
name|profiles
decl_stmt|;
name|profiles
operator|<<
name|VersionProfile
operator|::
name|CoreProfile
expr_stmt|;
comment|// Always need core functions
if|if
condition|(
name|isLegacyVersion
argument_list|(
name|classVersion
argument_list|)
operator|||
operator|(
name|classVersionProfile
operator|.
name|hasProfiles
argument_list|()
operator|&&
name|classVersionProfile
operator|.
name|profile
operator|==
name|VersionProfile
operator|::
name|CompatibilityProfile
operator|)
condition|)
block|{
comment|// For versions< 3.1 and Compatibility profile we include both core and deprecated functions
name|profiles
operator|<<
name|VersionProfile
operator|::
name|CompatibilityProfile
expr_stmt|;
block|}
name|Q_FOREACH
argument_list|(
argument|const Version&v
argument_list|,
argument|versions
argument_list|)
block|{
comment|// Only include functions from versions in the range
if|if
condition|(
name|v
operator|<
name|minVersion
condition|)
continue|continue;
if|if
condition|(
name|v
operator|>
name|maxVersion
condition|)
break|break;
name|Q_FOREACH
argument_list|(
argument|VersionProfile::OpenGLProfile profile
argument_list|,
argument|profiles
argument_list|)
block|{
comment|// Combine version and profile for this subset of functions
name|VersionProfile
name|version
decl_stmt|;
name|version
operator|.
name|version
operator|=
name|v
expr_stmt|;
name|version
operator|.
name|profile
operator|=
name|profile
expr_stmt|;
comment|// Fetch the functions and add to collection for this class
name|QList
argument_list|<
name|Function
argument_list|>
name|functions
init|=
name|m_parser
operator|->
name|functionsForVersion
argument_list|(
name|version
argument_list|)
decl_stmt|;
name|functionSet
operator|.
name|insert
argument_list|(
name|version
argument_list|,
name|functions
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|functionSet
return|;
block|}
end_function
begin_function
DECL|function|writePreamble
name|void
name|CodeGenerator
operator|::
name|writePreamble
parameter_list|(
specifier|const
name|QString
modifier|&
name|baseFileName
parameter_list|,
name|QTextStream
modifier|&
name|stream
parameter_list|,
specifier|const
name|QString
name|replacement
parameter_list|)
specifier|const
block|{
specifier|const
name|QString
name|fileName
init|=
name|baseFileName
operator|+
name|QStringLiteral
argument_list|(
literal|".header"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
name|fileName
argument_list|)
condition|)
return|return;
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
condition|)
block|{
name|QTextStream
name|preambleStream
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|QString
name|preamble
init|=
name|preambleStream
operator|.
name|readAll
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|replacement
operator|.
name|isEmpty
argument_list|()
condition|)
name|preamble
operator|.
name|replace
argument_list|(
name|QStringLiteral
argument_list|(
literal|"__VERSION__"
argument_list|)
argument_list|,
name|replacement
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|)
expr_stmt|;
name|stream
operator|<<
name|preamble
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|writePostamble
name|void
name|CodeGenerator
operator|::
name|writePostamble
parameter_list|(
specifier|const
name|QString
modifier|&
name|baseFileName
parameter_list|,
name|QTextStream
modifier|&
name|stream
parameter_list|)
specifier|const
block|{
specifier|const
name|QString
name|fileName
init|=
name|baseFileName
operator|+
name|QStringLiteral
argument_list|(
literal|".footer"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
name|fileName
argument_list|)
condition|)
return|return;
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
condition|)
block|{
name|QTextStream
name|postambleStream
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|QString
name|postamble
init|=
name|postambleStream
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|stream
operator|<<
name|postamble
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|passByType
name|QString
name|CodeGenerator
operator|::
name|passByType
parameter_list|(
specifier|const
name|Argument
modifier|&
name|arg
parameter_list|)
specifier|const
block|{
name|QString
name|passBy
decl_stmt|;
switch|switch
condition|(
name|arg
operator|.
name|mode
condition|)
block|{
case|case
name|Argument
operator|::
name|Reference
case|:
case|case
name|Argument
operator|::
name|Array
case|:
name|passBy
operator|=
name|QStringLiteral
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
break|break;
default|default:
case|case
name|Argument
operator|::
name|Value
case|:
name|passBy
operator|=
name|QString
argument_list|()
expr_stmt|;
block|}
return|return
name|passBy
return|;
block|}
end_function
begin_function
DECL|function|safeArgumentName
name|QString
name|CodeGenerator
operator|::
name|safeArgumentName
parameter_list|(
specifier|const
name|QString
modifier|&
name|arg
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|arg
operator|==
name|QLatin1String
argument_list|(
literal|"near"
argument_list|)
condition|)
comment|// MS Windows defines near and far
return|return
name|QStringLiteral
argument_list|(
literal|"nearVal"
argument_list|)
return|;
elseif|else
if|if
condition|(
name|arg
operator|==
name|QLatin1String
argument_list|(
literal|"far"
argument_list|)
condition|)
return|return
name|QStringLiteral
argument_list|(
literal|"farVal"
argument_list|)
return|;
elseif|else
if|if
condition|(
name|arg
operator|==
name|QLatin1String
argument_list|(
literal|"d"
argument_list|)
condition|)
return|return
name|QStringLiteral
argument_list|(
literal|"dd"
argument_list|)
return|;
comment|// Don't shadow d pointer
else|else
return|return
name|arg
return|;
block|}
end_function
begin_function
DECL|function|generateClassName
name|QString
name|CodeGenerator
operator|::
name|generateClassName
parameter_list|(
specifier|const
name|VersionProfile
modifier|&
name|classVersion
parameter_list|,
name|ClassVisibility
name|visibility
parameter_list|)
specifier|const
block|{
name|QString
name|className
decl_stmt|;
switch|switch
condition|(
name|visibility
condition|)
block|{
case|case
name|Public
case|:
block|{
comment|// Class name and base class
name|QString
name|profileSuffix
decl_stmt|;
if|if
condition|(
name|classVersion
operator|.
name|hasProfiles
argument_list|()
condition|)
name|profileSuffix
operator|=
operator|(
name|classVersion
operator|.
name|profile
operator|==
name|VersionProfile
operator|::
name|CoreProfile
condition|?
name|QStringLiteral
argument_list|(
literal|"_Core"
argument_list|)
else|:
name|QStringLiteral
argument_list|(
literal|"_Compatibility"
argument_list|)
operator|)
expr_stmt|;
name|className
operator|=
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"QOpenGLFunctions_%1_%2%3"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|classVersion
operator|.
name|version
operator|.
name|major
argument_list|)
operator|.
name|arg
argument_list|(
name|classVersion
operator|.
name|version
operator|.
name|minor
argument_list|)
operator|.
name|arg
argument_list|(
name|profileSuffix
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|Private
case|:
block|{
name|QString
name|statusSuffix
init|=
operator|(
name|classVersion
operator|.
name|profile
operator|==
name|VersionProfile
operator|::
name|CoreProfile
condition|?
name|QStringLiteral
argument_list|(
literal|"_Core"
argument_list|)
else|:
name|QStringLiteral
argument_list|(
literal|"_Deprecated"
argument_list|)
operator|)
decl_stmt|;
name|className
operator|=
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"QOpenGLFunctions_%1_%2%3Private"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|classVersion
operator|.
name|version
operator|.
name|major
argument_list|)
operator|.
name|arg
argument_list|(
name|classVersion
operator|.
name|version
operator|.
name|minor
argument_list|)
operator|.
name|arg
argument_list|(
name|statusSuffix
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
return|return
name|className
return|;
block|}
end_function
begin_function
DECL|function|writeBackendClassDeclaration
name|void
name|CodeGenerator
operator|::
name|writeBackendClassDeclaration
parameter_list|(
name|QTextStream
modifier|&
name|stream
parameter_list|,
specifier|const
name|VersionProfile
modifier|&
name|versionProfile
parameter_list|,
specifier|const
name|QString
modifier|&
name|baseClass
parameter_list|)
specifier|const
block|{
specifier|const
name|QString
name|className
init|=
name|backendClassName
argument_list|(
name|versionProfile
argument_list|)
decl_stmt|;
name|stream
operator|<<
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"class %1 : public %2"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|className
argument_list|)
operator|.
name|arg
argument_list|(
name|baseClass
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"{"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"public:"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"    %1(QOpenGLContext *context);"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|className
argument_list|)
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
comment|// Output function used for generating key used in QOpenGLContextPrivate
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"    static QOpenGLVersionStatus versionStatus();"
argument_list|)
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
comment|// Get the functions needed for this class
name|FunctionList
name|functions
init|=
name|m_parser
operator|->
name|functionsForVersion
argument_list|(
name|versionProfile
argument_list|)
decl_stmt|;
name|FunctionCollection
name|functionSet
decl_stmt|;
name|functionSet
operator|.
name|insert
argument_list|(
name|versionProfile
argument_list|,
name|functions
argument_list|)
expr_stmt|;
comment|// Declare the functions
name|writeClassFunctionDeclarations
argument_list|(
name|stream
argument_list|,
name|functionSet
argument_list|,
name|Private
argument_list|)
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"};"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|endl
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeBackendClassImplementation
name|void
name|CodeGenerator
operator|::
name|writeBackendClassImplementation
parameter_list|(
name|QTextStream
modifier|&
name|stream
parameter_list|,
specifier|const
name|VersionProfile
modifier|&
name|versionProfile
parameter_list|,
specifier|const
name|QString
modifier|&
name|baseClass
parameter_list|)
specifier|const
block|{
specifier|const
name|QString
name|className
init|=
name|backendClassName
argument_list|(
name|versionProfile
argument_list|)
decl_stmt|;
name|stream
operator|<<
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"%1::%1(QOpenGLContext *context)"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|className
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"    : %1(context)"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|baseClass
argument_list|)
operator|<<
name|endl
operator|<<
name|QStringLiteral
argument_list|(
literal|"{"
argument_list|)
operator|<<
name|endl
expr_stmt|;
comment|// Resolve the entry points for this set of functions
comment|// Get the functions needed for this class
name|FunctionList
name|functions
init|=
name|m_parser
operator|->
name|functionsForVersion
argument_list|(
name|versionProfile
argument_list|)
decl_stmt|;
name|FunctionCollection
name|functionSet
decl_stmt|;
name|functionSet
operator|.
name|insert
argument_list|(
name|versionProfile
argument_list|,
name|functions
argument_list|)
expr_stmt|;
name|writeEntryPointResolutionCode
argument_list|(
name|stream
argument_list|,
name|functionSet
argument_list|)
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"}"
argument_list|)
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"QOpenGLVersionStatus %1::versionStatus()"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|className
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"{"
argument_list|)
operator|<<
name|endl
expr_stmt|;
specifier|const
name|QString
name|status
init|=
name|versionProfile
operator|.
name|profile
operator|==
name|VersionProfile
operator|::
name|CoreProfile
condition|?
name|QStringLiteral
argument_list|(
literal|"QOpenGLVersionStatus::CoreStatus"
argument_list|)
else|:
name|QStringLiteral
argument_list|(
literal|"QOpenGLVersionStatus::DeprecatedStatus"
argument_list|)
decl_stmt|;
name|stream
operator|<<
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"    return QOpenGLVersionStatus(%1, %2, %3);"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|versionProfile
operator|.
name|version
operator|.
name|major
argument_list|)
operator|.
name|arg
argument_list|(
name|versionProfile
operator|.
name|version
operator|.
name|minor
argument_list|)
operator|.
name|arg
argument_list|(
name|status
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"}"
argument_list|)
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
end_function
begin_function
DECL|function|coreClassFileName
name|QString
name|CodeGenerator
operator|::
name|coreClassFileName
parameter_list|(
specifier|const
name|VersionProfile
modifier|&
name|versionProfile
parameter_list|,
specifier|const
name|QString
modifier|&
name|fileExtension
parameter_list|)
specifier|const
block|{
name|QString
name|profileSuffix
decl_stmt|;
if|if
condition|(
name|versionProfile
operator|.
name|hasProfiles
argument_list|()
condition|)
name|profileSuffix
operator|=
operator|(
name|versionProfile
operator|.
name|profile
operator|==
name|VersionProfile
operator|::
name|CoreProfile
condition|?
name|QStringLiteral
argument_list|(
literal|"_core"
argument_list|)
else|:
name|QStringLiteral
argument_list|(
literal|"_compatibility"
argument_list|)
operator|)
expr_stmt|;
specifier|const
name|QString
name|fileName
init|=
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"qopenglfunctions_%1_%2%3.%4"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|versionProfile
operator|.
name|version
operator|.
name|major
argument_list|)
operator|.
name|arg
argument_list|(
name|versionProfile
operator|.
name|version
operator|.
name|minor
argument_list|)
operator|.
name|arg
argument_list|(
name|profileSuffix
argument_list|)
operator|.
name|arg
argument_list|(
name|fileExtension
argument_list|)
decl_stmt|;
return|return
name|fileName
return|;
block|}
end_function
begin_function
DECL|function|writePublicClassDeclaration
name|void
name|CodeGenerator
operator|::
name|writePublicClassDeclaration
parameter_list|(
specifier|const
name|QString
modifier|&
name|baseFileName
parameter_list|,
specifier|const
name|VersionProfile
modifier|&
name|versionProfile
parameter_list|,
specifier|const
name|QString
modifier|&
name|baseClass
parameter_list|)
specifier|const
block|{
specifier|const
name|QString
name|fileName
init|=
name|coreClassFileName
argument_list|(
name|versionProfile
argument_list|,
name|QStringLiteral
argument_list|(
literal|"h"
argument_list|)
argument_list|)
decl_stmt|;
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
condition|)
return|return;
name|QTextStream
name|stream
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
comment|// Write the preamble
specifier|const
name|QString
name|templateFileName
init|=
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"%1__VERSION__.h"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|baseFileName
argument_list|)
decl_stmt|;
name|QString
name|profileSuffix
decl_stmt|;
if|if
condition|(
name|versionProfile
operator|.
name|hasProfiles
argument_list|()
condition|)
name|profileSuffix
operator|=
operator|(
name|versionProfile
operator|.
name|profile
operator|==
name|VersionProfile
operator|::
name|CoreProfile
condition|?
name|QStringLiteral
argument_list|(
literal|"_CORE"
argument_list|)
else|:
name|QStringLiteral
argument_list|(
literal|"_COMPATIBILITY"
argument_list|)
operator|)
expr_stmt|;
specifier|const
name|QString
name|versionProfileString
init|=
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"_%1_%2%3"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|versionProfile
operator|.
name|version
operator|.
name|major
argument_list|)
operator|.
name|arg
argument_list|(
name|versionProfile
operator|.
name|version
operator|.
name|minor
argument_list|)
operator|.
name|arg
argument_list|(
name|profileSuffix
argument_list|)
decl_stmt|;
name|writePreamble
argument_list|(
name|templateFileName
argument_list|,
name|stream
argument_list|,
name|versionProfileString
argument_list|)
expr_stmt|;
comment|// Ctor, dtor, and initialize function;
specifier|const
name|QString
name|className
init|=
name|generateClassName
argument_list|(
name|versionProfile
argument_list|,
name|Public
argument_list|)
decl_stmt|;
name|stream
operator|<<
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"class Q_GUI_EXPORT %1 : public %2"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|className
argument_list|)
operator|.
name|arg
argument_list|(
name|baseClass
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"{"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"public:"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"    %1();"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|className
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"    ~%1();"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|className
argument_list|)
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"    bool initializeOpenGLFunctions() Q_DECL_OVERRIDE;"
argument_list|)
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
comment|// Get the functions needed for this class and declare them
name|FunctionCollection
name|functionSet
init|=
name|functionCollection
argument_list|(
name|versionProfile
argument_list|)
decl_stmt|;
name|writeClassFunctionDeclarations
argument_list|(
name|stream
argument_list|,
name|functionSet
argument_list|,
name|Public
argument_list|)
expr_stmt|;
comment|// isCompatible function and backend variables
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"private:"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"    friend class QOpenGLContext;"
argument_list|)
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"    static bool isContextCompatible(QOpenGLContext *context);"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"    static QOpenGLVersionProfile versionProfile();"
argument_list|)
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|writeBackendVariableDeclarations
argument_list|(
name|stream
argument_list|,
name|backendsForFunctionCollection
argument_list|(
name|functionSet
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"};"
argument_list|)
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
comment|// Output the inline functions that forward OpenGL calls to the backends' entry points
name|writeClassInlineFunctions
argument_list|(
name|stream
argument_list|,
name|className
argument_list|,
name|functionSet
argument_list|)
expr_stmt|;
comment|// Write the postamble
name|writePostamble
argument_list|(
name|templateFileName
argument_list|,
name|stream
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writePublicClassImplementation
name|void
name|CodeGenerator
operator|::
name|writePublicClassImplementation
parameter_list|(
specifier|const
name|QString
modifier|&
name|baseFileName
parameter_list|,
specifier|const
name|VersionProfile
modifier|&
name|versionProfile
parameter_list|,
specifier|const
name|QString
modifier|&
name|baseClass
parameter_list|)
specifier|const
block|{
specifier|const
name|QString
name|fileName
init|=
name|coreClassFileName
argument_list|(
name|versionProfile
argument_list|,
name|QStringLiteral
argument_list|(
literal|"cpp"
argument_list|)
argument_list|)
decl_stmt|;
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
condition|)
return|return;
name|QTextStream
name|stream
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
comment|// Write the preamble
specifier|const
name|QString
name|templateFileName
init|=
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"%1__VERSION__.cpp"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|baseFileName
argument_list|)
decl_stmt|;
name|QString
name|profileSuffix
decl_stmt|;
if|if
condition|(
name|versionProfile
operator|.
name|hasProfiles
argument_list|()
condition|)
name|profileSuffix
operator|=
operator|(
name|versionProfile
operator|.
name|profile
operator|==
name|VersionProfile
operator|::
name|CoreProfile
condition|?
name|QStringLiteral
argument_list|(
literal|"_core"
argument_list|)
else|:
name|QStringLiteral
argument_list|(
literal|"_compatibility"
argument_list|)
operator|)
expr_stmt|;
specifier|const
name|QString
name|versionProfileString
init|=
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"_%1_%2%3"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|versionProfile
operator|.
name|version
operator|.
name|major
argument_list|)
operator|.
name|arg
argument_list|(
name|versionProfile
operator|.
name|version
operator|.
name|minor
argument_list|)
operator|.
name|arg
argument_list|(
name|profileSuffix
argument_list|)
decl_stmt|;
name|writePreamble
argument_list|(
name|templateFileName
argument_list|,
name|stream
argument_list|,
name|versionProfileString
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|className
init|=
name|generateClassName
argument_list|(
name|versionProfile
argument_list|,
name|Public
argument_list|)
decl_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"/*!"
argument_list|)
operator|<<
name|endl
operator|<<
name|QStringLiteral
argument_list|(
literal|"    \\class "
argument_list|)
operator|<<
name|className
operator|<<
name|endl
operator|<<
name|QStringLiteral
argument_list|(
literal|"    \\inmodule QtGui"
argument_list|)
operator|<<
name|endl
operator|<<
name|QStringLiteral
argument_list|(
literal|"    \\since 5.1"
argument_list|)
operator|<<
name|endl
operator|<<
name|QStringLiteral
argument_list|(
literal|"    \\wrapper"
argument_list|)
operator|<<
name|endl
operator|<<
name|QStringLiteral
argument_list|(
literal|"    \\brief The "
argument_list|)
operator|<<
name|className
operator|<<
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|" class provides all functions for OpenGL %1.%2 "
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|versionProfile
operator|.
name|version
operator|.
name|major
argument_list|)
operator|.
name|arg
argument_list|(
name|versionProfile
operator|.
name|version
operator|.
name|minor
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|profileSuffix
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|profileSuffix
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|profileSuffix
operator|.
name|append
argument_list|(
name|QStringLiteral
argument_list|(
literal|" profile"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|profileSuffix
operator|=
literal|"specification"
expr_stmt|;
block|}
name|stream
operator|<<
name|profileSuffix
operator|<<
name|QStringLiteral
argument_list|(
literal|"."
argument_list|)
operator|<<
name|endl
operator|<<
name|endl
operator|<<
name|QStringLiteral
argument_list|(
literal|"    This class is a wrapper for functions from "
argument_list|)
operator|<<
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"OpenGL %1.%2 "
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|versionProfile
operator|.
name|version
operator|.
name|major
argument_list|)
operator|.
name|arg
argument_list|(
name|versionProfile
operator|.
name|version
operator|.
name|minor
argument_list|)
operator|<<
name|profileSuffix
operator|<<
name|QStringLiteral
argument_list|(
literal|"."
argument_list|)
operator|<<
name|endl
operator|<<
name|QStringLiteral
argument_list|(
literal|"    See reference pages on \\l {http://www.opengl.org/sdk/docs/}{opengl.org}"
argument_list|)
operator|<<
name|endl
operator|<<
name|QStringLiteral
argument_list|(
literal|"    for function documentation."
argument_list|)
operator|<<
name|endl
operator|<<
name|endl
operator|<<
name|QStringLiteral
argument_list|(
literal|"    \\sa QAbstractOpenGLFunctions"
argument_list|)
operator|<<
name|endl
operator|<<
name|QStringLiteral
argument_list|(
literal|"*/"
argument_list|)
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
comment|// Get the data we'll need for this class implementation
name|FunctionCollection
name|functionSet
init|=
name|functionCollection
argument_list|(
name|versionProfile
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|VersionProfile
argument_list|>
name|backends
init|=
name|backendsForFunctionCollection
argument_list|(
name|functionSet
argument_list|)
decl_stmt|;
comment|// Output default constructor
name|stream
operator|<<
name|className
operator|<<
name|QStringLiteral
argument_list|(
literal|"::"
argument_list|)
operator|<<
name|className
operator|<<
name|QStringLiteral
argument_list|(
literal|"()"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|" : "
argument_list|)
operator|<<
name|baseClass
operator|<<
name|QStringLiteral
argument_list|(
literal|"()"
argument_list|)
expr_stmt|;
name|Q_FOREACH
argument_list|(
argument|const VersionProfile&v
argument_list|,
argument|backends
argument_list|)
name|stream
operator|<<
name|endl
operator|<<
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|" , %1(0)"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|backendVariableName
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|stream
operator|<<
name|endl
operator|<<
name|QStringLiteral
argument_list|(
literal|"{"
argument_list|)
operator|<<
name|endl
operator|<<
name|QStringLiteral
argument_list|(
literal|"}"
argument_list|)
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
comment|// Output the destructor
name|stream
operator|<<
name|className
operator|<<
name|QStringLiteral
argument_list|(
literal|"::~"
argument_list|)
operator|<<
name|className
operator|<<
name|QStringLiteral
argument_list|(
literal|"()"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"{"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|Q_FOREACH
argument_list|(
argument|const VersionProfile&v
argument_list|,
argument|backends
argument_list|)
block|{
specifier|const
name|QString
name|backendVar
init|=
name|backendVariableName
argument_list|(
name|v
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|backendClass
init|=
name|backendClassName
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|stream
operator|<<
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"    if (%1&& !%1->refs.deref()) {"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|backendVar
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"        QAbstractOpenGLFunctionsPrivate::removeFunctionsBackend(%1->context, %2::versionStatus());"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|backendVar
argument_list|)
operator|.
name|arg
argument_list|(
name|backendClass
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"        delete %1;"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|backendVar
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"    }"
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"}"
argument_list|)
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
comment|// Output the initialize function that creates the backend objects
name|stream
operator|<<
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"bool %1::initializeOpenGLFunctions()"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|className
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"{"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"    if ( isInitialized() )"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"        return true;"
argument_list|)
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"    QOpenGLContext* context = QOpenGLContext::currentContext();"
argument_list|)
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"    // If owned by a context object make sure it is current."
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"    // Also check that current context is capable of resolving all needed functions"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"    if (((owningContext()&& owningContext() == context) || !owningContext())"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"&& %1::isContextCompatible(context))"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|className
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"    {"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"        // Associate with private implementation, creating if necessary"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"        // Function pointers in the backends are resolved at creation time"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"        QOpenGLVersionFunctionsBackend* d = 0;"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|Q_FOREACH
argument_list|(
argument|const VersionProfile&v
argument_list|,
argument|backends
argument_list|)
block|{
specifier|const
name|QString
name|backendClass
init|=
name|backendClassName
argument_list|(
name|v
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|backendVar
init|=
name|backendVariableName
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|stream
operator|<<
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"        d = QAbstractOpenGLFunctionsPrivate::functionsBackend(context, %1::versionStatus());"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|backendClass
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"        if (!d) {"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"            d = new %1(context);"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|backendClass
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"            QAbstractOpenGLFunctionsPrivate::insertFunctionsBackend(context, %1::versionStatus(), d);"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|backendClass
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"        }"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"        %1 = static_cast<%2*>(d);"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|backendVar
argument_list|)
operator|.
name|arg
argument_list|(
name|backendClass
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"        d->refs.ref();"
argument_list|)
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"        QAbstractOpenGLFunctions::initializeOpenGLFunctions();"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"    }"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"    return isInitialized();"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"}"
argument_list|)
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
comment|// Output the context compatibility check function
name|stream
operator|<<
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"bool %1::isContextCompatible(QOpenGLContext *context)"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|className
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"{"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"    Q_ASSERT(context);"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"    QSurfaceFormat f = context->format();"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"    const QPair<int, int> v = qMakePair(f.majorVersion(), f.minorVersion());"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"    if (v< qMakePair(%1, %2))"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|versionProfile
operator|.
name|version
operator|.
name|major
argument_list|)
operator|.
name|arg
argument_list|(
name|versionProfile
operator|.
name|version
operator|.
name|minor
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"        return false;"
argument_list|)
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
comment|// If generating a legacy or compatibility profile class we need to ensure that
comment|// the context does not expose only core functions
if|if
condition|(
name|versionProfile
operator|.
name|profile
operator|!=
name|VersionProfile
operator|::
name|CoreProfile
condition|)
block|{
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"    if (f.profile() == QSurfaceFormat::CoreProfile)"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"        return false;"
argument_list|)
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"    return true;"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"}"
argument_list|)
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
comment|// Output static function used as helper in template versionFunctions() function
comment|// in QOpenGLContext
name|stream
operator|<<
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"QOpenGLVersionProfile %1::versionProfile()"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|className
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"{"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"    QOpenGLVersionProfile v;"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"    v.setVersion(%1, %2);"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|versionProfile
operator|.
name|version
operator|.
name|major
argument_list|)
operator|.
name|arg
argument_list|(
name|versionProfile
operator|.
name|version
operator|.
name|minor
argument_list|)
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|versionProfile
operator|.
name|hasProfiles
argument_list|()
condition|)
block|{
specifier|const
name|QString
name|profileName
init|=
name|versionProfile
operator|.
name|profile
operator|==
name|VersionProfile
operator|::
name|CoreProfile
condition|?
name|QStringLiteral
argument_list|(
literal|"QSurfaceFormat::CoreProfile"
argument_list|)
else|:
name|QStringLiteral
argument_list|(
literal|"QSurfaceFormat::CompatibilityProfile"
argument_list|)
decl_stmt|;
name|stream
operator|<<
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"    v.setProfile(%1);"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|profileName
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"    return v;"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"}"
argument_list|)
operator|<<
name|endl
expr_stmt|;
comment|// Write the postamble
name|writePostamble
argument_list|(
name|templateFileName
argument_list|,
name|stream
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeClassFunctionDeclarations
name|void
name|CodeGenerator
operator|::
name|writeClassFunctionDeclarations
parameter_list|(
name|QTextStream
modifier|&
name|stream
parameter_list|,
specifier|const
name|FunctionCollection
modifier|&
name|functionSet
parameter_list|,
name|ClassVisibility
name|visibility
parameter_list|)
specifier|const
block|{
name|Q_FOREACH
argument_list|(
argument|const VersionProfile&version
argument_list|,
argument|functionSet.keys()
argument_list|)
block|{
comment|// Add a comment to the header
name|stream
operator|<<
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"    // OpenGL %1.%2 %3 functions"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|version
operator|.
name|version
operator|.
name|major
argument_list|)
operator|.
name|arg
argument_list|(
name|version
operator|.
name|version
operator|.
name|minor
argument_list|)
operator|.
name|arg
argument_list|(
operator|(
name|version
operator|.
name|profile
operator|==
name|VersionProfile
operator|::
name|CoreProfile
operator|)
condition|?
name|QStringLiteral
argument_list|(
literal|"core"
argument_list|)
else|:
name|QStringLiteral
argument_list|(
literal|"deprecated"
argument_list|)
argument_list|)
operator|<<
name|endl
expr_stmt|;
comment|// Output function declarations
name|FunctionList
name|functions
init|=
name|functionSet
operator|.
name|value
argument_list|(
name|version
argument_list|)
decl_stmt|;
name|Q_FOREACH
argument_list|(
argument|const Function&f
argument_list|,
argument|functions
argument_list|)
name|writeFunctionDeclaration
argument_list|(
name|stream
argument_list|,
name|f
argument_list|,
name|visibility
argument_list|)
expr_stmt|;
name|stream
operator|<<
name|endl
expr_stmt|;
block|}
comment|// version and profile
block|}
end_function
begin_function
DECL|function|writeFunctionDeclaration
name|void
name|CodeGenerator
operator|::
name|writeFunctionDeclaration
parameter_list|(
name|QTextStream
modifier|&
name|stream
parameter_list|,
specifier|const
name|Function
modifier|&
name|f
parameter_list|,
name|ClassVisibility
name|visibility
parameter_list|)
specifier|const
block|{
name|QStringList
name|argList
decl_stmt|;
name|Q_FOREACH
argument_list|(
argument|const Argument&arg
argument_list|,
argument|f.arguments
argument_list|)
block|{
name|QString
name|a
init|=
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"%1%2 %3%4"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
operator|(
name|arg
operator|.
name|direction
operator|==
name|Argument
operator|::
name|In
operator|&&
name|arg
operator|.
name|mode
operator|!=
name|Argument
operator|::
name|Value
operator|)
condition|?
name|QStringLiteral
argument_list|(
literal|"const "
argument_list|)
else|:
name|QString
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|arg
operator|.
name|type
argument_list|)
operator|.
name|arg
argument_list|(
name|passByType
argument_list|(
name|arg
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|safeArgumentName
argument_list|(
name|arg
operator|.
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|argList
operator|.
name|append
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
name|QString
name|args
init|=
name|argList
operator|.
name|join
argument_list|(
name|QStringLiteral
argument_list|(
literal|", "
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|signature
decl_stmt|;
switch|switch
condition|(
name|visibility
condition|)
block|{
case|case
name|Public
case|:
name|signature
operator|=
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"    %1 gl%2(%3);"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|f
operator|.
name|returnType
argument_list|)
operator|.
name|arg
argument_list|(
name|f
operator|.
name|name
argument_list|)
operator|.
name|arg
argument_list|(
name|args
argument_list|)
expr_stmt|;
break|break;
case|case
name|Private
case|:
default|default:
name|signature
operator|=
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"    %1 (QOPENGLF_APIENTRYP %2)(%3);"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|f
operator|.
name|returnType
argument_list|)
operator|.
name|arg
argument_list|(
name|f
operator|.
name|name
argument_list|)
operator|.
name|arg
argument_list|(
name|args
argument_list|)
expr_stmt|;
block|}
name|stream
operator|<<
name|signature
operator|<<
name|endl
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeClassInlineFunctions
name|void
name|CodeGenerator
operator|::
name|writeClassInlineFunctions
parameter_list|(
name|QTextStream
modifier|&
name|stream
parameter_list|,
specifier|const
name|QString
modifier|&
name|className
parameter_list|,
specifier|const
name|FunctionCollection
modifier|&
name|functionSet
parameter_list|)
specifier|const
block|{
name|Q_FOREACH
argument_list|(
argument|const VersionProfile&version
argument_list|,
argument|functionSet.keys()
argument_list|)
block|{
comment|// Add a comment to the header
name|stream
operator|<<
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"// OpenGL %1.%2 %3 functions"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|version
operator|.
name|version
operator|.
name|major
argument_list|)
operator|.
name|arg
argument_list|(
name|version
operator|.
name|version
operator|.
name|minor
argument_list|)
operator|.
name|arg
argument_list|(
operator|(
name|version
operator|.
name|profile
operator|==
name|VersionProfile
operator|::
name|CoreProfile
operator|)
condition|?
name|QStringLiteral
argument_list|(
literal|"core"
argument_list|)
else|:
name|QStringLiteral
argument_list|(
literal|"deprecated"
argument_list|)
argument_list|)
operator|<<
name|endl
expr_stmt|;
comment|// Output function declarations
specifier|const
name|QString
name|backendVar
init|=
name|backendVariableName
argument_list|(
name|version
argument_list|)
decl_stmt|;
name|FunctionList
name|functions
init|=
name|functionSet
operator|.
name|value
argument_list|(
name|version
argument_list|)
decl_stmt|;
name|Q_FOREACH
argument_list|(
argument|const Function&f
argument_list|,
argument|functions
argument_list|)
name|writeInlineFunction
argument_list|(
name|stream
argument_list|,
name|className
argument_list|,
name|backendVar
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|stream
operator|<<
name|endl
expr_stmt|;
block|}
comment|// version and profile
block|}
end_function
begin_function
DECL|function|writeInlineFunction
name|void
name|CodeGenerator
operator|::
name|writeInlineFunction
parameter_list|(
name|QTextStream
modifier|&
name|stream
parameter_list|,
specifier|const
name|QString
modifier|&
name|className
parameter_list|,
specifier|const
name|QString
modifier|&
name|backendVar
parameter_list|,
specifier|const
name|Function
modifier|&
name|f
parameter_list|)
specifier|const
block|{
name|QStringList
name|argList
decl_stmt|;
name|Q_FOREACH
argument_list|(
argument|const Argument&arg
argument_list|,
argument|f.arguments
argument_list|)
block|{
name|QString
name|a
init|=
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"%1%2 %3%4"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
operator|(
name|arg
operator|.
name|direction
operator|==
name|Argument
operator|::
name|In
operator|&&
name|arg
operator|.
name|mode
operator|!=
name|Argument
operator|::
name|Value
operator|)
condition|?
name|QStringLiteral
argument_list|(
literal|"const "
argument_list|)
else|:
name|QString
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|arg
operator|.
name|type
argument_list|)
operator|.
name|arg
argument_list|(
name|passByType
argument_list|(
name|arg
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|safeArgumentName
argument_list|(
name|arg
operator|.
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|argList
operator|.
name|append
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
name|QString
name|args
init|=
name|argList
operator|.
name|join
argument_list|(
literal|", "
argument_list|)
decl_stmt|;
name|QString
name|signature
init|=
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"inline %1 %2::gl%3(%4)"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|f
operator|.
name|returnType
argument_list|)
operator|.
name|arg
argument_list|(
name|className
argument_list|)
operator|.
name|arg
argument_list|(
name|f
operator|.
name|name
argument_list|)
operator|.
name|arg
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|stream
operator|<<
name|signature
operator|<<
name|endl
operator|<<
name|QStringLiteral
argument_list|(
literal|"{"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|QStringList
name|argumentNames
decl_stmt|;
name|Q_FOREACH
argument_list|(
argument|const Argument&arg
argument_list|,
argument|f.arguments
argument_list|)
name|argumentNames
operator|.
name|append
argument_list|(
name|safeArgumentName
argument_list|(
name|arg
operator|.
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|argNames
init|=
name|argumentNames
operator|.
name|join
argument_list|(
literal|", "
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|returnType
operator|==
name|QLatin1String
argument_list|(
literal|"void"
argument_list|)
condition|)
name|stream
operator|<<
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"    %1->%2(%3);"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|backendVar
argument_list|)
operator|.
name|arg
argument_list|(
name|f
operator|.
name|name
argument_list|)
operator|.
name|arg
argument_list|(
name|argNames
argument_list|)
operator|<<
name|endl
expr_stmt|;
else|else
name|stream
operator|<<
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"    return %1->%2(%3);"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|backendVar
argument_list|)
operator|.
name|arg
argument_list|(
name|f
operator|.
name|name
argument_list|)
operator|.
name|arg
argument_list|(
name|argNames
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"}"
argument_list|)
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeEntryPointResolutionCode
name|void
name|CodeGenerator
operator|::
name|writeEntryPointResolutionCode
parameter_list|(
name|QTextStream
modifier|&
name|stream
parameter_list|,
specifier|const
name|FunctionCollection
modifier|&
name|functionSet
parameter_list|)
specifier|const
block|{
name|bool
name|hasModuleHandle
init|=
literal|false
decl_stmt|;
name|Q_FOREACH
argument_list|(
argument|const VersionProfile&version
argument_list|,
argument|functionSet.keys()
argument_list|)
block|{
comment|// Add a comment to the header
name|stream
operator|<<
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"    // OpenGL %1.%2 %3 functions"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|version
operator|.
name|version
operator|.
name|major
argument_list|)
operator|.
name|arg
argument_list|(
name|version
operator|.
name|version
operator|.
name|minor
argument_list|)
operator|.
name|arg
argument_list|(
operator|(
name|version
operator|.
name|profile
operator|==
name|VersionProfile
operator|::
name|CoreProfile
operator|)
condition|?
name|QStringLiteral
argument_list|(
literal|"core"
argument_list|)
else|:
name|QStringLiteral
argument_list|(
literal|"deprecated"
argument_list|)
argument_list|)
operator|<<
name|endl
expr_stmt|;
comment|// Output function declarations
name|FunctionList
name|functions
init|=
name|functionSet
operator|.
name|value
argument_list|(
name|version
argument_list|)
decl_stmt|;
name|bool
name|useGetProcAddress
init|=
operator|(
name|version
operator|.
name|version
operator|.
name|major
operator|==
literal|1
operator|&&
operator|(
name|version
operator|.
name|version
operator|.
name|minor
operator|==
literal|0
operator|||
name|version
operator|.
name|version
operator|.
name|minor
operator|==
literal|1
operator|)
operator|)
decl_stmt|;
if|if
condition|(
name|useGetProcAddress
condition|)
block|{
name|stream
operator|<<
literal|"#if defined(Q_OS_WIN)"
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|hasModuleHandle
condition|)
block|{
name|stream
operator|<<
literal|"    HMODULE handle = GetModuleHandleA(\"opengl32.dll\");"
operator|<<
name|endl
expr_stmt|;
name|hasModuleHandle
operator|=
literal|true
expr_stmt|;
block|}
name|Q_FOREACH
argument_list|(
argument|const Function&f
argument_list|,
argument|functions
argument_list|)
name|writeEntryPointResolutionStatement
argument_list|(
name|stream
argument_list|,
name|f
argument_list|,
name|QString
argument_list|()
argument_list|,
name|useGetProcAddress
argument_list|)
expr_stmt|;
name|stream
operator|<<
literal|"#else"
operator|<<
name|endl
expr_stmt|;
block|}
name|Q_FOREACH
argument_list|(
argument|const Function&f
argument_list|,
argument|functions
argument_list|)
name|writeEntryPointResolutionStatement
argument_list|(
name|stream
argument_list|,
name|f
argument_list|)
expr_stmt|;
if|if
condition|(
name|useGetProcAddress
condition|)
name|stream
operator|<<
literal|"#endif"
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|endl
expr_stmt|;
block|}
comment|// version and profile
block|}
end_function
begin_function
DECL|function|writeEntryPointResolutionStatement
name|void
name|CodeGenerator
operator|::
name|writeEntryPointResolutionStatement
parameter_list|(
name|QTextStream
modifier|&
name|stream
parameter_list|,
specifier|const
name|Function
modifier|&
name|f
parameter_list|,
specifier|const
name|QString
modifier|&
name|prefix
parameter_list|,
name|bool
name|useGetProcAddress
parameter_list|)
specifier|const
block|{
name|QStringList
name|argList
decl_stmt|;
name|Q_FOREACH
argument_list|(
argument|const Argument&arg
argument_list|,
argument|f.arguments
argument_list|)
block|{
name|QString
name|a
init|=
name|QString
argument_list|(
literal|"%1%2 %3"
argument_list|)
operator|.
name|arg
argument_list|(
operator|(
name|arg
operator|.
name|direction
operator|==
name|Argument
operator|::
name|In
operator|&&
name|arg
operator|.
name|mode
operator|!=
name|Argument
operator|::
name|Value
operator|)
condition|?
name|QStringLiteral
argument_list|(
literal|"const "
argument_list|)
else|:
name|QString
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|arg
operator|.
name|type
argument_list|)
operator|.
name|arg
argument_list|(
name|passByType
argument_list|(
name|arg
argument_list|)
argument_list|)
decl_stmt|;
name|argList
operator|.
name|append
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
name|QString
name|args
init|=
name|argList
operator|.
name|join
argument_list|(
name|QStringLiteral
argument_list|(
literal|", "
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|signature
decl_stmt|;
if|if
condition|(
operator|!
name|useGetProcAddress
condition|)
block|{
name|signature
operator|=
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"    %4%3 = reinterpret_cast<%1 (QOPENGLF_APIENTRYP)(%2)>(context->getProcAddress(\"gl%3\"));"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|f
operator|.
name|returnType
argument_list|)
operator|.
name|arg
argument_list|(
name|args
argument_list|)
operator|.
name|arg
argument_list|(
name|f
operator|.
name|name
argument_list|)
operator|.
name|arg
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|signature
operator|=
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"    %4%3 = reinterpret_cast<%1 (QOPENGLF_APIENTRYP)(%2)>(GetProcAddress(handle, \"gl%3\"));"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|f
operator|.
name|returnType
argument_list|)
operator|.
name|arg
argument_list|(
name|args
argument_list|)
operator|.
name|arg
argument_list|(
name|f
operator|.
name|name
argument_list|)
operator|.
name|arg
argument_list|(
name|prefix
argument_list|)
expr_stmt|;
block|}
name|stream
operator|<<
name|signature
operator|<<
name|endl
expr_stmt|;
block|}
end_function
begin_function
DECL|function|backendsForFunctionCollection
name|QList
argument_list|<
name|VersionProfile
argument_list|>
name|CodeGenerator
operator|::
name|backendsForFunctionCollection
parameter_list|(
specifier|const
name|FunctionCollection
modifier|&
name|functionSet
parameter_list|)
specifier|const
block|{
name|QList
argument_list|<
name|VersionProfile
argument_list|>
name|backends
decl_stmt|;
name|Q_FOREACH
argument_list|(
argument|const VersionProfile&versionProfile
argument_list|,
argument|functionSet.keys()
argument_list|)
block|{
if|if
condition|(
name|m_parser
operator|->
name|versionProfiles
argument_list|()
operator|.
name|contains
argument_list|(
name|versionProfile
argument_list|)
condition|)
name|backends
operator|.
name|append
argument_list|(
name|versionProfile
argument_list|)
expr_stmt|;
block|}
return|return
name|backends
return|;
block|}
end_function
begin_function
DECL|function|backendClassName
name|QString
name|CodeGenerator
operator|::
name|backendClassName
parameter_list|(
specifier|const
name|VersionProfile
modifier|&
name|v
parameter_list|)
specifier|const
block|{
name|QString
name|statusSuffix
init|=
name|v
operator|.
name|profile
operator|==
name|VersionProfile
operator|::
name|CoreProfile
condition|?
name|QStringLiteral
argument_list|(
literal|"_Core"
argument_list|)
else|:
name|QStringLiteral
argument_list|(
literal|"_Deprecated"
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|className
init|=
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"QOpenGLFunctions_%1_%2%3Backend"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|v
operator|.
name|version
operator|.
name|major
argument_list|)
operator|.
name|arg
argument_list|(
name|v
operator|.
name|version
operator|.
name|minor
argument_list|)
operator|.
name|arg
argument_list|(
name|statusSuffix
argument_list|)
decl_stmt|;
return|return
name|className
return|;
block|}
end_function
begin_function
DECL|function|backendVariableName
name|QString
name|CodeGenerator
operator|::
name|backendVariableName
parameter_list|(
specifier|const
name|VersionProfile
modifier|&
name|v
parameter_list|)
specifier|const
block|{
specifier|const
name|QString
name|status
init|=
operator|(
name|v
operator|.
name|profile
operator|==
name|VersionProfile
operator|::
name|CoreProfile
operator|)
condition|?
name|QStringLiteral
argument_list|(
literal|"Core"
argument_list|)
else|:
name|QStringLiteral
argument_list|(
literal|"Deprecated"
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|varName
init|=
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"d_%1_%2_%3"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|v
operator|.
name|version
operator|.
name|major
argument_list|)
operator|.
name|arg
argument_list|(
name|v
operator|.
name|version
operator|.
name|minor
argument_list|)
operator|.
name|arg
argument_list|(
name|status
argument_list|)
decl_stmt|;
return|return
name|varName
return|;
block|}
end_function
begin_function
DECL|function|writeBackendVariableDeclarations
name|void
name|CodeGenerator
operator|::
name|writeBackendVariableDeclarations
parameter_list|(
name|QTextStream
modifier|&
name|stream
parameter_list|,
specifier|const
name|QList
argument_list|<
name|VersionProfile
argument_list|>
modifier|&
name|backends
parameter_list|)
specifier|const
block|{
comment|// We need a private class for each version and profile (status: core or deprecated)
name|Q_FOREACH
argument_list|(
argument|const VersionProfile&v
argument_list|,
argument|backends
argument_list|)
block|{
specifier|const
name|QString
name|className
init|=
name|backendClassName
argument_list|(
name|v
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|varName
init|=
name|backendVariableName
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|stream
operator|<<
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"    %1* %2;"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|className
argument_list|)
operator|.
name|arg
argument_list|(
name|varName
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|writeExtensionHeader
name|void
name|CodeGenerator
operator|::
name|writeExtensionHeader
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|m_parser
condition|)
return|return;
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
condition|)
return|return;
name|QTextStream
name|stream
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
comment|// Write the preamble
name|writePreamble
argument_list|(
name|fileName
argument_list|,
name|stream
argument_list|)
expr_stmt|;
comment|// Iterate through the list of extensions and create one class per extension
name|QStringList
name|extensions
init|=
name|m_parser
operator|->
name|extensions
argument_list|()
decl_stmt|;
name|Q_FOREACH
argument_list|(
argument|const QString&extension
argument_list|,
argument|extensions
argument_list|)
block|{
name|writeExtensionClassDeclaration
argument_list|(
name|stream
argument_list|,
name|extension
argument_list|,
name|Private
argument_list|)
expr_stmt|;
name|writeExtensionClassDeclaration
argument_list|(
name|stream
argument_list|,
name|extension
argument_list|,
name|Public
argument_list|)
expr_stmt|;
block|}
comment|// Write the postamble
name|writePostamble
argument_list|(
name|fileName
argument_list|,
name|stream
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeExtensionImplementation
name|void
name|CodeGenerator
operator|::
name|writeExtensionImplementation
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|m_parser
condition|)
return|return;
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
condition|)
return|return;
name|QTextStream
name|stream
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
comment|// Write the preamble
name|writePreamble
argument_list|(
name|fileName
argument_list|,
name|stream
argument_list|)
expr_stmt|;
comment|// Iterate through the list of extensions and create one class per extension
name|QStringList
name|extensions
init|=
name|m_parser
operator|->
name|extensions
argument_list|()
decl_stmt|;
name|Q_FOREACH
argument_list|(
argument|const QString&extension
argument_list|,
argument|extensions
argument_list|)
name|writeExtensionClassImplementation
argument_list|(
name|stream
argument_list|,
name|extension
argument_list|)
expr_stmt|;
comment|// Write the postamble
name|writePostamble
argument_list|(
name|fileName
argument_list|,
name|stream
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeExtensionClassDeclaration
name|void
name|CodeGenerator
operator|::
name|writeExtensionClassDeclaration
parameter_list|(
name|QTextStream
modifier|&
name|stream
parameter_list|,
specifier|const
name|QString
modifier|&
name|extension
parameter_list|,
name|ClassVisibility
name|visibility
parameter_list|)
specifier|const
block|{
specifier|const
name|QString
name|className
init|=
name|generateExtensionClassName
argument_list|(
name|extension
argument_list|,
name|visibility
argument_list|)
decl_stmt|;
name|QString
name|baseClass
init|=
operator|(
name|visibility
operator|==
name|Public
operator|)
condition|?
name|QStringLiteral
argument_list|(
literal|"QAbstractOpenGLExtension"
argument_list|)
else|:
name|QStringLiteral
argument_list|(
literal|"QAbstractOpenGLExtensionPrivate"
argument_list|)
decl_stmt|;
name|stream
operator|<<
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"class %2 : public %3"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|className
argument_list|)
operator|.
name|arg
argument_list|(
name|baseClass
argument_list|)
operator|<<
name|endl
operator|<<
literal|"{"
operator|<<
name|endl
operator|<<
literal|"public:"
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|visibility
operator|==
name|Public
condition|)
block|{
comment|// Default constructor
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"    "
argument_list|)
operator|<<
name|className
operator|<<
name|QStringLiteral
argument_list|(
literal|"();"
argument_list|)
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
comment|// Base class virtual function(s)
name|QString
name|resolveFunction
init|=
name|QStringLiteral
argument_list|(
literal|"    bool initializeOpenGLFunctions() Q_DECL_FINAL;"
argument_list|)
decl_stmt|;
name|stream
operator|<<
name|resolveFunction
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
comment|// Output the functions provided by this extension
name|QList
argument_list|<
name|Function
argument_list|>
name|functions
init|=
name|m_parser
operator|->
name|functionsForExtension
argument_list|(
name|extension
argument_list|)
decl_stmt|;
name|Q_FOREACH
argument_list|(
argument|const Function&f
argument_list|,
argument|functions
argument_list|)
name|writeFunctionDeclaration
argument_list|(
name|stream
argument_list|,
name|f
argument_list|,
name|visibility
argument_list|)
expr_stmt|;
if|if
condition|(
name|visibility
operator|==
name|Public
condition|)
block|{
comment|// Write out the protected ctor
name|stream
operator|<<
name|endl
operator|<<
name|QStringLiteral
argument_list|(
literal|"protected:"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"    Q_DECLARE_PRIVATE("
argument_list|)
operator|<<
name|className
operator|<<
name|QStringLiteral
argument_list|(
literal|")"
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
comment|// End the class declaration
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"};"
argument_list|)
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
comment|// Output the inline functions for public class
if|if
condition|(
name|visibility
operator|==
name|Public
condition|)
block|{
name|Q_FOREACH
argument_list|(
argument|const Function&f
argument_list|,
argument|functions
argument_list|)
name|writeExtensionInlineFunction
argument_list|(
name|stream
argument_list|,
name|className
argument_list|,
name|f
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|writeExtensionInlineFunction
name|void
name|CodeGenerator
operator|::
name|writeExtensionInlineFunction
parameter_list|(
name|QTextStream
modifier|&
name|stream
parameter_list|,
specifier|const
name|QString
modifier|&
name|className
parameter_list|,
specifier|const
name|Function
modifier|&
name|f
parameter_list|)
specifier|const
block|{
name|QStringList
name|argList
decl_stmt|;
name|Q_FOREACH
argument_list|(
argument|const Argument&arg
argument_list|,
argument|f.arguments
argument_list|)
block|{
name|QString
name|a
init|=
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"%1%2 %3%4"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
operator|(
name|arg
operator|.
name|direction
operator|==
name|Argument
operator|::
name|In
operator|&&
name|arg
operator|.
name|mode
operator|!=
name|Argument
operator|::
name|Value
operator|)
condition|?
name|QStringLiteral
argument_list|(
literal|"const "
argument_list|)
else|:
name|QString
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|arg
operator|.
name|type
argument_list|)
operator|.
name|arg
argument_list|(
name|passByType
argument_list|(
name|arg
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|safeArgumentName
argument_list|(
name|arg
operator|.
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|argList
operator|.
name|append
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
name|QString
name|args
init|=
name|argList
operator|.
name|join
argument_list|(
literal|", "
argument_list|)
decl_stmt|;
name|QString
name|signature
init|=
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"inline %1 %2::gl%3(%4)"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|f
operator|.
name|returnType
argument_list|)
operator|.
name|arg
argument_list|(
name|className
argument_list|)
operator|.
name|arg
argument_list|(
name|f
operator|.
name|name
argument_list|)
operator|.
name|arg
argument_list|(
name|args
argument_list|)
decl_stmt|;
name|stream
operator|<<
name|signature
operator|<<
name|endl
operator|<<
name|QStringLiteral
argument_list|(
literal|"{"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"    Q_D(%1);"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|className
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|QStringList
name|argumentNames
decl_stmt|;
name|Q_FOREACH
argument_list|(
argument|const Argument&arg
argument_list|,
argument|f.arguments
argument_list|)
name|argumentNames
operator|.
name|append
argument_list|(
name|safeArgumentName
argument_list|(
name|arg
operator|.
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|argNames
init|=
name|argumentNames
operator|.
name|join
argument_list|(
literal|", "
argument_list|)
decl_stmt|;
if|if
condition|(
name|f
operator|.
name|returnType
operator|==
name|QStringLiteral
argument_list|(
literal|"void"
argument_list|)
condition|)
name|stream
operator|<<
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"    d->%1(%2);"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|f
operator|.
name|name
argument_list|)
operator|.
name|arg
argument_list|(
name|argNames
argument_list|)
operator|<<
name|endl
expr_stmt|;
else|else
name|stream
operator|<<
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"    return d->%1(%2);"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|f
operator|.
name|name
argument_list|)
operator|.
name|arg
argument_list|(
name|argNames
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"}"
argument_list|)
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeExtensionClassImplementation
name|void
name|CodeGenerator
operator|::
name|writeExtensionClassImplementation
parameter_list|(
name|QTextStream
modifier|&
name|stream
parameter_list|,
specifier|const
name|QString
modifier|&
name|extension
parameter_list|)
specifier|const
block|{
specifier|const
name|QString
name|className
init|=
name|generateExtensionClassName
argument_list|(
name|extension
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|privateClassName
init|=
name|generateExtensionClassName
argument_list|(
name|extension
argument_list|,
name|Private
argument_list|)
decl_stmt|;
comment|// Output default constructor
name|stream
operator|<<
name|className
operator|<<
name|QStringLiteral
argument_list|(
literal|"::"
argument_list|)
operator|<<
name|className
operator|<<
name|QStringLiteral
argument_list|(
literal|"()"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|" : QAbstractOpenGLExtension(*(new "
argument_list|)
operator|<<
name|privateClassName
operator|<<
name|QStringLiteral
argument_list|(
literal|"))"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"{"
argument_list|)
operator|<<
name|endl
operator|<<
name|QStringLiteral
argument_list|(
literal|"}"
argument_list|)
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
comment|// Output function to initialize this class
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"bool "
argument_list|)
operator|<<
name|className
operator|<<
name|QStringLiteral
argument_list|(
literal|"::initializeOpenGLFunctions()"
argument_list|)
operator|<<
name|endl
operator|<<
name|QStringLiteral
argument_list|(
literal|"{"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"    if (isInitialized())"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"        return true;"
argument_list|)
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"    QOpenGLContext *context = QOpenGLContext::currentContext();"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"    if (!context) {"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"        qWarning(\"A current OpenGL context is required to resolve OpenGL extension functions\");"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"        return false;"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"    }"
argument_list|)
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
comment|// Output code to resolve entry points for this class
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"    // Resolve the functions"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"    Q_D("
argument_list|)
operator|<<
name|className
operator|<<
name|QStringLiteral
argument_list|(
literal|");"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|endl
expr_stmt|;
comment|// Output function declarations
name|QList
argument_list|<
name|Function
argument_list|>
name|functions
init|=
name|m_parser
operator|->
name|functionsForExtension
argument_list|(
name|extension
argument_list|)
decl_stmt|;
name|Q_FOREACH
argument_list|(
argument|const Function&f
argument_list|,
argument|functions
argument_list|)
name|writeEntryPointResolutionStatement
argument_list|(
name|stream
argument_list|,
name|f
argument_list|,
name|QStringLiteral
argument_list|(
literal|"d->"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Call the base class implementation
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"    QAbstractOpenGLExtension::initializeOpenGLFunctions();"
argument_list|)
operator|<<
name|endl
expr_stmt|;
comment|// Finish off
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"    return true;"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|QStringLiteral
argument_list|(
literal|"}"
argument_list|)
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
end_function
begin_function
DECL|function|generateExtensionClassName
name|QString
name|CodeGenerator
operator|::
name|generateExtensionClassName
parameter_list|(
specifier|const
name|QString
modifier|&
name|extension
parameter_list|,
name|ClassVisibility
name|visibility
parameter_list|)
specifier|const
block|{
name|QString
name|visibilitySuffix
decl_stmt|;
if|if
condition|(
name|visibility
operator|==
name|Private
condition|)
name|visibilitySuffix
operator|=
name|QStringLiteral
argument_list|(
literal|"Private"
argument_list|)
expr_stmt|;
return|return
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"QOpenGLExtension_%1%2"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|extension
argument_list|)
operator|.
name|arg
argument_list|(
name|visibilitySuffix
argument_list|)
return|;
block|}
end_function
end_unit
