begin_unit
begin_comment
comment|/*************************************************************************** ** ** Copyright (C) 2013 Klaralvdalens Datakonsult AB (KDAB) ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the utilities of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"legacyspecparser.h"
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<QFile>
end_include
begin_include
include|#
directive|include
file|<QRegExp>
end_include
begin_include
include|#
directive|include
file|<QStringList>
end_include
begin_include
include|#
directive|include
file|<QTextStream>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|SPECPARSER_DEBUG
end_ifdef
begin_define
DECL|macro|qLegacySpecParserDebug
define|#
directive|define
name|qLegacySpecParserDebug
value|qDebug
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|qLegacySpecParserDebug
define|#
directive|define
name|qLegacySpecParserDebug
value|QT_NO_QDEBUG_MACRO
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|parse
name|bool
name|LegacySpecParser
operator|::
name|parse
parameter_list|()
block|{
comment|// Get the mapping form generic types to specific types suitable for use in C-headers
if|if
condition|(
operator|!
name|parseTypeMap
argument_list|()
condition|)
return|return
literal|false
return|;
comment|// Open up a stream on the actual OpenGL function spec file
name|QFile
name|file
argument_list|(
name|specFileName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Failed to open spec file:"
operator|<<
name|specFileName
argument_list|()
operator|<<
literal|"Aborting"
expr_stmt|;
return|return
literal|false
return|;
block|}
name|QTextStream
name|stream
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
comment|// Extract the info that we need
name|parseFunctions
argument_list|(
name|stream
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|parseTypeMap
name|bool
name|LegacySpecParser
operator|::
name|parseTypeMap
parameter_list|()
block|{
name|QFile
name|file
argument_list|(
name|typeMapFileName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Failed to open type file:"
operator|<<
name|typeMapFileName
argument_list|()
operator|<<
literal|"Aborting"
expr_stmt|;
return|return
literal|false
return|;
block|}
name|QTextStream
name|stream
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
specifier|static
name|QRegExp
name|typeMapRegExp
argument_list|(
literal|"([^,]+)\\W+([^,]+)"
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|stream
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|QString
name|line
init|=
name|stream
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
name|QStringLiteral
argument_list|(
literal|"#"
argument_list|)
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|typeMapRegExp
operator|.
name|indexIn
argument_list|(
name|line
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|QString
name|key
init|=
name|typeMapRegExp
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
operator|.
name|simplified
argument_list|()
decl_stmt|;
name|QString
name|value
init|=
name|typeMapRegExp
operator|.
name|cap
argument_list|(
literal|2
argument_list|)
operator|.
name|simplified
argument_list|()
decl_stmt|;
comment|// Special case for void
if|if
condition|(
name|value
operator|==
name|QStringLiteral
argument_list|(
literal|"*"
argument_list|)
condition|)
name|value
operator|=
name|QStringLiteral
argument_list|(
literal|"void"
argument_list|)
expr_stmt|;
name|m_typeMap
operator|.
name|insert
argument_list|(
name|key
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|qLegacySpecParserDebug
argument_list|()
operator|<<
literal|"Found type mapping from"
operator|<<
name|key
operator|<<
literal|"=>"
operator|<<
name|value
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|parseEnums
name|void
name|LegacySpecParser
operator|::
name|parseEnums
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|parseFunctions
name|void
name|LegacySpecParser
operator|::
name|parseFunctions
parameter_list|(
name|QTextStream
modifier|&
name|stream
parameter_list|)
block|{
specifier|static
name|QRegExp
name|functionRegExp
argument_list|(
literal|"^(\\w+)\\(.*\\)"
argument_list|)
decl_stmt|;
specifier|static
name|QRegExp
name|returnRegExp
argument_list|(
literal|"^\\treturn\\s+(\\S+)"
argument_list|)
decl_stmt|;
specifier|static
name|QRegExp
name|argumentRegExp
argument_list|(
literal|"param\\s+(\\S+)\\s+(\\S+) (\\S+) (\\S+)"
argument_list|)
decl_stmt|;
specifier|static
name|QRegExp
name|versionRegExp
argument_list|(
literal|"^\\tversion\\s+(\\S+)"
argument_list|)
decl_stmt|;
specifier|static
name|QRegExp
name|deprecatedRegExp
argument_list|(
literal|"^\\tdeprecated\\s+(\\S+)"
argument_list|)
decl_stmt|;
specifier|static
name|QRegExp
name|categoryRegExp
argument_list|(
literal|"^\\tcategory\\s+(\\S+)"
argument_list|)
decl_stmt|;
specifier|static
name|QRegExp
name|categoryVersionRegExp
argument_list|(
literal|"VERSION_(\\d)_(\\d)"
argument_list|)
decl_stmt|;
specifier|static
name|QRegExp
name|extToCoreVersionRegExp
argument_list|(
literal|"passthru:\\s/\\*\\sOpenGL\\s(\\d)\\.(\\d)\\s.*\\sextensions:"
argument_list|)
decl_stmt|;
specifier|static
name|QRegExp
name|extToCoreRegExp
argument_list|(
literal|"passthru:\\s/\\*\\s(ARB_\\S*)\\s.*\\*/"
argument_list|)
decl_stmt|;
name|Function
name|currentFunction
decl_stmt|;
name|VersionProfile
name|currentVersionProfile
decl_stmt|;
name|QString
name|currentCategory
decl_stmt|;
name|bool
name|haveVersionInfo
init|=
literal|false
decl_stmt|;
name|bool
name|acceptCurrentFunctionInCore
init|=
literal|false
decl_stmt|;
name|bool
name|acceptCurrentFunctionInExtension
init|=
literal|false
decl_stmt|;
name|QHash
argument_list|<
name|QString
argument_list|,
name|Version
argument_list|>
name|extensionsNowInCore
decl_stmt|;
name|Version
name|extToCoreCurrentVersion
decl_stmt|;
name|int
name|functionCount
init|=
literal|0
decl_stmt|;
name|QSet
argument_list|<
name|Version
argument_list|>
name|versions
decl_stmt|;
while|while
condition|(
operator|!
name|stream
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|QString
name|line
init|=
name|stream
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|functionRegExp
operator|.
name|indexIn
argument_list|(
name|line
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
operator|!
name|currentFunction
operator|.
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// NB - Special handling!
comment|// Versions 4.2 and 4.3 (and probably newer) add functionality by
comment|// subsuming extensions such as ARB_texture_storage. However, some extensions
comment|// also include functions to interact with the EXT_direct_state_access
comment|// extension. These functions should be added to the DSA extension rather
comment|// than the core functionality. The core will already contain non-DSA
comment|// versions of these functions.
if|if
condition|(
name|acceptCurrentFunctionInCore
operator|&&
name|currentFunction
operator|.
name|name
operator|.
name|endsWith
argument_list|(
name|QStringLiteral
argument_list|(
literal|"EXT"
argument_list|)
argument_list|)
condition|)
block|{
name|acceptCurrentFunctionInCore
operator|=
literal|false
expr_stmt|;
name|acceptCurrentFunctionInExtension
operator|=
literal|true
expr_stmt|;
name|currentCategory
operator|=
name|QStringLiteral
argument_list|(
literal|"EXT_direct_state_access"
argument_list|)
expr_stmt|;
block|}
comment|// Finish off previous function (if any) by inserting it into the core
comment|// functionality or extension functionality (or both)
if|if
condition|(
name|acceptCurrentFunctionInCore
condition|)
block|{
name|m_functions
operator|.
name|insert
argument_list|(
name|currentVersionProfile
argument_list|,
name|currentFunction
argument_list|)
expr_stmt|;
name|versions
operator|.
name|insert
argument_list|(
name|currentVersionProfile
operator|.
name|version
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|acceptCurrentFunctionInExtension
condition|)
block|{
name|FunctionProfile
name|fp
decl_stmt|;
name|fp
operator|.
name|profile
operator|=
name|currentVersionProfile
operator|.
name|profile
expr_stmt|;
name|fp
operator|.
name|function
operator|=
name|currentFunction
expr_stmt|;
name|m_extensionFunctions
operator|.
name|insert
argument_list|(
name|currentCategory
argument_list|,
name|fp
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Start a new function
operator|++
name|functionCount
expr_stmt|;
name|haveVersionInfo
operator|=
literal|false
expr_stmt|;
name|acceptCurrentFunctionInCore
operator|=
literal|true
expr_stmt|;
name|acceptCurrentFunctionInExtension
operator|=
literal|false
expr_stmt|;
name|currentCategory
operator|=
name|QString
argument_list|()
expr_stmt|;
name|currentFunction
operator|=
name|Function
argument_list|()
expr_stmt|;
comment|// We assume a core function unless we find a deprecated flag (see below)
name|currentVersionProfile
operator|=
name|VersionProfile
argument_list|()
expr_stmt|;
name|currentVersionProfile
operator|.
name|profile
operator|=
name|VersionProfile
operator|::
name|CoreProfile
expr_stmt|;
comment|// Extract the function name
name|QString
name|functionName
init|=
name|functionRegExp
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|currentFunction
operator|.
name|name
operator|=
name|functionName
expr_stmt|;
name|qLegacySpecParserDebug
argument_list|()
operator|<<
literal|"Found function:"
operator|<<
name|functionName
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|argumentRegExp
operator|.
name|indexIn
argument_list|(
name|line
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// Extract info about this function argument
name|Argument
name|arg
decl_stmt|;
name|arg
operator|.
name|name
operator|=
name|argumentRegExp
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QString
name|type
init|=
name|argumentRegExp
operator|.
name|cap
argument_list|(
literal|2
argument_list|)
decl_stmt|;
comment|// Lookup in type map
name|arg
operator|.
name|type
operator|=
name|m_typeMap
operator|.
name|value
argument_list|(
name|type
argument_list|)
expr_stmt|;
name|QString
name|direction
init|=
name|argumentRegExp
operator|.
name|cap
argument_list|(
literal|3
argument_list|)
decl_stmt|;
if|if
condition|(
name|direction
operator|==
name|QStringLiteral
argument_list|(
literal|"in"
argument_list|)
condition|)
block|{
name|arg
operator|.
name|direction
operator|=
name|Argument
operator|::
name|In
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|direction
operator|==
name|QStringLiteral
argument_list|(
literal|"out"
argument_list|)
condition|)
block|{
name|arg
operator|.
name|direction
operator|=
name|Argument
operator|::
name|Out
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Invalid argument direction found:"
operator|<<
name|direction
expr_stmt|;
name|acceptCurrentFunctionInCore
operator|=
literal|false
expr_stmt|;
block|}
name|QString
name|mode
init|=
name|argumentRegExp
operator|.
name|cap
argument_list|(
literal|4
argument_list|)
decl_stmt|;
if|if
condition|(
name|mode
operator|==
name|QStringLiteral
argument_list|(
literal|"value"
argument_list|)
condition|)
block|{
name|arg
operator|.
name|mode
operator|=
name|Argument
operator|::
name|Value
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|QStringLiteral
argument_list|(
literal|"array"
argument_list|)
condition|)
block|{
name|arg
operator|.
name|mode
operator|=
name|Argument
operator|::
name|Array
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|QStringLiteral
argument_list|(
literal|"reference"
argument_list|)
condition|)
block|{
name|arg
operator|.
name|mode
operator|=
name|Argument
operator|::
name|Reference
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Invalid argument mode found:"
operator|<<
name|mode
expr_stmt|;
name|acceptCurrentFunctionInCore
operator|=
literal|false
expr_stmt|;
block|}
name|qLegacySpecParserDebug
argument_list|()
operator|<<
literal|"    argument:"
operator|<<
name|arg
operator|.
name|type
operator|<<
name|arg
operator|.
name|name
expr_stmt|;
name|currentFunction
operator|.
name|arguments
operator|.
name|append
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|returnRegExp
operator|.
name|indexIn
argument_list|(
name|line
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// Lookup the return type from the typemap
name|QString
name|returnTypeKey
init|=
name|returnRegExp
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
operator|.
name|simplified
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|m_typeMap
operator|.
name|contains
argument_list|(
name|returnTypeKey
argument_list|)
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Unknown return type found:"
operator|<<
name|returnTypeKey
expr_stmt|;
name|acceptCurrentFunctionInCore
operator|=
literal|false
expr_stmt|;
block|}
name|QString
name|returnType
init|=
name|m_typeMap
operator|.
name|value
argument_list|(
name|returnTypeKey
argument_list|)
decl_stmt|;
name|qLegacySpecParserDebug
argument_list|()
operator|<<
literal|"    return type:"
operator|<<
name|returnType
expr_stmt|;
name|currentFunction
operator|.
name|returnType
operator|=
name|returnType
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|versionRegExp
operator|.
name|indexIn
argument_list|(
name|line
argument_list|)
operator|!=
operator|-
literal|1
operator|&&
operator|!
name|haveVersionInfo
condition|)
block|{
comment|// Only use version line if no other source
comment|// Extract the OpenGL version in which this function was introduced
name|QString
name|version
init|=
name|versionRegExp
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|qLegacySpecParserDebug
argument_list|()
operator|<<
literal|"    version:"
operator|<<
name|version
expr_stmt|;
name|QStringList
name|parts
init|=
name|version
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|parts
operator|.
name|size
argument_list|()
operator|!=
literal|2
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Found invalid version number"
expr_stmt|;
continue|continue;
block|}
name|int
name|majorVersion
init|=
name|parts
operator|.
name|first
argument_list|()
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|minorVersion
init|=
name|parts
operator|.
name|last
argument_list|()
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|Version
name|v
decl_stmt|;
name|v
operator|.
name|major
operator|=
name|majorVersion
expr_stmt|;
name|v
operator|.
name|minor
operator|=
name|minorVersion
expr_stmt|;
name|currentVersionProfile
operator|.
name|version
operator|=
name|v
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|deprecatedRegExp
operator|.
name|indexIn
argument_list|(
name|line
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// Extract the OpenGL version in which this function was deprecated.
comment|// If it is OpenGL 3.1 then it must be a compatibility profile function
name|QString
name|deprecatedVersion
init|=
name|deprecatedRegExp
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
operator|.
name|simplified
argument_list|()
decl_stmt|;
if|if
condition|(
name|deprecatedVersion
operator|==
name|QStringLiteral
argument_list|(
literal|"3.1"
argument_list|)
operator|&&
operator|!
name|inDeprecationException
argument_list|(
name|currentFunction
operator|.
name|name
argument_list|)
condition|)
name|currentVersionProfile
operator|.
name|profile
operator|=
name|VersionProfile
operator|::
name|CompatibilityProfile
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|categoryRegExp
operator|.
name|indexIn
argument_list|(
name|line
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// Extract the category for this function
name|QString
name|category
init|=
name|categoryRegExp
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
operator|.
name|simplified
argument_list|()
decl_stmt|;
name|qLegacySpecParserDebug
argument_list|()
operator|<<
literal|"    category:"
operator|<<
name|category
expr_stmt|;
if|if
condition|(
name|categoryVersionRegExp
operator|.
name|indexIn
argument_list|(
name|category
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// Use the version info in the category in preference to the version
comment|// entry as this is more applicable and consistent
name|int
name|majorVersion
init|=
name|categoryVersionRegExp
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|minorVersion
init|=
name|categoryVersionRegExp
operator|.
name|cap
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|Version
name|v
decl_stmt|;
name|v
operator|.
name|major
operator|=
name|majorVersion
expr_stmt|;
name|v
operator|.
name|minor
operator|=
name|minorVersion
expr_stmt|;
name|currentVersionProfile
operator|.
name|version
operator|=
name|v
expr_stmt|;
name|haveVersionInfo
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
comment|// Make a note of the extension name and tag this function as being part of an extension
name|qLegacySpecParserDebug
argument_list|()
operator|<<
literal|"Found category ="
operator|<<
name|category
expr_stmt|;
name|currentCategory
operator|=
name|category
expr_stmt|;
name|acceptCurrentFunctionInExtension
operator|=
literal|true
expr_stmt|;
comment|// See if this category (extension) is in our set of extensions that
comment|// have now been folded into the core feature set
if|if
condition|(
name|extensionsNowInCore
operator|.
name|contains
argument_list|(
name|category
argument_list|)
condition|)
block|{
name|currentVersionProfile
operator|.
name|version
operator|=
name|extensionsNowInCore
operator|.
name|value
argument_list|(
name|category
argument_list|)
expr_stmt|;
name|haveVersionInfo
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
name|acceptCurrentFunctionInCore
operator|=
literal|false
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|extToCoreVersionRegExp
operator|.
name|indexIn
argument_list|(
name|line
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|qLegacySpecParserDebug
argument_list|()
operator|<<
name|line
expr_stmt|;
name|int
name|majorVersion
init|=
name|extToCoreVersionRegExp
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|minorVersion
init|=
name|extToCoreVersionRegExp
operator|.
name|cap
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|extToCoreCurrentVersion
operator|.
name|major
operator|=
name|majorVersion
expr_stmt|;
name|extToCoreCurrentVersion
operator|.
name|minor
operator|=
name|minorVersion
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|extToCoreRegExp
operator|.
name|indexIn
argument_list|(
name|line
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|QString
name|extension
init|=
name|extToCoreRegExp
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|extensionsNowInCore
operator|.
name|insert
argument_list|(
name|extension
argument_list|,
name|extToCoreCurrentVersion
argument_list|)
expr_stmt|;
block|}
block|}
name|m_versions
operator|=
name|versions
operator|.
name|toList
argument_list|()
expr_stmt|;
name|qSort
argument_list|(
name|m_versions
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|inDeprecationException
name|bool
name|LegacySpecParser
operator|::
name|inDeprecationException
parameter_list|(
specifier|const
name|QString
modifier|&
name|functionName
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|functionName
operator|==
name|QStringLiteral
argument_list|(
literal|"TexImage3D"
argument_list|)
operator|)
return|;
block|}
end_function
end_unit
