begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QLALR module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"lambda.h"
end_include
begin_include
include|#
directive|include
file|<cstdio>
end_include
begin_include
include|#
directive|include
file|<cstdlib>
end_include
begin_include
include|#
directive|include
file|<cstring>
end_include
begin_include
include|#
directive|include
file|"parser_table_p.h"
end_include
begin_class
DECL|class|Parser
class|class
name|Parser
super|:
specifier|protected
name|parser_table
block|{
public|public:
DECL|union|Value
union|union
name|Value
block|{
DECL|member|ival
name|int
name|ival
decl_stmt|;
comment|// ### more...
block|}
union|;
public|public:
name|Parser
parameter_list|()
constructor_decl|;
name|~
name|Parser
parameter_list|()
destructor_decl|;
name|bool
name|parse
parameter_list|()
function_decl|;
protected|protected:
specifier|inline
name|void
name|reallocateStack
parameter_list|()
function_decl|;
DECL|function|sym
specifier|inline
name|Value
modifier|&
name|sym
parameter_list|(
name|int
name|index
parameter_list|)
block|{
return|return
name|sym_stack
index|[
name|tos
operator|+
name|index
operator|-
literal|1
index|]
return|;
block|}
name|int
name|nextToken
parameter_list|()
function_decl|;
name|void
name|consumeRule
parameter_list|(
name|int
name|ruleno
parameter_list|)
function_decl|;
protected|protected:
DECL|member|tos
name|int
name|tos
decl_stmt|;
DECL|member|stack_size
name|int
name|stack_size
decl_stmt|;
DECL|member|sym_stack
name|Value
modifier|*
name|sym_stack
decl_stmt|;
DECL|member|state_stack
name|int
modifier|*
name|state_stack
decl_stmt|;
DECL|member|current_char
name|int
name|current_char
decl_stmt|;
name|unsigned
name|in_tag
range|:
literal|1
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|reallocateStack
specifier|inline
name|void
name|Parser
operator|::
name|reallocateStack
parameter_list|()
block|{
if|if
condition|(
operator|!
name|stack_size
condition|)
name|stack_size
operator|=
literal|128
expr_stmt|;
else|else
name|stack_size
operator|<<=
literal|1
expr_stmt|;
name|sym_stack
operator|=
cast|reinterpret_cast
argument_list|<
name|Value
operator|*
argument_list|>
argument_list|(
operator|::
name|realloc
argument_list|(
name|sym_stack
argument_list|,
name|stack_size
operator|*
sizeof|sizeof
argument_list|(
name|Value
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|state_stack
operator|=
cast|reinterpret_cast
argument_list|<
name|int
operator|*
argument_list|>
argument_list|(
operator|::
name|realloc
argument_list|(
name|state_stack
argument_list|,
name|stack_size
operator|*
sizeof|sizeof
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|Parser
name|Parser
operator|::
name|Parser
parameter_list|()
member_init_list|:
name|tos
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|stack_size
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|sym_stack
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|state_stack
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~Parser
name|Parser
operator|::
name|~
name|Parser
parameter_list|()
block|{
if|if
condition|(
name|stack_size
condition|)
block|{
operator|::
name|free
argument_list|(
name|sym_stack
argument_list|)
expr_stmt|;
operator|::
name|free
argument_list|(
name|state_stack
argument_list|)
expr_stmt|;
block|}
block|}
end_destructor
begin_function
DECL|function|parse
name|bool
name|Parser
operator|::
name|parse
parameter_list|()
block|{
specifier|const
name|int
name|INITIAL_STATE
init|=
literal|0
decl_stmt|;
name|current_char
operator|=
literal|0
expr_stmt|;
name|in_tag
operator|=
literal|0
expr_stmt|;
name|int
name|yytoken
init|=
operator|-
literal|1
decl_stmt|;
name|reallocateStack
argument_list|()
expr_stmt|;
name|tos
operator|=
literal|0
expr_stmt|;
name|state_stack
index|[
operator|++
name|tos
index|]
operator|=
name|INITIAL_STATE
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
name|yytoken
operator|==
operator|-
literal|1
operator|&&
operator|-
name|TERMINAL_COUNT
operator|!=
name|action_index
index|[
name|state_stack
index|[
name|tos
index|]
index|]
condition|)
name|yytoken
operator|=
name|nextToken
argument_list|()
expr_stmt|;
name|int
name|act
init|=
name|t_action
argument_list|(
name|state_stack
index|[
name|tos
index|]
argument_list|,
name|yytoken
argument_list|)
decl_stmt|;
if|if
condition|(
name|act
operator|==
name|ACCEPT_STATE
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|act
operator|>
literal|0
condition|)
block|{
if|if
condition|(
operator|++
name|tos
operator|==
name|stack_size
condition|)
name|reallocateStack
argument_list|()
expr_stmt|;
name|sym_stack
index|[
name|tos
index|]
operator|.
name|ival
operator|=
name|current_char
expr_stmt|;
comment|// ### save the token value here
name|state_stack
index|[
name|tos
index|]
operator|=
name|act
expr_stmt|;
name|yytoken
operator|=
operator|-
literal|1
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|act
operator|<
literal|0
condition|)
block|{
name|int
name|r
init|=
operator|-
name|act
operator|-
literal|1
decl_stmt|;
name|tos
operator|-=
name|rhs
index|[
name|r
index|]
expr_stmt|;
name|act
operator|=
name|state_stack
index|[
name|tos
operator|++
index|]
expr_stmt|;
name|consumeRule
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|state_stack
index|[
name|tos
index|]
operator|=
name|nt_action
argument_list|(
name|act
argument_list|,
name|lhs
index|[
name|r
index|]
operator|-
name|TERMINAL_COUNT
argument_list|)
expr_stmt|;
block|}
else|else
break|break;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|nextToken
name|int
name|Parser
operator|::
name|nextToken
parameter_list|()
block|{
specifier|static
name|int
name|tokens
index|[]
init|=
block|{
name|ID
block|,
name|ID
block|,
name|ID
block|,
name|EOF_SYMBOL
block|}
decl_stmt|;
specifier|static
name|int
modifier|*
name|tk
init|=
name|tokens
decl_stmt|;
return|return
operator|*
name|tk
operator|++
return|;
block|}
end_function
begin_function
DECL|function|consumeRule
name|void
name|Parser
operator|::
name|consumeRule
parameter_list|(
name|int
name|ruleno
parameter_list|)
block|{
switch|switch
condition|(
name|ruleno
condition|)
block|{
case|case
name|Symbol
case|:
name|printf
argument_list|(
literal|"symbol\n"
argument_list|)
expr_stmt|;
break|break;
case|case
name|SubExpression
case|:
name|printf
argument_list|(
literal|"sub-expr\n"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Appl
case|:
name|printf
argument_list|(
literal|"appl\n"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Abstr
case|:
name|printf
argument_list|(
literal|"abstr\n"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
end_function
begin_comment
comment|/////////////////////////////
end_comment
begin_comment
comment|// entry point
end_comment
begin_comment
comment|/////////////////////////////
end_comment
begin_function
DECL|function|main
name|int
name|main
parameter_list|()
block|{
name|Parser
name|parser
decl_stmt|;
if|if
condition|(
name|parser
operator|.
name|parse
argument_list|()
condition|)
name|printf
argument_list|(
literal|"OK\n"
argument_list|)
expr_stmt|;
else|else
name|printf
argument_list|(
literal|"KO\n"
argument_list|)
expr_stmt|;
block|}
end_function
end_unit
