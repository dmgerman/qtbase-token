begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the utils of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"lalr.h"
end_include
begin_include
include|#
directive|include
file|<limits.h>
end_include
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_define
DECL|macro|QLALR_NO_DEBUG_NULLABLES
define|#
directive|define
name|QLALR_NO_DEBUG_NULLABLES
end_define
begin_define
DECL|macro|QLALR_NO_DEBUG_LOOKBACKS
define|#
directive|define
name|QLALR_NO_DEBUG_LOOKBACKS
end_define
begin_define
DECL|macro|QLALR_NO_DEBUG_DIRECT_READS
define|#
directive|define
name|QLALR_NO_DEBUG_DIRECT_READS
end_define
begin_define
DECL|macro|QLALR_NO_DEBUG_READS
define|#
directive|define
name|QLALR_NO_DEBUG_READS
end_define
begin_define
DECL|macro|QLALR_NO_DEBUG_INCLUDES
define|#
directive|define
name|QLALR_NO_DEBUG_INCLUDES
end_define
begin_define
DECL|macro|QLALR_NO_DEBUG_LOOKAHEADS
define|#
directive|define
name|QLALR_NO_DEBUG_LOOKAHEADS
end_define
begin_function_decl
name|QT_BEGIN_NAMESPACE
name|QTextStream
name|qerr
parameter_list|(
name|stderr
parameter_list|,
name|QIODevice
operator|::
name|WriteOnly
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|QTextStream
name|qout
parameter_list|(
name|stdout
parameter_list|,
name|QIODevice
operator|::
name|WriteOnly
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|operator <
name|bool
name|operator
name|<
parameter_list|(
name|Name
name|a
parameter_list|,
name|Name
name|b
parameter_list|)
block|{
return|return
operator|*
name|a
operator|<
operator|*
name|b
return|;
block|}
end_function
begin_function
DECL|function|operator <
name|bool
name|operator
name|<
parameter_list|(
name|ItemPointer
name|a
parameter_list|,
name|ItemPointer
name|b
parameter_list|)
block|{
return|return
operator|&
operator|*
name|a
operator|<
operator|&
operator|*
name|b
return|;
block|}
end_function
begin_function
DECL|function|operator <
name|bool
name|operator
name|<
parameter_list|(
name|StatePointer
name|a
parameter_list|,
name|StatePointer
name|b
parameter_list|)
block|{
return|return
operator|&
operator|*
name|a
operator|<
operator|&
operator|*
name|b
return|;
block|}
end_function
begin_function
name|QT_END_NAMESPACE
DECL|function|operator <
name|bool
name|Read
operator|::
name|operator
name|<
parameter_list|(
specifier|const
name|Read
modifier|&
name|other
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|state
operator|==
name|other
operator|.
name|state
condition|)
return|return
name|nt
operator|<
name|other
operator|.
name|nt
return|;
return|return
name|state
operator|<
name|other
operator|.
name|state
return|;
block|}
end_function
begin_function
DECL|function|operator <
name|bool
name|Include
operator|::
name|operator
name|<
parameter_list|(
specifier|const
name|Include
modifier|&
name|other
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|state
operator|==
name|other
operator|.
name|state
condition|)
return|return
name|nt
operator|<
name|other
operator|.
name|nt
return|;
return|return
name|state
operator|<
name|other
operator|.
name|state
return|;
block|}
end_function
begin_function
DECL|function|operator <
name|bool
name|Lookback
operator|::
name|operator
name|<
parameter_list|(
specifier|const
name|Lookback
modifier|&
name|other
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|state
operator|==
name|other
operator|.
name|state
condition|)
return|return
name|nt
operator|<
name|other
operator|.
name|nt
return|;
return|return
name|state
operator|<
name|other
operator|.
name|state
return|;
block|}
end_function
begin_function
DECL|function|operator <<
name|QTextStream
modifier|&
name|operator
name|<<
parameter_list|(
name|QTextStream
modifier|&
name|out
parameter_list|,
specifier|const
name|Name
modifier|&
name|n
parameter_list|)
block|{
return|return
name|out
operator|<<
operator|*
name|n
return|;
block|}
end_function
begin_function
DECL|function|operator <<
name|QTextStream
modifier|&
name|operator
name|<<
parameter_list|(
name|QTextStream
modifier|&
name|out
parameter_list|,
specifier|const
name|Rule
modifier|&
name|r
parameter_list|)
block|{
name|out
operator|<<
operator|*
name|r
operator|.
name|lhs
operator|<<
literal|" ::="
expr_stmt|;
for|for
control|(
name|NameList
operator|::
name|const_iterator
name|name
init|=
name|r
operator|.
name|rhs
operator|.
name|begin
argument_list|()
init|;
name|name
operator|!=
name|r
operator|.
name|rhs
operator|.
name|end
argument_list|()
condition|;
operator|++
name|name
control|)
name|out
operator|<<
literal|" "
operator|<<
operator|*
operator|*
name|name
expr_stmt|;
return|return
name|out
return|;
block|}
end_function
begin_function
DECL|function|operator <<
name|QTextStream
modifier|&
name|operator
name|<<
parameter_list|(
name|QTextStream
modifier|&
name|out
parameter_list|,
specifier|const
name|NameSet
modifier|&
name|ns
parameter_list|)
block|{
name|out
operator|<<
literal|"{"
expr_stmt|;
for|for
control|(
name|NameSet
operator|::
name|const_iterator
name|n
init|=
name|ns
operator|.
name|begin
argument_list|()
init|;
name|n
operator|!=
name|ns
operator|.
name|end
argument_list|()
condition|;
operator|++
name|n
control|)
block|{
if|if
condition|(
name|n
operator|!=
name|ns
operator|.
name|begin
argument_list|()
condition|)
name|out
operator|<<
literal|", "
expr_stmt|;
name|out
operator|<<
operator|*
name|n
expr_stmt|;
block|}
return|return
name|out
operator|<<
literal|"}"
return|;
block|}
end_function
begin_function
DECL|function|next
name|Item
name|Item
operator|::
name|next
parameter_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|isReduceItem
argument_list|()
argument_list|)
expr_stmt|;
name|Item
name|n
decl_stmt|;
name|n
operator|.
name|rule
operator|=
name|rule
expr_stmt|;
name|n
operator|.
name|dot
operator|=
name|dot
expr_stmt|;
operator|++
name|n
operator|.
name|dot
expr_stmt|;
return|return
name|n
return|;
block|}
end_function
begin_function
DECL|function|operator <<
name|QTextStream
modifier|&
name|operator
name|<<
parameter_list|(
name|QTextStream
modifier|&
name|out
parameter_list|,
specifier|const
name|Item
modifier|&
name|item
parameter_list|)
block|{
name|RulePointer
name|r
init|=
name|item
operator|.
name|rule
decl_stmt|;
name|out
operator|<<
operator|*
name|r
operator|->
name|lhs
operator|<<
literal|":"
expr_stmt|;
for|for
control|(
name|NameList
operator|::
name|iterator
name|name
init|=
name|r
operator|->
name|rhs
operator|.
name|begin
argument_list|()
init|;
name|name
operator|!=
name|r
operator|->
name|rhs
operator|.
name|end
argument_list|()
condition|;
operator|++
name|name
control|)
block|{
name|out
operator|<<
literal|" "
expr_stmt|;
if|if
condition|(
name|item
operator|.
name|dot
operator|==
name|name
condition|)
name|out
operator|<<
literal|". "
expr_stmt|;
name|out
operator|<<
operator|*
operator|*
name|name
expr_stmt|;
block|}
if|if
condition|(
name|item
operator|.
name|isReduceItem
argument_list|()
condition|)
name|out
operator|<<
literal|" ."
expr_stmt|;
return|return
name|out
return|;
block|}
end_function
begin_constructor
DECL|function|State
name|State
operator|::
name|State
parameter_list|(
name|Grammar
modifier|*
name|g
parameter_list|)
member_init_list|:
name|defaultReduce
argument_list|(
name|g
operator|->
name|rules
operator|.
name|end
argument_list|()
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|insert
name|QPair
argument_list|<
name|ItemPointer
argument_list|,
name|bool
argument_list|>
name|State
operator|::
name|insert
parameter_list|(
specifier|const
name|Item
modifier|&
name|item
parameter_list|)
block|{
name|ItemPointer
name|it
init|=
name|std
operator|::
name|find
argument_list|(
name|kernel
operator|.
name|begin
argument_list|()
argument_list|,
name|kernel
operator|.
name|end
argument_list|()
argument_list|,
name|item
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|kernel
operator|.
name|end
argument_list|()
condition|)
return|return
name|qMakePair
argument_list|(
name|it
argument_list|,
literal|false
argument_list|)
return|;
return|return
name|qMakePair
argument_list|(
name|kernel
operator|.
name|insert
argument_list|(
name|it
argument_list|,
name|item
argument_list|)
argument_list|,
literal|true
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|insertClosure
name|QPair
argument_list|<
name|ItemPointer
argument_list|,
name|bool
argument_list|>
name|State
operator|::
name|insertClosure
parameter_list|(
specifier|const
name|Item
modifier|&
name|item
parameter_list|)
block|{
name|ItemPointer
name|it
init|=
name|std
operator|::
name|find
argument_list|(
name|closure
operator|.
name|begin
argument_list|()
argument_list|,
name|closure
operator|.
name|end
argument_list|()
argument_list|,
name|item
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|closure
operator|.
name|end
argument_list|()
condition|)
return|return
name|qMakePair
argument_list|(
name|it
argument_list|,
literal|false
argument_list|)
return|;
return|return
name|qMakePair
argument_list|(
name|closure
operator|.
name|insert
argument_list|(
name|it
argument_list|,
name|item
argument_list|)
argument_list|,
literal|true
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/////////////////////////////////////////////////////////////
end_comment
begin_comment
comment|// Grammar
end_comment
begin_comment
comment|/////////////////////////////////////////////////////////////
end_comment
begin_constructor
DECL|function|Grammar
name|Grammar
operator|::
name|Grammar
parameter_list|()
member_init_list|:
name|start
argument_list|(
name|names
operator|.
name|end
argument_list|()
argument_list|)
block|{
name|expected_shift_reduce
operator|=
literal|0
expr_stmt|;
name|expected_reduce_reduce
operator|=
literal|0
expr_stmt|;
name|current_prec
operator|=
literal|0
expr_stmt|;
name|current_assoc
operator|=
name|NonAssoc
expr_stmt|;
name|table_name
operator|=
name|QLatin1String
argument_list|(
literal|"parser_table"
argument_list|)
expr_stmt|;
name|tk_end
operator|=
name|intern
argument_list|(
literal|"$end"
argument_list|)
expr_stmt|;
name|terminals
operator|.
name|insert
argument_list|(
name|tk_end
argument_list|)
expr_stmt|;
name|spells
operator|.
name|insert
argument_list|(
name|tk_end
argument_list|,
literal|"end of file"
argument_list|)
expr_stmt|;
comment|/*tk_error= terminals.insert (intern ("error"))*/
empty_stmt|;
block|}
end_constructor
begin_function
DECL|function|intern
name|Name
name|Grammar
operator|::
name|intern
parameter_list|(
specifier|const
name|QString
modifier|&
name|id
parameter_list|)
block|{
name|Name
name|name
init|=
name|std
operator|::
name|find
argument_list|(
name|names
operator|.
name|begin
argument_list|()
argument_list|,
name|names
operator|.
name|end
argument_list|()
argument_list|,
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|==
name|names
operator|.
name|end
argument_list|()
condition|)
name|name
operator|=
name|names
operator|.
name|insert
argument_list|(
name|names
operator|.
name|end
argument_list|()
argument_list|,
name|id
argument_list|)
expr_stmt|;
return|return
name|name
return|;
block|}
end_function
begin_function
DECL|function|buildRuleMap
name|void
name|Grammar
operator|::
name|buildRuleMap
parameter_list|()
block|{
name|NameSet
name|undefined
decl_stmt|;
for|for
control|(
name|RulePointer
name|rule
init|=
name|rules
operator|.
name|begin
argument_list|()
init|;
name|rule
operator|!=
name|rules
operator|.
name|end
argument_list|()
condition|;
operator|++
name|rule
control|)
block|{
for|for
control|(
name|NameList
operator|::
name|iterator
name|it
init|=
name|rule
operator|->
name|rhs
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|rule
operator|->
name|rhs
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|Name
name|name
init|=
operator|*
name|it
decl_stmt|;
if|if
condition|(
name|isTerminal
argument_list|(
name|name
argument_list|)
operator|||
name|declared_lhs
operator|.
name|find
argument_list|(
name|name
argument_list|)
operator|!=
name|declared_lhs
operator|.
name|end
argument_list|()
operator|||
name|undefined
operator|.
name|find
argument_list|(
name|name
argument_list|)
operator|!=
name|undefined
operator|.
name|end
argument_list|()
condition|)
continue|continue;
name|undefined
operator|.
name|insert
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"*** Warning. Symbol `%s' is not defined\n"
argument_list|,
name|qPrintable
argument_list|(
operator|*
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|rule_map
operator|.
name|insert
argument_list|(
name|rule
operator|->
name|lhs
argument_list|,
name|rule
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|buildExtendedGrammar
name|void
name|Grammar
operator|::
name|buildExtendedGrammar
parameter_list|()
block|{
name|accept_symbol
operator|=
name|intern
argument_list|(
literal|"$accept"
argument_list|)
expr_stmt|;
name|goal
operator|=
name|rules
operator|.
name|insert
argument_list|(
name|rules
operator|.
name|end
argument_list|()
argument_list|,
name|Rule
argument_list|()
argument_list|)
expr_stmt|;
name|goal
operator|->
name|lhs
operator|=
name|accept_symbol
expr_stmt|;
name|goal
operator|->
name|rhs
operator|.
name|push_back
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|goal
operator|->
name|rhs
operator|.
name|push_back
argument_list|(
name|tk_end
argument_list|)
expr_stmt|;
name|non_terminals
operator|.
name|insert
argument_list|(
name|accept_symbol
argument_list|)
expr_stmt|;
block|}
end_function
begin_struct
DECL|struct|_Nullable
struct|struct
name|_Nullable
super|:
specifier|public
name|std
operator|::
name|unary_function
argument_list|<
name|Name
argument_list|,
name|bool
argument_list|>
block|{
DECL|member|_M_automaton
name|Automaton
modifier|*
name|_M_automaton
decl_stmt|;
DECL|function|_Nullable
name|_Nullable
parameter_list|(
name|Automaton
modifier|*
name|aut
parameter_list|)
member_init_list|:
name|_M_automaton
argument_list|(
name|aut
argument_list|)
block|{}
DECL|function|operator ()
name|bool
name|operator
name|()
parameter_list|(
name|Name
name|name
parameter_list|)
specifier|const
block|{
return|return
name|_M_automaton
operator|->
name|nullables
operator|.
name|find
argument_list|(
name|name
argument_list|)
operator|!=
name|_M_automaton
operator|->
name|nullables
operator|.
name|end
argument_list|()
return|;
block|}
block|}
struct|;
end_struct
begin_constructor
DECL|function|Automaton
name|Automaton
operator|::
name|Automaton
parameter_list|(
name|Grammar
modifier|*
name|g
parameter_list|)
member_init_list|:
name|_M_grammar
argument_list|(
name|g
argument_list|)
member_init_list|,
name|start
argument_list|(
name|states
operator|.
name|end
argument_list|()
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|id
name|int
name|Automaton
operator|::
name|id
parameter_list|(
name|RulePointer
name|rule
parameter_list|)
block|{
return|return
literal|1
operator|+
name|std
operator|::
name|distance
argument_list|(
name|_M_grammar
operator|->
name|rules
operator|.
name|begin
argument_list|()
argument_list|,
name|rule
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|id
name|int
name|Automaton
operator|::
name|id
parameter_list|(
name|Name
name|name
parameter_list|)
block|{
return|return
name|std
operator|::
name|distance
argument_list|(
name|_M_grammar
operator|->
name|names
operator|.
name|begin
argument_list|()
argument_list|,
name|name
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|id
name|int
name|Automaton
operator|::
name|id
parameter_list|(
name|StatePointer
name|state
parameter_list|)
block|{
return|return
name|std
operator|::
name|distance
argument_list|(
name|states
operator|.
name|begin
argument_list|()
argument_list|,
name|state
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|build
name|void
name|Automaton
operator|::
name|build
parameter_list|()
block|{
name|Item
name|item
decl_stmt|;
name|item
operator|.
name|rule
operator|=
name|_M_grammar
operator|->
name|goal
expr_stmt|;
name|item
operator|.
name|dot
operator|=
name|_M_grammar
operator|->
name|goal
operator|->
name|rhs
operator|.
name|begin
argument_list|()
expr_stmt|;
name|State
name|tmp
argument_list|(
name|_M_grammar
argument_list|)
decl_stmt|;
name|tmp
operator|.
name|insert
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|start
operator|=
name|internState
argument_list|(
name|tmp
argument_list|)
operator|.
name|first
expr_stmt|;
name|closure
argument_list|(
name|start
argument_list|)
expr_stmt|;
name|buildNullables
argument_list|()
expr_stmt|;
name|buildLookbackSets
argument_list|()
expr_stmt|;
name|buildReads
argument_list|()
expr_stmt|;
name|buildIncludesAndFollows
argument_list|()
expr_stmt|;
name|buildLookaheads
argument_list|()
expr_stmt|;
name|buildDefaultReduceActions
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|buildNullables
name|void
name|Automaton
operator|::
name|buildNullables
parameter_list|()
block|{
name|bool
name|changed
init|=
literal|true
decl_stmt|;
while|while
condition|(
name|changed
condition|)
block|{
name|changed
operator|=
literal|false
expr_stmt|;
for|for
control|(
name|RulePointer
name|rule
init|=
name|_M_grammar
operator|->
name|rules
operator|.
name|begin
argument_list|()
init|;
name|rule
operator|!=
name|_M_grammar
operator|->
name|rules
operator|.
name|end
argument_list|()
condition|;
operator|++
name|rule
control|)
block|{
name|NameList
operator|::
name|iterator
name|nn
init|=
name|std
operator|::
name|find_if
argument_list|(
name|rule
operator|->
name|rhs
operator|.
name|begin
argument_list|()
argument_list|,
name|rule
operator|->
name|rhs
operator|.
name|end
argument_list|()
argument_list|,
name|std
operator|::
name|not1
argument_list|(
name|_Nullable
argument_list|(
name|this
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|nn
operator|==
name|rule
operator|->
name|rhs
operator|.
name|end
argument_list|()
condition|)
name|changed
operator||=
name|nullables
operator|.
name|insert
argument_list|(
name|rule
operator|->
name|lhs
argument_list|)
operator|.
name|second
expr_stmt|;
block|}
block|}
ifndef|#
directive|ifndef
name|QLALR_NO_DEBUG_NULLABLES
name|qerr
operator|<<
literal|"nullables = {"
operator|<<
name|nullables
operator|<<
name|endl
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|internState
name|QPair
argument_list|<
name|StatePointer
argument_list|,
name|bool
argument_list|>
name|Automaton
operator|::
name|internState
parameter_list|(
specifier|const
name|State
modifier|&
name|state
parameter_list|)
block|{
name|StatePointer
name|it
init|=
name|std
operator|::
name|find
argument_list|(
name|states
operator|.
name|begin
argument_list|()
argument_list|,
name|states
operator|.
name|end
argument_list|()
argument_list|,
name|state
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|states
operator|.
name|end
argument_list|()
condition|)
return|return
name|qMakePair
argument_list|(
name|it
argument_list|,
literal|false
argument_list|)
return|;
return|return
name|qMakePair
argument_list|(
name|states
operator|.
name|insert
argument_list|(
name|it
argument_list|,
name|state
argument_list|)
argument_list|,
literal|true
argument_list|)
return|;
block|}
end_function
begin_struct
DECL|struct|_Bucket
struct|struct
name|_Bucket
block|{
DECL|member|items
name|QLinkedList
argument_list|<
name|ItemPointer
argument_list|>
name|items
decl_stmt|;
DECL|function|insert
name|void
name|insert
parameter_list|(
name|ItemPointer
name|item
parameter_list|)
block|{
name|items
operator|.
name|push_back
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
DECL|function|toState
name|State
name|toState
parameter_list|(
name|Automaton
modifier|*
name|aut
parameter_list|)
block|{
name|State
name|st
argument_list|(
name|aut
operator|->
name|_M_grammar
argument_list|)
decl_stmt|;
for|for
control|(
name|QLinkedList
argument_list|<
name|ItemPointer
argument_list|>
operator|::
name|iterator
name|item
init|=
name|items
operator|.
name|begin
argument_list|()
init|;
name|item
operator|!=
name|items
operator|.
name|end
argument_list|()
condition|;
operator|++
name|item
control|)
name|st
operator|.
name|insert
argument_list|(
operator|(
operator|*
name|item
operator|)
operator|->
name|next
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|st
return|;
block|}
block|}
struct|;
end_struct
begin_function
DECL|function|closure
name|void
name|Automaton
operator|::
name|closure
parameter_list|(
name|StatePointer
name|state
parameter_list|)
block|{
if|if
condition|(
operator|!
name|state
operator|->
name|closure
operator|.
name|empty
argument_list|()
condition|)
comment|// ### not true.
return|return;
typedef|typedef
name|QMap
argument_list|<
name|Name
argument_list|,
name|_Bucket
argument_list|>
name|bucket_map_type
typedef|;
name|bucket_map_type
name|buckets
decl_stmt|;
name|QStack
argument_list|<
name|ItemPointer
argument_list|>
name|working_list
decl_stmt|;
for|for
control|(
name|ItemPointer
name|item
init|=
name|state
operator|->
name|kernel
operator|.
name|begin
argument_list|()
init|;
name|item
operator|!=
name|state
operator|->
name|kernel
operator|.
name|end
argument_list|()
condition|;
operator|++
name|item
control|)
name|working_list
operator|.
name|push
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|state
operator|->
name|closure
operator|=
name|state
operator|->
name|kernel
expr_stmt|;
while|while
condition|(
operator|!
name|working_list
operator|.
name|empty
argument_list|()
condition|)
block|{
name|ItemPointer
name|item
init|=
name|working_list
operator|.
name|top
argument_list|()
decl_stmt|;
name|working_list
operator|.
name|pop
argument_list|()
expr_stmt|;
if|if
condition|(
name|item
operator|->
name|isReduceItem
argument_list|()
condition|)
continue|continue;
name|buckets
index|[
operator|*
name|item
operator|->
name|dot
index|]
operator|.
name|insert
argument_list|(
name|item
argument_list|)
expr_stmt|;
if|if
condition|(
name|_M_grammar
operator|->
name|isNonTerminal
argument_list|(
operator|*
name|item
operator|->
name|dot
argument_list|)
condition|)
block|{
foreach|foreach
control|(
name|RulePointer
name|rule
decl|,
name|_M_grammar
operator|->
name|rule_map
operator|.
name|values
argument_list|(
operator|*
name|item
operator|->
name|dot
argument_list|)
control|)
block|{
name|Item
name|ii
decl_stmt|;
name|ii
operator|.
name|rule
operator|=
name|rule
expr_stmt|;
name|ii
operator|.
name|dot
operator|=
name|rule
operator|->
name|rhs
operator|.
name|begin
argument_list|()
expr_stmt|;
name|QPair
argument_list|<
name|ItemPointer
argument_list|,
name|bool
argument_list|>
name|r
init|=
name|state
operator|->
name|insertClosure
argument_list|(
name|ii
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|second
condition|)
name|working_list
operator|.
name|push
argument_list|(
name|r
operator|.
name|first
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|QList
argument_list|<
name|StatePointer
argument_list|>
name|todo
decl_stmt|;
for|for
control|(
name|bucket_map_type
operator|::
name|iterator
name|bucket
init|=
name|buckets
operator|.
name|begin
argument_list|()
init|;
name|bucket
operator|!=
name|buckets
operator|.
name|end
argument_list|()
condition|;
operator|++
name|bucket
control|)
block|{
name|QPair
argument_list|<
name|StatePointer
argument_list|,
name|bool
argument_list|>
name|r
init|=
name|internState
argument_list|(
name|bucket
operator|->
name|toState
argument_list|(
name|this
argument_list|)
argument_list|)
decl_stmt|;
name|StatePointer
name|target
init|=
name|r
operator|.
name|first
decl_stmt|;
if|if
condition|(
name|r
operator|.
name|second
condition|)
name|todo
operator|.
name|push_back
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|state
operator|->
name|bundle
operator|.
name|insert
argument_list|(
name|bucket
operator|.
name|key
argument_list|()
argument_list|,
name|target
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
operator|!
name|todo
operator|.
name|empty
argument_list|()
condition|)
block|{
name|closure
argument_list|(
name|todo
operator|.
name|front
argument_list|()
argument_list|)
expr_stmt|;
name|todo
operator|.
name|pop_front
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|buildLookbackSets
name|void
name|Automaton
operator|::
name|buildLookbackSets
parameter_list|()
block|{
for|for
control|(
name|StatePointer
name|p
init|=
name|states
operator|.
name|begin
argument_list|()
init|;
name|p
operator|!=
name|states
operator|.
name|end
argument_list|()
condition|;
operator|++
name|p
control|)
block|{
for|for
control|(
name|Bundle
operator|::
name|iterator
name|a
init|=
name|p
operator|->
name|bundle
operator|.
name|begin
argument_list|()
init|;
name|a
operator|!=
name|p
operator|->
name|bundle
operator|.
name|end
argument_list|()
condition|;
operator|++
name|a
control|)
block|{
name|Name
name|A
init|=
name|a
operator|.
name|key
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|_M_grammar
operator|->
name|isNonTerminal
argument_list|(
name|A
argument_list|)
condition|)
continue|continue;
foreach|foreach
control|(
name|RulePointer
name|rule
decl|,
name|_M_grammar
operator|->
name|rule_map
operator|.
name|values
argument_list|(
name|A
argument_list|)
control|)
block|{
name|StatePointer
name|q
init|=
name|p
decl_stmt|;
for|for
control|(
name|NameList
operator|::
name|iterator
name|dot
init|=
name|rule
operator|->
name|rhs
operator|.
name|begin
argument_list|()
init|;
name|dot
operator|!=
name|rule
operator|->
name|rhs
operator|.
name|end
argument_list|()
condition|;
operator|++
name|dot
control|)
name|q
operator|=
name|q
operator|->
name|bundle
operator|.
name|value
argument_list|(
operator|*
name|dot
argument_list|,
name|states
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|q
operator|!=
name|states
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|ItemPointer
name|item
init|=
name|q
operator|->
name|closure
operator|.
name|begin
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|item
operator|!=
name|q
operator|->
name|closure
operator|.
name|end
argument_list|()
condition|;
operator|++
name|item
control|)
block|{
if|if
condition|(
name|item
operator|->
name|rule
operator|==
name|rule
operator|&&
name|item
operator|->
name|dot
operator|==
name|item
operator|->
name|end_rhs
argument_list|()
condition|)
break|break;
block|}
if|if
condition|(
name|item
operator|==
name|q
operator|->
name|closure
operator|.
name|end
argument_list|()
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|q
operator|==
name|p
argument_list|)
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|rule
operator|->
name|rhs
operator|.
name|begin
argument_list|()
operator|==
name|rule
operator|->
name|rhs
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|item
operator|=
name|q
operator|->
name|closure
operator|.
name|begin
argument_list|()
init|;
name|item
operator|!=
name|q
operator|->
name|closure
operator|.
name|end
argument_list|()
condition|;
operator|++
name|item
control|)
block|{
if|if
condition|(
name|item
operator|->
name|rule
operator|==
name|rule
operator|&&
name|item
operator|->
name|dot
operator|==
name|item
operator|->
name|end_rhs
argument_list|()
condition|)
break|break;
block|}
block|}
name|Q_ASSERT
argument_list|(
name|item
operator|!=
name|q
operator|->
name|closure
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|lookbacks
operator|.
name|insert
argument_list|(
name|item
argument_list|,
name|Lookback
argument_list|(
name|p
argument_list|,
name|A
argument_list|)
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QLALR_NO_DEBUG_LOOKBACKS
name|qerr
operator|<<
literal|"*** ("
operator|<<
name|id
argument_list|(
name|q
argument_list|)
operator|<<
literal|", "
operator|<<
operator|*
name|rule
operator|<<
literal|") lookback ("
operator|<<
name|id
argument_list|(
name|p
argument_list|)
operator|<<
literal|", "
operator|<<
operator|*
name|A
operator|<<
literal|")"
operator|<<
name|endl
expr_stmt|;
endif|#
directive|endif
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|buildDirectReads
name|void
name|Automaton
operator|::
name|buildDirectReads
parameter_list|()
block|{
for|for
control|(
name|StatePointer
name|q
init|=
name|states
operator|.
name|begin
argument_list|()
init|;
name|q
operator|!=
name|states
operator|.
name|end
argument_list|()
condition|;
operator|++
name|q
control|)
block|{
for|for
control|(
name|Bundle
operator|::
name|iterator
name|a
init|=
name|q
operator|->
name|bundle
operator|.
name|begin
argument_list|()
init|;
name|a
operator|!=
name|q
operator|->
name|bundle
operator|.
name|end
argument_list|()
condition|;
operator|++
name|a
control|)
block|{
if|if
condition|(
operator|!
name|_M_grammar
operator|->
name|isNonTerminal
argument_list|(
name|a
operator|.
name|key
argument_list|()
argument_list|)
condition|)
continue|continue;
name|StatePointer
name|r
init|=
name|a
operator|.
name|value
argument_list|()
decl_stmt|;
for|for
control|(
name|Bundle
operator|::
name|iterator
name|z
init|=
name|r
operator|->
name|bundle
operator|.
name|begin
argument_list|()
init|;
name|z
operator|!=
name|r
operator|->
name|bundle
operator|.
name|end
argument_list|()
condition|;
operator|++
name|z
control|)
block|{
name|Name
name|sym
init|=
name|z
operator|.
name|key
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|_M_grammar
operator|->
name|isTerminal
argument_list|(
name|sym
argument_list|)
condition|)
continue|continue;
name|q
operator|->
name|reads
index|[
name|a
operator|.
name|key
argument_list|()
index|]
operator|.
name|insert
argument_list|(
name|sym
argument_list|)
expr_stmt|;
block|}
block|}
ifndef|#
directive|ifndef
name|QLALR_NO_DEBUG_DIRECT_READS
for|for
control|(
name|QMap
argument_list|<
name|Name
argument_list|,
name|NameSet
argument_list|>
operator|::
name|iterator
name|dr
init|=
name|q
operator|->
name|reads
operator|.
name|begin
argument_list|()
init|;
name|dr
operator|!=
name|q
operator|->
name|reads
operator|.
name|end
argument_list|()
condition|;
operator|++
name|dr
control|)
name|qerr
operator|<<
literal|"*** DR("
operator|<<
name|id
argument_list|(
name|q
argument_list|)
operator|<<
literal|", "
operator|<<
name|dr
operator|.
name|key
argument_list|()
operator|<<
literal|") = "
operator|<<
name|dr
operator|.
name|value
argument_list|()
operator|<<
name|endl
expr_stmt|;
endif|#
directive|endif
block|}
block|}
end_function
begin_function
DECL|function|buildReadsDigraph
name|void
name|Automaton
operator|::
name|buildReadsDigraph
parameter_list|()
block|{
for|for
control|(
name|StatePointer
name|q
init|=
name|states
operator|.
name|begin
argument_list|()
init|;
name|q
operator|!=
name|states
operator|.
name|end
argument_list|()
condition|;
operator|++
name|q
control|)
block|{
for|for
control|(
name|Bundle
operator|::
name|iterator
name|a
init|=
name|q
operator|->
name|bundle
operator|.
name|begin
argument_list|()
init|;
name|a
operator|!=
name|q
operator|->
name|bundle
operator|.
name|end
argument_list|()
condition|;
operator|++
name|a
control|)
block|{
if|if
condition|(
operator|!
name|_M_grammar
operator|->
name|isNonTerminal
argument_list|(
name|a
operator|.
name|key
argument_list|()
argument_list|)
condition|)
continue|continue;
name|StatePointer
name|r
init|=
name|a
operator|.
name|value
argument_list|()
decl_stmt|;
for|for
control|(
name|Bundle
operator|::
name|iterator
name|z
init|=
name|r
operator|->
name|bundle
operator|.
name|begin
argument_list|()
init|;
name|z
operator|!=
name|r
operator|->
name|bundle
operator|.
name|end
argument_list|()
condition|;
operator|++
name|z
control|)
block|{
name|Name
name|sym
init|=
name|z
operator|.
name|key
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|_M_grammar
operator|->
name|isNonTerminal
argument_list|(
name|sym
argument_list|)
operator|||
name|nullables
operator|.
name|find
argument_list|(
name|sym
argument_list|)
operator|==
name|nullables
operator|.
name|end
argument_list|()
condition|)
continue|continue;
name|ReadsGraph
operator|::
name|iterator
name|source
init|=
name|ReadsGraph
operator|::
name|get
argument_list|(
name|Read
argument_list|(
name|q
argument_list|,
name|a
operator|.
name|key
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|ReadsGraph
operator|::
name|iterator
name|target
init|=
name|ReadsGraph
operator|::
name|get
argument_list|(
name|Read
argument_list|(
name|r
argument_list|,
name|sym
argument_list|)
argument_list|)
decl_stmt|;
name|source
operator|->
name|insertEdge
argument_list|(
name|target
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QLALR_NO_DEBUG_READS
name|qerr
operator|<<
literal|"*** "
expr_stmt|;
name|dump
argument_list|(
name|qerr
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|qerr
operator|<<
literal|" reads "
expr_stmt|;
name|dump
argument_list|(
name|qerr
argument_list|,
name|target
argument_list|)
expr_stmt|;
name|qerr
operator|<<
name|endl
expr_stmt|;
endif|#
directive|endif
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|buildReads
name|void
name|Automaton
operator|::
name|buildReads
parameter_list|()
block|{
name|buildDirectReads
argument_list|()
expr_stmt|;
name|buildReadsDigraph
argument_list|()
expr_stmt|;
name|_M_reads_dfn
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|ReadsGraph
operator|::
name|iterator
name|node
init|=
name|ReadsGraph
operator|::
name|begin_nodes
argument_list|()
init|;
name|node
operator|!=
name|ReadsGraph
operator|::
name|end_nodes
argument_list|()
condition|;
operator|++
name|node
control|)
block|{
if|if
condition|(
operator|!
name|node
operator|->
name|root
condition|)
continue|continue;
name|visitReadNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|ReadsGraph
operator|::
name|iterator
name|node
init|=
name|ReadsGraph
operator|::
name|begin_nodes
argument_list|()
init|;
name|node
operator|!=
name|ReadsGraph
operator|::
name|end_nodes
argument_list|()
condition|;
operator|++
name|node
control|)
name|visitReadNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|visitReadNode
name|void
name|Automaton
operator|::
name|visitReadNode
parameter_list|(
name|ReadNode
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|->
name|dfn
operator|!=
literal|0
condition|)
return|return;
comment|// nothing to do
name|int
name|N
init|=
name|node
operator|->
name|dfn
operator|=
operator|++
name|_M_reads_dfn
decl_stmt|;
name|_M_reads_stack
operator|.
name|push
argument_list|(
name|node
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QLALR_NO_DEBUG_INCLUDES
comment|// qerr<< "*** Debug. visit node ("<< id (node->data.state)<< ", "<< node->data.nt<< ")  N = "<< N<< endl;
endif|#
directive|endif
for|for
control|(
name|ReadsGraph
operator|::
name|edge_iterator
name|edge
init|=
name|node
operator|->
name|begin
argument_list|()
init|;
name|edge
operator|!=
name|node
operator|->
name|end
argument_list|()
condition|;
operator|++
name|edge
control|)
block|{
name|ReadsGraph
operator|::
name|iterator
name|r
init|=
operator|*
name|edge
decl_stmt|;
name|visitReadNode
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|node
operator|->
name|dfn
operator|=
name|qMin
argument_list|(
name|N
argument_list|,
name|r
operator|->
name|dfn
argument_list|)
expr_stmt|;
name|NameSet
modifier|&
name|dst
init|=
name|node
operator|->
name|data
operator|.
name|state
operator|->
name|reads
index|[
name|node
operator|->
name|data
operator|.
name|nt
index|]
decl_stmt|;
name|NameSet
modifier|&
name|src
init|=
name|r
operator|->
name|data
operator|.
name|state
operator|->
name|reads
index|[
name|r
operator|->
name|data
operator|.
name|nt
index|]
decl_stmt|;
name|dst
operator|.
name|insert
argument_list|(
name|src
operator|.
name|begin
argument_list|()
argument_list|,
name|src
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|->
name|dfn
operator|==
name|N
condition|)
block|{
name|ReadsGraph
operator|::
name|iterator
name|tos
init|=
name|_M_reads_stack
operator|.
name|top
argument_list|()
decl_stmt|;
do|do
block|{
name|tos
operator|=
name|_M_reads_stack
operator|.
name|top
argument_list|()
expr_stmt|;
name|_M_reads_stack
operator|.
name|pop
argument_list|()
expr_stmt|;
name|tos
operator|->
name|dfn
operator|=
name|INT_MAX
expr_stmt|;
block|}
do|while
condition|(
name|tos
operator|!=
name|node
condition|)
do|;
block|}
block|}
end_function
begin_function
DECL|function|buildIncludesAndFollows
name|void
name|Automaton
operator|::
name|buildIncludesAndFollows
parameter_list|()
block|{
for|for
control|(
name|StatePointer
name|p
init|=
name|states
operator|.
name|begin
argument_list|()
init|;
name|p
operator|!=
name|states
operator|.
name|end
argument_list|()
condition|;
operator|++
name|p
control|)
name|p
operator|->
name|follows
operator|=
name|p
operator|->
name|reads
expr_stmt|;
name|buildIncludesDigraph
argument_list|()
expr_stmt|;
name|_M_includes_dfn
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|IncludesGraph
operator|::
name|iterator
name|node
init|=
name|IncludesGraph
operator|::
name|begin_nodes
argument_list|()
init|;
name|node
operator|!=
name|IncludesGraph
operator|::
name|end_nodes
argument_list|()
condition|;
operator|++
name|node
control|)
block|{
if|if
condition|(
operator|!
name|node
operator|->
name|root
condition|)
continue|continue;
name|visitIncludeNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|IncludesGraph
operator|::
name|iterator
name|node
init|=
name|IncludesGraph
operator|::
name|begin_nodes
argument_list|()
init|;
name|node
operator|!=
name|IncludesGraph
operator|::
name|end_nodes
argument_list|()
condition|;
operator|++
name|node
control|)
name|visitIncludeNode
argument_list|(
name|node
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|buildIncludesDigraph
name|void
name|Automaton
operator|::
name|buildIncludesDigraph
parameter_list|()
block|{
for|for
control|(
name|StatePointer
name|pp
init|=
name|states
operator|.
name|begin
argument_list|()
init|;
name|pp
operator|!=
name|states
operator|.
name|end
argument_list|()
condition|;
operator|++
name|pp
control|)
block|{
for|for
control|(
name|Bundle
operator|::
name|iterator
name|a
init|=
name|pp
operator|->
name|bundle
operator|.
name|begin
argument_list|()
init|;
name|a
operator|!=
name|pp
operator|->
name|bundle
operator|.
name|end
argument_list|()
condition|;
operator|++
name|a
control|)
block|{
name|Name
name|name
init|=
name|a
operator|.
name|key
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|_M_grammar
operator|->
name|isNonTerminal
argument_list|(
name|name
argument_list|)
condition|)
continue|continue;
foreach|foreach
control|(
name|RulePointer
name|rule
decl|,
name|_M_grammar
operator|->
name|rule_map
operator|.
name|values
argument_list|(
name|name
argument_list|)
control|)
block|{
name|StatePointer
name|p
init|=
name|pp
decl_stmt|;
for|for
control|(
name|NameList
operator|::
name|iterator
name|A
init|=
name|rule
operator|->
name|rhs
operator|.
name|begin
argument_list|()
init|;
name|A
operator|!=
name|rule
operator|->
name|rhs
operator|.
name|end
argument_list|()
condition|;
operator|++
name|A
control|)
block|{
name|NameList
operator|::
name|iterator
name|dot
init|=
name|A
decl_stmt|;
operator|++
name|dot
expr_stmt|;
if|if
condition|(
name|_M_grammar
operator|->
name|isNonTerminal
argument_list|(
operator|*
name|A
argument_list|)
operator|&&
name|dot
operator|==
name|rule
operator|->
name|rhs
operator|.
name|end
argument_list|()
condition|)
block|{
comment|// found an include edge.
name|IncludesGraph
operator|::
name|iterator
name|target
init|=
name|IncludesGraph
operator|::
name|get
argument_list|(
name|Include
argument_list|(
name|pp
argument_list|,
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|IncludesGraph
operator|::
name|iterator
name|source
init|=
name|IncludesGraph
operator|::
name|get
argument_list|(
name|Include
argument_list|(
name|p
argument_list|,
operator|*
name|A
argument_list|)
argument_list|)
decl_stmt|;
name|source
operator|->
name|insertEdge
argument_list|(
name|target
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QLALR_NO_DEBUG_INCLUDES
name|qerr
operator|<<
literal|"*** ("
operator|<<
name|id
argument_list|(
name|p
argument_list|)
operator|<<
literal|", "
operator|<<
operator|*
name|A
operator|<<
literal|") includes ("
operator|<<
name|id
argument_list|(
name|pp
argument_list|)
operator|<<
literal|", "
operator|<<
operator|*
name|name
operator|<<
literal|")"
operator|<<
name|endl
expr_stmt|;
endif|#
directive|endif
comment|// QLALR_NO_DEBUG_INCLUDES
continue|continue;
block|}
name|p
operator|=
name|p
operator|->
name|bundle
operator|.
name|value
argument_list|(
operator|*
name|A
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|_M_grammar
operator|->
name|isNonTerminal
argument_list|(
operator|*
name|A
argument_list|)
condition|)
continue|continue;
name|NameList
operator|::
name|iterator
name|first_not_nullable
init|=
name|std
operator|::
name|find_if
argument_list|(
name|dot
argument_list|,
name|rule
operator|->
name|rhs
operator|.
name|end
argument_list|()
argument_list|,
name|std
operator|::
name|not1
argument_list|(
name|_Nullable
argument_list|(
name|this
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|first_not_nullable
operator|!=
name|rule
operator|->
name|rhs
operator|.
name|end
argument_list|()
condition|)
continue|continue;
comment|// found an include edge.
name|IncludesGraph
operator|::
name|iterator
name|target
init|=
name|IncludesGraph
operator|::
name|get
argument_list|(
name|Include
argument_list|(
name|pp
argument_list|,
name|name
argument_list|)
argument_list|)
decl_stmt|;
name|IncludesGraph
operator|::
name|iterator
name|source
init|=
name|IncludesGraph
operator|::
name|get
argument_list|(
name|Include
argument_list|(
name|p
argument_list|,
operator|*
name|A
argument_list|)
argument_list|)
decl_stmt|;
name|source
operator|->
name|insertEdge
argument_list|(
name|target
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QLALR_NO_DEBUG_INCLUDES
name|qerr
operator|<<
literal|"*** ("
operator|<<
name|id
argument_list|(
name|p
argument_list|)
operator|<<
literal|", "
operator|<<
operator|*
name|A
operator|<<
literal|") includes ("
operator|<<
name|id
argument_list|(
name|pp
argument_list|)
operator|<<
literal|", "
operator|<<
operator|*
name|name
operator|<<
literal|")"
operator|<<
name|endl
expr_stmt|;
endif|#
directive|endif
comment|// QLALR_NO_DEBUG_INCLUDES
block|}
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|visitIncludeNode
name|void
name|Automaton
operator|::
name|visitIncludeNode
parameter_list|(
name|IncludeNode
name|node
parameter_list|)
block|{
if|if
condition|(
name|node
operator|->
name|dfn
operator|!=
literal|0
condition|)
return|return;
comment|// nothing to do
name|int
name|N
init|=
name|node
operator|->
name|dfn
operator|=
operator|++
name|_M_includes_dfn
decl_stmt|;
name|_M_includes_stack
operator|.
name|push
argument_list|(
name|node
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QLALR_NO_DEBUG_INCLUDES
comment|// qerr<< "*** Debug. visit node ("<< id (node->data.state)<< ", "<< node->data.nt<< ")  N = "<< N<< endl;
endif|#
directive|endif
for|for
control|(
name|IncludesGraph
operator|::
name|edge_iterator
name|edge
init|=
name|node
operator|->
name|begin
argument_list|()
init|;
name|edge
operator|!=
name|node
operator|->
name|end
argument_list|()
condition|;
operator|++
name|edge
control|)
block|{
name|IncludesGraph
operator|::
name|iterator
name|r
init|=
operator|*
name|edge
decl_stmt|;
name|visitIncludeNode
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|node
operator|->
name|dfn
operator|=
name|qMin
argument_list|(
name|N
argument_list|,
name|r
operator|->
name|dfn
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QLALR_NO_DEBUG_INCLUDES
name|qerr
operator|<<
literal|"*** Merge. follows"
expr_stmt|;
name|dump
argument_list|(
name|qerr
argument_list|,
name|node
argument_list|)
expr_stmt|;
name|qerr
operator|<<
literal|" += follows"
expr_stmt|;
name|dump
argument_list|(
name|qerr
argument_list|,
name|r
argument_list|)
expr_stmt|;
name|qerr
operator|<<
name|endl
expr_stmt|;
endif|#
directive|endif
name|NameSet
modifier|&
name|dst
init|=
name|node
operator|->
name|data
operator|.
name|state
operator|->
name|follows
index|[
name|node
operator|->
name|data
operator|.
name|nt
index|]
decl_stmt|;
name|NameSet
modifier|&
name|src
init|=
name|r
operator|->
name|data
operator|.
name|state
operator|->
name|follows
index|[
name|r
operator|->
name|data
operator|.
name|nt
index|]
decl_stmt|;
name|dst
operator|.
name|insert
argument_list|(
name|src
operator|.
name|begin
argument_list|()
argument_list|,
name|src
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|node
operator|->
name|dfn
operator|==
name|N
condition|)
block|{
name|IncludesGraph
operator|::
name|iterator
name|tos
init|=
name|_M_includes_stack
operator|.
name|top
argument_list|()
decl_stmt|;
do|do
block|{
name|tos
operator|=
name|_M_includes_stack
operator|.
name|top
argument_list|()
expr_stmt|;
name|_M_includes_stack
operator|.
name|pop
argument_list|()
expr_stmt|;
name|tos
operator|->
name|dfn
operator|=
name|INT_MAX
expr_stmt|;
block|}
do|while
condition|(
name|tos
operator|!=
name|node
condition|)
do|;
block|}
block|}
end_function
begin_function
DECL|function|buildLookaheads
name|void
name|Automaton
operator|::
name|buildLookaheads
parameter_list|()
block|{
for|for
control|(
name|StatePointer
name|p
init|=
name|states
operator|.
name|begin
argument_list|()
init|;
name|p
operator|!=
name|states
operator|.
name|end
argument_list|()
condition|;
operator|++
name|p
control|)
block|{
for|for
control|(
name|ItemPointer
name|item
init|=
name|p
operator|->
name|closure
operator|.
name|begin
argument_list|()
init|;
name|item
operator|!=
name|p
operator|->
name|closure
operator|.
name|end
argument_list|()
condition|;
operator|++
name|item
control|)
block|{
foreach|foreach
control|(
name|Lookback
name|lookback
decl|,
name|lookbacks
operator|.
name|values
argument_list|(
name|item
argument_list|)
control|)
block|{
name|StatePointer
name|q
init|=
name|lookback
operator|.
name|state
decl_stmt|;
ifndef|#
directive|ifndef
name|QLALR_NO_DEBUG_LOOKAHEADS
name|qerr
operator|<<
literal|"("
operator|<<
name|id
argument_list|(
name|p
argument_list|)
operator|<<
literal|", "
operator|<<
operator|*
name|item
operator|->
name|rule
operator|<<
literal|") lookbacks "
expr_stmt|;
name|dump
argument_list|(
name|qerr
argument_list|,
name|lookback
argument_list|)
expr_stmt|;
name|qerr
operator|<<
literal|" with follows ("
operator|<<
name|id
argument_list|(
name|q
argument_list|)
operator|<<
literal|", "
operator|<<
name|lookback
operator|.
name|nt
operator|<<
literal|") = "
operator|<<
name|q
operator|->
name|follows
index|[
name|lookback
operator|.
name|nt
index|]
operator|<<
name|endl
expr_stmt|;
endif|#
directive|endif
name|lookaheads
index|[
name|item
index|]
operator|.
name|insert
argument_list|(
name|q
operator|->
name|follows
index|[
name|lookback
operator|.
name|nt
index|]
operator|.
name|begin
argument_list|()
argument_list|,
name|q
operator|->
name|follows
index|[
name|lookback
operator|.
name|nt
index|]
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// propagate the lookahead in the kernel
name|ItemPointer
name|k
init|=
name|p
operator|->
name|kernel
operator|.
name|begin
argument_list|()
decl_stmt|;
name|ItemPointer
name|c
init|=
name|p
operator|->
name|closure
operator|.
name|begin
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|k
operator|!=
name|p
operator|->
name|kernel
operator|.
name|end
argument_list|()
condition|;
operator|++
name|k
operator|,
operator|++
name|c
control|)
name|lookaheads
index|[
name|k
index|]
operator|=
name|lookaheads
index|[
name|c
index|]
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|buildDefaultReduceActions
name|void
name|Automaton
operator|::
name|buildDefaultReduceActions
parameter_list|()
block|{
for|for
control|(
name|StatePointer
name|state
init|=
name|states
operator|.
name|begin
argument_list|()
init|;
name|state
operator|!=
name|states
operator|.
name|end
argument_list|()
condition|;
operator|++
name|state
control|)
block|{
name|ItemPointer
name|def
init|=
name|state
operator|->
name|closure
operator|.
name|end
argument_list|()
decl_stmt|;
name|int
name|size
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|ItemPointer
name|item
init|=
name|state
operator|->
name|closure
operator|.
name|begin
argument_list|()
init|;
name|item
operator|!=
name|state
operator|->
name|closure
operator|.
name|end
argument_list|()
condition|;
operator|++
name|item
control|)
block|{
if|if
condition|(
name|item
operator|->
name|dot
operator|!=
name|item
operator|->
name|end_rhs
argument_list|()
condition|)
continue|continue;
name|int
name|la
init|=
name|lookaheads
operator|.
name|value
argument_list|(
name|item
argument_list|)
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|def
operator|==
name|state
operator|->
name|closure
operator|.
name|end
argument_list|()
operator|||
name|la
operator|>
name|size
condition|)
block|{
name|def
operator|=
name|item
expr_stmt|;
name|size
operator|=
name|la
expr_stmt|;
block|}
block|}
if|if
condition|(
name|def
operator|!=
name|state
operator|->
name|closure
operator|.
name|end
argument_list|()
condition|)
block|{
name|Q_ASSERT
argument_list|(
name|size
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|state
operator|->
name|defaultReduce
operator|=
name|def
operator|->
name|rule
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|dump
name|void
name|Automaton
operator|::
name|dump
parameter_list|(
name|QTextStream
modifier|&
name|out
parameter_list|,
name|IncludeNode
name|incl
parameter_list|)
block|{
name|out
operator|<<
literal|"("
operator|<<
name|id
argument_list|(
name|incl
operator|->
name|data
operator|.
name|state
argument_list|)
operator|<<
literal|", "
operator|<<
name|incl
operator|->
name|data
operator|.
name|nt
operator|<<
literal|")"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dump
name|void
name|Automaton
operator|::
name|dump
parameter_list|(
name|QTextStream
modifier|&
name|out
parameter_list|,
name|ReadNode
name|rd
parameter_list|)
block|{
name|out
operator|<<
literal|"("
operator|<<
name|id
argument_list|(
name|rd
operator|->
name|data
operator|.
name|state
argument_list|)
operator|<<
literal|", "
operator|<<
name|rd
operator|->
name|data
operator|.
name|nt
operator|<<
literal|")"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dump
name|void
name|Automaton
operator|::
name|dump
parameter_list|(
name|QTextStream
modifier|&
name|out
parameter_list|,
specifier|const
name|Lookback
modifier|&
name|lp
parameter_list|)
block|{
name|out
operator|<<
literal|"("
operator|<<
name|id
argument_list|(
name|lp
operator|.
name|state
argument_list|)
operator|<<
literal|", "
operator|<<
name|lp
operator|.
name|nt
operator|<<
literal|")"
expr_stmt|;
block|}
end_function
end_unit
