begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the tools applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"s60themeconvert.h"
end_include
begin_include
include|#
directive|include
file|<QtGui>
end_include
begin_include
include|#
directive|include
file|<QtWebKit>
end_include
begin_decl_stmt
DECL|variable|pictureSize
specifier|static
specifier|const
name|int
name|pictureSize
init|=
literal|256
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|msgPartNotInTdf
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|msgPartNotInTdf
init|=
literal|"  Warning: The .tdf file does not have a part for "
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|msgSvgNotFound
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|msgSvgNotFound
init|=
literal|"  Fatal: Could not find part .svg "
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|dumpPartPictures
name|void
name|dumpPartPictures
parameter_list|(
specifier|const
name|QHash
argument_list|<
name|QString
argument_list|,
name|QPicture
argument_list|>
modifier|&
name|partPictures
parameter_list|)
block|{
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|partKey
decl|,
name|partPictures
operator|.
name|keys
argument_list|()
control|)
block|{
name|QPicture
name|partPicture
init|=
name|partPictures
operator|.
name|value
argument_list|(
name|partKey
argument_list|)
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
name|partKey
operator|<<
name|partPicture
operator|.
name|boundingRect
argument_list|()
expr_stmt|;
name|QImage
name|image
argument_list|(
name|partPicture
operator|.
name|boundingRect
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
decl_stmt|;
name|image
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|QPainter
name|p
argument_list|(
operator|&
name|image
argument_list|)
decl_stmt|;
name|partPicture
operator|.
name|play
argument_list|(
operator|&
name|p
argument_list|)
expr_stmt|;
name|image
operator|.
name|save
argument_list|(
name|partKey
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|".png"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|dumpColors
name|void
name|dumpColors
parameter_list|(
specifier|const
name|QHash
argument_list|<
name|QPair
argument_list|<
name|QString
argument_list|,
name|int
argument_list|>
argument_list|,
name|QColor
argument_list|>
modifier|&
name|colors
parameter_list|)
block|{
foreach|foreach
control|(
specifier|const
name|QColor
modifier|&
name|color
decl|,
name|colors
operator|.
name|values
argument_list|()
control|)
block|{
specifier|const
name|QPair
argument_list|<
name|QString
argument_list|,
name|int
argument_list|>
name|key
init|=
name|colors
operator|.
name|key
argument_list|(
name|color
argument_list|)
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
name|key
operator|<<
name|color
expr_stmt|;
block|}
block|}
end_function
begin_class
DECL|class|WebKitSVGRenderer
class|class
name|WebKitSVGRenderer
super|:
specifier|public
name|QWebView
block|{
name|Q_OBJECT
public|public:
name|WebKitSVGRenderer
parameter_list|(
name|QWidget
modifier|*
name|parent
init|=
literal|0
parameter_list|)
constructor_decl|;
name|QPicture
name|svgToQPicture
parameter_list|(
specifier|const
name|QString
modifier|&
name|svgFileName
parameter_list|)
function_decl|;
private|private
name|slots
private|:
name|void
name|loadFinishedSlot
parameter_list|(
name|bool
name|ok
parameter_list|)
function_decl|;
private|private:
DECL|member|m_loop
name|QEventLoop
name|m_loop
decl_stmt|;
DECL|member|m_result
name|QPicture
name|m_result
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|WebKitSVGRenderer
name|WebKitSVGRenderer
operator|::
name|WebKitSVGRenderer
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWebView
argument_list|(
name|parent
argument_list|)
block|{
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|loadFinished
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|loadFinishedSlot
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|setFixedSize
argument_list|(
name|pictureSize
argument_list|,
name|pictureSize
argument_list|)
expr_stmt|;
name|QPalette
name|pal
init|=
name|palette
argument_list|()
decl_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Base
argument_list|,
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|setPalette
argument_list|(
name|pal
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|svgToQPicture
name|QPicture
name|WebKitSVGRenderer
operator|::
name|svgToQPicture
parameter_list|(
specifier|const
name|QString
modifier|&
name|svgFileName
parameter_list|)
block|{
name|load
argument_list|(
name|QUrl
operator|::
name|fromLocalFile
argument_list|(
name|svgFileName
argument_list|)
argument_list|)
expr_stmt|;
name|m_loop
operator|.
name|exec
argument_list|()
expr_stmt|;
return|return
name|m_result
return|;
block|}
end_function
begin_function
DECL|function|loadFinishedSlot
name|void
name|WebKitSVGRenderer
operator|::
name|loadFinishedSlot
parameter_list|(
name|bool
name|ok
parameter_list|)
block|{
comment|// crude error-checking
if|if
condition|(
operator|!
name|ok
condition|)
name|qDebug
argument_list|()
operator|<<
literal|"Failed loading "
operator|<<
name|qPrintable
argument_list|(
name|url
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|page
argument_list|()
operator|->
name|mainFrame
argument_list|()
operator|->
name|evaluateJavaScript
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"document.rootElement.preserveAspectRatio.baseVal.align = SVGPreserveAspectRatio.SVG_PRESERVEASPECTRATIO_NONE;"
literal|"document.rootElement.style.width = '100%';"
literal|"document.rootElement.style.height = '100%';"
literal|"document.rootElement.width.baseVal.newValueSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PERCENTAGE, 100);"
literal|"document.rootElement.height.baseVal.newValueSpecifiedUnits(SVGLength.SVG_LENGTHTYPE_PERCENTAGE, 100);"
argument_list|)
argument_list|)
expr_stmt|;
name|m_result
operator|=
name|QPicture
argument_list|()
expr_stmt|;
comment|// "Clear"
name|QPainter
name|p
argument_list|(
operator|&
name|m_result
argument_list|)
decl_stmt|;
name|page
argument_list|()
operator|->
name|mainFrame
argument_list|()
operator|->
name|render
argument_list|(
operator|&
name|p
argument_list|)
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
name|m_result
operator|.
name|setBoundingRect
argument_list|(
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|pictureSize
argument_list|,
name|pictureSize
argument_list|)
argument_list|)
expr_stmt|;
name|m_loop
operator|.
name|exit
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|colorIdPair
name|QPair
argument_list|<
name|QString
argument_list|,
name|int
argument_list|>
name|colorIdPair
parameter_list|(
specifier|const
name|QString
modifier|&
name|colorID
parameter_list|)
block|{
name|QPair
argument_list|<
name|QString
argument_list|,
name|int
argument_list|>
name|result
decl_stmt|;
name|QString
name|idText
init|=
name|colorID
decl_stmt|;
name|idText
operator|.
name|remove
argument_list|(
name|QRegExp
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"[0-9]"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|QS60Style
operator|::
name|colorListKeys
argument_list|()
operator|.
name|contains
argument_list|(
name|idText
argument_list|)
condition|)
block|{
name|QString
name|idNumber
init|=
name|colorID
decl_stmt|;
name|idNumber
operator|.
name|remove
argument_list|(
name|QRegExp
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"[a-zA-Z]"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|result
operator|.
name|first
operator|=
name|idText
expr_stmt|;
name|result
operator|.
name|second
operator|=
name|idNumber
operator|.
name|toInt
argument_list|()
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|parseTdfFile
name|bool
name|parseTdfFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|tdfFile
parameter_list|,
name|QHash
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
modifier|&
name|partSvgs
parameter_list|,
name|QHash
argument_list|<
name|QPair
argument_list|<
name|QString
argument_list|,
name|int
argument_list|>
argument_list|,
name|QColor
argument_list|>
modifier|&
name|colors
parameter_list|)
block|{
name|QFile
name|file
argument_list|(
name|tdfFile
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
return|return
literal|false
return|;
specifier|const
name|QLatin1String
name|elementKey
argument_list|(
literal|"element"
argument_list|)
decl_stmt|;
specifier|const
name|QLatin1String
name|partKey
argument_list|(
literal|"part"
argument_list|)
decl_stmt|;
specifier|const
name|QLatin1String
name|elementIdKey
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
specifier|const
name|QLatin1String
name|layerKey
argument_list|(
literal|"layer"
argument_list|)
decl_stmt|;
specifier|const
name|QLatin1String
name|layerFileNameKey
argument_list|(
literal|"filename"
argument_list|)
decl_stmt|;
specifier|const
name|QLatin1String
name|layerColourrgbKey
argument_list|(
literal|"colourrgb"
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|annoyingPrefix
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"S60_2_6%"
argument_list|)
decl_stmt|;
name|QXmlStreamReader
name|reader
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|QString
name|partId
decl_stmt|;
name|QPair
argument_list|<
name|QString
argument_list|,
name|int
argument_list|>
name|colorId
decl_stmt|;
comment|// Somebody with a sense of aesthetics may implement proper XML parsing, here.
while|while
condition|(
operator|!
name|reader
operator|.
name|atEnd
argument_list|()
condition|)
block|{
specifier|const
name|QXmlStreamReader
operator|::
name|TokenType
name|token
init|=
name|reader
operator|.
name|readNext
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|token
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
if|if
condition|(
name|reader
operator|.
name|name
argument_list|()
operator|==
name|elementKey
operator|||
name|reader
operator|.
name|name
argument_list|()
operator|==
name|partKey
condition|)
block|{
name|QString
name|id
init|=
name|reader
operator|.
name|attributes
argument_list|()
operator|.
name|value
argument_list|(
name|elementIdKey
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|QS60Style
operator|::
name|partKeys
argument_list|()
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
name|partId
operator|=
name|id
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|id
operator|.
name|isEmpty
argument_list|()
operator|&&
name|id
operator|.
name|at
argument_list|(
name|id
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|isDigit
argument_list|()
condition|)
name|colorId
operator|=
name|colorIdPair
argument_list|(
name|id
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|QS60Style
operator|::
name|partKeys
argument_list|()
operator|.
name|contains
argument_list|(
name|id
operator|.
name|mid
argument_list|(
name|annoyingPrefix
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
condition|)
name|partId
operator|=
name|id
operator|.
name|mid
argument_list|(
name|annoyingPrefix
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|reader
operator|.
name|name
argument_list|()
operator|==
name|layerKey
condition|)
block|{
if|if
condition|(
operator|!
name|partId
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|const
name|QString
name|svgFile
init|=
name|reader
operator|.
name|attributes
argument_list|()
operator|.
name|value
argument_list|(
name|layerFileNameKey
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|partSvgs
operator|.
name|insert
argument_list|(
name|partId
argument_list|,
name|svgFile
argument_list|)
expr_stmt|;
name|partId
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|colorId
operator|.
name|first
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|const
name|QColor
name|colorValue
argument_list|(
name|reader
operator|.
name|attributes
argument_list|()
operator|.
name|value
argument_list|(
name|layerColourrgbKey
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|toInt
argument_list|(
name|NULL
argument_list|,
literal|16
argument_list|)
argument_list|)
decl_stmt|;
name|colors
operator|.
name|insert
argument_list|(
name|colorId
argument_list|,
name|colorValue
argument_list|)
expr_stmt|;
name|colorId
operator|.
name|first
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
break|break;
case|case
name|QXmlStreamReader
operator|::
name|EndElement
case|:
if|if
condition|(
name|reader
operator|.
name|tokenString
argument_list|()
operator|==
name|elementKey
operator|||
name|reader
operator|.
name|name
argument_list|()
operator|==
name|partKey
condition|)
name|partId
operator|.
name|clear
argument_list|()
expr_stmt|;
break|break;
default|default:
break|break;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|loadThemeFromTdf
name|bool
name|loadThemeFromTdf
parameter_list|(
specifier|const
name|QString
modifier|&
name|tdfFile
parameter_list|,
name|QHash
argument_list|<
name|QString
argument_list|,
name|QPicture
argument_list|>
modifier|&
name|partPictures
parameter_list|,
name|QHash
argument_list|<
name|QPair
argument_list|<
name|QString
argument_list|,
name|int
argument_list|>
argument_list|,
name|QColor
argument_list|>
modifier|&
name|colors
parameter_list|)
block|{
name|QHash
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|parsedPartSvgs
decl_stmt|;
name|QHash
argument_list|<
name|QString
argument_list|,
name|QPicture
argument_list|>
name|parsedPartPictures
decl_stmt|;
name|QHash
argument_list|<
name|QPair
argument_list|<
name|QString
argument_list|,
name|int
argument_list|>
argument_list|,
name|QColor
argument_list|>
name|parsedColors
decl_stmt|;
name|bool
name|success
init|=
name|parseTdfFile
argument_list|(
name|tdfFile
argument_list|,
name|parsedPartSvgs
argument_list|,
name|parsedColors
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
return|return
literal|false
return|;
specifier|const
name|QString
name|tdfBasePath
init|=
name|QFileInfo
argument_list|(
name|tdfFile
argument_list|)
operator|.
name|absolutePath
argument_list|()
decl_stmt|;
name|WebKitSVGRenderer
name|renderer
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|partKey
decl|,
name|QS60Style
operator|::
name|partKeys
argument_list|()
control|)
block|{
name|qDebug
argument_list|()
operator|<<
name|partKey
expr_stmt|;
name|QString
name|tdfFullName
decl_stmt|;
if|if
condition|(
name|parsedPartSvgs
operator|.
name|contains
argument_list|(
name|partKey
argument_list|)
condition|)
block|{
name|tdfFullName
operator|=
name|tdfBasePath
operator|+
name|QDir
operator|::
name|separator
argument_list|()
operator|+
name|parsedPartSvgs
operator|.
name|value
argument_list|(
name|partKey
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
name|msgPartNotInTdf
operator|<<
name|partKey
expr_stmt|;
name|tdfFullName
operator|=
name|tdfBasePath
operator|+
name|QDir
operator|::
name|separator
argument_list|()
operator|+
name|partKey
operator|+
name|QLatin1String
argument_list|(
literal|".svg"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|QFile
argument_list|(
name|tdfFullName
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
name|msgSvgNotFound
operator|<<
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|tdfFullName
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|const
name|QPicture
name|partPicture
init|=
name|renderer
operator|.
name|svgToQPicture
argument_list|(
name|tdfFullName
argument_list|)
decl_stmt|;
name|parsedPartPictures
operator|.
name|insert
argument_list|(
name|partKey
argument_list|,
name|partPicture
argument_list|)
expr_stmt|;
block|}
comment|//    dumpPartPictures(parsedPartPictures);
comment|//    dumpColors(colors);
name|partPictures
operator|=
name|parsedPartPictures
expr_stmt|;
name|colors
operator|=
name|parsedColors
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|convertTdfToBlob
name|bool
name|S60ThemeConvert
operator|::
name|convertTdfToBlob
parameter_list|(
specifier|const
name|QString
modifier|&
name|themeTdf
parameter_list|,
specifier|const
name|QString
modifier|&
name|themeBlob
parameter_list|)
block|{
name|QHash
argument_list|<
name|QString
argument_list|,
name|QPicture
argument_list|>
name|partPictures
decl_stmt|;
name|QHash
argument_list|<
name|QPair
argument_list|<
name|QString
argument_list|,
name|int
argument_list|>
argument_list|,
name|QColor
argument_list|>
name|colors
decl_stmt|;
if|if
condition|(
operator|!
operator|::
name|loadThemeFromTdf
argument_list|(
name|themeTdf
argument_list|,
name|partPictures
argument_list|,
name|colors
argument_list|)
condition|)
return|return
literal|false
return|;
name|QS60Style
name|style
decl_stmt|;
name|style
operator|.
name|setS60Theme
argument_list|(
name|partPictures
argument_list|,
name|colors
argument_list|)
expr_stmt|;
return|return
name|style
operator|.
name|saveS60ThemeToBlob
argument_list|(
name|themeBlob
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|parseDesignFile
name|bool
name|parseDesignFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|designFile
parameter_list|,
name|QHash
argument_list|<
name|QPair
argument_list|<
name|QString
argument_list|,
name|int
argument_list|>
argument_list|,
name|QColor
argument_list|>
modifier|&
name|colors
parameter_list|)
block|{
specifier|const
name|QLatin1String
name|elementKey
argument_list|(
literal|"element"
argument_list|)
decl_stmt|;
specifier|const
name|QLatin1String
name|elementIdKey
argument_list|(
literal|"id"
argument_list|)
decl_stmt|;
specifier|const
name|QLatin1String
name|colorKey
argument_list|(
literal|"defaultcolour_rgb"
argument_list|)
decl_stmt|;
name|QFile
name|file
argument_list|(
name|designFile
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
return|return
literal|false
return|;
name|QXmlStreamReader
name|reader
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|QPair
argument_list|<
name|QString
argument_list|,
name|int
argument_list|>
name|colorId
decl_stmt|;
comment|// Somebody with a sense of aesthetics may implement proper XML parsing, here.
while|while
condition|(
operator|!
name|reader
operator|.
name|atEnd
argument_list|()
condition|)
block|{
specifier|const
name|QXmlStreamReader
operator|::
name|TokenType
name|token
init|=
name|reader
operator|.
name|readNext
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|token
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
if|if
condition|(
name|reader
operator|.
name|name
argument_list|()
operator|==
name|elementKey
condition|)
block|{
specifier|const
name|QString
name|colorString
init|=
name|reader
operator|.
name|attributes
argument_list|()
operator|.
name|value
argument_list|(
name|colorKey
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|colorString
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|const
name|QString
name|colorId
init|=
name|reader
operator|.
name|attributes
argument_list|()
operator|.
name|value
argument_list|(
name|elementIdKey
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|colors
operator|.
name|insert
argument_list|(
name|colorIdPair
argument_list|(
name|colorId
argument_list|)
argument_list|,
name|colorString
operator|.
name|toInt
argument_list|(
name|NULL
argument_list|,
literal|16
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
default|default:
break|break;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|loadDefaultTheme
name|bool
name|loadDefaultTheme
parameter_list|(
specifier|const
name|QString
modifier|&
name|themePath
parameter_list|,
name|QHash
argument_list|<
name|QString
argument_list|,
name|QPicture
argument_list|>
modifier|&
name|partPictures
parameter_list|,
name|QHash
argument_list|<
name|QPair
argument_list|<
name|QString
argument_list|,
name|int
argument_list|>
argument_list|,
name|QColor
argument_list|>
modifier|&
name|colors
parameter_list|)
block|{
specifier|const
name|QDir
name|dir
argument_list|(
name|themePath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|exists
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|parseDesignFile
argument_list|(
name|themePath
operator|+
name|QDir
operator|::
name|separator
argument_list|()
operator|+
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"defaultdesign.xml"
argument_list|)
argument_list|,
name|colors
argument_list|)
condition|)
return|return
literal|false
return|;
name|WebKitSVGRenderer
name|renderer
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|partKey
decl|,
name|QS60Style
operator|::
name|partKeys
argument_list|()
control|)
block|{
specifier|const
name|QString
name|partFileName
init|=
name|partKey
operator|+
name|QLatin1String
argument_list|(
literal|".svg"
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|partFile
argument_list|(
name|dir
operator|.
name|absolutePath
argument_list|()
operator|+
name|QDir
operator|::
name|separator
argument_list|()
operator|+
name|partFileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
name|partFile
argument_list|)
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
name|msgSvgNotFound
operator|<<
name|partFileName
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|const
name|QPicture
name|partPicture
init|=
name|renderer
operator|.
name|svgToQPicture
argument_list|(
name|partFile
argument_list|)
decl_stmt|;
name|partPictures
operator|.
name|insert
argument_list|(
name|partKey
argument_list|,
name|partPicture
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|convertDefaultThemeToBlob
name|bool
name|S60ThemeConvert
operator|::
name|convertDefaultThemeToBlob
parameter_list|(
specifier|const
name|QString
modifier|&
name|themePath
parameter_list|,
specifier|const
name|QString
modifier|&
name|themeBlob
parameter_list|)
block|{
name|QHash
argument_list|<
name|QString
argument_list|,
name|QPicture
argument_list|>
name|partPictures
decl_stmt|;
name|QHash
argument_list|<
name|QPair
argument_list|<
name|QString
argument_list|,
name|int
argument_list|>
argument_list|,
name|QColor
argument_list|>
name|colors
decl_stmt|;
if|if
condition|(
operator|!
operator|::
name|loadDefaultTheme
argument_list|(
name|themePath
argument_list|,
name|partPictures
argument_list|,
name|colors
argument_list|)
condition|)
return|return
literal|false
return|;
name|QS60Style
name|style
decl_stmt|;
name|style
operator|.
name|setS60Theme
argument_list|(
name|partPictures
argument_list|,
name|colors
argument_list|)
expr_stmt|;
return|return
name|style
operator|.
name|saveS60ThemeToBlob
argument_list|(
name|themeBlob
argument_list|)
return|;
block|}
end_function
begin_include
include|#
directive|include
file|"s60themeconvert.moc"
end_include
end_unit
