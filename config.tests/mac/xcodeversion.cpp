begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the config.tests of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_include
include|#
directive|include
file|<CoreFoundation/CoreFoundation.h>
end_include
begin_include
include|#
directive|include
file|<Carbon/Carbon.h>
end_include
begin_decl_stmt
DECL|variable|success
name|int
name|success
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|fail
name|int
name|fail
init|=
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|internal_error
name|int
name|internal_error
init|=
name|success
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|internal_error
comment|// enable dwarf on internal errors
end_comment
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
specifier|const
name|char
modifier|*
modifier|*
name|argv
parameter_list|)
block|{
name|CFURLRef
name|cfurl
decl_stmt|;
name|OSStatus
name|err
init|=
name|LSFindApplicationForInfo
argument_list|(
literal|0
argument_list|,
name|CFSTR
argument_list|(
literal|"com.apple.Xcode"
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|cfurl
argument_list|)
decl_stmt|;
if|if
condition|(
name|err
operator|!=
name|noErr
condition|)
return|return
name|internal_error
return|;
name|CFBundleRef
name|bundle
init|=
name|CFBundleCreate
argument_list|(
literal|0
argument_list|,
name|cfurl
argument_list|)
decl_stmt|;
if|if
condition|(
name|bundle
operator|==
literal|0
condition|)
return|return
name|internal_error
return|;
name|CFStringRef
name|str
init|=
name|CFStringRef
argument_list|(
name|CFBundleGetValueForInfoDictionaryKey
argument_list|(
name|bundle
argument_list|,
name|CFSTR
argument_list|(
literal|"CFBundleShortVersionString"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|char
modifier|*
name|ptr
init|=
name|CFStringGetCStringPtr
argument_list|(
name|str
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|ptr
operator|==
literal|0
condition|)
return|return
name|internal_error
return|;
comment|// self-test
specifier|const
name|char
modifier|*
name|fail1
init|=
literal|"2.4"
decl_stmt|;
specifier|const
name|char
modifier|*
name|fail2
init|=
literal|"2.4.0"
decl_stmt|;
specifier|const
name|char
modifier|*
name|fail3
init|=
literal|"2.3"
decl_stmt|;
specifier|const
name|char
modifier|*
name|ok1
init|=
literal|"2.4.1"
decl_stmt|;
specifier|const
name|char
modifier|*
name|ok2
init|=
literal|"2.5"
decl_stmt|;
specifier|const
name|char
modifier|*
name|ok3
init|=
literal|"3.0"
decl_stmt|;
comment|//    ptr = fail1;
comment|//    printf ("string: %s\n", ptr);
name|int
name|length
init|=
name|strlen
argument_list|(
name|ptr
argument_list|)
decl_stmt|;
if|if
condition|(
name|length
operator|<
literal|3
condition|)
comment|// expect "x.y" at least
return|return
name|internal_error
return|;
comment|// fail on 2.4 and below (2.4.1 is ok)
if|if
condition|(
name|ptr
index|[
literal|0
index|]
operator|<
literal|'2'
condition|)
return|return
name|fail
return|;
if|if
condition|(
name|ptr
index|[
literal|0
index|]
operator|>=
literal|'3'
condition|)
return|return
name|success
return|;
if|if
condition|(
name|ptr
index|[
literal|2
index|]
operator|<
literal|'4'
condition|)
return|return
name|fail
return|;
if|if
condition|(
name|length
operator|<
literal|5
condition|)
return|return
name|fail
return|;
if|if
condition|(
name|ptr
index|[
literal|4
index|]
operator|<
literal|'1'
condition|)
return|return
name|fail
return|;
return|return
name|success
return|;
block|}
end_function
end_unit
