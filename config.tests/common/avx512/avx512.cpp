begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 Intel Corporation. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the configuration of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 3 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL3 included in the ** packaging of this file. Please review the following information to ** ensure the GNU Lesser General Public License version 3 requirements ** will be met: https://www.gnu.org/licenses/lgpl-3.0.html. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 2.0 or (at your option) the GNU General ** Public license version 3 or any later version approved by the KDE Free ** Qt Foundation. The licenses are as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3 ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-2.0.html and ** https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<immintrin.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|AVX512WANT
end_ifndef
begin_error
error|#
directive|error
literal|".pro file must define AVX512WANT macro to the AVX-512 feature to be tested"
end_error
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// The following checks if __AVXx__ is defined, where x is the value in
end_comment
begin_comment
comment|// AVX512WANT
end_comment
begin_define
DECL|macro|HAS2
define|#
directive|define
name|HAS2
parameter_list|(
name|x
parameter_list|)
value|__AVX512 ## x ## __
end_define
begin_define
DECL|macro|HAS
define|#
directive|define
name|HAS
parameter_list|(
name|x
parameter_list|)
value|HAS2(x)
end_define
begin_if
if|#
directive|if
operator|!
name|HAS
argument_list|(
name|AVX512WANT
argument_list|)
end_if
begin_error
error|#
directive|error
literal|"Feature not supported"
end_error
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
parameter_list|,
name|char
modifier|*
modifier|*
name|argv
parameter_list|)
block|{
comment|/* AVX512 Foundation */
name|__m512i
name|i
decl_stmt|;
name|__m512d
name|d
decl_stmt|;
name|__m512
name|f
decl_stmt|;
name|__mmask16
name|m
init|=
operator|~
literal|1
decl_stmt|;
name|i
operator|=
name|_mm512_maskz_loadu_epi32
argument_list|(
literal|0
argument_list|,
name|argv
argument_list|)
expr_stmt|;
name|d
operator|=
name|_mm512_loadu_pd
argument_list|(
operator|(
name|double
operator|*
operator|)
name|argv
operator|+
literal|64
argument_list|)
expr_stmt|;
name|f
operator|=
name|_mm512_loadu_ps
argument_list|(
operator|(
name|float
operator|*
operator|)
name|argv
operator|+
literal|128
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|__AVX512ER__
comment|/* AVX512 Exponential and Reciprocal */
name|f
operator|=
name|_mm512_exp2a23_round_ps
argument_list|(
name|f
argument_list|,
literal|8
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__AVX512CD__
comment|/* AVX512 Conflict Detection */
name|i
operator|=
name|_mm512_maskz_conflict_epi32
argument_list|(
name|m
argument_list|,
name|i
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__AVX512PF__
comment|/* AVX512 Prefetch */
name|_mm512_mask_prefetch_i64scatter_pd
argument_list|(
name|argv
argument_list|,
literal|0xf
argument_list|,
name|i
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__AVX512DQ__
comment|/* AVX512 Doubleword and Quadword support */
name|m
operator|=
name|_mm512_movepi32_mask
argument_list|(
name|i
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__AVX512BW__
comment|/* AVX512 Byte and Word support */
name|i
operator|=
name|_mm512_mask_loadu_epi8
argument_list|(
name|i
argument_list|,
name|m
argument_list|,
name|argv
operator|-
literal|8
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__AVX512VL__
comment|/* AVX512 Vector Length */
name|__m256i
name|i2
init|=
name|_mm256_maskz_loadu_epi32
argument_list|(
literal|0
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|_mm256_mask_storeu_epi32
argument_list|(
name|argv
operator|+
literal|1
argument_list|,
name|m
argument_list|,
name|i2
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__AVX512IFMA__
comment|/* AVX512 Integer Fused Multiply-Add */
name|i
operator|=
name|_mm512_madd52lo_epu64
argument_list|(
name|i
argument_list|,
name|i
argument_list|,
name|i
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|__AVX512VBMI__
comment|/* AVX512 Vector Byte Manipulation Instructions */
name|i
operator|=
name|_mm512_permutexvar_epi8
argument_list|(
name|i
argument_list|,
name|i
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|_mm512_mask_storeu_epi64
argument_list|(
name|argv
argument_list|,
name|m
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|_mm512_mask_storeu_ps
argument_list|(
name|argv
operator|+
literal|64
argument_list|,
name|m
argument_list|,
name|f
argument_list|)
expr_stmt|;
name|_mm512_mask_storeu_pd
argument_list|(
name|argv
operator|+
literal|128
argument_list|,
name|m
argument_list|,
name|d
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
end_unit
