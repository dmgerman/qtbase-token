begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the qmake application of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore/qdir.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/qxmlstream.h>
end_include
begin_include
include|#
directive|include
file|"epocroot_p.h"
end_include
begin_include
include|#
directive|include
file|"../windows/registry_p.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
comment|// Registry key under which the location of the Symbian devices.xml file is
comment|// stored.
comment|// Note that, on 64-bit machines, this key is located under the 32-bit
comment|// compatibility key:
comment|//     HKEY_LOCAL_MACHINE\Software\Wow6432Node
DECL|macro|SYMBIAN_SDKS_REG_SUBKEY
define|#
directive|define
name|SYMBIAN_SDKS_REG_SUBKEY
value|"Software\\Symbian\\EPOC SDKs\\CommonPath"
ifdef|#
directive|ifdef
name|Q_OS_WIN32
DECL|macro|SYMBIAN_SDKS_REG_HANDLE
define|#
directive|define
name|SYMBIAN_SDKS_REG_HANDLE
value|HKEY_LOCAL_MACHINE
else|#
directive|else
define|#
directive|define
name|SYMBIAN_SDKS_REG_HANDLE
value|0
endif|#
directive|endif
comment|// Value which is populated and returned by the epocRoot() function.
comment|// Stored as a static value in order to avoid unnecessary re-evaluation.
DECL|variable|epocRootValue
specifier|static
name|QString
name|epocRootValue
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|getDevicesXmlPath
specifier|static
name|QString
name|getDevicesXmlPath
parameter_list|()
block|{
comment|// Note that the following call will return a null string on platforms other
comment|// than Windows.  If support is required on other platforms for devices.xml,
comment|// an alternative mechanism for retrieving the location of this file will
comment|// be required.
return|return
name|qt_readRegistryKey
argument_list|(
name|SYMBIAN_SDKS_REG_HANDLE
argument_list|,
name|QLatin1String
argument_list|(
name|SYMBIAN_SDKS_REG_SUBKEY
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/**  * Checks whether epocRootValue points to an existent directory.  * If not, epocRootValue is set to an empty string and an error message is printed.  */
end_comment
begin_function
DECL|function|checkEpocRootExists
specifier|static
name|void
name|checkEpocRootExists
parameter_list|(
specifier|const
name|QString
modifier|&
name|source
parameter_list|)
block|{
if|if
condition|(
operator|!
name|epocRootValue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QDir
name|dir
argument_list|(
name|epocRootValue
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|exists
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"Warning: %s is set to an invalid path: '%s'"
argument_list|,
name|qPrintable
argument_list|(
name|source
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|epocRootValue
argument_list|)
argument_list|)
expr_stmt|;
name|epocRootValue
operator|=
name|QString
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/**  * Translate path from Windows to Qt format.  */
end_comment
begin_function
DECL|function|fixEpocRoot
specifier|static
name|void
name|fixEpocRoot
parameter_list|(
name|QString
modifier|&
name|path
parameter_list|)
block|{
name|path
operator|.
name|replace
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\\'
argument_list|)
argument_list|,
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|size
argument_list|()
operator|||
name|path
index|[
name|path
operator|.
name|size
argument_list|()
operator|-
literal|1
index|]
operator|!=
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
condition|)
block|{
name|path
operator|+=
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|Q_OS_WIN32
comment|// Make sure we have drive letter in epocroot
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
condition|)
name|path
operator|.
name|prepend
argument_list|(
name|QDir
operator|::
name|currentPath
argument_list|()
operator|.
name|left
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/**  * Determine the epoc root for the currently active SDK.  */
end_comment
begin_function
DECL|function|qt_epocRoot
name|QString
name|qt_epocRoot
parameter_list|()
block|{
if|if
condition|(
name|epocRootValue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// 1. If environment variable EPOCROOT is set and points to an existent
comment|//    directory, this is returned.
name|epocRootValue
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|qgetenv
argument_list|(
literal|"EPOCROOT"
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|checkEpocRootExists
argument_list|(
name|QLatin1String
argument_list|(
literal|"EPOCROOT environment variable"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|epocRootValue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// 2. The location of devices.xml is specified by a registry key.  If this
comment|//    file exists, it is parsed.
name|QString
name|devicesXmlPath
init|=
name|getDevicesXmlPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|devicesXmlPath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|devicesXmlPath
operator|+=
name|QLatin1String
argument_list|(
literal|"/devices.xml"
argument_list|)
expr_stmt|;
name|QFile
name|devicesFile
argument_list|(
name|devicesXmlPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|devicesFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
comment|// 3. If the EPOCDEVICE environment variable is set and a corresponding
comment|//    entry is found in devices.xml, and its epocroot value points to an
comment|//    existent directory, it is returned.
comment|// 4. If a device element marked as default is found in devices.xml and its
comment|//    epocroot value points to an existent directory, this is returned.
specifier|const
name|QString
name|epocDeviceValue
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|qgetenv
argument_list|(
literal|"EPOCDEVICE"
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
name|bool
name|epocDeviceFound
init|=
literal|false
decl_stmt|;
name|QXmlStreamReader
name|xml
argument_list|(
operator|&
name|devicesFile
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|xml
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|xml
operator|.
name|readNext
argument_list|()
expr_stmt|;
if|if
condition|(
name|xml
operator|.
name|isStartElement
argument_list|()
operator|&&
name|xml
operator|.
name|name
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"devices"
argument_list|)
condition|)
block|{
if|if
condition|(
name|xml
operator|.
name|attributes
argument_list|()
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"version"
argument_list|)
argument_list|)
operator|==
name|QLatin1String
argument_list|(
literal|"1.0"
argument_list|)
condition|)
block|{
while|while
condition|(
operator|!
operator|(
name|xml
operator|.
name|isEndElement
argument_list|()
operator|&&
name|xml
operator|.
name|name
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"devices"
argument_list|)
operator|)
operator|&&
operator|!
name|xml
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|xml
operator|.
name|readNext
argument_list|()
expr_stmt|;
if|if
condition|(
name|xml
operator|.
name|isStartElement
argument_list|()
operator|&&
name|xml
operator|.
name|name
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"device"
argument_list|)
condition|)
block|{
specifier|const
name|bool
name|isDefault
init|=
name|xml
operator|.
name|attributes
argument_list|()
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"default"
argument_list|)
argument_list|)
operator|==
name|QLatin1String
argument_list|(
literal|"yes"
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|id
init|=
name|xml
operator|.
name|attributes
argument_list|()
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"id"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|name
init|=
name|xml
operator|.
name|attributes
argument_list|()
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"name"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|alias
init|=
name|xml
operator|.
name|attributes
argument_list|()
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"alias"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|bool
name|epocDeviceMatch
init|=
name|QString
argument_list|(
name|id
operator|+
name|QLatin1String
argument_list|(
literal|":"
argument_list|)
operator|+
name|name
argument_list|)
operator|==
name|epocDeviceValue
decl_stmt|;
if|if
condition|(
operator|!
name|alias
operator|.
name|isEmpty
argument_list|()
condition|)
name|epocDeviceMatch
operator||=
name|alias
operator|==
name|epocDeviceValue
expr_stmt|;
name|epocDeviceFound
operator||=
name|epocDeviceMatch
expr_stmt|;
if|if
condition|(
operator|(
name|epocDeviceValue
operator|.
name|isEmpty
argument_list|()
operator|&&
name|isDefault
operator|)
operator|||
name|epocDeviceMatch
condition|)
block|{
comment|// Found a matching device
while|while
condition|(
operator|!
operator|(
name|xml
operator|.
name|isEndElement
argument_list|()
operator|&&
name|xml
operator|.
name|name
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"device"
argument_list|)
operator|)
operator|&&
operator|!
name|xml
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|xml
operator|.
name|readNext
argument_list|()
expr_stmt|;
if|if
condition|(
name|xml
operator|.
name|isStartElement
argument_list|()
operator|&&
name|xml
operator|.
name|name
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"epocroot"
argument_list|)
condition|)
block|{
name|epocRootValue
operator|=
name|xml
operator|.
name|readElementText
argument_list|()
expr_stmt|;
specifier|const
name|QString
name|deviceSource
init|=
name|epocDeviceValue
operator|.
name|isEmpty
argument_list|()
condition|?
name|QLatin1String
argument_list|(
literal|"default device"
argument_list|)
else|:
name|QString
argument_list|(
name|QLatin1String
argument_list|(
literal|"EPOCDEVICE ("
argument_list|)
operator|+
name|epocDeviceValue
operator|+
name|QLatin1String
argument_list|(
literal|")"
argument_list|)
argument_list|)
decl_stmt|;
name|checkEpocRootExists
argument_list|(
name|deviceSource
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|epocRootValue
operator|.
name|isEmpty
argument_list|()
condition|)
name|xml
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"No epocroot element found"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|xml
operator|.
name|raiseError
argument_list|(
name|QLatin1String
argument_list|(
literal|"Invalid 'devices' element version"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|xml
operator|.
name|hasError
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"Warning: Error \"%s\" when parsing devices.xml"
argument_list|,
name|qPrintable
argument_list|(
name|xml
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|epocRootValue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|epocDeviceValue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|epocDeviceFound
condition|)
block|{
name|qWarning
argument_list|(
literal|"Warning: Missing or invalid epocroot attribute in device '%s' in devices.xml."
argument_list|,
name|qPrintable
argument_list|(
name|epocDeviceValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"Warning: No device matching EPOCDEVICE (%s) in devices.xml."
argument_list|,
name|qPrintable
argument_list|(
name|epocDeviceValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|epocDeviceFound
condition|)
block|{
name|qWarning
argument_list|(
literal|"Warning: Missing or invalid epocroot attribute in default device in devices.xml."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"Warning: No default device set in devices.xml."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"Warning: Could not open file: '%s'."
argument_list|,
name|qPrintable
argument_list|(
name|devicesXmlPath
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|epocRootValue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// 5. An empty string is returned.
name|qWarning
argument_list|(
literal|"Warning: failed to resolve epocroot."
ifdef|#
directive|ifdef
name|Q_OS_WIN32
literal|"\nEither\n"
literal|"    1. Set EPOCROOT environment variable to a valid value.\n"
literal|" or 2. Ensure that the HKEY_LOCAL_MACHINE\\"
name|SYMBIAN_SDKS_REG_SUBKEY
literal|" registry key is set, and then\n"
literal|"       a. Set EPOCDEVICE environment variable to a valid device\n"
literal|"    or b. Specify a default device in the devices.xml file."
argument_list|)
expr_stmt|;
else|#
directive|else
literal|" Set EPOCROOT environment variable to a valid value."
block|)
empty_stmt|;
endif|#
directive|endif
block|}
else|else
block|{
name|fixEpocRoot
argument_list|(
name|epocRootValue
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_return
return|return
name|epocRootValue
return|;
end_return
unit|}  QT_END_NAMESPACE
end_unit
