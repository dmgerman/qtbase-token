begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the Qt Designer of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists for the convenience
end_comment
begin_comment
comment|// of Qt Designer.  This header
end_comment
begin_comment
comment|// file may change from version to version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|UILIBPROPERTIES_H
end_ifndef
begin_define
DECL|macro|UILIBPROPERTIES_H
define|#
directive|define
name|UILIBPROPERTIES_H
end_define
begin_include
include|#
directive|include
file|<QtDesigner/uilib_global.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/QObject>
end_include
begin_include
include|#
directive|include
file|<QtCore/QMetaProperty>
end_include
begin_include
include|#
directive|include
file|<QtCore/QLocale>
end_include
begin_include
include|#
directive|include
file|<QtCore/QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QtGui/QWidget>
end_include
begin_include
include|#
directive|include
file|"formbuilderextra_p.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
ifdef|#
directive|ifdef
name|QFORMINTERNAL_NAMESPACE
name|namespace
name|QFormInternal
block|{
endif|#
directive|endif
name|class
name|QAbstractFormBuilder
decl_stmt|;
name|class
name|DomProperty
decl_stmt|;
name|QDESIGNER_UILIB_EXPORT
name|DomProperty
modifier|*
name|variantToDomProperty
parameter_list|(
name|QAbstractFormBuilder
modifier|*
name|abstractFormBuilder
parameter_list|,
specifier|const
name|QMetaObject
modifier|*
name|meta
parameter_list|,
specifier|const
name|QString
modifier|&
name|propertyName
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|)
function_decl|;
name|QDESIGNER_UILIB_EXPORT
name|QVariant
name|domPropertyToVariant
parameter_list|(
specifier|const
name|DomProperty
modifier|*
name|property
parameter_list|)
function_decl|;
name|QDESIGNER_UILIB_EXPORT
name|QVariant
name|domPropertyToVariant
parameter_list|(
name|QAbstractFormBuilder
modifier|*
name|abstractFormBuilder
parameter_list|,
specifier|const
name|QMetaObject
modifier|*
name|meta
parameter_list|,
specifier|const
name|DomProperty
modifier|*
name|property
parameter_list|)
function_decl|;
comment|// This class exists to provide meta information
comment|// for enumerations only.
name|class
name|QAbstractFormBuilderGadget
range|:
name|public
name|QWidget
block|{
name|Q_OBJECT
name|Q_PROPERTY
argument_list|(
argument|Qt::ItemFlags itemFlags READ fakeItemFlags
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|Qt::CheckState checkState READ fakeCheckState
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|Qt::Alignment textAlignment READ fakeAlignment
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|Qt::Orientation orientation READ fakeOrientation
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QSizePolicy::Policy sizeType READ fakeSizeType
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QPalette::ColorRole colorRole READ fakeColorRole
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QPalette::ColorGroup colorGroup READ fakeColorGroup
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QFont::StyleStrategy styleStrategy READ fakeStyleStrategy
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|Qt::CursorShape cursorShape READ fakeCursorShape
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|Qt::BrushStyle brushStyle READ fakeBrushStyle
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|Qt::ToolBarArea toolBarArea READ fakeToolBarArea
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QGradient::Type gradientType READ fakeGradientType
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QGradient::Spread gradientSpread READ fakeGradientSpread
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QGradient::CoordinateMode gradientCoordinate READ fakeGradientCoordinate
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QLocale::Language language READ fakeLanguage
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QLocale::Country country READ fakeCountry
argument_list|)
name|public
operator|:
name|QAbstractFormBuilderGadget
argument_list|()
block|{
name|Q_ASSERT
argument_list|(
literal|0
argument_list|)
block|; }
name|Qt
operator|::
name|Orientation
name|fakeOrientation
argument_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
literal|0
argument_list|)
block|;
return|return
name|Qt
operator|::
name|Horizontal
return|;
block|}
name|QSizePolicy
operator|::
name|Policy
name|fakeSizeType
argument_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
literal|0
argument_list|)
block|;
return|return
name|QSizePolicy
operator|::
name|Expanding
return|;
block|}
name|QPalette
operator|::
name|ColorGroup
name|fakeColorGroup
argument_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
literal|0
argument_list|)
block|;
return|return
name|static_cast
operator|<
name|QPalette
operator|::
name|ColorGroup
operator|>
operator|(
literal|0
operator|)
return|;
block|}
name|QPalette
operator|::
name|ColorRole
name|fakeColorRole
argument_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
literal|0
argument_list|)
block|;
return|return
name|static_cast
operator|<
name|QPalette
operator|::
name|ColorRole
operator|>
operator|(
literal|0
operator|)
return|;
block|}
name|QFont
operator|::
name|StyleStrategy
name|fakeStyleStrategy
argument_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
literal|0
argument_list|)
block|;
return|return
name|QFont
operator|::
name|PreferDefault
return|;
block|}
name|Qt
operator|::
name|CursorShape
name|fakeCursorShape
argument_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
literal|0
argument_list|)
block|;
return|return
name|Qt
operator|::
name|ArrowCursor
return|;
block|}
name|Qt
operator|::
name|BrushStyle
name|fakeBrushStyle
argument_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
literal|0
argument_list|)
block|;
return|return
name|Qt
operator|::
name|NoBrush
return|;
block|}
name|Qt
operator|::
name|ToolBarArea
name|fakeToolBarArea
argument_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
literal|0
argument_list|)
block|;
return|return
name|Qt
operator|::
name|NoToolBarArea
return|;
block|}
name|QGradient
operator|::
name|Type
name|fakeGradientType
argument_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
literal|0
argument_list|)
block|;
return|return
name|QGradient
operator|::
name|NoGradient
return|;
block|}
name|QGradient
operator|::
name|Spread
name|fakeGradientSpread
argument_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
literal|0
argument_list|)
block|;
return|return
name|QGradient
operator|::
name|PadSpread
return|;
block|}
name|QGradient
operator|::
name|CoordinateMode
name|fakeGradientCoordinate
argument_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
literal|0
argument_list|)
block|;
return|return
name|QGradient
operator|::
name|LogicalMode
return|;
block|}
name|QLocale
operator|::
name|Language
name|fakeLanguage
argument_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
literal|0
argument_list|)
block|;
return|return
name|QLocale
operator|::
name|C
return|;
block|}
name|QLocale
operator|::
name|Country
name|fakeCountry
argument_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
literal|0
argument_list|)
block|;
return|return
name|QLocale
operator|::
name|AnyCountry
return|;
block|}
name|Qt
operator|::
name|ItemFlags
name|fakeItemFlags
argument_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
literal|0
argument_list|)
block|;
return|return
name|Qt
operator|::
name|NoItemFlags
return|;
block|}
name|Qt
operator|::
name|CheckState
name|fakeCheckState
argument_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
literal|0
argument_list|)
block|;
return|return
name|Qt
operator|::
name|Unchecked
return|;
block|}
name|Qt
operator|::
name|Alignment
name|fakeAlignment
argument_list|()
specifier|const
block|{
name|Q_ASSERT
argument_list|(
literal|0
argument_list|)
block|;
return|return
name|Qt
operator|::
name|AlignLeft
return|;
block|}
expr|}
block|;
comment|// Convert key to value for a given QMetaEnum
name|template
operator|<
name|class
name|EnumType
operator|>
specifier|inline
name|EnumType
name|enumKeyToValue
argument_list|(
argument|const QMetaEnum&metaEnum
argument_list|,
argument|const char *key
argument_list|,
argument|const EnumType* =
literal|0
argument_list|)
block|{
name|int
name|val
operator|=
name|metaEnum
operator|.
name|keyToValue
argument_list|(
name|key
argument_list|)
block|;
if|if
condition|(
name|val
operator|==
operator|-
literal|1
condition|)
block|{
name|uiLibWarning
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QFormBuilder"
argument_list|,
literal|"The enumeration-value '%1' is invalid. The default value '%2' will be used instead."
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
name|key
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
name|metaEnum
operator|.
name|key
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|val
operator|=
name|metaEnum
operator|.
name|value
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
name|static_cast
operator|<
name|EnumType
operator|>
operator|(
name|val
operator|)
return|;
block|}
comment|// Convert keys to value for a given QMetaEnum
name|template
operator|<
name|class
name|EnumType
operator|>
specifier|inline
name|EnumType
name|enumKeysToValue
argument_list|(
argument|const QMetaEnum&metaEnum
argument_list|,
argument|const char *keys
argument_list|,
argument|const EnumType* =
literal|0
argument_list|)
block|{
name|int
name|val
operator|=
name|metaEnum
operator|.
name|keysToValue
argument_list|(
name|keys
argument_list|)
block|;
if|if
condition|(
name|val
operator|==
operator|-
literal|1
condition|)
block|{
name|uiLibWarning
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QFormBuilder"
argument_list|,
literal|"The flag-value '%1' is invalid. Zero will be used instead."
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
name|keys
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|val
operator|=
literal|0
expr_stmt|;
block|}
return|return
name|static_cast
operator|<
name|EnumType
operator|>
operator|(
name|QFlag
argument_list|(
name|val
argument_list|)
operator|)
return|;
block|}
comment|// Access meta enumeration object of a qobject
name|template
operator|<
name|class
name|QObjectType
operator|>
specifier|inline
name|QMetaEnum
name|metaEnum
argument_list|(
argument|const char *name
argument_list|,
argument|const QObjectType* =
literal|0
argument_list|)
block|{
specifier|const
name|int
name|e_index
operator|=
name|QObjectType
operator|::
name|staticMetaObject
operator|.
name|indexOfProperty
argument_list|(
name|name
argument_list|)
block|;
name|Q_ASSERT
argument_list|(
name|e_index
operator|!=
operator|-
literal|1
argument_list|)
block|;
return|return
name|QObjectType
operator|::
name|staticMetaObject
operator|.
name|property
argument_list|(
name|e_index
argument_list|)
operator|.
name|enumerator
argument_list|()
return|;
block|}
comment|// Convert key to value for enumeration by name
name|template
operator|<
name|class
name|QObjectType
block|,
name|class
name|EnumType
operator|>
specifier|inline
name|EnumType
name|enumKeyOfObjectToValue
argument_list|(
argument|const char *enumName
argument_list|,
argument|const char *key
argument_list|,
argument|const QObjectType* =
literal|0
argument_list|,
argument|const EnumType* =
literal|0
argument_list|)
block|{
specifier|const
name|QMetaEnum
name|me
operator|=
name|metaEnum
operator|<
name|QObjectType
operator|>
operator|(
name|enumName
operator|)
block|;
return|return
name|enumKeyToValue
operator|<
name|EnumType
operator|>
operator|(
name|me
expr|,
name|key
operator|)
return|;
block|}
ifdef|#
directive|ifdef
name|QFORMINTERNAL_NAMESPACE
expr|}
endif|#
directive|endif
name|QT_END_NAMESPACE
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// UILIBPROPERTIES_H
end_comment
end_unit
