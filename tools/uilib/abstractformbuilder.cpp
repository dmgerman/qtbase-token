begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the Qt Designer of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ **sw ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"abstractformbuilder.h"
end_include
begin_include
include|#
directive|include
file|"formbuilderextra_p.h"
end_include
begin_include
include|#
directive|include
file|"resourcebuilder_p.h"
end_include
begin_include
include|#
directive|include
file|"textbuilder_p.h"
end_include
begin_include
include|#
directive|include
file|"ui4_p.h"
end_include
begin_include
include|#
directive|include
file|"properties_p.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/QVariant>
end_include
begin_include
include|#
directive|include
file|<QtCore/QMetaProperty>
end_include
begin_include
include|#
directive|include
file|<QtCore/QFileInfo>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDir>
end_include
begin_include
include|#
directive|include
file|<QtCore/QQueue>
end_include
begin_include
include|#
directive|include
file|<QtCore/QHash>
end_include
begin_include
include|#
directive|include
file|<QtCore/QPair>
end_include
begin_include
include|#
directive|include
file|<QtCore/qdebug.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QtGui/QtGui>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QtWidgets>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QFORMINTERNAL_NAMESPACE
end_ifndef
begin_include
include|#
directive|include
file|<private/qlayout_p.h>
end_include
begin_comment
comment|// Compiling within Designer
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<QtXml/QXmlStreamReader>
end_include
begin_include
include|#
directive|include
file|<QtCore/qdebug.h>
end_include
begin_include
include|#
directive|include
file|<limits.h>
end_include
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QWidgetList
argument_list|)
end_macro
begin_decl_stmt
DECL|variable|buttonGroupPropertyC
specifier|static
specifier|const
name|char
modifier|*
name|buttonGroupPropertyC
init|=
literal|"buttonGroup"
decl_stmt|;
end_decl_stmt
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_ifdef
ifdef|#
directive|ifdef
name|QFORMINTERNAL_NAMESPACE
end_ifdef
begin_using
using|using
namespace|namespace
name|QFormInternal
namespace|;
end_using
begin_endif
endif|#
directive|endif
end_endif
begin_class
DECL|class|QFriendlyLayout
class|class
name|QFriendlyLayout
super|:
specifier|public
name|QLayout
block|{
public|public:
DECL|function|QFriendlyLayout
specifier|inline
name|QFriendlyLayout
parameter_list|()
block|{
name|Q_ASSERT
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|QFORMINTERNAL_NAMESPACE
friend|friend
class_decl|class
name|QFormInternal
operator|::
name|QAbstractFormBuilder
class_decl|;
else|#
directive|else
friend|friend
class_decl|class
name|QAbstractFormBuilder
class_decl|;
endif|#
directive|endif
block|}
class|;
end_class
begin_comment
comment|/*!     \class QAbstractFormBuilder      \brief The QAbstractFormBuilder class provides a default     implementation for classes that create user interfaces at     run-time.      \inmodule QtDesigner      QAbstractFormBuilder provides a standard interface and a default     implementation for constructing forms from user interface     files. It is not intended to be instantiated directly. Use the     QFormBuilder class to create user interfaces from UI files at     run-time. For example:      \snippet doc/src/snippets/code/tools_designer_src_lib_uilib_abstractformbuilder.cpp 0      To override certain aspects of the form builder's behavior,     subclass QAbstractFormBuilder and reimplement the relevant virtual     functions:      \list     \o load() handles reading of UI format files from arbitrary        QIODevices, and construction of widgets from the XML data        that they contain.     \o save() handles saving of widget details in UI format to        arbitrary QIODevices.     \o workingDirectory() and setWorkingDirectory() control the        directory in which forms are held. The form builder looks for        other resources on paths relative to this directory.     \endlist      The QFormBuilder class is typically used by custom components and     applications that embed \QD. Standalone applications that need to     dynamically generate user interfaces at run-time use the     QUiLoader, found in the QtUiTools module.      \sa {QtUiTools Module} */
end_comment
begin_comment
comment|/*!     Constructs a new form builder.*/
end_comment
begin_constructor
DECL|function|QAbstractFormBuilder
name|QAbstractFormBuilder
operator|::
name|QAbstractFormBuilder
parameter_list|()
member_init_list|:
name|d
argument_list|(
operator|new
name|QFormBuilderExtra
argument_list|)
block|{
name|setResourceBuilder
argument_list|(
operator|new
name|QResourceBuilder
argument_list|()
argument_list|)
expr_stmt|;
name|setTextBuilder
argument_list|(
operator|new
name|QTextBuilder
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*!     Destroys the form builder.*/
end_comment
begin_destructor
DECL|function|~QAbstractFormBuilder
name|QAbstractFormBuilder
operator|::
name|~
name|QAbstractFormBuilder
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|// Return UI file version from attribute 'version="4.0"'
end_comment
begin_function
DECL|function|uiVersion
specifier|static
name|QPair
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|uiVersion
parameter_list|(
specifier|const
name|QString
modifier|&
name|attr
parameter_list|)
block|{
specifier|const
name|QStringList
name|versions
init|=
name|attr
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
decl_stmt|;
if|if
condition|(
name|versions
operator|.
name|size
argument_list|()
operator|>=
literal|2
condition|)
block|{
name|bool
name|okMajor
decl_stmt|,
name|okMinor
decl_stmt|;
specifier|const
name|int
name|majorVersion
init|=
name|versions
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|(
operator|&
name|okMajor
argument_list|)
decl_stmt|;
specifier|const
name|int
name|minorVersion
init|=
name|versions
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|(
operator|&
name|okMinor
argument_list|)
decl_stmt|;
if|if
condition|(
name|okMajor
operator|&&
name|okMinor
condition|)
return|return
name|QPair
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
argument_list|(
name|majorVersion
argument_list|,
name|minorVersion
argument_list|)
return|;
block|}
return|return
name|QPair
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|msgXmlError
specifier|static
specifier|inline
name|QString
name|msgXmlError
parameter_list|(
specifier|const
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|)
block|{
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QAbstractFormBuilder"
argument_list|,
literal|"An error has occurred while reading the UI file at line %1, column %2: %3"
argument_list|)
operator|.
name|arg
argument_list|(
name|reader
operator|.
name|lineNumber
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|reader
operator|.
name|columnNumber
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|reader
operator|.
name|errorString
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// Read and check the  version and the (optional) language attribute
end_comment
begin_comment
comment|// of an<ui> element and leave reader positioned at<ui>.
end_comment
begin_function
DECL|function|readUiAttributes
specifier|static
name|bool
specifier|inline
name|readUiAttributes
parameter_list|(
name|QXmlStreamReader
modifier|&
name|reader
parameter_list|,
specifier|const
name|QString
modifier|&
name|language
parameter_list|,
name|QString
modifier|*
name|errorMessage
parameter_list|)
block|{
specifier|const
name|QString
name|uiElement
init|=
name|QLatin1String
argument_list|(
literal|"ui"
argument_list|)
decl_stmt|;
comment|// Read up to first element
while|while
condition|(
operator|!
name|reader
operator|.
name|atEnd
argument_list|()
condition|)
block|{
switch|switch
condition|(
name|reader
operator|.
name|readNext
argument_list|()
condition|)
block|{
case|case
name|QXmlStreamReader
operator|::
name|Invalid
case|:
operator|*
name|errorMessage
operator|=
name|msgXmlError
argument_list|(
name|reader
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
case|case
name|QXmlStreamReader
operator|::
name|StartElement
case|:
if|if
condition|(
name|reader
operator|.
name|name
argument_list|()
operator|.
name|compare
argument_list|(
name|uiElement
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|==
literal|0
condition|)
block|{
specifier|const
name|QString
name|versionAttribute
init|=
name|QLatin1String
argument_list|(
literal|"version"
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|languageAttribute
init|=
name|QLatin1String
argument_list|(
literal|"language"
argument_list|)
decl_stmt|;
specifier|const
name|QXmlStreamAttributes
name|attributes
init|=
name|reader
operator|.
name|attributes
argument_list|()
decl_stmt|;
if|if
condition|(
name|attributes
operator|.
name|hasAttribute
argument_list|(
name|versionAttribute
argument_list|)
condition|)
block|{
specifier|const
name|QString
name|versionString
init|=
name|attributes
operator|.
name|value
argument_list|(
name|versionAttribute
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|uiVersion
argument_list|(
name|versionString
argument_list|)
operator|.
name|first
operator|<
literal|4
condition|)
block|{
operator|*
name|errorMessage
operator|=
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QAbstractFormBuilder"
argument_list|,
literal|"This file was created using Designer from Qt-%1 and cannot be read."
argument_list|)
operator|.
name|arg
argument_list|(
name|versionString
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// version error
block|}
comment|// has version
if|if
condition|(
name|attributes
operator|.
name|hasAttribute
argument_list|(
name|languageAttribute
argument_list|)
condition|)
block|{
comment|// Check on optional language (Jambi)
specifier|const
name|QString
name|formLanguage
init|=
name|attributes
operator|.
name|value
argument_list|(
name|languageAttribute
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|formLanguage
operator|.
name|isEmpty
argument_list|()
operator|&&
name|formLanguage
operator|.
name|compare
argument_list|(
name|language
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
block|{
operator|*
name|errorMessage
operator|=
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QAbstractFormBuilder"
argument_list|,
literal|"This file cannot be read because it was created using %1."
argument_list|)
operator|.
name|arg
argument_list|(
name|formLanguage
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// language error
block|}
comment|// has language
return|return
literal|true
return|;
block|}
comment|//<ui> matched
break|break;
default|default:
break|break;
block|}
block|}
comment|// No<ui> found.
operator|*
name|errorMessage
operator|=
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QAbstractFormBuilder"
argument_list|,
literal|"Invalid UI file: The root element<ui> is missing."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     \fn QWidget *QAbstractFormBuilder::load(QIODevice *device, QWidget *parent)      Loads an XML representation of a widget from the given \a device,     and constructs a new widget with the specified \a parent.      \sa save(), errorString() */
end_comment
begin_function
DECL|function|load
name|QWidget
modifier|*
name|QAbstractFormBuilder
operator|::
name|load
parameter_list|(
name|QIODevice
modifier|*
name|dev
parameter_list|,
name|QWidget
modifier|*
name|parentWidget
parameter_list|)
block|{
name|QXmlStreamReader
name|reader
argument_list|(
name|dev
argument_list|)
decl_stmt|;
name|d
operator|->
name|m_errorString
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|readUiAttributes
argument_list|(
name|reader
argument_list|,
name|d
operator|->
name|m_language
argument_list|,
operator|&
name|d
operator|->
name|m_errorString
argument_list|)
condition|)
block|{
name|uiLibWarning
argument_list|(
name|d
operator|->
name|m_errorString
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|DomUI
name|ui
decl_stmt|;
name|ui
operator|.
name|read
argument_list|(
name|reader
argument_list|)
expr_stmt|;
if|if
condition|(
name|reader
operator|.
name|hasError
argument_list|()
condition|)
block|{
name|d
operator|->
name|m_errorString
operator|=
name|msgXmlError
argument_list|(
name|reader
argument_list|)
expr_stmt|;
name|uiLibWarning
argument_list|(
name|d
operator|->
name|m_errorString
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|QWidget
modifier|*
name|widget
init|=
name|create
argument_list|(
operator|&
name|ui
argument_list|,
name|parentWidget
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|widget
operator|&&
name|d
operator|->
name|m_errorString
operator|.
name|isEmpty
argument_list|()
condition|)
name|d
operator|->
name|m_errorString
operator|=
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QAbstractFormBuilder"
argument_list|,
literal|"Invalid UI file"
argument_list|)
expr_stmt|;
return|return
name|widget
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|create
name|QWidget
modifier|*
name|QAbstractFormBuilder
operator|::
name|create
parameter_list|(
name|DomUI
modifier|*
name|ui
parameter_list|,
name|QWidget
modifier|*
name|parentWidget
parameter_list|)
block|{
typedef|typedef
name|QFormBuilderExtra
operator|::
name|ButtonGroupHash
name|ButtonGroupHash
typedef|;
name|d
operator|->
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
specifier|const
name|DomLayoutDefault
modifier|*
name|def
init|=
name|ui
operator|->
name|elementLayoutDefault
argument_list|()
condition|)
block|{
name|d
operator|->
name|m_defaultMargin
operator|=
name|def
operator|->
name|hasAttributeMargin
argument_list|()
condition|?
name|def
operator|->
name|attributeMargin
argument_list|()
else|:
name|INT_MIN
expr_stmt|;
name|d
operator|->
name|m_defaultSpacing
operator|=
name|def
operator|->
name|hasAttributeSpacing
argument_list|()
condition|?
name|def
operator|->
name|attributeSpacing
argument_list|()
else|:
name|INT_MIN
expr_stmt|;
block|}
name|DomWidget
modifier|*
name|ui_widget
init|=
name|ui
operator|->
name|elementWidget
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ui_widget
condition|)
return|return
literal|0
return|;
name|initialize
argument_list|(
name|ui
argument_list|)
expr_stmt|;
if|if
condition|(
specifier|const
name|DomButtonGroups
modifier|*
name|domButtonGroups
init|=
name|ui
operator|->
name|elementButtonGroups
argument_list|()
condition|)
name|d
operator|->
name|registerButtonGroups
argument_list|(
name|domButtonGroups
argument_list|)
expr_stmt|;
if|if
condition|(
name|QWidget
modifier|*
name|widget
init|=
name|create
argument_list|(
name|ui_widget
argument_list|,
name|parentWidget
argument_list|)
condition|)
block|{
comment|// Reparent button groups that were actually created to main container for them to be found in the signal/slot part
specifier|const
name|ButtonGroupHash
modifier|&
name|buttonGroups
init|=
name|d
operator|->
name|buttonGroups
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|buttonGroups
operator|.
name|empty
argument_list|()
condition|)
block|{
specifier|const
name|ButtonGroupHash
operator|::
name|const_iterator
name|cend
init|=
name|buttonGroups
operator|.
name|constEnd
argument_list|()
decl_stmt|;
for|for
control|(
name|ButtonGroupHash
operator|::
name|const_iterator
name|it
init|=
name|buttonGroups
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|cend
condition|;
operator|++
name|it
control|)
if|if
condition|(
name|it
operator|.
name|value
argument_list|()
operator|.
name|second
condition|)
name|it
operator|.
name|value
argument_list|()
operator|.
name|second
operator|->
name|setParent
argument_list|(
name|widget
argument_list|)
expr_stmt|;
block|}
name|createConnections
argument_list|(
name|ui
operator|->
name|elementConnections
argument_list|()
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|createResources
argument_list|(
name|ui
operator|->
name|elementResources
argument_list|()
argument_list|)
expr_stmt|;
comment|// maybe this should go first, before create()...
name|applyTabStops
argument_list|(
name|widget
argument_list|,
name|ui
operator|->
name|elementTabStops
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|applyInternalProperties
argument_list|()
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
name|d
operator|->
name|clear
argument_list|()
expr_stmt|;
return|return
name|widget
return|;
block|}
name|d
operator|->
name|clear
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     \internal     Retrieve relevant information from the custom widgets section.     Called by create(DomUI *, QWidget *); call manually if you     just use create(DomWidget *, QWidget *) on some child widget of DomUI.  */
end_comment
begin_function
DECL|function|initialize
name|void
name|QAbstractFormBuilder
operator|::
name|initialize
parameter_list|(
specifier|const
name|DomUI
modifier|*
name|ui
parameter_list|)
block|{
typedef|typedef
name|QList
argument_list|<
name|DomCustomWidget
modifier|*
argument_list|>
name|DomCustomWidgetList
typedef|;
name|DomCustomWidgets
modifier|*
name|domCustomWidgets
init|=
name|ui
operator|->
name|elementCustomWidgets
argument_list|()
decl_stmt|;
name|createCustomWidgets
argument_list|(
name|domCustomWidgets
argument_list|)
expr_stmt|;
if|if
condition|(
name|domCustomWidgets
condition|)
block|{
specifier|const
name|DomCustomWidgetList
name|customWidgets
init|=
name|domCustomWidgets
operator|->
name|elementCustomWidget
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|customWidgets
operator|.
name|empty
argument_list|()
condition|)
block|{
specifier|const
name|DomCustomWidgetList
operator|::
name|const_iterator
name|cend
init|=
name|customWidgets
operator|.
name|constEnd
argument_list|()
decl_stmt|;
for|for
control|(
name|DomCustomWidgetList
operator|::
name|const_iterator
name|it
init|=
name|customWidgets
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|cend
condition|;
operator|++
name|it
control|)
name|d
operator|->
name|storeCustomWidgetData
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|->
name|elementClass
argument_list|()
argument_list|,
operator|*
name|it
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|create
name|QWidget
modifier|*
name|QAbstractFormBuilder
operator|::
name|create
parameter_list|(
name|DomWidget
modifier|*
name|ui_widget
parameter_list|,
name|QWidget
modifier|*
name|parentWidget
parameter_list|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|createWidget
argument_list|(
name|ui_widget
operator|->
name|attributeClass
argument_list|()
argument_list|,
name|parentWidget
argument_list|,
name|ui_widget
operator|->
name|attributeName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|w
condition|)
return|return
literal|0
return|;
name|applyProperties
argument_list|(
name|w
argument_list|,
name|ui_widget
operator|->
name|elementProperty
argument_list|()
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|DomAction
modifier|*
name|ui_action
decl|,
name|ui_widget
operator|->
name|elementAction
argument_list|()
control|)
block|{
name|QAction
modifier|*
name|child_action
init|=
name|create
argument_list|(
name|ui_action
argument_list|,
name|w
argument_list|)
decl_stmt|;
name|Q_UNUSED
argument_list|(
name|child_action
argument_list|)
expr_stmt|;
block|}
foreach|foreach
control|(
name|DomActionGroup
modifier|*
name|ui_action_group
decl|,
name|ui_widget
operator|->
name|elementActionGroup
argument_list|()
control|)
block|{
name|QActionGroup
modifier|*
name|child_action_group
init|=
name|create
argument_list|(
name|ui_action_group
argument_list|,
name|w
argument_list|)
decl_stmt|;
name|Q_UNUSED
argument_list|(
name|child_action_group
argument_list|)
expr_stmt|;
block|}
name|QWidgetList
name|children
decl_stmt|;
foreach|foreach
control|(
name|DomWidget
modifier|*
name|ui_child
decl|,
name|ui_widget
operator|->
name|elementWidget
argument_list|()
control|)
block|{
if|if
condition|(
name|QWidget
modifier|*
name|child
init|=
name|create
argument_list|(
name|ui_child
argument_list|,
name|w
argument_list|)
condition|)
block|{
name|children
operator|+=
name|child
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|QString
name|className
init|=
name|ui_child
operator|->
name|elementClass
argument_list|()
operator|.
name|empty
argument_list|()
condition|?
name|QString
argument_list|()
else|:
name|ui_child
operator|->
name|elementClass
argument_list|()
operator|.
name|front
argument_list|()
decl_stmt|;
name|uiLibWarning
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QAbstractFormBuilder"
argument_list|,
literal|"The creation of a widget of the class '%1' failed."
argument_list|)
operator|.
name|arg
argument_list|(
name|className
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
foreach|foreach
control|(
name|DomLayout
modifier|*
name|ui_lay
decl|,
name|ui_widget
operator|->
name|elementLayout
argument_list|()
control|)
block|{
name|QLayout
modifier|*
name|child_lay
init|=
name|create
argument_list|(
name|ui_lay
argument_list|,
literal|0
argument_list|,
name|w
argument_list|)
decl_stmt|;
name|Q_UNUSED
argument_list|(
name|child_lay
argument_list|)
expr_stmt|;
block|}
specifier|const
name|QList
argument_list|<
name|DomActionRef
modifier|*
argument_list|>
name|addActions
init|=
name|ui_widget
operator|->
name|elementAddAction
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|addActions
operator|.
name|empty
argument_list|()
condition|)
block|{
specifier|const
name|QFormBuilderStrings
modifier|&
name|strings
init|=
name|QFormBuilderStrings
operator|::
name|instance
argument_list|()
decl_stmt|;
foreach|foreach
control|(
name|DomActionRef
modifier|*
name|ui_action_ref
decl|,
name|addActions
control|)
block|{
specifier|const
name|QString
name|name
init|=
name|ui_action_ref
operator|->
name|attributeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
name|strings
operator|.
name|separator
condition|)
block|{
name|QAction
modifier|*
name|sep
init|=
operator|new
name|QAction
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|sep
operator|->
name|setSeparator
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|w
operator|->
name|addAction
argument_list|(
name|sep
argument_list|)
expr_stmt|;
name|addMenuAction
argument_list|(
name|sep
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|QAction
modifier|*
name|a
init|=
name|d
operator|->
name|m_actions
operator|.
name|value
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|w
operator|->
name|addAction
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|QActionGroup
modifier|*
name|g
init|=
name|d
operator|->
name|m_actionGroups
operator|.
name|value
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|w
operator|->
name|addActions
argument_list|(
name|g
operator|->
name|actions
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|QMenu
modifier|*
name|menu
init|=
name|w
operator|->
name|findChild
argument_list|<
name|QMenu
operator|*
argument_list|>
argument_list|(
name|name
argument_list|)
condition|)
block|{
name|w
operator|->
name|addAction
argument_list|(
name|menu
operator|->
name|menuAction
argument_list|()
argument_list|)
expr_stmt|;
name|addMenuAction
argument_list|(
name|menu
operator|->
name|menuAction
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|loadExtraInfo
argument_list|(
name|ui_widget
argument_list|,
name|w
argument_list|,
name|parentWidget
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_FORMBUILDER_NO_SCRIPT
name|QString
name|scriptErrorMessage
decl_stmt|;
name|d
operator|->
name|formScriptRunner
argument_list|()
operator|.
name|run
argument_list|(
name|ui_widget
argument_list|,
name|d
operator|->
name|customWidgetScript
argument_list|(
name|ui_widget
operator|->
name|attributeClass
argument_list|()
argument_list|)
argument_list|,
name|w
argument_list|,
name|children
argument_list|,
operator|&
name|scriptErrorMessage
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|addItem
argument_list|(
name|ui_widget
argument_list|,
name|w
argument_list|,
name|parentWidget
argument_list|)
expr_stmt|;
if|if
condition|(
name|qobject_cast
argument_list|<
name|QDialog
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
operator|&&
name|parentWidget
condition|)
name|w
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_Moved
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// So that QDialog::setVisible(true) will center it
specifier|const
name|QStringList
name|zOrderNames
init|=
name|ui_widget
operator|->
name|elementZOrder
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|zOrderNames
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QList
argument_list|<
name|QWidget
modifier|*
argument_list|>
name|zOrder
init|=
name|qvariant_cast
argument_list|<
name|QWidgetList
argument_list|>
argument_list|(
name|w
operator|->
name|property
argument_list|(
literal|"_q_zOrder"
argument_list|)
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|widgetName
decl|,
name|zOrderNames
control|)
block|{
if|if
condition|(
name|QWidget
modifier|*
name|child
init|=
name|w
operator|->
name|findChild
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|widgetName
argument_list|)
condition|)
block|{
if|if
condition|(
name|child
operator|->
name|parentWidget
argument_list|()
operator|==
name|w
condition|)
block|{
name|zOrder
operator|.
name|removeAll
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|zOrder
operator|.
name|append
argument_list|(
name|child
argument_list|)
expr_stmt|;
name|child
operator|->
name|raise
argument_list|()
expr_stmt|;
block|}
block|}
block|}
name|w
operator|->
name|setProperty
argument_list|(
literal|"_q_zOrder"
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|zOrder
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|w
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|create
name|QAction
modifier|*
name|QAbstractFormBuilder
operator|::
name|create
parameter_list|(
name|DomAction
modifier|*
name|ui_action
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
block|{
name|QAction
modifier|*
name|a
init|=
name|createAction
argument_list|(
name|parent
argument_list|,
name|ui_action
operator|->
name|attributeName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|a
condition|)
return|return
literal|0
return|;
name|d
operator|->
name|m_actions
operator|.
name|insert
argument_list|(
name|ui_action
operator|->
name|attributeName
argument_list|()
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|applyProperties
argument_list|(
name|a
argument_list|,
name|ui_action
operator|->
name|elementProperty
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|a
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|create
name|QActionGroup
modifier|*
name|QAbstractFormBuilder
operator|::
name|create
parameter_list|(
name|DomActionGroup
modifier|*
name|ui_action_group
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
block|{
name|QActionGroup
modifier|*
name|a
init|=
name|createActionGroup
argument_list|(
name|parent
argument_list|,
name|ui_action_group
operator|->
name|attributeName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|a
condition|)
return|return
literal|0
return|;
name|d
operator|->
name|m_actionGroups
operator|.
name|insert
argument_list|(
name|ui_action_group
operator|->
name|attributeName
argument_list|()
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|applyProperties
argument_list|(
name|a
argument_list|,
name|ui_action_group
operator|->
name|elementProperty
argument_list|()
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|DomAction
modifier|*
name|ui_action
decl|,
name|ui_action_group
operator|->
name|elementAction
argument_list|()
control|)
block|{
name|QAction
modifier|*
name|child_action
init|=
name|create
argument_list|(
name|ui_action
argument_list|,
name|a
argument_list|)
decl_stmt|;
name|Q_UNUSED
argument_list|(
name|child_action
argument_list|)
expr_stmt|;
block|}
foreach|foreach
control|(
name|DomActionGroup
modifier|*
name|g
decl|,
name|ui_action_group
operator|->
name|elementActionGroup
argument_list|()
control|)
block|{
name|QActionGroup
modifier|*
name|child_action_group
init|=
name|create
argument_list|(
name|g
argument_list|,
name|parent
argument_list|)
decl_stmt|;
name|Q_UNUSED
argument_list|(
name|child_action_group
argument_list|)
expr_stmt|;
block|}
return|return
name|a
return|;
block|}
end_function
begin_comment
comment|// figure out the toolbar area of a DOM attrib list.
end_comment
begin_comment
comment|// By legacy, it is stored as an integer. As of 4.3.0, it is the enumeration value.
end_comment
begin_function
DECL|function|toolbarAreaFromDOMAttributes
name|Qt
operator|::
name|ToolBarArea
name|QAbstractFormBuilder
operator|::
name|toolbarAreaFromDOMAttributes
parameter_list|(
specifier|const
name|DomPropertyHash
modifier|&
name|attributes
parameter_list|)
block|{
specifier|const
name|DomProperty
modifier|*
name|attr
init|=
name|attributes
operator|.
name|value
argument_list|(
name|QFormBuilderStrings
operator|::
name|instance
argument_list|()
operator|.
name|toolBarAreaAttribute
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|attr
condition|)
return|return
name|Qt
operator|::
name|TopToolBarArea
return|;
switch|switch
condition|(
name|attr
operator|->
name|kind
argument_list|()
condition|)
block|{
case|case
name|DomProperty
operator|::
name|Number
case|:
return|return
cast|static_cast
argument_list|<
name|Qt
operator|::
name|ToolBarArea
argument_list|>
argument_list|(
name|attr
operator|->
name|elementNumber
argument_list|()
argument_list|)
return|;
case|case
name|DomProperty
operator|::
name|Enum
case|:
return|return
name|enumKeyOfObjectToValue
argument_list|<
name|QAbstractFormBuilderGadget
argument_list|,
name|Qt
operator|::
name|ToolBarArea
argument_list|>
argument_list|(
literal|"toolBarArea"
argument_list|,
name|attr
operator|->
name|elementEnum
argument_list|()
operator|.
name|toLatin1
argument_list|()
argument_list|)
return|;
default|default:
break|break;
block|}
return|return
name|Qt
operator|::
name|TopToolBarArea
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|addItem
name|bool
name|QAbstractFormBuilder
operator|::
name|addItem
parameter_list|(
name|DomWidget
modifier|*
name|ui_widget
parameter_list|,
name|QWidget
modifier|*
name|widget
parameter_list|,
name|QWidget
modifier|*
name|parentWidget
parameter_list|)
block|{
specifier|const
name|QFormBuilderStrings
modifier|&
name|strings
init|=
name|QFormBuilderStrings
operator|::
name|instance
argument_list|()
decl_stmt|;
specifier|const
name|DomPropertyHash
name|attributes
init|=
name|propertyMap
argument_list|(
name|ui_widget
operator|->
name|elementAttribute
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|parentWidget
operator|==
literal|0
condition|)
return|return
literal|true
return|;
comment|// Check special cases. First: Custom container
specifier|const
name|QString
name|className
init|=
name|QLatin1String
argument_list|(
name|parentWidget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|addPageMethod
init|=
name|d
operator|->
name|customWidgetAddPageMethod
argument_list|(
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|addPageMethod
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// If this fails ( non-existent or non-slot), use ContainerExtension in Designer, else it can't be helped
return|return
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|parentWidget
argument_list|,
name|addPageMethod
operator|.
name|toUtf8
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|,
name|Q_ARG
argument_list|(
name|QWidget
operator|*
argument_list|,
name|widget
argument_list|)
argument_list|)
return|;
block|}
if|if
condition|(
name|QMainWindow
modifier|*
name|mw
init|=
name|qobject_cast
argument_list|<
name|QMainWindow
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|)
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_MENUBAR
comment|// the menubar
if|if
condition|(
name|QMenuBar
modifier|*
name|menuBar
init|=
name|qobject_cast
argument_list|<
name|QMenuBar
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|mw
operator|->
name|setMenuBar
argument_list|(
name|menuBar
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_TOOLBAR
comment|// apply the toolbar's attributes
elseif|else
if|if
condition|(
name|QToolBar
modifier|*
name|toolBar
init|=
name|qobject_cast
argument_list|<
name|QToolBar
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|mw
operator|->
name|addToolBar
argument_list|(
name|toolbarAreaFromDOMAttributes
argument_list|(
name|attributes
argument_list|)
argument_list|,
name|toolBar
argument_list|)
expr_stmt|;
comment|// check break
if|if
condition|(
specifier|const
name|DomProperty
modifier|*
name|attr
init|=
name|attributes
operator|.
name|value
argument_list|(
name|strings
operator|.
name|toolBarBreakAttribute
argument_list|)
condition|)
if|if
condition|(
name|attr
operator|->
name|elementBool
argument_list|()
operator|==
name|strings
operator|.
name|trueValue
condition|)
name|mw
operator|->
name|insertToolBarBreak
argument_list|(
name|toolBar
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_STATUSBAR
comment|// statusBar
elseif|else
if|if
condition|(
name|QStatusBar
modifier|*
name|statusBar
init|=
name|qobject_cast
argument_list|<
name|QStatusBar
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|mw
operator|->
name|setStatusBar
argument_list|(
name|statusBar
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
comment|// apply the dockwidget's attributes
elseif|else
if|if
condition|(
name|QDockWidget
modifier|*
name|dockWidget
init|=
name|qobject_cast
argument_list|<
name|QDockWidget
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
if|if
condition|(
specifier|const
name|DomProperty
modifier|*
name|attr
init|=
name|attributes
operator|.
name|value
argument_list|(
name|strings
operator|.
name|dockWidgetAreaAttribute
argument_list|)
condition|)
block|{
name|Qt
operator|::
name|DockWidgetArea
name|area
init|=
cast|static_cast
argument_list|<
name|Qt
operator|::
name|DockWidgetArea
argument_list|>
argument_list|(
name|attr
operator|->
name|elementNumber
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dockWidget
operator|->
name|isAreaAllowed
argument_list|(
name|area
argument_list|)
condition|)
block|{
if|if
condition|(
name|dockWidget
operator|->
name|isAreaAllowed
argument_list|(
name|Qt
operator|::
name|LeftDockWidgetArea
argument_list|)
condition|)
name|area
operator|=
name|Qt
operator|::
name|LeftDockWidgetArea
expr_stmt|;
elseif|else
if|if
condition|(
name|dockWidget
operator|->
name|isAreaAllowed
argument_list|(
name|Qt
operator|::
name|RightDockWidgetArea
argument_list|)
condition|)
name|area
operator|=
name|Qt
operator|::
name|RightDockWidgetArea
expr_stmt|;
elseif|else
if|if
condition|(
name|dockWidget
operator|->
name|isAreaAllowed
argument_list|(
name|Qt
operator|::
name|TopDockWidgetArea
argument_list|)
condition|)
name|area
operator|=
name|Qt
operator|::
name|TopDockWidgetArea
expr_stmt|;
elseif|else
if|if
condition|(
name|dockWidget
operator|->
name|isAreaAllowed
argument_list|(
name|Qt
operator|::
name|BottomDockWidgetArea
argument_list|)
condition|)
name|area
operator|=
name|Qt
operator|::
name|BottomDockWidgetArea
expr_stmt|;
block|}
name|mw
operator|->
name|addDockWidget
argument_list|(
name|area
argument_list|,
name|dockWidget
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mw
operator|->
name|addDockWidget
argument_list|(
name|Qt
operator|::
name|LeftDockWidgetArea
argument_list|,
name|dockWidget
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
endif|#
directive|endif
elseif|else
if|if
condition|(
operator|!
name|mw
operator|->
name|centralWidget
argument_list|()
condition|)
block|{
name|mw
operator|->
name|setCentralWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
ifndef|#
directive|ifndef
name|QT_NO_TABWIDGET
elseif|else
if|if
condition|(
name|QTabWidget
modifier|*
name|tabWidget
init|=
name|qobject_cast
argument_list|<
name|QTabWidget
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|)
condition|)
block|{
name|widget
operator|->
name|setParent
argument_list|(
literal|0
argument_list|)
expr_stmt|;
specifier|const
name|int
name|tabIndex
init|=
name|tabWidget
operator|->
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
specifier|const
name|DomProperty
modifier|*
name|titleP
init|=
name|attributes
operator|.
name|value
argument_list|(
name|strings
operator|.
name|titleAttribute
argument_list|,
literal|0
argument_list|)
condition|)
name|tabWidget
operator|->
name|addTab
argument_list|(
name|widget
argument_list|,
name|toString
argument_list|(
name|titleP
operator|->
name|elementString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|tabWidget
operator|->
name|addTab
argument_list|(
name|widget
argument_list|,
name|strings
operator|.
name|defaultTitle
argument_list|)
expr_stmt|;
if|if
condition|(
name|DomProperty
modifier|*
name|picon
init|=
name|attributes
operator|.
name|value
argument_list|(
name|strings
operator|.
name|iconAttribute
argument_list|)
condition|)
block|{
name|QVariant
name|v
init|=
name|resourceBuilder
argument_list|()
operator|->
name|loadResource
argument_list|(
name|workingDirectory
argument_list|()
argument_list|,
name|picon
argument_list|)
decl_stmt|;
name|QVariant
name|nativeValue
init|=
name|resourceBuilder
argument_list|()
operator|->
name|toNativeValue
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|tabWidget
operator|->
name|setTabIcon
argument_list|(
name|tabIndex
argument_list|,
name|qvariant_cast
argument_list|<
name|QIcon
argument_list|>
argument_list|(
name|nativeValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_TOOLTIP
if|if
condition|(
specifier|const
name|DomProperty
modifier|*
name|ptoolTip
init|=
name|attributes
operator|.
name|value
argument_list|(
name|strings
operator|.
name|toolTipAttribute
argument_list|)
condition|)
block|{
name|tabWidget
operator|->
name|setTabToolTip
argument_list|(
name|tabIndex
argument_list|,
name|toString
argument_list|(
name|ptoolTip
operator|->
name|elementString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_WHATSTHIS
if|if
condition|(
specifier|const
name|DomProperty
modifier|*
name|pwhatsThis
init|=
name|attributes
operator|.
name|value
argument_list|(
name|strings
operator|.
name|whatsThisAttribute
argument_list|)
condition|)
block|{
name|tabWidget
operator|->
name|setTabWhatsThis
argument_list|(
name|tabIndex
argument_list|,
name|toString
argument_list|(
name|pwhatsThis
operator|->
name|elementString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
return|return
literal|true
return|;
block|}
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_TOOLBOX
elseif|else
if|if
condition|(
name|QToolBox
modifier|*
name|toolBox
init|=
name|qobject_cast
argument_list|<
name|QToolBox
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|)
condition|)
block|{
specifier|const
name|int
name|tabIndex
init|=
name|toolBox
operator|->
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
specifier|const
name|DomProperty
modifier|*
name|labelP
init|=
name|attributes
operator|.
name|value
argument_list|(
name|strings
operator|.
name|labelAttribute
argument_list|,
literal|0
argument_list|)
condition|)
name|toolBox
operator|->
name|addItem
argument_list|(
name|widget
argument_list|,
name|toString
argument_list|(
name|labelP
operator|->
name|elementString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|toolBox
operator|->
name|addItem
argument_list|(
name|widget
argument_list|,
name|strings
operator|.
name|defaultTitle
argument_list|)
expr_stmt|;
if|if
condition|(
name|DomProperty
modifier|*
name|picon
init|=
name|attributes
operator|.
name|value
argument_list|(
name|strings
operator|.
name|iconAttribute
argument_list|)
condition|)
block|{
name|QVariant
name|v
init|=
name|resourceBuilder
argument_list|()
operator|->
name|loadResource
argument_list|(
name|workingDirectory
argument_list|()
argument_list|,
name|picon
argument_list|)
decl_stmt|;
name|QVariant
name|nativeValue
init|=
name|resourceBuilder
argument_list|()
operator|->
name|toNativeValue
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|toolBox
operator|->
name|setItemIcon
argument_list|(
name|tabIndex
argument_list|,
name|qvariant_cast
argument_list|<
name|QIcon
argument_list|>
argument_list|(
name|nativeValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_TOOLTIP
if|if
condition|(
specifier|const
name|DomProperty
modifier|*
name|ptoolTip
init|=
name|attributes
operator|.
name|value
argument_list|(
name|strings
operator|.
name|toolTipAttribute
argument_list|)
condition|)
block|{
name|toolBox
operator|->
name|setItemToolTip
argument_list|(
name|tabIndex
argument_list|,
name|toString
argument_list|(
name|ptoolTip
operator|->
name|elementString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
return|return
literal|true
return|;
block|}
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_STACKEDWIDGET
elseif|else
if|if
condition|(
name|QStackedWidget
modifier|*
name|stackedWidget
init|=
name|qobject_cast
argument_list|<
name|QStackedWidget
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|)
condition|)
block|{
name|stackedWidget
operator|->
name|addWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_SPLITTER
elseif|else
if|if
condition|(
name|QSplitter
modifier|*
name|splitter
init|=
name|qobject_cast
argument_list|<
name|QSplitter
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|)
condition|)
block|{
name|splitter
operator|->
name|addWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_MDIAREA
elseif|else
if|if
condition|(
name|QMdiArea
modifier|*
name|mdiArea
init|=
name|qobject_cast
argument_list|<
name|QMdiArea
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|)
condition|)
block|{
name|mdiArea
operator|->
name|addSubWindow
argument_list|(
name|widget
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_WORKSPACE
elseif|else
if|if
condition|(
name|QWorkspace
modifier|*
name|ws
init|=
name|qobject_cast
argument_list|<
name|QWorkspace
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|)
condition|)
block|{
name|ws
operator|->
name|addWindow
argument_list|(
name|widget
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
elseif|else
if|if
condition|(
name|QDockWidget
modifier|*
name|dockWidget
init|=
name|qobject_cast
argument_list|<
name|QDockWidget
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|)
condition|)
block|{
name|dockWidget
operator|->
name|setWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_SCROLLAREA
elseif|else
if|if
condition|(
name|QScrollArea
modifier|*
name|scrollArea
init|=
name|qobject_cast
argument_list|<
name|QScrollArea
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|)
condition|)
block|{
name|scrollArea
operator|->
name|setWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_WIZARD
elseif|else
if|if
condition|(
name|QWizard
modifier|*
name|wizard
init|=
name|qobject_cast
argument_list|<
name|QWizard
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|)
condition|)
block|{
name|QWizardPage
modifier|*
name|page
init|=
name|qobject_cast
argument_list|<
name|QWizardPage
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|page
condition|)
block|{
name|uiLibWarning
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QAbstractFormBuilder"
argument_list|,
literal|"Attempt to add child that is not of class QWizardPage to QWizard."
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|wizard
operator|->
name|addPage
argument_list|(
name|page
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
endif|#
directive|endif
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|layoutInfo
name|void
name|QAbstractFormBuilder
operator|::
name|layoutInfo
parameter_list|(
name|DomLayout
modifier|*
name|ui_layout
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|,
name|int
modifier|*
name|margin
parameter_list|,
name|int
modifier|*
name|spacing
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|parent
argument_list|)
specifier|const
name|QFormBuilderStrings
modifier|&
name|strings
init|=
name|QFormBuilderStrings
operator|::
name|instance
argument_list|()
decl_stmt|;
specifier|const
name|DomPropertyHash
name|properties
init|=
name|propertyMap
argument_list|(
name|ui_layout
operator|->
name|elementProperty
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|mar
init|=
name|INT_MIN
decl_stmt|;
name|int
name|spac
init|=
name|INT_MIN
decl_stmt|;
if|if
condition|(
specifier|const
name|DomProperty
modifier|*
name|p
init|=
name|properties
operator|.
name|value
argument_list|(
name|strings
operator|.
name|marginProperty
argument_list|,
literal|0
argument_list|)
condition|)
name|mar
operator|=
name|p
operator|->
name|elementNumber
argument_list|()
expr_stmt|;
if|if
condition|(
specifier|const
name|DomProperty
modifier|*
name|p
init|=
name|properties
operator|.
name|value
argument_list|(
name|strings
operator|.
name|spacingProperty
argument_list|,
literal|0
argument_list|)
condition|)
name|spac
operator|=
name|p
operator|->
name|elementNumber
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
comment|// here we recognize UI file< 4.3 (no we don't store margin property)
if|if
condition|(
name|mar
operator|!=
name|INT_MIN
condition|)
block|{
specifier|const
name|int
name|defaultMargin
init|=
name|parent
operator|->
name|inherits
argument_list|(
literal|"QLayoutWidget"
argument_list|)
condition|?
literal|0
else|:
literal|9
decl_stmt|;
if|if
condition|(
name|mar
operator|==
name|defaultMargin
condition|)
name|mar
operator|=
name|INT_MIN
expr_stmt|;
if|if
condition|(
name|spac
operator|==
literal|6
condition|)
name|spac
operator|=
name|INT_MIN
expr_stmt|;
if|if
condition|(
name|mar
operator|==
name|INT_MIN
operator|||
name|spac
operator|==
name|INT_MIN
condition|)
block|{
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
name|properties
init|=
name|ui_layout
operator|->
name|elementProperty
argument_list|()
decl_stmt|;
name|QMutableListIterator
argument_list|<
name|DomProperty
modifier|*
argument_list|>
name|it
argument_list|(
name|properties
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|DomProperty
modifier|*
name|prop
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|mar
operator|==
name|INT_MIN
operator|&&
name|prop
operator|->
name|attributeName
argument_list|()
operator|==
name|strings
operator|.
name|marginProperty
operator|)
operator|||
operator|(
name|spac
operator|==
name|INT_MIN
operator|&&
name|prop
operator|->
name|attributeName
argument_list|()
operator|==
name|strings
operator|.
name|spacingProperty
operator|)
condition|)
block|{
name|it
operator|.
name|remove
argument_list|()
expr_stmt|;
operator|delete
name|prop
expr_stmt|;
block|}
block|}
name|ui_layout
operator|->
name|setElementProperty
argument_list|(
name|properties
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
if|if
condition|(
name|margin
condition|)
operator|*
name|margin
operator|=
name|mar
expr_stmt|;
if|if
condition|(
name|spacing
condition|)
operator|*
name|spacing
operator|=
name|spac
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|create
name|QLayout
modifier|*
name|QAbstractFormBuilder
operator|::
name|create
parameter_list|(
name|DomLayout
modifier|*
name|ui_layout
parameter_list|,
name|QLayout
modifier|*
name|parentLayout
parameter_list|,
name|QWidget
modifier|*
name|parentWidget
parameter_list|)
block|{
name|QObject
modifier|*
name|p
init|=
name|parentLayout
decl_stmt|;
if|if
condition|(
name|p
operator|==
literal|0
condition|)
name|p
operator|=
name|parentWidget
expr_stmt|;
name|Q_ASSERT
argument_list|(
name|p
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|bool
name|tracking
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|p
operator|==
name|parentWidget
operator|&&
name|parentWidget
operator|->
name|layout
argument_list|()
condition|)
block|{
name|tracking
operator|=
literal|true
expr_stmt|;
name|p
operator|=
name|parentWidget
operator|->
name|layout
argument_list|()
expr_stmt|;
block|}
name|QLayout
modifier|*
name|layout
init|=
name|createLayout
argument_list|(
name|ui_layout
operator|->
name|attributeClass
argument_list|()
argument_list|,
name|p
argument_list|,
name|ui_layout
operator|->
name|hasAttributeName
argument_list|()
condition|?
name|ui_layout
operator|->
name|attributeName
argument_list|()
else|:
name|QString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|layout
operator|==
literal|0
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|tracking
operator|&&
name|layout
operator|->
name|parent
argument_list|()
operator|==
literal|0
condition|)
block|{
name|QBoxLayout
modifier|*
name|box
init|=
name|qobject_cast
argument_list|<
name|QBoxLayout
operator|*
argument_list|>
argument_list|(
name|parentWidget
operator|->
name|layout
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|box
condition|)
block|{
comment|// only QBoxLayout is supported
specifier|const
name|QString
name|widgetClass
init|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|parentWidget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|layoutClass
init|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|parentWidget
operator|->
name|layout
argument_list|()
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|msg
init|=
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QAbstractFormBuilder"
argument_list|,
literal|"Attempt to add a layout to a widget '%1' (%2) which already has a layout of non-box type %3.\n"
literal|"This indicates an inconsistency in the ui-file."
argument_list|)
operator|.
name|arg
argument_list|(
name|parentWidget
operator|->
name|objectName
argument_list|()
argument_list|,
name|widgetClass
argument_list|,
name|layoutClass
argument_list|)
decl_stmt|;
name|uiLibWarning
argument_list|(
name|msg
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|box
operator|->
name|addLayout
argument_list|(
name|layout
argument_list|)
expr_stmt|;
block|}
name|int
name|margin
init|=
name|INT_MIN
decl_stmt|,
name|spacing
init|=
name|INT_MIN
decl_stmt|;
name|layoutInfo
argument_list|(
name|ui_layout
argument_list|,
name|p
argument_list|,
operator|&
name|margin
argument_list|,
operator|&
name|spacing
argument_list|)
expr_stmt|;
if|if
condition|(
name|margin
operator|!=
name|INT_MIN
condition|)
block|{
name|layout
operator|->
name|setMargin
argument_list|(
name|margin
argument_list|)
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|QFormBuilderStrings
modifier|&
name|strings
init|=
name|QFormBuilderStrings
operator|::
name|instance
argument_list|()
decl_stmt|;
name|int
name|left
decl_stmt|,
name|top
decl_stmt|,
name|right
decl_stmt|,
name|bottom
decl_stmt|;
name|left
operator|=
name|top
operator|=
name|right
operator|=
name|bottom
operator|=
operator|-
literal|1
expr_stmt|;
name|layout
operator|->
name|getContentsMargins
argument_list|(
operator|&
name|left
argument_list|,
operator|&
name|top
argument_list|,
operator|&
name|right
argument_list|,
operator|&
name|bottom
argument_list|)
expr_stmt|;
specifier|const
name|DomPropertyHash
name|properties
init|=
name|propertyMap
argument_list|(
name|ui_layout
operator|->
name|elementProperty
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
specifier|const
name|DomProperty
modifier|*
name|p
init|=
name|properties
operator|.
name|value
argument_list|(
name|strings
operator|.
name|leftMarginProperty
argument_list|,
literal|0
argument_list|)
condition|)
name|left
operator|=
name|p
operator|->
name|elementNumber
argument_list|()
expr_stmt|;
if|if
condition|(
specifier|const
name|DomProperty
modifier|*
name|p
init|=
name|properties
operator|.
name|value
argument_list|(
name|strings
operator|.
name|topMarginProperty
argument_list|,
literal|0
argument_list|)
condition|)
name|top
operator|=
name|p
operator|->
name|elementNumber
argument_list|()
expr_stmt|;
if|if
condition|(
specifier|const
name|DomProperty
modifier|*
name|p
init|=
name|properties
operator|.
name|value
argument_list|(
name|strings
operator|.
name|rightMarginProperty
argument_list|,
literal|0
argument_list|)
condition|)
name|right
operator|=
name|p
operator|->
name|elementNumber
argument_list|()
expr_stmt|;
if|if
condition|(
specifier|const
name|DomProperty
modifier|*
name|p
init|=
name|properties
operator|.
name|value
argument_list|(
name|strings
operator|.
name|bottomMarginProperty
argument_list|,
literal|0
argument_list|)
condition|)
name|bottom
operator|=
name|p
operator|->
name|elementNumber
argument_list|()
expr_stmt|;
name|layout
operator|->
name|setContentsMargins
argument_list|(
name|left
argument_list|,
name|top
argument_list|,
name|right
argument_list|,
name|bottom
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|spacing
operator|!=
name|INT_MIN
condition|)
block|{
name|layout
operator|->
name|setSpacing
argument_list|(
name|spacing
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QGridLayout
modifier|*
name|grid
init|=
name|qobject_cast
argument_list|<
name|QGridLayout
operator|*
argument_list|>
argument_list|(
name|layout
argument_list|)
decl_stmt|;
if|if
condition|(
name|grid
condition|)
block|{
specifier|const
name|QFormBuilderStrings
modifier|&
name|strings
init|=
name|QFormBuilderStrings
operator|::
name|instance
argument_list|()
decl_stmt|;
specifier|const
name|DomPropertyHash
name|properties
init|=
name|propertyMap
argument_list|(
name|ui_layout
operator|->
name|elementProperty
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
specifier|const
name|DomProperty
modifier|*
name|p
init|=
name|properties
operator|.
name|value
argument_list|(
name|strings
operator|.
name|horizontalSpacingProperty
argument_list|,
literal|0
argument_list|)
condition|)
name|grid
operator|->
name|setHorizontalSpacing
argument_list|(
name|p
operator|->
name|elementNumber
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
specifier|const
name|DomProperty
modifier|*
name|p
init|=
name|properties
operator|.
name|value
argument_list|(
name|strings
operator|.
name|verticalSpacingProperty
argument_list|,
literal|0
argument_list|)
condition|)
name|grid
operator|->
name|setVerticalSpacing
argument_list|(
name|p
operator|->
name|elementNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|applyProperties
argument_list|(
name|layout
argument_list|,
name|ui_layout
operator|->
name|elementProperty
argument_list|()
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|DomLayoutItem
modifier|*
name|ui_item
decl|,
name|ui_layout
operator|->
name|elementItem
argument_list|()
control|)
block|{
if|if
condition|(
name|QLayoutItem
modifier|*
name|item
init|=
name|create
argument_list|(
name|ui_item
argument_list|,
name|layout
argument_list|,
name|parentWidget
argument_list|)
condition|)
block|{
name|addItem
argument_list|(
name|ui_item
argument_list|,
name|item
argument_list|,
name|layout
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Check the box stretch attributes
if|if
condition|(
name|QBoxLayout
modifier|*
name|box
init|=
name|qobject_cast
argument_list|<
name|QBoxLayout
operator|*
argument_list|>
argument_list|(
name|layout
argument_list|)
condition|)
block|{
specifier|const
name|QString
name|boxStretch
init|=
name|ui_layout
operator|->
name|attributeStretch
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|boxStretch
operator|.
name|isEmpty
argument_list|()
condition|)
name|QFormBuilderExtra
operator|::
name|setBoxLayoutStretch
argument_list|(
name|boxStretch
argument_list|,
name|box
argument_list|)
expr_stmt|;
block|}
comment|// Check the grid stretch/minimum size attributes
if|if
condition|(
name|QGridLayout
modifier|*
name|grid
init|=
name|qobject_cast
argument_list|<
name|QGridLayout
operator|*
argument_list|>
argument_list|(
name|layout
argument_list|)
condition|)
block|{
comment|// Stretch
specifier|const
name|QString
name|gridRowStretch
init|=
name|ui_layout
operator|->
name|attributeRowStretch
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|gridRowStretch
operator|.
name|isEmpty
argument_list|()
condition|)
name|QFormBuilderExtra
operator|::
name|setGridLayoutRowStretch
argument_list|(
name|gridRowStretch
argument_list|,
name|grid
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|gridColumnStretch
init|=
name|ui_layout
operator|->
name|attributeColumnStretch
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|gridColumnStretch
operator|.
name|isEmpty
argument_list|()
condition|)
name|QFormBuilderExtra
operator|::
name|setGridLayoutColumnStretch
argument_list|(
name|gridColumnStretch
argument_list|,
name|grid
argument_list|)
expr_stmt|;
comment|// Minimum size
specifier|const
name|QString
name|gridColumnMinimumWidth
init|=
name|ui_layout
operator|->
name|attributeColumnMinimumWidth
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|gridColumnMinimumWidth
operator|.
name|isEmpty
argument_list|()
condition|)
name|QFormBuilderExtra
operator|::
name|setGridLayoutColumnMinimumWidth
argument_list|(
name|gridColumnMinimumWidth
argument_list|,
name|grid
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|gridRowMinimumHeight
init|=
name|ui_layout
operator|->
name|attributeRowMinimumHeight
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|gridRowMinimumHeight
operator|.
name|isEmpty
argument_list|()
condition|)
name|QFormBuilderExtra
operator|::
name|setGridLayoutRowMinimumHeight
argument_list|(
name|gridRowMinimumHeight
argument_list|,
name|grid
argument_list|)
expr_stmt|;
block|}
return|return
name|layout
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_FORMLAYOUT
end_ifndef
begin_function
DECL|function|formLayoutRole
specifier|static
specifier|inline
name|QFormLayout
operator|::
name|ItemRole
name|formLayoutRole
parameter_list|(
name|int
name|column
parameter_list|,
name|int
name|colspan
parameter_list|)
block|{
if|if
condition|(
name|colspan
operator|>
literal|1
condition|)
return|return
name|QFormLayout
operator|::
name|SpanningRole
return|;
return|return
name|column
operator|==
literal|0
condition|?
name|QFormLayout
operator|::
name|LabelRole
else|:
name|QFormLayout
operator|::
name|FieldRole
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|alignmentValue
specifier|static
specifier|inline
name|QString
name|alignmentValue
parameter_list|(
name|Qt
operator|::
name|Alignment
name|a
parameter_list|)
block|{
name|QString
name|h
decl_stmt|,
name|v
decl_stmt|;
switch|switch
condition|(
name|a
operator|&
name|Qt
operator|::
name|AlignHorizontal_Mask
condition|)
block|{
case|case
name|Qt
operator|::
name|AlignLeft
case|:
name|h
operator|=
name|QLatin1String
argument_list|(
literal|"Qt::AlignLeft"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|AlignRight
case|:
name|h
operator|=
name|QLatin1String
argument_list|(
literal|"Qt::AlignRight"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|AlignHCenter
case|:
name|h
operator|=
name|QLatin1String
argument_list|(
literal|"Qt::AlignHCenter"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|AlignJustify
case|:
name|h
operator|=
name|QLatin1String
argument_list|(
literal|"Qt::AlignJustify"
argument_list|)
expr_stmt|;
break|break;
block|}
switch|switch
condition|(
name|a
operator|&
name|Qt
operator|::
name|AlignVertical_Mask
condition|)
block|{
case|case
name|Qt
operator|::
name|AlignTop
case|:
name|v
operator|=
name|QLatin1String
argument_list|(
literal|"Qt::AlignTop"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|AlignBottom
case|:
name|v
operator|=
name|QLatin1String
argument_list|(
literal|"Qt::AlignBottom"
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|AlignVCenter
case|:
name|v
operator|=
name|QLatin1String
argument_list|(
literal|"Qt::AlignVCenter"
argument_list|)
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|h
operator|.
name|isEmpty
argument_list|()
operator|&&
name|v
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|QString
argument_list|()
return|;
if|if
condition|(
operator|!
name|v
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|h
operator|.
name|isEmpty
argument_list|()
condition|)
name|h
operator|+=
name|QLatin1Char
argument_list|(
literal|'|'
argument_list|)
expr_stmt|;
name|h
operator|+=
name|v
expr_stmt|;
block|}
return|return
name|h
return|;
block|}
end_function
begin_function
DECL|function|alignmentFromDom
specifier|static
specifier|inline
name|Qt
operator|::
name|Alignment
name|alignmentFromDom
parameter_list|(
specifier|const
name|QString
modifier|&
name|in
parameter_list|)
block|{
name|Qt
operator|::
name|Alignment
name|rc
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|in
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|f
decl|,
name|in
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|'|'
argument_list|)
argument_list|)
control|)
block|{
if|if
condition|(
name|f
operator|==
name|QLatin1String
argument_list|(
literal|"Qt::AlignLeft"
argument_list|)
condition|)
block|{
name|rc
operator||=
name|Qt
operator|::
name|AlignLeft
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|f
operator|==
name|QLatin1String
argument_list|(
literal|"Qt::AlignRight"
argument_list|)
condition|)
block|{
name|rc
operator||=
name|Qt
operator|::
name|AlignRight
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|f
operator|==
name|QLatin1String
argument_list|(
literal|"Qt::AlignHCenter"
argument_list|)
condition|)
block|{
name|rc
operator||=
name|Qt
operator|::
name|AlignHCenter
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|f
operator|==
name|QLatin1String
argument_list|(
literal|"Qt::AlignJustify"
argument_list|)
condition|)
block|{
name|rc
operator||=
name|Qt
operator|::
name|AlignJustify
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|f
operator|==
name|QLatin1String
argument_list|(
literal|"Qt::AlignTop"
argument_list|)
condition|)
block|{
name|rc
operator||=
name|Qt
operator|::
name|AlignTop
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|f
operator|==
name|QLatin1String
argument_list|(
literal|"Qt::AlignBottom"
argument_list|)
condition|)
block|{
name|rc
operator||=
name|Qt
operator|::
name|AlignBottom
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|f
operator|==
name|QLatin1String
argument_list|(
literal|"Qt::AlignVCenter"
argument_list|)
condition|)
block|{
name|rc
operator||=
name|Qt
operator|::
name|AlignVCenter
expr_stmt|;
block|}
block|}
block|}
return|return
name|rc
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|addItem
name|bool
name|QAbstractFormBuilder
operator|::
name|addItem
parameter_list|(
name|DomLayoutItem
modifier|*
name|ui_item
parameter_list|,
name|QLayoutItem
modifier|*
name|item
parameter_list|,
name|QLayout
modifier|*
name|layout
parameter_list|)
block|{
comment|// Calling addChildWidget(), etc.  is required to maintain consistency of the layouts,
comment|// see documentation of addItem(), which should ideally not be used.
if|if
condition|(
name|item
operator|->
name|widget
argument_list|()
condition|)
block|{
cast|static_cast
argument_list|<
name|QFriendlyLayout
operator|*
argument_list|>
argument_list|(
name|layout
argument_list|)
operator|->
name|addChildWidget
argument_list|(
name|item
operator|->
name|widget
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|item
operator|->
name|layout
argument_list|()
condition|)
block|{
cast|static_cast
argument_list|<
name|QFriendlyLayout
operator|*
argument_list|>
argument_list|(
name|layout
argument_list|)
operator|->
name|addChildLayout
argument_list|(
name|item
operator|->
name|layout
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|item
operator|->
name|spacerItem
argument_list|()
condition|)
block|{
comment|// nothing to do
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
if|if
condition|(
name|QGridLayout
modifier|*
name|grid
init|=
name|qobject_cast
argument_list|<
name|QGridLayout
operator|*
argument_list|>
argument_list|(
name|layout
argument_list|)
condition|)
block|{
specifier|const
name|int
name|rowSpan
init|=
name|ui_item
operator|->
name|hasAttributeRowSpan
argument_list|()
condition|?
name|ui_item
operator|->
name|attributeRowSpan
argument_list|()
else|:
literal|1
decl_stmt|;
specifier|const
name|int
name|colSpan
init|=
name|ui_item
operator|->
name|hasAttributeColSpan
argument_list|()
condition|?
name|ui_item
operator|->
name|attributeColSpan
argument_list|()
else|:
literal|1
decl_stmt|;
name|grid
operator|->
name|addItem
argument_list|(
name|item
argument_list|,
name|ui_item
operator|->
name|attributeRow
argument_list|()
argument_list|,
name|ui_item
operator|->
name|attributeColumn
argument_list|()
argument_list|,
name|rowSpan
argument_list|,
name|colSpan
argument_list|,
name|item
operator|->
name|alignment
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_FORMLAYOUT
if|if
condition|(
name|QFormLayout
modifier|*
name|form
init|=
name|qobject_cast
argument_list|<
name|QFormLayout
operator|*
argument_list|>
argument_list|(
name|layout
argument_list|)
condition|)
block|{
specifier|const
name|int
name|row
init|=
name|ui_item
operator|->
name|attributeRow
argument_list|()
decl_stmt|;
specifier|const
name|int
name|colSpan
init|=
name|ui_item
operator|->
name|hasAttributeColSpan
argument_list|()
condition|?
name|ui_item
operator|->
name|attributeColSpan
argument_list|()
else|:
literal|1
decl_stmt|;
name|form
operator|->
name|setItem
argument_list|(
name|row
argument_list|,
name|formLayoutRole
argument_list|(
name|ui_item
operator|->
name|attributeColumn
argument_list|()
argument_list|,
name|colSpan
argument_list|)
argument_list|,
name|item
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
endif|#
directive|endif
name|layout
operator|->
name|addItem
argument_list|(
name|item
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|create
name|QLayoutItem
modifier|*
name|QAbstractFormBuilder
operator|::
name|create
parameter_list|(
name|DomLayoutItem
modifier|*
name|ui_layoutItem
parameter_list|,
name|QLayout
modifier|*
name|layout
parameter_list|,
name|QWidget
modifier|*
name|parentWidget
parameter_list|)
block|{
switch|switch
condition|(
name|ui_layoutItem
operator|->
name|kind
argument_list|()
condition|)
block|{
case|case
name|DomLayoutItem
operator|::
name|Widget
case|:
block|{
if|if
condition|(
name|QWidget
modifier|*
name|w
init|=
name|create
argument_list|(
name|ui_layoutItem
operator|->
name|elementWidget
argument_list|()
argument_list|,
name|parentWidget
argument_list|)
condition|)
block|{
ifdef|#
directive|ifdef
name|QFORMINTERNAL_NAMESPACE
comment|// uilib
name|QWidgetItem
modifier|*
name|item
init|=
operator|new
name|QWidgetItemV2
argument_list|(
name|w
argument_list|)
decl_stmt|;
else|#
directive|else
comment|// Within Designer: Use factory method that returns special items that refuse to shrink to 0,0
name|QWidgetItem
modifier|*
name|item
init|=
name|QLayoutPrivate
operator|::
name|createWidgetItem
argument_list|(
name|layout
argument_list|,
name|w
argument_list|)
decl_stmt|;
endif|#
directive|endif
name|item
operator|->
name|setAlignment
argument_list|(
name|alignmentFromDom
argument_list|(
name|ui_layoutItem
operator|->
name|attributeAlignment
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|item
return|;
block|}
name|qWarning
argument_list|()
operator|<<
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QAbstractFormBuilder"
argument_list|,
literal|"Empty widget item in %1 '%2'."
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
name|layout
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
argument_list|,
name|layout
operator|->
name|objectName
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
case|case
name|DomLayoutItem
operator|::
name|Spacer
case|:
block|{
name|QSize
name|size
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QSizePolicy
operator|::
name|Policy
name|sizeType
init|=
name|QSizePolicy
operator|::
name|Expanding
decl_stmt|;
name|bool
name|isVspacer
init|=
literal|false
decl_stmt|;
specifier|const
name|DomSpacer
modifier|*
name|ui_spacer
init|=
name|ui_layoutItem
operator|->
name|elementSpacer
argument_list|()
decl_stmt|;
specifier|const
name|QMetaEnum
name|sizePolicy_enum
init|=
name|metaEnum
argument_list|<
name|QAbstractFormBuilderGadget
argument_list|>
argument_list|(
literal|"sizeType"
argument_list|)
decl_stmt|;
specifier|const
name|QMetaEnum
name|orientation_enum
init|=
name|metaEnum
argument_list|<
name|QAbstractFormBuilderGadget
argument_list|>
argument_list|(
literal|"orientation"
argument_list|)
decl_stmt|;
specifier|const
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
name|spacerProperties
init|=
name|ui_spacer
operator|->
name|elementProperty
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|spacerProperties
operator|.
name|empty
argument_list|()
condition|)
block|{
specifier|const
name|QFormBuilderStrings
modifier|&
name|strings
init|=
name|QFormBuilderStrings
operator|::
name|instance
argument_list|()
decl_stmt|;
foreach|foreach
control|(
name|DomProperty
modifier|*
name|p
decl|,
name|spacerProperties
control|)
block|{
specifier|const
name|QVariant
name|v
init|=
name|toVariant
argument_list|(
operator|&
name|QAbstractFormBuilderGadget
operator|::
name|staticMetaObject
argument_list|,
name|p
argument_list|)
decl_stmt|;
comment|// ### remove me
if|if
condition|(
name|v
operator|.
name|isNull
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|p
operator|->
name|attributeName
argument_list|()
operator|==
name|strings
operator|.
name|sizeHintProperty
operator|&&
name|p
operator|->
name|kind
argument_list|()
operator|==
name|DomProperty
operator|::
name|Size
condition|)
block|{
name|size
operator|=
name|v
operator|.
name|toSize
argument_list|()
expr_stmt|;
comment|// ###  remove me
block|}
elseif|else
if|if
condition|(
name|p
operator|->
name|attributeName
argument_list|()
operator|==
name|strings
operator|.
name|sizeTypeProperty
operator|&&
name|p
operator|->
name|kind
argument_list|()
operator|==
name|DomProperty
operator|::
name|Enum
condition|)
block|{
name|sizeType
operator|=
cast|static_cast
argument_list|<
name|QSizePolicy
operator|::
name|Policy
argument_list|>
argument_list|(
name|v
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|p
operator|->
name|attributeName
argument_list|()
operator|==
name|strings
operator|.
name|orientationProperty
operator|&&
name|p
operator|->
name|kind
argument_list|()
operator|==
name|DomProperty
operator|::
name|Enum
condition|)
block|{
specifier|const
name|Qt
operator|::
name|Orientation
name|o
init|=
cast|static_cast
argument_list|<
name|Qt
operator|::
name|Orientation
argument_list|>
argument_list|(
name|v
operator|.
name|toInt
argument_list|()
argument_list|)
decl_stmt|;
name|isVspacer
operator|=
operator|(
name|o
operator|==
name|Qt
operator|::
name|Vertical
operator|)
expr_stmt|;
block|}
block|}
block|}
name|QSpacerItem
modifier|*
name|spacer
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|isVspacer
condition|)
name|spacer
operator|=
operator|new
name|QSpacerItem
argument_list|(
name|size
operator|.
name|width
argument_list|()
argument_list|,
name|size
operator|.
name|height
argument_list|()
argument_list|,
name|QSizePolicy
operator|::
name|Minimum
argument_list|,
name|sizeType
argument_list|)
expr_stmt|;
else|else
name|spacer
operator|=
operator|new
name|QSpacerItem
argument_list|(
name|size
operator|.
name|width
argument_list|()
argument_list|,
name|size
operator|.
name|height
argument_list|()
argument_list|,
name|sizeType
argument_list|,
name|QSizePolicy
operator|::
name|Minimum
argument_list|)
expr_stmt|;
return|return
name|spacer
return|;
block|}
case|case
name|DomLayoutItem
operator|::
name|Layout
case|:
return|return
name|create
argument_list|(
name|ui_layoutItem
operator|->
name|elementLayout
argument_list|()
argument_list|,
name|layout
argument_list|,
name|parentWidget
argument_list|)
return|;
default|default:
break|break;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|applyProperties
name|void
name|QAbstractFormBuilder
operator|::
name|applyProperties
parameter_list|(
name|QObject
modifier|*
name|o
parameter_list|,
specifier|const
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
modifier|&
name|properties
parameter_list|)
block|{
typedef|typedef
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
name|DomPropertyList
typedef|;
if|if
condition|(
name|properties
operator|.
name|empty
argument_list|()
condition|)
return|return;
specifier|const
name|DomPropertyList
operator|::
name|const_iterator
name|cend
init|=
name|properties
operator|.
name|constEnd
argument_list|()
decl_stmt|;
for|for
control|(
name|DomPropertyList
operator|::
name|const_iterator
name|it
init|=
name|properties
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|cend
condition|;
operator|++
name|it
control|)
block|{
specifier|const
name|QVariant
name|v
init|=
name|toVariant
argument_list|(
name|o
operator|->
name|metaObject
argument_list|()
argument_list|,
operator|*
name|it
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|v
operator|.
name|isNull
argument_list|()
condition|)
block|{
specifier|const
name|QString
name|attributeName
init|=
operator|(
operator|*
name|it
operator|)
operator|->
name|attributeName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|d
operator|->
name|applyPropertyInternally
argument_list|(
name|o
argument_list|,
name|attributeName
argument_list|,
name|v
argument_list|)
condition|)
name|o
operator|->
name|setProperty
argument_list|(
name|attributeName
operator|.
name|toUtf8
argument_list|()
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*!     \internal     Check whether a property is applied internally by QAbstractFormBuilder. Call this    from overwritten applyProperties(). */
end_comment
begin_function
DECL|function|applyPropertyInternally
name|bool
name|QAbstractFormBuilder
operator|::
name|applyPropertyInternally
parameter_list|(
name|QObject
modifier|*
name|o
parameter_list|,
specifier|const
name|QString
modifier|&
name|propertyName
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|)
block|{
return|return
name|d
operator|->
name|applyPropertyInternally
argument_list|(
name|o
argument_list|,
name|propertyName
argument_list|,
name|value
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|toVariant
name|QVariant
name|QAbstractFormBuilder
operator|::
name|toVariant
parameter_list|(
specifier|const
name|QMetaObject
modifier|*
name|meta
parameter_list|,
name|DomProperty
modifier|*
name|p
parameter_list|)
block|{
return|return
name|domPropertyToVariant
argument_list|(
name|this
argument_list|,
name|meta
argument_list|,
name|p
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|setupColorGroup
name|void
name|QAbstractFormBuilder
operator|::
name|setupColorGroup
parameter_list|(
name|QPalette
modifier|&
name|palette
parameter_list|,
name|QPalette
operator|::
name|ColorGroup
name|colorGroup
parameter_list|,
name|DomColorGroup
modifier|*
name|group
parameter_list|)
block|{
comment|// old format
specifier|const
name|QList
argument_list|<
name|DomColor
modifier|*
argument_list|>
name|colors
init|=
name|group
operator|->
name|elementColor
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|role
init|=
literal|0
init|;
name|role
operator|<
name|colors
operator|.
name|size
argument_list|()
condition|;
operator|++
name|role
control|)
block|{
specifier|const
name|DomColor
modifier|*
name|color
init|=
name|colors
operator|.
name|at
argument_list|(
name|role
argument_list|)
decl_stmt|;
specifier|const
name|QColor
name|c
argument_list|(
name|color
operator|->
name|elementRed
argument_list|()
argument_list|,
name|color
operator|->
name|elementGreen
argument_list|()
argument_list|,
name|color
operator|->
name|elementBlue
argument_list|()
argument_list|)
decl_stmt|;
name|palette
operator|.
name|setColor
argument_list|(
name|colorGroup
argument_list|,
name|QPalette
operator|::
name|ColorRole
argument_list|(
name|role
argument_list|)
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
comment|// new format
specifier|const
name|QMetaEnum
name|colorRole_enum
init|=
name|metaEnum
argument_list|<
name|QAbstractFormBuilderGadget
argument_list|>
argument_list|(
literal|"colorRole"
argument_list|)
decl_stmt|;
specifier|const
name|QList
argument_list|<
name|DomColorRole
modifier|*
argument_list|>
name|colorRoles
init|=
name|group
operator|->
name|elementColorRole
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|role
init|=
literal|0
init|;
name|role
operator|<
name|colorRoles
operator|.
name|size
argument_list|()
condition|;
operator|++
name|role
control|)
block|{
specifier|const
name|DomColorRole
modifier|*
name|colorRole
init|=
name|colorRoles
operator|.
name|at
argument_list|(
name|role
argument_list|)
decl_stmt|;
if|if
condition|(
name|colorRole
operator|->
name|hasAttributeRole
argument_list|()
condition|)
block|{
specifier|const
name|int
name|r
init|=
name|colorRole_enum
operator|.
name|keyToValue
argument_list|(
name|colorRole
operator|->
name|attributeRole
argument_list|()
operator|.
name|toLatin1
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|r
operator|!=
operator|-
literal|1
condition|)
block|{
specifier|const
name|QBrush
name|br
init|=
name|setupBrush
argument_list|(
name|colorRole
operator|->
name|elementBrush
argument_list|()
argument_list|)
decl_stmt|;
name|palette
operator|.
name|setBrush
argument_list|(
name|colorGroup
argument_list|,
cast|static_cast
argument_list|<
name|QPalette
operator|::
name|ColorRole
argument_list|>
argument_list|(
name|r
argument_list|)
argument_list|,
name|br
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|saveColorGroup
name|DomColorGroup
modifier|*
name|QAbstractFormBuilder
operator|::
name|saveColorGroup
parameter_list|(
specifier|const
name|QPalette
modifier|&
name|palette
parameter_list|)
block|{
specifier|const
name|QMetaEnum
name|colorRole_enum
init|=
name|metaEnum
argument_list|<
name|QAbstractFormBuilderGadget
argument_list|>
argument_list|(
literal|"colorRole"
argument_list|)
decl_stmt|;
name|DomColorGroup
modifier|*
name|group
init|=
operator|new
name|DomColorGroup
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|DomColorRole
modifier|*
argument_list|>
name|colorRoles
decl_stmt|;
specifier|const
name|uint
name|mask
init|=
name|palette
operator|.
name|resolve
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|role
init|=
name|QPalette
operator|::
name|WindowText
init|;
name|role
operator|<
name|QPalette
operator|::
name|NColorRoles
condition|;
operator|++
name|role
control|)
block|{
if|if
condition|(
name|mask
operator|&
operator|(
literal|1
operator|<<
name|role
operator|)
condition|)
block|{
name|QBrush
name|br
init|=
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|ColorRole
argument_list|(
name|role
argument_list|)
argument_list|)
decl_stmt|;
name|DomColorRole
modifier|*
name|colorRole
init|=
operator|new
name|DomColorRole
argument_list|()
decl_stmt|;
name|colorRole
operator|->
name|setElementBrush
argument_list|(
name|saveBrush
argument_list|(
name|br
argument_list|)
argument_list|)
expr_stmt|;
name|colorRole
operator|->
name|setAttributeRole
argument_list|(
name|QLatin1String
argument_list|(
name|colorRole_enum
operator|.
name|valueToKey
argument_list|(
name|role
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|colorRoles
operator|.
name|append
argument_list|(
name|colorRole
argument_list|)
expr_stmt|;
block|}
block|}
name|group
operator|->
name|setElementColorRole
argument_list|(
name|colorRoles
argument_list|)
expr_stmt|;
return|return
name|group
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|setupBrush
name|QBrush
name|QAbstractFormBuilder
operator|::
name|setupBrush
parameter_list|(
name|DomBrush
modifier|*
name|brush
parameter_list|)
block|{
name|QBrush
name|br
decl_stmt|;
if|if
condition|(
operator|!
name|brush
operator|->
name|hasAttributeBrushStyle
argument_list|()
condition|)
return|return
name|br
return|;
specifier|const
name|Qt
operator|::
name|BrushStyle
name|style
init|=
name|enumKeyOfObjectToValue
argument_list|<
name|QAbstractFormBuilderGadget
argument_list|,
name|Qt
operator|::
name|BrushStyle
argument_list|>
argument_list|(
literal|"brushStyle"
argument_list|,
name|brush
operator|->
name|attributeBrushStyle
argument_list|()
operator|.
name|toLatin1
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|style
operator|==
name|Qt
operator|::
name|LinearGradientPattern
operator|||
name|style
operator|==
name|Qt
operator|::
name|RadialGradientPattern
operator|||
name|style
operator|==
name|Qt
operator|::
name|ConicalGradientPattern
condition|)
block|{
specifier|const
name|QMetaEnum
name|gradientType_enum
init|=
name|metaEnum
argument_list|<
name|QAbstractFormBuilderGadget
argument_list|>
argument_list|(
literal|"gradientType"
argument_list|)
decl_stmt|;
specifier|const
name|QMetaEnum
name|gradientSpread_enum
init|=
name|metaEnum
argument_list|<
name|QAbstractFormBuilderGadget
argument_list|>
argument_list|(
literal|"gradientSpread"
argument_list|)
decl_stmt|;
specifier|const
name|QMetaEnum
name|gradientCoordinate_enum
init|=
name|metaEnum
argument_list|<
name|QAbstractFormBuilderGadget
argument_list|>
argument_list|(
literal|"gradientCoordinate"
argument_list|)
decl_stmt|;
specifier|const
name|DomGradient
modifier|*
name|gradient
init|=
name|brush
operator|->
name|elementGradient
argument_list|()
decl_stmt|;
specifier|const
name|QGradient
operator|::
name|Type
name|type
init|=
name|enumKeyToValue
argument_list|<
name|QGradient
operator|::
name|Type
argument_list|>
argument_list|(
name|gradientType_enum
argument_list|,
name|gradient
operator|->
name|attributeType
argument_list|()
operator|.
name|toLatin1
argument_list|()
argument_list|)
decl_stmt|;
name|QGradient
modifier|*
name|gr
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|QGradient
operator|::
name|LinearGradient
condition|)
block|{
name|gr
operator|=
operator|new
name|QLinearGradient
argument_list|(
name|QPointF
argument_list|(
name|gradient
operator|->
name|attributeStartX
argument_list|()
argument_list|,
name|gradient
operator|->
name|attributeStartY
argument_list|()
argument_list|)
argument_list|,
name|QPointF
argument_list|(
name|gradient
operator|->
name|attributeEndX
argument_list|()
argument_list|,
name|gradient
operator|->
name|attributeEndY
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|QGradient
operator|::
name|RadialGradient
condition|)
block|{
name|gr
operator|=
operator|new
name|QRadialGradient
argument_list|(
name|QPointF
argument_list|(
name|gradient
operator|->
name|attributeCentralX
argument_list|()
argument_list|,
name|gradient
operator|->
name|attributeCentralY
argument_list|()
argument_list|)
argument_list|,
name|gradient
operator|->
name|attributeRadius
argument_list|()
argument_list|,
name|QPointF
argument_list|(
name|gradient
operator|->
name|attributeFocalX
argument_list|()
argument_list|,
name|gradient
operator|->
name|attributeFocalY
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|QGradient
operator|::
name|ConicalGradient
condition|)
block|{
name|gr
operator|=
operator|new
name|QConicalGradient
argument_list|(
name|QPointF
argument_list|(
name|gradient
operator|->
name|attributeCentralX
argument_list|()
argument_list|,
name|gradient
operator|->
name|attributeCentralY
argument_list|()
argument_list|)
argument_list|,
name|gradient
operator|->
name|attributeAngle
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|gr
condition|)
return|return
name|br
return|;
specifier|const
name|QGradient
operator|::
name|Spread
name|spread
init|=
name|enumKeyToValue
argument_list|<
name|QGradient
operator|::
name|Spread
argument_list|>
argument_list|(
name|gradientSpread_enum
argument_list|,
name|gradient
operator|->
name|attributeSpread
argument_list|()
operator|.
name|toLatin1
argument_list|()
argument_list|)
decl_stmt|;
name|gr
operator|->
name|setSpread
argument_list|(
name|spread
argument_list|)
expr_stmt|;
specifier|const
name|QGradient
operator|::
name|CoordinateMode
name|coord
init|=
name|enumKeyToValue
argument_list|<
name|QGradient
operator|::
name|CoordinateMode
argument_list|>
argument_list|(
name|gradientCoordinate_enum
argument_list|,
name|gradient
operator|->
name|attributeCoordinateMode
argument_list|()
operator|.
name|toLatin1
argument_list|()
argument_list|)
decl_stmt|;
name|gr
operator|->
name|setCoordinateMode
argument_list|(
name|coord
argument_list|)
expr_stmt|;
specifier|const
name|QList
argument_list|<
name|DomGradientStop
modifier|*
argument_list|>
name|stops
init|=
name|gradient
operator|->
name|elementGradientStop
argument_list|()
decl_stmt|;
name|QListIterator
argument_list|<
name|DomGradientStop
modifier|*
argument_list|>
name|it
argument_list|(
name|stops
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|const
name|DomGradientStop
modifier|*
name|stop
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|const
name|DomColor
modifier|*
name|color
init|=
name|stop
operator|->
name|elementColor
argument_list|()
decl_stmt|;
name|gr
operator|->
name|setColorAt
argument_list|(
name|stop
operator|->
name|attributePosition
argument_list|()
argument_list|,
name|QColor
operator|::
name|fromRgb
argument_list|(
name|color
operator|->
name|elementRed
argument_list|()
argument_list|,
name|color
operator|->
name|elementGreen
argument_list|()
argument_list|,
name|color
operator|->
name|elementBlue
argument_list|()
argument_list|,
name|color
operator|->
name|attributeAlpha
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|br
operator|=
name|QBrush
argument_list|(
operator|*
name|gr
argument_list|)
expr_stmt|;
operator|delete
name|gr
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|style
operator|==
name|Qt
operator|::
name|TexturePattern
condition|)
block|{
specifier|const
name|DomProperty
modifier|*
name|texture
init|=
name|brush
operator|->
name|elementTexture
argument_list|()
decl_stmt|;
if|if
condition|(
name|texture
operator|&&
name|texture
operator|->
name|kind
argument_list|()
operator|==
name|DomProperty
operator|::
name|Pixmap
condition|)
block|{
name|br
operator|.
name|setTexture
argument_list|(
name|domPropertyToPixmap
argument_list|(
name|texture
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
specifier|const
name|DomColor
modifier|*
name|color
init|=
name|brush
operator|->
name|elementColor
argument_list|()
decl_stmt|;
name|br
operator|.
name|setColor
argument_list|(
name|QColor
operator|::
name|fromRgb
argument_list|(
name|color
operator|->
name|elementRed
argument_list|()
argument_list|,
name|color
operator|->
name|elementGreen
argument_list|()
argument_list|,
name|color
operator|->
name|elementBlue
argument_list|()
argument_list|,
name|color
operator|->
name|attributeAlpha
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|br
operator|.
name|setStyle
argument_list|(
operator|(
name|Qt
operator|::
name|BrushStyle
operator|)
name|style
argument_list|)
expr_stmt|;
block|}
return|return
name|br
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|saveBrush
name|DomBrush
modifier|*
name|QAbstractFormBuilder
operator|::
name|saveBrush
parameter_list|(
specifier|const
name|QBrush
modifier|&
name|br
parameter_list|)
block|{
specifier|const
name|QMetaEnum
name|brushStyle_enum
init|=
name|metaEnum
argument_list|<
name|QAbstractFormBuilderGadget
argument_list|>
argument_list|(
literal|"brushStyle"
argument_list|)
decl_stmt|;
name|DomBrush
modifier|*
name|brush
init|=
operator|new
name|DomBrush
argument_list|()
decl_stmt|;
specifier|const
name|Qt
operator|::
name|BrushStyle
name|style
init|=
name|br
operator|.
name|style
argument_list|()
decl_stmt|;
name|brush
operator|->
name|setAttributeBrushStyle
argument_list|(
name|QLatin1String
argument_list|(
name|brushStyle_enum
operator|.
name|valueToKey
argument_list|(
name|style
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|style
operator|==
name|Qt
operator|::
name|LinearGradientPattern
operator|||
name|style
operator|==
name|Qt
operator|::
name|RadialGradientPattern
operator|||
name|style
operator|==
name|Qt
operator|::
name|ConicalGradientPattern
condition|)
block|{
specifier|const
name|QMetaEnum
name|gradientType_enum
init|=
name|metaEnum
argument_list|<
name|QAbstractFormBuilderGadget
argument_list|>
argument_list|(
literal|"gradientType"
argument_list|)
decl_stmt|;
specifier|const
name|QMetaEnum
name|gradientSpread_enum
init|=
name|metaEnum
argument_list|<
name|QAbstractFormBuilderGadget
argument_list|>
argument_list|(
literal|"gradientSpread"
argument_list|)
decl_stmt|;
specifier|const
name|QMetaEnum
name|gradientCoordinate_enum
init|=
name|metaEnum
argument_list|<
name|QAbstractFormBuilderGadget
argument_list|>
argument_list|(
literal|"gradientCoordinate"
argument_list|)
decl_stmt|;
name|DomGradient
modifier|*
name|gradient
init|=
operator|new
name|DomGradient
argument_list|()
decl_stmt|;
specifier|const
name|QGradient
modifier|*
name|gr
init|=
name|br
operator|.
name|gradient
argument_list|()
decl_stmt|;
specifier|const
name|QGradient
operator|::
name|Type
name|type
init|=
name|gr
operator|->
name|type
argument_list|()
decl_stmt|;
name|gradient
operator|->
name|setAttributeType
argument_list|(
name|QLatin1String
argument_list|(
name|gradientType_enum
operator|.
name|valueToKey
argument_list|(
name|type
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|gradient
operator|->
name|setAttributeSpread
argument_list|(
name|QLatin1String
argument_list|(
name|gradientSpread_enum
operator|.
name|valueToKey
argument_list|(
name|gr
operator|->
name|spread
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|gradient
operator|->
name|setAttributeCoordinateMode
argument_list|(
name|QLatin1String
argument_list|(
name|gradientCoordinate_enum
operator|.
name|valueToKey
argument_list|(
name|gr
operator|->
name|coordinateMode
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|DomGradientStop
modifier|*
argument_list|>
name|stops
decl_stmt|;
name|QGradientStops
name|st
init|=
name|gr
operator|->
name|stops
argument_list|()
decl_stmt|;
name|QVectorIterator
argument_list|<
name|QPair
argument_list|<
name|qreal
argument_list|,
name|QColor
argument_list|>
argument_list|>
name|it
argument_list|(
name|st
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|const
name|QPair
argument_list|<
name|qreal
argument_list|,
name|QColor
argument_list|>
name|pair
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
name|DomGradientStop
modifier|*
name|stop
init|=
operator|new
name|DomGradientStop
argument_list|()
decl_stmt|;
name|stop
operator|->
name|setAttributePosition
argument_list|(
name|pair
operator|.
name|first
argument_list|)
expr_stmt|;
name|DomColor
modifier|*
name|color
init|=
operator|new
name|DomColor
argument_list|()
decl_stmt|;
name|color
operator|->
name|setElementRed
argument_list|(
name|pair
operator|.
name|second
operator|.
name|red
argument_list|()
argument_list|)
expr_stmt|;
name|color
operator|->
name|setElementGreen
argument_list|(
name|pair
operator|.
name|second
operator|.
name|green
argument_list|()
argument_list|)
expr_stmt|;
name|color
operator|->
name|setElementBlue
argument_list|(
name|pair
operator|.
name|second
operator|.
name|blue
argument_list|()
argument_list|)
expr_stmt|;
name|color
operator|->
name|setAttributeAlpha
argument_list|(
name|pair
operator|.
name|second
operator|.
name|alpha
argument_list|()
argument_list|)
expr_stmt|;
name|stop
operator|->
name|setElementColor
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|stops
operator|.
name|append
argument_list|(
name|stop
argument_list|)
expr_stmt|;
block|}
name|gradient
operator|->
name|setElementGradientStop
argument_list|(
name|stops
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|==
name|QGradient
operator|::
name|LinearGradient
condition|)
block|{
name|QLinearGradient
modifier|*
name|lgr
init|=
operator|(
name|QLinearGradient
operator|*
operator|)
operator|(
name|gr
operator|)
decl_stmt|;
name|gradient
operator|->
name|setAttributeStartX
argument_list|(
name|lgr
operator|->
name|start
argument_list|()
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|gradient
operator|->
name|setAttributeStartY
argument_list|(
name|lgr
operator|->
name|start
argument_list|()
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|gradient
operator|->
name|setAttributeEndX
argument_list|(
name|lgr
operator|->
name|finalStop
argument_list|()
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|gradient
operator|->
name|setAttributeEndY
argument_list|(
name|lgr
operator|->
name|finalStop
argument_list|()
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|QGradient
operator|::
name|RadialGradient
condition|)
block|{
name|QRadialGradient
modifier|*
name|rgr
init|=
operator|(
name|QRadialGradient
operator|*
operator|)
operator|(
name|gr
operator|)
decl_stmt|;
name|gradient
operator|->
name|setAttributeCentralX
argument_list|(
name|rgr
operator|->
name|center
argument_list|()
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|gradient
operator|->
name|setAttributeCentralY
argument_list|(
name|rgr
operator|->
name|center
argument_list|()
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|gradient
operator|->
name|setAttributeFocalX
argument_list|(
name|rgr
operator|->
name|focalPoint
argument_list|()
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|gradient
operator|->
name|setAttributeFocalY
argument_list|(
name|rgr
operator|->
name|focalPoint
argument_list|()
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|gradient
operator|->
name|setAttributeRadius
argument_list|(
name|rgr
operator|->
name|radius
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|type
operator|==
name|QGradient
operator|::
name|ConicalGradient
condition|)
block|{
name|QConicalGradient
modifier|*
name|cgr
init|=
operator|(
name|QConicalGradient
operator|*
operator|)
operator|(
name|gr
operator|)
decl_stmt|;
name|gradient
operator|->
name|setAttributeCentralX
argument_list|(
name|cgr
operator|->
name|center
argument_list|()
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|gradient
operator|->
name|setAttributeCentralY
argument_list|(
name|cgr
operator|->
name|center
argument_list|()
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|gradient
operator|->
name|setAttributeAngle
argument_list|(
name|cgr
operator|->
name|angle
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|brush
operator|->
name|setElementGradient
argument_list|(
name|gradient
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|style
operator|==
name|Qt
operator|::
name|TexturePattern
condition|)
block|{
specifier|const
name|QPixmap
name|pixmap
init|=
name|br
operator|.
name|texture
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|pixmap
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|DomProperty
modifier|*
name|p
init|=
operator|new
name|DomProperty
decl_stmt|;
name|setPixmapProperty
argument_list|(
operator|*
name|p
argument_list|,
name|pixmapPaths
argument_list|(
name|pixmap
argument_list|)
argument_list|)
expr_stmt|;
name|brush
operator|->
name|setElementTexture
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QColor
name|c
init|=
name|br
operator|.
name|color
argument_list|()
decl_stmt|;
name|DomColor
modifier|*
name|color
init|=
operator|new
name|DomColor
argument_list|()
decl_stmt|;
name|color
operator|->
name|setElementRed
argument_list|(
name|c
operator|.
name|red
argument_list|()
argument_list|)
expr_stmt|;
name|color
operator|->
name|setElementGreen
argument_list|(
name|c
operator|.
name|green
argument_list|()
argument_list|)
expr_stmt|;
name|color
operator|->
name|setElementBlue
argument_list|(
name|c
operator|.
name|blue
argument_list|()
argument_list|)
expr_stmt|;
name|color
operator|->
name|setAttributeAlpha
argument_list|(
name|c
operator|.
name|alpha
argument_list|()
argument_list|)
expr_stmt|;
name|brush
operator|->
name|setElementColor
argument_list|(
name|color
argument_list|)
expr_stmt|;
block|}
return|return
name|brush
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|createWidget
name|QWidget
modifier|*
name|QAbstractFormBuilder
operator|::
name|createWidget
parameter_list|(
specifier|const
name|QString
modifier|&
name|widgetName
parameter_list|,
name|QWidget
modifier|*
name|parentWidget
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|widgetName
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|parentWidget
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|createLayout
name|QLayout
modifier|*
name|QAbstractFormBuilder
operator|::
name|createLayout
parameter_list|(
specifier|const
name|QString
modifier|&
name|layoutName
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|layoutName
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|createAction
name|QAction
modifier|*
name|QAbstractFormBuilder
operator|::
name|createAction
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
name|QAction
modifier|*
name|action
init|=
operator|new
name|QAction
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|action
operator|->
name|setObjectName
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|action
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|createActionGroup
name|QActionGroup
modifier|*
name|QAbstractFormBuilder
operator|::
name|createActionGroup
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
name|QActionGroup
modifier|*
name|g
init|=
operator|new
name|QActionGroup
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|g
operator|->
name|setObjectName
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|g
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QAbstractFormBuilder::save(QIODevice *device, QWidget *widget)      Saves an XML representation of the given \a widget to the     specified \a device in the standard UI file format.      \sa load()*/
end_comment
begin_function
DECL|function|save
name|void
name|QAbstractFormBuilder
operator|::
name|save
parameter_list|(
name|QIODevice
modifier|*
name|dev
parameter_list|,
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|DomWidget
modifier|*
name|ui_widget
init|=
name|createDom
argument_list|(
name|widget
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|ui_widget
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|DomUI
modifier|*
name|ui
init|=
operator|new
name|DomUI
argument_list|()
decl_stmt|;
name|ui
operator|->
name|setAttributeVersion
argument_list|(
name|QLatin1String
argument_list|(
literal|"4.0"
argument_list|)
argument_list|)
expr_stmt|;
name|ui
operator|->
name|setElementWidget
argument_list|(
name|ui_widget
argument_list|)
expr_stmt|;
name|saveDom
argument_list|(
name|ui
argument_list|,
name|widget
argument_list|)
expr_stmt|;
name|QXmlStreamWriter
name|writer
argument_list|(
name|dev
argument_list|)
decl_stmt|;
name|writer
operator|.
name|setAutoFormatting
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|writer
operator|.
name|setAutoFormattingIndent
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeStartDocument
argument_list|()
expr_stmt|;
name|ui
operator|->
name|write
argument_list|(
name|writer
argument_list|)
expr_stmt|;
name|writer
operator|.
name|writeEndDocument
argument_list|()
expr_stmt|;
name|d
operator|->
name|m_laidout
operator|.
name|clear
argument_list|()
expr_stmt|;
operator|delete
name|ui
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|saveDom
name|void
name|QAbstractFormBuilder
operator|::
name|saveDom
parameter_list|(
name|DomUI
modifier|*
name|ui
parameter_list|,
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|ui
operator|->
name|setElementClass
argument_list|(
name|widget
operator|->
name|objectName
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|DomConnections
modifier|*
name|ui_connections
init|=
name|saveConnections
argument_list|()
condition|)
block|{
name|ui
operator|->
name|setElementConnections
argument_list|(
name|ui_connections
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|DomCustomWidgets
modifier|*
name|ui_customWidgets
init|=
name|saveCustomWidgets
argument_list|()
condition|)
block|{
name|ui
operator|->
name|setElementCustomWidgets
argument_list|(
name|ui_customWidgets
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|DomTabStops
modifier|*
name|ui_tabStops
init|=
name|saveTabStops
argument_list|()
condition|)
block|{
name|ui
operator|->
name|setElementTabStops
argument_list|(
name|ui_tabStops
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|DomResources
modifier|*
name|ui_resources
init|=
name|saveResources
argument_list|()
condition|)
block|{
name|ui
operator|->
name|setElementResources
argument_list|(
name|ui_resources
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|DomButtonGroups
modifier|*
name|ui_buttonGroups
init|=
name|saveButtonGroups
argument_list|(
name|widget
argument_list|)
condition|)
name|ui
operator|->
name|setElementButtonGroups
argument_list|(
name|ui_buttonGroups
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|saveConnections
name|DomConnections
modifier|*
name|QAbstractFormBuilder
operator|::
name|saveConnections
parameter_list|()
block|{
return|return
operator|new
name|DomConnections
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|createDom
name|DomWidget
modifier|*
name|QAbstractFormBuilder
operator|::
name|createDom
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|DomWidget
modifier|*
name|ui_parentWidget
parameter_list|,
name|bool
name|recursive
parameter_list|)
block|{
name|DomWidget
modifier|*
name|ui_widget
init|=
operator|new
name|DomWidget
argument_list|()
decl_stmt|;
name|ui_widget
operator|->
name|setAttributeClass
argument_list|(
name|QLatin1String
argument_list|(
name|widget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ui_widget
operator|->
name|setElementProperty
argument_list|(
name|computeProperties
argument_list|(
name|widget
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|recursive
condition|)
block|{
if|if
condition|(
name|QLayout
modifier|*
name|layout
init|=
name|widget
operator|->
name|layout
argument_list|()
condition|)
block|{
if|if
condition|(
name|DomLayout
modifier|*
name|ui_layout
init|=
name|createDom
argument_list|(
name|layout
argument_list|,
literal|0
argument_list|,
name|ui_parentWidget
argument_list|)
condition|)
block|{
name|QList
argument_list|<
name|DomLayout
modifier|*
argument_list|>
name|ui_layouts
decl_stmt|;
name|ui_layouts
operator|.
name|append
argument_list|(
name|ui_layout
argument_list|)
expr_stmt|;
name|ui_widget
operator|->
name|setElementLayout
argument_list|(
name|ui_layouts
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// widgets, actions and action groups
name|QList
argument_list|<
name|DomWidget
modifier|*
argument_list|>
name|ui_widgets
decl_stmt|;
name|QList
argument_list|<
name|DomAction
modifier|*
argument_list|>
name|ui_actions
decl_stmt|;
name|QList
argument_list|<
name|DomActionGroup
modifier|*
argument_list|>
name|ui_action_groups
decl_stmt|;
name|QList
argument_list|<
name|QObject
modifier|*
argument_list|>
name|children
decl_stmt|;
comment|// splitters need to store their children in the order specified by child indexes,
comment|// not the order of the child list.
ifndef|#
directive|ifndef
name|QT_NO_SPLITTER
if|if
condition|(
specifier|const
name|QSplitter
modifier|*
name|splitter
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QSplitter
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
specifier|const
name|int
name|count
init|=
name|splitter
operator|->
name|count
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
name|children
operator|.
name|append
argument_list|(
name|splitter
operator|->
name|widget
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
endif|#
directive|endif
block|{
name|QList
argument_list|<
name|QObject
modifier|*
argument_list|>
name|childObjects
init|=
name|widget
operator|->
name|children
argument_list|()
decl_stmt|;
specifier|const
name|QList
argument_list|<
name|QWidget
modifier|*
argument_list|>
name|list
init|=
name|qvariant_cast
argument_list|<
name|QWidgetList
argument_list|>
argument_list|(
name|widget
operator|->
name|property
argument_list|(
literal|"_q_widgetOrder"
argument_list|)
argument_list|)
decl_stmt|;
foreach|foreach
control|(
name|QWidget
modifier|*
name|w
decl|,
name|list
control|)
block|{
if|if
condition|(
name|childObjects
operator|.
name|contains
argument_list|(
name|w
argument_list|)
condition|)
block|{
name|children
operator|.
name|append
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|childObjects
operator|.
name|removeAll
argument_list|(
name|w
argument_list|)
expr_stmt|;
block|}
block|}
name|children
operator|+=
name|childObjects
expr_stmt|;
specifier|const
name|QList
argument_list|<
name|QWidget
modifier|*
argument_list|>
name|zOrder
init|=
name|qvariant_cast
argument_list|<
name|QWidgetList
argument_list|>
argument_list|(
name|widget
operator|->
name|property
argument_list|(
literal|"_q_zOrder"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|!=
name|zOrder
condition|)
block|{
name|QStringList
name|zOrderList
decl_stmt|;
name|QListIterator
argument_list|<
name|QWidget
modifier|*
argument_list|>
name|itZOrder
argument_list|(
name|zOrder
argument_list|)
decl_stmt|;
while|while
condition|(
name|itZOrder
operator|.
name|hasNext
argument_list|()
condition|)
name|zOrderList
operator|.
name|append
argument_list|(
name|itZOrder
operator|.
name|next
argument_list|()
operator|->
name|objectName
argument_list|()
argument_list|)
expr_stmt|;
name|ui_widget
operator|->
name|setElementZOrder
argument_list|(
name|zOrderList
argument_list|)
expr_stmt|;
block|}
block|}
foreach|foreach
control|(
name|QObject
modifier|*
name|obj
decl|,
name|children
control|)
block|{
if|if
condition|(
name|QWidget
modifier|*
name|childWidget
init|=
name|qobject_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|obj
argument_list|)
condition|)
block|{
if|if
condition|(
name|d
operator|->
name|m_laidout
operator|.
name|contains
argument_list|(
name|childWidget
argument_list|)
operator|||
name|recursive
operator|==
literal|false
condition|)
continue|continue;
if|if
condition|(
name|QMenu
modifier|*
name|menu
init|=
name|qobject_cast
argument_list|<
name|QMenu
operator|*
argument_list|>
argument_list|(
name|childWidget
argument_list|)
condition|)
block|{
name|QList
argument_list|<
name|QAction
modifier|*
argument_list|>
name|actions
init|=
name|menu
operator|->
name|parentWidget
argument_list|()
operator|->
name|actions
argument_list|()
decl_stmt|;
name|QListIterator
argument_list|<
name|QAction
modifier|*
argument_list|>
name|it
argument_list|(
name|actions
argument_list|)
decl_stmt|;
name|bool
name|found
init|=
literal|false
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
if|if
condition|(
name|it
operator|.
name|next
argument_list|()
operator|->
name|menu
argument_list|()
operator|==
name|menu
condition|)
name|found
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|found
condition|)
continue|continue;
block|}
if|if
condition|(
name|DomWidget
modifier|*
name|ui_child
init|=
name|createDom
argument_list|(
name|childWidget
argument_list|,
name|ui_widget
argument_list|)
condition|)
block|{
name|ui_widgets
operator|.
name|append
argument_list|(
name|ui_child
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|QAction
modifier|*
name|childAction
init|=
name|qobject_cast
argument_list|<
name|QAction
operator|*
argument_list|>
argument_list|(
name|obj
argument_list|)
condition|)
block|{
if|if
condition|(
name|childAction
operator|->
name|actionGroup
argument_list|()
operator|!=
literal|0
condition|)
block|{
comment|// it will be added later.
continue|continue;
block|}
if|if
condition|(
name|DomAction
modifier|*
name|ui_action
init|=
name|createDom
argument_list|(
name|childAction
argument_list|)
condition|)
block|{
name|ui_actions
operator|.
name|append
argument_list|(
name|ui_action
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|QActionGroup
modifier|*
name|childActionGroup
init|=
name|qobject_cast
argument_list|<
name|QActionGroup
operator|*
argument_list|>
argument_list|(
name|obj
argument_list|)
condition|)
block|{
if|if
condition|(
name|DomActionGroup
modifier|*
name|ui_action_group
init|=
name|createDom
argument_list|(
name|childActionGroup
argument_list|)
condition|)
block|{
name|ui_action_groups
operator|.
name|append
argument_list|(
name|ui_action_group
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// add-action
name|QList
argument_list|<
name|DomActionRef
modifier|*
argument_list|>
name|ui_action_refs
decl_stmt|;
foreach|foreach
control|(
name|QAction
modifier|*
name|action
decl|,
name|widget
operator|->
name|actions
argument_list|()
control|)
block|{
if|if
condition|(
name|DomActionRef
modifier|*
name|ui_action_ref
init|=
name|createActionRefDom
argument_list|(
name|action
argument_list|)
condition|)
block|{
name|ui_action_refs
operator|.
name|append
argument_list|(
name|ui_action_ref
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|recursive
condition|)
name|ui_widget
operator|->
name|setElementWidget
argument_list|(
name|ui_widgets
argument_list|)
expr_stmt|;
name|ui_widget
operator|->
name|setElementAction
argument_list|(
name|ui_actions
argument_list|)
expr_stmt|;
name|ui_widget
operator|->
name|setElementActionGroup
argument_list|(
name|ui_action_groups
argument_list|)
expr_stmt|;
name|ui_widget
operator|->
name|setElementAddAction
argument_list|(
name|ui_action_refs
argument_list|)
expr_stmt|;
name|saveExtraInfo
argument_list|(
name|widget
argument_list|,
name|ui_widget
argument_list|,
name|ui_parentWidget
argument_list|)
expr_stmt|;
return|return
name|ui_widget
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|createActionRefDom
name|DomActionRef
modifier|*
name|QAbstractFormBuilder
operator|::
name|createActionRefDom
parameter_list|(
name|QAction
modifier|*
name|action
parameter_list|)
block|{
name|QString
name|name
init|=
name|action
operator|->
name|objectName
argument_list|()
decl_stmt|;
if|if
condition|(
name|action
operator|->
name|menu
argument_list|()
operator|!=
literal|0
condition|)
name|name
operator|=
name|action
operator|->
name|menu
argument_list|()
operator|->
name|objectName
argument_list|()
expr_stmt|;
name|DomActionRef
modifier|*
name|ui_action_ref
init|=
operator|new
name|DomActionRef
argument_list|()
decl_stmt|;
if|if
condition|(
name|action
operator|->
name|isSeparator
argument_list|()
condition|)
name|ui_action_ref
operator|->
name|setAttributeName
argument_list|(
name|QFormBuilderStrings
operator|::
name|instance
argument_list|()
operator|.
name|separator
argument_list|)
expr_stmt|;
else|else
name|ui_action_ref
operator|->
name|setAttributeName
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|ui_action_ref
return|;
block|}
end_function
begin_comment
comment|// Struct to store layout item parameters for saving layout items
end_comment
begin_struct
DECL|struct|FormBuilderSaveLayoutEntry
struct|struct
name|FormBuilderSaveLayoutEntry
block|{
DECL|function|FormBuilderSaveLayoutEntry
specifier|explicit
name|FormBuilderSaveLayoutEntry
parameter_list|(
name|QLayoutItem
modifier|*
name|li
init|=
literal|0
parameter_list|)
member_init_list|:
name|item
argument_list|(
name|li
argument_list|)
member_init_list|,
name|row
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|column
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|rowSpan
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|columnSpan
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|alignment
argument_list|(
literal|0
argument_list|)
block|{}
DECL|member|item
name|QLayoutItem
modifier|*
name|item
decl_stmt|;
DECL|member|row
name|int
name|row
decl_stmt|;
DECL|member|column
name|int
name|column
decl_stmt|;
DECL|member|rowSpan
name|int
name|rowSpan
decl_stmt|;
DECL|member|columnSpan
name|int
name|columnSpan
decl_stmt|;
DECL|member|alignment
name|Qt
operator|::
name|Alignment
name|alignment
decl_stmt|;
block|}
struct|;
end_struct
begin_comment
comment|// Create list from standard box layout
end_comment
begin_function
DECL|function|saveLayoutEntries
specifier|static
name|QList
argument_list|<
name|FormBuilderSaveLayoutEntry
argument_list|>
name|saveLayoutEntries
parameter_list|(
specifier|const
name|QLayout
modifier|*
name|layout
parameter_list|)
block|{
name|QList
argument_list|<
name|FormBuilderSaveLayoutEntry
argument_list|>
name|rc
decl_stmt|;
if|if
condition|(
specifier|const
name|int
name|count
init|=
name|layout
operator|->
name|count
argument_list|()
condition|)
block|{
name|rc
operator|.
name|reserve
argument_list|(
name|count
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|count
condition|;
operator|++
name|idx
control|)
block|{
name|QLayoutItem
modifier|*
name|item
init|=
name|layout
operator|->
name|itemAt
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|FormBuilderSaveLayoutEntry
name|entry
argument_list|(
name|item
argument_list|)
decl_stmt|;
name|entry
operator|.
name|alignment
operator|=
name|item
operator|->
name|alignment
argument_list|()
expr_stmt|;
name|rc
operator|.
name|append
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rc
return|;
block|}
end_function
begin_comment
comment|// Create list from grid layout
end_comment
begin_function
DECL|function|saveGridLayoutEntries
specifier|static
name|QList
argument_list|<
name|FormBuilderSaveLayoutEntry
argument_list|>
name|saveGridLayoutEntries
parameter_list|(
name|QGridLayout
modifier|*
name|gridLayout
parameter_list|)
block|{
name|QList
argument_list|<
name|FormBuilderSaveLayoutEntry
argument_list|>
name|rc
decl_stmt|;
if|if
condition|(
specifier|const
name|int
name|count
init|=
name|gridLayout
operator|->
name|count
argument_list|()
condition|)
block|{
name|rc
operator|.
name|reserve
argument_list|(
name|count
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|count
condition|;
operator|++
name|idx
control|)
block|{
name|QLayoutItem
modifier|*
name|item
init|=
name|gridLayout
operator|->
name|itemAt
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|FormBuilderSaveLayoutEntry
name|entry
argument_list|(
name|item
argument_list|)
decl_stmt|;
name|gridLayout
operator|->
name|getItemPosition
argument_list|(
name|idx
argument_list|,
operator|&
name|entry
operator|.
name|row
argument_list|,
operator|&
name|entry
operator|.
name|column
argument_list|,
operator|&
name|entry
operator|.
name|rowSpan
argument_list|,
operator|&
name|entry
operator|.
name|columnSpan
argument_list|)
expr_stmt|;
name|entry
operator|.
name|alignment
operator|=
name|item
operator|->
name|alignment
argument_list|()
expr_stmt|;
name|rc
operator|.
name|append
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rc
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_FORMLAYOUT
end_ifndef
begin_comment
comment|// Create list from form layout
end_comment
begin_function
DECL|function|saveFormLayoutEntries
specifier|static
name|QList
argument_list|<
name|FormBuilderSaveLayoutEntry
argument_list|>
name|saveFormLayoutEntries
parameter_list|(
specifier|const
name|QFormLayout
modifier|*
name|formLayout
parameter_list|)
block|{
name|QList
argument_list|<
name|FormBuilderSaveLayoutEntry
argument_list|>
name|rc
decl_stmt|;
if|if
condition|(
specifier|const
name|int
name|count
init|=
name|formLayout
operator|->
name|count
argument_list|()
condition|)
block|{
name|rc
operator|.
name|reserve
argument_list|(
name|count
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|idx
init|=
literal|0
init|;
name|idx
operator|<
name|count
condition|;
operator|++
name|idx
control|)
block|{
name|QLayoutItem
modifier|*
name|item
init|=
name|formLayout
operator|->
name|itemAt
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|QFormLayout
operator|::
name|ItemRole
name|role
init|=
name|QFormLayout
operator|::
name|LabelRole
decl_stmt|;
name|FormBuilderSaveLayoutEntry
name|entry
argument_list|(
name|item
argument_list|)
decl_stmt|;
name|formLayout
operator|->
name|getItemPosition
argument_list|(
name|idx
argument_list|,
operator|&
name|entry
operator|.
name|row
argument_list|,
operator|&
name|role
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|role
condition|)
block|{
case|case
name|QFormLayout
operator|::
name|LabelRole
case|:
name|entry
operator|.
name|column
operator|=
literal|0
expr_stmt|;
break|break;
case|case
name|QFormLayout
operator|::
name|FieldRole
case|:
name|entry
operator|.
name|column
operator|=
literal|1
expr_stmt|;
break|break;
case|case
name|QFormLayout
operator|::
name|SpanningRole
case|:
name|entry
operator|.
name|column
operator|=
literal|0
expr_stmt|;
name|entry
operator|.
name|columnSpan
operator|=
literal|2
expr_stmt|;
break|break;
block|}
name|rc
operator|.
name|push_back
argument_list|(
name|entry
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rc
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|createDom
name|DomLayout
modifier|*
name|QAbstractFormBuilder
operator|::
name|createDom
parameter_list|(
name|QLayout
modifier|*
name|layout
parameter_list|,
name|DomLayout
modifier|*
name|ui_layout
parameter_list|,
name|DomWidget
modifier|*
name|ui_parentWidget
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|ui_layout
argument_list|)
name|DomLayout
modifier|*
name|lay
init|=
operator|new
name|DomLayout
argument_list|()
decl_stmt|;
name|lay
operator|->
name|setAttributeClass
argument_list|(
name|QLatin1String
argument_list|(
name|layout
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|objectName
init|=
name|layout
operator|->
name|objectName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|objectName
operator|.
name|isEmpty
argument_list|()
condition|)
name|lay
operator|->
name|setAttributeName
argument_list|(
name|objectName
argument_list|)
expr_stmt|;
name|lay
operator|->
name|setElementProperty
argument_list|(
name|computeProperties
argument_list|(
name|layout
argument_list|)
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|FormBuilderSaveLayoutEntry
argument_list|>
name|newList
decl_stmt|;
if|if
condition|(
name|QGridLayout
modifier|*
name|gridLayout
init|=
name|qobject_cast
argument_list|<
name|QGridLayout
operator|*
argument_list|>
argument_list|(
name|layout
argument_list|)
condition|)
block|{
name|newList
operator|=
name|saveGridLayoutEntries
argument_list|(
name|gridLayout
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_FORMLAYOUT
block|}
elseif|else
if|if
condition|(
specifier|const
name|QFormLayout
modifier|*
name|formLayout
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QFormLayout
operator|*
argument_list|>
argument_list|(
name|layout
argument_list|)
condition|)
block|{
name|newList
operator|=
name|saveFormLayoutEntries
argument_list|(
name|formLayout
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
else|else
block|{
name|newList
operator|=
name|saveLayoutEntries
argument_list|(
name|layout
argument_list|)
expr_stmt|;
block|}
name|QList
argument_list|<
name|DomLayoutItem
modifier|*
argument_list|>
name|ui_items
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|FormBuilderSaveLayoutEntry
modifier|&
name|item
decl|,
name|newList
control|)
block|{
if|if
condition|(
name|DomLayoutItem
modifier|*
name|ui_item
init|=
name|createDom
argument_list|(
name|item
operator|.
name|item
argument_list|,
name|lay
argument_list|,
name|ui_parentWidget
argument_list|)
condition|)
block|{
if|if
condition|(
name|item
operator|.
name|row
operator|>=
literal|0
condition|)
name|ui_item
operator|->
name|setAttributeRow
argument_list|(
name|item
operator|.
name|row
argument_list|)
expr_stmt|;
if|if
condition|(
name|item
operator|.
name|column
operator|>=
literal|0
condition|)
name|ui_item
operator|->
name|setAttributeColumn
argument_list|(
name|item
operator|.
name|column
argument_list|)
expr_stmt|;
if|if
condition|(
name|item
operator|.
name|rowSpan
operator|>
literal|1
condition|)
name|ui_item
operator|->
name|setAttributeRowSpan
argument_list|(
name|item
operator|.
name|rowSpan
argument_list|)
expr_stmt|;
if|if
condition|(
name|item
operator|.
name|columnSpan
operator|>
literal|1
condition|)
name|ui_item
operator|->
name|setAttributeColSpan
argument_list|(
name|item
operator|.
name|columnSpan
argument_list|)
expr_stmt|;
if|if
condition|(
name|item
operator|.
name|alignment
condition|)
name|ui_item
operator|->
name|setAttributeAlignment
argument_list|(
name|alignmentValue
argument_list|(
name|item
operator|.
name|alignment
argument_list|)
argument_list|)
expr_stmt|;
name|ui_items
operator|.
name|append
argument_list|(
name|ui_item
argument_list|)
expr_stmt|;
block|}
block|}
name|lay
operator|->
name|setElementItem
argument_list|(
name|ui_items
argument_list|)
expr_stmt|;
return|return
name|lay
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|createDom
name|DomLayoutItem
modifier|*
name|QAbstractFormBuilder
operator|::
name|createDom
parameter_list|(
name|QLayoutItem
modifier|*
name|item
parameter_list|,
name|DomLayout
modifier|*
name|ui_layout
parameter_list|,
name|DomWidget
modifier|*
name|ui_parentWidget
parameter_list|)
block|{
name|DomLayoutItem
modifier|*
name|ui_item
init|=
operator|new
name|DomLayoutItem
argument_list|()
decl_stmt|;
if|if
condition|(
name|item
operator|->
name|widget
argument_list|()
condition|)
block|{
name|ui_item
operator|->
name|setElementWidget
argument_list|(
name|createDom
argument_list|(
name|item
operator|->
name|widget
argument_list|()
argument_list|,
name|ui_parentWidget
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|m_laidout
operator|.
name|insert
argument_list|(
name|item
operator|->
name|widget
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|item
operator|->
name|layout
argument_list|()
condition|)
block|{
name|ui_item
operator|->
name|setElementLayout
argument_list|(
name|createDom
argument_list|(
name|item
operator|->
name|layout
argument_list|()
argument_list|,
name|ui_layout
argument_list|,
name|ui_parentWidget
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|item
operator|->
name|spacerItem
argument_list|()
condition|)
block|{
name|ui_item
operator|->
name|setElementSpacer
argument_list|(
name|createDom
argument_list|(
name|item
operator|->
name|spacerItem
argument_list|()
argument_list|,
name|ui_layout
argument_list|,
name|ui_parentWidget
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ui_item
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|createDom
name|DomSpacer
modifier|*
name|QAbstractFormBuilder
operator|::
name|createDom
parameter_list|(
name|QSpacerItem
modifier|*
name|spacer
parameter_list|,
name|DomLayout
modifier|*
name|ui_layout
parameter_list|,
name|DomWidget
modifier|*
name|ui_parentWidget
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|ui_layout
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|ui_parentWidget
argument_list|)
expr_stmt|;
name|DomSpacer
modifier|*
name|ui_spacer
init|=
operator|new
name|DomSpacer
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
name|properties
decl_stmt|;
name|DomProperty
modifier|*
name|prop
init|=
literal|0
decl_stmt|;
specifier|const
name|QFormBuilderStrings
modifier|&
name|strings
init|=
name|QFormBuilderStrings
operator|::
name|instance
argument_list|()
decl_stmt|;
comment|// sizeHint property
name|prop
operator|=
operator|new
name|DomProperty
argument_list|()
expr_stmt|;
name|prop
operator|->
name|setAttributeName
argument_list|(
name|strings
operator|.
name|sizeHintProperty
argument_list|)
expr_stmt|;
name|prop
operator|->
name|setElementSize
argument_list|(
operator|new
name|DomSize
argument_list|()
argument_list|)
expr_stmt|;
name|prop
operator|->
name|elementSize
argument_list|()
operator|->
name|setElementWidth
argument_list|(
name|spacer
operator|->
name|sizeHint
argument_list|()
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|prop
operator|->
name|elementSize
argument_list|()
operator|->
name|setElementHeight
argument_list|(
name|spacer
operator|->
name|sizeHint
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|properties
operator|.
name|append
argument_list|(
name|prop
argument_list|)
expr_stmt|;
comment|// orientation property
name|prop
operator|=
operator|new
name|DomProperty
argument_list|()
expr_stmt|;
comment|// ### we don't implemented the case where expandingDirections() is both Vertical and Horizontal
name|prop
operator|->
name|setAttributeName
argument_list|(
name|strings
operator|.
name|orientationProperty
argument_list|)
expr_stmt|;
name|prop
operator|->
name|setElementEnum
argument_list|(
operator|(
name|spacer
operator|->
name|expandingDirections
argument_list|()
operator|&
name|Qt
operator|::
name|Horizontal
operator|)
condition|?
name|strings
operator|.
name|qtHorizontal
else|:
name|strings
operator|.
name|qtVertical
argument_list|)
expr_stmt|;
name|properties
operator|.
name|append
argument_list|(
name|prop
argument_list|)
expr_stmt|;
name|ui_spacer
operator|->
name|setElementProperty
argument_list|(
name|properties
argument_list|)
expr_stmt|;
return|return
name|ui_spacer
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|createProperty
name|DomProperty
modifier|*
name|QAbstractFormBuilder
operator|::
name|createProperty
parameter_list|(
name|QObject
modifier|*
name|obj
parameter_list|,
specifier|const
name|QString
modifier|&
name|pname
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|v
parameter_list|)
block|{
if|if
condition|(
operator|!
name|checkProperty
argument_list|(
name|obj
argument_list|,
name|pname
argument_list|)
condition|)
block|{
return|return
literal|0
return|;
block|}
return|return
name|variantToDomProperty
argument_list|(
name|this
argument_list|,
name|obj
operator|->
name|metaObject
argument_list|()
argument_list|,
name|pname
argument_list|,
name|v
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|computeProperties
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
name|QAbstractFormBuilder
operator|::
name|computeProperties
parameter_list|(
name|QObject
modifier|*
name|obj
parameter_list|)
block|{
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
name|lst
decl_stmt|;
specifier|const
name|QMetaObject
modifier|*
name|meta
init|=
name|obj
operator|->
name|metaObject
argument_list|()
decl_stmt|;
name|QHash
argument_list|<
name|QByteArray
argument_list|,
name|bool
argument_list|>
name|properties
decl_stmt|;
specifier|const
name|int
name|propertyCount
init|=
name|meta
operator|->
name|propertyCount
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|propertyCount
condition|;
operator|++
name|i
control|)
name|properties
operator|.
name|insert
argument_list|(
name|meta
operator|->
name|property
argument_list|(
name|i
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
specifier|const
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|propertyNames
init|=
name|properties
operator|.
name|keys
argument_list|()
decl_stmt|;
specifier|const
name|int
name|propertyNamesCount
init|=
name|propertyNames
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|propertyNamesCount
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QString
name|pname
init|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|propertyNames
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QMetaProperty
name|prop
init|=
name|meta
operator|->
name|property
argument_list|(
name|meta
operator|->
name|indexOfProperty
argument_list|(
name|pname
operator|.
name|toUtf8
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|prop
operator|.
name|isWritable
argument_list|()
operator|||
operator|!
name|checkProperty
argument_list|(
name|obj
argument_list|,
name|QLatin1String
argument_list|(
name|prop
operator|.
name|name
argument_list|()
argument_list|)
argument_list|)
condition|)
continue|continue;
specifier|const
name|QVariant
name|v
init|=
name|prop
operator|.
name|read
argument_list|(
name|obj
argument_list|)
decl_stmt|;
name|DomProperty
modifier|*
name|dom_prop
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Int
condition|)
block|{
name|dom_prop
operator|=
operator|new
name|DomProperty
argument_list|()
expr_stmt|;
if|if
condition|(
name|prop
operator|.
name|isFlagType
argument_list|()
condition|)
name|uiLibWarning
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QAbstractFormBuilder"
argument_list|,
literal|"Flags property are not supported yet."
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|prop
operator|.
name|isEnumType
argument_list|()
condition|)
block|{
name|QString
name|scope
init|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|prop
operator|.
name|enumerator
argument_list|()
operator|.
name|scope
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|scope
operator|.
name|size
argument_list|()
condition|)
name|scope
operator|+=
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"::"
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|e
init|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|prop
operator|.
name|enumerator
argument_list|()
operator|.
name|valueToKey
argument_list|(
name|v
operator|.
name|toInt
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|size
argument_list|()
condition|)
name|dom_prop
operator|->
name|setElementEnum
argument_list|(
name|scope
operator|+
name|e
argument_list|)
expr_stmt|;
block|}
else|else
name|dom_prop
operator|->
name|setElementNumber
argument_list|(
name|v
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
name|dom_prop
operator|->
name|setAttributeName
argument_list|(
name|pname
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dom_prop
operator|=
name|createProperty
argument_list|(
name|obj
argument_list|,
name|pname
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|dom_prop
operator|||
name|dom_prop
operator|->
name|kind
argument_list|()
operator|==
name|DomProperty
operator|::
name|Unknown
condition|)
operator|delete
name|dom_prop
expr_stmt|;
else|else
name|lst
operator|.
name|append
argument_list|(
name|dom_prop
argument_list|)
expr_stmt|;
block|}
return|return
name|lst
return|;
block|}
end_function
begin_comment
comment|/*!    \internal    \typedef QAbstractFormBuilder::DomPropertyHash    \typedef QAbstractFormBuilder::IconPaths */
end_comment
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|propertyMap
name|QAbstractFormBuilder
operator|::
name|DomPropertyHash
name|QAbstractFormBuilder
operator|::
name|propertyMap
parameter_list|(
specifier|const
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
modifier|&
name|properties
parameter_list|)
block|{
name|DomPropertyHash
name|map
decl_stmt|;
foreach|foreach
control|(
name|DomProperty
modifier|*
name|p
decl|,
name|properties
control|)
name|map
operator|.
name|insert
argument_list|(
name|p
operator|->
name|attributeName
argument_list|()
argument_list|,
name|p
argument_list|)
expr_stmt|;
return|return
name|map
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|checkProperty
name|bool
name|QAbstractFormBuilder
operator|::
name|checkProperty
parameter_list|(
name|QObject
modifier|*
name|obj
parameter_list|,
specifier|const
name|QString
modifier|&
name|prop
parameter_list|)
specifier|const
block|{
name|Q_UNUSED
argument_list|(
name|obj
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|prop
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|toString
name|QString
name|QAbstractFormBuilder
operator|::
name|toString
parameter_list|(
specifier|const
name|DomString
modifier|*
name|str
parameter_list|)
block|{
return|return
name|str
condition|?
name|str
operator|->
name|text
argument_list|()
else|:
name|QString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|applyTabStops
name|void
name|QAbstractFormBuilder
operator|::
name|applyTabStops
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|DomTabStops
modifier|*
name|tabStops
parameter_list|)
block|{
if|if
condition|(
operator|!
name|tabStops
condition|)
return|return;
name|QWidget
modifier|*
name|lastWidget
init|=
literal|0
decl_stmt|;
specifier|const
name|QStringList
name|l
init|=
name|tabStops
operator|->
name|elementTabStop
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QString
name|name
init|=
name|l
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QWidget
modifier|*
name|child
init|=
name|widget
operator|->
name|findChild
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|child
condition|)
block|{
name|uiLibWarning
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QAbstractFormBuilder"
argument_list|,
literal|"While applying tab stops: The widget '%1' could not be found."
argument_list|)
operator|.
name|arg
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|i
operator|==
literal|0
condition|)
block|{
name|lastWidget
operator|=
name|widget
operator|->
name|findChild
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|name
argument_list|)
expr_stmt|;
continue|continue;
block|}
elseif|else
if|if
condition|(
operator|!
name|child
operator|||
operator|!
name|lastWidget
condition|)
block|{
continue|continue;
block|}
name|QWidget
operator|::
name|setTabOrder
argument_list|(
name|lastWidget
argument_list|,
name|child
argument_list|)
expr_stmt|;
name|lastWidget
operator|=
name|widget
operator|->
name|findChild
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|saveCustomWidgets
name|DomCustomWidgets
modifier|*
name|QAbstractFormBuilder
operator|::
name|saveCustomWidgets
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|saveTabStops
name|DomTabStops
modifier|*
name|QAbstractFormBuilder
operator|::
name|saveTabStops
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|saveResources
name|DomResources
modifier|*
name|QAbstractFormBuilder
operator|::
name|saveResources
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     \internal     \since 4.5 */
end_comment
begin_function
DECL|function|saveButtonGroups
name|DomButtonGroups
modifier|*
name|QAbstractFormBuilder
operator|::
name|saveButtonGroups
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|mainContainer
parameter_list|)
block|{
comment|// Save fst order buttongroup children of maincontainer
typedef|typedef
name|QList
argument_list|<
name|QButtonGroup
modifier|*
argument_list|>
name|ButtonGroupList
typedef|;
specifier|const
name|QObjectList
name|mchildren
init|=
name|mainContainer
operator|->
name|children
argument_list|()
decl_stmt|;
if|if
condition|(
name|mchildren
operator|.
name|empty
argument_list|()
condition|)
return|return
literal|0
return|;
name|QList
argument_list|<
name|DomButtonGroup
modifier|*
argument_list|>
name|domGroups
decl_stmt|;
specifier|const
name|QObjectList
operator|::
name|const_iterator
name|cend
init|=
name|mchildren
operator|.
name|constEnd
argument_list|()
decl_stmt|;
for|for
control|(
name|QObjectList
operator|::
name|const_iterator
name|it
init|=
name|mchildren
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|cend
condition|;
operator|++
name|it
control|)
if|if
condition|(
name|QButtonGroup
modifier|*
name|bg
init|=
name|qobject_cast
argument_list|<
name|QButtonGroup
operator|*
argument_list|>
argument_list|(
operator|*
name|it
argument_list|)
condition|)
if|if
condition|(
name|DomButtonGroup
modifier|*
name|dg
init|=
name|createDom
argument_list|(
name|bg
argument_list|)
condition|)
name|domGroups
operator|.
name|push_back
argument_list|(
name|dg
argument_list|)
expr_stmt|;
if|if
condition|(
name|domGroups
operator|.
name|empty
argument_list|()
condition|)
return|return
literal|0
return|;
name|DomButtonGroups
modifier|*
name|rc
init|=
operator|new
name|DomButtonGroups
decl_stmt|;
name|rc
operator|->
name|setElementButtonGroup
argument_list|(
name|domGroups
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
end_function
begin_comment
comment|// VC6 would not find templated members, so we use statics and this utter hack.
end_comment
begin_class
DECL|class|FriendlyFB
class|class
name|FriendlyFB
super|:
specifier|public
name|QAbstractFormBuilder
block|{
public|public:
using|using
name|QAbstractFormBuilder
operator|::
name|saveResource
using|;
using|using
name|QAbstractFormBuilder
operator|::
name|saveText
using|;
using|using
name|QAbstractFormBuilder
operator|::
name|resourceBuilder
using|;
using|using
name|QAbstractFormBuilder
operator|::
name|textBuilder
using|;
using|using
name|QAbstractFormBuilder
operator|::
name|toVariant
using|;
block|}
class|;
end_class
begin_function
template|template
parameter_list|<
name|class
name|T
parameter_list|>
DECL|function|storeItemFlags
specifier|static
name|void
name|storeItemFlags
parameter_list|(
specifier|const
name|T
modifier|*
name|item
parameter_list|,
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
modifier|*
name|properties
parameter_list|)
block|{
specifier|static
specifier|const
name|QFormBuilderStrings
modifier|&
name|strings
init|=
name|QFormBuilderStrings
operator|::
name|instance
argument_list|()
decl_stmt|;
specifier|static
specifier|const
name|Qt
operator|::
name|ItemFlags
name|defaultFlags
init|=
name|T
argument_list|()
operator|.
name|flags
argument_list|()
decl_stmt|;
specifier|static
specifier|const
name|QMetaEnum
name|itemFlags_enum
init|=
name|metaEnum
argument_list|<
name|QAbstractFormBuilderGadget
argument_list|>
argument_list|(
literal|"itemFlags"
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|->
name|flags
argument_list|()
operator|!=
name|defaultFlags
condition|)
block|{
name|DomProperty
modifier|*
name|p
init|=
operator|new
name|DomProperty
decl_stmt|;
name|p
operator|->
name|setAttributeName
argument_list|(
name|strings
operator|.
name|flagsAttribute
argument_list|)
expr_stmt|;
name|p
operator|->
name|setElementSet
argument_list|(
name|QString
operator|::
name|fromAscii
argument_list|(
name|itemFlags_enum
operator|.
name|valueToKeys
argument_list|(
name|item
operator|->
name|flags
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|properties
operator|->
name|append
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|Q_CC_RVCT
end_ifndef
begin_comment
comment|// RVCT does not accept static inline functions if one argument is templated type
end_comment
begin_comment
comment|// For this reason all necessary function variants are explicityly written for it.
end_comment
begin_function
template|template
parameter_list|<
name|class
name|T
parameter_list|>
DECL|function|storeItemProps
specifier|static
name|void
name|storeItemProps
parameter_list|(
name|QAbstractFormBuilder
modifier|*
name|abstractFormBuilder
parameter_list|,
specifier|const
name|T
modifier|*
name|item
parameter_list|,
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
modifier|*
name|properties
parameter_list|)
block|{
specifier|static
specifier|const
name|QFormBuilderStrings
modifier|&
name|strings
init|=
name|QFormBuilderStrings
operator|::
name|instance
argument_list|()
decl_stmt|;
name|FriendlyFB
modifier|*
specifier|const
name|formBuilder
init|=
cast|static_cast
argument_list|<
name|FriendlyFB
operator|*
argument_list|>
argument_list|(
name|abstractFormBuilder
argument_list|)
decl_stmt|;
name|DomProperty
modifier|*
name|p
decl_stmt|;
name|QVariant
name|v
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QFormBuilderStrings
operator|::
name|TextRoleNName
modifier|&
name|it
decl|,
name|strings
operator|.
name|itemTextRoles
control|)
if|if
condition|(
operator|(
name|p
operator|=
name|formBuilder
operator|->
name|saveText
argument_list|(
name|it
operator|.
name|second
argument_list|,
name|item
operator|->
name|data
argument_list|(
name|it
operator|.
name|first
operator|.
name|second
argument_list|)
argument_list|)
operator|)
condition|)
name|properties
operator|->
name|append
argument_list|(
name|p
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QFormBuilderStrings
operator|::
name|RoleNName
modifier|&
name|it
decl|,
name|strings
operator|.
name|itemRoles
control|)
if|if
condition|(
operator|(
name|v
operator|=
name|item
operator|->
name|data
argument_list|(
name|it
operator|.
name|first
argument_list|)
operator|)
operator|.
name|isValid
argument_list|()
operator|&&
operator|(
name|p
operator|=
name|variantToDomProperty
argument_list|(
name|abstractFormBuilder
argument_list|,
cast|static_cast
argument_list|<
specifier|const
name|QMetaObject
operator|*
argument_list|>
argument_list|(
operator|&
name|QAbstractFormBuilderGadget
operator|::
name|staticMetaObject
argument_list|)
argument_list|,
name|it
operator|.
name|second
argument_list|,
name|v
argument_list|)
operator|)
condition|)
name|properties
operator|->
name|append
argument_list|(
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|p
operator|=
name|formBuilder
operator|->
name|saveResource
argument_list|(
name|item
operator|->
name|data
argument_list|(
name|Qt
operator|::
name|DecorationPropertyRole
argument_list|)
argument_list|)
operator|)
condition|)
name|properties
operator|->
name|append
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|class
name|T
parameter_list|>
DECL|function|storeItemPropsNFlags
specifier|static
name|void
name|storeItemPropsNFlags
parameter_list|(
name|QAbstractFormBuilder
modifier|*
name|abstractFormBuilder
parameter_list|,
specifier|const
name|T
modifier|*
name|item
parameter_list|,
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
modifier|*
name|properties
parameter_list|)
block|{
name|storeItemProps
argument_list|<
name|T
argument_list|>
argument_list|(
name|abstractFormBuilder
argument_list|,
name|item
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|storeItemFlags
argument_list|<
name|T
argument_list|>
argument_list|(
name|item
argument_list|,
name|properties
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|class
name|T
parameter_list|>
DECL|function|loadItemProps
specifier|static
name|void
name|loadItemProps
parameter_list|(
name|QAbstractFormBuilder
modifier|*
name|abstractFormBuilder
parameter_list|,
name|T
modifier|*
name|item
parameter_list|,
specifier|const
name|QHash
argument_list|<
name|QString
argument_list|,
name|DomProperty
modifier|*
argument_list|>
modifier|&
name|properties
parameter_list|)
block|{
specifier|static
specifier|const
name|QFormBuilderStrings
modifier|&
name|strings
init|=
name|QFormBuilderStrings
operator|::
name|instance
argument_list|()
decl_stmt|;
name|FriendlyFB
modifier|*
specifier|const
name|formBuilder
init|=
cast|static_cast
argument_list|<
name|FriendlyFB
operator|*
argument_list|>
argument_list|(
name|abstractFormBuilder
argument_list|)
decl_stmt|;
name|DomProperty
modifier|*
name|p
decl_stmt|;
name|QVariant
name|v
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QFormBuilderStrings
operator|::
name|TextRoleNName
modifier|&
name|it
decl|,
name|strings
operator|.
name|itemTextRoles
control|)
if|if
condition|(
operator|(
name|p
operator|=
name|properties
operator|.
name|value
argument_list|(
name|it
operator|.
name|second
argument_list|)
operator|)
condition|)
block|{
name|v
operator|=
name|formBuilder
operator|->
name|textBuilder
argument_list|()
operator|->
name|loadText
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|QVariant
name|nativeValue
init|=
name|formBuilder
operator|->
name|textBuilder
argument_list|()
operator|->
name|toNativeValue
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|item
operator|->
name|setData
argument_list|(
name|it
operator|.
name|first
operator|.
name|first
argument_list|,
name|qvariant_cast
argument_list|<
name|QString
argument_list|>
argument_list|(
name|nativeValue
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|->
name|setData
argument_list|(
name|it
operator|.
name|first
operator|.
name|second
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
foreach|foreach
control|(
specifier|const
name|QFormBuilderStrings
operator|::
name|RoleNName
modifier|&
name|it
decl|,
name|strings
operator|.
name|itemRoles
control|)
if|if
condition|(
operator|(
name|p
operator|=
name|properties
operator|.
name|value
argument_list|(
name|it
operator|.
name|second
argument_list|)
operator|)
operator|&&
operator|(
name|v
operator|=
name|formBuilder
operator|->
name|toVariant
argument_list|(
operator|&
name|QAbstractFormBuilderGadget
operator|::
name|staticMetaObject
argument_list|,
name|p
argument_list|)
operator|)
operator|.
name|isValid
argument_list|()
condition|)
name|item
operator|->
name|setData
argument_list|(
name|it
operator|.
name|first
argument_list|,
name|v
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|p
operator|=
name|properties
operator|.
name|value
argument_list|(
name|strings
operator|.
name|iconAttribute
argument_list|)
operator|)
condition|)
block|{
name|v
operator|=
name|formBuilder
operator|->
name|resourceBuilder
argument_list|()
operator|->
name|loadResource
argument_list|(
name|formBuilder
operator|->
name|workingDirectory
argument_list|()
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|QVariant
name|nativeValue
init|=
name|formBuilder
operator|->
name|resourceBuilder
argument_list|()
operator|->
name|toNativeValue
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|item
operator|->
name|setIcon
argument_list|(
name|qvariant_cast
argument_list|<
name|QIcon
argument_list|>
argument_list|(
name|nativeValue
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|->
name|setData
argument_list|(
name|Qt
operator|::
name|DecorationPropertyRole
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
template|template
parameter_list|<
name|class
name|T
parameter_list|>
DECL|function|loadItemPropsNFlags
specifier|static
name|void
name|loadItemPropsNFlags
parameter_list|(
name|QAbstractFormBuilder
modifier|*
name|abstractFormBuilder
parameter_list|,
name|T
modifier|*
name|item
parameter_list|,
specifier|const
name|QHash
argument_list|<
name|QString
argument_list|,
name|DomProperty
modifier|*
argument_list|>
modifier|&
name|properties
parameter_list|)
block|{
specifier|static
specifier|const
name|QFormBuilderStrings
modifier|&
name|strings
init|=
name|QFormBuilderStrings
operator|::
name|instance
argument_list|()
decl_stmt|;
specifier|static
specifier|const
name|QMetaEnum
name|itemFlags_enum
init|=
name|metaEnum
argument_list|<
name|QAbstractFormBuilderGadget
argument_list|>
argument_list|(
literal|"itemFlags"
argument_list|)
decl_stmt|;
name|loadItemProps
argument_list|<
name|T
argument_list|>
argument_list|(
name|abstractFormBuilder
argument_list|,
name|item
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|DomProperty
modifier|*
name|p
decl_stmt|;
if|if
condition|(
operator|(
name|p
operator|=
name|properties
operator|.
name|value
argument_list|(
name|strings
operator|.
name|flagsAttribute
argument_list|)
operator|)
operator|&&
name|p
operator|->
name|kind
argument_list|()
operator|==
name|DomProperty
operator|::
name|Set
condition|)
name|item
operator|->
name|setFlags
argument_list|(
name|enumKeysToValue
argument_list|<
name|Qt
operator|::
name|ItemFlags
argument_list|>
argument_list|(
name|itemFlags_enum
argument_list|,
name|p
operator|->
name|elementSet
argument_list|()
operator|.
name|toAscii
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_else
else|#
directive|else
end_else
begin_function
DECL|function|storeItemProps
specifier|static
name|void
name|storeItemProps
parameter_list|(
name|QAbstractFormBuilder
modifier|*
name|abstractFormBuilder
parameter_list|,
specifier|const
name|QTableWidgetItem
modifier|*
name|item
parameter_list|,
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
modifier|*
name|properties
parameter_list|)
block|{
specifier|static
specifier|const
name|QFormBuilderStrings
modifier|&
name|strings
init|=
name|QFormBuilderStrings
operator|::
name|instance
argument_list|()
decl_stmt|;
name|FriendlyFB
modifier|*
specifier|const
name|formBuilder
init|=
cast|static_cast
argument_list|<
name|FriendlyFB
operator|*
argument_list|>
argument_list|(
name|abstractFormBuilder
argument_list|)
decl_stmt|;
name|DomProperty
modifier|*
name|p
decl_stmt|;
name|QVariant
name|v
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QFormBuilderStrings
operator|::
name|TextRoleNName
modifier|&
name|it
decl|,
name|strings
operator|.
name|itemTextRoles
control|)
if|if
condition|(
operator|(
name|p
operator|=
name|formBuilder
operator|->
name|saveText
argument_list|(
name|it
operator|.
name|second
argument_list|,
name|item
operator|->
name|data
argument_list|(
name|it
operator|.
name|first
operator|.
name|second
argument_list|)
argument_list|)
operator|)
condition|)
name|properties
operator|->
name|append
argument_list|(
name|p
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QFormBuilderStrings
operator|::
name|RoleNName
modifier|&
name|it
decl|,
name|strings
operator|.
name|itemRoles
control|)
if|if
condition|(
operator|(
name|v
operator|=
name|item
operator|->
name|data
argument_list|(
name|it
operator|.
name|first
argument_list|)
operator|)
operator|.
name|isValid
argument_list|()
operator|&&
operator|(
name|p
operator|=
name|variantToDomProperty
argument_list|(
name|abstractFormBuilder
argument_list|,
cast|static_cast
argument_list|<
specifier|const
name|QMetaObject
operator|*
argument_list|>
argument_list|(
operator|&
name|QAbstractFormBuilderGadget
operator|::
name|staticMetaObject
argument_list|)
argument_list|,
name|it
operator|.
name|second
argument_list|,
name|v
argument_list|)
operator|)
condition|)
name|properties
operator|->
name|append
argument_list|(
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|p
operator|=
name|formBuilder
operator|->
name|saveResource
argument_list|(
name|item
operator|->
name|data
argument_list|(
name|Qt
operator|::
name|DecorationPropertyRole
argument_list|)
argument_list|)
operator|)
condition|)
name|properties
operator|->
name|append
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|storeItemProps
specifier|static
name|void
name|storeItemProps
parameter_list|(
name|QAbstractFormBuilder
modifier|*
name|abstractFormBuilder
parameter_list|,
specifier|const
name|QListWidgetItem
modifier|*
name|item
parameter_list|,
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
modifier|*
name|properties
parameter_list|)
block|{
specifier|static
specifier|const
name|QFormBuilderStrings
modifier|&
name|strings
init|=
name|QFormBuilderStrings
operator|::
name|instance
argument_list|()
decl_stmt|;
name|FriendlyFB
modifier|*
specifier|const
name|formBuilder
init|=
cast|static_cast
argument_list|<
name|FriendlyFB
operator|*
argument_list|>
argument_list|(
name|abstractFormBuilder
argument_list|)
decl_stmt|;
name|DomProperty
modifier|*
name|p
decl_stmt|;
name|QVariant
name|v
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QFormBuilderStrings
operator|::
name|TextRoleNName
modifier|&
name|it
decl|,
name|strings
operator|.
name|itemTextRoles
control|)
if|if
condition|(
operator|(
name|p
operator|=
name|formBuilder
operator|->
name|saveText
argument_list|(
name|it
operator|.
name|second
argument_list|,
name|item
operator|->
name|data
argument_list|(
name|it
operator|.
name|first
operator|.
name|second
argument_list|)
argument_list|)
operator|)
condition|)
name|properties
operator|->
name|append
argument_list|(
name|p
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QFormBuilderStrings
operator|::
name|RoleNName
modifier|&
name|it
decl|,
name|strings
operator|.
name|itemRoles
control|)
if|if
condition|(
operator|(
name|v
operator|=
name|item
operator|->
name|data
argument_list|(
name|it
operator|.
name|first
argument_list|)
operator|)
operator|.
name|isValid
argument_list|()
operator|&&
operator|(
name|p
operator|=
name|variantToDomProperty
argument_list|(
name|abstractFormBuilder
argument_list|,
cast|static_cast
argument_list|<
specifier|const
name|QMetaObject
operator|*
argument_list|>
argument_list|(
operator|&
name|QAbstractFormBuilderGadget
operator|::
name|staticMetaObject
argument_list|)
argument_list|,
name|it
operator|.
name|second
argument_list|,
name|v
argument_list|)
operator|)
condition|)
name|properties
operator|->
name|append
argument_list|(
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|p
operator|=
name|formBuilder
operator|->
name|saveResource
argument_list|(
name|item
operator|->
name|data
argument_list|(
name|Qt
operator|::
name|DecorationPropertyRole
argument_list|)
argument_list|)
operator|)
condition|)
name|properties
operator|->
name|append
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|storeItemPropsNFlags
specifier|static
name|void
name|storeItemPropsNFlags
parameter_list|(
name|QAbstractFormBuilder
modifier|*
name|abstractFormBuilder
parameter_list|,
specifier|const
name|QTableWidgetItem
modifier|*
name|item
parameter_list|,
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
modifier|*
name|properties
parameter_list|)
block|{
name|storeItemProps
argument_list|(
name|abstractFormBuilder
argument_list|,
name|item
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|storeItemFlags
argument_list|(
name|item
argument_list|,
name|properties
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|storeItemPropsNFlags
specifier|static
name|void
name|storeItemPropsNFlags
parameter_list|(
name|QAbstractFormBuilder
modifier|*
name|abstractFormBuilder
parameter_list|,
specifier|const
name|QListWidgetItem
modifier|*
name|item
parameter_list|,
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
modifier|*
name|properties
parameter_list|)
block|{
name|storeItemProps
argument_list|(
name|abstractFormBuilder
argument_list|,
name|item
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|storeItemFlags
argument_list|(
name|item
argument_list|,
name|properties
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|loadItemProps
specifier|static
name|void
name|loadItemProps
parameter_list|(
name|QAbstractFormBuilder
modifier|*
name|abstractFormBuilder
parameter_list|,
name|QTableWidgetItem
modifier|*
name|item
parameter_list|,
specifier|const
name|QHash
argument_list|<
name|QString
argument_list|,
name|DomProperty
modifier|*
argument_list|>
modifier|&
name|properties
parameter_list|)
block|{
specifier|static
specifier|const
name|QFormBuilderStrings
modifier|&
name|strings
init|=
name|QFormBuilderStrings
operator|::
name|instance
argument_list|()
decl_stmt|;
name|FriendlyFB
modifier|*
specifier|const
name|formBuilder
init|=
cast|static_cast
argument_list|<
name|FriendlyFB
operator|*
argument_list|>
argument_list|(
name|abstractFormBuilder
argument_list|)
decl_stmt|;
name|DomProperty
modifier|*
name|p
decl_stmt|;
name|QVariant
name|v
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QFormBuilderStrings
operator|::
name|TextRoleNName
modifier|&
name|it
decl|,
name|strings
operator|.
name|itemTextRoles
control|)
if|if
condition|(
operator|(
name|p
operator|=
name|properties
operator|.
name|value
argument_list|(
name|it
operator|.
name|second
argument_list|)
operator|)
condition|)
block|{
name|v
operator|=
name|formBuilder
operator|->
name|textBuilder
argument_list|()
operator|->
name|loadText
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|QVariant
name|nativeValue
init|=
name|formBuilder
operator|->
name|textBuilder
argument_list|()
operator|->
name|toNativeValue
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|item
operator|->
name|setData
argument_list|(
name|it
operator|.
name|first
operator|.
name|first
argument_list|,
name|qvariant_cast
argument_list|<
name|QString
argument_list|>
argument_list|(
name|nativeValue
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|->
name|setData
argument_list|(
name|it
operator|.
name|first
operator|.
name|second
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
foreach|foreach
control|(
specifier|const
name|QFormBuilderStrings
operator|::
name|RoleNName
modifier|&
name|it
decl|,
name|strings
operator|.
name|itemRoles
control|)
if|if
condition|(
operator|(
name|p
operator|=
name|properties
operator|.
name|value
argument_list|(
name|it
operator|.
name|second
argument_list|)
operator|)
operator|&&
operator|(
name|v
operator|=
name|formBuilder
operator|->
name|toVariant
argument_list|(
operator|&
name|QAbstractFormBuilderGadget
operator|::
name|staticMetaObject
argument_list|,
name|p
argument_list|)
operator|)
operator|.
name|isValid
argument_list|()
condition|)
name|item
operator|->
name|setData
argument_list|(
name|it
operator|.
name|first
argument_list|,
name|v
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|p
operator|=
name|properties
operator|.
name|value
argument_list|(
name|strings
operator|.
name|iconAttribute
argument_list|)
operator|)
condition|)
block|{
name|v
operator|=
name|formBuilder
operator|->
name|resourceBuilder
argument_list|()
operator|->
name|loadResource
argument_list|(
name|formBuilder
operator|->
name|workingDirectory
argument_list|()
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|QVariant
name|nativeValue
init|=
name|formBuilder
operator|->
name|resourceBuilder
argument_list|()
operator|->
name|toNativeValue
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|item
operator|->
name|setIcon
argument_list|(
name|qvariant_cast
argument_list|<
name|QIcon
argument_list|>
argument_list|(
name|nativeValue
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|->
name|setData
argument_list|(
name|Qt
operator|::
name|DecorationPropertyRole
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|loadItemProps
specifier|static
name|void
name|loadItemProps
parameter_list|(
name|QAbstractFormBuilder
modifier|*
name|abstractFormBuilder
parameter_list|,
name|QListWidgetItem
modifier|*
name|item
parameter_list|,
specifier|const
name|QHash
argument_list|<
name|QString
argument_list|,
name|DomProperty
modifier|*
argument_list|>
modifier|&
name|properties
parameter_list|)
block|{
specifier|static
specifier|const
name|QFormBuilderStrings
modifier|&
name|strings
init|=
name|QFormBuilderStrings
operator|::
name|instance
argument_list|()
decl_stmt|;
name|FriendlyFB
modifier|*
specifier|const
name|formBuilder
init|=
cast|static_cast
argument_list|<
name|FriendlyFB
operator|*
argument_list|>
argument_list|(
name|abstractFormBuilder
argument_list|)
decl_stmt|;
name|DomProperty
modifier|*
name|p
decl_stmt|;
name|QVariant
name|v
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QFormBuilderStrings
operator|::
name|TextRoleNName
modifier|&
name|it
decl|,
name|strings
operator|.
name|itemTextRoles
control|)
if|if
condition|(
operator|(
name|p
operator|=
name|properties
operator|.
name|value
argument_list|(
name|it
operator|.
name|second
argument_list|)
operator|)
condition|)
block|{
name|v
operator|=
name|formBuilder
operator|->
name|textBuilder
argument_list|()
operator|->
name|loadText
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|QVariant
name|nativeValue
init|=
name|formBuilder
operator|->
name|textBuilder
argument_list|()
operator|->
name|toNativeValue
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|item
operator|->
name|setData
argument_list|(
name|it
operator|.
name|first
operator|.
name|first
argument_list|,
name|qvariant_cast
argument_list|<
name|QString
argument_list|>
argument_list|(
name|nativeValue
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|->
name|setData
argument_list|(
name|it
operator|.
name|first
operator|.
name|second
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
foreach|foreach
control|(
specifier|const
name|QFormBuilderStrings
operator|::
name|RoleNName
modifier|&
name|it
decl|,
name|strings
operator|.
name|itemRoles
control|)
if|if
condition|(
operator|(
name|p
operator|=
name|properties
operator|.
name|value
argument_list|(
name|it
operator|.
name|second
argument_list|)
operator|)
operator|&&
operator|(
name|v
operator|=
name|formBuilder
operator|->
name|toVariant
argument_list|(
operator|&
name|QAbstractFormBuilderGadget
operator|::
name|staticMetaObject
argument_list|,
name|p
argument_list|)
operator|)
operator|.
name|isValid
argument_list|()
condition|)
name|item
operator|->
name|setData
argument_list|(
name|it
operator|.
name|first
argument_list|,
name|v
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|p
operator|=
name|properties
operator|.
name|value
argument_list|(
name|strings
operator|.
name|iconAttribute
argument_list|)
operator|)
condition|)
block|{
name|v
operator|=
name|formBuilder
operator|->
name|resourceBuilder
argument_list|()
operator|->
name|loadResource
argument_list|(
name|formBuilder
operator|->
name|workingDirectory
argument_list|()
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|QVariant
name|nativeValue
init|=
name|formBuilder
operator|->
name|resourceBuilder
argument_list|()
operator|->
name|toNativeValue
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|item
operator|->
name|setIcon
argument_list|(
name|qvariant_cast
argument_list|<
name|QIcon
argument_list|>
argument_list|(
name|nativeValue
argument_list|)
argument_list|)
expr_stmt|;
name|item
operator|->
name|setData
argument_list|(
name|Qt
operator|::
name|DecorationPropertyRole
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|loadItemPropsNFlags
specifier|static
name|void
name|loadItemPropsNFlags
parameter_list|(
name|QAbstractFormBuilder
modifier|*
name|abstractFormBuilder
parameter_list|,
name|QTableWidgetItem
modifier|*
name|item
parameter_list|,
specifier|const
name|QHash
argument_list|<
name|QString
argument_list|,
name|DomProperty
modifier|*
argument_list|>
modifier|&
name|properties
parameter_list|)
block|{
specifier|static
specifier|const
name|QFormBuilderStrings
modifier|&
name|strings
init|=
name|QFormBuilderStrings
operator|::
name|instance
argument_list|()
decl_stmt|;
specifier|static
specifier|const
name|QMetaEnum
name|itemFlags_enum
init|=
name|metaEnum
argument_list|<
name|QAbstractFormBuilderGadget
argument_list|>
argument_list|(
literal|"itemFlags"
argument_list|)
decl_stmt|;
name|loadItemProps
argument_list|(
name|abstractFormBuilder
argument_list|,
name|item
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|DomProperty
modifier|*
name|p
decl_stmt|;
if|if
condition|(
operator|(
name|p
operator|=
name|properties
operator|.
name|value
argument_list|(
name|strings
operator|.
name|flagsAttribute
argument_list|)
operator|)
operator|&&
name|p
operator|->
name|kind
argument_list|()
operator|==
name|DomProperty
operator|::
name|Set
condition|)
name|item
operator|->
name|setFlags
argument_list|(
name|enumKeysToValue
argument_list|<
name|Qt
operator|::
name|ItemFlags
argument_list|>
argument_list|(
name|itemFlags_enum
argument_list|,
name|p
operator|->
name|elementSet
argument_list|()
operator|.
name|toAscii
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|loadItemPropsNFlags
specifier|static
name|void
name|loadItemPropsNFlags
parameter_list|(
name|QAbstractFormBuilder
modifier|*
name|abstractFormBuilder
parameter_list|,
name|QListWidgetItem
modifier|*
name|item
parameter_list|,
specifier|const
name|QHash
argument_list|<
name|QString
argument_list|,
name|DomProperty
modifier|*
argument_list|>
modifier|&
name|properties
parameter_list|)
block|{
specifier|static
specifier|const
name|QFormBuilderStrings
modifier|&
name|strings
init|=
name|QFormBuilderStrings
operator|::
name|instance
argument_list|()
decl_stmt|;
specifier|static
specifier|const
name|QMetaEnum
name|itemFlags_enum
init|=
name|metaEnum
argument_list|<
name|QAbstractFormBuilderGadget
argument_list|>
argument_list|(
literal|"itemFlags"
argument_list|)
decl_stmt|;
name|loadItemProps
argument_list|(
name|abstractFormBuilder
argument_list|,
name|item
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|DomProperty
modifier|*
name|p
decl_stmt|;
if|if
condition|(
operator|(
name|p
operator|=
name|properties
operator|.
name|value
argument_list|(
name|strings
operator|.
name|flagsAttribute
argument_list|)
operator|)
operator|&&
name|p
operator|->
name|kind
argument_list|()
operator|==
name|DomProperty
operator|::
name|Set
condition|)
name|item
operator|->
name|setFlags
argument_list|(
name|enumKeysToValue
argument_list|<
name|Qt
operator|::
name|ItemFlags
argument_list|>
argument_list|(
name|itemFlags_enum
argument_list|,
name|p
operator|->
name|elementSet
argument_list|()
operator|.
name|toAscii
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|saveTreeWidgetExtraInfo
name|void
name|QAbstractFormBuilder
operator|::
name|saveTreeWidgetExtraInfo
parameter_list|(
name|QTreeWidget
modifier|*
name|treeWidget
parameter_list|,
name|DomWidget
modifier|*
name|ui_widget
parameter_list|,
name|DomWidget
modifier|*
name|ui_parentWidget
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|ui_parentWidget
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|DomColumn
modifier|*
argument_list|>
name|columns
decl_stmt|;
name|DomProperty
modifier|*
name|p
decl_stmt|;
name|QVariant
name|v
decl_stmt|;
specifier|const
name|QFormBuilderStrings
modifier|&
name|strings
init|=
name|QFormBuilderStrings
operator|::
name|instance
argument_list|()
decl_stmt|;
comment|// save the header
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|treeWidget
operator|->
name|columnCount
argument_list|()
condition|;
operator|++
name|c
control|)
block|{
name|DomColumn
modifier|*
name|column
init|=
operator|new
name|DomColumn
decl_stmt|;
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
name|properties
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QFormBuilderStrings
operator|::
name|TextRoleNName
modifier|&
name|it
decl|,
name|strings
operator|.
name|itemTextRoles
control|)
block|{
name|p
operator|=
name|saveText
argument_list|(
name|it
operator|.
name|second
argument_list|,
name|treeWidget
operator|->
name|headerItem
argument_list|()
operator|->
name|data
argument_list|(
name|c
argument_list|,
name|it
operator|.
name|first
operator|.
name|second
argument_list|)
argument_list|)
expr_stmt|;
comment|// Prevent uic 4.4.X from crashing if it cannot find a column text
if|if
condition|(
operator|!
name|p
operator|&&
name|it
operator|.
name|first
operator|.
name|first
operator|==
name|Qt
operator|::
name|EditRole
operator|&&
name|it
operator|.
name|second
operator|==
name|QLatin1String
argument_list|(
literal|"text"
argument_list|)
condition|)
block|{
name|DomString
modifier|*
name|defaultHeader
init|=
operator|new
name|DomString
decl_stmt|;
name|defaultHeader
operator|->
name|setText
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|c
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|defaultHeader
operator|->
name|setAttributeNotr
argument_list|(
name|QLatin1String
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|=
operator|new
name|DomProperty
expr_stmt|;
name|p
operator|->
name|setAttributeName
argument_list|(
name|it
operator|.
name|second
argument_list|)
expr_stmt|;
name|p
operator|->
name|setElementString
argument_list|(
name|defaultHeader
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|p
condition|)
name|properties
operator|.
name|append
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
foreach|foreach
control|(
specifier|const
name|QFormBuilderStrings
operator|::
name|RoleNName
modifier|&
name|it
decl|,
name|strings
operator|.
name|itemRoles
control|)
if|if
condition|(
operator|(
name|v
operator|=
name|treeWidget
operator|->
name|headerItem
argument_list|()
operator|->
name|data
argument_list|(
name|c
argument_list|,
name|it
operator|.
name|first
argument_list|)
operator|)
operator|.
name|isValid
argument_list|()
operator|&&
operator|(
name|p
operator|=
name|variantToDomProperty
argument_list|(
name|this
argument_list|,
operator|&
name|QAbstractFormBuilderGadget
operator|::
name|staticMetaObject
argument_list|,
name|it
operator|.
name|second
argument_list|,
name|v
argument_list|)
operator|)
condition|)
name|properties
operator|.
name|append
argument_list|(
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|p
operator|=
name|saveResource
argument_list|(
name|treeWidget
operator|->
name|headerItem
argument_list|()
operator|->
name|data
argument_list|(
name|c
argument_list|,
name|Qt
operator|::
name|DecorationPropertyRole
argument_list|)
argument_list|)
operator|)
condition|)
name|properties
operator|.
name|append
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|column
operator|->
name|setElementProperty
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|columns
operator|.
name|append
argument_list|(
name|column
argument_list|)
expr_stmt|;
block|}
name|ui_widget
operator|->
name|setElementColumn
argument_list|(
name|columns
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|DomItem
modifier|*
argument_list|>
name|items
init|=
name|ui_widget
operator|->
name|elementItem
argument_list|()
decl_stmt|;
name|QQueue
argument_list|<
name|QPair
argument_list|<
name|QTreeWidgetItem
modifier|*
argument_list|,
name|DomItem
modifier|*
argument_list|>
argument_list|>
name|pendingQueue
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|treeWidget
operator|->
name|topLevelItemCount
argument_list|()
condition|;
name|i
operator|++
control|)
name|pendingQueue
operator|.
name|enqueue
argument_list|(
name|qMakePair
argument_list|(
name|treeWidget
operator|->
name|topLevelItem
argument_list|(
name|i
argument_list|)
argument_list|,
operator|(
name|DomItem
operator|*
operator|)
literal|0
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|pendingQueue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|const
name|QPair
argument_list|<
name|QTreeWidgetItem
modifier|*
argument_list|,
name|DomItem
modifier|*
argument_list|>
name|pair
init|=
name|pendingQueue
operator|.
name|dequeue
argument_list|()
decl_stmt|;
name|QTreeWidgetItem
modifier|*
name|item
init|=
name|pair
operator|.
name|first
decl_stmt|;
name|DomItem
modifier|*
name|parentDomItem
init|=
name|pair
operator|.
name|second
decl_stmt|;
name|DomItem
modifier|*
name|currentDomItem
init|=
operator|new
name|DomItem
decl_stmt|;
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
name|properties
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|treeWidget
operator|->
name|columnCount
argument_list|()
condition|;
name|c
operator|++
control|)
block|{
foreach|foreach
control|(
specifier|const
name|QFormBuilderStrings
operator|::
name|TextRoleNName
modifier|&
name|it
decl|,
name|strings
operator|.
name|itemTextRoles
control|)
if|if
condition|(
operator|(
name|p
operator|=
name|saveText
argument_list|(
name|it
operator|.
name|second
argument_list|,
name|item
operator|->
name|data
argument_list|(
name|c
argument_list|,
name|it
operator|.
name|first
operator|.
name|second
argument_list|)
argument_list|)
operator|)
condition|)
name|properties
operator|.
name|append
argument_list|(
name|p
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QFormBuilderStrings
operator|::
name|RoleNName
modifier|&
name|it
decl|,
name|strings
operator|.
name|itemRoles
control|)
if|if
condition|(
operator|(
name|v
operator|=
name|item
operator|->
name|data
argument_list|(
name|c
argument_list|,
name|it
operator|.
name|first
argument_list|)
operator|)
operator|.
name|isValid
argument_list|()
operator|&&
operator|(
name|p
operator|=
name|variantToDomProperty
argument_list|(
name|this
argument_list|,
operator|&
name|QAbstractFormBuilderGadget
operator|::
name|staticMetaObject
argument_list|,
name|it
operator|.
name|second
argument_list|,
name|v
argument_list|)
operator|)
condition|)
name|properties
operator|.
name|append
argument_list|(
name|p
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|p
operator|=
name|saveResource
argument_list|(
name|item
operator|->
name|data
argument_list|(
name|c
argument_list|,
name|Qt
operator|::
name|DecorationPropertyRole
argument_list|)
argument_list|)
operator|)
condition|)
name|properties
operator|.
name|append
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|storeItemFlags
argument_list|(
name|item
argument_list|,
operator|&
name|properties
argument_list|)
expr_stmt|;
name|currentDomItem
operator|->
name|setElementProperty
argument_list|(
name|properties
argument_list|)
expr_stmt|;
if|if
condition|(
name|parentDomItem
condition|)
block|{
name|QList
argument_list|<
name|DomItem
modifier|*
argument_list|>
name|childrenItems
init|=
name|parentDomItem
operator|->
name|elementItem
argument_list|()
decl_stmt|;
name|childrenItems
operator|.
name|append
argument_list|(
name|currentDomItem
argument_list|)
expr_stmt|;
name|parentDomItem
operator|->
name|setElementItem
argument_list|(
name|childrenItems
argument_list|)
expr_stmt|;
block|}
else|else
name|items
operator|.
name|append
argument_list|(
name|currentDomItem
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|item
operator|->
name|childCount
argument_list|()
condition|;
name|i
operator|++
control|)
name|pendingQueue
operator|.
name|enqueue
argument_list|(
name|qMakePair
argument_list|(
name|item
operator|->
name|child
argument_list|(
name|i
argument_list|)
argument_list|,
name|currentDomItem
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|ui_widget
operator|->
name|setElementItem
argument_list|(
name|items
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|saveTableWidgetExtraInfo
name|void
name|QAbstractFormBuilder
operator|::
name|saveTableWidgetExtraInfo
parameter_list|(
name|QTableWidget
modifier|*
name|tableWidget
parameter_list|,
name|DomWidget
modifier|*
name|ui_widget
parameter_list|,
name|DomWidget
modifier|*
name|ui_parentWidget
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|ui_parentWidget
argument_list|)
expr_stmt|;
comment|// save the horizontal header
name|QList
argument_list|<
name|DomColumn
modifier|*
argument_list|>
name|columns
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|tableWidget
operator|->
name|columnCount
argument_list|()
condition|;
name|c
operator|++
control|)
block|{
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
name|properties
decl_stmt|;
name|QTableWidgetItem
modifier|*
name|item
init|=
name|tableWidget
operator|->
name|horizontalHeaderItem
argument_list|(
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
condition|)
name|storeItemProps
argument_list|(
name|this
argument_list|,
name|item
argument_list|,
operator|&
name|properties
argument_list|)
expr_stmt|;
name|DomColumn
modifier|*
name|column
init|=
operator|new
name|DomColumn
decl_stmt|;
name|column
operator|->
name|setElementProperty
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|columns
operator|.
name|append
argument_list|(
name|column
argument_list|)
expr_stmt|;
block|}
name|ui_widget
operator|->
name|setElementColumn
argument_list|(
name|columns
argument_list|)
expr_stmt|;
comment|// save the vertical header
name|QList
argument_list|<
name|DomRow
modifier|*
argument_list|>
name|rows
decl_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|tableWidget
operator|->
name|rowCount
argument_list|()
condition|;
name|r
operator|++
control|)
block|{
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
name|properties
decl_stmt|;
name|QTableWidgetItem
modifier|*
name|item
init|=
name|tableWidget
operator|->
name|verticalHeaderItem
argument_list|(
name|r
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
condition|)
name|storeItemProps
argument_list|(
name|this
argument_list|,
name|item
argument_list|,
operator|&
name|properties
argument_list|)
expr_stmt|;
name|DomRow
modifier|*
name|row
init|=
operator|new
name|DomRow
decl_stmt|;
name|row
operator|->
name|setElementProperty
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|rows
operator|.
name|append
argument_list|(
name|row
argument_list|)
expr_stmt|;
block|}
name|ui_widget
operator|->
name|setElementRow
argument_list|(
name|rows
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|DomItem
modifier|*
argument_list|>
name|items
init|=
name|ui_widget
operator|->
name|elementItem
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|tableWidget
operator|->
name|rowCount
argument_list|()
condition|;
name|r
operator|++
control|)
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|tableWidget
operator|->
name|columnCount
argument_list|()
condition|;
name|c
operator|++
control|)
block|{
name|QTableWidgetItem
modifier|*
name|item
init|=
name|tableWidget
operator|->
name|item
argument_list|(
name|r
argument_list|,
name|c
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
condition|)
block|{
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
name|properties
decl_stmt|;
name|storeItemPropsNFlags
argument_list|(
name|this
argument_list|,
name|item
argument_list|,
operator|&
name|properties
argument_list|)
expr_stmt|;
name|DomItem
modifier|*
name|domItem
init|=
operator|new
name|DomItem
decl_stmt|;
name|domItem
operator|->
name|setAttributeRow
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|domItem
operator|->
name|setAttributeColumn
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|domItem
operator|->
name|setElementProperty
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|items
operator|.
name|append
argument_list|(
name|domItem
argument_list|)
expr_stmt|;
block|}
block|}
name|ui_widget
operator|->
name|setElementItem
argument_list|(
name|items
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|saveListWidgetExtraInfo
name|void
name|QAbstractFormBuilder
operator|::
name|saveListWidgetExtraInfo
parameter_list|(
name|QListWidget
modifier|*
name|listWidget
parameter_list|,
name|DomWidget
modifier|*
name|ui_widget
parameter_list|,
name|DomWidget
modifier|*
name|ui_parentWidget
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|ui_parentWidget
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|DomItem
modifier|*
argument_list|>
name|ui_items
init|=
name|ui_widget
operator|->
name|elementItem
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|listWidget
operator|->
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
name|properties
decl_stmt|;
name|storeItemPropsNFlags
argument_list|(
name|this
argument_list|,
name|listWidget
operator|->
name|item
argument_list|(
name|i
argument_list|)
argument_list|,
operator|&
name|properties
argument_list|)
expr_stmt|;
name|DomItem
modifier|*
name|ui_item
init|=
operator|new
name|DomItem
argument_list|()
decl_stmt|;
name|ui_item
operator|->
name|setElementProperty
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|ui_items
operator|.
name|append
argument_list|(
name|ui_item
argument_list|)
expr_stmt|;
block|}
name|ui_widget
operator|->
name|setElementItem
argument_list|(
name|ui_items
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|saveComboBoxExtraInfo
name|void
name|QAbstractFormBuilder
operator|::
name|saveComboBoxExtraInfo
parameter_list|(
name|QComboBox
modifier|*
name|comboBox
parameter_list|,
name|DomWidget
modifier|*
name|ui_widget
parameter_list|,
name|DomWidget
modifier|*
name|ui_parentWidget
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|ui_parentWidget
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|DomItem
modifier|*
argument_list|>
name|ui_items
init|=
name|ui_widget
operator|->
name|elementItem
argument_list|()
decl_stmt|;
specifier|const
name|int
name|count
init|=
name|comboBox
operator|->
name|count
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
comment|// We might encounter items for which both builders return 0 in Designer
comment|// (indicating a custom combo adding items in the constructor). Ignore those.
name|DomProperty
modifier|*
name|textProperty
init|=
name|saveText
argument_list|(
name|QFormBuilderStrings
operator|::
name|instance
argument_list|()
operator|.
name|textAttribute
argument_list|,
name|comboBox
operator|->
name|itemData
argument_list|(
name|i
argument_list|,
name|Qt
operator|::
name|DisplayPropertyRole
argument_list|)
argument_list|)
decl_stmt|;
name|DomProperty
modifier|*
name|iconProperty
init|=
name|saveResource
argument_list|(
name|comboBox
operator|->
name|itemData
argument_list|(
name|i
argument_list|,
name|Qt
operator|::
name|DecorationPropertyRole
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|textProperty
operator|||
name|iconProperty
condition|)
block|{
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
name|properties
decl_stmt|;
if|if
condition|(
name|textProperty
condition|)
name|properties
operator|.
name|push_back
argument_list|(
name|textProperty
argument_list|)
expr_stmt|;
if|if
condition|(
name|iconProperty
condition|)
name|properties
operator|.
name|push_back
argument_list|(
name|iconProperty
argument_list|)
expr_stmt|;
name|DomItem
modifier|*
name|ui_item
init|=
operator|new
name|DomItem
argument_list|()
decl_stmt|;
name|ui_item
operator|->
name|setElementProperty
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|ui_items
operator|.
name|push_back
argument_list|(
name|ui_item
argument_list|)
expr_stmt|;
block|}
block|}
name|ui_widget
operator|->
name|setElementItem
argument_list|(
name|ui_items
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal     \since 4.5 */
end_comment
begin_function
DECL|function|saveButtonExtraInfo
name|void
name|QAbstractFormBuilder
operator|::
name|saveButtonExtraInfo
parameter_list|(
specifier|const
name|QAbstractButton
modifier|*
name|widget
parameter_list|,
name|DomWidget
modifier|*
name|ui_widget
parameter_list|,
name|DomWidget
modifier|*
parameter_list|)
block|{
typedef|typedef
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
name|DomPropertyList
typedef|;
if|if
condition|(
specifier|const
name|QButtonGroup
modifier|*
name|buttonGroup
init|=
name|widget
operator|->
name|group
argument_list|()
condition|)
block|{
name|DomPropertyList
name|attributes
init|=
name|ui_widget
operator|->
name|elementAttribute
argument_list|()
decl_stmt|;
name|DomString
modifier|*
name|domString
init|=
operator|new
name|DomString
argument_list|()
decl_stmt|;
name|domString
operator|->
name|setText
argument_list|(
name|buttonGroup
operator|->
name|objectName
argument_list|()
argument_list|)
expr_stmt|;
name|domString
operator|->
name|setAttributeNotr
argument_list|(
name|QLatin1String
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|DomProperty
modifier|*
name|domProperty
init|=
operator|new
name|DomProperty
argument_list|()
decl_stmt|;
name|domProperty
operator|->
name|setAttributeName
argument_list|(
name|QLatin1String
argument_list|(
name|buttonGroupPropertyC
argument_list|)
argument_list|)
expr_stmt|;
name|domProperty
operator|->
name|setElementString
argument_list|(
name|domString
argument_list|)
expr_stmt|;
name|attributes
operator|+=
name|domProperty
expr_stmt|;
name|ui_widget
operator|->
name|setElementAttribute
argument_list|(
name|attributes
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \internal     \since 4.5 */
end_comment
begin_function
DECL|function|saveItemViewExtraInfo
name|void
name|QAbstractFormBuilder
operator|::
name|saveItemViewExtraInfo
parameter_list|(
specifier|const
name|QAbstractItemView
modifier|*
name|itemView
parameter_list|,
name|DomWidget
modifier|*
name|ui_widget
parameter_list|,
name|DomWidget
modifier|*
parameter_list|)
block|{
comment|//
comment|// Special handling for qtableview/qtreeview fake header attributes
comment|//
specifier|static
name|QStringList
name|realPropertyNames
init|=
operator|(
name|QStringList
argument_list|()
operator|<<
name|QLatin1String
argument_list|(
literal|"visible"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"cascadingSectionResizes"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"defaultSectionSize"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"highlightSections"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"minimumSectionSize"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"showSortIndicator"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"stretchLastSection"
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
specifier|const
name|QTreeView
modifier|*
name|treeView
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QTreeView
operator|*
argument_list|>
argument_list|(
name|itemView
argument_list|)
condition|)
block|{
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
name|viewProperties
init|=
name|ui_widget
operator|->
name|elementAttribute
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
name|headerProperties
init|=
name|computeProperties
argument_list|(
name|treeView
operator|->
name|header
argument_list|()
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|realPropertyName
decl|,
name|realPropertyNames
control|)
block|{
specifier|const
name|QString
name|upperPropertyName
init|=
name|realPropertyName
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toUpper
argument_list|()
operator|+
name|realPropertyName
operator|.
name|mid
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|fakePropertyName
init|=
name|QLatin1String
argument_list|(
literal|"header"
argument_list|)
operator|+
name|upperPropertyName
decl_stmt|;
foreach|foreach
control|(
name|DomProperty
modifier|*
name|property
decl|,
name|headerProperties
control|)
block|{
if|if
condition|(
name|property
operator|->
name|attributeName
argument_list|()
operator|==
name|realPropertyName
condition|)
block|{
name|property
operator|->
name|setAttributeName
argument_list|(
name|fakePropertyName
argument_list|)
expr_stmt|;
name|viewProperties
operator|<<
name|property
expr_stmt|;
block|}
block|}
block|}
name|ui_widget
operator|->
name|setElementAttribute
argument_list|(
name|viewProperties
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
specifier|const
name|QTableView
modifier|*
name|tableView
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QTableView
operator|*
argument_list|>
argument_list|(
name|itemView
argument_list|)
condition|)
block|{
specifier|static
name|QStringList
name|headerPrefixes
init|=
operator|(
name|QStringList
argument_list|()
operator|<<
name|QLatin1String
argument_list|(
literal|"horizontalHeader"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"verticalHeader"
argument_list|)
operator|)
decl_stmt|;
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
name|viewProperties
init|=
name|ui_widget
operator|->
name|elementAttribute
argument_list|()
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|headerPrefix
decl|,
name|headerPrefixes
control|)
block|{
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
name|headerProperties
decl_stmt|;
if|if
condition|(
name|headerPrefix
operator|==
name|QLatin1String
argument_list|(
literal|"horizontalHeader"
argument_list|)
condition|)
name|headerProperties
operator|=
name|computeProperties
argument_list|(
name|tableView
operator|->
name|horizontalHeader
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|headerProperties
operator|=
name|computeProperties
argument_list|(
name|tableView
operator|->
name|verticalHeader
argument_list|()
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|realPropertyName
decl|,
name|realPropertyNames
control|)
block|{
specifier|const
name|QString
name|upperPropertyName
init|=
name|realPropertyName
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toUpper
argument_list|()
operator|+
name|realPropertyName
operator|.
name|mid
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|fakePropertyName
init|=
name|headerPrefix
operator|+
name|upperPropertyName
decl_stmt|;
foreach|foreach
control|(
name|DomProperty
modifier|*
name|property
decl|,
name|headerProperties
control|)
block|{
if|if
condition|(
name|property
operator|->
name|attributeName
argument_list|()
operator|==
name|realPropertyName
condition|)
block|{
name|property
operator|->
name|setAttributeName
argument_list|(
name|fakePropertyName
argument_list|)
expr_stmt|;
name|viewProperties
operator|<<
name|property
expr_stmt|;
block|}
block|}
block|}
block|}
name|ui_widget
operator|->
name|setElementAttribute
argument_list|(
name|viewProperties
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \internal     \since 4.4 */
end_comment
begin_function
DECL|function|setResourceBuilder
name|void
name|QAbstractFormBuilder
operator|::
name|setResourceBuilder
parameter_list|(
name|QResourceBuilder
modifier|*
name|builder
parameter_list|)
block|{
name|d
operator|->
name|setResourceBuilder
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal     \since 4.4 */
end_comment
begin_function
DECL|function|resourceBuilder
name|QResourceBuilder
modifier|*
name|QAbstractFormBuilder
operator|::
name|resourceBuilder
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|resourceBuilder
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \internal     \since 4.5 */
end_comment
begin_function
DECL|function|setTextBuilder
name|void
name|QAbstractFormBuilder
operator|::
name|setTextBuilder
parameter_list|(
name|QTextBuilder
modifier|*
name|builder
parameter_list|)
block|{
name|d
operator|->
name|setTextBuilder
argument_list|(
name|builder
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal     \since 4.5 */
end_comment
begin_function
DECL|function|textBuilder
name|QTextBuilder
modifier|*
name|QAbstractFormBuilder
operator|::
name|textBuilder
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|textBuilder
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|saveExtraInfo
name|void
name|QAbstractFormBuilder
operator|::
name|saveExtraInfo
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|DomWidget
modifier|*
name|ui_widget
parameter_list|,
name|DomWidget
modifier|*
name|ui_parentWidget
parameter_list|)
block|{
if|if
condition|(
name|QListWidget
modifier|*
name|listWidget
init|=
name|qobject_cast
argument_list|<
name|QListWidget
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|saveListWidgetExtraInfo
argument_list|(
name|listWidget
argument_list|,
name|ui_widget
argument_list|,
name|ui_parentWidget
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|QTreeWidget
modifier|*
name|treeWidget
init|=
name|qobject_cast
argument_list|<
name|QTreeWidget
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|saveTreeWidgetExtraInfo
argument_list|(
name|treeWidget
argument_list|,
name|ui_widget
argument_list|,
name|ui_parentWidget
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|QTableWidget
modifier|*
name|tableWidget
init|=
name|qobject_cast
argument_list|<
name|QTableWidget
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|saveTableWidgetExtraInfo
argument_list|(
name|tableWidget
argument_list|,
name|ui_widget
argument_list|,
name|ui_parentWidget
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|QComboBox
modifier|*
name|comboBox
init|=
name|qobject_cast
argument_list|<
name|QComboBox
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|qobject_cast
argument_list|<
name|QFontComboBox
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
name|saveComboBoxExtraInfo
argument_list|(
name|comboBox
argument_list|,
name|ui_widget
argument_list|,
name|ui_parentWidget
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|QAbstractButton
modifier|*
name|ab
init|=
name|qobject_cast
argument_list|<
name|QAbstractButton
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|saveButtonExtraInfo
argument_list|(
name|ab
argument_list|,
name|ui_widget
argument_list|,
name|ui_parentWidget
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|QAbstractItemView
modifier|*
name|itemView
init|=
name|qobject_cast
argument_list|<
name|QAbstractItemView
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|saveItemViewExtraInfo
argument_list|(
name|itemView
argument_list|,
name|ui_widget
argument_list|,
name|ui_parentWidget
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|loadListWidgetExtraInfo
name|void
name|QAbstractFormBuilder
operator|::
name|loadListWidgetExtraInfo
parameter_list|(
name|DomWidget
modifier|*
name|ui_widget
parameter_list|,
name|QListWidget
modifier|*
name|listWidget
parameter_list|,
name|QWidget
modifier|*
name|parentWidget
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|parentWidget
argument_list|)
expr_stmt|;
specifier|const
name|QFormBuilderStrings
modifier|&
name|strings
init|=
name|QFormBuilderStrings
operator|::
name|instance
argument_list|()
decl_stmt|;
specifier|const
name|QMetaEnum
name|itemFlags_enum
init|=
name|metaEnum
argument_list|<
name|QAbstractFormBuilderGadget
argument_list|>
argument_list|(
literal|"itemFlags"
argument_list|)
decl_stmt|;
foreach|foreach
control|(
name|DomItem
modifier|*
name|ui_item
decl|,
name|ui_widget
operator|->
name|elementItem
argument_list|()
control|)
block|{
specifier|const
name|DomPropertyHash
name|properties
init|=
name|propertyMap
argument_list|(
name|ui_item
operator|->
name|elementProperty
argument_list|()
argument_list|)
decl_stmt|;
name|QListWidgetItem
modifier|*
name|item
init|=
operator|new
name|QListWidgetItem
argument_list|(
name|listWidget
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|Q_CC_RVCT
name|loadItemPropsNFlags
argument_list|<
name|QListWidgetItem
argument_list|>
argument_list|(
name|this
argument_list|,
name|item
argument_list|,
name|properties
argument_list|)
expr_stmt|;
else|#
directive|else
name|loadItemPropsNFlags
argument_list|(
name|this
argument_list|,
name|item
argument_list|,
name|properties
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
name|DomProperty
modifier|*
name|currentRow
init|=
name|propertyMap
argument_list|(
name|ui_widget
operator|->
name|elementProperty
argument_list|()
argument_list|)
operator|.
name|value
argument_list|(
name|strings
operator|.
name|currentRowProperty
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentRow
condition|)
name|listWidget
operator|->
name|setCurrentRow
argument_list|(
name|currentRow
operator|->
name|elementNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|loadTreeWidgetExtraInfo
name|void
name|QAbstractFormBuilder
operator|::
name|loadTreeWidgetExtraInfo
parameter_list|(
name|DomWidget
modifier|*
name|ui_widget
parameter_list|,
name|QTreeWidget
modifier|*
name|treeWidget
parameter_list|,
name|QWidget
modifier|*
name|parentWidget
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|parentWidget
argument_list|)
expr_stmt|;
specifier|const
name|QFormBuilderStrings
modifier|&
name|strings
init|=
name|QFormBuilderStrings
operator|::
name|instance
argument_list|()
decl_stmt|;
specifier|const
name|QMetaEnum
name|itemFlags_enum
init|=
name|metaEnum
argument_list|<
name|QAbstractFormBuilderGadget
argument_list|>
argument_list|(
literal|"itemFlags"
argument_list|)
decl_stmt|;
specifier|const
name|QList
argument_list|<
name|DomColumn
modifier|*
argument_list|>
name|columns
init|=
name|ui_widget
operator|->
name|elementColumn
argument_list|()
decl_stmt|;
if|if
condition|(
name|columns
operator|.
name|count
argument_list|()
operator|>
literal|0
condition|)
name|treeWidget
operator|->
name|setColumnCount
argument_list|(
name|columns
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|DomColumn
modifier|*
name|c
init|=
name|columns
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|DomPropertyHash
name|properties
init|=
name|propertyMap
argument_list|(
name|c
operator|->
name|elementProperty
argument_list|()
argument_list|)
decl_stmt|;
name|DomProperty
modifier|*
name|p
decl_stmt|;
name|QVariant
name|v
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QFormBuilderStrings
operator|::
name|RoleNName
modifier|&
name|it
decl|,
name|strings
operator|.
name|itemRoles
control|)
if|if
condition|(
operator|(
name|p
operator|=
name|properties
operator|.
name|value
argument_list|(
name|it
operator|.
name|second
argument_list|)
operator|)
operator|&&
operator|(
name|v
operator|=
name|toVariant
argument_list|(
operator|&
name|QAbstractFormBuilderGadget
operator|::
name|staticMetaObject
argument_list|,
name|p
argument_list|)
operator|)
operator|.
name|isValid
argument_list|()
condition|)
name|treeWidget
operator|->
name|headerItem
argument_list|()
operator|->
name|setData
argument_list|(
name|i
argument_list|,
name|it
operator|.
name|first
argument_list|,
name|v
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QFormBuilderStrings
operator|::
name|TextRoleNName
modifier|&
name|it
decl|,
name|strings
operator|.
name|itemTextRoles
control|)
if|if
condition|(
operator|(
name|p
operator|=
name|properties
operator|.
name|value
argument_list|(
name|it
operator|.
name|second
argument_list|)
operator|)
condition|)
block|{
name|v
operator|=
name|textBuilder
argument_list|()
operator|->
name|loadText
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|QVariant
name|nativeValue
init|=
name|textBuilder
argument_list|()
operator|->
name|toNativeValue
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|treeWidget
operator|->
name|headerItem
argument_list|()
operator|->
name|setData
argument_list|(
name|i
argument_list|,
name|it
operator|.
name|first
operator|.
name|first
argument_list|,
name|qvariant_cast
argument_list|<
name|QString
argument_list|>
argument_list|(
name|nativeValue
argument_list|)
argument_list|)
expr_stmt|;
name|treeWidget
operator|->
name|headerItem
argument_list|()
operator|->
name|setData
argument_list|(
name|i
argument_list|,
name|it
operator|.
name|first
operator|.
name|second
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|p
operator|=
name|properties
operator|.
name|value
argument_list|(
name|strings
operator|.
name|iconAttribute
argument_list|)
operator|)
condition|)
block|{
name|v
operator|=
name|resourceBuilder
argument_list|()
operator|->
name|loadResource
argument_list|(
name|workingDirectory
argument_list|()
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|QVariant
name|nativeValue
init|=
name|resourceBuilder
argument_list|()
operator|->
name|toNativeValue
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|treeWidget
operator|->
name|headerItem
argument_list|()
operator|->
name|setIcon
argument_list|(
name|i
argument_list|,
name|qvariant_cast
argument_list|<
name|QIcon
argument_list|>
argument_list|(
name|nativeValue
argument_list|)
argument_list|)
expr_stmt|;
name|treeWidget
operator|->
name|headerItem
argument_list|()
operator|->
name|setData
argument_list|(
name|i
argument_list|,
name|Qt
operator|::
name|DecorationPropertyRole
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
name|QQueue
argument_list|<
name|QPair
argument_list|<
name|DomItem
modifier|*
argument_list|,
name|QTreeWidgetItem
modifier|*
argument_list|>
argument_list|>
name|pendingQueue
decl_stmt|;
foreach|foreach
control|(
name|DomItem
modifier|*
name|ui_item
decl|,
name|ui_widget
operator|->
name|elementItem
argument_list|()
control|)
name|pendingQueue
operator|.
name|enqueue
argument_list|(
name|qMakePair
argument_list|(
name|ui_item
argument_list|,
operator|(
name|QTreeWidgetItem
operator|*
operator|)
literal|0
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|pendingQueue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|const
name|QPair
argument_list|<
name|DomItem
modifier|*
argument_list|,
name|QTreeWidgetItem
modifier|*
argument_list|>
name|pair
init|=
name|pendingQueue
operator|.
name|dequeue
argument_list|()
decl_stmt|;
specifier|const
name|DomItem
modifier|*
name|domItem
init|=
name|pair
operator|.
name|first
decl_stmt|;
name|QTreeWidgetItem
modifier|*
name|parentItem
init|=
name|pair
operator|.
name|second
decl_stmt|;
name|QTreeWidgetItem
modifier|*
name|currentItem
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|parentItem
condition|)
name|currentItem
operator|=
operator|new
name|QTreeWidgetItem
argument_list|(
name|parentItem
argument_list|)
expr_stmt|;
else|else
name|currentItem
operator|=
operator|new
name|QTreeWidgetItem
argument_list|(
name|treeWidget
argument_list|)
expr_stmt|;
specifier|const
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
name|properties
init|=
name|domItem
operator|->
name|elementProperty
argument_list|()
decl_stmt|;
name|int
name|col
init|=
operator|-
literal|1
decl_stmt|;
foreach|foreach
control|(
name|DomProperty
modifier|*
name|property
decl|,
name|properties
control|)
block|{
if|if
condition|(
name|property
operator|->
name|attributeName
argument_list|()
operator|==
name|strings
operator|.
name|flagsAttribute
operator|&&
operator|!
name|property
operator|->
name|elementSet
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|currentItem
operator|->
name|setFlags
argument_list|(
name|enumKeysToValue
argument_list|<
name|Qt
operator|::
name|ItemFlags
argument_list|>
argument_list|(
name|itemFlags_enum
argument_list|,
name|property
operator|->
name|elementSet
argument_list|()
operator|.
name|toAscii
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|property
operator|->
name|attributeName
argument_list|()
operator|==
name|strings
operator|.
name|textAttribute
operator|&&
name|property
operator|->
name|elementString
argument_list|()
condition|)
block|{
name|col
operator|++
expr_stmt|;
name|QVariant
name|textV
init|=
name|textBuilder
argument_list|()
operator|->
name|loadText
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|QVariant
name|nativeValue
init|=
name|textBuilder
argument_list|()
operator|->
name|toNativeValue
argument_list|(
name|textV
argument_list|)
decl_stmt|;
name|currentItem
operator|->
name|setText
argument_list|(
name|col
argument_list|,
name|qvariant_cast
argument_list|<
name|QString
argument_list|>
argument_list|(
name|nativeValue
argument_list|)
argument_list|)
expr_stmt|;
name|currentItem
operator|->
name|setData
argument_list|(
name|col
argument_list|,
name|Qt
operator|::
name|DisplayPropertyRole
argument_list|,
name|textV
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|col
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|property
operator|->
name|attributeName
argument_list|()
operator|==
name|strings
operator|.
name|iconAttribute
condition|)
block|{
name|QVariant
name|v
init|=
name|resourceBuilder
argument_list|()
operator|->
name|loadResource
argument_list|(
name|workingDirectory
argument_list|()
argument_list|,
name|property
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QVariant
name|nativeValue
init|=
name|resourceBuilder
argument_list|()
operator|->
name|toNativeValue
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|currentItem
operator|->
name|setIcon
argument_list|(
name|col
argument_list|,
name|qvariant_cast
argument_list|<
name|QIcon
argument_list|>
argument_list|(
name|nativeValue
argument_list|)
argument_list|)
expr_stmt|;
name|currentItem
operator|->
name|setData
argument_list|(
name|col
argument_list|,
name|Qt
operator|::
name|DecorationPropertyRole
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QVariant
name|v
decl_stmt|;
name|int
name|role
init|=
name|strings
operator|.
name|treeItemRoleHash
operator|.
name|value
argument_list|(
name|property
operator|->
name|attributeName
argument_list|()
argument_list|,
operator|(
name|Qt
operator|::
name|ItemDataRole
operator|)
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|role
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
operator|(
name|v
operator|=
name|toVariant
argument_list|(
operator|&
name|QAbstractFormBuilderGadget
operator|::
name|staticMetaObject
argument_list|,
name|property
argument_list|)
operator|)
operator|.
name|isValid
argument_list|()
condition|)
name|currentItem
operator|->
name|setData
argument_list|(
name|col
argument_list|,
name|role
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QPair
argument_list|<
name|Qt
operator|::
name|ItemDataRole
argument_list|,
name|Qt
operator|::
name|ItemDataRole
argument_list|>
name|rolePair
init|=
name|strings
operator|.
name|treeItemTextRoleHash
operator|.
name|value
argument_list|(
name|property
operator|->
name|attributeName
argument_list|()
argument_list|,
name|qMakePair
argument_list|(
operator|(
name|Qt
operator|::
name|ItemDataRole
operator|)
operator|-
literal|1
argument_list|,
operator|(
name|Qt
operator|::
name|ItemDataRole
operator|)
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|rolePair
operator|.
name|first
operator|>=
literal|0
condition|)
block|{
name|QVariant
name|textV
init|=
name|textBuilder
argument_list|()
operator|->
name|loadText
argument_list|(
name|property
argument_list|)
decl_stmt|;
name|QVariant
name|nativeValue
init|=
name|textBuilder
argument_list|()
operator|->
name|toNativeValue
argument_list|(
name|textV
argument_list|)
decl_stmt|;
name|currentItem
operator|->
name|setData
argument_list|(
name|col
argument_list|,
name|rolePair
operator|.
name|first
argument_list|,
name|qvariant_cast
argument_list|<
name|QString
argument_list|>
argument_list|(
name|nativeValue
argument_list|)
argument_list|)
expr_stmt|;
name|currentItem
operator|->
name|setData
argument_list|(
name|col
argument_list|,
name|rolePair
operator|.
name|second
argument_list|,
name|textV
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
foreach|foreach
control|(
name|DomItem
modifier|*
name|childItem
decl|,
name|domItem
operator|->
name|elementItem
argument_list|()
control|)
name|pendingQueue
operator|.
name|enqueue
argument_list|(
name|qMakePair
argument_list|(
name|childItem
argument_list|,
name|currentItem
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|loadTableWidgetExtraInfo
name|void
name|QAbstractFormBuilder
operator|::
name|loadTableWidgetExtraInfo
parameter_list|(
name|DomWidget
modifier|*
name|ui_widget
parameter_list|,
name|QTableWidget
modifier|*
name|tableWidget
parameter_list|,
name|QWidget
modifier|*
name|parentWidget
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|parentWidget
argument_list|)
expr_stmt|;
specifier|const
name|QList
argument_list|<
name|DomColumn
modifier|*
argument_list|>
name|columns
init|=
name|ui_widget
operator|->
name|elementColumn
argument_list|()
decl_stmt|;
if|if
condition|(
name|columns
operator|.
name|count
argument_list|()
operator|>
literal|0
condition|)
name|tableWidget
operator|->
name|setColumnCount
argument_list|(
name|columns
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|columns
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|DomColumn
modifier|*
name|c
init|=
name|columns
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|DomPropertyHash
name|properties
init|=
name|propertyMap
argument_list|(
name|c
operator|->
name|elementProperty
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|properties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QTableWidgetItem
modifier|*
name|item
init|=
operator|new
name|QTableWidgetItem
decl_stmt|;
name|loadItemProps
argument_list|(
name|this
argument_list|,
name|item
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|tableWidget
operator|->
name|setHorizontalHeaderItem
argument_list|(
name|i
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
block|}
specifier|const
name|QList
argument_list|<
name|DomRow
modifier|*
argument_list|>
name|rows
init|=
name|ui_widget
operator|->
name|elementRow
argument_list|()
decl_stmt|;
if|if
condition|(
name|rows
operator|.
name|count
argument_list|()
operator|>
literal|0
condition|)
name|tableWidget
operator|->
name|setRowCount
argument_list|(
name|rows
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rows
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|DomRow
modifier|*
name|r
init|=
name|rows
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|DomPropertyHash
name|properties
init|=
name|propertyMap
argument_list|(
name|r
operator|->
name|elementProperty
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|properties
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QTableWidgetItem
modifier|*
name|item
init|=
operator|new
name|QTableWidgetItem
decl_stmt|;
name|loadItemProps
argument_list|(
name|this
argument_list|,
name|item
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|tableWidget
operator|->
name|setVerticalHeaderItem
argument_list|(
name|i
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
block|}
foreach|foreach
control|(
name|DomItem
modifier|*
name|ui_item
decl|,
name|ui_widget
operator|->
name|elementItem
argument_list|()
control|)
block|{
if|if
condition|(
name|ui_item
operator|->
name|hasAttributeRow
argument_list|()
operator|&&
name|ui_item
operator|->
name|hasAttributeColumn
argument_list|()
condition|)
block|{
specifier|const
name|DomPropertyHash
name|properties
init|=
name|propertyMap
argument_list|(
name|ui_item
operator|->
name|elementProperty
argument_list|()
argument_list|)
decl_stmt|;
name|QTableWidgetItem
modifier|*
name|item
init|=
operator|new
name|QTableWidgetItem
decl_stmt|;
name|loadItemPropsNFlags
argument_list|(
name|this
argument_list|,
name|item
argument_list|,
name|properties
argument_list|)
expr_stmt|;
name|tableWidget
operator|->
name|setItem
argument_list|(
name|ui_item
operator|->
name|attributeRow
argument_list|()
argument_list|,
name|ui_item
operator|->
name|attributeColumn
argument_list|()
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|loadComboBoxExtraInfo
name|void
name|QAbstractFormBuilder
operator|::
name|loadComboBoxExtraInfo
parameter_list|(
name|DomWidget
modifier|*
name|ui_widget
parameter_list|,
name|QComboBox
modifier|*
name|comboBox
parameter_list|,
name|QWidget
modifier|*
name|parentWidget
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|parentWidget
argument_list|)
expr_stmt|;
specifier|const
name|QFormBuilderStrings
modifier|&
name|strings
init|=
name|QFormBuilderStrings
operator|::
name|instance
argument_list|()
decl_stmt|;
foreach|foreach
control|(
name|DomItem
modifier|*
name|ui_item
decl|,
name|ui_widget
operator|->
name|elementItem
argument_list|()
control|)
block|{
specifier|const
name|DomPropertyHash
name|properties
init|=
name|propertyMap
argument_list|(
name|ui_item
operator|->
name|elementProperty
argument_list|()
argument_list|)
decl_stmt|;
name|QString
name|text
decl_stmt|;
name|QIcon
name|icon
decl_stmt|;
name|QVariant
name|textData
decl_stmt|;
name|QVariant
name|iconData
decl_stmt|;
name|DomProperty
modifier|*
name|p
init|=
literal|0
decl_stmt|;
name|p
operator|=
name|properties
operator|.
name|value
argument_list|(
name|strings
operator|.
name|textAttribute
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
operator|&&
name|p
operator|->
name|elementString
argument_list|()
condition|)
block|{
name|textData
operator|=
name|textBuilder
argument_list|()
operator|->
name|loadText
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|text
operator|=
name|qvariant_cast
argument_list|<
name|QString
argument_list|>
argument_list|(
name|textBuilder
argument_list|()
operator|->
name|toNativeValue
argument_list|(
name|textData
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|p
operator|=
name|properties
operator|.
name|value
argument_list|(
name|strings
operator|.
name|iconAttribute
argument_list|)
expr_stmt|;
if|if
condition|(
name|p
condition|)
block|{
name|iconData
operator|=
name|resourceBuilder
argument_list|()
operator|->
name|loadResource
argument_list|(
name|workingDirectory
argument_list|()
argument_list|,
name|p
argument_list|)
expr_stmt|;
name|icon
operator|=
name|qvariant_cast
argument_list|<
name|QIcon
argument_list|>
argument_list|(
name|resourceBuilder
argument_list|()
operator|->
name|toNativeValue
argument_list|(
name|iconData
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|comboBox
operator|->
name|addItem
argument_list|(
name|icon
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|comboBox
operator|->
name|setItemData
argument_list|(
operator|(
name|comboBox
operator|->
name|count
argument_list|()
operator|-
literal|1
operator|)
argument_list|,
name|iconData
argument_list|,
name|Qt
operator|::
name|DecorationPropertyRole
argument_list|)
expr_stmt|;
name|comboBox
operator|->
name|setItemData
argument_list|(
operator|(
name|comboBox
operator|->
name|count
argument_list|()
operator|-
literal|1
operator|)
argument_list|,
name|textData
argument_list|,
name|Qt
operator|::
name|DisplayPropertyRole
argument_list|)
expr_stmt|;
block|}
name|DomProperty
modifier|*
name|currentIndex
init|=
name|propertyMap
argument_list|(
name|ui_widget
operator|->
name|elementProperty
argument_list|()
argument_list|)
operator|.
name|value
argument_list|(
name|strings
operator|.
name|currentIndexProperty
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentIndex
condition|)
name|comboBox
operator|->
name|setCurrentIndex
argument_list|(
name|currentIndex
operator|->
name|elementNumber
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Get the button group name out of a widget's attribute list
end_comment
begin_function
DECL|function|buttonGroupName
specifier|static
name|QString
name|buttonGroupName
parameter_list|(
specifier|const
name|DomWidget
modifier|*
name|ui_widget
parameter_list|)
block|{
typedef|typedef
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
name|DomPropertyList
typedef|;
specifier|const
name|DomPropertyList
name|attributes
init|=
name|ui_widget
operator|->
name|elementAttribute
argument_list|()
decl_stmt|;
if|if
condition|(
name|attributes
operator|.
name|empty
argument_list|()
condition|)
return|return
name|QString
argument_list|()
return|;
specifier|const
name|QString
name|buttonGroupProperty
init|=
name|QLatin1String
argument_list|(
name|buttonGroupPropertyC
argument_list|)
decl_stmt|;
specifier|const
name|DomPropertyList
operator|::
name|const_iterator
name|cend
init|=
name|attributes
operator|.
name|constEnd
argument_list|()
decl_stmt|;
for|for
control|(
name|DomPropertyList
operator|::
name|const_iterator
name|it
init|=
name|attributes
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|cend
condition|;
operator|++
name|it
control|)
if|if
condition|(
operator|(
operator|*
name|it
operator|)
operator|->
name|attributeName
argument_list|()
operator|==
name|buttonGroupProperty
condition|)
return|return
operator|(
operator|*
name|it
operator|)
operator|->
name|elementString
argument_list|()
operator|->
name|text
argument_list|()
return|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \internal     \since 4.5 */
end_comment
begin_function
DECL|function|loadButtonExtraInfo
name|void
name|QAbstractFormBuilder
operator|::
name|loadButtonExtraInfo
parameter_list|(
specifier|const
name|DomWidget
modifier|*
name|ui_widget
parameter_list|,
name|QAbstractButton
modifier|*
name|button
parameter_list|,
name|QWidget
modifier|*
parameter_list|)
block|{
typedef|typedef
name|QFormBuilderExtra
operator|::
name|ButtonGroupEntry
name|ButtonGroupEntry
typedef|;
typedef|typedef
name|QFormBuilderExtra
operator|::
name|ButtonGroupHash
name|ButtonGroupHash
typedef|;
specifier|const
name|QString
name|groupName
init|=
name|buttonGroupName
argument_list|(
name|ui_widget
argument_list|)
decl_stmt|;
if|if
condition|(
name|groupName
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
comment|// Find entry
name|ButtonGroupHash
modifier|&
name|buttonGroups
init|=
name|d
operator|->
name|buttonGroups
argument_list|()
decl_stmt|;
name|ButtonGroupHash
operator|::
name|iterator
name|it
init|=
name|buttonGroups
operator|.
name|find
argument_list|(
name|groupName
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|==
name|buttonGroups
operator|.
name|end
argument_list|()
condition|)
block|{
ifdef|#
directive|ifdef
name|QFORMINTERNAL_NAMESPACE
comment|// Suppress the warning when copying in Designer
name|uiLibWarning
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QAbstractFormBuilder"
argument_list|,
literal|"Invalid QButtonGroup reference '%1' referenced by '%2'."
argument_list|)
operator|.
name|arg
argument_list|(
name|groupName
argument_list|,
name|button
operator|->
name|objectName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return;
block|}
comment|// Create button group on demand?
name|QButtonGroup
modifier|*
modifier|&
name|group
init|=
name|it
operator|.
name|value
argument_list|()
operator|.
name|second
decl_stmt|;
if|if
condition|(
name|group
operator|==
literal|0
condition|)
block|{
name|group
operator|=
operator|new
name|QButtonGroup
expr_stmt|;
name|group
operator|->
name|setObjectName
argument_list|(
name|groupName
argument_list|)
expr_stmt|;
name|applyProperties
argument_list|(
name|group
argument_list|,
name|it
operator|.
name|value
argument_list|()
operator|.
name|first
operator|->
name|elementProperty
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|group
operator|->
name|addButton
argument_list|(
name|button
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal     \since 4.5 */
end_comment
begin_function
DECL|function|loadItemViewExtraInfo
name|void
name|QAbstractFormBuilder
operator|::
name|loadItemViewExtraInfo
parameter_list|(
name|DomWidget
modifier|*
name|ui_widget
parameter_list|,
name|QAbstractItemView
modifier|*
name|itemView
parameter_list|,
name|QWidget
modifier|*
parameter_list|)
block|{
comment|//
comment|// Special handling for qtableview/qtreeview fake header attributes
comment|//
specifier|static
name|QStringList
name|realPropertyNames
init|=
operator|(
name|QStringList
argument_list|()
operator|<<
name|QLatin1String
argument_list|(
literal|"visible"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"cascadingSectionResizes"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"defaultSectionSize"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"highlightSections"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"minimumSectionSize"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"showSortIndicator"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"stretchLastSection"
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|QTreeView
modifier|*
name|treeView
init|=
name|qobject_cast
argument_list|<
name|QTreeView
operator|*
argument_list|>
argument_list|(
name|itemView
argument_list|)
condition|)
block|{
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
name|allAttributes
init|=
name|ui_widget
operator|->
name|elementAttribute
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
name|headerProperties
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|realPropertyName
decl|,
name|realPropertyNames
control|)
block|{
specifier|const
name|QString
name|upperPropertyName
init|=
name|realPropertyName
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toUpper
argument_list|()
operator|+
name|realPropertyName
operator|.
name|mid
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|fakePropertyName
init|=
name|QLatin1String
argument_list|(
literal|"header"
argument_list|)
operator|+
name|upperPropertyName
decl_stmt|;
foreach|foreach
control|(
name|DomProperty
modifier|*
name|attr
decl|,
name|allAttributes
control|)
block|{
if|if
condition|(
name|attr
operator|->
name|attributeName
argument_list|()
operator|==
name|fakePropertyName
condition|)
block|{
name|attr
operator|->
name|setAttributeName
argument_list|(
name|realPropertyName
argument_list|)
expr_stmt|;
name|headerProperties
operator|<<
name|attr
expr_stmt|;
block|}
block|}
block|}
name|applyProperties
argument_list|(
name|treeView
operator|->
name|header
argument_list|()
argument_list|,
name|headerProperties
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|QTableView
modifier|*
name|tableView
init|=
name|qobject_cast
argument_list|<
name|QTableView
operator|*
argument_list|>
argument_list|(
name|itemView
argument_list|)
condition|)
block|{
specifier|static
name|QStringList
name|headerPrefixes
init|=
operator|(
name|QStringList
argument_list|()
operator|<<
name|QLatin1String
argument_list|(
literal|"horizontalHeader"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"verticalHeader"
argument_list|)
operator|)
decl_stmt|;
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
name|allAttributes
init|=
name|ui_widget
operator|->
name|elementAttribute
argument_list|()
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|headerPrefix
decl|,
name|headerPrefixes
control|)
block|{
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
name|headerProperties
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|realPropertyName
decl|,
name|realPropertyNames
control|)
block|{
specifier|const
name|QString
name|upperPropertyName
init|=
name|realPropertyName
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toUpper
argument_list|()
operator|+
name|realPropertyName
operator|.
name|mid
argument_list|(
literal|1
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|fakePropertyName
init|=
name|headerPrefix
operator|+
name|upperPropertyName
decl_stmt|;
foreach|foreach
control|(
name|DomProperty
modifier|*
name|attr
decl|,
name|allAttributes
control|)
block|{
if|if
condition|(
name|attr
operator|->
name|attributeName
argument_list|()
operator|==
name|fakePropertyName
condition|)
block|{
name|attr
operator|->
name|setAttributeName
argument_list|(
name|realPropertyName
argument_list|)
expr_stmt|;
name|headerProperties
operator|<<
name|attr
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|headerPrefix
operator|==
name|QLatin1String
argument_list|(
literal|"horizontalHeader"
argument_list|)
condition|)
name|applyProperties
argument_list|(
name|tableView
operator|->
name|horizontalHeader
argument_list|()
argument_list|,
name|headerProperties
argument_list|)
expr_stmt|;
else|else
name|applyProperties
argument_list|(
name|tableView
operator|->
name|verticalHeader
argument_list|()
argument_list|,
name|headerProperties
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|loadExtraInfo
name|void
name|QAbstractFormBuilder
operator|::
name|loadExtraInfo
parameter_list|(
name|DomWidget
modifier|*
name|ui_widget
parameter_list|,
name|QWidget
modifier|*
name|widget
parameter_list|,
name|QWidget
modifier|*
name|parentWidget
parameter_list|)
block|{
specifier|const
name|QFormBuilderStrings
modifier|&
name|strings
init|=
name|QFormBuilderStrings
operator|::
name|instance
argument_list|()
decl_stmt|;
if|if
condition|(
literal|0
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_LISTWIDGET
block|}
elseif|else
if|if
condition|(
name|QListWidget
modifier|*
name|listWidget
init|=
name|qobject_cast
argument_list|<
name|QListWidget
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|loadListWidgetExtraInfo
argument_list|(
name|ui_widget
argument_list|,
name|listWidget
argument_list|,
name|parentWidget
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_TREEWIDGET
block|}
elseif|else
if|if
condition|(
name|QTreeWidget
modifier|*
name|treeWidget
init|=
name|qobject_cast
argument_list|<
name|QTreeWidget
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|loadTreeWidgetExtraInfo
argument_list|(
name|ui_widget
argument_list|,
name|treeWidget
argument_list|,
name|parentWidget
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_TABLEWIDGET
block|}
elseif|else
if|if
condition|(
name|QTableWidget
modifier|*
name|tableWidget
init|=
name|qobject_cast
argument_list|<
name|QTableWidget
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|loadTableWidgetExtraInfo
argument_list|(
name|ui_widget
argument_list|,
name|tableWidget
argument_list|,
name|parentWidget
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_COMBOBOX
block|}
elseif|else
if|if
condition|(
name|QComboBox
modifier|*
name|comboBox
init|=
name|qobject_cast
argument_list|<
name|QComboBox
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|qobject_cast
argument_list|<
name|QFontComboBox
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
name|loadComboBoxExtraInfo
argument_list|(
name|ui_widget
argument_list|,
name|comboBox
argument_list|,
name|parentWidget
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_TABWIDGET
block|}
elseif|else
if|if
condition|(
name|QTabWidget
modifier|*
name|tabWidget
init|=
name|qobject_cast
argument_list|<
name|QTabWidget
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
specifier|const
name|DomProperty
modifier|*
name|currentIndex
init|=
name|propertyMap
argument_list|(
name|ui_widget
operator|->
name|elementProperty
argument_list|()
argument_list|)
operator|.
name|value
argument_list|(
name|strings
operator|.
name|currentIndexProperty
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentIndex
condition|)
name|tabWidget
operator|->
name|setCurrentIndex
argument_list|(
name|currentIndex
operator|->
name|elementNumber
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_STACKEDWIDGET
block|}
elseif|else
if|if
condition|(
name|QStackedWidget
modifier|*
name|stackedWidget
init|=
name|qobject_cast
argument_list|<
name|QStackedWidget
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
specifier|const
name|DomProperty
modifier|*
name|currentIndex
init|=
name|propertyMap
argument_list|(
name|ui_widget
operator|->
name|elementProperty
argument_list|()
argument_list|)
operator|.
name|value
argument_list|(
name|strings
operator|.
name|currentIndexProperty
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentIndex
condition|)
name|stackedWidget
operator|->
name|setCurrentIndex
argument_list|(
name|currentIndex
operator|->
name|elementNumber
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_TOOLBOX
block|}
elseif|else
if|if
condition|(
name|QToolBox
modifier|*
name|toolBox
init|=
name|qobject_cast
argument_list|<
name|QToolBox
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
specifier|const
name|DomProperty
modifier|*
name|currentIndex
init|=
name|propertyMap
argument_list|(
name|ui_widget
operator|->
name|elementProperty
argument_list|()
argument_list|)
operator|.
name|value
argument_list|(
name|strings
operator|.
name|currentIndexProperty
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentIndex
condition|)
name|toolBox
operator|->
name|setCurrentIndex
argument_list|(
name|currentIndex
operator|->
name|elementNumber
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|DomProperty
modifier|*
name|tabSpacing
init|=
name|propertyMap
argument_list|(
name|ui_widget
operator|->
name|elementProperty
argument_list|()
argument_list|)
operator|.
name|value
argument_list|(
name|strings
operator|.
name|tabSpacingProperty
argument_list|)
decl_stmt|;
if|if
condition|(
name|tabSpacing
condition|)
name|toolBox
operator|->
name|layout
argument_list|()
operator|->
name|setSpacing
argument_list|(
name|tabSpacing
operator|->
name|elementNumber
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
elseif|else
if|if
condition|(
name|QAbstractButton
modifier|*
name|ab
init|=
name|qobject_cast
argument_list|<
name|QAbstractButton
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|loadButtonExtraInfo
argument_list|(
name|ui_widget
argument_list|,
name|ab
argument_list|,
name|parentWidget
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|QAbstractItemView
modifier|*
name|itemView
init|=
name|qobject_cast
argument_list|<
name|QAbstractItemView
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|)
condition|)
block|{
name|loadItemViewExtraInfo
argument_list|(
name|ui_widget
argument_list|,
name|itemView
argument_list|,
name|parentWidget
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Returns the current working directory of the form builder.      \sa setWorkingDirectory() */
end_comment
begin_function
DECL|function|workingDirectory
name|QDir
name|QAbstractFormBuilder
operator|::
name|workingDirectory
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|m_workingDirectory
return|;
block|}
end_function
begin_comment
comment|/*!     Sets the current working directory of the form builder to the     specified \a directory.      \sa workingDirectory()*/
end_comment
begin_function
DECL|function|setWorkingDirectory
name|void
name|QAbstractFormBuilder
operator|::
name|setWorkingDirectory
parameter_list|(
specifier|const
name|QDir
modifier|&
name|directory
parameter_list|)
block|{
name|d
operator|->
name|m_workingDirectory
operator|=
name|directory
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|createDom
name|DomAction
modifier|*
name|QAbstractFormBuilder
operator|::
name|createDom
parameter_list|(
name|QAction
modifier|*
name|action
parameter_list|)
block|{
if|if
condition|(
name|action
operator|->
name|parentWidget
argument_list|()
operator|==
name|action
operator|->
name|menu
argument_list|()
operator|||
name|action
operator|->
name|isSeparator
argument_list|()
condition|)
return|return
literal|0
return|;
name|DomAction
modifier|*
name|ui_action
init|=
operator|new
name|DomAction
decl_stmt|;
name|ui_action
operator|->
name|setAttributeName
argument_list|(
name|action
operator|->
name|objectName
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
name|properties
init|=
name|computeProperties
argument_list|(
name|action
argument_list|)
decl_stmt|;
name|ui_action
operator|->
name|setElementProperty
argument_list|(
name|properties
argument_list|)
expr_stmt|;
return|return
name|ui_action
return|;
block|}
end_function
begin_comment
comment|/*!     \internal     \since 4.5 */
end_comment
begin_function
DECL|function|createDom
name|DomButtonGroup
modifier|*
name|QAbstractFormBuilder
operator|::
name|createDom
parameter_list|(
name|QButtonGroup
modifier|*
name|buttonGroup
parameter_list|)
block|{
if|if
condition|(
name|buttonGroup
operator|->
name|buttons
argument_list|()
operator|.
name|count
argument_list|()
operator|==
literal|0
condition|)
comment|// Empty group left over on form?
return|return
literal|0
return|;
name|DomButtonGroup
modifier|*
name|domButtonGroup
init|=
operator|new
name|DomButtonGroup
decl_stmt|;
name|domButtonGroup
operator|->
name|setAttributeName
argument_list|(
name|buttonGroup
operator|->
name|objectName
argument_list|()
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
name|properties
init|=
name|computeProperties
argument_list|(
name|buttonGroup
argument_list|)
decl_stmt|;
name|domButtonGroup
operator|->
name|setElementProperty
argument_list|(
name|properties
argument_list|)
expr_stmt|;
return|return
name|domButtonGroup
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|createDom
name|DomActionGroup
modifier|*
name|QAbstractFormBuilder
operator|::
name|createDom
parameter_list|(
name|QActionGroup
modifier|*
name|actionGroup
parameter_list|)
block|{
name|DomActionGroup
modifier|*
name|ui_action_group
init|=
operator|new
name|DomActionGroup
decl_stmt|;
name|ui_action_group
operator|->
name|setAttributeName
argument_list|(
name|actionGroup
operator|->
name|objectName
argument_list|()
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
name|properties
init|=
name|computeProperties
argument_list|(
name|actionGroup
argument_list|)
decl_stmt|;
name|ui_action_group
operator|->
name|setElementProperty
argument_list|(
name|properties
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|DomAction
modifier|*
argument_list|>
name|ui_actions
decl_stmt|;
foreach|foreach
control|(
name|QAction
modifier|*
name|action
decl|,
name|actionGroup
operator|->
name|actions
argument_list|()
control|)
block|{
if|if
condition|(
name|DomAction
modifier|*
name|ui_action
init|=
name|createDom
argument_list|(
name|action
argument_list|)
condition|)
block|{
name|ui_actions
operator|.
name|append
argument_list|(
name|ui_action
argument_list|)
expr_stmt|;
block|}
block|}
name|ui_action_group
operator|->
name|setElementAction
argument_list|(
name|ui_actions
argument_list|)
expr_stmt|;
return|return
name|ui_action_group
return|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|addMenuAction
name|void
name|QAbstractFormBuilder
operator|::
name|addMenuAction
parameter_list|(
name|QAction
modifier|*
name|action
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal */
end_comment
begin_function
DECL|function|reset
name|void
name|QAbstractFormBuilder
operator|::
name|reset
parameter_list|()
block|{
name|d
operator|->
name|m_laidout
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|m_actions
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|m_actionGroups
operator|.
name|clear
argument_list|()
expr_stmt|;
name|d
operator|->
name|m_defaultMargin
operator|=
name|INT_MIN
expr_stmt|;
name|d
operator|->
name|m_defaultSpacing
operator|=
name|INT_MIN
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal     Access meta enumeration for Qt::ToolBarArea */
end_comment
begin_function
DECL|function|toolBarAreaMetaEnum
name|QMetaEnum
name|QAbstractFormBuilder
operator|::
name|toolBarAreaMetaEnum
parameter_list|()
block|{
return|return
name|metaEnum
argument_list|<
name|QAbstractFormBuilderGadget
argument_list|>
argument_list|(
literal|"toolBarArea"
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     \internal     Return paths of an icon. */
end_comment
begin_function
DECL|function|iconPaths
name|QAbstractFormBuilder
operator|::
name|IconPaths
name|QAbstractFormBuilder
operator|::
name|iconPaths
parameter_list|(
specifier|const
name|QIcon
modifier|&
name|icon
parameter_list|)
specifier|const
block|{
name|Q_UNUSED
argument_list|(
name|icon
argument_list|)
expr_stmt|;
name|qWarning
argument_list|()
operator|<<
literal|"QAbstractFormBuilder::iconPaths() is obsoleted"
expr_stmt|;
return|return
name|IconPaths
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \internal     Return paths of a pixmap. */
end_comment
begin_function
DECL|function|pixmapPaths
name|QAbstractFormBuilder
operator|::
name|IconPaths
name|QAbstractFormBuilder
operator|::
name|pixmapPaths
parameter_list|(
specifier|const
name|QPixmap
modifier|&
name|pixmap
parameter_list|)
specifier|const
block|{
name|Q_UNUSED
argument_list|(
name|pixmap
argument_list|)
expr_stmt|;
name|qWarning
argument_list|()
operator|<<
literal|"QAbstractFormBuilder::pixmapPaths() is obsoleted"
expr_stmt|;
return|return
name|IconPaths
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \internal     Set up a DOM property with icon. */
end_comment
begin_function
DECL|function|setIconProperty
name|void
name|QAbstractFormBuilder
operator|::
name|setIconProperty
parameter_list|(
name|DomProperty
modifier|&
name|p
parameter_list|,
specifier|const
name|IconPaths
modifier|&
name|ip
parameter_list|)
specifier|const
block|{
name|DomResourceIcon
modifier|*
name|dpi
init|=
operator|new
name|DomResourceIcon
decl_stmt|;
comment|/* TODO     if (!ip.second.isEmpty())         pix->setAttributeResource(ip.second); */
name|dpi
operator|->
name|setText
argument_list|(
name|ip
operator|.
name|first
argument_list|)
expr_stmt|;
name|p
operator|.
name|setAttributeName
argument_list|(
name|QFormBuilderStrings
operator|::
name|instance
argument_list|()
operator|.
name|iconAttribute
argument_list|)
expr_stmt|;
name|p
operator|.
name|setElementIconSet
argument_list|(
name|dpi
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal     Set up a DOM property with pixmap. */
end_comment
begin_function
DECL|function|setPixmapProperty
name|void
name|QAbstractFormBuilder
operator|::
name|setPixmapProperty
parameter_list|(
name|DomProperty
modifier|&
name|p
parameter_list|,
specifier|const
name|IconPaths
modifier|&
name|ip
parameter_list|)
specifier|const
block|{
name|DomResourcePixmap
modifier|*
name|pix
init|=
operator|new
name|DomResourcePixmap
decl_stmt|;
if|if
condition|(
operator|!
name|ip
operator|.
name|second
operator|.
name|isEmpty
argument_list|()
condition|)
name|pix
operator|->
name|setAttributeResource
argument_list|(
name|ip
operator|.
name|second
argument_list|)
expr_stmt|;
name|pix
operator|->
name|setText
argument_list|(
name|ip
operator|.
name|first
argument_list|)
expr_stmt|;
name|p
operator|.
name|setAttributeName
argument_list|(
name|QFormBuilderStrings
operator|::
name|instance
argument_list|()
operator|.
name|pixmapAttribute
argument_list|)
expr_stmt|;
name|p
operator|.
name|setElementPixmap
argument_list|(
name|pix
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     \internal     Convenience. Return DOM property for icon; 0 if icon.isNull(). */
end_comment
begin_function
DECL|function|iconToDomProperty
name|DomProperty
modifier|*
name|QAbstractFormBuilder
operator|::
name|iconToDomProperty
parameter_list|(
specifier|const
name|QIcon
modifier|&
name|icon
parameter_list|)
specifier|const
block|{
name|Q_UNUSED
argument_list|(
name|icon
argument_list|)
expr_stmt|;
name|qWarning
argument_list|()
operator|<<
literal|"QAbstractFormBuilder::iconToDomProperty() is obsoleted"
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     \internal     \since 4.4 */
end_comment
begin_function
DECL|function|saveResource
name|DomProperty
modifier|*
name|QAbstractFormBuilder
operator|::
name|saveResource
parameter_list|(
specifier|const
name|QVariant
modifier|&
name|v
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|v
operator|.
name|isNull
argument_list|()
condition|)
return|return
literal|0
return|;
name|DomProperty
modifier|*
name|p
init|=
name|resourceBuilder
argument_list|()
operator|->
name|saveResource
argument_list|(
name|workingDirectory
argument_list|()
argument_list|,
name|v
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
condition|)
name|p
operator|->
name|setAttributeName
argument_list|(
name|QFormBuilderStrings
operator|::
name|instance
argument_list|()
operator|.
name|iconAttribute
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
end_function
begin_comment
comment|/*!     \internal     \since 4.5 */
end_comment
begin_function
DECL|function|saveText
name|DomProperty
modifier|*
name|QAbstractFormBuilder
operator|::
name|saveText
parameter_list|(
specifier|const
name|QString
modifier|&
name|attributeName
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|v
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|v
operator|.
name|isNull
argument_list|()
condition|)
return|return
literal|0
return|;
name|DomProperty
modifier|*
name|p
init|=
name|textBuilder
argument_list|()
operator|->
name|saveText
argument_list|(
name|v
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
condition|)
name|p
operator|->
name|setAttributeName
argument_list|(
name|attributeName
argument_list|)
expr_stmt|;
return|return
name|p
return|;
block|}
end_function
begin_comment
comment|/*!     \internal     Return the appropriate DOM pixmap for an image dom property.     From 4.4 - unused */
end_comment
begin_function
DECL|function|domPixmap
specifier|const
name|DomResourcePixmap
modifier|*
name|QAbstractFormBuilder
operator|::
name|domPixmap
parameter_list|(
specifier|const
name|DomProperty
modifier|*
name|p
parameter_list|)
block|{
switch|switch
condition|(
name|p
operator|->
name|kind
argument_list|()
condition|)
block|{
case|case
name|DomProperty
operator|::
name|IconSet
case|:
name|qDebug
argument_list|()
operator|<<
literal|"** WARNING QAbstractFormBuilder::domPixmap() called for icon set!"
expr_stmt|;
break|break;
case|case
name|DomProperty
operator|::
name|Pixmap
case|:
return|return
name|p
operator|->
name|elementPixmap
argument_list|()
return|;
default|default:
break|break;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|/*!     \internal     Create icon from DOM.     From 4.4 - unused */
end_comment
begin_function
DECL|function|domPropertyToIcon
name|QIcon
name|QAbstractFormBuilder
operator|::
name|domPropertyToIcon
parameter_list|(
specifier|const
name|DomResourcePixmap
modifier|*
name|icon
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|icon
argument_list|)
expr_stmt|;
name|qWarning
argument_list|()
operator|<<
literal|"QAbstractFormBuilder::domPropertyToIcon() is obsoleted"
expr_stmt|;
return|return
name|QIcon
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \internal     Create icon from DOM. Assert if !domPixmap     From 4.4 - unused */
end_comment
begin_function
DECL|function|domPropertyToIcon
name|QIcon
name|QAbstractFormBuilder
operator|::
name|domPropertyToIcon
parameter_list|(
specifier|const
name|DomProperty
modifier|*
name|p
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|qWarning
argument_list|()
operator|<<
literal|"QAbstractFormBuilder::domPropertyToIcon() is obsoleted"
expr_stmt|;
return|return
name|QIcon
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \internal     Create pixmap from DOM.     From 4.4 - unused */
end_comment
begin_function
DECL|function|domPropertyToPixmap
name|QPixmap
name|QAbstractFormBuilder
operator|::
name|domPropertyToPixmap
parameter_list|(
specifier|const
name|DomResourcePixmap
modifier|*
name|pixmap
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|pixmap
argument_list|)
expr_stmt|;
name|qWarning
argument_list|()
operator|<<
literal|"QAbstractFormBuilder::domPropertyToPixmap() is obsoleted"
expr_stmt|;
return|return
name|QPixmap
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \internal     Create pixmap from DOM. Assert if !domPixmap     From 4.4 - unused */
end_comment
begin_function
DECL|function|domPropertyToPixmap
name|QPixmap
name|QAbstractFormBuilder
operator|::
name|domPropertyToPixmap
parameter_list|(
specifier|const
name|DomProperty
modifier|*
name|p
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|qWarning
argument_list|()
operator|<<
literal|"QAbstractFormBuilder::domPropertyToPixmap() is obsoleted"
expr_stmt|;
return|return
name|QPixmap
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     \fn void QAbstractFormBuilder::createConnections ( DomConnections *, QWidget * )     \internal */
end_comment
begin_comment
comment|/*!     \fn void QAbstractFormBuilder::createCustomWidgets ( DomCustomWidgets * )     \internal */
end_comment
begin_comment
comment|/*!     \fn void QAbstractFormBuilder::createResources ( DomResources * )     \internal */
end_comment
begin_comment
comment|/*!      \fn QFormScriptRunner *QAbstractFormBuilder::formScriptRunner() const      \internal      \since 4.3 */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_FORMBUILDER_NO_SCRIPT
end_ifndef
begin_function
DECL|function|formScriptRunner
name|QFormScriptRunner
modifier|*
name|QAbstractFormBuilder
operator|::
name|formScriptRunner
parameter_list|()
specifier|const
block|{
return|return
operator|&
operator|(
name|d
operator|->
name|formScriptRunner
argument_list|()
operator|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     Sets whether the execution of scripts is enabled to \a enabled.     \since 4.3     \internal */
end_comment
begin_function
DECL|function|setScriptingEnabled
name|void
name|QAbstractFormBuilder
operator|::
name|setScriptingEnabled
parameter_list|(
name|bool
name|enabled
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_FORMBUILDER_NO_SCRIPT
if|if
condition|(
name|enabled
condition|)
name|uiLibWarning
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QAbstractFormBuilder"
argument_list|,
literal|"This version of the uitools library is linked without script support."
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|QFormScriptRunner
operator|::
name|Options
name|options
init|=
name|formScriptRunner
argument_list|()
operator|->
name|options
argument_list|()
decl_stmt|;
if|if
condition|(
name|enabled
condition|)
name|options
operator|&=
operator|~
name|QFormScriptRunner
operator|::
name|DisableScripts
expr_stmt|;
else|else
name|options
operator||=
name|QFormScriptRunner
operator|::
name|DisableScripts
expr_stmt|;
name|formScriptRunner
argument_list|()
operator|->
name|setOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     Returns whether the execution of scripts is enabled.     \sa setScriptingEnabled()     \since 4.3     \internal */
end_comment
begin_function
DECL|function|isScriptingEnabled
name|bool
name|QAbstractFormBuilder
operator|::
name|isScriptingEnabled
parameter_list|()
specifier|const
block|{
ifdef|#
directive|ifdef
name|QT_FORMBUILDER_NO_SCRIPT
return|return
literal|false
return|;
else|#
directive|else
return|return
operator|!
operator|(
name|formScriptRunner
argument_list|()
operator|->
name|options
argument_list|()
operator|&
name|QFormScriptRunner
operator|::
name|DisableScripts
operator|)
return|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|/*!     Returns a human-readable description of the last error occurred in load().      \since 5.0     \sa load() */
end_comment
begin_function
DECL|function|errorString
name|QString
name|QAbstractFormBuilder
operator|::
name|errorString
parameter_list|()
specifier|const
block|{
return|return
name|d
operator|->
name|m_errorString
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
