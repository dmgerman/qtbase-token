begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the Qt Designer of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|EXTENSION_H
end_ifndef
begin_define
DECL|macro|EXTENSION_H
define|#
directive|define
name|EXTENSION_H
end_define
begin_include
include|#
directive|include
file|<QtCore/QString>
end_include
begin_include
include|#
directive|include
file|<QtCore/QObject>
end_include
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
DECL|macro|Q_TYPEID
define|#
directive|define
name|Q_TYPEID
parameter_list|(
name|IFace
parameter_list|)
value|QLatin1String(IFace##_iid)
name|class
name|QAbstractExtensionFactory
block|{
name|public
label|:
name|virtual
operator|~
name|QAbstractExtensionFactory
argument_list|()
block|{}
name|virtual
name|QObject
operator|*
name|extension
argument_list|(
argument|QObject *object
argument_list|,
argument|const QString&iid
argument_list|)
specifier|const
operator|=
literal|0
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|Q_DECLARE_INTERFACE
argument_list|(
argument|QAbstractExtensionFactory
argument_list|,
literal|"com.trolltech.Qt.QAbstractExtensionFactory"
argument_list|)
end_macro
begin_decl_stmt
name|class
name|QAbstractExtensionManager
block|{
name|public
label|:
name|virtual
operator|~
name|QAbstractExtensionManager
argument_list|()
block|{}
name|virtual
name|void
name|registerExtensions
argument_list|(
name|QAbstractExtensionFactory
operator|*
name|factory
argument_list|,
specifier|const
name|QString
operator|&
name|iid
argument_list|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|void
name|unregisterExtensions
parameter_list|(
name|QAbstractExtensionFactory
modifier|*
name|factory
parameter_list|,
specifier|const
name|QString
modifier|&
name|iid
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|QObject
modifier|*
name|extension
argument_list|(
name|QObject
operator|*
name|object
argument_list|,
specifier|const
name|QString
operator|&
name|iid
argument_list|)
decl|const
init|=
literal|0
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|Q_DECLARE_INTERFACE
argument_list|(
argument|QAbstractExtensionManager
argument_list|,
literal|"com.trolltech.Qt.QAbstractExtensionManager"
argument_list|)
end_macro
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_CC_MSVC
argument_list|)
operator|&&
operator|(
name|_MSC_VER
operator|<
literal|1300
operator|)
end_if
begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
DECL|function|qt_extension_helper
specifier|inline
name|T
name|qt_extension_helper
argument_list|(
argument|QAbstractExtensionManager *
argument_list|,
argument|QObject *
argument_list|,
argument|T
argument_list|)
block|{
return|return
literal|0
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
DECL|function|qt_extension
specifier|inline
name|T
name|qt_extension
argument_list|(
argument|QAbstractExtensionManager* manager
argument_list|,
argument|QObject *object
argument_list|)
block|{
return|return
name|qt_extension_helper
argument_list|(
name|manager
argument_list|,
name|object
argument_list|,
name|T
argument_list|(
literal|0
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_define
DECL|macro|Q_DECLARE_EXTENSION_INTERFACE
define|#
directive|define
name|Q_DECLARE_EXTENSION_INTERFACE
parameter_list|(
name|IFace
parameter_list|,
name|IId
parameter_list|)
define|\
value|const char * const IFace##_iid = IId; \ Q_DECLARE_INTERFACE(IFace, IId) \ template<> inline IFace *qt_extension_helper<IFace *>(QAbstractExtensionManager *manager, QObject *object, IFace *) \ { QObject *extension = manager->extension(object, Q_TYPEID(IFace)); return (IFace *)(extension ? extension->qt_metacast(IFace##_iid) : 0); }
end_define
begin_else
else|#
directive|else
end_else
begin_expr_stmt
name|template
operator|<
name|class
name|T
operator|>
specifier|inline
name|T
name|qt_extension
argument_list|(
argument|QAbstractExtensionManager* manager
argument_list|,
argument|QObject *object
argument_list|)
block|{
return|return
literal|0
return|;
block|}
end_expr_stmt
begin_define
define|#
directive|define
name|Q_DECLARE_EXTENSION_INTERFACE
parameter_list|(
name|IFace
parameter_list|,
name|IId
parameter_list|)
define|\
value|const char * const IFace##_iid = IId; \ Q_DECLARE_INTERFACE(IFace, IId) \ template<> inline IFace *qt_extension<IFace *>(QAbstractExtensionManager *manager, QObject *object) \ { QObject *extension = manager->extension(object, Q_TYPEID(IFace)); return extension ? static_cast<IFace *>(extension->qt_metacast(IFace##_iid)) : static_cast<IFace *>(0); }
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// EXTENSION_H
end_comment
end_unit
