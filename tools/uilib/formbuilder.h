begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the Qt Designer of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|FORMBUILDER_H
end_ifndef
begin_define
DECL|macro|FORMBUILDER_H
define|#
directive|define
name|FORMBUILDER_H
end_define
begin_include
include|#
directive|include
file|"uilib_global.h"
end_include
begin_include
include|#
directive|include
file|"abstractformbuilder.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/QStringList>
end_include
begin_include
include|#
directive|include
file|<QtCore/QMap>
end_include
begin_decl_stmt
name|QT_BEGIN_HEADER
name|QT_BEGIN_NAMESPACE
if|#
directive|if
literal|0
comment|// pragma for syncqt, don't remove.
pragma|#
directive|pragma
name|qt_class
name|(
name|QFormBuilder
name|)
endif|#
directive|endif
DECL|variable|QDesignerCustomWidgetInterface
name|class
name|QDesignerCustomWidgetInterface
decl_stmt|;
end_decl_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|QFORMINTERNAL_NAMESPACE
end_ifdef
begin_decl_stmt
name|namespace
name|QFormInternal
block|{
endif|#
directive|endif
name|class
name|QDESIGNER_UILIB_EXPORT
name|QFormBuilder
range|:
name|public
name|QAbstractFormBuilder
block|{
name|public
operator|:
name|QFormBuilder
argument_list|()
block|;
name|virtual
operator|~
name|QFormBuilder
argument_list|()
block|;
name|QStringList
name|pluginPaths
argument_list|()
specifier|const
block|;
name|void
name|clearPluginPaths
argument_list|()
block|;
name|void
name|addPluginPath
argument_list|(
specifier|const
name|QString
operator|&
name|pluginPath
argument_list|)
block|;
name|void
name|setPluginPath
argument_list|(
specifier|const
name|QStringList
operator|&
name|pluginPaths
argument_list|)
block|;
name|QList
operator|<
name|QDesignerCustomWidgetInterface
operator|*
operator|>
name|customWidgets
argument_list|()
specifier|const
block|;
name|protected
operator|:
name|virtual
name|QWidget
operator|*
name|create
argument_list|(
name|DomUI
operator|*
name|ui
argument_list|,
name|QWidget
operator|*
name|parentWidget
argument_list|)
block|;
name|virtual
name|QWidget
operator|*
name|create
argument_list|(
name|DomWidget
operator|*
name|ui_widget
argument_list|,
name|QWidget
operator|*
name|parentWidget
argument_list|)
block|;
name|virtual
name|QLayout
operator|*
name|create
argument_list|(
name|DomLayout
operator|*
name|ui_layout
argument_list|,
name|QLayout
operator|*
name|layout
argument_list|,
name|QWidget
operator|*
name|parentWidget
argument_list|)
block|;
name|virtual
name|QLayoutItem
operator|*
name|create
argument_list|(
name|DomLayoutItem
operator|*
name|ui_layoutItem
argument_list|,
name|QLayout
operator|*
name|layout
argument_list|,
name|QWidget
operator|*
name|parentWidget
argument_list|)
block|;
name|virtual
name|QAction
operator|*
name|create
argument_list|(
name|DomAction
operator|*
name|ui_action
argument_list|,
name|QObject
operator|*
name|parent
argument_list|)
block|;
name|virtual
name|QActionGroup
operator|*
name|create
argument_list|(
name|DomActionGroup
operator|*
name|ui_action_group
argument_list|,
name|QObject
operator|*
name|parent
argument_list|)
block|;
name|virtual
name|QWidget
operator|*
name|createWidget
argument_list|(
specifier|const
name|QString
operator|&
name|widgetName
argument_list|,
name|QWidget
operator|*
name|parentWidget
argument_list|,
specifier|const
name|QString
operator|&
name|name
argument_list|)
block|;
name|virtual
name|QLayout
operator|*
name|createLayout
argument_list|(
specifier|const
name|QString
operator|&
name|layoutName
argument_list|,
name|QObject
operator|*
name|parent
argument_list|,
specifier|const
name|QString
operator|&
name|name
argument_list|)
block|;
name|virtual
name|void
name|createConnections
argument_list|(
name|DomConnections
operator|*
name|connections
argument_list|,
name|QWidget
operator|*
name|widget
argument_list|)
block|;
name|virtual
name|bool
name|addItem
argument_list|(
name|DomLayoutItem
operator|*
name|ui_item
argument_list|,
name|QLayoutItem
operator|*
name|item
argument_list|,
name|QLayout
operator|*
name|layout
argument_list|)
block|;
name|virtual
name|bool
name|addItem
argument_list|(
name|DomWidget
operator|*
name|ui_widget
argument_list|,
name|QWidget
operator|*
name|widget
argument_list|,
name|QWidget
operator|*
name|parentWidget
argument_list|)
block|;
name|virtual
name|void
name|updateCustomWidgets
argument_list|()
block|;
name|virtual
name|void
name|applyProperties
argument_list|(
name|QObject
operator|*
name|o
argument_list|,
specifier|const
name|QList
operator|<
name|DomProperty
operator|*
operator|>
operator|&
name|properties
argument_list|)
block|;
specifier|static
name|QWidget
operator|*
name|widgetByName
argument_list|(
name|QWidget
operator|*
name|topLevel
argument_list|,
specifier|const
name|QString
operator|&
name|name
argument_list|)
block|;
name|private
operator|:
name|QStringList
name|m_pluginPaths
block|;
name|QMap
operator|<
name|QString
block|,
name|QDesignerCustomWidgetInterface
operator|*
operator|>
name|m_customWidgets
block|; }
decl_stmt|;
ifdef|#
directive|ifdef
name|QFORMINTERNAL_NAMESPACE
block|}
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_expr_stmt
name|QT_END_NAMESPACE
name|QT_END_HEADER
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// FORMBUILDER_H
end_comment
end_unit
