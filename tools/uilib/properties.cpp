begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the Qt Designer of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"properties_p.h"
end_include
begin_include
include|#
directive|include
file|"ui4_p.h"
end_include
begin_include
include|#
directive|include
file|"abstractformbuilder.h"
end_include
begin_include
include|#
directive|include
file|"formbuilderextra_p.h"
end_include
begin_include
include|#
directive|include
file|"resourcebuilder_p.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/QDateTime>
end_include
begin_include
include|#
directive|include
file|<QtCore/QUrl>
end_include
begin_include
include|#
directive|include
file|<QtCore/qdebug.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/QIcon>
end_include
begin_include
include|#
directive|include
file|<QtGui/QPixmap>
end_include
begin_include
include|#
directive|include
file|<QtGui/QFont>
end_include
begin_include
include|#
directive|include
file|<QtGui/QFrame>
end_include
begin_include
include|#
directive|include
file|<QtGui/QAbstractScrollArea>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_ifdef
ifdef|#
directive|ifdef
name|QFORMINTERNAL_NAMESPACE
end_ifdef
begin_namespace
DECL|namespace|QFormInternal
namespace|namespace
name|QFormInternal
block|{
endif|#
directive|endif
DECL|function|fixEnum
specifier|static
specifier|inline
name|void
name|fixEnum
parameter_list|(
name|QString
modifier|&
name|s
parameter_list|)
block|{
name|int
name|qualifierIndex
init|=
name|s
operator|.
name|lastIndexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|qualifierIndex
operator|==
operator|-
literal|1
condition|)
name|qualifierIndex
operator|=
name|s
operator|.
name|lastIndexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|qualifierIndex
operator|!=
operator|-
literal|1
condition|)
name|s
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
name|qualifierIndex
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// Convert complex DOM types with the help of  QAbstractFormBuilder
DECL|function|domPropertyToVariant
name|QVariant
name|domPropertyToVariant
parameter_list|(
name|QAbstractFormBuilder
modifier|*
name|afb
parameter_list|,
specifier|const
name|QMetaObject
modifier|*
name|meta
parameter_list|,
specifier|const
name|DomProperty
modifier|*
name|p
parameter_list|)
block|{
comment|// Complex types that need functions from QAbstractFormBuilder
switch|switch
condition|(
name|p
operator|->
name|kind
argument_list|()
condition|)
block|{
case|case
name|DomProperty
operator|::
name|String
case|:
block|{
specifier|const
name|int
name|index
init|=
name|meta
operator|->
name|indexOfProperty
argument_list|(
name|p
operator|->
name|attributeName
argument_list|()
operator|.
name|toUtf8
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
operator|&&
name|meta
operator|->
name|property
argument_list|(
name|index
argument_list|)
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|KeySequence
condition|)
return|return
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QKeySequence
argument_list|(
name|p
operator|->
name|elementString
argument_list|()
operator|->
name|text
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
break|break;
case|case
name|DomProperty
operator|::
name|Palette
case|:
block|{
specifier|const
name|DomPalette
modifier|*
name|dom
init|=
name|p
operator|->
name|elementPalette
argument_list|()
decl_stmt|;
name|QPalette
name|palette
decl_stmt|;
if|if
condition|(
name|dom
operator|->
name|elementActive
argument_list|()
condition|)
name|afb
operator|->
name|setupColorGroup
argument_list|(
name|palette
argument_list|,
name|QPalette
operator|::
name|Active
argument_list|,
name|dom
operator|->
name|elementActive
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|dom
operator|->
name|elementInactive
argument_list|()
condition|)
name|afb
operator|->
name|setupColorGroup
argument_list|(
name|palette
argument_list|,
name|QPalette
operator|::
name|Inactive
argument_list|,
name|dom
operator|->
name|elementInactive
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|dom
operator|->
name|elementDisabled
argument_list|()
condition|)
name|afb
operator|->
name|setupColorGroup
argument_list|(
name|palette
argument_list|,
name|QPalette
operator|::
name|Disabled
argument_list|,
name|dom
operator|->
name|elementDisabled
argument_list|()
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setCurrentColorGroup
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|)
expr_stmt|;
return|return
name|QVariant
operator|::
name|fromValue
argument_list|(
name|palette
argument_list|)
return|;
block|}
case|case
name|DomProperty
operator|::
name|Set
case|:
block|{
specifier|const
name|QByteArray
name|pname
init|=
name|p
operator|->
name|attributeName
argument_list|()
operator|.
name|toUtf8
argument_list|()
decl_stmt|;
specifier|const
name|int
name|index
init|=
name|meta
operator|->
name|indexOfProperty
argument_list|(
name|pname
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
block|{
name|uiLibWarning
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QFormBuilder"
argument_list|,
literal|"The set-type property %1 could not be read."
argument_list|)
operator|.
name|arg
argument_list|(
name|p
operator|->
name|attributeName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|QVariant
argument_list|()
return|;
block|}
specifier|const
name|QMetaEnum
name|e
init|=
name|meta
operator|->
name|property
argument_list|(
name|index
argument_list|)
operator|.
name|enumerator
argument_list|()
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|e
operator|.
name|isFlag
argument_list|()
operator|==
literal|true
argument_list|)
expr_stmt|;
return|return
name|QVariant
argument_list|(
name|e
operator|.
name|keysToValue
argument_list|(
name|p
operator|->
name|elementSet
argument_list|()
operator|.
name|toUtf8
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
case|case
name|DomProperty
operator|::
name|Enum
case|:
block|{
specifier|const
name|QByteArray
name|pname
init|=
name|p
operator|->
name|attributeName
argument_list|()
operator|.
name|toUtf8
argument_list|()
decl_stmt|;
specifier|const
name|int
name|index
init|=
name|meta
operator|->
name|indexOfProperty
argument_list|(
name|pname
argument_list|)
decl_stmt|;
name|QString
name|enumValue
init|=
name|p
operator|->
name|elementEnum
argument_list|()
decl_stmt|;
comment|// Triggers in case of objects in Designer like Spacer/Line for which properties
comment|// are serialized using language introspection. On preview, however, these objects are
comment|// emulated by hacks in the formbuilder (size policy/orientation)
name|fixEnum
argument_list|(
name|enumValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
block|{
comment|// ### special-casing for Line (QFrame) -- fix for 4.2. Jambi hack for enumerations
if|if
condition|(
operator|!
name|qstrcmp
argument_list|(
name|meta
operator|->
name|className
argument_list|()
argument_list|,
literal|"QFrame"
argument_list|)
operator|&&
operator|(
name|pname
operator|==
name|QByteArray
argument_list|(
literal|"orientation"
argument_list|)
operator|)
condition|)
block|{
return|return
name|QVariant
argument_list|(
name|enumValue
operator|==
name|QFormBuilderStrings
operator|::
name|instance
argument_list|()
operator|.
name|horizontalPostFix
condition|?
name|QFrame
operator|::
name|HLine
else|:
name|QFrame
operator|::
name|VLine
argument_list|)
return|;
block|}
else|else
block|{
name|uiLibWarning
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QFormBuilder"
argument_list|,
literal|"The enumeration-type property %1 could not be read."
argument_list|)
operator|.
name|arg
argument_list|(
name|p
operator|->
name|attributeName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|QVariant
argument_list|()
return|;
block|}
block|}
specifier|const
name|QMetaEnum
name|e
init|=
name|meta
operator|->
name|property
argument_list|(
name|index
argument_list|)
operator|.
name|enumerator
argument_list|()
decl_stmt|;
return|return
name|QVariant
argument_list|(
name|e
operator|.
name|keyToValue
argument_list|(
name|enumValue
operator|.
name|toUtf8
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
case|case
name|DomProperty
operator|::
name|Brush
case|:
return|return
name|QVariant
operator|::
name|fromValue
argument_list|(
name|afb
operator|->
name|setupBrush
argument_list|(
name|p
operator|->
name|elementBrush
argument_list|()
argument_list|)
argument_list|)
return|;
default|default:
if|if
condition|(
name|afb
operator|->
name|resourceBuilder
argument_list|()
operator|->
name|isResourceProperty
argument_list|(
name|p
argument_list|)
condition|)
block|{
return|return
name|afb
operator|->
name|resourceBuilder
argument_list|()
operator|->
name|loadResource
argument_list|(
name|afb
operator|->
name|workingDirectory
argument_list|()
argument_list|,
name|p
argument_list|)
return|;
block|}
break|break;
block|}
comment|// simple type
return|return
name|domPropertyToVariant
argument_list|(
name|p
argument_list|)
return|;
block|}
comment|// Convert simple DOM types
DECL|function|domPropertyToVariant
name|QVariant
name|domPropertyToVariant
parameter_list|(
specifier|const
name|DomProperty
modifier|*
name|p
parameter_list|)
block|{
comment|// requires non-const virtual nameToIcon, etc.
switch|switch
condition|(
name|p
operator|->
name|kind
argument_list|()
condition|)
block|{
case|case
name|DomProperty
operator|::
name|Bool
case|:
return|return
name|QVariant
argument_list|(
name|p
operator|->
name|elementBool
argument_list|()
operator|==
name|QFormBuilderStrings
operator|::
name|instance
argument_list|()
operator|.
name|trueValue
argument_list|)
return|;
case|case
name|DomProperty
operator|::
name|Cstring
case|:
return|return
name|QVariant
argument_list|(
name|p
operator|->
name|elementCstring
argument_list|()
operator|.
name|toUtf8
argument_list|()
argument_list|)
return|;
case|case
name|DomProperty
operator|::
name|Point
case|:
block|{
specifier|const
name|DomPoint
modifier|*
name|point
init|=
name|p
operator|->
name|elementPoint
argument_list|()
decl_stmt|;
return|return
name|QVariant
argument_list|(
name|QPoint
argument_list|(
name|point
operator|->
name|elementX
argument_list|()
argument_list|,
name|point
operator|->
name|elementY
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
case|case
name|DomProperty
operator|::
name|PointF
case|:
block|{
specifier|const
name|DomPointF
modifier|*
name|pointf
init|=
name|p
operator|->
name|elementPointF
argument_list|()
decl_stmt|;
return|return
name|QVariant
argument_list|(
name|QPointF
argument_list|(
name|pointf
operator|->
name|elementX
argument_list|()
argument_list|,
name|pointf
operator|->
name|elementY
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
case|case
name|DomProperty
operator|::
name|Size
case|:
block|{
specifier|const
name|DomSize
modifier|*
name|size
init|=
name|p
operator|->
name|elementSize
argument_list|()
decl_stmt|;
return|return
name|QVariant
argument_list|(
name|QSize
argument_list|(
name|size
operator|->
name|elementWidth
argument_list|()
argument_list|,
name|size
operator|->
name|elementHeight
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
case|case
name|DomProperty
operator|::
name|SizeF
case|:
block|{
specifier|const
name|DomSizeF
modifier|*
name|sizef
init|=
name|p
operator|->
name|elementSizeF
argument_list|()
decl_stmt|;
return|return
name|QVariant
argument_list|(
name|QSizeF
argument_list|(
name|sizef
operator|->
name|elementWidth
argument_list|()
argument_list|,
name|sizef
operator|->
name|elementHeight
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
case|case
name|DomProperty
operator|::
name|Rect
case|:
block|{
specifier|const
name|DomRect
modifier|*
name|rc
init|=
name|p
operator|->
name|elementRect
argument_list|()
decl_stmt|;
specifier|const
name|QRect
name|g
argument_list|(
name|rc
operator|->
name|elementX
argument_list|()
argument_list|,
name|rc
operator|->
name|elementY
argument_list|()
argument_list|,
name|rc
operator|->
name|elementWidth
argument_list|()
argument_list|,
name|rc
operator|->
name|elementHeight
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|QVariant
argument_list|(
name|g
argument_list|)
return|;
block|}
case|case
name|DomProperty
operator|::
name|RectF
case|:
block|{
specifier|const
name|DomRectF
modifier|*
name|rcf
init|=
name|p
operator|->
name|elementRectF
argument_list|()
decl_stmt|;
specifier|const
name|QRectF
name|g
argument_list|(
name|rcf
operator|->
name|elementX
argument_list|()
argument_list|,
name|rcf
operator|->
name|elementY
argument_list|()
argument_list|,
name|rcf
operator|->
name|elementWidth
argument_list|()
argument_list|,
name|rcf
operator|->
name|elementHeight
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|QVariant
argument_list|(
name|g
argument_list|)
return|;
block|}
case|case
name|DomProperty
operator|::
name|String
case|:
return|return
name|QVariant
argument_list|(
name|p
operator|->
name|elementString
argument_list|()
operator|->
name|text
argument_list|()
argument_list|)
return|;
case|case
name|DomProperty
operator|::
name|Number
case|:
return|return
name|QVariant
argument_list|(
name|p
operator|->
name|elementNumber
argument_list|()
argument_list|)
return|;
case|case
name|DomProperty
operator|::
name|UInt
case|:
return|return
name|QVariant
argument_list|(
name|p
operator|->
name|elementUInt
argument_list|()
argument_list|)
return|;
case|case
name|DomProperty
operator|::
name|LongLong
case|:
return|return
name|QVariant
argument_list|(
name|p
operator|->
name|elementLongLong
argument_list|()
argument_list|)
return|;
case|case
name|DomProperty
operator|::
name|ULongLong
case|:
return|return
name|QVariant
argument_list|(
name|p
operator|->
name|elementULongLong
argument_list|()
argument_list|)
return|;
case|case
name|DomProperty
operator|::
name|Double
case|:
return|return
name|QVariant
argument_list|(
name|p
operator|->
name|elementDouble
argument_list|()
argument_list|)
return|;
case|case
name|DomProperty
operator|::
name|Char
case|:
block|{
specifier|const
name|DomChar
modifier|*
name|character
init|=
name|p
operator|->
name|elementChar
argument_list|()
decl_stmt|;
specifier|const
name|QChar
name|c
argument_list|(
name|character
operator|->
name|elementUnicode
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|QVariant
operator|::
name|fromValue
argument_list|(
name|c
argument_list|)
return|;
block|}
case|case
name|DomProperty
operator|::
name|Color
case|:
block|{
specifier|const
name|DomColor
modifier|*
name|color
init|=
name|p
operator|->
name|elementColor
argument_list|()
decl_stmt|;
name|QColor
name|c
argument_list|(
name|color
operator|->
name|elementRed
argument_list|()
argument_list|,
name|color
operator|->
name|elementGreen
argument_list|()
argument_list|,
name|color
operator|->
name|elementBlue
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|color
operator|->
name|hasAttributeAlpha
argument_list|()
condition|)
name|c
operator|.
name|setAlpha
argument_list|(
name|color
operator|->
name|attributeAlpha
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|QVariant
operator|::
name|fromValue
argument_list|(
name|c
argument_list|)
return|;
block|}
case|case
name|DomProperty
operator|::
name|Font
case|:
block|{
specifier|const
name|DomFont
modifier|*
name|font
init|=
name|p
operator|->
name|elementFont
argument_list|()
decl_stmt|;
name|QFont
name|f
decl_stmt|;
if|if
condition|(
name|font
operator|->
name|hasElementFamily
argument_list|()
operator|&&
operator|!
name|font
operator|->
name|elementFamily
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|f
operator|.
name|setFamily
argument_list|(
name|font
operator|->
name|elementFamily
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|font
operator|->
name|hasElementPointSize
argument_list|()
operator|&&
name|font
operator|->
name|elementPointSize
argument_list|()
operator|>
literal|0
condition|)
name|f
operator|.
name|setPointSize
argument_list|(
name|font
operator|->
name|elementPointSize
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|font
operator|->
name|hasElementWeight
argument_list|()
operator|&&
name|font
operator|->
name|elementWeight
argument_list|()
operator|>
literal|0
condition|)
name|f
operator|.
name|setWeight
argument_list|(
name|font
operator|->
name|elementWeight
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|font
operator|->
name|hasElementItalic
argument_list|()
condition|)
name|f
operator|.
name|setItalic
argument_list|(
name|font
operator|->
name|elementItalic
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|font
operator|->
name|hasElementBold
argument_list|()
condition|)
name|f
operator|.
name|setBold
argument_list|(
name|font
operator|->
name|elementBold
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|font
operator|->
name|hasElementUnderline
argument_list|()
condition|)
name|f
operator|.
name|setUnderline
argument_list|(
name|font
operator|->
name|elementUnderline
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|font
operator|->
name|hasElementStrikeOut
argument_list|()
condition|)
name|f
operator|.
name|setStrikeOut
argument_list|(
name|font
operator|->
name|elementStrikeOut
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|font
operator|->
name|hasElementKerning
argument_list|()
condition|)
name|f
operator|.
name|setKerning
argument_list|(
name|font
operator|->
name|elementKerning
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|font
operator|->
name|hasElementAntialiasing
argument_list|()
condition|)
name|f
operator|.
name|setStyleStrategy
argument_list|(
name|font
operator|->
name|elementAntialiasing
argument_list|()
condition|?
name|QFont
operator|::
name|PreferDefault
else|:
name|QFont
operator|::
name|NoAntialias
argument_list|)
expr_stmt|;
if|if
condition|(
name|font
operator|->
name|hasElementStyleStrategy
argument_list|()
condition|)
block|{
name|f
operator|.
name|setStyleStrategy
argument_list|(
name|enumKeyOfObjectToValue
argument_list|<
name|QAbstractFormBuilderGadget
argument_list|,
name|QFont
operator|::
name|StyleStrategy
argument_list|>
argument_list|(
literal|"styleStrategy"
argument_list|,
name|font
operator|->
name|elementStyleStrategy
argument_list|()
operator|.
name|toLatin1
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|QVariant
operator|::
name|fromValue
argument_list|(
name|f
argument_list|)
return|;
block|}
case|case
name|DomProperty
operator|::
name|Date
case|:
block|{
specifier|const
name|DomDate
modifier|*
name|date
init|=
name|p
operator|->
name|elementDate
argument_list|()
decl_stmt|;
return|return
name|QVariant
argument_list|(
name|QDate
argument_list|(
name|date
operator|->
name|elementYear
argument_list|()
argument_list|,
name|date
operator|->
name|elementMonth
argument_list|()
argument_list|,
name|date
operator|->
name|elementDay
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
case|case
name|DomProperty
operator|::
name|Time
case|:
block|{
specifier|const
name|DomTime
modifier|*
name|t
init|=
name|p
operator|->
name|elementTime
argument_list|()
decl_stmt|;
return|return
name|QVariant
argument_list|(
name|QTime
argument_list|(
name|t
operator|->
name|elementHour
argument_list|()
argument_list|,
name|t
operator|->
name|elementMinute
argument_list|()
argument_list|,
name|t
operator|->
name|elementSecond
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
case|case
name|DomProperty
operator|::
name|DateTime
case|:
block|{
specifier|const
name|DomDateTime
modifier|*
name|dateTime
init|=
name|p
operator|->
name|elementDateTime
argument_list|()
decl_stmt|;
specifier|const
name|QDate
name|d
argument_list|(
name|dateTime
operator|->
name|elementYear
argument_list|()
argument_list|,
name|dateTime
operator|->
name|elementMonth
argument_list|()
argument_list|,
name|dateTime
operator|->
name|elementDay
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QTime
name|tm
argument_list|(
name|dateTime
operator|->
name|elementHour
argument_list|()
argument_list|,
name|dateTime
operator|->
name|elementMinute
argument_list|()
argument_list|,
name|dateTime
operator|->
name|elementSecond
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|QVariant
argument_list|(
name|QDateTime
argument_list|(
name|d
argument_list|,
name|tm
argument_list|)
argument_list|)
return|;
block|}
case|case
name|DomProperty
operator|::
name|Url
case|:
block|{
specifier|const
name|DomUrl
modifier|*
name|url
init|=
name|p
operator|->
name|elementUrl
argument_list|()
decl_stmt|;
return|return
name|QVariant
argument_list|(
name|QUrl
argument_list|(
name|url
operator|->
name|elementString
argument_list|()
operator|->
name|text
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
case|case
name|DomProperty
operator|::
name|Cursor
case|:
return|return
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QCursor
argument_list|(
cast|static_cast
argument_list|<
name|Qt
operator|::
name|CursorShape
argument_list|>
argument_list|(
name|p
operator|->
name|elementCursor
argument_list|()
argument_list|)
argument_list|)
argument_list|)
return|;
case|case
name|DomProperty
operator|::
name|CursorShape
case|:
return|return
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QCursor
argument_list|(
name|enumKeyOfObjectToValue
argument_list|<
name|QAbstractFormBuilderGadget
argument_list|,
name|Qt
operator|::
name|CursorShape
argument_list|>
argument_list|(
literal|"cursorShape"
argument_list|,
name|p
operator|->
name|elementCursorShape
argument_list|()
operator|.
name|toLatin1
argument_list|()
argument_list|)
argument_list|)
argument_list|)
return|;
endif|#
directive|endif
case|case
name|DomProperty
operator|::
name|Locale
case|:
block|{
specifier|const
name|DomLocale
modifier|*
name|locale
init|=
name|p
operator|->
name|elementLocale
argument_list|()
decl_stmt|;
return|return
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QLocale
argument_list|(
name|enumKeyOfObjectToValue
argument_list|<
name|QAbstractFormBuilderGadget
argument_list|,
name|QLocale
operator|::
name|Language
argument_list|>
argument_list|(
literal|"language"
argument_list|,
name|locale
operator|->
name|attributeLanguage
argument_list|()
operator|.
name|toLatin1
argument_list|()
argument_list|)
argument_list|,
name|enumKeyOfObjectToValue
argument_list|<
name|QAbstractFormBuilderGadget
argument_list|,
name|QLocale
operator|::
name|Country
argument_list|>
argument_list|(
literal|"country"
argument_list|,
name|locale
operator|->
name|attributeCountry
argument_list|()
operator|.
name|toLatin1
argument_list|()
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
case|case
name|DomProperty
operator|::
name|SizePolicy
case|:
block|{
specifier|const
name|DomSizePolicy
modifier|*
name|sizep
init|=
name|p
operator|->
name|elementSizePolicy
argument_list|()
decl_stmt|;
name|QSizePolicy
name|sizePolicy
decl_stmt|;
name|sizePolicy
operator|.
name|setHorizontalStretch
argument_list|(
name|sizep
operator|->
name|elementHorStretch
argument_list|()
argument_list|)
expr_stmt|;
name|sizePolicy
operator|.
name|setVerticalStretch
argument_list|(
name|sizep
operator|->
name|elementVerStretch
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QMetaEnum
name|sizeType_enum
init|=
name|metaEnum
argument_list|<
name|QAbstractFormBuilderGadget
argument_list|>
argument_list|(
literal|"sizeType"
argument_list|)
decl_stmt|;
if|if
condition|(
name|sizep
operator|->
name|hasElementHSizeType
argument_list|()
condition|)
block|{
name|sizePolicy
operator|.
name|setHorizontalPolicy
argument_list|(
operator|(
name|QSizePolicy
operator|::
name|Policy
operator|)
name|sizep
operator|->
name|elementHSizeType
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sizep
operator|->
name|hasAttributeHSizeType
argument_list|()
condition|)
block|{
specifier|const
name|QSizePolicy
operator|::
name|Policy
name|sp
init|=
name|enumKeyToValue
argument_list|<
name|QSizePolicy
operator|::
name|Policy
argument_list|>
argument_list|(
name|sizeType_enum
argument_list|,
name|sizep
operator|->
name|attributeHSizeType
argument_list|()
operator|.
name|toLatin1
argument_list|()
argument_list|)
decl_stmt|;
name|sizePolicy
operator|.
name|setHorizontalPolicy
argument_list|(
name|sp
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|sizep
operator|->
name|hasElementVSizeType
argument_list|()
condition|)
block|{
name|sizePolicy
operator|.
name|setVerticalPolicy
argument_list|(
operator|(
name|QSizePolicy
operator|::
name|Policy
operator|)
name|sizep
operator|->
name|elementVSizeType
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|sizep
operator|->
name|hasAttributeVSizeType
argument_list|()
condition|)
block|{
specifier|const
name|QSizePolicy
operator|::
name|Policy
name|sp
init|=
name|enumKeyToValue
argument_list|<
name|QSizePolicy
operator|::
name|Policy
argument_list|>
argument_list|(
name|sizeType_enum
argument_list|,
name|sizep
operator|->
name|attributeVSizeType
argument_list|()
operator|.
name|toLatin1
argument_list|()
argument_list|)
decl_stmt|;
name|sizePolicy
operator|.
name|setVerticalPolicy
argument_list|(
name|sp
argument_list|)
expr_stmt|;
block|}
return|return
name|QVariant
operator|::
name|fromValue
argument_list|(
name|sizePolicy
argument_list|)
return|;
block|}
case|case
name|DomProperty
operator|::
name|StringList
case|:
return|return
name|QVariant
argument_list|(
name|p
operator|->
name|elementStringList
argument_list|()
operator|->
name|elementString
argument_list|()
argument_list|)
return|;
default|default:
name|uiLibWarning
argument_list|(
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QFormBuilder"
argument_list|,
literal|"Reading properties of the type %1 is not supported yet."
argument_list|)
operator|.
name|arg
argument_list|(
name|p
operator|->
name|kind
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|QVariant
argument_list|()
return|;
block|}
comment|// Apply a simple variant type to a DOM property
DECL|function|applySimpleProperty
specifier|static
name|bool
name|applySimpleProperty
parameter_list|(
specifier|const
name|QVariant
modifier|&
name|v
parameter_list|,
name|bool
name|translateString
parameter_list|,
name|DomProperty
modifier|*
name|dom_prop
parameter_list|)
block|{
switch|switch
condition|(
name|v
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|QVariant
operator|::
name|String
case|:
block|{
name|DomString
modifier|*
name|str
init|=
operator|new
name|DomString
argument_list|()
decl_stmt|;
name|str
operator|->
name|setText
argument_list|(
name|v
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|translateString
condition|)
name|str
operator|->
name|setAttributeNotr
argument_list|(
name|QLatin1String
argument_list|(
literal|"true"
argument_list|)
argument_list|)
expr_stmt|;
name|dom_prop
operator|->
name|setElementString
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
case|case
name|QVariant
operator|::
name|ByteArray
case|:
name|dom_prop
operator|->
name|setElementCstring
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
name|v
operator|.
name|toByteArray
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|QVariant
operator|::
name|Int
case|:
name|dom_prop
operator|->
name|setElementNumber
argument_list|(
name|v
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|QVariant
operator|::
name|UInt
case|:
name|dom_prop
operator|->
name|setElementUInt
argument_list|(
name|v
operator|.
name|toUInt
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|QVariant
operator|::
name|LongLong
case|:
name|dom_prop
operator|->
name|setElementLongLong
argument_list|(
name|v
operator|.
name|toLongLong
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|QVariant
operator|::
name|ULongLong
case|:
name|dom_prop
operator|->
name|setElementULongLong
argument_list|(
name|v
operator|.
name|toULongLong
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|QVariant
operator|::
name|Double
case|:
name|dom_prop
operator|->
name|setElementDouble
argument_list|(
name|v
operator|.
name|toDouble
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|QVariant
operator|::
name|Bool
case|:
name|dom_prop
operator|->
name|setElementBool
argument_list|(
name|v
operator|.
name|toBool
argument_list|()
condition|?
name|QFormBuilderStrings
operator|::
name|instance
argument_list|()
operator|.
name|trueValue
else|:
name|QFormBuilderStrings
operator|::
name|instance
argument_list|()
operator|.
name|falseValue
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
case|case
name|QVariant
operator|::
name|Char
case|:
block|{
name|DomChar
modifier|*
name|ch
init|=
operator|new
name|DomChar
argument_list|()
decl_stmt|;
specifier|const
name|QChar
name|character
init|=
name|v
operator|.
name|toChar
argument_list|()
decl_stmt|;
name|ch
operator|->
name|setElementUnicode
argument_list|(
name|character
operator|.
name|unicode
argument_list|()
argument_list|)
expr_stmt|;
name|dom_prop
operator|->
name|setElementChar
argument_list|(
name|ch
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
case|case
name|QVariant
operator|::
name|Point
case|:
block|{
name|DomPoint
modifier|*
name|pt
init|=
operator|new
name|DomPoint
argument_list|()
decl_stmt|;
specifier|const
name|QPoint
name|point
init|=
name|v
operator|.
name|toPoint
argument_list|()
decl_stmt|;
name|pt
operator|->
name|setElementX
argument_list|(
name|point
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|pt
operator|->
name|setElementY
argument_list|(
name|point
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|dom_prop
operator|->
name|setElementPoint
argument_list|(
name|pt
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
case|case
name|QVariant
operator|::
name|PointF
case|:
block|{
name|DomPointF
modifier|*
name|ptf
init|=
operator|new
name|DomPointF
argument_list|()
decl_stmt|;
specifier|const
name|QPointF
name|pointf
init|=
name|v
operator|.
name|toPointF
argument_list|()
decl_stmt|;
name|ptf
operator|->
name|setElementX
argument_list|(
name|pointf
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|ptf
operator|->
name|setElementY
argument_list|(
name|pointf
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|dom_prop
operator|->
name|setElementPointF
argument_list|(
name|ptf
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
case|case
name|QVariant
operator|::
name|Color
case|:
block|{
name|DomColor
modifier|*
name|clr
init|=
operator|new
name|DomColor
argument_list|()
decl_stmt|;
specifier|const
name|QColor
name|color
init|=
name|qvariant_cast
argument_list|<
name|QColor
argument_list|>
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|clr
operator|->
name|setElementRed
argument_list|(
name|color
operator|.
name|red
argument_list|()
argument_list|)
expr_stmt|;
name|clr
operator|->
name|setElementGreen
argument_list|(
name|color
operator|.
name|green
argument_list|()
argument_list|)
expr_stmt|;
name|clr
operator|->
name|setElementBlue
argument_list|(
name|color
operator|.
name|blue
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|int
name|alphaChannel
init|=
name|color
operator|.
name|alpha
argument_list|()
decl_stmt|;
if|if
condition|(
name|alphaChannel
operator|!=
literal|255
condition|)
name|clr
operator|->
name|setAttributeAlpha
argument_list|(
name|alphaChannel
argument_list|)
expr_stmt|;
name|dom_prop
operator|->
name|setElementColor
argument_list|(
name|clr
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
case|case
name|QVariant
operator|::
name|Size
case|:
block|{
name|DomSize
modifier|*
name|sz
init|=
operator|new
name|DomSize
argument_list|()
decl_stmt|;
specifier|const
name|QSize
name|size
init|=
name|v
operator|.
name|toSize
argument_list|()
decl_stmt|;
name|sz
operator|->
name|setElementWidth
argument_list|(
name|size
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|sz
operator|->
name|setElementHeight
argument_list|(
name|size
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|dom_prop
operator|->
name|setElementSize
argument_list|(
name|sz
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
case|case
name|QVariant
operator|::
name|SizeF
case|:
block|{
name|DomSizeF
modifier|*
name|szf
init|=
operator|new
name|DomSizeF
argument_list|()
decl_stmt|;
specifier|const
name|QSizeF
name|sizef
init|=
name|v
operator|.
name|toSizeF
argument_list|()
decl_stmt|;
name|szf
operator|->
name|setElementWidth
argument_list|(
name|sizef
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|szf
operator|->
name|setElementHeight
argument_list|(
name|sizef
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|dom_prop
operator|->
name|setElementSizeF
argument_list|(
name|szf
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
case|case
name|QVariant
operator|::
name|Rect
case|:
block|{
name|DomRect
modifier|*
name|rc
init|=
operator|new
name|DomRect
argument_list|()
decl_stmt|;
specifier|const
name|QRect
name|rect
init|=
name|v
operator|.
name|toRect
argument_list|()
decl_stmt|;
name|rc
operator|->
name|setElementX
argument_list|(
name|rect
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|->
name|setElementY
argument_list|(
name|rect
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|->
name|setElementWidth
argument_list|(
name|rect
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|rc
operator|->
name|setElementHeight
argument_list|(
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|dom_prop
operator|->
name|setElementRect
argument_list|(
name|rc
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
case|case
name|QVariant
operator|::
name|RectF
case|:
block|{
name|DomRectF
modifier|*
name|rcf
init|=
operator|new
name|DomRectF
argument_list|()
decl_stmt|;
specifier|const
name|QRectF
name|rectf
init|=
name|v
operator|.
name|toRectF
argument_list|()
decl_stmt|;
name|rcf
operator|->
name|setElementX
argument_list|(
name|rectf
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|rcf
operator|->
name|setElementY
argument_list|(
name|rectf
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|rcf
operator|->
name|setElementWidth
argument_list|(
name|rectf
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|rcf
operator|->
name|setElementHeight
argument_list|(
name|rectf
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|dom_prop
operator|->
name|setElementRectF
argument_list|(
name|rcf
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
case|case
name|QVariant
operator|::
name|Font
case|:
block|{
name|DomFont
modifier|*
name|fnt
init|=
operator|new
name|DomFont
argument_list|()
decl_stmt|;
specifier|const
name|QFont
name|font
init|=
name|qvariant_cast
argument_list|<
name|QFont
argument_list|>
argument_list|(
name|v
argument_list|)
decl_stmt|;
specifier|const
name|uint
name|mask
init|=
name|font
operator|.
name|resolve
argument_list|()
decl_stmt|;
if|if
condition|(
name|mask
operator|&
name|QFont
operator|::
name|WeightResolved
condition|)
block|{
name|fnt
operator|->
name|setElementBold
argument_list|(
name|font
operator|.
name|bold
argument_list|()
argument_list|)
expr_stmt|;
name|fnt
operator|->
name|setElementWeight
argument_list|(
name|font
operator|.
name|weight
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|mask
operator|&
name|QFont
operator|::
name|FamilyResolved
condition|)
name|fnt
operator|->
name|setElementFamily
argument_list|(
name|font
operator|.
name|family
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mask
operator|&
name|QFont
operator|::
name|StyleResolved
condition|)
name|fnt
operator|->
name|setElementItalic
argument_list|(
name|font
operator|.
name|italic
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mask
operator|&
name|QFont
operator|::
name|SizeResolved
condition|)
name|fnt
operator|->
name|setElementPointSize
argument_list|(
name|font
operator|.
name|pointSize
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mask
operator|&
name|QFont
operator|::
name|StrikeOutResolved
condition|)
name|fnt
operator|->
name|setElementStrikeOut
argument_list|(
name|font
operator|.
name|strikeOut
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mask
operator|&
name|QFont
operator|::
name|UnderlineResolved
condition|)
name|fnt
operator|->
name|setElementUnderline
argument_list|(
name|font
operator|.
name|underline
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mask
operator|&
name|QFont
operator|::
name|KerningResolved
condition|)
name|fnt
operator|->
name|setElementKerning
argument_list|(
name|font
operator|.
name|kerning
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|mask
operator|&
name|QFont
operator|::
name|StyleStrategyResolved
condition|)
block|{
specifier|const
name|QMetaEnum
name|styleStrategy_enum
init|=
name|metaEnum
argument_list|<
name|QAbstractFormBuilderGadget
argument_list|>
argument_list|(
literal|"styleStrategy"
argument_list|)
decl_stmt|;
name|fnt
operator|->
name|setElementStyleStrategy
argument_list|(
name|QLatin1String
argument_list|(
name|styleStrategy_enum
operator|.
name|valueToKey
argument_list|(
name|font
operator|.
name|styleStrategy
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|dom_prop
operator|->
name|setElementFont
argument_list|(
name|fnt
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
ifndef|#
directive|ifndef
name|QT_NO_CURSOR
case|case
name|QVariant
operator|::
name|Cursor
case|:
block|{
specifier|const
name|QMetaEnum
name|cursorShape_enum
init|=
name|metaEnum
argument_list|<
name|QAbstractFormBuilderGadget
argument_list|>
argument_list|(
literal|"cursorShape"
argument_list|)
decl_stmt|;
name|dom_prop
operator|->
name|setElementCursorShape
argument_list|(
name|QLatin1String
argument_list|(
name|cursorShape_enum
operator|.
name|valueToKey
argument_list|(
name|qvariant_cast
argument_list|<
name|QCursor
argument_list|>
argument_list|(
name|v
argument_list|)
operator|.
name|shape
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
endif|#
directive|endif
case|case
name|QVariant
operator|::
name|KeySequence
case|:
block|{
name|DomString
modifier|*
name|s
init|=
operator|new
name|DomString
argument_list|()
decl_stmt|;
name|s
operator|->
name|setText
argument_list|(
name|qvariant_cast
argument_list|<
name|QKeySequence
argument_list|>
argument_list|(
name|v
argument_list|)
operator|.
name|toString
argument_list|(
name|QKeySequence
operator|::
name|PortableText
argument_list|)
argument_list|)
expr_stmt|;
name|dom_prop
operator|->
name|setElementString
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
case|case
name|QVariant
operator|::
name|Locale
case|:
block|{
name|DomLocale
modifier|*
name|dom
init|=
operator|new
name|DomLocale
argument_list|()
decl_stmt|;
specifier|const
name|QLocale
name|locale
init|=
name|qvariant_cast
argument_list|<
name|QLocale
argument_list|>
argument_list|(
name|v
argument_list|)
decl_stmt|;
specifier|const
name|QMetaEnum
name|language_enum
init|=
name|metaEnum
argument_list|<
name|QAbstractFormBuilderGadget
argument_list|>
argument_list|(
literal|"language"
argument_list|)
decl_stmt|;
specifier|const
name|QMetaEnum
name|country_enum
init|=
name|metaEnum
argument_list|<
name|QAbstractFormBuilderGadget
argument_list|>
argument_list|(
literal|"country"
argument_list|)
decl_stmt|;
name|dom
operator|->
name|setAttributeLanguage
argument_list|(
name|QLatin1String
argument_list|(
name|language_enum
operator|.
name|valueToKey
argument_list|(
name|locale
operator|.
name|language
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|dom
operator|->
name|setAttributeCountry
argument_list|(
name|QLatin1String
argument_list|(
name|country_enum
operator|.
name|valueToKey
argument_list|(
name|locale
operator|.
name|country
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|dom_prop
operator|->
name|setElementLocale
argument_list|(
name|dom
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
case|case
name|QVariant
operator|::
name|SizePolicy
case|:
block|{
name|DomSizePolicy
modifier|*
name|dom
init|=
operator|new
name|DomSizePolicy
argument_list|()
decl_stmt|;
specifier|const
name|QSizePolicy
name|sizePolicy
init|=
name|qvariant_cast
argument_list|<
name|QSizePolicy
argument_list|>
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|dom
operator|->
name|setElementHorStretch
argument_list|(
name|sizePolicy
operator|.
name|horizontalStretch
argument_list|()
argument_list|)
expr_stmt|;
name|dom
operator|->
name|setElementVerStretch
argument_list|(
name|sizePolicy
operator|.
name|verticalStretch
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QMetaEnum
name|sizeType_enum
init|=
name|metaEnum
argument_list|<
name|QAbstractFormBuilderGadget
argument_list|>
argument_list|(
literal|"sizeType"
argument_list|)
decl_stmt|;
name|dom
operator|->
name|setAttributeHSizeType
argument_list|(
name|QLatin1String
argument_list|(
name|sizeType_enum
operator|.
name|valueToKey
argument_list|(
name|sizePolicy
operator|.
name|horizontalPolicy
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|dom
operator|->
name|setAttributeVSizeType
argument_list|(
name|QLatin1String
argument_list|(
name|sizeType_enum
operator|.
name|valueToKey
argument_list|(
name|sizePolicy
operator|.
name|verticalPolicy
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|dom_prop
operator|->
name|setElementSizePolicy
argument_list|(
name|dom
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
case|case
name|QVariant
operator|::
name|Date
case|:
block|{
name|DomDate
modifier|*
name|dom
init|=
operator|new
name|DomDate
argument_list|()
decl_stmt|;
specifier|const
name|QDate
name|date
init|=
name|qvariant_cast
argument_list|<
name|QDate
argument_list|>
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|dom
operator|->
name|setElementYear
argument_list|(
name|date
operator|.
name|year
argument_list|()
argument_list|)
expr_stmt|;
name|dom
operator|->
name|setElementMonth
argument_list|(
name|date
operator|.
name|month
argument_list|()
argument_list|)
expr_stmt|;
name|dom
operator|->
name|setElementDay
argument_list|(
name|date
operator|.
name|day
argument_list|()
argument_list|)
expr_stmt|;
name|dom_prop
operator|->
name|setElementDate
argument_list|(
name|dom
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
case|case
name|QVariant
operator|::
name|Time
case|:
block|{
name|DomTime
modifier|*
name|dom
init|=
operator|new
name|DomTime
argument_list|()
decl_stmt|;
specifier|const
name|QTime
name|time
init|=
name|qvariant_cast
argument_list|<
name|QTime
argument_list|>
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|dom
operator|->
name|setElementHour
argument_list|(
name|time
operator|.
name|hour
argument_list|()
argument_list|)
expr_stmt|;
name|dom
operator|->
name|setElementMinute
argument_list|(
name|time
operator|.
name|minute
argument_list|()
argument_list|)
expr_stmt|;
name|dom
operator|->
name|setElementSecond
argument_list|(
name|time
operator|.
name|second
argument_list|()
argument_list|)
expr_stmt|;
name|dom_prop
operator|->
name|setElementTime
argument_list|(
name|dom
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
case|case
name|QVariant
operator|::
name|DateTime
case|:
block|{
name|DomDateTime
modifier|*
name|dom
init|=
operator|new
name|DomDateTime
argument_list|()
decl_stmt|;
specifier|const
name|QDateTime
name|dateTime
init|=
name|qvariant_cast
argument_list|<
name|QDateTime
argument_list|>
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|dom
operator|->
name|setElementHour
argument_list|(
name|dateTime
operator|.
name|time
argument_list|()
operator|.
name|hour
argument_list|()
argument_list|)
expr_stmt|;
name|dom
operator|->
name|setElementMinute
argument_list|(
name|dateTime
operator|.
name|time
argument_list|()
operator|.
name|minute
argument_list|()
argument_list|)
expr_stmt|;
name|dom
operator|->
name|setElementSecond
argument_list|(
name|dateTime
operator|.
name|time
argument_list|()
operator|.
name|second
argument_list|()
argument_list|)
expr_stmt|;
name|dom
operator|->
name|setElementYear
argument_list|(
name|dateTime
operator|.
name|date
argument_list|()
operator|.
name|year
argument_list|()
argument_list|)
expr_stmt|;
name|dom
operator|->
name|setElementMonth
argument_list|(
name|dateTime
operator|.
name|date
argument_list|()
operator|.
name|month
argument_list|()
argument_list|)
expr_stmt|;
name|dom
operator|->
name|setElementDay
argument_list|(
name|dateTime
operator|.
name|date
argument_list|()
operator|.
name|day
argument_list|()
argument_list|)
expr_stmt|;
name|dom_prop
operator|->
name|setElementDateTime
argument_list|(
name|dom
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
case|case
name|QVariant
operator|::
name|Url
case|:
block|{
name|DomUrl
modifier|*
name|dom
init|=
operator|new
name|DomUrl
argument_list|()
decl_stmt|;
specifier|const
name|QUrl
name|url
init|=
name|v
operator|.
name|toUrl
argument_list|()
decl_stmt|;
name|DomString
modifier|*
name|str
init|=
operator|new
name|DomString
argument_list|()
decl_stmt|;
name|str
operator|->
name|setText
argument_list|(
name|url
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|dom
operator|->
name|setElementString
argument_list|(
name|str
argument_list|)
expr_stmt|;
name|dom_prop
operator|->
name|setElementUrl
argument_list|(
name|dom
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
case|case
name|QVariant
operator|::
name|StringList
case|:
block|{
name|DomStringList
modifier|*
name|sl
init|=
operator|new
name|DomStringList
decl_stmt|;
name|sl
operator|->
name|setElementString
argument_list|(
name|qvariant_cast
argument_list|<
name|QStringList
argument_list|>
argument_list|(
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|dom_prop
operator|->
name|setElementStringList
argument_list|(
name|sl
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
default|default:
break|break;
block|}
return|return
literal|false
return|;
block|}
DECL|function|msgCannotWriteProperty
specifier|static
name|QString
name|msgCannotWriteProperty
parameter_list|(
specifier|const
name|QString
modifier|&
name|pname
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|v
parameter_list|)
block|{
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QFormBuilder"
argument_list|,
literal|"The property %1 could not be written. The type %2 is not supported yet."
argument_list|)
operator|.
name|arg
argument_list|(
name|pname
argument_list|)
operator|.
name|arg
argument_list|(
name|QLatin1String
argument_list|(
name|v
operator|.
name|typeName
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
DECL|function|isOfType
specifier|static
name|bool
name|isOfType
parameter_list|(
specifier|const
name|QMetaObject
modifier|*
name|what
parameter_list|,
specifier|const
name|QMetaObject
modifier|*
name|type
parameter_list|)
block|{
do|do
block|{
if|if
condition|(
name|what
operator|==
name|type
condition|)
return|return
literal|true
return|;
block|}
do|while
condition|(
operator|(
name|what
operator|=
name|what
operator|->
name|superClass
argument_list|()
operator|)
condition|)
do|;
return|return
literal|false
return|;
block|}
DECL|function|isTranslatable
specifier|static
name|bool
name|isTranslatable
parameter_list|(
specifier|const
name|QString
modifier|&
name|pname
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|v
parameter_list|,
specifier|const
name|QMetaObject
modifier|*
name|meta
parameter_list|)
block|{
specifier|const
name|QFormBuilderStrings
modifier|&
name|strings
init|=
name|QFormBuilderStrings
operator|::
name|instance
argument_list|()
decl_stmt|;
if|if
condition|(
name|pname
operator|==
name|strings
operator|.
name|objectNameProperty
condition|)
return|return
literal|false
return|;
if|if
condition|(
name|pname
operator|==
name|strings
operator|.
name|styleSheetProperty
operator|&&
name|v
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|String
operator|&&
name|isOfType
argument_list|(
name|meta
argument_list|,
operator|&
name|QWidget
operator|::
name|staticMetaObject
argument_list|)
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
comment|// Convert complex variant types to DOM properties with the help of  QAbstractFormBuilder
comment|// Does not perform a check using  QAbstractFormBuilder::checkProperty().
DECL|function|variantToDomProperty
name|DomProperty
modifier|*
name|variantToDomProperty
parameter_list|(
name|QAbstractFormBuilder
modifier|*
name|afb
parameter_list|,
specifier|const
name|QMetaObject
modifier|*
name|meta
parameter_list|,
specifier|const
name|QString
modifier|&
name|pname
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|v
parameter_list|)
block|{
specifier|const
name|QFormBuilderStrings
modifier|&
name|strings
init|=
name|QFormBuilderStrings
operator|::
name|instance
argument_list|()
decl_stmt|;
name|DomProperty
modifier|*
name|dom_prop
init|=
operator|new
name|DomProperty
argument_list|()
decl_stmt|;
name|dom_prop
operator|->
name|setAttributeName
argument_list|(
name|pname
argument_list|)
expr_stmt|;
specifier|const
name|int
name|pindex
init|=
name|meta
operator|->
name|indexOfProperty
argument_list|(
name|pname
operator|.
name|toLatin1
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|pindex
operator|!=
operator|-
literal|1
condition|)
block|{
name|QMetaProperty
name|meta_property
init|=
name|meta
operator|->
name|property
argument_list|(
name|pindex
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|v
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|Int
operator|||
name|v
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|UInt
operator|)
operator|&&
name|meta_property
operator|.
name|isEnumType
argument_list|()
condition|)
block|{
specifier|const
name|QMetaEnum
name|e
init|=
name|meta_property
operator|.
name|enumerator
argument_list|()
decl_stmt|;
if|if
condition|(
name|e
operator|.
name|isFlag
argument_list|()
condition|)
name|dom_prop
operator|->
name|setElementSet
argument_list|(
name|QString
operator|::
name|fromAscii
argument_list|(
name|e
operator|.
name|valueToKeys
argument_list|(
name|v
operator|.
name|toInt
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|dom_prop
operator|->
name|setElementEnum
argument_list|(
name|QString
operator|::
name|fromAscii
argument_list|(
name|e
operator|.
name|valueToKey
argument_list|(
name|v
operator|.
name|toInt
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|dom_prop
return|;
block|}
if|if
condition|(
operator|!
name|meta_property
operator|.
name|hasStdCppSet
argument_list|()
operator|||
operator|(
name|isOfType
argument_list|(
name|meta
argument_list|,
operator|&
name|QAbstractScrollArea
operator|::
name|staticMetaObject
argument_list|)
operator|&&
name|pname
operator|==
name|strings
operator|.
name|cursorProperty
operator|)
condition|)
name|dom_prop
operator|->
name|setAttributeStdset
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// Try simple properties
if|if
condition|(
name|applySimpleProperty
argument_list|(
name|v
argument_list|,
name|isTranslatable
argument_list|(
name|pname
argument_list|,
name|v
argument_list|,
name|meta
argument_list|)
argument_list|,
name|dom_prop
argument_list|)
condition|)
return|return
name|dom_prop
return|;
comment|// Complex properties
switch|switch
condition|(
name|v
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|QVariant
operator|::
name|Palette
case|:
block|{
name|DomPalette
modifier|*
name|dom
init|=
operator|new
name|DomPalette
argument_list|()
decl_stmt|;
name|QPalette
name|palette
init|=
name|qvariant_cast
argument_list|<
name|QPalette
argument_list|>
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|palette
operator|.
name|setCurrentColorGroup
argument_list|(
name|QPalette
operator|::
name|Active
argument_list|)
expr_stmt|;
name|dom
operator|->
name|setElementActive
argument_list|(
name|afb
operator|->
name|saveColorGroup
argument_list|(
name|palette
argument_list|)
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setCurrentColorGroup
argument_list|(
name|QPalette
operator|::
name|Inactive
argument_list|)
expr_stmt|;
name|dom
operator|->
name|setElementInactive
argument_list|(
name|afb
operator|->
name|saveColorGroup
argument_list|(
name|palette
argument_list|)
argument_list|)
expr_stmt|;
name|palette
operator|.
name|setCurrentColorGroup
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|)
expr_stmt|;
name|dom
operator|->
name|setElementDisabled
argument_list|(
name|afb
operator|->
name|saveColorGroup
argument_list|(
name|palette
argument_list|)
argument_list|)
expr_stmt|;
name|dom_prop
operator|->
name|setElementPalette
argument_list|(
name|dom
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
name|QVariant
operator|::
name|Brush
case|:
name|dom_prop
operator|->
name|setElementBrush
argument_list|(
name|afb
operator|->
name|saveBrush
argument_list|(
name|qvariant_cast
argument_list|<
name|QBrush
argument_list|>
argument_list|(
name|v
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
block|{
specifier|const
name|bool
name|hadAttributeStdset
init|=
name|dom_prop
operator|->
name|hasAttributeStdset
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|attributeStdset
init|=
name|dom_prop
operator|->
name|attributeStdset
argument_list|()
decl_stmt|;
operator|delete
name|dom_prop
expr_stmt|;
if|if
condition|(
name|afb
operator|->
name|resourceBuilder
argument_list|()
operator|->
name|isResourceType
argument_list|(
name|v
argument_list|)
condition|)
block|{
name|dom_prop
operator|=
name|afb
operator|->
name|resourceBuilder
argument_list|()
operator|->
name|saveResource
argument_list|(
name|afb
operator|->
name|workingDirectory
argument_list|()
argument_list|,
name|v
argument_list|)
expr_stmt|;
if|if
condition|(
name|dom_prop
condition|)
block|{
name|dom_prop
operator|->
name|setAttributeName
argument_list|(
name|pname
argument_list|)
expr_stmt|;
if|if
condition|(
name|hadAttributeStdset
condition|)
name|dom_prop
operator|->
name|setAttributeStdset
argument_list|(
name|attributeStdset
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
name|uiLibWarning
argument_list|(
name|msgCannotWriteProperty
argument_list|(
name|pname
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
return|return
name|dom_prop
return|;
block|}
ifdef|#
directive|ifdef
name|QFORMINTERNAL_NAMESPACE
block|}
end_namespace
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
