begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the Qt Designer of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"formscriptrunner_p.h"
end_include
begin_include
include|#
directive|include
file|"formbuilderextra_p.h"
end_include
begin_include
include|#
directive|include
file|"ui4_p.h"
end_include
begin_include
include|#
directive|include
file|<QtScript/QScriptEngine>
end_include
begin_include
include|#
directive|include
file|<QtGui/QWidget>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_include
include|#
directive|include
file|<QtCore/QCoreApplication>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_namespace
namespace|namespace
block|{
DECL|enumerator|debugFormScriptRunner
enum|enum
block|{
name|debugFormScriptRunner
init|=
literal|0
block|}
enum|;
block|}
end_namespace
begin_ifdef
ifdef|#
directive|ifdef
name|QFORMINTERNAL_NAMESPACE
end_ifdef
begin_namespace
DECL|namespace|QFormInternal
namespace|namespace
name|QFormInternal
block|{
endif|#
directive|endif
DECL|class|QFormScriptRunnerPrivate
class|class
name|QFormScriptRunner
operator|::
name|QFormScriptRunnerPrivate
block|{
public|public:
DECL|function|QFormScriptRunnerPrivate
name|QFormScriptRunnerPrivate
parameter_list|()
member_init_list|:
name|m_options
argument_list|(
name|DisableScripts
argument_list|)
block|{}
DECL|function|clearErrors
name|void
name|clearErrors
parameter_list|()
block|{
name|m_errors
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|bool
name|run
parameter_list|(
specifier|const
name|QString
modifier|&
name|script
parameter_list|,
name|QWidget
modifier|*
name|widget
parameter_list|,
specifier|const
name|WidgetList
modifier|&
name|children
parameter_list|,
name|QString
modifier|*
name|errorMessage
parameter_list|)
function_decl|;
specifier|static
name|void
name|initializeEngine
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|,
specifier|const
name|WidgetList
modifier|&
name|children
parameter_list|,
name|QScriptEngine
modifier|&
name|scriptEngine
parameter_list|)
function_decl|;
specifier|static
name|QString
name|engineError
parameter_list|(
name|QScriptEngine
modifier|&
name|scriptEngine
parameter_list|)
function_decl|;
DECL|function|options
name|Options
name|options
parameter_list|()
specifier|const
block|{
return|return
name|m_options
return|;
block|}
DECL|function|setOptions
name|void
name|setOptions
parameter_list|(
name|Options
name|options
parameter_list|)
block|{
name|m_options
operator|=
name|options
expr_stmt|;
block|}
DECL|function|errors
name|Errors
name|errors
parameter_list|()
specifier|const
block|{
return|return
name|m_errors
return|;
block|}
private|private:
DECL|member|m_scriptEngine
name|QScriptEngine
name|m_scriptEngine
decl_stmt|;
DECL|member|m_options
name|Options
name|m_options
decl_stmt|;
DECL|member|m_errors
name|Errors
name|m_errors
decl_stmt|;
block|}
class|;
DECL|function|run
name|bool
name|QFormScriptRunner
operator|::
name|QFormScriptRunnerPrivate
operator|::
name|run
parameter_list|(
specifier|const
name|QString
modifier|&
name|script
parameter_list|,
name|QWidget
modifier|*
name|widget
parameter_list|,
specifier|const
name|WidgetList
modifier|&
name|children
parameter_list|,
name|QString
modifier|*
name|errorMessage
parameter_list|)
block|{
name|bool
name|rc
init|=
literal|false
decl_stmt|;
name|initializeEngine
argument_list|(
name|widget
argument_list|,
name|children
argument_list|,
name|m_scriptEngine
argument_list|)
expr_stmt|;
do|do
block|{
name|m_scriptEngine
operator|.
name|evaluate
argument_list|(
name|script
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_scriptEngine
operator|.
name|hasUncaughtException
argument_list|()
condition|)
block|{
operator|*
name|errorMessage
operator|=
name|QCoreApplication
operator|::
name|tr
argument_list|(
literal|"Exception at line %1: %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|m_scriptEngine
operator|.
name|uncaughtExceptionLineNumber
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|engineError
argument_list|(
name|m_scriptEngine
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
name|rc
operator|=
literal|true
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|m_scriptEngine
operator|.
name|popContext
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|rc
condition|)
block|{
name|Error
name|error
decl_stmt|;
name|error
operator|.
name|objectName
operator|=
name|widget
operator|->
name|objectName
argument_list|()
expr_stmt|;
name|error
operator|.
name|script
operator|=
name|script
expr_stmt|;
name|error
operator|.
name|errorMessage
operator|=
operator|*
name|errorMessage
expr_stmt|;
name|m_errors
operator|.
name|push_back
argument_list|(
name|error
argument_list|)
expr_stmt|;
block|}
return|return
name|rc
return|;
block|}
DECL|function|initializeEngine
name|void
name|QFormScriptRunner
operator|::
name|QFormScriptRunnerPrivate
operator|::
name|initializeEngine
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|,
specifier|const
name|WidgetList
modifier|&
name|children
parameter_list|,
name|QScriptEngine
modifier|&
name|scriptEngine
parameter_list|)
block|{
comment|// Populate the script variables. This pushes a context which must be popped.
name|QScriptContext
modifier|*
name|ctx
init|=
name|scriptEngine
operator|.
name|pushContext
argument_list|()
decl_stmt|;
name|QScriptValue
name|widgetObject
init|=
name|scriptEngine
operator|.
name|newQObject
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|QScriptValue
name|childrenArray
init|=
name|scriptEngine
operator|.
name|newArray
argument_list|(
name|children
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|children
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|childrenArray
operator|.
name|setProperty
argument_list|(
name|i
argument_list|,
name|scriptEngine
operator|.
name|newQObject
argument_list|(
name|children
index|[
name|i
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|const
name|QFormBuilderStrings
modifier|&
name|strings
init|=
name|QFormBuilderStrings
operator|::
name|instance
argument_list|()
decl_stmt|;
name|ctx
operator|->
name|activationObject
argument_list|()
operator|.
name|setProperty
argument_list|(
name|strings
operator|.
name|scriptWidgetVariable
argument_list|,
name|widgetObject
argument_list|)
expr_stmt|;
name|ctx
operator|->
name|activationObject
argument_list|()
operator|.
name|setProperty
argument_list|(
name|strings
operator|.
name|scriptChildWidgetsVariable
argument_list|,
name|childrenArray
argument_list|)
expr_stmt|;
block|}
DECL|function|engineError
name|QString
name|QFormScriptRunner
operator|::
name|QFormScriptRunnerPrivate
operator|::
name|engineError
parameter_list|(
name|QScriptEngine
modifier|&
name|scriptEngine
parameter_list|)
block|{
name|QScriptValue
name|error
init|=
name|scriptEngine
operator|.
name|evaluate
argument_list|(
name|QLatin1String
argument_list|(
literal|"Error"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|error
operator|.
name|toString
argument_list|()
return|;
return|return
name|QCoreApplication
operator|::
name|tr
argument_list|(
literal|"Unknown error"
argument_list|)
return|;
block|}
comment|// -- QFormScriptRunner
DECL|function|QFormScriptRunner
name|QFormScriptRunner
operator|::
name|QFormScriptRunner
parameter_list|()
member_init_list|:
name|m_impl
argument_list|(
operator|new
name|QFormScriptRunnerPrivate
argument_list|)
block|{ }
DECL|function|~QFormScriptRunner
name|QFormScriptRunner
operator|::
name|~
name|QFormScriptRunner
parameter_list|()
block|{
operator|delete
name|m_impl
expr_stmt|;
block|}
DECL|function|run
name|bool
name|QFormScriptRunner
operator|::
name|run
parameter_list|(
specifier|const
name|DomWidget
modifier|*
name|domWidget
parameter_list|,
specifier|const
name|QString
modifier|&
name|customWidgetScript
parameter_list|,
name|QWidget
modifier|*
name|widget
parameter_list|,
specifier|const
name|WidgetList
modifier|&
name|children
parameter_list|,
name|QString
modifier|*
name|errorMessage
parameter_list|)
block|{
typedef|typedef
name|QList
argument_list|<
name|DomScript
modifier|*
argument_list|>
name|DomScripts
typedef|;
specifier|const
name|Options
name|scriptOptions
init|=
name|m_impl
operator|->
name|options
argument_list|()
decl_stmt|;
if|if
condition|(
name|scriptOptions
operator|&
name|DisableScripts
condition|)
return|return
literal|true
return|;
comment|// get list
specifier|const
name|DomScripts
name|domScripts
init|=
name|domWidget
operator|->
name|elementScript
argument_list|()
decl_stmt|;
comment|// Concatenate snippets, starting with custom widget script
name|QString
name|script
init|=
name|customWidgetScript
decl_stmt|;
if|if
condition|(
name|script
operator|.
name|isEmpty
argument_list|()
operator|&&
name|domScripts
operator|.
name|empty
argument_list|()
condition|)
return|return
literal|true
return|;
foreach|foreach
control|(
specifier|const
name|DomScript
modifier|*
name|scriptSnippet
decl|,
name|domScripts
control|)
block|{
comment|// Ensure new line
if|if
condition|(
operator|!
name|script
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|script
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
condition|)
name|script
operator|+=
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|script
operator|+=
name|scriptSnippet
operator|->
name|text
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|script
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|true
return|;
specifier|const
name|bool
name|rc
init|=
name|m_impl
operator|->
name|run
argument_list|(
name|script
argument_list|,
name|widget
argument_list|,
name|children
argument_list|,
name|errorMessage
argument_list|)
decl_stmt|;
if|if
condition|(
name|debugFormScriptRunner
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"For "
operator|<<
name|widget
operator|<<
literal|" with "
operator|<<
name|children
operator|.
name|size
argument_list|()
operator|<<
literal|" children, ran: "
operator|<<
name|script
expr_stmt|;
if|if
condition|(
operator|!
name|rc
condition|)
name|qDebug
argument_list|()
operator|<<
operator|*
name|errorMessage
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|rc
condition|)
block|{
if|if
condition|(
operator|!
operator|(
name|scriptOptions
operator|&
name|DisableWarnings
operator|)
condition|)
block|{
specifier|const
name|QString
name|message
init|=
name|QCoreApplication
operator|::
name|tr
argument_list|(
literal|"An error occurred while running the script for %1: %2\nScript: %3"
argument_list|)
operator|.
name|arg
argument_list|(
name|widget
operator|->
name|objectName
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
operator|*
name|errorMessage
argument_list|)
operator|.
name|arg
argument_list|(
name|script
argument_list|)
decl_stmt|;
name|qWarning
argument_list|()
operator|<<
name|message
expr_stmt|;
block|}
block|}
return|return
name|rc
return|;
block|}
DECL|function|options
name|QFormScriptRunner
operator|::
name|Options
name|QFormScriptRunner
operator|::
name|options
parameter_list|()
specifier|const
block|{
return|return
name|m_impl
operator|->
name|options
argument_list|()
return|;
block|}
DECL|function|setOptions
name|void
name|QFormScriptRunner
operator|::
name|setOptions
parameter_list|(
name|Options
name|options
parameter_list|)
block|{
name|m_impl
operator|->
name|setOptions
argument_list|(
name|options
argument_list|)
expr_stmt|;
block|}
DECL|function|errors
name|QFormScriptRunner
operator|::
name|Errors
name|QFormScriptRunner
operator|::
name|errors
parameter_list|()
specifier|const
block|{
return|return
name|m_impl
operator|->
name|errors
argument_list|()
return|;
block|}
DECL|function|clearErrors
name|void
name|QFormScriptRunner
operator|::
name|clearErrors
parameter_list|()
block|{
name|m_impl
operator|->
name|clearErrors
argument_list|()
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|QFORMINTERNAL_NAMESPACE
block|}
end_namespace
begin_comment
comment|// namespace QFormInternal
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
