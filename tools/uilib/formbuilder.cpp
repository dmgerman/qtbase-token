begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the Qt Designer of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"customwidget.h"
end_include
begin_include
include|#
directive|include
file|"formbuilder.h"
end_include
begin_include
include|#
directive|include
file|"formbuilderextra_p.h"
end_include
begin_include
include|#
directive|include
file|"ui4_p.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/QtGui>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QtWidgets>
end_include
begin_include
include|#
directive|include
file|<QtCore/QCoreApplication>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_ifdef
ifdef|#
directive|ifdef
name|QFORMINTERNAL_NAMESPACE
end_ifdef
begin_namespace
DECL|namespace|QFormInternal
namespace|namespace
name|QFormInternal
block|{
endif|#
directive|endif
comment|/*!     \class QFormBuilder      \brief The QFormBuilder class is used to dynamically construct     user interfaces from UI files at run-time.      \inmodule QtDesigner      The QFormBuilder class provides a mechanism for dynamically     creating user interfaces at run-time, based on UI files     created with \QD. For example:      \snippet doc/src/snippets/code/tools_designer_src_lib_uilib_formbuilder.cpp 0      By including the user interface in the example's resources (\c     myForm.qrc), we ensure that it will be present when the example is     run:      \snippet doc/src/snippets/code/tools_designer_src_lib_uilib_formbuilder.cpp 1      QFormBuilder extends the QAbstractFormBuilder base class with a     number of functions that are used to support custom widget     plugins:      \list     \o pluginPaths() returns the list of paths that the form builder        searches when loading custom widget plugins.     \o addPluginPath() allows additional paths to be registered with        the form builder.     \o setPluginPath() is used to replace the existing list of paths        with a list obtained from some other source.     \o clearPluginPaths() removes all paths registered with the form        builder.     \o customWidgets() returns a list of interfaces to plugins that        can be used to create new instances of registered custom widgets.     \endlist      The QFormBuilder class is typically used by custom components and     applications that embed \QD. Standalone applications that need to     dynamically generate user interfaces at run-time use the     QUiLoader class, found in the QtUiTools module.      \sa QAbstractFormBuilder, {QtUiTools Module} */
comment|/*!     \fn QFormBuilder::QFormBuilder()      Constructs a new form builder. */
DECL|function|QFormBuilder
name|QFormBuilder
operator|::
name|QFormBuilder
parameter_list|()
member_init_list|:
name|QAbstractFormBuilder
argument_list|()
block|{ }
comment|/*!     Destroys the form builder. */
DECL|function|~QFormBuilder
name|QFormBuilder
operator|::
name|~
name|QFormBuilder
parameter_list|()
block|{ }
comment|/*!     \internal */
DECL|function|create
name|QWidget
modifier|*
name|QFormBuilder
operator|::
name|create
parameter_list|(
name|DomWidget
modifier|*
name|ui_widget
parameter_list|,
name|QWidget
modifier|*
name|parentWidget
parameter_list|)
block|{
name|QFormBuilderExtra
modifier|*
name|fb
init|=
name|QFormBuilderExtra
operator|::
name|instance
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fb
operator|->
name|parentWidgetIsSet
argument_list|()
condition|)
name|fb
operator|->
name|setParentWidget
argument_list|(
name|parentWidget
argument_list|)
expr_stmt|;
comment|// Is this a QLayoutWidget with a margin of 0: Not a known page-based
comment|// container and no method for adding pages registered.
name|fb
operator|->
name|setProcessingLayoutWidget
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|ui_widget
operator|->
name|attributeClass
argument_list|()
operator|==
name|QFormBuilderStrings
operator|::
name|instance
argument_list|()
operator|.
name|qWidgetClass
operator|&&
operator|!
name|ui_widget
operator|->
name|hasAttributeNative
argument_list|()
operator|&&
name|parentWidget
ifndef|#
directive|ifndef
name|QT_NO_MAINWINDOW
operator|&&
operator|!
name|qobject_cast
argument_list|<
name|QMainWindow
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|)
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_TOOLBOX
operator|&&
operator|!
name|qobject_cast
argument_list|<
name|QToolBox
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|)
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_STACKEDWIDGET
operator|&&
operator|!
name|qobject_cast
argument_list|<
name|QStackedWidget
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|)
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_STACKEDWIDGET
operator|&&
operator|!
name|qobject_cast
argument_list|<
name|QTabWidget
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|)
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_SCROLLAREA
operator|&&
operator|!
name|qobject_cast
argument_list|<
name|QScrollArea
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|)
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_MDIAREA
operator|&&
operator|!
name|qobject_cast
argument_list|<
name|QMdiArea
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|)
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_DOCKWIDGET
operator|&&
operator|!
name|qobject_cast
argument_list|<
name|QDockWidget
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|)
endif|#
directive|endif
condition|)
block|{
specifier|const
name|QString
name|parentClassName
init|=
name|QLatin1String
argument_list|(
name|parentWidget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fb
operator|->
name|isCustomWidgetContainer
argument_list|(
name|parentClassName
argument_list|)
condition|)
name|fb
operator|->
name|setProcessingLayoutWidget
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
return|return
name|QAbstractFormBuilder
operator|::
name|create
argument_list|(
name|ui_widget
argument_list|,
name|parentWidget
argument_list|)
return|;
block|}
comment|/*!     \internal */
DECL|function|createWidget
name|QWidget
modifier|*
name|QFormBuilder
operator|::
name|createWidget
parameter_list|(
specifier|const
name|QString
modifier|&
name|widgetName
parameter_list|,
name|QWidget
modifier|*
name|parentWidget
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
if|if
condition|(
name|widgetName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|//: Empty class name passed to widget factory method
name|qWarning
argument_list|()
operator|<<
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QFormBuilder"
argument_list|,
literal|"An empty class name was passed on to %1 (object name: '%2')."
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
name|Q_FUNC_INFO
argument_list|)
argument_list|,
name|name
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|QWidget
modifier|*
name|w
init|=
literal|0
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_TABWIDGET
if|if
condition|(
name|qobject_cast
argument_list|<
name|QTabWidget
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|)
condition|)
name|parentWidget
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_STACKEDWIDGET
if|if
condition|(
name|qobject_cast
argument_list|<
name|QStackedWidget
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|)
condition|)
name|parentWidget
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_TOOLBOX
if|if
condition|(
name|qobject_cast
argument_list|<
name|QToolBox
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|)
condition|)
name|parentWidget
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
comment|// ### special-casing for Line (QFrame) -- fix for 4.2
do|do
block|{
if|if
condition|(
name|widgetName
operator|==
name|QFormBuilderStrings
operator|::
name|instance
argument_list|()
operator|.
name|lineClass
condition|)
block|{
name|w
operator|=
operator|new
name|QFrame
argument_list|(
name|parentWidget
argument_list|)
expr_stmt|;
cast|static_cast
argument_list|<
name|QFrame
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
operator|->
name|setFrameStyle
argument_list|(
name|QFrame
operator|::
name|HLine
operator||
name|QFrame
operator|::
name|Sunken
argument_list|)
expr_stmt|;
break|break;
block|}
specifier|const
name|QByteArray
name|widgetNameBA
init|=
name|widgetName
operator|.
name|toUtf8
argument_list|()
decl_stmt|;
specifier|const
name|char
modifier|*
name|widgetNameC
init|=
name|widgetNameBA
operator|.
name|constData
argument_list|()
decl_stmt|;
if|if
condition|(
name|w
condition|)
block|{
comment|// symmetry for macro
block|}
DECL|macro|DECLARE_LAYOUT
define|#
directive|define
name|DECLARE_LAYOUT
parameter_list|(
name|L
parameter_list|,
name|C
parameter_list|)
DECL|macro|DECLARE_COMPAT_WIDGET
define|#
directive|define
name|DECLARE_COMPAT_WIDGET
parameter_list|(
name|W
parameter_list|,
name|C
parameter_list|)
DECL|macro|DECLARE_WIDGET
define|#
directive|define
name|DECLARE_WIDGET
parameter_list|(
name|W
parameter_list|,
name|C
parameter_list|)
value|else if (!qstrcmp(widgetNameC, #W)) { Q_ASSERT(w == 0); w = new W(parentWidget); }
DECL|macro|DECLARE_WIDGET_1
define|#
directive|define
name|DECLARE_WIDGET_1
parameter_list|(
name|W
parameter_list|,
name|C
parameter_list|)
value|else if (!qstrcmp(widgetNameC, #W)) { Q_ASSERT(w == 0); w = new W(0, parentWidget); }
include|#
directive|include
file|"widgets.table"
DECL|macro|DECLARE_COMPAT_WIDGET
undef|#
directive|undef
name|DECLARE_COMPAT_WIDGET
DECL|macro|DECLARE_LAYOUT
undef|#
directive|undef
name|DECLARE_LAYOUT
DECL|macro|DECLARE_WIDGET
undef|#
directive|undef
name|DECLARE_WIDGET
DECL|macro|DECLARE_WIDGET_1
undef|#
directive|undef
name|DECLARE_WIDGET_1
if|if
condition|(
name|w
condition|)
break|break;
comment|// try with a registered custom widget
name|QDesignerCustomWidgetInterface
modifier|*
name|factory
init|=
name|m_customWidgets
operator|.
name|value
argument_list|(
name|widgetName
argument_list|)
decl_stmt|;
if|if
condition|(
name|factory
operator|!=
literal|0
condition|)
name|w
operator|=
name|factory
operator|->
name|createWidget
argument_list|(
name|parentWidget
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
literal|false
condition|)
do|;
name|QFormBuilderExtra
modifier|*
name|fb
init|=
name|QFormBuilderExtra
operator|::
name|instance
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|==
literal|0
condition|)
block|{
comment|// Attempt to instantiate base class of promoted/custom widgets
specifier|const
name|QString
name|baseClassName
init|=
name|fb
operator|->
name|customWidgetBaseClass
argument_list|(
name|widgetName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|baseClassName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QFormBuilder"
argument_list|,
literal|"QFormBuilder was unable to create a custom widget of the class '%1'; defaulting to base class '%2'."
argument_list|)
operator|.
name|arg
argument_list|(
name|widgetName
argument_list|,
name|baseClassName
argument_list|)
expr_stmt|;
return|return
name|createWidget
argument_list|(
name|baseClassName
argument_list|,
name|parentWidget
argument_list|,
name|name
argument_list|)
return|;
block|}
block|}
if|if
condition|(
name|w
operator|==
literal|0
condition|)
block|{
comment|// nothing to do
name|qWarning
argument_list|()
operator|<<
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QFormBuilder"
argument_list|,
literal|"QFormBuilder was unable to create a widget of the class '%1'."
argument_list|)
operator|.
name|arg
argument_list|(
name|widgetName
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
name|w
operator|->
name|setObjectName
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|qobject_cast
argument_list|<
name|QDialog
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
condition|)
name|w
operator|->
name|setParent
argument_list|(
name|parentWidget
argument_list|)
expr_stmt|;
return|return
name|w
return|;
block|}
comment|/*!     \internal */
DECL|function|createLayout
name|QLayout
modifier|*
name|QFormBuilder
operator|::
name|createLayout
parameter_list|(
specifier|const
name|QString
modifier|&
name|layoutName
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
name|QLayout
modifier|*
name|l
init|=
literal|0
decl_stmt|;
name|QWidget
modifier|*
name|parentWidget
init|=
name|qobject_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|QLayout
modifier|*
name|parentLayout
init|=
name|qobject_cast
argument_list|<
name|QLayout
operator|*
argument_list|>
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|parentWidget
operator|||
name|parentLayout
argument_list|)
expr_stmt|;
DECL|macro|DECLARE_WIDGET
define|#
directive|define
name|DECLARE_WIDGET
parameter_list|(
name|W
parameter_list|,
name|C
parameter_list|)
DECL|macro|DECLARE_COMPAT_WIDGET
define|#
directive|define
name|DECLARE_COMPAT_WIDGET
parameter_list|(
name|W
parameter_list|,
name|C
parameter_list|)
DECL|macro|DECLARE_LAYOUT
define|#
directive|define
name|DECLARE_LAYOUT
parameter_list|(
name|L
parameter_list|,
name|C
parameter_list|)
define|\
value|if (layoutName == QLatin1String(#L)) { \         Q_ASSERT(l == 0); \         l = parentLayout \             ? new L() \             : new L(parentWidget); \     }
include|#
directive|include
file|"widgets.table"
DECL|macro|DECLARE_LAYOUT
undef|#
directive|undef
name|DECLARE_LAYOUT
DECL|macro|DECLARE_COMPAT_WIDGET
undef|#
directive|undef
name|DECLARE_COMPAT_WIDGET
DECL|macro|DECLARE_WIDGET
undef|#
directive|undef
name|DECLARE_WIDGET
if|if
condition|(
name|l
condition|)
block|{
name|l
operator|->
name|setObjectName
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|parentLayout
condition|)
block|{
name|QWidget
modifier|*
name|w
init|=
name|qobject_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|parentLayout
operator|->
name|parent
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|w
operator|&&
name|w
operator|->
name|inherits
argument_list|(
literal|"Q3GroupBox"
argument_list|)
condition|)
block|{
name|l
operator|->
name|setContentsMargins
argument_list|(
name|w
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_LayoutLeftMargin
argument_list|)
argument_list|,
name|w
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_LayoutTopMargin
argument_list|)
argument_list|,
name|w
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_LayoutRightMargin
argument_list|)
argument_list|,
name|w
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_LayoutBottomMargin
argument_list|)
argument_list|)
expr_stmt|;
name|QGridLayout
modifier|*
name|grid
init|=
name|qobject_cast
argument_list|<
name|QGridLayout
operator|*
argument_list|>
argument_list|(
name|l
argument_list|)
decl_stmt|;
if|if
condition|(
name|grid
condition|)
block|{
name|grid
operator|->
name|setHorizontalSpacing
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|grid
operator|->
name|setVerticalSpacing
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|l
operator|->
name|setSpacing
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|l
operator|->
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignTop
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"QFormBuilder"
argument_list|,
literal|"The layout type `%1' is not supported."
argument_list|)
operator|.
name|arg
argument_list|(
name|layoutName
argument_list|)
expr_stmt|;
block|}
return|return
name|l
return|;
block|}
comment|/*!     \internal */
DECL|function|addItem
name|bool
name|QFormBuilder
operator|::
name|addItem
parameter_list|(
name|DomLayoutItem
modifier|*
name|ui_item
parameter_list|,
name|QLayoutItem
modifier|*
name|item
parameter_list|,
name|QLayout
modifier|*
name|layout
parameter_list|)
block|{
return|return
name|QAbstractFormBuilder
operator|::
name|addItem
argument_list|(
name|ui_item
argument_list|,
name|item
argument_list|,
name|layout
argument_list|)
return|;
block|}
comment|/*!     \internal */
DECL|function|addItem
name|bool
name|QFormBuilder
operator|::
name|addItem
parameter_list|(
name|DomWidget
modifier|*
name|ui_widget
parameter_list|,
name|QWidget
modifier|*
name|widget
parameter_list|,
name|QWidget
modifier|*
name|parentWidget
parameter_list|)
block|{
return|return
name|QAbstractFormBuilder
operator|::
name|addItem
argument_list|(
name|ui_widget
argument_list|,
name|widget
argument_list|,
name|parentWidget
argument_list|)
return|;
block|}
comment|/*!     \internal */
DECL|function|widgetByName
name|QWidget
modifier|*
name|QFormBuilder
operator|::
name|widgetByName
parameter_list|(
name|QWidget
modifier|*
name|topLevel
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|topLevel
argument_list|)
expr_stmt|;
if|if
condition|(
name|topLevel
operator|->
name|objectName
argument_list|()
operator|==
name|name
condition|)
return|return
name|topLevel
return|;
return|return
name|topLevel
operator|->
name|findChild
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|function|objectByName
specifier|static
name|QObject
modifier|*
name|objectByName
parameter_list|(
name|QWidget
modifier|*
name|topLevel
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|topLevel
argument_list|)
expr_stmt|;
if|if
condition|(
name|topLevel
operator|->
name|objectName
argument_list|()
operator|==
name|name
condition|)
return|return
name|topLevel
return|;
return|return
name|topLevel
operator|->
name|findChild
argument_list|<
name|QObject
operator|*
argument_list|>
argument_list|(
name|name
argument_list|)
return|;
block|}
comment|/*!     \internal */
DECL|function|createConnections
name|void
name|QFormBuilder
operator|::
name|createConnections
parameter_list|(
name|DomConnections
modifier|*
name|ui_connections
parameter_list|,
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
typedef|typedef
name|QList
argument_list|<
name|DomConnection
modifier|*
argument_list|>
name|DomConnectionList
typedef|;
name|Q_ASSERT
argument_list|(
name|widget
operator|!=
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|ui_connections
operator|==
literal|0
condition|)
return|return;
specifier|const
name|DomConnectionList
name|connections
init|=
name|ui_connections
operator|->
name|elementConnection
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|connections
operator|.
name|empty
argument_list|()
condition|)
block|{
specifier|const
name|DomConnectionList
operator|::
name|const_iterator
name|cend
init|=
name|connections
operator|.
name|constEnd
argument_list|()
decl_stmt|;
for|for
control|(
name|DomConnectionList
operator|::
name|const_iterator
name|it
init|=
name|connections
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|cend
condition|;
operator|++
name|it
control|)
block|{
name|QObject
modifier|*
name|sender
init|=
name|objectByName
argument_list|(
name|widget
argument_list|,
operator|(
operator|*
name|it
operator|)
operator|->
name|elementSender
argument_list|()
argument_list|)
decl_stmt|;
name|QObject
modifier|*
name|receiver
init|=
name|objectByName
argument_list|(
name|widget
argument_list|,
operator|(
operator|*
name|it
operator|)
operator|->
name|elementReceiver
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sender
operator|||
operator|!
name|receiver
condition|)
continue|continue;
name|QByteArray
name|sig
init|=
operator|(
operator|*
name|it
operator|)
operator|->
name|elementSignal
argument_list|()
operator|.
name|toUtf8
argument_list|()
decl_stmt|;
name|sig
operator|.
name|prepend
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
name|QByteArray
name|sl
init|=
operator|(
operator|*
name|it
operator|)
operator|->
name|elementSlot
argument_list|()
operator|.
name|toUtf8
argument_list|()
decl_stmt|;
name|sl
operator|.
name|prepend
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|sender
argument_list|,
name|sig
argument_list|,
name|receiver
argument_list|,
name|sl
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|/*!     \internal */
DECL|function|create
name|QWidget
modifier|*
name|QFormBuilder
operator|::
name|create
parameter_list|(
name|DomUI
modifier|*
name|ui
parameter_list|,
name|QWidget
modifier|*
name|parentWidget
parameter_list|)
block|{
return|return
name|QAbstractFormBuilder
operator|::
name|create
argument_list|(
name|ui
argument_list|,
name|parentWidget
argument_list|)
return|;
block|}
comment|/*!     \internal */
DECL|function|create
name|QLayout
modifier|*
name|QFormBuilder
operator|::
name|create
parameter_list|(
name|DomLayout
modifier|*
name|ui_layout
parameter_list|,
name|QLayout
modifier|*
name|layout
parameter_list|,
name|QWidget
modifier|*
name|parentWidget
parameter_list|)
block|{
name|QFormBuilderExtra
modifier|*
name|fb
init|=
name|QFormBuilderExtra
operator|::
name|instance
argument_list|(
name|this
argument_list|)
decl_stmt|;
comment|// Is this a temporary layout widget used to represent QLayout hierarchies in Designer?
comment|// Set its margins to 0.
name|bool
name|layoutWidget
init|=
name|fb
operator|->
name|processingLayoutWidget
argument_list|()
decl_stmt|;
name|QLayout
modifier|*
name|l
init|=
name|QAbstractFormBuilder
operator|::
name|create
argument_list|(
name|ui_layout
argument_list|,
name|layout
argument_list|,
name|parentWidget
argument_list|)
decl_stmt|;
if|if
condition|(
name|layoutWidget
condition|)
block|{
specifier|const
name|QFormBuilderStrings
modifier|&
name|strings
init|=
name|QFormBuilderStrings
operator|::
name|instance
argument_list|()
decl_stmt|;
name|int
name|left
decl_stmt|,
name|top
decl_stmt|,
name|right
decl_stmt|,
name|bottom
decl_stmt|;
name|left
operator|=
name|top
operator|=
name|right
operator|=
name|bottom
operator|=
literal|0
expr_stmt|;
specifier|const
name|DomPropertyHash
name|properties
init|=
name|propertyMap
argument_list|(
name|ui_layout
operator|->
name|elementProperty
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|DomProperty
modifier|*
name|prop
init|=
name|properties
operator|.
name|value
argument_list|(
name|strings
operator|.
name|leftMarginProperty
argument_list|)
condition|)
name|left
operator|=
name|prop
operator|->
name|elementNumber
argument_list|()
expr_stmt|;
if|if
condition|(
name|DomProperty
modifier|*
name|prop
init|=
name|properties
operator|.
name|value
argument_list|(
name|strings
operator|.
name|topMarginProperty
argument_list|)
condition|)
name|top
operator|=
name|prop
operator|->
name|elementNumber
argument_list|()
expr_stmt|;
if|if
condition|(
name|DomProperty
modifier|*
name|prop
init|=
name|properties
operator|.
name|value
argument_list|(
name|strings
operator|.
name|rightMarginProperty
argument_list|)
condition|)
name|right
operator|=
name|prop
operator|->
name|elementNumber
argument_list|()
expr_stmt|;
if|if
condition|(
name|DomProperty
modifier|*
name|prop
init|=
name|properties
operator|.
name|value
argument_list|(
name|strings
operator|.
name|bottomMarginProperty
argument_list|)
condition|)
name|bottom
operator|=
name|prop
operator|->
name|elementNumber
argument_list|()
expr_stmt|;
name|l
operator|->
name|setContentsMargins
argument_list|(
name|left
argument_list|,
name|top
argument_list|,
name|right
argument_list|,
name|bottom
argument_list|)
expr_stmt|;
name|fb
operator|->
name|setProcessingLayoutWidget
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
return|return
name|l
return|;
block|}
comment|/*!     \internal */
DECL|function|create
name|QLayoutItem
modifier|*
name|QFormBuilder
operator|::
name|create
parameter_list|(
name|DomLayoutItem
modifier|*
name|ui_layoutItem
parameter_list|,
name|QLayout
modifier|*
name|layout
parameter_list|,
name|QWidget
modifier|*
name|parentWidget
parameter_list|)
block|{
return|return
name|QAbstractFormBuilder
operator|::
name|create
argument_list|(
name|ui_layoutItem
argument_list|,
name|layout
argument_list|,
name|parentWidget
argument_list|)
return|;
block|}
comment|/*!     \internal */
DECL|function|create
name|QAction
modifier|*
name|QFormBuilder
operator|::
name|create
parameter_list|(
name|DomAction
modifier|*
name|ui_action
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
block|{
return|return
name|QAbstractFormBuilder
operator|::
name|create
argument_list|(
name|ui_action
argument_list|,
name|parent
argument_list|)
return|;
block|}
comment|/*!     \internal */
DECL|function|create
name|QActionGroup
modifier|*
name|QFormBuilder
operator|::
name|create
parameter_list|(
name|DomActionGroup
modifier|*
name|ui_action_group
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
block|{
return|return
name|QAbstractFormBuilder
operator|::
name|create
argument_list|(
name|ui_action_group
argument_list|,
name|parent
argument_list|)
return|;
block|}
comment|/*!     Returns the list of paths the form builder searches for plugins.      \sa addPluginPath() */
DECL|function|pluginPaths
name|QStringList
name|QFormBuilder
operator|::
name|pluginPaths
parameter_list|()
specifier|const
block|{
return|return
name|m_pluginPaths
return|;
block|}
comment|/*!     Clears the list of paths that the form builder uses to search for     custom widget plugins.      \sa pluginPaths() */
DECL|function|clearPluginPaths
name|void
name|QFormBuilder
operator|::
name|clearPluginPaths
parameter_list|()
block|{
name|m_pluginPaths
operator|.
name|clear
argument_list|()
expr_stmt|;
name|updateCustomWidgets
argument_list|()
expr_stmt|;
block|}
comment|/*!     Adds a new plugin path specified by \a pluginPath to the list of     paths that will be searched by the form builder when loading a     custom widget plugin.      \sa setPluginPath(), clearPluginPaths() */
DECL|function|addPluginPath
name|void
name|QFormBuilder
operator|::
name|addPluginPath
parameter_list|(
specifier|const
name|QString
modifier|&
name|pluginPath
parameter_list|)
block|{
name|m_pluginPaths
operator|.
name|append
argument_list|(
name|pluginPath
argument_list|)
expr_stmt|;
name|updateCustomWidgets
argument_list|()
expr_stmt|;
block|}
comment|/*!     Sets the list of plugin paths to the list specified by \a pluginPaths.      \sa addPluginPath() */
DECL|function|setPluginPath
name|void
name|QFormBuilder
operator|::
name|setPluginPath
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|pluginPaths
parameter_list|)
block|{
name|m_pluginPaths
operator|=
name|pluginPaths
expr_stmt|;
name|updateCustomWidgets
argument_list|()
expr_stmt|;
block|}
DECL|function|insertPlugins
specifier|static
name|void
name|insertPlugins
parameter_list|(
name|QObject
modifier|*
name|o
parameter_list|,
name|QMap
argument_list|<
name|QString
argument_list|,
name|QDesignerCustomWidgetInterface
modifier|*
argument_list|>
modifier|*
name|customWidgets
parameter_list|)
block|{
comment|// step 1) try with a normal plugin
if|if
condition|(
name|QDesignerCustomWidgetInterface
modifier|*
name|iface
init|=
name|qobject_cast
argument_list|<
name|QDesignerCustomWidgetInterface
operator|*
argument_list|>
argument_list|(
name|o
argument_list|)
condition|)
block|{
name|customWidgets
operator|->
name|insert
argument_list|(
name|iface
operator|->
name|name
argument_list|()
argument_list|,
name|iface
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// step 2) try with a collection of plugins
if|if
condition|(
name|QDesignerCustomWidgetCollectionInterface
modifier|*
name|c
init|=
name|qobject_cast
argument_list|<
name|QDesignerCustomWidgetCollectionInterface
operator|*
argument_list|>
argument_list|(
name|o
argument_list|)
condition|)
block|{
foreach|foreach
control|(
name|QDesignerCustomWidgetInterface
modifier|*
name|iface
decl|,
name|c
operator|->
name|customWidgets
argument_list|()
control|)
name|customWidgets
operator|->
name|insert
argument_list|(
name|iface
operator|->
name|name
argument_list|()
argument_list|,
name|iface
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*!     \internal */
DECL|function|updateCustomWidgets
name|void
name|QFormBuilder
operator|::
name|updateCustomWidgets
parameter_list|()
block|{
name|m_customWidgets
operator|.
name|clear
argument_list|()
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|path
decl|,
name|m_pluginPaths
control|)
block|{
specifier|const
name|QDir
name|dir
argument_list|(
name|path
argument_list|)
decl_stmt|;
specifier|const
name|QStringList
name|candidates
init|=
name|dir
operator|.
name|entryList
argument_list|(
name|QDir
operator|::
name|Files
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|plugin
decl|,
name|candidates
control|)
block|{
if|if
condition|(
operator|!
name|QLibrary
operator|::
name|isLibrary
argument_list|(
name|plugin
argument_list|)
condition|)
continue|continue;
name|QString
name|loaderPath
init|=
name|path
decl_stmt|;
name|loaderPath
operator|+=
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|loaderPath
operator|+=
name|plugin
expr_stmt|;
name|QPluginLoader
name|loader
argument_list|(
name|loaderPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|loader
operator|.
name|load
argument_list|()
condition|)
name|insertPlugins
argument_list|(
name|loader
operator|.
name|instance
argument_list|()
argument_list|,
operator|&
name|m_customWidgets
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Check statically linked plugins
specifier|const
name|QObjectList
name|staticPlugins
init|=
name|QPluginLoader
operator|::
name|staticInstances
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|staticPlugins
operator|.
name|empty
argument_list|()
condition|)
foreach|foreach
control|(
name|QObject
modifier|*
name|o
decl|,
name|staticPlugins
control|)
name|insertPlugins
argument_list|(
name|o
argument_list|,
operator|&
name|m_customWidgets
argument_list|)
expr_stmt|;
block|}
comment|/*!     \fn QList<QDesignerCustomWidgetInterface*> QFormBuilder::customWidgets() const      Returns a list of the available plugins. */
DECL|function|customWidgets
name|QList
argument_list|<
name|QDesignerCustomWidgetInterface
modifier|*
argument_list|>
name|QFormBuilder
operator|::
name|customWidgets
parameter_list|()
specifier|const
block|{
return|return
name|m_customWidgets
operator|.
name|values
argument_list|()
return|;
block|}
comment|/*!     \internal */
DECL|function|applyProperties
name|void
name|QFormBuilder
operator|::
name|applyProperties
parameter_list|(
name|QObject
modifier|*
name|o
parameter_list|,
specifier|const
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
modifier|&
name|properties
parameter_list|)
block|{
typedef|typedef
name|QList
argument_list|<
name|DomProperty
modifier|*
argument_list|>
name|DomPropertyList
typedef|;
if|if
condition|(
name|properties
operator|.
name|empty
argument_list|()
condition|)
return|return;
name|QFormBuilderExtra
modifier|*
name|fb
init|=
name|QFormBuilderExtra
operator|::
name|instance
argument_list|(
name|this
argument_list|)
decl_stmt|;
specifier|const
name|QFormBuilderStrings
modifier|&
name|strings
init|=
name|QFormBuilderStrings
operator|::
name|instance
argument_list|()
decl_stmt|;
specifier|const
name|DomPropertyList
operator|::
name|const_iterator
name|cend
init|=
name|properties
operator|.
name|constEnd
argument_list|()
decl_stmt|;
for|for
control|(
name|DomPropertyList
operator|::
name|const_iterator
name|it
init|=
name|properties
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|cend
condition|;
operator|++
name|it
control|)
block|{
specifier|const
name|QVariant
name|v
init|=
name|toVariant
argument_list|(
name|o
operator|->
name|metaObject
argument_list|()
argument_list|,
operator|*
name|it
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|isNull
argument_list|()
condition|)
continue|continue;
specifier|const
name|QString
name|attributeName
init|=
operator|(
operator|*
name|it
operator|)
operator|->
name|attributeName
argument_list|()
decl_stmt|;
specifier|const
name|bool
name|isWidget
init|=
name|o
operator|->
name|isWidgetType
argument_list|()
decl_stmt|;
if|if
condition|(
name|isWidget
operator|&&
name|o
operator|->
name|parent
argument_list|()
operator|==
name|fb
operator|->
name|parentWidget
argument_list|()
operator|&&
name|attributeName
operator|==
name|strings
operator|.
name|geometryProperty
condition|)
block|{
comment|// apply only the size part of a geometry for the root widget
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|o
argument_list|)
operator|->
name|resize
argument_list|(
name|qvariant_cast
argument_list|<
name|QRect
argument_list|>
argument_list|(
name|v
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|fb
operator|->
name|applyPropertyInternally
argument_list|(
name|o
argument_list|,
name|attributeName
argument_list|,
name|v
argument_list|)
condition|)
block|{         }
elseif|else
if|if
condition|(
name|isWidget
operator|&&
operator|!
name|qstrcmp
argument_list|(
literal|"QFrame"
argument_list|,
name|o
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
operator|&&
name|attributeName
operator|==
name|strings
operator|.
name|orientationProperty
condition|)
block|{
comment|// ### special-casing for Line (QFrame) -- try to fix me
name|o
operator|->
name|setProperty
argument_list|(
literal|"frameShape"
argument_list|,
name|v
argument_list|)
expr_stmt|;
comment|// v is of QFrame::Shape enum
block|}
else|else
block|{
name|o
operator|->
name|setProperty
argument_list|(
name|attributeName
operator|.
name|toUtf8
argument_list|()
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
block|}
block|}
ifdef|#
directive|ifdef
name|QFORMINTERNAL_NAMESPACE
block|}
end_namespace
begin_comment
comment|// namespace QFormInternal
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
