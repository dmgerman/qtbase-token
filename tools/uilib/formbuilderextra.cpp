begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the Qt Designer of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"formbuilderextra_p.h"
end_include
begin_include
include|#
directive|include
file|"abstractformbuilder.h"
end_include
begin_include
include|#
directive|include
file|"resourcebuilder_p.h"
end_include
begin_include
include|#
directive|include
file|"textbuilder_p.h"
end_include
begin_include
include|#
directive|include
file|"ui4_p.h"
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QLabel>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QBoxLayout>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QGridLayout>
end_include
begin_include
include|#
directive|include
file|<QtCore/QVariant>
end_include
begin_include
include|#
directive|include
file|<QtCore/qdebug.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/QTextStream>
end_include
begin_include
include|#
directive|include
file|<QtCore/QStringList>
end_include
begin_include
include|#
directive|include
file|<QtCore/QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<limits.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_ifdef
ifdef|#
directive|ifdef
name|QFORMINTERNAL_NAMESPACE
end_ifdef
begin_namespace
DECL|namespace|QFormInternal
namespace|namespace
name|QFormInternal
block|{
endif|#
directive|endif
DECL|function|uiLibWarning
name|void
name|uiLibWarning
parameter_list|(
specifier|const
name|QString
modifier|&
name|message
parameter_list|)
block|{
name|qWarning
argument_list|(
literal|"Designer: %s"
argument_list|,
name|qPrintable
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|CustomWidgetData
name|QFormBuilderExtra
operator|::
name|CustomWidgetData
operator|::
name|CustomWidgetData
parameter_list|()
member_init_list|:
name|isContainer
argument_list|(
literal|false
argument_list|)
block|{ }
DECL|function|CustomWidgetData
name|QFormBuilderExtra
operator|::
name|CustomWidgetData
operator|::
name|CustomWidgetData
parameter_list|(
specifier|const
name|DomCustomWidget
modifier|*
name|dcw
parameter_list|)
member_init_list|:
name|addPageMethod
argument_list|(
name|dcw
operator|->
name|elementAddPageMethod
argument_list|()
argument_list|)
member_init_list|,
name|baseClass
argument_list|(
name|dcw
operator|->
name|elementExtends
argument_list|()
argument_list|)
member_init_list|,
name|isContainer
argument_list|(
name|dcw
operator|->
name|hasElementContainer
argument_list|()
operator|&&
name|dcw
operator|->
name|elementContainer
argument_list|()
operator|!=
literal|0
argument_list|)
block|{
ifndef|#
directive|ifndef
name|QT_FORMBUILDER_NO_SCRIPT
if|if
condition|(
specifier|const
name|DomScript
modifier|*
name|domScript
init|=
name|dcw
operator|->
name|elementScript
argument_list|()
condition|)
name|script
operator|=
name|domScript
operator|->
name|text
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
DECL|function|QFormBuilderExtra
name|QFormBuilderExtra
operator|::
name|QFormBuilderExtra
parameter_list|()
member_init_list|:
name|m_defaultMargin
argument_list|(
name|INT_MIN
argument_list|)
member_init_list|,
name|m_defaultSpacing
argument_list|(
name|INT_MIN
argument_list|)
member_init_list|,
name|m_language
argument_list|(
name|QLatin1String
argument_list|(
literal|"c++"
argument_list|)
argument_list|)
member_init_list|,
name|m_layoutWidget
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_resourceBuilder
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_textBuilder
argument_list|(
literal|0
argument_list|)
block|{ }
DECL|function|~QFormBuilderExtra
name|QFormBuilderExtra
operator|::
name|~
name|QFormBuilderExtra
parameter_list|()
block|{
name|clearResourceBuilder
argument_list|()
expr_stmt|;
name|clearTextBuilder
argument_list|()
expr_stmt|;
block|}
DECL|function|clear
name|void
name|QFormBuilderExtra
operator|::
name|clear
parameter_list|()
block|{
name|m_buddies
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_parentWidget
operator|=
literal|0
expr_stmt|;
name|m_parentWidgetIsSet
operator|=
literal|false
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_FORMBUILDER_NO_SCRIPT
name|m_FormScriptRunner
operator|.
name|clearErrors
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|m_customWidgetDataHash
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_buttonGroups
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|function|applyPropertyInternally
name|bool
name|QFormBuilderExtra
operator|::
name|applyPropertyInternally
parameter_list|(
name|QObject
modifier|*
name|o
parameter_list|,
specifier|const
name|QString
modifier|&
name|propertyName
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|)
block|{
comment|// Store buddies and apply them later on as the widgets might not exist yet.
name|QLabel
modifier|*
name|label
init|=
name|qobject_cast
argument_list|<
name|QLabel
operator|*
argument_list|>
argument_list|(
name|o
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|label
operator|||
name|propertyName
operator|!=
name|QFormBuilderStrings
operator|::
name|instance
argument_list|()
operator|.
name|buddyProperty
condition|)
return|return
literal|false
return|;
name|m_buddies
operator|.
name|insert
argument_list|(
name|label
argument_list|,
name|value
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|function|applyInternalProperties
name|void
name|QFormBuilderExtra
operator|::
name|applyInternalProperties
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|m_buddies
operator|.
name|empty
argument_list|()
condition|)
return|return;
specifier|const
name|BuddyHash
operator|::
name|const_iterator
name|cend
init|=
name|m_buddies
operator|.
name|constEnd
argument_list|()
decl_stmt|;
for|for
control|(
name|BuddyHash
operator|::
name|const_iterator
name|it
init|=
name|m_buddies
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|cend
condition|;
operator|++
name|it
control|)
name|applyBuddy
argument_list|(
name|it
operator|.
name|value
argument_list|()
argument_list|,
name|BuddyApplyAll
argument_list|,
name|it
operator|.
name|key
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|function|applyBuddy
name|bool
name|QFormBuilderExtra
operator|::
name|applyBuddy
parameter_list|(
specifier|const
name|QString
modifier|&
name|buddyName
parameter_list|,
name|BuddyMode
name|applyMode
parameter_list|,
name|QLabel
modifier|*
name|label
parameter_list|)
block|{
if|if
condition|(
name|buddyName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|label
operator|->
name|setBuddy
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|const
name|QWidgetList
name|widgets
init|=
name|label
operator|->
name|topLevelWidget
argument_list|()
operator|->
name|findChildren
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|buddyName
argument_list|)
decl_stmt|;
if|if
condition|(
name|widgets
operator|.
name|empty
argument_list|()
condition|)
block|{
name|label
operator|->
name|setBuddy
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|const
name|QWidgetList
operator|::
name|const_iterator
name|cend
init|=
name|widgets
operator|.
name|constEnd
argument_list|()
decl_stmt|;
for|for
control|(
name|QWidgetList
operator|::
name|const_iterator
name|it
init|=
name|widgets
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|cend
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
name|applyMode
operator|==
name|BuddyApplyAll
operator|||
operator|!
operator|(
operator|*
name|it
operator|)
operator|->
name|isHidden
argument_list|()
condition|)
block|{
name|label
operator|->
name|setBuddy
argument_list|(
operator|*
name|it
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
name|label
operator|->
name|setBuddy
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
DECL|function|parentWidget
specifier|const
name|QPointer
argument_list|<
name|QWidget
argument_list|>
modifier|&
name|QFormBuilderExtra
operator|::
name|parentWidget
parameter_list|()
specifier|const
block|{
return|return
name|m_parentWidget
return|;
block|}
DECL|function|parentWidgetIsSet
name|bool
name|QFormBuilderExtra
operator|::
name|parentWidgetIsSet
parameter_list|()
specifier|const
block|{
return|return
name|m_parentWidgetIsSet
return|;
block|}
DECL|function|setParentWidget
name|void
name|QFormBuilderExtra
operator|::
name|setParentWidget
parameter_list|(
specifier|const
name|QPointer
argument_list|<
name|QWidget
argument_list|>
modifier|&
name|w
parameter_list|)
block|{
comment|// Parent widget requires special handling of the geometry property.
name|m_parentWidget
operator|=
name|w
expr_stmt|;
name|m_parentWidgetIsSet
operator|=
literal|true
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_FORMBUILDER_NO_SCRIPT
DECL|function|formScriptRunner
name|QFormScriptRunner
modifier|&
name|QFormBuilderExtra
operator|::
name|formScriptRunner
parameter_list|()
block|{
return|return
name|m_FormScriptRunner
return|;
block|}
DECL|function|customWidgetScript
name|QString
name|QFormBuilderExtra
operator|::
name|customWidgetScript
parameter_list|(
specifier|const
name|QString
modifier|&
name|className
parameter_list|)
specifier|const
block|{
specifier|const
name|QHash
argument_list|<
name|QString
argument_list|,
name|CustomWidgetData
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|m_customWidgetDataHash
operator|.
name|constFind
argument_list|(
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|m_customWidgetDataHash
operator|.
name|constEnd
argument_list|()
condition|)
return|return
name|it
operator|.
name|value
argument_list|()
operator|.
name|script
return|;
return|return
name|QString
argument_list|()
return|;
block|}
endif|#
directive|endif
DECL|function|storeCustomWidgetData
name|void
name|QFormBuilderExtra
operator|::
name|storeCustomWidgetData
parameter_list|(
specifier|const
name|QString
modifier|&
name|className
parameter_list|,
specifier|const
name|DomCustomWidget
modifier|*
name|d
parameter_list|)
block|{
if|if
condition|(
name|d
condition|)
name|m_customWidgetDataHash
operator|.
name|insert
argument_list|(
name|className
argument_list|,
name|CustomWidgetData
argument_list|(
name|d
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|customWidgetBaseClass
name|QString
name|QFormBuilderExtra
operator|::
name|customWidgetBaseClass
parameter_list|(
specifier|const
name|QString
modifier|&
name|className
parameter_list|)
specifier|const
block|{
specifier|const
name|QHash
argument_list|<
name|QString
argument_list|,
name|CustomWidgetData
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|m_customWidgetDataHash
operator|.
name|constFind
argument_list|(
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|m_customWidgetDataHash
operator|.
name|constEnd
argument_list|()
condition|)
return|return
name|it
operator|.
name|value
argument_list|()
operator|.
name|baseClass
return|;
return|return
name|QString
argument_list|()
return|;
block|}
DECL|function|customWidgetAddPageMethod
name|QString
name|QFormBuilderExtra
operator|::
name|customWidgetAddPageMethod
parameter_list|(
specifier|const
name|QString
modifier|&
name|className
parameter_list|)
specifier|const
block|{
specifier|const
name|QHash
argument_list|<
name|QString
argument_list|,
name|CustomWidgetData
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|m_customWidgetDataHash
operator|.
name|constFind
argument_list|(
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|m_customWidgetDataHash
operator|.
name|constEnd
argument_list|()
condition|)
return|return
name|it
operator|.
name|value
argument_list|()
operator|.
name|addPageMethod
return|;
return|return
name|QString
argument_list|()
return|;
block|}
DECL|function|isCustomWidgetContainer
name|bool
name|QFormBuilderExtra
operator|::
name|isCustomWidgetContainer
parameter_list|(
specifier|const
name|QString
modifier|&
name|className
parameter_list|)
specifier|const
block|{
specifier|const
name|QHash
argument_list|<
name|QString
argument_list|,
name|CustomWidgetData
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|m_customWidgetDataHash
operator|.
name|constFind
argument_list|(
name|className
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|m_customWidgetDataHash
operator|.
name|constEnd
argument_list|()
condition|)
return|return
name|it
operator|.
name|value
argument_list|()
operator|.
name|isContainer
return|;
return|return
literal|false
return|;
block|}
DECL|function|setProcessingLayoutWidget
name|void
name|QFormBuilderExtra
operator|::
name|setProcessingLayoutWidget
parameter_list|(
name|bool
name|processing
parameter_list|)
block|{
name|m_layoutWidget
operator|=
name|processing
expr_stmt|;
block|}
DECL|function|processingLayoutWidget
name|bool
name|QFormBuilderExtra
operator|::
name|processingLayoutWidget
parameter_list|()
specifier|const
block|{
return|return
name|m_layoutWidget
return|;
block|}
DECL|function|setResourceBuilder
name|void
name|QFormBuilderExtra
operator|::
name|setResourceBuilder
parameter_list|(
name|QResourceBuilder
modifier|*
name|builder
parameter_list|)
block|{
if|if
condition|(
name|m_resourceBuilder
operator|==
name|builder
condition|)
return|return;
name|clearResourceBuilder
argument_list|()
expr_stmt|;
name|m_resourceBuilder
operator|=
name|builder
expr_stmt|;
block|}
DECL|function|resourceBuilder
name|QResourceBuilder
modifier|*
name|QFormBuilderExtra
operator|::
name|resourceBuilder
parameter_list|()
specifier|const
block|{
return|return
name|m_resourceBuilder
return|;
block|}
DECL|function|clearResourceBuilder
name|void
name|QFormBuilderExtra
operator|::
name|clearResourceBuilder
parameter_list|()
block|{
if|if
condition|(
name|m_resourceBuilder
condition|)
block|{
operator|delete
name|m_resourceBuilder
expr_stmt|;
name|m_resourceBuilder
operator|=
literal|0
expr_stmt|;
block|}
block|}
DECL|function|setTextBuilder
name|void
name|QFormBuilderExtra
operator|::
name|setTextBuilder
parameter_list|(
name|QTextBuilder
modifier|*
name|builder
parameter_list|)
block|{
if|if
condition|(
name|m_textBuilder
operator|==
name|builder
condition|)
return|return;
name|clearTextBuilder
argument_list|()
expr_stmt|;
name|m_textBuilder
operator|=
name|builder
expr_stmt|;
block|}
DECL|function|textBuilder
name|QTextBuilder
modifier|*
name|QFormBuilderExtra
operator|::
name|textBuilder
parameter_list|()
specifier|const
block|{
return|return
name|m_textBuilder
return|;
block|}
DECL|function|clearTextBuilder
name|void
name|QFormBuilderExtra
operator|::
name|clearTextBuilder
parameter_list|()
block|{
if|if
condition|(
name|m_textBuilder
condition|)
block|{
operator|delete
name|m_textBuilder
expr_stmt|;
name|m_textBuilder
operator|=
literal|0
expr_stmt|;
block|}
block|}
DECL|function|registerButtonGroups
name|void
name|QFormBuilderExtra
operator|::
name|registerButtonGroups
parameter_list|(
specifier|const
name|DomButtonGroups
modifier|*
name|domGroups
parameter_list|)
block|{
typedef|typedef
name|QList
argument_list|<
name|DomButtonGroup
modifier|*
argument_list|>
name|DomButtonGroupList
typedef|;
specifier|const
name|DomButtonGroupList
name|domGroupList
init|=
name|domGroups
operator|->
name|elementButtonGroup
argument_list|()
decl_stmt|;
specifier|const
name|DomButtonGroupList
operator|::
name|const_iterator
name|cend
init|=
name|domGroupList
operator|.
name|constEnd
argument_list|()
decl_stmt|;
for|for
control|(
name|DomButtonGroupList
operator|::
name|const_iterator
name|it
init|=
name|domGroupList
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|cend
condition|;
operator|++
name|it
control|)
block|{
name|DomButtonGroup
modifier|*
name|domGroup
init|=
operator|*
name|it
decl_stmt|;
name|m_buttonGroups
operator|.
name|insert
argument_list|(
name|domGroup
operator|->
name|attributeName
argument_list|()
argument_list|,
name|ButtonGroupEntry
argument_list|(
name|domGroup
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Utilities for parsing per-cell integer properties that have setters and
comment|//  getters of the form 'setX(int idx, int value)' and 'x(int index)'
comment|// (converting them to comma-separated string lists and back).
comment|// Used for layout stretch and grid per-row/column properties.
comment|// Format a list of cell-properties of one dimension as a ','-separated list
template|template
parameter_list|<
name|class
name|Layout
parameter_list|>
DECL|function|perCellPropertyToString
specifier|inline
name|QString
name|perCellPropertyToString
parameter_list|(
specifier|const
name|Layout
modifier|*
name|l
parameter_list|,
name|int
name|count
parameter_list|,
name|int
function_decl|(
name|Layout
operator|::
modifier|*
name|getter
function_decl|)
parameter_list|(
name|int
parameter_list|)
specifier|const
parameter_list|)
block|{
if|if
condition|(
name|count
operator|==
literal|0
condition|)
return|return
name|QString
argument_list|()
return|;
name|QString
name|rc
decl_stmt|;
block|{
name|QTextStream
name|str
argument_list|(
operator|&
name|rc
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
condition|)
name|str
operator|<<
name|QLatin1Char
argument_list|(
literal|','
argument_list|)
expr_stmt|;
name|str
operator|<<
call|(
name|l
operator|->*
name|getter
call|)
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|rc
return|;
block|}
comment|// Clear the property, set all cells to 0
template|template
parameter_list|<
name|class
name|Layout
parameter_list|>
DECL|function|clearPerCellValue
specifier|inline
name|void
name|clearPerCellValue
parameter_list|(
name|Layout
modifier|*
name|l
parameter_list|,
name|int
name|count
parameter_list|,
name|void
function_decl|(
name|Layout
operator|::
modifier|*
name|setter
function_decl|)
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|)
parameter_list|,
name|int
name|value
init|=
literal|0
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
call|(
name|l
operator|->*
name|setter
call|)
argument_list|(
name|i
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|// Parse and set the property from a comma-separated list
template|template
parameter_list|<
name|class
name|Layout
parameter_list|>
DECL|function|parsePerCellProperty
specifier|inline
name|bool
name|parsePerCellProperty
parameter_list|(
name|Layout
modifier|*
name|l
parameter_list|,
name|int
name|count
parameter_list|,
name|void
function_decl|(
name|Layout
operator|::
modifier|*
name|setter
function_decl|)
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|)
parameter_list|,
specifier|const
name|QString
modifier|&
name|s
parameter_list|,
name|int
name|defaultValue
init|=
literal|0
parameter_list|)
block|{
if|if
condition|(
name|s
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|clearPerCellValue
argument_list|(
name|l
argument_list|,
name|count
argument_list|,
name|setter
argument_list|,
name|defaultValue
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
specifier|const
name|QStringList
name|list
init|=
name|s
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|','
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|list
operator|.
name|empty
argument_list|()
condition|)
block|{
name|clearPerCellValue
argument_list|(
name|l
argument_list|,
name|count
argument_list|,
name|setter
argument_list|,
name|defaultValue
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// Apply all values contained in list
specifier|const
name|int
name|ac
init|=
name|qMin
argument_list|(
name|count
argument_list|,
name|list
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|bool
name|ok
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
for|for
control|(
init|;
name|i
operator|<
name|ac
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|int
name|value
init|=
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ok
operator|||
name|value
operator|<
literal|0
condition|)
return|return
literal|false
return|;
call|(
name|l
operator|->*
name|setter
call|)
argument_list|(
name|i
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
comment|// Clear rest
for|for
control|(
init|;
name|i
operator|<
name|count
condition|;
name|i
operator|++
control|)
call|(
name|l
operator|->*
name|setter
call|)
argument_list|(
name|i
argument_list|,
name|defaultValue
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// Read and write stretch
DECL|function|msgInvalidStretch
specifier|static
name|QString
name|msgInvalidStretch
parameter_list|(
specifier|const
name|QString
modifier|&
name|objectName
parameter_list|,
specifier|const
name|QString
modifier|&
name|stretch
parameter_list|)
block|{
comment|//: Parsing layout stretch values
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"FormBuilder"
argument_list|,
literal|"Invalid stretch value for '%1': '%2'"
argument_list|)
operator|.
name|arg
argument_list|(
name|objectName
argument_list|,
name|stretch
argument_list|)
return|;
block|}
DECL|function|boxLayoutStretch
name|QString
name|QFormBuilderExtra
operator|::
name|boxLayoutStretch
parameter_list|(
specifier|const
name|QBoxLayout
modifier|*
name|box
parameter_list|)
block|{
return|return
name|perCellPropertyToString
argument_list|(
name|box
argument_list|,
name|box
operator|->
name|count
argument_list|()
argument_list|,
operator|&
name|QBoxLayout
operator|::
name|stretch
argument_list|)
return|;
block|}
DECL|function|setBoxLayoutStretch
name|bool
name|QFormBuilderExtra
operator|::
name|setBoxLayoutStretch
parameter_list|(
specifier|const
name|QString
modifier|&
name|s
parameter_list|,
name|QBoxLayout
modifier|*
name|box
parameter_list|)
block|{
specifier|const
name|bool
name|rc
init|=
name|parsePerCellProperty
argument_list|(
name|box
argument_list|,
name|box
operator|->
name|count
argument_list|()
argument_list|,
operator|&
name|QBoxLayout
operator|::
name|setStretch
argument_list|,
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rc
condition|)
name|uiLibWarning
argument_list|(
name|msgInvalidStretch
argument_list|(
name|box
operator|->
name|objectName
argument_list|()
argument_list|,
name|s
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
DECL|function|clearBoxLayoutStretch
name|void
name|QFormBuilderExtra
operator|::
name|clearBoxLayoutStretch
parameter_list|(
name|QBoxLayout
modifier|*
name|box
parameter_list|)
block|{
name|clearPerCellValue
argument_list|(
name|box
argument_list|,
name|box
operator|->
name|count
argument_list|()
argument_list|,
operator|&
name|QBoxLayout
operator|::
name|setStretch
argument_list|)
expr_stmt|;
block|}
DECL|function|gridLayoutRowStretch
name|QString
name|QFormBuilderExtra
operator|::
name|gridLayoutRowStretch
parameter_list|(
specifier|const
name|QGridLayout
modifier|*
name|grid
parameter_list|)
block|{
return|return
name|perCellPropertyToString
argument_list|(
name|grid
argument_list|,
name|grid
operator|->
name|rowCount
argument_list|()
argument_list|,
operator|&
name|QGridLayout
operator|::
name|rowStretch
argument_list|)
return|;
block|}
DECL|function|setGridLayoutRowStretch
name|bool
name|QFormBuilderExtra
operator|::
name|setGridLayoutRowStretch
parameter_list|(
specifier|const
name|QString
modifier|&
name|s
parameter_list|,
name|QGridLayout
modifier|*
name|grid
parameter_list|)
block|{
specifier|const
name|bool
name|rc
init|=
name|parsePerCellProperty
argument_list|(
name|grid
argument_list|,
name|grid
operator|->
name|rowCount
argument_list|()
argument_list|,
operator|&
name|QGridLayout
operator|::
name|setRowStretch
argument_list|,
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rc
condition|)
name|uiLibWarning
argument_list|(
name|msgInvalidStretch
argument_list|(
name|grid
operator|->
name|objectName
argument_list|()
argument_list|,
name|s
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
DECL|function|clearGridLayoutRowStretch
name|void
name|QFormBuilderExtra
operator|::
name|clearGridLayoutRowStretch
parameter_list|(
name|QGridLayout
modifier|*
name|grid
parameter_list|)
block|{
name|clearPerCellValue
argument_list|(
name|grid
argument_list|,
name|grid
operator|->
name|rowCount
argument_list|()
argument_list|,
operator|&
name|QGridLayout
operator|::
name|setRowStretch
argument_list|)
expr_stmt|;
block|}
DECL|function|gridLayoutColumnStretch
name|QString
name|QFormBuilderExtra
operator|::
name|gridLayoutColumnStretch
parameter_list|(
specifier|const
name|QGridLayout
modifier|*
name|grid
parameter_list|)
block|{
return|return
name|perCellPropertyToString
argument_list|(
name|grid
argument_list|,
name|grid
operator|->
name|columnCount
argument_list|()
argument_list|,
operator|&
name|QGridLayout
operator|::
name|columnStretch
argument_list|)
return|;
block|}
DECL|function|setGridLayoutColumnStretch
name|bool
name|QFormBuilderExtra
operator|::
name|setGridLayoutColumnStretch
parameter_list|(
specifier|const
name|QString
modifier|&
name|s
parameter_list|,
name|QGridLayout
modifier|*
name|grid
parameter_list|)
block|{
specifier|const
name|bool
name|rc
init|=
name|parsePerCellProperty
argument_list|(
name|grid
argument_list|,
name|grid
operator|->
name|columnCount
argument_list|()
argument_list|,
operator|&
name|QGridLayout
operator|::
name|setColumnStretch
argument_list|,
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rc
condition|)
name|uiLibWarning
argument_list|(
name|msgInvalidStretch
argument_list|(
name|grid
operator|->
name|objectName
argument_list|()
argument_list|,
name|s
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
DECL|function|clearGridLayoutColumnStretch
name|void
name|QFormBuilderExtra
operator|::
name|clearGridLayoutColumnStretch
parameter_list|(
name|QGridLayout
modifier|*
name|grid
parameter_list|)
block|{
name|clearPerCellValue
argument_list|(
name|grid
argument_list|,
name|grid
operator|->
name|columnCount
argument_list|()
argument_list|,
operator|&
name|QGridLayout
operator|::
name|setColumnStretch
argument_list|)
expr_stmt|;
block|}
comment|// Read and write grid layout row/column size limits
DECL|function|msgInvalidMinimumSize
specifier|static
name|QString
name|msgInvalidMinimumSize
parameter_list|(
specifier|const
name|QString
modifier|&
name|objectName
parameter_list|,
specifier|const
name|QString
modifier|&
name|ms
parameter_list|)
block|{
comment|//: Parsing grid layout minimum size values
return|return
name|QCoreApplication
operator|::
name|translate
argument_list|(
literal|"FormBuilder"
argument_list|,
literal|"Invalid minimum size for '%1': '%2'"
argument_list|)
operator|.
name|arg
argument_list|(
name|objectName
argument_list|,
name|ms
argument_list|)
return|;
block|}
DECL|function|gridLayoutRowMinimumHeight
name|QString
name|QFormBuilderExtra
operator|::
name|gridLayoutRowMinimumHeight
parameter_list|(
specifier|const
name|QGridLayout
modifier|*
name|grid
parameter_list|)
block|{
return|return
name|perCellPropertyToString
argument_list|(
name|grid
argument_list|,
name|grid
operator|->
name|rowCount
argument_list|()
argument_list|,
operator|&
name|QGridLayout
operator|::
name|rowMinimumHeight
argument_list|)
return|;
block|}
DECL|function|setGridLayoutRowMinimumHeight
name|bool
name|QFormBuilderExtra
operator|::
name|setGridLayoutRowMinimumHeight
parameter_list|(
specifier|const
name|QString
modifier|&
name|s
parameter_list|,
name|QGridLayout
modifier|*
name|grid
parameter_list|)
block|{
specifier|const
name|bool
name|rc
init|=
name|parsePerCellProperty
argument_list|(
name|grid
argument_list|,
name|grid
operator|->
name|rowCount
argument_list|()
argument_list|,
operator|&
name|QGridLayout
operator|::
name|setRowMinimumHeight
argument_list|,
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rc
condition|)
name|uiLibWarning
argument_list|(
name|msgInvalidMinimumSize
argument_list|(
name|grid
operator|->
name|objectName
argument_list|()
argument_list|,
name|s
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
DECL|function|clearGridLayoutRowMinimumHeight
name|void
name|QFormBuilderExtra
operator|::
name|clearGridLayoutRowMinimumHeight
parameter_list|(
name|QGridLayout
modifier|*
name|grid
parameter_list|)
block|{
name|clearPerCellValue
argument_list|(
name|grid
argument_list|,
name|grid
operator|->
name|rowCount
argument_list|()
argument_list|,
operator|&
name|QGridLayout
operator|::
name|setRowMinimumHeight
argument_list|)
expr_stmt|;
block|}
DECL|function|gridLayoutColumnMinimumWidth
name|QString
name|QFormBuilderExtra
operator|::
name|gridLayoutColumnMinimumWidth
parameter_list|(
specifier|const
name|QGridLayout
modifier|*
name|grid
parameter_list|)
block|{
return|return
name|perCellPropertyToString
argument_list|(
name|grid
argument_list|,
name|grid
operator|->
name|columnCount
argument_list|()
argument_list|,
operator|&
name|QGridLayout
operator|::
name|columnMinimumWidth
argument_list|)
return|;
block|}
DECL|function|setGridLayoutColumnMinimumWidth
name|bool
name|QFormBuilderExtra
operator|::
name|setGridLayoutColumnMinimumWidth
parameter_list|(
specifier|const
name|QString
modifier|&
name|s
parameter_list|,
name|QGridLayout
modifier|*
name|grid
parameter_list|)
block|{
specifier|const
name|bool
name|rc
init|=
name|parsePerCellProperty
argument_list|(
name|grid
argument_list|,
name|grid
operator|->
name|columnCount
argument_list|()
argument_list|,
operator|&
name|QGridLayout
operator|::
name|setColumnMinimumWidth
argument_list|,
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rc
condition|)
name|uiLibWarning
argument_list|(
name|msgInvalidMinimumSize
argument_list|(
name|grid
operator|->
name|objectName
argument_list|()
argument_list|,
name|s
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|rc
return|;
block|}
DECL|function|clearGridLayoutColumnMinimumWidth
name|void
name|QFormBuilderExtra
operator|::
name|clearGridLayoutColumnMinimumWidth
parameter_list|(
name|QGridLayout
modifier|*
name|grid
parameter_list|)
block|{
name|clearPerCellValue
argument_list|(
name|grid
argument_list|,
name|grid
operator|->
name|columnCount
argument_list|()
argument_list|,
operator|&
name|QGridLayout
operator|::
name|setColumnMinimumWidth
argument_list|)
expr_stmt|;
block|}
comment|// ------------ QFormBuilderStrings
DECL|function|QFormBuilderStrings
name|QFormBuilderStrings
operator|::
name|QFormBuilderStrings
parameter_list|()
member_init_list|:
name|buddyProperty
argument_list|(
name|QLatin1String
argument_list|(
literal|"buddy"
argument_list|)
argument_list|)
member_init_list|,
name|cursorProperty
argument_list|(
name|QLatin1String
argument_list|(
literal|"cursor"
argument_list|)
argument_list|)
member_init_list|,
name|objectNameProperty
argument_list|(
name|QLatin1String
argument_list|(
literal|"objectName"
argument_list|)
argument_list|)
member_init_list|,
name|trueValue
argument_list|(
name|QLatin1String
argument_list|(
literal|"true"
argument_list|)
argument_list|)
member_init_list|,
name|falseValue
argument_list|(
name|QLatin1String
argument_list|(
literal|"false"
argument_list|)
argument_list|)
member_init_list|,
name|horizontalPostFix
argument_list|(
name|QLatin1String
argument_list|(
literal|"Horizontal"
argument_list|)
argument_list|)
member_init_list|,
name|separator
argument_list|(
name|QLatin1String
argument_list|(
literal|"separator"
argument_list|)
argument_list|)
member_init_list|,
name|defaultTitle
argument_list|(
name|QLatin1String
argument_list|(
literal|"Page"
argument_list|)
argument_list|)
member_init_list|,
name|titleAttribute
argument_list|(
name|QLatin1String
argument_list|(
literal|"title"
argument_list|)
argument_list|)
member_init_list|,
name|labelAttribute
argument_list|(
name|QLatin1String
argument_list|(
literal|"label"
argument_list|)
argument_list|)
member_init_list|,
name|toolTipAttribute
argument_list|(
name|QLatin1String
argument_list|(
literal|"toolTip"
argument_list|)
argument_list|)
member_init_list|,
name|whatsThisAttribute
argument_list|(
name|QLatin1String
argument_list|(
literal|"whatsThis"
argument_list|)
argument_list|)
member_init_list|,
name|flagsAttribute
argument_list|(
name|QLatin1String
argument_list|(
literal|"flags"
argument_list|)
argument_list|)
member_init_list|,
name|iconAttribute
argument_list|(
name|QLatin1String
argument_list|(
literal|"icon"
argument_list|)
argument_list|)
member_init_list|,
name|pixmapAttribute
argument_list|(
name|QLatin1String
argument_list|(
literal|"pixmap"
argument_list|)
argument_list|)
member_init_list|,
name|textAttribute
argument_list|(
name|QLatin1String
argument_list|(
literal|"text"
argument_list|)
argument_list|)
member_init_list|,
name|currentIndexProperty
argument_list|(
name|QLatin1String
argument_list|(
literal|"currentIndex"
argument_list|)
argument_list|)
member_init_list|,
name|toolBarAreaAttribute
argument_list|(
name|QLatin1String
argument_list|(
literal|"toolBarArea"
argument_list|)
argument_list|)
member_init_list|,
name|toolBarBreakAttribute
argument_list|(
name|QLatin1String
argument_list|(
literal|"toolBarBreak"
argument_list|)
argument_list|)
member_init_list|,
name|dockWidgetAreaAttribute
argument_list|(
name|QLatin1String
argument_list|(
literal|"dockWidgetArea"
argument_list|)
argument_list|)
member_init_list|,
name|marginProperty
argument_list|(
name|QLatin1String
argument_list|(
literal|"margin"
argument_list|)
argument_list|)
member_init_list|,
name|spacingProperty
argument_list|(
name|QLatin1String
argument_list|(
literal|"spacing"
argument_list|)
argument_list|)
member_init_list|,
name|leftMarginProperty
argument_list|(
name|QLatin1String
argument_list|(
literal|"leftMargin"
argument_list|)
argument_list|)
member_init_list|,
name|topMarginProperty
argument_list|(
name|QLatin1String
argument_list|(
literal|"topMargin"
argument_list|)
argument_list|)
member_init_list|,
name|rightMarginProperty
argument_list|(
name|QLatin1String
argument_list|(
literal|"rightMargin"
argument_list|)
argument_list|)
member_init_list|,
name|bottomMarginProperty
argument_list|(
name|QLatin1String
argument_list|(
literal|"bottomMargin"
argument_list|)
argument_list|)
member_init_list|,
name|horizontalSpacingProperty
argument_list|(
name|QLatin1String
argument_list|(
literal|"horizontalSpacing"
argument_list|)
argument_list|)
member_init_list|,
name|verticalSpacingProperty
argument_list|(
name|QLatin1String
argument_list|(
literal|"verticalSpacing"
argument_list|)
argument_list|)
member_init_list|,
name|sizeHintProperty
argument_list|(
name|QLatin1String
argument_list|(
literal|"sizeHint"
argument_list|)
argument_list|)
member_init_list|,
name|sizeTypeProperty
argument_list|(
name|QLatin1String
argument_list|(
literal|"sizeType"
argument_list|)
argument_list|)
member_init_list|,
name|orientationProperty
argument_list|(
name|QLatin1String
argument_list|(
literal|"orientation"
argument_list|)
argument_list|)
member_init_list|,
name|styleSheetProperty
argument_list|(
name|QLatin1String
argument_list|(
literal|"styleSheet"
argument_list|)
argument_list|)
member_init_list|,
name|qtHorizontal
argument_list|(
name|QLatin1String
argument_list|(
literal|"Qt::Horizontal"
argument_list|)
argument_list|)
member_init_list|,
name|qtVertical
argument_list|(
name|QLatin1String
argument_list|(
literal|"Qt::Vertical"
argument_list|)
argument_list|)
member_init_list|,
name|currentRowProperty
argument_list|(
name|QLatin1String
argument_list|(
literal|"currentRow"
argument_list|)
argument_list|)
member_init_list|,
name|tabSpacingProperty
argument_list|(
name|QLatin1String
argument_list|(
literal|"tabSpacing"
argument_list|)
argument_list|)
member_init_list|,
name|qWidgetClass
argument_list|(
name|QLatin1String
argument_list|(
literal|"QWidget"
argument_list|)
argument_list|)
member_init_list|,
name|lineClass
argument_list|(
name|QLatin1String
argument_list|(
literal|"Line"
argument_list|)
argument_list|)
member_init_list|,
name|geometryProperty
argument_list|(
name|QLatin1String
argument_list|(
literal|"geometry"
argument_list|)
argument_list|)
member_init_list|,
name|scriptWidgetVariable
argument_list|(
name|QLatin1String
argument_list|(
literal|"widget"
argument_list|)
argument_list|)
member_init_list|,
name|scriptChildWidgetsVariable
argument_list|(
name|QLatin1String
argument_list|(
literal|"childWidgets"
argument_list|)
argument_list|)
block|{
name|itemRoles
operator|.
name|append
argument_list|(
name|qMakePair
argument_list|(
name|Qt
operator|::
name|FontRole
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"font"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|itemRoles
operator|.
name|append
argument_list|(
name|qMakePair
argument_list|(
name|Qt
operator|::
name|TextAlignmentRole
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"textAlignment"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|itemRoles
operator|.
name|append
argument_list|(
name|qMakePair
argument_list|(
name|Qt
operator|::
name|BackgroundRole
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"background"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|itemRoles
operator|.
name|append
argument_list|(
name|qMakePair
argument_list|(
name|Qt
operator|::
name|ForegroundRole
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"foreground"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|itemRoles
operator|.
name|append
argument_list|(
name|qMakePair
argument_list|(
name|Qt
operator|::
name|CheckStateRole
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"checkState"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|RoleNName
modifier|&
name|it
decl|,
name|itemRoles
control|)
name|treeItemRoleHash
operator|.
name|insert
argument_list|(
name|it
operator|.
name|second
argument_list|,
name|it
operator|.
name|first
argument_list|)
expr_stmt|;
name|itemTextRoles
operator|.
name|append
argument_list|(
name|qMakePair
argument_list|(
name|qMakePair
argument_list|(
name|Qt
operator|::
name|EditRole
argument_list|,
name|Qt
operator|::
name|DisplayPropertyRole
argument_list|)
argument_list|,
name|textAttribute
argument_list|)
argument_list|)
expr_stmt|;
comment|// This must be first for the loop below
name|itemTextRoles
operator|.
name|append
argument_list|(
name|qMakePair
argument_list|(
name|qMakePair
argument_list|(
name|Qt
operator|::
name|ToolTipRole
argument_list|,
name|Qt
operator|::
name|ToolTipPropertyRole
argument_list|)
argument_list|,
name|toolTipAttribute
argument_list|)
argument_list|)
expr_stmt|;
name|itemTextRoles
operator|.
name|append
argument_list|(
name|qMakePair
argument_list|(
name|qMakePair
argument_list|(
name|Qt
operator|::
name|StatusTipRole
argument_list|,
name|Qt
operator|::
name|StatusTipPropertyRole
argument_list|)
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"statusTip"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|itemTextRoles
operator|.
name|append
argument_list|(
name|qMakePair
argument_list|(
name|qMakePair
argument_list|(
name|Qt
operator|::
name|WhatsThisRole
argument_list|,
name|Qt
operator|::
name|WhatsThisPropertyRole
argument_list|)
argument_list|,
name|whatsThisAttribute
argument_list|)
argument_list|)
expr_stmt|;
comment|// Note: this skips the first item!
name|QList
argument_list|<
name|TextRoleNName
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|itemTextRoles
operator|.
name|constBegin
argument_list|()
decl_stmt|,
name|end
init|=
name|itemTextRoles
operator|.
name|constEnd
argument_list|()
decl_stmt|;
while|while
condition|(
operator|++
name|it
operator|!=
name|end
condition|)
name|treeItemTextRoleHash
operator|.
name|insert
argument_list|(
name|it
operator|->
name|second
argument_list|,
name|it
operator|->
name|first
argument_list|)
expr_stmt|;
block|}
DECL|function|instance
specifier|const
name|QFormBuilderStrings
modifier|&
name|QFormBuilderStrings
operator|::
name|instance
parameter_list|()
block|{
specifier|static
specifier|const
name|QFormBuilderStrings
name|rc
decl_stmt|;
return|return
name|rc
return|;
block|}
ifdef|#
directive|ifdef
name|QFORMINTERNAL_NAMESPACE
block|}
end_namespace
begin_comment
comment|// namespace QFormInternal
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
