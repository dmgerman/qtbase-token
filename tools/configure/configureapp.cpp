begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the tools applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"configureapp.h"
end_include
begin_include
include|#
directive|include
file|"environment.h"
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|COMMERCIAL_VERSION
end_ifdef
begin_include
include|#
directive|include
file|"tools.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<QDate>
end_include
begin_include
include|#
directive|include
file|<qdir.h>
end_include
begin_include
include|#
directive|include
file|<qtemporaryfile.h>
end_include
begin_include
include|#
directive|include
file|<qstack.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qfileinfo.h>
end_include
begin_include
include|#
directive|include
file|<qtextstream.h>
end_include
begin_include
include|#
directive|include
file|<qregexp.h>
end_include
begin_include
include|#
directive|include
file|<qhash.h>
end_include
begin_include
include|#
directive|include
file|<iostream>
end_include
begin_include
include|#
directive|include
file|<windows.h>
end_include
begin_include
include|#
directive|include
file|<conio.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|operator <<
name|std
operator|::
name|ostream
modifier|&
name|operator
name|<<
parameter_list|(
name|std
operator|::
name|ostream
modifier|&
name|s
parameter_list|,
specifier|const
name|QString
modifier|&
name|val
parameter_list|)
block|{
name|s
operator|<<
name|val
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|data
argument_list|()
expr_stmt|;
return|return
name|s
return|;
block|}
end_function
begin_using
using|using
namespace|namespace
name|std
namespace|;
end_using
begin_comment
comment|// Macros to simplify options marking
end_comment
begin_define
DECL|macro|MARK_OPTION
define|#
directive|define
name|MARK_OPTION
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
value|( dictionary[ #x ] == #y ? "*" : " " )
end_define
begin_function
DECL|function|writeToFile
name|bool
name|writeToFile
parameter_list|(
specifier|const
name|char
modifier|*
name|text
parameter_list|,
specifier|const
name|QString
modifier|&
name|filename
parameter_list|)
block|{
name|QByteArray
name|symFile
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|QFile
name|file
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|QDir
name|dir
argument_list|(
name|QFileInfo
argument_list|(
name|file
argument_list|)
operator|.
name|absoluteDir
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|exists
argument_list|()
condition|)
name|dir
operator|.
name|mkpath
argument_list|(
name|dir
operator|.
name|absolutePath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
argument_list|)
condition|)
block|{
name|cout
operator|<<
literal|"Couldn't write to "
operator|<<
name|qPrintable
argument_list|(
name|filename
argument_list|)
operator|<<
literal|": "
operator|<<
name|qPrintable
argument_list|(
name|file
operator|.
name|errorString
argument_list|()
argument_list|)
operator|<<
name|endl
expr_stmt|;
return|return
literal|false
return|;
block|}
name|file
operator|.
name|write
argument_list|(
name|symFile
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_constructor
DECL|function|Configure
name|Configure
operator|::
name|Configure
parameter_list|(
name|int
modifier|&
name|argc
parameter_list|,
name|char
modifier|*
modifier|*
name|argv
parameter_list|)
block|{
name|useUnixSeparators
operator|=
literal|false
expr_stmt|;
comment|// Default values for indentation
name|optionIndent
operator|=
literal|4
expr_stmt|;
name|descIndent
operator|=
literal|25
expr_stmt|;
name|outputWidth
operator|=
literal|0
expr_stmt|;
comment|// Get console buffer output width
name|CONSOLE_SCREEN_BUFFER_INFO
name|info
decl_stmt|;
name|HANDLE
name|hStdout
init|=
name|GetStdHandle
argument_list|(
name|STD_OUTPUT_HANDLE
argument_list|)
decl_stmt|;
if|if
condition|(
name|GetConsoleScreenBufferInfo
argument_list|(
name|hStdout
argument_list|,
operator|&
name|info
argument_list|)
condition|)
name|outputWidth
operator|=
name|info
operator|.
name|dwSize
operator|.
name|X
operator|-
literal|1
expr_stmt|;
name|outputWidth
operator|=
name|qMin
argument_list|(
name|outputWidth
argument_list|,
literal|79
argument_list|)
expr_stmt|;
comment|// Anything wider gets unreadable
if|if
condition|(
name|outputWidth
operator|<
literal|35
condition|)
comment|// Insanely small, just use 79
name|outputWidth
operator|=
literal|79
expr_stmt|;
name|int
name|i
decl_stmt|;
comment|/*     ** Set up the initial state, the default     */
name|dictionary
index|[
literal|"CONFIGCMD"
index|]
operator|=
name|argv
index|[
literal|0
index|]
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|1
init|;
name|i
operator|<
name|argc
condition|;
name|i
operator|++
control|)
name|configCmdLine
operator|+=
name|argv
index|[
name|i
index|]
expr_stmt|;
comment|// Get the path to the executable
name|wchar_t
name|module_name
index|[
name|MAX_PATH
index|]
decl_stmt|;
name|GetModuleFileName
argument_list|(
literal|0
argument_list|,
name|module_name
argument_list|,
sizeof|sizeof
argument_list|(
name|module_name
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|wchar_t
argument_list|)
argument_list|)
expr_stmt|;
name|QFileInfo
name|sourcePathInfo
init|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|module_name
argument_list|)
decl_stmt|;
name|sourcePath
operator|=
name|sourcePathInfo
operator|.
name|absolutePath
argument_list|()
expr_stmt|;
name|sourceDir
operator|=
name|sourcePathInfo
operator|.
name|dir
argument_list|()
expr_stmt|;
name|buildPath
operator|=
name|QDir
operator|::
name|currentPath
argument_list|()
expr_stmt|;
if|#
directive|if
literal|0
block|const QString installPath = QString("C:\\Qt\\%1").arg(QT_VERSION_STR);
else|#
directive|else
specifier|const
name|QString
name|installPath
init|=
name|buildPath
decl_stmt|;
endif|#
directive|endif
if|if
condition|(
name|sourceDir
operator|!=
name|buildDir
condition|)
block|{
comment|//shadow builds!
if|if
condition|(
operator|!
name|findFile
argument_list|(
literal|"perl"
argument_list|)
operator|&&
operator|!
name|findFile
argument_list|(
literal|"perl.exe"
argument_list|)
condition|)
block|{
name|cout
operator|<<
literal|"Error: Creating a shadow build of Qt requires"
operator|<<
name|endl
operator|<<
literal|"perl to be in the PATH environment"
expr_stmt|;
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Exit cleanly for Ctrl+C
block|}
name|cout
operator|<<
literal|"Preparing build tree..."
operator|<<
name|endl
expr_stmt|;
name|QDir
argument_list|(
name|buildPath
argument_list|)
operator|.
name|mkpath
argument_list|(
literal|"bin"
argument_list|)
expr_stmt|;
block|{
comment|//duplicate qmake
name|QStack
argument_list|<
name|QString
argument_list|>
name|qmake_dirs
decl_stmt|;
name|qmake_dirs
operator|.
name|push
argument_list|(
literal|"qmake"
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|qmake_dirs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QString
name|dir
init|=
name|qmake_dirs
operator|.
name|pop
argument_list|()
decl_stmt|;
name|QString
name|od
argument_list|(
name|buildPath
operator|+
literal|"/"
operator|+
name|dir
argument_list|)
decl_stmt|;
name|QString
name|id
argument_list|(
name|sourcePath
operator|+
literal|"/"
operator|+
name|dir
argument_list|)
decl_stmt|;
name|QFileInfoList
name|entries
init|=
name|QDir
argument_list|(
name|id
argument_list|)
operator|.
name|entryInfoList
argument_list|(
name|QDir
operator|::
name|NoDotAndDotDot
operator||
name|QDir
operator|::
name|AllEntries
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entries
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QFileInfo
name|fi
argument_list|(
name|entries
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fi
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|qmake_dirs
operator|.
name|push
argument_list|(
name|dir
operator|+
literal|"/"
operator|+
name|fi
operator|.
name|fileName
argument_list|()
argument_list|)
expr_stmt|;
name|QDir
argument_list|()
operator|.
name|mkpath
argument_list|(
name|od
operator|+
literal|"/"
operator|+
name|fi
operator|.
name|fileName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QDir
argument_list|()
operator|.
name|mkpath
argument_list|(
name|od
argument_list|)
expr_stmt|;
name|bool
name|justCopy
init|=
literal|true
decl_stmt|;
specifier|const
name|QString
name|fname
init|=
name|fi
operator|.
name|fileName
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|outFile
argument_list|(
name|od
operator|+
literal|"/"
operator|+
name|fname
argument_list|)
decl_stmt|,
name|inFile
argument_list|(
name|id
operator|+
literal|"/"
operator|+
name|fname
argument_list|)
decl_stmt|;
if|if
condition|(
name|fi
operator|.
name|fileName
argument_list|()
operator|==
literal|"Makefile"
condition|)
block|{
comment|//ignore
block|}
elseif|else
if|if
condition|(
name|fi
operator|.
name|suffix
argument_list|()
operator|==
literal|"h"
operator|||
name|fi
operator|.
name|suffix
argument_list|()
operator|==
literal|"cpp"
condition|)
block|{
name|QTemporaryFile
name|tmpFile
decl_stmt|;
if|if
condition|(
name|tmpFile
operator|.
name|open
argument_list|()
condition|)
block|{
name|QTextStream
name|stream
argument_list|(
operator|&
name|tmpFile
argument_list|)
decl_stmt|;
name|stream
operator|<<
literal|"#include \""
operator|<<
name|inFile
operator|<<
literal|"\""
operator|<<
name|endl
expr_stmt|;
name|justCopy
operator|=
literal|false
expr_stmt|;
name|stream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|tmpFile
operator|.
name|flush
argument_list|()
expr_stmt|;
if|if
condition|(
name|filesDiffer
argument_list|(
name|tmpFile
operator|.
name|fileName
argument_list|()
argument_list|,
name|outFile
argument_list|)
condition|)
block|{
name|QFile
operator|::
name|remove
argument_list|(
name|outFile
argument_list|)
expr_stmt|;
name|tmpFile
operator|.
name|copy
argument_list|(
name|outFile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|justCopy
operator|&&
name|filesDiffer
argument_list|(
name|inFile
argument_list|,
name|outFile
argument_list|)
condition|)
name|QFile
operator|::
name|copy
argument_list|(
name|inFile
argument_list|,
name|outFile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|{
comment|//make a syncqt script(s) that can be used in the shadow
name|QFile
name|syncqt
argument_list|(
name|buildPath
operator|+
literal|"/bin/syncqt"
argument_list|)
decl_stmt|;
if|if
condition|(
name|syncqt
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
argument_list|)
condition|)
block|{
name|QTextStream
name|stream
argument_list|(
operator|&
name|syncqt
argument_list|)
decl_stmt|;
name|stream
operator|<<
literal|"#!/usr/bin/perl -w"
operator|<<
name|endl
operator|<<
literal|"require \""
operator|<<
name|sourcePath
operator|+
literal|"/bin/syncqt\";"
operator|<<
name|endl
expr_stmt|;
block|}
name|QFile
name|syncqt_bat
argument_list|(
name|buildPath
operator|+
literal|"/bin/syncqt.bat"
argument_list|)
decl_stmt|;
if|if
condition|(
name|syncqt_bat
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
argument_list|)
condition|)
block|{
name|QTextStream
name|stream
argument_list|(
operator|&
name|syncqt_bat
argument_list|)
decl_stmt|;
name|stream
operator|<<
literal|"@echo off"
operator|<<
name|endl
operator|<<
literal|"call "
operator|<<
name|fixSeparators
argument_list|(
name|sourcePath
argument_list|)
operator|<<
name|fixSeparators
argument_list|(
literal|"/bin/syncqt.bat -outdir \""
argument_list|)
operator|<<
name|fixSeparators
argument_list|(
name|buildPath
argument_list|)
operator|<<
literal|"\" \""
operator|<<
name|fixSeparators
argument_list|(
name|sourcePath
argument_list|)
operator|<<
literal|"\""
operator|<<
name|endl
expr_stmt|;
name|syncqt_bat
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|QFile
name|configtests
argument_list|(
name|buildPath
operator|+
literal|"/bin/qtmodule-configtests"
argument_list|)
decl_stmt|;
if|if
condition|(
name|configtests
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
argument_list|)
condition|)
block|{
name|QTextStream
name|stream
argument_list|(
operator|&
name|configtests
argument_list|)
decl_stmt|;
name|stream
operator|<<
literal|"#!/usr/bin/perl -w"
operator|<<
name|endl
operator|<<
literal|"require \""
operator|<<
name|sourcePath
operator|+
literal|"/bin/qtmodule-configtests\";"
operator|<<
name|endl
expr_stmt|;
block|}
comment|// For Windows CE and shadow builds we need to copy these to the
comment|// build directory.
name|QFile
operator|::
name|copy
argument_list|(
name|sourcePath
operator|+
literal|"/bin/setcepaths.bat"
argument_list|,
name|buildPath
operator|+
literal|"/bin/setcepaths.bat"
argument_list|)
expr_stmt|;
comment|//copy the mkspecs
name|buildDir
operator|.
name|mkpath
argument_list|(
literal|"mkspecs"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Environment
operator|::
name|cpdir
argument_list|(
name|sourcePath
operator|+
literal|"/mkspecs"
argument_list|,
name|buildPath
operator|+
literal|"/mkspecs"
argument_list|)
condition|)
block|{
name|cout
operator|<<
literal|"Couldn't copy mkspecs!"
operator|<<
name|sourcePath
operator|<<
literal|" "
operator|<<
name|buildPath
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
return|return;
block|}
block|}
name|dictionary
index|[
literal|"QT_SOURCE_TREE"
index|]
operator|=
name|fixSeparators
argument_list|(
name|sourcePath
argument_list|)
expr_stmt|;
name|dictionary
index|[
literal|"QT_BUILD_TREE"
index|]
operator|=
name|fixSeparators
argument_list|(
name|buildPath
argument_list|)
expr_stmt|;
name|dictionary
index|[
literal|"QT_INSTALL_PREFIX"
index|]
operator|=
name|fixSeparators
argument_list|(
name|installPath
argument_list|)
expr_stmt|;
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|=
name|getenv
argument_list|(
literal|"QMAKESPEC"
argument_list|)
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|=
name|Environment
operator|::
name|detectQMakeSpec
argument_list|()
expr_stmt|;
name|dictionary
index|[
literal|"QMAKESPEC_FROM"
index|]
operator|=
literal|"detected"
expr_stmt|;
block|}
else|else
block|{
name|dictionary
index|[
literal|"QMAKESPEC_FROM"
index|]
operator|=
literal|"env"
expr_stmt|;
block|}
name|dictionary
index|[
literal|"ARCHITECTURE"
index|]
operator|=
literal|"windows"
expr_stmt|;
name|dictionary
index|[
literal|"QCONFIG"
index|]
operator|=
literal|"full"
expr_stmt|;
name|dictionary
index|[
literal|"EMBEDDED"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"BUILD_QMAKE"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"DSPFILES"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"VCPROJFILES"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"QMAKE_INTERNAL"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"FAST"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"NOPROCESS"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"STL"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"EXCEPTIONS"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"RTTI"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"MMX"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"3DNOW"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"SSE"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"SSE2"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"IWMMXT"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"SYNCQT"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"CE_CRT"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"CETEST"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"CE_SIGNATURE"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"SCRIPT"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"SCRIPTTOOLS"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"XMLPATTERNS"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"PHONON"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"PHONON_BACKEND"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"MULTIMEDIA"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"AUDIO_BACKEND"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"WMSDK"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"DIRECTSHOW"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"WEBKIT"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"V8"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"V8SNAPSHOT"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"DECLARATIVE"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"DECLARATIVE_DEBUG"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"PLUGIN_MANIFESTS"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"DIRECTWRITE"
index|]
operator|=
literal|"no"
expr_stmt|;
name|QString
name|version
decl_stmt|;
name|QFile
name|qglobal_h
argument_list|(
name|sourcePath
operator|+
literal|"/src/corelib/global/qglobal.h"
argument_list|)
decl_stmt|;
if|if
condition|(
name|qglobal_h
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|QTextStream
name|read
argument_list|(
operator|&
name|qglobal_h
argument_list|)
decl_stmt|;
name|QRegExp
name|version_regexp
argument_list|(
literal|"^# *define *QT_VERSION_STR *\"([^\"]*)\""
argument_list|)
decl_stmt|;
name|QString
name|line
decl_stmt|;
while|while
condition|(
operator|!
name|read
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|line
operator|=
name|read
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|version_regexp
operator|.
name|exactMatch
argument_list|(
name|line
argument_list|)
condition|)
block|{
name|version
operator|=
name|version_regexp
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
operator|.
name|trimmed
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|version
operator|.
name|isEmpty
argument_list|()
condition|)
break|break;
block|}
block|}
name|qglobal_h
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|version
operator|.
name|isEmpty
argument_list|()
condition|)
name|version
operator|=
name|QString
argument_list|(
literal|"%1.%2.%3"
argument_list|)
operator|.
name|arg
argument_list|(
name|QT_VERSION
operator|>>
literal|16
argument_list|)
operator|.
name|arg
argument_list|(
operator|(
operator|(
name|QT_VERSION
operator|>>
literal|8
operator|)
operator|&
literal|0xff
operator|)
argument_list|)
operator|.
name|arg
argument_list|(
name|QT_VERSION
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|dictionary
index|[
literal|"VERSION"
index|]
operator|=
name|version
expr_stmt|;
block|{
name|QRegExp
name|version_re
argument_list|(
literal|"([0-9]*)\\.([0-9]*)\\.([0-9]*)(|-.*)"
argument_list|)
decl_stmt|;
if|if
condition|(
name|version_re
operator|.
name|exactMatch
argument_list|(
name|version
argument_list|)
condition|)
block|{
name|dictionary
index|[
literal|"VERSION_MAJOR"
index|]
operator|=
name|version_re
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|dictionary
index|[
literal|"VERSION_MINOR"
index|]
operator|=
name|version_re
operator|.
name|cap
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|dictionary
index|[
literal|"VERSION_PATCH"
index|]
operator|=
name|version_re
operator|.
name|cap
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
block|}
name|dictionary
index|[
literal|"REDO"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"DEPENDENCIES"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"BUILD"
index|]
operator|=
literal|"debug"
expr_stmt|;
name|dictionary
index|[
literal|"BUILDALL"
index|]
operator|=
literal|"auto"
expr_stmt|;
comment|// Means yes, but not explicitly
name|dictionary
index|[
literal|"BUILDTYPE"
index|]
operator|=
literal|"none"
expr_stmt|;
name|dictionary
index|[
literal|"BUILDDEV"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"BUILDNOKIA"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"SHARED"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"ZLIB"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"GIF"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"TIFF"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"JPEG"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"PNG"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"MNG"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"LIBTIFF"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"LIBJPEG"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"LIBPNG"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"LIBMNG"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"FREETYPE"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"QT3SUPPORT"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"ACCESSIBILITY"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"OPENGL"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"OPENVG"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"OPENSSL"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"DBUS"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"STYLE_WINDOWS"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"STYLE_WINDOWSXP"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"STYLE_WINDOWSVISTA"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"STYLE_PLASTIQUE"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"STYLE_CLEANLOOKS"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"STYLE_WINDOWSCE"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"STYLE_WINDOWSMOBILE"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"STYLE_MOTIF"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"STYLE_CDE"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"STYLE_GTK"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"SQL_MYSQL"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"SQL_ODBC"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"SQL_OCI"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"SQL_PSQL"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"SQL_TDS"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"SQL_DB2"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"SQL_SQLITE"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"SQL_SQLITE_LIB"
index|]
operator|=
literal|"qt"
expr_stmt|;
name|dictionary
index|[
literal|"SQL_SQLITE2"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"SQL_IBASE"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"GRAPHICS_SYSTEM"
index|]
operator|=
literal|"raster"
expr_stmt|;
name|QString
name|tmp
init|=
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
decl_stmt|;
if|if
condition|(
name|tmp
operator|.
name|contains
argument_list|(
literal|"\\"
argument_list|)
condition|)
block|{
name|tmp
operator|=
name|tmp
operator|.
name|mid
argument_list|(
name|tmp
operator|.
name|lastIndexOf
argument_list|(
literal|"\\"
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tmp
operator|=
name|tmp
operator|.
name|mid
argument_list|(
name|tmp
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|=
name|tmp
expr_stmt|;
name|dictionary
index|[
literal|"INCREDIBUILD_XGE"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"LTCG"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"NATIVE_GESTURES"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"MSVC_MP"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~Configure
name|Configure
operator|::
name|~
name|Configure
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
name|QList
argument_list|<
name|MakeItem
modifier|*
argument_list|>
name|items
init|=
name|makeList
index|[
name|i
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|items
operator|.
name|size
argument_list|()
condition|;
operator|++
name|j
control|)
operator|delete
name|items
index|[
name|j
index|]
expr_stmt|;
block|}
block|}
end_destructor
begin_function
DECL|function|fixSeparators
name|QString
name|Configure
operator|::
name|fixSeparators
parameter_list|(
specifier|const
name|QString
modifier|&
name|somePath
parameter_list|,
name|bool
name|escape
parameter_list|)
block|{
if|if
condition|(
name|useUnixSeparators
condition|)
return|return
name|QDir
operator|::
name|fromNativeSeparators
argument_list|(
name|somePath
argument_list|)
return|;
name|QString
name|ret
init|=
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|somePath
argument_list|)
decl_stmt|;
return|return
name|escape
condition|?
name|escapeSeparators
argument_list|(
name|ret
argument_list|)
else|:
name|ret
return|;
block|}
end_function
begin_function
DECL|function|escapeSeparators
name|QString
name|Configure
operator|::
name|escapeSeparators
parameter_list|(
specifier|const
name|QString
modifier|&
name|somePath
parameter_list|)
block|{
name|QString
name|out
init|=
name|somePath
decl_stmt|;
name|out
operator|.
name|replace
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\\'
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"\\\\"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|out
return|;
block|}
end_function
begin_comment
comment|// We could use QDir::homePath() + "/.qt-license", but
end_comment
begin_comment
comment|// that will only look in the first of $HOME,$USERPROFILE
end_comment
begin_comment
comment|// or $HOMEDRIVE$HOMEPATH. So, here we try'em all to be
end_comment
begin_comment
comment|// more forgiving for the end user..
end_comment
begin_function
DECL|function|firstLicensePath
name|QString
name|Configure
operator|::
name|firstLicensePath
parameter_list|()
block|{
name|QStringList
name|allPaths
decl_stmt|;
name|allPaths
operator|<<
literal|"./.qt-license"
operator|<<
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|getenv
argument_list|(
literal|"HOME"
argument_list|)
argument_list|)
operator|+
literal|"/.qt-license"
operator|<<
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|getenv
argument_list|(
literal|"USERPROFILE"
argument_list|)
argument_list|)
operator|+
literal|"/.qt-license"
operator|<<
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|getenv
argument_list|(
literal|"HOMEDRIVE"
argument_list|)
argument_list|)
operator|+
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|getenv
argument_list|(
literal|"HOMEPATH"
argument_list|)
argument_list|)
operator|+
literal|"/.qt-license"
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|allPaths
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|QFile
operator|::
name|exists
argument_list|(
name|allPaths
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
return|return
name|allPaths
operator|.
name|at
argument_list|(
name|i
argument_list|)
return|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|// #### somehow I get a compiler error about vc++ reaching the nesting limit without
end_comment
begin_comment
comment|// undefining the ansi for scoping.
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|for
end_ifdef
begin_undef
DECL|macro|for
undef|#
directive|undef
name|for
end_undef
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|parseCmdLine
name|void
name|Configure
operator|::
name|parseCmdLine
parameter_list|()
block|{
name|int
name|argCount
init|=
name|configCmdLine
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
specifier|const
name|QStringList
name|imageFormats
init|=
name|QStringList
argument_list|()
operator|<<
literal|"gif"
operator|<<
literal|"png"
operator|<<
literal|"mng"
operator|<<
literal|"jpeg"
operator|<<
literal|"tiff"
decl_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|EVAL
argument_list|)
if|if
condition|(
name|argCount
operator|<
literal|1
condition|)
comment|// skip rest if no arguments
empty_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-redo"
condition|)
block|{
name|dictionary
index|[
literal|"REDO"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|configCmdLine
operator|.
name|clear
argument_list|()
expr_stmt|;
name|reloadCmdLine
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-loadconfig"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|!=
name|argCount
condition|)
block|{
name|dictionary
index|[
literal|"REDO"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"CUSTOMCONFIG"
index|]
operator|=
literal|"_"
operator|+
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|configCmdLine
operator|.
name|clear
argument_list|()
expr_stmt|;
name|reloadCmdLine
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|dictionary
index|[
literal|"HELP"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
name|i
operator|=
literal|0
expr_stmt|;
block|}
name|argCount
operator|=
name|configCmdLine
operator|.
name|size
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|// Look first for XQMAKESPEC
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|argCount
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|j
argument_list|)
operator|==
literal|"-xplatform"
condition|)
block|{
operator|++
name|j
expr_stmt|;
if|if
condition|(
name|j
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"XQMAKESPEC"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|j
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"XQMAKESPEC"
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|applySpecSpecifics
argument_list|()
expr_stmt|;
block|}
block|}
for|for
control|(
init|;
name|i
operator|<
name|configCmdLine
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|bool
name|continueElse
index|[]
init|=
block|{
literal|false
block|,
literal|false
block|}
decl_stmt|;
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-help"
operator|||
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-h"
operator|||
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-?"
condition|)
name|dictionary
index|[
literal|"HELP"
index|]
operator|=
literal|"yes"
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|EVAL
argument_list|)
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qconfig"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"QCONFIG"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-release"
condition|)
block|{
name|dictionary
index|[
literal|"BUILD"
index|]
operator|=
literal|"release"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"BUILDALL"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"BUILDALL"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-debug"
condition|)
block|{
name|dictionary
index|[
literal|"BUILD"
index|]
operator|=
literal|"debug"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"BUILDALL"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"BUILDALL"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-debug-and-release"
condition|)
name|dictionary
index|[
literal|"BUILDALL"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-shared"
condition|)
name|dictionary
index|[
literal|"SHARED"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-static"
condition|)
name|dictionary
index|[
literal|"SHARED"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-developer-build"
condition|)
name|dictionary
index|[
literal|"BUILDDEV"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-nokia-developer"
condition|)
block|{
name|cout
operator|<<
literal|"Detected -nokia-developer option"
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"Nokia employees and agents are allowed to use this software under"
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"the authority of Nokia Corporation and/or its subsidiary(-ies)"
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"BUILDNOKIA"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"BUILDDEV"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"LICENSE_CONFIRMED"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-opensource"
condition|)
block|{
name|dictionary
index|[
literal|"BUILDTYPE"
index|]
operator|=
literal|"opensource"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-commercial"
condition|)
block|{
name|dictionary
index|[
literal|"BUILDTYPE"
index|]
operator|=
literal|"commercial"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-ltcg"
condition|)
block|{
name|dictionary
index|[
literal|"LTCG"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-ltcg"
condition|)
block|{
name|dictionary
index|[
literal|"LTCG"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-mp"
condition|)
block|{
name|dictionary
index|[
literal|"MSVC_MP"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-mp"
condition|)
block|{
name|dictionary
index|[
literal|"MSVC_MP"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-force-asserts"
condition|)
block|{
name|dictionary
index|[
literal|"FORCE_ASSERTS"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
endif|#
directive|endif
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-platform"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|dictionary
index|[
literal|"QMAKESPEC_FROM"
index|]
operator|=
literal|"commandline"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-arch"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"ARCHITECTURE"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"boundschecker"
condition|)
block|{
name|dictionary
index|[
literal|"ARCHITECTURE"
index|]
operator|=
literal|"generic"
expr_stmt|;
comment|// Boundschecker uses the generic arch,
name|qtConfig
operator|+=
literal|"boundschecker"
expr_stmt|;
comment|// but also needs this CONFIG option
block|}
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-embedded"
condition|)
block|{
name|dictionary
index|[
literal|"EMBEDDED"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-xplatform"
condition|)
block|{
operator|++
name|i
expr_stmt|;
comment|// do nothing
block|}
if|#
directive|if
operator|!
name|defined
argument_list|(
name|EVAL
argument_list|)
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-zlib"
condition|)
block|{
comment|// No longer supported since Qt 4.4.0
comment|// But save the information for later so that we can print a warning
comment|//
comment|// If you REALLY really need no zlib support, you can still disable
comment|// it by doing the following:
comment|//   add "no-zlib" to mkspecs/qconfig.pri
comment|//   #define QT_NO_COMPRESS (probably by adding to src/corelib/global/qconfig.h)
comment|//
comment|// There's no guarantee that Qt will build under those conditions
name|dictionary
index|[
literal|"ZLIB_FORCED"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qt-zlib"
condition|)
block|{
name|dictionary
index|[
literal|"ZLIB"
index|]
operator|=
literal|"qt"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-system-zlib"
condition|)
block|{
name|dictionary
index|[
literal|"ZLIB"
index|]
operator|=
literal|"system"
expr_stmt|;
block|}
comment|// Image formats --------------------------------------------
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-gif"
condition|)
name|dictionary
index|[
literal|"GIF"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-libtiff"
condition|)
block|{
name|dictionary
index|[
literal|"TIFF"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"LIBTIFF"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qt-libtiff"
condition|)
block|{
name|dictionary
index|[
literal|"LIBTIFF"
index|]
operator|=
literal|"qt"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-system-libtiff"
condition|)
block|{
name|dictionary
index|[
literal|"LIBTIFF"
index|]
operator|=
literal|"system"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-libjpeg"
condition|)
block|{
name|dictionary
index|[
literal|"JPEG"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"LIBJPEG"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qt-libjpeg"
condition|)
block|{
name|dictionary
index|[
literal|"LIBJPEG"
index|]
operator|=
literal|"qt"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-system-libjpeg"
condition|)
block|{
name|dictionary
index|[
literal|"LIBJPEG"
index|]
operator|=
literal|"system"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-libpng"
condition|)
block|{
name|dictionary
index|[
literal|"PNG"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"LIBPNG"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qt-libpng"
condition|)
block|{
name|dictionary
index|[
literal|"LIBPNG"
index|]
operator|=
literal|"qt"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-system-libpng"
condition|)
block|{
name|dictionary
index|[
literal|"LIBPNG"
index|]
operator|=
literal|"system"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-libmng"
condition|)
block|{
name|dictionary
index|[
literal|"MNG"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"LIBMNG"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qt-libmng"
condition|)
block|{
name|dictionary
index|[
literal|"LIBMNG"
index|]
operator|=
literal|"qt"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-system-libmng"
condition|)
block|{
name|dictionary
index|[
literal|"LIBMNG"
index|]
operator|=
literal|"system"
expr_stmt|;
block|}
comment|// Text Rendering --------------------------------------------
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-freetype"
condition|)
name|dictionary
index|[
literal|"FREETYPE"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qt-freetype"
condition|)
name|dictionary
index|[
literal|"FREETYPE"
index|]
operator|=
literal|"yes"
expr_stmt|;
comment|// CE- C runtime --------------------------------------------
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-crt"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|QDir
name|cDir
argument_list|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|cDir
operator|.
name|exists
argument_list|()
condition|)
name|cout
operator|<<
literal|"WARNING: Could not find directory ("
operator|<<
name|qPrintable
argument_list|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
operator|<<
literal|")for C runtime deployment"
operator|<<
name|endl
expr_stmt|;
else|else
name|dictionary
index|[
literal|"CE_CRT"
index|]
operator|=
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|cDir
operator|.
name|absolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qt-crt"
condition|)
block|{
name|dictionary
index|[
literal|"CE_CRT"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-crt"
condition|)
block|{
name|dictionary
index|[
literal|"CE_CRT"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
comment|// cetest ---------------------------------------------------
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-cetest"
condition|)
block|{
name|dictionary
index|[
literal|"CETEST"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"CETEST_REQUESTED"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-cetest"
condition|)
block|{
comment|// although specified to use it, we stay at "auto" state
comment|// this is because checkAvailability() adds variables
comment|// we need for crosscompilation; but remember if we asked
comment|// for it.
name|dictionary
index|[
literal|"CETEST_REQUESTED"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
comment|// Qt/CE - signing tool -------------------------------------
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-signature"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|QFileInfo
name|info
argument_list|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|info
operator|.
name|exists
argument_list|()
condition|)
name|cout
operator|<<
literal|"WARNING: Could not find signature file ("
operator|<<
name|qPrintable
argument_list|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
operator|<<
literal|")"
operator|<<
name|endl
expr_stmt|;
else|else
name|dictionary
index|[
literal|"CE_SIGNATURE"
index|]
operator|=
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|info
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Styles ---------------------------------------------------
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qt-style-windows"
condition|)
name|dictionary
index|[
literal|"STYLE_WINDOWS"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-style-windows"
condition|)
name|dictionary
index|[
literal|"STYLE_WINDOWS"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qt-style-windowsce"
condition|)
name|dictionary
index|[
literal|"STYLE_WINDOWSCE"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-style-windowsce"
condition|)
name|dictionary
index|[
literal|"STYLE_WINDOWSCE"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qt-style-windowsmobile"
condition|)
name|dictionary
index|[
literal|"STYLE_WINDOWSMOBILE"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-style-windowsmobile"
condition|)
name|dictionary
index|[
literal|"STYLE_WINDOWSMOBILE"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qt-style-windowsxp"
condition|)
name|dictionary
index|[
literal|"STYLE_WINDOWSXP"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-style-windowsxp"
condition|)
name|dictionary
index|[
literal|"STYLE_WINDOWSXP"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qt-style-windowsvista"
condition|)
name|dictionary
index|[
literal|"STYLE_WINDOWSVISTA"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-style-windowsvista"
condition|)
name|dictionary
index|[
literal|"STYLE_WINDOWSVISTA"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qt-style-plastique"
condition|)
name|dictionary
index|[
literal|"STYLE_PLASTIQUE"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-style-plastique"
condition|)
name|dictionary
index|[
literal|"STYLE_PLASTIQUE"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qt-style-cleanlooks"
condition|)
name|dictionary
index|[
literal|"STYLE_CLEANLOOKS"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-style-cleanlooks"
condition|)
name|dictionary
index|[
literal|"STYLE_CLEANLOOKS"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qt-style-motif"
condition|)
name|dictionary
index|[
literal|"STYLE_MOTIF"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-style-motif"
condition|)
name|dictionary
index|[
literal|"STYLE_MOTIF"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qt-style-cde"
condition|)
name|dictionary
index|[
literal|"STYLE_CDE"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-style-cde"
condition|)
name|dictionary
index|[
literal|"STYLE_CDE"
index|]
operator|=
literal|"no"
expr_stmt|;
comment|// Qt 3 Support ---------------------------------------------
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-qt3support"
condition|)
name|dictionary
index|[
literal|"QT3SUPPORT"
index|]
operator|=
literal|"no"
expr_stmt|;
comment|// Work around compiler nesting limitation
else|else
name|continueElse
index|[
literal|1
index|]
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|continueElse
index|[
literal|1
index|]
condition|)
block|{         }
comment|// OpenGL Support -------------------------------------------
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-opengl"
condition|)
block|{
name|dictionary
index|[
literal|"OPENGL"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-opengl-es-cm"
condition|)
block|{
name|dictionary
index|[
literal|"OPENGL"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"OPENGL_ES_CM"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-opengl-es-2"
condition|)
block|{
name|dictionary
index|[
literal|"OPENGL"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"OPENGL_ES_2"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-opengl"
condition|)
block|{
name|dictionary
index|[
literal|"OPENGL"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|i
operator|++
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"es1"
condition|)
block|{
name|dictionary
index|[
literal|"OPENGL_ES_CM"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"es2"
condition|)
block|{
name|dictionary
index|[
literal|"OPENGL_ES_2"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"desktop"
condition|)
block|{
comment|// OPENGL=yes suffices
block|}
else|else
block|{
name|cout
operator|<<
literal|"Argument passed to -opengl option is not valid."
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
break|break;
block|}
block|}
comment|// OpenVG Support -------------------------------------------
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-openvg"
condition|)
block|{
name|dictionary
index|[
literal|"OPENVG"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-openvg"
condition|)
block|{
name|dictionary
index|[
literal|"OPENVG"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
comment|// Databases ------------------------------------------------
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qt-sql-mysql"
condition|)
name|dictionary
index|[
literal|"SQL_MYSQL"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-plugin-sql-mysql"
condition|)
name|dictionary
index|[
literal|"SQL_MYSQL"
index|]
operator|=
literal|"plugin"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-sql-mysql"
condition|)
name|dictionary
index|[
literal|"SQL_MYSQL"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qt-sql-odbc"
condition|)
name|dictionary
index|[
literal|"SQL_ODBC"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-plugin-sql-odbc"
condition|)
name|dictionary
index|[
literal|"SQL_ODBC"
index|]
operator|=
literal|"plugin"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-sql-odbc"
condition|)
name|dictionary
index|[
literal|"SQL_ODBC"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qt-sql-oci"
condition|)
name|dictionary
index|[
literal|"SQL_OCI"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-plugin-sql-oci"
condition|)
name|dictionary
index|[
literal|"SQL_OCI"
index|]
operator|=
literal|"plugin"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-sql-oci"
condition|)
name|dictionary
index|[
literal|"SQL_OCI"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qt-sql-psql"
condition|)
name|dictionary
index|[
literal|"SQL_PSQL"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-plugin-sql-psql"
condition|)
name|dictionary
index|[
literal|"SQL_PSQL"
index|]
operator|=
literal|"plugin"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-sql-psql"
condition|)
name|dictionary
index|[
literal|"SQL_PSQL"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qt-sql-tds"
condition|)
name|dictionary
index|[
literal|"SQL_TDS"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-plugin-sql-tds"
condition|)
name|dictionary
index|[
literal|"SQL_TDS"
index|]
operator|=
literal|"plugin"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-sql-tds"
condition|)
name|dictionary
index|[
literal|"SQL_TDS"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qt-sql-db2"
condition|)
name|dictionary
index|[
literal|"SQL_DB2"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-plugin-sql-db2"
condition|)
name|dictionary
index|[
literal|"SQL_DB2"
index|]
operator|=
literal|"plugin"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-sql-db2"
condition|)
name|dictionary
index|[
literal|"SQL_DB2"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qt-sql-sqlite"
condition|)
name|dictionary
index|[
literal|"SQL_SQLITE"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-plugin-sql-sqlite"
condition|)
name|dictionary
index|[
literal|"SQL_SQLITE"
index|]
operator|=
literal|"plugin"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-sql-sqlite"
condition|)
name|dictionary
index|[
literal|"SQL_SQLITE"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-system-sqlite"
condition|)
name|dictionary
index|[
literal|"SQL_SQLITE_LIB"
index|]
operator|=
literal|"system"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qt-sql-sqlite2"
condition|)
name|dictionary
index|[
literal|"SQL_SQLITE2"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-plugin-sql-sqlite2"
condition|)
name|dictionary
index|[
literal|"SQL_SQLITE2"
index|]
operator|=
literal|"plugin"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-sql-sqlite2"
condition|)
name|dictionary
index|[
literal|"SQL_SQLITE2"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qt-sql-ibase"
condition|)
name|dictionary
index|[
literal|"SQL_IBASE"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-plugin-sql-ibase"
condition|)
name|dictionary
index|[
literal|"SQL_IBASE"
index|]
operator|=
literal|"plugin"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-sql-ibase"
condition|)
name|dictionary
index|[
literal|"SQL_IBASE"
index|]
operator|=
literal|"no"
expr_stmt|;
comment|// Image formats --------------------------------------------
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"-qt-imageformat-"
argument_list|)
operator|&&
name|imageFormats
operator|.
name|contains
argument_list|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|section
argument_list|(
literal|'-'
argument_list|,
literal|3
argument_list|)
argument_list|)
condition|)
name|dictionary
index|[
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|section
argument_list|(
literal|'-'
argument_list|,
literal|3
argument_list|)
operator|.
name|toUpper
argument_list|()
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"-plugin-imageformat-"
argument_list|)
operator|&&
name|imageFormats
operator|.
name|contains
argument_list|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|section
argument_list|(
literal|'-'
argument_list|,
literal|3
argument_list|)
argument_list|)
condition|)
name|dictionary
index|[
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|section
argument_list|(
literal|'-'
argument_list|,
literal|3
argument_list|)
operator|.
name|toUpper
argument_list|()
index|]
operator|=
literal|"plugin"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"-no-imageformat-"
argument_list|)
operator|&&
name|imageFormats
operator|.
name|contains
argument_list|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|section
argument_list|(
literal|'-'
argument_list|,
literal|3
argument_list|)
argument_list|)
condition|)
name|dictionary
index|[
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|section
argument_list|(
literal|'-'
argument_list|,
literal|3
argument_list|)
operator|.
name|toUpper
argument_list|()
index|]
operator|=
literal|"no"
expr_stmt|;
endif|#
directive|endif
comment|// IDE project generation -----------------------------------
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-dsp"
condition|)
name|dictionary
index|[
literal|"DSPFILES"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-dsp"
condition|)
name|dictionary
index|[
literal|"DSPFILES"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-vcp"
condition|)
name|dictionary
index|[
literal|"VCPFILES"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-vcp"
condition|)
name|dictionary
index|[
literal|"VCPFILES"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-vcproj"
condition|)
name|dictionary
index|[
literal|"VCPROJFILES"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-vcproj"
condition|)
name|dictionary
index|[
literal|"VCPROJFILES"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-incredibuild-xge"
condition|)
name|dictionary
index|[
literal|"INCREDIBUILD_XGE"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-incredibuild-xge"
condition|)
name|dictionary
index|[
literal|"INCREDIBUILD_XGE"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-native-gestures"
condition|)
name|dictionary
index|[
literal|"NATIVE_GESTURES"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-native-gestures"
condition|)
name|dictionary
index|[
literal|"NATIVE_GESTURES"
index|]
operator|=
literal|"no"
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|EVAL
argument_list|)
comment|// Others ---------------------------------------------------
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-fast"
condition|)
name|dictionary
index|[
literal|"FAST"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-fast"
condition|)
name|dictionary
index|[
literal|"FAST"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-stl"
condition|)
name|dictionary
index|[
literal|"STL"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-stl"
condition|)
name|dictionary
index|[
literal|"STL"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-exceptions"
condition|)
name|dictionary
index|[
literal|"EXCEPTIONS"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-exceptions"
condition|)
name|dictionary
index|[
literal|"EXCEPTIONS"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-rtti"
condition|)
name|dictionary
index|[
literal|"RTTI"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-rtti"
condition|)
name|dictionary
index|[
literal|"RTTI"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-accessibility"
condition|)
name|dictionary
index|[
literal|"ACCESSIBILITY"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-accessibility"
condition|)
block|{
name|dictionary
index|[
literal|"ACCESSIBILITY"
index|]
operator|=
literal|"no"
expr_stmt|;
name|cout
operator|<<
literal|"Setting accessibility to NO"
operator|<<
name|endl
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-mmx"
condition|)
name|dictionary
index|[
literal|"MMX"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-mmx"
condition|)
name|dictionary
index|[
literal|"MMX"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-3dnow"
condition|)
name|dictionary
index|[
literal|"3DNOW"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-3dnow"
condition|)
name|dictionary
index|[
literal|"3DNOW"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-sse"
condition|)
name|dictionary
index|[
literal|"SSE"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-sse"
condition|)
name|dictionary
index|[
literal|"SSE"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-sse2"
condition|)
name|dictionary
index|[
literal|"SSE2"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-sse2"
condition|)
name|dictionary
index|[
literal|"SSE2"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-iwmmxt"
condition|)
name|dictionary
index|[
literal|"IWMMXT"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-iwmmxt"
condition|)
name|dictionary
index|[
literal|"IWMMXT"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-openssl"
condition|)
block|{
name|dictionary
index|[
literal|"OPENSSL"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-openssl"
condition|)
block|{
name|dictionary
index|[
literal|"OPENSSL"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-openssl-linked"
condition|)
block|{
name|dictionary
index|[
literal|"OPENSSL"
index|]
operator|=
literal|"linked"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-qdbus"
condition|)
block|{
name|dictionary
index|[
literal|"DBUS"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qdbus"
condition|)
block|{
name|dictionary
index|[
literal|"DBUS"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-dbus"
condition|)
block|{
name|dictionary
index|[
literal|"DBUS"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-dbus"
condition|)
block|{
name|dictionary
index|[
literal|"DBUS"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-dbus-linked"
condition|)
block|{
name|dictionary
index|[
literal|"DBUS"
index|]
operator|=
literal|"linked"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-script"
condition|)
block|{
name|dictionary
index|[
literal|"SCRIPT"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-script"
condition|)
block|{
name|dictionary
index|[
literal|"SCRIPT"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-scripttools"
condition|)
block|{
name|dictionary
index|[
literal|"SCRIPTTOOLS"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-scripttools"
condition|)
block|{
name|dictionary
index|[
literal|"SCRIPTTOOLS"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-xmlpatterns"
condition|)
block|{
name|dictionary
index|[
literal|"XMLPATTERNS"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-xmlpatterns"
condition|)
block|{
name|dictionary
index|[
literal|"XMLPATTERNS"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-multimedia"
condition|)
block|{
name|dictionary
index|[
literal|"MULTIMEDIA"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-multimedia"
condition|)
block|{
name|dictionary
index|[
literal|"MULTIMEDIA"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-audio-backend"
condition|)
block|{
name|dictionary
index|[
literal|"AUDIO_BACKEND"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-audio-backend"
condition|)
block|{
name|dictionary
index|[
literal|"AUDIO_BACKEND"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-phonon"
condition|)
block|{
name|dictionary
index|[
literal|"PHONON"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-phonon"
condition|)
block|{
name|dictionary
index|[
literal|"PHONON"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-phonon-backend"
condition|)
block|{
name|dictionary
index|[
literal|"PHONON_BACKEND"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-phonon-backend"
condition|)
block|{
name|dictionary
index|[
literal|"PHONON_BACKEND"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-phonon-wince-ds9"
condition|)
block|{
name|dictionary
index|[
literal|"DIRECTSHOW"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-webkit"
condition|)
block|{
name|dictionary
index|[
literal|"WEBKIT"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-webkit"
condition|)
block|{
name|dictionary
index|[
literal|"WEBKIT"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-webkit-debug"
condition|)
block|{
name|dictionary
index|[
literal|"WEBKIT"
index|]
operator|=
literal|"debug"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-v8"
condition|)
block|{
name|dictionary
index|[
literal|"V8"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-v8"
condition|)
block|{
name|dictionary
index|[
literal|"V8"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-declarative"
condition|)
block|{
name|dictionary
index|[
literal|"DECLARATIVE"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-declarative"
condition|)
block|{
name|dictionary
index|[
literal|"DECLARATIVE"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-declarative-debug"
condition|)
block|{
name|dictionary
index|[
literal|"DECLARATIVE_DEBUG"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-declarative-debug"
condition|)
block|{
name|dictionary
index|[
literal|"DECLARATIVE_DEBUG"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-plugin-manifests"
condition|)
block|{
name|dictionary
index|[
literal|"PLUGIN_MANIFESTS"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-plugin-manifests"
condition|)
block|{
name|dictionary
index|[
literal|"PLUGIN_MANIFESTS"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
comment|// Work around compiler nesting limitation
else|else
name|continueElse
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|continueElse
index|[
literal|0
index|]
condition|)
block|{         }
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-internal"
condition|)
name|dictionary
index|[
literal|"QMAKE_INTERNAL"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-qmake"
condition|)
name|dictionary
index|[
literal|"BUILD_QMAKE"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qmake"
condition|)
name|dictionary
index|[
literal|"BUILD_QMAKE"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-dont-process"
condition|)
name|dictionary
index|[
literal|"NOPROCESS"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-process"
condition|)
name|dictionary
index|[
literal|"NOPROCESS"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-qmake-deps"
condition|)
name|dictionary
index|[
literal|"DEPENDENCIES"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qmake-deps"
condition|)
name|dictionary
index|[
literal|"DEPENDENCIES"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qtnamespace"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"QT_NAMESPACE"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qtlibinfix"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"QT_LIBINFIX"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-D"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|qmakeDefines
operator|+=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-I"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|qmakeIncludes
operator|+=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-L"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|QFileInfo
name|check
argument_list|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|check
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|cout
operator|<<
literal|"Argument passed to -L option is not a directory path. Did you mean the -l option?"
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
break|break;
block|}
name|qmakeLibs
operator|+=
name|QString
argument_list|(
literal|"-L"
operator|+
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-l"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|qmakeLibs
operator|+=
name|QString
argument_list|(
literal|"-l"
operator|+
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"OPENSSL_LIBS="
argument_list|)
condition|)
block|{
name|opensslLibs
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"PSQL_LIBS="
argument_list|)
condition|)
block|{
name|psqlLibs
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"SYBASE="
argument_list|)
condition|)
block|{
name|sybase
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"SYBASE_LIBS="
argument_list|)
condition|)
block|{
name|sybaseLibs
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qpa"
condition|)
block|{
name|dictionary
index|[
literal|"QPA"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-override-version"
operator|)
operator|||
operator|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-version-override"
operator|)
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"VERSION"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-saveconfig"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"CUSTOMCONFIG"
index|]
operator|=
literal|"_"
operator|+
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-confirm-license"
condition|)
block|{
name|dictionary
index|[
literal|"LICENSE_CONFIRMED"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-nomake"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|disabledBuildParts
operator|+=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
comment|// Directories ----------------------------------------------
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-prefix"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"QT_INSTALL_PREFIX"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-bindir"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"QT_INSTALL_BINS"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-libdir"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"QT_INSTALL_LIBS"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-docdir"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"QT_INSTALL_DOCS"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-headerdir"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"QT_INSTALL_HEADERS"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-plugindir"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"QT_INSTALL_PLUGINS"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-importdir"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"QT_INSTALL_IMPORTS"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-datadir"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"QT_INSTALL_DATA"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-translationdir"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"QT_INSTALL_TRANSLATIONS"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-examplesdir"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"QT_INSTALL_EXAMPLES"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-testsdir"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"QT_INSTALL_TESTS"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-hostprefix"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"QT_HOST_PREFIX"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-make"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"MAKE"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-graphicssystem"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|QString
name|system
init|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|system
operator|==
name|QLatin1String
argument_list|(
literal|"raster"
argument_list|)
operator|||
name|system
operator|==
name|QLatin1String
argument_list|(
literal|"opengl"
argument_list|)
operator|||
name|system
operator|==
name|QLatin1String
argument_list|(
literal|"openvg"
argument_list|)
operator|||
name|system
operator|==
name|QLatin1String
argument_list|(
literal|"runtime"
argument_list|)
condition|)
name|dictionary
index|[
literal|"GRAPHICS_SYSTEM"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-runtimegraphicssystem"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"RUNTIME_SYSTEM"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|indexOf
argument_list|(
name|QRegExp
argument_list|(
literal|"^-(en|dis)able-"
argument_list|)
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// Scan to see if any specific modules and drivers are enabled or disabled
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|module
init|=
name|modules
operator|.
name|begin
argument_list|()
init|;
name|module
operator|!=
name|modules
operator|.
name|end
argument_list|()
condition|;
operator|++
name|module
control|)
block|{
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
name|QString
argument_list|(
literal|"-enable-"
argument_list|)
operator|+
operator|(
operator|*
name|module
operator|)
condition|)
block|{
name|enabledModules
operator|+=
operator|(
operator|*
name|module
operator|)
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
name|QString
argument_list|(
literal|"-disable-"
argument_list|)
operator|+
operator|(
operator|*
name|module
operator|)
condition|)
block|{
name|disabledModules
operator|+=
operator|(
operator|*
name|module
operator|)
expr_stmt|;
break|break;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-directwrite"
condition|)
block|{
name|dictionary
index|[
literal|"DIRECTWRITE"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-directwrite"
condition|)
block|{
name|dictionary
index|[
literal|"DIRECTWRITE"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
else|else
block|{
name|dictionary
index|[
literal|"HELP"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|cout
operator|<<
literal|"Unknown option "
operator|<<
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|<<
name|endl
expr_stmt|;
break|break;
block|}
endif|#
directive|endif
block|}
comment|// Ensure that QMAKESPEC exists in the mkspecs folder
name|QDir
name|mkspec_dir
init|=
name|fixSeparators
argument_list|(
name|sourcePath
operator|+
literal|"/mkspecs"
argument_list|)
decl_stmt|;
name|QStringList
name|mkspecs
init|=
name|mkspec_dir
operator|.
name|entryList
argument_list|(
name|QDir
operator|::
name|AllDirs
operator||
name|QDir
operator|::
name|NoDotAndDotDot
argument_list|)
decl_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|.
name|toLower
argument_list|()
operator|==
literal|"features"
operator|||
operator|!
name|mkspecs
operator|.
name|contains
argument_list|(
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
block|{
name|dictionary
index|[
literal|"HELP"
index|]
operator|=
literal|"yes"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"QMAKESPEC_FROM"
index|]
operator|==
literal|"commandline"
condition|)
block|{
name|cout
operator|<<
literal|"Invalid option \""
operator|<<
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|<<
literal|"\" for -platform."
operator|<<
name|endl
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dictionary
index|[
literal|"QMAKESPEC_FROM"
index|]
operator|==
literal|"env"
condition|)
block|{
name|cout
operator|<<
literal|"QMAKESPEC environment variable is set to \""
operator|<<
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|<<
literal|"\" which is not a supported platform"
operator|<<
name|endl
expr_stmt|;
block|}
else|else
block|{
comment|// was autodetected from environment
name|cout
operator|<<
literal|"Unable to detect the platform from environment. Use -platform command line"
literal|"argument or set the QMAKESPEC environment variable and run configure again"
operator|<<
name|endl
expr_stmt|;
block|}
name|cout
operator|<<
literal|"See the README file for a list of supported operating systems and compilers."
operator|<<
name|endl
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|.
name|endsWith
argument_list|(
literal|"-icc"
argument_list|)
operator|||
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|.
name|endsWith
argument_list|(
literal|"-msvc"
argument_list|)
operator|||
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|.
name|endsWith
argument_list|(
literal|"-msvc.net"
argument_list|)
operator|||
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|.
name|endsWith
argument_list|(
literal|"-msvc2002"
argument_list|)
operator|||
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|.
name|endsWith
argument_list|(
literal|"-msvc2003"
argument_list|)
operator|||
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|.
name|endsWith
argument_list|(
literal|"-msvc2005"
argument_list|)
operator|||
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|.
name|endsWith
argument_list|(
literal|"-msvc2008"
argument_list|)
operator|||
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|.
name|endsWith
argument_list|(
literal|"-msvc2010"
argument_list|)
condition|)
block|{
if|if
condition|(
name|dictionary
index|[
literal|"MAKE"
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|dictionary
index|[
literal|"MAKE"
index|]
operator|=
literal|"nmake"
expr_stmt|;
name|dictionary
index|[
literal|"QMAKEMAKEFILE"
index|]
operator|=
literal|"Makefile.win32"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|==
name|QString
argument_list|(
literal|"win32-g++"
argument_list|)
condition|)
block|{
if|if
condition|(
name|dictionary
index|[
literal|"MAKE"
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|dictionary
index|[
literal|"MAKE"
index|]
operator|=
literal|"mingw32-make"
expr_stmt|;
if|if
condition|(
name|Environment
operator|::
name|detectExecutable
argument_list|(
literal|"sh.exe"
argument_list|)
condition|)
block|{
name|dictionary
index|[
literal|"QMAKEMAKEFILE"
index|]
operator|=
literal|"Makefile.win32-g++-sh"
expr_stmt|;
block|}
else|else
block|{
name|dictionary
index|[
literal|"QMAKEMAKEFILE"
index|]
operator|=
literal|"Makefile.win32-g++"
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|dictionary
index|[
literal|"MAKE"
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|dictionary
index|[
literal|"MAKE"
index|]
operator|=
literal|"make"
expr_stmt|;
name|dictionary
index|[
literal|"QMAKEMAKEFILE"
index|]
operator|=
literal|"Makefile.win32"
expr_stmt|;
block|}
block|}
comment|// Tell the user how to proceed building Qt after configure finished its job
name|dictionary
index|[
literal|"QTBUILDINSTRUCTION"
index|]
operator|=
name|dictionary
index|[
literal|"MAKE"
index|]
expr_stmt|;
if|if
condition|(
name|dictionary
operator|.
name|contains
argument_list|(
literal|"XQMAKESPEC"
argument_list|)
condition|)
block|{
if|if
condition|(
name|dictionary
index|[
literal|"XQMAKESPEC"
index|]
operator|.
name|startsWith
argument_list|(
literal|"wince"
argument_list|)
condition|)
block|{
name|dictionary
index|[
literal|"QTBUILDINSTRUCTION"
index|]
operator|=
name|QString
argument_list|(
literal|"setcepaths.bat "
argument_list|)
operator|+
name|dictionary
index|[
literal|"XQMAKESPEC"
index|]
operator|+
name|QString
argument_list|(
literal|"&& "
argument_list|)
operator|+
name|dictionary
index|[
literal|"MAKE"
index|]
expr_stmt|;
block|}
block|}
comment|// Tell the user how to confclean before the next configure
name|dictionary
index|[
literal|"CONFCLEANINSTRUCTION"
index|]
operator|=
name|dictionary
index|[
literal|"MAKE"
index|]
operator|+
name|QString
argument_list|(
literal|" confclean"
argument_list|)
expr_stmt|;
comment|// Ensure that -spec (XQMAKESPEC) exists in the mkspecs folder as well
if|if
condition|(
name|dictionary
operator|.
name|contains
argument_list|(
literal|"XQMAKESPEC"
argument_list|)
operator|&&
operator|!
name|mkspecs
operator|.
name|contains
argument_list|(
name|dictionary
index|[
literal|"XQMAKESPEC"
index|]
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
block|{
name|dictionary
index|[
literal|"HELP"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|cout
operator|<<
literal|"Invalid option \""
operator|<<
name|dictionary
index|[
literal|"XQMAKESPEC"
index|]
operator|<<
literal|"\" for -xplatform."
operator|<<
name|endl
expr_stmt|;
block|}
comment|// Ensure that the crt to be deployed can be found
if|if
condition|(
name|dictionary
index|[
literal|"CE_CRT"
index|]
operator|!=
name|QLatin1String
argument_list|(
literal|"yes"
argument_list|)
operator|&&
name|dictionary
index|[
literal|"CE_CRT"
index|]
operator|!=
name|QLatin1String
argument_list|(
literal|"no"
argument_list|)
condition|)
block|{
name|QDir
name|cDir
argument_list|(
name|dictionary
index|[
literal|"CE_CRT"
index|]
argument_list|)
decl_stmt|;
name|QStringList
name|entries
init|=
name|cDir
operator|.
name|entryList
argument_list|()
decl_stmt|;
name|bool
name|hasDebug
init|=
name|entries
operator|.
name|contains
argument_list|(
literal|"msvcr80.dll"
argument_list|)
decl_stmt|;
name|bool
name|hasRelease
init|=
name|entries
operator|.
name|contains
argument_list|(
literal|"msvcr80d.dll"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|dictionary
index|[
literal|"BUILDALL"
index|]
operator|==
literal|"auto"
operator|)
operator|&&
operator|(
operator|!
name|hasDebug
operator|||
operator|!
name|hasRelease
operator|)
condition|)
block|{
name|cout
operator|<<
literal|"Could not find debug and release c-runtime."
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"You need to have msvcr80.dll and msvcr80d.dll in"
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"the path specified. Setting to -no-crt"
expr_stmt|;
name|dictionary
index|[
literal|"CE_CRT"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|dictionary
index|[
literal|"BUILD"
index|]
operator|==
literal|"debug"
operator|)
operator|&&
operator|!
name|hasDebug
condition|)
block|{
name|cout
operator|<<
literal|"Could not find debug c-runtime (msvcr80d.dll) in the directory specified."
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"Setting c-runtime automatic deployment to -no-crt"
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"CE_CRT"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|dictionary
index|[
literal|"BUILD"
index|]
operator|==
literal|"release"
operator|)
operator|&&
operator|!
name|hasRelease
condition|)
block|{
name|cout
operator|<<
literal|"Could not find release c-runtime (msvcr80.dll) in the directory specified."
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"Setting c-runtime automatic deployment to -no-crt"
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"CE_CRT"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
block|}
name|useUnixSeparators
operator|=
operator|(
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|==
literal|"win32-g++"
operator|)
expr_stmt|;
comment|// Allow tests for private classes to be compiled against internal builds
if|if
condition|(
name|dictionary
index|[
literal|"BUILDDEV"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"private_tests"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"FORCE_ASSERTS"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"force_asserts"
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|EVAL
argument_list|)
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|dis
init|=
name|disabledModules
operator|.
name|begin
argument_list|()
init|;
name|dis
operator|!=
name|disabledModules
operator|.
name|end
argument_list|()
condition|;
operator|++
name|dis
control|)
block|{
name|modules
operator|.
name|removeAll
argument_list|(
operator|(
operator|*
name|dis
operator|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|ena
init|=
name|enabledModules
operator|.
name|begin
argument_list|()
init|;
name|ena
operator|!=
name|enabledModules
operator|.
name|end
argument_list|()
condition|;
operator|++
name|ena
control|)
block|{
if|if
condition|(
name|modules
operator|.
name|indexOf
argument_list|(
operator|(
operator|*
name|ena
operator|)
argument_list|)
operator|==
operator|-
literal|1
condition|)
name|modules
operator|+=
operator|(
operator|*
name|ena
operator|)
expr_stmt|;
block|}
name|qtConfig
operator|+=
name|modules
expr_stmt|;
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|it
init|=
name|disabledModules
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|disabledModules
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
name|qtConfig
operator|.
name|removeAll
argument_list|(
operator|*
name|it
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|dictionary
index|[
literal|"REDO"
index|]
operator|!=
literal|"yes"
operator|)
operator|&&
operator|(
name|dictionary
index|[
literal|"HELP"
index|]
operator|!=
literal|"yes"
operator|)
condition|)
name|saveCmdLine
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|EVAL
argument_list|)
end_if
begin_function
DECL|function|validateArgs
name|void
name|Configure
operator|::
name|validateArgs
parameter_list|()
block|{
comment|// Validate the specified config
comment|// Get all possible configurations from the file system.
name|QDir
name|dir
decl_stmt|;
name|QStringList
name|filters
decl_stmt|;
name|filters
operator|<<
literal|"qconfig-*.h"
expr_stmt|;
name|dir
operator|.
name|setNameFilters
argument_list|(
name|filters
argument_list|)
expr_stmt|;
name|dir
operator|.
name|setPath
argument_list|(
name|sourcePath
operator|+
literal|"/src/corelib/global/"
argument_list|)
expr_stmt|;
name|QStringList
name|stringList
init|=
name|dir
operator|.
name|entryList
argument_list|()
decl_stmt|;
name|QStringList
operator|::
name|Iterator
name|it
decl_stmt|;
for|for
control|(
name|it
operator|=
name|stringList
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|stringList
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
name|allConfigs
operator|<<
name|it
operator|->
name|remove
argument_list|(
literal|"qconfig-"
argument_list|)
operator|.
name|remove
argument_list|(
literal|".h"
argument_list|)
expr_stmt|;
name|allConfigs
operator|<<
literal|"full"
expr_stmt|;
comment|// Try internal configurations first.
name|QStringList
name|possible_configs
init|=
name|QStringList
argument_list|()
operator|<<
literal|"minimal"
operator|<<
literal|"small"
operator|<<
literal|"medium"
operator|<<
literal|"large"
operator|<<
literal|"full"
decl_stmt|;
name|int
name|index
init|=
name|possible_configs
operator|.
name|indexOf
argument_list|(
name|dictionary
index|[
literal|"QCONFIG"
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<=
name|index
condition|;
name|c
operator|++
control|)
block|{
name|qmakeConfig
operator|+=
name|possible_configs
index|[
name|c
index|]
operator|+
literal|"-config"
expr_stmt|;
block|}
return|return;
block|}
comment|// If the internal configurations failed, try others.
name|QStringList
operator|::
name|Iterator
name|config
decl_stmt|;
for|for
control|(
name|config
operator|=
name|allConfigs
operator|.
name|begin
argument_list|()
init|;
name|config
operator|!=
name|allConfigs
operator|.
name|end
argument_list|()
condition|;
operator|++
name|config
control|)
block|{
if|if
condition|(
operator|(
operator|*
name|config
operator|)
operator|==
name|dictionary
index|[
literal|"QCONFIG"
index|]
condition|)
break|break;
block|}
if|if
condition|(
name|config
operator|==
name|allConfigs
operator|.
name|end
argument_list|()
condition|)
block|{
name|dictionary
index|[
literal|"HELP"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|cout
operator|<<
literal|"No such configuration \""
operator|<<
name|qPrintable
argument_list|(
name|dictionary
index|[
literal|"QCONFIG"
index|]
argument_list|)
operator|<<
literal|"\""
operator|<<
name|endl
expr_stmt|;
block|}
else|else
name|qmakeConfig
operator|+=
operator|(
operator|*
name|config
operator|)
operator|+
literal|"-config"
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Output helper functions --------------------------------[ Start ]-
end_comment
begin_comment
comment|/*!     Determines the length of a string token. */
end_comment
begin_function
DECL|function|tokenLength
specifier|static
name|int
name|tokenLength
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|)
block|{
if|if
condition|(
operator|*
name|str
operator|==
literal|0
condition|)
return|return
literal|0
return|;
specifier|const
name|char
modifier|*
name|nextToken
init|=
name|strpbrk
argument_list|(
name|str
argument_list|,
literal|" _/\n\r"
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextToken
operator|==
name|str
operator|||
operator|!
name|nextToken
condition|)
return|return
literal|1
return|;
return|return
name|int
argument_list|(
name|nextToken
operator|-
name|str
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Prints out a string which starts at position \a startingAt, and     indents each wrapped line with \a wrapIndent characters.     The wrap point is set to the console width, unless that width     cannot be determined, or is too small. */
end_comment
begin_function
DECL|function|desc
name|void
name|Configure
operator|::
name|desc
parameter_list|(
specifier|const
name|char
modifier|*
name|description
parameter_list|,
name|int
name|startingAt
parameter_list|,
name|int
name|wrapIndent
parameter_list|)
block|{
name|int
name|linePos
init|=
name|startingAt
decl_stmt|;
name|bool
name|firstLine
init|=
literal|true
decl_stmt|;
specifier|const
name|char
modifier|*
name|nextToken
init|=
name|description
decl_stmt|;
while|while
condition|(
operator|*
name|nextToken
condition|)
block|{
name|int
name|nextTokenLen
init|=
name|tokenLength
argument_list|(
name|nextToken
argument_list|)
decl_stmt|;
if|if
condition|(
operator|*
name|nextToken
operator|==
literal|'\n'
comment|// Wrap on newline, duh
operator|||
operator|(
name|linePos
operator|+
name|nextTokenLen
operator|>
name|outputWidth
operator|)
condition|)
comment|// Wrap at outputWidth
block|{
name|printf
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|linePos
operator|=
literal|0
expr_stmt|;
name|firstLine
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|*
name|nextToken
operator|==
literal|'\n'
condition|)
operator|++
name|nextToken
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|firstLine
operator|&&
name|linePos
operator|<
name|wrapIndent
condition|)
block|{
comment|// Indent to wrapIndent
name|printf
argument_list|(
literal|"%*s"
argument_list|,
name|wrapIndent
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|linePos
operator|=
name|wrapIndent
expr_stmt|;
if|if
condition|(
operator|*
name|nextToken
operator|==
literal|' '
condition|)
block|{
operator|++
name|nextToken
expr_stmt|;
continue|continue;
block|}
block|}
name|printf
argument_list|(
literal|"%.*s"
argument_list|,
name|nextTokenLen
argument_list|,
name|nextToken
argument_list|)
expr_stmt|;
name|linePos
operator|+=
name|nextTokenLen
expr_stmt|;
name|nextToken
operator|+=
name|nextTokenLen
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Prints out an option with its description wrapped at the     description starting point. If \a skipIndent is true, the     indentation to the option is not outputted (used by marked option     version of desc()). Extra spaces between option and its     description is filled with\a fillChar, if there's available     space. */
end_comment
begin_function
DECL|function|desc
name|void
name|Configure
operator|::
name|desc
parameter_list|(
specifier|const
name|char
modifier|*
name|option
parameter_list|,
specifier|const
name|char
modifier|*
name|description
parameter_list|,
name|bool
name|skipIndent
parameter_list|,
name|char
name|fillChar
parameter_list|)
block|{
if|if
condition|(
operator|!
name|skipIndent
condition|)
name|printf
argument_list|(
literal|"%*s"
argument_list|,
name|optionIndent
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|int
name|remaining
init|=
name|descIndent
operator|-
name|optionIndent
operator|-
name|strlen
argument_list|(
name|option
argument_list|)
decl_stmt|;
name|int
name|wrapIndent
init|=
name|descIndent
operator|+
name|qMax
argument_list|(
literal|0
argument_list|,
literal|1
operator|-
name|remaining
argument_list|)
decl_stmt|;
name|printf
argument_list|(
literal|"%s"
argument_list|,
name|option
argument_list|)
expr_stmt|;
if|if
condition|(
name|remaining
operator|>
literal|2
condition|)
block|{
name|printf
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
comment|// Space in front
for|for
control|(
name|int
name|i
init|=
name|remaining
init|;
name|i
operator|>
literal|2
condition|;
operator|--
name|i
control|)
name|printf
argument_list|(
literal|"%c"
argument_list|,
name|fillChar
argument_list|)
expr_stmt|;
comment|// Fill, if available space
block|}
name|printf
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
comment|// Space between option and description
name|desc
argument_list|(
name|description
argument_list|,
name|wrapIndent
argument_list|,
name|wrapIndent
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Same as above, except it also marks an option with an '*', if     the option is default action. */
end_comment
begin_function
DECL|function|desc
name|void
name|Configure
operator|::
name|desc
parameter_list|(
specifier|const
name|char
modifier|*
name|mark_option
parameter_list|,
specifier|const
name|char
modifier|*
name|mark
parameter_list|,
specifier|const
name|char
modifier|*
name|option
parameter_list|,
specifier|const
name|char
modifier|*
name|description
parameter_list|,
name|char
name|fillChar
parameter_list|)
block|{
specifier|const
name|QString
name|markedAs
init|=
name|dictionary
operator|.
name|value
argument_list|(
name|mark_option
argument_list|)
decl_stmt|;
if|if
condition|(
name|markedAs
operator|==
literal|"auto"
operator|&&
name|markedAs
operator|==
name|mark
condition|)
comment|// both "auto", always => +
name|printf
argument_list|(
literal|" +  "
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|markedAs
operator|==
literal|"auto"
condition|)
comment|// setting marked as "auto" and option is default => +
name|printf
argument_list|(
literal|" %c  "
argument_list|,
operator|(
name|defaultTo
argument_list|(
name|mark_option
argument_list|)
operator|==
name|QLatin1String
argument_list|(
name|mark
argument_list|)
operator|)
condition|?
literal|'+'
else|:
literal|' '
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|QLatin1String
argument_list|(
name|mark
argument_list|)
operator|==
literal|"auto"
operator|&&
name|markedAs
operator|!=
literal|"no"
condition|)
comment|// description marked as "auto" and option is available => +
name|printf
argument_list|(
literal|" %c  "
argument_list|,
name|checkAvailability
argument_list|(
name|mark_option
argument_list|)
condition|?
literal|'+'
else|:
literal|' '
argument_list|)
expr_stmt|;
else|else
comment|// None are "auto", (markedAs == mark) => *
name|printf
argument_list|(
literal|" %c  "
argument_list|,
name|markedAs
operator|==
name|QLatin1String
argument_list|(
name|mark
argument_list|)
condition|?
literal|'*'
else|:
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
name|option
argument_list|,
name|description
argument_list|,
literal|true
argument_list|,
name|fillChar
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Modifies the default configuration based on given -platform option.     Eg. switches to different default styles for Windows CE. */
end_comment
begin_function
DECL|function|applySpecSpecifics
name|void
name|Configure
operator|::
name|applySpecSpecifics
parameter_list|()
block|{
if|if
condition|(
name|dictionary
index|[
literal|"XQMAKESPEC"
index|]
operator|.
name|startsWith
argument_list|(
literal|"wince"
argument_list|)
condition|)
block|{
name|dictionary
index|[
literal|"STYLE_WINDOWSXP"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"STYLE_WINDOWSVISTA"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"STYLE_PLASTIQUE"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"STYLE_CLEANLOOKS"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"STYLE_WINDOWSCE"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"STYLE_WINDOWSMOBILE"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"STYLE_MOTIF"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"STYLE_CDE"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"FREETYPE"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"QT3SUPPORT"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"OPENGL"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"OPENSSL"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"STL"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"EXCEPTIONS"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"RTTI"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"ARCHITECTURE"
index|]
operator|=
literal|"windowsce"
expr_stmt|;
name|dictionary
index|[
literal|"3DNOW"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"SSE"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"SSE2"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"MMX"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"IWMMXT"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"CE_CRT"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"WEBKIT"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"PHONON"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"DIRECTSHOW"
index|]
operator|=
literal|"no"
expr_stmt|;
comment|// We only apply MMX/IWMMXT for mkspecs we know they work
if|if
condition|(
name|dictionary
index|[
literal|"XQMAKESPEC"
index|]
operator|.
name|startsWith
argument_list|(
literal|"wincewm"
argument_list|)
condition|)
block|{
name|dictionary
index|[
literal|"MMX"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"IWMMXT"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"DIRECTSHOW"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
name|dictionary
index|[
literal|"QT_HOST_PREFIX"
index|]
operator|=
name|dictionary
index|[
literal|"QT_INSTALL_PREFIX"
index|]
expr_stmt|;
name|dictionary
index|[
literal|"QT_INSTALL_PREFIX"
index|]
operator|=
literal|""
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dictionary
index|[
literal|"XQMAKESPEC"
index|]
operator|.
name|startsWith
argument_list|(
literal|"linux"
argument_list|)
condition|)
block|{
comment|//TODO actually wrong.
comment|//TODO
name|dictionary
index|[
literal|"STYLE_WINDOWSXP"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"STYLE_WINDOWSVISTA"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"KBD_DRIVERS"
index|]
operator|=
literal|"tty"
expr_stmt|;
name|dictionary
index|[
literal|"GFX_DRIVERS"
index|]
operator|=
literal|"linuxfb vnc"
expr_stmt|;
name|dictionary
index|[
literal|"MOUSE_DRIVERS"
index|]
operator|=
literal|"pc linuxtp"
expr_stmt|;
name|dictionary
index|[
literal|"QT3SUPPORT"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"OPENGL"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"EXCEPTIONS"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"DBUS"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"QT_QWS_DEPTH"
index|]
operator|=
literal|"4 8 16 24 32"
expr_stmt|;
name|dictionary
index|[
literal|"QT_SXE"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"QT_INOTIFY"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"QT_LPR"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"QT_CUPS"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"QT_GLIB"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"QT_ICONV"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"DECORATIONS"
index|]
operator|=
literal|"default windows styled"
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|locateFileInPaths
name|QString
name|Configure
operator|::
name|locateFileInPaths
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|paths
parameter_list|)
block|{
name|QDir
name|d
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|it
init|=
name|paths
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|paths
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
comment|// Remove any leading or trailing ", this is commonly used in the environment
comment|// variables
name|QString
name|path
init|=
operator|(
operator|*
name|it
operator|)
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|"\""
argument_list|)
condition|)
name|path
operator|=
name|path
operator|.
name|right
argument_list|(
name|path
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|.
name|endsWith
argument_list|(
literal|"\""
argument_list|)
condition|)
name|path
operator|=
name|path
operator|.
name|left
argument_list|(
name|path
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|.
name|exists
argument_list|(
name|path
operator|+
name|QDir
operator|::
name|separator
argument_list|()
operator|+
name|fileName
argument_list|)
condition|)
block|{
return|return
operator|(
name|path
operator|)
return|;
block|}
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|locateFile
name|QString
name|Configure
operator|::
name|locateFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
block|{
name|QString
name|file
init|=
name|fileName
operator|.
name|toLower
argument_list|()
decl_stmt|;
name|QStringList
name|paths
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN32
argument_list|)
name|QRegExp
name|splitReg
argument_list|(
literal|"[;,]"
argument_list|)
decl_stmt|;
else|#
directive|else
name|QRegExp
name|splitReg
argument_list|(
literal|"[:]"
argument_list|)
decl_stmt|;
endif|#
directive|endif
if|if
condition|(
name|file
operator|.
name|endsWith
argument_list|(
literal|".h"
argument_list|)
condition|)
name|paths
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|getenv
argument_list|(
literal|"INCLUDE"
argument_list|)
argument_list|)
operator|.
name|split
argument_list|(
name|splitReg
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|file
operator|.
name|endsWith
argument_list|(
literal|".lib"
argument_list|)
condition|)
name|paths
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|getenv
argument_list|(
literal|"LIB"
argument_list|)
argument_list|)
operator|.
name|split
argument_list|(
name|splitReg
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
expr_stmt|;
else|else
name|paths
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|getenv
argument_list|(
literal|"PATH"
argument_list|)
argument_list|)
operator|.
name|split
argument_list|(
name|splitReg
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
expr_stmt|;
return|return
name|locateFileInPaths
argument_list|(
name|file
argument_list|,
name|paths
argument_list|)
return|;
block|}
end_function
begin_comment
comment|// Output helper functions ---------------------------------[ Stop ]-
end_comment
begin_function
DECL|function|displayHelp
name|bool
name|Configure
operator|::
name|displayHelp
parameter_list|()
block|{
if|if
condition|(
name|dictionary
index|[
literal|"HELP"
index|]
operator|==
literal|"yes"
condition|)
block|{
name|desc
argument_list|(
literal|"Usage: configure\n"
comment|//      desc("Usage: configure [-prefix dir] [-bindir<dir>] [-libdir<dir>]\n"
comment|//                  "[-docdir<dir>] [-headerdir<dir>] [-plugindir<dir>]\n"
comment|//                  "[-importdir<dir>] [-datadir<dir>] [-translationdir<dir>]\n"
comment|//                  "[-examplesdir<dir>]\n"
literal|"[-release] [-debug] [-debug-and-release] [-shared] [-static]\n"
literal|"[-no-fast] [-fast] [-no-exceptions] [-exceptions]\n"
literal|"[-no-accessibility] [-accessibility] [-no-rtti] [-rtti]\n"
literal|"[-no-stl] [-stl] [-no-sql-<driver>] [-qt-sql-<driver>]\n"
literal|"[-plugin-sql-<driver>] [-system-sqlite] [-arch<arch>]\n"
literal|"[-D<define>] [-I<includepath>] [-L<librarypath>]\n"
literal|"[-help] [-no-dsp] [-dsp] [-no-vcproj] [-vcproj]\n"
literal|"[-no-qmake] [-qmake] [-dont-process] [-process]\n"
literal|"[-no-style-<style>] [-qt-style-<style>] [-redo]\n"
literal|"[-saveconfig<config>] [-loadconfig<config>]\n"
literal|"[-qt-zlib] [-system-zlib] [-no-gif] [-no-libpng]\n"
literal|"[-qt-libpng] [-system-libpng] [-no-libtiff] [-qt-libtiff]\n"
literal|"[-system-libtiff] [-no-libjpeg] [-qt-libjpeg] [-system-libjpeg]\n"
literal|"[-no-libmng] [-qt-libmng] [-system-libmng] [-no-qt3support] [-mmx]\n"
literal|"[-no-mmx] [-3dnow] [-no-3dnow] [-sse] [-no-sse] [-sse2] [-no-sse2]\n"
literal|"[-no-iwmmxt] [-iwmmxt] [-openssl] [-openssl-linked]\n"
literal|"[-no-openssl] [-no-dbus] [-dbus] [-dbus-linked] [-platform<spec>]\n"
literal|"[-qtnamespace<namespace>] [-qtlibinfix<infix>] [-no-phonon]\n"
literal|"[-phonon] [-no-phonon-backend] [-phonon-backend]\n"
literal|"[-no-multimedia] [-multimedia] [-no-audio-backend] [-audio-backend]\n"
literal|"[-no-script] [-script] [-no-scripttools] [-scripttools]\n"
literal|"[-no-webkit] [-webkit] [-webkit-debug]\n"
literal|"[-graphicssystem raster|opengl|openvg]\n"
literal|"[-no-directwrite] [-directwrite] [-qpa]\n\n"
argument_list|,
literal|0
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"Installation options:\n\n"
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|EVAL
argument_list|)
comment|/*         desc(" These are optional, but you may specify install directories.\n\n", 0, 1);          desc(                   "-prefix dir",          "This will install everything relative to dir\n(default $QT_INSTALL_PREFIX)\n");          desc(" You may use these to separate different parts of the install:\n\n", 0, 1);          desc(                   "-bindir<dir>",        "Executables will be installed to dir\n(default PREFIX/bin)");         desc(                   "-libdir<dir>",        "Libraries will be installed to dir\n(default PREFIX/lib)");         desc(                   "-docdir<dir>",        "Documentation will be installed to dir\n(default PREFIX/doc)");         desc(                   "-headerdir<dir>",     "Headers will be installed to dir\n(default PREFIX/include)");         desc(                   "-plugindir<dir>",     "Plugins will be installed to dir\n(default PREFIX/plugins)");         desc(                   "-importdir<dir>",     "Imports for QML will be installed to dir\n(default PREFIX/imports)");         desc(                   "-datadir<dir>",       "Data used by Qt programs will be installed to dir\n(default PREFIX)");         desc(                   "-translationdir<dir>","Translations of Qt programs will be installed to dir\n(default PREFIX/translations)\n");         desc(                   "-examplesdir<dir>",   "Examples will be installed to dir\n(default PREFIX/examples)"); */
name|desc
argument_list|(
literal|"Configure options:\n\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|" The defaults (*) are usually acceptable. A plus (+) denotes a default value"
literal|" that needs to be evaluated. If the evaluation succeeds, the feature is"
literal|" included. Here is a short explanation of each option:\n\n"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"BUILD"
argument_list|,
literal|"release"
argument_list|,
literal|"-release"
argument_list|,
literal|"Compile and link Qt with debugging turned off."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"BUILD"
argument_list|,
literal|"debug"
argument_list|,
literal|"-debug"
argument_list|,
literal|"Compile and link Qt with debugging turned on."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"BUILDALL"
argument_list|,
literal|"yes"
argument_list|,
literal|"-debug-and-release"
argument_list|,
literal|"Compile and link two Qt libraries, with and without debugging turned on.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"OPENSOURCE"
argument_list|,
literal|"opensource"
argument_list|,
literal|"-opensource"
argument_list|,
literal|"Compile and link the Open-Source Edition of Qt."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"COMMERCIAL"
argument_list|,
literal|"commercial"
argument_list|,
literal|"-commercial"
argument_list|,
literal|"Compile and link the Commercial Edition of Qt.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"BUILDDEV"
argument_list|,
literal|"yes"
argument_list|,
literal|"-developer-build"
argument_list|,
literal|"Compile and link Qt with Qt developer options (including auto-tests exporting)\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"SHARED"
argument_list|,
literal|"yes"
argument_list|,
literal|"-shared"
argument_list|,
literal|"Create and use shared Qt libraries."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"SHARED"
argument_list|,
literal|"no"
argument_list|,
literal|"-static"
argument_list|,
literal|"Create and use static Qt libraries.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"LTCG"
argument_list|,
literal|"yes"
argument_list|,
literal|"-ltcg"
argument_list|,
literal|"Use Link Time Code Generation. (Release builds only)"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"LTCG"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-ltcg"
argument_list|,
literal|"Do not use Link Time Code Generation.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"FAST"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-fast"
argument_list|,
literal|"Configure Qt normally by generating Makefiles for all project files."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"FAST"
argument_list|,
literal|"yes"
argument_list|,
literal|"-fast"
argument_list|,
literal|"Configure Qt quickly by generating Makefiles only for library and "
literal|"subdirectory targets.  All other Makefiles are created as wrappers "
literal|"which will in turn run qmake\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"EXCEPTIONS"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-exceptions"
argument_list|,
literal|"Disable exceptions on platforms that support it."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"EXCEPTIONS"
argument_list|,
literal|"yes"
argument_list|,
literal|"-exceptions"
argument_list|,
literal|"Enable exceptions on platforms that support it.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"ACCESSIBILITY"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-accessibility"
argument_list|,
literal|"Do not compile Windows Active Accessibility support."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"ACCESSIBILITY"
argument_list|,
literal|"yes"
argument_list|,
literal|"-accessibility"
argument_list|,
literal|"Compile Windows Active Accessibility support.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"STL"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-stl"
argument_list|,
literal|"Do not compile STL support."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"STL"
argument_list|,
literal|"yes"
argument_list|,
literal|"-stl"
argument_list|,
literal|"Compile STL support.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-no-sql-<driver>"
argument_list|,
literal|"Disable SQL<driver> entirely, by default none are turned on."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-qt-sql-<driver>"
argument_list|,
literal|"Enable a SQL<driver> in the Qt Library."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-plugin-sql-<driver>"
argument_list|,
literal|"Enable SQL<driver> as a plugin to be linked to at run time.\n"
literal|"Available values for<driver>:"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"SQL_MYSQL"
argument_list|,
literal|"auto"
argument_list|,
literal|""
argument_list|,
literal|"  mysql"
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"SQL_PSQL"
argument_list|,
literal|"auto"
argument_list|,
literal|""
argument_list|,
literal|"  psql"
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"SQL_OCI"
argument_list|,
literal|"auto"
argument_list|,
literal|""
argument_list|,
literal|"  oci"
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"SQL_ODBC"
argument_list|,
literal|"auto"
argument_list|,
literal|""
argument_list|,
literal|"  odbc"
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"SQL_TDS"
argument_list|,
literal|"auto"
argument_list|,
literal|""
argument_list|,
literal|"  tds"
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"SQL_DB2"
argument_list|,
literal|"auto"
argument_list|,
literal|""
argument_list|,
literal|"  db2"
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"SQL_SQLITE"
argument_list|,
literal|"auto"
argument_list|,
literal|""
argument_list|,
literal|"  sqlite"
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"SQL_SQLITE2"
argument_list|,
literal|"auto"
argument_list|,
literal|""
argument_list|,
literal|"  sqlite2"
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"SQL_IBASE"
argument_list|,
literal|"auto"
argument_list|,
literal|""
argument_list|,
literal|"  ibase"
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|""
argument_list|,
literal|"(drivers marked with a '+' have been detected as available on this system)\n"
argument_list|,
literal|false
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-system-sqlite"
argument_list|,
literal|"Use sqlite from the operating system.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"QT3SUPPORT"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-qt3support"
argument_list|,
literal|"Disables the Qt 3 support functionality.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"OPENGL"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-opengl"
argument_list|,
literal|"Disables OpenGL functionality\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"OPENGL"
argument_list|,
literal|"no"
argument_list|,
literal|"-opengl<api>"
argument_list|,
literal|"Enable OpenGL support with specified API version.\n"
literal|"Available values for<api>:"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|"  desktop - Enable support for Desktop OpenGL"
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"OPENGL_ES_CM"
argument_list|,
literal|"no"
argument_list|,
literal|""
argument_list|,
literal|"  es1 - Enable support for OpenGL ES Common Profile"
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"OPENGL_ES_2"
argument_list|,
literal|"no"
argument_list|,
literal|""
argument_list|,
literal|"  es2 - Enable support for OpenGL ES 2.0"
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"OPENVG"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-openvg"
argument_list|,
literal|"Disables OpenVG functionality\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"OPENVG"
argument_list|,
literal|"yes"
argument_list|,
literal|"-openvg"
argument_list|,
literal|"Enables OpenVG functionality"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|""
argument_list|,
literal|"Requires EGL support, typically supplied by an OpenGL"
argument_list|,
literal|false
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|""
argument_list|,
literal|"or other graphics implementation\n"
argument_list|,
literal|false
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-force-asserts"
argument_list|,
literal|"Activate asserts in release mode.\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|desc
argument_list|(
literal|"-platform<spec>"
argument_list|,
literal|"The operating system and compiler you are building on.\n(default %QMAKESPEC%)\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-xplatform<spec>"
argument_list|,
literal|"The operating system and compiler you are cross compiling to.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|""
argument_list|,
literal|"See the README file for a list of supported operating systems and compilers.\n"
argument_list|,
literal|false
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|EVAL
argument_list|)
name|desc
argument_list|(
literal|"-qtnamespace<namespace>"
argument_list|,
literal|"Wraps all Qt library code in 'namespace name {...}"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-qtlibinfix<infix>"
argument_list|,
literal|"Renames all Qt* libs to Qt*<infix>\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-D<define>"
argument_list|,
literal|"Add an explicit define to the preprocessor."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-I<includepath>"
argument_list|,
literal|"Add an explicit include path."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-L<librarypath>"
argument_list|,
literal|"Add an explicit library path."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-l<libraryname>"
argument_list|,
literal|"Add an explicit library name, residing in a librarypath.\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|desc
argument_list|(
literal|"-graphicssystem<sys>"
argument_list|,
literal|"Specify which graphicssystem should be used.\n"
literal|"Available values for<sys>:"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"GRAPHICS_SYSTEM"
argument_list|,
literal|"raster"
argument_list|,
literal|""
argument_list|,
literal|"  raster - Software rasterizer"
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"GRAPHICS_SYSTEM"
argument_list|,
literal|"opengl"
argument_list|,
literal|""
argument_list|,
literal|"  opengl - Using OpenGL acceleration, experimental!"
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"GRAPHICS_SYSTEM"
argument_list|,
literal|"openvg"
argument_list|,
literal|""
argument_list|,
literal|"  openvg - Using OpenVG acceleration, experimental!\n"
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-help, -h, -?"
argument_list|,
literal|"Display this information.\n"
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|EVAL
argument_list|)
comment|// 3rd party stuff options go below here --------------------------------------------------------------------------------
name|desc
argument_list|(
literal|"Third Party Libraries:\n\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"ZLIB"
argument_list|,
literal|"qt"
argument_list|,
literal|"-qt-zlib"
argument_list|,
literal|"Use the zlib bundled with Qt."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"ZLIB"
argument_list|,
literal|"system"
argument_list|,
literal|"-system-zlib"
argument_list|,
literal|"Use zlib from the operating system.\nSee http://www.gzip.org/zlib\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"GIF"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-gif"
argument_list|,
literal|"Do not compile GIF reading support."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"LIBPNG"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-libpng"
argument_list|,
literal|"Do not compile PNG support."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"LIBPNG"
argument_list|,
literal|"qt"
argument_list|,
literal|"-qt-libpng"
argument_list|,
literal|"Use the libpng bundled with Qt."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"LIBPNG"
argument_list|,
literal|"system"
argument_list|,
literal|"-system-libpng"
argument_list|,
literal|"Use libpng from the operating system.\nSee http://www.libpng.org/pub/png\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"LIBMNG"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-libmng"
argument_list|,
literal|"Do not compile MNG support."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"LIBMNG"
argument_list|,
literal|"qt"
argument_list|,
literal|"-qt-libmng"
argument_list|,
literal|"Use the libmng bundled with Qt."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"LIBMNG"
argument_list|,
literal|"system"
argument_list|,
literal|"-system-libmng"
argument_list|,
literal|"Use libmng from the operating system.\nSee See http://www.libmng.com\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"LIBTIFF"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-libtiff"
argument_list|,
literal|"Do not compile TIFF support."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"LIBTIFF"
argument_list|,
literal|"qt"
argument_list|,
literal|"-qt-libtiff"
argument_list|,
literal|"Use the libtiff bundled with Qt."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"LIBTIFF"
argument_list|,
literal|"system"
argument_list|,
literal|"-system-libtiff"
argument_list|,
literal|"Use libtiff from the operating system.\nSee http://www.libtiff.org\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"LIBJPEG"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-libjpeg"
argument_list|,
literal|"Do not compile JPEG support."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"LIBJPEG"
argument_list|,
literal|"qt"
argument_list|,
literal|"-qt-libjpeg"
argument_list|,
literal|"Use the libjpeg bundled with Qt."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"LIBJPEG"
argument_list|,
literal|"system"
argument_list|,
literal|"-system-libjpeg"
argument_list|,
literal|"Use libjpeg from the operating system.\nSee http://www.ijg.org\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"FREETYPE"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-freetype"
argument_list|,
literal|"Do not compile in Freetype2 support."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"FREETYPE"
argument_list|,
literal|"yes"
argument_list|,
literal|"-qt-freetype"
argument_list|,
literal|"Use the libfreetype bundled with Qt."
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Qt\Windows only options go below here --------------------------------------------------------------------------------
name|desc
argument_list|(
literal|"Qt for Windows only:\n\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"DSPFILES"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-dsp"
argument_list|,
literal|"Do not generate VC++ .dsp files."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"DSPFILES"
argument_list|,
literal|"yes"
argument_list|,
literal|"-dsp"
argument_list|,
literal|"Generate VC++ .dsp files, only if spec \"win32-msvc\".\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"VCPROJFILES"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-vcproj"
argument_list|,
literal|"Do not generate VC++ .vcproj files."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"VCPROJFILES"
argument_list|,
literal|"yes"
argument_list|,
literal|"-vcproj"
argument_list|,
literal|"Generate VC++ .vcproj files, only if platform \"win32-msvc.net\".\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"INCREDIBUILD_XGE"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-incredibuild-xge"
argument_list|,
literal|"Do not add IncrediBuild XGE distribution commands to custom build steps."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"INCREDIBUILD_XGE"
argument_list|,
literal|"yes"
argument_list|,
literal|"-incredibuild-xge"
argument_list|,
literal|"Add IncrediBuild XGE distribution commands to custom build steps. This will distribute MOC and UIC steps, and other custom buildsteps which are added to the INCREDIBUILD_XGE variable.\n(The IncrediBuild distribution commands are only added to Visual Studio projects)\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"PLUGIN_MANIFESTS"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-plugin-manifests"
argument_list|,
literal|"Do not embed manifests in plugins."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"PLUGIN_MANIFESTS"
argument_list|,
literal|"yes"
argument_list|,
literal|"-plugin-manifests"
argument_list|,
literal|"Embed manifests in plugins.\n"
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|EVAL
argument_list|)
name|desc
argument_list|(
literal|"BUILD_QMAKE"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-qmake"
argument_list|,
literal|"Do not compile qmake."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"BUILD_QMAKE"
argument_list|,
literal|"yes"
argument_list|,
literal|"-qmake"
argument_list|,
literal|"Compile qmake.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"NOPROCESS"
argument_list|,
literal|"yes"
argument_list|,
literal|"-dont-process"
argument_list|,
literal|"Do not generate Makefiles/Project files. This will override -no-fast if specified."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"NOPROCESS"
argument_list|,
literal|"no"
argument_list|,
literal|"-process"
argument_list|,
literal|"Generate Makefiles/Project files.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"RTTI"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-rtti"
argument_list|,
literal|"Do not compile runtime type information."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"RTTI"
argument_list|,
literal|"yes"
argument_list|,
literal|"-rtti"
argument_list|,
literal|"Compile runtime type information.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"MMX"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-mmx"
argument_list|,
literal|"Do not compile with use of MMX instructions"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"MMX"
argument_list|,
literal|"yes"
argument_list|,
literal|"-mmx"
argument_list|,
literal|"Compile with use of MMX instructions"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"3DNOW"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-3dnow"
argument_list|,
literal|"Do not compile with use of 3DNOW instructions"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"3DNOW"
argument_list|,
literal|"yes"
argument_list|,
literal|"-3dnow"
argument_list|,
literal|"Compile with use of 3DNOW instructions"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"SSE"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-sse"
argument_list|,
literal|"Do not compile with use of SSE instructions"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"SSE"
argument_list|,
literal|"yes"
argument_list|,
literal|"-sse"
argument_list|,
literal|"Compile with use of SSE instructions"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"SSE2"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-sse2"
argument_list|,
literal|"Do not compile with use of SSE2 instructions"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"SSE2"
argument_list|,
literal|"yes"
argument_list|,
literal|"-sse2"
argument_list|,
literal|"Compile with use of SSE2 instructions"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"OPENSSL"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-openssl"
argument_list|,
literal|"Do not compile in OpenSSL support"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"OPENSSL"
argument_list|,
literal|"yes"
argument_list|,
literal|"-openssl"
argument_list|,
literal|"Compile in run-time OpenSSL support"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"OPENSSL"
argument_list|,
literal|"linked"
argument_list|,
literal|"-openssl-linked"
argument_list|,
literal|"Compile in linked OpenSSL support"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"DBUS"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-dbus"
argument_list|,
literal|"Do not compile in D-Bus support"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"DBUS"
argument_list|,
literal|"yes"
argument_list|,
literal|"-dbus"
argument_list|,
literal|"Compile in D-Bus support and load libdbus-1 dynamically"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"DBUS"
argument_list|,
literal|"linked"
argument_list|,
literal|"-dbus-linked"
argument_list|,
literal|"Compile in D-Bus support and link to libdbus-1"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"PHONON"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-phonon"
argument_list|,
literal|"Do not compile in the Phonon module"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"PHONON"
argument_list|,
literal|"yes"
argument_list|,
literal|"-phonon"
argument_list|,
literal|"Compile the Phonon module (Phonon is built if a decent C++ compiler is used.)"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"PHONON_BACKEND"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-phonon-backend"
argument_list|,
literal|"Do not compile the platform-specific Phonon backend-plugin"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"PHONON_BACKEND"
argument_list|,
literal|"yes"
argument_list|,
literal|"-phonon-backend"
argument_list|,
literal|"Compile in the platform-specific Phonon backend-plugin"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"MULTIMEDIA"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-multimedia"
argument_list|,
literal|"Do not compile the multimedia module"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"MULTIMEDIA"
argument_list|,
literal|"yes"
argument_list|,
literal|"-multimedia"
argument_list|,
literal|"Compile in multimedia module"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"AUDIO_BACKEND"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-audio-backend"
argument_list|,
literal|"Do not compile in the platform audio backend into QtMultimedia"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"AUDIO_BACKEND"
argument_list|,
literal|"yes"
argument_list|,
literal|"-audio-backend"
argument_list|,
literal|"Compile in the platform audio backend into QtMultimedia"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"WEBKIT"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-webkit"
argument_list|,
literal|"Do not compile in the WebKit module"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"WEBKIT"
argument_list|,
literal|"yes"
argument_list|,
literal|"-webkit"
argument_list|,
literal|"Compile in the WebKit module (WebKit is built if a decent C++ compiler is used.)"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"WEBKIT"
argument_list|,
literal|"debug"
argument_list|,
literal|"-webkit-debug"
argument_list|,
literal|"Compile in the WebKit module with debug symbols."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"SCRIPT"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-script"
argument_list|,
literal|"Do not build the QtScript module."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"SCRIPT"
argument_list|,
literal|"yes"
argument_list|,
literal|"-script"
argument_list|,
literal|"Build the QtScript module."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"SCRIPTTOOLS"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-scripttools"
argument_list|,
literal|"Do not build the QtScriptTools module."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"SCRIPTTOOLS"
argument_list|,
literal|"yes"
argument_list|,
literal|"-scripttools"
argument_list|,
literal|"Build the QtScriptTools module."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"V8"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-v8"
argument_list|,
literal|"Do not build the V8 module."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"V8"
argument_list|,
literal|"yes"
argument_list|,
literal|"-v8"
argument_list|,
literal|"Build the V8 module."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"DECLARATIVE"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-declarative"
argument_list|,
literal|"Do not build the declarative module"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"DECLARATIVE"
argument_list|,
literal|"yes"
argument_list|,
literal|"-declarative"
argument_list|,
literal|"Build the declarative module"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"DECLARATIVE_DEBUG"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-declarative-debug"
argument_list|,
literal|"Do not build the declarative debugging support"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"DECLARATIVE_DEBUG"
argument_list|,
literal|"yes"
argument_list|,
literal|"-declarative-debug"
argument_list|,
literal|"Build the declarative debugging support"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"DIRECTWRITE"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-directwrite"
argument_list|,
literal|"Do not build support for DirectWrite font rendering"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"DIRECTWRITE"
argument_list|,
literal|"yes"
argument_list|,
literal|"-directwrite"
argument_list|,
literal|"Build support for DirectWrite font rendering (experimental, requires DirectWrite availability on target systems, e.g. Windows Vista with Platform Update, Windows 7, etc.)"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-arch<arch>"
argument_list|,
literal|"Specify an architecture.\n"
literal|"Available values for<arch>:"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"ARCHITECTURE"
argument_list|,
literal|"windows"
argument_list|,
literal|""
argument_list|,
literal|"  windows"
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"ARCHITECTURE"
argument_list|,
literal|"windowsce"
argument_list|,
literal|""
argument_list|,
literal|"  windowsce"
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"ARCHITECTURE"
argument_list|,
literal|"boundschecker"
argument_list|,
literal|""
argument_list|,
literal|"  boundschecker"
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"ARCHITECTURE"
argument_list|,
literal|"generic"
argument_list|,
literal|""
argument_list|,
literal|"  generic\n"
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-no-style-<style>"
argument_list|,
literal|"Disable<style> entirely."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-qt-style-<style>"
argument_list|,
literal|"Enable<style> in the Qt Library.\nAvailable styles: "
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"STYLE_WINDOWS"
argument_list|,
literal|"yes"
argument_list|,
literal|""
argument_list|,
literal|"  windows"
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"STYLE_WINDOWSXP"
argument_list|,
literal|"auto"
argument_list|,
literal|""
argument_list|,
literal|"  windowsxp"
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"STYLE_WINDOWSVISTA"
argument_list|,
literal|"auto"
argument_list|,
literal|""
argument_list|,
literal|"  windowsvista"
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"STYLE_PLASTIQUE"
argument_list|,
literal|"yes"
argument_list|,
literal|""
argument_list|,
literal|"  plastique"
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"STYLE_CLEANLOOKS"
argument_list|,
literal|"yes"
argument_list|,
literal|""
argument_list|,
literal|"  cleanlooks"
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"STYLE_MOTIF"
argument_list|,
literal|"yes"
argument_list|,
literal|""
argument_list|,
literal|"  motif"
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"STYLE_CDE"
argument_list|,
literal|"yes"
argument_list|,
literal|""
argument_list|,
literal|"  cde"
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"STYLE_WINDOWSCE"
argument_list|,
literal|"yes"
argument_list|,
literal|""
argument_list|,
literal|"  windowsce"
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"STYLE_WINDOWSMOBILE"
argument_list|,
literal|"yes"
argument_list|,
literal|""
argument_list|,
literal|"  windowsmobile"
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"NATIVE_GESTURES"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-native-gestures"
argument_list|,
literal|"Do not use native gestures on Windows 7."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"NATIVE_GESTURES"
argument_list|,
literal|"yes"
argument_list|,
literal|"-native-gestures"
argument_list|,
literal|"Use native gestures on Windows 7."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"MSVC_MP"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-mp"
argument_list|,
literal|"Do not use multiple processors for compiling with MSVC"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"MSVC_MP"
argument_list|,
literal|"yes"
argument_list|,
literal|"-mp"
argument_list|,
literal|"Use multiple processors for compiling with MSVC (-MP)"
argument_list|)
expr_stmt|;
comment|/*      We do not support -qconfig on Windows yet          desc(                   "-qconfig<local>",     "Use src/tools/qconfig-local.h rather than the default.\nPossible values for local:");         for (int i=0; i<allConfigs.size(); ++i)             desc(               "",                     qPrintable(QString("  %1").arg(allConfigs.at(i))), false, ' ');         printf("\n"); */
endif|#
directive|endif
name|desc
argument_list|(
literal|"-loadconfig<config>"
argument_list|,
literal|"Run configure with the parameters from file configure_<config>.cache."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-saveconfig<config>"
argument_list|,
literal|"Run configure and save the parameters in file configure_<config>.cache."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-redo"
argument_list|,
literal|"Run configure with the same parameters as last time.\n"
argument_list|)
expr_stmt|;
comment|// Qt\Windows CE only options go below here -----------------------------------------------------------------------------
name|desc
argument_list|(
literal|"Qt for Windows CE only:\n\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"IWMMXT"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-iwmmxt"
argument_list|,
literal|"Do not compile with use of IWMMXT instructions"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"IWMMXT"
argument_list|,
literal|"yes"
argument_list|,
literal|"-iwmmxt"
argument_list|,
literal|"Do compile with use of IWMMXT instructions (Qt for Windows CE on Arm only)"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"CE_CRT"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-crt"
argument_list|,
literal|"Do not add the C runtime to default deployment rules"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"CE_CRT"
argument_list|,
literal|"yes"
argument_list|,
literal|"-qt-crt"
argument_list|,
literal|"Qt identifies C runtime during project generation"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-crt<path>"
argument_list|,
literal|"Specify path to C runtime used for project generation."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"CETEST"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-cetest"
argument_list|,
literal|"Do not compile Windows CE remote test application"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"CETEST"
argument_list|,
literal|"yes"
argument_list|,
literal|"-cetest"
argument_list|,
literal|"Compile Windows CE remote test application"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-signature<file>"
argument_list|,
literal|"Use file for signing the target project"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"DIRECTSHOW"
argument_list|,
literal|"no"
argument_list|,
literal|"-phonon-wince-ds9"
argument_list|,
literal|"Enable Phonon Direct Show 9 backend for Windows CE"
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|findFileInPaths
name|QString
name|Configure
operator|::
name|findFileInPaths
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|,
specifier|const
name|QString
modifier|&
name|paths
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN32
argument_list|)
name|QRegExp
name|splitReg
argument_list|(
literal|"[;,]"
argument_list|)
decl_stmt|;
else|#
directive|else
name|QRegExp
name|splitReg
argument_list|(
literal|"[:]"
argument_list|)
decl_stmt|;
endif|#
directive|endif
name|QStringList
name|pathList
init|=
name|paths
operator|.
name|split
argument_list|(
name|splitReg
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
decl_stmt|;
name|QDir
name|d
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|it
init|=
name|pathList
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|pathList
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
comment|// Remove any leading or trailing ", this is commonly used in the environment
comment|// variables
name|QString
name|path
init|=
operator|(
operator|*
name|it
operator|)
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
literal|'\"'
argument_list|)
condition|)
name|path
operator|=
name|path
operator|.
name|right
argument_list|(
name|path
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|.
name|endsWith
argument_list|(
literal|'\"'
argument_list|)
condition|)
name|path
operator|=
name|path
operator|.
name|left
argument_list|(
name|path
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|.
name|exists
argument_list|(
name|path
operator|+
name|QDir
operator|::
name|separator
argument_list|()
operator|+
name|fileName
argument_list|)
condition|)
return|return
name|path
return|;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|mingwPaths
specifier|static
name|QString
name|mingwPaths
parameter_list|(
specifier|const
name|QString
modifier|&
name|mingwPath
parameter_list|,
specifier|const
name|QString
modifier|&
name|pathName
parameter_list|)
block|{
name|QString
name|ret
decl_stmt|;
name|QDir
name|mingwDir
init|=
name|QFileInfo
argument_list|(
name|mingwPath
argument_list|)
operator|.
name|dir
argument_list|()
decl_stmt|;
specifier|const
name|QFileInfoList
name|subdirs
init|=
name|mingwDir
operator|.
name|entryInfoList
argument_list|(
name|QDir
operator|::
name|Dirs
operator||
name|QDir
operator|::
name|NoDotAndDotDot
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subdirs
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QFileInfo
modifier|&
name|fi
init|=
name|subdirs
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|name
init|=
name|fi
operator|.
name|fileName
argument_list|()
decl_stmt|;
if|if
condition|(
name|name
operator|==
name|pathName
condition|)
name|ret
operator|+=
name|fi
operator|.
name|absoluteFilePath
argument_list|()
operator|+
literal|';'
expr_stmt|;
elseif|else
if|if
condition|(
name|name
operator|.
name|contains
argument_list|(
literal|"mingw"
argument_list|)
condition|)
name|ret
operator|+=
name|fi
operator|.
name|absoluteFilePath
argument_list|()
operator|+
name|QDir
operator|::
name|separator
argument_list|()
operator|+
name|pathName
operator|+
literal|';'
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|findFile
name|bool
name|Configure
operator|::
name|findFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
block|{
specifier|const
name|QString
name|file
init|=
name|fileName
operator|.
name|toLower
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|pathEnvVar
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|getenv
argument_list|(
literal|"PATH"
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|mingwPath
init|=
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|.
name|endsWith
argument_list|(
literal|"-g++"
argument_list|)
condition|?
name|findFileInPaths
argument_list|(
literal|"g++.exe"
argument_list|,
name|pathEnvVar
argument_list|)
else|:
name|QString
argument_list|()
decl_stmt|;
name|QString
name|paths
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|endsWith
argument_list|(
literal|".h"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|mingwPath
operator|.
name|isNull
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|findFileInPaths
argument_list|(
name|file
argument_list|,
name|mingwPaths
argument_list|(
name|mingwPath
argument_list|,
literal|"include"
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
condition|)
return|return
literal|true
return|;
comment|//now let's try the additional compiler path
specifier|const
name|QFileInfoList
name|mingwConfigs
init|=
name|QDir
argument_list|(
name|mingwPath
operator|+
name|QLatin1String
argument_list|(
literal|"/../lib/gcc"
argument_list|)
argument_list|)
operator|.
name|entryInfoList
argument_list|(
name|QDir
operator|::
name|Dirs
operator||
name|QDir
operator|::
name|NoDotAndDotDot
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mingwConfigs
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QDir
name|mingwLibDir
init|=
name|mingwConfigs
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|absoluteFilePath
argument_list|()
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QFileInfo
modifier|&
name|version
decl|,
name|mingwLibDir
operator|.
name|entryInfoList
argument_list|(
name|QDir
operator|::
name|Dirs
operator||
name|QDir
operator|::
name|NoDotAndDotDot
argument_list|)
control|)
block|{
if|if
condition|(
operator|!
name|findFileInPaths
argument_list|(
name|file
argument_list|,
name|version
operator|.
name|absoluteFilePath
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"/include"
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
condition|)
return|return
literal|true
return|;
block|}
block|}
block|}
name|paths
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|getenv
argument_list|(
literal|"INCLUDE"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|file
operator|.
name|endsWith
argument_list|(
literal|".lib"
argument_list|)
operator|||
name|file
operator|.
name|endsWith
argument_list|(
literal|".a"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|mingwPath
operator|.
name|isNull
argument_list|()
operator|&&
operator|!
name|findFileInPaths
argument_list|(
name|file
argument_list|,
name|mingwPaths
argument_list|(
name|mingwPath
argument_list|,
literal|"lib"
argument_list|)
argument_list|)
operator|.
name|isNull
argument_list|()
condition|)
return|return
literal|true
return|;
name|paths
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|getenv
argument_list|(
literal|"LIB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|paths
operator|=
name|pathEnvVar
expr_stmt|;
block|}
return|return
operator|!
name|findFileInPaths
argument_list|(
name|file
argument_list|,
name|paths
argument_list|)
operator|.
name|isNull
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*!     Default value for options marked as "auto" if the test passes.     (Used both by the autoDetection() below, and the desc() function     to mark (+) the default option of autodetecting options. */
end_comment
begin_function
DECL|function|defaultTo
name|QString
name|Configure
operator|::
name|defaultTo
parameter_list|(
specifier|const
name|QString
modifier|&
name|option
parameter_list|)
block|{
comment|// We prefer using the system version of the 3rd party libs
if|if
condition|(
name|option
operator|==
literal|"ZLIB"
operator|||
name|option
operator|==
literal|"LIBJPEG"
operator|||
name|option
operator|==
literal|"LIBPNG"
operator|||
name|option
operator|==
literal|"LIBMNG"
operator|||
name|option
operator|==
literal|"LIBTIFF"
condition|)
return|return
literal|"system"
return|;
comment|// PNG is always built-in, never a plugin
if|if
condition|(
name|option
operator|==
literal|"PNG"
condition|)
return|return
literal|"yes"
return|;
comment|// These database drivers and image formats can be built-in or plugins.
comment|// Prefer plugins when Qt is shared.
if|if
condition|(
name|dictionary
index|[
literal|"SHARED"
index|]
operator|==
literal|"yes"
condition|)
block|{
if|if
condition|(
name|option
operator|==
literal|"SQL_MYSQL"
operator|||
name|option
operator|==
literal|"SQL_MYSQL"
operator|||
name|option
operator|==
literal|"SQL_ODBC"
operator|||
name|option
operator|==
literal|"SQL_OCI"
operator|||
name|option
operator|==
literal|"SQL_PSQL"
operator|||
name|option
operator|==
literal|"SQL_TDS"
operator|||
name|option
operator|==
literal|"SQL_DB2"
operator|||
name|option
operator|==
literal|"SQL_SQLITE"
operator|||
name|option
operator|==
literal|"SQL_SQLITE2"
operator|||
name|option
operator|==
literal|"SQL_IBASE"
operator|||
name|option
operator|==
literal|"JPEG"
operator|||
name|option
operator|==
literal|"MNG"
operator|||
name|option
operator|==
literal|"TIFF"
operator|||
name|option
operator|==
literal|"GIF"
condition|)
return|return
literal|"plugin"
return|;
block|}
comment|// By default we do not want to compile OCI driver when compiling with
comment|// MinGW, due to lack of such support from Oracle. It prob. wont work.
comment|// (Customer may force the use though)
if|if
condition|(
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|.
name|endsWith
argument_list|(
literal|"-g++"
argument_list|)
operator|&&
name|option
operator|==
literal|"SQL_OCI"
condition|)
return|return
literal|"no"
return|;
if|if
condition|(
name|option
operator|==
literal|"SYNCQT"
operator|&&
operator|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
name|sourcePath
operator|+
literal|"/bin/syncqt"
argument_list|)
operator|||
operator|!
name|QFile
operator|::
name|exists
argument_list|(
name|sourcePath
operator|+
literal|"/bin/syncqt.bat"
argument_list|)
operator|)
condition|)
return|return
literal|"no"
return|;
return|return
literal|"yes"
return|;
block|}
end_function
begin_comment
comment|/*!     Checks the system for the availability of a feature.     Returns true if the feature is available, else false. */
end_comment
begin_function
DECL|function|checkAvailability
name|bool
name|Configure
operator|::
name|checkAvailability
parameter_list|(
specifier|const
name|QString
modifier|&
name|part
parameter_list|)
block|{
name|bool
name|available
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|part
operator|==
literal|"STYLE_WINDOWSXP"
condition|)
name|available
operator|=
name|findFile
argument_list|(
literal|"uxtheme.h"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"ZLIB"
condition|)
name|available
operator|=
name|findFile
argument_list|(
literal|"zlib.h"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"LIBJPEG"
condition|)
name|available
operator|=
name|findFile
argument_list|(
literal|"jpeglib.h"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"LIBPNG"
condition|)
name|available
operator|=
name|findFile
argument_list|(
literal|"png.h"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"LIBMNG"
condition|)
name|available
operator|=
name|findFile
argument_list|(
literal|"libmng.h"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"LIBTIFF"
condition|)
name|available
operator|=
name|findFile
argument_list|(
literal|"tiffio.h"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"SQL_MYSQL"
condition|)
name|available
operator|=
name|findFile
argument_list|(
literal|"mysql.h"
argument_list|)
operator|&&
name|findFile
argument_list|(
literal|"libmySQL.lib"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"SQL_ODBC"
condition|)
name|available
operator|=
name|findFile
argument_list|(
literal|"sql.h"
argument_list|)
operator|&&
name|findFile
argument_list|(
literal|"sqlext.h"
argument_list|)
operator|&&
name|findFile
argument_list|(
literal|"odbc32.lib"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"SQL_OCI"
condition|)
name|available
operator|=
name|findFile
argument_list|(
literal|"oci.h"
argument_list|)
operator|&&
name|findFile
argument_list|(
literal|"oci.lib"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"SQL_PSQL"
condition|)
name|available
operator|=
name|findFile
argument_list|(
literal|"libpq-fe.h"
argument_list|)
operator|&&
name|findFile
argument_list|(
literal|"libpq.lib"
argument_list|)
operator|&&
name|findFile
argument_list|(
literal|"ws2_32.lib"
argument_list|)
operator|&&
name|findFile
argument_list|(
literal|"advapi32.lib"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"SQL_TDS"
condition|)
name|available
operator|=
name|findFile
argument_list|(
literal|"sybfront.h"
argument_list|)
operator|&&
name|findFile
argument_list|(
literal|"sybdb.h"
argument_list|)
operator|&&
name|findFile
argument_list|(
literal|"ntwdblib.lib"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"SQL_DB2"
condition|)
name|available
operator|=
name|findFile
argument_list|(
literal|"sqlcli.h"
argument_list|)
operator|&&
name|findFile
argument_list|(
literal|"sqlcli1.h"
argument_list|)
operator|&&
name|findFile
argument_list|(
literal|"db2cli.lib"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"SQL_SQLITE"
condition|)
name|available
operator|=
literal|true
expr_stmt|;
comment|// Built in, we have a fork
elseif|else
if|if
condition|(
name|part
operator|==
literal|"SQL_SQLITE_LIB"
condition|)
block|{
if|if
condition|(
name|dictionary
index|[
literal|"SQL_SQLITE_LIB"
index|]
operator|==
literal|"system"
condition|)
block|{
name|available
operator|=
name|findFile
argument_list|(
literal|"sqlite3.h"
argument_list|)
operator|&&
name|findFile
argument_list|(
literal|"sqlite3.lib"
argument_list|)
expr_stmt|;
if|if
condition|(
name|available
condition|)
name|dictionary
index|[
literal|"QT_LFLAGS_SQLITE"
index|]
operator|+=
literal|"sqlite3.lib"
expr_stmt|;
block|}
else|else
name|available
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|part
operator|==
literal|"SQL_SQLITE2"
condition|)
name|available
operator|=
name|findFile
argument_list|(
literal|"sqlite.h"
argument_list|)
operator|&&
name|findFile
argument_list|(
literal|"sqlite.lib"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"SQL_IBASE"
condition|)
name|available
operator|=
name|findFile
argument_list|(
literal|"ibase.h"
argument_list|)
operator|&&
operator|(
name|findFile
argument_list|(
literal|"gds32_ms.lib"
argument_list|)
operator|||
name|findFile
argument_list|(
literal|"gds32.lib"
argument_list|)
operator|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"IWMMXT"
condition|)
name|available
operator|=
operator|(
name|dictionary
index|[
literal|"ARCHITECTURE"
index|]
operator|==
literal|"windowsce"
operator|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"OPENGL_ES_CM"
condition|)
name|available
operator|=
operator|(
name|dictionary
index|[
literal|"ARCHITECTURE"
index|]
operator|==
literal|"windowsce"
operator|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"OPENGL_ES_2"
condition|)
name|available
operator|=
operator|(
name|dictionary
index|[
literal|"ARCHITECTURE"
index|]
operator|==
literal|"windowsce"
operator|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"DIRECTSHOW"
condition|)
name|available
operator|=
operator|(
name|dictionary
index|[
literal|"ARCHITECTURE"
index|]
operator|==
literal|"windowsce"
operator|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"SSE2"
condition|)
name|available
operator|=
operator|(
name|dictionary
operator|.
name|value
argument_list|(
literal|"QMAKESPEC"
argument_list|)
operator|!=
literal|"win32-msvc"
operator|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"3DNOW"
condition|)
name|available
operator|=
operator|(
name|dictionary
operator|.
name|value
argument_list|(
literal|"QMAKESPEC"
argument_list|)
operator|!=
literal|"win32-msvc"
operator|)
operator|&&
operator|(
name|dictionary
operator|.
name|value
argument_list|(
literal|"QMAKESPEC"
argument_list|)
operator|!=
literal|"win32-icc"
operator|)
operator|&&
name|findFile
argument_list|(
literal|"mm3dnow.h"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"MMX"
operator|||
name|part
operator|==
literal|"SSE"
condition|)
name|available
operator|=
operator|(
name|dictionary
operator|.
name|value
argument_list|(
literal|"QMAKESPEC"
argument_list|)
operator|!=
literal|"win32-msvc"
operator|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"OPENSSL"
condition|)
name|available
operator|=
name|findFile
argument_list|(
literal|"openssl\\ssl.h"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"DBUS"
condition|)
name|available
operator|=
name|findFile
argument_list|(
literal|"dbus\\dbus.h"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"CETEST"
condition|)
block|{
name|QString
name|rapiHeader
init|=
name|locateFile
argument_list|(
literal|"rapi.h"
argument_list|)
decl_stmt|;
name|QString
name|rapiLib
init|=
name|locateFile
argument_list|(
literal|"rapi.lib"
argument_list|)
decl_stmt|;
name|available
operator|=
operator|(
name|dictionary
index|[
literal|"ARCHITECTURE"
index|]
operator|==
literal|"windowsce"
operator|)
operator|&&
operator|!
name|rapiHeader
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|rapiLib
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
if|if
condition|(
name|available
condition|)
block|{
name|dictionary
index|[
literal|"QT_CE_RAPI_INC"
index|]
operator|+=
name|QLatin1String
argument_list|(
literal|"\""
argument_list|)
operator|+
name|rapiHeader
operator|+
name|QLatin1String
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
name|dictionary
index|[
literal|"QT_CE_RAPI_LIB"
index|]
operator|+=
name|QLatin1String
argument_list|(
literal|"\""
argument_list|)
operator|+
name|rapiLib
operator|+
name|QLatin1String
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dictionary
index|[
literal|"CETEST_REQUESTED"
index|]
operator|==
literal|"yes"
condition|)
block|{
name|cout
operator|<<
literal|"cetest could not be enabled: rapi.h and rapi.lib could not be found."
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"Make sure the environment is set up for compiling with ActiveSync."
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|part
operator|==
literal|"INCREDIBUILD_XGE"
condition|)
name|available
operator|=
name|findFile
argument_list|(
literal|"BuildConsole.exe"
argument_list|)
operator|&&
name|findFile
argument_list|(
literal|"xgConsole.exe"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"XMLPATTERNS"
condition|)
name|available
operator|=
name|dictionary
operator|.
name|value
argument_list|(
literal|"EXCEPTIONS"
argument_list|)
operator|==
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"PHONON"
condition|)
block|{
name|available
operator|=
name|findFile
argument_list|(
literal|"vmr9.h"
argument_list|)
operator|&&
name|findFile
argument_list|(
literal|"dshow.h"
argument_list|)
operator|&&
name|findFile
argument_list|(
literal|"dmo.h"
argument_list|)
operator|&&
name|findFile
argument_list|(
literal|"dmodshow.h"
argument_list|)
operator|&&
operator|(
name|findFile
argument_list|(
literal|"strmiids.lib"
argument_list|)
operator|||
name|findFile
argument_list|(
literal|"libstrmiids.a"
argument_list|)
operator|)
operator|&&
operator|(
name|findFile
argument_list|(
literal|"dmoguids.lib"
argument_list|)
operator|||
name|findFile
argument_list|(
literal|"libdmoguids.a"
argument_list|)
operator|)
operator|&&
operator|(
name|findFile
argument_list|(
literal|"msdmo.lib"
argument_list|)
operator|||
name|findFile
argument_list|(
literal|"libmsdmo.a"
argument_list|)
operator|)
operator|&&
name|findFile
argument_list|(
literal|"d3d9.h"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|available
condition|)
block|{
name|cout
operator|<<
literal|"All the required DirectShow/Direct3D files couldn't be found."
operator|<<
name|endl
operator|<<
literal|"Make sure you have either the platform SDK AND the DirectShow SDK or the Windows SDK installed."
operator|<<
name|endl
operator|<<
literal|"If you have the DirectShow SDK installed, please make sure that you have run the<path to SDK>\\SetEnv.Cmd script."
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|findFile
argument_list|(
literal|"vmr9.h"
argument_list|)
condition|)
name|cout
operator|<<
literal|"vmr9.h not found"
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|findFile
argument_list|(
literal|"dshow.h"
argument_list|)
condition|)
name|cout
operator|<<
literal|"dshow.h not found"
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|findFile
argument_list|(
literal|"strmiids.lib"
argument_list|)
condition|)
name|cout
operator|<<
literal|"strmiids.lib not found"
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|findFile
argument_list|(
literal|"dmoguids.lib"
argument_list|)
condition|)
name|cout
operator|<<
literal|"dmoguids.lib not found"
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|findFile
argument_list|(
literal|"msdmo.lib"
argument_list|)
condition|)
name|cout
operator|<<
literal|"msdmo.lib not found"
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|findFile
argument_list|(
literal|"d3d9.h"
argument_list|)
condition|)
name|cout
operator|<<
literal|"d3d9.h not found"
operator|<<
name|endl
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|part
operator|==
literal|"WMSDK"
condition|)
block|{
name|available
operator|=
name|findFile
argument_list|(
literal|"wmsdk.h"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|part
operator|==
literal|"MULTIMEDIA"
operator|||
name|part
operator|==
literal|"SCRIPT"
operator|||
name|part
operator|==
literal|"SCRIPTTOOLS"
operator|||
name|part
operator|==
literal|"V8"
operator|||
name|part
operator|==
literal|"DECLARATIVE"
condition|)
block|{
name|available
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|part
operator|==
literal|"V8SNAPSHOT"
condition|)
block|{
name|available
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|part
operator|==
literal|"WEBKIT"
condition|)
block|{
name|available
operator|=
operator|(
name|dictionary
operator|.
name|value
argument_list|(
literal|"QMAKESPEC"
argument_list|)
operator|==
literal|"win32-msvc2005"
operator|)
operator|||
operator|(
name|dictionary
operator|.
name|value
argument_list|(
literal|"QMAKESPEC"
argument_list|)
operator|==
literal|"win32-msvc2008"
operator|)
operator|||
operator|(
name|dictionary
operator|.
name|value
argument_list|(
literal|"QMAKESPEC"
argument_list|)
operator|==
literal|"win32-msvc2010"
operator|)
operator|||
operator|(
name|dictionary
operator|.
name|value
argument_list|(
literal|"QMAKESPEC"
argument_list|)
operator|==
literal|"win32-g++"
operator|)
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SHARED"
index|]
operator|==
literal|"no"
condition|)
block|{
name|cout
operator|<<
name|endl
operator|<<
literal|"WARNING: Using static linking will disable the WebKit module."
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|available
operator|=
literal|false
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|part
operator|==
literal|"AUDIO_BACKEND"
condition|)
block|{
name|available
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|part
operator|==
literal|"DIRECTWRITE"
condition|)
block|{
name|available
operator|=
name|findFile
argument_list|(
literal|"dwrite.h"
argument_list|)
operator|&&
name|findFile
argument_list|(
literal|"d2d1.h"
argument_list|)
operator|&&
name|findFile
argument_list|(
literal|"dwrite.lib"
argument_list|)
expr_stmt|;
block|}
return|return
name|available
return|;
block|}
end_function
begin_comment
comment|/*     Autodetect options marked as "auto". */
end_comment
begin_function
DECL|function|autoDetection
name|void
name|Configure
operator|::
name|autoDetection
parameter_list|()
block|{
comment|// Style detection
if|if
condition|(
name|dictionary
index|[
literal|"STYLE_WINDOWSXP"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"STYLE_WINDOWSXP"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"STYLE_WINDOWSXP"
argument_list|)
condition|?
name|defaultTo
argument_list|(
literal|"STYLE_WINDOWSXP"
argument_list|)
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"STYLE_WINDOWSVISTA"
index|]
operator|==
literal|"auto"
condition|)
comment|// Vista style has the same requirements as XP style
name|dictionary
index|[
literal|"STYLE_WINDOWSVISTA"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"STYLE_WINDOWSXP"
argument_list|)
condition|?
name|defaultTo
argument_list|(
literal|"STYLE_WINDOWSVISTA"
argument_list|)
else|:
literal|"no"
expr_stmt|;
comment|// Compression detection
if|if
condition|(
name|dictionary
index|[
literal|"ZLIB"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"ZLIB"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"ZLIB"
argument_list|)
condition|?
name|defaultTo
argument_list|(
literal|"ZLIB"
argument_list|)
else|:
literal|"qt"
expr_stmt|;
comment|// Image format detection
if|if
condition|(
name|dictionary
index|[
literal|"GIF"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"GIF"
index|]
operator|=
name|defaultTo
argument_list|(
literal|"GIF"
argument_list|)
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"JPEG"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"JPEG"
index|]
operator|=
name|defaultTo
argument_list|(
literal|"JPEG"
argument_list|)
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"PNG"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"PNG"
index|]
operator|=
name|defaultTo
argument_list|(
literal|"PNG"
argument_list|)
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"MNG"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"MNG"
index|]
operator|=
name|defaultTo
argument_list|(
literal|"MNG"
argument_list|)
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"TIFF"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"TIFF"
index|]
operator|=
name|dictionary
index|[
literal|"ZLIB"
index|]
operator|==
literal|"no"
condition|?
literal|"no"
else|:
name|defaultTo
argument_list|(
literal|"TIFF"
argument_list|)
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"LIBJPEG"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"LIBJPEG"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"LIBJPEG"
argument_list|)
condition|?
name|defaultTo
argument_list|(
literal|"LIBJPEG"
argument_list|)
else|:
literal|"qt"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"LIBPNG"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"LIBPNG"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"LIBPNG"
argument_list|)
condition|?
name|defaultTo
argument_list|(
literal|"LIBPNG"
argument_list|)
else|:
literal|"qt"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"LIBMNG"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"LIBMNG"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"LIBMNG"
argument_list|)
condition|?
name|defaultTo
argument_list|(
literal|"LIBMNG"
argument_list|)
else|:
literal|"qt"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"LIBTIFF"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"LIBTIFF"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"LIBTIFF"
argument_list|)
condition|?
name|defaultTo
argument_list|(
literal|"LIBTIFF"
argument_list|)
else|:
literal|"qt"
expr_stmt|;
comment|// SQL detection (not on by default)
if|if
condition|(
name|dictionary
index|[
literal|"SQL_MYSQL"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"SQL_MYSQL"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"SQL_MYSQL"
argument_list|)
condition|?
name|defaultTo
argument_list|(
literal|"SQL_MYSQL"
argument_list|)
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_ODBC"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"SQL_ODBC"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"SQL_ODBC"
argument_list|)
condition|?
name|defaultTo
argument_list|(
literal|"SQL_ODBC"
argument_list|)
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_OCI"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"SQL_OCI"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"SQL_OCI"
argument_list|)
condition|?
name|defaultTo
argument_list|(
literal|"SQL_OCI"
argument_list|)
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_PSQL"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"SQL_PSQL"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"SQL_PSQL"
argument_list|)
condition|?
name|defaultTo
argument_list|(
literal|"SQL_PSQL"
argument_list|)
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_TDS"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"SQL_TDS"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"SQL_TDS"
argument_list|)
condition|?
name|defaultTo
argument_list|(
literal|"SQL_TDS"
argument_list|)
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_DB2"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"SQL_DB2"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"SQL_DB2"
argument_list|)
condition|?
name|defaultTo
argument_list|(
literal|"SQL_DB2"
argument_list|)
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_SQLITE"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"SQL_SQLITE"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"SQL_SQLITE"
argument_list|)
condition|?
name|defaultTo
argument_list|(
literal|"SQL_SQLITE"
argument_list|)
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_SQLITE_LIB"
index|]
operator|==
literal|"system"
condition|)
if|if
condition|(
operator|!
name|checkAvailability
argument_list|(
literal|"SQL_SQLITE_LIB"
argument_list|)
condition|)
name|dictionary
index|[
literal|"SQL_SQLITE_LIB"
index|]
operator|=
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_SQLITE2"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"SQL_SQLITE2"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"SQL_SQLITE2"
argument_list|)
condition|?
name|defaultTo
argument_list|(
literal|"SQL_SQLITE2"
argument_list|)
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_IBASE"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"SQL_IBASE"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"SQL_IBASE"
argument_list|)
condition|?
name|defaultTo
argument_list|(
literal|"SQL_IBASE"
argument_list|)
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"MMX"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"MMX"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"MMX"
argument_list|)
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"3DNOW"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"3DNOW"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"3DNOW"
argument_list|)
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SSE"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"SSE"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"SSE"
argument_list|)
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SSE2"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"SSE2"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"SSE2"
argument_list|)
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"IWMMXT"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"IWMMXT"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"IWMMXT"
argument_list|)
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"OPENSSL"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"OPENSSL"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"OPENSSL"
argument_list|)
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"DBUS"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"DBUS"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"DBUS"
argument_list|)
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SCRIPT"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"SCRIPT"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"SCRIPT"
argument_list|)
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SCRIPTTOOLS"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"SCRIPTTOOLS"
index|]
operator|=
name|dictionary
index|[
literal|"SCRIPT"
index|]
operator|==
literal|"yes"
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"XMLPATTERNS"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"XMLPATTERNS"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"XMLPATTERNS"
argument_list|)
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"PHONON"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"PHONON"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"PHONON"
argument_list|)
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"WEBKIT"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"WEBKIT"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"WEBKIT"
argument_list|)
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"V8"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"V8"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"V8"
argument_list|)
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"V8SNAPSHOT"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"V8SNAPSHOT"
index|]
operator|=
operator|(
name|dictionary
index|[
literal|"V8"
index|]
operator|==
literal|"yes"
operator|)
operator|&&
name|checkAvailability
argument_list|(
literal|"V8SNAPSHOT"
argument_list|)
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"DECLARATIVE"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"DECLARATIVE"
index|]
operator|=
name|dictionary
index|[
literal|"V8"
index|]
operator|==
literal|"yes"
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"DECLARATIVE_DEBUG"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"DECLARATIVE_DEBUG"
index|]
operator|=
name|dictionary
index|[
literal|"DECLARATIVE"
index|]
operator|==
literal|"yes"
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"AUDIO_BACKEND"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"AUDIO_BACKEND"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"AUDIO_BACKEND"
argument_list|)
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"WMSDK"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"WMSDK"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"WMSDK"
argument_list|)
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
comment|// Qt/WinCE remote test application
if|if
condition|(
name|dictionary
index|[
literal|"CETEST"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"CETEST"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"CETEST"
argument_list|)
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
comment|// Detection of IncrediBuild buildconsole
if|if
condition|(
name|dictionary
index|[
literal|"INCREDIBUILD_XGE"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"INCREDIBUILD_XGE"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"INCREDIBUILD_XGE"
argument_list|)
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
comment|// Mark all unknown "auto" to the default value..
for|for
control|(
name|QMap
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
operator|::
name|iterator
name|i
init|=
name|dictionary
operator|.
name|begin
argument_list|()
init|;
name|i
operator|!=
name|dictionary
operator|.
name|end
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|.
name|value
argument_list|()
operator|==
literal|"auto"
condition|)
name|i
operator|.
name|value
argument_list|()
operator|=
name|defaultTo
argument_list|(
name|i
operator|.
name|key
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|verifyConfiguration
name|bool
name|Configure
operator|::
name|verifyConfiguration
parameter_list|()
block|{
if|if
condition|(
name|dictionary
index|[
literal|"SQL_SQLITE_LIB"
index|]
operator|==
literal|"no"
operator|&&
name|dictionary
index|[
literal|"SQL_SQLITE"
index|]
operator|!=
literal|"no"
condition|)
block|{
name|cout
operator|<<
literal|"WARNING: Configure could not detect the presence of a system SQLite3 lib."
operator|<<
name|endl
operator|<<
literal|"Configure will therefore continue with the SQLite3 lib bundled with Qt."
operator|<<
name|endl
operator|<<
literal|"(Press any key to continue..)"
expr_stmt|;
if|if
condition|(
name|_getch
argument_list|()
operator|==
literal|3
condition|)
comment|// _Any_ keypress w/no echo(eat<Enter> for stdout)
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Exit cleanly for Ctrl+C
name|dictionary
index|[
literal|"SQL_SQLITE_LIB"
index|]
operator|=
literal|"qt"
expr_stmt|;
comment|// Set to Qt's bundled lib an continue
block|}
if|if
condition|(
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|.
name|endsWith
argument_list|(
literal|"-g++"
argument_list|)
operator|&&
name|dictionary
index|[
literal|"SQL_OCI"
index|]
operator|!=
literal|"no"
condition|)
block|{
name|cout
operator|<<
literal|"WARNING: Qt does not support compiling the Oracle database driver with"
operator|<<
name|endl
operator|<<
literal|"MinGW, due to lack of such support from Oracle. Consider disabling the"
operator|<<
name|endl
operator|<<
literal|"Oracle driver, as the current build will most likely fail."
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"(Press any key to continue..)"
expr_stmt|;
if|if
condition|(
name|_getch
argument_list|()
operator|==
literal|3
condition|)
comment|// _Any_ keypress w/no echo(eat<Enter> for stdout)
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Exit cleanly for Ctrl+C
block|}
if|if
condition|(
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|.
name|endsWith
argument_list|(
literal|"win32-msvc.net"
argument_list|)
condition|)
block|{
name|cout
operator|<<
literal|"WARNING: The makespec win32-msvc.net is deprecated. Consider using"
operator|<<
name|endl
operator|<<
literal|"win32-msvc2002 or win32-msvc2003 instead."
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"(Press any key to continue..)"
expr_stmt|;
if|if
condition|(
name|_getch
argument_list|()
operator|==
literal|3
condition|)
comment|// _Any_ keypress w/no echo(eat<Enter> for stdout)
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Exit cleanly for Ctrl+C
block|}
if|if
condition|(
literal|0
operator|!=
name|dictionary
index|[
literal|"ARM_FPU_TYPE"
index|]
operator|.
name|size
argument_list|()
condition|)
block|{
name|QStringList
name|l
init|=
name|QStringList
argument_list|()
operator|<<
literal|"softvfp"
operator|<<
literal|"softvfp+vfpv2"
operator|<<
literal|"vfpv2"
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|l
operator|.
name|contains
argument_list|(
name|dictionary
index|[
literal|"ARM_FPU_TYPE"
index|]
argument_list|)
operator|)
condition|)
name|cout
operator|<<
name|QString
argument_list|(
literal|"WARNING: Using unsupported fpu flag: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|dictionary
index|[
literal|"ARM_FPU_TYPE"
index|]
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
if|if
condition|(
name|dictionary
index|[
literal|"DECLARATIVE"
index|]
operator|==
literal|"yes"
operator|&&
name|dictionary
index|[
literal|"V8"
index|]
operator|==
literal|"no"
condition|)
block|{
name|cout
operator|<<
literal|"WARNING: To be able to compile QtDeclarative we need to also compile the"
operator|<<
name|endl
operator|<<
literal|"V8 module. If you continue, we will turn on the V8 module."
operator|<<
name|endl
operator|<<
literal|"(Press any key to continue..)"
expr_stmt|;
if|if
condition|(
name|_getch
argument_list|()
operator|==
literal|3
condition|)
comment|// _Any_ keypress w/no echo(eat<Enter> for stdout)
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Exit cleanly for Ctrl+C
name|dictionary
index|[
literal|"SCRIPT"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
if|if
condition|(
name|dictionary
index|[
literal|"DIRECTWRITE"
index|]
operator|==
literal|"yes"
operator|&&
operator|!
name|checkAvailability
argument_list|(
literal|"DIRECTWRITE"
argument_list|)
condition|)
block|{
name|cout
operator|<<
literal|"WARNING: To be able to compile the DirectWrite font engine you will"
operator|<<
name|endl
operator|<<
literal|"need the Microsoft DirectWrite and Microsoft Direct2D development"
operator|<<
name|endl
operator|<<
literal|"files such as headers and libraries."
operator|<<
name|endl
operator|<<
literal|"(Press any key to continue..)"
expr_stmt|;
if|if
condition|(
name|_getch
argument_list|()
operator|==
literal|3
condition|)
comment|// _Any_ keypress w/no echo(eat<Enter> for stdout)
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Exit cleanly for Ctrl+C
block|}
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*  Things that affect the Qt API/ABI:    Options:      minimal-config small-config medium-config large-config full-config     Options:      debug release      stl   Things that do not affect the Qt API/ABI:      system-jpeg no-jpeg jpeg      system-mng no-mng mng      system-png no-png png      system-zlib no-zlib zlib      system-tiff no-tiff tiff      no-gif gif      dll staticlib       nocrosscompiler      GNUmake      largefile      nis      nas      tablet       X11     : x11sm xinerama xcursor xfixes xrandr xrender fontconfig xkb      Embedded: embedded freetype */
end_comment
begin_function
DECL|function|generateBuildKey
name|void
name|Configure
operator|::
name|generateBuildKey
parameter_list|()
block|{
name|QString
name|spec
init|=
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
decl_stmt|;
name|QString
name|compiler
init|=
literal|"msvc"
decl_stmt|;
comment|// ICC is compatible
if|if
condition|(
name|spec
operator|.
name|endsWith
argument_list|(
literal|"-g++"
argument_list|)
condition|)
name|compiler
operator|=
literal|"mingw"
expr_stmt|;
elseif|else
if|if
condition|(
name|spec
operator|.
name|endsWith
argument_list|(
literal|"-borland"
argument_list|)
condition|)
name|compiler
operator|=
literal|"borland"
expr_stmt|;
comment|// Build options which changes the Qt API/ABI
name|QStringList
name|build_options
decl_stmt|;
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"QCONFIG"
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|build_options
operator|+=
name|dictionary
index|[
literal|"QCONFIG"
index|]
operator|+
literal|"-config "
expr_stmt|;
name|build_options
operator|.
name|sort
argument_list|()
expr_stmt|;
comment|// Sorted defines that start with QT_NO_
name|QStringList
name|build_defines
init|=
name|qmakeDefines
operator|.
name|filter
argument_list|(
name|QRegExp
argument_list|(
literal|"^QT_NO_"
argument_list|)
argument_list|)
decl_stmt|;
name|build_defines
operator|.
name|sort
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|generateOutputVars
name|void
name|Configure
operator|::
name|generateOutputVars
parameter_list|()
block|{
comment|// Generate variables for output
name|QString
name|build
init|=
name|dictionary
index|[
literal|"BUILD"
index|]
decl_stmt|;
name|bool
name|buildAll
init|=
operator|(
name|dictionary
index|[
literal|"BUILDALL"
index|]
operator|==
literal|"yes"
operator|)
decl_stmt|;
if|if
condition|(
name|build
operator|==
literal|"debug"
condition|)
block|{
if|if
condition|(
name|buildAll
condition|)
name|qtConfig
operator|+=
literal|"release"
expr_stmt|;
name|qtConfig
operator|+=
literal|"debug"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|build
operator|==
literal|"release"
condition|)
block|{
if|if
condition|(
name|buildAll
condition|)
name|qtConfig
operator|+=
literal|"debug"
expr_stmt|;
name|qtConfig
operator|+=
literal|"release"
expr_stmt|;
block|}
comment|// Compression --------------------------------------------------
if|if
condition|(
name|dictionary
index|[
literal|"ZLIB"
index|]
operator|==
literal|"qt"
condition|)
name|qtConfig
operator|+=
literal|"zlib"
expr_stmt|;
elseif|else
if|if
condition|(
name|dictionary
index|[
literal|"ZLIB"
index|]
operator|==
literal|"system"
condition|)
name|qtConfig
operator|+=
literal|"system-zlib"
expr_stmt|;
comment|// Image formates -----------------------------------------------
if|if
condition|(
name|dictionary
index|[
literal|"GIF"
index|]
operator|==
literal|"no"
condition|)
name|qtConfig
operator|+=
literal|"no-gif"
expr_stmt|;
elseif|else
if|if
condition|(
name|dictionary
index|[
literal|"GIF"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"gif"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"TIFF"
index|]
operator|==
literal|"no"
condition|)
name|qtConfig
operator|+=
literal|"no-tiff"
expr_stmt|;
elseif|else
if|if
condition|(
name|dictionary
index|[
literal|"TIFF"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"tiff"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"LIBTIFF"
index|]
operator|==
literal|"system"
condition|)
name|qtConfig
operator|+=
literal|"system-tiff"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"JPEG"
index|]
operator|==
literal|"no"
condition|)
name|qtConfig
operator|+=
literal|"no-jpeg"
expr_stmt|;
elseif|else
if|if
condition|(
name|dictionary
index|[
literal|"JPEG"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"jpeg"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"LIBJPEG"
index|]
operator|==
literal|"system"
condition|)
name|qtConfig
operator|+=
literal|"system-jpeg"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"PNG"
index|]
operator|==
literal|"no"
condition|)
name|qtConfig
operator|+=
literal|"no-png"
expr_stmt|;
elseif|else
if|if
condition|(
name|dictionary
index|[
literal|"PNG"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"png"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"LIBPNG"
index|]
operator|==
literal|"system"
condition|)
name|qtConfig
operator|+=
literal|"system-png"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"MNG"
index|]
operator|==
literal|"no"
condition|)
name|qtConfig
operator|+=
literal|"no-mng"
expr_stmt|;
elseif|else
if|if
condition|(
name|dictionary
index|[
literal|"MNG"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"mng"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"LIBMNG"
index|]
operator|==
literal|"system"
condition|)
name|qtConfig
operator|+=
literal|"system-mng"
expr_stmt|;
comment|// Text rendering --------------------------------------------------
if|if
condition|(
name|dictionary
index|[
literal|"FREETYPE"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"freetype"
expr_stmt|;
comment|// Styles -------------------------------------------------------
if|if
condition|(
name|dictionary
index|[
literal|"STYLE_WINDOWS"
index|]
operator|==
literal|"yes"
condition|)
name|qmakeStyles
operator|+=
literal|"windows"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"STYLE_PLASTIQUE"
index|]
operator|==
literal|"yes"
condition|)
name|qmakeStyles
operator|+=
literal|"plastique"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"STYLE_CLEANLOOKS"
index|]
operator|==
literal|"yes"
condition|)
name|qmakeStyles
operator|+=
literal|"cleanlooks"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"STYLE_WINDOWSXP"
index|]
operator|==
literal|"yes"
condition|)
name|qmakeStyles
operator|+=
literal|"windowsxp"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"STYLE_WINDOWSVISTA"
index|]
operator|==
literal|"yes"
condition|)
name|qmakeStyles
operator|+=
literal|"windowsvista"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"STYLE_MOTIF"
index|]
operator|==
literal|"yes"
condition|)
name|qmakeStyles
operator|+=
literal|"motif"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"STYLE_SGI"
index|]
operator|==
literal|"yes"
condition|)
name|qmakeStyles
operator|+=
literal|"sgi"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"STYLE_WINDOWSCE"
index|]
operator|==
literal|"yes"
condition|)
name|qmakeStyles
operator|+=
literal|"windowsce"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"STYLE_WINDOWSMOBILE"
index|]
operator|==
literal|"yes"
condition|)
name|qmakeStyles
operator|+=
literal|"windowsmobile"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"STYLE_CDE"
index|]
operator|==
literal|"yes"
condition|)
name|qmakeStyles
operator|+=
literal|"cde"
expr_stmt|;
comment|// Databases ----------------------------------------------------
if|if
condition|(
name|dictionary
index|[
literal|"SQL_MYSQL"
index|]
operator|==
literal|"yes"
condition|)
name|qmakeSql
operator|+=
literal|"mysql"
expr_stmt|;
elseif|else
if|if
condition|(
name|dictionary
index|[
literal|"SQL_MYSQL"
index|]
operator|==
literal|"plugin"
condition|)
name|qmakeSqlPlugins
operator|+=
literal|"mysql"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_ODBC"
index|]
operator|==
literal|"yes"
condition|)
name|qmakeSql
operator|+=
literal|"odbc"
expr_stmt|;
elseif|else
if|if
condition|(
name|dictionary
index|[
literal|"SQL_ODBC"
index|]
operator|==
literal|"plugin"
condition|)
name|qmakeSqlPlugins
operator|+=
literal|"odbc"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_OCI"
index|]
operator|==
literal|"yes"
condition|)
name|qmakeSql
operator|+=
literal|"oci"
expr_stmt|;
elseif|else
if|if
condition|(
name|dictionary
index|[
literal|"SQL_OCI"
index|]
operator|==
literal|"plugin"
condition|)
name|qmakeSqlPlugins
operator|+=
literal|"oci"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_PSQL"
index|]
operator|==
literal|"yes"
condition|)
name|qmakeSql
operator|+=
literal|"psql"
expr_stmt|;
elseif|else
if|if
condition|(
name|dictionary
index|[
literal|"SQL_PSQL"
index|]
operator|==
literal|"plugin"
condition|)
name|qmakeSqlPlugins
operator|+=
literal|"psql"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_TDS"
index|]
operator|==
literal|"yes"
condition|)
name|qmakeSql
operator|+=
literal|"tds"
expr_stmt|;
elseif|else
if|if
condition|(
name|dictionary
index|[
literal|"SQL_TDS"
index|]
operator|==
literal|"plugin"
condition|)
name|qmakeSqlPlugins
operator|+=
literal|"tds"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_DB2"
index|]
operator|==
literal|"yes"
condition|)
name|qmakeSql
operator|+=
literal|"db2"
expr_stmt|;
elseif|else
if|if
condition|(
name|dictionary
index|[
literal|"SQL_DB2"
index|]
operator|==
literal|"plugin"
condition|)
name|qmakeSqlPlugins
operator|+=
literal|"db2"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_SQLITE"
index|]
operator|==
literal|"yes"
condition|)
name|qmakeSql
operator|+=
literal|"sqlite"
expr_stmt|;
elseif|else
if|if
condition|(
name|dictionary
index|[
literal|"SQL_SQLITE"
index|]
operator|==
literal|"plugin"
condition|)
name|qmakeSqlPlugins
operator|+=
literal|"sqlite"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_SQLITE_LIB"
index|]
operator|==
literal|"system"
condition|)
name|qmakeConfig
operator|+=
literal|"system-sqlite"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_SQLITE2"
index|]
operator|==
literal|"yes"
condition|)
name|qmakeSql
operator|+=
literal|"sqlite2"
expr_stmt|;
elseif|else
if|if
condition|(
name|dictionary
index|[
literal|"SQL_SQLITE2"
index|]
operator|==
literal|"plugin"
condition|)
name|qmakeSqlPlugins
operator|+=
literal|"sqlite2"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_IBASE"
index|]
operator|==
literal|"yes"
condition|)
name|qmakeSql
operator|+=
literal|"ibase"
expr_stmt|;
elseif|else
if|if
condition|(
name|dictionary
index|[
literal|"SQL_IBASE"
index|]
operator|==
literal|"plugin"
condition|)
name|qmakeSqlPlugins
operator|+=
literal|"ibase"
expr_stmt|;
comment|// Other options ------------------------------------------------
if|if
condition|(
name|dictionary
index|[
literal|"BUILDALL"
index|]
operator|==
literal|"yes"
condition|)
block|{
name|qtConfig
operator|+=
literal|"build_all"
expr_stmt|;
block|}
name|qmakeConfig
operator|+=
name|dictionary
index|[
literal|"BUILD"
index|]
expr_stmt|;
name|dictionary
index|[
literal|"QMAKE_OUTDIR"
index|]
operator|=
name|dictionary
index|[
literal|"BUILD"
index|]
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SHARED"
index|]
operator|==
literal|"yes"
condition|)
block|{
name|QString
name|version
init|=
name|dictionary
index|[
literal|"VERSION"
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|version
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qmakeVars
operator|+=
literal|"QMAKE_QT_VERSION_OVERRIDE = "
operator|+
name|version
operator|.
name|left
argument_list|(
name|version
operator|.
name|indexOf
argument_list|(
literal|"."
argument_list|)
argument_list|)
expr_stmt|;
name|version
operator|.
name|remove
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|dictionary
index|[
literal|"QMAKE_OUTDIR"
index|]
operator|+=
literal|"_shared"
expr_stmt|;
block|}
else|else
block|{
name|dictionary
index|[
literal|"QMAKE_OUTDIR"
index|]
operator|+=
literal|"_static"
expr_stmt|;
block|}
if|if
condition|(
name|dictionary
index|[
literal|"ACCESSIBILITY"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"accessibility"
expr_stmt|;
if|if
condition|(
operator|!
name|qmakeLibs
operator|.
name|isEmpty
argument_list|()
condition|)
name|qmakeVars
operator|+=
literal|"LIBS           += "
operator|+
name|escapeSeparators
argument_list|(
name|qmakeLibs
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"QT_LFLAGS_SQLITE"
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|qmakeVars
operator|+=
literal|"QT_LFLAGS_SQLITE += "
operator|+
name|escapeSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_LFLAGS_SQLITE"
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"QT3SUPPORT"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"gui-qt3support"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"OPENGL"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"opengl"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"OPENGL_ES_CM"
index|]
operator|==
literal|"yes"
condition|)
block|{
name|qtConfig
operator|+=
literal|"opengles1"
expr_stmt|;
name|qtConfig
operator|+=
literal|"egl"
expr_stmt|;
block|}
if|if
condition|(
name|dictionary
index|[
literal|"OPENGL_ES_2"
index|]
operator|==
literal|"yes"
condition|)
block|{
name|qtConfig
operator|+=
literal|"opengles2"
expr_stmt|;
name|qtConfig
operator|+=
literal|"egl"
expr_stmt|;
block|}
if|if
condition|(
name|dictionary
index|[
literal|"OPENVG"
index|]
operator|==
literal|"yes"
condition|)
block|{
name|qtConfig
operator|+=
literal|"openvg"
expr_stmt|;
name|qtConfig
operator|+=
literal|"egl"
expr_stmt|;
block|}
if|if
condition|(
name|dictionary
index|[
literal|"DIRECTSHOW"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"directshow"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"OPENSSL"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"openssl"
expr_stmt|;
elseif|else
if|if
condition|(
name|dictionary
index|[
literal|"OPENSSL"
index|]
operator|==
literal|"linked"
condition|)
name|qtConfig
operator|+=
literal|"openssl-linked"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"DBUS"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"dbus"
expr_stmt|;
elseif|else
if|if
condition|(
name|dictionary
index|[
literal|"DBUS"
index|]
operator|==
literal|"linked"
condition|)
name|qtConfig
operator|+=
literal|"dbus dbus-linked"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"CETEST"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"cetest"
expr_stmt|;
comment|// No longer needed after modularization
comment|//    if (dictionary[ "SCRIPT" ] == "yes")
comment|//        qtConfig += "script";
comment|// No longer needed after modularization
comment|//    if (dictionary[ "SCRIPTTOOLS" ] == "yes") {
comment|//        if (dictionary[ "SCRIPT" ] == "no") {
comment|//            cout<< "QtScriptTools was requested, but it can't be built due to QtScript being "
comment|//                    "disabled."<< endl;
comment|//            dictionary[ "DONE" ] = "error";
comment|//        }
comment|//        qtConfig += "scripttools";
comment|//    }
comment|// No longer needed after modularization
comment|//    if (dictionary[ "XMLPATTERNS" ] == "yes")
comment|//        qtConfig += "xmlpatterns";
if|if
condition|(
name|dictionary
index|[
literal|"PHONON"
index|]
operator|==
literal|"yes"
condition|)
block|{
comment|// No longer needed after modularization
comment|//qtConfig += "phonon";
if|if
condition|(
name|dictionary
index|[
literal|"PHONON_BACKEND"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"phonon-backend"
expr_stmt|;
block|}
if|if
condition|(
name|dictionary
index|[
literal|"MULTIMEDIA"
index|]
operator|==
literal|"yes"
condition|)
block|{
comment|// No longer needed after modularization
comment|//qtConfig += "multimedia";
if|if
condition|(
name|dictionary
index|[
literal|"AUDIO_BACKEND"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"audio-backend"
expr_stmt|;
block|}
if|if
condition|(
name|dictionary
index|[
literal|"WEBKIT"
index|]
operator|!=
literal|"no"
condition|)
block|{
if|if
condition|(
name|dictionary
index|[
literal|"WEBKIT"
index|]
operator|==
literal|"debug"
condition|)
name|qtConfig
operator|+=
literal|"webkit-debug"
expr_stmt|;
block|}
comment|// No longer needed after modularization
comment|//    if (dictionary["DECLARATIVE"] == "yes") {
comment|//        if (dictionary[ "V8" ] == "no") {
comment|//            cout<< "QtDeclarative was requested, but it can't be built due to V8 being "
comment|//                    "disabled."<< endl;
comment|//            dictionary[ "DONE" ] = "error";
comment|//        }
comment|//        qtConfig += "declarative";
comment|//    }
if|if
condition|(
name|dictionary
index|[
literal|"DIRECTWRITE"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"directwrite"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"NATIVE_GESTURES"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"native-gestures"
expr_stmt|;
comment|// We currently have no switch for QtSvg, so add it unconditionally.
name|qtConfig
operator|+=
literal|"svg"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"V8"
index|]
operator|==
literal|"yes"
condition|)
block|{
name|qtConfig
operator|+=
literal|"v8"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"V8SNAPSHOT"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"v8snapshot"
expr_stmt|;
block|}
comment|// Add config levels --------------------------------------------
name|QStringList
name|possible_configs
init|=
name|QStringList
argument_list|()
operator|<<
literal|"minimal"
operator|<<
literal|"small"
operator|<<
literal|"medium"
operator|<<
literal|"large"
operator|<<
literal|"full"
decl_stmt|;
name|QString
name|set_config
init|=
name|dictionary
index|[
literal|"QCONFIG"
index|]
decl_stmt|;
if|if
condition|(
name|possible_configs
operator|.
name|contains
argument_list|(
name|set_config
argument_list|)
condition|)
block|{
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|cfg
decl|,
name|possible_configs
control|)
block|{
name|qtConfig
operator|+=
operator|(
name|cfg
operator|+
literal|"-config"
operator|)
expr_stmt|;
if|if
condition|(
name|cfg
operator|==
name|set_config
condition|)
break|break;
block|}
block|}
if|if
condition|(
name|dictionary
operator|.
name|contains
argument_list|(
literal|"XQMAKESPEC"
argument_list|)
operator|&&
operator|(
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|!=
name|dictionary
index|[
literal|"XQMAKESPEC"
index|]
operator|)
condition|)
name|qmakeConfig
operator|+=
literal|"cross_compile"
expr_stmt|;
comment|// Directories and settings for .qmake.cache --------------------
comment|// if QT_INSTALL_* have not been specified on commandline, define them now from QT_INSTALL_PREFIX
comment|// if prefix is empty (WINCE), make all of them empty, if they aren't set
name|bool
name|qipempty
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"QT_INSTALL_PREFIX"
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|qipempty
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"QT_INSTALL_DOCS"
index|]
operator|.
name|size
argument_list|()
condition|)
name|dictionary
index|[
literal|"QT_INSTALL_DOCS"
index|]
operator|=
name|qipempty
condition|?
literal|""
else|:
name|fixSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_PREFIX"
index|]
operator|+
literal|"/doc"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"QT_INSTALL_HEADERS"
index|]
operator|.
name|size
argument_list|()
condition|)
name|dictionary
index|[
literal|"QT_INSTALL_HEADERS"
index|]
operator|=
name|qipempty
condition|?
literal|""
else|:
name|fixSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_PREFIX"
index|]
operator|+
literal|"/include"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"QT_INSTALL_LIBS"
index|]
operator|.
name|size
argument_list|()
condition|)
name|dictionary
index|[
literal|"QT_INSTALL_LIBS"
index|]
operator|=
name|qipempty
condition|?
literal|""
else|:
name|fixSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_PREFIX"
index|]
operator|+
literal|"/lib"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"QT_INSTALL_BINS"
index|]
operator|.
name|size
argument_list|()
condition|)
name|dictionary
index|[
literal|"QT_INSTALL_BINS"
index|]
operator|=
name|qipempty
condition|?
literal|""
else|:
name|fixSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_PREFIX"
index|]
operator|+
literal|"/bin"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"QT_INSTALL_PLUGINS"
index|]
operator|.
name|size
argument_list|()
condition|)
name|dictionary
index|[
literal|"QT_INSTALL_PLUGINS"
index|]
operator|=
name|qipempty
condition|?
literal|""
else|:
name|fixSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_PREFIX"
index|]
operator|+
literal|"/plugins"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"QT_INSTALL_IMPORTS"
index|]
operator|.
name|size
argument_list|()
condition|)
name|dictionary
index|[
literal|"QT_INSTALL_IMPORTS"
index|]
operator|=
name|qipempty
condition|?
literal|""
else|:
name|fixSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_PREFIX"
index|]
operator|+
literal|"/imports"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"QT_INSTALL_DATA"
index|]
operator|.
name|size
argument_list|()
condition|)
name|dictionary
index|[
literal|"QT_INSTALL_DATA"
index|]
operator|=
name|qipempty
condition|?
literal|""
else|:
name|fixSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_PREFIX"
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"QT_INSTALL_TRANSLATIONS"
index|]
operator|.
name|size
argument_list|()
condition|)
name|dictionary
index|[
literal|"QT_INSTALL_TRANSLATIONS"
index|]
operator|=
name|qipempty
condition|?
literal|""
else|:
name|fixSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_PREFIX"
index|]
operator|+
literal|"/translations"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"QT_INSTALL_EXAMPLES"
index|]
operator|.
name|size
argument_list|()
condition|)
name|dictionary
index|[
literal|"QT_INSTALL_EXAMPLES"
index|]
operator|=
name|qipempty
condition|?
literal|""
else|:
name|fixSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_PREFIX"
index|]
operator|+
literal|"/examples"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"QT_INSTALL_TESTS"
index|]
operator|.
name|size
argument_list|()
condition|)
name|dictionary
index|[
literal|"QT_INSTALL_TESTS"
index|]
operator|=
name|qipempty
condition|?
literal|""
else|:
name|fixSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_PREFIX"
index|]
operator|+
literal|"/tests"
argument_list|)
expr_stmt|;
if|if
condition|(
name|dictionary
operator|.
name|contains
argument_list|(
literal|"XQMAKESPEC"
argument_list|)
operator|&&
name|dictionary
index|[
literal|"XQMAKESPEC"
index|]
operator|.
name|startsWith
argument_list|(
literal|"linux"
argument_list|)
condition|)
name|dictionary
index|[
literal|"QMAKE_RPATHDIR"
index|]
operator|=
name|dictionary
index|[
literal|"QT_INSTALL_LIBS"
index|]
expr_stmt|;
name|qmakeVars
operator|+=
name|QString
argument_list|(
literal|"OBJECTS_DIR     = "
argument_list|)
operator|+
name|fixSeparators
argument_list|(
literal|"tmp/obj/"
operator|+
name|dictionary
index|[
literal|"QMAKE_OUTDIR"
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|qmakeVars
operator|+=
name|QString
argument_list|(
literal|"MOC_DIR         = "
argument_list|)
operator|+
name|fixSeparators
argument_list|(
literal|"tmp/moc/"
operator|+
name|dictionary
index|[
literal|"QMAKE_OUTDIR"
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|qmakeVars
operator|+=
name|QString
argument_list|(
literal|"RCC_DIR         = "
argument_list|)
operator|+
name|fixSeparators
argument_list|(
literal|"tmp/rcc/"
operator|+
name|dictionary
index|[
literal|"QMAKE_OUTDIR"
index|]
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|qmakeDefines
operator|.
name|isEmpty
argument_list|()
condition|)
name|qmakeVars
operator|+=
name|QString
argument_list|(
literal|"DEFINES        += "
argument_list|)
operator|+
name|qmakeDefines
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|qmakeIncludes
operator|.
name|isEmpty
argument_list|()
condition|)
name|qmakeVars
operator|+=
name|QString
argument_list|(
literal|"INCLUDEPATH    += "
argument_list|)
operator|+
name|escapeSeparators
argument_list|(
name|qmakeIncludes
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|opensslLibs
operator|.
name|isEmpty
argument_list|()
condition|)
name|qmakeVars
operator|+=
name|opensslLibs
expr_stmt|;
elseif|else
if|if
condition|(
name|dictionary
index|[
literal|"OPENSSL"
index|]
operator|==
literal|"linked"
condition|)
name|qmakeVars
operator|+=
name|QString
argument_list|(
literal|"OPENSSL_LIBS    = -lssleay32 -llibeay32"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|psqlLibs
operator|.
name|isEmpty
argument_list|()
condition|)
name|qmakeVars
operator|+=
name|QString
argument_list|(
literal|"QT_LFLAGS_PSQL="
argument_list|)
operator|+
name|psqlLibs
operator|.
name|section
argument_list|(
literal|"="
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|QStringList
name|lflagsTDS
decl_stmt|;
if|if
condition|(
operator|!
name|sybase
operator|.
name|isEmpty
argument_list|()
condition|)
name|lflagsTDS
operator|+=
name|QString
argument_list|(
literal|"-L"
argument_list|)
operator|+
name|fixSeparators
argument_list|(
name|sybase
operator|.
name|section
argument_list|(
literal|"="
argument_list|,
literal|1
argument_list|)
operator|+
literal|"/lib"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sybaseLibs
operator|.
name|isEmpty
argument_list|()
condition|)
name|lflagsTDS
operator|+=
name|sybaseLibs
operator|.
name|section
argument_list|(
literal|"="
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|lflagsTDS
operator|.
name|isEmpty
argument_list|()
condition|)
name|qmakeVars
operator|+=
name|QString
argument_list|(
literal|"QT_LFLAGS_TDS="
argument_list|)
operator|+
name|lflagsTDS
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|qmakeSql
operator|.
name|isEmpty
argument_list|()
condition|)
name|qmakeVars
operator|+=
name|QString
argument_list|(
literal|"sql-drivers    += "
argument_list|)
operator|+
name|qmakeSql
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|qmakeSqlPlugins
operator|.
name|isEmpty
argument_list|()
condition|)
name|qmakeVars
operator|+=
name|QString
argument_list|(
literal|"sql-plugins    += "
argument_list|)
operator|+
name|qmakeSqlPlugins
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|qmakeStyles
operator|.
name|isEmpty
argument_list|()
condition|)
name|qmakeVars
operator|+=
name|QString
argument_list|(
literal|"styles         += "
argument_list|)
operator|+
name|qmakeStyles
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|qmakeStylePlugins
operator|.
name|isEmpty
argument_list|()
condition|)
name|qmakeVars
operator|+=
name|QString
argument_list|(
literal|"style-plugins  += "
argument_list|)
operator|+
name|qmakeStylePlugins
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|.
name|endsWith
argument_list|(
literal|"-g++"
argument_list|)
condition|)
block|{
name|QString
name|includepath
init|=
name|qgetenv
argument_list|(
literal|"INCLUDE"
argument_list|)
decl_stmt|;
name|bool
name|hasSh
init|=
name|Environment
operator|::
name|detectExecutable
argument_list|(
literal|"sh.exe"
argument_list|)
decl_stmt|;
name|QChar
name|separator
init|=
operator|(
operator|!
name|includepath
operator|.
name|contains
argument_list|(
literal|":\\"
argument_list|)
operator|&&
name|hasSh
condition|?
name|QChar
argument_list|(
literal|':'
argument_list|)
else|:
name|QChar
argument_list|(
literal|';'
argument_list|)
operator|)
decl_stmt|;
name|qmakeVars
operator|+=
name|QString
argument_list|(
literal|"TMPPATH            = $$quote($$(INCLUDE))"
argument_list|)
expr_stmt|;
name|qmakeVars
operator|+=
name|QString
argument_list|(
literal|"QMAKE_INCDIR_POST += $$split(TMPPATH,\"%1\")"
argument_list|)
operator|.
name|arg
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|qmakeVars
operator|+=
name|QString
argument_list|(
literal|"TMPPATH            = $$quote($$(LIB))"
argument_list|)
expr_stmt|;
name|qmakeVars
operator|+=
name|QString
argument_list|(
literal|"QMAKE_LIBDIR_POST += $$split(TMPPATH,\"%1\")"
argument_list|)
operator|.
name|arg
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|.
name|length
argument_list|()
condition|)
block|{
name|cout
operator|<<
literal|"Configure could not detect your compiler. QMAKESPEC must either"
operator|<<
name|endl
operator|<<
literal|"be defined as an environment variable, or specified as an"
operator|<<
name|endl
operator|<<
literal|"argument with -platform"
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"HELP"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|QStringList
name|winPlatforms
decl_stmt|;
name|QDir
name|mkspecsDir
argument_list|(
name|sourcePath
operator|+
literal|"/mkspecs"
argument_list|)
decl_stmt|;
specifier|const
name|QFileInfoList
modifier|&
name|specsList
init|=
name|mkspecsDir
operator|.
name|entryInfoList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|specsList
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QFileInfo
modifier|&
name|fi
init|=
name|specsList
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|fi
operator|.
name|fileName
argument_list|()
operator|.
name|left
argument_list|(
literal|5
argument_list|)
operator|==
literal|"win32"
condition|)
block|{
name|winPlatforms
operator|+=
name|fi
operator|.
name|fileName
argument_list|()
expr_stmt|;
block|}
block|}
name|cout
operator|<<
literal|"Available platforms are: "
operator|<<
name|qPrintable
argument_list|(
name|winPlatforms
operator|.
name|join
argument_list|(
literal|", "
argument_list|)
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
block|}
block|}
end_function
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|EVAL
argument_list|)
end_if
begin_function
DECL|function|generateCachefile
name|void
name|Configure
operator|::
name|generateCachefile
parameter_list|()
block|{
comment|// Generate .qmake.cache
name|QFile
name|cacheFile
argument_list|(
name|buildPath
operator|+
literal|"/.qmake.cache"
argument_list|)
decl_stmt|;
if|if
condition|(
name|cacheFile
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
operator||
name|QFile
operator|::
name|Text
argument_list|)
condition|)
block|{
comment|// Truncates any existing file.
name|QTextStream
name|cacheStream
argument_list|(
operator|&
name|cacheFile
argument_list|)
decl_stmt|;
name|cacheStream
operator|<<
literal|"include($$PWD/mkspecs/qmodule.pri)"
operator|<<
name|endl
expr_stmt|;
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|var
init|=
name|qmakeVars
operator|.
name|begin
argument_list|()
init|;
name|var
operator|!=
name|qmakeVars
operator|.
name|end
argument_list|()
condition|;
operator|++
name|var
control|)
block|{
name|cacheStream
operator|<<
operator|(
operator|*
name|var
operator|)
operator|<<
name|endl
expr_stmt|;
block|}
name|cacheStream
operator|<<
literal|"CONFIG         += "
operator|<<
name|qmakeConfig
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
operator|<<
literal|" incremental msvc_mp create_prl link_prl depend_includepath no_private_qt_headers_warning QTDIR_build"
operator|<<
name|endl
expr_stmt|;
name|cacheStream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|cacheFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Generate qmodule.pri
name|QFile
name|moduleFile
argument_list|(
name|dictionary
index|[
literal|"QT_BUILD_TREE"
index|]
operator|+
literal|"/mkspecs/qmodule.pri"
argument_list|)
decl_stmt|;
if|if
condition|(
name|moduleFile
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
operator||
name|QFile
operator|::
name|Text
argument_list|)
condition|)
block|{
comment|// Truncates any existing file.
name|QTextStream
name|moduleStream
argument_list|(
operator|&
name|moduleFile
argument_list|)
decl_stmt|;
name|moduleStream
operator|<<
literal|"#paths"
operator|<<
name|endl
expr_stmt|;
name|moduleStream
operator|<<
literal|"QT_BUILD_TREE   = "
operator|<<
name|fixSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_BUILD_TREE"
index|]
argument_list|,
literal|true
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|moduleStream
operator|<<
literal|"QT_SOURCE_TREE  = "
operator|<<
name|fixSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_SOURCE_TREE"
index|]
argument_list|,
literal|true
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|QStringList
name|buildParts
decl_stmt|;
name|buildParts
operator|<<
name|QStringLiteral
argument_list|(
literal|"libs"
argument_list|)
operator|<<
name|QStringLiteral
argument_list|(
literal|"examples"
argument_list|)
operator|<<
name|QStringLiteral
argument_list|(
literal|"tests"
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|item
decl|,
name|disabledBuildParts
control|)
block|{
name|buildParts
operator|.
name|removeAll
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
name|moduleStream
operator|<<
literal|"QT_BUILD_PARTS  = "
operator|<<
name|buildParts
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
comment|//so that we can build without an install first (which would be impossible)
name|moduleStream
operator|<<
literal|"#local paths that cannot be queried from the QT_INSTALL_* properties while building QTDIR"
operator|<<
name|endl
expr_stmt|;
name|moduleStream
operator|<<
literal|"QMAKE_MOC       = $$QT_BUILD_TREE"
operator|<<
name|fixSeparators
argument_list|(
literal|"/bin/moc.exe"
argument_list|,
literal|true
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|moduleStream
operator|<<
literal|"QMAKE_UIC       = $$QT_BUILD_TREE"
operator|<<
name|fixSeparators
argument_list|(
literal|"/bin/uic.exe"
argument_list|,
literal|true
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|moduleStream
operator|<<
literal|"QMAKE_RCC       = $$QT_BUILD_TREE"
operator|<<
name|fixSeparators
argument_list|(
literal|"/bin/rcc.exe"
argument_list|,
literal|true
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|moduleStream
operator|<<
literal|"QMAKE_DUMPCPP   = $$QT_BUILD_TREE"
operator|<<
name|fixSeparators
argument_list|(
literal|"/bin/dumpcpp.exe"
argument_list|,
literal|true
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|moduleStream
operator|<<
literal|"QMAKE_INCDIR_QT = $$QT_BUILD_TREE"
operator|<<
name|fixSeparators
argument_list|(
literal|"/include"
argument_list|,
literal|true
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|moduleStream
operator|<<
literal|"QMAKE_LIBDIR_QT = $$QT_BUILD_TREE"
operator|<<
name|fixSeparators
argument_list|(
literal|"/lib"
argument_list|,
literal|true
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|QString
name|targetSpec
init|=
name|dictionary
operator|.
name|contains
argument_list|(
literal|"XQMAKESPEC"
argument_list|)
condition|?
name|dictionary
index|[
literal|"XQMAKESPEC"
index|]
else|:
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
decl_stmt|;
name|QString
name|mkspec_path
init|=
name|fixSeparators
argument_list|(
name|sourcePath
operator|+
literal|"/mkspecs/"
operator|+
name|targetSpec
argument_list|)
decl_stmt|;
if|if
condition|(
name|QFile
operator|::
name|exists
argument_list|(
name|mkspec_path
argument_list|)
condition|)
name|moduleStream
operator|<<
literal|"QMAKESPEC       = "
operator|<<
name|escapeSeparators
argument_list|(
name|mkspec_path
argument_list|)
operator|<<
name|endl
expr_stmt|;
else|else
name|moduleStream
operator|<<
literal|"QMAKESPEC       = "
operator|<<
name|fixSeparators
argument_list|(
name|targetSpec
argument_list|,
literal|true
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|moduleStream
operator|<<
literal|"ARCH            = "
operator|<<
name|dictionary
index|[
literal|"ARCHITECTURE"
index|]
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"QT_EDITION"
index|]
operator|!=
literal|"QT_EDITION_OPENSOURCE"
condition|)
name|moduleStream
operator|<<
literal|"DEFINES        *= QT_EDITION=QT_EDITION_DESKTOP"
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"CETEST"
index|]
operator|==
literal|"yes"
condition|)
block|{
name|moduleStream
operator|<<
literal|"QT_CE_RAPI_INC  = "
operator|<<
name|fixSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_CE_RAPI_INC"
index|]
argument_list|,
literal|true
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|moduleStream
operator|<<
literal|"QT_CE_RAPI_LIB  = "
operator|<<
name|fixSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_CE_RAPI_LIB"
index|]
argument_list|,
literal|true
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
name|moduleStream
operator|<<
literal|"#Qt for Windows CE c-runtime deployment"
operator|<<
name|endl
operator|<<
literal|"QT_CE_C_RUNTIME = "
operator|<<
name|fixSeparators
argument_list|(
name|dictionary
index|[
literal|"CE_CRT"
index|]
argument_list|,
literal|true
argument_list|)
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"CE_SIGNATURE"
index|]
operator|!=
name|QLatin1String
argument_list|(
literal|"no"
argument_list|)
condition|)
name|moduleStream
operator|<<
literal|"DEFAULT_SIGNATURE="
operator|<<
name|dictionary
index|[
literal|"CE_SIGNATURE"
index|]
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"QMAKE_RPATHDIR"
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|moduleStream
operator|<<
literal|"QMAKE_RPATHDIR += "
operator|<<
name|dictionary
index|[
literal|"QMAKE_RPATHDIR"
index|]
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"QT_LIBINFIX"
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|moduleStream
operator|<<
literal|"QT_LIBINFIX = "
operator|<<
name|dictionary
index|[
literal|"QT_LIBINFIX"
index|]
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"QT_NAMESPACE"
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|moduleStream
operator|<<
literal|"#namespaces"
operator|<<
name|endl
operator|<<
literal|"QT_NAMESPACE = "
operator|<<
name|dictionary
index|[
literal|"QT_NAMESPACE"
index|]
operator|<<
name|endl
expr_stmt|;
block|}
comment|// embedded
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"KBD_DRIVERS"
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|moduleStream
operator|<<
literal|"kbd-drivers += "
operator|<<
name|dictionary
index|[
literal|"KBD_DRIVERS"
index|]
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"GFX_DRIVERS"
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|moduleStream
operator|<<
literal|"gfx-drivers += "
operator|<<
name|dictionary
index|[
literal|"GFX_DRIVERS"
index|]
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"MOUSE_DRIVERS"
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|moduleStream
operator|<<
literal|"mouse-drivers += "
operator|<<
name|dictionary
index|[
literal|"MOUSE_DRIVERS"
index|]
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"DECORATIONS"
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|moduleStream
operator|<<
literal|"decorations += "
operator|<<
name|dictionary
index|[
literal|"DECORATIONS"
index|]
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"QMAKE_RPATHDIR"
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|moduleStream
operator|<<
literal|"QMAKE_RPATHDIR += "
operator|<<
name|dictionary
index|[
literal|"QMAKE_RPATHDIR"
index|]
expr_stmt|;
name|moduleStream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|moduleFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Generate qconfig.pri
name|QFile
name|configFile
argument_list|(
name|dictionary
index|[
literal|"QT_BUILD_TREE"
index|]
operator|+
literal|"/mkspecs/qconfig.pri"
argument_list|)
decl_stmt|;
if|if
condition|(
name|configFile
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
operator||
name|QFile
operator|::
name|Text
argument_list|)
condition|)
block|{
comment|// Truncates any existing file.
name|QTextStream
name|configStream
argument_list|(
operator|&
name|configFile
argument_list|)
decl_stmt|;
name|configStream
operator|<<
literal|"CONFIG+= "
expr_stmt|;
name|configStream
operator|<<
name|dictionary
index|[
literal|"BUILD"
index|]
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SHARED"
index|]
operator|==
literal|"yes"
condition|)
name|configStream
operator|<<
literal|" shared"
expr_stmt|;
else|else
name|configStream
operator|<<
literal|" static"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"LTCG"
index|]
operator|==
literal|"yes"
condition|)
name|configStream
operator|<<
literal|" ltcg"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"MSVC_MP"
index|]
operator|==
literal|"yes"
condition|)
name|configStream
operator|<<
literal|" msvc_mp"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"STL"
index|]
operator|==
literal|"yes"
condition|)
name|configStream
operator|<<
literal|" stl"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"EXCEPTIONS"
index|]
operator|==
literal|"yes"
condition|)
name|configStream
operator|<<
literal|" exceptions"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"EXCEPTIONS"
index|]
operator|==
literal|"no"
condition|)
name|configStream
operator|<<
literal|" exceptions_off"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"RTTI"
index|]
operator|==
literal|"yes"
condition|)
name|configStream
operator|<<
literal|" rtti"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"MMX"
index|]
operator|==
literal|"yes"
condition|)
name|configStream
operator|<<
literal|" mmx"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"3DNOW"
index|]
operator|==
literal|"yes"
condition|)
name|configStream
operator|<<
literal|" 3dnow"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SSE"
index|]
operator|==
literal|"yes"
condition|)
name|configStream
operator|<<
literal|" sse"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SSE2"
index|]
operator|==
literal|"yes"
condition|)
name|configStream
operator|<<
literal|" sse2"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"IWMMXT"
index|]
operator|==
literal|"yes"
condition|)
name|configStream
operator|<<
literal|" iwmmxt"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"INCREDIBUILD_XGE"
index|]
operator|==
literal|"yes"
condition|)
name|configStream
operator|<<
literal|" incredibuild_xge"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"PLUGIN_MANIFESTS"
index|]
operator|==
literal|"no"
condition|)
name|configStream
operator|<<
literal|" no_plugin_manifest"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"QPA"
index|]
operator|==
literal|"yes"
condition|)
name|configStream
operator|<<
literal|" qpa"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"DIRECTWRITE"
index|]
operator|==
literal|"yes"
condition|)
name|configStream
operator|<<
literal|"directwrite"
expr_stmt|;
name|configStream
operator|<<
name|endl
expr_stmt|;
name|configStream
operator|<<
literal|"QT_ARCH = "
operator|<<
name|dictionary
index|[
literal|"ARCHITECTURE"
index|]
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"QT_EDITION"
index|]
operator|.
name|contains
argument_list|(
literal|"OPENSOURCE"
argument_list|)
condition|)
name|configStream
operator|<<
literal|"QT_EDITION = "
operator|<<
name|QLatin1String
argument_list|(
literal|"OpenSource"
argument_list|)
operator|<<
name|endl
expr_stmt|;
else|else
name|configStream
operator|<<
literal|"QT_EDITION = "
operator|<<
name|dictionary
index|[
literal|"EDITION"
index|]
operator|<<
name|endl
expr_stmt|;
name|configStream
operator|<<
literal|"QT_CONFIG += "
operator|<<
name|qtConfig
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|configStream
operator|<<
literal|"#versioning "
operator|<<
name|endl
operator|<<
literal|"QT_VERSION = "
operator|<<
name|dictionary
index|[
literal|"VERSION"
index|]
operator|<<
name|endl
operator|<<
literal|"QT_MAJOR_VERSION = "
operator|<<
name|dictionary
index|[
literal|"VERSION_MAJOR"
index|]
operator|<<
name|endl
operator|<<
literal|"QT_MINOR_VERSION = "
operator|<<
name|dictionary
index|[
literal|"VERSION_MINOR"
index|]
operator|<<
name|endl
operator|<<
literal|"QT_PATCH_VERSION = "
operator|<<
name|dictionary
index|[
literal|"VERSION_PATCH"
index|]
operator|<<
name|endl
expr_stmt|;
name|configStream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|configFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|addDefine
name|QString
name|Configure
operator|::
name|addDefine
parameter_list|(
name|QString
name|def
parameter_list|)
block|{
name|QString
name|result
decl_stmt|,
name|defNeg
decl_stmt|,
name|defD
init|=
name|def
decl_stmt|;
name|defD
operator|.
name|replace
argument_list|(
name|QRegExp
argument_list|(
literal|"=.*"
argument_list|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|def
operator|.
name|replace
argument_list|(
name|QRegExp
argument_list|(
literal|"="
argument_list|)
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
if|if
condition|(
name|def
operator|.
name|startsWith
argument_list|(
literal|"QT_NO_"
argument_list|)
condition|)
block|{
name|defNeg
operator|=
name|defD
expr_stmt|;
name|defNeg
operator|.
name|replace
argument_list|(
literal|"QT_NO_"
argument_list|,
literal|"QT_"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|def
operator|.
name|startsWith
argument_list|(
literal|"QT_"
argument_list|)
condition|)
block|{
name|defNeg
operator|=
name|defD
expr_stmt|;
name|defNeg
operator|.
name|replace
argument_list|(
literal|"QT_"
argument_list|,
literal|"QT_NO_"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|defNeg
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|result
operator|=
literal|"#ifndef $DEFD\n"
literal|"# define $DEF\n"
literal|"#endif\n\n"
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
literal|"#if defined($DEFD)&& defined($DEFNEG)\n"
literal|"# undef $DEFD\n"
literal|"#elif !defined($DEFD)\n"
literal|"# define $DEF\n"
literal|"#endif\n\n"
expr_stmt|;
block|}
name|result
operator|.
name|replace
argument_list|(
literal|"$DEFNEG"
argument_list|,
name|defNeg
argument_list|)
expr_stmt|;
name|result
operator|.
name|replace
argument_list|(
literal|"$DEFD"
argument_list|,
name|defD
argument_list|)
expr_stmt|;
name|result
operator|.
name|replace
argument_list|(
literal|"$DEF"
argument_list|,
name|def
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|EVAL
argument_list|)
end_if
begin_function
DECL|function|generateConfigfiles
name|void
name|Configure
operator|::
name|generateConfigfiles
parameter_list|()
block|{
name|QDir
argument_list|(
name|buildPath
argument_list|)
operator|.
name|mkpath
argument_list|(
literal|"src/corelib/global"
argument_list|)
expr_stmt|;
name|QString
name|outName
argument_list|(
name|buildPath
operator|+
literal|"/src/corelib/global/qconfig.h"
argument_list|)
decl_stmt|;
name|QTemporaryFile
name|tmpFile
decl_stmt|;
name|QTextStream
name|tmpStream
decl_stmt|;
if|if
condition|(
name|tmpFile
operator|.
name|open
argument_list|()
condition|)
block|{
name|tmpStream
operator|.
name|setDevice
argument_list|(
operator|&
name|tmpFile
argument_list|)
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"QCONFIG"
index|]
operator|==
literal|"full"
condition|)
block|{
name|tmpStream
operator|<<
literal|"/* Everything */"
operator|<<
name|endl
expr_stmt|;
block|}
else|else
block|{
name|QString
name|configName
argument_list|(
literal|"qconfig-"
operator|+
name|dictionary
index|[
literal|"QCONFIG"
index|]
operator|+
literal|".h"
argument_list|)
decl_stmt|;
name|tmpStream
operator|<<
literal|"/* Copied from "
operator|<<
name|configName
operator|<<
literal|"*/"
operator|<<
name|endl
expr_stmt|;
name|tmpStream
operator|<<
literal|"#ifndef QT_BOOTSTRAPPED"
operator|<<
name|endl
expr_stmt|;
name|QFile
name|inFile
argument_list|(
name|sourcePath
operator|+
literal|"/src/corelib/global/"
operator|+
name|configName
argument_list|)
decl_stmt|;
if|if
condition|(
name|inFile
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|QByteArray
name|buffer
init|=
name|inFile
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|tmpFile
operator|.
name|write
argument_list|(
name|buffer
operator|.
name|constData
argument_list|()
argument_list|,
name|buffer
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|inFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|tmpStream
operator|<<
literal|"#endif // QT_BOOTSTRAPPED"
operator|<<
name|endl
expr_stmt|;
block|}
name|tmpStream
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SHARED"
index|]
operator|==
literal|"yes"
condition|)
block|{
name|tmpStream
operator|<<
literal|"#ifndef QT_DLL"
operator|<<
name|endl
expr_stmt|;
name|tmpStream
operator|<<
literal|"#define QT_DLL"
operator|<<
name|endl
expr_stmt|;
name|tmpStream
operator|<<
literal|"#endif"
operator|<<
name|endl
expr_stmt|;
block|}
name|tmpStream
operator|<<
name|endl
expr_stmt|;
name|tmpStream
operator|<<
literal|"/* License information */"
operator|<<
name|endl
expr_stmt|;
name|tmpStream
operator|<<
literal|"#define QT_PRODUCT_LICENSEE \""
operator|<<
name|licenseInfo
index|[
literal|"LICENSEE"
index|]
operator|<<
literal|"\""
operator|<<
name|endl
expr_stmt|;
name|tmpStream
operator|<<
literal|"#define QT_PRODUCT_LICENSE \""
operator|<<
name|dictionary
index|[
literal|"EDITION"
index|]
operator|<<
literal|"\""
operator|<<
name|endl
expr_stmt|;
name|tmpStream
operator|<<
name|endl
expr_stmt|;
name|tmpStream
operator|<<
literal|"// Qt Edition"
operator|<<
name|endl
expr_stmt|;
name|tmpStream
operator|<<
literal|"#ifndef QT_EDITION"
operator|<<
name|endl
expr_stmt|;
name|tmpStream
operator|<<
literal|"#  define QT_EDITION "
operator|<<
name|dictionary
index|[
literal|"QT_EDITION"
index|]
operator|<<
name|endl
expr_stmt|;
name|tmpStream
operator|<<
literal|"#endif"
operator|<<
name|endl
expr_stmt|;
name|tmpStream
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"BUILDDEV"
index|]
operator|==
literal|"yes"
condition|)
block|{
name|dictionary
index|[
literal|"QMAKE_INTERNAL"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|tmpStream
operator|<<
literal|"/* Used for example to export symbols for the certain autotests*/"
operator|<<
name|endl
expr_stmt|;
name|tmpStream
operator|<<
literal|"#define QT_BUILD_INTERNAL"
operator|<<
name|endl
expr_stmt|;
name|tmpStream
operator|<<
name|endl
expr_stmt|;
block|}
name|tmpStream
operator|<<
literal|"/* Machine byte-order */"
operator|<<
name|endl
expr_stmt|;
name|tmpStream
operator|<<
literal|"#define Q_BIG_ENDIAN 4321"
operator|<<
name|endl
expr_stmt|;
name|tmpStream
operator|<<
literal|"#define Q_LITTLE_ENDIAN 1234"
operator|<<
name|endl
expr_stmt|;
name|tmpStream
operator|<<
literal|"#define Q_BYTE_ORDER Q_LITTLE_ENDIAN"
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"QPA"
index|]
operator|==
literal|"yes"
condition|)
name|tmpStream
operator|<<
name|endl
operator|<<
literal|"#define Q_WS_QPA"
operator|<<
name|endl
expr_stmt|;
name|tmpStream
operator|<<
name|endl
operator|<<
literal|"// Compile time features"
operator|<<
name|endl
expr_stmt|;
name|tmpStream
operator|<<
literal|"#define QT_ARCH_"
operator|<<
name|dictionary
index|[
literal|"ARCHITECTURE"
index|]
operator|.
name|toUpper
argument_list|()
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"GRAPHICS_SYSTEM"
index|]
operator|==
literal|"runtime"
operator|&&
name|dictionary
index|[
literal|"RUNTIME_SYSTEM"
index|]
operator|!=
literal|"runtime"
condition|)
name|tmpStream
operator|<<
literal|"#define QT_DEFAULT_RUNTIME_SYSTEM \""
operator|<<
name|dictionary
index|[
literal|"RUNTIME_SYSTEM"
index|]
operator|<<
literal|"\""
operator|<<
name|endl
expr_stmt|;
name|QStringList
name|qconfigList
decl_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"STL"
index|]
operator|==
literal|"no"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_STL"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"STYLE_WINDOWS"
index|]
operator|!=
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_STYLE_WINDOWS"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"STYLE_PLASTIQUE"
index|]
operator|!=
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_STYLE_PLASTIQUE"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"STYLE_CLEANLOOKS"
index|]
operator|!=
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_STYLE_CLEANLOOKS"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"STYLE_WINDOWSXP"
index|]
operator|!=
literal|"yes"
operator|&&
name|dictionary
index|[
literal|"STYLE_WINDOWSVISTA"
index|]
operator|!=
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_STYLE_WINDOWSXP"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"STYLE_WINDOWSVISTA"
index|]
operator|!=
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_STYLE_WINDOWSVISTA"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"STYLE_MOTIF"
index|]
operator|!=
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_STYLE_MOTIF"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"STYLE_CDE"
index|]
operator|!=
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_STYLE_CDE"
expr_stmt|;
comment|// ### We still need the QT_NO_STYLE_S60 define for compiling Qt. Remove later!
name|qconfigList
operator|+=
literal|"QT_NO_STYLE_S60"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"STYLE_WINDOWSCE"
index|]
operator|!=
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_STYLE_WINDOWSCE"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"STYLE_WINDOWSMOBILE"
index|]
operator|!=
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_STYLE_WINDOWSMOBILE"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"STYLE_GTK"
index|]
operator|!=
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_STYLE_GTK"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"GIF"
index|]
operator|==
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_BUILTIN_GIF_READER=1"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"PNG"
index|]
operator|!=
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_IMAGEFORMAT_PNG"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"MNG"
index|]
operator|!=
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_IMAGEFORMAT_MNG"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"JPEG"
index|]
operator|!=
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_IMAGEFORMAT_JPEG"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"TIFF"
index|]
operator|!=
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_IMAGEFORMAT_TIFF"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"ZLIB"
index|]
operator|==
literal|"no"
condition|)
block|{
name|qconfigList
operator|+=
literal|"QT_NO_ZLIB"
expr_stmt|;
name|qconfigList
operator|+=
literal|"QT_NO_COMPRESS"
expr_stmt|;
block|}
if|if
condition|(
name|dictionary
index|[
literal|"ACCESSIBILITY"
index|]
operator|==
literal|"no"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_ACCESSIBILITY"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"EXCEPTIONS"
index|]
operator|==
literal|"no"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_EXCEPTIONS"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"OPENGL"
index|]
operator|==
literal|"no"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_OPENGL"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"OPENVG"
index|]
operator|==
literal|"no"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_OPENVG"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"OPENSSL"
index|]
operator|==
literal|"no"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_OPENSSL"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"OPENSSL"
index|]
operator|==
literal|"linked"
condition|)
name|qconfigList
operator|+=
literal|"QT_LINKED_OPENSSL"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"DBUS"
index|]
operator|==
literal|"no"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_DBUS"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"WEBKIT"
index|]
operator|==
literal|"no"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_WEBKIT"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"V8"
index|]
operator|==
literal|"no"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_V8"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"DECLARATIVE"
index|]
operator|==
literal|"no"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_DECLARATIVE"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"DECLARATIVE_DEBUG"
index|]
operator|==
literal|"no"
condition|)
name|qconfigList
operator|+=
literal|"QDECLARATIVE_NO_DEBUG_PROTOCOL"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"PHONON"
index|]
operator|==
literal|"no"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_PHONON"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"MULTIMEDIA"
index|]
operator|==
literal|"no"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_MULTIMEDIA"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"XMLPATTERNS"
index|]
operator|==
literal|"no"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_XMLPATTERNS"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SCRIPT"
index|]
operator|==
literal|"no"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_SCRIPT"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SCRIPTTOOLS"
index|]
operator|==
literal|"no"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_SCRIPTTOOLS"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"FREETYPE"
index|]
operator|==
literal|"no"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_FREETYPE"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"NATIVE_GESTURES"
index|]
operator|==
literal|"no"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_NATIVE_GESTURES"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"OPENGL_ES_CM"
index|]
operator|==
literal|"no"
operator|&&
name|dictionary
index|[
literal|"OPENGL_ES_2"
index|]
operator|==
literal|"no"
operator|&&
name|dictionary
index|[
literal|"OPENVG"
index|]
operator|==
literal|"no"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_EGL"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"OPENGL_ES_CM"
index|]
operator|==
literal|"yes"
operator|||
name|dictionary
index|[
literal|"OPENGL_ES_2"
index|]
operator|==
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_OPENGL_ES"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"OPENGL_ES_CM"
index|]
operator|==
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_OPENGL_ES_1"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"OPENGL_ES_2"
index|]
operator|==
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_OPENGL_ES_2"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_MYSQL"
index|]
operator|==
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_SQL_MYSQL"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_ODBC"
index|]
operator|==
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_SQL_ODBC"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_OCI"
index|]
operator|==
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_SQL_OCI"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_PSQL"
index|]
operator|==
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_SQL_PSQL"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_TDS"
index|]
operator|==
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_SQL_TDS"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_DB2"
index|]
operator|==
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_SQL_DB2"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_SQLITE"
index|]
operator|==
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_SQL_SQLITE"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_SQLITE2"
index|]
operator|==
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_SQL_SQLITE2"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_IBASE"
index|]
operator|==
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_SQL_IBASE"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"GRAPHICS_SYSTEM"
index|]
operator|==
literal|"openvg"
condition|)
name|qconfigList
operator|+=
literal|"QT_GRAPHICSSYSTEM_OPENVG"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"GRAPHICS_SYSTEM"
index|]
operator|==
literal|"opengl"
condition|)
name|qconfigList
operator|+=
literal|"QT_GRAPHICSSYSTEM_OPENGL"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"GRAPHICS_SYSTEM"
index|]
operator|==
literal|"raster"
condition|)
name|qconfigList
operator|+=
literal|"QT_GRAPHICSSYSTEM_RASTER"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"GRAPHICS_SYSTEM"
index|]
operator|==
literal|"runtime"
condition|)
name|qconfigList
operator|+=
literal|"QT_GRAPHICSSYSTEM_RUNTIME"
expr_stmt|;
name|qconfigList
operator|.
name|sort
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qconfigList
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|tmpStream
operator|<<
name|addDefine
argument_list|(
name|qconfigList
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"EMBEDDED"
index|]
operator|==
literal|"yes"
condition|)
block|{
comment|// Check for keyboard, mouse, gfx.
name|QStringList
name|kbdDrivers
init|=
name|dictionary
index|[
literal|"KBD_DRIVERS"
index|]
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
empty_stmt|;
name|QStringList
name|allKbdDrivers
decl_stmt|;
name|allKbdDrivers
operator|<<
literal|"tty"
operator|<<
literal|"usb"
operator|<<
literal|"sl5000"
operator|<<
literal|"yopy"
operator|<<
literal|"vr41xx"
operator|<<
literal|"qvfb"
operator|<<
literal|"um"
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|kbd
decl|,
name|allKbdDrivers
control|)
block|{
if|if
condition|(
operator|!
name|kbdDrivers
operator|.
name|contains
argument_list|(
name|kbd
argument_list|)
condition|)
name|tmpStream
operator|<<
literal|"#define QT_NO_QWS_KBD_"
operator|<<
name|kbd
operator|.
name|toUpper
argument_list|()
operator|<<
name|endl
expr_stmt|;
block|}
name|QStringList
name|mouseDrivers
init|=
name|dictionary
index|[
literal|"MOUSE_DRIVERS"
index|]
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
name|QStringList
name|allMouseDrivers
decl_stmt|;
name|allMouseDrivers
operator|<<
literal|"pc"
operator|<<
literal|"bus"
operator|<<
literal|"linuxtp"
operator|<<
literal|"yopy"
operator|<<
literal|"vr41xx"
operator|<<
literal|"tslib"
operator|<<
literal|"qvfb"
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|mouse
decl|,
name|allMouseDrivers
control|)
block|{
if|if
condition|(
operator|!
name|mouseDrivers
operator|.
name|contains
argument_list|(
name|mouse
argument_list|)
condition|)
name|tmpStream
operator|<<
literal|"#define QT_NO_QWS_MOUSE_"
operator|<<
name|mouse
operator|.
name|toUpper
argument_list|()
operator|<<
name|endl
expr_stmt|;
block|}
name|QStringList
name|gfxDrivers
init|=
name|dictionary
index|[
literal|"GFX_DRIVERS"
index|]
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
name|QStringList
name|allGfxDrivers
decl_stmt|;
name|allGfxDrivers
operator|<<
literal|"linuxfb"
operator|<<
literal|"transformed"
operator|<<
literal|"qvfb"
operator|<<
literal|"vnc"
operator|<<
literal|"multiscreen"
operator|<<
literal|"ahi"
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|gfx
decl|,
name|allGfxDrivers
control|)
block|{
if|if
condition|(
operator|!
name|gfxDrivers
operator|.
name|contains
argument_list|(
name|gfx
argument_list|)
condition|)
name|tmpStream
operator|<<
literal|"#define QT_NO_QWS_"
operator|<<
name|gfx
operator|.
name|toUpper
argument_list|()
operator|<<
name|endl
expr_stmt|;
block|}
name|tmpStream
operator|<<
literal|"#define Q_WS_QWS"
operator|<<
name|endl
expr_stmt|;
name|QStringList
name|depths
init|=
name|dictionary
index|[
literal|"QT_QWS_DEPTH"
index|]
operator|.
name|split
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|depth
decl|,
name|depths
control|)
name|tmpStream
operator|<<
literal|"#define QT_QWS_DEPTH_"
operator|+
name|depth
operator|<<
name|endl
expr_stmt|;
block|}
if|if
condition|(
name|dictionary
index|[
literal|"QT_CUPS"
index|]
operator|==
literal|"no"
condition|)
name|tmpStream
operator|<<
literal|"#define QT_NO_CUPS"
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"QT_ICONV"
index|]
operator|==
literal|"no"
condition|)
name|tmpStream
operator|<<
literal|"#define QT_NO_ICONV"
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"QT_GLIB"
index|]
operator|==
literal|"no"
condition|)
name|tmpStream
operator|<<
literal|"#define QT_NO_GLIB"
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"QT_LPR"
index|]
operator|==
literal|"no"
condition|)
name|tmpStream
operator|<<
literal|"#define QT_NO_LPR"
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"QT_INOTIFY"
index|]
operator|==
literal|"no"
condition|)
name|tmpStream
operator|<<
literal|"#define QT_NO_INOTIFY"
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"QT_SXE"
index|]
operator|==
literal|"no"
condition|)
name|tmpStream
operator|<<
literal|"#define QT_NO_SXE"
operator|<<
name|endl
expr_stmt|;
name|tmpStream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|tmpFile
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Replace old qconfig.h with new one
operator|::
name|SetFileAttributes
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
name|outName
operator|.
name|utf16
argument_list|()
argument_list|,
name|FILE_ATTRIBUTE_NORMAL
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|outName
argument_list|)
expr_stmt|;
name|tmpFile
operator|.
name|copy
argument_list|(
name|outName
argument_list|)
expr_stmt|;
name|tmpFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Copy configured mkspec to default directory, but remove the old one first, if there is any
name|QString
name|defSpec
init|=
name|buildPath
operator|+
literal|"/mkspecs/default"
decl_stmt|;
name|QFileInfo
name|defSpecInfo
argument_list|(
name|defSpec
argument_list|)
decl_stmt|;
if|if
condition|(
name|defSpecInfo
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|Environment
operator|::
name|rmdir
argument_list|(
name|defSpec
argument_list|)
condition|)
block|{
name|cout
operator|<<
literal|"Couldn't update default mkspec! Are files in "
operator|<<
name|qPrintable
argument_list|(
name|defSpec
argument_list|)
operator|<<
literal|" read-only?"
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
return|return;
block|}
block|}
name|QString
name|spec
init|=
name|dictionary
operator|.
name|contains
argument_list|(
literal|"XQMAKESPEC"
argument_list|)
condition|?
name|dictionary
index|[
literal|"XQMAKESPEC"
index|]
else|:
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
decl_stmt|;
name|QString
name|pltSpec
init|=
name|sourcePath
operator|+
literal|"/mkspecs/"
operator|+
name|spec
decl_stmt|;
name|QString
name|includeSpec
init|=
name|buildPath
operator|+
literal|"/mkspecs/"
operator|+
name|spec
decl_stmt|;
if|if
condition|(
operator|!
name|Environment
operator|::
name|cpdir
argument_list|(
name|pltSpec
argument_list|,
name|defSpec
argument_list|,
name|includeSpec
argument_list|)
condition|)
block|{
name|cout
operator|<<
literal|"Couldn't update default mkspec! Does "
operator|<<
name|qPrintable
argument_list|(
name|pltSpec
argument_list|)
operator|<<
literal|" exist?"
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
return|return;
block|}
comment|// Generate the new qconfig.cpp file
name|QDir
argument_list|(
name|buildPath
argument_list|)
operator|.
name|mkpath
argument_list|(
literal|"src/corelib/global"
argument_list|)
expr_stmt|;
name|outName
operator|=
name|buildPath
operator|+
literal|"/src/corelib/global/qconfig.cpp"
expr_stmt|;
name|QTemporaryFile
name|tmpFile2
decl_stmt|;
if|if
condition|(
name|tmpFile2
operator|.
name|open
argument_list|()
condition|)
block|{
name|tmpStream
operator|.
name|setDevice
argument_list|(
operator|&
name|tmpFile2
argument_list|)
expr_stmt|;
name|tmpStream
operator|<<
literal|"/* Licensed */"
operator|<<
name|endl
operator|<<
literal|"static const char qt_configure_licensee_str          [512 + 12] = \"qt_lcnsuser="
operator|<<
name|licenseInfo
index|[
literal|"LICENSEE"
index|]
operator|<<
literal|"\";"
operator|<<
name|endl
operator|<<
literal|"static const char qt_configure_licensed_products_str [512 + 12] = \"qt_lcnsprod="
operator|<<
name|dictionary
index|[
literal|"EDITION"
index|]
operator|<<
literal|"\";"
operator|<<
name|endl
operator|<<
name|endl
operator|<<
literal|"/* Build date */"
operator|<<
name|endl
operator|<<
literal|"static const char qt_configure_installation          [11  + 12] = \"qt_instdate="
operator|<<
name|QDate
operator|::
name|currentDate
argument_list|()
operator|.
name|toString
argument_list|(
name|Qt
operator|::
name|ISODate
argument_list|)
operator|<<
literal|"\";"
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"QT_HOST_PREFIX"
index|]
operator|.
name|isNull
argument_list|()
condition|)
name|tmpStream
operator|<<
literal|"#if !defined(QT_BOOTSTRAPPED)&& !defined(QT_BUILD_QMAKE)"
operator|<<
name|endl
expr_stmt|;
name|tmpStream
operator|<<
literal|"static const char qt_configure_prefix_path_str       [512 + 12] = \"qt_prfxpath="
operator|<<
name|escapeSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_PREFIX"
index|]
argument_list|)
operator|<<
literal|"\";"
operator|<<
name|endl
operator|<<
literal|"static const char qt_configure_documentation_path_str[512 + 12] = \"qt_docspath="
operator|<<
name|escapeSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_DOCS"
index|]
argument_list|)
operator|<<
literal|"\";"
operator|<<
name|endl
operator|<<
literal|"static const char qt_configure_headers_path_str      [512 + 12] = \"qt_hdrspath="
operator|<<
name|escapeSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_HEADERS"
index|]
argument_list|)
operator|<<
literal|"\";"
operator|<<
name|endl
operator|<<
literal|"static const char qt_configure_libraries_path_str    [512 + 12] = \"qt_libspath="
operator|<<
name|escapeSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_LIBS"
index|]
argument_list|)
operator|<<
literal|"\";"
operator|<<
name|endl
operator|<<
literal|"static const char qt_configure_binaries_path_str     [512 + 12] = \"qt_binspath="
operator|<<
name|escapeSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_BINS"
index|]
argument_list|)
operator|<<
literal|"\";"
operator|<<
name|endl
operator|<<
literal|"static const char qt_configure_plugins_path_str      [512 + 12] = \"qt_plugpath="
operator|<<
name|escapeSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_PLUGINS"
index|]
argument_list|)
operator|<<
literal|"\";"
operator|<<
name|endl
operator|<<
literal|"static const char qt_configure_imports_path_str      [512 + 12] = \"qt_impspath="
operator|<<
name|escapeSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_IMPORTS"
index|]
argument_list|)
operator|<<
literal|"\";"
operator|<<
name|endl
operator|<<
literal|"static const char qt_configure_data_path_str         [512 + 12] = \"qt_datapath="
operator|<<
name|escapeSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_DATA"
index|]
argument_list|)
operator|<<
literal|"\";"
operator|<<
name|endl
operator|<<
literal|"static const char qt_configure_translations_path_str [512 + 12] = \"qt_trnspath="
operator|<<
name|escapeSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_TRANSLATIONS"
index|]
argument_list|)
operator|<<
literal|"\";"
operator|<<
name|endl
operator|<<
literal|"static const char qt_configure_examples_path_str     [512 + 12] = \"qt_xmplpath="
operator|<<
name|escapeSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_EXAMPLES"
index|]
argument_list|)
operator|<<
literal|"\";"
operator|<<
name|endl
operator|<<
literal|"static const char qt_configure_tests_path_str        [512 + 12] = \"qt_tstspath="
operator|<<
name|escapeSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_TESTS"
index|]
argument_list|)
operator|<<
literal|"\";"
operator|<<
name|endl
comment|//<< "static const char qt_configure_settings_path_str [256] = \"qt_stngpath="<< escapeSeparators(dictionary["QT_INSTALL_SETTINGS"])<< "\";"<< endl
expr_stmt|;
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"QT_HOST_PREFIX"
index|]
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|tmpStream
operator|<<
literal|"#else"
operator|<<
name|endl
operator|<<
literal|"static const char qt_configure_prefix_path_str       [512 + 12] = \"qt_prfxpath="
operator|<<
name|escapeSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_HOST_PREFIX"
index|]
argument_list|)
operator|<<
literal|"\";"
operator|<<
name|endl
operator|<<
literal|"static const char qt_configure_documentation_path_str[512 + 12] = \"qt_docspath="
operator|<<
name|fixSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_HOST_PREFIX"
index|]
operator|+
literal|"/doc"
argument_list|,
literal|true
argument_list|)
operator|<<
literal|"\";"
operator|<<
name|endl
operator|<<
literal|"static const char qt_configure_headers_path_str      [512 + 12] = \"qt_hdrspath="
operator|<<
name|fixSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_HOST_PREFIX"
index|]
operator|+
literal|"/include"
argument_list|,
literal|true
argument_list|)
operator|<<
literal|"\";"
operator|<<
name|endl
operator|<<
literal|"static const char qt_configure_libraries_path_str    [512 + 12] = \"qt_libspath="
operator|<<
name|fixSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_HOST_PREFIX"
index|]
operator|+
literal|"/lib"
argument_list|,
literal|true
argument_list|)
operator|<<
literal|"\";"
operator|<<
name|endl
operator|<<
literal|"static const char qt_configure_binaries_path_str     [512 + 12] = \"qt_binspath="
operator|<<
name|fixSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_HOST_PREFIX"
index|]
operator|+
literal|"/bin"
argument_list|,
literal|true
argument_list|)
operator|<<
literal|"\";"
operator|<<
name|endl
operator|<<
literal|"static const char qt_configure_plugins_path_str      [512 + 12] = \"qt_plugpath="
operator|<<
name|fixSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_HOST_PREFIX"
index|]
operator|+
literal|"/plugins"
argument_list|,
literal|true
argument_list|)
operator|<<
literal|"\";"
operator|<<
name|endl
operator|<<
literal|"static const char qt_configure_imports_path_str      [512 + 12] = \"qt_impspath="
operator|<<
name|fixSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_HOST_PREFIX"
index|]
operator|+
literal|"/imports"
argument_list|,
literal|true
argument_list|)
operator|<<
literal|"\";"
operator|<<
name|endl
operator|<<
literal|"static const char qt_configure_data_path_str         [512 + 12] = \"qt_datapath="
operator|<<
name|fixSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_HOST_PREFIX"
index|]
argument_list|,
literal|true
argument_list|)
operator|<<
literal|"\";"
operator|<<
name|endl
operator|<<
literal|"static const char qt_configure_translations_path_str [512 + 12] = \"qt_trnspath="
operator|<<
name|fixSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_HOST_PREFIX"
index|]
operator|+
literal|"/translations"
argument_list|,
literal|true
argument_list|)
operator|<<
literal|"\";"
operator|<<
name|endl
operator|<<
literal|"static const char qt_configure_examples_path_str     [512 + 12] = \"qt_xmplpath="
operator|<<
name|fixSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_HOST_PREFIX"
index|]
operator|+
literal|"/example"
argument_list|,
literal|true
argument_list|)
operator|<<
literal|"\";"
operator|<<
name|endl
operator|<<
literal|"static const char qt_configure_tests_path_str        [512 + 12] = \"qt_tstspath="
operator|<<
name|fixSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_HOST_PREFIX"
index|]
operator|+
literal|"/tests"
argument_list|,
literal|true
argument_list|)
operator|<<
literal|"\";"
operator|<<
name|endl
operator|<<
literal|"#endif //QT_BOOTSTRAPPED"
operator|<<
name|endl
expr_stmt|;
block|}
name|tmpStream
operator|<<
literal|"/* strlen( \"qt_lcnsxxxx\") == 12 */"
operator|<<
name|endl
operator|<<
literal|"#define QT_CONFIGURE_LICENSEE qt_configure_licensee_str + 12;"
operator|<<
name|endl
operator|<<
literal|"#define QT_CONFIGURE_LICENSED_PRODUCTS qt_configure_licensed_products_str + 12;"
operator|<<
name|endl
operator|<<
literal|"#define QT_CONFIGURE_PREFIX_PATH qt_configure_prefix_path_str + 12;"
operator|<<
name|endl
operator|<<
literal|"#define QT_CONFIGURE_DOCUMENTATION_PATH qt_configure_documentation_path_str + 12;"
operator|<<
name|endl
operator|<<
literal|"#define QT_CONFIGURE_HEADERS_PATH qt_configure_headers_path_str + 12;"
operator|<<
name|endl
operator|<<
literal|"#define QT_CONFIGURE_LIBRARIES_PATH qt_configure_libraries_path_str + 12;"
operator|<<
name|endl
operator|<<
literal|"#define QT_CONFIGURE_BINARIES_PATH qt_configure_binaries_path_str + 12;"
operator|<<
name|endl
operator|<<
literal|"#define QT_CONFIGURE_PLUGINS_PATH qt_configure_plugins_path_str + 12;"
operator|<<
name|endl
operator|<<
literal|"#define QT_CONFIGURE_IMPORTS_PATH qt_configure_imports_path_str + 12;"
operator|<<
name|endl
operator|<<
literal|"#define QT_CONFIGURE_DATA_PATH qt_configure_data_path_str + 12;"
operator|<<
name|endl
operator|<<
literal|"#define QT_CONFIGURE_TRANSLATIONS_PATH qt_configure_translations_path_str + 12;"
operator|<<
name|endl
operator|<<
literal|"#define QT_CONFIGURE_EXAMPLES_PATH qt_configure_examples_path_str + 12;"
operator|<<
name|endl
operator|<<
literal|"#define QT_CONFIGURE_TESTS_PATH qt_configure_tests_path_str + 12;"
operator|<<
name|endl
comment|//<< "#define QT_CONFIGURE_SETTINGS_PATH qt_configure_settings_path_str + 12;"<< endl
operator|<<
name|endl
expr_stmt|;
name|tmpStream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|tmpFile2
operator|.
name|flush
argument_list|()
expr_stmt|;
comment|// Replace old qconfig.cpp with new one
operator|::
name|SetFileAttributes
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
name|outName
operator|.
name|utf16
argument_list|()
argument_list|,
name|FILE_ATTRIBUTE_NORMAL
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|outName
argument_list|)
expr_stmt|;
name|tmpFile2
operator|.
name|copy
argument_list|(
name|outName
argument_list|)
expr_stmt|;
name|tmpFile2
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|QTemporaryFile
name|tmpFile3
decl_stmt|;
if|if
condition|(
name|tmpFile3
operator|.
name|open
argument_list|()
condition|)
block|{
name|tmpStream
operator|.
name|setDevice
argument_list|(
operator|&
name|tmpFile3
argument_list|)
expr_stmt|;
name|tmpStream
operator|<<
literal|"/* Evaluation license key */"
operator|<<
name|endl
operator|<<
literal|"static const volatile char qt_eval_key_data              [512 + 12] = \"qt_qevalkey="
operator|<<
name|licenseInfo
index|[
literal|"LICENSEKEYEXT"
index|]
operator|<<
literal|"\";"
operator|<<
name|endl
expr_stmt|;
name|tmpStream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|tmpFile3
operator|.
name|flush
argument_list|()
expr_stmt|;
name|outName
operator|=
name|buildPath
operator|+
literal|"/src/corelib/global/qconfig_eval.cpp"
expr_stmt|;
operator|::
name|SetFileAttributes
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
name|outName
operator|.
name|utf16
argument_list|()
argument_list|,
name|FILE_ATTRIBUTE_NORMAL
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|outName
argument_list|)
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"EDITION"
index|]
operator|==
literal|"Evaluation"
operator|||
name|qmakeDefines
operator|.
name|contains
argument_list|(
literal|"QT_EVAL"
argument_list|)
condition|)
name|tmpFile3
operator|.
name|copy
argument_list|(
name|outName
argument_list|)
expr_stmt|;
name|tmpFile3
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|EVAL
argument_list|)
end_if
begin_function
DECL|function|displayConfig
name|void
name|Configure
operator|::
name|displayConfig
parameter_list|()
block|{
comment|// Give some feedback
name|cout
operator|<<
literal|"Environment:"
operator|<<
name|endl
expr_stmt|;
name|QString
name|env
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|getenv
argument_list|(
literal|"INCLUDE"
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
name|QRegExp
argument_list|(
literal|"[;,]"
argument_list|)
argument_list|,
literal|"\r\n      "
argument_list|)
decl_stmt|;
if|if
condition|(
name|env
operator|.
name|isEmpty
argument_list|()
condition|)
name|env
operator|=
literal|"Unset"
expr_stmt|;
name|cout
operator|<<
literal|"    INCLUDE=\r\n      "
operator|<<
name|env
operator|<<
name|endl
expr_stmt|;
name|env
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|getenv
argument_list|(
literal|"LIB"
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
name|QRegExp
argument_list|(
literal|"[;,]"
argument_list|)
argument_list|,
literal|"\r\n      "
argument_list|)
expr_stmt|;
if|if
condition|(
name|env
operator|.
name|isEmpty
argument_list|()
condition|)
name|env
operator|=
literal|"Unset"
expr_stmt|;
name|cout
operator|<<
literal|"    LIB=\r\n      "
operator|<<
name|env
operator|<<
name|endl
expr_stmt|;
name|env
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|getenv
argument_list|(
literal|"PATH"
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
name|QRegExp
argument_list|(
literal|"[;,]"
argument_list|)
argument_list|,
literal|"\r\n      "
argument_list|)
expr_stmt|;
if|if
condition|(
name|env
operator|.
name|isEmpty
argument_list|()
condition|)
name|env
operator|=
literal|"Unset"
expr_stmt|;
name|cout
operator|<<
literal|"    PATH=\r\n      "
operator|<<
name|env
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"EDITION"
index|]
operator|==
literal|"OpenSource"
condition|)
block|{
name|cout
operator|<<
literal|"You are licensed to use this software under the terms of the GNU GPL version 3."
expr_stmt|;
name|cout
operator|<<
literal|"You are licensed to use this software under the terms of the Lesser GNU LGPL version 2.1."
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"See "
operator|<<
name|dictionary
index|[
literal|"LICENSE FILE"
index|]
operator|<<
literal|"3"
operator|<<
name|endl
operator|<<
name|endl
operator|<<
literal|" or "
operator|<<
name|dictionary
index|[
literal|"LICENSE FILE"
index|]
operator|<<
literal|"L"
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
else|else
block|{
name|QString
name|l1
init|=
name|licenseInfo
index|[
literal|"LICENSEE"
index|]
decl_stmt|;
name|QString
name|l2
init|=
name|licenseInfo
index|[
literal|"LICENSEID"
index|]
decl_stmt|;
name|QString
name|l3
init|=
name|dictionary
index|[
literal|"EDITION"
index|]
operator|+
literal|' '
operator|+
literal|"Edition"
decl_stmt|;
name|QString
name|l4
init|=
name|licenseInfo
index|[
literal|"EXPIRYDATE"
index|]
decl_stmt|;
name|cout
operator|<<
literal|"Licensee...................."
operator|<<
operator|(
name|l1
operator|.
name|isNull
argument_list|()
condition|?
literal|""
else|:
name|l1
operator|)
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"License ID.................."
operator|<<
operator|(
name|l2
operator|.
name|isNull
argument_list|()
condition|?
literal|""
else|:
name|l2
operator|)
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"Product license............."
operator|<<
operator|(
name|l3
operator|.
name|isNull
argument_list|()
condition|?
literal|""
else|:
name|l3
operator|)
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"Expiry Date................."
operator|<<
operator|(
name|l4
operator|.
name|isNull
argument_list|()
condition|?
literal|""
else|:
name|l4
operator|)
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
name|cout
operator|<<
literal|"Configuration:"
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"    "
operator|<<
name|qmakeConfig
operator|.
name|join
argument_list|(
literal|"\r\n    "
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"Qt Configuration:"
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"    "
operator|<<
name|qtConfig
operator|.
name|join
argument_list|(
literal|"\r\n    "
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|dictionary
operator|.
name|contains
argument_list|(
literal|"XQMAKESPEC"
argument_list|)
condition|)
name|cout
operator|<<
literal|"QMAKESPEC..................."
operator|<<
name|dictionary
index|[
literal|"XQMAKESPEC"
index|]
operator|<<
literal|" ("
operator|<<
name|dictionary
index|[
literal|"QMAKESPEC_FROM"
index|]
operator|<<
literal|")"
operator|<<
name|endl
expr_stmt|;
else|else
name|cout
operator|<<
literal|"QMAKESPEC..................."
operator|<<
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|<<
literal|" ("
operator|<<
name|dictionary
index|[
literal|"QMAKESPEC_FROM"
index|]
operator|<<
literal|")"
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"Architecture................"
operator|<<
name|dictionary
index|[
literal|"ARCHITECTURE"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"Maketool...................."
operator|<<
name|dictionary
index|[
literal|"MAKE"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"Debug symbols..............."
operator|<<
operator|(
name|dictionary
index|[
literal|"BUILD"
index|]
operator|==
literal|"debug"
condition|?
literal|"yes"
else|:
literal|"no"
operator|)
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"Link Time Code Generation..."
operator|<<
name|dictionary
index|[
literal|"LTCG"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"Accessibility support......."
operator|<<
name|dictionary
index|[
literal|"ACCESSIBILITY"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"STL support................."
operator|<<
name|dictionary
index|[
literal|"STL"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"Exception support..........."
operator|<<
name|dictionary
index|[
literal|"EXCEPTIONS"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"RTTI support................"
operator|<<
name|dictionary
index|[
literal|"RTTI"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"MMX support................."
operator|<<
name|dictionary
index|[
literal|"MMX"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"3DNOW support..............."
operator|<<
name|dictionary
index|[
literal|"3DNOW"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"SSE support................."
operator|<<
name|dictionary
index|[
literal|"SSE"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"SSE2 support................"
operator|<<
name|dictionary
index|[
literal|"SSE2"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"IWMMXT support.............."
operator|<<
name|dictionary
index|[
literal|"IWMMXT"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"OpenGL support.............."
operator|<<
name|dictionary
index|[
literal|"OPENGL"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"OpenVG support.............."
operator|<<
name|dictionary
index|[
literal|"OPENVG"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"OpenSSL support............."
operator|<<
name|dictionary
index|[
literal|"OPENSSL"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"QtDBus support.............."
operator|<<
name|dictionary
index|[
literal|"DBUS"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"QtXmlPatterns support......."
operator|<<
name|dictionary
index|[
literal|"XMLPATTERNS"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"Phonon support.............."
operator|<<
name|dictionary
index|[
literal|"PHONON"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"QtMultimedia support........"
operator|<<
name|dictionary
index|[
literal|"MULTIMEDIA"
index|]
operator|<<
name|endl
expr_stmt|;
block|{
name|QString
name|webkit
init|=
name|dictionary
index|[
literal|"WEBKIT"
index|]
decl_stmt|;
if|if
condition|(
name|webkit
operator|==
literal|"debug"
condition|)
name|webkit
operator|=
literal|"yes (debug)"
expr_stmt|;
name|cout
operator|<<
literal|"WebKit support.............."
operator|<<
name|webkit
operator|<<
name|endl
expr_stmt|;
block|}
block|{
name|QString
name|declarative
init|=
name|dictionary
index|[
literal|"DECLARATIVE"
index|]
decl_stmt|;
name|cout
operator|<<
literal|"Declarative support........."
operator|<<
name|declarative
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|declarative
operator|==
literal|"yes"
condition|)
name|cout
operator|<<
literal|"Declarative debugging......."
operator|<<
name|dictionary
index|[
literal|"DECLARATIVE_DEBUG"
index|]
operator|<<
name|endl
expr_stmt|;
block|}
name|cout
operator|<<
literal|"V8 support.................."
operator|<<
name|dictionary
index|[
literal|"V8"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"QtScript support............"
operator|<<
name|dictionary
index|[
literal|"SCRIPT"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"QtScriptTools support......."
operator|<<
name|dictionary
index|[
literal|"SCRIPTTOOLS"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"Graphics System............."
operator|<<
name|dictionary
index|[
literal|"GRAPHICS_SYSTEM"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"Qt3 compatibility..........."
operator|<<
name|dictionary
index|[
literal|"QT3SUPPORT"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"DirectWrite support........."
operator|<<
name|dictionary
index|[
literal|"DIRECTWRITE"
index|]
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"Third Party Libraries:"
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"    ZLIB support............"
operator|<<
name|dictionary
index|[
literal|"ZLIB"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"    GIF support............."
operator|<<
name|dictionary
index|[
literal|"GIF"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"    TIFF support............"
operator|<<
name|dictionary
index|[
literal|"TIFF"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"    JPEG support............"
operator|<<
name|dictionary
index|[
literal|"JPEG"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"    PNG support............."
operator|<<
name|dictionary
index|[
literal|"PNG"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"    MNG support............."
operator|<<
name|dictionary
index|[
literal|"MNG"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"    FreeType support........"
operator|<<
name|dictionary
index|[
literal|"FREETYPE"
index|]
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"Styles:"
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"    Windows................."
operator|<<
name|dictionary
index|[
literal|"STYLE_WINDOWS"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"    Windows XP.............."
operator|<<
name|dictionary
index|[
literal|"STYLE_WINDOWSXP"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"    Windows Vista..........."
operator|<<
name|dictionary
index|[
literal|"STYLE_WINDOWSVISTA"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"    Plastique..............."
operator|<<
name|dictionary
index|[
literal|"STYLE_PLASTIQUE"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"    Cleanlooks.............."
operator|<<
name|dictionary
index|[
literal|"STYLE_CLEANLOOKS"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"    Motif..................."
operator|<<
name|dictionary
index|[
literal|"STYLE_MOTIF"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"    CDE....................."
operator|<<
name|dictionary
index|[
literal|"STYLE_CDE"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"    Windows CE.............."
operator|<<
name|dictionary
index|[
literal|"STYLE_WINDOWSCE"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"    Windows Mobile.........."
operator|<<
name|dictionary
index|[
literal|"STYLE_WINDOWSMOBILE"
index|]
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"Sql Drivers:"
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"    ODBC...................."
operator|<<
name|dictionary
index|[
literal|"SQL_ODBC"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"    MySQL..................."
operator|<<
name|dictionary
index|[
literal|"SQL_MYSQL"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"    OCI....................."
operator|<<
name|dictionary
index|[
literal|"SQL_OCI"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"    PostgreSQL.............."
operator|<<
name|dictionary
index|[
literal|"SQL_PSQL"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"    TDS....................."
operator|<<
name|dictionary
index|[
literal|"SQL_TDS"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"    DB2....................."
operator|<<
name|dictionary
index|[
literal|"SQL_DB2"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"    SQLite.................."
operator|<<
name|dictionary
index|[
literal|"SQL_SQLITE"
index|]
operator|<<
literal|" ("
operator|<<
name|dictionary
index|[
literal|"SQL_SQLITE_LIB"
index|]
operator|<<
literal|")"
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"    SQLite2................."
operator|<<
name|dictionary
index|[
literal|"SQL_SQLITE2"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"    InterBase..............."
operator|<<
name|dictionary
index|[
literal|"SQL_IBASE"
index|]
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"Sources are in.............."
operator|<<
name|dictionary
index|[
literal|"QT_SOURCE_TREE"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"Build is done in............"
operator|<<
name|dictionary
index|[
literal|"QT_BUILD_TREE"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"Install prefix.............."
operator|<<
name|dictionary
index|[
literal|"QT_INSTALL_PREFIX"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"Headers installed to........"
operator|<<
name|dictionary
index|[
literal|"QT_INSTALL_HEADERS"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"Libraries installed to......"
operator|<<
name|dictionary
index|[
literal|"QT_INSTALL_LIBS"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"Plugins installed to........"
operator|<<
name|dictionary
index|[
literal|"QT_INSTALL_PLUGINS"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"Imports installed to........"
operator|<<
name|dictionary
index|[
literal|"QT_INSTALL_IMPORTS"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"Binaries installed to......."
operator|<<
name|dictionary
index|[
literal|"QT_INSTALL_BINS"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"Docs installed to..........."
operator|<<
name|dictionary
index|[
literal|"QT_INSTALL_DOCS"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"Data installed to..........."
operator|<<
name|dictionary
index|[
literal|"QT_INSTALL_DATA"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"Translations installed to..."
operator|<<
name|dictionary
index|[
literal|"QT_INSTALL_TRANSLATIONS"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"Examples installed to......."
operator|<<
name|dictionary
index|[
literal|"QT_INSTALL_EXAMPLES"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"Tests installed to.........."
operator|<<
name|dictionary
index|[
literal|"QT_INSTALL_TESTS"
index|]
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|dictionary
operator|.
name|contains
argument_list|(
literal|"XQMAKESPEC"
argument_list|)
operator|&&
name|dictionary
index|[
literal|"XQMAKESPEC"
index|]
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"wince"
argument_list|)
argument_list|)
condition|)
block|{
name|cout
operator|<<
literal|"Using c runtime detection..."
operator|<<
name|dictionary
index|[
literal|"CE_CRT"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"Cetest support.............."
operator|<<
name|dictionary
index|[
literal|"CETEST"
index|]
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"Signature..................."
operator|<<
name|dictionary
index|[
literal|"CE_SIGNATURE"
index|]
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
if|if
condition|(
name|dictionary
index|[
literal|"ASSISTANT_WEBKIT"
index|]
operator|==
literal|"yes"
condition|)
name|cout
operator|<<
literal|"Using WebKit as html rendering engine in Qt Assistant."
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|checkAvailability
argument_list|(
literal|"INCREDIBUILD_XGE"
argument_list|)
condition|)
name|cout
operator|<<
literal|"Using IncrediBuild XGE......"
operator|<<
name|dictionary
index|[
literal|"INCREDIBUILD_XGE"
index|]
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|qmakeDefines
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|cout
operator|<<
literal|"Defines....................."
expr_stmt|;
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|defs
init|=
name|qmakeDefines
operator|.
name|begin
argument_list|()
init|;
name|defs
operator|!=
name|qmakeDefines
operator|.
name|end
argument_list|()
condition|;
operator|++
name|defs
control|)
name|cout
operator|<<
operator|(
operator|*
name|defs
operator|)
operator|<<
literal|" "
expr_stmt|;
name|cout
operator|<<
name|endl
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|qmakeIncludes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|cout
operator|<<
literal|"Include paths..............."
expr_stmt|;
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|incs
init|=
name|qmakeIncludes
operator|.
name|begin
argument_list|()
init|;
name|incs
operator|!=
name|qmakeIncludes
operator|.
name|end
argument_list|()
condition|;
operator|++
name|incs
control|)
name|cout
operator|<<
operator|(
operator|*
name|incs
operator|)
operator|<<
literal|" "
expr_stmt|;
name|cout
operator|<<
name|endl
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|qmakeLibs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|cout
operator|<<
literal|"Additional libraries........"
expr_stmt|;
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|libs
init|=
name|qmakeLibs
operator|.
name|begin
argument_list|()
init|;
name|libs
operator|!=
name|qmakeLibs
operator|.
name|end
argument_list|()
condition|;
operator|++
name|libs
control|)
name|cout
operator|<<
operator|(
operator|*
name|libs
operator|)
operator|<<
literal|" "
expr_stmt|;
name|cout
operator|<<
name|endl
expr_stmt|;
block|}
if|if
condition|(
name|dictionary
index|[
literal|"QMAKE_INTERNAL"
index|]
operator|==
literal|"yes"
condition|)
block|{
name|cout
operator|<<
literal|"Using internal configuration."
operator|<<
name|endl
expr_stmt|;
block|}
if|if
condition|(
name|dictionary
index|[
literal|"SHARED"
index|]
operator|==
literal|"no"
condition|)
block|{
name|cout
operator|<<
literal|"WARNING: Using static linking will disable the use of plugins."
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"         Make sure you compile ALL needed modules into the library."
operator|<<
name|endl
expr_stmt|;
block|}
if|if
condition|(
name|dictionary
index|[
literal|"OPENSSL"
index|]
operator|==
literal|"linked"
operator|&&
name|opensslLibs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|cout
operator|<<
literal|"NOTE: When linking against OpenSSL, you can override the default"
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"library names through OPENSSL_LIBS."
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"For example:"
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"    configure -openssl-linked OPENSSL_LIBS=\"-lssleay32 -llibeay32\""
operator|<<
name|endl
expr_stmt|;
block|}
if|if
condition|(
name|dictionary
index|[
literal|"ZLIB_FORCED"
index|]
operator|==
literal|"yes"
condition|)
block|{
name|QString
name|which_zlib
init|=
literal|"supplied"
decl_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"ZLIB"
index|]
operator|==
literal|"system"
condition|)
name|which_zlib
operator|=
literal|"system"
expr_stmt|;
name|cout
operator|<<
literal|"NOTE: The -no-zlib option was supplied but is no longer supported."
operator|<<
name|endl
operator|<<
name|endl
operator|<<
literal|"Qt now requires zlib support in all builds, so the -no-zlib"
operator|<<
name|endl
operator|<<
literal|"option was ignored. Qt will be built using the "
operator|<<
name|which_zlib
operator|<<
literal|"zlib"
operator|<<
name|endl
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|EVAL
argument_list|)
end_if
begin_function
DECL|function|generateHeaders
name|void
name|Configure
operator|::
name|generateHeaders
parameter_list|()
block|{
if|if
condition|(
name|dictionary
index|[
literal|"SYNCQT"
index|]
operator|==
literal|"yes"
condition|)
block|{
if|if
condition|(
name|findFile
argument_list|(
literal|"perl.exe"
argument_list|)
condition|)
block|{
name|cout
operator|<<
literal|"Running syncqt..."
operator|<<
name|endl
expr_stmt|;
name|QStringList
name|args
decl_stmt|;
name|args
operator|+=
name|buildPath
operator|+
literal|"/bin/syncqt.bat"
expr_stmt|;
name|QStringList
name|env
decl_stmt|;
name|env
operator|+=
name|QString
argument_list|(
literal|"QTDIR="
operator|+
name|sourcePath
argument_list|)
expr_stmt|;
name|env
operator|+=
name|QString
argument_list|(
literal|"PATH="
operator|+
name|buildPath
operator|+
literal|"/bin/;"
operator|+
name|qgetenv
argument_list|(
literal|"PATH"
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|retc
init|=
name|Environment
operator|::
name|execute
argument_list|(
name|args
argument_list|,
name|env
argument_list|,
name|QStringList
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|retc
condition|)
block|{
name|cout
operator|<<
literal|"syncqt failed, return code "
operator|<<
name|retc
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
block|}
block|}
else|else
block|{
name|cout
operator|<<
literal|"Perl not found in environment - cannot run syncqt."
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|buildQmake
name|void
name|Configure
operator|::
name|buildQmake
parameter_list|()
block|{
if|if
condition|(
name|dictionary
index|[
literal|"BUILD_QMAKE"
index|]
operator|==
literal|"yes"
condition|)
block|{
name|QStringList
name|args
decl_stmt|;
comment|// Build qmake
name|QString
name|pwd
init|=
name|QDir
operator|::
name|currentPath
argument_list|()
decl_stmt|;
name|QDir
operator|::
name|setCurrent
argument_list|(
name|buildPath
operator|+
literal|"/qmake"
argument_list|)
expr_stmt|;
name|QString
name|makefile
init|=
literal|"Makefile"
decl_stmt|;
block|{
name|QFile
name|out
argument_list|(
name|makefile
argument_list|)
decl_stmt|;
if|if
condition|(
name|out
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
operator||
name|QFile
operator|::
name|Text
argument_list|)
condition|)
block|{
name|QTextStream
name|stream
argument_list|(
operator|&
name|out
argument_list|)
decl_stmt|;
name|stream
operator|<<
literal|"#AutoGenerated by configure.exe"
operator|<<
name|endl
operator|<<
literal|"BUILD_PATH = "
operator|<<
name|QDir
operator|::
name|convertSeparators
argument_list|(
name|buildPath
argument_list|)
operator|<<
name|endl
operator|<<
literal|"SOURCE_PATH = "
operator|<<
name|QDir
operator|::
name|convertSeparators
argument_list|(
name|sourcePath
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
literal|"QMAKESPEC = "
operator|<<
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|<<
name|endl
operator|<<
literal|"QT_VERSION = "
operator|<<
name|dictionary
index|[
literal|"VERSION"
index|]
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"EDITION"
index|]
operator|==
literal|"OpenSource"
operator|||
name|dictionary
index|[
literal|"QT_EDITION"
index|]
operator|.
name|contains
argument_list|(
literal|"OPENSOURCE"
argument_list|)
condition|)
name|stream
operator|<<
literal|"QMAKE_OPENSOURCE_EDITION = yes"
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
literal|"\n\n"
expr_stmt|;
name|QFile
name|in
argument_list|(
name|sourcePath
operator|+
literal|"/qmake/"
operator|+
name|dictionary
index|[
literal|"QMAKEMAKEFILE"
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|in
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
operator||
name|QFile
operator|::
name|Text
argument_list|)
condition|)
block|{
name|QString
name|d
init|=
name|in
operator|.
name|readAll
argument_list|()
decl_stmt|;
comment|//### need replaces (like configure.sh)? --Sam
name|stream
operator|<<
name|d
operator|<<
name|endl
expr_stmt|;
block|}
name|stream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|args
operator|+=
name|dictionary
index|[
literal|"MAKE"
index|]
expr_stmt|;
name|args
operator|+=
literal|"-f"
expr_stmt|;
name|args
operator|+=
name|makefile
expr_stmt|;
name|cout
operator|<<
literal|"Creating qmake..."
operator|<<
name|endl
expr_stmt|;
name|int
name|exitCode
init|=
name|Environment
operator|::
name|execute
argument_list|(
name|args
argument_list|,
name|QStringList
argument_list|()
argument_list|,
name|QStringList
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|exitCode
condition|)
block|{
name|args
operator|.
name|clear
argument_list|()
expr_stmt|;
name|args
operator|+=
name|dictionary
index|[
literal|"MAKE"
index|]
expr_stmt|;
name|args
operator|+=
literal|"-f"
expr_stmt|;
name|args
operator|+=
name|makefile
expr_stmt|;
name|args
operator|+=
literal|"clean"
expr_stmt|;
name|exitCode
operator|=
name|Environment
operator|::
name|execute
argument_list|(
name|args
argument_list|,
name|QStringList
argument_list|()
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|exitCode
condition|)
block|{
name|cout
operator|<<
literal|"Cleaning qmake failed, return code "
operator|<<
name|exitCode
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
block|}
else|else
block|{
name|args
operator|.
name|clear
argument_list|()
expr_stmt|;
name|args
operator|+=
name|dictionary
index|[
literal|"MAKE"
index|]
expr_stmt|;
name|args
operator|+=
literal|"-f"
expr_stmt|;
name|args
operator|+=
name|makefile
expr_stmt|;
name|exitCode
operator|=
name|Environment
operator|::
name|execute
argument_list|(
name|args
argument_list|,
name|QStringList
argument_list|()
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|exitCode
condition|)
block|{
name|cout
operator|<<
literal|"Building qmake failed, return code "
operator|<<
name|exitCode
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
block|}
block|}
block|}
name|QDir
operator|::
name|setCurrent
argument_list|(
name|pwd
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|buildHostTools
name|void
name|Configure
operator|::
name|buildHostTools
parameter_list|()
block|{
if|if
condition|(
name|dictionary
index|[
literal|"NOPROCESS"
index|]
operator|==
literal|"yes"
condition|)
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"yes"
expr_stmt|;
if|if
condition|(
operator|!
name|dictionary
operator|.
name|contains
argument_list|(
literal|"XQMAKESPEC"
argument_list|)
condition|)
return|return;
name|QString
name|pwd
init|=
name|QDir
operator|::
name|currentPath
argument_list|()
decl_stmt|;
name|QStringList
name|hostToolsDirs
decl_stmt|;
name|hostToolsDirs
operator|<<
literal|"src/tools"
operator|<<
literal|"tools/linguist/lrelease"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"XQMAKESPEC"
index|]
operator|.
name|startsWith
argument_list|(
literal|"wince"
argument_list|)
condition|)
name|hostToolsDirs
operator|<<
literal|"tools/checksdk"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"CETEST"
index|]
operator|==
literal|"yes"
condition|)
name|hostToolsDirs
operator|<<
literal|"tools/qtestlib/wince/cetest"
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hostToolsDirs
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|cout
operator|<<
literal|"Creating "
operator|<<
name|hostToolsDirs
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|<<
literal|" ..."
operator|<<
name|endl
expr_stmt|;
name|QString
name|toolBuildPath
init|=
name|buildPath
operator|+
literal|"/"
operator|+
name|hostToolsDirs
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QString
name|toolSourcePath
init|=
name|sourcePath
operator|+
literal|"/"
operator|+
name|hostToolsDirs
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// generate Makefile
name|QStringList
name|args
decl_stmt|;
name|args
operator|<<
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|buildPath
operator|+
literal|"/bin/qmake"
argument_list|)
expr_stmt|;
comment|// override .qmake.cache because we are not cross-building these.
comment|// we need a full path so that a build with -prefix will still find it.
name|args
operator|<<
literal|"-spec"
operator|<<
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|buildPath
operator|+
literal|"/mkspecs/"
operator|+
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
argument_list|)
expr_stmt|;
name|args
operator|<<
literal|"-r"
expr_stmt|;
name|args
operator|<<
literal|"-o"
operator|<<
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|toolBuildPath
operator|+
literal|"/Makefile"
argument_list|)
expr_stmt|;
name|QDir
argument_list|()
operator|.
name|mkpath
argument_list|(
name|toolBuildPath
argument_list|)
expr_stmt|;
name|QDir
operator|::
name|setCurrent
argument_list|(
name|toolSourcePath
argument_list|)
expr_stmt|;
name|int
name|exitCode
init|=
name|Environment
operator|::
name|execute
argument_list|(
name|args
argument_list|,
name|QStringList
argument_list|()
argument_list|,
name|QStringList
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|exitCode
condition|)
block|{
name|cout
operator|<<
literal|"qmake failed, return code "
operator|<<
name|exitCode
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
break|break;
block|}
comment|// build app
name|args
operator|.
name|clear
argument_list|()
expr_stmt|;
name|args
operator|+=
name|dictionary
index|[
literal|"MAKE"
index|]
expr_stmt|;
name|QDir
operator|::
name|setCurrent
argument_list|(
name|toolBuildPath
argument_list|)
expr_stmt|;
name|exitCode
operator|=
name|Environment
operator|::
name|execute
argument_list|(
name|args
argument_list|,
name|QStringList
argument_list|()
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|exitCode
condition|)
block|{
name|args
operator|.
name|clear
argument_list|()
expr_stmt|;
name|args
operator|+=
name|dictionary
index|[
literal|"MAKE"
index|]
expr_stmt|;
name|args
operator|+=
literal|"clean"
expr_stmt|;
name|exitCode
operator|=
name|Environment
operator|::
name|execute
argument_list|(
name|args
argument_list|,
name|QStringList
argument_list|()
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|exitCode
condition|)
block|{
name|cout
operator|<<
literal|"Cleaning "
operator|<<
name|hostToolsDirs
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|<<
literal|" failed, return code "
operator|<<
name|exitCode
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
break|break;
block|}
else|else
block|{
name|args
operator|.
name|clear
argument_list|()
expr_stmt|;
name|args
operator|+=
name|dictionary
index|[
literal|"MAKE"
index|]
expr_stmt|;
name|exitCode
operator|=
name|Environment
operator|::
name|execute
argument_list|(
name|args
argument_list|,
name|QStringList
argument_list|()
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|exitCode
condition|)
block|{
name|cout
operator|<<
literal|"Building "
operator|<<
name|hostToolsDirs
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|<<
literal|" failed, return code "
operator|<<
name|exitCode
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
name|QDir
operator|::
name|setCurrent
argument_list|(
name|pwd
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|findProjects
name|void
name|Configure
operator|::
name|findProjects
parameter_list|(
specifier|const
name|QString
modifier|&
name|dirName
parameter_list|)
block|{
if|if
condition|(
name|dictionary
index|[
literal|"NOPROCESS"
index|]
operator|==
literal|"no"
condition|)
block|{
name|QDir
name|dir
argument_list|(
name|dirName
argument_list|)
decl_stmt|;
name|QString
name|entryName
decl_stmt|;
name|int
name|makeListNumber
decl_stmt|;
name|ProjectType
name|qmakeTemplate
decl_stmt|;
specifier|const
name|QFileInfoList
modifier|&
name|list
init|=
name|dir
operator|.
name|entryInfoList
argument_list|(
name|QStringList
argument_list|(
name|QLatin1String
argument_list|(
literal|"*.pro"
argument_list|)
argument_list|)
argument_list|,
name|QDir
operator|::
name|AllDirs
operator||
name|QDir
operator|::
name|Files
operator||
name|QDir
operator|::
name|NoDotAndDotDot
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QFileInfo
modifier|&
name|fi
init|=
name|list
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|fi
operator|.
name|fileName
argument_list|()
operator|!=
literal|"qmake.pro"
condition|)
block|{
name|entryName
operator|=
name|dirName
operator|+
literal|"/"
operator|+
name|fi
operator|.
name|fileName
argument_list|()
expr_stmt|;
if|if
condition|(
name|fi
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|findProjects
argument_list|(
name|entryName
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qmakeTemplate
operator|=
name|projectType
argument_list|(
name|fi
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|qmakeTemplate
condition|)
block|{
case|case
name|Lib
case|:
case|case
name|Subdirs
case|:
name|makeListNumber
operator|=
literal|1
expr_stmt|;
break|break;
default|default:
name|makeListNumber
operator|=
literal|2
expr_stmt|;
break|break;
block|}
name|makeList
index|[
name|makeListNumber
index|]
operator|.
name|append
argument_list|(
operator|new
name|MakeItem
argument_list|(
name|sourceDir
operator|.
name|relativeFilePath
argument_list|(
name|fi
operator|.
name|absolutePath
argument_list|()
argument_list|)
argument_list|,
name|fi
operator|.
name|fileName
argument_list|()
argument_list|,
literal|"Makefile"
argument_list|,
name|qmakeTemplate
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|appendMakeItem
name|void
name|Configure
operator|::
name|appendMakeItem
parameter_list|(
name|int
name|inList
parameter_list|,
specifier|const
name|QString
modifier|&
name|item
parameter_list|)
block|{
name|QString
name|dir
decl_stmt|;
if|if
condition|(
name|item
operator|!=
literal|"src"
condition|)
name|dir
operator|=
literal|"/"
operator|+
name|item
expr_stmt|;
name|dir
operator|.
name|prepend
argument_list|(
literal|"/src"
argument_list|)
expr_stmt|;
name|makeList
index|[
name|inList
index|]
operator|.
name|append
argument_list|(
operator|new
name|MakeItem
argument_list|(
name|sourcePath
operator|+
name|dir
argument_list|,
name|item
operator|+
literal|".pro"
argument_list|,
name|buildPath
operator|+
name|dir
operator|+
literal|"/Makefile"
argument_list|,
name|Lib
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"DSPFILES"
index|]
operator|==
literal|"yes"
condition|)
block|{
name|makeList
index|[
name|inList
index|]
operator|.
name|append
argument_list|(
operator|new
name|MakeItem
argument_list|(
name|sourcePath
operator|+
name|dir
argument_list|,
name|item
operator|+
literal|".pro"
argument_list|,
name|buildPath
operator|+
name|dir
operator|+
literal|"/"
operator|+
name|item
operator|+
literal|".dsp"
argument_list|,
name|Lib
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dictionary
index|[
literal|"VCPFILES"
index|]
operator|==
literal|"yes"
condition|)
block|{
name|makeList
index|[
name|inList
index|]
operator|.
name|append
argument_list|(
operator|new
name|MakeItem
argument_list|(
name|sourcePath
operator|+
name|dir
argument_list|,
name|item
operator|+
literal|".pro"
argument_list|,
name|buildPath
operator|+
name|dir
operator|+
literal|"/"
operator|+
name|item
operator|+
literal|".vcp"
argument_list|,
name|Lib
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dictionary
index|[
literal|"VCPROJFILES"
index|]
operator|==
literal|"yes"
condition|)
block|{
name|makeList
index|[
name|inList
index|]
operator|.
name|append
argument_list|(
operator|new
name|MakeItem
argument_list|(
name|sourcePath
operator|+
name|dir
argument_list|,
name|item
operator|+
literal|".pro"
argument_list|,
name|buildPath
operator|+
name|dir
operator|+
literal|"/"
operator|+
name|item
operator|+
literal|".vcproj"
argument_list|,
name|Lib
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|generateMakefiles
name|void
name|Configure
operator|::
name|generateMakefiles
parameter_list|()
block|{
if|if
condition|(
name|dictionary
index|[
literal|"NOPROCESS"
index|]
operator|==
literal|"no"
condition|)
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|EVAL
argument_list|)
name|cout
operator|<<
literal|"Creating makefiles in src..."
operator|<<
name|endl
expr_stmt|;
endif|#
directive|endif
name|QString
name|spec
init|=
name|dictionary
operator|.
name|contains
argument_list|(
literal|"XQMAKESPEC"
argument_list|)
condition|?
name|dictionary
index|[
literal|"XQMAKESPEC"
index|]
else|:
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
decl_stmt|;
if|if
condition|(
name|spec
operator|!=
literal|"win32-msvc"
condition|)
name|dictionary
index|[
literal|"DSPFILES"
index|]
operator|=
literal|"no"
expr_stmt|;
if|if
condition|(
name|spec
operator|!=
literal|"win32-msvc.net"
operator|&&
operator|!
name|spec
operator|.
name|startsWith
argument_list|(
literal|"win32-msvc2"
argument_list|)
operator|&&
operator|!
name|spec
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"wince"
argument_list|)
argument_list|)
condition|)
name|dictionary
index|[
literal|"VCPROJFILES"
index|]
operator|=
literal|"no"
expr_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
name|QString
name|pwd
init|=
name|QDir
operator|::
name|currentPath
argument_list|()
decl_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"FAST"
index|]
operator|!=
literal|"yes"
condition|)
block|{
name|QString
name|dirName
decl_stmt|;
name|bool
name|generate
init|=
literal|true
decl_stmt|;
name|bool
name|doDsp
init|=
operator|(
name|dictionary
index|[
literal|"DSPFILES"
index|]
operator|==
literal|"yes"
operator|||
name|dictionary
index|[
literal|"VCPFILES"
index|]
operator|==
literal|"yes"
operator|||
name|dictionary
index|[
literal|"VCPROJFILES"
index|]
operator|==
literal|"yes"
operator|)
decl_stmt|;
while|while
condition|(
name|generate
condition|)
block|{
name|QString
name|pwd
init|=
name|QDir
operator|::
name|currentPath
argument_list|()
decl_stmt|;
name|QString
name|dirPath
init|=
name|fixSeparators
argument_list|(
name|buildPath
operator|+
name|dirName
argument_list|)
decl_stmt|;
name|QStringList
name|args
decl_stmt|;
name|args
operator|<<
name|fixSeparators
argument_list|(
name|buildPath
operator|+
literal|"/bin/qmake"
argument_list|)
expr_stmt|;
if|if
condition|(
name|doDsp
condition|)
block|{
if|if
condition|(
name|dictionary
index|[
literal|"DEPENDENCIES"
index|]
operator|==
literal|"no"
condition|)
name|args
operator|<<
literal|"-nodepend"
expr_stmt|;
name|args
operator|<<
literal|"-tp"
operator|<<
literal|"vc"
expr_stmt|;
name|doDsp
operator|=
literal|false
expr_stmt|;
comment|// DSP files will be done
name|printf
argument_list|(
literal|"Generating Visual Studio project files...\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|printf
argument_list|(
literal|"Generating Makefiles...\n"
argument_list|)
expr_stmt|;
name|generate
operator|=
literal|false
expr_stmt|;
comment|// Now Makefiles will be done
block|}
comment|// don't pass -spec - .qmake.cache has it already
name|args
operator|<<
literal|"-r"
expr_stmt|;
name|args
operator|<<
operator|(
name|sourcePath
operator|+
literal|"/qtbase.pro"
operator|)
expr_stmt|;
name|args
operator|<<
literal|"-o"
expr_stmt|;
name|args
operator|<<
name|buildPath
expr_stmt|;
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"QMAKEADDITIONALARGS"
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|args
operator|<<
name|dictionary
index|[
literal|"QMAKEADDITIONALARGS"
index|]
expr_stmt|;
name|QDir
operator|::
name|setCurrent
argument_list|(
name|fixSeparators
argument_list|(
name|dirPath
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|int
name|exitCode
init|=
name|Environment
operator|::
name|execute
argument_list|(
name|args
argument_list|,
name|QStringList
argument_list|()
argument_list|,
name|QStringList
argument_list|()
argument_list|)
condition|)
block|{
name|cout
operator|<<
literal|"Qmake failed, return code "
operator|<<
name|exitCode
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|findProjects
argument_list|(
name|sourcePath
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|makeList
index|[
name|i
index|]
operator|.
name|size
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
name|MakeItem
modifier|*
name|it
init|=
name|makeList
index|[
name|i
index|]
index|[
name|j
index|]
decl_stmt|;
name|QString
name|dirPath
init|=
name|fixSeparators
argument_list|(
name|it
operator|->
name|directory
operator|+
literal|"/"
argument_list|)
decl_stmt|;
name|QString
name|projectName
init|=
name|it
operator|->
name|proFile
decl_stmt|;
name|QString
name|makefileName
init|=
name|buildPath
operator|+
literal|"/"
operator|+
name|dirPath
operator|+
name|it
operator|->
name|target
decl_stmt|;
comment|// For shadowbuilds, we need to create the path first
name|QDir
name|buildPathDir
argument_list|(
name|buildPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|sourcePath
operator|!=
name|buildPath
operator|&&
operator|!
name|buildPathDir
operator|.
name|exists
argument_list|(
name|dirPath
argument_list|)
condition|)
name|buildPathDir
operator|.
name|mkpath
argument_list|(
name|dirPath
argument_list|)
expr_stmt|;
name|QStringList
name|args
decl_stmt|;
name|args
operator|<<
name|fixSeparators
argument_list|(
name|buildPath
operator|+
literal|"/bin/qmake"
argument_list|)
expr_stmt|;
name|args
operator|<<
name|sourcePath
operator|+
literal|"/"
operator|+
name|dirPath
operator|+
name|projectName
expr_stmt|;
name|args
operator|<<
name|dictionary
index|[
literal|"QMAKE_ALL_ARGS"
index|]
expr_stmt|;
name|cout
operator|<<
literal|"For "
operator|<<
name|qPrintable
argument_list|(
name|dirPath
operator|+
name|projectName
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|args
operator|<<
literal|"-o"
expr_stmt|;
name|args
operator|<<
name|it
operator|->
name|target
expr_stmt|;
name|args
operator|<<
literal|"-spec"
expr_stmt|;
name|args
operator|<<
name|spec
expr_stmt|;
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"QMAKEADDITIONALARGS"
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|args
operator|<<
name|dictionary
index|[
literal|"QMAKEADDITIONALARGS"
index|]
expr_stmt|;
name|QDir
operator|::
name|setCurrent
argument_list|(
name|fixSeparators
argument_list|(
name|dirPath
argument_list|)
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
name|makefileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
argument_list|)
condition|)
block|{
name|printf
argument_list|(
literal|"failed on dirPath=%s, makefile=%s\n"
argument_list|,
name|qPrintable
argument_list|(
name|dirPath
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|makefileName
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|QTextStream
name|txt
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|txt
operator|<<
literal|"all:\n"
expr_stmt|;
name|txt
operator|<<
literal|"\t"
operator|<<
name|args
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
operator|<<
literal|"\n"
expr_stmt|;
name|txt
operator|<<
literal|"\t\"$(MAKE)\" -$(MAKEFLAGS) -f "
operator|<<
name|it
operator|->
name|target
operator|<<
literal|"\n"
expr_stmt|;
name|txt
operator|<<
literal|"first: all\n"
expr_stmt|;
name|txt
operator|<<
literal|"qmake:\n"
expr_stmt|;
name|txt
operator|<<
literal|"\t"
operator|<<
name|args
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
operator|<<
literal|"\n"
expr_stmt|;
block|}
block|}
block|}
name|QDir
operator|::
name|setCurrent
argument_list|(
name|pwd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cout
operator|<<
literal|"Processing of project files have been disabled."
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"Only use this option if you really know what you're doing."
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
return|return;
block|}
block|}
end_function
begin_function
DECL|function|showSummary
name|void
name|Configure
operator|::
name|showSummary
parameter_list|()
block|{
name|QString
name|make
init|=
name|dictionary
index|[
literal|"MAKE"
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|dictionary
operator|.
name|contains
argument_list|(
literal|"XQMAKESPEC"
argument_list|)
condition|)
block|{
name|cout
operator|<<
name|endl
operator|<<
name|endl
operator|<<
literal|"Qt is now configured for building. Just run "
operator|<<
name|qPrintable
argument_list|(
name|make
argument_list|)
operator|<<
literal|"."
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"To reconfigure, run "
operator|<<
name|qPrintable
argument_list|(
name|make
argument_list|)
operator|<<
literal|" confclean and configure."
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dictionary
operator|.
name|value
argument_list|(
literal|"QMAKESPEC"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"wince"
argument_list|)
condition|)
block|{
comment|// we are cross compiling for Windows CE
name|cout
operator|<<
name|endl
operator|<<
name|endl
operator|<<
literal|"Qt is now configured for building. To start the build run:"
operator|<<
name|endl
operator|<<
literal|"\tsetcepaths "
operator|<<
name|dictionary
operator|.
name|value
argument_list|(
literal|"XQMAKESPEC"
argument_list|)
operator|<<
name|endl
operator|<<
literal|"\t"
operator|<<
name|qPrintable
argument_list|(
name|make
argument_list|)
operator|<<
name|endl
operator|<<
literal|"To reconfigure, run "
operator|<<
name|qPrintable
argument_list|(
name|make
argument_list|)
operator|<<
literal|" confclean and configure."
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|projectType
name|Configure
operator|::
name|ProjectType
name|Configure
operator|::
name|projectType
parameter_list|(
specifier|const
name|QString
modifier|&
name|proFileName
parameter_list|)
block|{
name|QFile
name|proFile
argument_list|(
name|proFileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|proFile
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|QString
name|buffer
init|=
name|proFile
operator|.
name|readLine
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|buffer
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QStringList
name|segments
init|=
name|buffer
operator|.
name|split
argument_list|(
name|QRegExp
argument_list|(
literal|"\\s"
argument_list|)
argument_list|)
decl_stmt|;
name|QStringList
operator|::
name|Iterator
name|it
init|=
name|segments
operator|.
name|begin
argument_list|()
decl_stmt|;
if|if
condition|(
name|segments
operator|.
name|size
argument_list|()
operator|>=
literal|3
condition|)
block|{
name|QString
name|keyword
init|=
operator|(
operator|*
name|it
operator|++
operator|)
decl_stmt|;
name|QString
name|operation
init|=
operator|(
operator|*
name|it
operator|++
operator|)
decl_stmt|;
name|QString
name|value
init|=
operator|(
operator|*
name|it
operator|++
operator|)
decl_stmt|;
if|if
condition|(
name|keyword
operator|==
literal|"TEMPLATE"
condition|)
block|{
if|if
condition|(
name|value
operator|==
literal|"lib"
condition|)
return|return
name|Lib
return|;
elseif|else
if|if
condition|(
name|value
operator|==
literal|"subdirs"
condition|)
return|return
name|Subdirs
return|;
block|}
block|}
comment|// read next line
name|buffer
operator|=
name|proFile
operator|.
name|readLine
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
block|}
name|proFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Default to app handling
return|return
name|App
return|;
block|}
end_function
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|EVAL
argument_list|)
end_if
begin_function
DECL|function|showLicense
name|bool
name|Configure
operator|::
name|showLicense
parameter_list|(
name|QString
name|orgLicenseFile
parameter_list|)
block|{
if|if
condition|(
name|dictionary
index|[
literal|"LICENSE_CONFIRMED"
index|]
operator|==
literal|"yes"
condition|)
block|{
name|cout
operator|<<
literal|"You have already accepted the terms of the license."
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
return|return
literal|true
return|;
block|}
name|bool
name|haveGpl3
init|=
literal|false
decl_stmt|;
name|QString
name|licenseFile
init|=
name|orgLicenseFile
decl_stmt|;
name|QString
name|theLicense
decl_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"EDITION"
index|]
operator|==
literal|"OpenSource"
operator|||
name|dictionary
index|[
literal|"EDITION"
index|]
operator|==
literal|"Snapshot"
condition|)
block|{
name|haveGpl3
operator|=
name|QFile
operator|::
name|exists
argument_list|(
name|orgLicenseFile
operator|+
literal|"/LICENSE.GPL3"
argument_list|)
expr_stmt|;
name|theLicense
operator|=
literal|"GNU Lesser General Public License (LGPL) version 2.1"
expr_stmt|;
if|if
condition|(
name|haveGpl3
condition|)
name|theLicense
operator|+=
literal|"\nor the GNU General Public License (GPL) version 3"
expr_stmt|;
block|}
else|else
block|{
comment|// the first line of the license file tells us which license it is
name|QFile
name|file
argument_list|(
name|licenseFile
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|cout
operator|<<
literal|"Failed to load LICENSE file"
operator|<<
name|endl
expr_stmt|;
return|return
literal|false
return|;
block|}
name|theLicense
operator|=
name|file
operator|.
name|readLine
argument_list|()
operator|.
name|trimmed
argument_list|()
expr_stmt|;
block|}
forever|forever
block|{
name|char
name|accept
init|=
literal|'?'
decl_stmt|;
name|cout
operator|<<
literal|"You are licensed to use this software under the terms of"
operator|<<
name|endl
operator|<<
literal|"the "
operator|<<
name|theLicense
operator|<<
literal|"."
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"EDITION"
index|]
operator|==
literal|"OpenSource"
operator|||
name|dictionary
index|[
literal|"EDITION"
index|]
operator|==
literal|"Snapshot"
condition|)
block|{
if|if
condition|(
name|haveGpl3
condition|)
name|cout
operator|<<
literal|"Type '3' to view the GNU General Public License version 3 (GPLv3)."
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"Type 'L' to view the Lesser GNU General Public License version 2.1 (LGPLv2.1)."
operator|<<
name|endl
expr_stmt|;
block|}
else|else
block|{
name|cout
operator|<<
literal|"Type '?' to view the "
operator|<<
name|theLicense
operator|<<
literal|"."
operator|<<
name|endl
expr_stmt|;
block|}
name|cout
operator|<<
literal|"Type 'y' to accept this license offer."
operator|<<
name|endl
operator|<<
literal|"Type 'n' to decline this license offer."
operator|<<
name|endl
operator|<<
name|endl
operator|<<
literal|"Do you accept the terms of the license?"
operator|<<
name|endl
expr_stmt|;
name|cin
operator|>>
name|accept
expr_stmt|;
name|accept
operator|=
name|tolower
argument_list|(
name|accept
argument_list|)
expr_stmt|;
if|if
condition|(
name|accept
operator|==
literal|'y'
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|accept
operator|==
literal|'n'
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
if|if
condition|(
name|dictionary
index|[
literal|"EDITION"
index|]
operator|==
literal|"OpenSource"
operator|||
name|dictionary
index|[
literal|"EDITION"
index|]
operator|==
literal|"Snapshot"
condition|)
block|{
if|if
condition|(
name|accept
operator|==
literal|'3'
condition|)
name|licenseFile
operator|=
name|orgLicenseFile
operator|+
literal|"/LICENSE.GPL3"
expr_stmt|;
else|else
name|licenseFile
operator|=
name|orgLicenseFile
operator|+
literal|"/LICENSE.LGPL"
expr_stmt|;
block|}
comment|// Get console line height, to fill the screen properly
name|int
name|i
init|=
literal|0
decl_stmt|,
name|screenHeight
init|=
literal|25
decl_stmt|;
comment|// default
name|CONSOLE_SCREEN_BUFFER_INFO
name|consoleInfo
decl_stmt|;
name|HANDLE
name|stdOut
init|=
name|GetStdHandle
argument_list|(
name|STD_OUTPUT_HANDLE
argument_list|)
decl_stmt|;
if|if
condition|(
name|GetConsoleScreenBufferInfo
argument_list|(
name|stdOut
argument_list|,
operator|&
name|consoleInfo
argument_list|)
condition|)
name|screenHeight
operator|=
name|consoleInfo
operator|.
name|srWindow
operator|.
name|Bottom
operator|-
name|consoleInfo
operator|.
name|srWindow
operator|.
name|Top
operator|-
literal|1
expr_stmt|;
comment|// Some overlap for context
comment|// Prompt the license content to the user
name|QFile
name|file
argument_list|(
name|licenseFile
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|cout
operator|<<
literal|"Failed to load LICENSE file"
operator|<<
name|licenseFile
operator|<<
name|endl
expr_stmt|;
return|return
literal|false
return|;
block|}
name|QStringList
name|licenseContent
init|=
name|QString
argument_list|(
name|file
operator|.
name|readAll
argument_list|()
argument_list|)
operator|.
name|split
argument_list|(
literal|'\n'
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|licenseContent
operator|.
name|size
argument_list|()
condition|)
block|{
name|cout
operator|<<
name|licenseContent
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|++
name|i
operator|%
name|screenHeight
operator|==
literal|0
condition|)
block|{
name|cout
operator|<<
literal|"(Press any key for more..)"
expr_stmt|;
if|if
condition|(
name|_getch
argument_list|()
operator|==
literal|3
condition|)
comment|// _Any_ keypress w/no echo(eat<Enter> for stdout)
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Exit cleanly for Ctrl+C
name|cout
operator|<<
literal|"\r"
expr_stmt|;
comment|// Overwrite text above
block|}
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|readLicense
name|void
name|Configure
operator|::
name|readLicense
parameter_list|()
block|{
if|if
condition|(
name|QFile
operator|::
name|exists
argument_list|(
name|dictionary
index|[
literal|"QT_SOURCE_TREE"
index|]
operator|+
literal|"/src/corelib/kernel/qfunctions_wince.h"
argument_list|)
operator|&&
operator|(
name|dictionary
operator|.
name|value
argument_list|(
literal|"QMAKESPEC"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"wince"
argument_list|)
operator|||
name|dictionary
operator|.
name|value
argument_list|(
literal|"XQMAKESPEC"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"wince"
argument_list|)
operator|)
condition|)
name|dictionary
index|[
literal|"PLATFORM NAME"
index|]
operator|=
literal|"Qt for Windows CE"
expr_stmt|;
else|else
name|dictionary
index|[
literal|"PLATFORM NAME"
index|]
operator|=
literal|"Qt for Windows"
expr_stmt|;
name|dictionary
index|[
literal|"LICENSE FILE"
index|]
operator|=
name|sourcePath
expr_stmt|;
name|bool
name|openSource
init|=
literal|false
decl_stmt|;
name|bool
name|hasOpenSource
init|=
name|QFile
operator|::
name|exists
argument_list|(
name|dictionary
index|[
literal|"LICENSE FILE"
index|]
operator|+
literal|"/LICENSE.GPL3"
argument_list|)
operator|||
name|QFile
operator|::
name|exists
argument_list|(
name|dictionary
index|[
literal|"LICENSE FILE"
index|]
operator|+
literal|"/LICENSE.LGPL"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"BUILDNOKIA"
index|]
operator|==
literal|"yes"
operator|||
name|dictionary
index|[
literal|"BUILDTYPE"
index|]
operator|==
literal|"commercial"
condition|)
block|{
name|openSource
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dictionary
index|[
literal|"BUILDTYPE"
index|]
operator|==
literal|"opensource"
condition|)
block|{
name|openSource
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hasOpenSource
condition|)
block|{
comment|// No Open Source? Just display the commercial license right away
forever|forever
block|{
name|char
name|accept
init|=
literal|'?'
decl_stmt|;
name|cout
operator|<<
literal|"Which edition of Qt do you want to use ?"
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"Type 'c' if you want to use the Commercial Edition."
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"Type 'o' if you want to use the Open Source Edition."
operator|<<
name|endl
expr_stmt|;
name|cin
operator|>>
name|accept
expr_stmt|;
name|accept
operator|=
name|tolower
argument_list|(
name|accept
argument_list|)
expr_stmt|;
if|if
condition|(
name|accept
operator|==
literal|'c'
condition|)
block|{
name|openSource
operator|=
literal|false
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|accept
operator|==
literal|'o'
condition|)
block|{
name|openSource
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|hasOpenSource
operator|&&
name|openSource
condition|)
block|{
name|cout
operator|<<
name|endl
operator|<<
literal|"This is the "
operator|<<
name|dictionary
index|[
literal|"PLATFORM NAME"
index|]
operator|<<
literal|" Open Source Edition."
operator|<<
name|endl
expr_stmt|;
name|licenseInfo
index|[
literal|"LICENSEE"
index|]
operator|=
literal|"Open Source"
expr_stmt|;
name|dictionary
index|[
literal|"EDITION"
index|]
operator|=
literal|"OpenSource"
expr_stmt|;
name|dictionary
index|[
literal|"QT_EDITION"
index|]
operator|=
literal|"QT_EDITION_OPENSOURCE"
expr_stmt|;
name|cout
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|showLicense
argument_list|(
name|dictionary
index|[
literal|"LICENSE FILE"
index|]
argument_list|)
condition|)
block|{
name|cout
operator|<<
literal|"Configuration aborted since license was not accepted"
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
return|return;
block|}
block|}
elseif|else
if|if
condition|(
name|openSource
condition|)
block|{
name|cout
operator|<<
name|endl
operator|<<
literal|"Cannot find the GPL license files! Please download the Open Source version of the library."
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|COMMERCIAL_VERSION
else|else
block|{
name|Tools
operator|::
name|checkLicense
argument_list|(
name|dictionary
argument_list|,
name|licenseInfo
argument_list|,
name|firstLicensePath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"DONE"
index|]
operator|!=
literal|"error"
operator|&&
name|dictionary
index|[
literal|"BUILDNOKIA"
index|]
operator|!=
literal|"yes"
condition|)
block|{
comment|// give the user some feedback, and prompt for license acceptance
name|cout
operator|<<
name|endl
operator|<<
literal|"This is the "
operator|<<
name|dictionary
index|[
literal|"PLATFORM NAME"
index|]
operator|<<
literal|" "
operator|<<
name|dictionary
index|[
literal|"EDITION"
index|]
operator|<<
literal|" Edition."
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|showLicense
argument_list|(
name|dictionary
index|[
literal|"LICENSE FILE"
index|]
argument_list|)
condition|)
block|{
name|cout
operator|<<
literal|"Configuration aborted since license was not accepted"
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
return|return;
block|}
block|}
block|}
else|#
directive|else
comment|// !COMMERCIAL_VERSION
else|else
block|{
name|cout
operator|<<
name|endl
operator|<<
literal|"Cannot build commercial edition from the open source version of the library."
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|reloadCmdLine
name|void
name|Configure
operator|::
name|reloadCmdLine
parameter_list|()
block|{
if|if
condition|(
name|dictionary
index|[
literal|"REDO"
index|]
operator|==
literal|"yes"
condition|)
block|{
name|QFile
name|inFile
argument_list|(
name|buildPath
operator|+
literal|"/configure"
operator|+
name|dictionary
index|[
literal|"CUSTOMCONFIG"
index|]
operator|+
literal|".cache"
argument_list|)
decl_stmt|;
if|if
condition|(
name|inFile
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|QTextStream
name|inStream
argument_list|(
operator|&
name|inFile
argument_list|)
decl_stmt|;
name|QString
name|buffer
decl_stmt|;
name|inStream
operator|>>
name|buffer
expr_stmt|;
while|while
condition|(
name|buffer
operator|.
name|length
argument_list|()
condition|)
block|{
name|configCmdLine
operator|+=
name|buffer
expr_stmt|;
name|inStream
operator|>>
name|buffer
expr_stmt|;
block|}
name|inFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|saveCmdLine
name|void
name|Configure
operator|::
name|saveCmdLine
parameter_list|()
block|{
if|if
condition|(
name|dictionary
index|[
literal|"REDO"
index|]
operator|!=
literal|"yes"
condition|)
block|{
name|QFile
name|outFile
argument_list|(
name|buildPath
operator|+
literal|"/configure"
operator|+
name|dictionary
index|[
literal|"CUSTOMCONFIG"
index|]
operator|+
literal|".cache"
argument_list|)
decl_stmt|;
if|if
condition|(
name|outFile
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
operator||
name|QFile
operator|::
name|Text
argument_list|)
condition|)
block|{
name|QTextStream
name|outStream
argument_list|(
operator|&
name|outFile
argument_list|)
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|it
init|=
name|configCmdLine
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|configCmdLine
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|outStream
operator|<<
operator|(
operator|*
name|it
operator|)
operator|<<
literal|" "
operator|<<
name|endl
expr_stmt|;
block|}
name|outStream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|outFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !EVAL
end_comment
begin_function
DECL|function|isDone
name|bool
name|Configure
operator|::
name|isDone
parameter_list|()
block|{
return|return
operator|!
name|dictionary
index|[
literal|"DONE"
index|]
operator|.
name|isEmpty
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|isOk
name|bool
name|Configure
operator|::
name|isOk
parameter_list|()
block|{
return|return
operator|(
name|dictionary
index|[
literal|"DONE"
index|]
operator|!=
literal|"error"
operator|)
return|;
block|}
end_function
begin_function
name|bool
DECL|function|filesDiffer
name|Configure
operator|::
name|filesDiffer
parameter_list|(
specifier|const
name|QString
modifier|&
name|fn1
parameter_list|,
specifier|const
name|QString
modifier|&
name|fn2
parameter_list|)
block|{
name|QFile
name|file1
argument_list|(
name|fn1
argument_list|)
decl_stmt|,
name|file2
argument_list|(
name|fn2
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file1
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
operator|||
operator|!
name|file2
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
condition|)
return|return
literal|true
return|;
specifier|const
name|int
name|chunk
init|=
literal|2048
decl_stmt|;
name|int
name|used1
init|=
literal|0
decl_stmt|,
name|used2
init|=
literal|0
decl_stmt|;
name|char
name|b1
index|[
name|chunk
index|]
decl_stmt|,
name|b2
index|[
name|chunk
index|]
decl_stmt|;
while|while
condition|(
operator|!
name|file1
operator|.
name|atEnd
argument_list|()
operator|&&
operator|!
name|file2
operator|.
name|atEnd
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|used1
condition|)
name|used1
operator|=
name|file1
operator|.
name|read
argument_list|(
name|b1
argument_list|,
name|chunk
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|used2
condition|)
name|used2
operator|=
name|file2
operator|.
name|read
argument_list|(
name|b2
argument_list|,
name|chunk
argument_list|)
expr_stmt|;
if|if
condition|(
name|used1
operator|>
literal|0
operator|&&
name|used2
operator|>
literal|0
condition|)
block|{
specifier|const
name|int
name|cmp
init|=
name|qMin
argument_list|(
name|used1
argument_list|,
name|used2
argument_list|)
decl_stmt|;
if|if
condition|(
name|memcmp
argument_list|(
name|b1
argument_list|,
name|b2
argument_list|,
name|cmp
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
operator|(
name|used1
operator|-=
name|cmp
operator|)
condition|)
name|memcpy
argument_list|(
name|b1
argument_list|,
name|b1
operator|+
name|cmp
argument_list|,
name|used1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|used2
operator|-=
name|cmp
operator|)
condition|)
name|memcpy
argument_list|(
name|b2
argument_list|,
name|b2
operator|+
name|cmp
argument_list|,
name|used2
argument_list|)
expr_stmt|;
block|}
block|}
return|return
operator|!
name|file1
operator|.
name|atEnd
argument_list|()
operator|||
operator|!
name|file2
operator|.
name|atEnd
argument_list|()
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
