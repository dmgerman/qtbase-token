begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Copyright (C) 2013 Intel Corporation ** Contact: http://www.qt-project.org/legal ** ** This file is part of the tools applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"configureapp.h"
end_include
begin_include
include|#
directive|include
file|"environment.h"
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|COMMERCIAL_VERSION
end_ifdef
begin_include
include|#
directive|include
file|"tools.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<qdatetime.h>
end_include
begin_include
include|#
directive|include
file|<qdir.h>
end_include
begin_include
include|#
directive|include
file|<qdiriterator.h>
end_include
begin_include
include|#
directive|include
file|<qtemporaryfile.h>
end_include
begin_include
include|#
directive|include
file|<qstandardpaths.h>
end_include
begin_include
include|#
directive|include
file|<qstack.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qfileinfo.h>
end_include
begin_include
include|#
directive|include
file|<qtextstream.h>
end_include
begin_include
include|#
directive|include
file|<qregexp.h>
end_include
begin_include
include|#
directive|include
file|<qhash.h>
end_include
begin_include
include|#
directive|include
file|<iostream>
end_include
begin_include
include|#
directive|include
file|<string>
end_include
begin_include
include|#
directive|include
file|<fstream>
end_include
begin_include
include|#
directive|include
file|<windows.h>
end_include
begin_include
include|#
directive|include
file|<conio.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|enum|Platforms
name|enum
name|Platforms
argument_list|{
DECL|enumerator|WINDOWS
name|WINDOWS
argument_list|,
DECL|enumerator|WINDOWS_CE
name|WINDOWS_CE
argument_list|,
DECL|enumerator|WINDOWS_RT
name|WINDOWS_RT
argument_list|,
DECL|enumerator|QNX
name|QNX
argument_list|,
DECL|enumerator|BLACKBERRY
name|BLACKBERRY
argument_list|,
DECL|enumerator|ANDROID
name|ANDROID
argument_list|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|operator <<
name|std
operator|::
name|ostream
modifier|&
name|operator
name|<<
parameter_list|(
name|std
operator|::
name|ostream
modifier|&
name|s
parameter_list|,
specifier|const
name|QString
modifier|&
name|val
parameter_list|)
block|{
name|s
operator|<<
name|val
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|data
argument_list|()
expr_stmt|;
return|return
name|s
return|;
block|}
end_function
begin_using
using|using
namespace|namespace
name|std
namespace|;
end_using
begin_comment
comment|// Macros to simplify options marking
end_comment
begin_define
DECL|macro|MARK_OPTION
define|#
directive|define
name|MARK_OPTION
parameter_list|(
name|x
parameter_list|,
name|y
parameter_list|)
value|( dictionary[ #x ] == #y ? "*" : " " )
end_define
begin_function
DECL|function|promptKeyPress
specifier|static
specifier|inline
name|void
name|promptKeyPress
parameter_list|()
block|{
name|cout
operator|<<
literal|"(Press any key to continue...)"
expr_stmt|;
if|if
condition|(
name|_getch
argument_list|()
operator|==
literal|3
condition|)
comment|// _Any_ keypress w/no echo(eat<Enter> for stdout)
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Exit cleanly for Ctrl+C
block|}
end_function
begin_constructor
DECL|function|Configure
name|Configure
operator|::
name|Configure
parameter_list|(
name|int
modifier|&
name|argc
parameter_list|,
name|char
modifier|*
modifier|*
name|argv
parameter_list|)
block|{
comment|// Default values for indentation
name|optionIndent
operator|=
literal|4
expr_stmt|;
name|descIndent
operator|=
literal|25
expr_stmt|;
name|outputWidth
operator|=
literal|0
expr_stmt|;
comment|// Get console buffer output width
name|CONSOLE_SCREEN_BUFFER_INFO
name|info
decl_stmt|;
name|HANDLE
name|hStdout
init|=
name|GetStdHandle
argument_list|(
name|STD_OUTPUT_HANDLE
argument_list|)
decl_stmt|;
if|if
condition|(
name|GetConsoleScreenBufferInfo
argument_list|(
name|hStdout
argument_list|,
operator|&
name|info
argument_list|)
condition|)
name|outputWidth
operator|=
name|info
operator|.
name|dwSize
operator|.
name|X
operator|-
literal|1
expr_stmt|;
name|outputWidth
operator|=
name|qMin
argument_list|(
name|outputWidth
argument_list|,
literal|79
argument_list|)
expr_stmt|;
comment|// Anything wider gets unreadable
if|if
condition|(
name|outputWidth
operator|<
literal|35
condition|)
comment|// Insanely small, just use 79
name|outputWidth
operator|=
literal|79
expr_stmt|;
name|int
name|i
decl_stmt|;
comment|/*     ** Set up the initial state, the default     */
name|dictionary
index|[
literal|"CONFIGCMD"
index|]
operator|=
name|argv
index|[
literal|0
index|]
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|1
init|;
name|i
operator|<
name|argc
condition|;
name|i
operator|++
control|)
name|configCmdLine
operator|+=
name|argv
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
name|configCmdLine
operator|.
name|size
argument_list|()
operator|>=
literal|2
operator|&&
name|configCmdLine
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
literal|"-srcdir"
condition|)
block|{
name|sourcePath
operator|=
name|QDir
operator|::
name|cleanPath
argument_list|(
name|configCmdLine
operator|.
name|at
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|sourceDir
operator|=
name|QDir
argument_list|(
name|sourcePath
argument_list|)
expr_stmt|;
name|configCmdLine
operator|.
name|erase
argument_list|(
name|configCmdLine
operator|.
name|begin
argument_list|()
argument_list|,
name|configCmdLine
operator|.
name|begin
argument_list|()
operator|+
literal|2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Get the path to the executable
name|wchar_t
name|module_name
index|[
name|MAX_PATH
index|]
decl_stmt|;
name|GetModuleFileName
argument_list|(
literal|0
argument_list|,
name|module_name
argument_list|,
sizeof|sizeof
argument_list|(
name|module_name
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|wchar_t
argument_list|)
argument_list|)
expr_stmt|;
name|QFileInfo
name|sourcePathInfo
init|=
name|QString
operator|::
name|fromWCharArray
argument_list|(
name|module_name
argument_list|)
decl_stmt|;
name|sourcePath
operator|=
name|sourcePathInfo
operator|.
name|absolutePath
argument_list|()
expr_stmt|;
name|sourceDir
operator|=
name|sourcePathInfo
operator|.
name|dir
argument_list|()
expr_stmt|;
block|}
name|buildPath
operator|=
name|QDir
operator|::
name|currentPath
argument_list|()
expr_stmt|;
if|#
directive|if
literal|0
block|const QString installPath = QString("C:\\Qt\\%1").arg(QT_VERSION_STR);
else|#
directive|else
specifier|const
name|QString
name|installPath
init|=
name|buildPath
decl_stmt|;
endif|#
directive|endif
if|if
condition|(
name|sourceDir
operator|!=
name|buildDir
condition|)
block|{
comment|//shadow builds!
name|QDir
argument_list|(
name|buildPath
argument_list|)
operator|.
name|mkpath
argument_list|(
literal|"bin"
argument_list|)
expr_stmt|;
name|buildDir
operator|.
name|mkpath
argument_list|(
literal|"mkspecs"
argument_list|)
expr_stmt|;
block|}
name|defaultBuildParts
operator|<<
name|QStringLiteral
argument_list|(
literal|"libs"
argument_list|)
operator|<<
name|QStringLiteral
argument_list|(
literal|"tools"
argument_list|)
operator|<<
name|QStringLiteral
argument_list|(
literal|"examples"
argument_list|)
expr_stmt|;
name|allBuildParts
operator|=
name|defaultBuildParts
expr_stmt|;
name|allBuildParts
operator|<<
name|QStringLiteral
argument_list|(
literal|"tests"
argument_list|)
expr_stmt|;
name|dictionary
index|[
literal|"QT_INSTALL_PREFIX"
index|]
operator|=
name|installPath
expr_stmt|;
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|=
name|getenv
argument_list|(
literal|"QMAKESPEC"
argument_list|)
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|=
name|Environment
operator|::
name|detectQMakeSpec
argument_list|()
expr_stmt|;
name|dictionary
index|[
literal|"QMAKESPEC_FROM"
index|]
operator|=
literal|"detected"
expr_stmt|;
block|}
else|else
block|{
name|dictionary
index|[
literal|"QMAKESPEC_FROM"
index|]
operator|=
literal|"env"
expr_stmt|;
block|}
name|dictionary
index|[
literal|"QCONFIG"
index|]
operator|=
literal|"full"
expr_stmt|;
name|dictionary
index|[
literal|"EMBEDDED"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"BUILD_QMAKE"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"VCPROJFILES"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"QMAKE_INTERNAL"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"PROCESS"
index|]
operator|=
literal|"partial"
expr_stmt|;
name|dictionary
index|[
literal|"WIDGETS"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"GUI"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"RTTI"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"STRIP"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"SEPARATE_DEBUG_INFO"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"SSE2"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"SSE3"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"SSSE3"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"SSE4_1"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"SSE4_2"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"AVX"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"AVX2"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"IWMMXT"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"SYNCQT"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"CE_CRT"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"CETEST"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"CE_SIGNATURE"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"AUDIO_BACKEND"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"WMF_BACKEND"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"WMSDK"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"QML_DEBUG"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"PLUGIN_MANIFESTS"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"DIRECTWRITE"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"DIRECT2D"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"NIS"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"NEON"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"LARGE_FILE"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"FONT_CONFIG"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"POSIX_IPC"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"QT_GLIB"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"QT_ICONV"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"QT_EVDEV"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"QT_MTDEV"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"QT_INOTIFY"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"QT_EVENTFD"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"QT_CUPS"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"CFG_GCC_SYSROOT"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"SLOG2"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"QNX_IMF"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"PPS"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"LGMON"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"SYSTEM_PROXIES"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"WERROR"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"QREAL"
index|]
operator|=
literal|"double"
expr_stmt|;
comment|//Only used when cross compiling.
name|dictionary
index|[
literal|"QT_INSTALL_SETTINGS"
index|]
operator|=
literal|"/etc/xdg"
expr_stmt|;
name|QString
name|version
decl_stmt|;
name|QFile
name|qglobal_h
argument_list|(
name|sourcePath
operator|+
literal|"/src/corelib/global/qglobal.h"
argument_list|)
decl_stmt|;
if|if
condition|(
name|qglobal_h
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|QTextStream
name|read
argument_list|(
operator|&
name|qglobal_h
argument_list|)
decl_stmt|;
name|QRegExp
name|version_regexp
argument_list|(
literal|"^# *define *QT_VERSION_STR *\"([^\"]*)\""
argument_list|)
decl_stmt|;
name|QString
name|line
decl_stmt|;
while|while
condition|(
operator|!
name|read
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|line
operator|=
name|read
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|version_regexp
operator|.
name|exactMatch
argument_list|(
name|line
argument_list|)
condition|)
block|{
name|version
operator|=
name|version_regexp
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
operator|.
name|trimmed
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|version
operator|.
name|isEmpty
argument_list|()
condition|)
break|break;
block|}
block|}
name|qglobal_h
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|version
operator|.
name|isEmpty
argument_list|()
condition|)
name|version
operator|=
name|QString
argument_list|(
literal|"%1.%2.%3"
argument_list|)
operator|.
name|arg
argument_list|(
name|QT_VERSION
operator|>>
literal|16
argument_list|)
operator|.
name|arg
argument_list|(
operator|(
operator|(
name|QT_VERSION
operator|>>
literal|8
operator|)
operator|&
literal|0xff
operator|)
argument_list|)
operator|.
name|arg
argument_list|(
name|QT_VERSION
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|dictionary
index|[
literal|"VERSION"
index|]
operator|=
name|version
expr_stmt|;
block|{
name|QRegExp
name|version_re
argument_list|(
literal|"([0-9]*)\\.([0-9]*)\\.([0-9]*)(|-.*)"
argument_list|)
decl_stmt|;
if|if
condition|(
name|version_re
operator|.
name|exactMatch
argument_list|(
name|version
argument_list|)
condition|)
block|{
name|dictionary
index|[
literal|"VERSION_MAJOR"
index|]
operator|=
name|version_re
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|dictionary
index|[
literal|"VERSION_MINOR"
index|]
operator|=
name|version_re
operator|.
name|cap
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|dictionary
index|[
literal|"VERSION_PATCH"
index|]
operator|=
name|version_re
operator|.
name|cap
argument_list|(
literal|3
argument_list|)
expr_stmt|;
block|}
block|}
name|dictionary
index|[
literal|"REDO"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"DEPENDENCIES"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"BUILD"
index|]
operator|=
literal|"debug"
expr_stmt|;
name|dictionary
index|[
literal|"BUILDALL"
index|]
operator|=
literal|"auto"
expr_stmt|;
comment|// Means yes, but not explicitly
name|dictionary
index|[
literal|"FORCEDEBUGINFO"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"BUILDTYPE"
index|]
operator|=
literal|"none"
expr_stmt|;
name|dictionary
index|[
literal|"BUILDDEV"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"COMPILE_EXAMPLES"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"C++11"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"SHARED"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"ZLIB"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"PCRE"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"ICU"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"ANGLE"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"DYNAMICGL"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"GIF"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"JPEG"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"PNG"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"LIBJPEG"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"LIBPNG"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"FREETYPE"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"HARFBUZZ"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"ACCESSIBILITY"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"OPENGL"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"OPENGL_ES_2"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"OPENVG"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"OPENSSL"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"DBUS"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"STYLE_WINDOWS"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"STYLE_WINDOWSXP"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"STYLE_WINDOWSVISTA"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"STYLE_FUSION"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"STYLE_WINDOWSCE"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"STYLE_WINDOWSMOBILE"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"STYLE_GTK"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"SQL_MYSQL"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"SQL_ODBC"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"SQL_OCI"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"SQL_PSQL"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"SQL_TDS"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"SQL_DB2"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"SQL_SQLITE"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"SQL_SQLITE_LIB"
index|]
operator|=
literal|"qt"
expr_stmt|;
name|dictionary
index|[
literal|"SQL_SQLITE2"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"SQL_IBASE"
index|]
operator|=
literal|"no"
expr_stmt|;
name|QString
name|tmp
init|=
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
decl_stmt|;
if|if
condition|(
name|tmp
operator|.
name|contains
argument_list|(
literal|"\\"
argument_list|)
condition|)
block|{
name|tmp
operator|=
name|tmp
operator|.
name|mid
argument_list|(
name|tmp
operator|.
name|lastIndexOf
argument_list|(
literal|"\\"
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tmp
operator|=
name|tmp
operator|.
name|mid
argument_list|(
name|tmp
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|=
name|tmp
expr_stmt|;
name|dictionary
index|[
literal|"INCREDIBUILD_XGE"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"LTCG"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"NATIVE_GESTURES"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"MSVC_MP"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~Configure
name|Configure
operator|::
name|~
name|Configure
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
name|QList
argument_list|<
name|MakeItem
modifier|*
argument_list|>
name|items
init|=
name|makeList
index|[
name|i
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|items
operator|.
name|size
argument_list|()
condition|;
operator|++
name|j
control|)
operator|delete
name|items
index|[
name|j
index|]
expr_stmt|;
block|}
block|}
end_destructor
begin_function
DECL|function|formatPath
name|QString
name|Configure
operator|::
name|formatPath
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|)
block|{
name|QString
name|ret
init|=
name|QDir
operator|::
name|cleanPath
argument_list|(
name|path
argument_list|)
decl_stmt|;
comment|// This amount of quoting is deemed sufficient.
if|if
condition|(
name|ret
operator|.
name|contains
argument_list|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
condition|)
block|{
name|ret
operator|.
name|prepend
argument_list|(
name|QLatin1Char
argument_list|(
literal|'"'
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'"'
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|formatPaths
name|QString
name|Configure
operator|::
name|formatPaths
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|paths
parameter_list|)
block|{
name|QString
name|ret
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|path
decl|,
name|paths
control|)
block|{
if|if
condition|(
operator|!
name|ret
operator|.
name|isEmpty
argument_list|()
condition|)
name|ret
operator|+=
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|ret
operator|+=
name|formatPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_comment
comment|// We could use QDir::homePath() + "/.qt-license", but
end_comment
begin_comment
comment|// that will only look in the first of $HOME,$USERPROFILE
end_comment
begin_comment
comment|// or $HOMEDRIVE$HOMEPATH. So, here we try'em all to be
end_comment
begin_comment
comment|// more forgiving for the end user..
end_comment
begin_function
DECL|function|firstLicensePath
name|QString
name|Configure
operator|::
name|firstLicensePath
parameter_list|()
block|{
name|QStringList
name|allPaths
decl_stmt|;
name|allPaths
operator|<<
literal|"./.qt-license"
operator|<<
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|getenv
argument_list|(
literal|"HOME"
argument_list|)
argument_list|)
operator|+
literal|"/.qt-license"
operator|<<
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|getenv
argument_list|(
literal|"USERPROFILE"
argument_list|)
argument_list|)
operator|+
literal|"/.qt-license"
operator|<<
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|getenv
argument_list|(
literal|"HOMEDRIVE"
argument_list|)
argument_list|)
operator|+
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|getenv
argument_list|(
literal|"HOMEPATH"
argument_list|)
argument_list|)
operator|+
literal|"/.qt-license"
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|allPaths
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|QFile
operator|::
name|exists
argument_list|(
name|allPaths
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
return|return
name|allPaths
operator|.
name|at
argument_list|(
name|i
argument_list|)
return|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_comment
comment|// #### somehow I get a compiler error about vc++ reaching the nesting limit without
end_comment
begin_comment
comment|// undefining the ansi for scoping.
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|for
end_ifdef
begin_undef
DECL|macro|for
undef|#
directive|undef
name|for
end_undef
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|parseCmdLine
name|void
name|Configure
operator|::
name|parseCmdLine
parameter_list|()
block|{
if|if
condition|(
name|configCmdLine
operator|.
name|size
argument_list|()
operator|&&
name|configCmdLine
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
literal|"-top-level"
condition|)
block|{
name|dictionary
index|[
literal|"TOPLEVEL"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|configCmdLine
operator|.
name|removeAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
name|int
name|argCount
init|=
name|configCmdLine
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
specifier|const
name|QStringList
name|imageFormats
init|=
name|QStringList
argument_list|()
operator|<<
literal|"gif"
operator|<<
literal|"png"
operator|<<
literal|"jpeg"
decl_stmt|;
if|if
condition|(
name|argCount
operator|<
literal|1
condition|)
comment|// skip rest if no arguments
empty_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-redo"
condition|)
block|{
name|dictionary
index|[
literal|"REDO"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|configCmdLine
operator|.
name|clear
argument_list|()
expr_stmt|;
name|reloadCmdLine
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-loadconfig"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|!=
name|argCount
condition|)
block|{
name|dictionary
index|[
literal|"REDO"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"CUSTOMCONFIG"
index|]
operator|=
literal|"_"
operator|+
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|configCmdLine
operator|.
name|clear
argument_list|()
expr_stmt|;
name|reloadCmdLine
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
block|}
name|i
operator|=
literal|0
expr_stmt|;
block|}
name|argCount
operator|=
name|configCmdLine
operator|.
name|size
argument_list|()
expr_stmt|;
name|bool
name|isDeviceMkspec
init|=
literal|false
decl_stmt|;
comment|// Look first for XQMAKESPEC
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|argCount
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
operator|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|j
argument_list|)
operator|==
literal|"-xplatform"
operator|)
operator|||
operator|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|j
argument_list|)
operator|==
literal|"-device"
operator|)
condition|)
block|{
name|isDeviceMkspec
operator|=
operator|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|j
argument_list|)
operator|==
literal|"-device"
operator|)
expr_stmt|;
operator|++
name|j
expr_stmt|;
if|if
condition|(
name|j
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"XQMAKESPEC"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|j
argument_list|)
expr_stmt|;
name|applySpecSpecifics
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
for|for
control|(
init|;
name|i
operator|<
name|configCmdLine
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|bool
name|continueElse
index|[]
init|=
block|{
literal|false
block|,
literal|false
block|}
decl_stmt|;
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-help"
operator|||
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-h"
operator|||
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-?"
condition|)
name|dictionary
index|[
literal|"HELP"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qconfig"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"QCONFIG"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qreal"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"QREAL"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-release"
condition|)
block|{
name|dictionary
index|[
literal|"BUILD"
index|]
operator|=
literal|"release"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"BUILDALL"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"BUILDALL"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-debug"
condition|)
block|{
name|dictionary
index|[
literal|"BUILD"
index|]
operator|=
literal|"debug"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"BUILDALL"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"BUILDALL"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-debug-and-release"
condition|)
name|dictionary
index|[
literal|"BUILDALL"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-force-debug-info"
condition|)
name|dictionary
index|[
literal|"FORCEDEBUGINFO"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-separate-debug-info"
condition|)
name|dictionary
index|[
literal|"SEPARATE_DEBUG_INFO"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-separate-debug-info"
condition|)
name|dictionary
index|[
literal|"SEPARATE_DEBUG_INFO"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-compile-examples"
condition|)
block|{
name|dictionary
index|[
literal|"COMPILE_EXAMPLES"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-compile-examples"
condition|)
block|{
name|dictionary
index|[
literal|"COMPILE_EXAMPLES"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-c++11"
condition|)
name|dictionary
index|[
literal|"C++11"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-c++11"
condition|)
name|dictionary
index|[
literal|"C++11"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-shared"
condition|)
name|dictionary
index|[
literal|"SHARED"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-static"
condition|)
name|dictionary
index|[
literal|"SHARED"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-developer-build"
condition|)
name|dictionary
index|[
literal|"BUILDDEV"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-opensource"
condition|)
block|{
name|dictionary
index|[
literal|"BUILDTYPE"
index|]
operator|=
literal|"opensource"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-commercial"
condition|)
block|{
name|dictionary
index|[
literal|"BUILDTYPE"
index|]
operator|=
literal|"commercial"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-ltcg"
condition|)
block|{
name|dictionary
index|[
literal|"LTCG"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-ltcg"
condition|)
block|{
name|dictionary
index|[
literal|"LTCG"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-mp"
condition|)
block|{
name|dictionary
index|[
literal|"MSVC_MP"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-mp"
condition|)
block|{
name|dictionary
index|[
literal|"MSVC_MP"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-force-asserts"
condition|)
block|{
name|dictionary
index|[
literal|"FORCE_ASSERTS"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-target"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
specifier|const
name|QString
name|option
init|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|option
operator|!=
literal|"xp"
condition|)
block|{
name|cout
operator|<<
literal|"ERROR: invalid argument for -target option"
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
return|return;
block|}
name|dictionary
index|[
literal|"TARGET_OS"
index|]
operator|=
name|option
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-platform"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|dictionary
index|[
literal|"QMAKESPEC_FROM"
index|]
operator|=
literal|"commandline"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-arch"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"OBSOLETE_ARCH_ARG"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-embedded"
condition|)
block|{
name|dictionary
index|[
literal|"EMBEDDED"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-xplatform"
operator|||
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-device"
condition|)
block|{
operator|++
name|i
expr_stmt|;
comment|// do nothing
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-device-option"
condition|)
block|{
operator|++
name|i
expr_stmt|;
specifier|const
name|QString
name|option
init|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QString
modifier|&
name|devOpt
init|=
name|dictionary
index|[
literal|"DEVICE_OPTION"
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|devOpt
operator|.
name|isEmpty
argument_list|()
condition|)
name|devOpt
operator|.
name|append
argument_list|(
literal|"\n"
argument_list|)
operator|.
name|append
argument_list|(
name|option
argument_list|)
expr_stmt|;
else|else
name|devOpt
operator|=
name|option
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-zlib"
condition|)
block|{
comment|// No longer supported since Qt 4.4.0
comment|// But save the information for later so that we can print a warning
comment|//
comment|// If you REALLY really need no zlib support, you can still disable
comment|// it by doing the following:
comment|//   add "no-zlib" to mkspecs/qconfig.pri
comment|//   #define QT_NO_COMPRESS (probably by adding to src/corelib/global/qconfig.h)
comment|//
comment|// There's no guarantee that Qt will build under those conditions
name|dictionary
index|[
literal|"ZLIB_FORCED"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qt-zlib"
condition|)
block|{
name|dictionary
index|[
literal|"ZLIB"
index|]
operator|=
literal|"qt"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-system-zlib"
condition|)
block|{
name|dictionary
index|[
literal|"ZLIB"
index|]
operator|=
literal|"system"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qt-pcre"
condition|)
block|{
name|dictionary
index|[
literal|"PCRE"
index|]
operator|=
literal|"qt"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-system-pcre"
condition|)
block|{
name|dictionary
index|[
literal|"PCRE"
index|]
operator|=
literal|"system"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-icu"
condition|)
block|{
name|dictionary
index|[
literal|"ICU"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-icu"
condition|)
block|{
name|dictionary
index|[
literal|"ICU"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-angle"
condition|)
block|{
name|dictionary
index|[
literal|"ANGLE"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"ANGLE_FROM"
index|]
operator|=
literal|"commandline"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-angle-d3d11"
condition|)
block|{
name|dictionary
index|[
literal|"ANGLE"
index|]
operator|=
literal|"d3d11"
expr_stmt|;
name|dictionary
index|[
literal|"ANGLE_FROM"
index|]
operator|=
literal|"commandline"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-angle"
condition|)
block|{
name|dictionary
index|[
literal|"ANGLE"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"ANGLE_FROM"
index|]
operator|=
literal|"commandline"
expr_stmt|;
block|}
comment|// Image formats --------------------------------------------
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-gif"
condition|)
name|dictionary
index|[
literal|"GIF"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-libjpeg"
condition|)
block|{
name|dictionary
index|[
literal|"JPEG"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"LIBJPEG"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qt-libjpeg"
condition|)
block|{
name|dictionary
index|[
literal|"LIBJPEG"
index|]
operator|=
literal|"qt"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-system-libjpeg"
condition|)
block|{
name|dictionary
index|[
literal|"LIBJPEG"
index|]
operator|=
literal|"system"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-libpng"
condition|)
block|{
name|dictionary
index|[
literal|"PNG"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"LIBPNG"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qt-libpng"
condition|)
block|{
name|dictionary
index|[
literal|"LIBPNG"
index|]
operator|=
literal|"qt"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-system-libpng"
condition|)
block|{
name|dictionary
index|[
literal|"LIBPNG"
index|]
operator|=
literal|"system"
expr_stmt|;
block|}
comment|// Text Rendering --------------------------------------------
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-freetype"
condition|)
name|dictionary
index|[
literal|"FREETYPE"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qt-freetype"
condition|)
name|dictionary
index|[
literal|"FREETYPE"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-system-freetype"
condition|)
name|dictionary
index|[
literal|"FREETYPE"
index|]
operator|=
literal|"system"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-harfbuzz"
condition|)
name|dictionary
index|[
literal|"HARFBUZZ"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qt-harfbuzz"
condition|)
name|dictionary
index|[
literal|"HARFBUZZ"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-system-harfbuzz"
condition|)
name|dictionary
index|[
literal|"HARFBUZZ"
index|]
operator|=
literal|"system"
expr_stmt|;
comment|// CE- C runtime --------------------------------------------
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-crt"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|QDir
name|cDir
argument_list|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|cDir
operator|.
name|exists
argument_list|()
condition|)
name|cout
operator|<<
literal|"WARNING: Could not find directory ("
operator|<<
name|qPrintable
argument_list|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
operator|<<
literal|")for C runtime deployment"
operator|<<
name|endl
expr_stmt|;
else|else
name|dictionary
index|[
literal|"CE_CRT"
index|]
operator|=
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|cDir
operator|.
name|absolutePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qt-crt"
condition|)
block|{
name|dictionary
index|[
literal|"CE_CRT"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-crt"
condition|)
block|{
name|dictionary
index|[
literal|"CE_CRT"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
comment|// cetest ---------------------------------------------------
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-cetest"
condition|)
block|{
name|dictionary
index|[
literal|"CETEST"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"CETEST_REQUESTED"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-cetest"
condition|)
block|{
comment|// although specified to use it, we stay at "auto" state
comment|// this is because checkAvailability() adds variables
comment|// we need for crosscompilation; but remember if we asked
comment|// for it.
name|dictionary
index|[
literal|"CETEST_REQUESTED"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
comment|// Qt/CE - signing tool -------------------------------------
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-signature"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|QFileInfo
name|info
argument_list|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|info
operator|.
name|exists
argument_list|()
condition|)
name|cout
operator|<<
literal|"WARNING: Could not find signature file ("
operator|<<
name|qPrintable
argument_list|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
operator|<<
literal|")"
operator|<<
name|endl
expr_stmt|;
else|else
name|dictionary
index|[
literal|"CE_SIGNATURE"
index|]
operator|=
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|info
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Styles ---------------------------------------------------
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qt-style-windows"
condition|)
name|dictionary
index|[
literal|"STYLE_WINDOWS"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-style-windows"
condition|)
name|dictionary
index|[
literal|"STYLE_WINDOWS"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qt-style-windowsce"
condition|)
name|dictionary
index|[
literal|"STYLE_WINDOWSCE"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-style-windowsce"
condition|)
name|dictionary
index|[
literal|"STYLE_WINDOWSCE"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qt-style-windowsmobile"
condition|)
name|dictionary
index|[
literal|"STYLE_WINDOWSMOBILE"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-style-windowsmobile"
condition|)
name|dictionary
index|[
literal|"STYLE_WINDOWSMOBILE"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qt-style-windowsxp"
condition|)
name|dictionary
index|[
literal|"STYLE_WINDOWSXP"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-style-windowsxp"
condition|)
name|dictionary
index|[
literal|"STYLE_WINDOWSXP"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qt-style-windowsvista"
condition|)
name|dictionary
index|[
literal|"STYLE_WINDOWSVISTA"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-style-windowsvista"
condition|)
name|dictionary
index|[
literal|"STYLE_WINDOWSVISTA"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qt-style-fusion"
condition|)
name|dictionary
index|[
literal|"STYLE_FUSION"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-style-fusion"
condition|)
name|dictionary
index|[
literal|"STYLE_FUSION"
index|]
operator|=
literal|"no"
expr_stmt|;
comment|// Work around compiler nesting limitation
else|else
name|continueElse
index|[
literal|1
index|]
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|continueElse
index|[
literal|1
index|]
condition|)
block|{         }
comment|// OpenGL Support -------------------------------------------
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-opengl"
condition|)
block|{
name|dictionary
index|[
literal|"OPENGL"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"OPENGL_ES_2"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-opengl-es-2"
condition|)
block|{
name|dictionary
index|[
literal|"OPENGL"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"OPENGL_ES_2"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-opengl"
condition|)
block|{
name|dictionary
index|[
literal|"OPENGL"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|i
operator|++
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"OPENGL_ES_2"
index|]
operator|=
literal|"no"
expr_stmt|;
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"es2"
condition|)
block|{
name|dictionary
index|[
literal|"OPENGL_ES_2"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"desktop"
condition|)
block|{
comment|// OPENGL=yes suffices
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"dynamic"
condition|)
block|{
name|dictionary
index|[
literal|"DYNAMICGL"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
else|else
block|{
name|cout
operator|<<
literal|"Argument passed to -opengl option is not valid."
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
break|break;
block|}
block|}
comment|// OpenVG Support -------------------------------------------
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-openvg"
condition|)
block|{
name|dictionary
index|[
literal|"OPENVG"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-openvg"
condition|)
block|{
name|dictionary
index|[
literal|"OPENVG"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
comment|// Databases ------------------------------------------------
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qt-sql-mysql"
condition|)
name|dictionary
index|[
literal|"SQL_MYSQL"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-plugin-sql-mysql"
condition|)
name|dictionary
index|[
literal|"SQL_MYSQL"
index|]
operator|=
literal|"plugin"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-sql-mysql"
condition|)
name|dictionary
index|[
literal|"SQL_MYSQL"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qt-sql-odbc"
condition|)
name|dictionary
index|[
literal|"SQL_ODBC"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-plugin-sql-odbc"
condition|)
name|dictionary
index|[
literal|"SQL_ODBC"
index|]
operator|=
literal|"plugin"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-sql-odbc"
condition|)
name|dictionary
index|[
literal|"SQL_ODBC"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qt-sql-oci"
condition|)
name|dictionary
index|[
literal|"SQL_OCI"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-plugin-sql-oci"
condition|)
name|dictionary
index|[
literal|"SQL_OCI"
index|]
operator|=
literal|"plugin"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-sql-oci"
condition|)
name|dictionary
index|[
literal|"SQL_OCI"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qt-sql-psql"
condition|)
name|dictionary
index|[
literal|"SQL_PSQL"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-plugin-sql-psql"
condition|)
name|dictionary
index|[
literal|"SQL_PSQL"
index|]
operator|=
literal|"plugin"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-sql-psql"
condition|)
name|dictionary
index|[
literal|"SQL_PSQL"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qt-sql-tds"
condition|)
name|dictionary
index|[
literal|"SQL_TDS"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-plugin-sql-tds"
condition|)
name|dictionary
index|[
literal|"SQL_TDS"
index|]
operator|=
literal|"plugin"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-sql-tds"
condition|)
name|dictionary
index|[
literal|"SQL_TDS"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qt-sql-db2"
condition|)
name|dictionary
index|[
literal|"SQL_DB2"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-plugin-sql-db2"
condition|)
name|dictionary
index|[
literal|"SQL_DB2"
index|]
operator|=
literal|"plugin"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-sql-db2"
condition|)
name|dictionary
index|[
literal|"SQL_DB2"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qt-sql-sqlite"
condition|)
name|dictionary
index|[
literal|"SQL_SQLITE"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-plugin-sql-sqlite"
condition|)
name|dictionary
index|[
literal|"SQL_SQLITE"
index|]
operator|=
literal|"plugin"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-sql-sqlite"
condition|)
name|dictionary
index|[
literal|"SQL_SQLITE"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-system-sqlite"
condition|)
name|dictionary
index|[
literal|"SQL_SQLITE_LIB"
index|]
operator|=
literal|"system"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qt-sql-sqlite2"
condition|)
name|dictionary
index|[
literal|"SQL_SQLITE2"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-plugin-sql-sqlite2"
condition|)
name|dictionary
index|[
literal|"SQL_SQLITE2"
index|]
operator|=
literal|"plugin"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-sql-sqlite2"
condition|)
name|dictionary
index|[
literal|"SQL_SQLITE2"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qt-sql-ibase"
condition|)
name|dictionary
index|[
literal|"SQL_IBASE"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-plugin-sql-ibase"
condition|)
name|dictionary
index|[
literal|"SQL_IBASE"
index|]
operator|=
literal|"plugin"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-sql-ibase"
condition|)
name|dictionary
index|[
literal|"SQL_IBASE"
index|]
operator|=
literal|"no"
expr_stmt|;
comment|// Image formats --------------------------------------------
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"-qt-imageformat-"
argument_list|)
operator|&&
name|imageFormats
operator|.
name|contains
argument_list|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|section
argument_list|(
literal|'-'
argument_list|,
literal|3
argument_list|)
argument_list|)
condition|)
name|dictionary
index|[
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|section
argument_list|(
literal|'-'
argument_list|,
literal|3
argument_list|)
operator|.
name|toUpper
argument_list|()
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"-plugin-imageformat-"
argument_list|)
operator|&&
name|imageFormats
operator|.
name|contains
argument_list|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|section
argument_list|(
literal|'-'
argument_list|,
literal|3
argument_list|)
argument_list|)
condition|)
name|dictionary
index|[
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|section
argument_list|(
literal|'-'
argument_list|,
literal|3
argument_list|)
operator|.
name|toUpper
argument_list|()
index|]
operator|=
literal|"plugin"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"-no-imageformat-"
argument_list|)
operator|&&
name|imageFormats
operator|.
name|contains
argument_list|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|section
argument_list|(
literal|'-'
argument_list|,
literal|3
argument_list|)
argument_list|)
condition|)
name|dictionary
index|[
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|section
argument_list|(
literal|'-'
argument_list|,
literal|3
argument_list|)
operator|.
name|toUpper
argument_list|()
index|]
operator|=
literal|"no"
expr_stmt|;
comment|// IDE project generation -----------------------------------
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-vcproj"
condition|)
name|dictionary
index|[
literal|"VCPROJFILES"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-vcproj"
condition|)
name|dictionary
index|[
literal|"VCPROJFILES"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-incredibuild-xge"
condition|)
name|dictionary
index|[
literal|"INCREDIBUILD_XGE"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-incredibuild-xge"
condition|)
name|dictionary
index|[
literal|"INCREDIBUILD_XGE"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-native-gestures"
condition|)
name|dictionary
index|[
literal|"NATIVE_GESTURES"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-native-gestures"
condition|)
name|dictionary
index|[
literal|"NATIVE_GESTURES"
index|]
operator|=
literal|"no"
expr_stmt|;
comment|// Others ---------------------------------------------------
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-widgets"
condition|)
name|dictionary
index|[
literal|"WIDGETS"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-widgets"
condition|)
name|dictionary
index|[
literal|"WIDGETS"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-gui"
condition|)
name|dictionary
index|[
literal|"GUI"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-gui"
condition|)
name|dictionary
index|[
literal|"GUI"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-rtti"
condition|)
name|dictionary
index|[
literal|"RTTI"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-rtti"
condition|)
name|dictionary
index|[
literal|"RTTI"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-strip"
condition|)
name|dictionary
index|[
literal|"STRIP"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-strip"
condition|)
name|dictionary
index|[
literal|"STRIP"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-accessibility"
condition|)
name|dictionary
index|[
literal|"ACCESSIBILITY"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-accessibility"
condition|)
block|{
name|dictionary
index|[
literal|"ACCESSIBILITY"
index|]
operator|=
literal|"no"
expr_stmt|;
name|cout
operator|<<
literal|"Setting accessibility to NO"
operator|<<
name|endl
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-sse2"
condition|)
name|dictionary
index|[
literal|"SSE2"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-sse2"
condition|)
name|dictionary
index|[
literal|"SSE2"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-sse3"
condition|)
name|dictionary
index|[
literal|"SSE3"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-sse3"
condition|)
name|dictionary
index|[
literal|"SSE3"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-ssse3"
condition|)
name|dictionary
index|[
literal|"SSSE3"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-ssse3"
condition|)
name|dictionary
index|[
literal|"SSSE3"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-sse4.1"
condition|)
name|dictionary
index|[
literal|"SSE4_1"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-sse4.1"
condition|)
name|dictionary
index|[
literal|"SSE4_1"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-sse4.2"
condition|)
name|dictionary
index|[
literal|"SSE4_2"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-sse4.2"
condition|)
name|dictionary
index|[
literal|"SSE4_2"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-avx"
condition|)
name|dictionary
index|[
literal|"AVX"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-avx"
condition|)
name|dictionary
index|[
literal|"AVX"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-avx2"
condition|)
name|dictionary
index|[
literal|"AVX2"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-avx2"
condition|)
name|dictionary
index|[
literal|"AVX2"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-iwmmxt"
condition|)
name|dictionary
index|[
literal|"IWMMXT"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-iwmmxt"
condition|)
name|dictionary
index|[
literal|"IWMMXT"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-openssl"
condition|)
block|{
name|dictionary
index|[
literal|"OPENSSL"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-openssl"
condition|)
block|{
name|dictionary
index|[
literal|"OPENSSL"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-openssl-linked"
condition|)
block|{
name|dictionary
index|[
literal|"OPENSSL"
index|]
operator|=
literal|"linked"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-qdbus"
condition|)
block|{
name|dictionary
index|[
literal|"DBUS"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qdbus"
condition|)
block|{
name|dictionary
index|[
literal|"DBUS"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-dbus"
condition|)
block|{
name|dictionary
index|[
literal|"DBUS"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-dbus"
condition|)
block|{
name|dictionary
index|[
literal|"DBUS"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-dbus-linked"
condition|)
block|{
name|dictionary
index|[
literal|"DBUS"
index|]
operator|=
literal|"linked"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-audio-backend"
condition|)
block|{
name|dictionary
index|[
literal|"AUDIO_BACKEND"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-audio-backend"
condition|)
block|{
name|dictionary
index|[
literal|"AUDIO_BACKEND"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-wmf-backend"
condition|)
block|{
name|dictionary
index|[
literal|"WMF_BACKEND"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-wmf-backend"
condition|)
block|{
name|dictionary
index|[
literal|"WMF_BACKEND"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-qml-debug"
condition|)
block|{
name|dictionary
index|[
literal|"QML_DEBUG"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qml-debug"
condition|)
block|{
name|dictionary
index|[
literal|"QML_DEBUG"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-plugin-manifests"
condition|)
block|{
name|dictionary
index|[
literal|"PLUGIN_MANIFESTS"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-plugin-manifests"
condition|)
block|{
name|dictionary
index|[
literal|"PLUGIN_MANIFESTS"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-slog2"
condition|)
block|{
name|dictionary
index|[
literal|"SLOG2"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-slog2"
condition|)
block|{
name|dictionary
index|[
literal|"SLOG2"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-imf"
condition|)
block|{
name|dictionary
index|[
literal|"QNX_IMF"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-imf"
condition|)
block|{
name|dictionary
index|[
literal|"QNX_IMF"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-pps"
condition|)
block|{
name|dictionary
index|[
literal|"PPS"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-pps"
condition|)
block|{
name|dictionary
index|[
literal|"PPS"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-lgmon"
condition|)
block|{
name|dictionary
index|[
literal|"LGMON"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-lgmon"
condition|)
block|{
name|dictionary
index|[
literal|"LGMON"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-system-proxies"
condition|)
block|{
name|dictionary
index|[
literal|"SYSTEM_PROXIES"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-system-proxies"
condition|)
block|{
name|dictionary
index|[
literal|"SYSTEM_PROXIES"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-warnings-are-errors"
operator|||
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-Werror"
condition|)
block|{
name|dictionary
index|[
literal|"WERROR"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-warnings-are-errors"
condition|)
block|{
name|dictionary
index|[
literal|"WERROR"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-eventfd"
condition|)
block|{
name|dictionary
index|[
literal|"QT_EVENTFD"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-eventfd"
condition|)
block|{
name|dictionary
index|[
literal|"QT_EVENTFD"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
comment|// Work around compiler nesting limitation
else|else
name|continueElse
index|[
literal|0
index|]
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|continueElse
index|[
literal|0
index|]
condition|)
block|{         }
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-internal"
condition|)
name|dictionary
index|[
literal|"QMAKE_INTERNAL"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-syncqt"
condition|)
name|dictionary
index|[
literal|"SYNCQT"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-qmake"
condition|)
name|dictionary
index|[
literal|"BUILD_QMAKE"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qmake"
condition|)
name|dictionary
index|[
literal|"BUILD_QMAKE"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-dont-process"
condition|)
name|dictionary
index|[
literal|"PROCESS"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-process"
condition|)
name|dictionary
index|[
literal|"PROCESS"
index|]
operator|=
literal|"partial"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-fully-process"
condition|)
name|dictionary
index|[
literal|"PROCESS"
index|]
operator|=
literal|"full"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-qmake-deps"
condition|)
name|dictionary
index|[
literal|"DEPENDENCIES"
index|]
operator|=
literal|"no"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qmake-deps"
condition|)
name|dictionary
index|[
literal|"DEPENDENCIES"
index|]
operator|=
literal|"yes"
expr_stmt|;
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qtnamespace"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"QT_NAMESPACE"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qtlibinfix"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"QT_LIBINFIX"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-D"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|qmakeDefines
operator|+=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-I"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|qmakeIncludes
operator|+=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-L"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|QFileInfo
name|checkDirectory
argument_list|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|checkDirectory
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|cout
operator|<<
literal|"Argument passed to -L option is not a directory path. Did you mean the -l option?"
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
break|break;
block|}
name|qmakeLibs
operator|+=
name|QString
argument_list|(
literal|"-L"
operator|+
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-l"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|qmakeLibs
operator|+=
name|QString
argument_list|(
literal|"-l"
operator|+
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"OPENSSL_LIBS="
argument_list|)
condition|)
block|{
name|opensslLibs
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"OPENSSL_LIBS_DEBUG="
argument_list|)
condition|)
block|{
name|opensslLibsDebug
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"OPENSSL_LIBS_RELEASE="
argument_list|)
condition|)
block|{
name|opensslLibsRelease
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"OPENSSL_PATH="
argument_list|)
condition|)
block|{
name|opensslPath
operator|=
name|QDir
operator|::
name|fromNativeSeparators
argument_list|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|section
argument_list|(
literal|"="
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"PSQL_LIBS="
argument_list|)
condition|)
block|{
name|psqlLibs
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"SYBASE="
argument_list|)
condition|)
block|{
name|sybase
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"SYBASE_LIBS="
argument_list|)
condition|)
block|{
name|sybaseLibs
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"DBUS_PATH="
argument_list|)
condition|)
block|{
name|dbusPath
operator|=
name|QDir
operator|::
name|fromNativeSeparators
argument_list|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|section
argument_list|(
literal|"="
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"DBUS_HOST_PATH="
argument_list|)
condition|)
block|{
name|dbusHostPath
operator|=
name|QDir
operator|::
name|fromNativeSeparators
argument_list|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|section
argument_list|(
literal|"="
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"MYSQL_PATH="
argument_list|)
condition|)
block|{
name|mysqlPath
operator|=
name|QDir
operator|::
name|fromNativeSeparators
argument_list|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|section
argument_list|(
literal|"="
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"ZLIB_LIBS="
argument_list|)
condition|)
block|{
name|zlibLibs
operator|=
name|QDir
operator|::
name|fromNativeSeparators
argument_list|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-override-version"
operator|)
operator|||
operator|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-version-override"
operator|)
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"VERSION"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-saveconfig"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"CUSTOMCONFIG"
index|]
operator|=
literal|"_"
operator|+
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-confirm-license"
condition|)
block|{
name|dictionary
index|[
literal|"LICENSE_CONFIRMED"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-make"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|QString
name|part
init|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|allBuildParts
operator|.
name|contains
argument_list|(
name|part
argument_list|)
condition|)
block|{
name|cout
operator|<<
literal|"Unknown part "
operator|<<
name|part
operator|<<
literal|" passed to -make."
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
block|}
name|buildParts
operator|+=
name|part
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-nomake"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|QString
name|part
init|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|allBuildParts
operator|.
name|contains
argument_list|(
name|part
argument_list|)
condition|)
block|{
name|cout
operator|<<
literal|"Unknown part "
operator|<<
name|part
operator|<<
literal|" passed to -nomake."
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
block|}
name|nobuildParts
operator|+=
name|part
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-skip"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|QString
name|mod
init|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|mod
operator|.
name|startsWith
argument_list|(
name|QStringLiteral
argument_list|(
literal|"qt"
argument_list|)
argument_list|)
condition|)
name|mod
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|QStringLiteral
argument_list|(
literal|"qt"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|QFileInfo
argument_list|(
name|sourcePath
operator|+
literal|"/../"
operator|+
name|mod
argument_list|)
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|cout
operator|<<
literal|"Attempting to skip non-existent module "
operator|<<
name|mod
operator|<<
literal|"."
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
block|}
name|skipModules
operator|+=
name|mod
expr_stmt|;
block|}
comment|// Directories ----------------------------------------------
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-prefix"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"QT_INSTALL_PREFIX"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-bindir"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"QT_INSTALL_BINS"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-libexecdir"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"QT_INSTALL_LIBEXECS"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-libdir"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"QT_INSTALL_LIBS"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-docdir"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"QT_INSTALL_DOCS"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-headerdir"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"QT_INSTALL_HEADERS"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-plugindir"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"QT_INSTALL_PLUGINS"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-importdir"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"QT_INSTALL_IMPORTS"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-qmldir"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"QT_INSTALL_QML"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-archdatadir"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"QT_INSTALL_ARCHDATA"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-datadir"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"QT_INSTALL_DATA"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-translationdir"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"QT_INSTALL_TRANSLATIONS"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-examplesdir"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"QT_INSTALL_EXAMPLES"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-testsdir"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"QT_INSTALL_TESTS"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-sysroot"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"CFG_SYSROOT"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-gcc-sysroot"
condition|)
block|{
name|dictionary
index|[
literal|"CFG_GCC_SYSROOT"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-hostprefix"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
operator|||
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|'-'
argument_list|)
condition|)
name|dictionary
index|[
literal|"QT_HOST_PREFIX"
index|]
operator|=
name|buildPath
expr_stmt|;
else|else
name|dictionary
index|[
literal|"QT_HOST_PREFIX"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-hostbindir"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"QT_HOST_BINS"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-hostlibdir"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"QT_HOST_LIBS"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-hostdatadir"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"QT_HOST_DATA"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-extprefix"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"QT_EXT_PREFIX"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-make-tool"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"MAKE"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|indexOf
argument_list|(
name|QRegExp
argument_list|(
literal|"^-(en|dis)able-"
argument_list|)
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// Scan to see if any specific modules and drivers are enabled or disabled
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|module
init|=
name|modules
operator|.
name|begin
argument_list|()
init|;
name|module
operator|!=
name|modules
operator|.
name|end
argument_list|()
condition|;
operator|++
name|module
control|)
block|{
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
name|QString
argument_list|(
literal|"-enable-"
argument_list|)
operator|+
operator|(
operator|*
name|module
operator|)
condition|)
block|{
name|enabledModules
operator|+=
operator|(
operator|*
name|module
operator|)
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
name|QString
argument_list|(
literal|"-disable-"
argument_list|)
operator|+
operator|(
operator|*
name|module
operator|)
condition|)
block|{
name|disabledModules
operator|+=
operator|(
operator|*
name|module
operator|)
expr_stmt|;
break|break;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-directwrite"
condition|)
block|{
name|dictionary
index|[
literal|"DIRECTWRITE"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-directwrite"
condition|)
block|{
name|dictionary
index|[
literal|"DIRECTWRITE"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-direct2d"
condition|)
block|{
name|dictionary
index|[
literal|"DIRECT2D"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-direct2d"
condition|)
block|{
name|dictionary
index|[
literal|"DIRECT2D"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-nis"
condition|)
block|{
name|dictionary
index|[
literal|"NIS"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-nis"
condition|)
block|{
name|dictionary
index|[
literal|"NIS"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-cups"
condition|)
block|{
name|dictionary
index|[
literal|"QT_CUPS"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-cups"
condition|)
block|{
name|dictionary
index|[
literal|"QT_CUPS"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-iconv"
condition|)
block|{
name|dictionary
index|[
literal|"QT_ICONV"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-iconv"
condition|)
block|{
name|dictionary
index|[
literal|"QT_ICONV"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-sun-iconv"
condition|)
block|{
name|dictionary
index|[
literal|"QT_ICONV"
index|]
operator|=
literal|"sun"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-gnu-iconv"
condition|)
block|{
name|dictionary
index|[
literal|"QT_ICONV"
index|]
operator|=
literal|"gnu"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-evdev"
condition|)
block|{
name|dictionary
index|[
literal|"QT_EVDEV"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-evdev"
condition|)
block|{
name|dictionary
index|[
literal|"QT_EVDEV"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-mtdev"
condition|)
block|{
name|dictionary
index|[
literal|"QT_MTDEV"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-mtdev"
condition|)
block|{
name|dictionary
index|[
literal|"QT_MTDEV"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-inotify"
condition|)
block|{
name|dictionary
index|[
literal|"QT_INOTIFY"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-inotify"
condition|)
block|{
name|dictionary
index|[
literal|"QT_INOTIFY"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-neon"
condition|)
block|{
name|dictionary
index|[
literal|"NEON"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-neon"
condition|)
block|{
name|dictionary
index|[
literal|"NEON"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-largefile"
condition|)
block|{
name|dictionary
index|[
literal|"LARGE_FILE"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-fontconfig"
condition|)
block|{
name|dictionary
index|[
literal|"FONT_CONFIG"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-no-fontconfig"
condition|)
block|{
name|dictionary
index|[
literal|"FONT_CONFIG"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-posix-ipc"
condition|)
block|{
name|dictionary
index|[
literal|"POSIX_IPC"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-glib"
condition|)
block|{
name|dictionary
index|[
literal|"QT_GLIB"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-sysconfdir"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"QT_INSTALL_SETTINGS"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-android-ndk"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"ANDROID_NDK_ROOT"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-android-sdk"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"ANDROID_SDK_ROOT"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-android-ndk-platform"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"ANDROID_PLATFORM"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-android-arch"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"ANDROID_TARGET_ARCH"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|"-android-toolchain-version"
condition|)
block|{
operator|++
name|i
expr_stmt|;
if|if
condition|(
name|i
operator|==
name|argCount
condition|)
break|break;
name|dictionary
index|[
literal|"ANDROID_NDK_TOOLCHAIN_VERSION"
index|]
operator|=
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
name|cout
operator|<<
literal|"Unknown option "
operator|<<
name|configCmdLine
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|<<
name|endl
expr_stmt|;
break|break;
block|}
block|}
comment|// Ensure that QMAKESPEC exists in the mkspecs folder
specifier|const
name|QString
name|mkspecPath
argument_list|(
name|sourcePath
operator|+
literal|"/mkspecs"
argument_list|)
decl_stmt|;
name|QDirIterator
name|itMkspecs
argument_list|(
name|mkspecPath
argument_list|,
name|QDir
operator|::
name|AllDirs
operator||
name|QDir
operator|::
name|NoDotAndDotDot
argument_list|,
name|QDirIterator
operator|::
name|Subdirectories
argument_list|)
decl_stmt|;
name|QStringList
name|mkspecs
decl_stmt|;
while|while
condition|(
name|itMkspecs
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|QString
name|mkspec
init|=
name|itMkspecs
operator|.
name|next
argument_list|()
decl_stmt|;
comment|// Remove base PATH
name|mkspec
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
name|mkspecPath
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|mkspecs
operator|<<
name|mkspec
expr_stmt|;
block|}
if|if
condition|(
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|.
name|toLower
argument_list|()
operator|==
literal|"features"
operator|||
operator|!
name|mkspecs
operator|.
name|contains
argument_list|(
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
block|{
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"QMAKESPEC_FROM"
index|]
operator|==
literal|"commandline"
condition|)
block|{
name|cout
operator|<<
literal|"Invalid option \""
operator|<<
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|<<
literal|"\" for -platform."
operator|<<
name|endl
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dictionary
index|[
literal|"QMAKESPEC_FROM"
index|]
operator|==
literal|"env"
condition|)
block|{
name|cout
operator|<<
literal|"QMAKESPEC environment variable is set to \""
operator|<<
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|<<
literal|"\" which is not a supported platform"
operator|<<
name|endl
expr_stmt|;
block|}
else|else
block|{
comment|// was autodetected from environment
name|cout
operator|<<
literal|"Unable to detect the platform from environment. Use -platform command line"
literal|"argument or set the QMAKESPEC environment variable and run configure again"
operator|<<
name|endl
expr_stmt|;
block|}
name|cout
operator|<<
literal|"See the README file for a list of supported operating systems and compilers."
operator|<<
name|endl
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|.
name|endsWith
argument_list|(
literal|"-icc"
argument_list|)
operator|||
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|.
name|endsWith
argument_list|(
literal|"-msvc"
argument_list|)
operator|||
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|.
name|endsWith
argument_list|(
literal|"-msvc.net"
argument_list|)
operator|||
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|.
name|endsWith
argument_list|(
literal|"-msvc2002"
argument_list|)
operator|||
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|.
name|endsWith
argument_list|(
literal|"-msvc2003"
argument_list|)
operator|||
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|.
name|endsWith
argument_list|(
literal|"-msvc2005"
argument_list|)
operator|||
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|.
name|endsWith
argument_list|(
literal|"-msvc2008"
argument_list|)
operator|||
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|.
name|endsWith
argument_list|(
literal|"-msvc2010"
argument_list|)
operator|||
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|.
name|endsWith
argument_list|(
literal|"-msvc2012"
argument_list|)
operator|||
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|.
name|endsWith
argument_list|(
literal|"-msvc2013"
argument_list|)
condition|)
block|{
if|if
condition|(
name|dictionary
index|[
literal|"MAKE"
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|dictionary
index|[
literal|"MAKE"
index|]
operator|=
literal|"nmake"
expr_stmt|;
name|dictionary
index|[
literal|"QMAKEMAKEFILE"
index|]
operator|=
literal|"Makefile.win32"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|==
name|QString
argument_list|(
literal|"win32-g++"
argument_list|)
condition|)
block|{
if|if
condition|(
name|dictionary
index|[
literal|"MAKE"
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|dictionary
index|[
literal|"MAKE"
index|]
operator|=
literal|"mingw32-make"
expr_stmt|;
name|dictionary
index|[
literal|"QMAKEMAKEFILE"
index|]
operator|=
literal|"Makefile.unix"
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|dictionary
index|[
literal|"MAKE"
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|dictionary
index|[
literal|"MAKE"
index|]
operator|=
literal|"make"
expr_stmt|;
name|dictionary
index|[
literal|"QMAKEMAKEFILE"
index|]
operator|=
literal|"Makefile.win32"
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isDeviceMkspec
condition|)
block|{
specifier|const
name|QStringList
name|devices
init|=
name|mkspecs
operator|.
name|filter
argument_list|(
literal|"devices/"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
decl_stmt|;
specifier|const
name|QStringList
name|family
init|=
name|devices
operator|.
name|filter
argument_list|(
name|dictionary
index|[
literal|"XQMAKESPEC"
index|]
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
decl_stmt|;
if|if
condition|(
name|family
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
name|cout
operator|<<
literal|"Error: No device matching '"
operator|<<
name|dictionary
index|[
literal|"XQMAKESPEC"
index|]
operator|<<
literal|"'."
operator|<<
name|endl
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|family
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
name|cout
operator|<<
literal|"Error: Multiple matches for device '"
operator|<<
name|dictionary
index|[
literal|"XQMAKESPEC"
index|]
operator|<<
literal|"'. Candidates are:"
operator|<<
name|endl
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|device
decl|,
name|family
control|)
name|cout
operator|<<
literal|"\t* "
operator|<<
name|device
operator|<<
name|endl
expr_stmt|;
block|}
else|else
block|{
name|Q_ASSERT
argument_list|(
name|family
operator|.
name|size
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|dictionary
index|[
literal|"XQMAKESPEC"
index|]
operator|=
name|family
operator|.
name|at
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Ensure that -spec (XQMAKESPEC) exists in the mkspecs folder as well
if|if
condition|(
name|dictionary
operator|.
name|contains
argument_list|(
literal|"XQMAKESPEC"
argument_list|)
operator|&&
operator|!
name|mkspecs
operator|.
name|contains
argument_list|(
name|dictionary
index|[
literal|"XQMAKESPEC"
index|]
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
block|{
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
name|cout
operator|<<
literal|"Invalid option \""
operator|<<
name|dictionary
index|[
literal|"XQMAKESPEC"
index|]
operator|<<
literal|"\" for -xplatform."
operator|<<
name|endl
expr_stmt|;
block|}
block|}
comment|// Ensure that the crt to be deployed can be found
if|if
condition|(
name|dictionary
index|[
literal|"CE_CRT"
index|]
operator|!=
name|QLatin1String
argument_list|(
literal|"yes"
argument_list|)
operator|&&
name|dictionary
index|[
literal|"CE_CRT"
index|]
operator|!=
name|QLatin1String
argument_list|(
literal|"no"
argument_list|)
condition|)
block|{
name|QDir
name|cDir
argument_list|(
name|dictionary
index|[
literal|"CE_CRT"
index|]
argument_list|)
decl_stmt|;
name|QStringList
name|entries
init|=
name|cDir
operator|.
name|entryList
argument_list|()
decl_stmt|;
name|bool
name|hasDebug
init|=
name|entries
operator|.
name|contains
argument_list|(
literal|"msvcr80.dll"
argument_list|)
decl_stmt|;
name|bool
name|hasRelease
init|=
name|entries
operator|.
name|contains
argument_list|(
literal|"msvcr80d.dll"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|dictionary
index|[
literal|"BUILDALL"
index|]
operator|==
literal|"auto"
operator|)
operator|&&
operator|(
operator|!
name|hasDebug
operator|||
operator|!
name|hasRelease
operator|)
condition|)
block|{
name|cout
operator|<<
literal|"Could not find debug and release c-runtime."
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"You need to have msvcr80.dll and msvcr80d.dll in"
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"the path specified. Setting to -no-crt"
expr_stmt|;
name|dictionary
index|[
literal|"CE_CRT"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|dictionary
index|[
literal|"BUILD"
index|]
operator|==
literal|"debug"
operator|)
operator|&&
operator|!
name|hasDebug
condition|)
block|{
name|cout
operator|<<
literal|"Could not find debug c-runtime (msvcr80d.dll) in the directory specified."
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"Setting c-runtime automatic deployment to -no-crt"
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"CE_CRT"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|dictionary
index|[
literal|"BUILD"
index|]
operator|==
literal|"release"
operator|)
operator|&&
operator|!
name|hasRelease
condition|)
block|{
name|cout
operator|<<
literal|"Could not find release c-runtime (msvcr80.dll) in the directory specified."
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"Setting c-runtime automatic deployment to -no-crt"
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"CE_CRT"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
block|}
comment|// Allow tests for private classes to be compiled against internal builds
if|if
condition|(
name|dictionary
index|[
literal|"BUILDDEV"
index|]
operator|==
literal|"yes"
condition|)
block|{
name|qtConfig
operator|<<
literal|"private_tests"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"WERROR"
index|]
operator|!=
literal|"no"
condition|)
name|qmakeConfig
operator|<<
literal|"warnings_are_errors"
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|dictionary
index|[
literal|"WERROR"
index|]
operator|==
literal|"yes"
condition|)
name|qmakeConfig
operator|<<
literal|"warnings_are_errors"
expr_stmt|;
block|}
if|if
condition|(
name|dictionary
index|[
literal|"FORCE_ASSERTS"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"force_asserts"
expr_stmt|;
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|dis
init|=
name|disabledModules
operator|.
name|begin
argument_list|()
init|;
name|dis
operator|!=
name|disabledModules
operator|.
name|end
argument_list|()
condition|;
operator|++
name|dis
control|)
block|{
name|modules
operator|.
name|removeAll
argument_list|(
operator|(
operator|*
name|dis
operator|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|ena
init|=
name|enabledModules
operator|.
name|begin
argument_list|()
init|;
name|ena
operator|!=
name|enabledModules
operator|.
name|end
argument_list|()
condition|;
operator|++
name|ena
control|)
block|{
if|if
condition|(
name|modules
operator|.
name|indexOf
argument_list|(
operator|(
operator|*
name|ena
operator|)
argument_list|)
operator|==
operator|-
literal|1
condition|)
name|modules
operator|+=
operator|(
operator|*
name|ena
operator|)
expr_stmt|;
block|}
name|qtConfig
operator|+=
name|modules
expr_stmt|;
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|it
init|=
name|disabledModules
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|disabledModules
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
name|qtConfig
operator|.
name|removeAll
argument_list|(
operator|*
name|it
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|dictionary
index|[
literal|"REDO"
index|]
operator|!=
literal|"yes"
operator|)
operator|&&
operator|(
name|dictionary
index|[
literal|"HELP"
index|]
operator|!=
literal|"yes"
operator|)
operator|&&
operator|(
name|dictionary
index|[
literal|"DONE"
index|]
operator|!=
literal|"error"
operator|)
condition|)
name|saveCmdLine
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|validateArgs
name|void
name|Configure
operator|::
name|validateArgs
parameter_list|()
block|{
comment|// Validate the specified config
name|QString
name|cfgpath
init|=
name|sourcePath
operator|+
literal|"/src/corelib/global/qconfig-"
operator|+
name|dictionary
index|[
literal|"QCONFIG"
index|]
operator|+
literal|".h"
decl_stmt|;
comment|// Try internal configurations first.
name|QStringList
name|possible_configs
init|=
name|QStringList
argument_list|()
operator|<<
literal|"minimal"
operator|<<
literal|"small"
operator|<<
literal|"medium"
operator|<<
literal|"large"
operator|<<
literal|"full"
decl_stmt|;
name|int
name|index
init|=
name|possible_configs
operator|.
name|indexOf
argument_list|(
name|dictionary
index|[
literal|"QCONFIG"
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
condition|)
block|{
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<=
name|index
condition|;
name|c
operator|++
control|)
block|{
name|qtConfig
operator|+=
name|possible_configs
index|[
name|c
index|]
operator|+
literal|"-config"
expr_stmt|;
block|}
if|if
condition|(
name|dictionary
index|[
literal|"QCONFIG"
index|]
operator|!=
literal|"full"
condition|)
name|dictionary
index|[
literal|"QCONFIG_PATH"
index|]
operator|=
name|cfgpath
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|QFileInfo
operator|::
name|exists
argument_list|(
name|cfgpath
argument_list|)
condition|)
block|{
name|cfgpath
operator|=
name|QFileInfo
argument_list|(
name|dictionary
index|[
literal|"QCONFIG"
index|]
argument_list|)
operator|.
name|absoluteFilePath
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|QFileInfo
operator|::
name|exists
argument_list|(
name|cfgpath
argument_list|)
condition|)
block|{
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
name|cout
operator|<<
literal|"No such configuration \""
operator|<<
name|qPrintable
argument_list|(
name|dictionary
index|[
literal|"QCONFIG"
index|]
argument_list|)
operator|<<
literal|"\""
operator|<<
name|endl
expr_stmt|;
return|return;
block|}
block|}
name|dictionary
index|[
literal|"QCONFIG_PATH"
index|]
operator|=
name|cfgpath
expr_stmt|;
block|}
end_function
begin_comment
comment|// Output helper functions --------------------------------[ Start ]-
end_comment
begin_comment
comment|/*!     Determines the length of a string token. */
end_comment
begin_function
DECL|function|tokenLength
specifier|static
name|int
name|tokenLength
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|)
block|{
if|if
condition|(
operator|*
name|str
operator|==
literal|0
condition|)
return|return
literal|0
return|;
specifier|const
name|char
modifier|*
name|nextToken
init|=
name|strpbrk
argument_list|(
name|str
argument_list|,
literal|" _/\n\r"
argument_list|)
decl_stmt|;
if|if
condition|(
name|nextToken
operator|==
name|str
operator|||
operator|!
name|nextToken
condition|)
return|return
literal|1
return|;
return|return
name|int
argument_list|(
name|nextToken
operator|-
name|str
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Prints out a string which starts at position \a startingAt, and     indents each wrapped line with \a wrapIndent characters.     The wrap point is set to the console width, unless that width     cannot be determined, or is too small. */
end_comment
begin_function
DECL|function|desc
name|void
name|Configure
operator|::
name|desc
parameter_list|(
specifier|const
name|char
modifier|*
name|description
parameter_list|,
name|int
name|startingAt
parameter_list|,
name|int
name|wrapIndent
parameter_list|)
block|{
name|int
name|linePos
init|=
name|startingAt
decl_stmt|;
name|bool
name|firstLine
init|=
literal|true
decl_stmt|;
specifier|const
name|char
modifier|*
name|nextToken
init|=
name|description
decl_stmt|;
while|while
condition|(
operator|*
name|nextToken
condition|)
block|{
name|int
name|nextTokenLen
init|=
name|tokenLength
argument_list|(
name|nextToken
argument_list|)
decl_stmt|;
if|if
condition|(
operator|*
name|nextToken
operator|==
literal|'\n'
comment|// Wrap on newline, duh
operator|||
operator|(
name|linePos
operator|+
name|nextTokenLen
operator|>
name|outputWidth
operator|)
condition|)
comment|// Wrap at outputWidth
block|{
name|printf
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|linePos
operator|=
literal|0
expr_stmt|;
name|firstLine
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|*
name|nextToken
operator|==
literal|'\n'
condition|)
operator|++
name|nextToken
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
operator|!
name|firstLine
operator|&&
name|linePos
operator|<
name|wrapIndent
condition|)
block|{
comment|// Indent to wrapIndent
name|printf
argument_list|(
literal|"%*s"
argument_list|,
name|wrapIndent
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|linePos
operator|=
name|wrapIndent
expr_stmt|;
if|if
condition|(
operator|*
name|nextToken
operator|==
literal|' '
condition|)
block|{
operator|++
name|nextToken
expr_stmt|;
continue|continue;
block|}
block|}
name|printf
argument_list|(
literal|"%.*s"
argument_list|,
name|nextTokenLen
argument_list|,
name|nextToken
argument_list|)
expr_stmt|;
name|linePos
operator|+=
name|nextTokenLen
expr_stmt|;
name|nextToken
operator|+=
name|nextTokenLen
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!     Prints out an option with its description wrapped at the     description starting point. If \a skipIndent is true, the     indentation to the option is not outputted (used by marked option     version of desc()). Extra spaces between option and its     description is filled with\a fillChar, if there's available     space. */
end_comment
begin_function
DECL|function|desc
name|void
name|Configure
operator|::
name|desc
parameter_list|(
specifier|const
name|char
modifier|*
name|option
parameter_list|,
specifier|const
name|char
modifier|*
name|description
parameter_list|,
name|bool
name|skipIndent
parameter_list|,
name|char
name|fillChar
parameter_list|)
block|{
if|if
condition|(
operator|!
name|skipIndent
condition|)
name|printf
argument_list|(
literal|"%*s"
argument_list|,
name|optionIndent
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|int
name|remaining
init|=
name|descIndent
operator|-
name|optionIndent
operator|-
name|int
argument_list|(
name|strlen
argument_list|(
name|option
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|wrapIndent
init|=
name|descIndent
operator|+
name|qMax
argument_list|(
literal|0
argument_list|,
literal|1
operator|-
name|remaining
argument_list|)
decl_stmt|;
name|printf
argument_list|(
literal|"%s"
argument_list|,
name|option
argument_list|)
expr_stmt|;
if|if
condition|(
name|remaining
operator|>
literal|2
condition|)
block|{
name|printf
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
comment|// Space in front
for|for
control|(
name|int
name|i
init|=
name|remaining
init|;
name|i
operator|>
literal|2
condition|;
operator|--
name|i
control|)
name|printf
argument_list|(
literal|"%c"
argument_list|,
name|fillChar
argument_list|)
expr_stmt|;
comment|// Fill, if available space
block|}
name|printf
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
comment|// Space between option and description
name|desc
argument_list|(
name|description
argument_list|,
name|wrapIndent
argument_list|,
name|wrapIndent
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Same as above, except it also marks an option with an '*', if     the option is default action. */
end_comment
begin_function
DECL|function|desc
name|void
name|Configure
operator|::
name|desc
parameter_list|(
specifier|const
name|char
modifier|*
name|mark_option
parameter_list|,
specifier|const
name|char
modifier|*
name|mark
parameter_list|,
specifier|const
name|char
modifier|*
name|option
parameter_list|,
specifier|const
name|char
modifier|*
name|description
parameter_list|,
name|char
name|fillChar
parameter_list|)
block|{
specifier|const
name|QString
name|markedAs
init|=
name|dictionary
operator|.
name|value
argument_list|(
name|mark_option
argument_list|)
decl_stmt|;
if|if
condition|(
name|markedAs
operator|==
literal|"auto"
operator|&&
name|markedAs
operator|==
name|mark
condition|)
comment|// both "auto", always => +
name|printf
argument_list|(
literal|" +  "
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|markedAs
operator|==
literal|"auto"
condition|)
comment|// setting marked as "auto" and option is default => +
name|printf
argument_list|(
literal|" %c  "
argument_list|,
operator|(
name|defaultTo
argument_list|(
name|mark_option
argument_list|)
operator|==
name|QLatin1String
argument_list|(
name|mark
argument_list|)
operator|)
condition|?
literal|'+'
else|:
literal|' '
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|QLatin1String
argument_list|(
name|mark
argument_list|)
operator|==
literal|"auto"
operator|&&
name|markedAs
operator|!=
literal|"no"
condition|)
comment|// description marked as "auto" and option is available => +
name|printf
argument_list|(
literal|" %c  "
argument_list|,
name|checkAvailability
argument_list|(
name|mark_option
argument_list|)
condition|?
literal|'+'
else|:
literal|' '
argument_list|)
expr_stmt|;
else|else
comment|// None are "auto", (markedAs == mark) => *
name|printf
argument_list|(
literal|" %c  "
argument_list|,
name|markedAs
operator|==
name|QLatin1String
argument_list|(
name|mark
argument_list|)
condition|?
literal|'*'
else|:
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
name|option
argument_list|,
name|description
argument_list|,
literal|true
argument_list|,
name|fillChar
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!     Modifies the default configuration based on given -platform option.     Eg. switches to different default styles for Windows CE. */
end_comment
begin_function
DECL|function|applySpecSpecifics
name|void
name|Configure
operator|::
name|applySpecSpecifics
parameter_list|()
block|{
if|if
condition|(
name|dictionary
operator|.
name|contains
argument_list|(
literal|"XQMAKESPEC"
argument_list|)
condition|)
block|{
comment|//Disable building tools when cross compiling.
name|nobuildParts
operator|<<
literal|"tools"
expr_stmt|;
block|}
if|if
condition|(
name|dictionary
operator|.
name|value
argument_list|(
literal|"XQMAKESPEC"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"winphone"
argument_list|)
operator|||
name|dictionary
operator|.
name|value
argument_list|(
literal|"XQMAKESPEC"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"winrt"
argument_list|)
condition|)
block|{
name|dictionary
index|[
literal|"STYLE_WINDOWSXP"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"STYLE_WINDOWSVISTA"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"GIF"
index|]
operator|=
literal|"qt"
expr_stmt|;
name|dictionary
index|[
literal|"JPEG"
index|]
operator|=
literal|"qt"
expr_stmt|;
name|dictionary
index|[
literal|"LIBJPEG"
index|]
operator|=
literal|"qt"
expr_stmt|;
name|dictionary
index|[
literal|"LIBPNG"
index|]
operator|=
literal|"qt"
expr_stmt|;
name|dictionary
index|[
literal|"FREETYPE"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"OPENGL"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"OPENGL_ES_2"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"OPENVG"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"OPENSSL"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"DBUS"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"ZLIB"
index|]
operator|=
literal|"qt"
expr_stmt|;
name|dictionary
index|[
literal|"PCRE"
index|]
operator|=
literal|"qt"
expr_stmt|;
name|dictionary
index|[
literal|"ICU"
index|]
operator|=
literal|"qt"
expr_stmt|;
name|dictionary
index|[
literal|"CE_CRT"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"LARGE_FILE"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"ANGLE"
index|]
operator|=
literal|"d3d11"
expr_stmt|;
name|dictionary
index|[
literal|"DYNAMICGL"
index|]
operator|=
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
operator|.
name|value
argument_list|(
literal|"XQMAKESPEC"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"winphone"
argument_list|)
condition|)
name|dictionary
index|[
literal|"SQL_SQLITE"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dictionary
operator|.
name|value
argument_list|(
literal|"XQMAKESPEC"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"wince"
argument_list|)
condition|)
block|{
name|dictionary
index|[
literal|"STYLE_WINDOWSXP"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"STYLE_WINDOWSVISTA"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"STYLE_FUSION"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"STYLE_WINDOWSCE"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"STYLE_WINDOWSMOBILE"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"OPENGL"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"OPENSSL"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"RTTI"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"SSE2"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"SSE3"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"SSSE3"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"SSE4_1"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"SSE4_2"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"AVX"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"AVX2"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"IWMMXT"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"CE_CRT"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"LARGE_FILE"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"ANGLE"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"DYNAMICGL"
index|]
operator|=
literal|"no"
expr_stmt|;
comment|// We only apply MMX/IWMMXT for mkspecs we know they work
if|if
condition|(
name|dictionary
index|[
literal|"XQMAKESPEC"
index|]
operator|.
name|startsWith
argument_list|(
literal|"wincewm"
argument_list|)
condition|)
block|{
name|dictionary
index|[
literal|"MMX"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"IWMMXT"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|dictionary
operator|.
name|value
argument_list|(
literal|"XQMAKESPEC"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"linux"
argument_list|)
condition|)
block|{
comment|//TODO actually wrong.
comment|//TODO
name|dictionary
index|[
literal|"STYLE_WINDOWSXP"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"STYLE_WINDOWSVISTA"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"KBD_DRIVERS"
index|]
operator|=
literal|"tty"
expr_stmt|;
name|dictionary
index|[
literal|"GFX_DRIVERS"
index|]
operator|=
literal|"linuxfb"
expr_stmt|;
name|dictionary
index|[
literal|"MOUSE_DRIVERS"
index|]
operator|=
literal|"pc linuxtp"
expr_stmt|;
name|dictionary
index|[
literal|"OPENGL"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"DBUS"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"QT_INOTIFY"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"QT_CUPS"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"QT_GLIB"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"QT_ICONV"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"QT_EVDEV"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"QT_MTDEV"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"FONT_CONFIG"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"DECORATIONS"
index|]
operator|=
literal|"default windows styled"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|platform
argument_list|()
operator|==
name|QNX
operator|)
operator|||
operator|(
name|platform
argument_list|()
operator|==
name|BLACKBERRY
operator|)
condition|)
block|{
name|dictionary
index|[
literal|"STACK_PROTECTOR_STRONG"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"SLOG2"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"QNX_IMF"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"PPS"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"LGMON"
index|]
operator|=
literal|"auto"
expr_stmt|;
name|dictionary
index|[
literal|"QT_XKBCOMMON"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"ANGLE"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"DYNAMICGL"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"FONT_CONFIG"
index|]
operator|=
literal|"auto"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|platform
argument_list|()
operator|==
name|ANDROID
condition|)
block|{
name|dictionary
index|[
literal|"REDUCE_EXPORTS"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"BUILD"
index|]
operator|=
literal|"release"
expr_stmt|;
name|dictionary
index|[
literal|"BUILDALL"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"LARGE_FILE"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"ANGLE"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"DYNAMICGL"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"REDUCE_RELOCATIONS"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|dictionary
index|[
literal|"QT_GETIFADDRS"
index|]
operator|=
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"QT_XKBCOMMON"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// Output helper functions ---------------------------------[ Stop ]-
end_comment
begin_function
DECL|function|displayHelp
name|bool
name|Configure
operator|::
name|displayHelp
parameter_list|()
block|{
if|if
condition|(
name|dictionary
index|[
literal|"HELP"
index|]
operator|==
literal|"yes"
condition|)
block|{
name|desc
argument_list|(
literal|"Usage: configure [options]\n\n"
argument_list|,
literal|0
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"Installation options:\n\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"These are optional, but you may specify install directories.\n\n"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-prefix<dir>"
argument_list|,
literal|"This will install everything relative to<dir> (default $QT_INSTALL_PREFIX)\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-extprefix<dir>"
argument_list|,
literal|"When -sysroot is used, install everything to<dir>, rather than into SYSROOT/PREFIX.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-hostprefix [dir]"
argument_list|,
literal|"Tools and libraries needed when developing applications are installed in [dir]. "
literal|"If [dir] is not given, the current build directory will be used. (default EXTPREFIX)\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"You may use these to separate different parts of the install:\n\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-bindir<dir>"
argument_list|,
literal|"User executables will be installed to<dir>\n(default PREFIX/bin)"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-libdir<dir>"
argument_list|,
literal|"Libraries will be installed to<dir>\n(default PREFIX/lib)"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-headerdir<dir>"
argument_list|,
literal|"Headers will be installed to<dir>\n(default PREFIX/include)"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-archdatadir<dir>"
argument_list|,
literal|"Architecture-dependent data used by Qt will be installed to<dir>\n(default PREFIX)"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-libexecdir<dir>"
argument_list|,
literal|"Program executables will be installed to<dir>\n(default ARCHDATADIR/bin)"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-plugindir<dir>"
argument_list|,
literal|"Plugins will be installed to<dir>\n(default ARCHDATADIR/plugins)"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-importdir<dir>"
argument_list|,
literal|"Imports for QML1 will be installed to<dir>\n(default ARCHDATADIR/imports)"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-qmldir<dir>"
argument_list|,
literal|"Imports for QML2 will be installed to<dir>\n(default ARCHDATADIR/qml)"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-datadir<dir>"
argument_list|,
literal|"Data used by Qt programs will be installed to<dir>\n(default PREFIX)"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-docdir<dir>"
argument_list|,
literal|"Documentation will be installed to<dir>\n(default DATADIR/doc)"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-translationdir<dir>"
argument_list|,
literal|"Translations of Qt programs will be installed to<dir>\n(default DATADIR/translations)"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-examplesdir<dir>"
argument_list|,
literal|"Examples will be installed to<dir>\n(default PREFIX/examples)"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-testsdir<dir>"
argument_list|,
literal|"Tests will be installed to<dir>\n(default PREFIX/tests)\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-hostbindir<dir>"
argument_list|,
literal|"Host executables will be installed to<dir>\n(default HOSTPREFIX/bin)"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-hostlibdir<dir>"
argument_list|,
literal|"Host libraries will be installed to<dir>\n(default HOSTPREFIX/lib)"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-hostdatadir<dir>"
argument_list|,
literal|"Data used by qmake will be installed to<dir>\n(default HOSTPREFIX)"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"\nConfigure options:\n\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|" The defaults (*) are usually acceptable. A plus (+) denotes a default value"
literal|" that needs to be evaluated. If the evaluation succeeds, the feature is"
literal|" included. Here is a short explanation of each option:\n\n"
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"BUILD"
argument_list|,
literal|"release"
argument_list|,
literal|"-release"
argument_list|,
literal|"Compile and link Qt with debugging turned off."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"BUILD"
argument_list|,
literal|"debug"
argument_list|,
literal|"-debug"
argument_list|,
literal|"Compile and link Qt with debugging turned on."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"BUILDALL"
argument_list|,
literal|"yes"
argument_list|,
literal|"-debug-and-release"
argument_list|,
literal|"Compile and link two Qt libraries, with and without debugging turned on.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"FORCEDEBUGINFO"
argument_list|,
literal|"yes"
argument_list|,
literal|"-force-debug-info"
argument_list|,
literal|"Create symbol files for release builds."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"SEPARATE_DEBUG_INFO"
argument_list|,
literal|"yes"
argument_list|,
literal|"-separate-debug-info"
argument_list|,
literal|"Strip debug information into a separate file.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"BUILDDEV"
argument_list|,
literal|"yes"
argument_list|,
literal|"-developer-build"
argument_list|,
literal|"Compile and link Qt with Qt developer options (including auto-tests exporting)\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"OPENSOURCE"
argument_list|,
literal|"opensource"
argument_list|,
literal|"-opensource"
argument_list|,
literal|"Compile and link the Open-Source Edition of Qt."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"COMMERCIAL"
argument_list|,
literal|"commercial"
argument_list|,
literal|"-commercial"
argument_list|,
literal|"Compile and link the Commercial Edition of Qt.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"C++11"
argument_list|,
literal|"yes"
argument_list|,
literal|"-c++11"
argument_list|,
literal|"Compile Qt with C++11 support enabled."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"C++11"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-c++11"
argument_list|,
literal|"Do not compile Qt with C++11 support enabled.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"SHARED"
argument_list|,
literal|"yes"
argument_list|,
literal|"-shared"
argument_list|,
literal|"Create and use shared Qt libraries."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"SHARED"
argument_list|,
literal|"no"
argument_list|,
literal|"-static"
argument_list|,
literal|"Create and use static Qt libraries.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"LTCG"
argument_list|,
literal|"yes"
argument_list|,
literal|"-ltcg"
argument_list|,
literal|"Use Link Time Code Generation. (Release builds only)"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"LTCG"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-ltcg"
argument_list|,
literal|"Do not use Link Time Code Generation.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-make<part>"
argument_list|,
literal|"Add part to the list of parts to be built at make time"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|defaultBuildParts
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|desc
argument_list|(
literal|""
argument_list|,
name|qPrintable
argument_list|(
name|QString
argument_list|(
literal|"  %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|defaultBuildParts
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-nomake<part>"
argument_list|,
literal|"Exclude part from the list of parts to be built.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-skip<module>"
argument_list|,
literal|"Exclude an entire module from the build.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-no-compile-examples"
argument_list|,
literal|"Install only the sources of examples.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"WIDGETS"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-widgets"
argument_list|,
literal|"Disable Qt Widgets module.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"GUI"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-gui"
argument_list|,
literal|"Disable Qt GUI module.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"ACCESSIBILITY"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-accessibility"
argument_list|,
literal|"Disable accessibility support.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|""
argument_list|,
literal|"Disabling accessibility is not recommended, as it will break QStyle\n"
literal|"and may break other internal parts of Qt.\n"
literal|"With this switch you create a source incompatible version of Qt,\n"
literal|"which is unsupported.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"ACCESSIBILITY"
argument_list|,
literal|"yes"
argument_list|,
literal|"-accessibility"
argument_list|,
literal|"Enable accessibility support.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-no-sql-<driver>"
argument_list|,
literal|"Disable SQL<driver> entirely, by default none are turned on."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-qt-sql-<driver>"
argument_list|,
literal|"Enable a SQL<driver> in the Qt Library."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-plugin-sql-<driver>"
argument_list|,
literal|"Enable SQL<driver> as a plugin to be linked to at run time.\n"
literal|"Available values for<driver>:"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"SQL_MYSQL"
argument_list|,
literal|"auto"
argument_list|,
literal|""
argument_list|,
literal|"  mysql"
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"SQL_PSQL"
argument_list|,
literal|"auto"
argument_list|,
literal|""
argument_list|,
literal|"  psql"
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"SQL_OCI"
argument_list|,
literal|"auto"
argument_list|,
literal|""
argument_list|,
literal|"  oci"
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"SQL_ODBC"
argument_list|,
literal|"auto"
argument_list|,
literal|""
argument_list|,
literal|"  odbc"
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"SQL_TDS"
argument_list|,
literal|"auto"
argument_list|,
literal|""
argument_list|,
literal|"  tds"
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"SQL_DB2"
argument_list|,
literal|"auto"
argument_list|,
literal|""
argument_list|,
literal|"  db2"
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"SQL_SQLITE"
argument_list|,
literal|"auto"
argument_list|,
literal|""
argument_list|,
literal|"  sqlite"
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"SQL_SQLITE2"
argument_list|,
literal|"auto"
argument_list|,
literal|""
argument_list|,
literal|"  sqlite2"
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"SQL_IBASE"
argument_list|,
literal|"auto"
argument_list|,
literal|""
argument_list|,
literal|"  ibase"
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|""
argument_list|,
literal|"(drivers marked with a '+' have been detected as available on this system)\n"
argument_list|,
literal|false
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-system-sqlite"
argument_list|,
literal|"Use sqlite from the operating system.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"OPENGL"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-opengl"
argument_list|,
literal|"Do not support OpenGL."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"OPENGL"
argument_list|,
literal|"no"
argument_list|,
literal|"-opengl<api>"
argument_list|,
literal|"Enable OpenGL support with specified API version.\n"
literal|"Available values for<api>:"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|""
argument_list|,
literal|"no"
argument_list|,
literal|""
argument_list|,
literal|"  desktop - Enable support for Desktop OpenGL"
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|""
argument_list|,
literal|"no"
argument_list|,
literal|""
argument_list|,
literal|"  dynamic - Enable support for dynamically loaded OpenGL (either desktop or ES)"
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"OPENGL_ES_2"
argument_list|,
literal|"yes"
argument_list|,
literal|""
argument_list|,
literal|"  es2 - Enable support for OpenGL ES 2.0\n"
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"OPENVG"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-openvg"
argument_list|,
literal|"Disables OpenVG functionality."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"OPENVG"
argument_list|,
literal|"yes"
argument_list|,
literal|"-openvg"
argument_list|,
literal|"Enables OpenVG functionality.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-force-asserts"
argument_list|,
literal|"Activate asserts in release mode.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-platform<spec>"
argument_list|,
literal|"The operating system and compiler you are building on.\n(default %QMAKESPEC%)\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-xplatform<spec>"
argument_list|,
literal|"The operating system and compiler you are cross compiling to.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|""
argument_list|,
literal|"See the README file for a list of supported operating systems and compilers.\n"
argument_list|,
literal|false
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"TARGET_OS"
argument_list|,
literal|"*"
argument_list|,
literal|"-target"
argument_list|,
literal|"Set target OS version. Currently the only valid value is 'xp' for targeting Windows XP.\n"
literal|"MSVC>= 2012 targets Windows Vista by default.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-sysroot<dir>"
argument_list|,
literal|"Sets<dir> as the target compiler's and qmake's sysroot and also sets pkg-config paths."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-no-gcc-sysroot"
argument_list|,
literal|"When using -sysroot, it disables the passing of --sysroot to the compiler.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-qconfig<local>"
argument_list|,
literal|"Use src/corelib/global/qconfig-<local>.h rather than the\n"
literal|"default 'full'.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"NIS"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-nis"
argument_list|,
literal|"Do not compile NIS support."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"NIS"
argument_list|,
literal|"yes"
argument_list|,
literal|"-nis"
argument_list|,
literal|"Compile NIS support.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"NEON"
argument_list|,
literal|"yes"
argument_list|,
literal|"-neon"
argument_list|,
literal|"Enable the use of NEON instructions."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"NEON"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-neon"
argument_list|,
literal|"Do not enable the use of NEON instructions.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"QT_ICONV"
argument_list|,
literal|"disable"
argument_list|,
literal|"-no-iconv"
argument_list|,
literal|"Do not enable support for iconv(3)."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"QT_ICONV"
argument_list|,
literal|"yes"
argument_list|,
literal|"-iconv"
argument_list|,
literal|"Enable support for iconv(3)."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"QT_ICONV"
argument_list|,
literal|"yes"
argument_list|,
literal|"-sun-iconv"
argument_list|,
literal|"Enable support for iconv(3) using sun-iconv."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"QT_ICONV"
argument_list|,
literal|"yes"
argument_list|,
literal|"-gnu-iconv"
argument_list|,
literal|"Enable support for iconv(3) using gnu-libiconv.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"QT_EVDEV"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-evdev"
argument_list|,
literal|"Do not enable support for evdev."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"QT_EVDEV"
argument_list|,
literal|"yes"
argument_list|,
literal|"-evdev"
argument_list|,
literal|"Enable support for evdev."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"QT_MTDEV"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-mtdev"
argument_list|,
literal|"Do not enable support for mtdev."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"QT_MTDEV"
argument_list|,
literal|"yes"
argument_list|,
literal|"-mtdev"
argument_list|,
literal|"Enable support for mtdev."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"QT_INOTIFY"
argument_list|,
literal|"yes"
argument_list|,
literal|"-inotify"
argument_list|,
literal|"Explicitly enable Qt inotify(7) support."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"QT_INOTIFY"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-inotify"
argument_list|,
literal|"Explicitly disable Qt inotify(7) support.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"QT_EVENTFD"
argument_list|,
literal|"yes"
argument_list|,
literal|"-eventfd"
argument_list|,
literal|"Enable eventfd(7) support in the UNIX event loop."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"QT_EVENTFD"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-eventfd"
argument_list|,
literal|"Disable eventfd(7) support in the UNIX event loop.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"LARGE_FILE"
argument_list|,
literal|"yes"
argument_list|,
literal|"-largefile"
argument_list|,
literal|"Enables Qt to access files larger than 4 GB.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"FONT_CONFIG"
argument_list|,
literal|"yes"
argument_list|,
literal|"-fontconfig"
argument_list|,
literal|"Build with FontConfig support."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"FONT_CONFIG"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-fontconfig"
argument_list|,
literal|"Do not build with FontConfig support.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"POSIX_IPC"
argument_list|,
literal|"yes"
argument_list|,
literal|"-posix-ipc"
argument_list|,
literal|"Enable POSIX IPC.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"QT_GLIB"
argument_list|,
literal|"yes"
argument_list|,
literal|"-glib"
argument_list|,
literal|"Compile Glib support.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"QT_INSTALL_SETTINGS"
argument_list|,
literal|"auto"
argument_list|,
literal|"-sysconfdir<dir>"
argument_list|,
literal|"Settings used by Qt programs will be looked for in\n<dir>.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"SYSTEM_PROXIES"
argument_list|,
literal|"yes"
argument_list|,
literal|"-system-proxies"
argument_list|,
literal|"Use system network proxies by default."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"SYSTEM_PROXIES"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-system-proxies"
argument_list|,
literal|"Do not use system network proxies by default.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"WERROR"
argument_list|,
literal|"yes"
argument_list|,
literal|"-warnings-are-errors"
argument_list|,
literal|"Make warnings be treated as errors."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"WERROR"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-warnings-are-errors"
argument_list|,
literal|"Make warnings be treated normally."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-qtnamespace<name>"
argument_list|,
literal|"Wraps all Qt library code in 'namespace name {...}'."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-qtlibinfix<infix>"
argument_list|,
literal|"Renames all Qt* libs to Qt*<infix>.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-D<define>"
argument_list|,
literal|"Add an explicit define to the preprocessor."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-I<includepath>"
argument_list|,
literal|"Add an explicit include path."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-L<librarypath>"
argument_list|,
literal|"Add an explicit library path."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-l<libraryname>"
argument_list|,
literal|"Add an explicit library name, residing in a librarypath.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-help, -h, -?"
argument_list|,
literal|"Display this information.\n"
argument_list|)
expr_stmt|;
comment|// 3rd party stuff options go below here --------------------------------------------------------------------------------
name|desc
argument_list|(
literal|"Third Party Libraries:\n\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"ZLIB"
argument_list|,
literal|"qt"
argument_list|,
literal|"-qt-zlib"
argument_list|,
literal|"Use the zlib bundled with Qt."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"ZLIB"
argument_list|,
literal|"system"
argument_list|,
literal|"-system-zlib"
argument_list|,
literal|"Use zlib from the operating system.\nSee http://www.gzip.org/zlib\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"PCRE"
argument_list|,
literal|"qt"
argument_list|,
literal|"-qt-pcre"
argument_list|,
literal|"Use the PCRE library bundled with Qt."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"PCRE"
argument_list|,
literal|"system"
argument_list|,
literal|"-system-pcre"
argument_list|,
literal|"Use the PCRE library from the operating system.\nSee http://pcre.org/\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"ICU"
argument_list|,
literal|"yes"
argument_list|,
literal|"-icu"
argument_list|,
literal|"Use the ICU library."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"ICU"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-icu"
argument_list|,
literal|"Do not use the ICU library.\nSee http://site.icu-project.org/\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"GIF"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-gif"
argument_list|,
literal|"Do not compile GIF reading support.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"LIBPNG"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-libpng"
argument_list|,
literal|"Do not compile PNG support."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"LIBPNG"
argument_list|,
literal|"qt"
argument_list|,
literal|"-qt-libpng"
argument_list|,
literal|"Use the libpng bundled with Qt."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"LIBPNG"
argument_list|,
literal|"system"
argument_list|,
literal|"-system-libpng"
argument_list|,
literal|"Use libpng from the operating system.\nSee http://www.libpng.org/pub/png\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"LIBJPEG"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-libjpeg"
argument_list|,
literal|"Do not compile JPEG support."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"LIBJPEG"
argument_list|,
literal|"qt"
argument_list|,
literal|"-qt-libjpeg"
argument_list|,
literal|"Use the libjpeg bundled with Qt."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"LIBJPEG"
argument_list|,
literal|"system"
argument_list|,
literal|"-system-libjpeg"
argument_list|,
literal|"Use libjpeg from the operating system.\nSee http://www.ijg.org\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"FREETYPE"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-freetype"
argument_list|,
literal|"Do not compile in Freetype2 support."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"FREETYPE"
argument_list|,
literal|"yes"
argument_list|,
literal|"-qt-freetype"
argument_list|,
literal|"Use the libfreetype bundled with Qt."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"FREETYPE"
argument_list|,
literal|"system"
argument_list|,
literal|"-system-freetype"
argument_list|,
literal|"Use the libfreetype provided by the system."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"HARFBUZZ"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-harfbuzz"
argument_list|,
literal|"Do not compile in HarfBuzz-NG support."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"HARFBUZZ"
argument_list|,
literal|"yes"
argument_list|,
literal|"-qt-harfbuzz"
argument_list|,
literal|"(experimental) Use HarfBuzz-NG bundled with Qt\n"
literal|"to do text shaping. It can still be disabled\n"
literal|"by setting QT_HARFBUZZ environment variable to \"old\"."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"HARFBUZZ"
argument_list|,
literal|"system"
argument_list|,
literal|"-system-harfbuzz"
argument_list|,
literal|"(experimental) Use HarfBuzz-NG from the operating system\n"
literal|"to do text shaping. It can still be disabled\n"
literal|"by setting QT_HARFBUZZ environment variable to \"old\".\n"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|platform
argument_list|()
operator|==
name|QNX
operator|)
operator|||
operator|(
name|platform
argument_list|()
operator|==
name|BLACKBERRY
operator|)
condition|)
block|{
name|desc
argument_list|(
literal|"SLOG2"
argument_list|,
literal|"yes"
argument_list|,
literal|"-slog2"
argument_list|,
literal|"Compile with slog2 support."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"SLOG2"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-slog2"
argument_list|,
literal|"Do not compile with slog2 support."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"QNX_IMF"
argument_list|,
literal|"yes"
argument_list|,
literal|"-imf"
argument_list|,
literal|"Compile with imf support."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"QNX_IMF"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-imf"
argument_list|,
literal|"Do not compile with imf support."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"PPS"
argument_list|,
literal|"yes"
argument_list|,
literal|"-pps"
argument_list|,
literal|"Compile with PPS support."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"PPS"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-pps"
argument_list|,
literal|"Do not compile with PPS support."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"LGMON"
argument_list|,
literal|"yes"
argument_list|,
literal|"-lgmon"
argument_list|,
literal|"Compile with lgmon support."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"LGMON"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-lgmon"
argument_list|,
literal|"Do not compile with lgmon support.\n"
argument_list|)
expr_stmt|;
block|}
name|desc
argument_list|(
literal|"ANGLE"
argument_list|,
literal|"yes"
argument_list|,
literal|"-angle"
argument_list|,
literal|"Use the ANGLE implementation of OpenGL ES 2.0."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"ANGLE"
argument_list|,
literal|"d3d11"
argument_list|,
literal|"-angle-d3d11"
argument_list|,
literal|"Use the Direct3D 11-based ANGLE implementation of OpenGL ES 2.0."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"ANGLE"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-angle"
argument_list|,
literal|"Do not use ANGLE.\nSee http://code.google.com/p/angleproject/\n"
argument_list|)
expr_stmt|;
comment|// Qt\Windows only options go below here --------------------------------------------------------------------------------
name|desc
argument_list|(
literal|"\nQt for Windows only:\n\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"VCPROJFILES"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-vcproj"
argument_list|,
literal|"Do not generate VC++ .vcproj files."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"VCPROJFILES"
argument_list|,
literal|"yes"
argument_list|,
literal|"-vcproj"
argument_list|,
literal|"Generate VC++ .vcproj files, only if platform \"win32-msvc.net\".\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"INCREDIBUILD_XGE"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-incredibuild-xge"
argument_list|,
literal|"Do not add IncrediBuild XGE distribution commands to custom build steps."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"INCREDIBUILD_XGE"
argument_list|,
literal|"yes"
argument_list|,
literal|"-incredibuild-xge"
argument_list|,
literal|"Add IncrediBuild XGE distribution commands to custom build steps. This will distribute MOC and UIC steps, and other custom buildsteps which are added to the INCREDIBUILD_XGE variable.\n(The IncrediBuild distribution commands are only added to Visual Studio projects)\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"PLUGIN_MANIFESTS"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-plugin-manifests"
argument_list|,
literal|"Do not embed manifests in plugins."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"PLUGIN_MANIFESTS"
argument_list|,
literal|"yes"
argument_list|,
literal|"-plugin-manifests"
argument_list|,
literal|"Embed manifests in plugins.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"BUILD_QMAKE"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-qmake"
argument_list|,
literal|"Do not compile qmake."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"BUILD_QMAKE"
argument_list|,
literal|"yes"
argument_list|,
literal|"-qmake"
argument_list|,
literal|"Compile qmake.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"PROCESS"
argument_list|,
literal|"partial"
argument_list|,
literal|"-process"
argument_list|,
literal|"Generate only top-level Makefile."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"PROCESS"
argument_list|,
literal|"full"
argument_list|,
literal|"-fully-process"
argument_list|,
literal|"Generate Makefiles/Project files for the entire Qt\ntree."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"PROCESS"
argument_list|,
literal|"no"
argument_list|,
literal|"-dont-process"
argument_list|,
literal|"Do not generate Makefiles/Project files.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-qreal [double|float]"
argument_list|,
literal|"typedef qreal to the specified type. The default is double.\n"
literal|"Note that changing this flag affects binary compatibility.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"RTTI"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-rtti"
argument_list|,
literal|"Do not compile runtime type information."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"RTTI"
argument_list|,
literal|"yes"
argument_list|,
literal|"-rtti"
argument_list|,
literal|"Compile runtime type information."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"STRIP"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-strip"
argument_list|,
literal|"Do not strip libraries and executables of debug info when installing."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"STRIP"
argument_list|,
literal|"yes"
argument_list|,
literal|"-strip"
argument_list|,
literal|"Strip libraries and executables of debug info when installing.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"SSE2"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-sse2"
argument_list|,
literal|"Do not compile with use of SSE2 instructions."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"SSE2"
argument_list|,
literal|"yes"
argument_list|,
literal|"-sse2"
argument_list|,
literal|"Compile with use of SSE2 instructions."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"SSE3"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-sse3"
argument_list|,
literal|"Do not compile with use of SSE3 instructions."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"SSE3"
argument_list|,
literal|"yes"
argument_list|,
literal|"-sse3"
argument_list|,
literal|"Compile with use of SSE3 instructions."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"SSSE3"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-ssse3"
argument_list|,
literal|"Do not compile with use of SSSE3 instructions."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"SSSE3"
argument_list|,
literal|"yes"
argument_list|,
literal|"-ssse3"
argument_list|,
literal|"Compile with use of SSSE3 instructions."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"SSE4_1"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-sse4.1"
argument_list|,
literal|"Do not compile with use of SSE4.1 instructions."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"SSE4_1"
argument_list|,
literal|"yes"
argument_list|,
literal|"-sse4.1"
argument_list|,
literal|"Compile with use of SSE4.1 instructions."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"SSE4_2"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-sse4.2"
argument_list|,
literal|"Do not compile with use of SSE4.2 instructions."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"SSE4_2"
argument_list|,
literal|"yes"
argument_list|,
literal|"-sse4.2"
argument_list|,
literal|"Compile with use of SSE4.2 instructions."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"AVX"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-avx"
argument_list|,
literal|"Do not compile with use of AVX instructions."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"AVX"
argument_list|,
literal|"yes"
argument_list|,
literal|"-avx"
argument_list|,
literal|"Compile with use of AVX instructions."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"AVX2"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-avx2"
argument_list|,
literal|"Do not compile with use of AVX2 instructions."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"AVX2"
argument_list|,
literal|"yes"
argument_list|,
literal|"-avx2"
argument_list|,
literal|"Compile with use of AVX2 instructions.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"OPENSSL"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-openssl"
argument_list|,
literal|"Do not compile support for OpenSSL."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"OPENSSL"
argument_list|,
literal|"yes"
argument_list|,
literal|"-openssl"
argument_list|,
literal|"Enable run-time OpenSSL support."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"OPENSSL"
argument_list|,
literal|"linked"
argument_list|,
literal|"-openssl-linked"
argument_list|,
literal|"Enable linked OpenSSL support.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"DBUS"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-dbus"
argument_list|,
literal|"Do not compile in D-Bus support."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"DBUS"
argument_list|,
literal|"yes"
argument_list|,
literal|"-dbus"
argument_list|,
literal|"Compile in D-Bus support and load libdbus-1\ndynamically."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"DBUS"
argument_list|,
literal|"linked"
argument_list|,
literal|"-dbus-linked"
argument_list|,
literal|"Compile in D-Bus support and link to libdbus-1.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"AUDIO_BACKEND"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-audio-backend"
argument_list|,
literal|"Do not compile in the platform audio backend into\nQt Multimedia."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"AUDIO_BACKEND"
argument_list|,
literal|"yes"
argument_list|,
literal|"-audio-backend"
argument_list|,
literal|"Compile in the platform audio backend into Qt Multimedia.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"WMF_BACKEND"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-wmf-backend"
argument_list|,
literal|"Do not compile in the windows media foundation backend\ninto Qt Multimedia."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"WMF_BACKEND"
argument_list|,
literal|"yes"
argument_list|,
literal|"-wmf-backend"
argument_list|,
literal|"Compile in the windows media foundation backend into Qt Multimedia.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"QML_DEBUG"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-qml-debug"
argument_list|,
literal|"Do not build the in-process QML debugging support."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"QML_DEBUG"
argument_list|,
literal|"yes"
argument_list|,
literal|"-qml-debug"
argument_list|,
literal|"Build the in-process QML debugging support.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"DIRECTWRITE"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-directwrite"
argument_list|,
literal|"Do not build support for DirectWrite font rendering."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"DIRECTWRITE"
argument_list|,
literal|"yes"
argument_list|,
literal|"-directwrite"
argument_list|,
literal|"Build support for DirectWrite font rendering (experimental, requires DirectWrite availability on target systems, e.g. Windows Vista with Platform Update, Windows 7, etc.)\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"DIRECT2D"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-direct2d"
argument_list|,
literal|"Do not build the Direct2D platform plugin."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"DIRECT2D"
argument_list|,
literal|"yes"
argument_list|,
literal|"-direct2d"
argument_list|,
literal|"Build the Direct2D platform plugin (experimental,\n"
literal|"requires Direct2D availability on target systems,\n"
literal|"e.g. Windows 7 with Platform Update, Windows 8, etc.)\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-no-style-<style>"
argument_list|,
literal|"Disable<style> entirely."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-qt-style-<style>"
argument_list|,
literal|"Enable<style> in the Qt Library.\nAvailable styles: "
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"STYLE_WINDOWS"
argument_list|,
literal|"yes"
argument_list|,
literal|""
argument_list|,
literal|"  windows"
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"STYLE_WINDOWSXP"
argument_list|,
literal|"auto"
argument_list|,
literal|""
argument_list|,
literal|"  windowsxp"
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"STYLE_WINDOWSVISTA"
argument_list|,
literal|"auto"
argument_list|,
literal|""
argument_list|,
literal|"  windowsvista"
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"STYLE_FUSION"
argument_list|,
literal|"yes"
argument_list|,
literal|""
argument_list|,
literal|"  fusion"
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"STYLE_WINDOWSCE"
argument_list|,
literal|"yes"
argument_list|,
literal|""
argument_list|,
literal|"  windowsce"
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"STYLE_WINDOWSMOBILE"
argument_list|,
literal|"yes"
argument_list|,
literal|""
argument_list|,
literal|"  windowsmobile\n"
argument_list|,
literal|' '
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"NATIVE_GESTURES"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-native-gestures"
argument_list|,
literal|"Do not use native gestures on Windows 7."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"NATIVE_GESTURES"
argument_list|,
literal|"yes"
argument_list|,
literal|"-native-gestures"
argument_list|,
literal|"Use native gestures on Windows 7.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"MSVC_MP"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-mp"
argument_list|,
literal|"Do not use multiple processors for compiling with MSVC"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"MSVC_MP"
argument_list|,
literal|"yes"
argument_list|,
literal|"-mp"
argument_list|,
literal|"Use multiple processors for compiling with MSVC (-MP).\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-loadconfig<config>"
argument_list|,
literal|"Run configure with the parameters from file configure_<config>.cache."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-saveconfig<config>"
argument_list|,
literal|"Run configure and save the parameters in file configure_<config>.cache."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-redo"
argument_list|,
literal|"Run configure with the same parameters as last time.\n"
argument_list|)
expr_stmt|;
comment|// Qt\Windows CE only options go below here -----------------------------------------------------------------------------
name|desc
argument_list|(
literal|"Qt for Windows CE only:\n\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"IWMMXT"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-iwmmxt"
argument_list|,
literal|"Do not compile with use of IWMMXT instructions."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"IWMMXT"
argument_list|,
literal|"yes"
argument_list|,
literal|"-iwmmxt"
argument_list|,
literal|"Do compile with use of IWMMXT instructions. (Qt for Windows CE on Arm only)\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"CE_CRT"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-crt"
argument_list|,
literal|"Do not add the C runtime to default deployment rules."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"CE_CRT"
argument_list|,
literal|"yes"
argument_list|,
literal|"-qt-crt"
argument_list|,
literal|"Qt identifies C runtime during project generation."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-crt<path>"
argument_list|,
literal|"Specify path to C runtime used for project generation.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"CETEST"
argument_list|,
literal|"no"
argument_list|,
literal|"-no-cetest"
argument_list|,
literal|"Do not compile Windows CE remote test application."
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"CETEST"
argument_list|,
literal|"yes"
argument_list|,
literal|"-cetest"
argument_list|,
literal|"Compile Windows CE remote test application.\n"
argument_list|)
expr_stmt|;
name|desc
argument_list|(
literal|"-signature<file>"
argument_list|,
literal|"Use<file> for signing the target project."
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|// Locate a file and return its containing directory.
end_comment
begin_function
DECL|function|locateFile
name|QString
name|Configure
operator|::
name|locateFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
specifier|const
block|{
specifier|const
name|QString
name|file
init|=
name|fileName
operator|.
name|toLower
argument_list|()
decl_stmt|;
name|QStringList
name|pathList
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|endsWith
argument_list|(
literal|".h"
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|QStringList
name|headerPaths
init|=
name|Environment
operator|::
name|headerPaths
argument_list|(
name|Environment
operator|::
name|compilerFromQMakeSpec
argument_list|(
name|dictionary
index|[
name|QStringLiteral
argument_list|(
literal|"QMAKESPEC"
argument_list|)
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|pathList
operator|=
name|headerPaths
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|file
operator|.
name|endsWith
argument_list|(
literal|".lib"
argument_list|)
operator|||
name|file
operator|.
name|endsWith
argument_list|(
literal|".a"
argument_list|)
condition|)
block|{
specifier|static
specifier|const
name|QStringList
name|libPaths
init|=
name|Environment
operator|::
name|libraryPaths
argument_list|(
name|Environment
operator|::
name|compilerFromQMakeSpec
argument_list|(
name|dictionary
index|[
name|QStringLiteral
argument_list|(
literal|"QMAKESPEC"
argument_list|)
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|pathList
operator|=
name|libPaths
expr_stmt|;
block|}
else|else
block|{
comment|// Fallback for .exe and .dll (latter are not covered by QStandardPaths).
specifier|static
specifier|const
name|QStringList
name|exePaths
init|=
name|Environment
operator|::
name|path
argument_list|()
decl_stmt|;
name|pathList
operator|=
name|exePaths
expr_stmt|;
block|}
return|return
name|Environment
operator|::
name|findFileInPaths
argument_list|(
name|file
argument_list|,
name|pathList
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!     Default value for options marked as "auto" if the test passes.     (Used both by the autoDetection() below, and the desc() function     to mark (+) the default option of autodetecting options. */
end_comment
begin_function
DECL|function|defaultTo
name|QString
name|Configure
operator|::
name|defaultTo
parameter_list|(
specifier|const
name|QString
modifier|&
name|option
parameter_list|)
block|{
comment|// We prefer using the system version of the 3rd party libs
if|if
condition|(
name|option
operator|==
literal|"ZLIB"
operator|||
name|option
operator|==
literal|"PCRE"
operator|||
name|option
operator|==
literal|"LIBJPEG"
operator|||
name|option
operator|==
literal|"LIBPNG"
condition|)
return|return
literal|"system"
return|;
comment|// PNG is always built-in, never a plugin
if|if
condition|(
name|option
operator|==
literal|"PNG"
condition|)
return|return
literal|"yes"
return|;
comment|// These database drivers and image formats can be built-in or plugins.
comment|// Prefer plugins when Qt is shared.
if|if
condition|(
name|dictionary
index|[
literal|"SHARED"
index|]
operator|==
literal|"yes"
condition|)
block|{
if|if
condition|(
name|option
operator|==
literal|"SQL_MYSQL"
operator|||
name|option
operator|==
literal|"SQL_MYSQL"
operator|||
name|option
operator|==
literal|"SQL_ODBC"
operator|||
name|option
operator|==
literal|"SQL_OCI"
operator|||
name|option
operator|==
literal|"SQL_PSQL"
operator|||
name|option
operator|==
literal|"SQL_TDS"
operator|||
name|option
operator|==
literal|"SQL_DB2"
operator|||
name|option
operator|==
literal|"SQL_SQLITE"
operator|||
name|option
operator|==
literal|"SQL_SQLITE2"
operator|||
name|option
operator|==
literal|"SQL_IBASE"
operator|||
name|option
operator|==
literal|"JPEG"
operator|||
name|option
operator|==
literal|"GIF"
condition|)
return|return
literal|"plugin"
return|;
block|}
comment|// By default we do not want to compile OCI driver when compiling with
comment|// MinGW, due to lack of such support from Oracle. It prob. won't work.
comment|// (Customer may force the use though)
if|if
condition|(
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|.
name|endsWith
argument_list|(
literal|"-g++"
argument_list|)
operator|&&
name|option
operator|==
literal|"SQL_OCI"
condition|)
return|return
literal|"no"
return|;
comment|// keep 'auto' default for msvc, since we can't set the language supported
if|if
condition|(
name|option
operator|==
literal|"C++11"
operator|&&
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|.
name|contains
argument_list|(
literal|"msvc"
argument_list|)
condition|)
return|return
literal|"auto"
return|;
if|if
condition|(
name|option
operator|==
literal|"SYNCQT"
operator|&&
operator|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
name|sourcePath
operator|+
literal|"/.git"
argument_list|)
operator|)
condition|)
return|return
literal|"no"
return|;
return|return
literal|"yes"
return|;
block|}
end_function
begin_function
DECL|function|checkAngleAvailability
name|bool
name|Configure
operator|::
name|checkAngleAvailability
parameter_list|(
name|QString
modifier|*
name|errorMessage
comment|/* = 0 */
parameter_list|)
specifier|const
block|{
comment|// Check for Direct X SDK (include lib and direct shader compiler 'fxc').
comment|// Up to Direct X SDK June 2010 and for MinGW, this is pointed to by the
comment|// DXSDK_DIR variable. Starting with Windows Kit 8, it is included
comment|// in the Windows SDK. Checking for the header is not sufficient since
comment|// it is also  present in MinGW.
specifier|const
name|QString
name|directXSdk
init|=
name|Environment
operator|::
name|detectDirectXSdk
argument_list|()
decl_stmt|;
specifier|const
name|Compiler
name|compiler
init|=
name|Environment
operator|::
name|compilerFromQMakeSpec
argument_list|(
name|dictionary
index|[
name|QStringLiteral
argument_list|(
literal|"QMAKESPEC"
argument_list|)
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|compiler
operator|<
name|CC_NET2012
operator|&&
name|directXSdk
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|errorMessage
condition|)
operator|*
name|errorMessage
operator|=
name|QStringLiteral
argument_list|(
literal|"There is no Direct X SDK installed or the environment variable \"DXSDK_DIR\" is not set."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|const
name|QString
name|compilerHeader
init|=
name|QStringLiteral
argument_list|(
literal|"d3dcompiler.h"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|findFile
argument_list|(
name|compilerHeader
argument_list|)
condition|)
block|{
if|if
condition|(
name|errorMessage
condition|)
operator|*
name|errorMessage
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"The header '%1' could not be found."
argument_list|)
operator|.
name|arg
argument_list|(
name|compilerHeader
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|dictionary
index|[
literal|"SSE2"
index|]
operator|!=
literal|"no"
condition|)
block|{
specifier|const
name|QString
name|intrinHeader
init|=
name|QStringLiteral
argument_list|(
literal|"intrin.h"
argument_list|)
decl_stmt|;
comment|// Not present on MinGW-32
if|if
condition|(
operator|!
name|findFile
argument_list|(
name|intrinHeader
argument_list|)
condition|)
block|{
if|if
condition|(
name|errorMessage
condition|)
operator|*
name|errorMessage
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"The header '%1' required for SSE2 could not be found."
argument_list|)
operator|.
name|arg
argument_list|(
name|intrinHeader
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
specifier|const
name|QString
name|directXLibrary
init|=
name|dictionary
index|[
literal|"ANGLE"
index|]
operator|==
literal|"d3d11"
condition|?
name|QStringLiteral
argument_list|(
literal|"d3d11.lib"
argument_list|)
else|:
name|QStringLiteral
argument_list|(
literal|"d3d9.lib"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|findFile
argument_list|(
name|directXLibrary
argument_list|)
condition|)
block|{
if|if
condition|(
name|errorMessage
condition|)
operator|*
name|errorMessage
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"The library '%1' could not be found."
argument_list|)
operator|.
name|arg
argument_list|(
name|directXLibrary
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
specifier|const
name|QString
name|fxcBinary
init|=
name|QStringLiteral
argument_list|(
literal|"fxc.exe"
argument_list|)
decl_stmt|;
name|QStringList
name|additionalPaths
decl_stmt|;
if|if
condition|(
operator|!
name|directXSdk
operator|.
name|isEmpty
argument_list|()
condition|)
name|additionalPaths
operator|.
name|push_back
argument_list|(
name|directXSdk
operator|+
name|QStringLiteral
argument_list|(
literal|"/Utilities/bin/x86"
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|fxcPath
init|=
name|QStandardPaths
operator|::
name|findExecutable
argument_list|(
name|fxcBinary
argument_list|,
name|additionalPaths
argument_list|)
decl_stmt|;
if|if
condition|(
name|fxcPath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|errorMessage
condition|)
operator|*
name|errorMessage
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"The shader compiler '%1' could not be found."
argument_list|)
operator|.
name|arg
argument_list|(
name|fxcBinary
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|/*!     Checks the system for the availability of a feature.     Returns true if the feature is available, else false. */
end_comment
begin_function
DECL|function|checkAvailability
name|bool
name|Configure
operator|::
name|checkAvailability
parameter_list|(
specifier|const
name|QString
modifier|&
name|part
parameter_list|)
block|{
name|bool
name|available
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|part
operator|==
literal|"STYLE_WINDOWSXP"
condition|)
name|available
operator|=
operator|(
name|platform
argument_list|()
operator|==
name|WINDOWS
operator|)
operator|&&
name|findFile
argument_list|(
literal|"uxtheme.h"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"OBJCOPY"
condition|)
name|available
operator|=
name|tryCompileProject
argument_list|(
literal|"unix/objcopy"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"ZLIB"
condition|)
name|available
operator|=
name|findFile
argument_list|(
literal|"zlib.h"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"PCRE"
condition|)
name|available
operator|=
name|findFile
argument_list|(
literal|"pcre.h"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"ICU"
condition|)
name|available
operator|=
name|tryCompileProject
argument_list|(
literal|"unix/icu"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"ANGLE"
condition|)
block|{
name|available
operator|=
name|checkAngleAvailability
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|part
operator|==
literal|"HARFBUZZ"
condition|)
name|available
operator|=
name|tryCompileProject
argument_list|(
literal|"unix/harfbuzz"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"LIBJPEG"
condition|)
name|available
operator|=
name|findFile
argument_list|(
literal|"jpeglib.h"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"LIBPNG"
condition|)
name|available
operator|=
name|findFile
argument_list|(
literal|"png.h"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"SQL_MYSQL"
condition|)
name|available
operator|=
name|findFile
argument_list|(
literal|"mysql.h"
argument_list|)
operator|&&
name|findFile
argument_list|(
literal|"libmySQL.lib"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"SQL_ODBC"
condition|)
name|available
operator|=
name|findFile
argument_list|(
literal|"sql.h"
argument_list|)
operator|&&
name|findFile
argument_list|(
literal|"sqlext.h"
argument_list|)
operator|&&
name|findFile
argument_list|(
literal|"odbc32.lib"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"SQL_OCI"
condition|)
name|available
operator|=
name|findFile
argument_list|(
literal|"oci.h"
argument_list|)
operator|&&
name|findFile
argument_list|(
literal|"oci.lib"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"SQL_PSQL"
condition|)
name|available
operator|=
name|findFile
argument_list|(
literal|"libpq-fe.h"
argument_list|)
operator|&&
name|findFile
argument_list|(
literal|"libpq.lib"
argument_list|)
operator|&&
name|findFile
argument_list|(
literal|"ws2_32.lib"
argument_list|)
operator|&&
name|findFile
argument_list|(
literal|"advapi32.lib"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"SQL_TDS"
condition|)
name|available
operator|=
name|findFile
argument_list|(
literal|"sybfront.h"
argument_list|)
operator|&&
name|findFile
argument_list|(
literal|"sybdb.h"
argument_list|)
operator|&&
name|findFile
argument_list|(
literal|"ntwdblib.lib"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"SQL_DB2"
condition|)
name|available
operator|=
name|findFile
argument_list|(
literal|"sqlcli.h"
argument_list|)
operator|&&
name|findFile
argument_list|(
literal|"sqlcli1.h"
argument_list|)
operator|&&
name|findFile
argument_list|(
literal|"db2cli.lib"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"SQL_SQLITE"
condition|)
name|available
operator|=
literal|true
expr_stmt|;
comment|// Built in, we have a fork
elseif|else
if|if
condition|(
name|part
operator|==
literal|"SQL_SQLITE_LIB"
condition|)
block|{
if|if
condition|(
name|dictionary
index|[
literal|"SQL_SQLITE_LIB"
index|]
operator|==
literal|"system"
condition|)
block|{
if|if
condition|(
operator|(
name|platform
argument_list|()
operator|==
name|QNX
operator|)
operator|||
operator|(
name|platform
argument_list|()
operator|==
name|BLACKBERRY
operator|)
condition|)
block|{
name|available
operator|=
literal|true
expr_stmt|;
name|dictionary
index|[
literal|"QT_LFLAGS_SQLITE"
index|]
operator|+=
literal|"-lsqlite3 -lz"
expr_stmt|;
block|}
else|else
block|{
name|available
operator|=
name|findFile
argument_list|(
literal|"sqlite3.h"
argument_list|)
operator|&&
name|findFile
argument_list|(
literal|"sqlite3.lib"
argument_list|)
expr_stmt|;
if|if
condition|(
name|available
condition|)
name|dictionary
index|[
literal|"QT_LFLAGS_SQLITE"
index|]
operator|+=
literal|"sqlite3.lib"
expr_stmt|;
block|}
block|}
else|else
block|{
name|available
operator|=
literal|true
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|part
operator|==
literal|"SQL_SQLITE2"
condition|)
name|available
operator|=
name|findFile
argument_list|(
literal|"sqlite.h"
argument_list|)
operator|&&
name|findFile
argument_list|(
literal|"sqlite.lib"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"SQL_IBASE"
condition|)
name|available
operator|=
name|findFile
argument_list|(
literal|"ibase.h"
argument_list|)
operator|&&
operator|(
name|findFile
argument_list|(
literal|"gds32_ms.lib"
argument_list|)
operator|||
name|findFile
argument_list|(
literal|"gds32.lib"
argument_list|)
operator|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"IWMMXT"
condition|)
name|available
operator|=
operator|(
name|dictionary
operator|.
name|value
argument_list|(
literal|"XQMAKESPEC"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"wince"
argument_list|)
operator|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"OPENGL_ES_2"
condition|)
name|available
operator|=
operator|(
name|dictionary
operator|.
name|value
argument_list|(
literal|"XQMAKESPEC"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"wince"
argument_list|)
operator|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"SSE2"
condition|)
name|available
operator|=
name|tryCompileProject
argument_list|(
literal|"common/sse2"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"SSE3"
condition|)
name|available
operator|=
name|tryCompileProject
argument_list|(
literal|"common/sse3"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"SSSE3"
condition|)
name|available
operator|=
name|tryCompileProject
argument_list|(
literal|"common/ssse3"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"SSE4_1"
condition|)
name|available
operator|=
name|tryCompileProject
argument_list|(
literal|"common/sse4_1"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"SSE4_2"
condition|)
name|available
operator|=
name|tryCompileProject
argument_list|(
literal|"common/sse4_2"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"AVX"
condition|)
name|available
operator|=
name|tryCompileProject
argument_list|(
literal|"common/avx"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"AVX2"
condition|)
name|available
operator|=
name|tryCompileProject
argument_list|(
literal|"common/avx2"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"OPENSSL"
condition|)
name|available
operator|=
name|findFile
argument_list|(
literal|"openssl\\ssl.h"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"DBUS"
condition|)
name|available
operator|=
name|findFile
argument_list|(
literal|"dbus\\dbus.h"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|part
operator|==
literal|"CETEST"
condition|)
block|{
specifier|const
name|QString
name|rapiHeader
init|=
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|locateFile
argument_list|(
literal|"rapi.h"
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|rapiLib
init|=
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|locateFile
argument_list|(
literal|"rapi.lib"
argument_list|)
argument_list|)
decl_stmt|;
name|available
operator|=
operator|(
name|dictionary
operator|.
name|value
argument_list|(
literal|"XQMAKESPEC"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"wince"
argument_list|)
operator|)
operator|&&
operator|!
name|rapiHeader
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|rapiLib
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
if|if
condition|(
name|available
condition|)
block|{
name|dictionary
index|[
literal|"QT_CE_RAPI_INC"
index|]
operator|+=
name|QLatin1String
argument_list|(
literal|"\""
argument_list|)
operator|+
name|rapiHeader
operator|+
name|QLatin1String
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
name|dictionary
index|[
literal|"QT_CE_RAPI_LIB"
index|]
operator|+=
name|QLatin1String
argument_list|(
literal|"\""
argument_list|)
operator|+
name|rapiLib
operator|+
name|QLatin1String
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dictionary
index|[
literal|"CETEST_REQUESTED"
index|]
operator|==
literal|"yes"
condition|)
block|{
name|cout
operator|<<
literal|"cetest could not be enabled: rapi.h and rapi.lib could not be found."
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"Make sure the environment is set up for compiling with ActiveSync."
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|part
operator|==
literal|"INCREDIBUILD_XGE"
condition|)
block|{
name|available
operator|=
operator|!
name|QStandardPaths
operator|::
name|findExecutable
argument_list|(
name|QStringLiteral
argument_list|(
literal|"BuildConsole.exe"
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|QStandardPaths
operator|::
name|findExecutable
argument_list|(
name|QStringLiteral
argument_list|(
literal|"xgConsole.exe"
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|part
operator|==
literal|"WMSDK"
condition|)
block|{
name|available
operator|=
name|findFile
argument_list|(
literal|"wmsdk.h"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|part
operator|==
literal|"AUDIO_BACKEND"
condition|)
block|{
name|available
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|part
operator|==
literal|"WMF_BACKEND"
condition|)
block|{
name|available
operator|=
name|findFile
argument_list|(
literal|"mfapi.h"
argument_list|)
operator|&&
name|findFile
argument_list|(
literal|"mf.lib"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|part
operator|==
literal|"DIRECTWRITE"
condition|)
block|{
name|available
operator|=
name|findFile
argument_list|(
literal|"dwrite.h"
argument_list|)
operator|&&
name|findFile
argument_list|(
literal|"d2d1.h"
argument_list|)
operator|&&
name|findFile
argument_list|(
literal|"dwrite.lib"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|part
operator|==
literal|"DIRECT2D"
condition|)
block|{
name|available
operator|=
name|tryCompileProject
argument_list|(
literal|"qpa/direct2d"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|part
operator|==
literal|"ICONV"
condition|)
block|{
name|available
operator|=
name|tryCompileProject
argument_list|(
literal|"unix/iconv"
argument_list|)
operator|||
name|tryCompileProject
argument_list|(
literal|"unix/gnu-libiconv"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|part
operator|==
literal|"EVDEV"
condition|)
block|{
name|available
operator|=
name|tryCompileProject
argument_list|(
literal|"unix/evdev"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|part
operator|==
literal|"MTDEV"
condition|)
block|{
name|available
operator|=
name|tryCompileProject
argument_list|(
literal|"unix/mtdev"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|part
operator|==
literal|"INOTIFY"
condition|)
block|{
name|available
operator|=
name|tryCompileProject
argument_list|(
literal|"unix/inotify"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|part
operator|==
literal|"QT_EVENTFD"
condition|)
block|{
name|available
operator|=
name|tryCompileProject
argument_list|(
literal|"unix/eventfd"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|part
operator|==
literal|"CUPS"
condition|)
block|{
name|available
operator|=
operator|(
name|platform
argument_list|()
operator|!=
name|WINDOWS
operator|)
operator|&&
operator|(
name|platform
argument_list|()
operator|!=
name|WINDOWS_CE
operator|)
operator|&&
operator|(
name|platform
argument_list|()
operator|!=
name|WINDOWS_RT
operator|)
operator|&&
name|tryCompileProject
argument_list|(
literal|"unix/cups"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|part
operator|==
literal|"STACK_PROTECTOR_STRONG"
condition|)
block|{
name|available
operator|=
operator|(
name|platform
argument_list|()
operator|==
name|QNX
operator|||
name|platform
argument_list|()
operator|==
name|BLACKBERRY
operator|)
operator|&&
name|compilerSupportsFlag
argument_list|(
literal|"qcc -fstack-protector-strong"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|part
operator|==
literal|"SLOG2"
condition|)
block|{
name|available
operator|=
name|tryCompileProject
argument_list|(
literal|"unix/slog2"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|part
operator|==
literal|"QNX_IMF"
condition|)
block|{
name|available
operator|=
name|tryCompileProject
argument_list|(
literal|"unix/qqnx_imf"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|part
operator|==
literal|"PPS"
condition|)
block|{
name|available
operator|=
operator|(
name|platform
argument_list|()
operator|==
name|QNX
operator|||
name|platform
argument_list|()
operator|==
name|BLACKBERRY
operator|)
operator|&&
name|tryCompileProject
argument_list|(
literal|"unix/pps"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|part
operator|==
literal|"LGMON"
condition|)
block|{
name|available
operator|=
operator|(
name|platform
argument_list|()
operator|==
name|QNX
operator|||
name|platform
argument_list|()
operator|==
name|BLACKBERRY
operator|)
operator|&&
name|tryCompileProject
argument_list|(
literal|"unix/lgmon"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|part
operator|==
literal|"NEON"
condition|)
block|{
name|available
operator|=
operator|(
name|dictionary
index|[
literal|"QT_ARCH"
index|]
operator|==
literal|"arm"
operator|)
operator|&&
name|tryCompileProject
argument_list|(
literal|"unix/neon"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|part
operator|==
literal|"FONT_CONFIG"
condition|)
block|{
name|available
operator|=
name|tryCompileProject
argument_list|(
literal|"unix/fontconfig"
argument_list|)
expr_stmt|;
block|}
return|return
name|available
return|;
block|}
end_function
begin_comment
comment|/*     Autodetect options marked as "auto". */
end_comment
begin_function
DECL|function|autoDetection
name|void
name|Configure
operator|::
name|autoDetection
parameter_list|()
block|{
name|cout
operator|<<
literal|"Running configuration tests..."
operator|<<
name|endl
expr_stmt|;
comment|// Auto-detect CPU architectures.
name|detectArch
argument_list|()
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"C++11"
index|]
operator|==
literal|"auto"
condition|)
block|{
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|.
name|contains
argument_list|(
literal|"msvc"
argument_list|)
condition|)
name|dictionary
index|[
literal|"C++11"
index|]
operator|=
name|tryCompileProject
argument_list|(
literal|"common/c++11"
argument_list|)
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
block|}
comment|// Style detection
if|if
condition|(
name|dictionary
index|[
literal|"STYLE_WINDOWSXP"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"STYLE_WINDOWSXP"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"STYLE_WINDOWSXP"
argument_list|)
condition|?
name|defaultTo
argument_list|(
literal|"STYLE_WINDOWSXP"
argument_list|)
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"STYLE_WINDOWSVISTA"
index|]
operator|==
literal|"auto"
condition|)
comment|// Vista style has the same requirements as XP style
name|dictionary
index|[
literal|"STYLE_WINDOWSVISTA"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"STYLE_WINDOWSXP"
argument_list|)
condition|?
name|defaultTo
argument_list|(
literal|"STYLE_WINDOWSVISTA"
argument_list|)
else|:
literal|"no"
expr_stmt|;
comment|// Compression detection
if|if
condition|(
name|dictionary
index|[
literal|"ZLIB"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"ZLIB"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"ZLIB"
argument_list|)
condition|?
name|defaultTo
argument_list|(
literal|"ZLIB"
argument_list|)
else|:
literal|"qt"
expr_stmt|;
comment|// PCRE detection
if|if
condition|(
name|dictionary
index|[
literal|"PCRE"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"PCRE"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"PCRE"
argument_list|)
condition|?
name|defaultTo
argument_list|(
literal|"PCRE"
argument_list|)
else|:
literal|"qt"
expr_stmt|;
comment|// ICU detection
if|if
condition|(
name|dictionary
index|[
literal|"ICU"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"ICU"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"ICU"
argument_list|)
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
comment|// ANGLE detection
if|if
condition|(
name|dictionary
index|[
literal|"ANGLE"
index|]
operator|==
literal|"auto"
condition|)
block|{
if|if
condition|(
name|dictionary
index|[
literal|"OPENGL_ES_2"
index|]
operator|==
literal|"yes"
condition|)
block|{
name|dictionary
index|[
literal|"ANGLE"
index|]
operator|=
name|checkAngleAvailability
argument_list|()
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
name|dictionary
index|[
literal|"ANGLE_FROM"
index|]
operator|=
literal|"detected"
expr_stmt|;
block|}
else|else
block|{
name|dictionary
index|[
literal|"ANGLE"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
block|}
comment|// Dynamic GL. This must be explicitly requested, no autodetection.
if|if
condition|(
name|dictionary
index|[
literal|"DYNAMICGL"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"DYNAMICGL"
index|]
operator|=
literal|"no"
expr_stmt|;
comment|// Image format detection
if|if
condition|(
name|dictionary
index|[
literal|"GIF"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"GIF"
index|]
operator|=
name|defaultTo
argument_list|(
literal|"GIF"
argument_list|)
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"JPEG"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"JPEG"
index|]
operator|=
name|defaultTo
argument_list|(
literal|"JPEG"
argument_list|)
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"PNG"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"PNG"
index|]
operator|=
name|defaultTo
argument_list|(
literal|"PNG"
argument_list|)
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"LIBJPEG"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"LIBJPEG"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"LIBJPEG"
argument_list|)
condition|?
name|defaultTo
argument_list|(
literal|"LIBJPEG"
argument_list|)
else|:
literal|"qt"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"LIBPNG"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"LIBPNG"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"LIBPNG"
argument_list|)
condition|?
name|defaultTo
argument_list|(
literal|"LIBPNG"
argument_list|)
else|:
literal|"qt"
expr_stmt|;
comment|// SQL detection (not on by default)
if|if
condition|(
name|dictionary
index|[
literal|"SQL_MYSQL"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"SQL_MYSQL"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"SQL_MYSQL"
argument_list|)
condition|?
name|defaultTo
argument_list|(
literal|"SQL_MYSQL"
argument_list|)
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_ODBC"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"SQL_ODBC"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"SQL_ODBC"
argument_list|)
condition|?
name|defaultTo
argument_list|(
literal|"SQL_ODBC"
argument_list|)
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_OCI"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"SQL_OCI"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"SQL_OCI"
argument_list|)
condition|?
name|defaultTo
argument_list|(
literal|"SQL_OCI"
argument_list|)
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_PSQL"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"SQL_PSQL"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"SQL_PSQL"
argument_list|)
condition|?
name|defaultTo
argument_list|(
literal|"SQL_PSQL"
argument_list|)
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_TDS"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"SQL_TDS"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"SQL_TDS"
argument_list|)
condition|?
name|defaultTo
argument_list|(
literal|"SQL_TDS"
argument_list|)
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_DB2"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"SQL_DB2"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"SQL_DB2"
argument_list|)
condition|?
name|defaultTo
argument_list|(
literal|"SQL_DB2"
argument_list|)
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_SQLITE"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"SQL_SQLITE"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"SQL_SQLITE"
argument_list|)
condition|?
name|defaultTo
argument_list|(
literal|"SQL_SQLITE"
argument_list|)
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_SQLITE_LIB"
index|]
operator|==
literal|"system"
condition|)
if|if
condition|(
operator|!
name|checkAvailability
argument_list|(
literal|"SQL_SQLITE_LIB"
argument_list|)
condition|)
name|dictionary
index|[
literal|"SQL_SQLITE_LIB"
index|]
operator|=
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_SQLITE2"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"SQL_SQLITE2"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"SQL_SQLITE2"
argument_list|)
condition|?
name|defaultTo
argument_list|(
literal|"SQL_SQLITE2"
argument_list|)
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_IBASE"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"SQL_IBASE"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"SQL_IBASE"
argument_list|)
condition|?
name|defaultTo
argument_list|(
literal|"SQL_IBASE"
argument_list|)
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SSE2"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"SSE2"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"SSE2"
argument_list|)
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SSE3"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"SSE3"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"SSE3"
argument_list|)
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SSSE3"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"SSSE3"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"SSSE3"
argument_list|)
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SSE4_1"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"SSE4_1"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"SSE4_1"
argument_list|)
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SSE4_2"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"SSE4_2"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"SSE4_2"
argument_list|)
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"AVX"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"AVX"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"AVX"
argument_list|)
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"AVX2"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"AVX2"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"AVX2"
argument_list|)
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"IWMMXT"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"IWMMXT"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"IWMMXT"
argument_list|)
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"NEON"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"NEON"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"NEON"
argument_list|)
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"OPENSSL"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"OPENSSL"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"OPENSSL"
argument_list|)
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"DBUS"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"DBUS"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"DBUS"
argument_list|)
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"QML_DEBUG"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"QML_DEBUG"
index|]
operator|=
name|dictionary
index|[
literal|"QML"
index|]
operator|==
literal|"yes"
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"AUDIO_BACKEND"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"AUDIO_BACKEND"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"AUDIO_BACKEND"
argument_list|)
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"WMF_BACKEND"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"WMF_BACKEND"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"WMF_BACKEND"
argument_list|)
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"WMSDK"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"WMSDK"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"WMSDK"
argument_list|)
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
comment|// Qt/WinCE remote test application
if|if
condition|(
name|dictionary
index|[
literal|"CETEST"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"CETEST"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"CETEST"
argument_list|)
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
comment|// Detection of IncrediBuild buildconsole
if|if
condition|(
name|dictionary
index|[
literal|"INCREDIBUILD_XGE"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"INCREDIBUILD_XGE"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"INCREDIBUILD_XGE"
argument_list|)
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
comment|// Detection of iconv support
if|if
condition|(
name|dictionary
index|[
literal|"QT_ICONV"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"QT_ICONV"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"ICONV"
argument_list|)
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
comment|// Detection of evdev support
if|if
condition|(
name|dictionary
index|[
literal|"QT_EVDEV"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"QT_EVDEV"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"EVDEV"
argument_list|)
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
comment|// Detection of mtdev support
if|if
condition|(
name|dictionary
index|[
literal|"QT_MTDEV"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"QT_MTDEV"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"MTDEV"
argument_list|)
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
comment|// Detection of inotify
if|if
condition|(
name|dictionary
index|[
literal|"QT_INOTIFY"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"QT_INOTIFY"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"INOTIFY"
argument_list|)
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
comment|// Detection of cups support
if|if
condition|(
name|dictionary
index|[
literal|"QT_CUPS"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"QT_CUPS"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"CUPS"
argument_list|)
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
comment|// Detection of -fstack-protector-strong support
if|if
condition|(
name|dictionary
index|[
literal|"STACK_PROTECTOR_STRONG"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"STACK_PROTECTOR_STRONG"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"STACK_PROTECTOR_STRONG"
argument_list|)
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
operator|(
name|platform
argument_list|()
operator|==
name|QNX
operator|||
name|platform
argument_list|()
operator|==
name|BLACKBERRY
operator|)
operator|&&
name|dictionary
index|[
literal|"SLOG2"
index|]
operator|==
literal|"auto"
condition|)
block|{
name|dictionary
index|[
literal|"SLOG2"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"SLOG2"
argument_list|)
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|platform
argument_list|()
operator|==
name|QNX
operator|||
name|platform
argument_list|()
operator|==
name|BLACKBERRY
operator|)
operator|&&
name|dictionary
index|[
literal|"QNX_IMF"
index|]
operator|==
literal|"auto"
condition|)
block|{
name|dictionary
index|[
literal|"QNX_IMF"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"QNX_IMF"
argument_list|)
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
block|}
if|if
condition|(
name|dictionary
index|[
literal|"PPS"
index|]
operator|==
literal|"auto"
condition|)
block|{
name|dictionary
index|[
literal|"PPS"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"PPS"
argument_list|)
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|platform
argument_list|()
operator|==
name|QNX
operator|||
name|platform
argument_list|()
operator|==
name|BLACKBERRY
operator|)
operator|&&
name|dictionary
index|[
literal|"LGMON"
index|]
operator|==
literal|"auto"
condition|)
block|{
name|dictionary
index|[
literal|"LGMON"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"LGMON"
argument_list|)
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
block|}
if|if
condition|(
name|dictionary
index|[
literal|"QT_EVENTFD"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"QT_EVENTFD"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"QT_EVENTFD"
argument_list|)
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"FONT_CONFIG"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"FONT_CONFIG"
index|]
operator|=
name|checkAvailability
argument_list|(
literal|"FONT_CONFIG"
argument_list|)
condition|?
literal|"yes"
else|:
literal|"no"
expr_stmt|;
comment|// Mark all unknown "auto" to the default value..
for|for
control|(
name|QMap
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
operator|::
name|iterator
name|i
init|=
name|dictionary
operator|.
name|begin
argument_list|()
init|;
name|i
operator|!=
name|dictionary
operator|.
name|end
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|.
name|value
argument_list|()
operator|==
literal|"auto"
condition|)
name|i
operator|.
name|value
argument_list|()
operator|=
name|defaultTo
argument_list|(
name|i
operator|.
name|key
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tryCompileProject
argument_list|(
literal|"unix/ptrsize"
argument_list|)
condition|)
name|dictionary
index|[
literal|"QT_POINTER_SIZE"
index|]
operator|=
literal|"8"
expr_stmt|;
else|else
name|dictionary
index|[
literal|"QT_POINTER_SIZE"
index|]
operator|=
literal|"4"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|verifyConfiguration
name|bool
name|Configure
operator|::
name|verifyConfiguration
parameter_list|()
block|{
name|bool
name|prompt
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"C++11"
index|]
operator|!=
literal|"auto"
operator|&&
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|.
name|contains
argument_list|(
literal|"msvc"
argument_list|)
condition|)
block|{
name|cout
operator|<<
literal|"WARNING: Qt does not support disabling or enabling any existing C++11 support "
literal|"with MSVC compilers."
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"C++11"
index|]
operator|==
literal|"yes"
condition|)
name|cout
operator|<<
literal|"Therefore -c++11 is ignored."
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
else|else
name|cout
operator|<<
literal|"Therefore -no-c++11 is ignored."
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"C++11"
index|]
operator|=
literal|"auto"
expr_stmt|;
block|}
if|if
condition|(
name|dictionary
index|[
literal|"SEPARATE_DEBUG_INFO"
index|]
operator|==
literal|"yes"
condition|)
block|{
if|if
condition|(
name|dictionary
index|[
literal|"SHARED"
index|]
operator|==
literal|"no"
condition|)
block|{
name|cout
operator|<<
literal|"ERROR: -separate-debug-info is incompatible with -static"
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dictionary
index|[
literal|"BUILD"
index|]
operator|!=
literal|"debug"
operator|&&
name|dictionary
index|[
literal|"BUILDALL"
index|]
operator|==
literal|"no"
operator|&&
name|dictionary
index|[
literal|"FORCEDEBUGINFO"
index|]
operator|==
literal|"no"
condition|)
block|{
name|cout
operator|<<
literal|"ERROR: -separate-debug-info needs -debug, -debug-and-release, or -force-debug-info"
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dictionary
index|[
literal|"SEPARATE_DEBUG_INFO"
index|]
operator|==
literal|"yes"
operator|&&
operator|!
name|checkAvailability
argument_list|(
literal|"OBJCOPY"
argument_list|)
condition|)
block|{
name|cout
operator|<<
literal|"ERROR: -separate-debug-info was requested but this binutils does not support it."
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
block|}
block|}
if|if
condition|(
name|dictionary
index|[
literal|"SQL_SQLITE_LIB"
index|]
operator|==
literal|"no"
operator|&&
name|dictionary
index|[
literal|"SQL_SQLITE"
index|]
operator|!=
literal|"no"
condition|)
block|{
name|cout
operator|<<
literal|"WARNING: Configure could not detect the presence of a system SQLite3 lib."
operator|<<
name|endl
operator|<<
literal|"Configure will therefore continue with the SQLite3 lib bundled with Qt."
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"SQL_SQLITE_LIB"
index|]
operator|=
literal|"qt"
expr_stmt|;
comment|// Set to Qt's bundled lib an continue
name|prompt
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|.
name|endsWith
argument_list|(
literal|"-g++"
argument_list|)
operator|&&
name|dictionary
index|[
literal|"SQL_OCI"
index|]
operator|!=
literal|"no"
condition|)
block|{
name|cout
operator|<<
literal|"WARNING: Qt does not support compiling the Oracle database driver with"
operator|<<
name|endl
operator|<<
literal|"MinGW, due to lack of such support from Oracle. Consider disabling the"
operator|<<
name|endl
operator|<<
literal|"Oracle driver, as the current build will most likely fail."
operator|<<
name|endl
expr_stmt|;
name|prompt
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|.
name|endsWith
argument_list|(
literal|"win32-msvc.net"
argument_list|)
condition|)
block|{
name|cout
operator|<<
literal|"WARNING: The makespec win32-msvc.net is deprecated. Consider using"
operator|<<
name|endl
operator|<<
literal|"win32-msvc2002 or win32-msvc2003 instead."
operator|<<
name|endl
expr_stmt|;
name|prompt
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
literal|0
operator|!=
name|dictionary
index|[
literal|"ARM_FPU_TYPE"
index|]
operator|.
name|size
argument_list|()
condition|)
block|{
name|QStringList
name|l
init|=
name|QStringList
argument_list|()
operator|<<
literal|"softvfp"
operator|<<
literal|"softvfp+vfpv2"
operator|<<
literal|"vfpv2"
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|l
operator|.
name|contains
argument_list|(
name|dictionary
index|[
literal|"ARM_FPU_TYPE"
index|]
argument_list|)
operator|)
condition|)
name|cout
operator|<<
name|QString
argument_list|(
literal|"WARNING: Using unsupported fpu flag: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|dictionary
index|[
literal|"ARM_FPU_TYPE"
index|]
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
if|if
condition|(
name|dictionary
index|[
literal|"DIRECTWRITE"
index|]
operator|==
literal|"yes"
operator|&&
operator|!
name|checkAvailability
argument_list|(
literal|"DIRECTWRITE"
argument_list|)
condition|)
block|{
name|cout
operator|<<
literal|"WARNING: To be able to compile the DirectWrite font engine you will"
operator|<<
name|endl
operator|<<
literal|"need the Microsoft DirectWrite and Microsoft Direct2D development"
operator|<<
name|endl
operator|<<
literal|"files such as headers and libraries."
operator|<<
name|endl
expr_stmt|;
name|prompt
operator|=
literal|true
expr_stmt|;
block|}
if|#
directive|if
name|WINVER
operator|>
literal|0x0601
if|if
condition|(
name|dictionary
index|[
literal|"TARGET_OS"
index|]
operator|==
literal|"xp"
condition|)
block|{
name|cout
operator|<<
literal|"WARNING: Cannot use Windows Kit 8 to build Qt for Windows XP.\n"
literal|"WARNING: Windows SDK v7.1A is recommended.\n"
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
name|dictionary
index|[
literal|"DIRECT2D"
index|]
operator|==
literal|"yes"
operator|&&
operator|!
name|checkAvailability
argument_list|(
literal|"DIRECT2D"
argument_list|)
condition|)
block|{
name|cout
operator|<<
literal|"WARNING: To be able to build the Direct2D platform plugin you will"
operator|<<
name|endl
operator|<<
literal|"need the Microsoft DirectWrite and Microsoft Direct2D development"
operator|<<
name|endl
operator|<<
literal|"files such as headers and libraries."
operator|<<
name|endl
expr_stmt|;
name|prompt
operator|=
literal|true
expr_stmt|;
block|}
comment|// -angle given on command line, but Direct X cannot be found.
if|if
condition|(
name|dictionary
index|[
literal|"ANGLE"
index|]
operator|!=
literal|"no"
condition|)
block|{
name|QString
name|errorMessage
decl_stmt|;
if|if
condition|(
operator|!
name|checkAngleAvailability
argument_list|(
operator|&
name|errorMessage
argument_list|)
condition|)
block|{
name|cout
operator|<<
literal|"WARNING: ANGLE specified, but the DirectX SDK could not be detected:"
operator|<<
name|endl
operator|<<
literal|"  "
operator|<<
name|qPrintable
argument_list|(
name|errorMessage
argument_list|)
operator|<<
name|endl
operator|<<
literal|"The build will most likely fail."
operator|<<
name|endl
expr_stmt|;
name|prompt
operator|=
literal|true
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|dictionary
index|[
literal|"ANGLE"
index|]
operator|==
literal|"no"
condition|)
block|{
if|if
condition|(
name|dictionary
index|[
literal|"ANGLE_FROM"
index|]
operator|==
literal|"detected"
condition|)
block|{
name|QString
name|errorMessage
decl_stmt|;
name|checkAngleAvailability
argument_list|(
operator|&
name|errorMessage
argument_list|)
expr_stmt|;
name|cout
operator|<<
literal|"WARNING: The DirectX SDK could not be detected:"
operator|<<
name|endl
operator|<<
literal|"  "
operator|<<
name|qPrintable
argument_list|(
name|errorMessage
argument_list|)
operator|<<
name|endl
operator|<<
literal|"Disabling the ANGLE backend."
operator|<<
name|endl
expr_stmt|;
name|prompt
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|dictionary
index|[
literal|"OPENGL_ES_2"
index|]
operator|==
literal|"yes"
operator|)
operator|&&
operator|!
name|dictionary
operator|.
name|contains
argument_list|(
literal|"XQMAKESPEC"
argument_list|)
condition|)
block|{
name|cout
operator|<<
name|endl
operator|<<
literal|"WARNING: Using OpenGL ES 2.0 without ANGLE."
operator|<<
name|endl
operator|<<
literal|"Specify -opengl desktop to use Open GL."
operator|<<
name|endl
operator|<<
literal|"The build will most likely fail."
operator|<<
name|endl
expr_stmt|;
name|prompt
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|dictionary
index|[
literal|"DYNAMICGL"
index|]
operator|==
literal|"yes"
condition|)
block|{
if|if
condition|(
name|dictionary
index|[
literal|"OPENGL_ES_2"
index|]
operator|==
literal|"yes"
operator|||
name|dictionary
index|[
literal|"ANGLE"
index|]
operator|!=
literal|"no"
condition|)
block|{
name|cout
operator|<<
literal|"ERROR: Dynamic OpenGL cannot be used together with native Angle (GLES2) builds."
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
block|}
block|}
if|if
condition|(
name|prompt
condition|)
name|promptKeyPress
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|prepareConfigTests
name|void
name|Configure
operator|::
name|prepareConfigTests
parameter_list|()
block|{
comment|// Generate an empty .qmake.cache file for config.tests
name|QDir
name|buildDir
argument_list|(
name|buildPath
argument_list|)
decl_stmt|;
name|bool
name|success
init|=
literal|true
decl_stmt|;
if|if
condition|(
operator|!
name|buildDir
operator|.
name|exists
argument_list|(
literal|"config.tests"
argument_list|)
condition|)
name|success
operator|=
name|buildDir
operator|.
name|mkdir
argument_list|(
literal|"config.tests"
argument_list|)
expr_stmt|;
name|QString
name|fileName
argument_list|(
name|buildPath
operator|+
literal|"/config.tests/.qmake.cache"
argument_list|)
decl_stmt|;
name|QFile
name|cacheFile
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|success
operator|&=
name|cacheFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|cacheFile
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|success
condition|)
block|{
name|cout
operator|<<
literal|"Failed to create file "
operator|<<
name|qPrintable
argument_list|(
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|fileName
argument_list|)
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|generateOutputVars
name|void
name|Configure
operator|::
name|generateOutputVars
parameter_list|()
block|{
comment|// Generate variables for output
name|QString
name|build
init|=
name|dictionary
index|[
literal|"BUILD"
index|]
decl_stmt|;
name|bool
name|buildAll
init|=
operator|(
name|dictionary
index|[
literal|"BUILDALL"
index|]
operator|==
literal|"yes"
operator|)
decl_stmt|;
if|if
condition|(
name|build
operator|==
literal|"debug"
condition|)
block|{
if|if
condition|(
name|buildAll
condition|)
name|qtConfig
operator|+=
literal|"debug_and_release build_all release"
expr_stmt|;
name|qtConfig
operator|+=
literal|"debug"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|build
operator|==
literal|"release"
condition|)
block|{
if|if
condition|(
name|buildAll
condition|)
name|qtConfig
operator|+=
literal|"debug_and_release build_all debug"
expr_stmt|;
name|qtConfig
operator|+=
literal|"release"
expr_stmt|;
block|}
if|if
condition|(
name|dictionary
index|[
literal|"C++11"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"c++11"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SHARED"
index|]
operator|==
literal|"no"
condition|)
name|qtConfig
operator|+=
literal|"static"
expr_stmt|;
else|else
name|qtConfig
operator|+=
literal|"shared"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"GUI"
index|]
operator|==
literal|"no"
condition|)
block|{
name|qtConfig
operator|+=
literal|"no-gui"
expr_stmt|;
name|dictionary
index|[
literal|"WIDGETS"
index|]
operator|=
literal|"no"
expr_stmt|;
block|}
if|if
condition|(
name|dictionary
index|[
literal|"WIDGETS"
index|]
operator|==
literal|"no"
condition|)
name|qtConfig
operator|+=
literal|"no-widgets"
expr_stmt|;
comment|// Compression --------------------------------------------------
if|if
condition|(
name|dictionary
index|[
literal|"ZLIB"
index|]
operator|==
literal|"qt"
condition|)
name|qtConfig
operator|+=
literal|"zlib"
expr_stmt|;
elseif|else
if|if
condition|(
name|dictionary
index|[
literal|"ZLIB"
index|]
operator|==
literal|"system"
condition|)
name|qtConfig
operator|+=
literal|"system-zlib"
expr_stmt|;
comment|// PCRE ---------------------------------------------------------
if|if
condition|(
name|dictionary
index|[
literal|"PCRE"
index|]
operator|==
literal|"qt"
condition|)
name|qmakeConfig
operator|+=
literal|"pcre"
expr_stmt|;
comment|// ICU ---------------------------------------------------------
if|if
condition|(
name|dictionary
index|[
literal|"ICU"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"icu"
expr_stmt|;
comment|// ANGLE --------------------------------------------------------
if|if
condition|(
name|dictionary
index|[
literal|"ANGLE"
index|]
operator|!=
literal|"no"
condition|)
block|{
name|qtConfig
operator|+=
literal|"angle"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"ANGLE"
index|]
operator|==
literal|"d3d11"
condition|)
name|qmakeConfig
operator|+=
literal|"angle_d3d11"
expr_stmt|;
block|}
comment|// Dynamic OpenGL loading ---------------------------------------
if|if
condition|(
name|dictionary
index|[
literal|"DYNAMICGL"
index|]
operator|!=
literal|"no"
condition|)
name|qtConfig
operator|+=
literal|"dynamicgl"
expr_stmt|;
comment|// Image formates -----------------------------------------------
if|if
condition|(
name|dictionary
index|[
literal|"GIF"
index|]
operator|==
literal|"no"
condition|)
name|qtConfig
operator|+=
literal|"no-gif"
expr_stmt|;
elseif|else
if|if
condition|(
name|dictionary
index|[
literal|"GIF"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"gif"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"JPEG"
index|]
operator|==
literal|"no"
condition|)
name|qtConfig
operator|+=
literal|"no-jpeg"
expr_stmt|;
elseif|else
if|if
condition|(
name|dictionary
index|[
literal|"JPEG"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"jpeg"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"LIBJPEG"
index|]
operator|==
literal|"system"
condition|)
name|qtConfig
operator|+=
literal|"system-jpeg"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"PNG"
index|]
operator|==
literal|"no"
condition|)
name|qtConfig
operator|+=
literal|"no-png"
expr_stmt|;
elseif|else
if|if
condition|(
name|dictionary
index|[
literal|"PNG"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"png"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"LIBPNG"
index|]
operator|==
literal|"system"
condition|)
name|qtConfig
operator|+=
literal|"system-png"
expr_stmt|;
comment|// Text rendering --------------------------------------------------
if|if
condition|(
name|dictionary
index|[
literal|"FREETYPE"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"freetype"
expr_stmt|;
elseif|else
if|if
condition|(
name|dictionary
index|[
literal|"FREETYPE"
index|]
operator|==
literal|"system"
condition|)
name|qtConfig
operator|+=
literal|"system-freetype"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"HARFBUZZ"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"harfbuzz"
expr_stmt|;
elseif|else
if|if
condition|(
name|dictionary
index|[
literal|"HARFBUZZ"
index|]
operator|==
literal|"system"
condition|)
name|qtConfig
operator|+=
literal|"system-harfbuzz"
expr_stmt|;
comment|// Styles -------------------------------------------------------
if|if
condition|(
name|dictionary
index|[
literal|"STYLE_WINDOWS"
index|]
operator|==
literal|"yes"
condition|)
name|qmakeStyles
operator|+=
literal|"windows"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"STYLE_FUSION"
index|]
operator|==
literal|"yes"
condition|)
name|qmakeStyles
operator|+=
literal|"fusion"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"STYLE_WINDOWSXP"
index|]
operator|==
literal|"yes"
condition|)
name|qmakeStyles
operator|+=
literal|"windowsxp"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"STYLE_WINDOWSVISTA"
index|]
operator|==
literal|"yes"
condition|)
name|qmakeStyles
operator|+=
literal|"windowsvista"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"STYLE_WINDOWSCE"
index|]
operator|==
literal|"yes"
condition|)
name|qmakeStyles
operator|+=
literal|"windowsce"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"STYLE_WINDOWSMOBILE"
index|]
operator|==
literal|"yes"
condition|)
name|qmakeStyles
operator|+=
literal|"windowsmobile"
expr_stmt|;
comment|// Databases ----------------------------------------------------
if|if
condition|(
name|dictionary
index|[
literal|"SQL_MYSQL"
index|]
operator|==
literal|"yes"
condition|)
name|qmakeSql
operator|+=
literal|"mysql"
expr_stmt|;
elseif|else
if|if
condition|(
name|dictionary
index|[
literal|"SQL_MYSQL"
index|]
operator|==
literal|"plugin"
condition|)
name|qmakeSqlPlugins
operator|+=
literal|"mysql"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_ODBC"
index|]
operator|==
literal|"yes"
condition|)
name|qmakeSql
operator|+=
literal|"odbc"
expr_stmt|;
elseif|else
if|if
condition|(
name|dictionary
index|[
literal|"SQL_ODBC"
index|]
operator|==
literal|"plugin"
condition|)
name|qmakeSqlPlugins
operator|+=
literal|"odbc"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_OCI"
index|]
operator|==
literal|"yes"
condition|)
name|qmakeSql
operator|+=
literal|"oci"
expr_stmt|;
elseif|else
if|if
condition|(
name|dictionary
index|[
literal|"SQL_OCI"
index|]
operator|==
literal|"plugin"
condition|)
name|qmakeSqlPlugins
operator|+=
literal|"oci"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_PSQL"
index|]
operator|==
literal|"yes"
condition|)
name|qmakeSql
operator|+=
literal|"psql"
expr_stmt|;
elseif|else
if|if
condition|(
name|dictionary
index|[
literal|"SQL_PSQL"
index|]
operator|==
literal|"plugin"
condition|)
name|qmakeSqlPlugins
operator|+=
literal|"psql"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_TDS"
index|]
operator|==
literal|"yes"
condition|)
name|qmakeSql
operator|+=
literal|"tds"
expr_stmt|;
elseif|else
if|if
condition|(
name|dictionary
index|[
literal|"SQL_TDS"
index|]
operator|==
literal|"plugin"
condition|)
name|qmakeSqlPlugins
operator|+=
literal|"tds"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_DB2"
index|]
operator|==
literal|"yes"
condition|)
name|qmakeSql
operator|+=
literal|"db2"
expr_stmt|;
elseif|else
if|if
condition|(
name|dictionary
index|[
literal|"SQL_DB2"
index|]
operator|==
literal|"plugin"
condition|)
name|qmakeSqlPlugins
operator|+=
literal|"db2"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_SQLITE"
index|]
operator|==
literal|"yes"
condition|)
name|qmakeSql
operator|+=
literal|"sqlite"
expr_stmt|;
elseif|else
if|if
condition|(
name|dictionary
index|[
literal|"SQL_SQLITE"
index|]
operator|==
literal|"plugin"
condition|)
name|qmakeSqlPlugins
operator|+=
literal|"sqlite"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_SQLITE_LIB"
index|]
operator|==
literal|"system"
condition|)
name|qmakeConfig
operator|+=
literal|"system-sqlite"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_SQLITE2"
index|]
operator|==
literal|"yes"
condition|)
name|qmakeSql
operator|+=
literal|"sqlite2"
expr_stmt|;
elseif|else
if|if
condition|(
name|dictionary
index|[
literal|"SQL_SQLITE2"
index|]
operator|==
literal|"plugin"
condition|)
name|qmakeSqlPlugins
operator|+=
literal|"sqlite2"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_IBASE"
index|]
operator|==
literal|"yes"
condition|)
name|qmakeSql
operator|+=
literal|"ibase"
expr_stmt|;
elseif|else
if|if
condition|(
name|dictionary
index|[
literal|"SQL_IBASE"
index|]
operator|==
literal|"plugin"
condition|)
name|qmakeSqlPlugins
operator|+=
literal|"ibase"
expr_stmt|;
comment|// Other options ------------------------------------------------
if|if
condition|(
name|dictionary
index|[
literal|"BUILDALL"
index|]
operator|==
literal|"yes"
condition|)
block|{
name|qtConfig
operator|+=
literal|"build_all"
expr_stmt|;
block|}
if|if
condition|(
name|dictionary
index|[
literal|"SEPARATE_DEBUG_INFO"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"separate_debug_info"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"FORCEDEBUGINFO"
index|]
operator|==
literal|"yes"
condition|)
name|qmakeConfig
operator|+=
literal|"force_debug_info"
expr_stmt|;
name|qmakeConfig
operator|+=
name|dictionary
index|[
literal|"BUILD"
index|]
expr_stmt|;
if|if
condition|(
name|buildParts
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|buildParts
operator|=
name|defaultBuildParts
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"BUILDDEV"
index|]
operator|==
literal|"yes"
condition|)
name|buildParts
operator|+=
literal|"tests"
expr_stmt|;
block|}
while|while
condition|(
operator|!
name|nobuildParts
operator|.
name|isEmpty
argument_list|()
condition|)
name|buildParts
operator|.
name|removeAll
argument_list|(
name|nobuildParts
operator|.
name|takeFirst
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|buildParts
operator|.
name|contains
argument_list|(
literal|"libs"
argument_list|)
condition|)
name|buildParts
operator|+=
literal|"libs"
expr_stmt|;
name|buildParts
operator|.
name|removeDuplicates
argument_list|()
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"COMPILE_EXAMPLES"
index|]
operator|==
literal|"yes"
condition|)
name|qmakeConfig
operator|+=
literal|"compile_examples"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"MSVC_MP"
index|]
operator|==
literal|"yes"
condition|)
name|qmakeConfig
operator|+=
literal|"msvc_mp"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SHARED"
index|]
operator|==
literal|"yes"
condition|)
block|{
name|QString
name|version
init|=
name|dictionary
index|[
literal|"VERSION"
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|version
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qmakeVars
operator|+=
literal|"QMAKE_QT_VERSION_OVERRIDE = "
operator|+
name|version
operator|.
name|left
argument_list|(
name|version
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
argument_list|)
expr_stmt|;
name|version
operator|.
name|remove
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|dictionary
index|[
literal|"ACCESSIBILITY"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"accessibility"
expr_stmt|;
if|if
condition|(
operator|!
name|qmakeLibs
operator|.
name|isEmpty
argument_list|()
condition|)
name|qmakeVars
operator|+=
literal|"LIBS           += "
operator|+
name|formatPaths
argument_list|(
name|qmakeLibs
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"QT_LFLAGS_SQLITE"
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|qmakeVars
operator|+=
literal|"QT_LFLAGS_SQLITE += "
operator|+
name|dictionary
index|[
literal|"QT_LFLAGS_SQLITE"
index|]
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"OPENGL"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"opengl"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"OPENGL_ES_2"
index|]
operator|==
literal|"yes"
condition|)
block|{
name|qtConfig
operator|+=
literal|"opengles2"
expr_stmt|;
name|qtConfig
operator|+=
literal|"egl"
expr_stmt|;
block|}
if|if
condition|(
name|dictionary
index|[
literal|"OPENVG"
index|]
operator|==
literal|"yes"
condition|)
block|{
name|qtConfig
operator|+=
literal|"openvg"
expr_stmt|;
name|qtConfig
operator|+=
literal|"egl"
expr_stmt|;
block|}
if|if
condition|(
name|dictionary
index|[
literal|"OPENSSL"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"openssl"
expr_stmt|;
elseif|else
if|if
condition|(
name|dictionary
index|[
literal|"OPENSSL"
index|]
operator|==
literal|"linked"
condition|)
name|qtConfig
operator|+=
literal|"openssl-linked"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"DBUS"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"dbus"
expr_stmt|;
elseif|else
if|if
condition|(
name|dictionary
index|[
literal|"DBUS"
index|]
operator|==
literal|"linked"
condition|)
name|qtConfig
operator|+=
literal|"dbus dbus-linked"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"CETEST"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"cetest"
expr_stmt|;
comment|// ### Vestige
if|if
condition|(
name|dictionary
index|[
literal|"AUDIO_BACKEND"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"audio-backend"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"WMF_BACKEND"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"wmf-backend"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"DIRECTWRITE"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"directwrite"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"DIRECT2D"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"direct2d"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"NATIVE_GESTURES"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"native-gestures"
expr_stmt|;
name|qtConfig
operator|+=
literal|"qpa"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"NIS"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"nis"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"QT_CUPS"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"cups"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"QT_ICONV"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"iconv"
expr_stmt|;
elseif|else
if|if
condition|(
name|dictionary
index|[
literal|"QT_ICONV"
index|]
operator|==
literal|"sun"
condition|)
name|qtConfig
operator|+=
literal|"sun-libiconv"
expr_stmt|;
elseif|else
if|if
condition|(
name|dictionary
index|[
literal|"QT_ICONV"
index|]
operator|==
literal|"gnu"
condition|)
name|qtConfig
operator|+=
literal|"gnu-libiconv"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"QT_EVDEV"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"evdev"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"QT_MTDEV"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"mtdev"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"QT_INOTIFY"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"inotify"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"QT_EVENTFD"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"eventfd"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"FONT_CONFIG"
index|]
operator|==
literal|"yes"
condition|)
block|{
name|qtConfig
operator|+=
literal|"fontconfig"
expr_stmt|;
name|qmakeVars
operator|+=
literal|"QMAKE_CFLAGS_FONTCONFIG ="
expr_stmt|;
name|qmakeVars
operator|+=
literal|"QMAKE_LIBS_FONTCONFIG   = -lfreetype -lfontconfig"
expr_stmt|;
block|}
if|if
condition|(
name|dictionary
index|[
literal|"QT_GLIB"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"glib"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"STACK_PROTECTOR_STRONG"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"stack-protector-strong"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"REDUCE_EXPORTS"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"reduce_exports"
expr_stmt|;
comment|// We currently have no switch for QtConcurrent, so add it unconditionally.
name|qtConfig
operator|+=
literal|"concurrent"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SYSTEM_PROXIES"
index|]
operator|==
literal|"yes"
condition|)
name|qtConfig
operator|+=
literal|"system-proxies"
expr_stmt|;
if|if
condition|(
name|dictionary
operator|.
name|contains
argument_list|(
literal|"XQMAKESPEC"
argument_list|)
operator|&&
operator|(
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|!=
name|dictionary
index|[
literal|"XQMAKESPEC"
index|]
operator|)
condition|)
block|{
name|qmakeConfig
operator|+=
literal|"cross_compile"
expr_stmt|;
name|dictionary
index|[
literal|"CROSS_COMPILE"
index|]
operator|=
literal|"yes"
expr_stmt|;
block|}
comment|// Directories and settings for .qmake.cache --------------------
if|if
condition|(
name|dictionary
operator|.
name|contains
argument_list|(
literal|"XQMAKESPEC"
argument_list|)
operator|&&
name|dictionary
index|[
literal|"XQMAKESPEC"
index|]
operator|.
name|startsWith
argument_list|(
literal|"linux"
argument_list|)
condition|)
name|qtConfig
operator|+=
literal|"rpath"
expr_stmt|;
if|if
condition|(
operator|!
name|qmakeDefines
operator|.
name|isEmpty
argument_list|()
condition|)
name|qmakeVars
operator|+=
name|QString
argument_list|(
literal|"DEFINES        += "
argument_list|)
operator|+
name|qmakeDefines
operator|.
name|join
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|qmakeIncludes
operator|.
name|isEmpty
argument_list|()
condition|)
name|qmakeVars
operator|+=
name|QString
argument_list|(
literal|"INCLUDEPATH    += "
argument_list|)
operator|+
name|formatPaths
argument_list|(
name|qmakeIncludes
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|opensslLibs
operator|.
name|isEmpty
argument_list|()
condition|)
name|qmakeVars
operator|+=
name|opensslLibs
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"OPENSSL"
index|]
operator|==
literal|"linked"
condition|)
block|{
if|if
condition|(
operator|!
name|opensslLibsDebug
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|opensslLibsRelease
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|opensslLibsDebug
operator|.
name|isEmpty
argument_list|()
operator|||
name|opensslLibsRelease
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|cout
operator|<<
literal|"Error: either both or none of OPENSSL_LIBS_DEBUG/_RELEASE must be defined."
operator|<<
name|endl
expr_stmt|;
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|qmakeVars
operator|+=
name|opensslLibsDebug
expr_stmt|;
name|qmakeVars
operator|+=
name|opensslLibsRelease
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opensslLibs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qmakeVars
operator|+=
name|QString
argument_list|(
literal|"OPENSSL_LIBS    = -lssleay32 -llibeay32"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|opensslPath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qmakeVars
operator|+=
name|QString
argument_list|(
literal|"OPENSSL_CFLAGS += -I%1/include"
argument_list|)
operator|.
name|arg
argument_list|(
name|opensslPath
argument_list|)
expr_stmt|;
name|qmakeVars
operator|+=
name|QString
argument_list|(
literal|"OPENSSL_LIBS += -L%1/lib"
argument_list|)
operator|.
name|arg
argument_list|(
name|opensslPath
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|dictionary
index|[
literal|"DBUS"
index|]
operator|!=
literal|"no"
condition|)
block|{
if|if
condition|(
operator|!
name|dbusPath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qmakeVars
operator|+=
name|QString
argument_list|(
literal|"QT_CFLAGS_DBUS = -I%1/include"
argument_list|)
operator|.
name|arg
argument_list|(
name|dbusPath
argument_list|)
expr_stmt|;
name|qmakeVars
operator|+=
name|QString
argument_list|(
literal|"QT_LIBS_DBUS = -L%1/lib"
argument_list|)
operator|.
name|arg
argument_list|(
name|dbusPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|dbusHostPath
operator|.
name|isEmpty
argument_list|()
condition|)
name|qmakeVars
operator|+=
name|QString
argument_list|(
literal|"QT_HOST_CFLAGS_DBUS = -I%1/include"
argument_list|)
operator|.
name|arg
argument_list|(
name|dbusPath
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|dbusHostPath
operator|.
name|isEmpty
argument_list|()
condition|)
name|qmakeVars
operator|+=
name|QString
argument_list|(
literal|"QT_HOST_CFLAGS_DBUS = -I%1/include"
argument_list|)
operator|.
name|arg
argument_list|(
name|dbusHostPath
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|dictionary
index|[
literal|"SQL_MYSQL"
index|]
operator|!=
literal|"no"
operator|&&
operator|!
name|mysqlPath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qmakeVars
operator|+=
name|QString
argument_list|(
literal|"QT_CFLAGS_MYSQL = -I%1/include"
argument_list|)
operator|.
name|arg
argument_list|(
name|mysqlPath
argument_list|)
expr_stmt|;
name|qmakeVars
operator|+=
name|QString
argument_list|(
literal|"QT_LFLAGS_MYSQL = -L%1/lib"
argument_list|)
operator|.
name|arg
argument_list|(
name|mysqlPath
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|psqlLibs
operator|.
name|isEmpty
argument_list|()
condition|)
name|qmakeVars
operator|+=
name|QString
argument_list|(
literal|"QT_LFLAGS_PSQL="
argument_list|)
operator|+
name|psqlLibs
operator|.
name|section
argument_list|(
literal|"="
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|zlibLibs
operator|.
name|isEmpty
argument_list|()
condition|)
name|qmakeVars
operator|+=
name|zlibLibs
expr_stmt|;
block|{
name|QStringList
name|lflagsTDS
decl_stmt|;
if|if
condition|(
operator|!
name|sybase
operator|.
name|isEmpty
argument_list|()
condition|)
name|lflagsTDS
operator|+=
name|QString
argument_list|(
literal|"-L"
argument_list|)
operator|+
name|formatPath
argument_list|(
name|sybase
operator|.
name|section
argument_list|(
literal|"="
argument_list|,
literal|1
argument_list|)
operator|+
literal|"/lib"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sybaseLibs
operator|.
name|isEmpty
argument_list|()
condition|)
name|lflagsTDS
operator|+=
name|sybaseLibs
operator|.
name|section
argument_list|(
literal|"="
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|lflagsTDS
operator|.
name|isEmpty
argument_list|()
condition|)
name|qmakeVars
operator|+=
name|QString
argument_list|(
literal|"QT_LFLAGS_TDS="
argument_list|)
operator|+
name|lflagsTDS
operator|.
name|join
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|qmakeSql
operator|.
name|isEmpty
argument_list|()
condition|)
name|qmakeVars
operator|+=
name|QString
argument_list|(
literal|"sql-drivers    += "
argument_list|)
operator|+
name|qmakeSql
operator|.
name|join
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|qmakeSqlPlugins
operator|.
name|isEmpty
argument_list|()
condition|)
name|qmakeVars
operator|+=
name|QString
argument_list|(
literal|"sql-plugins    += "
argument_list|)
operator|+
name|qmakeSqlPlugins
operator|.
name|join
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|qmakeStyles
operator|.
name|isEmpty
argument_list|()
condition|)
name|qmakeVars
operator|+=
name|QString
argument_list|(
literal|"styles         += "
argument_list|)
operator|+
name|qmakeStyles
operator|.
name|join
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|qmakeStylePlugins
operator|.
name|isEmpty
argument_list|()
condition|)
name|qmakeVars
operator|+=
name|QString
argument_list|(
literal|"style-plugins  += "
argument_list|)
operator|+
name|qmakeStylePlugins
operator|.
name|join
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|.
name|endsWith
argument_list|(
literal|"-g++"
argument_list|)
condition|)
block|{
name|QString
name|includepath
init|=
name|qgetenv
argument_list|(
literal|"INCLUDE"
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|hasSh
init|=
operator|!
name|QStandardPaths
operator|::
name|findExecutable
argument_list|(
name|QStringLiteral
argument_list|(
literal|"sh.exe"
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
name|QChar
name|separator
init|=
operator|(
operator|!
name|includepath
operator|.
name|contains
argument_list|(
literal|":\\"
argument_list|)
operator|&&
name|hasSh
condition|?
name|QChar
argument_list|(
literal|':'
argument_list|)
else|:
name|QChar
argument_list|(
literal|';'
argument_list|)
operator|)
decl_stmt|;
name|qmakeVars
operator|+=
name|QString
argument_list|(
literal|"TMPPATH            = $$quote($$(INCLUDE))"
argument_list|)
expr_stmt|;
name|qmakeVars
operator|+=
name|QString
argument_list|(
literal|"QMAKE_INCDIR_POST += $$split(TMPPATH,\"%1\")"
argument_list|)
operator|.
name|arg
argument_list|(
name|separator
argument_list|)
expr_stmt|;
name|qmakeVars
operator|+=
name|QString
argument_list|(
literal|"TMPPATH            = $$quote($$(LIB))"
argument_list|)
expr_stmt|;
name|qmakeVars
operator|+=
name|QString
argument_list|(
literal|"QMAKE_LIBDIR_POST += $$split(TMPPATH,\"%1\")"
argument_list|)
operator|.
name|arg
argument_list|(
name|separator
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|.
name|length
argument_list|()
condition|)
block|{
name|cout
operator|<<
literal|"Configure could not detect your compiler. QMAKESPEC must either"
operator|<<
name|endl
operator|<<
literal|"be defined as an environment variable, or specified as an"
operator|<<
name|endl
operator|<<
literal|"argument with -platform"
operator|<<
name|endl
expr_stmt|;
name|QStringList
name|winPlatforms
decl_stmt|;
name|QDir
name|mkspecsDir
argument_list|(
name|sourcePath
operator|+
literal|"/mkspecs"
argument_list|)
decl_stmt|;
specifier|const
name|QFileInfoList
modifier|&
name|specsList
init|=
name|mkspecsDir
operator|.
name|entryInfoList
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|specsList
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QFileInfo
modifier|&
name|fi
init|=
name|specsList
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|fi
operator|.
name|fileName
argument_list|()
operator|.
name|left
argument_list|(
literal|5
argument_list|)
operator|==
literal|"win32"
condition|)
block|{
name|winPlatforms
operator|+=
name|fi
operator|.
name|fileName
argument_list|()
expr_stmt|;
block|}
block|}
name|cout
operator|<<
literal|"Available platforms are: "
operator|<<
name|qPrintable
argument_list|(
name|winPlatforms
operator|.
name|join
argument_list|(
literal|", "
argument_list|)
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|generateCachefile
name|void
name|Configure
operator|::
name|generateCachefile
parameter_list|()
block|{
comment|// Generate qmodule.pri
block|{
name|FileWriter
name|moduleStream
argument_list|(
name|buildPath
operator|+
literal|"/mkspecs/qmodule.pri"
argument_list|)
decl_stmt|;
name|moduleStream
operator|<<
literal|"QT_BUILD_PARTS += "
operator|<<
name|buildParts
operator|.
name|join
argument_list|(
literal|' '
argument_list|)
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|skipModules
operator|.
name|isEmpty
argument_list|()
condition|)
name|moduleStream
operator|<<
literal|"QT_SKIP_MODULES += "
operator|<<
name|skipModules
operator|.
name|join
argument_list|(
literal|' '
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|QString
name|qcpath
init|=
name|dictionary
index|[
literal|"QCONFIG_PATH"
index|]
decl_stmt|;
name|QString
name|qlpath
init|=
name|sourcePath
operator|+
literal|"/src/corelib/global/"
decl_stmt|;
if|if
condition|(
name|qcpath
operator|.
name|startsWith
argument_list|(
name|qlpath
argument_list|)
condition|)
name|qcpath
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
name|qlpath
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|moduleStream
operator|<<
literal|"QT_QCONFIG_PATH = "
operator|<<
name|qcpath
operator|<<
name|endl
expr_stmt|;
name|moduleStream
operator|<<
name|endl
expr_stmt|;
name|moduleStream
operator|<<
literal|"host_build {"
operator|<<
name|endl
expr_stmt|;
name|moduleStream
operator|<<
literal|"    QT_CPU_FEATURES."
operator|<<
name|dictionary
index|[
literal|"QT_HOST_ARCH"
index|]
operator|<<
literal|" = "
operator|<<
name|dictionary
index|[
literal|"QT_HOST_CPU_FEATURES"
index|]
operator|<<
name|endl
expr_stmt|;
name|moduleStream
operator|<<
literal|"} else {"
operator|<<
name|endl
expr_stmt|;
name|moduleStream
operator|<<
literal|"    QT_CPU_FEATURES."
operator|<<
name|dictionary
index|[
literal|"QT_ARCH"
index|]
operator|<<
literal|" = "
operator|<<
name|dictionary
index|[
literal|"QT_CPU_FEATURES"
index|]
operator|<<
name|endl
expr_stmt|;
name|moduleStream
operator|<<
literal|"}"
operator|<<
name|endl
expr_stmt|;
name|moduleStream
operator|<<
literal|"QT_COORD_TYPE += "
operator|<<
name|dictionary
index|[
literal|"QREAL"
index|]
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"QT_XKBCOMMON"
index|]
operator|==
literal|"no"
condition|)
name|moduleStream
operator|<<
literal|"DEFINES += QT_NO_XKBCOMMON"
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"CETEST"
index|]
operator|==
literal|"yes"
condition|)
block|{
name|moduleStream
operator|<<
literal|"QT_CE_RAPI_INC  = "
operator|<<
name|formatPath
argument_list|(
name|dictionary
index|[
literal|"QT_CE_RAPI_INC"
index|]
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|moduleStream
operator|<<
literal|"QT_CE_RAPI_LIB  = "
operator|<<
name|formatPath
argument_list|(
name|dictionary
index|[
literal|"QT_CE_RAPI_LIB"
index|]
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
name|moduleStream
operator|<<
literal|"#Qt for Windows CE c-runtime deployment"
operator|<<
name|endl
operator|<<
literal|"QT_CE_C_RUNTIME = "
operator|<<
name|formatPath
argument_list|(
name|dictionary
index|[
literal|"CE_CRT"
index|]
argument_list|)
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"CE_SIGNATURE"
index|]
operator|!=
name|QLatin1String
argument_list|(
literal|"no"
argument_list|)
condition|)
name|moduleStream
operator|<<
literal|"DEFAULT_SIGNATURE="
operator|<<
name|dictionary
index|[
literal|"CE_SIGNATURE"
index|]
operator|<<
name|endl
expr_stmt|;
comment|// embedded
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"KBD_DRIVERS"
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|moduleStream
operator|<<
literal|"kbd-drivers += "
operator|<<
name|dictionary
index|[
literal|"KBD_DRIVERS"
index|]
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"GFX_DRIVERS"
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|moduleStream
operator|<<
literal|"gfx-drivers += "
operator|<<
name|dictionary
index|[
literal|"GFX_DRIVERS"
index|]
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"MOUSE_DRIVERS"
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|moduleStream
operator|<<
literal|"mouse-drivers += "
operator|<<
name|dictionary
index|[
literal|"MOUSE_DRIVERS"
index|]
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"DECORATIONS"
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|moduleStream
operator|<<
literal|"decorations += "
operator|<<
name|dictionary
index|[
literal|"DECORATIONS"
index|]
operator|<<
name|endl
expr_stmt|;
name|moduleStream
operator|<<
literal|"CONFIG += "
operator|<<
name|qmakeConfig
operator|.
name|join
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SSE2"
index|]
operator|==
literal|"yes"
condition|)
name|moduleStream
operator|<<
literal|" sse2"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SSE3"
index|]
operator|==
literal|"yes"
condition|)
name|moduleStream
operator|<<
literal|" sse3"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SSSE3"
index|]
operator|==
literal|"yes"
condition|)
name|moduleStream
operator|<<
literal|" ssse3"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SSE4_1"
index|]
operator|==
literal|"yes"
condition|)
name|moduleStream
operator|<<
literal|" sse4_1"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SSE4_2"
index|]
operator|==
literal|"yes"
condition|)
name|moduleStream
operator|<<
literal|" sse4_2"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"AVX"
index|]
operator|==
literal|"yes"
condition|)
name|moduleStream
operator|<<
literal|" avx"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"AVX2"
index|]
operator|==
literal|"yes"
condition|)
name|moduleStream
operator|<<
literal|" avx2"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"IWMMXT"
index|]
operator|==
literal|"yes"
condition|)
name|moduleStream
operator|<<
literal|" iwmmxt"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"NEON"
index|]
operator|==
literal|"yes"
condition|)
name|moduleStream
operator|<<
literal|" neon"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"LARGE_FILE"
index|]
operator|==
literal|"yes"
condition|)
name|moduleStream
operator|<<
literal|" largefile"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"STRIP"
index|]
operator|==
literal|"no"
condition|)
name|moduleStream
operator|<<
literal|" nostrip"
expr_stmt|;
name|moduleStream
operator|<<
name|endl
expr_stmt|;
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|var
init|=
name|qmakeVars
operator|.
name|begin
argument_list|()
init|;
name|var
operator|!=
name|qmakeVars
operator|.
name|end
argument_list|()
condition|;
operator|++
name|var
control|)
name|moduleStream
operator|<<
operator|(
operator|*
name|var
operator|)
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|moduleStream
operator|.
name|flush
argument_list|()
condition|)
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
block|}
block|}
end_function
begin_struct
DECL|struct|ArchData
struct|struct
name|ArchData
block|{
DECL|member|qmakespec
specifier|const
name|char
modifier|*
name|qmakespec
decl_stmt|;
DECL|member|key
specifier|const
name|char
modifier|*
name|key
decl_stmt|;
DECL|member|subarchKey
specifier|const
name|char
modifier|*
name|subarchKey
decl_stmt|;
DECL|member|type
specifier|const
name|char
modifier|*
name|type
decl_stmt|;
DECL|function|ArchData
name|ArchData
parameter_list|()
block|{}
DECL|function|ArchData
name|ArchData
parameter_list|(
specifier|const
name|char
modifier|*
name|t
parameter_list|,
specifier|const
name|char
modifier|*
name|qm
parameter_list|,
specifier|const
name|char
modifier|*
name|k
parameter_list|,
specifier|const
name|char
modifier|*
name|sak
parameter_list|)
member_init_list|:
name|qmakespec
argument_list|(
name|qm
argument_list|)
member_init_list|,
name|key
argument_list|(
name|k
argument_list|)
member_init_list|,
name|subarchKey
argument_list|(
name|sak
argument_list|)
member_init_list|,
name|type
argument_list|(
name|t
argument_list|)
block|{}
block|}
struct|;
end_struct
begin_comment
comment|/*     Runs qmake on config.tests/arch/arch.pro, which will detect the target arch     for the compiler we are using */
end_comment
begin_function
DECL|function|detectArch
name|void
name|Configure
operator|::
name|detectArch
parameter_list|()
block|{
name|QString
name|oldpwd
init|=
name|QDir
operator|::
name|currentPath
argument_list|()
decl_stmt|;
name|QString
name|newpwd
init|=
name|QString
argument_list|(
literal|"%1/config.tests/arch"
argument_list|)
operator|.
name|arg
argument_list|(
name|buildPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|QDir
argument_list|()
operator|.
name|exists
argument_list|(
name|newpwd
argument_list|)
operator|&&
operator|!
name|QDir
argument_list|()
operator|.
name|mkpath
argument_list|(
name|newpwd
argument_list|)
condition|)
block|{
name|cout
operator|<<
literal|"Failed to create directory "
operator|<<
name|qPrintable
argument_list|(
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|newpwd
argument_list|)
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|QDir
operator|::
name|setCurrent
argument_list|(
name|newpwd
argument_list|)
condition|)
block|{
name|cout
operator|<<
literal|"Failed to change working directory to "
operator|<<
name|qPrintable
argument_list|(
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|newpwd
argument_list|)
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
return|return;
block|}
name|QVector
argument_list|<
name|ArchData
argument_list|>
name|qmakespecs
decl_stmt|;
if|if
condition|(
name|dictionary
operator|.
name|contains
argument_list|(
literal|"XQMAKESPEC"
argument_list|)
condition|)
name|qmakespecs
operator|<<
name|ArchData
argument_list|(
literal|"target"
argument_list|,
literal|"XQMAKESPEC"
argument_list|,
literal|"QT_ARCH"
argument_list|,
literal|"QT_CPU_FEATURES"
argument_list|)
expr_stmt|;
name|qmakespecs
operator|<<
name|ArchData
argument_list|(
literal|"host"
argument_list|,
literal|"QMAKESPEC"
argument_list|,
literal|"QT_HOST_ARCH"
argument_list|,
literal|"QT_HOST_CPU_FEATURES"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qmakespecs
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|ArchData
modifier|&
name|data
init|=
name|qmakespecs
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QString
name|qmakespec
init|=
name|dictionary
operator|.
name|value
argument_list|(
name|data
operator|.
name|qmakespec
argument_list|)
decl_stmt|;
name|QString
name|key
init|=
name|data
operator|.
name|key
decl_stmt|;
name|QString
name|subarchKey
init|=
name|data
operator|.
name|subarchKey
decl_stmt|;
comment|// run qmake
name|QString
name|command
init|=
name|QString
argument_list|(
literal|"%1 -spec %2 %3"
argument_list|)
operator|.
name|arg
argument_list|(
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|buildPath
operator|+
literal|"/bin/qmake.exe"
argument_list|)
argument_list|,
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|qmakespec
argument_list|)
argument_list|,
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|sourcePath
operator|+
literal|"/config.tests/arch/arch.pro"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|qmakespec
operator|.
name|startsWith
argument_list|(
literal|"winrt"
argument_list|)
operator|||
name|qmakespec
operator|.
name|startsWith
argument_list|(
literal|"winphone"
argument_list|)
condition|)
name|command
operator|.
name|append
argument_list|(
literal|" QMAKE_LFLAGS+=/ENTRY:main"
argument_list|)
expr_stmt|;
name|int
name|returnValue
init|=
literal|0
decl_stmt|;
name|Environment
operator|::
name|execute
argument_list|(
name|command
argument_list|,
operator|&
name|returnValue
argument_list|)
expr_stmt|;
if|if
condition|(
name|returnValue
operator|!=
literal|0
condition|)
block|{
name|cout
operator|<<
literal|"QMake failed!"
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
return|return;
block|}
comment|// compile
name|command
operator|=
name|dictionary
index|[
literal|"MAKE"
index|]
expr_stmt|;
if|if
condition|(
name|command
operator|.
name|contains
argument_list|(
literal|"nmake"
argument_list|)
condition|)
name|command
operator|+=
literal|" /NOLOGO"
expr_stmt|;
name|command
operator|+=
literal|" -s"
expr_stmt|;
name|Environment
operator|::
name|execute
argument_list|(
name|command
argument_list|)
expr_stmt|;
comment|// find the executable that was generated
name|QString
name|arch_exe
decl_stmt|;
if|if
condition|(
name|qmakespec
operator|.
name|startsWith
argument_list|(
literal|"android"
argument_list|)
condition|)
block|{
name|arch_exe
operator|=
literal|"libarch.so"
expr_stmt|;
block|}
else|else
block|{
name|arch_exe
operator|=
literal|"arch.exe"
expr_stmt|;
block|}
name|QFile
name|exe
argument_list|(
name|arch_exe
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|exe
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
comment|// no Text, this is binary
name|exe
operator|.
name|setFileName
argument_list|(
literal|"arch"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|exe
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|cout
operator|<<
literal|"Could not find output file: "
operator|<<
name|qPrintable
argument_list|(
name|exe
operator|.
name|errorString
argument_list|()
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
return|return;
block|}
block|}
name|QByteArray
name|exeContents
init|=
name|exe
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|exe
operator|.
name|close
argument_list|()
expr_stmt|;
specifier|static
specifier|const
name|char
name|archMagic
index|[]
init|=
literal|"==Qt=magic=Qt== Architecture:"
decl_stmt|;
name|int
name|magicPos
init|=
name|exeContents
operator|.
name|indexOf
argument_list|(
name|archMagic
argument_list|)
decl_stmt|;
if|if
condition|(
name|magicPos
operator|==
operator|-
literal|1
condition|)
block|{
name|cout
operator|<<
literal|"Internal error, could not find the architecture of the "
operator|<<
name|data
operator|.
name|type
operator|<<
literal|" executable"
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
return|return;
block|}
comment|//cout<< "Found magic at offset 0x"<< hex<< magicPos<< endl;
comment|// the conversion from QByteArray will stop at the ending NUL anyway
name|QString
name|arch
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|exeContents
operator|.
name|constData
argument_list|()
operator|+
name|magicPos
operator|+
sizeof|sizeof
argument_list|(
name|archMagic
argument_list|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|dictionary
index|[
name|key
index|]
operator|=
name|arch
expr_stmt|;
specifier|static
specifier|const
name|char
name|subarchMagic
index|[]
init|=
literal|"==Qt=magic=Qt== Sub-architecture:"
decl_stmt|;
name|magicPos
operator|=
name|exeContents
operator|.
name|indexOf
argument_list|(
name|subarchMagic
argument_list|)
expr_stmt|;
if|if
condition|(
name|magicPos
operator|==
operator|-
literal|1
condition|)
block|{
name|cout
operator|<<
literal|"Internal error, could not find the sub-architecture of the "
operator|<<
name|data
operator|.
name|type
operator|<<
literal|" executable"
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
return|return;
block|}
name|QString
name|subarch
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|exeContents
operator|.
name|constData
argument_list|()
operator|+
name|magicPos
operator|+
sizeof|sizeof
argument_list|(
name|subarchMagic
argument_list|)
operator|-
literal|1
argument_list|)
decl_stmt|;
name|dictionary
index|[
name|subarchKey
index|]
operator|=
name|subarch
expr_stmt|;
comment|//cout<< "Detected arch '"<< qPrintable(arch)<< "'\n";
comment|//cout<< "Detected sub-arch '"<< qPrintable(subarch)<< "'\n";
comment|// clean up
name|Environment
operator|::
name|execute
argument_list|(
name|command
operator|+
literal|" distclean"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|dictionary
operator|.
name|contains
argument_list|(
literal|"QT_HOST_ARCH"
argument_list|)
condition|)
name|dictionary
index|[
literal|"QT_HOST_ARCH"
index|]
operator|=
literal|"unknown"
expr_stmt|;
if|if
condition|(
operator|!
name|dictionary
operator|.
name|contains
argument_list|(
literal|"QT_ARCH"
argument_list|)
condition|)
block|{
name|dictionary
index|[
literal|"QT_ARCH"
index|]
operator|=
name|dictionary
index|[
literal|"QT_HOST_ARCH"
index|]
expr_stmt|;
name|dictionary
index|[
literal|"QT_CPU_FEATURES"
index|]
operator|=
name|dictionary
index|[
literal|"QT_HOST_CPU_FEATURES"
index|]
expr_stmt|;
block|}
name|QDir
operator|::
name|setCurrent
argument_list|(
name|oldpwd
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tryCompileProject
name|bool
name|Configure
operator|::
name|tryCompileProject
parameter_list|(
specifier|const
name|QString
modifier|&
name|projectPath
parameter_list|,
specifier|const
name|QString
modifier|&
name|extraOptions
parameter_list|)
block|{
name|QString
name|oldpwd
init|=
name|QDir
operator|::
name|currentPath
argument_list|()
decl_stmt|;
name|QString
name|newpwd
init|=
name|QString
argument_list|(
literal|"%1/config.tests/%2"
argument_list|)
operator|.
name|arg
argument_list|(
name|buildPath
argument_list|,
name|projectPath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|QDir
argument_list|()
operator|.
name|exists
argument_list|(
name|newpwd
argument_list|)
operator|&&
operator|!
name|QDir
argument_list|()
operator|.
name|mkpath
argument_list|(
name|newpwd
argument_list|)
condition|)
block|{
name|cout
operator|<<
literal|"Failed to create directory "
operator|<<
name|qPrintable
argument_list|(
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|newpwd
argument_list|)
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|QDir
operator|::
name|setCurrent
argument_list|(
name|newpwd
argument_list|)
condition|)
block|{
name|cout
operator|<<
literal|"Failed to change working directory to "
operator|<<
name|qPrintable
argument_list|(
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|newpwd
argument_list|)
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
return|return
literal|false
return|;
block|}
comment|// run qmake
name|QString
name|command
init|=
name|QString
argument_list|(
literal|"%1 %2 %3 2>&1"
argument_list|)
operator|.
name|arg
argument_list|(
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|buildPath
operator|+
literal|"/bin/qmake.exe"
argument_list|)
argument_list|,
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|sourcePath
operator|+
literal|"/config.tests/"
operator|+
name|projectPath
argument_list|)
argument_list|,
name|extraOptions
argument_list|)
decl_stmt|;
if|if
condition|(
name|dictionary
operator|.
name|contains
argument_list|(
literal|"XQMAKESPEC"
argument_list|)
condition|)
block|{
specifier|const
name|QString
name|qmakespec
init|=
name|dictionary
index|[
literal|"XQMAKESPEC"
index|]
decl_stmt|;
if|if
condition|(
name|qmakespec
operator|.
name|startsWith
argument_list|(
literal|"winrt"
argument_list|)
operator|||
name|qmakespec
operator|.
name|startsWith
argument_list|(
literal|"winphone"
argument_list|)
condition|)
name|command
operator|.
name|append
argument_list|(
literal|" QMAKE_LFLAGS+=/ENTRY:main"
argument_list|)
expr_stmt|;
block|}
name|int
name|code
init|=
literal|0
decl_stmt|;
name|QString
name|output
init|=
name|Environment
operator|::
name|execute
argument_list|(
name|command
argument_list|,
operator|&
name|code
argument_list|)
decl_stmt|;
comment|//cout<< output<< endl;
if|if
condition|(
name|code
operator|==
literal|0
condition|)
block|{
comment|// compile
name|command
operator|=
name|dictionary
index|[
literal|"MAKE"
index|]
expr_stmt|;
if|if
condition|(
name|command
operator|.
name|contains
argument_list|(
literal|"nmake"
argument_list|)
condition|)
name|command
operator|+=
literal|" /NOLOGO"
expr_stmt|;
name|command
operator|+=
literal|" -s 2>&1"
expr_stmt|;
name|output
operator|=
name|Environment
operator|::
name|execute
argument_list|(
name|command
argument_list|,
operator|&
name|code
argument_list|)
expr_stmt|;
comment|//cout<< output<< endl;
comment|// clean up
name|Environment
operator|::
name|execute
argument_list|(
name|command
operator|+
literal|" distclean 2>&1"
argument_list|)
expr_stmt|;
block|}
name|QDir
operator|::
name|setCurrent
argument_list|(
name|oldpwd
argument_list|)
expr_stmt|;
return|return
name|code
operator|==
literal|0
return|;
block|}
end_function
begin_function
DECL|function|compilerSupportsFlag
name|bool
name|Configure
operator|::
name|compilerSupportsFlag
parameter_list|(
specifier|const
name|QString
modifier|&
name|compilerAndArgs
parameter_list|)
block|{
name|QFile
name|file
argument_list|(
literal|"conftest.cpp"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
condition|)
block|{
name|cout
operator|<<
literal|"could not open temp file for writing"
operator|<<
name|endl
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
operator|!
name|file
operator|.
name|write
argument_list|(
literal|"int main() { return 0; }\r\n"
argument_list|)
condition|)
block|{
name|cout
operator|<<
literal|"could not write to temp file"
operator|<<
name|endl
expr_stmt|;
return|return
literal|false
return|;
block|}
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// compilerAndArgs contains compiler because there is no way to query it
name|QString
name|command
init|=
name|compilerAndArgs
operator|+
literal|" -o conftest-out.o conftest.cpp"
decl_stmt|;
name|int
name|code
init|=
literal|0
decl_stmt|;
name|QString
name|output
init|=
name|Environment
operator|::
name|execute
argument_list|(
name|command
argument_list|,
operator|&
name|code
argument_list|)
decl_stmt|;
name|file
operator|.
name|remove
argument_list|()
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
literal|"conftest-out.o"
argument_list|)
expr_stmt|;
return|return
name|code
operator|==
literal|0
return|;
block|}
end_function
begin_function
DECL|function|generateQDevicePri
name|void
name|Configure
operator|::
name|generateQDevicePri
parameter_list|()
block|{
name|FileWriter
name|deviceStream
argument_list|(
name|buildPath
operator|+
literal|"/mkspecs/qdevice.pri"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dictionary
operator|.
name|contains
argument_list|(
literal|"DEVICE_OPTION"
argument_list|)
condition|)
block|{
specifier|const
name|QString
name|devoptionlist
init|=
name|dictionary
index|[
literal|"DEVICE_OPTION"
index|]
decl_stmt|;
specifier|const
name|QStringList
name|optionlist
init|=
name|devoptionlist
operator|.
name|split
argument_list|(
name|QStringLiteral
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|entry
decl|,
name|optionlist
control|)
name|deviceStream
operator|<<
name|entry
operator|<<
literal|"\n"
expr_stmt|;
block|}
if|if
condition|(
name|dictionary
operator|.
name|contains
argument_list|(
literal|"ANDROID_SDK_ROOT"
argument_list|)
operator|&&
name|dictionary
operator|.
name|contains
argument_list|(
literal|"ANDROID_NDK_ROOT"
argument_list|)
condition|)
block|{
name|QString
name|android_platform
argument_list|(
name|dictionary
operator|.
name|contains
argument_list|(
literal|"ANDROID_PLATFORM"
argument_list|)
condition|?
name|dictionary
index|[
literal|"ANDROID_PLATFORM"
index|]
else|:
name|QString
argument_list|(
literal|"android-9"
argument_list|)
argument_list|)
decl_stmt|;
name|deviceStream
operator|<<
literal|"android_install {"
operator|<<
name|endl
expr_stmt|;
name|deviceStream
operator|<<
literal|"    DEFAULT_ANDROID_SDK_ROOT = "
operator|<<
name|formatPath
argument_list|(
name|dictionary
index|[
literal|"ANDROID_SDK_ROOT"
index|]
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|deviceStream
operator|<<
literal|"    DEFAULT_ANDROID_NDK_ROOT = "
operator|<<
name|formatPath
argument_list|(
name|dictionary
index|[
literal|"ANDROID_NDK_ROOT"
index|]
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|deviceStream
operator|<<
literal|"    DEFAULT_ANDROID_PLATFORM = "
operator|<<
name|android_platform
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|QSysInfo
operator|::
name|WordSize
operator|==
literal|64
condition|)
name|deviceStream
operator|<<
literal|"    DEFAULT_ANDROID_NDK_HOST = windows-x86_64"
operator|<<
name|endl
expr_stmt|;
else|else
name|deviceStream
operator|<<
literal|"    DEFAULT_ANDROID_NDK_HOST = windows"
operator|<<
name|endl
expr_stmt|;
name|QString
name|android_arch
argument_list|(
name|dictionary
operator|.
name|contains
argument_list|(
literal|"ANDROID_TARGET_ARCH"
argument_list|)
condition|?
name|dictionary
index|[
literal|"ANDROID_TARGET_ARCH"
index|]
else|:
name|QString
argument_list|(
literal|"armeabi-v7a"
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|android_tc_vers
argument_list|(
name|dictionary
operator|.
name|contains
argument_list|(
literal|"ANDROID_NDK_TOOLCHAIN_VERSION"
argument_list|)
condition|?
name|dictionary
index|[
literal|"ANDROID_NDK_TOOLCHAIN_VERSION"
index|]
else|:
name|QString
argument_list|(
literal|"4.8"
argument_list|)
argument_list|)
decl_stmt|;
name|deviceStream
operator|<<
literal|"    DEFAULT_ANDROID_TARGET_ARCH = "
operator|<<
name|android_arch
operator|<<
name|endl
expr_stmt|;
name|deviceStream
operator|<<
literal|"    DEFAULT_ANDROID_NDK_TOOLCHAIN_VERSION = "
operator|<<
name|android_tc_vers
operator|<<
name|endl
expr_stmt|;
name|deviceStream
operator|<<
literal|"}"
operator|<<
name|endl
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|deviceStream
operator|.
name|flush
argument_list|()
condition|)
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|generateQConfigPri
name|void
name|Configure
operator|::
name|generateQConfigPri
parameter_list|()
block|{
comment|// Generate qconfig.pri
block|{
name|FileWriter
name|configStream
argument_list|(
name|buildPath
operator|+
literal|"/mkspecs/qconfig.pri"
argument_list|)
decl_stmt|;
name|configStream
operator|<<
literal|"CONFIG+= "
expr_stmt|;
name|configStream
operator|<<
name|dictionary
index|[
literal|"BUILD"
index|]
expr_stmt|;
name|configStream
operator|<<
operator|(
name|dictionary
index|[
literal|"SHARED"
index|]
operator|==
literal|"no"
condition|?
literal|" static"
else|:
literal|" shared"
operator|)
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"LTCG"
index|]
operator|==
literal|"yes"
condition|)
name|configStream
operator|<<
literal|" ltcg"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"RTTI"
index|]
operator|==
literal|"yes"
condition|)
name|configStream
operator|<<
literal|" rtti"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"INCREDIBUILD_XGE"
index|]
operator|==
literal|"yes"
condition|)
name|configStream
operator|<<
literal|" incredibuild_xge"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"PLUGIN_MANIFESTS"
index|]
operator|==
literal|"no"
condition|)
name|configStream
operator|<<
literal|" no_plugin_manifest"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"CROSS_COMPILE"
index|]
operator|==
literal|"yes"
condition|)
name|configStream
operator|<<
literal|" cross_compile"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SLOG2"
index|]
operator|==
literal|"yes"
condition|)
name|configStream
operator|<<
literal|" slog2"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"QNX_IMF"
index|]
operator|==
literal|"yes"
condition|)
name|configStream
operator|<<
literal|" qqnx_imf"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"PPS"
index|]
operator|==
literal|"yes"
condition|)
name|configStream
operator|<<
literal|" qqnx_pps"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"LGMON"
index|]
operator|==
literal|"yes"
condition|)
name|configStream
operator|<<
literal|" lgmon"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"DIRECTWRITE"
index|]
operator|==
literal|"yes"
condition|)
name|configStream
operator|<<
literal|" directwrite"
expr_stmt|;
comment|// ### For compatibility only, should be removed later.
name|configStream
operator|<<
literal|" qpa"
expr_stmt|;
name|configStream
operator|<<
name|endl
expr_stmt|;
name|configStream
operator|<<
literal|"host_build {"
operator|<<
name|endl
expr_stmt|;
name|configStream
operator|<<
literal|"    QT_ARCH = "
operator|<<
name|dictionary
index|[
literal|"QT_HOST_ARCH"
index|]
operator|<<
name|endl
expr_stmt|;
name|configStream
operator|<<
literal|"    QT_TARGET_ARCH = "
operator|<<
name|dictionary
index|[
literal|"QT_ARCH"
index|]
operator|<<
name|endl
expr_stmt|;
name|configStream
operator|<<
literal|"} else {"
operator|<<
name|endl
expr_stmt|;
name|configStream
operator|<<
literal|"    QT_ARCH = "
operator|<<
name|dictionary
index|[
literal|"QT_ARCH"
index|]
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|dictionary
operator|.
name|contains
argument_list|(
literal|"XQMAKESPEC"
argument_list|)
operator|&&
operator|!
name|dictionary
index|[
literal|"XQMAKESPEC"
index|]
operator|.
name|startsWith
argument_list|(
literal|"wince"
argument_list|)
condition|)
block|{
comment|// FIXME: add detection
name|configStream
operator|<<
literal|"    QMAKE_DEFAULT_LIBDIRS = /lib /usr/lib"
operator|<<
name|endl
expr_stmt|;
name|configStream
operator|<<
literal|"    QMAKE_DEFAULT_INCDIRS = /usr/include /usr/local/include"
operator|<<
name|endl
expr_stmt|;
block|}
name|configStream
operator|<<
literal|"}"
operator|<<
name|endl
expr_stmt|;
name|configStream
operator|<<
literal|"QT_CONFIG += "
operator|<<
name|qtConfig
operator|.
name|join
argument_list|(
literal|' '
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|configStream
operator|<<
literal|"#versioning "
operator|<<
name|endl
operator|<<
literal|"QT_VERSION = "
operator|<<
name|dictionary
index|[
literal|"VERSION"
index|]
operator|<<
name|endl
operator|<<
literal|"QT_MAJOR_VERSION = "
operator|<<
name|dictionary
index|[
literal|"VERSION_MAJOR"
index|]
operator|<<
name|endl
operator|<<
literal|"QT_MINOR_VERSION = "
operator|<<
name|dictionary
index|[
literal|"VERSION_MINOR"
index|]
operator|<<
name|endl
operator|<<
literal|"QT_PATCH_VERSION = "
operator|<<
name|dictionary
index|[
literal|"VERSION_PATCH"
index|]
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"CFG_SYSROOT"
index|]
operator|.
name|isEmpty
argument_list|()
operator|&&
name|dictionary
index|[
literal|"CFG_GCC_SYSROOT"
index|]
operator|==
literal|"yes"
condition|)
block|{
name|configStream
operator|<<
name|endl
operator|<<
literal|"# sysroot"
operator|<<
name|endl
operator|<<
literal|"!host_build {"
operator|<<
name|endl
operator|<<
literal|"    QMAKE_CFLAGS    += --sysroot=$$[QT_SYSROOT]"
operator|<<
name|endl
operator|<<
literal|"    QMAKE_CXXFLAGS  += --sysroot=$$[QT_SYSROOT]"
operator|<<
name|endl
operator|<<
literal|"    QMAKE_LFLAGS    += --sysroot=$$[QT_SYSROOT]"
operator|<<
name|endl
operator|<<
literal|"}"
operator|<<
name|endl
expr_stmt|;
block|}
specifier|const
name|QString
name|targetOS
init|=
name|dictionary
operator|.
name|value
argument_list|(
literal|"TARGET_OS"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|targetOS
operator|.
name|isEmpty
argument_list|()
condition|)
name|configStream
operator|<<
literal|"QMAKE_TARGET_OS = "
operator|<<
name|targetOS
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"QMAKE_RPATHDIR"
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|configStream
operator|<<
literal|"QMAKE_RPATHDIR += "
operator|<<
name|formatPath
argument_list|(
name|dictionary
index|[
literal|"QMAKE_RPATHDIR"
index|]
argument_list|)
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"QT_LIBINFIX"
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|configStream
operator|<<
literal|"QT_LIBINFIX = "
operator|<<
name|dictionary
index|[
literal|"QT_LIBINFIX"
index|]
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"QT_NAMESPACE"
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|configStream
operator|<<
literal|"#namespaces"
operator|<<
name|endl
operator|<<
literal|"QT_NAMESPACE = "
operator|<<
name|dictionary
index|[
literal|"QT_NAMESPACE"
index|]
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SHARED"
index|]
operator|==
literal|"no"
condition|)
name|configStream
operator|<<
literal|"QT_DEFAULT_QPA_PLUGIN = q"
operator|<<
name|qpaPlatformName
argument_list|()
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|configStream
operator|.
name|flush
argument_list|()
condition|)
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|addDefine
name|QString
name|Configure
operator|::
name|addDefine
parameter_list|(
name|QString
name|def
parameter_list|)
block|{
name|QString
name|result
decl_stmt|,
name|defNeg
decl_stmt|,
name|defD
init|=
name|def
decl_stmt|;
name|defD
operator|.
name|replace
argument_list|(
name|QRegExp
argument_list|(
literal|"=.*"
argument_list|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|def
operator|.
name|replace
argument_list|(
name|QRegExp
argument_list|(
literal|"="
argument_list|)
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
if|if
condition|(
name|def
operator|.
name|startsWith
argument_list|(
literal|"QT_NO_"
argument_list|)
condition|)
block|{
name|defNeg
operator|=
name|defD
expr_stmt|;
name|defNeg
operator|.
name|replace
argument_list|(
literal|"QT_NO_"
argument_list|,
literal|"QT_"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|def
operator|.
name|startsWith
argument_list|(
literal|"QT_"
argument_list|)
condition|)
block|{
name|defNeg
operator|=
name|defD
expr_stmt|;
name|defNeg
operator|.
name|replace
argument_list|(
literal|"QT_"
argument_list|,
literal|"QT_NO_"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|defNeg
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|result
operator|=
literal|"#ifndef $DEFD\n"
literal|"# define $DEF\n"
literal|"#endif\n\n"
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
literal|"#if defined($DEFD)&& defined($DEFNEG)\n"
literal|"# undef $DEFD\n"
literal|"#elif !defined($DEFD)\n"
literal|"# define $DEF\n"
literal|"#endif\n\n"
expr_stmt|;
block|}
name|result
operator|.
name|replace
argument_list|(
literal|"$DEFNEG"
argument_list|,
name|defNeg
argument_list|)
expr_stmt|;
name|result
operator|.
name|replace
argument_list|(
literal|"$DEFD"
argument_list|,
name|defD
argument_list|)
expr_stmt|;
name|result
operator|.
name|replace
argument_list|(
literal|"$DEF"
argument_list|,
name|def
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|generateConfigfiles
name|void
name|Configure
operator|::
name|generateConfigfiles
parameter_list|()
block|{
block|{
name|FileWriter
name|tmpStream
argument_list|(
name|buildPath
operator|+
literal|"/src/corelib/global/qconfig.h"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"QCONFIG"
index|]
operator|==
literal|"full"
condition|)
block|{
name|tmpStream
operator|<<
literal|"/* Everything */"
operator|<<
name|endl
expr_stmt|;
block|}
else|else
block|{
name|tmpStream
operator|<<
literal|"#ifndef QT_BOOTSTRAPPED"
operator|<<
name|endl
expr_stmt|;
name|QFile
name|inFile
argument_list|(
name|dictionary
index|[
literal|"QCONFIG_PATH"
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|inFile
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|tmpStream
operator|<<
name|QTextStream
argument_list|(
operator|&
name|inFile
argument_list|)
operator|.
name|readAll
argument_list|()
expr_stmt|;
name|inFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|tmpStream
operator|<<
literal|"#endif // QT_BOOTSTRAPPED"
operator|<<
name|endl
expr_stmt|;
block|}
name|tmpStream
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SHARED"
index|]
operator|==
literal|"no"
condition|)
block|{
name|tmpStream
operator|<<
literal|"/* Qt was configured for a static build */"
operator|<<
name|endl
operator|<<
literal|"#if !defined(QT_SHARED)&& !defined(QT_STATIC)"
operator|<<
name|endl
operator|<<
literal|"# define QT_STATIC"
operator|<<
name|endl
operator|<<
literal|"#endif"
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
name|tmpStream
operator|<<
literal|"/* License information */"
operator|<<
name|endl
expr_stmt|;
name|tmpStream
operator|<<
literal|"#define QT_PRODUCT_LICENSEE \""
operator|<<
name|dictionary
index|[
literal|"LICENSEE"
index|]
operator|<<
literal|"\""
operator|<<
name|endl
expr_stmt|;
name|tmpStream
operator|<<
literal|"#define QT_PRODUCT_LICENSE \""
operator|<<
name|dictionary
index|[
literal|"EDITION"
index|]
operator|<<
literal|"\""
operator|<<
name|endl
expr_stmt|;
name|tmpStream
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"BUILDDEV"
index|]
operator|==
literal|"yes"
condition|)
block|{
name|dictionary
index|[
literal|"QMAKE_INTERNAL"
index|]
operator|=
literal|"yes"
expr_stmt|;
name|tmpStream
operator|<<
literal|"/* Used for example to export symbols for the certain autotests*/"
operator|<<
name|endl
expr_stmt|;
name|tmpStream
operator|<<
literal|"#define QT_BUILD_INTERNAL"
operator|<<
name|endl
expr_stmt|;
name|tmpStream
operator|<<
name|endl
expr_stmt|;
block|}
name|tmpStream
operator|<<
name|endl
operator|<<
literal|"// Compiler sub-arch support"
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SSE2"
index|]
operator|==
literal|"yes"
condition|)
name|tmpStream
operator|<<
literal|"#define QT_COMPILER_SUPPORTS_SSE2"
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SSE3"
index|]
operator|==
literal|"yes"
condition|)
name|tmpStream
operator|<<
literal|"#define QT_COMPILER_SUPPORTS_SSE3"
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SSSE3"
index|]
operator|==
literal|"yes"
condition|)
name|tmpStream
operator|<<
literal|"#define QT_COMPILER_SUPPORTS_SSSE3"
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SSE4_1"
index|]
operator|==
literal|"yes"
condition|)
name|tmpStream
operator|<<
literal|"#define QT_COMPILER_SUPPORTS_SSE4_1"
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SSE4_2"
index|]
operator|==
literal|"yes"
condition|)
name|tmpStream
operator|<<
literal|"#define QT_COMPILER_SUPPORTS_SSE4_2"
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"AVX"
index|]
operator|==
literal|"yes"
condition|)
name|tmpStream
operator|<<
literal|"#define QT_COMPILER_SUPPORTS_AVX"
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"AVX2"
index|]
operator|==
literal|"yes"
condition|)
name|tmpStream
operator|<<
literal|"#define QT_COMPILER_SUPPORTS_AVX2"
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"IWMMXT"
index|]
operator|==
literal|"yes"
condition|)
name|tmpStream
operator|<<
literal|"#define QT_COMPILER_SUPPORTS_IWMMXT"
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"QREAL"
index|]
operator|!=
literal|"double"
condition|)
name|tmpStream
operator|<<
literal|"#define QT_COORD_TYPE "
operator|<<
name|dictionary
index|[
literal|"QREAL"
index|]
operator|<<
name|endl
expr_stmt|;
name|tmpStream
operator|<<
name|endl
operator|<<
literal|"// Compile time features"
operator|<<
name|endl
expr_stmt|;
name|QStringList
name|qconfigList
decl_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"STYLE_WINDOWS"
index|]
operator|!=
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_STYLE_WINDOWS"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"STYLE_FUSION"
index|]
operator|!=
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_STYLE_FUSION"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"STYLE_WINDOWSXP"
index|]
operator|!=
literal|"yes"
operator|&&
name|dictionary
index|[
literal|"STYLE_WINDOWSVISTA"
index|]
operator|!=
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_STYLE_WINDOWSXP"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"STYLE_WINDOWSVISTA"
index|]
operator|!=
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_STYLE_WINDOWSVISTA"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"STYLE_WINDOWSCE"
index|]
operator|!=
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_STYLE_WINDOWSCE"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"STYLE_WINDOWSMOBILE"
index|]
operator|!=
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_STYLE_WINDOWSMOBILE"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"STYLE_GTK"
index|]
operator|!=
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_STYLE_GTK"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"GIF"
index|]
operator|==
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_BUILTIN_GIF_READER=1"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"PNG"
index|]
operator|!=
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_IMAGEFORMAT_PNG"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"JPEG"
index|]
operator|!=
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_IMAGEFORMAT_JPEG"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"ZLIB"
index|]
operator|==
literal|"no"
condition|)
block|{
name|qconfigList
operator|+=
literal|"QT_NO_ZLIB"
expr_stmt|;
name|qconfigList
operator|+=
literal|"QT_NO_COMPRESS"
expr_stmt|;
block|}
if|if
condition|(
name|dictionary
index|[
literal|"ACCESSIBILITY"
index|]
operator|==
literal|"no"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_ACCESSIBILITY"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"WIDGETS"
index|]
operator|==
literal|"no"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_WIDGETS"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"GUI"
index|]
operator|==
literal|"no"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_GUI"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"OPENGL"
index|]
operator|==
literal|"no"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_OPENGL"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"OPENVG"
index|]
operator|==
literal|"no"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_OPENVG"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"OPENSSL"
index|]
operator|==
literal|"no"
condition|)
block|{
name|qconfigList
operator|+=
literal|"QT_NO_OPENSSL"
expr_stmt|;
name|qconfigList
operator|+=
literal|"QT_NO_SSL"
expr_stmt|;
block|}
if|if
condition|(
name|dictionary
index|[
literal|"OPENSSL"
index|]
operator|==
literal|"linked"
condition|)
name|qconfigList
operator|+=
literal|"QT_LINKED_OPENSSL"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"DBUS"
index|]
operator|==
literal|"no"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_DBUS"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"QML_DEBUG"
index|]
operator|==
literal|"no"
condition|)
name|qconfigList
operator|+=
literal|"QT_QML_NO_DEBUGGER"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"FREETYPE"
index|]
operator|==
literal|"no"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_FREETYPE"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"HARFBUZZ"
index|]
operator|==
literal|"no"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_HARFBUZZ"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"NATIVE_GESTURES"
index|]
operator|==
literal|"no"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_NATIVE_GESTURES"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"OPENGL_ES_2"
index|]
operator|==
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_OPENGL_ES"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"OPENGL_ES_2"
index|]
operator|==
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_OPENGL_ES_2"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"DYNAMICGL"
index|]
operator|==
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_OPENGL_DYNAMIC"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_MYSQL"
index|]
operator|==
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_SQL_MYSQL"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_ODBC"
index|]
operator|==
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_SQL_ODBC"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_OCI"
index|]
operator|==
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_SQL_OCI"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_PSQL"
index|]
operator|==
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_SQL_PSQL"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_TDS"
index|]
operator|==
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_SQL_TDS"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_DB2"
index|]
operator|==
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_SQL_DB2"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_SQLITE"
index|]
operator|==
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_SQL_SQLITE"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_SQLITE2"
index|]
operator|==
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_SQL_SQLITE2"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SQL_IBASE"
index|]
operator|==
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_SQL_IBASE"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"POSIX_IPC"
index|]
operator|==
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_POSIX_IPC"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"FONT_CONFIG"
index|]
operator|==
literal|"no"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_FONTCONFIG"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"NIS"
index|]
operator|==
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_NIS"
expr_stmt|;
else|else
name|qconfigList
operator|+=
literal|"QT_NO_NIS"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"LARGE_FILE"
index|]
operator|==
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_LARGEFILE_SUPPORT=64"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"QT_CUPS"
index|]
operator|==
literal|"no"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_CUPS"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"QT_ICONV"
index|]
operator|==
literal|"no"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_ICONV"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"QT_EVDEV"
index|]
operator|==
literal|"no"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_EVDEV"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"QT_MTDEV"
index|]
operator|==
literal|"no"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_MTDEV"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"QT_GLIB"
index|]
operator|==
literal|"no"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_GLIB"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"QT_INOTIFY"
index|]
operator|==
literal|"no"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_INOTIFY"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"QT_EVENTFD"
index|]
operator|==
literal|"no"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_EVENTFD"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"REDUCE_EXPORTS"
index|]
operator|==
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_VISIBILITY_AVAILABLE"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"REDUCE_RELOCATIONS"
index|]
operator|==
literal|"yes"
condition|)
name|qconfigList
operator|+=
literal|"QT_REDUCE_RELOCATIONS"
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"QT_GETIFADDRS"
index|]
operator|==
literal|"no"
condition|)
name|qconfigList
operator|+=
literal|"QT_NO_GETIFADDRS"
expr_stmt|;
name|qconfigList
operator|+=
name|QString
argument_list|(
literal|"QT_POINTER_SIZE=%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|dictionary
index|[
literal|"QT_POINTER_SIZE"
index|]
argument_list|)
expr_stmt|;
name|qconfigList
operator|.
name|sort
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qconfigList
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|tmpStream
operator|<<
name|addDefine
argument_list|(
name|qconfigList
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|tmpStream
operator|<<
literal|"#define QT_QPA_DEFAULT_PLATFORM_NAME \""
operator|<<
name|qpaPlatformName
argument_list|()
operator|<<
literal|"\""
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|tmpStream
operator|.
name|flush
argument_list|()
condition|)
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|displayConfig
name|void
name|Configure
operator|::
name|displayConfig
parameter_list|()
block|{
name|fstream
name|sout
decl_stmt|;
name|sout
operator|.
name|open
argument_list|(
name|QString
argument_list|(
name|buildPath
operator|+
literal|"/config.summary"
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|ios
operator|::
name|in
operator||
name|ios
operator|::
name|out
operator||
name|ios
operator|::
name|trunc
argument_list|)
expr_stmt|;
comment|// Give some feedback
name|sout
operator|<<
literal|"Environment:"
operator|<<
name|endl
expr_stmt|;
name|QString
name|env
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|getenv
argument_list|(
literal|"INCLUDE"
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
name|QRegExp
argument_list|(
literal|"[;,]"
argument_list|)
argument_list|,
literal|"\n      "
argument_list|)
decl_stmt|;
if|if
condition|(
name|env
operator|.
name|isEmpty
argument_list|()
condition|)
name|env
operator|=
literal|"Unset"
expr_stmt|;
name|sout
operator|<<
literal|"    INCLUDE=\n      "
operator|<<
name|env
operator|<<
name|endl
expr_stmt|;
name|env
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|getenv
argument_list|(
literal|"LIB"
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
name|QRegExp
argument_list|(
literal|"[;,]"
argument_list|)
argument_list|,
literal|"\n      "
argument_list|)
expr_stmt|;
if|if
condition|(
name|env
operator|.
name|isEmpty
argument_list|()
condition|)
name|env
operator|=
literal|"Unset"
expr_stmt|;
name|sout
operator|<<
literal|"    LIB=\n      "
operator|<<
name|env
operator|<<
name|endl
expr_stmt|;
name|env
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|getenv
argument_list|(
literal|"PATH"
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
name|QRegExp
argument_list|(
literal|"[;,]"
argument_list|)
argument_list|,
literal|"\n      "
argument_list|)
expr_stmt|;
if|if
condition|(
name|env
operator|.
name|isEmpty
argument_list|()
condition|)
name|env
operator|=
literal|"Unset"
expr_stmt|;
name|sout
operator|<<
literal|"    PATH=\n      "
operator|<<
name|env
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
name|QStringLiteral
argument_list|(
literal|"EDITION"
argument_list|)
index|]
operator|!=
name|QStringLiteral
argument_list|(
literal|"OpenSource"
argument_list|)
condition|)
block|{
name|QString
name|l1
init|=
name|dictionary
index|[
literal|"LICENSEE"
index|]
decl_stmt|;
name|QString
name|l2
init|=
name|dictionary
index|[
literal|"LICENSEID"
index|]
decl_stmt|;
name|QString
name|l3
init|=
name|dictionary
index|[
literal|"EDITION"
index|]
operator|+
literal|' '
operator|+
literal|"Edition"
decl_stmt|;
name|QString
name|l4
init|=
name|dictionary
index|[
literal|"EXPIRYDATE"
index|]
decl_stmt|;
name|sout
operator|<<
literal|"Licensee...................."
operator|<<
operator|(
name|l1
operator|.
name|isNull
argument_list|()
condition|?
literal|""
else|:
name|l1
operator|)
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"License ID.................."
operator|<<
operator|(
name|l2
operator|.
name|isNull
argument_list|()
condition|?
literal|""
else|:
name|l2
operator|)
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"Product license............."
operator|<<
operator|(
name|l3
operator|.
name|isNull
argument_list|()
condition|?
literal|""
else|:
name|l3
operator|)
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"Expiry Date................."
operator|<<
operator|(
name|l4
operator|.
name|isNull
argument_list|()
condition|?
literal|""
else|:
name|l4
operator|)
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
name|endl
expr_stmt|;
block|}
name|sout
operator|<<
literal|"Configuration:"
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"    "
operator|<<
name|qmakeConfig
operator|.
name|join
argument_list|(
literal|"\n    "
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"Qt Configuration:"
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"    "
operator|<<
name|qtConfig
operator|.
name|join
argument_list|(
literal|"\n    "
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|dictionary
operator|.
name|contains
argument_list|(
literal|"XQMAKESPEC"
argument_list|)
condition|)
name|sout
operator|<<
literal|"QMAKESPEC..................."
operator|<<
name|dictionary
index|[
literal|"XQMAKESPEC"
index|]
operator|<<
literal|" ("
operator|<<
name|dictionary
index|[
literal|"QMAKESPEC_FROM"
index|]
operator|<<
literal|")"
operator|<<
name|endl
expr_stmt|;
else|else
name|sout
operator|<<
literal|"QMAKESPEC..................."
operator|<<
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|<<
literal|" ("
operator|<<
name|dictionary
index|[
literal|"QMAKESPEC_FROM"
index|]
operator|<<
literal|")"
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"TARGET_OS"
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|sout
operator|<<
literal|"Target OS..................."
operator|<<
name|dictionary
index|[
literal|"TARGET_OS"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"Architecture................"
operator|<<
name|dictionary
index|[
literal|"QT_ARCH"
index|]
operator|<<
literal|", features:"
operator|<<
name|dictionary
index|[
literal|"QT_CPU_FEATURES"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"Host Architecture..........."
operator|<<
name|dictionary
index|[
literal|"QT_HOST_ARCH"
index|]
operator|<<
literal|", features:"
operator|<<
name|dictionary
index|[
literal|"QT_HOST_CPU_FEATURES"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"Maketool...................."
operator|<<
name|dictionary
index|[
literal|"MAKE"
index|]
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"BUILDALL"
index|]
operator|==
literal|"yes"
condition|)
block|{
name|sout
operator|<<
literal|"Debug build................."
operator|<<
literal|"yes (combined)"
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"Default build..............."
operator|<<
name|dictionary
index|[
literal|"BUILD"
index|]
operator|<<
name|endl
expr_stmt|;
block|}
else|else
block|{
name|sout
operator|<<
literal|"Debug......................."
operator|<<
operator|(
name|dictionary
index|[
literal|"BUILD"
index|]
operator|==
literal|"debug"
condition|?
literal|"yes"
else|:
literal|"no"
operator|)
operator|<<
name|endl
expr_stmt|;
block|}
if|if
condition|(
name|dictionary
index|[
literal|"BUILD"
index|]
operator|==
literal|"release"
operator|||
name|dictionary
index|[
literal|"BUILDALL"
index|]
operator|==
literal|"yes"
condition|)
name|sout
operator|<<
literal|"Force debug info............"
operator|<<
name|dictionary
index|[
literal|"FORCEDEBUGINFO"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"C++11 support..............."
operator|<<
name|dictionary
index|[
literal|"C++11"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"Link Time Code Generation..."
operator|<<
name|dictionary
index|[
literal|"LTCG"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"Accessibility support......."
operator|<<
name|dictionary
index|[
literal|"ACCESSIBILITY"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"RTTI support................"
operator|<<
name|dictionary
index|[
literal|"RTTI"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"SSE2 support................"
operator|<<
name|dictionary
index|[
literal|"SSE2"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"SSE3 support................"
operator|<<
name|dictionary
index|[
literal|"SSE3"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"SSSE3 support..............."
operator|<<
name|dictionary
index|[
literal|"SSSE3"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"SSE4.1 support.............."
operator|<<
name|dictionary
index|[
literal|"SSE4_1"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"SSE4.2 support.............."
operator|<<
name|dictionary
index|[
literal|"SSE4_2"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"AVX support................."
operator|<<
name|dictionary
index|[
literal|"AVX"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"AVX2 support................"
operator|<<
name|dictionary
index|[
literal|"AVX2"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"NEON support................"
operator|<<
name|dictionary
index|[
literal|"NEON"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"IWMMXT support.............."
operator|<<
name|dictionary
index|[
literal|"IWMMXT"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"OpenGL support.............."
operator|<<
name|dictionary
index|[
literal|"OPENGL"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"Large File support.........."
operator|<<
name|dictionary
index|[
literal|"LARGE_FILE"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"NIS support................."
operator|<<
name|dictionary
index|[
literal|"NIS"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"Iconv support..............."
operator|<<
name|dictionary
index|[
literal|"QT_ICONV"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"Evdev support..............."
operator|<<
name|dictionary
index|[
literal|"QT_EVDEV"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"Mtdev support..............."
operator|<<
name|dictionary
index|[
literal|"QT_MTDEV"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"Inotify support............."
operator|<<
name|dictionary
index|[
literal|"QT_INOTIFY"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"eventfd(7) support.........."
operator|<<
name|dictionary
index|[
literal|"QT_EVENTFD"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"Glib support................"
operator|<<
name|dictionary
index|[
literal|"QT_GLIB"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"CUPS support................"
operator|<<
name|dictionary
index|[
literal|"QT_CUPS"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"OpenVG support.............."
operator|<<
name|dictionary
index|[
literal|"OPENVG"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"OpenSSL support............."
operator|<<
name|dictionary
index|[
literal|"OPENSSL"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"Qt D-Bus support............"
operator|<<
name|dictionary
index|[
literal|"DBUS"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"Qt Widgets module support..."
operator|<<
name|dictionary
index|[
literal|"WIDGETS"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"Qt GUI module support......."
operator|<<
name|dictionary
index|[
literal|"GUI"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"QML debugging..............."
operator|<<
name|dictionary
index|[
literal|"QML_DEBUG"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"DirectWrite support........."
operator|<<
name|dictionary
index|[
literal|"DIRECTWRITE"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"Use system proxies.........."
operator|<<
name|dictionary
index|[
literal|"SYSTEM_PROXIES"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"QPA Backends:"
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"    GDI....................."
operator|<<
literal|"yes"
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"    Direct2D................"
operator|<<
name|dictionary
index|[
literal|"DIRECT2D"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"Third Party Libraries:"
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"    ZLIB support............"
operator|<<
name|dictionary
index|[
literal|"ZLIB"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"    GIF support............."
operator|<<
name|dictionary
index|[
literal|"GIF"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"    JPEG support............"
operator|<<
name|dictionary
index|[
literal|"JPEG"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"    PNG support............."
operator|<<
name|dictionary
index|[
literal|"PNG"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"    FreeType support........"
operator|<<
name|dictionary
index|[
literal|"FREETYPE"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"    Fontconfig support......"
operator|<<
name|dictionary
index|[
literal|"FONT_CONFIG"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"    HarfBuzz-NG support....."
operator|<<
name|dictionary
index|[
literal|"HARFBUZZ"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"    PCRE support............"
operator|<<
name|dictionary
index|[
literal|"PCRE"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"    ICU support............."
operator|<<
name|dictionary
index|[
literal|"ICU"
index|]
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|(
name|platform
argument_list|()
operator|==
name|QNX
operator|)
operator|||
operator|(
name|platform
argument_list|()
operator|==
name|BLACKBERRY
operator|)
condition|)
block|{
name|sout
operator|<<
literal|"    SLOG2 support..........."
operator|<<
name|dictionary
index|[
literal|"SLOG2"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"    IMF support............."
operator|<<
name|dictionary
index|[
literal|"QNX_IMF"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"    PPS support............."
operator|<<
name|dictionary
index|[
literal|"PPS"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"    LGMON support..........."
operator|<<
name|dictionary
index|[
literal|"LGMON"
index|]
operator|<<
name|endl
expr_stmt|;
block|}
name|sout
operator|<<
literal|"    ANGLE..................."
operator|<<
name|dictionary
index|[
literal|"ANGLE"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"    Dynamic OpenGL.........."
operator|<<
name|dictionary
index|[
literal|"DYNAMICGL"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"Styles:"
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"    Windows................."
operator|<<
name|dictionary
index|[
literal|"STYLE_WINDOWS"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"    Windows XP.............."
operator|<<
name|dictionary
index|[
literal|"STYLE_WINDOWSXP"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"    Windows Vista..........."
operator|<<
name|dictionary
index|[
literal|"STYLE_WINDOWSVISTA"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"    Fusion.................."
operator|<<
name|dictionary
index|[
literal|"STYLE_FUSION"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"    Windows CE.............."
operator|<<
name|dictionary
index|[
literal|"STYLE_WINDOWSCE"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"    Windows Mobile.........."
operator|<<
name|dictionary
index|[
literal|"STYLE_WINDOWSMOBILE"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"Sql Drivers:"
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"    ODBC...................."
operator|<<
name|dictionary
index|[
literal|"SQL_ODBC"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"    MySQL..................."
operator|<<
name|dictionary
index|[
literal|"SQL_MYSQL"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"    OCI....................."
operator|<<
name|dictionary
index|[
literal|"SQL_OCI"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"    PostgreSQL.............."
operator|<<
name|dictionary
index|[
literal|"SQL_PSQL"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"    TDS....................."
operator|<<
name|dictionary
index|[
literal|"SQL_TDS"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"    DB2....................."
operator|<<
name|dictionary
index|[
literal|"SQL_DB2"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"    SQLite.................."
operator|<<
name|dictionary
index|[
literal|"SQL_SQLITE"
index|]
operator|<<
literal|" ("
operator|<<
name|dictionary
index|[
literal|"SQL_SQLITE_LIB"
index|]
operator|<<
literal|")"
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"    SQLite2................."
operator|<<
name|dictionary
index|[
literal|"SQL_SQLITE2"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"    InterBase..............."
operator|<<
name|dictionary
index|[
literal|"SQL_IBASE"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"Sources are in.............."
operator|<<
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|sourcePath
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"Build is done in............"
operator|<<
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|buildPath
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"Install prefix.............."
operator|<<
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_PREFIX"
index|]
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"Headers installed to........"
operator|<<
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_HEADERS"
index|]
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"Libraries installed to......"
operator|<<
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_LIBS"
index|]
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"Arch-dep. data to..........."
operator|<<
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_ARCHDATA"
index|]
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"Plugins installed to........"
operator|<<
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_PLUGINS"
index|]
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"Library execs installed to.."
operator|<<
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_LIBEXECS"
index|]
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"QML1 imports installed to..."
operator|<<
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_IMPORTS"
index|]
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"QML2 imports installed to..."
operator|<<
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_QML"
index|]
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"Binaries installed to......."
operator|<<
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_BINS"
index|]
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"Arch-indep. data to........."
operator|<<
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_DATA"
index|]
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"Docs installed to..........."
operator|<<
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_DOCS"
index|]
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"Translations installed to..."
operator|<<
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_TRANSLATIONS"
index|]
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"Examples installed to......."
operator|<<
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_EXAMPLES"
index|]
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"Tests installed to.........."
operator|<<
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_TESTS"
index|]
argument_list|)
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|dictionary
operator|.
name|contains
argument_list|(
literal|"XQMAKESPEC"
argument_list|)
operator|&&
name|dictionary
index|[
literal|"XQMAKESPEC"
index|]
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"wince"
argument_list|)
argument_list|)
condition|)
block|{
name|sout
operator|<<
literal|"Using c runtime detection..."
operator|<<
name|dictionary
index|[
literal|"CE_CRT"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"Cetest support.............."
operator|<<
name|dictionary
index|[
literal|"CETEST"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"Signature..................."
operator|<<
name|dictionary
index|[
literal|"CE_SIGNATURE"
index|]
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
name|endl
expr_stmt|;
block|}
if|if
condition|(
name|checkAvailability
argument_list|(
literal|"INCREDIBUILD_XGE"
argument_list|)
condition|)
name|sout
operator|<<
literal|"Using IncrediBuild XGE......"
operator|<<
name|dictionary
index|[
literal|"INCREDIBUILD_XGE"
index|]
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|qmakeDefines
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sout
operator|<<
literal|"Defines....................."
expr_stmt|;
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|defs
init|=
name|qmakeDefines
operator|.
name|begin
argument_list|()
init|;
name|defs
operator|!=
name|qmakeDefines
operator|.
name|end
argument_list|()
condition|;
operator|++
name|defs
control|)
name|sout
operator|<<
operator|(
operator|*
name|defs
operator|)
operator|<<
literal|" "
expr_stmt|;
name|sout
operator|<<
name|endl
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|qmakeIncludes
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sout
operator|<<
literal|"Include paths..............."
expr_stmt|;
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|incs
init|=
name|qmakeIncludes
operator|.
name|begin
argument_list|()
init|;
name|incs
operator|!=
name|qmakeIncludes
operator|.
name|end
argument_list|()
condition|;
operator|++
name|incs
control|)
name|sout
operator|<<
operator|(
operator|*
name|incs
operator|)
operator|<<
literal|" "
expr_stmt|;
name|sout
operator|<<
name|endl
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|qmakeLibs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sout
operator|<<
literal|"Additional libraries........"
expr_stmt|;
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|libs
init|=
name|qmakeLibs
operator|.
name|begin
argument_list|()
init|;
name|libs
operator|!=
name|qmakeLibs
operator|.
name|end
argument_list|()
condition|;
operator|++
name|libs
control|)
name|sout
operator|<<
operator|(
operator|*
name|libs
operator|)
operator|<<
literal|" "
expr_stmt|;
name|sout
operator|<<
name|endl
expr_stmt|;
block|}
if|if
condition|(
name|dictionary
index|[
literal|"QMAKE_INTERNAL"
index|]
operator|==
literal|"yes"
condition|)
block|{
name|sout
operator|<<
literal|"Using internal configuration."
operator|<<
name|endl
expr_stmt|;
block|}
if|if
condition|(
name|dictionary
index|[
literal|"SHARED"
index|]
operator|==
literal|"no"
condition|)
block|{
name|sout
operator|<<
literal|"WARNING: Using static linking will disable the use of plugins."
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"         Make sure you compile ALL needed modules into the library."
operator|<<
name|endl
expr_stmt|;
block|}
if|if
condition|(
name|dictionary
index|[
literal|"OPENSSL"
index|]
operator|==
literal|"linked"
condition|)
block|{
if|if
condition|(
operator|!
name|opensslLibsDebug
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|opensslLibsRelease
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sout
operator|<<
literal|"Using OpenSSL libraries:"
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"   debug  : "
operator|<<
name|opensslLibsDebug
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"   release: "
operator|<<
name|opensslLibsRelease
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"   both   : "
operator|<<
name|opensslLibs
operator|<<
name|endl
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opensslLibs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|sout
operator|<<
literal|"NOTE: When linking against OpenSSL, you can override the default"
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"library names through OPENSSL_LIBS and optionally OPENSSL_LIBS_DEBUG/OPENSSL_LIBS_RELEASE"
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"For example:"
operator|<<
name|endl
expr_stmt|;
name|sout
operator|<<
literal|"    configure -openssl-linked OPENSSL_LIBS=\"-lssleay32 -llibeay32\""
operator|<<
name|endl
expr_stmt|;
block|}
block|}
if|if
condition|(
name|dictionary
index|[
literal|"ZLIB_FORCED"
index|]
operator|==
literal|"yes"
condition|)
block|{
name|QString
name|which_zlib
init|=
literal|"supplied"
decl_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"ZLIB"
index|]
operator|==
literal|"system"
condition|)
name|which_zlib
operator|=
literal|"system"
expr_stmt|;
name|sout
operator|<<
literal|"NOTE: The -no-zlib option was supplied but is no longer supported."
operator|<<
name|endl
operator|<<
name|endl
operator|<<
literal|"Qt now requires zlib support in all builds, so the -no-zlib"
operator|<<
name|endl
operator|<<
literal|"option was ignored. Qt will be built using the "
operator|<<
name|which_zlib
operator|<<
literal|"zlib"
operator|<<
name|endl
expr_stmt|;
block|}
if|if
condition|(
name|dictionary
index|[
literal|"OBSOLETE_ARCH_ARG"
index|]
operator|==
literal|"yes"
condition|)
block|{
name|sout
operator|<<
name|endl
operator|<<
literal|"NOTE: The -arch option is obsolete."
operator|<<
name|endl
operator|<<
name|endl
operator|<<
literal|"Qt now detects the target and host architectures based on compiler"
operator|<<
name|endl
operator|<<
literal|"output. Qt will be built using "
operator|<<
name|dictionary
index|[
literal|"QT_ARCH"
index|]
operator|<<
literal|" for the target architecture"
operator|<<
name|endl
operator|<<
literal|"and "
operator|<<
name|dictionary
index|[
literal|"QT_HOST_ARCH"
index|]
operator|<<
literal|" for the host architecture (note that these two"
operator|<<
name|endl
operator|<<
literal|"will be the same unless you are cross-compiling)."
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
comment|// display config.summary
name|sout
operator|.
name|seekg
argument_list|(
literal|0
argument_list|,
name|ios
operator|::
name|beg
argument_list|)
expr_stmt|;
while|while
condition|(
name|sout
operator|.
name|good
argument_list|()
condition|)
block|{
name|string
name|str
decl_stmt|;
name|getline
argument_list|(
name|sout
argument_list|,
name|str
argument_list|)
expr_stmt|;
name|cout
operator|<<
name|str
operator|<<
name|endl
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|generateHeaders
name|void
name|Configure
operator|::
name|generateHeaders
parameter_list|()
block|{
if|if
condition|(
name|dictionary
index|[
literal|"SYNCQT"
index|]
operator|==
literal|"auto"
condition|)
name|dictionary
index|[
literal|"SYNCQT"
index|]
operator|=
name|defaultTo
argument_list|(
literal|"SYNCQT"
argument_list|)
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"SYNCQT"
index|]
operator|==
literal|"yes"
condition|)
block|{
if|if
condition|(
operator|!
name|QStandardPaths
operator|::
name|findExecutable
argument_list|(
name|QStringLiteral
argument_list|(
literal|"perl.exe"
argument_list|)
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|cout
operator|<<
literal|"Running syncqt..."
operator|<<
name|endl
expr_stmt|;
name|QStringList
name|args
decl_stmt|;
name|args
operator|<<
literal|"perl"
operator|<<
literal|"-w"
expr_stmt|;
name|args
operator|+=
name|sourcePath
operator|+
literal|"/bin/syncqt.pl"
expr_stmt|;
name|args
operator|<<
literal|"-minimal"
operator|<<
literal|"-module"
operator|<<
literal|"QtCore"
expr_stmt|;
name|args
operator|+=
name|sourcePath
expr_stmt|;
name|int
name|retc
init|=
name|Environment
operator|::
name|execute
argument_list|(
name|args
argument_list|,
name|QStringList
argument_list|()
argument_list|,
name|QStringList
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|retc
condition|)
block|{
name|cout
operator|<<
literal|"syncqt failed, return code "
operator|<<
name|retc
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
block|}
block|}
else|else
block|{
name|cout
operator|<<
literal|"Perl not found in environment - cannot run syncqt."
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|stripPrefix
specifier|static
name|QString
name|stripPrefix
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|,
specifier|const
name|QString
modifier|&
name|pfx
parameter_list|)
block|{
return|return
name|str
operator|.
name|startsWith
argument_list|(
name|pfx
argument_list|)
condition|?
name|str
operator|.
name|mid
argument_list|(
name|pfx
operator|.
name|length
argument_list|()
argument_list|)
else|:
name|str
return|;
block|}
end_function
begin_function
DECL|function|substPrefix
name|void
name|Configure
operator|::
name|substPrefix
parameter_list|(
name|QString
modifier|*
name|path
parameter_list|)
block|{
name|QString
name|spfx
init|=
name|dictionary
index|[
literal|"QT_SYSROOT_PREFIX"
index|]
decl_stmt|;
if|if
condition|(
name|path
operator|->
name|startsWith
argument_list|(
name|spfx
argument_list|)
condition|)
name|path
operator|->
name|replace
argument_list|(
literal|0
argument_list|,
name|spfx
operator|.
name|size
argument_list|()
argument_list|,
name|dictionary
index|[
literal|"QT_EXT_PREFIX"
index|]
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|generateQConfigCpp
name|void
name|Configure
operator|::
name|generateQConfigCpp
parameter_list|()
block|{
comment|// if QT_INSTALL_* have not been specified on commandline, define them now from QT_INSTALL_PREFIX
comment|// if prefix is empty (WINCE), make all of them empty, if they aren't set
name|bool
name|qipempty
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"QT_INSTALL_PREFIX"
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|qipempty
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"QT_INSTALL_HEADERS"
index|]
operator|.
name|size
argument_list|()
condition|)
name|dictionary
index|[
literal|"QT_INSTALL_HEADERS"
index|]
operator|=
name|qipempty
condition|?
literal|""
else|:
name|dictionary
index|[
literal|"QT_INSTALL_PREFIX"
index|]
operator|+
literal|"/include"
expr_stmt|;
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"QT_INSTALL_LIBS"
index|]
operator|.
name|size
argument_list|()
condition|)
name|dictionary
index|[
literal|"QT_INSTALL_LIBS"
index|]
operator|=
name|qipempty
condition|?
literal|""
else|:
name|dictionary
index|[
literal|"QT_INSTALL_PREFIX"
index|]
operator|+
literal|"/lib"
expr_stmt|;
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"QT_INSTALL_ARCHDATA"
index|]
operator|.
name|size
argument_list|()
condition|)
name|dictionary
index|[
literal|"QT_INSTALL_ARCHDATA"
index|]
operator|=
name|qipempty
condition|?
literal|""
else|:
name|dictionary
index|[
literal|"QT_INSTALL_PREFIX"
index|]
expr_stmt|;
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"QT_INSTALL_LIBEXECS"
index|]
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
name|dictionary
index|[
literal|"QT_INSTALL_ARCHDATA"
index|]
operator|==
name|dictionary
index|[
literal|"QT_INSTALL_PREFIX"
index|]
condition|)
name|dictionary
index|[
literal|"QT_INSTALL_LIBEXECS"
index|]
operator|=
name|qipempty
condition|?
literal|""
else|:
name|dictionary
index|[
literal|"QT_INSTALL_ARCHDATA"
index|]
operator|+
literal|"/bin"
expr_stmt|;
else|else
name|dictionary
index|[
literal|"QT_INSTALL_LIBEXECS"
index|]
operator|=
name|qipempty
condition|?
literal|""
else|:
name|dictionary
index|[
literal|"QT_INSTALL_ARCHDATA"
index|]
operator|+
literal|"/libexec"
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"QT_INSTALL_BINS"
index|]
operator|.
name|size
argument_list|()
condition|)
name|dictionary
index|[
literal|"QT_INSTALL_BINS"
index|]
operator|=
name|qipempty
condition|?
literal|""
else|:
name|dictionary
index|[
literal|"QT_INSTALL_PREFIX"
index|]
operator|+
literal|"/bin"
expr_stmt|;
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"QT_INSTALL_PLUGINS"
index|]
operator|.
name|size
argument_list|()
condition|)
name|dictionary
index|[
literal|"QT_INSTALL_PLUGINS"
index|]
operator|=
name|qipempty
condition|?
literal|""
else|:
name|dictionary
index|[
literal|"QT_INSTALL_ARCHDATA"
index|]
operator|+
literal|"/plugins"
expr_stmt|;
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"QT_INSTALL_IMPORTS"
index|]
operator|.
name|size
argument_list|()
condition|)
name|dictionary
index|[
literal|"QT_INSTALL_IMPORTS"
index|]
operator|=
name|qipempty
condition|?
literal|""
else|:
name|dictionary
index|[
literal|"QT_INSTALL_ARCHDATA"
index|]
operator|+
literal|"/imports"
expr_stmt|;
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"QT_INSTALL_QML"
index|]
operator|.
name|size
argument_list|()
condition|)
name|dictionary
index|[
literal|"QT_INSTALL_QML"
index|]
operator|=
name|qipempty
condition|?
literal|""
else|:
name|dictionary
index|[
literal|"QT_INSTALL_ARCHDATA"
index|]
operator|+
literal|"/qml"
expr_stmt|;
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"QT_INSTALL_DATA"
index|]
operator|.
name|size
argument_list|()
condition|)
name|dictionary
index|[
literal|"QT_INSTALL_DATA"
index|]
operator|=
name|qipempty
condition|?
literal|""
else|:
name|dictionary
index|[
literal|"QT_INSTALL_PREFIX"
index|]
expr_stmt|;
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"QT_INSTALL_DOCS"
index|]
operator|.
name|size
argument_list|()
condition|)
name|dictionary
index|[
literal|"QT_INSTALL_DOCS"
index|]
operator|=
name|qipempty
condition|?
literal|""
else|:
name|dictionary
index|[
literal|"QT_INSTALL_DATA"
index|]
operator|+
literal|"/doc"
expr_stmt|;
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"QT_INSTALL_TRANSLATIONS"
index|]
operator|.
name|size
argument_list|()
condition|)
name|dictionary
index|[
literal|"QT_INSTALL_TRANSLATIONS"
index|]
operator|=
name|qipempty
condition|?
literal|""
else|:
name|dictionary
index|[
literal|"QT_INSTALL_DATA"
index|]
operator|+
literal|"/translations"
expr_stmt|;
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"QT_INSTALL_EXAMPLES"
index|]
operator|.
name|size
argument_list|()
condition|)
name|dictionary
index|[
literal|"QT_INSTALL_EXAMPLES"
index|]
operator|=
name|qipempty
condition|?
literal|""
else|:
name|dictionary
index|[
literal|"QT_INSTALL_PREFIX"
index|]
operator|+
literal|"/examples"
expr_stmt|;
if|if
condition|(
operator|!
name|dictionary
index|[
literal|"QT_INSTALL_TESTS"
index|]
operator|.
name|size
argument_list|()
condition|)
name|dictionary
index|[
literal|"QT_INSTALL_TESTS"
index|]
operator|=
name|qipempty
condition|?
literal|""
else|:
name|dictionary
index|[
literal|"QT_INSTALL_PREFIX"
index|]
operator|+
literal|"/tests"
expr_stmt|;
name|QChar
name|sysrootifyPrefix
init|=
name|QLatin1Char
argument_list|(
literal|'y'
argument_list|)
decl_stmt|;
name|dictionary
index|[
literal|"QT_SYSROOT_PREFIX"
index|]
operator|=
name|dictionary
index|[
literal|"QT_INSTALL_PREFIX"
index|]
expr_stmt|;
name|dictionary
index|[
literal|"QT_SYSROOT_HEADERS"
index|]
operator|=
name|dictionary
index|[
literal|"QT_INSTALL_HEADERS"
index|]
expr_stmt|;
name|dictionary
index|[
literal|"QT_SYSROOT_LIBS"
index|]
operator|=
name|dictionary
index|[
literal|"QT_INSTALL_LIBS"
index|]
expr_stmt|;
name|dictionary
index|[
literal|"QT_SYSROOT_ARCHDATA"
index|]
operator|=
name|dictionary
index|[
literal|"QT_INSTALL_ARCHDATA"
index|]
expr_stmt|;
name|dictionary
index|[
literal|"QT_SYSROOT_LIBEXECS"
index|]
operator|=
name|dictionary
index|[
literal|"QT_INSTALL_LIBEXECS"
index|]
expr_stmt|;
name|dictionary
index|[
literal|"QT_SYSROOT_BINS"
index|]
operator|=
name|dictionary
index|[
literal|"QT_INSTALL_BINS"
index|]
expr_stmt|;
name|dictionary
index|[
literal|"QT_SYSROOT_PLUGINS"
index|]
operator|=
name|dictionary
index|[
literal|"QT_INSTALL_PLUGINS"
index|]
expr_stmt|;
name|dictionary
index|[
literal|"QT_SYSROOT_IMPORTS"
index|]
operator|=
name|dictionary
index|[
literal|"QT_INSTALL_IMPORTS"
index|]
expr_stmt|;
name|dictionary
index|[
literal|"QT_SYSROOT_QML"
index|]
operator|=
name|dictionary
index|[
literal|"QT_INSTALL_QML"
index|]
expr_stmt|;
name|dictionary
index|[
literal|"QT_SYSROOT_DATA"
index|]
operator|=
name|dictionary
index|[
literal|"QT_INSTALL_DATA"
index|]
expr_stmt|;
name|dictionary
index|[
literal|"QT_SYSROOT_DOCS"
index|]
operator|=
name|dictionary
index|[
literal|"QT_INSTALL_DOCS"
index|]
expr_stmt|;
name|dictionary
index|[
literal|"QT_SYSROOT_TRANSLATIONS"
index|]
operator|=
name|dictionary
index|[
literal|"QT_INSTALL_TRANSLATIONS"
index|]
expr_stmt|;
name|dictionary
index|[
literal|"QT_SYSROOT_EXAMPLES"
index|]
operator|=
name|dictionary
index|[
literal|"QT_INSTALL_EXAMPLES"
index|]
expr_stmt|;
name|dictionary
index|[
literal|"QT_SYSROOT_TESTS"
index|]
operator|=
name|dictionary
index|[
literal|"QT_INSTALL_TESTS"
index|]
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"QT_EXT_PREFIX"
index|]
operator|.
name|size
argument_list|()
condition|)
block|{
name|sysrootifyPrefix
operator|=
name|QLatin1Char
argument_list|(
literal|'n'
argument_list|)
expr_stmt|;
name|dictionary
index|[
literal|"QT_INSTALL_PREFIX"
index|]
operator|=
name|dictionary
index|[
literal|"QT_EXT_PREFIX"
index|]
expr_stmt|;
name|substPrefix
argument_list|(
operator|&
name|dictionary
index|[
literal|"QT_INSTALL_HEADERS"
index|]
argument_list|)
expr_stmt|;
name|substPrefix
argument_list|(
operator|&
name|dictionary
index|[
literal|"QT_INSTALL_LIBS"
index|]
argument_list|)
expr_stmt|;
name|substPrefix
argument_list|(
operator|&
name|dictionary
index|[
literal|"QT_INSTALL_ARCHDATA"
index|]
argument_list|)
expr_stmt|;
name|substPrefix
argument_list|(
operator|&
name|dictionary
index|[
literal|"QT_INSTALL_LIBEXECS"
index|]
argument_list|)
expr_stmt|;
name|substPrefix
argument_list|(
operator|&
name|dictionary
index|[
literal|"QT_INSTALL_BINS"
index|]
argument_list|)
expr_stmt|;
name|substPrefix
argument_list|(
operator|&
name|dictionary
index|[
literal|"QT_INSTALL_PLUGINS"
index|]
argument_list|)
expr_stmt|;
name|substPrefix
argument_list|(
operator|&
name|dictionary
index|[
literal|"QT_INSTALL_IMPORTS"
index|]
argument_list|)
expr_stmt|;
name|substPrefix
argument_list|(
operator|&
name|dictionary
index|[
literal|"QT_INSTALL_QML"
index|]
argument_list|)
expr_stmt|;
name|substPrefix
argument_list|(
operator|&
name|dictionary
index|[
literal|"QT_INSTALL_DATA"
index|]
argument_list|)
expr_stmt|;
name|substPrefix
argument_list|(
operator|&
name|dictionary
index|[
literal|"QT_INSTALL_DOCS"
index|]
argument_list|)
expr_stmt|;
name|substPrefix
argument_list|(
operator|&
name|dictionary
index|[
literal|"QT_INSTALL_TRANSLATIONS"
index|]
argument_list|)
expr_stmt|;
name|substPrefix
argument_list|(
operator|&
name|dictionary
index|[
literal|"QT_INSTALL_EXAMPLES"
index|]
argument_list|)
expr_stmt|;
name|substPrefix
argument_list|(
operator|&
name|dictionary
index|[
literal|"QT_INSTALL_TESTS"
index|]
argument_list|)
expr_stmt|;
block|}
name|bool
name|haveHpx
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"QT_HOST_PREFIX"
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|dictionary
index|[
literal|"QT_HOST_PREFIX"
index|]
operator|=
name|dictionary
index|[
literal|"QT_INSTALL_PREFIX"
index|]
expr_stmt|;
else|else
name|haveHpx
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"QT_HOST_BINS"
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|dictionary
index|[
literal|"QT_HOST_BINS"
index|]
operator|=
name|haveHpx
condition|?
name|dictionary
index|[
literal|"QT_HOST_PREFIX"
index|]
operator|+
literal|"/bin"
else|:
name|dictionary
index|[
literal|"QT_INSTALL_BINS"
index|]
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"QT_HOST_LIBS"
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|dictionary
index|[
literal|"QT_HOST_LIBS"
index|]
operator|=
name|haveHpx
condition|?
name|dictionary
index|[
literal|"QT_HOST_PREFIX"
index|]
operator|+
literal|"/lib"
else|:
name|dictionary
index|[
literal|"QT_INSTALL_LIBS"
index|]
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"QT_HOST_DATA"
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
name|dictionary
index|[
literal|"QT_HOST_DATA"
index|]
operator|=
name|haveHpx
condition|?
name|dictionary
index|[
literal|"QT_HOST_PREFIX"
index|]
else|:
name|dictionary
index|[
literal|"QT_INSTALL_ARCHDATA"
index|]
expr_stmt|;
name|QString
name|specPfx
init|=
name|dictionary
index|[
literal|"QT_HOST_DATA"
index|]
operator|+
literal|"/mkspecs/"
decl_stmt|;
name|QString
name|hostSpec
init|=
name|stripPrefix
argument_list|(
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
argument_list|,
name|specPfx
argument_list|)
decl_stmt|;
name|QString
name|targSpec
init|=
name|dictionary
operator|.
name|contains
argument_list|(
literal|"XQMAKESPEC"
argument_list|)
condition|?
name|stripPrefix
argument_list|(
name|dictionary
index|[
literal|"XQMAKESPEC"
index|]
argument_list|,
name|specPfx
argument_list|)
else|:
name|hostSpec
decl_stmt|;
comment|// Generate the new qconfig.cpp file
block|{
name|FileWriter
name|tmpStream
argument_list|(
name|buildPath
operator|+
literal|"/src/corelib/global/qconfig.cpp"
argument_list|)
decl_stmt|;
name|tmpStream
operator|<<
literal|"/* Licensed */"
operator|<<
name|endl
operator|<<
literal|"static const char qt_configure_licensee_str          [512 + 12] = \"qt_lcnsuser="
operator|<<
name|dictionary
index|[
literal|"LICENSEE"
index|]
operator|<<
literal|"\";"
operator|<<
name|endl
operator|<<
literal|"static const char qt_configure_licensed_products_str [512 + 12] = \"qt_lcnsprod="
operator|<<
name|dictionary
index|[
literal|"EDITION"
index|]
operator|<<
literal|"\";"
operator|<<
name|endl
operator|<<
name|endl
operator|<<
literal|"/* Build date */"
operator|<<
name|endl
operator|<<
literal|"static const char qt_configure_installation          [11  + 12] = \"qt_instdate="
operator|<<
name|QDate
operator|::
name|currentDate
argument_list|()
operator|.
name|toString
argument_list|(
name|Qt
operator|::
name|ISODate
argument_list|)
operator|<<
literal|"\";"
operator|<<
name|endl
operator|<<
name|endl
operator|<<
literal|"static const char qt_configure_prefix_path_strs[][12 + 512] = {"
operator|<<
name|endl
operator|<<
literal|"#ifndef QT_BUILD_QMAKE"
operator|<<
name|endl
operator|<<
literal|"    \"qt_prfxpath="
operator|<<
name|formatPath
argument_list|(
name|dictionary
index|[
literal|"QT_SYSROOT_PREFIX"
index|]
argument_list|)
operator|<<
literal|"\","
operator|<<
name|endl
operator|<<
literal|"    \"qt_docspath="
operator|<<
name|formatPath
argument_list|(
name|dictionary
index|[
literal|"QT_SYSROOT_DOCS"
index|]
argument_list|)
operator|<<
literal|"\","
operator|<<
name|endl
operator|<<
literal|"    \"qt_hdrspath="
operator|<<
name|formatPath
argument_list|(
name|dictionary
index|[
literal|"QT_SYSROOT_HEADERS"
index|]
argument_list|)
operator|<<
literal|"\","
operator|<<
name|endl
operator|<<
literal|"    \"qt_libspath="
operator|<<
name|formatPath
argument_list|(
name|dictionary
index|[
literal|"QT_SYSROOT_LIBS"
index|]
argument_list|)
operator|<<
literal|"\","
operator|<<
name|endl
operator|<<
literal|"    \"qt_lbexpath="
operator|<<
name|formatPath
argument_list|(
name|dictionary
index|[
literal|"QT_SYSROOT_LIBEXECS"
index|]
argument_list|)
operator|<<
literal|"\","
operator|<<
name|endl
operator|<<
literal|"    \"qt_binspath="
operator|<<
name|formatPath
argument_list|(
name|dictionary
index|[
literal|"QT_SYSROOT_BINS"
index|]
argument_list|)
operator|<<
literal|"\","
operator|<<
name|endl
operator|<<
literal|"    \"qt_plugpath="
operator|<<
name|formatPath
argument_list|(
name|dictionary
index|[
literal|"QT_SYSROOT_PLUGINS"
index|]
argument_list|)
operator|<<
literal|"\","
operator|<<
name|endl
operator|<<
literal|"    \"qt_impspath="
operator|<<
name|formatPath
argument_list|(
name|dictionary
index|[
literal|"QT_SYSROOT_IMPORTS"
index|]
argument_list|)
operator|<<
literal|"\","
operator|<<
name|endl
operator|<<
literal|"    \"qt_qml2path="
operator|<<
name|formatPath
argument_list|(
name|dictionary
index|[
literal|"QT_SYSROOT_QML"
index|]
argument_list|)
operator|<<
literal|"\","
operator|<<
name|endl
operator|<<
literal|"    \"qt_adatpath="
operator|<<
name|formatPath
argument_list|(
name|dictionary
index|[
literal|"QT_SYSROOT_ARCHDATA"
index|]
argument_list|)
operator|<<
literal|"\","
operator|<<
name|endl
operator|<<
literal|"    \"qt_datapath="
operator|<<
name|formatPath
argument_list|(
name|dictionary
index|[
literal|"QT_SYSROOT_DATA"
index|]
argument_list|)
operator|<<
literal|"\","
operator|<<
name|endl
operator|<<
literal|"    \"qt_trnspath="
operator|<<
name|formatPath
argument_list|(
name|dictionary
index|[
literal|"QT_SYSROOT_TRANSLATIONS"
index|]
argument_list|)
operator|<<
literal|"\","
operator|<<
name|endl
operator|<<
literal|"    \"qt_xmplpath="
operator|<<
name|formatPath
argument_list|(
name|dictionary
index|[
literal|"QT_SYSROOT_EXAMPLES"
index|]
argument_list|)
operator|<<
literal|"\","
operator|<<
name|endl
operator|<<
literal|"    \"qt_tstspath="
operator|<<
name|formatPath
argument_list|(
name|dictionary
index|[
literal|"QT_SYSROOT_TESTS"
index|]
argument_list|)
operator|<<
literal|"\","
operator|<<
name|endl
operator|<<
literal|"#else"
operator|<<
name|endl
operator|<<
literal|"    \"qt_prfxpath="
operator|<<
name|formatPath
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_PREFIX"
index|]
argument_list|)
operator|<<
literal|"\","
operator|<<
name|endl
operator|<<
literal|"    \"qt_docspath="
operator|<<
name|formatPath
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_DOCS"
index|]
argument_list|)
operator|<<
literal|"\","
operator|<<
name|endl
operator|<<
literal|"    \"qt_hdrspath="
operator|<<
name|formatPath
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_HEADERS"
index|]
argument_list|)
operator|<<
literal|"\","
operator|<<
name|endl
operator|<<
literal|"    \"qt_libspath="
operator|<<
name|formatPath
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_LIBS"
index|]
argument_list|)
operator|<<
literal|"\","
operator|<<
name|endl
operator|<<
literal|"    \"qt_lbexpath="
operator|<<
name|formatPath
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_LIBEXECS"
index|]
argument_list|)
operator|<<
literal|"\","
operator|<<
name|endl
operator|<<
literal|"    \"qt_binspath="
operator|<<
name|formatPath
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_BINS"
index|]
argument_list|)
operator|<<
literal|"\","
operator|<<
name|endl
operator|<<
literal|"    \"qt_plugpath="
operator|<<
name|formatPath
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_PLUGINS"
index|]
argument_list|)
operator|<<
literal|"\","
operator|<<
name|endl
operator|<<
literal|"    \"qt_impspath="
operator|<<
name|formatPath
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_IMPORTS"
index|]
argument_list|)
operator|<<
literal|"\","
operator|<<
name|endl
operator|<<
literal|"    \"qt_qml2path="
operator|<<
name|formatPath
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_QML"
index|]
argument_list|)
operator|<<
literal|"\","
operator|<<
name|endl
operator|<<
literal|"    \"qt_adatpath="
operator|<<
name|formatPath
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_ARCHDATA"
index|]
argument_list|)
operator|<<
literal|"\","
operator|<<
name|endl
operator|<<
literal|"    \"qt_datapath="
operator|<<
name|formatPath
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_DATA"
index|]
argument_list|)
operator|<<
literal|"\","
operator|<<
name|endl
operator|<<
literal|"    \"qt_trnspath="
operator|<<
name|formatPath
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_TRANSLATIONS"
index|]
argument_list|)
operator|<<
literal|"\","
operator|<<
name|endl
operator|<<
literal|"    \"qt_xmplpath="
operator|<<
name|formatPath
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_EXAMPLES"
index|]
argument_list|)
operator|<<
literal|"\","
operator|<<
name|endl
operator|<<
literal|"    \"qt_tstspath="
operator|<<
name|formatPath
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_TESTS"
index|]
argument_list|)
operator|<<
literal|"\","
operator|<<
name|endl
operator|<<
literal|"    \"qt_ssrtpath="
operator|<<
name|formatPath
argument_list|(
name|dictionary
index|[
literal|"CFG_SYSROOT"
index|]
argument_list|)
operator|<<
literal|"\","
operator|<<
name|endl
operator|<<
literal|"    \"qt_hpfxpath="
operator|<<
name|formatPath
argument_list|(
name|dictionary
index|[
literal|"QT_HOST_PREFIX"
index|]
argument_list|)
operator|<<
literal|"\","
operator|<<
name|endl
operator|<<
literal|"    \"qt_hbinpath="
operator|<<
name|formatPath
argument_list|(
name|dictionary
index|[
literal|"QT_HOST_BINS"
index|]
argument_list|)
operator|<<
literal|"\","
operator|<<
name|endl
operator|<<
literal|"    \"qt_hlibpath="
operator|<<
name|formatPath
argument_list|(
name|dictionary
index|[
literal|"QT_HOST_LIBS"
index|]
argument_list|)
operator|<<
literal|"\","
operator|<<
name|endl
operator|<<
literal|"    \"qt_hdatpath="
operator|<<
name|formatPath
argument_list|(
name|dictionary
index|[
literal|"QT_HOST_DATA"
index|]
argument_list|)
operator|<<
literal|"\","
operator|<<
name|endl
operator|<<
literal|"    \"qt_targspec="
operator|<<
name|targSpec
operator|<<
literal|"\","
operator|<<
name|endl
operator|<<
literal|"    \"qt_hostspec="
operator|<<
name|hostSpec
operator|<<
literal|"\","
operator|<<
name|endl
operator|<<
literal|"#endif"
operator|<<
name|endl
operator|<<
literal|"};"
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|(
name|platform
argument_list|()
operator|!=
name|WINDOWS
operator|)
operator|&&
operator|(
name|platform
argument_list|()
operator|!=
name|WINDOWS_CE
operator|)
operator|&&
operator|(
name|platform
argument_list|()
operator|!=
name|WINDOWS_RT
operator|)
condition|)
name|tmpStream
operator|<<
literal|"static const char qt_configure_settings_path_str [256 + 12] = \"qt_stngpath="
operator|<<
name|formatPath
argument_list|(
name|dictionary
index|[
literal|"QT_INSTALL_SETTINGS"
index|]
argument_list|)
operator|<<
literal|"\";"
operator|<<
name|endl
expr_stmt|;
name|tmpStream
operator|<<
name|endl
operator|<<
literal|"#ifdef QT_BUILD_QMAKE\n"
operator|<<
literal|"static const char qt_sysrootify_prefix[] = \"qt_ssrtfpfx="
operator|<<
name|sysrootifyPrefix
operator|<<
literal|"\";\n"
operator|<<
literal|"#endif\n\n"
operator|<<
literal|"/* strlen( \"qt_lcnsxxxx\") == 12 */"
operator|<<
name|endl
operator|<<
literal|"#define QT_CONFIGURE_LICENSEE qt_configure_licensee_str + 12;"
operator|<<
name|endl
operator|<<
literal|"#define QT_CONFIGURE_LICENSED_PRODUCTS qt_configure_licensed_products_str + 12;"
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|(
name|platform
argument_list|()
operator|!=
name|WINDOWS
operator|)
operator|&&
operator|(
name|platform
argument_list|()
operator|!=
name|WINDOWS_CE
operator|)
operator|&&
operator|(
name|platform
argument_list|()
operator|!=
name|WINDOWS_RT
operator|)
condition|)
name|tmpStream
operator|<<
literal|"#define QT_CONFIGURE_SETTINGS_PATH qt_configure_settings_path_str + 12;"
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|tmpStream
operator|.
name|flush
argument_list|()
condition|)
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|buildQmake
name|void
name|Configure
operator|::
name|buildQmake
parameter_list|()
block|{
if|if
condition|(
name|dictionary
index|[
literal|"BUILD_QMAKE"
index|]
operator|==
literal|"yes"
condition|)
block|{
name|QStringList
name|args
decl_stmt|;
comment|// Build qmake
name|QString
name|pwd
init|=
name|QDir
operator|::
name|currentPath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|QDir
argument_list|(
name|buildPath
argument_list|)
operator|.
name|mkpath
argument_list|(
literal|"qmake"
argument_list|)
condition|)
block|{
name|cout
operator|<<
literal|"Cannot create qmake build dir."
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
return|return;
block|}
if|if
condition|(
operator|!
name|QDir
operator|::
name|setCurrent
argument_list|(
name|buildPath
operator|+
literal|"/qmake"
argument_list|)
condition|)
block|{
name|cout
operator|<<
literal|"Cannot enter qmake build dir."
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
return|return;
block|}
name|QString
name|makefile
init|=
literal|"Makefile"
decl_stmt|;
block|{
name|QFile
name|out
argument_list|(
name|makefile
argument_list|)
decl_stmt|;
if|if
condition|(
name|out
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
operator||
name|QFile
operator|::
name|Text
argument_list|)
condition|)
block|{
name|QTextStream
name|stream
argument_list|(
operator|&
name|out
argument_list|)
decl_stmt|;
name|stream
operator|<<
literal|"#AutoGenerated by configure.exe"
operator|<<
name|endl
operator|<<
literal|"BUILD_PATH = "
operator|<<
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|buildPath
argument_list|)
operator|<<
name|endl
operator|<<
literal|"SOURCE_PATH = "
operator|<<
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|sourcePath
argument_list|)
operator|<<
name|endl
operator|<<
literal|"INC_PATH = "
operator|<<
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
operator|(
name|QFile
operator|::
name|exists
argument_list|(
name|sourcePath
operator|+
literal|"/.git"
argument_list|)
condition|?
name|buildPath
else|:
name|sourcePath
operator|)
operator|+
literal|"/include"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
literal|"QT_VERSION = "
operator|<<
name|dictionary
index|[
literal|"VERSION"
index|]
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|==
name|QString
argument_list|(
literal|"win32-g++"
argument_list|)
condition|)
block|{
name|stream
operator|<<
literal|"QMAKESPEC = $(SOURCE_PATH)\\mkspecs\\win32-g++"
operator|<<
name|endl
operator|<<
literal|"EXTRA_CFLAGS = -DUNICODE -ffunction-sections"
operator|<<
name|endl
operator|<<
literal|"EXTRA_CXXFLAGS = -DUNICODE -ffunction-sections"
operator|<<
name|endl
operator|<<
literal|"EXTRA_LFLAGS = -Wl,--gc-sections"
operator|<<
name|endl
operator|<<
literal|"QTOBJS = qfilesystemengine_win.o \\"
operator|<<
name|endl
operator|<<
literal|"         qfilesystemiterator_win.o \\"
operator|<<
name|endl
operator|<<
literal|"         qfsfileengine_win.o \\"
operator|<<
name|endl
operator|<<
literal|"         qlocale_win.o \\"
operator|<<
name|endl
operator|<<
literal|"         qsettings_win.o \\"
operator|<<
name|endl
operator|<<
literal|"         qsystemlibrary.o \\"
operator|<<
name|endl
operator|<<
literal|"         registry.o"
operator|<<
name|endl
operator|<<
literal|"QTSRCS=\"$(SOURCE_PATH)/src/corelib/io/qfilesystemengine_win.cpp\" \\"
operator|<<
name|endl
operator|<<
literal|"       \"$(SOURCE_PATH)/src/corelib/io/qfilesystemiterator_win.cpp\" \\"
operator|<<
name|endl
operator|<<
literal|"       \"$(SOURCE_PATH)/src/corelib/io/qfsfileengine_win.cpp\" \\"
operator|<<
name|endl
operator|<<
literal|"       \"$(SOURCE_PATH)/src/corelib/io/qsettings_win.cpp\" \\"
operator|<<
name|endl
operator|<<
literal|"       \"$(SOURCE_PATH)/src/corelib/tools/qlocale_win.cpp\" \\"
operator|<<
name|endl
expr|\
operator|<<
literal|"       \"$(SOURCE_PATH)/src/corelib/plugin/qsystemlibrary.cpp\" \\"
operator|<<
name|endl
operator|<<
literal|"       \"$(SOURCE_PATH)/tools/shared/windows/registry.cpp\""
operator|<<
name|endl
operator|<<
literal|"EXEEXT=.exe"
operator|<<
name|endl
operator|<<
literal|"LFLAGS=-static -s -lole32 -luuid -ladvapi32 -lkernel32"
operator|<<
name|endl
expr_stmt|;
comment|/*                     ** SHELL is the full path of sh.exe, unless                     ** 1) it is found in the current directory                     ** 2) it is not found at all                     ** 3) it is overridden on the command line with an existing file                     ** ... otherwise it is always sh.exe. Specifically, SHELL from the                     ** environment has no effect.                     **                     ** This check will fail if SHELL is explicitly set to a not                     ** sh-compatible shell. This is not a problem, because configure.bat                     ** will not do that.                     */
name|stream
operator|<<
literal|"ifeq ($(SHELL), sh.exe)"
operator|<<
name|endl
operator|<<
literal|"    ifeq ($(wildcard $(CURDIR)/sh.exe), )"
operator|<<
name|endl
operator|<<
literal|"        SH = 0"
operator|<<
name|endl
operator|<<
literal|"    else"
operator|<<
name|endl
operator|<<
literal|"        SH = 1"
operator|<<
name|endl
operator|<<
literal|"    endif"
operator|<<
name|endl
operator|<<
literal|"else"
operator|<<
name|endl
operator|<<
literal|"    SH = 1"
operator|<<
name|endl
operator|<<
literal|"endif"
operator|<<
name|endl
operator|<<
literal|"\n"
operator|<<
literal|"ifeq ($(SH), 1)"
operator|<<
name|endl
operator|<<
literal|"    RM_F = rm -f"
operator|<<
name|endl
operator|<<
literal|"    RM_RF = rm -rf"
operator|<<
name|endl
operator|<<
literal|"else"
operator|<<
name|endl
operator|<<
literal|"    RM_F = del /f"
operator|<<
name|endl
operator|<<
literal|"    RM_RF = rmdir /s /q"
operator|<<
name|endl
operator|<<
literal|"endif"
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
literal|"\n\n"
expr_stmt|;
block|}
else|else
block|{
name|stream
operator|<<
literal|"QMAKESPEC = "
operator|<<
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
operator|<<
name|endl
expr_stmt|;
block|}
name|stream
operator|<<
literal|"\n\n"
expr_stmt|;
name|QFile
name|in
argument_list|(
name|sourcePath
operator|+
literal|"/qmake/"
operator|+
name|dictionary
index|[
literal|"QMAKEMAKEFILE"
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|in
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
operator||
name|QFile
operator|::
name|Text
argument_list|)
condition|)
block|{
name|QString
name|d
init|=
name|in
operator|.
name|readAll
argument_list|()
decl_stmt|;
comment|//### need replaces (like configure.sh)? --Sam
name|stream
operator|<<
name|d
operator|<<
name|endl
expr_stmt|;
block|}
name|stream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
name|args
operator|+=
name|dictionary
index|[
literal|"MAKE"
index|]
expr_stmt|;
name|args
operator|+=
literal|"-f"
expr_stmt|;
name|args
operator|+=
name|makefile
expr_stmt|;
name|cout
operator|<<
literal|"Creating qmake..."
operator|<<
name|endl
expr_stmt|;
name|int
name|exitCode
init|=
name|Environment
operator|::
name|execute
argument_list|(
name|args
argument_list|,
name|QStringList
argument_list|()
argument_list|,
name|QStringList
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|exitCode
condition|)
block|{
name|args
operator|.
name|clear
argument_list|()
expr_stmt|;
name|args
operator|+=
name|dictionary
index|[
literal|"MAKE"
index|]
expr_stmt|;
name|args
operator|+=
literal|"-f"
expr_stmt|;
name|args
operator|+=
name|makefile
expr_stmt|;
name|args
operator|+=
literal|"clean"
expr_stmt|;
name|exitCode
operator|=
name|Environment
operator|::
name|execute
argument_list|(
name|args
argument_list|,
name|QStringList
argument_list|()
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|exitCode
condition|)
block|{
name|cout
operator|<<
literal|"Cleaning qmake failed, return code "
operator|<<
name|exitCode
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
block|}
else|else
block|{
name|args
operator|.
name|clear
argument_list|()
expr_stmt|;
name|args
operator|+=
name|dictionary
index|[
literal|"MAKE"
index|]
expr_stmt|;
name|args
operator|+=
literal|"-f"
expr_stmt|;
name|args
operator|+=
name|makefile
expr_stmt|;
name|exitCode
operator|=
name|Environment
operator|::
name|execute
argument_list|(
name|args
argument_list|,
name|QStringList
argument_list|()
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|exitCode
condition|)
block|{
name|cout
operator|<<
literal|"Building qmake failed, return code "
operator|<<
name|exitCode
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
block|}
block|}
block|}
name|QDir
operator|::
name|setCurrent
argument_list|(
name|pwd
argument_list|)
expr_stmt|;
block|}
comment|// Generate qt.conf
name|QFile
name|confFile
argument_list|(
name|buildPath
operator|+
literal|"/bin/qt.conf"
argument_list|)
decl_stmt|;
if|if
condition|(
name|confFile
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
operator||
name|QFile
operator|::
name|Text
argument_list|)
condition|)
block|{
comment|// Truncates any existing file.
name|QTextStream
name|confStream
argument_list|(
operator|&
name|confFile
argument_list|)
decl_stmt|;
name|confStream
operator|<<
literal|"[EffectivePaths]"
operator|<<
name|endl
operator|<<
literal|"Prefix=.."
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|sourcePath
operator|!=
name|buildPath
condition|)
name|confStream
operator|<<
literal|"[EffectiveSourcePaths]"
operator|<<
name|endl
operator|<<
literal|"Prefix="
operator|<<
name|sourcePath
operator|<<
name|endl
expr_stmt|;
name|confStream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|confFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|appendMakeItem
name|void
name|Configure
operator|::
name|appendMakeItem
parameter_list|(
name|int
name|inList
parameter_list|,
specifier|const
name|QString
modifier|&
name|item
parameter_list|)
block|{
name|QString
name|dir
decl_stmt|;
if|if
condition|(
name|item
operator|!=
literal|"src"
condition|)
name|dir
operator|=
literal|"/"
operator|+
name|item
expr_stmt|;
name|dir
operator|.
name|prepend
argument_list|(
literal|"/src"
argument_list|)
expr_stmt|;
name|makeList
index|[
name|inList
index|]
operator|.
name|append
argument_list|(
operator|new
name|MakeItem
argument_list|(
name|sourcePath
operator|+
name|dir
argument_list|,
name|item
operator|+
literal|".pro"
argument_list|,
name|buildPath
operator|+
name|dir
operator|+
literal|"/Makefile"
argument_list|,
name|Lib
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"VCPROJFILES"
index|]
operator|==
literal|"yes"
condition|)
block|{
name|makeList
index|[
name|inList
index|]
operator|.
name|append
argument_list|(
operator|new
name|MakeItem
argument_list|(
name|sourcePath
operator|+
name|dir
argument_list|,
name|item
operator|+
literal|".pro"
argument_list|,
name|buildPath
operator|+
name|dir
operator|+
literal|"/"
operator|+
name|item
operator|+
literal|".vcproj"
argument_list|,
name|Lib
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|generateMakefiles
name|void
name|Configure
operator|::
name|generateMakefiles
parameter_list|()
block|{
if|if
condition|(
name|dictionary
index|[
literal|"PROCESS"
index|]
operator|!=
literal|"no"
condition|)
block|{
name|QString
name|spec
init|=
name|dictionary
operator|.
name|contains
argument_list|(
literal|"XQMAKESPEC"
argument_list|)
condition|?
name|dictionary
index|[
literal|"XQMAKESPEC"
index|]
else|:
name|dictionary
index|[
literal|"QMAKESPEC"
index|]
decl_stmt|;
if|if
condition|(
name|spec
operator|!=
literal|"win32-msvc.net"
operator|&&
operator|!
name|spec
operator|.
name|startsWith
argument_list|(
literal|"win32-msvc2"
argument_list|)
operator|&&
operator|!
name|spec
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"wince"
argument_list|)
argument_list|)
operator|&&
operator|!
name|spec
operator|.
name|startsWith
argument_list|(
literal|"winphone"
argument_list|)
operator|&&
operator|!
name|spec
operator|.
name|startsWith
argument_list|(
literal|"winrt"
argument_list|)
condition|)
name|dictionary
index|[
literal|"VCPROJFILES"
index|]
operator|=
literal|"no"
expr_stmt|;
name|QString
name|pwd
init|=
name|QDir
operator|::
name|currentPath
argument_list|()
decl_stmt|;
block|{
name|QString
name|sourcePathMangled
init|=
name|sourcePath
decl_stmt|;
name|QString
name|buildPathMangled
init|=
name|buildPath
decl_stmt|;
if|if
condition|(
name|dictionary
operator|.
name|contains
argument_list|(
literal|"TOPLEVEL"
argument_list|)
condition|)
block|{
name|sourcePathMangled
operator|=
name|QFileInfo
argument_list|(
name|sourcePath
argument_list|)
operator|.
name|path
argument_list|()
expr_stmt|;
name|buildPathMangled
operator|=
name|QFileInfo
argument_list|(
name|buildPath
argument_list|)
operator|.
name|path
argument_list|()
expr_stmt|;
block|}
name|bool
name|generate
init|=
literal|true
decl_stmt|;
name|bool
name|doDsp
init|=
operator|(
name|dictionary
index|[
literal|"VCPROJFILES"
index|]
operator|==
literal|"yes"
operator|&&
name|dictionary
index|[
literal|"PROCESS"
index|]
operator|==
literal|"full"
operator|)
decl_stmt|;
while|while
condition|(
name|generate
condition|)
block|{
name|QStringList
name|args
decl_stmt|;
name|args
operator|<<
name|buildPath
operator|+
literal|"/bin/qmake"
expr_stmt|;
if|if
condition|(
name|doDsp
condition|)
block|{
if|if
condition|(
name|dictionary
index|[
literal|"DEPENDENCIES"
index|]
operator|==
literal|"no"
condition|)
name|args
operator|<<
literal|"-nodepend"
expr_stmt|;
name|args
operator|<<
literal|"-tp"
operator|<<
literal|"vc"
expr_stmt|;
name|doDsp
operator|=
literal|false
expr_stmt|;
comment|// DSP files will be done
name|printf
argument_list|(
literal|"Generating Visual Studio project files...\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|printf
argument_list|(
literal|"Generating Makefiles...\n"
argument_list|)
expr_stmt|;
name|generate
operator|=
literal|false
expr_stmt|;
comment|// Now Makefiles will be done
block|}
if|if
condition|(
name|dictionary
index|[
literal|"PROCESS"
index|]
operator|==
literal|"full"
condition|)
name|args
operator|<<
literal|"-r"
expr_stmt|;
name|args
operator|<<
name|sourcePathMangled
expr_stmt|;
name|QDir
operator|::
name|setCurrent
argument_list|(
name|buildPathMangled
argument_list|)
expr_stmt|;
if|if
condition|(
name|int
name|exitCode
init|=
name|Environment
operator|::
name|execute
argument_list|(
name|args
argument_list|,
name|QStringList
argument_list|()
argument_list|,
name|QStringList
argument_list|()
argument_list|)
condition|)
block|{
name|cout
operator|<<
literal|"Qmake failed, return code "
operator|<<
name|exitCode
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
block|}
block|}
block|}
name|QDir
operator|::
name|setCurrent
argument_list|(
name|pwd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cout
operator|<<
literal|"Processing of project files have been disabled."
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"Only use this option if you really know what you're doing."
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
return|return;
block|}
block|}
end_function
begin_function
DECL|function|showSummary
name|void
name|Configure
operator|::
name|showSummary
parameter_list|()
block|{
name|QString
name|make
init|=
name|dictionary
index|[
literal|"MAKE"
index|]
decl_stmt|;
name|cout
operator|<<
name|endl
operator|<<
name|endl
operator|<<
literal|"Qt is now configured for building. Just run "
operator|<<
name|qPrintable
argument_list|(
name|make
argument_list|)
operator|<<
literal|"."
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"To reconfigure, run "
operator|<<
name|qPrintable
argument_list|(
name|make
argument_list|)
operator|<<
literal|" confclean and configure."
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
end_function
begin_function
DECL|function|projectType
name|Configure
operator|::
name|ProjectType
name|Configure
operator|::
name|projectType
parameter_list|(
specifier|const
name|QString
modifier|&
name|proFileName
parameter_list|)
block|{
name|QFile
name|proFile
argument_list|(
name|proFileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|proFile
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|QString
name|buffer
init|=
name|proFile
operator|.
name|readLine
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|buffer
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QStringList
name|segments
init|=
name|buffer
operator|.
name|split
argument_list|(
name|QRegExp
argument_list|(
literal|"\\s"
argument_list|)
argument_list|)
decl_stmt|;
name|QStringList
operator|::
name|Iterator
name|it
init|=
name|segments
operator|.
name|begin
argument_list|()
decl_stmt|;
if|if
condition|(
name|segments
operator|.
name|size
argument_list|()
operator|>=
literal|3
condition|)
block|{
name|QString
name|keyword
init|=
operator|(
operator|*
name|it
operator|++
operator|)
decl_stmt|;
name|QString
name|operation
init|=
operator|(
operator|*
name|it
operator|++
operator|)
decl_stmt|;
name|QString
name|value
init|=
operator|(
operator|*
name|it
operator|++
operator|)
decl_stmt|;
if|if
condition|(
name|keyword
operator|==
literal|"TEMPLATE"
condition|)
block|{
if|if
condition|(
name|value
operator|==
literal|"lib"
condition|)
return|return
name|Lib
return|;
elseif|else
if|if
condition|(
name|value
operator|==
literal|"subdirs"
condition|)
return|return
name|Subdirs
return|;
block|}
block|}
comment|// read next line
name|buffer
operator|=
name|proFile
operator|.
name|readLine
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
block|}
name|proFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
comment|// Default to app handling
return|return
name|App
return|;
block|}
end_function
begin_function
DECL|function|showLicense
name|bool
name|Configure
operator|::
name|showLicense
parameter_list|(
name|QString
name|orgLicenseFile
parameter_list|)
block|{
if|if
condition|(
name|dictionary
index|[
literal|"LICENSE_CONFIRMED"
index|]
operator|==
literal|"yes"
condition|)
block|{
name|cout
operator|<<
literal|"You have already accepted the terms of the license."
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
return|return
literal|true
return|;
block|}
name|bool
name|haveGpl3
init|=
literal|false
decl_stmt|;
name|QString
name|licenseFile
init|=
name|orgLicenseFile
decl_stmt|;
name|QString
name|theLicense
decl_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"EDITION"
index|]
operator|==
literal|"OpenSource"
operator|||
name|dictionary
index|[
literal|"EDITION"
index|]
operator|==
literal|"Snapshot"
condition|)
block|{
name|haveGpl3
operator|=
name|QFile
operator|::
name|exists
argument_list|(
name|orgLicenseFile
operator|+
literal|"/LICENSE.GPL"
argument_list|)
expr_stmt|;
name|theLicense
operator|=
literal|"GNU Lesser General Public License (LGPL) version 2.1"
expr_stmt|;
if|if
condition|(
name|haveGpl3
condition|)
name|theLicense
operator|+=
literal|"\nor the GNU General Public License (GPL) version 3"
expr_stmt|;
block|}
else|else
block|{
comment|// the first line of the license file tells us which license it is
name|QFile
name|file
argument_list|(
name|licenseFile
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|cout
operator|<<
literal|"Failed to load LICENSE file"
operator|<<
name|endl
expr_stmt|;
return|return
literal|false
return|;
block|}
name|theLicense
operator|=
name|file
operator|.
name|readLine
argument_list|()
operator|.
name|trimmed
argument_list|()
expr_stmt|;
block|}
forever|forever
block|{
name|char
name|accept
init|=
literal|'?'
decl_stmt|;
name|cout
operator|<<
literal|"You are licensed to use this software under the terms of"
operator|<<
name|endl
operator|<<
literal|"the "
operator|<<
name|theLicense
operator|<<
literal|"."
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"EDITION"
index|]
operator|==
literal|"OpenSource"
operator|||
name|dictionary
index|[
literal|"EDITION"
index|]
operator|==
literal|"Snapshot"
condition|)
block|{
if|if
condition|(
name|haveGpl3
condition|)
name|cout
operator|<<
literal|"Type '3' to view the GNU General Public License version 3 (GPLv3)."
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"Type 'L' to view the Lesser GNU General Public License version 2.1 (LGPLv2.1)."
operator|<<
name|endl
expr_stmt|;
block|}
else|else
block|{
name|cout
operator|<<
literal|"Type '?' to view the "
operator|<<
name|theLicense
operator|<<
literal|"."
operator|<<
name|endl
expr_stmt|;
block|}
name|cout
operator|<<
literal|"Type 'y' to accept this license offer."
operator|<<
name|endl
operator|<<
literal|"Type 'n' to decline this license offer."
operator|<<
name|endl
operator|<<
name|endl
operator|<<
literal|"Do you accept the terms of the license?"
operator|<<
name|endl
expr_stmt|;
name|cin
operator|>>
name|accept
expr_stmt|;
name|accept
operator|=
name|tolower
argument_list|(
name|accept
argument_list|)
expr_stmt|;
if|if
condition|(
name|accept
operator|==
literal|'y'
condition|)
block|{
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|accept
operator|==
literal|'n'
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
if|if
condition|(
name|dictionary
index|[
literal|"EDITION"
index|]
operator|==
literal|"OpenSource"
operator|||
name|dictionary
index|[
literal|"EDITION"
index|]
operator|==
literal|"Snapshot"
condition|)
block|{
if|if
condition|(
name|accept
operator|==
literal|'3'
condition|)
name|licenseFile
operator|=
name|orgLicenseFile
operator|+
literal|"/LICENSE.GPL"
expr_stmt|;
else|else
name|licenseFile
operator|=
name|orgLicenseFile
operator|+
literal|"/LICENSE.LGPL"
expr_stmt|;
block|}
comment|// Get console line height, to fill the screen properly
name|int
name|i
init|=
literal|0
decl_stmt|,
name|screenHeight
init|=
literal|25
decl_stmt|;
comment|// default
name|CONSOLE_SCREEN_BUFFER_INFO
name|consoleInfo
decl_stmt|;
name|HANDLE
name|stdOut
init|=
name|GetStdHandle
argument_list|(
name|STD_OUTPUT_HANDLE
argument_list|)
decl_stmt|;
if|if
condition|(
name|GetConsoleScreenBufferInfo
argument_list|(
name|stdOut
argument_list|,
operator|&
name|consoleInfo
argument_list|)
condition|)
name|screenHeight
operator|=
name|consoleInfo
operator|.
name|srWindow
operator|.
name|Bottom
operator|-
name|consoleInfo
operator|.
name|srWindow
operator|.
name|Top
operator|-
literal|1
expr_stmt|;
comment|// Some overlap for context
comment|// Prompt the license content to the user
name|QFile
name|file
argument_list|(
name|licenseFile
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|cout
operator|<<
literal|"Failed to load LICENSE file"
operator|<<
name|licenseFile
operator|<<
name|endl
expr_stmt|;
return|return
literal|false
return|;
block|}
name|QStringList
name|licenseContent
init|=
name|QString
argument_list|(
name|file
operator|.
name|readAll
argument_list|()
argument_list|)
operator|.
name|split
argument_list|(
literal|'\n'
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|<
name|licenseContent
operator|.
name|size
argument_list|()
condition|)
block|{
name|cout
operator|<<
name|licenseContent
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|++
name|i
operator|%
name|screenHeight
operator|==
literal|0
condition|)
block|{
name|promptKeyPress
argument_list|()
expr_stmt|;
name|cout
operator|<<
literal|"\r"
expr_stmt|;
comment|// Overwrite text above
block|}
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|readLicense
name|void
name|Configure
operator|::
name|readLicense
parameter_list|()
block|{
name|dictionary
index|[
literal|"PLATFORM NAME"
index|]
operator|=
name|platformName
argument_list|()
expr_stmt|;
name|dictionary
index|[
literal|"LICENSE FILE"
index|]
operator|=
name|sourcePath
expr_stmt|;
name|bool
name|openSource
init|=
literal|false
decl_stmt|;
name|bool
name|hasOpenSource
init|=
name|QFile
operator|::
name|exists
argument_list|(
name|dictionary
index|[
literal|"LICENSE FILE"
index|]
operator|+
literal|"/LICENSE.GPL"
argument_list|)
operator|||
name|QFile
operator|::
name|exists
argument_list|(
name|dictionary
index|[
literal|"LICENSE FILE"
index|]
operator|+
literal|"/LICENSE.LGPL"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dictionary
index|[
literal|"BUILDTYPE"
index|]
operator|==
literal|"commercial"
condition|)
block|{
name|openSource
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|dictionary
index|[
literal|"BUILDTYPE"
index|]
operator|==
literal|"opensource"
condition|)
block|{
name|openSource
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|hasOpenSource
condition|)
block|{
comment|// No Open Source? Just display the commercial license right away
forever|forever
block|{
name|char
name|accept
init|=
literal|'?'
decl_stmt|;
name|cout
operator|<<
literal|"Which edition of Qt do you want to use ?"
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"Type 'c' if you want to use the Commercial Edition."
operator|<<
name|endl
expr_stmt|;
name|cout
operator|<<
literal|"Type 'o' if you want to use the Open Source Edition."
operator|<<
name|endl
expr_stmt|;
name|cin
operator|>>
name|accept
expr_stmt|;
name|accept
operator|=
name|tolower
argument_list|(
name|accept
argument_list|)
expr_stmt|;
if|if
condition|(
name|accept
operator|==
literal|'c'
condition|)
block|{
name|openSource
operator|=
literal|false
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|accept
operator|==
literal|'o'
condition|)
block|{
name|openSource
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|hasOpenSource
operator|&&
name|openSource
condition|)
block|{
name|cout
operator|<<
name|endl
operator|<<
literal|"This is the "
operator|<<
name|dictionary
index|[
literal|"PLATFORM NAME"
index|]
operator|<<
literal|" Open Source Edition."
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"LICENSEE"
index|]
operator|=
literal|"Open Source"
expr_stmt|;
name|dictionary
index|[
literal|"EDITION"
index|]
operator|=
literal|"OpenSource"
expr_stmt|;
name|cout
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|showLicense
argument_list|(
name|dictionary
index|[
literal|"LICENSE FILE"
index|]
argument_list|)
condition|)
block|{
name|cout
operator|<<
literal|"Configuration aborted since license was not accepted"
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
return|return;
block|}
block|}
elseif|else
if|if
condition|(
name|openSource
condition|)
block|{
name|cout
operator|<<
name|endl
operator|<<
literal|"Cannot find the GPL license files! Please download the Open Source version of the library."
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|COMMERCIAL_VERSION
else|else
block|{
name|Tools
operator|::
name|checkLicense
argument_list|(
name|dictionary
argument_list|,
name|sourcePath
argument_list|,
name|buildPath
argument_list|)
expr_stmt|;
block|}
else|#
directive|else
comment|// !COMMERCIAL_VERSION
else|else
block|{
name|cout
operator|<<
name|endl
operator|<<
literal|"Error: This is the Open Source version of Qt."
operator|<<
name|endl
operator|<<
literal|"If you want to use Enterprise features of Qt,"
operator|<<
name|endl
operator|<<
literal|"use the contact form at http://qt.digia.com/contact-us"
operator|<<
name|endl
operator|<<
literal|"to purchase a license."
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|reloadCmdLine
name|void
name|Configure
operator|::
name|reloadCmdLine
parameter_list|()
block|{
if|if
condition|(
name|dictionary
index|[
literal|"REDO"
index|]
operator|==
literal|"yes"
condition|)
block|{
name|QFile
name|inFile
argument_list|(
name|buildPath
operator|+
literal|"/configure"
operator|+
name|dictionary
index|[
literal|"CUSTOMCONFIG"
index|]
operator|+
literal|".cache"
argument_list|)
decl_stmt|;
if|if
condition|(
name|inFile
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|QTextStream
name|inStream
argument_list|(
operator|&
name|inFile
argument_list|)
decl_stmt|;
name|QString
name|buffer
decl_stmt|;
name|inStream
operator|>>
name|buffer
expr_stmt|;
while|while
condition|(
name|buffer
operator|.
name|length
argument_list|()
condition|)
block|{
name|configCmdLine
operator|+=
name|buffer
expr_stmt|;
name|inStream
operator|>>
name|buffer
expr_stmt|;
block|}
name|inFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|saveCmdLine
name|void
name|Configure
operator|::
name|saveCmdLine
parameter_list|()
block|{
if|if
condition|(
name|dictionary
index|[
literal|"REDO"
index|]
operator|!=
literal|"yes"
condition|)
block|{
name|QFile
name|outFile
argument_list|(
name|buildPath
operator|+
literal|"/configure"
operator|+
name|dictionary
index|[
literal|"CUSTOMCONFIG"
index|]
operator|+
literal|".cache"
argument_list|)
decl_stmt|;
if|if
condition|(
name|outFile
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
operator||
name|QFile
operator|::
name|Text
argument_list|)
condition|)
block|{
name|QTextStream
name|outStream
argument_list|(
operator|&
name|outFile
argument_list|)
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|it
init|=
name|configCmdLine
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|configCmdLine
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|outStream
operator|<<
operator|(
operator|*
name|it
operator|)
operator|<<
literal|" "
operator|<<
name|endl
expr_stmt|;
block|}
name|outStream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|outFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|isDone
name|bool
name|Configure
operator|::
name|isDone
parameter_list|()
block|{
return|return
operator|!
name|dictionary
index|[
literal|"DONE"
index|]
operator|.
name|isEmpty
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|isOk
name|bool
name|Configure
operator|::
name|isOk
parameter_list|()
block|{
return|return
operator|(
name|dictionary
index|[
literal|"DONE"
index|]
operator|!=
literal|"error"
operator|)
return|;
block|}
end_function
begin_function
DECL|function|platformName
name|QString
name|Configure
operator|::
name|platformName
parameter_list|()
specifier|const
block|{
switch|switch
condition|(
name|platform
argument_list|()
condition|)
block|{
default|default:
case|case
name|WINDOWS
case|:
return|return
name|QStringLiteral
argument_list|(
literal|"Qt for Windows"
argument_list|)
return|;
case|case
name|WINDOWS_CE
case|:
return|return
name|QStringLiteral
argument_list|(
literal|"Qt for Windows CE"
argument_list|)
return|;
case|case
name|WINDOWS_RT
case|:
return|return
name|QStringLiteral
argument_list|(
literal|"Qt for Windows Runtime"
argument_list|)
return|;
case|case
name|QNX
case|:
return|return
name|QStringLiteral
argument_list|(
literal|"Qt for QNX"
argument_list|)
return|;
case|case
name|BLACKBERRY
case|:
return|return
name|QStringLiteral
argument_list|(
literal|"Qt for Blackberry"
argument_list|)
return|;
case|case
name|ANDROID
case|:
return|return
name|QStringLiteral
argument_list|(
literal|"Qt for Android"
argument_list|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|qpaPlatformName
name|QString
name|Configure
operator|::
name|qpaPlatformName
parameter_list|()
specifier|const
block|{
switch|switch
condition|(
name|platform
argument_list|()
condition|)
block|{
default|default:
case|case
name|WINDOWS
case|:
case|case
name|WINDOWS_CE
case|:
return|return
name|QStringLiteral
argument_list|(
literal|"windows"
argument_list|)
return|;
case|case
name|WINDOWS_RT
case|:
return|return
name|QStringLiteral
argument_list|(
literal|"winrt"
argument_list|)
return|;
case|case
name|QNX
case|:
return|return
name|QStringLiteral
argument_list|(
literal|"qnx"
argument_list|)
return|;
case|case
name|BLACKBERRY
case|:
return|return
name|QStringLiteral
argument_list|(
literal|"blackberry"
argument_list|)
return|;
case|case
name|ANDROID
case|:
return|return
name|QStringLiteral
argument_list|(
literal|"android"
argument_list|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|platform
name|int
name|Configure
operator|::
name|platform
parameter_list|()
specifier|const
block|{
specifier|const
name|QString
name|qMakeSpec
init|=
name|dictionary
operator|.
name|value
argument_list|(
literal|"QMAKESPEC"
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|xQMakeSpec
init|=
name|dictionary
operator|.
name|value
argument_list|(
literal|"XQMAKESPEC"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|xQMakeSpec
operator|.
name|startsWith
argument_list|(
literal|"winphone"
argument_list|)
operator|||
name|xQMakeSpec
operator|.
name|startsWith
argument_list|(
literal|"winrt"
argument_list|)
operator|)
condition|)
return|return
name|WINDOWS_RT
return|;
if|if
condition|(
operator|(
name|qMakeSpec
operator|.
name|startsWith
argument_list|(
literal|"wince"
argument_list|)
operator|||
name|xQMakeSpec
operator|.
name|startsWith
argument_list|(
literal|"wince"
argument_list|)
operator|)
condition|)
return|return
name|WINDOWS_CE
return|;
if|if
condition|(
name|xQMakeSpec
operator|.
name|contains
argument_list|(
literal|"qnx"
argument_list|)
condition|)
return|return
name|QNX
return|;
if|if
condition|(
name|xQMakeSpec
operator|.
name|contains
argument_list|(
literal|"blackberry"
argument_list|)
condition|)
return|return
name|BLACKBERRY
return|;
if|if
condition|(
name|xQMakeSpec
operator|.
name|contains
argument_list|(
literal|"android"
argument_list|)
condition|)
return|return
name|ANDROID
return|;
return|return
name|WINDOWS
return|;
block|}
end_function
begin_constructor
DECL|function|FileWriter
name|FileWriter
operator|::
name|FileWriter
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
member_init_list|:
name|QTextStream
argument_list|()
member_init_list|,
name|m_name
argument_list|(
name|name
argument_list|)
block|{
name|m_buffer
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|setDevice
argument_list|(
operator|&
name|m_buffer
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|flush
name|bool
name|FileWriter
operator|::
name|flush
parameter_list|()
block|{
name|QTextStream
operator|::
name|flush
argument_list|()
expr_stmt|;
name|QFile
name|oldFile
argument_list|(
name|m_name
argument_list|)
decl_stmt|;
if|if
condition|(
name|oldFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
condition|)
block|{
if|if
condition|(
name|oldFile
operator|.
name|readAll
argument_list|()
operator|==
name|m_buffer
operator|.
name|data
argument_list|()
condition|)
return|return
literal|true
return|;
name|oldFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|QString
name|dir
init|=
name|QFileInfo
argument_list|(
name|m_name
argument_list|)
operator|.
name|absolutePath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|QDir
argument_list|()
operator|.
name|mkpath
argument_list|(
name|dir
argument_list|)
condition|)
block|{
name|cout
operator|<<
literal|"Cannot create directory "
operator|<<
name|qPrintable
argument_list|(
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|dir
argument_list|)
argument_list|)
operator|<<
literal|".\n"
expr_stmt|;
return|return
literal|false
return|;
block|}
name|QFile
name|file
argument_list|(
name|m_name
operator|+
literal|".new"
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
condition|)
block|{
if|if
condition|(
name|file
operator|.
name|write
argument_list|(
name|m_buffer
operator|.
name|data
argument_list|()
argument_list|)
operator|==
name|m_buffer
operator|.
name|data
argument_list|()
operator|.
name|size
argument_list|()
condition|)
block|{
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|file
operator|.
name|error
argument_list|()
operator|==
name|QFile
operator|::
name|NoError
condition|)
block|{
operator|::
name|SetFileAttributes
argument_list|(
operator|(
name|wchar_t
operator|*
operator|)
name|m_name
operator|.
name|utf16
argument_list|()
argument_list|,
name|FILE_ATTRIBUTE_NORMAL
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|m_name
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|rename
argument_list|(
name|m_name
argument_list|)
condition|)
block|{
name|cout
operator|<<
literal|"Cannot replace file "
operator|<<
name|qPrintable
argument_list|(
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|m_name
argument_list|)
argument_list|)
operator|<<
literal|".\n"
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
block|}
block|}
name|cout
operator|<<
literal|"Cannot create file "
operator|<<
name|qPrintable
argument_list|(
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|file
operator|.
name|fileName
argument_list|()
argument_list|)
argument_list|)
operator|<<
literal|": "
operator|<<
name|qPrintable
argument_list|(
name|file
operator|.
name|errorString
argument_list|()
argument_list|)
operator|<<
literal|".\n"
expr_stmt|;
name|file
operator|.
name|remove
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
