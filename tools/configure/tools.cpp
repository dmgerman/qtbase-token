begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the tools applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"tools.h"
end_include
begin_include
include|#
directive|include
file|"environment.h"
end_include
begin_include
include|#
directive|include
file|<qdir.h>
end_include
begin_include
include|#
directive|include
file|<qfile.h>
end_include
begin_include
include|#
directive|include
file|<qbytearray.h>
end_include
begin_include
include|#
directive|include
file|<qstringlist.h>
end_include
begin_include
include|#
directive|include
file|<iostream>
end_include
begin_function_decl
name|std
operator|::
name|ostream
modifier|&
name|operator
name|<<
parameter_list|(
name|std
operator|::
name|ostream
modifier|&
name|s
parameter_list|,
specifier|const
name|QString
modifier|&
name|val
parameter_list|)
function_decl|;
end_function_decl
begin_using
using|using
namespace|namespace
name|std
namespace|;
end_using
begin_function
DECL|function|checkLicense
name|void
name|Tools
operator|::
name|checkLicense
parameter_list|(
name|QMap
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
modifier|&
name|dictionary
parameter_list|,
specifier|const
name|QString
modifier|&
name|sourcePath
parameter_list|,
specifier|const
name|QString
modifier|&
name|buildPath
parameter_list|)
block|{
name|QString
name|tpLicense
init|=
name|sourcePath
operator|+
literal|"/LICENSE.PREVIEW.COMMERCIAL"
decl_stmt|;
if|if
condition|(
name|QFile
operator|::
name|exists
argument_list|(
name|tpLicense
argument_list|)
condition|)
block|{
name|dictionary
index|[
literal|"EDITION"
index|]
operator|=
literal|"Preview"
expr_stmt|;
name|dictionary
index|[
literal|"LICENSE FILE"
index|]
operator|=
name|tpLicense
expr_stmt|;
return|return;
block|}
specifier|const
name|QString
name|licenseChecker
init|=
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|sourcePath
operator|+
literal|"/bin/licheck.exe"
argument_list|)
decl_stmt|;
if|if
condition|(
name|QFile
operator|::
name|exists
argument_list|(
name|licenseChecker
argument_list|)
condition|)
block|{
specifier|const
name|QString
name|qMakeSpec
init|=
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|dictionary
operator|.
name|value
argument_list|(
literal|"QMAKESPEC"
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|xQMakeSpec
init|=
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|dictionary
operator|.
name|value
argument_list|(
literal|"XQMAKESPEC"
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|command
init|=
name|QString
argument_list|(
literal|"%1 %2 %3 %4 %5"
argument_list|)
operator|.
name|arg
argument_list|(
name|licenseChecker
argument_list|,
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|sourcePath
argument_list|)
argument_list|,
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|buildPath
argument_list|)
argument_list|,
name|qMakeSpec
argument_list|,
name|xQMakeSpec
argument_list|)
decl_stmt|;
name|int
name|returnValue
init|=
literal|0
decl_stmt|;
name|QString
name|licheckOutput
init|=
name|Environment
operator|::
name|execute
argument_list|(
name|command
argument_list|,
operator|&
name|returnValue
argument_list|)
decl_stmt|;
if|if
condition|(
name|returnValue
condition|)
block|{
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
block|}
else|else
block|{
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|var
decl|,
name|licheckOutput
operator|.
name|split
argument_list|(
literal|'\n'
argument_list|)
control|)
name|dictionary
index|[
name|var
operator|.
name|section
argument_list|(
literal|'='
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|toUpper
argument_list|()
index|]
operator|=
name|var
operator|.
name|section
argument_list|(
literal|'='
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|cout
operator|<<
name|endl
operator|<<
literal|"Error: Could not find licheck.exe"
operator|<<
name|endl
operator|<<
literal|"Try re-installing."
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|dictionary
index|[
literal|"DONE"
index|]
operator|=
literal|"error"
expr_stmt|;
block|}
block|}
end_function
end_unit
