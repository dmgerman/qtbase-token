begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names **     of its contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"level.h"
end_include
begin_include
include|#
directive|include
file|<QJsonArray>
end_include
begin_constructor
DECL|function|Level
name|Level
operator|::
name|Level
parameter_list|()
block|{ }
end_constructor
begin_function
DECL|function|npcs
specifier|const
name|QList
argument_list|<
name|Character
argument_list|>
modifier|&
name|Level
operator|::
name|npcs
parameter_list|()
specifier|const
block|{
return|return
name|mNpcs
return|;
block|}
end_function
begin_function
DECL|function|setNpcs
name|void
name|Level
operator|::
name|setNpcs
parameter_list|(
specifier|const
name|QList
argument_list|<
name|Character
argument_list|>
modifier|&
name|npcs
parameter_list|)
block|{
name|mNpcs
operator|=
name|npcs
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [0]
end_comment
begin_function
DECL|function|read
name|void
name|Level
operator|::
name|read
parameter_list|(
specifier|const
name|QJsonObject
modifier|&
name|json
parameter_list|)
block|{
name|mNpcs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QJsonArray
name|npcArray
init|=
name|json
index|[
literal|"npcs"
index|]
operator|.
name|toArray
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|npcIndex
init|=
literal|0
init|;
name|npcIndex
operator|<
name|npcArray
operator|.
name|size
argument_list|()
condition|;
operator|++
name|npcIndex
control|)
block|{
name|QJsonObject
name|npcObject
init|=
name|npcArray
index|[
name|npcIndex
index|]
operator|.
name|toObject
argument_list|()
decl_stmt|;
name|Character
name|npc
decl_stmt|;
name|npc
operator|.
name|read
argument_list|(
name|npcObject
argument_list|)
expr_stmt|;
name|mNpcs
operator|.
name|append
argument_list|(
name|npc
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|//! [0]
end_comment
begin_comment
comment|//! [1]
end_comment
begin_function
DECL|function|write
name|void
name|Level
operator|::
name|write
parameter_list|(
name|QJsonObject
modifier|&
name|json
parameter_list|)
specifier|const
block|{
name|QJsonArray
name|npcArray
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|Character
name|npc
decl|,
name|mNpcs
control|)
block|{
name|QJsonObject
name|npcObject
decl_stmt|;
name|npc
operator|.
name|write
argument_list|(
name|npcObject
argument_list|)
expr_stmt|;
name|npcArray
operator|.
name|append
argument_list|(
name|npcObject
argument_list|)
expr_stmt|;
block|}
name|json
index|[
literal|"npcs"
index|]
operator|=
name|npcArray
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [1]
end_comment
end_unit
