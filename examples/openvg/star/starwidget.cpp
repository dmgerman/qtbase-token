begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtOpenGL module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor **     the names of its contributors may be used to endorse or promote **     products derived from this software without specific prior written **     permission. ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"starwidget.h"
end_include
begin_constructor
DECL|function|StarWidget
name|StarWidget
operator|::
name|StarWidget
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|path
argument_list|(
name|VG_INVALID_HANDLE
argument_list|)
member_init_list|,
name|pen
argument_list|(
name|Qt
operator|::
name|red
argument_list|,
literal|4.0
argument_list|,
name|Qt
operator|::
name|SolidLine
argument_list|,
name|Qt
operator|::
name|RoundCap
argument_list|,
name|Qt
operator|::
name|RoundJoin
argument_list|)
member_init_list|,
name|brush
argument_list|(
name|Qt
operator|::
name|yellow
argument_list|)
block|{
name|setMinimumSize
argument_list|(
literal|220
argument_list|,
literal|250
argument_list|)
expr_stmt|;
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|MinimumExpanding
argument_list|,
name|QSizePolicy
operator|::
name|MinimumExpanding
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_decl_stmt
DECL|variable|starSegments
specifier|static
name|VGubyte
specifier|const
name|starSegments
index|[]
init|=
block|{
name|VG_MOVE_TO_ABS
block|,
name|VG_LINE_TO_REL
block|,
name|VG_LINE_TO_REL
block|,
name|VG_LINE_TO_REL
block|,
name|VG_LINE_TO_REL
block|,
name|VG_CLOSE_PATH
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|starCoords
specifier|static
name|VGfloat
specifier|const
name|starCoords
index|[]
init|=
block|{
literal|110
block|,
literal|35
block|,
literal|50
block|,
literal|160
block|,
operator|-
literal|130
block|,
operator|-
literal|100
block|,
literal|160
block|,
literal|0
block|,
operator|-
literal|130
block|,
literal|100
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|paintEvent
name|void
name|StarWidget
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
name|QPainter
name|painter
decl_stmt|;
name|painter
operator|.
name|begin
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// Make sure that we are using the OpenVG paint engine.
if|if
condition|(
name|painter
operator|.
name|paintEngine
argument_list|()
operator|->
name|type
argument_list|()
operator|!=
name|QPaintEngine
operator|::
name|OpenVG
condition|)
block|{
ifdef|#
directive|ifdef
name|Q_WS_QWS
name|qWarning
argument_list|(
literal|"Not using OpenVG: use the '-display' option to specify an OpenVG driver"
argument_list|)
expr_stmt|;
else|#
directive|else
name|qWarning
argument_list|(
literal|"Not using OpenVG: specify '-graphicssystem OpenVG'"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return;
block|}
comment|// Select a pen and a brush for drawing the star.
name|painter
operator|.
name|setPen
argument_list|(
name|pen
argument_list|)
expr_stmt|;
name|painter
operator|.
name|setBrush
argument_list|(
name|brush
argument_list|)
expr_stmt|;
comment|// We want the star border to be anti-aliased.
name|painter
operator|.
name|setRenderHints
argument_list|(
name|QPainter
operator|::
name|Antialiasing
argument_list|)
expr_stmt|;
comment|// Flush the state changes to the OpenVG implementation
comment|// and prepare to perform raw OpenVG calls.
name|painter
operator|.
name|beginNativePainting
argument_list|()
expr_stmt|;
comment|// Cache the path if we haven't already or if the path has
comment|// become invalid because the window's context has changed.
if|if
condition|(
name|path
operator|==
name|VG_INVALID_HANDLE
operator|||
operator|!
name|vgGetPathCapabilities
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|path
operator|=
name|vgCreatePath
argument_list|(
name|VG_PATH_FORMAT_STANDARD
argument_list|,
name|VG_PATH_DATATYPE_F
argument_list|,
literal|1.0f
argument_list|,
comment|// scale
literal|0.0f
argument_list|,
comment|// bias
literal|6
argument_list|,
comment|// segmentCapacityHint
literal|10
argument_list|,
comment|// coordCapacityHint
name|VG_PATH_CAPABILITY_ALL
argument_list|)
expr_stmt|;
name|vgAppendPathData
argument_list|(
name|path
argument_list|,
sizeof|sizeof
argument_list|(
name|starSegments
argument_list|)
argument_list|,
name|starSegments
argument_list|,
name|starCoords
argument_list|)
expr_stmt|;
block|}
comment|// Draw the star directly using the OpenVG API.
name|vgDrawPath
argument_list|(
name|path
argument_list|,
name|VG_FILL_PATH
operator||
name|VG_STROKE_PATH
argument_list|)
expr_stmt|;
comment|// Restore normal QPainter operations.
name|painter
operator|.
name|endNativePainting
argument_list|()
expr_stmt|;
name|painter
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
end_function
end_unit
