begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor **     the names of its contributors may be used to endorse or promote **     products derived from this software without specific prior written **     permission. ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"car.h"
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QtWidgets>
end_include
begin_include
include|#
directive|include
file|<math.h>
end_include
begin_decl_stmt
DECL|variable|Pi
specifier|static
specifier|const
name|double
name|Pi
init|=
literal|3.14159265358979323846264338327950288419717
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|boundingRect
name|QRectF
name|Car
operator|::
name|boundingRect
parameter_list|()
specifier|const
block|{
return|return
name|QRectF
argument_list|(
operator|-
literal|35
argument_list|,
operator|-
literal|81
argument_list|,
literal|70
argument_list|,
literal|115
argument_list|)
return|;
block|}
end_function
begin_constructor
DECL|function|Car
name|Car
operator|::
name|Car
parameter_list|()
member_init_list|:
name|color
argument_list|(
name|Qt
operator|::
name|green
argument_list|)
member_init_list|,
name|wheelsAngle
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|speed
argument_list|(
literal|0
argument_list|)
block|{
name|startTimer
argument_list|(
literal|1000
operator|/
literal|33
argument_list|)
expr_stmt|;
name|setFlag
argument_list|(
name|QGraphicsItem
operator|::
name|ItemIsMovable
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|setFlag
argument_list|(
name|QGraphicsItem
operator|::
name|ItemIsFocusable
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|accelerate
name|void
name|Car
operator|::
name|accelerate
parameter_list|()
block|{
if|if
condition|(
name|speed
operator|<
literal|10
condition|)
operator|++
name|speed
expr_stmt|;
block|}
end_function
begin_function
DECL|function|decelerate
name|void
name|Car
operator|::
name|decelerate
parameter_list|()
block|{
if|if
condition|(
name|speed
operator|>
operator|-
literal|10
condition|)
operator|--
name|speed
expr_stmt|;
block|}
end_function
begin_function
DECL|function|turnLeft
name|void
name|Car
operator|::
name|turnLeft
parameter_list|()
block|{
if|if
condition|(
name|wheelsAngle
operator|>
operator|-
literal|30
condition|)
name|wheelsAngle
operator|-=
literal|5
expr_stmt|;
block|}
end_function
begin_function
DECL|function|turnRight
name|void
name|Car
operator|::
name|turnRight
parameter_list|()
block|{
if|if
condition|(
name|wheelsAngle
operator|<
literal|30
condition|)
name|wheelsAngle
operator|+=
literal|5
expr_stmt|;
block|}
end_function
begin_function
DECL|function|paint
name|void
name|Car
operator|::
name|paint
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QStyleOptionGraphicsItem
modifier|*
name|option
parameter_list|,
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|option
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setBrush
argument_list|(
name|Qt
operator|::
name|gray
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawRect
argument_list|(
operator|-
literal|20
argument_list|,
operator|-
literal|58
argument_list|,
literal|40
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// front axel
name|painter
operator|->
name|drawRect
argument_list|(
operator|-
literal|20
argument_list|,
literal|7
argument_list|,
literal|40
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// rear axel
name|painter
operator|->
name|setBrush
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawRect
argument_list|(
operator|-
literal|25
argument_list|,
operator|-
literal|79
argument_list|,
literal|50
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// front wing
name|painter
operator|->
name|drawEllipse
argument_list|(
operator|-
literal|25
argument_list|,
operator|-
literal|48
argument_list|,
literal|50
argument_list|,
literal|20
argument_list|)
expr_stmt|;
comment|// side pods
name|painter
operator|->
name|drawRect
argument_list|(
operator|-
literal|25
argument_list|,
operator|-
literal|38
argument_list|,
literal|50
argument_list|,
literal|35
argument_list|)
expr_stmt|;
comment|// side pods
name|painter
operator|->
name|drawRect
argument_list|(
operator|-
literal|5
argument_list|,
literal|9
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// back pod
name|painter
operator|->
name|drawEllipse
argument_list|(
operator|-
literal|10
argument_list|,
operator|-
literal|81
argument_list|,
literal|20
argument_list|,
literal|100
argument_list|)
expr_stmt|;
comment|// main body
name|painter
operator|->
name|drawRect
argument_list|(
operator|-
literal|17
argument_list|,
literal|19
argument_list|,
literal|34
argument_list|,
literal|15
argument_list|)
expr_stmt|;
comment|// rear wing
name|painter
operator|->
name|setBrush
argument_list|(
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPie
argument_list|(
operator|-
literal|5
argument_list|,
operator|-
literal|51
argument_list|,
literal|10
argument_list|,
literal|15
argument_list|,
literal|0
argument_list|,
literal|180
operator|*
literal|16
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawRect
argument_list|(
operator|-
literal|5
argument_list|,
operator|-
literal|44
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// cocpit
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|painter
operator|->
name|translate
argument_list|(
operator|-
literal|20
argument_list|,
operator|-
literal|58
argument_list|)
expr_stmt|;
name|painter
operator|->
name|rotate
argument_list|(
name|wheelsAngle
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawRect
argument_list|(
operator|-
literal|10
argument_list|,
operator|-
literal|7
argument_list|,
literal|10
argument_list|,
literal|15
argument_list|)
expr_stmt|;
comment|// front left
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|painter
operator|->
name|translate
argument_list|(
literal|20
argument_list|,
operator|-
literal|58
argument_list|)
expr_stmt|;
name|painter
operator|->
name|rotate
argument_list|(
name|wheelsAngle
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawRect
argument_list|(
literal|0
argument_list|,
operator|-
literal|7
argument_list|,
literal|10
argument_list|,
literal|15
argument_list|)
expr_stmt|;
comment|// front left
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
name|painter
operator|->
name|drawRect
argument_list|(
operator|-
literal|30
argument_list|,
literal|0
argument_list|,
literal|12
argument_list|,
literal|17
argument_list|)
expr_stmt|;
comment|// rear left
name|painter
operator|->
name|drawRect
argument_list|(
literal|19
argument_list|,
literal|0
argument_list|,
literal|12
argument_list|,
literal|17
argument_list|)
expr_stmt|;
comment|// rear right
block|}
end_function
begin_function
DECL|function|timerEvent
name|void
name|Car
operator|::
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|event
argument_list|)
expr_stmt|;
specifier|const
name|qreal
name|axelDistance
init|=
literal|54
decl_stmt|;
name|qreal
name|wheelsAngleRads
init|=
operator|(
name|wheelsAngle
operator|*
name|Pi
operator|)
operator|/
literal|180
decl_stmt|;
name|qreal
name|turnDistance
init|=
operator|::
name|cos
argument_list|(
name|wheelsAngleRads
argument_list|)
operator|*
name|axelDistance
operator|*
literal|2
decl_stmt|;
name|qreal
name|turnRateRads
init|=
name|wheelsAngleRads
operator|/
name|turnDistance
decl_stmt|;
comment|// rough estimate
name|qreal
name|turnRate
init|=
operator|(
name|turnRateRads
operator|*
literal|180
operator|)
operator|/
name|Pi
decl_stmt|;
name|qreal
name|rotation
init|=
name|speed
operator|*
name|turnRate
decl_stmt|;
name|rotate
argument_list|(
name|rotation
argument_list|)
expr_stmt|;
name|translate
argument_list|(
literal|0
argument_list|,
operator|-
name|speed
argument_list|)
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
end_function
end_unit
