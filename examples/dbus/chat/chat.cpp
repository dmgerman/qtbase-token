begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** BSD License Usage ** Alternatively, you may use this file under the terms of the BSD license ** as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of The Qt Company Ltd nor the names of its **     contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QApplication>
end_include
begin_include
include|#
directive|include
file|<QMessageBox>
end_include
begin_include
include|#
directive|include
file|"chat.h"
end_include
begin_include
include|#
directive|include
file|"chat_adaptor.h"
end_include
begin_include
include|#
directive|include
file|"chat_interface.h"
end_include
begin_constructor
DECL|function|ChatMainWindow
name|ChatMainWindow
operator|::
name|ChatMainWindow
parameter_list|()
member_init_list|:
name|m_nickname
argument_list|(
name|QLatin1String
argument_list|(
literal|"nickname"
argument_list|)
argument_list|)
block|{
name|setupUi
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|sendButton
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|messageLineEdit
argument_list|,
name|SIGNAL
argument_list|(
name|textChanged
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|textChangedSlot
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|sendButton
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|sendClickedSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|actionChangeNickname
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|changeNickname
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|actionAboutQt
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|aboutQt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|qApp
argument_list|,
name|SIGNAL
argument_list|(
name|lastWindowClosed
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|exiting
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// add our D-Bus interface and connect to D-Bus
operator|new
name|ChatAdaptor
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|registerObject
argument_list|(
literal|"/"
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|org
operator|::
name|example
operator|::
name|chat
modifier|*
name|iface
decl_stmt|;
name|iface
operator|=
operator|new
name|org
operator|::
name|example
operator|::
name|chat
argument_list|(
name|QString
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|,
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
comment|//connect(iface, SIGNAL(message(QString,QString)), this, SLOT(messageSlot(QString,QString)));
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|connect
argument_list|(
name|QString
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|"org.example.chat"
argument_list|,
literal|"message"
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|messageSlot
argument_list|(
name|QString
argument_list|,
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|iface
argument_list|,
name|SIGNAL
argument_list|(
name|action
argument_list|(
name|QString
argument_list|,
name|QString
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|actionSlot
argument_list|(
name|QString
argument_list|,
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|NicknameDialog
name|dialog
decl_stmt|;
name|dialog
operator|.
name|cancelButton
operator|->
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|exec
argument_list|()
expr_stmt|;
name|m_nickname
operator|=
name|dialog
operator|.
name|nickname
operator|->
name|text
argument_list|()
operator|.
name|trimmed
argument_list|()
expr_stmt|;
emit|emit
name|action
argument_list|(
name|m_nickname
argument_list|,
name|QLatin1String
argument_list|(
literal|"joins the chat"
argument_list|)
argument_list|)
emit|;
block|}
end_constructor
begin_destructor
DECL|function|~ChatMainWindow
name|ChatMainWindow
operator|::
name|~
name|ChatMainWindow
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|rebuildHistory
name|void
name|ChatMainWindow
operator|::
name|rebuildHistory
parameter_list|()
block|{
name|QString
name|history
init|=
name|m_messages
operator|.
name|join
argument_list|(
name|QLatin1String
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
decl_stmt|;
name|chatHistory
operator|->
name|setPlainText
argument_list|(
name|history
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|messageSlot
name|void
name|ChatMainWindow
operator|::
name|messageSlot
parameter_list|(
specifier|const
name|QString
modifier|&
name|nickname
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|QString
name|msg
argument_list|(
name|QLatin1String
argument_list|(
literal|"<%1> %2"
argument_list|)
argument_list|)
decl_stmt|;
name|msg
operator|=
name|msg
operator|.
name|arg
argument_list|(
name|nickname
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|m_messages
operator|.
name|append
argument_list|(
name|msg
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_messages
operator|.
name|count
argument_list|()
operator|>
literal|100
condition|)
name|m_messages
operator|.
name|removeFirst
argument_list|()
expr_stmt|;
name|rebuildHistory
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|actionSlot
name|void
name|ChatMainWindow
operator|::
name|actionSlot
parameter_list|(
specifier|const
name|QString
modifier|&
name|nickname
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|QString
name|msg
argument_list|(
name|QLatin1String
argument_list|(
literal|"* %1 %2"
argument_list|)
argument_list|)
decl_stmt|;
name|msg
operator|=
name|msg
operator|.
name|arg
argument_list|(
name|nickname
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|m_messages
operator|.
name|append
argument_list|(
name|msg
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_messages
operator|.
name|count
argument_list|()
operator|>
literal|100
condition|)
name|m_messages
operator|.
name|removeFirst
argument_list|()
expr_stmt|;
name|rebuildHistory
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|textChangedSlot
name|void
name|ChatMainWindow
operator|::
name|textChangedSlot
parameter_list|(
specifier|const
name|QString
modifier|&
name|newText
parameter_list|)
block|{
name|sendButton
operator|->
name|setEnabled
argument_list|(
operator|!
name|newText
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendClickedSlot
name|void
name|ChatMainWindow
operator|::
name|sendClickedSlot
parameter_list|()
block|{
comment|//emit message(m_nickname, messageLineEdit->text());
name|QDBusMessage
name|msg
init|=
name|QDBusMessage
operator|::
name|createSignal
argument_list|(
literal|"/"
argument_list|,
literal|"org.example.chat"
argument_list|,
literal|"message"
argument_list|)
decl_stmt|;
name|msg
operator|<<
name|m_nickname
operator|<<
name|messageLineEdit
operator|->
name|text
argument_list|()
expr_stmt|;
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|send
argument_list|(
name|msg
argument_list|)
expr_stmt|;
name|messageLineEdit
operator|->
name|setText
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|changeNickname
name|void
name|ChatMainWindow
operator|::
name|changeNickname
parameter_list|()
block|{
name|NicknameDialog
name|dialog
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|dialog
operator|.
name|exec
argument_list|()
operator|==
name|QDialog
operator|::
name|Accepted
condition|)
block|{
name|QString
name|old
init|=
name|m_nickname
decl_stmt|;
name|m_nickname
operator|=
name|dialog
operator|.
name|nickname
operator|->
name|text
argument_list|()
operator|.
name|trimmed
argument_list|()
expr_stmt|;
emit|emit
name|action
argument_list|(
name|old
argument_list|,
name|QString
argument_list|(
literal|"is now known as %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|m_nickname
argument_list|)
argument_list|)
emit|;
block|}
block|}
end_function
begin_function
DECL|function|aboutQt
name|void
name|ChatMainWindow
operator|::
name|aboutQt
parameter_list|()
block|{
name|QMessageBox
operator|::
name|aboutQt
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|exiting
name|void
name|ChatMainWindow
operator|::
name|exiting
parameter_list|()
block|{
emit|emit
name|action
argument_list|(
name|m_nickname
argument_list|,
name|QLatin1String
argument_list|(
literal|"leaves the chat"
argument_list|)
argument_list|)
emit|;
block|}
end_function
begin_constructor
DECL|function|NicknameDialog
name|NicknameDialog
operator|::
name|NicknameDialog
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QDialog
argument_list|(
name|parent
argument_list|)
block|{
name|setupUi
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
modifier|*
name|argv
parameter_list|)
block|{
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|QDBusConnection
operator|::
name|sessionBus
argument_list|()
operator|.
name|isConnected
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"Cannot connect to the D-Bus session bus.\n"
literal|"Please check your system settings and try again.\n"
argument_list|)
expr_stmt|;
return|return
literal|1
return|;
block|}
name|ChatMainWindow
name|chat
decl_stmt|;
name|chat
operator|.
name|show
argument_list|()
expr_stmt|;
return|return
name|app
operator|.
name|exec
argument_list|()
return|;
block|}
end_function
end_unit
