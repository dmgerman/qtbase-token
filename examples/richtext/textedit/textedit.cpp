begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: http://www.qt-project.org/ ** ** This file is part of the demonstration applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"textedit.h"
end_include
begin_include
include|#
directive|include
file|<QAction>
end_include
begin_include
include|#
directive|include
file|<QApplication>
end_include
begin_include
include|#
directive|include
file|<QClipboard>
end_include
begin_include
include|#
directive|include
file|<QColorDialog>
end_include
begin_include
include|#
directive|include
file|<QComboBox>
end_include
begin_include
include|#
directive|include
file|<QFontComboBox>
end_include
begin_include
include|#
directive|include
file|<QFile>
end_include
begin_include
include|#
directive|include
file|<QFileDialog>
end_include
begin_include
include|#
directive|include
file|<QFileInfo>
end_include
begin_include
include|#
directive|include
file|<QFontDatabase>
end_include
begin_include
include|#
directive|include
file|<QMenu>
end_include
begin_include
include|#
directive|include
file|<QMenuBar>
end_include
begin_include
include|#
directive|include
file|<QPrintDialog>
end_include
begin_include
include|#
directive|include
file|<QPrinter>
end_include
begin_include
include|#
directive|include
file|<QTextCodec>
end_include
begin_include
include|#
directive|include
file|<QTextEdit>
end_include
begin_include
include|#
directive|include
file|<QToolBar>
end_include
begin_include
include|#
directive|include
file|<QTextCursor>
end_include
begin_include
include|#
directive|include
file|<QTextDocumentWriter>
end_include
begin_include
include|#
directive|include
file|<QTextList>
end_include
begin_include
include|#
directive|include
file|<QtDebug>
end_include
begin_include
include|#
directive|include
file|<QCloseEvent>
end_include
begin_include
include|#
directive|include
file|<QMessageBox>
end_include
begin_include
include|#
directive|include
file|<QPrintPreviewDialog>
end_include
begin_include
include|#
directive|include
file|<QMimeData>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_MAC
end_ifdef
begin_decl_stmt
DECL|variable|rsrcPath
specifier|const
name|QString
name|rsrcPath
init|=
literal|":/images/mac"
decl_stmt|;
end_decl_stmt
begin_else
else|#
directive|else
end_else
begin_decl_stmt
DECL|variable|rsrcPath
specifier|const
name|QString
name|rsrcPath
init|=
literal|":/images/win"
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_constructor
DECL|function|TextEdit
name|TextEdit
operator|::
name|TextEdit
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QMainWindow
argument_list|(
name|parent
argument_list|)
block|{
name|setToolButtonStyle
argument_list|(
name|Qt
operator|::
name|ToolButtonFollowStyle
argument_list|)
expr_stmt|;
name|setupFileActions
argument_list|()
expr_stmt|;
name|setupEditActions
argument_list|()
expr_stmt|;
name|setupTextActions
argument_list|()
expr_stmt|;
block|{
name|QMenu
modifier|*
name|helpMenu
init|=
operator|new
name|QMenu
argument_list|(
name|tr
argument_list|(
literal|"Help"
argument_list|)
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|menuBar
argument_list|()
operator|->
name|addMenu
argument_list|(
name|helpMenu
argument_list|)
expr_stmt|;
name|helpMenu
operator|->
name|addAction
argument_list|(
name|tr
argument_list|(
literal|"About"
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|about
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|helpMenu
operator|->
name|addAction
argument_list|(
name|tr
argument_list|(
literal|"About&Qt"
argument_list|)
argument_list|,
name|qApp
argument_list|,
name|SLOT
argument_list|(
name|aboutQt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|textEdit
operator|=
operator|new
name|QTextEdit
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|textEdit
argument_list|,
name|SIGNAL
argument_list|(
name|currentCharFormatChanged
argument_list|(
name|QTextCharFormat
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|currentCharFormatChanged
argument_list|(
name|QTextCharFormat
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|textEdit
argument_list|,
name|SIGNAL
argument_list|(
name|cursorPositionChanged
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|cursorPositionChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|setCentralWidget
argument_list|(
name|textEdit
argument_list|)
expr_stmt|;
name|textEdit
operator|->
name|setFocus
argument_list|()
expr_stmt|;
name|setCurrentFileName
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|fontChanged
argument_list|(
name|textEdit
operator|->
name|font
argument_list|()
argument_list|)
expr_stmt|;
name|colorChanged
argument_list|(
name|textEdit
operator|->
name|textColor
argument_list|()
argument_list|)
expr_stmt|;
name|alignmentChanged
argument_list|(
name|textEdit
operator|->
name|alignment
argument_list|()
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|textEdit
operator|->
name|document
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|modificationChanged
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|actionSave
argument_list|,
name|SLOT
argument_list|(
name|setEnabled
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|textEdit
operator|->
name|document
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|modificationChanged
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|setWindowModified
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|textEdit
operator|->
name|document
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|undoAvailable
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|actionUndo
argument_list|,
name|SLOT
argument_list|(
name|setEnabled
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|textEdit
operator|->
name|document
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|redoAvailable
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|actionRedo
argument_list|,
name|SLOT
argument_list|(
name|setEnabled
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|setWindowModified
argument_list|(
name|textEdit
operator|->
name|document
argument_list|()
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|actionSave
operator|->
name|setEnabled
argument_list|(
name|textEdit
operator|->
name|document
argument_list|()
operator|->
name|isModified
argument_list|()
argument_list|)
expr_stmt|;
name|actionUndo
operator|->
name|setEnabled
argument_list|(
name|textEdit
operator|->
name|document
argument_list|()
operator|->
name|isUndoAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|actionRedo
operator|->
name|setEnabled
argument_list|(
name|textEdit
operator|->
name|document
argument_list|()
operator|->
name|isRedoAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|actionUndo
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|textEdit
argument_list|,
name|SLOT
argument_list|(
name|undo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|actionRedo
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|textEdit
argument_list|,
name|SLOT
argument_list|(
name|redo
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|actionCut
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|actionCopy
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|actionCut
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|textEdit
argument_list|,
name|SLOT
argument_list|(
name|cut
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|actionCopy
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|textEdit
argument_list|,
name|SLOT
argument_list|(
name|copy
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|actionPaste
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|textEdit
argument_list|,
name|SLOT
argument_list|(
name|paste
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|textEdit
argument_list|,
name|SIGNAL
argument_list|(
name|copyAvailable
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|actionCut
argument_list|,
name|SLOT
argument_list|(
name|setEnabled
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|textEdit
argument_list|,
name|SIGNAL
argument_list|(
name|copyAvailable
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|actionCopy
argument_list|,
name|SLOT
argument_list|(
name|setEnabled
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
name|connect
argument_list|(
name|QApplication
operator|::
name|clipboard
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|dataChanged
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|clipboardDataChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QString
name|initialFile
init|=
literal|":/example.html"
decl_stmt|;
specifier|const
name|QStringList
name|args
init|=
name|QCoreApplication
operator|::
name|arguments
argument_list|()
decl_stmt|;
if|if
condition|(
name|args
operator|.
name|count
argument_list|()
operator|==
literal|2
condition|)
name|initialFile
operator|=
name|args
operator|.
name|at
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|load
argument_list|(
name|initialFile
argument_list|)
condition|)
name|fileNew
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|closeEvent
name|void
name|TextEdit
operator|::
name|closeEvent
parameter_list|(
name|QCloseEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
name|maybeSave
argument_list|()
condition|)
name|e
operator|->
name|accept
argument_list|()
expr_stmt|;
else|else
name|e
operator|->
name|ignore
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setupFileActions
name|void
name|TextEdit
operator|::
name|setupFileActions
parameter_list|()
block|{
name|QToolBar
modifier|*
name|tb
init|=
operator|new
name|QToolBar
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|tb
operator|->
name|setWindowTitle
argument_list|(
name|tr
argument_list|(
literal|"File Actions"
argument_list|)
argument_list|)
expr_stmt|;
name|addToolBar
argument_list|(
name|tb
argument_list|)
expr_stmt|;
name|QMenu
modifier|*
name|menu
init|=
operator|new
name|QMenu
argument_list|(
name|tr
argument_list|(
literal|"&File"
argument_list|)
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|menuBar
argument_list|()
operator|->
name|addMenu
argument_list|(
name|menu
argument_list|)
expr_stmt|;
name|QAction
modifier|*
name|a
decl_stmt|;
name|QIcon
name|newIcon
init|=
name|QIcon
operator|::
name|fromTheme
argument_list|(
literal|"document-new"
argument_list|,
name|QIcon
argument_list|(
name|rsrcPath
operator|+
literal|"/filenew.png"
argument_list|)
argument_list|)
decl_stmt|;
name|a
operator|=
operator|new
name|QAction
argument_list|(
name|newIcon
argument_list|,
name|tr
argument_list|(
literal|"&New"
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|a
operator|->
name|setPriority
argument_list|(
name|QAction
operator|::
name|LowPriority
argument_list|)
expr_stmt|;
name|a
operator|->
name|setShortcut
argument_list|(
name|QKeySequence
operator|::
name|New
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|a
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|fileNew
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tb
operator|->
name|addAction
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addAction
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|a
operator|=
operator|new
name|QAction
argument_list|(
name|QIcon
operator|::
name|fromTheme
argument_list|(
literal|"document-open"
argument_list|,
name|QIcon
argument_list|(
name|rsrcPath
operator|+
literal|"/fileopen.png"
argument_list|)
argument_list|)
argument_list|,
name|tr
argument_list|(
literal|"&Open..."
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|a
operator|->
name|setShortcut
argument_list|(
name|QKeySequence
operator|::
name|Open
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|a
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|fileOpen
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tb
operator|->
name|addAction
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addAction
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addSeparator
argument_list|()
expr_stmt|;
name|actionSave
operator|=
name|a
operator|=
operator|new
name|QAction
argument_list|(
name|QIcon
operator|::
name|fromTheme
argument_list|(
literal|"document-save"
argument_list|,
name|QIcon
argument_list|(
name|rsrcPath
operator|+
literal|"/filesave.png"
argument_list|)
argument_list|)
argument_list|,
name|tr
argument_list|(
literal|"&Save"
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|a
operator|->
name|setShortcut
argument_list|(
name|QKeySequence
operator|::
name|Save
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|a
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|fileSave
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|tb
operator|->
name|addAction
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addAction
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|a
operator|=
operator|new
name|QAction
argument_list|(
name|tr
argument_list|(
literal|"Save&As..."
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|a
operator|->
name|setPriority
argument_list|(
name|QAction
operator|::
name|LowPriority
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|a
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|fileSaveAs
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addAction
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addSeparator
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_PRINTER
name|a
operator|=
operator|new
name|QAction
argument_list|(
name|QIcon
operator|::
name|fromTheme
argument_list|(
literal|"document-print"
argument_list|,
name|QIcon
argument_list|(
name|rsrcPath
operator|+
literal|"/fileprint.png"
argument_list|)
argument_list|)
argument_list|,
name|tr
argument_list|(
literal|"&Print..."
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|a
operator|->
name|setPriority
argument_list|(
name|QAction
operator|::
name|LowPriority
argument_list|)
expr_stmt|;
name|a
operator|->
name|setShortcut
argument_list|(
name|QKeySequence
operator|::
name|Print
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|a
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|filePrint
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tb
operator|->
name|addAction
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addAction
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|a
operator|=
operator|new
name|QAction
argument_list|(
name|QIcon
operator|::
name|fromTheme
argument_list|(
literal|"fileprint"
argument_list|,
name|QIcon
argument_list|(
name|rsrcPath
operator|+
literal|"/fileprint.png"
argument_list|)
argument_list|)
argument_list|,
name|tr
argument_list|(
literal|"Print Preview..."
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|a
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|filePrintPreview
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addAction
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|a
operator|=
operator|new
name|QAction
argument_list|(
name|QIcon
operator|::
name|fromTheme
argument_list|(
literal|"exportpdf"
argument_list|,
name|QIcon
argument_list|(
name|rsrcPath
operator|+
literal|"/exportpdf.png"
argument_list|)
argument_list|)
argument_list|,
name|tr
argument_list|(
literal|"&Export PDF..."
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|a
operator|->
name|setPriority
argument_list|(
name|QAction
operator|::
name|LowPriority
argument_list|)
expr_stmt|;
name|a
operator|->
name|setShortcut
argument_list|(
name|Qt
operator|::
name|CTRL
operator|+
name|Qt
operator|::
name|Key_D
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|a
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|filePrintPdf
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tb
operator|->
name|addAction
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addAction
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addSeparator
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|a
operator|=
operator|new
name|QAction
argument_list|(
name|tr
argument_list|(
literal|"&Quit"
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|a
operator|->
name|setShortcut
argument_list|(
name|Qt
operator|::
name|CTRL
operator|+
name|Qt
operator|::
name|Key_Q
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|a
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|close
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addAction
argument_list|(
name|a
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setupEditActions
name|void
name|TextEdit
operator|::
name|setupEditActions
parameter_list|()
block|{
name|QToolBar
modifier|*
name|tb
init|=
operator|new
name|QToolBar
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|tb
operator|->
name|setWindowTitle
argument_list|(
name|tr
argument_list|(
literal|"Edit Actions"
argument_list|)
argument_list|)
expr_stmt|;
name|addToolBar
argument_list|(
name|tb
argument_list|)
expr_stmt|;
name|QMenu
modifier|*
name|menu
init|=
operator|new
name|QMenu
argument_list|(
name|tr
argument_list|(
literal|"&Edit"
argument_list|)
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|menuBar
argument_list|()
operator|->
name|addMenu
argument_list|(
name|menu
argument_list|)
expr_stmt|;
name|QAction
modifier|*
name|a
decl_stmt|;
name|a
operator|=
name|actionUndo
operator|=
operator|new
name|QAction
argument_list|(
name|QIcon
operator|::
name|fromTheme
argument_list|(
literal|"edit-undo"
argument_list|,
name|QIcon
argument_list|(
name|rsrcPath
operator|+
literal|"/editundo.png"
argument_list|)
argument_list|)
argument_list|,
name|tr
argument_list|(
literal|"&Undo"
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|a
operator|->
name|setShortcut
argument_list|(
name|QKeySequence
operator|::
name|Undo
argument_list|)
expr_stmt|;
name|tb
operator|->
name|addAction
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addAction
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|a
operator|=
name|actionRedo
operator|=
operator|new
name|QAction
argument_list|(
name|QIcon
operator|::
name|fromTheme
argument_list|(
literal|"edit-redo"
argument_list|,
name|QIcon
argument_list|(
name|rsrcPath
operator|+
literal|"/editredo.png"
argument_list|)
argument_list|)
argument_list|,
name|tr
argument_list|(
literal|"&Redo"
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|a
operator|->
name|setPriority
argument_list|(
name|QAction
operator|::
name|LowPriority
argument_list|)
expr_stmt|;
name|a
operator|->
name|setShortcut
argument_list|(
name|QKeySequence
operator|::
name|Redo
argument_list|)
expr_stmt|;
name|tb
operator|->
name|addAction
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addAction
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addSeparator
argument_list|()
expr_stmt|;
name|a
operator|=
name|actionCut
operator|=
operator|new
name|QAction
argument_list|(
name|QIcon
operator|::
name|fromTheme
argument_list|(
literal|"edit-cut"
argument_list|,
name|QIcon
argument_list|(
name|rsrcPath
operator|+
literal|"/editcut.png"
argument_list|)
argument_list|)
argument_list|,
name|tr
argument_list|(
literal|"Cu&t"
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|a
operator|->
name|setPriority
argument_list|(
name|QAction
operator|::
name|LowPriority
argument_list|)
expr_stmt|;
name|a
operator|->
name|setShortcut
argument_list|(
name|QKeySequence
operator|::
name|Cut
argument_list|)
expr_stmt|;
name|tb
operator|->
name|addAction
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addAction
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|a
operator|=
name|actionCopy
operator|=
operator|new
name|QAction
argument_list|(
name|QIcon
operator|::
name|fromTheme
argument_list|(
literal|"edit-copy"
argument_list|,
name|QIcon
argument_list|(
name|rsrcPath
operator|+
literal|"/editcopy.png"
argument_list|)
argument_list|)
argument_list|,
name|tr
argument_list|(
literal|"&Copy"
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|a
operator|->
name|setPriority
argument_list|(
name|QAction
operator|::
name|LowPriority
argument_list|)
expr_stmt|;
name|a
operator|->
name|setShortcut
argument_list|(
name|QKeySequence
operator|::
name|Copy
argument_list|)
expr_stmt|;
name|tb
operator|->
name|addAction
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addAction
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|a
operator|=
name|actionPaste
operator|=
operator|new
name|QAction
argument_list|(
name|QIcon
operator|::
name|fromTheme
argument_list|(
literal|"edit-paste"
argument_list|,
name|QIcon
argument_list|(
name|rsrcPath
operator|+
literal|"/editpaste.png"
argument_list|)
argument_list|)
argument_list|,
name|tr
argument_list|(
literal|"&Paste"
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|a
operator|->
name|setPriority
argument_list|(
name|QAction
operator|::
name|LowPriority
argument_list|)
expr_stmt|;
name|a
operator|->
name|setShortcut
argument_list|(
name|QKeySequence
operator|::
name|Paste
argument_list|)
expr_stmt|;
name|tb
operator|->
name|addAction
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addAction
argument_list|(
name|a
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
if|if
condition|(
specifier|const
name|QMimeData
modifier|*
name|md
init|=
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|mimeData
argument_list|()
condition|)
name|actionPaste
operator|->
name|setEnabled
argument_list|(
name|md
operator|->
name|hasText
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|setupTextActions
name|void
name|TextEdit
operator|::
name|setupTextActions
parameter_list|()
block|{
name|QToolBar
modifier|*
name|tb
init|=
operator|new
name|QToolBar
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|tb
operator|->
name|setWindowTitle
argument_list|(
name|tr
argument_list|(
literal|"Format Actions"
argument_list|)
argument_list|)
expr_stmt|;
name|addToolBar
argument_list|(
name|tb
argument_list|)
expr_stmt|;
name|QMenu
modifier|*
name|menu
init|=
operator|new
name|QMenu
argument_list|(
name|tr
argument_list|(
literal|"F&ormat"
argument_list|)
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|menuBar
argument_list|()
operator|->
name|addMenu
argument_list|(
name|menu
argument_list|)
expr_stmt|;
name|actionTextBold
operator|=
operator|new
name|QAction
argument_list|(
name|QIcon
operator|::
name|fromTheme
argument_list|(
literal|"format-text-bold"
argument_list|,
name|QIcon
argument_list|(
name|rsrcPath
operator|+
literal|"/textbold.png"
argument_list|)
argument_list|)
argument_list|,
name|tr
argument_list|(
literal|"&Bold"
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|actionTextBold
operator|->
name|setShortcut
argument_list|(
name|Qt
operator|::
name|CTRL
operator|+
name|Qt
operator|::
name|Key_B
argument_list|)
expr_stmt|;
name|actionTextBold
operator|->
name|setPriority
argument_list|(
name|QAction
operator|::
name|LowPriority
argument_list|)
expr_stmt|;
name|QFont
name|bold
decl_stmt|;
name|bold
operator|.
name|setBold
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|actionTextBold
operator|->
name|setFont
argument_list|(
name|bold
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|actionTextBold
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|textBold
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tb
operator|->
name|addAction
argument_list|(
name|actionTextBold
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addAction
argument_list|(
name|actionTextBold
argument_list|)
expr_stmt|;
name|actionTextBold
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|actionTextItalic
operator|=
operator|new
name|QAction
argument_list|(
name|QIcon
operator|::
name|fromTheme
argument_list|(
literal|"format-text-italic"
argument_list|,
name|QIcon
argument_list|(
name|rsrcPath
operator|+
literal|"/textitalic.png"
argument_list|)
argument_list|)
argument_list|,
name|tr
argument_list|(
literal|"&Italic"
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|actionTextItalic
operator|->
name|setPriority
argument_list|(
name|QAction
operator|::
name|LowPriority
argument_list|)
expr_stmt|;
name|actionTextItalic
operator|->
name|setShortcut
argument_list|(
name|Qt
operator|::
name|CTRL
operator|+
name|Qt
operator|::
name|Key_I
argument_list|)
expr_stmt|;
name|QFont
name|italic
decl_stmt|;
name|italic
operator|.
name|setItalic
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|actionTextItalic
operator|->
name|setFont
argument_list|(
name|italic
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|actionTextItalic
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|textItalic
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tb
operator|->
name|addAction
argument_list|(
name|actionTextItalic
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addAction
argument_list|(
name|actionTextItalic
argument_list|)
expr_stmt|;
name|actionTextItalic
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|actionTextUnderline
operator|=
operator|new
name|QAction
argument_list|(
name|QIcon
operator|::
name|fromTheme
argument_list|(
literal|"format-text-underline"
argument_list|,
name|QIcon
argument_list|(
name|rsrcPath
operator|+
literal|"/textunder.png"
argument_list|)
argument_list|)
argument_list|,
name|tr
argument_list|(
literal|"&Underline"
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|actionTextUnderline
operator|->
name|setShortcut
argument_list|(
name|Qt
operator|::
name|CTRL
operator|+
name|Qt
operator|::
name|Key_U
argument_list|)
expr_stmt|;
name|actionTextUnderline
operator|->
name|setPriority
argument_list|(
name|QAction
operator|::
name|LowPriority
argument_list|)
expr_stmt|;
name|QFont
name|underline
decl_stmt|;
name|underline
operator|.
name|setUnderline
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|actionTextUnderline
operator|->
name|setFont
argument_list|(
name|underline
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|actionTextUnderline
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|textUnderline
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tb
operator|->
name|addAction
argument_list|(
name|actionTextUnderline
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addAction
argument_list|(
name|actionTextUnderline
argument_list|)
expr_stmt|;
name|actionTextUnderline
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addSeparator
argument_list|()
expr_stmt|;
name|QActionGroup
modifier|*
name|grp
init|=
operator|new
name|QActionGroup
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|grp
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|(
name|QAction
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|textAlign
argument_list|(
name|QAction
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure the alignLeft  is always left of the alignRight
if|if
condition|(
name|QApplication
operator|::
name|isLeftToRight
argument_list|()
condition|)
block|{
name|actionAlignLeft
operator|=
operator|new
name|QAction
argument_list|(
name|QIcon
operator|::
name|fromTheme
argument_list|(
literal|"format-justify-left"
argument_list|,
name|QIcon
argument_list|(
name|rsrcPath
operator|+
literal|"/textleft.png"
argument_list|)
argument_list|)
argument_list|,
name|tr
argument_list|(
literal|"&Left"
argument_list|)
argument_list|,
name|grp
argument_list|)
expr_stmt|;
name|actionAlignCenter
operator|=
operator|new
name|QAction
argument_list|(
name|QIcon
operator|::
name|fromTheme
argument_list|(
literal|"format-justify-center"
argument_list|,
name|QIcon
argument_list|(
name|rsrcPath
operator|+
literal|"/textcenter.png"
argument_list|)
argument_list|)
argument_list|,
name|tr
argument_list|(
literal|"C&enter"
argument_list|)
argument_list|,
name|grp
argument_list|)
expr_stmt|;
name|actionAlignRight
operator|=
operator|new
name|QAction
argument_list|(
name|QIcon
operator|::
name|fromTheme
argument_list|(
literal|"format-justify-right"
argument_list|,
name|QIcon
argument_list|(
name|rsrcPath
operator|+
literal|"/textright.png"
argument_list|)
argument_list|)
argument_list|,
name|tr
argument_list|(
literal|"&Right"
argument_list|)
argument_list|,
name|grp
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|actionAlignRight
operator|=
operator|new
name|QAction
argument_list|(
name|QIcon
operator|::
name|fromTheme
argument_list|(
literal|"format-justify-right"
argument_list|,
name|QIcon
argument_list|(
name|rsrcPath
operator|+
literal|"/textright.png"
argument_list|)
argument_list|)
argument_list|,
name|tr
argument_list|(
literal|"&Right"
argument_list|)
argument_list|,
name|grp
argument_list|)
expr_stmt|;
name|actionAlignCenter
operator|=
operator|new
name|QAction
argument_list|(
name|QIcon
operator|::
name|fromTheme
argument_list|(
literal|"format-justify-center"
argument_list|,
name|QIcon
argument_list|(
name|rsrcPath
operator|+
literal|"/textcenter.png"
argument_list|)
argument_list|)
argument_list|,
name|tr
argument_list|(
literal|"C&enter"
argument_list|)
argument_list|,
name|grp
argument_list|)
expr_stmt|;
name|actionAlignLeft
operator|=
operator|new
name|QAction
argument_list|(
name|QIcon
operator|::
name|fromTheme
argument_list|(
literal|"format-justify-left"
argument_list|,
name|QIcon
argument_list|(
name|rsrcPath
operator|+
literal|"/textleft.png"
argument_list|)
argument_list|)
argument_list|,
name|tr
argument_list|(
literal|"&Left"
argument_list|)
argument_list|,
name|grp
argument_list|)
expr_stmt|;
block|}
name|actionAlignJustify
operator|=
operator|new
name|QAction
argument_list|(
name|QIcon
operator|::
name|fromTheme
argument_list|(
literal|"format-justify-fill"
argument_list|,
name|QIcon
argument_list|(
name|rsrcPath
operator|+
literal|"/textjustify.png"
argument_list|)
argument_list|)
argument_list|,
name|tr
argument_list|(
literal|"&Justify"
argument_list|)
argument_list|,
name|grp
argument_list|)
expr_stmt|;
name|actionAlignLeft
operator|->
name|setShortcut
argument_list|(
name|Qt
operator|::
name|CTRL
operator|+
name|Qt
operator|::
name|Key_L
argument_list|)
expr_stmt|;
name|actionAlignLeft
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|actionAlignLeft
operator|->
name|setPriority
argument_list|(
name|QAction
operator|::
name|LowPriority
argument_list|)
expr_stmt|;
name|actionAlignCenter
operator|->
name|setShortcut
argument_list|(
name|Qt
operator|::
name|CTRL
operator|+
name|Qt
operator|::
name|Key_E
argument_list|)
expr_stmt|;
name|actionAlignCenter
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|actionAlignCenter
operator|->
name|setPriority
argument_list|(
name|QAction
operator|::
name|LowPriority
argument_list|)
expr_stmt|;
name|actionAlignRight
operator|->
name|setShortcut
argument_list|(
name|Qt
operator|::
name|CTRL
operator|+
name|Qt
operator|::
name|Key_R
argument_list|)
expr_stmt|;
name|actionAlignRight
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|actionAlignRight
operator|->
name|setPriority
argument_list|(
name|QAction
operator|::
name|LowPriority
argument_list|)
expr_stmt|;
name|actionAlignJustify
operator|->
name|setShortcut
argument_list|(
name|Qt
operator|::
name|CTRL
operator|+
name|Qt
operator|::
name|Key_J
argument_list|)
expr_stmt|;
name|actionAlignJustify
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|actionAlignJustify
operator|->
name|setPriority
argument_list|(
name|QAction
operator|::
name|LowPriority
argument_list|)
expr_stmt|;
name|tb
operator|->
name|addActions
argument_list|(
name|grp
operator|->
name|actions
argument_list|()
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addActions
argument_list|(
name|grp
operator|->
name|actions
argument_list|()
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addSeparator
argument_list|()
expr_stmt|;
name|QPixmap
name|pix
argument_list|(
literal|16
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|pix
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
name|actionTextColor
operator|=
operator|new
name|QAction
argument_list|(
name|pix
argument_list|,
name|tr
argument_list|(
literal|"&Color..."
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|actionTextColor
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|textColor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tb
operator|->
name|addAction
argument_list|(
name|actionTextColor
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addAction
argument_list|(
name|actionTextColor
argument_list|)
expr_stmt|;
name|tb
operator|=
operator|new
name|QToolBar
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|tb
operator|->
name|setAllowedAreas
argument_list|(
name|Qt
operator|::
name|TopToolBarArea
operator||
name|Qt
operator|::
name|BottomToolBarArea
argument_list|)
expr_stmt|;
name|tb
operator|->
name|setWindowTitle
argument_list|(
name|tr
argument_list|(
literal|"Format Actions"
argument_list|)
argument_list|)
expr_stmt|;
name|addToolBarBreak
argument_list|(
name|Qt
operator|::
name|TopToolBarArea
argument_list|)
expr_stmt|;
name|addToolBar
argument_list|(
name|tb
argument_list|)
expr_stmt|;
name|comboStyle
operator|=
operator|new
name|QComboBox
argument_list|(
name|tb
argument_list|)
expr_stmt|;
name|tb
operator|->
name|addWidget
argument_list|(
name|comboStyle
argument_list|)
expr_stmt|;
name|comboStyle
operator|->
name|addItem
argument_list|(
literal|"Standard"
argument_list|)
expr_stmt|;
name|comboStyle
operator|->
name|addItem
argument_list|(
literal|"Bullet List (Disc)"
argument_list|)
expr_stmt|;
name|comboStyle
operator|->
name|addItem
argument_list|(
literal|"Bullet List (Circle)"
argument_list|)
expr_stmt|;
name|comboStyle
operator|->
name|addItem
argument_list|(
literal|"Bullet List (Square)"
argument_list|)
expr_stmt|;
name|comboStyle
operator|->
name|addItem
argument_list|(
literal|"Ordered List (Decimal)"
argument_list|)
expr_stmt|;
name|comboStyle
operator|->
name|addItem
argument_list|(
literal|"Ordered List (Alpha lower)"
argument_list|)
expr_stmt|;
name|comboStyle
operator|->
name|addItem
argument_list|(
literal|"Ordered List (Alpha upper)"
argument_list|)
expr_stmt|;
name|comboStyle
operator|->
name|addItem
argument_list|(
literal|"Ordered List (Roman lower)"
argument_list|)
expr_stmt|;
name|comboStyle
operator|->
name|addItem
argument_list|(
literal|"Ordered List (Roman upper)"
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|comboStyle
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|textStyle
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|comboFont
operator|=
operator|new
name|QFontComboBox
argument_list|(
name|tb
argument_list|)
expr_stmt|;
name|tb
operator|->
name|addWidget
argument_list|(
name|comboFont
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|comboFont
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|textFamily
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|comboSize
operator|=
operator|new
name|QComboBox
argument_list|(
name|tb
argument_list|)
expr_stmt|;
name|comboSize
operator|->
name|setObjectName
argument_list|(
literal|"comboSize"
argument_list|)
expr_stmt|;
name|tb
operator|->
name|addWidget
argument_list|(
name|comboSize
argument_list|)
expr_stmt|;
name|comboSize
operator|->
name|setEditable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QFontDatabase
name|db
decl_stmt|;
foreach|foreach
control|(
name|int
name|size
decl|,
name|db
operator|.
name|standardSizes
argument_list|()
control|)
name|comboSize
operator|->
name|addItem
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|size
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|comboSize
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|textSize
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|comboSize
operator|->
name|setCurrentIndex
argument_list|(
name|comboSize
operator|->
name|findText
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|QApplication
operator|::
name|font
argument_list|()
operator|.
name|pointSize
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|load
name|bool
name|TextEdit
operator|::
name|load
parameter_list|(
specifier|const
name|QString
modifier|&
name|f
parameter_list|)
block|{
if|if
condition|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
name|f
argument_list|)
condition|)
return|return
literal|false
return|;
name|QFile
name|file
argument_list|(
name|f
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
condition|)
return|return
literal|false
return|;
name|QByteArray
name|data
init|=
name|file
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|QTextCodec
modifier|*
name|codec
init|=
name|Qt
operator|::
name|codecForHtml
argument_list|(
name|data
argument_list|)
decl_stmt|;
name|QString
name|str
init|=
name|codec
operator|->
name|toUnicode
argument_list|(
name|data
argument_list|)
decl_stmt|;
if|if
condition|(
name|Qt
operator|::
name|mightBeRichText
argument_list|(
name|str
argument_list|)
condition|)
block|{
name|textEdit
operator|->
name|setHtml
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|str
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|textEdit
operator|->
name|setPlainText
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
name|setCurrentFileName
argument_list|(
name|f
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|maybeSave
name|bool
name|TextEdit
operator|::
name|maybeSave
parameter_list|()
block|{
if|if
condition|(
operator|!
name|textEdit
operator|->
name|document
argument_list|()
operator|->
name|isModified
argument_list|()
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|fileName
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|":/"
argument_list|)
argument_list|)
condition|)
return|return
literal|true
return|;
name|QMessageBox
operator|::
name|StandardButton
name|ret
decl_stmt|;
name|ret
operator|=
name|QMessageBox
operator|::
name|warning
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"Application"
argument_list|)
argument_list|,
name|tr
argument_list|(
literal|"The document has been modified.\n"
literal|"Do you want to save your changes?"
argument_list|)
argument_list|,
name|QMessageBox
operator|::
name|Save
operator||
name|QMessageBox
operator|::
name|Discard
operator||
name|QMessageBox
operator|::
name|Cancel
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|==
name|QMessageBox
operator|::
name|Save
condition|)
return|return
name|fileSave
argument_list|()
return|;
elseif|else
if|if
condition|(
name|ret
operator|==
name|QMessageBox
operator|::
name|Cancel
condition|)
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|setCurrentFileName
name|void
name|TextEdit
operator|::
name|setCurrentFileName
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
block|{
name|this
operator|->
name|fileName
operator|=
name|fileName
expr_stmt|;
name|textEdit
operator|->
name|document
argument_list|()
operator|->
name|setModified
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QString
name|shownName
decl_stmt|;
if|if
condition|(
name|fileName
operator|.
name|isEmpty
argument_list|()
condition|)
name|shownName
operator|=
literal|"untitled.txt"
expr_stmt|;
else|else
name|shownName
operator|=
name|QFileInfo
argument_list|(
name|fileName
argument_list|)
operator|.
name|fileName
argument_list|()
expr_stmt|;
name|setWindowTitle
argument_list|(
name|tr
argument_list|(
literal|"%1[*] - %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|shownName
argument_list|)
operator|.
name|arg
argument_list|(
name|tr
argument_list|(
literal|"Rich Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|setWindowModified
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fileNew
name|void
name|TextEdit
operator|::
name|fileNew
parameter_list|()
block|{
if|if
condition|(
name|maybeSave
argument_list|()
condition|)
block|{
name|textEdit
operator|->
name|clear
argument_list|()
expr_stmt|;
name|setCurrentFileName
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|fileOpen
name|void
name|TextEdit
operator|::
name|fileOpen
parameter_list|()
block|{
name|QString
name|fn
init|=
name|QFileDialog
operator|::
name|getOpenFileName
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"Open File..."
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|,
name|tr
argument_list|(
literal|"HTML-Files (*.htm *.html);;All Files (*)"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fn
operator|.
name|isEmpty
argument_list|()
condition|)
name|load
argument_list|(
name|fn
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fileSave
name|bool
name|TextEdit
operator|::
name|fileSave
parameter_list|()
block|{
if|if
condition|(
name|fileName
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|fileSaveAs
argument_list|()
return|;
name|QTextDocumentWriter
name|writer
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|bool
name|success
init|=
name|writer
operator|.
name|write
argument_list|(
name|textEdit
operator|->
name|document
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|success
condition|)
name|textEdit
operator|->
name|document
argument_list|()
operator|->
name|setModified
argument_list|(
literal|false
argument_list|)
expr_stmt|;
return|return
name|success
return|;
block|}
end_function
begin_function
DECL|function|fileSaveAs
name|bool
name|TextEdit
operator|::
name|fileSaveAs
parameter_list|()
block|{
name|QString
name|fn
init|=
name|QFileDialog
operator|::
name|getSaveFileName
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"Save as..."
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|,
name|tr
argument_list|(
literal|"ODF files (*.odt);;HTML-Files (*.htm *.html);;All Files (*)"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fn
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
operator|(
name|fn
operator|.
name|endsWith
argument_list|(
literal|".odt"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|||
name|fn
operator|.
name|endsWith
argument_list|(
literal|".htm"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|||
name|fn
operator|.
name|endsWith
argument_list|(
literal|".html"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|)
condition|)
name|fn
operator|+=
literal|".odt"
expr_stmt|;
comment|// default
name|setCurrentFileName
argument_list|(
name|fn
argument_list|)
expr_stmt|;
return|return
name|fileSave
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|filePrint
name|void
name|TextEdit
operator|::
name|filePrint
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_PRINTER
name|QPrinter
name|printer
argument_list|(
name|QPrinter
operator|::
name|HighResolution
argument_list|)
decl_stmt|;
name|QPrintDialog
modifier|*
name|dlg
init|=
operator|new
name|QPrintDialog
argument_list|(
operator|&
name|printer
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|textEdit
operator|->
name|textCursor
argument_list|()
operator|.
name|hasSelection
argument_list|()
condition|)
name|dlg
operator|->
name|addEnabledOption
argument_list|(
name|QAbstractPrintDialog
operator|::
name|PrintSelection
argument_list|)
expr_stmt|;
name|dlg
operator|->
name|setWindowTitle
argument_list|(
name|tr
argument_list|(
literal|"Print Document"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|dlg
operator|->
name|exec
argument_list|()
operator|==
name|QDialog
operator|::
name|Accepted
condition|)
block|{
name|textEdit
operator|->
name|print
argument_list|(
operator|&
name|printer
argument_list|)
expr_stmt|;
block|}
operator|delete
name|dlg
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|filePrintPreview
name|void
name|TextEdit
operator|::
name|filePrintPreview
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_PRINTER
name|QPrinter
name|printer
argument_list|(
name|QPrinter
operator|::
name|HighResolution
argument_list|)
decl_stmt|;
name|QPrintPreviewDialog
name|preview
argument_list|(
operator|&
name|printer
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|connect
argument_list|(
operator|&
name|preview
argument_list|,
name|SIGNAL
argument_list|(
name|paintRequested
argument_list|(
name|QPrinter
operator|*
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|printPreview
argument_list|(
name|QPrinter
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|preview
operator|.
name|exec
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|printPreview
name|void
name|TextEdit
operator|::
name|printPreview
parameter_list|(
name|QPrinter
modifier|*
name|printer
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QT_NO_PRINTER
name|Q_UNUSED
argument_list|(
name|printer
argument_list|)
expr_stmt|;
else|#
directive|else
name|textEdit
operator|->
name|print
argument_list|(
name|printer
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|filePrintPdf
name|void
name|TextEdit
operator|::
name|filePrintPdf
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_PRINTER
comment|//! [0]
name|QString
name|fileName
init|=
name|QFileDialog
operator|::
name|getSaveFileName
argument_list|(
name|this
argument_list|,
literal|"Export PDF"
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|"*.pdf"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fileName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|QFileInfo
argument_list|(
name|fileName
argument_list|)
operator|.
name|suffix
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|fileName
operator|.
name|append
argument_list|(
literal|".pdf"
argument_list|)
expr_stmt|;
name|QPrinter
name|printer
argument_list|(
name|QPrinter
operator|::
name|HighResolution
argument_list|)
decl_stmt|;
name|printer
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|printer
operator|.
name|setOutputFileName
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|textEdit
operator|->
name|document
argument_list|()
operator|->
name|print
argument_list|(
operator|&
name|printer
argument_list|)
expr_stmt|;
block|}
comment|//! [0]
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|textBold
name|void
name|TextEdit
operator|::
name|textBold
parameter_list|()
block|{
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setFontWeight
argument_list|(
name|actionTextBold
operator|->
name|isChecked
argument_list|()
condition|?
name|QFont
operator|::
name|Bold
else|:
name|QFont
operator|::
name|Normal
argument_list|)
expr_stmt|;
name|mergeFormatOnWordOrSelection
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|textUnderline
name|void
name|TextEdit
operator|::
name|textUnderline
parameter_list|()
block|{
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setFontUnderline
argument_list|(
name|actionTextUnderline
operator|->
name|isChecked
argument_list|()
argument_list|)
expr_stmt|;
name|mergeFormatOnWordOrSelection
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|textItalic
name|void
name|TextEdit
operator|::
name|textItalic
parameter_list|()
block|{
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setFontItalic
argument_list|(
name|actionTextItalic
operator|->
name|isChecked
argument_list|()
argument_list|)
expr_stmt|;
name|mergeFormatOnWordOrSelection
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|textFamily
name|void
name|TextEdit
operator|::
name|textFamily
parameter_list|(
specifier|const
name|QString
modifier|&
name|f
parameter_list|)
block|{
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setFontFamily
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|mergeFormatOnWordOrSelection
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|textSize
name|void
name|TextEdit
operator|::
name|textSize
parameter_list|(
specifier|const
name|QString
modifier|&
name|p
parameter_list|)
block|{
name|qreal
name|pointSize
init|=
name|p
operator|.
name|toFloat
argument_list|()
decl_stmt|;
if|if
condition|(
name|p
operator|.
name|toFloat
argument_list|()
operator|>
literal|0
condition|)
block|{
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setFontPointSize
argument_list|(
name|pointSize
argument_list|)
expr_stmt|;
name|mergeFormatOnWordOrSelection
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|textStyle
name|void
name|TextEdit
operator|::
name|textStyle
parameter_list|(
name|int
name|styleIndex
parameter_list|)
block|{
name|QTextCursor
name|cursor
init|=
name|textEdit
operator|->
name|textCursor
argument_list|()
decl_stmt|;
if|if
condition|(
name|styleIndex
operator|!=
literal|0
condition|)
block|{
name|QTextListFormat
operator|::
name|Style
name|style
init|=
name|QTextListFormat
operator|::
name|ListDisc
decl_stmt|;
switch|switch
condition|(
name|styleIndex
condition|)
block|{
default|default:
case|case
literal|1
case|:
name|style
operator|=
name|QTextListFormat
operator|::
name|ListDisc
expr_stmt|;
break|break;
case|case
literal|2
case|:
name|style
operator|=
name|QTextListFormat
operator|::
name|ListCircle
expr_stmt|;
break|break;
case|case
literal|3
case|:
name|style
operator|=
name|QTextListFormat
operator|::
name|ListSquare
expr_stmt|;
break|break;
case|case
literal|4
case|:
name|style
operator|=
name|QTextListFormat
operator|::
name|ListDecimal
expr_stmt|;
break|break;
case|case
literal|5
case|:
name|style
operator|=
name|QTextListFormat
operator|::
name|ListLowerAlpha
expr_stmt|;
break|break;
case|case
literal|6
case|:
name|style
operator|=
name|QTextListFormat
operator|::
name|ListUpperAlpha
expr_stmt|;
break|break;
case|case
literal|7
case|:
name|style
operator|=
name|QTextListFormat
operator|::
name|ListLowerRoman
expr_stmt|;
break|break;
case|case
literal|8
case|:
name|style
operator|=
name|QTextListFormat
operator|::
name|ListUpperRoman
expr_stmt|;
break|break;
block|}
name|cursor
operator|.
name|beginEditBlock
argument_list|()
expr_stmt|;
name|QTextBlockFormat
name|blockFmt
init|=
name|cursor
operator|.
name|blockFormat
argument_list|()
decl_stmt|;
name|QTextListFormat
name|listFmt
decl_stmt|;
if|if
condition|(
name|cursor
operator|.
name|currentList
argument_list|()
condition|)
block|{
name|listFmt
operator|=
name|cursor
operator|.
name|currentList
argument_list|()
operator|->
name|format
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|listFmt
operator|.
name|setIndent
argument_list|(
name|blockFmt
operator|.
name|indent
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|blockFmt
operator|.
name|setIndent
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|setBlockFormat
argument_list|(
name|blockFmt
argument_list|)
expr_stmt|;
block|}
name|listFmt
operator|.
name|setStyle
argument_list|(
name|style
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|createList
argument_list|(
name|listFmt
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|endEditBlock
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// ####
name|QTextBlockFormat
name|bfmt
decl_stmt|;
name|bfmt
operator|.
name|setObjectIndex
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|mergeBlockFormat
argument_list|(
name|bfmt
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|textColor
name|void
name|TextEdit
operator|::
name|textColor
parameter_list|()
block|{
name|QColor
name|col
init|=
name|QColorDialog
operator|::
name|getColor
argument_list|(
name|textEdit
operator|->
name|textColor
argument_list|()
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|col
operator|.
name|isValid
argument_list|()
condition|)
return|return;
name|QTextCharFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setForeground
argument_list|(
name|col
argument_list|)
expr_stmt|;
name|mergeFormatOnWordOrSelection
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|colorChanged
argument_list|(
name|col
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|textAlign
name|void
name|TextEdit
operator|::
name|textAlign
parameter_list|(
name|QAction
modifier|*
name|a
parameter_list|)
block|{
if|if
condition|(
name|a
operator|==
name|actionAlignLeft
condition|)
name|textEdit
operator|->
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignLeft
operator||
name|Qt
operator|::
name|AlignAbsolute
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|a
operator|==
name|actionAlignCenter
condition|)
name|textEdit
operator|->
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignHCenter
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|a
operator|==
name|actionAlignRight
condition|)
name|textEdit
operator|->
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignRight
operator||
name|Qt
operator|::
name|AlignAbsolute
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|a
operator|==
name|actionAlignJustify
condition|)
name|textEdit
operator|->
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignJustify
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|currentCharFormatChanged
name|void
name|TextEdit
operator|::
name|currentCharFormatChanged
parameter_list|(
specifier|const
name|QTextCharFormat
modifier|&
name|format
parameter_list|)
block|{
name|fontChanged
argument_list|(
name|format
operator|.
name|font
argument_list|()
argument_list|)
expr_stmt|;
name|colorChanged
argument_list|(
name|format
operator|.
name|foreground
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cursorPositionChanged
name|void
name|TextEdit
operator|::
name|cursorPositionChanged
parameter_list|()
block|{
name|alignmentChanged
argument_list|(
name|textEdit
operator|->
name|alignment
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clipboardDataChanged
name|void
name|TextEdit
operator|::
name|clipboardDataChanged
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
if|if
condition|(
specifier|const
name|QMimeData
modifier|*
name|md
init|=
name|QApplication
operator|::
name|clipboard
argument_list|()
operator|->
name|mimeData
argument_list|()
condition|)
name|actionPaste
operator|->
name|setEnabled
argument_list|(
name|md
operator|->
name|hasText
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|about
name|void
name|TextEdit
operator|::
name|about
parameter_list|()
block|{
name|QMessageBox
operator|::
name|about
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"About"
argument_list|)
argument_list|,
name|tr
argument_list|(
literal|"This example demonstrates Qt's "
literal|"rich text editing facilities in action, providing an example "
literal|"document for you to experiment with."
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mergeFormatOnWordOrSelection
name|void
name|TextEdit
operator|::
name|mergeFormatOnWordOrSelection
parameter_list|(
specifier|const
name|QTextCharFormat
modifier|&
name|format
parameter_list|)
block|{
name|QTextCursor
name|cursor
init|=
name|textEdit
operator|->
name|textCursor
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|cursor
operator|.
name|hasSelection
argument_list|()
condition|)
name|cursor
operator|.
name|select
argument_list|(
name|QTextCursor
operator|::
name|WordUnderCursor
argument_list|)
expr_stmt|;
name|cursor
operator|.
name|mergeCharFormat
argument_list|(
name|format
argument_list|)
expr_stmt|;
name|textEdit
operator|->
name|mergeCurrentCharFormat
argument_list|(
name|format
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fontChanged
name|void
name|TextEdit
operator|::
name|fontChanged
parameter_list|(
specifier|const
name|QFont
modifier|&
name|f
parameter_list|)
block|{
name|comboFont
operator|->
name|setCurrentIndex
argument_list|(
name|comboFont
operator|->
name|findText
argument_list|(
name|QFontInfo
argument_list|(
name|f
argument_list|)
operator|.
name|family
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|comboSize
operator|->
name|setCurrentIndex
argument_list|(
name|comboSize
operator|->
name|findText
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|f
operator|.
name|pointSize
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|actionTextBold
operator|->
name|setChecked
argument_list|(
name|f
operator|.
name|bold
argument_list|()
argument_list|)
expr_stmt|;
name|actionTextItalic
operator|->
name|setChecked
argument_list|(
name|f
operator|.
name|italic
argument_list|()
argument_list|)
expr_stmt|;
name|actionTextUnderline
operator|->
name|setChecked
argument_list|(
name|f
operator|.
name|underline
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|colorChanged
name|void
name|TextEdit
operator|::
name|colorChanged
parameter_list|(
specifier|const
name|QColor
modifier|&
name|c
parameter_list|)
block|{
name|QPixmap
name|pix
argument_list|(
literal|16
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|pix
operator|.
name|fill
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|actionTextColor
operator|->
name|setIcon
argument_list|(
name|pix
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|alignmentChanged
name|void
name|TextEdit
operator|::
name|alignmentChanged
parameter_list|(
name|Qt
operator|::
name|Alignment
name|a
parameter_list|)
block|{
if|if
condition|(
name|a
operator|&
name|Qt
operator|::
name|AlignLeft
condition|)
block|{
name|actionAlignLeft
operator|->
name|setChecked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|a
operator|&
name|Qt
operator|::
name|AlignHCenter
condition|)
block|{
name|actionAlignCenter
operator|->
name|setChecked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|a
operator|&
name|Qt
operator|::
name|AlignRight
condition|)
block|{
name|actionAlignRight
operator|->
name|setChecked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|a
operator|&
name|Qt
operator|::
name|AlignJustify
condition|)
block|{
name|actionAlignJustify
operator|->
name|setChecked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
end_function
end_unit
