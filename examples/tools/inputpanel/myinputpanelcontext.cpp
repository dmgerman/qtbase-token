begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor **     the names of its contributors may be used to endorse or promote **     products derived from this software without specific prior written **     permission. ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore>
end_include
begin_include
include|#
directive|include
file|"myinputpanelcontext.h"
end_include
begin_comment
comment|//! [0]
end_comment
begin_constructor
DECL|function|MyInputPanelContext
name|MyInputPanelContext
operator|::
name|MyInputPanelContext
parameter_list|()
block|{
name|inputPanel
operator|=
operator|new
name|MyInputPanel
expr_stmt|;
name|connect
argument_list|(
name|inputPanel
argument_list|,
name|SIGNAL
argument_list|(
name|characterGenerated
argument_list|(
name|QChar
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|sendCharacter
argument_list|(
name|QChar
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|//! [0]
end_comment
begin_destructor
DECL|function|~MyInputPanelContext
name|MyInputPanelContext
operator|::
name|~
name|MyInputPanelContext
parameter_list|()
block|{
operator|delete
name|inputPanel
expr_stmt|;
block|}
end_destructor
begin_comment
comment|//! [1]
end_comment
begin_function
DECL|function|filterEvent
name|bool
name|MyInputPanelContext
operator|::
name|filterEvent
parameter_list|(
specifier|const
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|RequestSoftwareInputPanel
condition|)
block|{
name|updatePosition
argument_list|()
expr_stmt|;
name|inputPanel
operator|->
name|show
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|CloseSoftwareInputPanel
condition|)
block|{
name|inputPanel
operator|->
name|hide
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|//! [1]
end_comment
begin_function
DECL|function|identifierName
name|QString
name|MyInputPanelContext
operator|::
name|identifierName
parameter_list|()
block|{
return|return
literal|"MyInputPanelContext"
return|;
block|}
end_function
begin_function
DECL|function|reset
name|void
name|MyInputPanelContext
operator|::
name|reset
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|isComposing
name|bool
name|MyInputPanelContext
operator|::
name|isComposing
parameter_list|()
specifier|const
block|{
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|language
name|QString
name|MyInputPanelContext
operator|::
name|language
parameter_list|()
block|{
return|return
literal|"en_US"
return|;
block|}
end_function
begin_comment
comment|//! [2]
end_comment
begin_function
DECL|function|sendCharacter
name|void
name|MyInputPanelContext
operator|::
name|sendCharacter
parameter_list|(
name|QChar
name|character
parameter_list|)
block|{
name|QPointer
argument_list|<
name|QWidget
argument_list|>
name|w
init|=
name|focusWidget
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|w
condition|)
return|return;
name|QKeyEvent
name|keyPress
argument_list|(
name|QEvent
operator|::
name|KeyPress
argument_list|,
name|character
operator|.
name|unicode
argument_list|()
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|,
name|QString
argument_list|(
name|character
argument_list|)
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|w
argument_list|,
operator|&
name|keyPress
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|w
condition|)
return|return;
name|QKeyEvent
name|keyRelease
argument_list|(
name|QEvent
operator|::
name|KeyPress
argument_list|,
name|character
operator|.
name|unicode
argument_list|()
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|,
name|QString
argument_list|()
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|w
argument_list|,
operator|&
name|keyRelease
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [2]
end_comment
begin_comment
comment|//! [3]
end_comment
begin_function
DECL|function|updatePosition
name|void
name|MyInputPanelContext
operator|::
name|updatePosition
parameter_list|()
block|{
name|QWidget
modifier|*
name|widget
init|=
name|focusWidget
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|widget
condition|)
return|return;
name|QRect
name|widgetRect
init|=
name|widget
operator|->
name|rect
argument_list|()
decl_stmt|;
name|QPoint
name|panelPos
init|=
name|QPoint
argument_list|(
name|widgetRect
operator|.
name|left
argument_list|()
argument_list|,
name|widgetRect
operator|.
name|bottom
argument_list|()
operator|+
literal|2
argument_list|)
decl_stmt|;
name|panelPos
operator|=
name|widget
operator|->
name|mapToGlobal
argument_list|(
name|panelPos
argument_list|)
expr_stmt|;
name|inputPanel
operator|->
name|move
argument_list|(
name|panelPos
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [3]
end_comment
end_unit
