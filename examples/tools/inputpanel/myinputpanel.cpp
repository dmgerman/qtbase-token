begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor **     the names of its contributors may be used to endorse or promote **     products derived from this software without specific prior written **     permission. ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"myinputpanel.h"
end_include
begin_comment
comment|//! [0]
end_comment
begin_constructor
DECL|function|MyInputPanel
name|MyInputPanel
operator|::
name|MyInputPanel
parameter_list|()
member_init_list|:
name|QWidget
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|Tool
operator||
name|Qt
operator|::
name|WindowStaysOnTopHint
argument_list|)
member_init_list|,
name|lastFocusedWidget
argument_list|(
literal|0
argument_list|)
block|{
name|form
operator|.
name|setupUi
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|qApp
argument_list|,
name|SIGNAL
argument_list|(
name|focusChanged
argument_list|(
name|QWidget
operator|*
argument_list|,
name|QWidget
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|saveFocusWidget
argument_list|(
name|QWidget
operator|*
argument_list|,
name|QWidget
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|signalMapper
operator|.
name|setMapping
argument_list|(
name|form
operator|.
name|panelButton_1
argument_list|,
name|form
operator|.
name|panelButton_1
argument_list|)
expr_stmt|;
name|signalMapper
operator|.
name|setMapping
argument_list|(
name|form
operator|.
name|panelButton_2
argument_list|,
name|form
operator|.
name|panelButton_2
argument_list|)
expr_stmt|;
name|signalMapper
operator|.
name|setMapping
argument_list|(
name|form
operator|.
name|panelButton_3
argument_list|,
name|form
operator|.
name|panelButton_3
argument_list|)
expr_stmt|;
name|signalMapper
operator|.
name|setMapping
argument_list|(
name|form
operator|.
name|panelButton_4
argument_list|,
name|form
operator|.
name|panelButton_4
argument_list|)
expr_stmt|;
name|signalMapper
operator|.
name|setMapping
argument_list|(
name|form
operator|.
name|panelButton_5
argument_list|,
name|form
operator|.
name|panelButton_5
argument_list|)
expr_stmt|;
name|signalMapper
operator|.
name|setMapping
argument_list|(
name|form
operator|.
name|panelButton_6
argument_list|,
name|form
operator|.
name|panelButton_6
argument_list|)
expr_stmt|;
name|signalMapper
operator|.
name|setMapping
argument_list|(
name|form
operator|.
name|panelButton_7
argument_list|,
name|form
operator|.
name|panelButton_7
argument_list|)
expr_stmt|;
name|signalMapper
operator|.
name|setMapping
argument_list|(
name|form
operator|.
name|panelButton_8
argument_list|,
name|form
operator|.
name|panelButton_8
argument_list|)
expr_stmt|;
name|signalMapper
operator|.
name|setMapping
argument_list|(
name|form
operator|.
name|panelButton_9
argument_list|,
name|form
operator|.
name|panelButton_9
argument_list|)
expr_stmt|;
name|signalMapper
operator|.
name|setMapping
argument_list|(
name|form
operator|.
name|panelButton_star
argument_list|,
name|form
operator|.
name|panelButton_star
argument_list|)
expr_stmt|;
name|signalMapper
operator|.
name|setMapping
argument_list|(
name|form
operator|.
name|panelButton_0
argument_list|,
name|form
operator|.
name|panelButton_0
argument_list|)
expr_stmt|;
name|signalMapper
operator|.
name|setMapping
argument_list|(
name|form
operator|.
name|panelButton_hash
argument_list|,
name|form
operator|.
name|panelButton_hash
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|form
operator|.
name|panelButton_1
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
operator|&
name|signalMapper
argument_list|,
name|SLOT
argument_list|(
name|map
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|form
operator|.
name|panelButton_2
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
operator|&
name|signalMapper
argument_list|,
name|SLOT
argument_list|(
name|map
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|form
operator|.
name|panelButton_3
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
operator|&
name|signalMapper
argument_list|,
name|SLOT
argument_list|(
name|map
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|form
operator|.
name|panelButton_4
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
operator|&
name|signalMapper
argument_list|,
name|SLOT
argument_list|(
name|map
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|form
operator|.
name|panelButton_5
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
operator|&
name|signalMapper
argument_list|,
name|SLOT
argument_list|(
name|map
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|form
operator|.
name|panelButton_6
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
operator|&
name|signalMapper
argument_list|,
name|SLOT
argument_list|(
name|map
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|form
operator|.
name|panelButton_7
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
operator|&
name|signalMapper
argument_list|,
name|SLOT
argument_list|(
name|map
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|form
operator|.
name|panelButton_8
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
operator|&
name|signalMapper
argument_list|,
name|SLOT
argument_list|(
name|map
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|form
operator|.
name|panelButton_9
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
operator|&
name|signalMapper
argument_list|,
name|SLOT
argument_list|(
name|map
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|form
operator|.
name|panelButton_star
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
operator|&
name|signalMapper
argument_list|,
name|SLOT
argument_list|(
name|map
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|form
operator|.
name|panelButton_0
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
operator|&
name|signalMapper
argument_list|,
name|SLOT
argument_list|(
name|map
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|form
operator|.
name|panelButton_hash
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
operator|&
name|signalMapper
argument_list|,
name|SLOT
argument_list|(
name|map
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|signalMapper
argument_list|,
name|SIGNAL
argument_list|(
name|mapped
argument_list|(
name|QWidget
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|buttonClicked
argument_list|(
name|QWidget
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|//! [0]
end_comment
begin_function
DECL|function|event
name|bool
name|MyInputPanel
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
switch|switch
condition|(
name|e
operator|->
name|type
argument_list|()
condition|)
block|{
comment|//! [1]
case|case
name|QEvent
operator|::
name|WindowActivate
case|:
if|if
condition|(
name|lastFocusedWidget
condition|)
name|lastFocusedWidget
operator|->
name|activateWindow
argument_list|()
expr_stmt|;
break|break;
comment|//! [1]
default|default:
break|break;
block|}
return|return
name|QWidget
operator|::
name|event
argument_list|(
name|e
argument_list|)
return|;
block|}
end_function
begin_comment
comment|//! [2]
end_comment
begin_function
DECL|function|saveFocusWidget
name|void
name|MyInputPanel
operator|::
name|saveFocusWidget
parameter_list|(
name|QWidget
modifier|*
comment|/*oldFocus*/
parameter_list|,
name|QWidget
modifier|*
name|newFocus
parameter_list|)
block|{
if|if
condition|(
name|newFocus
operator|!=
literal|0
operator|&&
operator|!
name|this
operator|->
name|isAncestorOf
argument_list|(
name|newFocus
argument_list|)
condition|)
block|{
name|lastFocusedWidget
operator|=
name|newFocus
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|//! [2]
end_comment
begin_comment
comment|//! [3]
end_comment
begin_function
DECL|function|buttonClicked
name|void
name|MyInputPanel
operator|::
name|buttonClicked
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
name|QChar
name|chr
init|=
name|qvariant_cast
argument_list|<
name|QChar
argument_list|>
argument_list|(
name|w
operator|->
name|property
argument_list|(
literal|"buttonValue"
argument_list|)
argument_list|)
decl_stmt|;
emit|emit
name|characterGenerated
argument_list|(
name|chr
argument_list|)
emit|;
block|}
end_function
begin_comment
comment|//! [3]
end_comment
end_unit
