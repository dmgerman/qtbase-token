begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor **     the names of its contributors may be used to endorse or promote **     products derived from this software without specific prior written **     permission. ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"textedit.h"
end_include
begin_include
include|#
directive|include
file|<QCompleter>
end_include
begin_include
include|#
directive|include
file|<QKeyEvent>
end_include
begin_include
include|#
directive|include
file|<QAbstractItemView>
end_include
begin_include
include|#
directive|include
file|<QtDebug>
end_include
begin_include
include|#
directive|include
file|<QApplication>
end_include
begin_include
include|#
directive|include
file|<QModelIndex>
end_include
begin_include
include|#
directive|include
file|<QAbstractItemModel>
end_include
begin_include
include|#
directive|include
file|<QScrollBar>
end_include
begin_comment
comment|//! [0]
end_comment
begin_constructor
DECL|function|TextEdit
name|TextEdit
operator|::
name|TextEdit
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QTextEdit
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|c
argument_list|(
literal|0
argument_list|)
block|{
name|setPlainText
argument_list|(
name|tr
argument_list|(
literal|"This TextEdit provides autocompletions for words that have more than"
literal|" 3 characters. You can trigger autocompletion using "
argument_list|)
operator|+
name|QKeySequence
argument_list|(
literal|"Ctrl+E"
argument_list|)
operator|.
name|toString
argument_list|(
name|QKeySequence
operator|::
name|NativeText
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|//! [0]
end_comment
begin_comment
comment|//! [1]
end_comment
begin_destructor
DECL|function|~TextEdit
name|TextEdit
operator|::
name|~
name|TextEdit
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|//! [1]
end_comment
begin_comment
comment|//! [2]
end_comment
begin_function
DECL|function|setCompleter
name|void
name|TextEdit
operator|::
name|setCompleter
parameter_list|(
name|QCompleter
modifier|*
name|completer
parameter_list|)
block|{
if|if
condition|(
name|c
condition|)
name|QObject
operator|::
name|disconnect
argument_list|(
name|c
argument_list|,
literal|0
argument_list|,
name|this
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|c
operator|=
name|completer
expr_stmt|;
if|if
condition|(
operator|!
name|c
condition|)
return|return;
name|c
operator|->
name|setWidget
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|c
operator|->
name|setCompletionMode
argument_list|(
name|QCompleter
operator|::
name|PopupCompletion
argument_list|)
expr_stmt|;
name|c
operator|->
name|setCaseSensitivity
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|c
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|insertCompletion
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [2]
end_comment
begin_comment
comment|//! [3]
end_comment
begin_function
DECL|function|completer
name|QCompleter
modifier|*
name|TextEdit
operator|::
name|completer
parameter_list|()
specifier|const
block|{
return|return
name|c
return|;
block|}
end_function
begin_comment
comment|//! [3]
end_comment
begin_comment
comment|//! [4]
end_comment
begin_function
DECL|function|insertCompletion
name|void
name|TextEdit
operator|::
name|insertCompletion
parameter_list|(
specifier|const
name|QString
modifier|&
name|completion
parameter_list|)
block|{
if|if
condition|(
name|c
operator|->
name|widget
argument_list|()
operator|!=
name|this
condition|)
return|return;
name|QTextCursor
name|tc
init|=
name|textCursor
argument_list|()
decl_stmt|;
name|int
name|extra
init|=
name|completion
operator|.
name|length
argument_list|()
operator|-
name|c
operator|->
name|completionPrefix
argument_list|()
operator|.
name|length
argument_list|()
decl_stmt|;
name|tc
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|Left
argument_list|)
expr_stmt|;
name|tc
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|EndOfWord
argument_list|)
expr_stmt|;
name|tc
operator|.
name|insertText
argument_list|(
name|completion
operator|.
name|right
argument_list|(
name|extra
argument_list|)
argument_list|)
expr_stmt|;
name|setTextCursor
argument_list|(
name|tc
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [4]
end_comment
begin_comment
comment|//! [5]
end_comment
begin_function
DECL|function|textUnderCursor
name|QString
name|TextEdit
operator|::
name|textUnderCursor
parameter_list|()
specifier|const
block|{
name|QTextCursor
name|tc
init|=
name|textCursor
argument_list|()
decl_stmt|;
name|tc
operator|.
name|select
argument_list|(
name|QTextCursor
operator|::
name|WordUnderCursor
argument_list|)
expr_stmt|;
return|return
name|tc
operator|.
name|selectedText
argument_list|()
return|;
block|}
end_function
begin_comment
comment|//! [5]
end_comment
begin_comment
comment|//! [6]
end_comment
begin_function
DECL|function|focusInEvent
name|void
name|TextEdit
operator|::
name|focusInEvent
parameter_list|(
name|QFocusEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
name|c
condition|)
name|c
operator|->
name|setWidget
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|QTextEdit
operator|::
name|focusInEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [6]
end_comment
begin_comment
comment|//! [7]
end_comment
begin_function
DECL|function|keyPressEvent
name|void
name|TextEdit
operator|::
name|keyPressEvent
parameter_list|(
name|QKeyEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
name|c
operator|&&
name|c
operator|->
name|popup
argument_list|()
operator|->
name|isVisible
argument_list|()
condition|)
block|{
comment|// The following keys are forwarded by the completer to the widget
switch|switch
condition|(
name|e
operator|->
name|key
argument_list|()
condition|)
block|{
case|case
name|Qt
operator|::
name|Key_Enter
case|:
case|case
name|Qt
operator|::
name|Key_Return
case|:
case|case
name|Qt
operator|::
name|Key_Escape
case|:
case|case
name|Qt
operator|::
name|Key_Tab
case|:
case|case
name|Qt
operator|::
name|Key_Backtab
case|:
name|e
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return;
comment|// let the completer do default behavior
default|default:
break|break;
block|}
block|}
name|bool
name|isShortcut
init|=
operator|(
operator|(
name|e
operator|->
name|modifiers
argument_list|()
operator|&
name|Qt
operator|::
name|ControlModifier
operator|)
operator|&&
name|e
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_E
operator|)
decl_stmt|;
comment|// CTRL+E
if|if
condition|(
operator|!
name|c
operator|||
operator|!
name|isShortcut
condition|)
comment|// do not process the shortcut when we have a completer
name|QTextEdit
operator|::
name|keyPressEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
comment|//! [7]
comment|//! [8]
specifier|const
name|bool
name|ctrlOrShift
init|=
name|e
operator|->
name|modifiers
argument_list|()
operator|&
operator|(
name|Qt
operator|::
name|ControlModifier
operator||
name|Qt
operator|::
name|ShiftModifier
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|c
operator|||
operator|(
name|ctrlOrShift
operator|&&
name|e
operator|->
name|text
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
return|return;
specifier|static
name|QString
name|eow
argument_list|(
literal|"~!@#$%^&*()_+{}|:\"<>?,./;'[]\\-="
argument_list|)
decl_stmt|;
comment|// end of word
name|bool
name|hasModifier
init|=
operator|(
name|e
operator|->
name|modifiers
argument_list|()
operator|!=
name|Qt
operator|::
name|NoModifier
operator|)
operator|&&
operator|!
name|ctrlOrShift
decl_stmt|;
name|QString
name|completionPrefix
init|=
name|textUnderCursor
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|isShortcut
operator|&&
operator|(
name|hasModifier
operator|||
name|e
operator|->
name|text
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
name|completionPrefix
operator|.
name|length
argument_list|()
operator|<
literal|3
operator|||
name|eow
operator|.
name|contains
argument_list|(
name|e
operator|->
name|text
argument_list|()
operator|.
name|right
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|)
condition|)
block|{
name|c
operator|->
name|popup
argument_list|()
operator|->
name|hide
argument_list|()
expr_stmt|;
return|return;
block|}
if|if
condition|(
name|completionPrefix
operator|!=
name|c
operator|->
name|completionPrefix
argument_list|()
condition|)
block|{
name|c
operator|->
name|setCompletionPrefix
argument_list|(
name|completionPrefix
argument_list|)
expr_stmt|;
name|c
operator|->
name|popup
argument_list|()
operator|->
name|setCurrentIndex
argument_list|(
name|c
operator|->
name|completionModel
argument_list|()
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QRect
name|cr
init|=
name|cursorRect
argument_list|()
decl_stmt|;
name|cr
operator|.
name|setWidth
argument_list|(
name|c
operator|->
name|popup
argument_list|()
operator|->
name|sizeHintForColumn
argument_list|(
literal|0
argument_list|)
operator|+
name|c
operator|->
name|popup
argument_list|()
operator|->
name|verticalScrollBar
argument_list|()
operator|->
name|sizeHint
argument_list|()
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|->
name|complete
argument_list|(
name|cr
argument_list|)
expr_stmt|;
comment|// popup it up!
block|}
end_function
begin_comment
comment|//! [8]
end_comment
end_unit
