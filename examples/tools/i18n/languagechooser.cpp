begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor **     the names of its contributors may be used to endorse or promote **     products derived from this software without specific prior written **     permission. ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtWidgets>
end_include
begin_include
include|#
directive|include
file|"languagechooser.h"
end_include
begin_include
include|#
directive|include
file|"mainwindow.h"
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_MAC
end_ifdef
begin_function_decl
name|QT_BEGIN_NAMESPACE
specifier|extern
name|void
name|qt_mac_set_menubar_merge
parameter_list|(
name|bool
name|merge
parameter_list|)
function_decl|;
end_function_decl
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_constructor
DECL|function|LanguageChooser
name|LanguageChooser
operator|::
name|LanguageChooser
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QDialog
argument_list|(
name|parent
argument_list|,
name|Qt
operator|::
name|WindowStaysOnTopHint
argument_list|)
block|{
name|groupBox
operator|=
operator|new
name|QGroupBox
argument_list|(
literal|"Languages"
argument_list|)
expr_stmt|;
name|QGridLayout
modifier|*
name|groupBoxLayout
init|=
operator|new
name|QGridLayout
decl_stmt|;
name|QStringList
name|qmFiles
init|=
name|findQmFiles
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qmFiles
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QCheckBox
modifier|*
name|checkBox
init|=
operator|new
name|QCheckBox
argument_list|(
name|languageName
argument_list|(
name|qmFiles
index|[
name|i
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|qmFileForCheckBoxMap
operator|.
name|insert
argument_list|(
name|checkBox
argument_list|,
name|qmFiles
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|checkBox
argument_list|,
name|SIGNAL
argument_list|(
name|toggled
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|checkBoxToggled
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|groupBoxLayout
operator|->
name|addWidget
argument_list|(
name|checkBox
argument_list|,
name|i
operator|/
literal|2
argument_list|,
name|i
operator|%
literal|2
argument_list|)
expr_stmt|;
block|}
name|groupBox
operator|->
name|setLayout
argument_list|(
name|groupBoxLayout
argument_list|)
expr_stmt|;
name|buttonBox
operator|=
operator|new
name|QDialogButtonBox
expr_stmt|;
name|showAllButton
operator|=
name|buttonBox
operator|->
name|addButton
argument_list|(
literal|"Show All"
argument_list|,
name|QDialogButtonBox
operator|::
name|ActionRole
argument_list|)
expr_stmt|;
name|hideAllButton
operator|=
name|buttonBox
operator|->
name|addButton
argument_list|(
literal|"Hide All"
argument_list|,
name|QDialogButtonBox
operator|::
name|ActionRole
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|showAllButton
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|showAll
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|hideAllButton
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|hideAll
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVBoxLayout
modifier|*
name|mainLayout
init|=
operator|new
name|QVBoxLayout
decl_stmt|;
name|mainLayout
operator|->
name|addWidget
argument_list|(
name|groupBox
argument_list|)
expr_stmt|;
name|mainLayout
operator|->
name|addWidget
argument_list|(
name|buttonBox
argument_list|)
expr_stmt|;
name|setLayout
argument_list|(
name|mainLayout
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_MAC
name|qt_mac_set_menubar_merge
argument_list|(
literal|false
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|setWindowTitle
argument_list|(
literal|"I18N"
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|eventFilter
name|bool
name|LanguageChooser
operator|::
name|eventFilter
parameter_list|(
name|QObject
modifier|*
name|object
parameter_list|,
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|Close
condition|)
block|{
name|MainWindow
modifier|*
name|window
init|=
name|qobject_cast
argument_list|<
name|MainWindow
operator|*
argument_list|>
argument_list|(
name|object
argument_list|)
decl_stmt|;
if|if
condition|(
name|window
condition|)
block|{
name|QCheckBox
modifier|*
name|checkBox
init|=
name|mainWindowForCheckBoxMap
operator|.
name|key
argument_list|(
name|window
argument_list|)
decl_stmt|;
if|if
condition|(
name|checkBox
condition|)
name|checkBox
operator|->
name|setChecked
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|QWidget
operator|::
name|eventFilter
argument_list|(
name|object
argument_list|,
name|event
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|closeEvent
name|void
name|LanguageChooser
operator|::
name|closeEvent
parameter_list|(
name|QCloseEvent
modifier|*
comment|/* event */
parameter_list|)
block|{
name|qApp
operator|->
name|quit
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|checkBoxToggled
name|void
name|LanguageChooser
operator|::
name|checkBoxToggled
parameter_list|()
block|{
name|QCheckBox
modifier|*
name|checkBox
init|=
name|qobject_cast
argument_list|<
name|QCheckBox
operator|*
argument_list|>
argument_list|(
name|sender
argument_list|()
argument_list|)
decl_stmt|;
name|MainWindow
modifier|*
name|window
init|=
name|mainWindowForCheckBoxMap
index|[
name|checkBox
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|window
condition|)
block|{
name|QTranslator
name|translator
decl_stmt|;
name|translator
operator|.
name|load
argument_list|(
name|qmFileForCheckBoxMap
index|[
name|checkBox
index|]
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|installTranslator
argument_list|(
operator|&
name|translator
argument_list|)
expr_stmt|;
name|window
operator|=
operator|new
name|MainWindow
expr_stmt|;
name|window
operator|->
name|setPalette
argument_list|(
name|colorForLanguage
argument_list|(
name|checkBox
operator|->
name|text
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|window
operator|->
name|installEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|mainWindowForCheckBoxMap
operator|.
name|insert
argument_list|(
name|checkBox
argument_list|,
name|window
argument_list|)
expr_stmt|;
block|}
name|window
operator|->
name|setVisible
argument_list|(
name|checkBox
operator|->
name|isChecked
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|showAll
name|void
name|LanguageChooser
operator|::
name|showAll
parameter_list|()
block|{
foreach|foreach
control|(
name|QCheckBox
modifier|*
name|checkBox
decl|,
name|qmFileForCheckBoxMap
operator|.
name|keys
argument_list|()
control|)
name|checkBox
operator|->
name|setChecked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hideAll
name|void
name|LanguageChooser
operator|::
name|hideAll
parameter_list|()
block|{
foreach|foreach
control|(
name|QCheckBox
modifier|*
name|checkBox
decl|,
name|qmFileForCheckBoxMap
operator|.
name|keys
argument_list|()
control|)
name|checkBox
operator|->
name|setChecked
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|findQmFiles
name|QStringList
name|LanguageChooser
operator|::
name|findQmFiles
parameter_list|()
block|{
name|QDir
name|dir
argument_list|(
literal|":/translations"
argument_list|)
decl_stmt|;
name|QStringList
name|fileNames
init|=
name|dir
operator|.
name|entryList
argument_list|(
name|QStringList
argument_list|(
literal|"*.qm"
argument_list|)
argument_list|,
name|QDir
operator|::
name|Files
argument_list|,
name|QDir
operator|::
name|Name
argument_list|)
decl_stmt|;
name|QMutableStringListIterator
name|i
argument_list|(
name|fileNames
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|i
operator|.
name|next
argument_list|()
expr_stmt|;
name|i
operator|.
name|setValue
argument_list|(
name|dir
operator|.
name|filePath
argument_list|(
name|i
operator|.
name|value
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|fileNames
return|;
block|}
end_function
begin_function
DECL|function|languageName
name|QString
name|LanguageChooser
operator|::
name|languageName
parameter_list|(
specifier|const
name|QString
modifier|&
name|qmFile
parameter_list|)
block|{
name|QTranslator
name|translator
decl_stmt|;
name|translator
operator|.
name|load
argument_list|(
name|qmFile
argument_list|)
expr_stmt|;
return|return
name|translator
operator|.
name|translate
argument_list|(
literal|"MainWindow"
argument_list|,
literal|"English"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|colorForLanguage
name|QColor
name|LanguageChooser
operator|::
name|colorForLanguage
parameter_list|(
specifier|const
name|QString
modifier|&
name|language
parameter_list|)
block|{
name|uint
name|hashValue
init|=
name|qHash
argument_list|(
name|language
argument_list|)
decl_stmt|;
name|int
name|red
init|=
literal|156
operator|+
operator|(
name|hashValue
operator|&
literal|0x3F
operator|)
decl_stmt|;
name|int
name|green
init|=
literal|156
operator|+
operator|(
operator|(
name|hashValue
operator|>>
literal|6
operator|)
operator|&
literal|0x3F
operator|)
decl_stmt|;
name|int
name|blue
init|=
literal|156
operator|+
operator|(
operator|(
name|hashValue
operator|>>
literal|12
operator|)
operator|&
literal|0x3F
operator|)
decl_stmt|;
return|return
name|QColor
argument_list|(
name|red
argument_list|,
name|green
argument_list|,
name|blue
argument_list|)
return|;
block|}
end_function
end_unit
