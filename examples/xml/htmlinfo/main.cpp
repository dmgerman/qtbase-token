begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor **     the names of its contributors may be used to endorse or promote **     products derived from this software without specific prior written **     permission. ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore>
end_include
begin_function
DECL|function|parseHtmlFile
name|void
name|parseHtmlFile
parameter_list|(
name|QTextStream
modifier|&
name|out
parameter_list|,
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
block|{
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|out
operator|<<
literal|"Analysis of HTML file: "
operator|<<
name|fileName
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|out
operator|<<
literal|"  Couldn't open the file."
operator|<<
name|endl
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
return|return;
block|}
comment|//! [0]
name|QXmlStreamReader
name|reader
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
comment|//! [0]
comment|//! [1]
name|int
name|paragraphCount
init|=
literal|0
decl_stmt|;
name|QStringList
name|links
decl_stmt|;
name|QString
name|title
decl_stmt|;
while|while
condition|(
operator|!
name|reader
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|reader
operator|.
name|readNext
argument_list|()
expr_stmt|;
if|if
condition|(
name|reader
operator|.
name|isStartElement
argument_list|()
condition|)
block|{
if|if
condition|(
name|reader
operator|.
name|name
argument_list|()
operator|==
literal|"title"
condition|)
name|title
operator|=
name|reader
operator|.
name|readElementText
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|reader
operator|.
name|name
argument_list|()
operator|==
literal|"a"
condition|)
name|links
operator|.
name|append
argument_list|(
name|reader
operator|.
name|attributes
argument_list|()
operator|.
name|value
argument_list|(
literal|"href"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|reader
operator|.
name|name
argument_list|()
operator|==
literal|"p"
condition|)
operator|++
name|paragraphCount
expr_stmt|;
block|}
block|}
comment|//! [1]
comment|//! [2]
if|if
condition|(
name|reader
operator|.
name|hasError
argument_list|()
condition|)
block|{
name|out
operator|<<
literal|"  The HTML file isn't well-formed: "
operator|<<
name|reader
operator|.
name|errorString
argument_list|()
operator|<<
name|endl
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
return|return;
block|}
comment|//! [2]
name|out
operator|<<
literal|"  Title: \""
operator|<<
name|title
operator|<<
literal|"\""
operator|<<
name|endl
operator|<<
literal|"  Number of paragraphs: "
operator|<<
name|paragraphCount
operator|<<
name|endl
operator|<<
literal|"  Number of links: "
operator|<<
name|links
operator|.
name|size
argument_list|()
operator|<<
name|endl
operator|<<
literal|"  Showing first few links:"
operator|<<
name|endl
expr_stmt|;
while|while
condition|(
name|links
operator|.
name|size
argument_list|()
operator|>
literal|5
condition|)
name|links
operator|.
name|removeLast
argument_list|()
expr_stmt|;
foreach|foreach
control|(
name|QString
name|link
decl|,
name|links
control|)
name|out
operator|<<
literal|"    "
operator|<<
name|link
operator|<<
name|endl
expr_stmt|;
name|out
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
end_function
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
modifier|*
name|argv
parameter_list|)
block|{
comment|// initialize QtCore application
name|QCoreApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
comment|// get a list of all html files in the current directory
name|QStringList
name|filter
decl_stmt|;
name|filter
operator|<<
literal|"*.htm"
expr_stmt|;
name|filter
operator|<<
literal|"*.html"
expr_stmt|;
name|QStringList
name|htmlFiles
init|=
name|QDir
operator|::
name|current
argument_list|()
operator|.
name|entryList
argument_list|(
name|filter
argument_list|,
name|QDir
operator|::
name|Files
argument_list|)
decl_stmt|;
name|QTextStream
name|out
argument_list|(
name|stdout
argument_list|)
decl_stmt|;
if|if
condition|(
name|htmlFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|out
operator|<<
literal|"No html files available."
expr_stmt|;
return|return
literal|1
return|;
block|}
comment|// parse each html file and write the result to file/stream
foreach|foreach
control|(
name|QString
name|file
decl|,
name|htmlFiles
control|)
name|parseHtmlFile
argument_list|(
name|out
argument_list|,
name|file
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
end_unit
