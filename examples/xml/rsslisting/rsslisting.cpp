begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor **     the names of its contributors may be used to endorse or promote **     products derived from this software without specific prior written **     permission. ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|/* rsslisting.cpp  Provides a widget for displaying news items from RDF news sources. RDF is an XML-based format for storing items of information (see http://www.w3.org/RDF/ for details).  The widget itself provides a simple user interface for specifying the URL of a news source, and controlling the downloading of news.  The widget downloads and parses the XML asynchronously, feeding the data to an XML reader in pieces. This allows the user to interrupt its operation, and also allows very large data sources to be read. */
end_comment
begin_include
include|#
directive|include
file|<QtCore>
end_include
begin_include
include|#
directive|include
file|<QtWidgets>
end_include
begin_include
include|#
directive|include
file|<QtNetwork>
end_include
begin_include
include|#
directive|include
file|"rsslisting.h"
end_include
begin_comment
comment|/*     Constructs an RSSListing widget with a simple user interface, and sets     up the XML reader to use a custom handler class.      The user interface consists of a line edit, a push button, and a     list view widget. The line edit is used for entering the URLs of news     sources; the push button starts the process of reading the     news. */
end_comment
begin_constructor
DECL|function|RSSListing
name|RSSListing
operator|::
name|RSSListing
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|currentReply
argument_list|(
literal|0
argument_list|)
block|{
name|lineEdit
operator|=
operator|new
name|QLineEdit
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|lineEdit
operator|->
name|setText
argument_list|(
literal|"http://labs.qt.nokia.com/blogs/feed"
argument_list|)
expr_stmt|;
name|fetchButton
operator|=
operator|new
name|QPushButton
argument_list|(
name|tr
argument_list|(
literal|"Fetch"
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|treeWidget
operator|=
operator|new
name|QTreeWidget
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|treeWidget
argument_list|,
name|SIGNAL
argument_list|(
name|itemActivated
argument_list|(
name|QTreeWidgetItem
operator|*
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|itemActivated
argument_list|(
name|QTreeWidgetItem
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QStringList
name|headerLabels
decl_stmt|;
name|headerLabels
operator|<<
name|tr
argument_list|(
literal|"Title"
argument_list|)
operator|<<
name|tr
argument_list|(
literal|"Link"
argument_list|)
expr_stmt|;
name|treeWidget
operator|->
name|setHeaderLabels
argument_list|(
name|headerLabels
argument_list|)
expr_stmt|;
name|treeWidget
operator|->
name|header
argument_list|()
operator|->
name|setResizeMode
argument_list|(
name|QHeaderView
operator|::
name|ResizeToContents
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|manager
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|(
name|QNetworkReply
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|finished
argument_list|(
name|QNetworkReply
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|lineEdit
argument_list|,
name|SIGNAL
argument_list|(
name|returnPressed
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|fetch
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|fetchButton
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|fetch
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVBoxLayout
modifier|*
name|layout
init|=
operator|new
name|QVBoxLayout
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QHBoxLayout
modifier|*
name|hboxLayout
init|=
operator|new
name|QHBoxLayout
decl_stmt|;
name|hboxLayout
operator|->
name|addWidget
argument_list|(
name|lineEdit
argument_list|)
expr_stmt|;
name|hboxLayout
operator|->
name|addWidget
argument_list|(
name|fetchButton
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addLayout
argument_list|(
name|hboxLayout
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|treeWidget
argument_list|)
expr_stmt|;
name|setWindowTitle
argument_list|(
name|tr
argument_list|(
literal|"RSS listing example"
argument_list|)
argument_list|)
expr_stmt|;
name|resize
argument_list|(
literal|640
argument_list|,
literal|480
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|/*     Starts the network request and connects the needed signals */
end_comment
begin_function
DECL|function|get
name|void
name|RSSListing
operator|::
name|get
parameter_list|(
specifier|const
name|QUrl
modifier|&
name|url
parameter_list|)
block|{
name|QNetworkRequest
name|request
argument_list|(
name|url
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentReply
condition|)
block|{
name|currentReply
operator|->
name|disconnect
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|currentReply
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
block|}
name|currentReply
operator|=
name|manager
operator|.
name|get
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|currentReply
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|currentReply
argument_list|,
name|SIGNAL
argument_list|(
name|metaDataChanged
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|metaDataChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|currentReply
argument_list|,
name|SIGNAL
argument_list|(
name|error
argument_list|(
name|QNetworkReply
operator|::
name|NetworkError
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|error
argument_list|(
name|QNetworkReply
operator|::
name|NetworkError
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     Starts fetching data from a news source specified in the line     edit widget.      The line edit is made read only to prevent the user from modifying its     contents during the fetch; this is only for cosmetic purposes.     The fetch button is disabled, the list view is cleared, and we     define the last list view item to be 0, meaning that there are no     existing items in the list.      A URL is created with the raw contents of the line edit and     a get is initiated. */
end_comment
begin_function
DECL|function|fetch
name|void
name|RSSListing
operator|::
name|fetch
parameter_list|()
block|{
name|lineEdit
operator|->
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|fetchButton
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|treeWidget
operator|->
name|clear
argument_list|()
expr_stmt|;
name|xml
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QUrl
name|url
argument_list|(
name|lineEdit
operator|->
name|text
argument_list|()
argument_list|)
decl_stmt|;
name|get
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|metaDataChanged
name|void
name|RSSListing
operator|::
name|metaDataChanged
parameter_list|()
block|{
name|QUrl
name|redirectionTarget
init|=
name|currentReply
operator|->
name|attribute
argument_list|(
name|QNetworkRequest
operator|::
name|RedirectionTargetAttribute
argument_list|)
operator|.
name|toUrl
argument_list|()
decl_stmt|;
if|if
condition|(
name|redirectionTarget
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|get
argument_list|(
name|redirectionTarget
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*     Reads data received from the RDF source.      We read all the available data, and pass it to the XML     stream reader. Then we call the XML parsing function. */
end_comment
begin_function
DECL|function|readyRead
name|void
name|RSSListing
operator|::
name|readyRead
parameter_list|()
block|{
name|int
name|statusCode
init|=
name|currentReply
operator|->
name|attribute
argument_list|(
name|QNetworkRequest
operator|::
name|HttpStatusCodeAttribute
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|statusCode
operator|>=
literal|200
operator|&&
name|statusCode
operator|<
literal|300
condition|)
block|{
name|QByteArray
name|data
init|=
name|currentReply
operator|->
name|readAll
argument_list|()
decl_stmt|;
name|xml
operator|.
name|addData
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|parseXml
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*     Finishes processing an HTTP request.      The default behavior is to keep the text edit read only.      If an error has occurred, the user interface is made available     to the user for further input, allowing a new fetch to be     started.      If the HTTP get request has finished, we make the     user interface available to the user for further input. */
end_comment
begin_function
DECL|function|finished
name|void
name|RSSListing
operator|::
name|finished
parameter_list|(
name|QNetworkReply
modifier|*
name|reply
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|reply
argument_list|)
expr_stmt|;
name|lineEdit
operator|->
name|setReadOnly
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|fetchButton
operator|->
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     Parses the XML data and creates treeWidget items accordingly. */
end_comment
begin_function
DECL|function|parseXml
name|void
name|RSSListing
operator|::
name|parseXml
parameter_list|()
block|{
while|while
condition|(
operator|!
name|xml
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|xml
operator|.
name|readNext
argument_list|()
expr_stmt|;
if|if
condition|(
name|xml
operator|.
name|isStartElement
argument_list|()
condition|)
block|{
if|if
condition|(
name|xml
operator|.
name|name
argument_list|()
operator|==
literal|"item"
condition|)
name|linkString
operator|=
name|xml
operator|.
name|attributes
argument_list|()
operator|.
name|value
argument_list|(
literal|"rss:about"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|currentTag
operator|=
name|xml
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|xml
operator|.
name|isEndElement
argument_list|()
condition|)
block|{
if|if
condition|(
name|xml
operator|.
name|name
argument_list|()
operator|==
literal|"item"
condition|)
block|{
name|QTreeWidgetItem
modifier|*
name|item
init|=
operator|new
name|QTreeWidgetItem
decl_stmt|;
name|item
operator|->
name|setText
argument_list|(
literal|0
argument_list|,
name|titleString
argument_list|)
expr_stmt|;
name|item
operator|->
name|setText
argument_list|(
literal|1
argument_list|,
name|linkString
argument_list|)
expr_stmt|;
name|treeWidget
operator|->
name|addTopLevelItem
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|titleString
operator|.
name|clear
argument_list|()
expr_stmt|;
name|linkString
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|xml
operator|.
name|isCharacters
argument_list|()
operator|&&
operator|!
name|xml
operator|.
name|isWhitespace
argument_list|()
condition|)
block|{
if|if
condition|(
name|currentTag
operator|==
literal|"title"
condition|)
name|titleString
operator|+=
name|xml
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|currentTag
operator|==
literal|"link"
condition|)
name|linkString
operator|+=
name|xml
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|xml
operator|.
name|error
argument_list|()
operator|&&
name|xml
operator|.
name|error
argument_list|()
operator|!=
name|QXmlStreamReader
operator|::
name|PrematureEndOfDocumentError
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"XML ERROR:"
operator|<<
name|xml
operator|.
name|lineNumber
argument_list|()
operator|<<
literal|": "
operator|<<
name|xml
operator|.
name|errorString
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*     Open the link in the browser */
end_comment
begin_function
DECL|function|itemActivated
name|void
name|RSSListing
operator|::
name|itemActivated
parameter_list|(
name|QTreeWidgetItem
modifier|*
name|item
parameter_list|)
block|{
name|QDesktopServices
operator|::
name|openUrl
argument_list|(
name|QUrl
argument_list|(
name|item
operator|->
name|text
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|error
name|void
name|RSSListing
operator|::
name|error
parameter_list|(
name|QNetworkReply
operator|::
name|NetworkError
parameter_list|)
block|{
name|qWarning
argument_list|(
literal|"error retrieving RSS feed"
argument_list|)
expr_stmt|;
name|currentReply
operator|->
name|disconnect
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|currentReply
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
name|currentReply
operator|=
literal|0
expr_stmt|;
block|}
end_function
end_unit
