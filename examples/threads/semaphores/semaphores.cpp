begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: http://www.qt-project.org/ ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor **     the names of its contributors may be used to endorse or promote **     products derived from this software without specific prior written **     permission. ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtGui>
end_include
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_comment
comment|//! [0]
end_comment
begin_decl_stmt
DECL|variable|DataSize
specifier|const
name|int
name|DataSize
init|=
literal|100000
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|BufferSize
specifier|const
name|int
name|BufferSize
init|=
literal|8192
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|buffer
name|char
name|buffer
index|[
name|BufferSize
index|]
decl_stmt|;
end_decl_stmt
begin_function_decl
name|QSemaphore
name|freeBytes
parameter_list|(
name|BufferSize
parameter_list|)
function_decl|;
end_function_decl
begin_decl_stmt
DECL|variable|usedBytes
name|QSemaphore
name|usedBytes
decl_stmt|;
end_decl_stmt
begin_comment
comment|//! [0]
end_comment
begin_comment
comment|//! [1]
end_comment
begin_class
DECL|class|Producer
class|class
name|Producer
super|:
specifier|public
name|QThread
comment|//! [1] //! [2]
block|{
public|public:
DECL|function|run
name|void
name|run
parameter_list|()
block|{
name|qsrand
argument_list|(
name|QTime
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|secsTo
argument_list|(
name|QTime
operator|::
name|currentTime
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DataSize
condition|;
operator|++
name|i
control|)
block|{
name|freeBytes
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|buffer
index|[
name|i
operator|%
name|BufferSize
index|]
operator|=
literal|"ACGT"
index|[
operator|(
name|int
operator|)
name|qrand
argument_list|()
operator|%
literal|4
index|]
expr_stmt|;
name|usedBytes
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
block|}
class|;
end_class
begin_comment
comment|//! [2]
end_comment
begin_comment
comment|//! [3]
end_comment
begin_class
DECL|class|Consumer
class|class
name|Consumer
super|:
specifier|public
name|QThread
comment|//! [3] //! [4]
block|{
name|Q_OBJECT
public|public:
DECL|function|run
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|DataSize
condition|;
operator|++
name|i
control|)
block|{
name|usedBytes
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"%c"
argument_list|,
name|buffer
index|[
name|i
operator|%
name|BufferSize
index|]
argument_list|)
expr_stmt|;
name|freeBytes
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
block|}
signals|signals:
name|void
name|stringConsumed
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
function_decl|;
protected|protected:
DECL|member|finish
name|bool
name|finish
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|//! [4]
end_comment
begin_comment
comment|//! [5]
end_comment
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
name|argv
index|[]
parameter_list|)
comment|//! [5] //! [6]
block|{
name|QCoreApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|Producer
name|producer
decl_stmt|;
name|Consumer
name|consumer
decl_stmt|;
name|producer
operator|.
name|start
argument_list|()
expr_stmt|;
name|consumer
operator|.
name|start
argument_list|()
expr_stmt|;
name|producer
operator|.
name|wait
argument_list|()
expr_stmt|;
name|consumer
operator|.
name|wait
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|//! [6]
end_comment
begin_include
include|#
directive|include
file|"semaphores.moc"
end_include
end_unit
