begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor **     the names of its contributors may be used to endorse or promote **     products derived from this software without specific prior written **     permission. ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QApplication>
end_include
begin_include
include|#
directive|include
file|<QPainter>
end_include
begin_include
include|#
directive|include
file|<QTime>
end_include
begin_include
include|#
directive|include
file|"block.h"
end_include
begin_include
include|#
directive|include
file|"window.h"
end_include
begin_function
DECL|function|createImage
name|QImage
name|createImage
parameter_list|(
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
block|{
name|QImage
name|image
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|QImage
operator|::
name|Format_RGB16
argument_list|)
decl_stmt|;
name|QPainter
name|painter
decl_stmt|;
name|QPen
name|pen
decl_stmt|;
name|pen
operator|.
name|setStyle
argument_list|(
name|Qt
operator|::
name|NoPen
argument_list|)
expr_stmt|;
name|QBrush
name|brush
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
decl_stmt|;
name|painter
operator|.
name|begin
argument_list|(
operator|&
name|image
argument_list|)
expr_stmt|;
name|painter
operator|.
name|fillRect
argument_list|(
name|image
operator|.
name|rect
argument_list|()
argument_list|,
name|brush
argument_list|)
expr_stmt|;
name|brush
operator|.
name|setColor
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|painter
operator|.
name|setPen
argument_list|(
name|pen
argument_list|)
expr_stmt|;
name|painter
operator|.
name|setBrush
argument_list|(
name|brush
argument_list|)
expr_stmt|;
specifier|static
specifier|const
name|QPointF
name|points1
index|[
literal|3
index|]
init|=
block|{
name|QPointF
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
block|,
name|QPointF
argument_list|(
literal|7
argument_list|,
literal|4
argument_list|)
block|,
name|QPointF
argument_list|(
literal|5.5
argument_list|,
literal|1
argument_list|)
block|}
decl_stmt|;
specifier|static
specifier|const
name|QPointF
name|points2
index|[
literal|3
index|]
init|=
block|{
name|QPointF
argument_list|(
literal|1
argument_list|,
literal|4
argument_list|)
block|,
name|QPointF
argument_list|(
literal|7
argument_list|,
literal|4
argument_list|)
block|,
name|QPointF
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
block|}
decl_stmt|;
specifier|static
specifier|const
name|QPointF
name|points3
index|[
literal|3
index|]
init|=
block|{
name|QPointF
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
block|,
name|QPointF
argument_list|(
literal|10
argument_list|,
literal|4
argument_list|)
block|,
name|QPointF
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
block|}
decl_stmt|;
name|painter
operator|.
name|setWindow
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|int
name|x
init|=
literal|0
decl_stmt|;
name|int
name|y
init|=
literal|0
decl_stmt|;
name|int
name|starWidth
init|=
name|image
operator|.
name|width
argument_list|()
operator|/
literal|3
decl_stmt|;
name|int
name|starHeight
init|=
name|image
operator|.
name|height
argument_list|()
operator|/
literal|3
decl_stmt|;
name|QRect
name|rect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|starWidth
argument_list|,
name|starHeight
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|9
condition|;
operator|++
name|i
control|)
block|{
name|painter
operator|.
name|setViewport
argument_list|(
name|rect
argument_list|)
expr_stmt|;
name|painter
operator|.
name|drawPolygon
argument_list|(
name|points1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|painter
operator|.
name|drawPolygon
argument_list|(
name|points2
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|painter
operator|.
name|drawPolygon
argument_list|(
name|points3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|3
operator|==
literal|2
condition|)
block|{
name|y
operator|=
name|y
operator|+
name|starHeight
expr_stmt|;
name|rect
operator|.
name|moveTop
argument_list|(
name|y
argument_list|)
expr_stmt|;
name|x
operator|=
literal|0
expr_stmt|;
name|rect
operator|.
name|moveLeft
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|x
operator|=
name|x
operator|+
name|starWidth
expr_stmt|;
name|rect
operator|.
name|moveLeft
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
block|}
name|painter
operator|.
name|end
argument_list|()
expr_stmt|;
return|return
name|image
return|;
block|}
end_function
begin_comment
comment|//! [main function] //! [main start]
end_comment
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
name|argv
index|[]
parameter_list|)
block|{
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
comment|//! [main start] //! [register meta-type for queued communications]
name|qRegisterMetaType
argument_list|<
name|Block
argument_list|>
argument_list|()
expr_stmt|;
comment|//! [register meta-type for queued communications]
name|qsrand
argument_list|(
name|QTime
operator|::
name|currentTime
argument_list|()
operator|.
name|elapsed
argument_list|()
argument_list|)
expr_stmt|;
name|Window
name|window
decl_stmt|;
name|window
operator|.
name|show
argument_list|()
expr_stmt|;
name|window
operator|.
name|loadImage
argument_list|(
name|createImage
argument_list|(
literal|256
argument_list|,
literal|256
argument_list|)
argument_list|)
expr_stmt|;
comment|//! [main finish]
return|return
name|app
operator|.
name|exec
argument_list|()
return|;
block|}
end_function
begin_comment
comment|//! [main finish] //! [main function]
end_comment
end_unit
