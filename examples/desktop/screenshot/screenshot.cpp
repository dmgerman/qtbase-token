begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: http://www.qt-project.org/ ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor **     the names of its contributors may be used to endorse or promote **     products derived from this software without specific prior written **     permission. ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtWidgets>
end_include
begin_include
include|#
directive|include
file|"screenshot.h"
end_include
begin_comment
comment|//! [0]
end_comment
begin_constructor
DECL|function|Screenshot
name|Screenshot
operator|::
name|Screenshot
parameter_list|()
block|{
name|screenshotLabel
operator|=
operator|new
name|QLabel
expr_stmt|;
name|screenshotLabel
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Expanding
argument_list|,
name|QSizePolicy
operator|::
name|Expanding
argument_list|)
expr_stmt|;
name|screenshotLabel
operator|->
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignCenter
argument_list|)
expr_stmt|;
name|screenshotLabel
operator|->
name|setMinimumSize
argument_list|(
literal|240
argument_list|,
literal|160
argument_list|)
expr_stmt|;
name|createOptionsGroupBox
argument_list|()
expr_stmt|;
name|createButtonsLayout
argument_list|()
expr_stmt|;
name|mainLayout
operator|=
operator|new
name|QVBoxLayout
expr_stmt|;
name|mainLayout
operator|->
name|addWidget
argument_list|(
name|screenshotLabel
argument_list|)
expr_stmt|;
name|mainLayout
operator|->
name|addWidget
argument_list|(
name|optionsGroupBox
argument_list|)
expr_stmt|;
name|mainLayout
operator|->
name|addLayout
argument_list|(
name|buttonsLayout
argument_list|)
expr_stmt|;
name|setLayout
argument_list|(
name|mainLayout
argument_list|)
expr_stmt|;
name|shootScreen
argument_list|()
expr_stmt|;
name|delaySpinBox
operator|->
name|setValue
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|setWindowTitle
argument_list|(
name|tr
argument_list|(
literal|"Screenshot"
argument_list|)
argument_list|)
expr_stmt|;
name|resize
argument_list|(
literal|300
argument_list|,
literal|200
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|//! [0]
end_comment
begin_comment
comment|//! [1]
end_comment
begin_function
DECL|function|resizeEvent
name|void
name|Screenshot
operator|::
name|resizeEvent
parameter_list|(
name|QResizeEvent
modifier|*
comment|/* event */
parameter_list|)
block|{
name|QSize
name|scaledSize
init|=
name|originalPixmap
operator|.
name|size
argument_list|()
decl_stmt|;
name|scaledSize
operator|.
name|scale
argument_list|(
name|screenshotLabel
operator|->
name|size
argument_list|()
argument_list|,
name|Qt
operator|::
name|KeepAspectRatio
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|screenshotLabel
operator|->
name|pixmap
argument_list|()
operator|||
name|scaledSize
operator|!=
name|screenshotLabel
operator|->
name|pixmap
argument_list|()
operator|->
name|size
argument_list|()
condition|)
name|updateScreenshotLabel
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [1]
end_comment
begin_comment
comment|//! [2]
end_comment
begin_function
DECL|function|newScreenshot
name|void
name|Screenshot
operator|::
name|newScreenshot
parameter_list|()
block|{
if|if
condition|(
name|hideThisWindowCheckBox
operator|->
name|isChecked
argument_list|()
condition|)
name|hide
argument_list|()
expr_stmt|;
name|newScreenshotButton
operator|->
name|setDisabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
name|delaySpinBox
operator|->
name|value
argument_list|()
operator|*
literal|1000
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|shootScreen
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [2]
end_comment
begin_comment
comment|//! [3]
end_comment
begin_function
DECL|function|saveScreenshot
name|void
name|Screenshot
operator|::
name|saveScreenshot
parameter_list|()
block|{
name|QString
name|format
init|=
literal|"png"
decl_stmt|;
name|QString
name|initialPath
init|=
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
name|tr
argument_list|(
literal|"/untitled."
argument_list|)
operator|+
name|format
decl_stmt|;
name|QString
name|fileName
init|=
name|QFileDialog
operator|::
name|getSaveFileName
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"Save As"
argument_list|)
argument_list|,
name|initialPath
argument_list|,
name|tr
argument_list|(
literal|"%1 Files (*.%2);;All Files (*)"
argument_list|)
operator|.
name|arg
argument_list|(
name|format
operator|.
name|toUpper
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|format
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fileName
operator|.
name|isEmpty
argument_list|()
condition|)
name|originalPixmap
operator|.
name|save
argument_list|(
name|fileName
argument_list|,
name|format
operator|.
name|toAscii
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [3]
end_comment
begin_comment
comment|//! [4]
end_comment
begin_function
DECL|function|shootScreen
name|void
name|Screenshot
operator|::
name|shootScreen
parameter_list|()
block|{
if|if
condition|(
name|delaySpinBox
operator|->
name|value
argument_list|()
operator|!=
literal|0
condition|)
name|qApp
operator|->
name|beep
argument_list|()
expr_stmt|;
comment|//! [4]
name|originalPixmap
operator|=
name|QPixmap
argument_list|()
expr_stmt|;
comment|// clear image for low memory situations
comment|// on embedded devices.
comment|//! [5]
name|originalPixmap
operator|=
name|QPixmap
operator|::
name|grabWindow
argument_list|(
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|winId
argument_list|()
argument_list|)
expr_stmt|;
name|updateScreenshotLabel
argument_list|()
expr_stmt|;
name|newScreenshotButton
operator|->
name|setDisabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|hideThisWindowCheckBox
operator|->
name|isChecked
argument_list|()
condition|)
name|show
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [5]
end_comment
begin_comment
comment|//! [6]
end_comment
begin_function
DECL|function|updateCheckBox
name|void
name|Screenshot
operator|::
name|updateCheckBox
parameter_list|()
block|{
if|if
condition|(
name|delaySpinBox
operator|->
name|value
argument_list|()
operator|==
literal|0
condition|)
block|{
name|hideThisWindowCheckBox
operator|->
name|setDisabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|hideThisWindowCheckBox
operator|->
name|setChecked
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
name|hideThisWindowCheckBox
operator|->
name|setDisabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [6]
end_comment
begin_comment
comment|//! [7]
end_comment
begin_function
DECL|function|createOptionsGroupBox
name|void
name|Screenshot
operator|::
name|createOptionsGroupBox
parameter_list|()
block|{
name|optionsGroupBox
operator|=
operator|new
name|QGroupBox
argument_list|(
name|tr
argument_list|(
literal|"Options"
argument_list|)
argument_list|)
expr_stmt|;
name|delaySpinBox
operator|=
operator|new
name|QSpinBox
expr_stmt|;
name|delaySpinBox
operator|->
name|setSuffix
argument_list|(
name|tr
argument_list|(
literal|" s"
argument_list|)
argument_list|)
expr_stmt|;
name|delaySpinBox
operator|->
name|setMaximum
argument_list|(
literal|60
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|delaySpinBox
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|updateCheckBox
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|delaySpinBoxLabel
operator|=
operator|new
name|QLabel
argument_list|(
name|tr
argument_list|(
literal|"Screenshot Delay:"
argument_list|)
argument_list|)
expr_stmt|;
name|hideThisWindowCheckBox
operator|=
operator|new
name|QCheckBox
argument_list|(
name|tr
argument_list|(
literal|"Hide This Window"
argument_list|)
argument_list|)
expr_stmt|;
name|optionsGroupBoxLayout
operator|=
operator|new
name|QGridLayout
expr_stmt|;
name|optionsGroupBoxLayout
operator|->
name|addWidget
argument_list|(
name|delaySpinBoxLabel
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|optionsGroupBoxLayout
operator|->
name|addWidget
argument_list|(
name|delaySpinBox
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|optionsGroupBoxLayout
operator|->
name|addWidget
argument_list|(
name|hideThisWindowCheckBox
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|optionsGroupBox
operator|->
name|setLayout
argument_list|(
name|optionsGroupBoxLayout
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [7]
end_comment
begin_comment
comment|//! [8]
end_comment
begin_function
DECL|function|createButtonsLayout
name|void
name|Screenshot
operator|::
name|createButtonsLayout
parameter_list|()
block|{
name|newScreenshotButton
operator|=
name|createButton
argument_list|(
name|tr
argument_list|(
literal|"New Screenshot"
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|newScreenshot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|saveScreenshotButton
operator|=
name|createButton
argument_list|(
name|tr
argument_list|(
literal|"Save Screenshot"
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|saveScreenshot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|quitScreenshotButton
operator|=
name|createButton
argument_list|(
name|tr
argument_list|(
literal|"Quit"
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|close
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|buttonsLayout
operator|=
operator|new
name|QHBoxLayout
expr_stmt|;
name|buttonsLayout
operator|->
name|addStretch
argument_list|()
expr_stmt|;
name|buttonsLayout
operator|->
name|addWidget
argument_list|(
name|newScreenshotButton
argument_list|)
expr_stmt|;
name|buttonsLayout
operator|->
name|addWidget
argument_list|(
name|saveScreenshotButton
argument_list|)
expr_stmt|;
name|buttonsLayout
operator|->
name|addWidget
argument_list|(
name|quitScreenshotButton
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [8]
end_comment
begin_comment
comment|//! [9]
end_comment
begin_function
DECL|function|createButton
name|QPushButton
modifier|*
name|Screenshot
operator|::
name|createButton
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|QWidget
modifier|*
name|receiver
parameter_list|,
specifier|const
name|char
modifier|*
name|member
parameter_list|)
block|{
name|QPushButton
modifier|*
name|button
init|=
operator|new
name|QPushButton
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|button
operator|->
name|connect
argument_list|(
name|button
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|receiver
argument_list|,
name|member
argument_list|)
expr_stmt|;
return|return
name|button
return|;
block|}
end_function
begin_comment
comment|//! [9]
end_comment
begin_comment
comment|//! [10]
end_comment
begin_function
DECL|function|updateScreenshotLabel
name|void
name|Screenshot
operator|::
name|updateScreenshotLabel
parameter_list|()
block|{
name|screenshotLabel
operator|->
name|setPixmap
argument_list|(
name|originalPixmap
operator|.
name|scaled
argument_list|(
name|screenshotLabel
operator|->
name|size
argument_list|()
argument_list|,
name|Qt
operator|::
name|KeepAspectRatio
argument_list|,
name|Qt
operator|::
name|SmoothTransformation
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [10]
end_comment
end_unit
