begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of The Qt Company Ltd nor the names of its **     contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"glwidget.h"
end_include
begin_include
include|#
directive|include
file|<QMouseEvent>
end_include
begin_include
include|#
directive|include
file|<QOpenGLShaderProgram>
end_include
begin_include
include|#
directive|include
file|<QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<math.h>
end_include
begin_constructor
DECL|function|GLWidget
name|GLWidget
operator|::
name|GLWidget
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QOpenGLWidget
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|m_xRot
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_yRot
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_zRot
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_program
argument_list|(
literal|0
argument_list|)
block|{
name|m_core
operator|=
name|QCoreApplication
operator|::
name|arguments
argument_list|()
operator|.
name|contains
argument_list|(
name|QStringLiteral
argument_list|(
literal|"--coreprofile"
argument_list|)
argument_list|)
expr_stmt|;
comment|// --transparent causes the clear color to be transparent. Therefore, on systems that
comment|// support it, the widget will become transparent apart from the logo.
name|m_transparent
operator|=
name|QCoreApplication
operator|::
name|arguments
argument_list|()
operator|.
name|contains
argument_list|(
name|QStringLiteral
argument_list|(
literal|"--transparent"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_transparent
condition|)
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_TranslucentBackground
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~GLWidget
name|GLWidget
operator|::
name|~
name|GLWidget
parameter_list|()
block|{
name|cleanup
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|minimumSizeHint
name|QSize
name|GLWidget
operator|::
name|minimumSizeHint
parameter_list|()
specifier|const
block|{
return|return
name|QSize
argument_list|(
literal|50
argument_list|,
literal|50
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|sizeHint
name|QSize
name|GLWidget
operator|::
name|sizeHint
parameter_list|()
specifier|const
block|{
return|return
name|QSize
argument_list|(
literal|400
argument_list|,
literal|400
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|qNormalizeAngle
specifier|static
name|void
name|qNormalizeAngle
parameter_list|(
name|int
modifier|&
name|angle
parameter_list|)
block|{
while|while
condition|(
name|angle
operator|<
literal|0
condition|)
name|angle
operator|+=
literal|360
operator|*
literal|16
expr_stmt|;
while|while
condition|(
name|angle
operator|>
literal|360
operator|*
literal|16
condition|)
name|angle
operator|-=
literal|360
operator|*
literal|16
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setXRotation
name|void
name|GLWidget
operator|::
name|setXRotation
parameter_list|(
name|int
name|angle
parameter_list|)
block|{
name|qNormalizeAngle
argument_list|(
name|angle
argument_list|)
expr_stmt|;
if|if
condition|(
name|angle
operator|!=
name|m_xRot
condition|)
block|{
name|m_xRot
operator|=
name|angle
expr_stmt|;
emit|emit
name|xRotationChanged
argument_list|(
name|angle
argument_list|)
emit|;
name|update
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setYRotation
name|void
name|GLWidget
operator|::
name|setYRotation
parameter_list|(
name|int
name|angle
parameter_list|)
block|{
name|qNormalizeAngle
argument_list|(
name|angle
argument_list|)
expr_stmt|;
if|if
condition|(
name|angle
operator|!=
name|m_yRot
condition|)
block|{
name|m_yRot
operator|=
name|angle
expr_stmt|;
emit|emit
name|yRotationChanged
argument_list|(
name|angle
argument_list|)
emit|;
name|update
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setZRotation
name|void
name|GLWidget
operator|::
name|setZRotation
parameter_list|(
name|int
name|angle
parameter_list|)
block|{
name|qNormalizeAngle
argument_list|(
name|angle
argument_list|)
expr_stmt|;
if|if
condition|(
name|angle
operator|!=
name|m_zRot
condition|)
block|{
name|m_zRot
operator|=
name|angle
expr_stmt|;
emit|emit
name|zRotationChanged
argument_list|(
name|angle
argument_list|)
emit|;
name|update
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|GLWidget
operator|::
name|cleanup
parameter_list|()
block|{
name|makeCurrent
argument_list|()
expr_stmt|;
name|m_logoVbo
operator|.
name|destroy
argument_list|()
expr_stmt|;
operator|delete
name|m_program
expr_stmt|;
name|m_program
operator|=
literal|0
expr_stmt|;
name|doneCurrent
argument_list|()
expr_stmt|;
block|}
end_function
begin_decl_stmt
DECL|variable|vertexShaderSourceCore
specifier|static
specifier|const
name|char
modifier|*
name|vertexShaderSourceCore
init|=
literal|"#version 150\n"
literal|"in vec4 vertex;\n"
literal|"in vec3 normal;\n"
literal|"out vec3 vert;\n"
literal|"out vec3 vertNormal;\n"
literal|"uniform mat4 projMatrix;\n"
literal|"uniform mat4 mvMatrix;\n"
literal|"uniform mat3 normalMatrix;\n"
literal|"void main() {\n"
literal|"   vert = vertex.xyz;\n"
literal|"   vertNormal = normalMatrix * normal;\n"
literal|"   gl_Position = projMatrix * mvMatrix * vertex;\n"
literal|"}\n"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|fragmentShaderSourceCore
specifier|static
specifier|const
name|char
modifier|*
name|fragmentShaderSourceCore
init|=
literal|"#version 150\n"
literal|"in highp vec3 vert;\n"
literal|"in highp vec3 vertNormal;\n"
literal|"out highp vec4 fragColor;\n"
literal|"uniform highp vec3 lightPos;\n"
literal|"void main() {\n"
literal|"   highp vec3 L = normalize(lightPos - vert);\n"
literal|"   highp float NL = max(dot(normalize(vertNormal), L), 0.0);\n"
literal|"   highp vec3 color = vec3(0.39, 1.0, 0.0);\n"
literal|"   highp vec3 col = clamp(color * 0.2 + color * 0.8 * NL, 0.0, 1.0);\n"
literal|"   fragColor = vec4(col, 1.0);\n"
literal|"}\n"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|vertexShaderSource
specifier|static
specifier|const
name|char
modifier|*
name|vertexShaderSource
init|=
literal|"attribute vec4 vertex;\n"
literal|"attribute vec3 normal;\n"
literal|"varying vec3 vert;\n"
literal|"varying vec3 vertNormal;\n"
literal|"uniform mat4 projMatrix;\n"
literal|"uniform mat4 mvMatrix;\n"
literal|"uniform mat3 normalMatrix;\n"
literal|"void main() {\n"
literal|"   vert = vertex.xyz;\n"
literal|"   vertNormal = normalMatrix * normal;\n"
literal|"   gl_Position = projMatrix * mvMatrix * vertex;\n"
literal|"}\n"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|fragmentShaderSource
specifier|static
specifier|const
name|char
modifier|*
name|fragmentShaderSource
init|=
literal|"varying highp vec3 vert;\n"
literal|"varying highp vec3 vertNormal;\n"
literal|"uniform highp vec3 lightPos;\n"
literal|"void main() {\n"
literal|"   highp vec3 L = normalize(lightPos - vert);\n"
literal|"   highp float NL = max(dot(normalize(vertNormal), L), 0.0);\n"
literal|"   highp vec3 color = vec3(0.39, 1.0, 0.0);\n"
literal|"   highp vec3 col = clamp(color * 0.2 + color * 0.8 * NL, 0.0, 1.0);\n"
literal|"   gl_FragColor = vec4(col, 1.0);\n"
literal|"}\n"
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|initializeGL
name|void
name|GLWidget
operator|::
name|initializeGL
parameter_list|()
block|{
comment|// In this example the widget's corresponding top-level window can change
comment|// several times during the widget's lifetime. Whenever this happens, the
comment|// QOpenGLWidget's associated context is destroyed and a new one is created.
comment|// Therefore we have to be prepared to clean up the resources on the
comment|// aboutToBeDestroyed() signal, instead of the destructor. The emission of
comment|// the signal will be followed by an invocation of initializeGL() where we
comment|// can recreate all resources.
name|connect
argument_list|(
name|context
argument_list|()
argument_list|,
operator|&
name|QOpenGLContext
operator|::
name|aboutToBeDestroyed
argument_list|,
name|this
argument_list|,
operator|&
name|GLWidget
operator|::
name|cleanup
argument_list|)
expr_stmt|;
name|initializeOpenGLFunctions
argument_list|()
expr_stmt|;
name|glClearColor
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|m_transparent
condition|?
literal|0
else|:
literal|1
argument_list|)
expr_stmt|;
name|m_program
operator|=
operator|new
name|QOpenGLShaderProgram
expr_stmt|;
name|m_program
operator|->
name|addShaderFromSourceCode
argument_list|(
name|QOpenGLShader
operator|::
name|Vertex
argument_list|,
name|m_core
condition|?
name|vertexShaderSourceCore
else|:
name|vertexShaderSource
argument_list|)
expr_stmt|;
name|m_program
operator|->
name|addShaderFromSourceCode
argument_list|(
name|QOpenGLShader
operator|::
name|Fragment
argument_list|,
name|m_core
condition|?
name|fragmentShaderSourceCore
else|:
name|fragmentShaderSource
argument_list|)
expr_stmt|;
name|m_program
operator|->
name|bindAttributeLocation
argument_list|(
literal|"vertex"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|m_program
operator|->
name|bindAttributeLocation
argument_list|(
literal|"normal"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|m_program
operator|->
name|link
argument_list|()
expr_stmt|;
name|m_program
operator|->
name|bind
argument_list|()
expr_stmt|;
name|m_projMatrixLoc
operator|=
name|m_program
operator|->
name|uniformLocation
argument_list|(
literal|"projMatrix"
argument_list|)
expr_stmt|;
name|m_mvMatrixLoc
operator|=
name|m_program
operator|->
name|uniformLocation
argument_list|(
literal|"mvMatrix"
argument_list|)
expr_stmt|;
name|m_normalMatrixLoc
operator|=
name|m_program
operator|->
name|uniformLocation
argument_list|(
literal|"normalMatrix"
argument_list|)
expr_stmt|;
name|m_lightPosLoc
operator|=
name|m_program
operator|->
name|uniformLocation
argument_list|(
literal|"lightPos"
argument_list|)
expr_stmt|;
comment|// Create a vertex array object. In OpenGL ES 2.0 and OpenGL 2.x
comment|// implementations this is optional and support may not be present
comment|// at all. Nonetheless the below code works in all cases and makes
comment|// sure there is a VAO when one is needed.
name|m_vao
operator|.
name|create
argument_list|()
expr_stmt|;
name|QOpenGLVertexArrayObject
operator|::
name|Binder
name|vaoBinder
argument_list|(
operator|&
name|m_vao
argument_list|)
decl_stmt|;
comment|// Setup our vertex buffer object.
name|m_logoVbo
operator|.
name|create
argument_list|()
expr_stmt|;
name|m_logoVbo
operator|.
name|bind
argument_list|()
expr_stmt|;
name|m_logoVbo
operator|.
name|allocate
argument_list|(
name|m_logo
operator|.
name|constData
argument_list|()
argument_list|,
name|m_logo
operator|.
name|count
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|GLfloat
argument_list|)
argument_list|)
expr_stmt|;
comment|// Store the vertex attribute bindings for the program.
name|setupVertexAttribs
argument_list|()
expr_stmt|;
comment|// Our camera never changes in this example.
name|m_camera
operator|.
name|setToIdentity
argument_list|()
expr_stmt|;
name|m_camera
operator|.
name|translate
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// Light position is fixed.
name|m_program
operator|->
name|setUniformValue
argument_list|(
name|m_lightPosLoc
argument_list|,
name|QVector3D
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|70
argument_list|)
argument_list|)
expr_stmt|;
name|m_program
operator|->
name|release
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setupVertexAttribs
name|void
name|GLWidget
operator|::
name|setupVertexAttribs
parameter_list|()
block|{
name|m_logoVbo
operator|.
name|bind
argument_list|()
expr_stmt|;
name|QOpenGLFunctions
modifier|*
name|f
init|=
name|QOpenGLContext
operator|::
name|currentContext
argument_list|()
operator|->
name|functions
argument_list|()
decl_stmt|;
name|f
operator|->
name|glEnableVertexAttribArray
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|f
operator|->
name|glEnableVertexAttribArray
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|f
operator|->
name|glVertexAttribPointer
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|,
name|GL_FLOAT
argument_list|,
name|GL_FALSE
argument_list|,
literal|6
operator|*
sizeof|sizeof
argument_list|(
name|GLfloat
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|f
operator|->
name|glVertexAttribPointer
argument_list|(
literal|1
argument_list|,
literal|3
argument_list|,
name|GL_FLOAT
argument_list|,
name|GL_FALSE
argument_list|,
literal|6
operator|*
sizeof|sizeof
argument_list|(
name|GLfloat
argument_list|)
argument_list|,
cast|reinterpret_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
literal|3
operator|*
sizeof|sizeof
argument_list|(
name|GLfloat
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|m_logoVbo
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|paintGL
name|void
name|GLWidget
operator|::
name|paintGL
parameter_list|()
block|{
name|glClear
argument_list|(
name|GL_COLOR_BUFFER_BIT
operator||
name|GL_DEPTH_BUFFER_BIT
argument_list|)
expr_stmt|;
name|glEnable
argument_list|(
name|GL_DEPTH_TEST
argument_list|)
expr_stmt|;
name|glEnable
argument_list|(
name|GL_CULL_FACE
argument_list|)
expr_stmt|;
name|m_world
operator|.
name|setToIdentity
argument_list|()
expr_stmt|;
name|m_world
operator|.
name|rotate
argument_list|(
literal|180.0f
operator|-
operator|(
name|m_xRot
operator|/
literal|16.0f
operator|)
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|m_world
operator|.
name|rotate
argument_list|(
name|m_yRot
operator|/
literal|16.0f
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|m_world
operator|.
name|rotate
argument_list|(
name|m_zRot
operator|/
literal|16.0f
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QOpenGLVertexArrayObject
operator|::
name|Binder
name|vaoBinder
argument_list|(
operator|&
name|m_vao
argument_list|)
decl_stmt|;
name|m_program
operator|->
name|bind
argument_list|()
expr_stmt|;
name|m_program
operator|->
name|setUniformValue
argument_list|(
name|m_projMatrixLoc
argument_list|,
name|m_proj
argument_list|)
expr_stmt|;
name|m_program
operator|->
name|setUniformValue
argument_list|(
name|m_mvMatrixLoc
argument_list|,
name|m_camera
operator|*
name|m_world
argument_list|)
expr_stmt|;
name|QMatrix3x3
name|normalMatrix
init|=
name|m_world
operator|.
name|normalMatrix
argument_list|()
decl_stmt|;
name|m_program
operator|->
name|setUniformValue
argument_list|(
name|m_normalMatrixLoc
argument_list|,
name|normalMatrix
argument_list|)
expr_stmt|;
name|glDrawArrays
argument_list|(
name|GL_TRIANGLES
argument_list|,
literal|0
argument_list|,
name|m_logo
operator|.
name|vertexCount
argument_list|()
argument_list|)
expr_stmt|;
name|m_program
operator|->
name|release
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resizeGL
name|void
name|GLWidget
operator|::
name|resizeGL
parameter_list|(
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|)
block|{
name|m_proj
operator|.
name|setToIdentity
argument_list|()
expr_stmt|;
name|m_proj
operator|.
name|perspective
argument_list|(
literal|45.0f
argument_list|,
name|GLfloat
argument_list|(
name|w
argument_list|)
operator|/
name|h
argument_list|,
literal|0.01f
argument_list|,
literal|100.0f
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mousePressEvent
name|void
name|GLWidget
operator|::
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|m_lastPos
operator|=
name|event
operator|->
name|pos
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mouseMoveEvent
name|void
name|GLWidget
operator|::
name|mouseMoveEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|int
name|dx
init|=
name|event
operator|->
name|x
argument_list|()
operator|-
name|m_lastPos
operator|.
name|x
argument_list|()
decl_stmt|;
name|int
name|dy
init|=
name|event
operator|->
name|y
argument_list|()
operator|-
name|m_lastPos
operator|.
name|y
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|->
name|buttons
argument_list|()
operator|&
name|Qt
operator|::
name|LeftButton
condition|)
block|{
name|setXRotation
argument_list|(
name|m_xRot
operator|+
literal|8
operator|*
name|dy
argument_list|)
expr_stmt|;
name|setYRotation
argument_list|(
name|m_yRot
operator|+
literal|8
operator|*
name|dx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|buttons
argument_list|()
operator|&
name|Qt
operator|::
name|RightButton
condition|)
block|{
name|setXRotation
argument_list|(
name|m_xRot
operator|+
literal|8
operator|*
name|dy
argument_list|)
expr_stmt|;
name|setZRotation
argument_list|(
name|m_zRot
operator|+
literal|8
operator|*
name|dx
argument_list|)
expr_stmt|;
block|}
name|m_lastPos
operator|=
name|event
operator|->
name|pos
argument_list|()
expr_stmt|;
block|}
end_function
end_unit
