begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** BSD License Usage ** Alternatively, you may use this file under the terms of the BSD license ** as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of The Qt Company Ltd nor the names of its **     contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"logo.h"
end_include
begin_include
include|#
directive|include
file|<qmath.h>
end_include
begin_constructor
DECL|function|Logo
name|Logo
operator|::
name|Logo
parameter_list|()
member_init_list|:
name|m_count
argument_list|(
literal|0
argument_list|)
block|{
name|m_data
operator|.
name|resize
argument_list|(
literal|2500
operator|*
literal|6
argument_list|)
expr_stmt|;
specifier|const
name|GLfloat
name|x1
init|=
operator|+
literal|0.06f
decl_stmt|;
specifier|const
name|GLfloat
name|y1
init|=
operator|-
literal|0.14f
decl_stmt|;
specifier|const
name|GLfloat
name|x2
init|=
operator|+
literal|0.14f
decl_stmt|;
specifier|const
name|GLfloat
name|y2
init|=
operator|-
literal|0.06f
decl_stmt|;
specifier|const
name|GLfloat
name|x3
init|=
operator|+
literal|0.08f
decl_stmt|;
specifier|const
name|GLfloat
name|y3
init|=
operator|+
literal|0.00f
decl_stmt|;
specifier|const
name|GLfloat
name|x4
init|=
operator|+
literal|0.30f
decl_stmt|;
specifier|const
name|GLfloat
name|y4
init|=
operator|+
literal|0.22f
decl_stmt|;
name|quad
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|y2
argument_list|,
name|x2
argument_list|,
name|y1
argument_list|,
name|x1
argument_list|)
expr_stmt|;
name|quad
argument_list|(
name|x3
argument_list|,
name|y3
argument_list|,
name|x4
argument_list|,
name|y4
argument_list|,
name|y4
argument_list|,
name|x4
argument_list|,
name|y3
argument_list|,
name|x3
argument_list|)
expr_stmt|;
name|extrude
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|extrude
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|,
name|y2
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|extrude
argument_list|(
name|y2
argument_list|,
name|x2
argument_list|,
name|y1
argument_list|,
name|x1
argument_list|)
expr_stmt|;
name|extrude
argument_list|(
name|y1
argument_list|,
name|x1
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|extrude
argument_list|(
name|x3
argument_list|,
name|y3
argument_list|,
name|x4
argument_list|,
name|y4
argument_list|)
expr_stmt|;
name|extrude
argument_list|(
name|x4
argument_list|,
name|y4
argument_list|,
name|y4
argument_list|,
name|x4
argument_list|)
expr_stmt|;
name|extrude
argument_list|(
name|y4
argument_list|,
name|x4
argument_list|,
name|y3
argument_list|,
name|x3
argument_list|)
expr_stmt|;
specifier|const
name|int
name|NumSectors
init|=
literal|100
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NumSectors
condition|;
operator|++
name|i
control|)
block|{
name|GLfloat
name|angle
init|=
operator|(
name|i
operator|*
literal|2
operator|*
name|M_PI
operator|)
operator|/
name|NumSectors
decl_stmt|;
name|GLfloat
name|angleSin
init|=
name|qSin
argument_list|(
name|angle
argument_list|)
decl_stmt|;
name|GLfloat
name|angleCos
init|=
name|qCos
argument_list|(
name|angle
argument_list|)
decl_stmt|;
specifier|const
name|GLfloat
name|x5
init|=
literal|0.30f
operator|*
name|angleSin
decl_stmt|;
specifier|const
name|GLfloat
name|y5
init|=
literal|0.30f
operator|*
name|angleCos
decl_stmt|;
specifier|const
name|GLfloat
name|x6
init|=
literal|0.20f
operator|*
name|angleSin
decl_stmt|;
specifier|const
name|GLfloat
name|y6
init|=
literal|0.20f
operator|*
name|angleCos
decl_stmt|;
name|angle
operator|=
operator|(
operator|(
name|i
operator|+
literal|1
operator|)
operator|*
literal|2
operator|*
name|M_PI
operator|)
operator|/
name|NumSectors
expr_stmt|;
name|angleSin
operator|=
name|qSin
argument_list|(
name|angle
argument_list|)
expr_stmt|;
name|angleCos
operator|=
name|qCos
argument_list|(
name|angle
argument_list|)
expr_stmt|;
specifier|const
name|GLfloat
name|x7
init|=
literal|0.20f
operator|*
name|angleSin
decl_stmt|;
specifier|const
name|GLfloat
name|y7
init|=
literal|0.20f
operator|*
name|angleCos
decl_stmt|;
specifier|const
name|GLfloat
name|x8
init|=
literal|0.30f
operator|*
name|angleSin
decl_stmt|;
specifier|const
name|GLfloat
name|y8
init|=
literal|0.30f
operator|*
name|angleCos
decl_stmt|;
name|quad
argument_list|(
name|x5
argument_list|,
name|y5
argument_list|,
name|x6
argument_list|,
name|y6
argument_list|,
name|x7
argument_list|,
name|y7
argument_list|,
name|x8
argument_list|,
name|y8
argument_list|)
expr_stmt|;
name|extrude
argument_list|(
name|x6
argument_list|,
name|y6
argument_list|,
name|x7
argument_list|,
name|y7
argument_list|)
expr_stmt|;
name|extrude
argument_list|(
name|x8
argument_list|,
name|y8
argument_list|,
name|x5
argument_list|,
name|y5
argument_list|)
expr_stmt|;
block|}
block|}
end_constructor
begin_function
DECL|function|add
name|void
name|Logo
operator|::
name|add
parameter_list|(
specifier|const
name|QVector3D
modifier|&
name|v
parameter_list|,
specifier|const
name|QVector3D
modifier|&
name|n
parameter_list|)
block|{
name|GLfloat
modifier|*
name|p
init|=
name|m_data
operator|.
name|data
argument_list|()
operator|+
name|m_count
decl_stmt|;
operator|*
name|p
operator|++
operator|=
name|v
operator|.
name|x
argument_list|()
expr_stmt|;
operator|*
name|p
operator|++
operator|=
name|v
operator|.
name|y
argument_list|()
expr_stmt|;
operator|*
name|p
operator|++
operator|=
name|v
operator|.
name|z
argument_list|()
expr_stmt|;
operator|*
name|p
operator|++
operator|=
name|n
operator|.
name|x
argument_list|()
expr_stmt|;
operator|*
name|p
operator|++
operator|=
name|n
operator|.
name|y
argument_list|()
expr_stmt|;
operator|*
name|p
operator|++
operator|=
name|n
operator|.
name|z
argument_list|()
expr_stmt|;
name|m_count
operator|+=
literal|6
expr_stmt|;
block|}
end_function
begin_function
DECL|function|quad
name|void
name|Logo
operator|::
name|quad
parameter_list|(
name|GLfloat
name|x1
parameter_list|,
name|GLfloat
name|y1
parameter_list|,
name|GLfloat
name|x2
parameter_list|,
name|GLfloat
name|y2
parameter_list|,
name|GLfloat
name|x3
parameter_list|,
name|GLfloat
name|y3
parameter_list|,
name|GLfloat
name|x4
parameter_list|,
name|GLfloat
name|y4
parameter_list|)
block|{
name|QVector3D
name|n
init|=
name|QVector3D
operator|::
name|normal
argument_list|(
name|QVector3D
argument_list|(
name|x4
operator|-
name|x1
argument_list|,
name|y4
operator|-
name|y1
argument_list|,
literal|0.0f
argument_list|)
argument_list|,
name|QVector3D
argument_list|(
name|x2
operator|-
name|x1
argument_list|,
name|y2
operator|-
name|y1
argument_list|,
literal|0.0f
argument_list|)
argument_list|)
decl_stmt|;
name|add
argument_list|(
name|QVector3D
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
operator|-
literal|0.05f
argument_list|)
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|QVector3D
argument_list|(
name|x4
argument_list|,
name|y4
argument_list|,
operator|-
literal|0.05f
argument_list|)
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|QVector3D
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|,
operator|-
literal|0.05f
argument_list|)
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|QVector3D
argument_list|(
name|x3
argument_list|,
name|y3
argument_list|,
operator|-
literal|0.05f
argument_list|)
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|QVector3D
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|,
operator|-
literal|0.05f
argument_list|)
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|QVector3D
argument_list|(
name|x4
argument_list|,
name|y4
argument_list|,
operator|-
literal|0.05f
argument_list|)
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|n
operator|=
name|QVector3D
operator|::
name|normal
argument_list|(
name|QVector3D
argument_list|(
name|x1
operator|-
name|x4
argument_list|,
name|y1
operator|-
name|y4
argument_list|,
literal|0.0f
argument_list|)
argument_list|,
name|QVector3D
argument_list|(
name|x2
operator|-
name|x4
argument_list|,
name|y2
operator|-
name|y4
argument_list|,
literal|0.0f
argument_list|)
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|QVector3D
argument_list|(
name|x4
argument_list|,
name|y4
argument_list|,
literal|0.05f
argument_list|)
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|QVector3D
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
literal|0.05f
argument_list|)
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|QVector3D
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|,
literal|0.05f
argument_list|)
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|QVector3D
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|,
literal|0.05f
argument_list|)
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|QVector3D
argument_list|(
name|x3
argument_list|,
name|y3
argument_list|,
literal|0.05f
argument_list|)
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|QVector3D
argument_list|(
name|x4
argument_list|,
name|y4
argument_list|,
literal|0.05f
argument_list|)
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|extrude
name|void
name|Logo
operator|::
name|extrude
parameter_list|(
name|GLfloat
name|x1
parameter_list|,
name|GLfloat
name|y1
parameter_list|,
name|GLfloat
name|x2
parameter_list|,
name|GLfloat
name|y2
parameter_list|)
block|{
name|QVector3D
name|n
init|=
name|QVector3D
operator|::
name|normal
argument_list|(
name|QVector3D
argument_list|(
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
operator|-
literal|0.1f
argument_list|)
argument_list|,
name|QVector3D
argument_list|(
name|x2
operator|-
name|x1
argument_list|,
name|y2
operator|-
name|y1
argument_list|,
literal|0.0f
argument_list|)
argument_list|)
decl_stmt|;
name|add
argument_list|(
name|QVector3D
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
operator|+
literal|0.05f
argument_list|)
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|QVector3D
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
operator|-
literal|0.05f
argument_list|)
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|QVector3D
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|,
operator|+
literal|0.05f
argument_list|)
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|QVector3D
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|,
operator|-
literal|0.05f
argument_list|)
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|QVector3D
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|,
operator|+
literal|0.05f
argument_list|)
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|add
argument_list|(
name|QVector3D
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
operator|-
literal|0.05f
argument_list|)
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
end_function
end_unit
