begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names **     of its contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QOpenGLWindow>
end_include
begin_include
include|#
directive|include
file|<QScreen>
end_include
begin_include
include|#
directive|include
file|<QPainter>
end_include
begin_include
include|#
directive|include
file|<QGuiApplication>
end_include
begin_include
include|#
directive|include
file|<QMatrix4x4>
end_include
begin_include
include|#
directive|include
file|<QStaticText>
end_include
begin_include
include|#
directive|include
file|<QKeyEvent>
end_include
begin_include
include|#
directive|include
file|"background_renderer.h"
end_include
begin_function
DECL|function|painterPathForTriangle
specifier|static
name|QPainterPath
name|painterPathForTriangle
parameter_list|()
block|{
specifier|static
specifier|const
name|QPointF
name|bottomLeft
argument_list|(
operator|-
literal|1.0
argument_list|,
operator|-
literal|1.0
argument_list|)
decl_stmt|;
specifier|static
specifier|const
name|QPointF
name|top
argument_list|(
literal|0.0
argument_list|,
literal|1.0
argument_list|)
decl_stmt|;
specifier|static
specifier|const
name|QPointF
name|bottomRight
argument_list|(
literal|1.0
argument_list|,
operator|-
literal|1.0
argument_list|)
decl_stmt|;
name|QPainterPath
name|path
argument_list|(
name|bottomLeft
argument_list|)
decl_stmt|;
name|path
operator|.
name|lineTo
argument_list|(
name|top
argument_list|)
expr_stmt|;
name|path
operator|.
name|lineTo
argument_list|(
name|bottomRight
argument_list|)
expr_stmt|;
name|path
operator|.
name|closeSubpath
argument_list|()
expr_stmt|;
return|return
name|path
return|;
block|}
end_function
begin_class
DECL|class|OpenGLWindow
class|class
name|OpenGLWindow
super|:
specifier|public
name|QOpenGLWindow
block|{
name|Q_OBJECT
public|public:
name|OpenGLWindow
parameter_list|()
constructor_decl|;
protected|protected:
DECL|member|Q_DECL_OVERRIDE
name|void
name|paintGL
parameter_list|()
name|Q_DECL_OVERRIDE
function_decl|;
DECL|member|Q_DECL_OVERRIDE
name|void
name|resizeGL
parameter_list|(
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|)
name|Q_DECL_OVERRIDE
function_decl|;
DECL|member|Q_DECL_OVERRIDE
name|void
name|keyPressEvent
parameter_list|(
name|QKeyEvent
modifier|*
name|e
parameter_list|)
name|Q_DECL_OVERRIDE
function_decl|;
private|private:
name|void
name|setAnimating
parameter_list|(
name|bool
name|enabled
parameter_list|)
function_decl|;
DECL|member|m_window_normalised_matrix
name|QMatrix4x4
name|m_window_normalised_matrix
decl_stmt|;
DECL|member|m_window_painter_matrix
name|QMatrix4x4
name|m_window_painter_matrix
decl_stmt|;
DECL|member|m_projection
name|QMatrix4x4
name|m_projection
decl_stmt|;
DECL|member|m_view
name|QMatrix4x4
name|m_view
decl_stmt|;
DECL|member|m_model_triangle
name|QMatrix4x4
name|m_model_triangle
decl_stmt|;
DECL|member|m_model_text
name|QMatrix4x4
name|m_model_text
decl_stmt|;
DECL|member|m_brush
name|QBrush
name|m_brush
decl_stmt|;
DECL|member|m_fragment_toy
name|FragmentToy
name|m_fragment_toy
decl_stmt|;
DECL|member|m_text_layout
name|QStaticText
name|m_text_layout
decl_stmt|;
DECL|member|m_animate
name|bool
name|m_animate
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|// Use NoPartialUpdate. This means that all the rendering goes directly to
end_comment
begin_comment
comment|// the window surface, no additional framebuffer object stands in the
end_comment
begin_comment
comment|// middle. This is fine since we will clear the entire framebuffer on each
end_comment
begin_comment
comment|// paint. Under the hood this means that the behavior is equivalent to the
end_comment
begin_comment
comment|// manual makeCurrent - perform OpenGL calls - swapBuffers loop that is
end_comment
begin_comment
comment|// typical in pure QWindow-based applications.
end_comment
begin_constructor
DECL|function|OpenGLWindow
name|OpenGLWindow
operator|::
name|OpenGLWindow
parameter_list|()
member_init_list|:
name|QOpenGLWindow
argument_list|(
name|QOpenGLWindow
operator|::
name|NoPartialUpdate
argument_list|)
member_init_list|,
name|m_fragment_toy
argument_list|(
literal|"./background.frag"
argument_list|)
member_init_list|,
name|m_text_layout
argument_list|(
literal|"The triangle and this text is rendered with QPainter"
argument_list|)
member_init_list|,
name|m_animate
argument_list|(
literal|true
argument_list|)
block|{
name|m_view
operator|.
name|lookAt
argument_list|(
name|QVector3D
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|,
name|QVector3D
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QVector3D
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QLinearGradient
name|gradient
argument_list|(
name|QPointF
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|,
name|QPointF
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|gradient
operator|.
name|setColorAt
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|gradient
operator|.
name|setColorAt
argument_list|(
literal|1
argument_list|,
name|Qt
operator|::
name|green
argument_list|)
expr_stmt|;
name|m_brush
operator|=
name|QBrush
argument_list|(
name|gradient
argument_list|)
expr_stmt|;
name|setAnimating
argument_list|(
name|m_animate
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|paintGL
name|void
name|OpenGLWindow
operator|::
name|paintGL
parameter_list|()
block|{
name|m_fragment_toy
operator|.
name|draw
argument_list|(
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QPainter
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|p
operator|.
name|setWorldTransform
argument_list|(
name|m_window_normalised_matrix
operator|.
name|toTransform
argument_list|()
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|mvp
init|=
name|m_projection
operator|*
name|m_view
operator|*
name|m_model_triangle
decl_stmt|;
name|p
operator|.
name|setTransform
argument_list|(
name|mvp
operator|.
name|toTransform
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|p
operator|.
name|fillPath
argument_list|(
name|painterPathForTriangle
argument_list|()
argument_list|,
name|m_brush
argument_list|)
expr_stmt|;
name|QTransform
name|text_transform
init|=
operator|(
name|m_window_painter_matrix
operator|*
name|m_view
operator|*
name|m_model_text
operator|)
operator|.
name|toTransform
argument_list|()
decl_stmt|;
name|p
operator|.
name|setTransform
argument_list|(
name|text_transform
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPen
argument_list|(
name|QPen
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
argument_list|)
expr_stmt|;
name|m_text_layout
operator|.
name|prepare
argument_list|(
name|text_transform
argument_list|)
expr_stmt|;
name|qreal
name|x
init|=
operator|-
operator|(
name|m_text_layout
operator|.
name|size
argument_list|()
operator|.
name|width
argument_list|()
operator|/
literal|2
operator|)
decl_stmt|;
name|qreal
name|y
init|=
literal|0
decl_stmt|;
name|p
operator|.
name|drawStaticText
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|m_text_layout
argument_list|)
expr_stmt|;
name|m_model_triangle
operator|.
name|rotate
argument_list|(
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|m_model_text
operator|.
name|rotate
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resizeGL
name|void
name|OpenGLWindow
operator|::
name|resizeGL
parameter_list|(
name|int
name|w
parameter_list|,
name|int
name|h
parameter_list|)
block|{
name|m_window_normalised_matrix
operator|.
name|setToIdentity
argument_list|()
expr_stmt|;
name|m_window_normalised_matrix
operator|.
name|translate
argument_list|(
name|w
operator|/
literal|2.0
argument_list|,
name|h
operator|/
literal|2.0
argument_list|)
expr_stmt|;
name|m_window_normalised_matrix
operator|.
name|scale
argument_list|(
name|w
operator|/
literal|2.0
argument_list|,
operator|-
name|h
operator|/
literal|2.0
argument_list|)
expr_stmt|;
name|m_window_painter_matrix
operator|.
name|setToIdentity
argument_list|()
expr_stmt|;
name|m_window_painter_matrix
operator|.
name|translate
argument_list|(
name|w
operator|/
literal|2.0
argument_list|,
name|h
operator|/
literal|2.0
argument_list|)
expr_stmt|;
name|m_text_layout
operator|.
name|setTextWidth
argument_list|(
name|std
operator|::
name|max
argument_list|(
name|w
operator|*
literal|0.2
argument_list|,
literal|80.0
argument_list|)
argument_list|)
expr_stmt|;
name|m_projection
operator|.
name|setToIdentity
argument_list|()
expr_stmt|;
name|m_projection
operator|.
name|perspective
argument_list|(
literal|45.f
argument_list|,
name|qreal
argument_list|(
name|w
argument_list|)
operator|/
name|qreal
argument_list|(
name|h
argument_list|)
argument_list|,
literal|0.1f
argument_list|,
literal|100.f
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|keyPressEvent
name|void
name|OpenGLWindow
operator|::
name|keyPressEvent
parameter_list|(
name|QKeyEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_P
condition|)
block|{
comment|// pause
name|m_animate
operator|=
operator|!
name|m_animate
expr_stmt|;
name|setAnimating
argument_list|(
name|m_animate
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setAnimating
name|void
name|OpenGLWindow
operator|::
name|setAnimating
parameter_list|(
name|bool
name|enabled
parameter_list|)
block|{
if|if
condition|(
name|enabled
condition|)
block|{
comment|// Animate continuously, throttled by the blocking swapBuffers() call the
comment|// QOpenGLWindow internally executes after each paint. Once that is done
comment|// (frameSwapped signal is emitted), we schedule a new update. This
comment|// obviously assumes that the swap interval (see
comment|// QSurfaceFormat::setSwapInterval()) is non-zero.
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|frameSwapped
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|update
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|disconnect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|frameSwapped
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|update
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
modifier|*
name|argv
parameter_list|)
block|{
name|QGuiApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|OpenGLWindow
name|window
decl_stmt|;
name|QSurfaceFormat
name|fmt
decl_stmt|;
name|fmt
operator|.
name|setDepthBufferSize
argument_list|(
literal|24
argument_list|)
expr_stmt|;
name|fmt
operator|.
name|setStencilBufferSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|window
operator|.
name|setFormat
argument_list|(
name|fmt
argument_list|)
expr_stmt|;
name|window
operator|.
name|showMaximized
argument_list|()
expr_stmt|;
return|return
name|app
operator|.
name|exec
argument_list|()
return|;
block|}
end_function
begin_include
include|#
directive|include
file|"main.moc"
end_include
end_unit
