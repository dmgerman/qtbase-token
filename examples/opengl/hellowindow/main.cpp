begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names **     of its contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"hellowindow.h"
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformintegration.h>
end_include
begin_include
include|#
directive|include
file|<private/qguiapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<QGuiApplication>
end_include
begin_include
include|#
directive|include
file|<QScreen>
end_include
begin_include
include|#
directive|include
file|<QThread>
end_include
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
name|argv
index|[]
parameter_list|)
block|{
name|QGuiApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|multipleWindows
init|=
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
operator|->
name|hasCapability
argument_list|(
name|QPlatformIntegration
operator|::
name|ThreadedOpenGL
argument_list|)
operator|&&
operator|!
name|QGuiApplication
operator|::
name|arguments
argument_list|()
operator|.
name|contains
argument_list|(
name|QStringLiteral
argument_list|(
literal|"--single"
argument_list|)
argument_list|)
decl_stmt|;
name|QScreen
modifier|*
name|screen
init|=
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
decl_stmt|;
name|QRect
name|screenGeometry
init|=
name|screen
operator|->
name|availableGeometry
argument_list|()
decl_stmt|;
name|QSurfaceFormat
name|format
decl_stmt|;
name|format
operator|.
name|setDepthBufferSize
argument_list|(
literal|16
argument_list|)
expr_stmt|;
name|format
operator|.
name|setSamples
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|QPoint
name|center
init|=
name|QPoint
argument_list|(
name|screenGeometry
operator|.
name|center
argument_list|()
operator|.
name|x
argument_list|()
argument_list|,
name|screenGeometry
operator|.
name|top
argument_list|()
operator|+
literal|80
argument_list|)
decl_stmt|;
name|QSize
name|windowSize
argument_list|(
literal|400
argument_list|,
literal|320
argument_list|)
decl_stmt|;
name|int
name|delta
init|=
literal|40
decl_stmt|;
name|QList
argument_list|<
name|QWindow
modifier|*
argument_list|>
name|windows
decl_stmt|;
name|QSharedPointer
argument_list|<
name|Renderer
argument_list|>
name|rendererA
argument_list|(
operator|new
name|Renderer
argument_list|(
name|format
argument_list|)
argument_list|)
decl_stmt|;
name|HelloWindow
modifier|*
name|windowA
init|=
operator|new
name|HelloWindow
argument_list|(
name|rendererA
argument_list|)
decl_stmt|;
name|windowA
operator|->
name|setGeometry
argument_list|(
name|QRect
argument_list|(
name|center
argument_list|,
name|windowSize
argument_list|)
operator|.
name|translated
argument_list|(
operator|-
name|windowSize
operator|.
name|width
argument_list|()
operator|-
name|delta
operator|/
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|windowA
operator|->
name|setTitle
argument_list|(
name|QStringLiteral
argument_list|(
literal|"Thread A - Context A"
argument_list|)
argument_list|)
expr_stmt|;
name|windowA
operator|->
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|windows
operator|.
name|prepend
argument_list|(
name|windowA
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QThread
modifier|*
argument_list|>
name|renderThreads
decl_stmt|;
if|if
condition|(
name|multipleWindows
condition|)
block|{
name|QSharedPointer
argument_list|<
name|Renderer
argument_list|>
name|rendererB
argument_list|(
operator|new
name|Renderer
argument_list|(
name|format
argument_list|,
name|rendererA
operator|.
name|data
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QThread
modifier|*
name|renderThread
init|=
operator|new
name|QThread
decl_stmt|;
name|rendererB
operator|->
name|moveToThread
argument_list|(
name|renderThread
argument_list|)
expr_stmt|;
name|renderThreads
operator|<<
name|renderThread
expr_stmt|;
name|HelloWindow
modifier|*
name|windowB
init|=
operator|new
name|HelloWindow
argument_list|(
name|rendererA
argument_list|)
decl_stmt|;
name|windowB
operator|->
name|setGeometry
argument_list|(
name|QRect
argument_list|(
name|center
argument_list|,
name|windowSize
argument_list|)
operator|.
name|translated
argument_list|(
name|delta
operator|/
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|windowB
operator|->
name|setTitle
argument_list|(
name|QStringLiteral
argument_list|(
literal|"Thread A - Context A"
argument_list|)
argument_list|)
expr_stmt|;
name|windowB
operator|->
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|windows
operator|.
name|prepend
argument_list|(
name|windowB
argument_list|)
expr_stmt|;
name|HelloWindow
modifier|*
name|windowC
init|=
operator|new
name|HelloWindow
argument_list|(
name|rendererB
argument_list|)
decl_stmt|;
name|windowC
operator|->
name|setGeometry
argument_list|(
name|QRect
argument_list|(
name|center
argument_list|,
name|windowSize
argument_list|)
operator|.
name|translated
argument_list|(
operator|-
name|windowSize
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|,
name|windowSize
operator|.
name|height
argument_list|()
operator|+
name|delta
argument_list|)
argument_list|)
expr_stmt|;
name|windowC
operator|->
name|setTitle
argument_list|(
name|QStringLiteral
argument_list|(
literal|"Thread B - Context B"
argument_list|)
argument_list|)
expr_stmt|;
name|windowC
operator|->
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|windows
operator|.
name|prepend
argument_list|(
name|windowC
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|QGuiApplication
operator|::
name|screens
argument_list|()
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QScreen
modifier|*
name|screen
init|=
name|QGuiApplication
operator|::
name|screens
argument_list|()
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QSharedPointer
argument_list|<
name|Renderer
argument_list|>
name|renderer
argument_list|(
operator|new
name|Renderer
argument_list|(
name|format
argument_list|,
name|rendererA
operator|.
name|data
argument_list|()
argument_list|,
name|screen
argument_list|)
argument_list|)
decl_stmt|;
name|renderThread
operator|=
operator|new
name|QThread
expr_stmt|;
name|renderer
operator|->
name|moveToThread
argument_list|(
name|renderThread
argument_list|)
expr_stmt|;
name|renderThreads
operator|.
name|prepend
argument_list|(
name|renderThread
argument_list|)
expr_stmt|;
name|QRect
name|screenGeometry
init|=
name|screen
operator|->
name|availableGeometry
argument_list|()
decl_stmt|;
name|QPoint
name|center
init|=
name|screenGeometry
operator|.
name|center
argument_list|()
decl_stmt|;
name|QSize
name|windowSize
init|=
name|screenGeometry
operator|.
name|size
argument_list|()
operator|*
literal|0.8
decl_stmt|;
name|HelloWindow
modifier|*
name|window
init|=
operator|new
name|HelloWindow
argument_list|(
name|renderer
argument_list|)
decl_stmt|;
name|window
operator|->
name|setScreen
argument_list|(
name|screen
argument_list|)
expr_stmt|;
name|window
operator|->
name|setGeometry
argument_list|(
name|QRect
argument_list|(
name|center
argument_list|,
name|windowSize
argument_list|)
operator|.
name|translated
argument_list|(
operator|-
name|windowSize
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|,
operator|-
name|windowSize
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|QChar
name|id
init|=
name|QChar
argument_list|(
literal|'B'
operator|+
name|i
argument_list|)
decl_stmt|;
name|window
operator|->
name|setTitle
argument_list|(
name|QStringLiteral
argument_list|(
literal|"Thread "
argument_list|)
operator|+
name|id
operator|+
name|QStringLiteral
argument_list|(
literal|" - Context "
argument_list|)
operator|+
name|id
argument_list|)
expr_stmt|;
name|window
operator|->
name|setVisible
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|windows
operator|.
name|prepend
argument_list|(
name|window
argument_list|)
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|renderThreads
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QObject
operator|::
name|connect
argument_list|(
name|qGuiApp
argument_list|,
name|SIGNAL
argument_list|(
name|lastWindowClosed
argument_list|()
argument_list|)
argument_list|,
name|renderThreads
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|renderThreads
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|start
argument_list|()
expr_stmt|;
block|}
specifier|const
name|int
name|exitValue
init|=
name|app
operator|.
name|exec
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|renderThreads
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|renderThreads
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|wait
argument_list|()
expr_stmt|;
name|qDeleteAll
argument_list|(
name|windows
argument_list|)
expr_stmt|;
name|qDeleteAll
argument_list|(
name|renderThreads
argument_list|)
expr_stmt|;
return|return
name|exitValue
return|;
block|}
end_function
end_unit
