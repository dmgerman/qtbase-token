begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names **     of its contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtWidgets>
end_include
begin_include
include|#
directive|include
file|<QtOpenGL>
end_include
begin_include
include|#
directive|include
file|<math.h>
end_include
begin_include
include|#
directive|include
file|"glwidget.h"
end_include
begin_constructor
DECL|function|GLWidget
name|GLWidget
operator|::
name|GLWidget
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QGLWidget
argument_list|(
name|parent
argument_list|)
block|{
name|gear1
operator|=
literal|0
expr_stmt|;
name|gear2
operator|=
literal|0
expr_stmt|;
name|gear3
operator|=
literal|0
expr_stmt|;
name|xRot
operator|=
literal|0
expr_stmt|;
name|yRot
operator|=
literal|0
expr_stmt|;
name|zRot
operator|=
literal|0
expr_stmt|;
name|gear1Rot
operator|=
literal|0
expr_stmt|;
name|QTimer
modifier|*
name|timer
init|=
operator|new
name|QTimer
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|timer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|advanceGears
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|timer
operator|->
name|start
argument_list|(
literal|20
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~GLWidget
name|GLWidget
operator|::
name|~
name|GLWidget
parameter_list|()
block|{
name|makeCurrent
argument_list|()
expr_stmt|;
name|glDeleteLists
argument_list|(
name|gear1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|glDeleteLists
argument_list|(
name|gear2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|glDeleteLists
argument_list|(
name|gear3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|setXRotation
name|void
name|GLWidget
operator|::
name|setXRotation
parameter_list|(
name|int
name|angle
parameter_list|)
block|{
name|normalizeAngle
argument_list|(
operator|&
name|angle
argument_list|)
expr_stmt|;
if|if
condition|(
name|angle
operator|!=
name|xRot
condition|)
block|{
name|xRot
operator|=
name|angle
expr_stmt|;
emit|emit
name|xRotationChanged
argument_list|(
name|angle
argument_list|)
emit|;
name|updateGL
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setYRotation
name|void
name|GLWidget
operator|::
name|setYRotation
parameter_list|(
name|int
name|angle
parameter_list|)
block|{
name|normalizeAngle
argument_list|(
operator|&
name|angle
argument_list|)
expr_stmt|;
if|if
condition|(
name|angle
operator|!=
name|yRot
condition|)
block|{
name|yRot
operator|=
name|angle
expr_stmt|;
emit|emit
name|yRotationChanged
argument_list|(
name|angle
argument_list|)
emit|;
name|updateGL
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setZRotation
name|void
name|GLWidget
operator|::
name|setZRotation
parameter_list|(
name|int
name|angle
parameter_list|)
block|{
name|normalizeAngle
argument_list|(
operator|&
name|angle
argument_list|)
expr_stmt|;
if|if
condition|(
name|angle
operator|!=
name|zRot
condition|)
block|{
name|zRot
operator|=
name|angle
expr_stmt|;
emit|emit
name|zRotationChanged
argument_list|(
name|angle
argument_list|)
emit|;
name|updateGL
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|initializeGL
name|void
name|GLWidget
operator|::
name|initializeGL
parameter_list|()
block|{
specifier|static
specifier|const
name|GLfloat
name|lightPos
index|[
literal|4
index|]
init|=
block|{
literal|5.0f
block|,
literal|5.0f
block|,
literal|10.0f
block|,
literal|1.0f
block|}
decl_stmt|;
specifier|static
specifier|const
name|GLfloat
name|reflectance1
index|[
literal|4
index|]
init|=
block|{
literal|0.8f
block|,
literal|0.1f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
specifier|static
specifier|const
name|GLfloat
name|reflectance2
index|[
literal|4
index|]
init|=
block|{
literal|0.0f
block|,
literal|0.8f
block|,
literal|0.2f
block|,
literal|1.0f
block|}
decl_stmt|;
specifier|static
specifier|const
name|GLfloat
name|reflectance3
index|[
literal|4
index|]
init|=
block|{
literal|0.2f
block|,
literal|0.2f
block|,
literal|1.0f
block|,
literal|1.0f
block|}
decl_stmt|;
name|glLightfv
argument_list|(
name|GL_LIGHT0
argument_list|,
name|GL_POSITION
argument_list|,
name|lightPos
argument_list|)
expr_stmt|;
name|glEnable
argument_list|(
name|GL_LIGHTING
argument_list|)
expr_stmt|;
name|glEnable
argument_list|(
name|GL_LIGHT0
argument_list|)
expr_stmt|;
name|glEnable
argument_list|(
name|GL_DEPTH_TEST
argument_list|)
expr_stmt|;
name|gear1
operator|=
name|makeGear
argument_list|(
name|reflectance1
argument_list|,
literal|1.0
argument_list|,
literal|4.0
argument_list|,
literal|1.0
argument_list|,
literal|0.7
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|gear2
operator|=
name|makeGear
argument_list|(
name|reflectance2
argument_list|,
literal|0.5
argument_list|,
literal|2.0
argument_list|,
literal|2.0
argument_list|,
literal|0.7
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|gear3
operator|=
name|makeGear
argument_list|(
name|reflectance3
argument_list|,
literal|1.3
argument_list|,
literal|2.0
argument_list|,
literal|0.5
argument_list|,
literal|0.7
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|glEnable
argument_list|(
name|GL_NORMALIZE
argument_list|)
expr_stmt|;
name|glClearColor
argument_list|(
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|paintGL
name|void
name|GLWidget
operator|::
name|paintGL
parameter_list|()
block|{
name|glClear
argument_list|(
name|GL_COLOR_BUFFER_BIT
operator||
name|GL_DEPTH_BUFFER_BIT
argument_list|)
expr_stmt|;
name|glPushMatrix
argument_list|()
expr_stmt|;
name|glRotated
argument_list|(
name|xRot
operator|/
literal|16.0
argument_list|,
literal|1.0
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|glRotated
argument_list|(
name|yRot
operator|/
literal|16.0
argument_list|,
literal|0.0
argument_list|,
literal|1.0
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|glRotated
argument_list|(
name|zRot
operator|/
literal|16.0
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|1.0
argument_list|)
expr_stmt|;
name|drawGear
argument_list|(
name|gear1
argument_list|,
operator|-
literal|3.0
argument_list|,
operator|-
literal|2.0
argument_list|,
literal|0.0
argument_list|,
name|gear1Rot
operator|/
literal|16.0
argument_list|)
expr_stmt|;
name|drawGear
argument_list|(
name|gear2
argument_list|,
operator|+
literal|3.1
argument_list|,
operator|-
literal|2.0
argument_list|,
literal|0.0
argument_list|,
operator|-
literal|2.0
operator|*
operator|(
name|gear1Rot
operator|/
literal|16.0
operator|)
operator|-
literal|9.0
argument_list|)
expr_stmt|;
name|glRotated
argument_list|(
operator|+
literal|90.0
argument_list|,
literal|1.0
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|drawGear
argument_list|(
name|gear3
argument_list|,
operator|-
literal|3.1
argument_list|,
operator|-
literal|1.8
argument_list|,
operator|-
literal|2.2
argument_list|,
operator|+
literal|2.0
operator|*
operator|(
name|gear1Rot
operator|/
literal|16.0
operator|)
operator|-
literal|2.0
argument_list|)
expr_stmt|;
name|glPopMatrix
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resizeGL
name|void
name|GLWidget
operator|::
name|resizeGL
parameter_list|(
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
block|{
name|int
name|side
init|=
name|qMin
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
decl_stmt|;
name|glViewport
argument_list|(
operator|(
name|width
operator|-
name|side
operator|)
operator|/
literal|2
argument_list|,
operator|(
name|height
operator|-
name|side
operator|)
operator|/
literal|2
argument_list|,
name|side
argument_list|,
name|side
argument_list|)
expr_stmt|;
name|glMatrixMode
argument_list|(
name|GL_PROJECTION
argument_list|)
expr_stmt|;
name|glLoadIdentity
argument_list|()
expr_stmt|;
name|glFrustum
argument_list|(
operator|-
literal|1.0
argument_list|,
operator|+
literal|1.0
argument_list|,
operator|-
literal|1.0
argument_list|,
literal|1.0
argument_list|,
literal|5.0
argument_list|,
literal|60.0
argument_list|)
expr_stmt|;
name|glMatrixMode
argument_list|(
name|GL_MODELVIEW
argument_list|)
expr_stmt|;
name|glLoadIdentity
argument_list|()
expr_stmt|;
name|glTranslated
argument_list|(
literal|0.0
argument_list|,
literal|0.0
argument_list|,
operator|-
literal|40.0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mousePressEvent
name|void
name|GLWidget
operator|::
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|lastPos
operator|=
name|event
operator|->
name|pos
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mouseMoveEvent
name|void
name|GLWidget
operator|::
name|mouseMoveEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|int
name|dx
init|=
name|event
operator|->
name|x
argument_list|()
operator|-
name|lastPos
operator|.
name|x
argument_list|()
decl_stmt|;
name|int
name|dy
init|=
name|event
operator|->
name|y
argument_list|()
operator|-
name|lastPos
operator|.
name|y
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|->
name|buttons
argument_list|()
operator|&
name|Qt
operator|::
name|LeftButton
condition|)
block|{
name|setXRotation
argument_list|(
name|xRot
operator|+
literal|8
operator|*
name|dy
argument_list|)
expr_stmt|;
name|setYRotation
argument_list|(
name|yRot
operator|+
literal|8
operator|*
name|dx
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|buttons
argument_list|()
operator|&
name|Qt
operator|::
name|RightButton
condition|)
block|{
name|setXRotation
argument_list|(
name|xRot
operator|+
literal|8
operator|*
name|dy
argument_list|)
expr_stmt|;
name|setZRotation
argument_list|(
name|zRot
operator|+
literal|8
operator|*
name|dx
argument_list|)
expr_stmt|;
block|}
name|lastPos
operator|=
name|event
operator|->
name|pos
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|advanceGears
name|void
name|GLWidget
operator|::
name|advanceGears
parameter_list|()
block|{
name|gear1Rot
operator|+=
literal|2
operator|*
literal|16
expr_stmt|;
name|updateGL
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|makeGear
name|GLuint
name|GLWidget
operator|::
name|makeGear
parameter_list|(
specifier|const
name|GLfloat
modifier|*
name|reflectance
parameter_list|,
name|GLdouble
name|innerRadius
parameter_list|,
name|GLdouble
name|outerRadius
parameter_list|,
name|GLdouble
name|thickness
parameter_list|,
name|GLdouble
name|toothSize
parameter_list|,
name|GLint
name|toothCount
parameter_list|)
block|{
specifier|const
name|double
name|Pi
init|=
literal|3.14159265358979323846
decl_stmt|;
name|GLuint
name|list
init|=
name|glGenLists
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|glNewList
argument_list|(
name|list
argument_list|,
name|GL_COMPILE
argument_list|)
expr_stmt|;
name|glMaterialfv
argument_list|(
name|GL_FRONT
argument_list|,
name|GL_AMBIENT_AND_DIFFUSE
argument_list|,
name|reflectance
argument_list|)
expr_stmt|;
name|GLdouble
name|r0
init|=
name|innerRadius
decl_stmt|;
name|GLdouble
name|r1
init|=
name|outerRadius
operator|-
name|toothSize
operator|/
literal|2.0
decl_stmt|;
name|GLdouble
name|r2
init|=
name|outerRadius
operator|+
name|toothSize
operator|/
literal|2.0
decl_stmt|;
name|GLdouble
name|delta
init|=
operator|(
literal|2.0
operator|*
name|Pi
operator|/
name|toothCount
operator|)
operator|/
literal|4.0
decl_stmt|;
name|GLdouble
name|z
init|=
name|thickness
operator|/
literal|2.0
decl_stmt|;
name|int
name|i
decl_stmt|,
name|j
decl_stmt|;
name|glShadeModel
argument_list|(
name|GL_FLAT
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|GLdouble
name|sign
init|=
operator|(
name|i
operator|==
literal|0
operator|)
condition|?
operator|+
literal|1.0
else|:
operator|-
literal|1.0
decl_stmt|;
name|glNormal3d
argument_list|(
literal|0.0
argument_list|,
literal|0.0
argument_list|,
name|sign
argument_list|)
expr_stmt|;
name|glBegin
argument_list|(
name|GL_QUAD_STRIP
argument_list|)
expr_stmt|;
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<=
name|toothCount
condition|;
operator|++
name|j
control|)
block|{
name|GLdouble
name|angle
init|=
literal|2.0
operator|*
name|Pi
operator|*
name|j
operator|/
name|toothCount
decl_stmt|;
name|glVertex3d
argument_list|(
name|r0
operator|*
name|cos
argument_list|(
name|angle
argument_list|)
argument_list|,
name|r0
operator|*
name|sin
argument_list|(
name|angle
argument_list|)
argument_list|,
name|sign
operator|*
name|z
argument_list|)
expr_stmt|;
name|glVertex3d
argument_list|(
name|r1
operator|*
name|cos
argument_list|(
name|angle
argument_list|)
argument_list|,
name|r1
operator|*
name|sin
argument_list|(
name|angle
argument_list|)
argument_list|,
name|sign
operator|*
name|z
argument_list|)
expr_stmt|;
name|glVertex3d
argument_list|(
name|r0
operator|*
name|cos
argument_list|(
name|angle
argument_list|)
argument_list|,
name|r0
operator|*
name|sin
argument_list|(
name|angle
argument_list|)
argument_list|,
name|sign
operator|*
name|z
argument_list|)
expr_stmt|;
name|glVertex3d
argument_list|(
name|r1
operator|*
name|cos
argument_list|(
name|angle
operator|+
literal|3
operator|*
name|delta
argument_list|)
argument_list|,
name|r1
operator|*
name|sin
argument_list|(
name|angle
operator|+
literal|3
operator|*
name|delta
argument_list|)
argument_list|,
name|sign
operator|*
name|z
argument_list|)
expr_stmt|;
block|}
name|glEnd
argument_list|()
expr_stmt|;
name|glBegin
argument_list|(
name|GL_QUADS
argument_list|)
expr_stmt|;
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<
name|toothCount
condition|;
operator|++
name|j
control|)
block|{
name|GLdouble
name|angle
init|=
literal|2.0
operator|*
name|Pi
operator|*
name|j
operator|/
name|toothCount
decl_stmt|;
name|glVertex3d
argument_list|(
name|r1
operator|*
name|cos
argument_list|(
name|angle
argument_list|)
argument_list|,
name|r1
operator|*
name|sin
argument_list|(
name|angle
argument_list|)
argument_list|,
name|sign
operator|*
name|z
argument_list|)
expr_stmt|;
name|glVertex3d
argument_list|(
name|r2
operator|*
name|cos
argument_list|(
name|angle
operator|+
name|delta
argument_list|)
argument_list|,
name|r2
operator|*
name|sin
argument_list|(
name|angle
operator|+
name|delta
argument_list|)
argument_list|,
name|sign
operator|*
name|z
argument_list|)
expr_stmt|;
name|glVertex3d
argument_list|(
name|r2
operator|*
name|cos
argument_list|(
name|angle
operator|+
literal|2
operator|*
name|delta
argument_list|)
argument_list|,
name|r2
operator|*
name|sin
argument_list|(
name|angle
operator|+
literal|2
operator|*
name|delta
argument_list|)
argument_list|,
name|sign
operator|*
name|z
argument_list|)
expr_stmt|;
name|glVertex3d
argument_list|(
name|r1
operator|*
name|cos
argument_list|(
name|angle
operator|+
literal|3
operator|*
name|delta
argument_list|)
argument_list|,
name|r1
operator|*
name|sin
argument_list|(
name|angle
operator|+
literal|3
operator|*
name|delta
argument_list|)
argument_list|,
name|sign
operator|*
name|z
argument_list|)
expr_stmt|;
block|}
name|glEnd
argument_list|()
expr_stmt|;
block|}
name|glBegin
argument_list|(
name|GL_QUAD_STRIP
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<
name|toothCount
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|j
operator|=
literal|0
init|;
name|j
operator|<
literal|2
condition|;
operator|++
name|j
control|)
block|{
name|GLdouble
name|angle
init|=
literal|2.0
operator|*
name|Pi
operator|*
operator|(
name|i
operator|+
operator|(
name|j
operator|/
literal|2.0
operator|)
operator|)
operator|/
name|toothCount
decl_stmt|;
name|GLdouble
name|s1
init|=
name|r1
decl_stmt|;
name|GLdouble
name|s2
init|=
name|r2
decl_stmt|;
if|if
condition|(
name|j
operator|==
literal|1
condition|)
name|qSwap
argument_list|(
name|s1
argument_list|,
name|s2
argument_list|)
expr_stmt|;
name|glNormal3d
argument_list|(
name|cos
argument_list|(
name|angle
argument_list|)
argument_list|,
name|sin
argument_list|(
name|angle
argument_list|)
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|glVertex3d
argument_list|(
name|s1
operator|*
name|cos
argument_list|(
name|angle
argument_list|)
argument_list|,
name|s1
operator|*
name|sin
argument_list|(
name|angle
argument_list|)
argument_list|,
operator|+
name|z
argument_list|)
expr_stmt|;
name|glVertex3d
argument_list|(
name|s1
operator|*
name|cos
argument_list|(
name|angle
argument_list|)
argument_list|,
name|s1
operator|*
name|sin
argument_list|(
name|angle
argument_list|)
argument_list|,
operator|-
name|z
argument_list|)
expr_stmt|;
name|glNormal3d
argument_list|(
name|s2
operator|*
name|sin
argument_list|(
name|angle
operator|+
name|delta
argument_list|)
operator|-
name|s1
operator|*
name|sin
argument_list|(
name|angle
argument_list|)
argument_list|,
name|s1
operator|*
name|cos
argument_list|(
name|angle
argument_list|)
operator|-
name|s2
operator|*
name|cos
argument_list|(
name|angle
operator|+
name|delta
argument_list|)
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|glVertex3d
argument_list|(
name|s2
operator|*
name|cos
argument_list|(
name|angle
operator|+
name|delta
argument_list|)
argument_list|,
name|s2
operator|*
name|sin
argument_list|(
name|angle
operator|+
name|delta
argument_list|)
argument_list|,
operator|+
name|z
argument_list|)
expr_stmt|;
name|glVertex3d
argument_list|(
name|s2
operator|*
name|cos
argument_list|(
name|angle
operator|+
name|delta
argument_list|)
argument_list|,
name|s2
operator|*
name|sin
argument_list|(
name|angle
operator|+
name|delta
argument_list|)
argument_list|,
operator|-
name|z
argument_list|)
expr_stmt|;
block|}
block|}
name|glVertex3d
argument_list|(
name|r1
argument_list|,
literal|0.0
argument_list|,
operator|+
name|z
argument_list|)
expr_stmt|;
name|glVertex3d
argument_list|(
name|r1
argument_list|,
literal|0.0
argument_list|,
operator|-
name|z
argument_list|)
expr_stmt|;
name|glEnd
argument_list|()
expr_stmt|;
name|glShadeModel
argument_list|(
name|GL_SMOOTH
argument_list|)
expr_stmt|;
name|glBegin
argument_list|(
name|GL_QUAD_STRIP
argument_list|)
expr_stmt|;
for|for
control|(
name|i
operator|=
literal|0
init|;
name|i
operator|<=
name|toothCount
condition|;
operator|++
name|i
control|)
block|{
name|GLdouble
name|angle
init|=
name|i
operator|*
literal|2.0
operator|*
name|Pi
operator|/
name|toothCount
decl_stmt|;
name|glNormal3d
argument_list|(
operator|-
name|cos
argument_list|(
name|angle
argument_list|)
argument_list|,
operator|-
name|sin
argument_list|(
name|angle
argument_list|)
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
name|glVertex3d
argument_list|(
name|r0
operator|*
name|cos
argument_list|(
name|angle
argument_list|)
argument_list|,
name|r0
operator|*
name|sin
argument_list|(
name|angle
argument_list|)
argument_list|,
operator|+
name|z
argument_list|)
expr_stmt|;
name|glVertex3d
argument_list|(
name|r0
operator|*
name|cos
argument_list|(
name|angle
argument_list|)
argument_list|,
name|r0
operator|*
name|sin
argument_list|(
name|angle
argument_list|)
argument_list|,
operator|-
name|z
argument_list|)
expr_stmt|;
block|}
name|glEnd
argument_list|()
expr_stmt|;
name|glEndList
argument_list|()
expr_stmt|;
return|return
name|list
return|;
block|}
end_function
begin_function
DECL|function|drawGear
name|void
name|GLWidget
operator|::
name|drawGear
parameter_list|(
name|GLuint
name|gear
parameter_list|,
name|GLdouble
name|dx
parameter_list|,
name|GLdouble
name|dy
parameter_list|,
name|GLdouble
name|dz
parameter_list|,
name|GLdouble
name|angle
parameter_list|)
block|{
name|glPushMatrix
argument_list|()
expr_stmt|;
name|glTranslated
argument_list|(
name|dx
argument_list|,
name|dy
argument_list|,
name|dz
argument_list|)
expr_stmt|;
name|glRotated
argument_list|(
name|angle
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|1.0
argument_list|)
expr_stmt|;
name|glCallList
argument_list|(
name|gear
argument_list|)
expr_stmt|;
name|glPopMatrix
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|normalizeAngle
name|void
name|GLWidget
operator|::
name|normalizeAngle
parameter_list|(
name|int
modifier|*
name|angle
parameter_list|)
block|{
while|while
condition|(
operator|*
name|angle
operator|<
literal|0
condition|)
operator|*
name|angle
operator|+=
literal|360
operator|*
literal|16
expr_stmt|;
while|while
condition|(
operator|*
name|angle
operator|>
literal|360
operator|*
literal|16
condition|)
operator|*
name|angle
operator|-=
literal|360
operator|*
literal|16
expr_stmt|;
block|}
end_function
end_unit
