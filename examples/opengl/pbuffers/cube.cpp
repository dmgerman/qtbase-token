begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: http://www.qt-project.org/ ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor **     the names of its contributors may be used to endorse or promote **     products derived from this software without specific prior written **     permission. ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"cube.h"
end_include
begin_include
include|#
directive|include
file|"glwidget.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/QImage>
end_include
begin_include
include|#
directive|include
file|<QtCore/QPropertyAnimation>
end_include
begin_decl_stmt
DECL|variable|FACE_SIZE
specifier|static
specifier|const
name|qreal
name|FACE_SIZE
init|=
literal|0.4
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|speeds
specifier|static
specifier|const
name|qreal
name|speeds
index|[]
init|=
block|{
literal|3.8f
block|,
literal|4.4f
block|,
literal|5.6f
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|amplitudes
specifier|static
specifier|const
name|qreal
name|amplitudes
index|[]
init|=
block|{
literal|2.0f
block|,
literal|2.5f
block|,
literal|3.0f
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|qSetColor
specifier|static
specifier|inline
name|void
name|qSetColor
parameter_list|(
name|float
name|colorVec
index|[]
parameter_list|,
name|QColor
name|c
parameter_list|)
block|{
name|colorVec
index|[
literal|0
index|]
operator|=
name|c
operator|.
name|redF
argument_list|()
expr_stmt|;
name|colorVec
index|[
literal|1
index|]
operator|=
name|c
operator|.
name|greenF
argument_list|()
expr_stmt|;
name|colorVec
index|[
literal|2
index|]
operator|=
name|c
operator|.
name|blueF
argument_list|()
expr_stmt|;
name|colorVec
index|[
literal|3
index|]
operator|=
name|c
operator|.
name|alphaF
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|append
name|int
name|Geometry
operator|::
name|append
parameter_list|(
specifier|const
name|QVector3D
modifier|&
name|a
parameter_list|,
specifier|const
name|QVector3D
modifier|&
name|n
parameter_list|,
specifier|const
name|QVector2D
modifier|&
name|t
parameter_list|)
block|{
name|int
name|v
init|=
name|vertices
operator|.
name|count
argument_list|()
decl_stmt|;
name|vertices
operator|.
name|append
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|normals
operator|.
name|append
argument_list|(
name|n
argument_list|)
expr_stmt|;
name|texCoords
operator|.
name|append
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|faces
operator|.
name|append
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|colors
operator|.
name|append
argument_list|(
name|QVector4D
argument_list|(
literal|0.6f
argument_list|,
literal|0.6f
argument_list|,
literal|0.6f
argument_list|,
literal|1.0f
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|v
return|;
block|}
end_function
begin_function
DECL|function|addQuad
name|void
name|Geometry
operator|::
name|addQuad
parameter_list|(
specifier|const
name|QVector3D
modifier|&
name|a
parameter_list|,
specifier|const
name|QVector3D
modifier|&
name|b
parameter_list|,
specifier|const
name|QVector3D
modifier|&
name|c
parameter_list|,
specifier|const
name|QVector3D
modifier|&
name|d
parameter_list|,
specifier|const
name|QVector
argument_list|<
name|QVector2D
argument_list|>
modifier|&
name|tex
parameter_list|)
block|{
name|QVector3D
name|norm
init|=
name|QVector3D
operator|::
name|normal
argument_list|(
name|a
argument_list|,
name|b
argument_list|,
name|c
argument_list|)
decl_stmt|;
comment|// append first triangle
name|int
name|aref
init|=
name|append
argument_list|(
name|a
argument_list|,
name|norm
argument_list|,
name|tex
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
name|append
argument_list|(
name|b
argument_list|,
name|norm
argument_list|,
name|tex
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|int
name|cref
init|=
name|append
argument_list|(
name|c
argument_list|,
name|norm
argument_list|,
name|tex
index|[
literal|2
index|]
argument_list|)
decl_stmt|;
comment|// append second triangle
name|faces
operator|.
name|append
argument_list|(
name|aref
argument_list|)
expr_stmt|;
name|faces
operator|.
name|append
argument_list|(
name|cref
argument_list|)
expr_stmt|;
name|append
argument_list|(
name|d
argument_list|,
name|norm
argument_list|,
name|tex
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|loadArrays
name|void
name|Geometry
operator|::
name|loadArrays
parameter_list|()
specifier|const
block|{
name|glEnableClientState
argument_list|(
name|GL_VERTEX_ARRAY
argument_list|)
expr_stmt|;
name|glEnableClientState
argument_list|(
name|GL_NORMAL_ARRAY
argument_list|)
expr_stmt|;
name|glEnableClientState
argument_list|(
name|GL_TEXTURE_COORD_ARRAY
argument_list|)
expr_stmt|;
name|glEnableClientState
argument_list|(
name|GL_COLOR_ARRAY
argument_list|)
expr_stmt|;
name|glVertexPointer
argument_list|(
literal|3
argument_list|,
name|GL_FLOAT
argument_list|,
literal|0
argument_list|,
name|vertices
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|glNormalPointer
argument_list|(
name|GL_FLOAT
argument_list|,
literal|0
argument_list|,
name|normals
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|glTexCoordPointer
argument_list|(
literal|2
argument_list|,
name|GL_FLOAT
argument_list|,
literal|0
argument_list|,
name|texCoords
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|glColorPointer
argument_list|(
literal|4
argument_list|,
name|GL_FLOAT
argument_list|,
literal|0
argument_list|,
name|colors
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setColors
name|void
name|Geometry
operator|::
name|setColors
parameter_list|(
name|int
name|start
parameter_list|,
name|GLfloat
name|colorArray
index|[
literal|4
index|]
index|[
literal|4
index|]
parameter_list|)
block|{
name|int
name|off
init|=
name|faces
index|[
name|start
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
name|colors
index|[
name|i
operator|+
name|off
index|]
operator|=
name|QVector4D
argument_list|(
name|colorArray
index|[
name|i
index|]
index|[
literal|0
index|]
argument_list|,
name|colorArray
index|[
name|i
index|]
index|[
literal|1
index|]
argument_list|,
name|colorArray
index|[
name|i
index|]
index|[
literal|2
index|]
argument_list|,
name|colorArray
index|[
name|i
index|]
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|Tile
name|Tile
operator|::
name|Tile
parameter_list|(
specifier|const
name|QVector3D
modifier|&
name|loc
parameter_list|)
member_init_list|:
name|location
argument_list|(
name|loc
argument_list|)
member_init_list|,
name|start
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|count
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|useFlatColor
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|geom
argument_list|(
literal|0
argument_list|)
block|{
name|qSetColor
argument_list|(
name|faceColor
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|darkGray
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|setColors
name|void
name|Tile
operator|::
name|setColors
parameter_list|(
name|GLfloat
name|colorArray
index|[
literal|4
index|]
index|[
literal|4
index|]
parameter_list|)
block|{
name|useFlatColor
operator|=
literal|true
expr_stmt|;
name|geom
operator|->
name|setColors
argument_list|(
name|start
argument_list|,
name|colorArray
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qMultMatrix
specifier|static
specifier|inline
name|void
name|qMultMatrix
parameter_list|(
specifier|const
name|QMatrix4x4
modifier|&
name|mat
parameter_list|)
block|{
if|if
condition|(
sizeof|sizeof
argument_list|(
name|qreal
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|GLfloat
argument_list|)
condition|)
name|glMultMatrixf
argument_list|(
operator|(
name|GLfloat
operator|*
operator|)
name|mat
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_OPENGL_ES
elseif|else
if|if
condition|(
sizeof|sizeof
argument_list|(
name|qreal
argument_list|)
operator|==
sizeof|sizeof
argument_list|(
name|GLdouble
argument_list|)
condition|)
name|glMultMatrixd
argument_list|(
operator|(
name|GLdouble
operator|*
operator|)
name|mat
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
else|else
block|{
name|GLfloat
name|fmat
index|[
literal|16
index|]
decl_stmt|;
name|qreal
specifier|const
modifier|*
name|r
init|=
name|mat
operator|.
name|constData
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|16
condition|;
operator|++
name|i
control|)
name|fmat
index|[
name|i
index|]
operator|=
name|r
index|[
name|i
index|]
expr_stmt|;
name|glMultMatrixf
argument_list|(
name|fmat
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|draw
name|void
name|Tile
operator|::
name|draw
parameter_list|()
specifier|const
block|{
name|QMatrix4x4
name|mat
decl_stmt|;
name|mat
operator|.
name|translate
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|mat
operator|.
name|rotate
argument_list|(
name|orientation
argument_list|)
expr_stmt|;
name|glMatrixMode
argument_list|(
name|GL_MODELVIEW
argument_list|)
expr_stmt|;
name|glPushMatrix
argument_list|()
expr_stmt|;
name|qMultMatrix
argument_list|(
name|mat
argument_list|)
expr_stmt|;
name|glMaterialfv
argument_list|(
name|GL_FRONT_AND_BACK
argument_list|,
name|GL_AMBIENT_AND_DIFFUSE
argument_list|,
name|faceColor
argument_list|)
expr_stmt|;
name|glDrawElements
argument_list|(
name|GL_TRIANGLES
argument_list|,
name|count
argument_list|,
name|GL_UNSIGNED_SHORT
argument_list|,
name|geom
operator|->
name|indices
argument_list|()
operator|+
name|start
argument_list|)
expr_stmt|;
name|glPopMatrix
argument_list|()
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|TileBuilder
name|TileBuilder
operator|::
name|TileBuilder
parameter_list|(
name|Geometry
modifier|*
name|g
parameter_list|,
name|qreal
name|depth
parameter_list|,
name|qreal
name|size
parameter_list|)
member_init_list|:
name|verts
argument_list|(
literal|4
argument_list|)
member_init_list|,
name|tex
argument_list|(
literal|4
argument_list|)
member_init_list|,
name|start
argument_list|(
name|g
operator|->
name|count
argument_list|()
argument_list|)
member_init_list|,
name|count
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|geom
argument_list|(
name|g
argument_list|)
block|{
comment|// front face - make a square with bottom-left at origin
name|verts
index|[
name|br
index|]
operator|.
name|setX
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|verts
index|[
name|tr
index|]
operator|.
name|setX
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|verts
index|[
name|tr
index|]
operator|.
name|setY
argument_list|(
name|size
argument_list|)
expr_stmt|;
name|verts
index|[
name|tl
index|]
operator|.
name|setY
argument_list|(
name|size
argument_list|)
expr_stmt|;
comment|// these vert numbers are good for the tex-coords
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
name|tex
index|[
name|i
index|]
operator|=
name|verts
index|[
name|i
index|]
operator|.
name|toVector2D
argument_list|()
expr_stmt|;
comment|// now move verts half cube width across so cube is centered on origin
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
name|verts
index|[
name|i
index|]
operator|-=
name|QVector3D
argument_list|(
name|size
operator|/
literal|2.0f
argument_list|,
name|size
operator|/
literal|2.0f
argument_list|,
operator|-
name|depth
argument_list|)
expr_stmt|;
comment|// add the front face
name|g
operator|->
name|addQuad
argument_list|(
name|verts
index|[
name|bl
index|]
argument_list|,
name|verts
index|[
name|br
index|]
argument_list|,
name|verts
index|[
name|tr
index|]
argument_list|,
name|verts
index|[
name|tl
index|]
argument_list|,
name|tex
argument_list|)
expr_stmt|;
name|count
operator|=
name|g
operator|->
name|count
argument_list|()
operator|-
name|start
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|initialize
name|void
name|TileBuilder
operator|::
name|initialize
parameter_list|(
name|Tile
modifier|*
name|tile
parameter_list|)
specifier|const
block|{
name|tile
operator|->
name|start
operator|=
name|start
expr_stmt|;
name|tile
operator|->
name|count
operator|=
name|count
expr_stmt|;
name|tile
operator|->
name|geom
operator|=
name|geom
expr_stmt|;
name|qSetColor
argument_list|(
name|tile
operator|->
name|faceColor
argument_list|,
name|color
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|newTile
name|Tile
modifier|*
name|TileBuilder
operator|::
name|newTile
parameter_list|(
specifier|const
name|QVector3D
modifier|&
name|loc
parameter_list|)
specifier|const
block|{
name|Tile
modifier|*
name|tile
init|=
operator|new
name|Tile
argument_list|(
name|loc
argument_list|)
decl_stmt|;
name|initialize
argument_list|(
name|tile
argument_list|)
expr_stmt|;
return|return
name|tile
return|;
block|}
end_function
begin_constructor
DECL|function|Cube
name|Cube
operator|::
name|Cube
parameter_list|(
specifier|const
name|QVector3D
modifier|&
name|loc
parameter_list|)
member_init_list|:
name|Tile
argument_list|(
name|loc
argument_list|)
member_init_list|,
name|rot
argument_list|(
literal|0.0f
argument_list|)
member_init_list|,
name|r
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|animGroup
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~Cube
name|Cube
operator|::
name|~
name|Cube
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|setAltitude
name|void
name|Cube
operator|::
name|setAltitude
parameter_list|(
name|qreal
name|a
parameter_list|)
block|{
if|if
condition|(
name|location
operator|.
name|y
argument_list|()
operator|!=
name|a
condition|)
block|{
name|location
operator|.
name|setY
argument_list|(
name|a
argument_list|)
expr_stmt|;
emit|emit
name|changed
argument_list|()
emit|;
block|}
block|}
end_function
begin_function
DECL|function|setRange
name|void
name|Cube
operator|::
name|setRange
parameter_list|(
name|qreal
name|r
parameter_list|)
block|{
if|if
condition|(
name|location
operator|.
name|x
argument_list|()
operator|!=
name|r
condition|)
block|{
name|location
operator|.
name|setX
argument_list|(
name|r
argument_list|)
expr_stmt|;
emit|emit
name|changed
argument_list|()
emit|;
block|}
block|}
end_function
begin_function
DECL|function|setRotation
name|void
name|Cube
operator|::
name|setRotation
parameter_list|(
name|qreal
name|r
parameter_list|)
block|{
if|if
condition|(
name|r
operator|!=
name|rot
condition|)
block|{
name|orientation
operator|=
name|QQuaternion
operator|::
name|fromAxisAndAngle
argument_list|(
name|QVector3D
argument_list|(
literal|1.0f
argument_list|,
literal|1.0f
argument_list|,
literal|1.0f
argument_list|)
argument_list|,
name|r
argument_list|)
expr_stmt|;
emit|emit
name|changed
argument_list|()
emit|;
block|}
block|}
end_function
begin_function
DECL|function|removeBounce
name|void
name|Cube
operator|::
name|removeBounce
parameter_list|()
block|{
operator|delete
name|animGroup
expr_stmt|;
name|animGroup
operator|=
literal|0
expr_stmt|;
operator|delete
name|r
expr_stmt|;
name|r
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|startAnimation
name|void
name|Cube
operator|::
name|startAnimation
parameter_list|()
block|{
if|if
condition|(
name|r
condition|)
block|{
name|r
operator|->
name|start
argument_list|()
expr_stmt|;
name|r
operator|->
name|setCurrentTime
argument_list|(
name|startx
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|animGroup
condition|)
name|animGroup
operator|->
name|start
argument_list|()
expr_stmt|;
if|if
condition|(
name|rtn
condition|)
name|rtn
operator|->
name|start
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setAnimationPaused
name|void
name|Cube
operator|::
name|setAnimationPaused
parameter_list|(
name|bool
name|paused
parameter_list|)
block|{
if|if
condition|(
name|paused
condition|)
block|{
if|if
condition|(
name|r
condition|)
name|r
operator|->
name|pause
argument_list|()
expr_stmt|;
if|if
condition|(
name|animGroup
condition|)
name|animGroup
operator|->
name|pause
argument_list|()
expr_stmt|;
if|if
condition|(
name|rtn
condition|)
name|rtn
operator|->
name|pause
argument_list|()
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|r
condition|)
name|r
operator|->
name|resume
argument_list|()
expr_stmt|;
if|if
condition|(
name|animGroup
condition|)
name|animGroup
operator|->
name|resume
argument_list|()
expr_stmt|;
if|if
condition|(
name|rtn
condition|)
name|rtn
operator|->
name|resume
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_constructor
DECL|function|CubeBuilder
name|CubeBuilder
operator|::
name|CubeBuilder
parameter_list|(
name|Geometry
modifier|*
name|g
parameter_list|,
name|qreal
name|depth
parameter_list|,
name|qreal
name|size
parameter_list|)
member_init_list|:
name|TileBuilder
argument_list|(
name|g
argument_list|,
name|depth
argument_list|)
member_init_list|,
name|ix
argument_list|(
literal|0
argument_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
name|verts
index|[
name|i
index|]
operator|.
name|setZ
argument_list|(
name|size
operator|/
literal|2.0f
argument_list|)
expr_stmt|;
comment|// back face - "extrude" verts down
name|QVector
argument_list|<
name|QVector3D
argument_list|>
name|back
argument_list|(
name|verts
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
name|back
index|[
name|i
index|]
operator|.
name|setZ
argument_list|(
operator|-
name|size
operator|/
literal|2.0f
argument_list|)
expr_stmt|;
comment|// add the back face
name|g
operator|->
name|addQuad
argument_list|(
name|back
index|[
name|br
index|]
argument_list|,
name|back
index|[
name|bl
index|]
argument_list|,
name|back
index|[
name|tl
index|]
argument_list|,
name|back
index|[
name|tr
index|]
argument_list|,
name|tex
argument_list|)
expr_stmt|;
comment|// add the sides
name|g
operator|->
name|addQuad
argument_list|(
name|back
index|[
name|bl
index|]
argument_list|,
name|back
index|[
name|br
index|]
argument_list|,
name|verts
index|[
name|br
index|]
argument_list|,
name|verts
index|[
name|bl
index|]
argument_list|,
name|tex
argument_list|)
expr_stmt|;
name|g
operator|->
name|addQuad
argument_list|(
name|back
index|[
name|br
index|]
argument_list|,
name|back
index|[
name|tr
index|]
argument_list|,
name|verts
index|[
name|tr
index|]
argument_list|,
name|verts
index|[
name|br
index|]
argument_list|,
name|tex
argument_list|)
expr_stmt|;
name|g
operator|->
name|addQuad
argument_list|(
name|back
index|[
name|tr
index|]
argument_list|,
name|back
index|[
name|tl
index|]
argument_list|,
name|verts
index|[
name|tl
index|]
argument_list|,
name|verts
index|[
name|tr
index|]
argument_list|,
name|tex
argument_list|)
expr_stmt|;
name|g
operator|->
name|addQuad
argument_list|(
name|back
index|[
name|tl
index|]
argument_list|,
name|back
index|[
name|bl
index|]
argument_list|,
name|verts
index|[
name|bl
index|]
argument_list|,
name|verts
index|[
name|tl
index|]
argument_list|,
name|tex
argument_list|)
expr_stmt|;
name|count
operator|=
name|g
operator|->
name|count
argument_list|()
operator|-
name|start
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|newCube
name|Cube
modifier|*
name|CubeBuilder
operator|::
name|newCube
parameter_list|(
specifier|const
name|QVector3D
modifier|&
name|loc
parameter_list|)
specifier|const
block|{
name|Cube
modifier|*
name|c
init|=
operator|new
name|Cube
argument_list|(
name|loc
argument_list|)
decl_stmt|;
name|initialize
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|qreal
name|d
init|=
literal|4000.0f
decl_stmt|;
name|qreal
name|d3
init|=
name|d
operator|/
literal|3.0f
decl_stmt|;
comment|// Animate movement from left to right
name|c
operator|->
name|r
operator|=
operator|new
name|QPropertyAnimation
argument_list|(
name|c
argument_list|,
literal|"range"
argument_list|)
expr_stmt|;
name|c
operator|->
name|r
operator|->
name|setStartValue
argument_list|(
operator|-
literal|1.3f
argument_list|)
expr_stmt|;
name|c
operator|->
name|r
operator|->
name|setEndValue
argument_list|(
literal|1.3f
argument_list|)
expr_stmt|;
name|c
operator|->
name|startx
operator|=
name|ix
operator|*
name|d3
operator|*
literal|3.0f
expr_stmt|;
name|c
operator|->
name|r
operator|->
name|setDuration
argument_list|(
name|d
operator|*
literal|4.0f
argument_list|)
expr_stmt|;
name|c
operator|->
name|r
operator|->
name|setLoopCount
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|c
operator|->
name|r
operator|->
name|setEasingCurve
argument_list|(
name|QEasingCurve
argument_list|(
name|QEasingCurve
operator|::
name|CosineCurve
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|->
name|animGroup
operator|=
operator|new
name|QSequentialAnimationGroup
argument_list|(
name|c
argument_list|)
expr_stmt|;
comment|// Animate movement from bottom to top
name|QPropertyAnimation
modifier|*
name|a_up
init|=
operator|new
name|QPropertyAnimation
argument_list|(
name|c
argument_list|,
literal|"altitude"
argument_list|,
name|c
operator|->
name|animGroup
argument_list|)
decl_stmt|;
name|a_up
operator|->
name|setEndValue
argument_list|(
name|loc
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|a_up
operator|->
name|setStartValue
argument_list|(
name|loc
operator|.
name|y
argument_list|()
operator|+
name|amplitudes
index|[
name|ix
index|]
argument_list|)
expr_stmt|;
name|a_up
operator|->
name|setDuration
argument_list|(
name|d
operator|/
name|speeds
index|[
name|ix
index|]
argument_list|)
expr_stmt|;
name|a_up
operator|->
name|setLoopCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|a_up
operator|->
name|setEasingCurve
argument_list|(
name|QEasingCurve
argument_list|(
name|QEasingCurve
operator|::
name|InQuad
argument_list|)
argument_list|)
expr_stmt|;
comment|// Animate movement from top to bottom
name|QPropertyAnimation
modifier|*
name|a_down
init|=
operator|new
name|QPropertyAnimation
argument_list|(
name|c
argument_list|,
literal|"altitude"
argument_list|,
name|c
operator|->
name|animGroup
argument_list|)
decl_stmt|;
name|a_down
operator|->
name|setEndValue
argument_list|(
name|loc
operator|.
name|y
argument_list|()
operator|+
name|amplitudes
index|[
name|ix
index|]
argument_list|)
expr_stmt|;
name|a_down
operator|->
name|setStartValue
argument_list|(
name|loc
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|a_down
operator|->
name|setDuration
argument_list|(
name|d
operator|/
name|speeds
index|[
name|ix
index|]
argument_list|)
expr_stmt|;
name|a_down
operator|->
name|setLoopCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|a_down
operator|->
name|setEasingCurve
argument_list|(
name|QEasingCurve
argument_list|(
name|QEasingCurve
operator|::
name|OutQuad
argument_list|)
argument_list|)
expr_stmt|;
name|c
operator|->
name|animGroup
operator|->
name|addAnimation
argument_list|(
name|a_up
argument_list|)
expr_stmt|;
name|c
operator|->
name|animGroup
operator|->
name|addAnimation
argument_list|(
name|a_down
argument_list|)
expr_stmt|;
name|c
operator|->
name|animGroup
operator|->
name|setLoopCount
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// Animate rotation
name|c
operator|->
name|rtn
operator|=
operator|new
name|QPropertyAnimation
argument_list|(
name|c
argument_list|,
literal|"rotation"
argument_list|)
expr_stmt|;
name|c
operator|->
name|rtn
operator|->
name|setStartValue
argument_list|(
name|c
operator|->
name|rot
argument_list|)
expr_stmt|;
name|c
operator|->
name|rtn
operator|->
name|setEndValue
argument_list|(
literal|359.0f
argument_list|)
expr_stmt|;
name|c
operator|->
name|rtn
operator|->
name|setDuration
argument_list|(
name|d
operator|*
literal|2.0f
argument_list|)
expr_stmt|;
name|c
operator|->
name|rtn
operator|->
name|setLoopCount
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|c
operator|->
name|rtn
operator|->
name|setDuration
argument_list|(
name|d
operator|/
literal|2
argument_list|)
expr_stmt|;
name|ix
operator|=
operator|(
name|ix
operator|+
literal|1
operator|)
operator|%
literal|3
expr_stmt|;
return|return
name|c
return|;
block|}
end_function
end_unit
