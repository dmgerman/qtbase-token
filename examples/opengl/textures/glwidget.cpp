begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor **     the names of its contributors may be used to endorse or promote **     products derived from this software without specific prior written **     permission. ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtWidgets>
end_include
begin_include
include|#
directive|include
file|<QtOpenGL>
end_include
begin_include
include|#
directive|include
file|"glwidget.h"
end_include
begin_constructor
DECL|function|GLWidget
name|GLWidget
operator|::
name|GLWidget
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
name|QGLWidget
modifier|*
name|shareWidget
parameter_list|)
member_init_list|:
name|QGLWidget
argument_list|(
name|parent
argument_list|,
name|shareWidget
argument_list|)
block|{
name|clearColor
operator|=
name|Qt
operator|::
name|black
expr_stmt|;
name|xRot
operator|=
literal|0
expr_stmt|;
name|yRot
operator|=
literal|0
expr_stmt|;
name|zRot
operator|=
literal|0
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_ES_2
name|program
operator|=
literal|0
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_destructor
DECL|function|~GLWidget
name|GLWidget
operator|::
name|~
name|GLWidget
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|minimumSizeHint
name|QSize
name|GLWidget
operator|::
name|minimumSizeHint
parameter_list|()
specifier|const
block|{
return|return
name|QSize
argument_list|(
literal|50
argument_list|,
literal|50
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|sizeHint
name|QSize
name|GLWidget
operator|::
name|sizeHint
parameter_list|()
specifier|const
block|{
return|return
name|QSize
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|rotateBy
name|void
name|GLWidget
operator|::
name|rotateBy
parameter_list|(
name|int
name|xAngle
parameter_list|,
name|int
name|yAngle
parameter_list|,
name|int
name|zAngle
parameter_list|)
block|{
name|xRot
operator|+=
name|xAngle
expr_stmt|;
name|yRot
operator|+=
name|yAngle
expr_stmt|;
name|zRot
operator|+=
name|zAngle
expr_stmt|;
name|updateGL
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setClearColor
name|void
name|GLWidget
operator|::
name|setClearColor
parameter_list|(
specifier|const
name|QColor
modifier|&
name|color
parameter_list|)
block|{
name|clearColor
operator|=
name|color
expr_stmt|;
name|updateGL
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initializeGL
name|void
name|GLWidget
operator|::
name|initializeGL
parameter_list|()
block|{
name|makeObject
argument_list|()
expr_stmt|;
name|glEnable
argument_list|(
name|GL_DEPTH_TEST
argument_list|)
expr_stmt|;
name|glEnable
argument_list|(
name|GL_CULL_FACE
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_OPENGL_ES_2
name|glEnable
argument_list|(
name|GL_TEXTURE_2D
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_OPENGL_ES_2
DECL|macro|PROGRAM_VERTEX_ATTRIBUTE
define|#
directive|define
name|PROGRAM_VERTEX_ATTRIBUTE
value|0
DECL|macro|PROGRAM_TEXCOORD_ATTRIBUTE
define|#
directive|define
name|PROGRAM_TEXCOORD_ATTRIBUTE
value|1
name|QGLShader
modifier|*
name|vshader
init|=
operator|new
name|QGLShader
argument_list|(
name|QGLShader
operator|::
name|Vertex
argument_list|,
name|this
argument_list|)
decl_stmt|;
specifier|const
name|char
modifier|*
name|vsrc
init|=
literal|"attribute highp vec4 vertex;\n"
literal|"attribute mediump vec4 texCoord;\n"
literal|"varying mediump vec4 texc;\n"
literal|"uniform mediump mat4 matrix;\n"
literal|"void main(void)\n"
literal|"{\n"
literal|"    gl_Position = matrix * vertex;\n"
literal|"    texc = texCoord;\n"
literal|"}\n"
decl_stmt|;
name|vshader
operator|->
name|compileSourceCode
argument_list|(
name|vsrc
argument_list|)
expr_stmt|;
name|QGLShader
modifier|*
name|fshader
init|=
operator|new
name|QGLShader
argument_list|(
name|QGLShader
operator|::
name|Fragment
argument_list|,
name|this
argument_list|)
decl_stmt|;
specifier|const
name|char
modifier|*
name|fsrc
init|=
literal|"uniform sampler2D texture;\n"
literal|"varying mediump vec4 texc;\n"
literal|"void main(void)\n"
literal|"{\n"
literal|"    gl_FragColor = texture2D(texture, texc.st);\n"
literal|"}\n"
decl_stmt|;
name|fshader
operator|->
name|compileSourceCode
argument_list|(
name|fsrc
argument_list|)
expr_stmt|;
name|program
operator|=
operator|new
name|QGLShaderProgram
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|program
operator|->
name|addShader
argument_list|(
name|vshader
argument_list|)
expr_stmt|;
name|program
operator|->
name|addShader
argument_list|(
name|fshader
argument_list|)
expr_stmt|;
name|program
operator|->
name|bindAttributeLocation
argument_list|(
literal|"vertex"
argument_list|,
name|PROGRAM_VERTEX_ATTRIBUTE
argument_list|)
expr_stmt|;
name|program
operator|->
name|bindAttributeLocation
argument_list|(
literal|"texCoord"
argument_list|,
name|PROGRAM_TEXCOORD_ATTRIBUTE
argument_list|)
expr_stmt|;
name|program
operator|->
name|link
argument_list|()
expr_stmt|;
name|program
operator|->
name|bind
argument_list|()
expr_stmt|;
name|program
operator|->
name|setUniformValue
argument_list|(
literal|"texture"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|paintGL
name|void
name|GLWidget
operator|::
name|paintGL
parameter_list|()
block|{
name|qglClearColor
argument_list|(
name|clearColor
argument_list|)
expr_stmt|;
name|glClear
argument_list|(
name|GL_COLOR_BUFFER_BIT
operator||
name|GL_DEPTH_BUFFER_BIT
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
name|glLoadIdentity
argument_list|()
expr_stmt|;
name|glTranslatef
argument_list|(
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
operator|-
literal|10.0f
argument_list|)
expr_stmt|;
name|glRotatef
argument_list|(
name|xRot
operator|/
literal|16.0f
argument_list|,
literal|1.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|glRotatef
argument_list|(
name|yRot
operator|/
literal|16.0f
argument_list|,
literal|0.0f
argument_list|,
literal|1.0f
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|glRotatef
argument_list|(
name|zRot
operator|/
literal|16.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|glVertexPointer
argument_list|(
literal|3
argument_list|,
name|GL_FLOAT
argument_list|,
literal|0
argument_list|,
name|vertices
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|glTexCoordPointer
argument_list|(
literal|2
argument_list|,
name|GL_FLOAT
argument_list|,
literal|0
argument_list|,
name|texCoords
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|glEnableClientState
argument_list|(
name|GL_VERTEX_ARRAY
argument_list|)
expr_stmt|;
name|glEnableClientState
argument_list|(
name|GL_TEXTURE_COORD_ARRAY
argument_list|)
expr_stmt|;
else|#
directive|else
name|QMatrix4x4
name|m
decl_stmt|;
name|m
operator|.
name|ortho
argument_list|(
operator|-
literal|0.5f
argument_list|,
operator|+
literal|0.5f
argument_list|,
operator|+
literal|0.5f
argument_list|,
operator|-
literal|0.5f
argument_list|,
literal|4.0f
argument_list|,
literal|15.0f
argument_list|)
expr_stmt|;
name|m
operator|.
name|translate
argument_list|(
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
operator|-
literal|10.0f
argument_list|)
expr_stmt|;
name|m
operator|.
name|rotate
argument_list|(
name|xRot
operator|/
literal|16.0f
argument_list|,
literal|1.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|m
operator|.
name|rotate
argument_list|(
name|yRot
operator|/
literal|16.0f
argument_list|,
literal|0.0f
argument_list|,
literal|1.0f
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|m
operator|.
name|rotate
argument_list|(
name|zRot
operator|/
literal|16.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|program
operator|->
name|setUniformValue
argument_list|(
literal|"matrix"
argument_list|,
name|m
argument_list|)
expr_stmt|;
name|program
operator|->
name|enableAttributeArray
argument_list|(
name|PROGRAM_VERTEX_ATTRIBUTE
argument_list|)
expr_stmt|;
name|program
operator|->
name|enableAttributeArray
argument_list|(
name|PROGRAM_TEXCOORD_ATTRIBUTE
argument_list|)
expr_stmt|;
name|program
operator|->
name|setAttributeArray
argument_list|(
name|PROGRAM_VERTEX_ATTRIBUTE
argument_list|,
name|vertices
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|program
operator|->
name|setAttributeArray
argument_list|(
name|PROGRAM_TEXCOORD_ATTRIBUTE
argument_list|,
name|texCoords
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
operator|++
name|i
control|)
block|{
name|glBindTexture
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|textures
index|[
name|i
index|]
argument_list|)
expr_stmt|;
name|glDrawArrays
argument_list|(
name|GL_TRIANGLE_FAN
argument_list|,
name|i
operator|*
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|resizeGL
name|void
name|GLWidget
operator|::
name|resizeGL
parameter_list|(
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
block|{
name|int
name|side
init|=
name|qMin
argument_list|(
name|width
argument_list|,
name|height
argument_list|)
decl_stmt|;
name|glViewport
argument_list|(
operator|(
name|width
operator|-
name|side
operator|)
operator|/
literal|2
argument_list|,
operator|(
name|height
operator|-
name|side
operator|)
operator|/
literal|2
argument_list|,
name|side
argument_list|,
name|side
argument_list|)
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
name|glMatrixMode
argument_list|(
name|GL_PROJECTION
argument_list|)
expr_stmt|;
name|glLoadIdentity
argument_list|()
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_OPENGL_ES
name|glOrtho
argument_list|(
operator|-
literal|0.5
argument_list|,
operator|+
literal|0.5
argument_list|,
operator|+
literal|0.5
argument_list|,
operator|-
literal|0.5
argument_list|,
literal|4.0
argument_list|,
literal|15.0
argument_list|)
expr_stmt|;
else|#
directive|else
name|glOrthof
argument_list|(
operator|-
literal|0.5
argument_list|,
operator|+
literal|0.5
argument_list|,
operator|+
literal|0.5
argument_list|,
operator|-
literal|0.5
argument_list|,
literal|4.0
argument_list|,
literal|15.0
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|glMatrixMode
argument_list|(
name|GL_MODELVIEW
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|mousePressEvent
name|void
name|GLWidget
operator|::
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|lastPos
operator|=
name|event
operator|->
name|pos
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mouseMoveEvent
name|void
name|GLWidget
operator|::
name|mouseMoveEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|int
name|dx
init|=
name|event
operator|->
name|x
argument_list|()
operator|-
name|lastPos
operator|.
name|x
argument_list|()
decl_stmt|;
name|int
name|dy
init|=
name|event
operator|->
name|y
argument_list|()
operator|-
name|lastPos
operator|.
name|y
argument_list|()
decl_stmt|;
if|if
condition|(
name|event
operator|->
name|buttons
argument_list|()
operator|&
name|Qt
operator|::
name|LeftButton
condition|)
block|{
name|rotateBy
argument_list|(
literal|8
operator|*
name|dy
argument_list|,
literal|8
operator|*
name|dx
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|buttons
argument_list|()
operator|&
name|Qt
operator|::
name|RightButton
condition|)
block|{
name|rotateBy
argument_list|(
literal|8
operator|*
name|dy
argument_list|,
literal|0
argument_list|,
literal|8
operator|*
name|dx
argument_list|)
expr_stmt|;
block|}
name|lastPos
operator|=
name|event
operator|->
name|pos
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mouseReleaseEvent
name|void
name|GLWidget
operator|::
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
comment|/* event */
parameter_list|)
block|{
emit|emit
name|clicked
argument_list|()
emit|;
block|}
end_function
begin_function
DECL|function|makeObject
name|void
name|GLWidget
operator|::
name|makeObject
parameter_list|()
block|{
specifier|static
specifier|const
name|int
name|coords
index|[
literal|6
index|]
index|[
literal|4
index|]
index|[
literal|3
index|]
init|=
block|{
block|{
block|{
operator|+
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
block|{
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
block|{
operator|-
literal|1
block|,
operator|+
literal|1
block|,
operator|-
literal|1
block|}
block|,
block|{
operator|+
literal|1
block|,
operator|+
literal|1
block|,
operator|-
literal|1
block|}
block|}
block|,
block|{
block|{
operator|+
literal|1
block|,
operator|+
literal|1
block|,
operator|-
literal|1
block|}
block|,
block|{
operator|-
literal|1
block|,
operator|+
literal|1
block|,
operator|-
literal|1
block|}
block|,
block|{
operator|-
literal|1
block|,
operator|+
literal|1
block|,
operator|+
literal|1
block|}
block|,
block|{
operator|+
literal|1
block|,
operator|+
literal|1
block|,
operator|+
literal|1
block|}
block|}
block|,
block|{
block|{
operator|+
literal|1
block|,
operator|-
literal|1
block|,
operator|+
literal|1
block|}
block|,
block|{
operator|+
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
block|{
operator|+
literal|1
block|,
operator|+
literal|1
block|,
operator|-
literal|1
block|}
block|,
block|{
operator|+
literal|1
block|,
operator|+
literal|1
block|,
operator|+
literal|1
block|}
block|}
block|,
block|{
block|{
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
block|{
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|+
literal|1
block|}
block|,
block|{
operator|-
literal|1
block|,
operator|+
literal|1
block|,
operator|+
literal|1
block|}
block|,
block|{
operator|-
literal|1
block|,
operator|+
literal|1
block|,
operator|-
literal|1
block|}
block|}
block|,
block|{
block|{
operator|+
literal|1
block|,
operator|-
literal|1
block|,
operator|+
literal|1
block|}
block|,
block|{
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|+
literal|1
block|}
block|,
block|{
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|,
block|{
operator|+
literal|1
block|,
operator|-
literal|1
block|,
operator|-
literal|1
block|}
block|}
block|,
block|{
block|{
operator|-
literal|1
block|,
operator|-
literal|1
block|,
operator|+
literal|1
block|}
block|,
block|{
operator|+
literal|1
block|,
operator|-
literal|1
block|,
operator|+
literal|1
block|}
block|,
block|{
operator|+
literal|1
block|,
operator|+
literal|1
block|,
operator|+
literal|1
block|}
block|,
block|{
operator|-
literal|1
block|,
operator|+
literal|1
block|,
operator|+
literal|1
block|}
block|}
block|}
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|6
condition|;
operator|++
name|j
control|)
block|{
name|textures
index|[
name|j
index|]
operator|=
name|bindTexture
argument_list|(
name|QPixmap
argument_list|(
name|QString
argument_list|(
literal|":/images/side%1.png"
argument_list|)
operator|.
name|arg
argument_list|(
name|j
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|,
name|GL_TEXTURE_2D
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|4
condition|;
operator|++
name|j
control|)
block|{
name|texCoords
operator|.
name|append
argument_list|(
name|QVector2D
argument_list|(
name|j
operator|==
literal|0
operator|||
name|j
operator|==
literal|3
argument_list|,
name|j
operator|==
literal|0
operator|||
name|j
operator|==
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|vertices
operator|.
name|append
argument_list|(
name|QVector3D
argument_list|(
literal|0.2
operator|*
name|coords
index|[
name|i
index|]
index|[
name|j
index|]
index|[
literal|0
index|]
argument_list|,
literal|0.2
operator|*
name|coords
index|[
name|i
index|]
index|[
name|j
index|]
index|[
literal|1
index|]
argument_list|,
literal|0.2
operator|*
name|coords
index|[
name|i
index|]
index|[
name|j
index|]
index|[
literal|2
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
end_unit
