begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of The Qt Company Ltd nor the names of its **     contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QApplication>
end_include
begin_include
include|#
directive|include
file|<QMainWindow>
end_include
begin_include
include|#
directive|include
file|<QDesktopWidget>
end_include
begin_include
include|#
directive|include
file|<QSurfaceFormat>
end_include
begin_include
include|#
directive|include
file|<QOpenGLContext>
end_include
begin_include
include|#
directive|include
file|"mainwindow.h"
end_include
begin_include
include|#
directive|include
file|"glwidget.h"
end_include
begin_function
DECL|function|getGlString
specifier|static
name|QString
name|getGlString
parameter_list|(
name|QOpenGLFunctions
modifier|*
name|functions
parameter_list|,
name|GLenum
name|name
parameter_list|)
block|{
if|if
condition|(
specifier|const
name|GLubyte
modifier|*
name|p
init|=
name|functions
operator|->
name|glGetString
argument_list|(
name|name
argument_list|)
condition|)
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|p
argument_list|)
argument_list|)
return|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
modifier|*
name|argv
parameter_list|)
block|{
name|QApplication
name|a
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|QSurfaceFormat
name|format
decl_stmt|;
name|format
operator|.
name|setDepthBufferSize
argument_list|(
literal|16
argument_list|)
expr_stmt|;
name|QSurfaceFormat
operator|::
name|setDefaultFormat
argument_list|(
name|format
argument_list|)
expr_stmt|;
comment|// Two top-level windows with two QOpenGLWidget children in each.
comment|// The rendering for the four QOpenGLWidgets happens on four separate threads.
name|GLWidget
name|topLevelGlWidget
decl_stmt|;
name|QPoint
name|pos
init|=
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|availableGeometry
argument_list|(
operator|&
name|topLevelGlWidget
argument_list|)
operator|.
name|topLeft
argument_list|()
operator|+
name|QPoint
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|)
decl_stmt|;
name|topLevelGlWidget
operator|.
name|setWindowTitle
argument_list|(
name|QStringLiteral
argument_list|(
literal|"Threaded QOpenGLWidget example top level"
argument_list|)
argument_list|)
expr_stmt|;
name|topLevelGlWidget
operator|.
name|resize
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|topLevelGlWidget
operator|.
name|move
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|topLevelGlWidget
operator|.
name|show
argument_list|()
expr_stmt|;
specifier|const
name|QString
name|glInfo
init|=
name|getGlString
argument_list|(
name|topLevelGlWidget
operator|.
name|context
argument_list|()
operator|->
name|functions
argument_list|()
argument_list|,
name|GL_VENDOR
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|getGlString
argument_list|(
name|topLevelGlWidget
operator|.
name|context
argument_list|()
operator|->
name|functions
argument_list|()
argument_list|,
name|GL_RENDERER
argument_list|)
decl_stmt|;
specifier|const
name|bool
name|supportsThreading
init|=
operator|!
name|glInfo
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"nouveau"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|&&
operator|!
name|glInfo
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"ANGLE"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|&&
operator|!
name|glInfo
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"llvmpipe"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|toolTip
init|=
name|supportsThreading
condition|?
name|glInfo
else|:
name|glInfo
operator|+
name|QStringLiteral
argument_list|(
literal|"\ndoes not support threaded OpenGL."
argument_list|)
decl_stmt|;
name|topLevelGlWidget
operator|.
name|setToolTip
argument_list|(
name|toolTip
argument_list|)
expr_stmt|;
name|QScopedPointer
argument_list|<
name|MainWindow
argument_list|>
name|mw1
decl_stmt|;
name|QScopedPointer
argument_list|<
name|MainWindow
argument_list|>
name|mw2
decl_stmt|;
if|if
condition|(
operator|!
name|QApplication
operator|::
name|arguments
argument_list|()
operator|.
name|contains
argument_list|(
name|QStringLiteral
argument_list|(
literal|"--single"
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|supportsThreading
condition|)
block|{
name|pos
operator|+=
name|QPoint
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|mw1
operator|.
name|reset
argument_list|(
operator|new
name|MainWindow
argument_list|)
expr_stmt|;
name|mw1
operator|->
name|setToolTip
argument_list|(
name|toolTip
argument_list|)
expr_stmt|;
name|mw1
operator|->
name|move
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|mw1
operator|->
name|setWindowTitle
argument_list|(
name|QStringLiteral
argument_list|(
literal|"Threaded QOpenGLWidget example #1"
argument_list|)
argument_list|)
expr_stmt|;
name|mw1
operator|->
name|show
argument_list|()
expr_stmt|;
name|pos
operator|+=
name|QPoint
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|mw2
operator|.
name|reset
argument_list|(
operator|new
name|MainWindow
argument_list|)
expr_stmt|;
name|mw2
operator|->
name|setToolTip
argument_list|(
name|toolTip
argument_list|)
expr_stmt|;
name|mw2
operator|->
name|move
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|mw2
operator|->
name|setWindowTitle
argument_list|(
name|QStringLiteral
argument_list|(
literal|"Threaded QOpenGLWidget example #2"
argument_list|)
argument_list|)
expr_stmt|;
name|mw2
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|()
operator|<<
name|toolTip
expr_stmt|;
block|}
block|}
return|return
name|a
operator|.
name|exec
argument_list|()
return|;
block|}
end_function
end_unit
