begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names **     of its contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"glwidget.h"
end_include
begin_include
include|#
directive|include
file|<math.h>
end_include
begin_include
include|#
directive|include
file|<QGuiApplication>
end_include
begin_constructor
DECL|function|GLWidget
name|GLWidget
operator|::
name|GLWidget
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QOpenGLWidget
argument_list|(
name|parent
argument_list|)
block|{
name|setMinimumSize
argument_list|(
literal|300
argument_list|,
literal|250
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
operator|&
name|QOpenGLWidget
operator|::
name|aboutToCompose
argument_list|,
name|this
argument_list|,
operator|&
name|GLWidget
operator|::
name|onAboutToCompose
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
operator|&
name|QOpenGLWidget
operator|::
name|frameSwapped
argument_list|,
name|this
argument_list|,
operator|&
name|GLWidget
operator|::
name|onFrameSwapped
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
operator|&
name|QOpenGLWidget
operator|::
name|aboutToResize
argument_list|,
name|this
argument_list|,
operator|&
name|GLWidget
operator|::
name|onAboutToResize
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
operator|&
name|QOpenGLWidget
operator|::
name|resized
argument_list|,
name|this
argument_list|,
operator|&
name|GLWidget
operator|::
name|onResized
argument_list|)
expr_stmt|;
name|m_thread
operator|=
operator|new
name|QThread
expr_stmt|;
name|m_renderer
operator|=
operator|new
name|Renderer
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|m_renderer
operator|->
name|moveToThread
argument_list|(
name|m_thread
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_thread
argument_list|,
operator|&
name|QThread
operator|::
name|finished
argument_list|,
name|m_renderer
argument_list|,
operator|&
name|QObject
operator|::
name|deleteLater
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
operator|&
name|GLWidget
operator|::
name|renderRequested
argument_list|,
name|m_renderer
argument_list|,
operator|&
name|Renderer
operator|::
name|render
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_renderer
argument_list|,
operator|&
name|Renderer
operator|::
name|contextWanted
argument_list|,
name|this
argument_list|,
operator|&
name|GLWidget
operator|::
name|grabContext
argument_list|)
expr_stmt|;
name|m_thread
operator|->
name|start
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~GLWidget
name|GLWidget
operator|::
name|~
name|GLWidget
parameter_list|()
block|{
name|m_renderer
operator|->
name|prepareExit
argument_list|()
expr_stmt|;
name|m_thread
operator|->
name|quit
argument_list|()
expr_stmt|;
name|m_thread
operator|->
name|wait
argument_list|()
expr_stmt|;
operator|delete
name|m_thread
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|onAboutToCompose
name|void
name|GLWidget
operator|::
name|onAboutToCompose
parameter_list|()
block|{
comment|// We are on the gui thread here. Composition is about to
comment|// begin. Wait until the render thread finishes.
name|m_renderer
operator|->
name|lockRenderer
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|onFrameSwapped
name|void
name|GLWidget
operator|::
name|onFrameSwapped
parameter_list|()
block|{
name|m_renderer
operator|->
name|unlockRenderer
argument_list|()
expr_stmt|;
comment|// Assuming a blocking swap, our animation is driven purely by the
comment|// vsync in this example.
emit|emit
name|renderRequested
argument_list|()
emit|;
block|}
end_function
begin_function
DECL|function|onAboutToResize
name|void
name|GLWidget
operator|::
name|onAboutToResize
parameter_list|()
block|{
name|m_renderer
operator|->
name|lockRenderer
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|onResized
name|void
name|GLWidget
operator|::
name|onResized
parameter_list|()
block|{
name|m_renderer
operator|->
name|unlockRenderer
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|grabContext
name|void
name|GLWidget
operator|::
name|grabContext
parameter_list|()
block|{
name|m_renderer
operator|->
name|lockRenderer
argument_list|()
expr_stmt|;
name|QMutexLocker
name|lock
argument_list|(
name|m_renderer
operator|->
name|grabMutex
argument_list|()
argument_list|)
decl_stmt|;
name|context
argument_list|()
operator|->
name|moveToThread
argument_list|(
name|m_thread
argument_list|)
expr_stmt|;
name|m_renderer
operator|->
name|grabCond
argument_list|()
operator|->
name|wakeAll
argument_list|()
expr_stmt|;
name|m_renderer
operator|->
name|unlockRenderer
argument_list|()
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|Renderer
name|Renderer
operator|::
name|Renderer
parameter_list|(
name|GLWidget
modifier|*
name|w
parameter_list|)
member_init_list|:
name|m_inited
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_glwidget
argument_list|(
name|w
argument_list|)
member_init_list|,
name|m_exiting
argument_list|(
literal|false
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|paintQtLogo
name|void
name|Renderer
operator|::
name|paintQtLogo
parameter_list|()
block|{
name|vbo
operator|.
name|bind
argument_list|()
expr_stmt|;
name|program
operator|.
name|setAttributeBuffer
argument_list|(
name|vertexAttr
argument_list|,
name|GL_FLOAT
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|program
operator|.
name|setAttributeBuffer
argument_list|(
name|normalAttr
argument_list|,
name|GL_FLOAT
argument_list|,
name|vertices
operator|.
name|count
argument_list|()
operator|*
literal|3
operator|*
sizeof|sizeof
argument_list|(
name|GLfloat
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|vbo
operator|.
name|release
argument_list|()
expr_stmt|;
name|program
operator|.
name|enableAttributeArray
argument_list|(
name|vertexAttr
argument_list|)
expr_stmt|;
name|program
operator|.
name|enableAttributeArray
argument_list|(
name|normalAttr
argument_list|)
expr_stmt|;
name|glDrawArrays
argument_list|(
name|GL_TRIANGLES
argument_list|,
literal|0
argument_list|,
name|vertices
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|program
operator|.
name|disableAttributeArray
argument_list|(
name|normalAttr
argument_list|)
expr_stmt|;
name|program
operator|.
name|disableAttributeArray
argument_list|(
name|vertexAttr
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Some OpenGL implementations have serious issues with compiling and linking
end_comment
begin_comment
comment|// shaders on multiple threads concurrently. Avoid this.
end_comment
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QMutex
argument_list|,
argument|initMutex
argument_list|)
end_macro
begin_function
DECL|function|render
name|void
name|Renderer
operator|::
name|render
parameter_list|()
block|{
if|if
condition|(
name|m_exiting
condition|)
return|return;
name|QOpenGLContext
modifier|*
name|ctx
init|=
name|m_glwidget
operator|->
name|context
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ctx
condition|)
comment|// QOpenGLWidget not yet initialized
return|return;
comment|// Grab the context.
name|m_grabMutex
operator|.
name|lock
argument_list|()
expr_stmt|;
emit|emit
name|contextWanted
argument_list|()
emit|;
name|m_grabCond
operator|.
name|wait
argument_list|(
operator|&
name|m_grabMutex
argument_list|)
expr_stmt|;
name|QMutexLocker
name|lock
argument_list|(
operator|&
name|m_renderMutex
argument_list|)
decl_stmt|;
name|m_grabMutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
if|if
condition|(
name|m_exiting
condition|)
return|return;
name|Q_ASSERT
argument_list|(
name|ctx
operator|->
name|thread
argument_list|()
operator|==
name|QThread
operator|::
name|currentThread
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make the context (and an offscreen surface) current for this thread. The
comment|// QOpenGLWidget's fbo is bound in the context.
name|m_glwidget
operator|->
name|makeCurrent
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|m_inited
condition|)
block|{
name|m_inited
operator|=
literal|true
expr_stmt|;
name|initializeOpenGLFunctions
argument_list|()
expr_stmt|;
name|QMutexLocker
name|initLock
argument_list|(
name|initMutex
argument_list|()
argument_list|)
decl_stmt|;
name|QOpenGLShader
modifier|*
name|vshader
init|=
operator|new
name|QOpenGLShader
argument_list|(
name|QOpenGLShader
operator|::
name|Vertex
argument_list|,
name|this
argument_list|)
decl_stmt|;
specifier|const
name|char
modifier|*
name|vsrc
init|=
literal|"attribute highp vec4 vertex;\n"
literal|"attribute mediump vec3 normal;\n"
literal|"uniform mediump mat4 matrix;\n"
literal|"varying mediump vec4 color;\n"
literal|"void main(void)\n"
literal|"{\n"
literal|"    vec3 toLight = normalize(vec3(0.0, 0.3, 1.0));\n"
literal|"    float angle = max(dot(normal, toLight), 0.0);\n"
literal|"    vec3 col = vec3(0.40, 1.0, 0.0);\n"
literal|"    color = vec4(col * 0.2 + col * 0.8 * angle, 1.0);\n"
literal|"    color = clamp(color, 0.0, 1.0);\n"
literal|"    gl_Position = matrix * vertex;\n"
literal|"}\n"
decl_stmt|;
name|vshader
operator|->
name|compileSourceCode
argument_list|(
name|vsrc
argument_list|)
expr_stmt|;
name|QOpenGLShader
modifier|*
name|fshader
init|=
operator|new
name|QOpenGLShader
argument_list|(
name|QOpenGLShader
operator|::
name|Fragment
argument_list|,
name|this
argument_list|)
decl_stmt|;
specifier|const
name|char
modifier|*
name|fsrc
init|=
literal|"varying mediump vec4 color;\n"
literal|"void main(void)\n"
literal|"{\n"
literal|"    gl_FragColor = color;\n"
literal|"}\n"
decl_stmt|;
name|fshader
operator|->
name|compileSourceCode
argument_list|(
name|fsrc
argument_list|)
expr_stmt|;
name|program
operator|.
name|addShader
argument_list|(
name|vshader
argument_list|)
expr_stmt|;
name|program
operator|.
name|addShader
argument_list|(
name|fshader
argument_list|)
expr_stmt|;
name|program
operator|.
name|link
argument_list|()
expr_stmt|;
name|vertexAttr
operator|=
name|program
operator|.
name|attributeLocation
argument_list|(
literal|"vertex"
argument_list|)
expr_stmt|;
name|normalAttr
operator|=
name|program
operator|.
name|attributeLocation
argument_list|(
literal|"normal"
argument_list|)
expr_stmt|;
name|matrixUniform
operator|=
name|program
operator|.
name|uniformLocation
argument_list|(
literal|"matrix"
argument_list|)
expr_stmt|;
name|m_fAngle
operator|=
literal|0
expr_stmt|;
name|m_fScale
operator|=
literal|1
expr_stmt|;
name|createGeometry
argument_list|()
expr_stmt|;
name|vbo
operator|.
name|create
argument_list|()
expr_stmt|;
name|vbo
operator|.
name|bind
argument_list|()
expr_stmt|;
specifier|const
name|int
name|verticesSize
init|=
name|vertices
operator|.
name|count
argument_list|()
operator|*
literal|3
operator|*
sizeof|sizeof
argument_list|(
name|GLfloat
argument_list|)
decl_stmt|;
name|vbo
operator|.
name|allocate
argument_list|(
name|verticesSize
operator|*
literal|2
argument_list|)
expr_stmt|;
name|vbo
operator|.
name|write
argument_list|(
literal|0
argument_list|,
name|vertices
operator|.
name|constData
argument_list|()
argument_list|,
name|verticesSize
argument_list|)
expr_stmt|;
name|vbo
operator|.
name|write
argument_list|(
name|verticesSize
argument_list|,
name|normals
operator|.
name|constData
argument_list|()
argument_list|,
name|verticesSize
argument_list|)
expr_stmt|;
name|m_elapsed
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
comment|//qDebug("%p elapsed %lld", QThread::currentThread(), m_elapsed.restart());
name|glClearColor
argument_list|(
literal|0.1f
argument_list|,
literal|0.2f
argument_list|,
literal|0.2f
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|glClear
argument_list|(
name|GL_COLOR_BUFFER_BIT
operator||
name|GL_DEPTH_BUFFER_BIT
argument_list|)
expr_stmt|;
name|glFrontFace
argument_list|(
name|GL_CW
argument_list|)
expr_stmt|;
name|glCullFace
argument_list|(
name|GL_FRONT
argument_list|)
expr_stmt|;
name|glEnable
argument_list|(
name|GL_CULL_FACE
argument_list|)
expr_stmt|;
name|glEnable
argument_list|(
name|GL_DEPTH_TEST
argument_list|)
expr_stmt|;
name|QMatrix4x4
name|modelview
decl_stmt|;
name|modelview
operator|.
name|rotate
argument_list|(
name|m_fAngle
argument_list|,
literal|0.0f
argument_list|,
literal|1.0f
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|modelview
operator|.
name|rotate
argument_list|(
name|m_fAngle
argument_list|,
literal|1.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|modelview
operator|.
name|rotate
argument_list|(
name|m_fAngle
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|1.0f
argument_list|)
expr_stmt|;
name|modelview
operator|.
name|scale
argument_list|(
name|m_fScale
argument_list|)
expr_stmt|;
name|modelview
operator|.
name|translate
argument_list|(
literal|0.0f
argument_list|,
operator|-
literal|0.2f
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|program
operator|.
name|bind
argument_list|()
expr_stmt|;
name|program
operator|.
name|setUniformValue
argument_list|(
name|matrixUniform
argument_list|,
name|modelview
argument_list|)
expr_stmt|;
name|paintQtLogo
argument_list|()
expr_stmt|;
name|program
operator|.
name|release
argument_list|()
expr_stmt|;
name|glDisable
argument_list|(
name|GL_DEPTH_TEST
argument_list|)
expr_stmt|;
name|glDisable
argument_list|(
name|GL_CULL_FACE
argument_list|)
expr_stmt|;
name|m_fAngle
operator|+=
literal|1.0f
expr_stmt|;
comment|// Make no context current on this thread and move the QOpenGLWidget's
comment|// context back to the gui thread.
name|m_glwidget
operator|->
name|doneCurrent
argument_list|()
expr_stmt|;
name|ctx
operator|->
name|moveToThread
argument_list|(
name|qGuiApp
operator|->
name|thread
argument_list|()
argument_list|)
expr_stmt|;
comment|// Schedule composition. Note that this will use QueuedConnection, meaning
comment|// that update() will be invoked on the gui thread.
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
name|m_glwidget
argument_list|,
literal|"update"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|createGeometry
name|void
name|Renderer
operator|::
name|createGeometry
parameter_list|()
block|{
name|vertices
operator|.
name|clear
argument_list|()
expr_stmt|;
name|normals
operator|.
name|clear
argument_list|()
expr_stmt|;
name|qreal
name|x1
init|=
operator|+
literal|0.06f
decl_stmt|;
name|qreal
name|y1
init|=
operator|-
literal|0.14f
decl_stmt|;
name|qreal
name|x2
init|=
operator|+
literal|0.14f
decl_stmt|;
name|qreal
name|y2
init|=
operator|-
literal|0.06f
decl_stmt|;
name|qreal
name|x3
init|=
operator|+
literal|0.08f
decl_stmt|;
name|qreal
name|y3
init|=
operator|+
literal|0.00f
decl_stmt|;
name|qreal
name|x4
init|=
operator|+
literal|0.30f
decl_stmt|;
name|qreal
name|y4
init|=
operator|+
literal|0.22f
decl_stmt|;
name|quad
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|,
name|y2
argument_list|,
name|x2
argument_list|,
name|y1
argument_list|,
name|x1
argument_list|)
expr_stmt|;
name|quad
argument_list|(
name|x3
argument_list|,
name|y3
argument_list|,
name|x4
argument_list|,
name|y4
argument_list|,
name|y4
argument_list|,
name|x4
argument_list|,
name|y3
argument_list|,
name|x3
argument_list|)
expr_stmt|;
name|extrude
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
name|x2
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|extrude
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|,
name|y2
argument_list|,
name|x2
argument_list|)
expr_stmt|;
name|extrude
argument_list|(
name|y2
argument_list|,
name|x2
argument_list|,
name|y1
argument_list|,
name|x1
argument_list|)
expr_stmt|;
name|extrude
argument_list|(
name|y1
argument_list|,
name|x1
argument_list|,
name|x1
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|extrude
argument_list|(
name|x3
argument_list|,
name|y3
argument_list|,
name|x4
argument_list|,
name|y4
argument_list|)
expr_stmt|;
name|extrude
argument_list|(
name|x4
argument_list|,
name|y4
argument_list|,
name|y4
argument_list|,
name|x4
argument_list|)
expr_stmt|;
name|extrude
argument_list|(
name|y4
argument_list|,
name|x4
argument_list|,
name|y3
argument_list|,
name|x3
argument_list|)
expr_stmt|;
specifier|const
name|qreal
name|Pi
init|=
literal|3.14159f
decl_stmt|;
specifier|const
name|int
name|NumSectors
init|=
literal|100
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NumSectors
condition|;
operator|++
name|i
control|)
block|{
name|qreal
name|angle1
init|=
operator|(
name|i
operator|*
literal|2
operator|*
name|Pi
operator|)
operator|/
name|NumSectors
decl_stmt|;
name|qreal
name|x5
init|=
literal|0.30
operator|*
name|sin
argument_list|(
name|angle1
argument_list|)
decl_stmt|;
name|qreal
name|y5
init|=
literal|0.30
operator|*
name|cos
argument_list|(
name|angle1
argument_list|)
decl_stmt|;
name|qreal
name|x6
init|=
literal|0.20
operator|*
name|sin
argument_list|(
name|angle1
argument_list|)
decl_stmt|;
name|qreal
name|y6
init|=
literal|0.20
operator|*
name|cos
argument_list|(
name|angle1
argument_list|)
decl_stmt|;
name|qreal
name|angle2
init|=
operator|(
operator|(
name|i
operator|+
literal|1
operator|)
operator|*
literal|2
operator|*
name|Pi
operator|)
operator|/
name|NumSectors
decl_stmt|;
name|qreal
name|x7
init|=
literal|0.20
operator|*
name|sin
argument_list|(
name|angle2
argument_list|)
decl_stmt|;
name|qreal
name|y7
init|=
literal|0.20
operator|*
name|cos
argument_list|(
name|angle2
argument_list|)
decl_stmt|;
name|qreal
name|x8
init|=
literal|0.30
operator|*
name|sin
argument_list|(
name|angle2
argument_list|)
decl_stmt|;
name|qreal
name|y8
init|=
literal|0.30
operator|*
name|cos
argument_list|(
name|angle2
argument_list|)
decl_stmt|;
name|quad
argument_list|(
name|x5
argument_list|,
name|y5
argument_list|,
name|x6
argument_list|,
name|y6
argument_list|,
name|x7
argument_list|,
name|y7
argument_list|,
name|x8
argument_list|,
name|y8
argument_list|)
expr_stmt|;
name|extrude
argument_list|(
name|x6
argument_list|,
name|y6
argument_list|,
name|x7
argument_list|,
name|y7
argument_list|)
expr_stmt|;
name|extrude
argument_list|(
name|x8
argument_list|,
name|y8
argument_list|,
name|x5
argument_list|,
name|y5
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vertices
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
name|vertices
index|[
name|i
index|]
operator|*=
literal|2.0f
expr_stmt|;
block|}
end_function
begin_function
DECL|function|quad
name|void
name|Renderer
operator|::
name|quad
parameter_list|(
name|qreal
name|x1
parameter_list|,
name|qreal
name|y1
parameter_list|,
name|qreal
name|x2
parameter_list|,
name|qreal
name|y2
parameter_list|,
name|qreal
name|x3
parameter_list|,
name|qreal
name|y3
parameter_list|,
name|qreal
name|x4
parameter_list|,
name|qreal
name|y4
parameter_list|)
block|{
name|vertices
operator|<<
name|QVector3D
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
operator|-
literal|0.05f
argument_list|)
expr_stmt|;
name|vertices
operator|<<
name|QVector3D
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|,
operator|-
literal|0.05f
argument_list|)
expr_stmt|;
name|vertices
operator|<<
name|QVector3D
argument_list|(
name|x4
argument_list|,
name|y4
argument_list|,
operator|-
literal|0.05f
argument_list|)
expr_stmt|;
name|vertices
operator|<<
name|QVector3D
argument_list|(
name|x3
argument_list|,
name|y3
argument_list|,
operator|-
literal|0.05f
argument_list|)
expr_stmt|;
name|vertices
operator|<<
name|QVector3D
argument_list|(
name|x4
argument_list|,
name|y4
argument_list|,
operator|-
literal|0.05f
argument_list|)
expr_stmt|;
name|vertices
operator|<<
name|QVector3D
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|,
operator|-
literal|0.05f
argument_list|)
expr_stmt|;
name|QVector3D
name|n
init|=
name|QVector3D
operator|::
name|normal
argument_list|(
name|QVector3D
argument_list|(
name|x2
operator|-
name|x1
argument_list|,
name|y2
operator|-
name|y1
argument_list|,
literal|0.0f
argument_list|)
argument_list|,
name|QVector3D
argument_list|(
name|x4
operator|-
name|x1
argument_list|,
name|y4
operator|-
name|y1
argument_list|,
literal|0.0f
argument_list|)
argument_list|)
decl_stmt|;
name|normals
operator|<<
name|n
expr_stmt|;
name|normals
operator|<<
name|n
expr_stmt|;
name|normals
operator|<<
name|n
expr_stmt|;
name|normals
operator|<<
name|n
expr_stmt|;
name|normals
operator|<<
name|n
expr_stmt|;
name|normals
operator|<<
name|n
expr_stmt|;
name|vertices
operator|<<
name|QVector3D
argument_list|(
name|x4
argument_list|,
name|y4
argument_list|,
literal|0.05f
argument_list|)
expr_stmt|;
name|vertices
operator|<<
name|QVector3D
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|,
literal|0.05f
argument_list|)
expr_stmt|;
name|vertices
operator|<<
name|QVector3D
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
literal|0.05f
argument_list|)
expr_stmt|;
name|vertices
operator|<<
name|QVector3D
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|,
literal|0.05f
argument_list|)
expr_stmt|;
name|vertices
operator|<<
name|QVector3D
argument_list|(
name|x4
argument_list|,
name|y4
argument_list|,
literal|0.05f
argument_list|)
expr_stmt|;
name|vertices
operator|<<
name|QVector3D
argument_list|(
name|x3
argument_list|,
name|y3
argument_list|,
literal|0.05f
argument_list|)
expr_stmt|;
name|n
operator|=
name|QVector3D
operator|::
name|normal
argument_list|(
name|QVector3D
argument_list|(
name|x2
operator|-
name|x4
argument_list|,
name|y2
operator|-
name|y4
argument_list|,
literal|0.0f
argument_list|)
argument_list|,
name|QVector3D
argument_list|(
name|x1
operator|-
name|x4
argument_list|,
name|y1
operator|-
name|y4
argument_list|,
literal|0.0f
argument_list|)
argument_list|)
expr_stmt|;
name|normals
operator|<<
name|n
expr_stmt|;
name|normals
operator|<<
name|n
expr_stmt|;
name|normals
operator|<<
name|n
expr_stmt|;
name|normals
operator|<<
name|n
expr_stmt|;
name|normals
operator|<<
name|n
expr_stmt|;
name|normals
operator|<<
name|n
expr_stmt|;
block|}
end_function
begin_function
DECL|function|extrude
name|void
name|Renderer
operator|::
name|extrude
parameter_list|(
name|qreal
name|x1
parameter_list|,
name|qreal
name|y1
parameter_list|,
name|qreal
name|x2
parameter_list|,
name|qreal
name|y2
parameter_list|)
block|{
name|vertices
operator|<<
name|QVector3D
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
operator|+
literal|0.05f
argument_list|)
expr_stmt|;
name|vertices
operator|<<
name|QVector3D
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|,
operator|+
literal|0.05f
argument_list|)
expr_stmt|;
name|vertices
operator|<<
name|QVector3D
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
operator|-
literal|0.05f
argument_list|)
expr_stmt|;
name|vertices
operator|<<
name|QVector3D
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|,
operator|-
literal|0.05f
argument_list|)
expr_stmt|;
name|vertices
operator|<<
name|QVector3D
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|,
operator|-
literal|0.05f
argument_list|)
expr_stmt|;
name|vertices
operator|<<
name|QVector3D
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|,
operator|+
literal|0.05f
argument_list|)
expr_stmt|;
name|QVector3D
name|n
init|=
name|QVector3D
operator|::
name|normal
argument_list|(
name|QVector3D
argument_list|(
name|x2
operator|-
name|x1
argument_list|,
name|y2
operator|-
name|y1
argument_list|,
literal|0.0f
argument_list|)
argument_list|,
name|QVector3D
argument_list|(
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
operator|-
literal|0.1f
argument_list|)
argument_list|)
decl_stmt|;
name|normals
operator|<<
name|n
expr_stmt|;
name|normals
operator|<<
name|n
expr_stmt|;
name|normals
operator|<<
name|n
expr_stmt|;
name|normals
operator|<<
name|n
expr_stmt|;
name|normals
operator|<<
name|n
expr_stmt|;
name|normals
operator|<<
name|n
expr_stmt|;
block|}
end_function
end_unit
