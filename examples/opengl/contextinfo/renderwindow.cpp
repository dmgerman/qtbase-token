begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of The Qt Company Ltd nor the names of its **     contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"renderwindow.h"
end_include
begin_include
include|#
directive|include
file|<QTimer>
end_include
begin_include
include|#
directive|include
file|<QMatrix4x4>
end_include
begin_include
include|#
directive|include
file|<QOpenGLContext>
end_include
begin_include
include|#
directive|include
file|<QOpenGLShaderProgram>
end_include
begin_include
include|#
directive|include
file|<QOpenGLFunctions>
end_include
begin_constructor
DECL|function|RenderWindow
name|RenderWindow
operator|::
name|RenderWindow
parameter_list|(
specifier|const
name|QSurfaceFormat
modifier|&
name|format
parameter_list|)
member_init_list|:
name|m_context
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_initialized
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_forceGLSL110
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_angle
argument_list|(
literal|0.0f
argument_list|)
block|{
name|setSurfaceType
argument_list|(
name|QWindow
operator|::
name|OpenGLSurface
argument_list|)
expr_stmt|;
name|setFormat
argument_list|(
name|format
argument_list|)
expr_stmt|;
name|m_context
operator|=
operator|new
name|QOpenGLContext
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|m_context
operator|->
name|setFormat
argument_list|(
name|requestedFormat
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_context
operator|->
name|create
argument_list|()
condition|)
block|{
operator|delete
name|m_context
expr_stmt|;
name|m_context
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_constructor
begin_function
DECL|function|exposeEvent
name|void
name|RenderWindow
operator|::
name|exposeEvent
parameter_list|(
name|QExposeEvent
modifier|*
parameter_list|)
block|{
if|if
condition|(
name|isExposed
argument_list|()
condition|)
name|render
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|// ES needs the precision qualifiers.
end_comment
begin_comment
comment|// On desktop GL QOpenGLShaderProgram inserts dummy defines for highp/mediump/lowp.
end_comment
begin_decl_stmt
DECL|variable|vertexShaderSource110
specifier|static
specifier|const
name|char
modifier|*
name|vertexShaderSource110
init|=
literal|"attribute highp vec4 posAttr;\n"
literal|"attribute lowp vec4 colAttr;\n"
literal|"varying lowp vec4 col;\n"
literal|"uniform highp mat4 matrix;\n"
literal|"void main() {\n"
literal|"   col = colAttr;\n"
literal|"   gl_Position = matrix * posAttr;\n"
literal|"}\n"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|fragmentShaderSource110
specifier|static
specifier|const
name|char
modifier|*
name|fragmentShaderSource110
init|=
literal|"varying lowp vec4 col;\n"
literal|"void main() {\n"
literal|"   gl_FragColor = col;\n"
literal|"}\n"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|vertexShaderSource
specifier|static
specifier|const
name|char
modifier|*
name|vertexShaderSource
init|=
literal|"#version 150\n"
literal|"in vec4 posAttr;\n"
literal|"in vec4 colAttr;\n"
literal|"out vec4 col;\n"
literal|"uniform mat4 matrix;\n"
literal|"void main() {\n"
literal|"   col = colAttr;\n"
literal|"   gl_Position = matrix * posAttr;\n"
literal|"}\n"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|fragmentShaderSource
specifier|static
specifier|const
name|char
modifier|*
name|fragmentShaderSource
init|=
literal|"#version 150\n"
literal|"in vec4 col;\n"
literal|"out vec4 fragColor;\n"
literal|"void main() {\n"
literal|"   fragColor = col;\n"
literal|"}\n"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|vertices
specifier|static
name|GLfloat
name|vertices
index|[]
init|=
block|{
literal|0.0f
block|,
literal|0.707f
block|,
operator|-
literal|0.5f
block|,
operator|-
literal|0.5f
block|,
literal|0.5f
block|,
operator|-
literal|0.5f
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|colors
specifier|static
name|GLfloat
name|colors
index|[]
init|=
block|{
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|0.0f
block|,
literal|1.0f
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|init
name|void
name|RenderWindow
operator|::
name|init
parameter_list|()
block|{
name|m_program
operator|=
operator|new
name|QOpenGLShaderProgram
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|QSurfaceFormat
name|format
init|=
name|m_context
operator|->
name|format
argument_list|()
decl_stmt|;
name|bool
name|useNewStyleShader
init|=
name|format
operator|.
name|profile
argument_list|()
operator|==
name|QSurfaceFormat
operator|::
name|CoreProfile
decl_stmt|;
comment|// Try to handle 3.0& 3.1 that do not have the core/compatibility profile concept 3.2+ has.
comment|// This may still fail since version 150 (3.2) is specified in the sources but it's worth a try.
if|if
condition|(
name|format
operator|.
name|renderableType
argument_list|()
operator|==
name|QSurfaceFormat
operator|::
name|OpenGL
operator|&&
name|format
operator|.
name|majorVersion
argument_list|()
operator|==
literal|3
operator|&&
name|format
operator|.
name|minorVersion
argument_list|()
operator|<=
literal|1
condition|)
name|useNewStyleShader
operator|=
operator|!
name|format
operator|.
name|testOption
argument_list|(
name|QSurfaceFormat
operator|::
name|DeprecatedFunctions
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_forceGLSL110
condition|)
name|useNewStyleShader
operator|=
literal|false
expr_stmt|;
specifier|const
name|char
modifier|*
name|vsrc
init|=
name|useNewStyleShader
condition|?
name|vertexShaderSource
else|:
name|vertexShaderSource110
decl_stmt|;
specifier|const
name|char
modifier|*
name|fsrc
init|=
name|useNewStyleShader
condition|?
name|fragmentShaderSource
else|:
name|fragmentShaderSource110
decl_stmt|;
name|qDebug
argument_list|(
literal|"Using version %s shader"
argument_list|,
name|useNewStyleShader
condition|?
literal|"150"
else|:
literal|"110"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_program
operator|->
name|addShaderFromSourceCode
argument_list|(
name|QOpenGLShader
operator|::
name|Vertex
argument_list|,
name|vsrc
argument_list|)
condition|)
block|{
emit|emit
name|error
argument_list|(
name|m_program
operator|->
name|log
argument_list|()
argument_list|)
emit|;
return|return;
block|}
if|if
condition|(
operator|!
name|m_program
operator|->
name|addShaderFromSourceCode
argument_list|(
name|QOpenGLShader
operator|::
name|Fragment
argument_list|,
name|fsrc
argument_list|)
condition|)
block|{
emit|emit
name|error
argument_list|(
name|m_program
operator|->
name|log
argument_list|()
argument_list|)
emit|;
return|return;
block|}
if|if
condition|(
operator|!
name|m_program
operator|->
name|link
argument_list|()
condition|)
block|{
emit|emit
name|error
argument_list|(
name|m_program
operator|->
name|log
argument_list|()
argument_list|)
emit|;
return|return;
block|}
name|m_posAttr
operator|=
name|m_program
operator|->
name|attributeLocation
argument_list|(
literal|"posAttr"
argument_list|)
expr_stmt|;
name|m_colAttr
operator|=
name|m_program
operator|->
name|attributeLocation
argument_list|(
literal|"colAttr"
argument_list|)
expr_stmt|;
name|m_matrixUniform
operator|=
name|m_program
operator|->
name|uniformLocation
argument_list|(
literal|"matrix"
argument_list|)
expr_stmt|;
name|m_vbo
operator|.
name|create
argument_list|()
expr_stmt|;
name|m_vbo
operator|.
name|bind
argument_list|()
expr_stmt|;
name|m_vbo
operator|.
name|allocate
argument_list|(
name|vertices
argument_list|,
sizeof|sizeof
argument_list|(
name|vertices
argument_list|)
operator|+
sizeof|sizeof
argument_list|(
name|colors
argument_list|)
argument_list|)
expr_stmt|;
name|m_vbo
operator|.
name|write
argument_list|(
sizeof|sizeof
argument_list|(
name|vertices
argument_list|)
argument_list|,
name|colors
argument_list|,
sizeof|sizeof
argument_list|(
name|colors
argument_list|)
argument_list|)
expr_stmt|;
name|m_vbo
operator|.
name|release
argument_list|()
expr_stmt|;
name|QOpenGLVertexArrayObject
operator|::
name|Binder
name|vaoBinder
argument_list|(
operator|&
name|m_vao
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_vao
operator|.
name|isCreated
argument_list|()
condition|)
comment|// have VAO support, use it
name|setupVertexAttribs
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setupVertexAttribs
name|void
name|RenderWindow
operator|::
name|setupVertexAttribs
parameter_list|()
block|{
name|m_vbo
operator|.
name|bind
argument_list|()
expr_stmt|;
name|m_program
operator|->
name|setAttributeBuffer
argument_list|(
name|m_posAttr
argument_list|,
name|GL_FLOAT
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|m_program
operator|->
name|setAttributeBuffer
argument_list|(
name|m_colAttr
argument_list|,
name|GL_FLOAT
argument_list|,
sizeof|sizeof
argument_list|(
name|vertices
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|m_program
operator|->
name|enableAttributeArray
argument_list|(
name|m_posAttr
argument_list|)
expr_stmt|;
name|m_program
operator|->
name|enableAttributeArray
argument_list|(
name|m_colAttr
argument_list|)
expr_stmt|;
name|m_vbo
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|render
name|void
name|RenderWindow
operator|::
name|render
parameter_list|()
block|{
if|if
condition|(
operator|!
name|m_context
operator|->
name|makeCurrent
argument_list|(
name|this
argument_list|)
condition|)
block|{
emit|emit
name|error
argument_list|(
name|tr
argument_list|(
literal|"makeCurrent() failed"
argument_list|)
argument_list|)
emit|;
return|return;
block|}
name|QOpenGLFunctions
modifier|*
name|f
init|=
name|m_context
operator|->
name|functions
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|m_initialized
condition|)
block|{
name|m_initialized
operator|=
literal|true
expr_stmt|;
name|f
operator|->
name|glEnable
argument_list|(
name|GL_DEPTH_TEST
argument_list|)
expr_stmt|;
name|f
operator|->
name|glClearColor
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
emit|emit
name|ready
argument_list|()
emit|;
block|}
if|if
condition|(
operator|!
name|m_vbo
operator|.
name|isCreated
argument_list|()
condition|)
comment|// init() failed, don't bother with trying to render
return|return;
specifier|const
name|qreal
name|retinaScale
init|=
name|devicePixelRatio
argument_list|()
decl_stmt|;
name|f
operator|->
name|glViewport
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|width
argument_list|()
operator|*
name|retinaScale
argument_list|,
name|height
argument_list|()
operator|*
name|retinaScale
argument_list|)
expr_stmt|;
name|f
operator|->
name|glClear
argument_list|(
name|GL_COLOR_BUFFER_BIT
operator||
name|GL_DEPTH_BUFFER_BIT
argument_list|)
expr_stmt|;
name|m_program
operator|->
name|bind
argument_list|()
expr_stmt|;
name|QMatrix4x4
name|matrix
decl_stmt|;
name|matrix
operator|.
name|perspective
argument_list|(
literal|60.0f
argument_list|,
literal|4.0f
operator|/
literal|3.0f
argument_list|,
literal|0.1f
argument_list|,
literal|100.0f
argument_list|)
expr_stmt|;
name|matrix
operator|.
name|translate
argument_list|(
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
operator|-
literal|2.0f
argument_list|)
expr_stmt|;
name|matrix
operator|.
name|rotate
argument_list|(
name|m_angle
argument_list|,
literal|0.0f
argument_list|,
literal|1.0f
argument_list|,
literal|0.0f
argument_list|)
expr_stmt|;
name|m_program
operator|->
name|setUniformValue
argument_list|(
name|m_matrixUniform
argument_list|,
name|matrix
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_vao
operator|.
name|isCreated
argument_list|()
condition|)
name|m_vao
operator|.
name|bind
argument_list|()
expr_stmt|;
else|else
comment|// no VAO support, set the vertex attribute arrays now
name|setupVertexAttribs
argument_list|()
expr_stmt|;
name|f
operator|->
name|glDrawArrays
argument_list|(
name|GL_TRIANGLES
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|m_vao
operator|.
name|release
argument_list|()
expr_stmt|;
name|m_program
operator|->
name|release
argument_list|()
expr_stmt|;
comment|// swapInterval is 1 by default which means that swapBuffers() will (hopefully) block
comment|// and wait for vsync.
name|m_context
operator|->
name|swapBuffers
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|m_angle
operator|+=
literal|1.0f
expr_stmt|;
comment|// Instead of 0 wait a few more milliseconds before rendering again. This is
comment|// only here to make the UI widgets more responsive on slower machines. We
comment|// can afford it since our rendering is so lightweight.
specifier|const
name|int
name|interval
init|=
literal|5
decl_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
name|interval
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|render
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
end_unit
