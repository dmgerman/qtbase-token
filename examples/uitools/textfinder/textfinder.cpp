begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor **     the names of its contributors may be used to endorse or promote **     products derived from this software without specific prior written **     permission. ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtUiTools>
end_include
begin_include
include|#
directive|include
file|<QtGui>
end_include
begin_include
include|#
directive|include
file|"textfinder.h"
end_include
begin_comment
comment|//! [0]
end_comment
begin_constructor
DECL|function|TextFinder
name|TextFinder
operator|::
name|TextFinder
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
block|{
name|QWidget
modifier|*
name|formWidget
init|=
name|loadUiFile
argument_list|()
decl_stmt|;
comment|//! [1]
name|ui_findButton
operator|=
name|findChild
argument_list|<
name|QPushButton
operator|*
argument_list|>
argument_list|(
literal|"findButton"
argument_list|)
expr_stmt|;
name|ui_textEdit
operator|=
name|findChild
argument_list|<
name|QTextEdit
operator|*
argument_list|>
argument_list|(
literal|"textEdit"
argument_list|)
expr_stmt|;
name|ui_lineEdit
operator|=
name|findChild
argument_list|<
name|QLineEdit
operator|*
argument_list|>
argument_list|(
literal|"lineEdit"
argument_list|)
expr_stmt|;
comment|//! [0] //! [1]
comment|//! [2]
name|QMetaObject
operator|::
name|connectSlotsByName
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|//! [2]
comment|//! [3a]
name|loadTextFile
argument_list|()
expr_stmt|;
comment|//! [3a]
comment|//! [3b]
name|QVBoxLayout
modifier|*
name|layout
init|=
operator|new
name|QVBoxLayout
decl_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|formWidget
argument_list|)
expr_stmt|;
name|setLayout
argument_list|(
name|layout
argument_list|)
expr_stmt|;
comment|//! [3b]
comment|//! [3c]
name|setWindowTitle
argument_list|(
name|tr
argument_list|(
literal|"Text Finder"
argument_list|)
argument_list|)
expr_stmt|;
name|isFirstTime
operator|=
literal|true
expr_stmt|;
block|}
end_constructor
begin_comment
comment|//! [3c]
end_comment
begin_comment
comment|//! [4]
end_comment
begin_function
DECL|function|loadUiFile
name|QWidget
modifier|*
name|TextFinder
operator|::
name|loadUiFile
parameter_list|()
block|{
name|QUiLoader
name|loader
decl_stmt|;
name|QFile
name|file
argument_list|(
literal|":/forms/textfinder.ui"
argument_list|)
decl_stmt|;
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|formWidget
init|=
name|loader
operator|.
name|load
argument_list|(
operator|&
name|file
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
return|return
name|formWidget
return|;
block|}
end_function
begin_comment
comment|//! [4]
end_comment
begin_comment
comment|//! [5]
end_comment
begin_function
DECL|function|loadTextFile
name|void
name|TextFinder
operator|::
name|loadTextFile
parameter_list|()
block|{
name|QFile
name|inputFile
argument_list|(
literal|":/forms/input.txt"
argument_list|)
decl_stmt|;
name|inputFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QTextStream
name|in
argument_list|(
operator|&
name|inputFile
argument_list|)
decl_stmt|;
name|QString
name|line
init|=
name|in
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|inputFile
operator|.
name|close
argument_list|()
expr_stmt|;
name|ui_textEdit
operator|->
name|append
argument_list|(
name|line
argument_list|)
expr_stmt|;
name|ui_textEdit
operator|->
name|setUndoRedoEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|ui_textEdit
operator|->
name|setUndoRedoEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [5]
end_comment
begin_comment
comment|//! [6] //! [7]
end_comment
begin_function
DECL|function|on_findButton_clicked
name|void
name|TextFinder
operator|::
name|on_findButton_clicked
parameter_list|()
block|{
name|QString
name|searchString
init|=
name|ui_lineEdit
operator|->
name|text
argument_list|()
decl_stmt|;
name|QTextDocument
modifier|*
name|document
init|=
name|ui_textEdit
operator|->
name|document
argument_list|()
decl_stmt|;
name|bool
name|found
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|isFirstTime
operator|==
literal|false
condition|)
name|document
operator|->
name|undo
argument_list|()
expr_stmt|;
if|if
condition|(
name|searchString
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QMessageBox
operator|::
name|information
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"Empty Search Field"
argument_list|)
argument_list|,
literal|"The search field is empty. Please enter a word and click Find."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QTextCursor
name|highlightCursor
argument_list|(
name|document
argument_list|)
decl_stmt|;
name|QTextCursor
name|cursor
argument_list|(
name|document
argument_list|)
decl_stmt|;
name|cursor
operator|.
name|beginEditBlock
argument_list|()
expr_stmt|;
comment|//! [6]
name|QTextCharFormat
name|plainFormat
argument_list|(
name|highlightCursor
operator|.
name|charFormat
argument_list|()
argument_list|)
decl_stmt|;
name|QTextCharFormat
name|colorFormat
init|=
name|plainFormat
decl_stmt|;
name|colorFormat
operator|.
name|setForeground
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|highlightCursor
operator|.
name|isNull
argument_list|()
operator|&&
operator|!
name|highlightCursor
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|highlightCursor
operator|=
name|document
operator|->
name|find
argument_list|(
name|searchString
argument_list|,
name|highlightCursor
argument_list|,
name|QTextDocument
operator|::
name|FindWholeWords
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|highlightCursor
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
name|highlightCursor
operator|.
name|movePosition
argument_list|(
name|QTextCursor
operator|::
name|WordRight
argument_list|,
name|QTextCursor
operator|::
name|KeepAnchor
argument_list|)
expr_stmt|;
name|highlightCursor
operator|.
name|mergeCharFormat
argument_list|(
name|colorFormat
argument_list|)
expr_stmt|;
block|}
block|}
comment|//! [8]
name|cursor
operator|.
name|endEditBlock
argument_list|()
expr_stmt|;
comment|//! [7] //! [9]
name|isFirstTime
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|found
operator|==
literal|false
condition|)
block|{
name|QMessageBox
operator|::
name|information
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"Word Not Found"
argument_list|)
argument_list|,
literal|"Sorry, the word cannot be found."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|//! [8] //! [9]
end_comment
end_unit
