begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the demonstration applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<math.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets>
end_include
begin_include
include|#
directive|include
file|<QtNetwork>
end_include
begin_include
include|#
directive|include
file|"slippymap.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|M_PI
end_ifndef
begin_define
DECL|macro|M_PI
define|#
directive|define
name|M_PI
value|3.14159265358979323846
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|qHash
name|uint
name|qHash
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|p
parameter_list|)
block|{
return|return
name|p
operator|.
name|x
argument_list|()
operator|*
literal|17
operator|^
name|p
operator|.
name|y
argument_list|()
return|;
block|}
end_function
begin_comment
comment|// tile size in pixels
end_comment
begin_decl_stmt
DECL|variable|tdim
specifier|const
name|int
name|tdim
init|=
literal|256
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|tileForCoordinate
name|QPointF
name|tileForCoordinate
parameter_list|(
name|qreal
name|lat
parameter_list|,
name|qreal
name|lng
parameter_list|,
name|int
name|zoom
parameter_list|)
block|{
name|qreal
name|zn
init|=
cast|static_cast
argument_list|<
name|qreal
argument_list|>
argument_list|(
literal|1
operator|<<
name|zoom
argument_list|)
decl_stmt|;
name|qreal
name|tx
init|=
operator|(
name|lng
operator|+
literal|180.0
operator|)
operator|/
literal|360.0
decl_stmt|;
name|qreal
name|ty
init|=
operator|(
literal|1.0
operator|-
name|log
argument_list|(
name|tan
argument_list|(
name|lat
operator|*
name|M_PI
operator|/
literal|180.0
argument_list|)
operator|+
literal|1.0
operator|/
name|cos
argument_list|(
name|lat
operator|*
name|M_PI
operator|/
literal|180.0
argument_list|)
argument_list|)
operator|/
name|M_PI
operator|)
operator|/
literal|2.0
decl_stmt|;
return|return
name|QPointF
argument_list|(
name|tx
operator|*
name|zn
argument_list|,
name|ty
operator|*
name|zn
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|longitudeFromTile
name|qreal
name|longitudeFromTile
parameter_list|(
name|qreal
name|tx
parameter_list|,
name|int
name|zoom
parameter_list|)
block|{
name|qreal
name|zn
init|=
cast|static_cast
argument_list|<
name|qreal
argument_list|>
argument_list|(
literal|1
operator|<<
name|zoom
argument_list|)
decl_stmt|;
name|qreal
name|lat
init|=
name|tx
operator|/
name|zn
operator|*
literal|360.0
operator|-
literal|180.0
decl_stmt|;
return|return
name|lat
return|;
block|}
end_function
begin_function
DECL|function|latitudeFromTile
name|qreal
name|latitudeFromTile
parameter_list|(
name|qreal
name|ty
parameter_list|,
name|int
name|zoom
parameter_list|)
block|{
name|qreal
name|zn
init|=
cast|static_cast
argument_list|<
name|qreal
argument_list|>
argument_list|(
literal|1
operator|<<
name|zoom
argument_list|)
decl_stmt|;
name|qreal
name|n
init|=
name|M_PI
operator|-
literal|2
operator|*
name|M_PI
operator|*
name|ty
operator|/
name|zn
decl_stmt|;
name|qreal
name|lng
init|=
literal|180.0
operator|/
name|M_PI
operator|*
name|atan
argument_list|(
literal|0.5
operator|*
operator|(
name|exp
argument_list|(
name|n
argument_list|)
operator|-
name|exp
argument_list|(
operator|-
name|n
argument_list|)
operator|)
argument_list|)
decl_stmt|;
return|return
name|lng
return|;
block|}
end_function
begin_constructor
DECL|function|SlippyMap
name|SlippyMap
operator|::
name|SlippyMap
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|width
argument_list|(
literal|400
argument_list|)
member_init_list|,
name|height
argument_list|(
literal|300
argument_list|)
member_init_list|,
name|zoom
argument_list|(
literal|15
argument_list|)
member_init_list|,
name|latitude
argument_list|(
literal|59.9138204
argument_list|)
member_init_list|,
name|longitude
argument_list|(
literal|10.7387413
argument_list|)
block|{
name|m_emptyTile
operator|=
name|QPixmap
argument_list|(
name|tdim
argument_list|,
name|tdim
argument_list|)
expr_stmt|;
name|m_emptyTile
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|lightGray
argument_list|)
expr_stmt|;
name|QNetworkDiskCache
modifier|*
name|cache
init|=
operator|new
name|QNetworkDiskCache
decl_stmt|;
name|cache
operator|->
name|setCacheDirectory
argument_list|(
name|QDesktopServices
operator|::
name|storageLocation
argument_list|(
name|QDesktopServices
operator|::
name|CacheLocation
argument_list|)
argument_list|)
expr_stmt|;
name|m_manager
operator|.
name|setCache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|m_manager
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|(
name|QNetworkReply
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|handleNetworkData
argument_list|(
name|QNetworkReply
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|invalidate
name|void
name|SlippyMap
operator|::
name|invalidate
parameter_list|()
block|{
if|if
condition|(
name|width
operator|<=
literal|0
operator|||
name|height
operator|<=
literal|0
condition|)
return|return;
name|QPointF
name|ct
init|=
name|tileForCoordinate
argument_list|(
name|latitude
argument_list|,
name|longitude
argument_list|,
name|zoom
argument_list|)
decl_stmt|;
name|qreal
name|tx
init|=
name|ct
operator|.
name|x
argument_list|()
decl_stmt|;
name|qreal
name|ty
init|=
name|ct
operator|.
name|y
argument_list|()
decl_stmt|;
comment|// top-left corner of the center tile
name|int
name|xp
init|=
name|width
operator|/
literal|2
operator|-
operator|(
name|tx
operator|-
name|floor
argument_list|(
name|tx
argument_list|)
operator|)
operator|*
name|tdim
decl_stmt|;
name|int
name|yp
init|=
name|height
operator|/
literal|2
operator|-
operator|(
name|ty
operator|-
name|floor
argument_list|(
name|ty
argument_list|)
operator|)
operator|*
name|tdim
decl_stmt|;
comment|// first tile vertical and horizontal
name|int
name|xa
init|=
operator|(
name|xp
operator|+
name|tdim
operator|-
literal|1
operator|)
operator|/
name|tdim
decl_stmt|;
name|int
name|ya
init|=
operator|(
name|yp
operator|+
name|tdim
operator|-
literal|1
operator|)
operator|/
name|tdim
decl_stmt|;
name|int
name|xs
init|=
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|tx
argument_list|)
operator|-
name|xa
decl_stmt|;
name|int
name|ys
init|=
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|ty
argument_list|)
operator|-
name|ya
decl_stmt|;
comment|// offset for top-left tile
name|m_offset
operator|=
name|QPoint
argument_list|(
name|xp
operator|-
name|xa
operator|*
name|tdim
argument_list|,
name|yp
operator|-
name|ya
operator|*
name|tdim
argument_list|)
expr_stmt|;
comment|// last tile vertical and horizontal
name|int
name|xe
init|=
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|tx
argument_list|)
operator|+
operator|(
name|width
operator|-
name|xp
operator|-
literal|1
operator|)
operator|/
name|tdim
decl_stmt|;
name|int
name|ye
init|=
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|ty
argument_list|)
operator|+
operator|(
name|height
operator|-
name|yp
operator|-
literal|1
operator|)
operator|/
name|tdim
decl_stmt|;
comment|// build a rect
name|m_tilesRect
operator|=
name|QRect
argument_list|(
name|xs
argument_list|,
name|ys
argument_list|,
name|xe
operator|-
name|xs
operator|+
literal|1
argument_list|,
name|ye
operator|-
name|ys
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_url
operator|.
name|isEmpty
argument_list|()
condition|)
name|download
argument_list|()
expr_stmt|;
emit|emit
name|updated
argument_list|(
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|render
name|void
name|SlippyMap
operator|::
name|render
parameter_list|(
name|QPainter
modifier|*
name|p
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<=
name|m_tilesRect
operator|.
name|width
argument_list|()
condition|;
operator|++
name|x
control|)
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<=
name|m_tilesRect
operator|.
name|height
argument_list|()
condition|;
operator|++
name|y
control|)
block|{
name|QPoint
name|tp
argument_list|(
name|x
operator|+
name|m_tilesRect
operator|.
name|left
argument_list|()
argument_list|,
name|y
operator|+
name|m_tilesRect
operator|.
name|top
argument_list|()
argument_list|)
decl_stmt|;
name|QRect
name|box
init|=
name|tileRect
argument_list|(
name|tp
argument_list|)
decl_stmt|;
if|if
condition|(
name|rect
operator|.
name|intersects
argument_list|(
name|box
argument_list|)
condition|)
block|{
if|if
condition|(
name|m_tilePixmaps
operator|.
name|contains
argument_list|(
name|tp
argument_list|)
condition|)
name|p
operator|->
name|drawPixmap
argument_list|(
name|box
argument_list|,
name|m_tilePixmaps
operator|.
name|value
argument_list|(
name|tp
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|p
operator|->
name|drawPixmap
argument_list|(
name|box
argument_list|,
name|m_emptyTile
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|pan
name|void
name|SlippyMap
operator|::
name|pan
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|delta
parameter_list|)
block|{
name|QPointF
name|dx
init|=
name|QPointF
argument_list|(
name|delta
argument_list|)
operator|/
name|qreal
argument_list|(
name|tdim
argument_list|)
decl_stmt|;
name|QPointF
name|center
init|=
name|tileForCoordinate
argument_list|(
name|latitude
argument_list|,
name|longitude
argument_list|,
name|zoom
argument_list|)
operator|-
name|dx
decl_stmt|;
name|latitude
operator|=
name|latitudeFromTile
argument_list|(
name|center
operator|.
name|y
argument_list|()
argument_list|,
name|zoom
argument_list|)
expr_stmt|;
name|longitude
operator|=
name|longitudeFromTile
argument_list|(
name|center
operator|.
name|x
argument_list|()
argument_list|,
name|zoom
argument_list|)
expr_stmt|;
name|invalidate
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleNetworkData
name|void
name|SlippyMap
operator|::
name|handleNetworkData
parameter_list|(
name|QNetworkReply
modifier|*
name|reply
parameter_list|)
block|{
name|QImage
name|img
decl_stmt|;
name|QPoint
name|tp
init|=
name|reply
operator|->
name|request
argument_list|()
operator|.
name|attribute
argument_list|(
name|QNetworkRequest
operator|::
name|User
argument_list|)
operator|.
name|toPoint
argument_list|()
decl_stmt|;
name|QUrl
name|url
init|=
name|reply
operator|->
name|url
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|reply
operator|->
name|error
argument_list|()
condition|)
if|if
condition|(
operator|!
name|img
operator|.
name|load
argument_list|(
name|reply
argument_list|,
literal|0
argument_list|)
condition|)
name|img
operator|=
name|QImage
argument_list|()
expr_stmt|;
name|reply
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
name|m_tilePixmaps
index|[
name|tp
index|]
operator|=
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|img
argument_list|)
expr_stmt|;
if|if
condition|(
name|img
operator|.
name|isNull
argument_list|()
condition|)
name|m_tilePixmaps
index|[
name|tp
index|]
operator|=
name|m_emptyTile
expr_stmt|;
emit|emit
name|updated
argument_list|(
name|tileRect
argument_list|(
name|tp
argument_list|)
argument_list|)
emit|;
comment|// purge unused spaces
name|QRect
name|bound
init|=
name|m_tilesRect
operator|.
name|adjusted
argument_list|(
operator|-
literal|2
argument_list|,
operator|-
literal|2
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
foreach|foreach
control|(
name|QPoint
name|tp
decl|,
name|m_tilePixmaps
operator|.
name|keys
argument_list|()
control|)
if|if
condition|(
operator|!
name|bound
operator|.
name|contains
argument_list|(
name|tp
argument_list|)
condition|)
name|m_tilePixmaps
operator|.
name|remove
argument_list|(
name|tp
argument_list|)
expr_stmt|;
name|download
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|download
name|void
name|SlippyMap
operator|::
name|download
parameter_list|()
block|{
name|QPoint
name|grab
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<=
name|m_tilesRect
operator|.
name|width
argument_list|()
condition|;
operator|++
name|x
control|)
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<=
name|m_tilesRect
operator|.
name|height
argument_list|()
condition|;
operator|++
name|y
control|)
block|{
name|QPoint
name|tp
init|=
name|m_tilesRect
operator|.
name|topLeft
argument_list|()
operator|+
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m_tilePixmaps
operator|.
name|contains
argument_list|(
name|tp
argument_list|)
condition|)
block|{
name|grab
operator|=
name|tp
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|grab
operator|==
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
condition|)
block|{
name|m_url
operator|=
name|QUrl
argument_list|()
expr_stmt|;
return|return;
block|}
name|QString
name|path
init|=
literal|"http://tile.openstreetmap.org/%1/%2/%3.png"
decl_stmt|;
name|m_url
operator|=
name|QUrl
argument_list|(
name|path
operator|.
name|arg
argument_list|(
name|zoom
argument_list|)
operator|.
name|arg
argument_list|(
name|grab
operator|.
name|x
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|grab
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QNetworkRequest
name|request
decl_stmt|;
name|request
operator|.
name|setUrl
argument_list|(
name|m_url
argument_list|)
expr_stmt|;
name|request
operator|.
name|setRawHeader
argument_list|(
literal|"User-Agent"
argument_list|,
literal|"Nokia (Qt) Graphics Dojo 1.0"
argument_list|)
expr_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|QNetworkRequest
operator|::
name|User
argument_list|,
name|QVariant
argument_list|(
name|grab
argument_list|)
argument_list|)
expr_stmt|;
name|m_manager
operator|.
name|get
argument_list|(
name|request
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tileRect
name|QRect
name|SlippyMap
operator|::
name|tileRect
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|tp
parameter_list|)
block|{
name|QPoint
name|t
init|=
name|tp
operator|-
name|m_tilesRect
operator|.
name|topLeft
argument_list|()
decl_stmt|;
name|int
name|x
init|=
name|t
operator|.
name|x
argument_list|()
operator|*
name|tdim
operator|+
name|m_offset
operator|.
name|x
argument_list|()
decl_stmt|;
name|int
name|y
init|=
name|t
operator|.
name|y
argument_list|()
operator|*
name|tdim
operator|+
name|m_offset
operator|.
name|y
argument_list|()
decl_stmt|;
return|return
name|QRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|tdim
argument_list|,
name|tdim
argument_list|)
return|;
block|}
end_function
end_unit
