begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor **     the names of its contributors may be used to endorse or promote **     products derived from this software without specific prior written **     permission. ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"svgalibscreen.h"
end_include
begin_include
include|#
directive|include
file|"svgalibsurface.h"
end_include
begin_include
include|#
directive|include
file|<QVector>
end_include
begin_include
include|#
directive|include
file|<QApplication>
end_include
begin_include
include|#
directive|include
file|<QColor>
end_include
begin_include
include|#
directive|include
file|<QWidget>
end_include
begin_include
include|#
directive|include
file|<math.h>
end_include
begin_function
DECL|function|getModeDepth
specifier|static
name|int
name|getModeDepth
parameter_list|(
name|vga_modeinfo
modifier|*
name|mode
parameter_list|)
block|{
specifier|const
name|int
name|bits
init|=
name|int
argument_list|(
name|log2
argument_list|(
name|mode
operator|->
name|colors
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|bits
operator|==
literal|24
operator|&&
name|mode
operator|->
name|bytesperpixel
operator|==
literal|4
condition|)
return|return
literal|32
return|;
return|return
name|bits
return|;
block|}
end_function
begin_comment
comment|//! [0]
end_comment
begin_function
DECL|function|connect
name|bool
name|SvgalibScreen
operator|::
name|connect
parameter_list|(
specifier|const
name|QString
modifier|&
name|displaySpec
parameter_list|)
block|{
name|int
name|mode
init|=
name|vga_getdefaultmode
argument_list|()
decl_stmt|;
if|if
condition|(
name|mode
operator|<=
literal|0
condition|)
block|{
name|qCritical
argument_list|(
literal|"SvgalibScreen::connect(): invalid vga mode"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|vga_modeinfo
modifier|*
name|modeinfo
init|=
name|vga_getmodeinfo
argument_list|(
name|mode
argument_list|)
decl_stmt|;
name|QScreen
operator|::
name|lstep
operator|=
name|modeinfo
operator|->
name|linewidth
expr_stmt|;
name|QScreen
operator|::
name|dw
operator|=
name|QScreen
operator|::
name|w
operator|=
name|modeinfo
operator|->
name|width
expr_stmt|;
name|QScreen
operator|::
name|dh
operator|=
name|QScreen
operator|::
name|h
operator|=
name|modeinfo
operator|->
name|height
expr_stmt|;
name|QScreen
operator|::
name|d
operator|=
name|getModeDepth
argument_list|(
name|modeinfo
argument_list|)
expr_stmt|;
name|QScreen
operator|::
name|size
operator|=
name|QScreen
operator|::
name|lstep
operator|*
name|dh
expr_stmt|;
name|QScreen
operator|::
name|data
operator|=
literal|0
expr_stmt|;
switch|switch
condition|(
name|depth
argument_list|()
condition|)
block|{
case|case
literal|32
case|:
name|setPixelFormat
argument_list|(
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
expr_stmt|;
break|break;
case|case
literal|24
case|:
name|setPixelFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB888
argument_list|)
expr_stmt|;
break|break;
case|case
literal|16
case|:
name|setPixelFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB16
argument_list|)
expr_stmt|;
break|break;
case|case
literal|15
case|:
name|setPixelFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB555
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
specifier|const
name|int
name|dpi
init|=
literal|72
decl_stmt|;
name|QScreen
operator|::
name|physWidth
operator|=
name|qRound
argument_list|(
name|QScreen
operator|::
name|dw
operator|*
literal|25.4
operator|/
name|dpi
argument_list|)
expr_stmt|;
name|QScreen
operator|::
name|physHeight
operator|=
name|qRound
argument_list|(
name|QScreen
operator|::
name|dh
operator|*
literal|25.4
operator|/
name|dpi
argument_list|)
expr_stmt|;
specifier|const
name|QStringList
name|args
init|=
name|displaySpec
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
decl_stmt|;
name|grayscale
operator|=
name|args
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"grayscale"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|//! [0]
end_comment
begin_function
DECL|function|initColorMap
name|void
name|SvgalibScreen
operator|::
name|initColorMap
parameter_list|()
block|{
specifier|const
name|int
name|numColors
init|=
name|vga_getcolors
argument_list|()
decl_stmt|;
if|if
condition|(
name|numColors
operator|==
literal|2
operator|||
name|numColors
operator|>
literal|256
condition|)
block|{
name|screencols
operator|=
literal|0
expr_stmt|;
return|return;
comment|// not a palette based mode
block|}
if|if
condition|(
name|numColors
operator|==
literal|16
condition|)
block|{
if|if
condition|(
name|grayscale
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|256
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|int
name|c
init|=
name|i
operator|*
literal|16
operator|/
literal|256
decl_stmt|;
name|vga_setpalette
argument_list|(
name|i
argument_list|,
name|c
argument_list|,
name|c
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
name|screencols
operator|=
literal|256
expr_stmt|;
comment|// XXX: takes advantage of optimization in alloc()
block|}
else|else
block|{
comment|// read in EGA palette
name|int
name|r
decl_stmt|,
name|g
decl_stmt|,
name|b
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|16
condition|;
operator|++
name|i
control|)
block|{
name|vga_getpalette
argument_list|(
name|i
argument_list|,
operator|&
name|r
argument_list|,
operator|&
name|g
argument_list|,
operator|&
name|b
argument_list|)
expr_stmt|;
name|screenclut
index|[
name|i
index|]
operator|=
name|qRgb
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|)
expr_stmt|;
block|}
name|screencols
operator|=
literal|16
expr_stmt|;
block|}
return|return;
block|}
name|Q_ASSERT
argument_list|(
name|numColors
operator|==
literal|256
argument_list|)
expr_stmt|;
if|if
condition|(
name|grayscale
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|256
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|int
name|c
init|=
name|i
operator|*
literal|64
operator|/
literal|256
decl_stmt|;
name|vga_setpalette
argument_list|(
name|i
argument_list|,
name|c
argument_list|,
name|c
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|int
name|i
init|=
literal|0
decl_stmt|;
if|#
directive|if
literal|0
comment|// read in EGA palette
block|while (i< 16) {             int r, g, b;             vga_getpalette(i,&r,&g,&b);             screenclut[i] = qRgb(r, g, b);             ++i;         }         screencols = 16;
endif|#
directive|endif
comment|// 6 * 6 * 6 color cube
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
literal|6
condition|;
operator|++
name|r
control|)
block|{
for|for
control|(
name|int
name|g
init|=
literal|0
init|;
name|g
operator|<
literal|6
condition|;
operator|++
name|g
control|)
block|{
for|for
control|(
name|int
name|b
init|=
literal|0
init|;
name|b
operator|<
literal|6
condition|;
operator|++
name|b
control|)
block|{
name|vga_setpalette
argument_list|(
name|i
argument_list|,
name|r
operator|*
literal|64
operator|/
literal|6
argument_list|,
name|g
operator|*
literal|64
operator|/
literal|6
argument_list|,
name|b
operator|*
literal|64
operator|/
literal|6
argument_list|)
expr_stmt|;
name|screenclut
index|[
name|i
index|]
operator|=
name|qRgb
argument_list|(
name|r
operator|*
literal|256
operator|/
literal|6
argument_list|,
name|g
operator|*
literal|256
operator|/
literal|6
argument_list|,
name|b
operator|*
literal|256
operator|/
literal|6
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
block|}
block|}
name|screencols
operator|=
name|i
expr_stmt|;
while|while
condition|(
name|i
operator|<
literal|256
condition|)
block|{
name|screenclut
index|[
name|i
index|]
operator|=
name|qRgb
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|//! [1]
end_comment
begin_function
DECL|function|initDevice
name|bool
name|SvgalibScreen
operator|::
name|initDevice
parameter_list|()
block|{
if|if
condition|(
name|vga_init
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|qCritical
argument_list|(
literal|"SvgalibScreen::initDevice(): unable to initialize svgalib"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|int
name|mode
init|=
name|vga_getdefaultmode
argument_list|()
decl_stmt|;
if|if
condition|(
name|vga_setmode
argument_list|(
name|mode
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|qCritical
argument_list|(
literal|"SvgalibScreen::initialize(): unable to set graphics mode"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|gl_setcontextvga
argument_list|(
name|mode
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|qCritical
argument_list|(
literal|"SvgalibScreen::initDevice(): unable to set vga context"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|context
operator|=
name|gl_allocatecontext
argument_list|()
expr_stmt|;
name|gl_getcontext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|vga_modeinfo
modifier|*
name|modeinfo
init|=
name|vga_getmodeinfo
argument_list|(
name|mode
argument_list|)
decl_stmt|;
if|if
condition|(
name|modeinfo
operator|->
name|flags
operator|&
name|IS_LINEAR
condition|)
name|QScreen
operator|::
name|data
operator|=
name|vga_getgraphmem
argument_list|()
expr_stmt|;
name|initColorMap
argument_list|()
expr_stmt|;
name|QScreenCursor
operator|::
name|initSoftwareCursor
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|//! [1]
end_comment
begin_comment
comment|//! [2]
end_comment
begin_function
DECL|function|shutdownDevice
name|void
name|SvgalibScreen
operator|::
name|shutdownDevice
parameter_list|()
block|{
name|gl_freecontext
argument_list|(
name|context
argument_list|)
expr_stmt|;
name|vga_setmode
argument_list|(
name|TEXT
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [2]
end_comment
begin_comment
comment|//! [3]
end_comment
begin_function
DECL|function|disconnect
name|void
name|SvgalibScreen
operator|::
name|disconnect
parameter_list|()
block|{ }
end_function
begin_comment
comment|//! [3]
end_comment
begin_comment
comment|//! [4]
end_comment
begin_function
DECL|function|solidFill
name|void
name|SvgalibScreen
operator|::
name|solidFill
parameter_list|(
specifier|const
name|QColor
modifier|&
name|color
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|reg
parameter_list|)
block|{
name|int
name|c
decl_stmt|;
if|if
condition|(
name|depth
argument_list|()
operator|==
literal|4
operator|||
name|depth
argument_list|()
operator|==
literal|8
condition|)
name|c
operator|=
name|alloc
argument_list|(
name|color
operator|.
name|red
argument_list|()
argument_list|,
name|color
operator|.
name|green
argument_list|()
argument_list|,
name|color
operator|.
name|blue
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|c
operator|=
name|gl_rgbcolor
argument_list|(
name|color
operator|.
name|red
argument_list|()
argument_list|,
name|color
operator|.
name|green
argument_list|()
argument_list|,
name|color
operator|.
name|blue
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QVector
argument_list|<
name|QRect
argument_list|>
name|rects
init|=
operator|(
name|reg
operator|&
name|region
argument_list|()
operator|)
operator|.
name|rects
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rects
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QRect
name|r
init|=
name|rects
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|gl_fillbox
argument_list|(
name|r
operator|.
name|left
argument_list|()
argument_list|,
name|r
operator|.
name|top
argument_list|()
argument_list|,
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|height
argument_list|()
argument_list|,
name|c
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|//! [4]
end_comment
begin_function
DECL|function|blit16To8
name|void
name|SvgalibScreen
operator|::
name|blit16To8
parameter_list|(
specifier|const
name|QImage
modifier|&
name|image
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|topLeft
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
block|{
specifier|const
name|int
name|imageStride
init|=
name|image
operator|.
name|bytesPerLine
argument_list|()
operator|/
literal|2
decl_stmt|;
specifier|const
name|QVector
argument_list|<
name|QRect
argument_list|>
name|rects
init|=
name|region
operator|.
name|rects
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rects
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QRect
name|r
init|=
name|rects
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|translated
argument_list|(
operator|-
name|topLeft
argument_list|)
decl_stmt|;
name|int
name|y
init|=
name|r
operator|.
name|y
argument_list|()
decl_stmt|;
specifier|const
name|quint16
modifier|*
name|s
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|quint16
operator|*
argument_list|>
argument_list|(
name|image
operator|.
name|scanLine
argument_list|(
name|y
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
name|y
operator|<=
name|r
operator|.
name|bottom
argument_list|()
condition|)
block|{
name|int
name|x1
init|=
name|r
operator|.
name|x
argument_list|()
decl_stmt|;
while|while
condition|(
name|x1
operator|<=
name|r
operator|.
name|right
argument_list|()
condition|)
block|{
specifier|const
name|quint16
name|c
init|=
name|s
index|[
name|x1
index|]
decl_stmt|;
name|int
name|x2
init|=
name|x1
decl_stmt|;
comment|// find span length
while|while
condition|(
operator|(
name|x2
operator|+
literal|1
operator|<
name|r
operator|.
name|right
argument_list|()
operator|)
operator|&&
operator|(
name|s
index|[
name|x2
operator|+
literal|1
index|]
operator|==
name|c
operator|)
condition|)
operator|++
name|x2
expr_stmt|;
name|gl_hline
argument_list|(
name|x1
operator|+
name|topLeft
operator|.
name|x
argument_list|()
argument_list|,
name|y
operator|+
name|topLeft
operator|.
name|y
argument_list|()
argument_list|,
name|x2
operator|+
name|topLeft
operator|.
name|x
argument_list|()
argument_list|,
name|qt_colorConvert
argument_list|<
name|quint8
argument_list|,
name|quint16
argument_list|>
argument_list|(
name|c
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|x1
operator|=
name|x2
operator|+
literal|1
expr_stmt|;
block|}
name|s
operator|+=
name|imageStride
expr_stmt|;
operator|++
name|y
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|blit32To8
name|void
name|SvgalibScreen
operator|::
name|blit32To8
parameter_list|(
specifier|const
name|QImage
modifier|&
name|image
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|topLeft
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|region
parameter_list|)
block|{
specifier|const
name|int
name|imageStride
init|=
name|image
operator|.
name|bytesPerLine
argument_list|()
operator|/
literal|4
decl_stmt|;
specifier|const
name|QVector
argument_list|<
name|QRect
argument_list|>
name|rects
init|=
name|region
operator|.
name|rects
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rects
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QRect
name|r
init|=
name|rects
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|translated
argument_list|(
operator|-
name|topLeft
argument_list|)
decl_stmt|;
name|int
name|y
init|=
name|r
operator|.
name|y
argument_list|()
decl_stmt|;
specifier|const
name|quint32
modifier|*
name|s
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|quint32
operator|*
argument_list|>
argument_list|(
name|image
operator|.
name|scanLine
argument_list|(
name|y
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
name|y
operator|<=
name|r
operator|.
name|bottom
argument_list|()
condition|)
block|{
name|int
name|x1
init|=
name|r
operator|.
name|x
argument_list|()
decl_stmt|;
while|while
condition|(
name|x1
operator|<=
name|r
operator|.
name|right
argument_list|()
condition|)
block|{
specifier|const
name|quint32
name|c
init|=
name|s
index|[
name|x1
index|]
decl_stmt|;
name|int
name|x2
init|=
name|x1
decl_stmt|;
comment|// find span length
while|while
condition|(
operator|(
name|x2
operator|+
literal|1
operator|<
name|r
operator|.
name|right
argument_list|()
operator|)
operator|&&
operator|(
name|s
index|[
name|x2
operator|+
literal|1
index|]
operator|==
name|c
operator|)
condition|)
operator|++
name|x2
expr_stmt|;
name|gl_hline
argument_list|(
name|x1
operator|+
name|topLeft
operator|.
name|x
argument_list|()
argument_list|,
name|y
operator|+
name|topLeft
operator|.
name|y
argument_list|()
argument_list|,
name|x2
operator|+
name|topLeft
operator|.
name|x
argument_list|()
argument_list|,
name|qt_colorConvert
argument_list|<
name|quint8
argument_list|,
name|quint32
argument_list|>
argument_list|(
name|c
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|x1
operator|=
name|x2
operator|+
literal|1
expr_stmt|;
block|}
name|s
operator|+=
name|imageStride
expr_stmt|;
operator|++
name|y
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|//! [5]
end_comment
begin_function
DECL|function|blit
name|void
name|SvgalibScreen
operator|::
name|blit
parameter_list|(
specifier|const
name|QImage
modifier|&
name|img
parameter_list|,
specifier|const
name|QPoint
modifier|&
name|topLeft
parameter_list|,
specifier|const
name|QRegion
modifier|&
name|reg
parameter_list|)
block|{
if|if
condition|(
name|depth
argument_list|()
operator|==
literal|8
condition|)
block|{
switch|switch
condition|(
name|img
operator|.
name|format
argument_list|()
condition|)
block|{
case|case
name|QImage
operator|::
name|Format_RGB16
case|:
name|blit16To8
argument_list|(
name|img
argument_list|,
name|topLeft
argument_list|,
name|reg
argument_list|)
expr_stmt|;
return|return;
case|case
name|QImage
operator|::
name|Format_RGB32
case|:
case|case
name|QImage
operator|::
name|Format_ARGB32
case|:
case|case
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
case|:
name|blit32To8
argument_list|(
name|img
argument_list|,
name|topLeft
argument_list|,
name|reg
argument_list|)
expr_stmt|;
return|return;
default|default:
break|break;
block|}
block|}
if|if
condition|(
name|img
operator|.
name|format
argument_list|()
operator|!=
name|pixelFormat
argument_list|()
condition|)
block|{
if|if
condition|(
name|base
argument_list|()
condition|)
name|QScreen
operator|::
name|blit
argument_list|(
name|img
argument_list|,
name|topLeft
argument_list|,
name|reg
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|const
name|QVector
argument_list|<
name|QRect
argument_list|>
name|rects
init|=
operator|(
name|reg
operator|&
name|region
argument_list|()
operator|)
operator|.
name|rects
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rects
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QRect
name|r
init|=
name|rects
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|gl_putboxpart
argument_list|(
name|r
operator|.
name|x
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
argument_list|,
name|r
operator|.
name|width
argument_list|()
argument_list|,
name|r
operator|.
name|height
argument_list|()
argument_list|,
name|img
operator|.
name|width
argument_list|()
argument_list|,
name|img
operator|.
name|height
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
name|void
operator|*
argument_list|>
argument_list|(
cast|const_cast
argument_list|<
name|uchar
operator|*
argument_list|>
argument_list|(
name|img
operator|.
name|bits
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|r
operator|.
name|x
argument_list|()
operator|-
name|topLeft
operator|.
name|x
argument_list|()
argument_list|,
name|r
operator|.
name|y
argument_list|()
operator|-
name|topLeft
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|//! [5]
end_comment
begin_comment
comment|//! [7]
end_comment
begin_function
DECL|function|createSurface
name|QWSWindowSurface
modifier|*
name|SvgalibScreen
operator|::
name|createSurface
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|base
argument_list|()
condition|)
block|{
specifier|static
name|int
name|onScreenPaint
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|onScreenPaint
operator|==
operator|-
literal|1
condition|)
name|onScreenPaint
operator|=
name|qgetenv
argument_list|(
literal|"QT_ONSCREEN_PAINT"
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|onScreenPaint
operator|>
literal|0
operator|||
name|widget
operator|->
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_PaintOnScreen
argument_list|)
condition|)
return|return
operator|new
name|SvgalibSurface
argument_list|(
name|widget
argument_list|)
return|;
block|}
return|return
name|QScreen
operator|::
name|createSurface
argument_list|(
name|widget
argument_list|)
return|;
block|}
end_function
begin_comment
comment|//! [7]
end_comment
begin_comment
comment|//! [8]
end_comment
begin_function
DECL|function|createSurface
name|QWSWindowSurface
modifier|*
name|SvgalibScreen
operator|::
name|createSurface
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|key
operator|==
name|QLatin1String
argument_list|(
literal|"svgalib"
argument_list|)
condition|)
return|return
operator|new
name|SvgalibSurface
return|;
return|return
name|QScreen
operator|::
name|createSurface
argument_list|(
name|key
argument_list|)
return|;
block|}
end_function
begin_comment
comment|//! [8]
end_comment
end_unit
