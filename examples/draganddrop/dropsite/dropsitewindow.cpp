begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor **     the names of its contributors may be used to endorse or promote **     products derived from this software without specific prior written **     permission. ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtWidgets>
end_include
begin_include
include|#
directive|include
file|"droparea.h"
end_include
begin_include
include|#
directive|include
file|"dropsitewindow.h"
end_include
begin_comment
comment|//! [constructor part1]
end_comment
begin_constructor
DECL|function|DropSiteWindow
name|DropSiteWindow
operator|::
name|DropSiteWindow
parameter_list|()
block|{
name|abstractLabel
operator|=
operator|new
name|QLabel
argument_list|(
name|tr
argument_list|(
literal|"This example accepts drags from other "
literal|"applications and displays the MIME types "
literal|"provided by the drag object."
argument_list|)
argument_list|)
expr_stmt|;
name|abstractLabel
operator|->
name|setWordWrap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|abstractLabel
operator|->
name|adjustSize
argument_list|()
expr_stmt|;
comment|//! [constructor part1]
comment|//! [constructor part2]
name|dropArea
operator|=
operator|new
name|DropArea
expr_stmt|;
name|connect
argument_list|(
name|dropArea
argument_list|,
name|SIGNAL
argument_list|(
name|changed
argument_list|(
specifier|const
name|QMimeData
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|updateFormatsTable
argument_list|(
specifier|const
name|QMimeData
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//! [constructor part2]
comment|//! [constructor part3]
name|QStringList
name|labels
decl_stmt|;
name|labels
operator|<<
name|tr
argument_list|(
literal|"Format"
argument_list|)
operator|<<
name|tr
argument_list|(
literal|"Content"
argument_list|)
expr_stmt|;
name|formatsTable
operator|=
operator|new
name|QTableWidget
expr_stmt|;
name|formatsTable
operator|->
name|setColumnCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|formatsTable
operator|->
name|setEditTriggers
argument_list|(
name|QAbstractItemView
operator|::
name|NoEditTriggers
argument_list|)
expr_stmt|;
name|formatsTable
operator|->
name|setHorizontalHeaderLabels
argument_list|(
name|labels
argument_list|)
expr_stmt|;
name|formatsTable
operator|->
name|horizontalHeader
argument_list|()
operator|->
name|setStretchLastSection
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|//! [constructor part3]
comment|//! [constructor part4]
name|clearButton
operator|=
operator|new
name|QPushButton
argument_list|(
name|tr
argument_list|(
literal|"Clear"
argument_list|)
argument_list|)
expr_stmt|;
name|quitButton
operator|=
operator|new
name|QPushButton
argument_list|(
name|tr
argument_list|(
literal|"Quit"
argument_list|)
argument_list|)
expr_stmt|;
name|buttonBox
operator|=
operator|new
name|QDialogButtonBox
expr_stmt|;
name|buttonBox
operator|->
name|addButton
argument_list|(
name|clearButton
argument_list|,
name|QDialogButtonBox
operator|::
name|ActionRole
argument_list|)
expr_stmt|;
name|buttonBox
operator|->
name|addButton
argument_list|(
name|quitButton
argument_list|,
name|QDialogButtonBox
operator|::
name|RejectRole
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|quitButton
argument_list|,
name|SIGNAL
argument_list|(
name|pressed
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|close
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|clearButton
argument_list|,
name|SIGNAL
argument_list|(
name|pressed
argument_list|()
argument_list|)
argument_list|,
name|dropArea
argument_list|,
name|SLOT
argument_list|(
name|clear
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//! [constructor part4]
comment|//! [constructor part5]
name|QVBoxLayout
modifier|*
name|mainLayout
init|=
operator|new
name|QVBoxLayout
decl_stmt|;
name|mainLayout
operator|->
name|addWidget
argument_list|(
name|abstractLabel
argument_list|)
expr_stmt|;
name|mainLayout
operator|->
name|addWidget
argument_list|(
name|dropArea
argument_list|)
expr_stmt|;
name|mainLayout
operator|->
name|addWidget
argument_list|(
name|formatsTable
argument_list|)
expr_stmt|;
name|mainLayout
operator|->
name|addWidget
argument_list|(
name|buttonBox
argument_list|)
expr_stmt|;
name|setLayout
argument_list|(
name|mainLayout
argument_list|)
expr_stmt|;
name|setWindowTitle
argument_list|(
name|tr
argument_list|(
literal|"Drop Site"
argument_list|)
argument_list|)
expr_stmt|;
name|setMinimumSize
argument_list|(
literal|350
argument_list|,
literal|500
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|//! [constructor part5]
end_comment
begin_comment
comment|//! [updateFormatsTable() part1]
end_comment
begin_function
DECL|function|updateFormatsTable
name|void
name|DropSiteWindow
operator|::
name|updateFormatsTable
parameter_list|(
specifier|const
name|QMimeData
modifier|*
name|mimeData
parameter_list|)
block|{
name|formatsTable
operator|->
name|setRowCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|mimeData
condition|)
return|return;
comment|//! [updateFormatsTable() part1]
comment|//! [updateFormatsTable() part2]
foreach|foreach
control|(
name|QString
name|format
decl|,
name|mimeData
operator|->
name|formats
argument_list|()
control|)
block|{
name|QTableWidgetItem
modifier|*
name|formatItem
init|=
operator|new
name|QTableWidgetItem
argument_list|(
name|format
argument_list|)
decl_stmt|;
name|formatItem
operator|->
name|setFlags
argument_list|(
name|Qt
operator|::
name|ItemIsEnabled
argument_list|)
expr_stmt|;
name|formatItem
operator|->
name|setTextAlignment
argument_list|(
name|Qt
operator|::
name|AlignTop
operator||
name|Qt
operator|::
name|AlignLeft
argument_list|)
expr_stmt|;
comment|//! [updateFormatsTable() part2]
comment|//! [updateFormatsTable() part3]
name|QString
name|text
decl_stmt|;
if|if
condition|(
name|format
operator|==
literal|"text/plain"
condition|)
block|{
name|text
operator|=
name|mimeData
operator|->
name|text
argument_list|()
operator|.
name|simplified
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|format
operator|==
literal|"text/html"
condition|)
block|{
name|text
operator|=
name|mimeData
operator|->
name|html
argument_list|()
operator|.
name|simplified
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|format
operator|==
literal|"text/uri-list"
condition|)
block|{
name|QList
argument_list|<
name|QUrl
argument_list|>
name|urlList
init|=
name|mimeData
operator|->
name|urls
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|urlList
operator|.
name|size
argument_list|()
operator|&&
name|i
operator|<
literal|32
condition|;
operator|++
name|i
control|)
name|text
operator|.
name|append
argument_list|(
name|urlList
index|[
name|i
index|]
operator|.
name|toString
argument_list|()
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QByteArray
name|data
init|=
name|mimeData
operator|->
name|data
argument_list|(
name|format
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|size
argument_list|()
operator|&&
name|i
operator|<
literal|32
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|hex
init|=
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|uchar
argument_list|(
name|data
index|[
name|i
index|]
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|16
argument_list|,
name|QChar
argument_list|(
literal|'0'
argument_list|)
argument_list|)
operator|.
name|toUpper
argument_list|()
decl_stmt|;
name|text
operator|.
name|append
argument_list|(
name|hex
operator|+
literal|" "
argument_list|)
expr_stmt|;
block|}
block|}
comment|//! [updateFormatsTable() part3]
comment|//! [updateFormatsTable() part4]
name|int
name|row
init|=
name|formatsTable
operator|->
name|rowCount
argument_list|()
decl_stmt|;
name|formatsTable
operator|->
name|insertRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|formatsTable
operator|->
name|setItem
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
operator|new
name|QTableWidgetItem
argument_list|(
name|format
argument_list|)
argument_list|)
expr_stmt|;
name|formatsTable
operator|->
name|setItem
argument_list|(
name|row
argument_list|,
literal|1
argument_list|,
operator|new
name|QTableWidgetItem
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|formatsTable
operator|->
name|resizeColumnToContents
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [updateFormatsTable() part4]
end_comment
end_unit
