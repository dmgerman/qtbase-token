begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the QtGui module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qanimationstate.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/qstate.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_comment
comment|/*! \class QAnimationState  \brief The QAnimationState class provides state that handle an animation and emit a signal when this animation is finished.  \ingroup statemachine  QAnimationState provides a state that handle an animation. It will start this animation when the state is entered and stop it when it is leaved. When the animation has finished the state emit animationFinished signal. QAnimationState is part of \l{The State Machine Framework}.  \code QStateMachine machine; QAnimationState *s = new QAnimationState(machine->rootState()); QPropertyAnimation *animation = new QPropertyAnimation(obj, "pos"); s->setAnimation(animation); QState *s2 = new QState(machine->rootState()); s->addTransition(s, SIGNAL(animationFinished()), s2); machine.start(); \endcode  \sa QState, {The Animation Framework} */
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_ANIMATION
end_ifndef
begin_comment
comment|/*!   Constructs a new state with the given \a parent state. */
end_comment
begin_constructor
DECL|function|QAnimationState
name|QAnimationState
operator|::
name|QAnimationState
parameter_list|(
name|QState
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QState
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|m_animation
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*!   Destroys the animation state. */
end_comment
begin_destructor
DECL|function|~QAnimationState
name|QAnimationState
operator|::
name|~
name|QAnimationState
parameter_list|()
block|{ }
end_destructor
begin_comment
comment|/*!   Set an \a animation for this QAnimationState. If an animation was previously handle by this   state then it won't emit animationFinished for the old animation. The QAnimationState doesn't   take the ownership of the animation. */
end_comment
begin_function
DECL|function|setAnimation
name|void
name|QAnimationState
operator|::
name|setAnimation
parameter_list|(
name|QAbstractAnimation
modifier|*
name|animation
parameter_list|)
block|{
if|if
condition|(
name|animation
operator|==
name|m_animation
condition|)
return|return;
comment|//Disconnect from the previous animation if exist
if|if
condition|(
name|m_animation
condition|)
name|disconnect
argument_list|(
name|m_animation
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|animationFinished
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|m_animation
operator|=
name|animation
expr_stmt|;
if|if
condition|(
name|m_animation
condition|)
block|{
comment|//connect the new animation
name|connect
argument_list|(
name|m_animation
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|animationFinished
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*!   Returns the animation handle by this animation state, or 0 if there is no animation. */
end_comment
begin_function
DECL|function|animation
name|QAbstractAnimation
modifier|*
name|QAnimationState
operator|::
name|animation
parameter_list|()
specifier|const
block|{
return|return
name|m_animation
return|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|onEntry
name|void
name|QAnimationState
operator|::
name|onEntry
parameter_list|(
name|QEvent
modifier|*
parameter_list|)
block|{
if|if
condition|(
name|m_animation
condition|)
name|m_animation
operator|->
name|start
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|onExit
name|void
name|QAnimationState
operator|::
name|onExit
parameter_list|(
name|QEvent
modifier|*
parameter_list|)
block|{
if|if
condition|(
name|m_animation
condition|)
name|m_animation
operator|->
name|stop
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*!   \reimp */
end_comment
begin_function
DECL|function|event
name|bool
name|QAnimationState
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
return|return
name|QState
operator|::
name|event
argument_list|(
name|e
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
