begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: http://www.qt-project.org/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor **     the names of its contributors may be used to endorse or promote **     products derived from this software without specific prior written **     permission. ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|STICKMAN_H
end_ifndef
begin_define
DECL|macro|STICKMAN_H
define|#
directive|define
name|STICKMAN_H
end_define
begin_include
include|#
directive|include
file|<QGraphicsObject>
end_include
begin_decl_stmt
DECL|variable|NodeCount
specifier|static
specifier|const
name|int
name|NodeCount
init|=
literal|16
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|BoneCount
specifier|static
specifier|const
name|int
name|BoneCount
init|=
literal|24
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|Node
name|class
name|Node
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|QT_END_NAMESPACE
name|class
name|StickMan
range|:
name|public
name|QGraphicsObject
block|{
name|Q_OBJECT
name|Q_PROPERTY
argument_list|(
argument|QColor penColor WRITE setPenColor READ penColor
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QColor fillColor WRITE setFillColor READ fillColor
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|bool isDead WRITE setIsDead READ isDead
argument_list|)
name|public
operator|:
name|StickMan
argument_list|()
block|;
operator|~
name|StickMan
argument_list|()
block|;
name|virtual
name|QRectF
name|boundingRect
argument_list|()
specifier|const
block|;
name|virtual
name|void
name|paint
argument_list|(
name|QPainter
operator|*
name|painter
argument_list|,
specifier|const
name|QStyleOptionGraphicsItem
operator|*
name|option
argument_list|,
name|QWidget
operator|*
name|widget
argument_list|)
block|;
name|int
name|nodeCount
argument_list|()
specifier|const
block|;
name|Node
operator|*
name|node
argument_list|(
argument|int idx
argument_list|)
specifier|const
block|;
name|void
name|setDrawSticks
argument_list|(
argument|bool on
argument_list|)
block|;
name|bool
name|drawSticks
argument_list|()
specifier|const
block|{
return|return
name|m_sticks
return|;
block|}
name|QColor
name|penColor
argument_list|()
specifier|const
block|{
return|return
name|m_penColor
return|;
block|}
name|void
name|setPenColor
argument_list|(
argument|const QColor&color
argument_list|)
block|{
name|m_penColor
operator|=
name|color
block|; }
name|QColor
name|fillColor
argument_list|()
specifier|const
block|{
return|return
name|m_fillColor
return|;
block|}
name|void
name|setFillColor
argument_list|(
argument|const QColor&color
argument_list|)
block|{
name|m_fillColor
operator|=
name|color
block|; }
name|bool
name|isDead
argument_list|()
specifier|const
block|{
return|return
name|m_isDead
return|;
block|}
name|void
name|setIsDead
argument_list|(
argument|bool isDead
argument_list|)
block|{
name|m_isDead
operator|=
name|isDead
block|; }
name|public
name|slots
operator|:
name|void
name|stabilize
argument_list|()
block|;
name|void
name|childPositionChanged
argument_list|()
block|;
name|protected
operator|:
name|void
name|timerEvent
argument_list|(
name|QTimerEvent
operator|*
name|e
argument_list|)
block|;
name|private
operator|:
name|QPointF
name|posFor
argument_list|(
argument|int idx
argument_list|)
specifier|const
block|;
name|Node
operator|*
name|m_nodes
index|[
name|NodeCount
index|]
block|;
name|qreal
name|m_perfectBoneLengths
index|[
name|BoneCount
index|]
block|;
name|uint
name|m_sticks
operator|:
literal|1
block|;
name|uint
name|m_isDead
operator|:
literal|1
block|;
name|uint
name|m_reserved
operator|:
literal|30
block|;
name|QPixmap
name|m_pixmap
block|;
name|QColor
name|m_penColor
block|;
name|QColor
name|m_fillColor
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// STICKMAN_H
end_comment
end_unit
