begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** BSD License Usage ** Alternatively, you may use this file under the terms of the BSD license ** as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of The Qt Company Ltd nor the names of its **     contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|//Own
end_comment
begin_include
include|#
directive|include
file|"animationmanager.h"
end_include
begin_comment
comment|//Qt
end_comment
begin_include
include|#
directive|include
file|<QtCore/QAbstractAnimation>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_comment
comment|// the universe's only animation manager
end_comment
begin_decl_stmt
DECL|member|instance
name|AnimationManager
modifier|*
name|AnimationManager
operator|::
name|instance
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|AnimationManager
name|AnimationManager
operator|::
name|AnimationManager
parameter_list|()
block|{ }
end_constructor
begin_function
DECL|function|self
name|AnimationManager
modifier|*
name|AnimationManager
operator|::
name|self
parameter_list|()
block|{
if|if
condition|(
operator|!
name|instance
condition|)
name|instance
operator|=
operator|new
name|AnimationManager
expr_stmt|;
return|return
name|instance
return|;
block|}
end_function
begin_function
DECL|function|registerAnimation
name|void
name|AnimationManager
operator|::
name|registerAnimation
parameter_list|(
name|QAbstractAnimation
modifier|*
name|anim
parameter_list|)
block|{
name|QObject
operator|::
name|connect
argument_list|(
name|anim
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|(
name|QObject
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|unregisterAnimation_helper
argument_list|(
name|QObject
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|animations
operator|.
name|append
argument_list|(
name|anim
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unregisterAnimation_helper
name|void
name|AnimationManager
operator|::
name|unregisterAnimation_helper
parameter_list|(
name|QObject
modifier|*
name|obj
parameter_list|)
block|{
name|unregisterAnimation
argument_list|(
cast|static_cast
argument_list|<
name|QAbstractAnimation
operator|*
argument_list|>
argument_list|(
name|obj
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unregisterAnimation
name|void
name|AnimationManager
operator|::
name|unregisterAnimation
parameter_list|(
name|QAbstractAnimation
modifier|*
name|anim
parameter_list|)
block|{
name|QObject
operator|::
name|disconnect
argument_list|(
name|anim
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|(
name|QObject
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|unregisterAnimation_helper
argument_list|(
name|QObject
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|animations
operator|.
name|removeAll
argument_list|(
name|anim
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unregisterAllAnimations
name|void
name|AnimationManager
operator|::
name|unregisterAllAnimations
parameter_list|()
block|{
name|animations
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|pauseAll
name|void
name|AnimationManager
operator|::
name|pauseAll
parameter_list|()
block|{
foreach|foreach
control|(
name|QAbstractAnimation
modifier|*
name|animation
decl|,
name|animations
control|)
block|{
if|if
condition|(
name|animation
operator|->
name|state
argument_list|()
operator|==
name|QAbstractAnimation
operator|::
name|Running
condition|)
name|animation
operator|->
name|pause
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|resumeAll
name|void
name|AnimationManager
operator|::
name|resumeAll
parameter_list|()
block|{
foreach|foreach
control|(
name|QAbstractAnimation
modifier|*
name|animation
decl|,
name|animations
control|)
block|{
if|if
condition|(
name|animation
operator|->
name|state
argument_list|()
operator|==
name|QAbstractAnimation
operator|::
name|Paused
condition|)
name|animation
operator|->
name|resume
argument_list|()
expr_stmt|;
block|}
block|}
end_function
end_unit
