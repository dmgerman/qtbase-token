begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** BSD License Usage ** Alternatively, you may use this file under the terms of the BSD license ** as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of The Qt Company Ltd nor the names of its **     contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|BOAT_P_H
end_ifndef
begin_define
DECL|macro|BOAT_P_H
define|#
directive|define
name|BOAT_P_H
end_define
begin_comment
comment|//
end_comment
begin_comment
comment|//  W A R N I N G
end_comment
begin_comment
comment|//  -------------
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// This file is not part of the Qt API.  It exists purely as an
end_comment
begin_comment
comment|// implementation detail.  This header file may change from version to
end_comment
begin_comment
comment|// version without notice, or even be removed.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|// We mean it.
end_comment
begin_comment
comment|//
end_comment
begin_comment
comment|//Own
end_comment
begin_include
include|#
directive|include
file|"bomb.h"
end_include
begin_include
include|#
directive|include
file|"graphicsscene.h"
end_include
begin_comment
comment|// Qt
end_comment
begin_include
include|#
directive|include
file|<QtWidgets/QKeyEventTransition>
end_include
begin_decl_stmt
DECL|variable|MAX_BOMB
specifier|static
specifier|const
name|int
name|MAX_BOMB
init|=
literal|5
decl_stmt|;
end_decl_stmt
begin_comment
comment|//These transtion test if we have to stop the boat (i.e current speed is 1)
end_comment
begin_decl_stmt
name|class
name|KeyStopTransition
range|:
name|public
name|QKeyEventTransition
block|{
name|public
operator|:
name|KeyStopTransition
argument_list|(
argument|Boat *b
argument_list|,
argument|QEvent::Type t
argument_list|,
argument|int k
argument_list|)
operator|:
name|QKeyEventTransition
argument_list|(
name|b
argument_list|,
name|t
argument_list|,
name|k
argument_list|)
block|,
name|boat
argument_list|(
argument|b
argument_list|)
block|{     }
name|protected
operator|:
name|virtual
name|bool
name|eventTest
argument_list|(
argument|QEvent *event
argument_list|)
name|Q_DECL_OVERRIDE
block|{
if|if
condition|(
operator|!
name|QKeyEventTransition
operator|::
name|eventTest
argument_list|(
name|event
argument_list|)
condition|)
return|return
name|false
return|;
return|return
operator|(
name|boat
operator|->
name|currentSpeed
argument_list|()
operator|==
literal|1
operator|)
return|;
block|}
end_decl_stmt
begin_label
name|private
label|:
end_label
begin_decl_stmt
name|Boat
modifier|*
name|boat
decl_stmt|;
end_decl_stmt
begin_comment
unit|};
comment|//These transtion test if we have to move the boat (i.e current speed was 0 or another value)
end_comment
begin_decl_stmt
name|class
name|KeyMoveTransition
range|:
name|public
name|QKeyEventTransition
block|{
name|public
operator|:
name|KeyMoveTransition
argument_list|(
argument|Boat *b
argument_list|,
argument|QEvent::Type t
argument_list|,
argument|int k
argument_list|)
operator|:
name|QKeyEventTransition
argument_list|(
name|b
argument_list|,
name|t
argument_list|,
name|k
argument_list|)
block|,
name|boat
argument_list|(
name|b
argument_list|)
block|,
name|key
argument_list|(
argument|k
argument_list|)
block|{     }
name|protected
operator|:
name|virtual
name|bool
name|eventTest
argument_list|(
argument|QEvent *event
argument_list|)
name|Q_DECL_OVERRIDE
block|{
if|if
condition|(
operator|!
name|QKeyEventTransition
operator|::
name|eventTest
argument_list|(
name|event
argument_list|)
condition|)
return|return
name|false
return|;
return|return
operator|(
name|boat
operator|->
name|currentSpeed
argument_list|()
operator|>=
literal|0
operator|)
return|;
block|}
end_decl_stmt
begin_function
name|void
name|onTransition
parameter_list|(
name|QEvent
modifier|*
parameter_list|)
function|Q_DECL_OVERRIDE
block|{
comment|//We decrease the speed if needed
if|if
condition|(
name|key
operator|==
name|Qt
operator|::
name|Key_Left
operator|&&
name|boat
operator|->
name|currentDirection
argument_list|()
operator|==
name|Boat
operator|::
name|Right
condition|)
name|boat
operator|->
name|setCurrentSpeed
argument_list|(
name|boat
operator|->
name|currentSpeed
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|key
operator|==
name|Qt
operator|::
name|Key_Right
operator|&&
name|boat
operator|->
name|currentDirection
argument_list|()
operator|==
name|Boat
operator|::
name|Left
condition|)
name|boat
operator|->
name|setCurrentSpeed
argument_list|(
name|boat
operator|->
name|currentSpeed
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|boat
operator|->
name|currentSpeed
argument_list|()
operator|<
literal|3
condition|)
name|boat
operator|->
name|setCurrentSpeed
argument_list|(
name|boat
operator|->
name|currentSpeed
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|boat
operator|->
name|updateBoatMovement
argument_list|()
expr_stmt|;
block|}
end_function
begin_label
name|private
label|:
end_label
begin_decl_stmt
name|Boat
modifier|*
name|boat
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|int
name|key
decl_stmt|;
end_decl_stmt
begin_comment
unit|};
comment|//This transition trigger the bombs launch
end_comment
begin_decl_stmt
name|class
name|KeyLaunchTransition
range|:
name|public
name|QKeyEventTransition
block|{
name|public
operator|:
name|KeyLaunchTransition
argument_list|(
argument|Boat *boat
argument_list|,
argument|QEvent::Type type
argument_list|,
argument|int key
argument_list|)
operator|:
name|QKeyEventTransition
argument_list|(
name|boat
argument_list|,
name|type
argument_list|,
name|key
argument_list|)
block|,
name|boat
argument_list|(
argument|boat
argument_list|)
block|{     }
name|protected
operator|:
name|virtual
name|bool
name|eventTest
argument_list|(
argument|QEvent *event
argument_list|)
name|Q_DECL_OVERRIDE
block|{
if|if
condition|(
operator|!
name|QKeyEventTransition
operator|::
name|eventTest
argument_list|(
name|event
argument_list|)
condition|)
return|return
name|false
return|;
comment|//We have enough bomb?
return|return
operator|(
name|boat
operator|->
name|bombsLaunched
argument_list|()
operator|<
name|MAX_BOMB
operator|)
return|;
block|}
end_decl_stmt
begin_label
name|private
label|:
end_label
begin_decl_stmt
name|Boat
modifier|*
name|boat
decl_stmt|;
end_decl_stmt
begin_comment
unit|};
comment|//This state is describing when the boat is moving right
end_comment
begin_decl_stmt
name|class
name|MoveStateRight
range|:
name|public
name|QState
block|{
name|public
operator|:
name|explicit
name|MoveStateRight
argument_list|(
name|Boat
operator|*
name|boat
argument_list|,
name|QState
operator|*
name|parent
operator|=
literal|0
argument_list|)
operator|:
name|QState
argument_list|(
name|parent
argument_list|)
block|,
name|boat
argument_list|(
argument|boat
argument_list|)
block|{     }
name|protected
operator|:
name|void
name|onEntry
argument_list|(
argument|QEvent *
argument_list|)
name|Q_DECL_OVERRIDE
block|{
name|boat
operator|->
name|setCurrentDirection
argument_list|(
name|Boat
operator|::
name|Right
argument_list|)
block|;
name|boat
operator|->
name|updateBoatMovement
argument_list|()
block|;     }
name|private
operator|:
name|Boat
operator|*
name|boat
block|; }
decl_stmt|;
end_decl_stmt
begin_comment
comment|//This state is describing when the boat is moving left
end_comment
begin_decl_stmt
name|class
name|MoveStateLeft
range|:
name|public
name|QState
block|{
name|public
operator|:
name|explicit
name|MoveStateLeft
argument_list|(
name|Boat
operator|*
name|boat
argument_list|,
name|QState
operator|*
name|parent
operator|=
literal|0
argument_list|)
operator|:
name|QState
argument_list|(
name|parent
argument_list|)
block|,
name|boat
argument_list|(
argument|boat
argument_list|)
block|{     }
name|protected
operator|:
name|void
name|onEntry
argument_list|(
argument|QEvent *
argument_list|)
name|Q_DECL_OVERRIDE
block|{
name|boat
operator|->
name|setCurrentDirection
argument_list|(
name|Boat
operator|::
name|Left
argument_list|)
block|;
name|boat
operator|->
name|updateBoatMovement
argument_list|()
block|;     }
name|private
operator|:
name|Boat
operator|*
name|boat
block|; }
decl_stmt|;
end_decl_stmt
begin_comment
comment|//This state is describing when the boat is in a stand by position
end_comment
begin_decl_stmt
name|class
name|StopState
range|:
name|public
name|QState
block|{
name|public
operator|:
name|explicit
name|StopState
argument_list|(
name|Boat
operator|*
name|boat
argument_list|,
name|QState
operator|*
name|parent
operator|=
literal|0
argument_list|)
operator|:
name|QState
argument_list|(
name|parent
argument_list|)
block|,
name|boat
argument_list|(
argument|boat
argument_list|)
block|{     }
name|protected
operator|:
name|void
name|onEntry
argument_list|(
argument|QEvent *
argument_list|)
name|Q_DECL_OVERRIDE
block|{
name|boat
operator|->
name|setCurrentSpeed
argument_list|(
literal|0
argument_list|)
block|;
name|boat
operator|->
name|setCurrentDirection
argument_list|(
name|Boat
operator|::
name|None
argument_list|)
block|;
name|boat
operator|->
name|updateBoatMovement
argument_list|()
block|;     }
name|private
operator|:
name|Boat
operator|*
name|boat
block|; }
decl_stmt|;
end_decl_stmt
begin_comment
comment|//This state is describing the launch of the torpedo on the right
end_comment
begin_decl_stmt
name|class
name|LaunchStateRight
range|:
name|public
name|QState
block|{
name|public
operator|:
name|explicit
name|LaunchStateRight
argument_list|(
name|Boat
operator|*
name|boat
argument_list|,
name|QState
operator|*
name|parent
operator|=
literal|0
argument_list|)
operator|:
name|QState
argument_list|(
name|parent
argument_list|)
block|,
name|boat
argument_list|(
argument|boat
argument_list|)
block|{     }
name|protected
operator|:
name|void
name|onEntry
argument_list|(
argument|QEvent *
argument_list|)
name|Q_DECL_OVERRIDE
block|{
name|Bomb
operator|*
name|b
operator|=
name|new
name|Bomb
argument_list|()
block|;
name|b
operator|->
name|setPos
argument_list|(
name|boat
operator|->
name|x
argument_list|()
operator|+
name|boat
operator|->
name|size
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
name|boat
operator|->
name|y
argument_list|()
argument_list|)
block|;
name|GraphicsScene
operator|*
name|scene
operator|=
name|static_cast
operator|<
name|GraphicsScene
operator|*
operator|>
operator|(
name|boat
operator|->
name|scene
argument_list|()
operator|)
block|;
name|scene
operator|->
name|addItem
argument_list|(
name|b
argument_list|)
block|;
name|b
operator|->
name|launch
argument_list|(
name|Bomb
operator|::
name|Right
argument_list|)
block|;
name|boat
operator|->
name|setBombsLaunched
argument_list|(
name|boat
operator|->
name|bombsLaunched
argument_list|()
operator|+
literal|1
argument_list|)
block|;     }
name|private
operator|:
name|Boat
operator|*
name|boat
block|; }
decl_stmt|;
end_decl_stmt
begin_comment
comment|//This state is describing the launch of the torpedo on the left
end_comment
begin_decl_stmt
name|class
name|LaunchStateLeft
range|:
name|public
name|QState
block|{
name|public
operator|:
name|explicit
name|LaunchStateLeft
argument_list|(
name|Boat
operator|*
name|boat
argument_list|,
name|QState
operator|*
name|parent
operator|=
literal|0
argument_list|)
operator|:
name|QState
argument_list|(
name|parent
argument_list|)
block|,
name|boat
argument_list|(
argument|boat
argument_list|)
block|{     }
name|protected
operator|:
name|void
name|onEntry
argument_list|(
argument|QEvent *
argument_list|)
name|Q_DECL_OVERRIDE
block|{
name|Bomb
operator|*
name|b
operator|=
name|new
name|Bomb
argument_list|()
block|;
name|b
operator|->
name|setPos
argument_list|(
name|boat
operator|->
name|x
argument_list|()
operator|-
name|b
operator|->
name|size
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
name|boat
operator|->
name|y
argument_list|()
argument_list|)
block|;
name|GraphicsScene
operator|*
name|scene
operator|=
name|static_cast
operator|<
name|GraphicsScene
operator|*
operator|>
operator|(
name|boat
operator|->
name|scene
argument_list|()
operator|)
block|;
name|scene
operator|->
name|addItem
argument_list|(
name|b
argument_list|)
block|;
name|b
operator|->
name|launch
argument_list|(
name|Bomb
operator|::
name|Left
argument_list|)
block|;
name|boat
operator|->
name|setBombsLaunched
argument_list|(
name|boat
operator|->
name|bombsLaunched
argument_list|()
operator|+
literal|1
argument_list|)
block|;     }
name|private
operator|:
name|Boat
operator|*
name|boat
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// BOAT_P_H
end_comment
end_unit
