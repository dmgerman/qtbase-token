begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** BSD License Usage ** Alternatively, you may use this file under the terms of the BSD license ** as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of The Qt Company Ltd nor the names of its **     contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|STATES_H
end_ifndef
begin_define
DECL|macro|STATES_H
define|#
directive|define
name|STATES_H
end_define
begin_comment
comment|//Qt
end_comment
begin_include
include|#
directive|include
file|<QtCore/QState>
end_include
begin_include
include|#
directive|include
file|<QtCore/QSignalTransition>
end_include
begin_include
include|#
directive|include
file|<QtCore/QPropertyAnimation>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QKeyEventTransition>
end_include
begin_include
include|#
directive|include
file|<QtCore/QSet>
end_include
begin_decl_stmt
DECL|variable|GraphicsScene
name|class
name|GraphicsScene
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|Boat
name|class
name|Boat
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|SubMarine
name|class
name|SubMarine
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QStateMachine
name|class
name|QStateMachine
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QT_END_NAMESPACE
name|class
name|PlayState
range|:
name|public
name|QState
block|{
name|public
operator|:
name|explicit
name|PlayState
argument_list|(
name|GraphicsScene
operator|*
name|scene
argument_list|,
name|QState
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
operator|~
name|PlayState
argument_list|()
block|;
name|protected
operator|:
name|void
name|onEntry
argument_list|(
argument|QEvent *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|private
operator|:
name|GraphicsScene
operator|*
name|scene
block|;
name|QStateMachine
operator|*
name|machine
block|;
name|int
name|currentLevel
block|;
name|int
name|score
block|;
name|friend
name|class
name|UpdateScoreState
block|;
name|friend
name|class
name|UpdateScoreTransition
block|;
name|friend
name|class
name|WinTransition
block|;
name|friend
name|class
name|CustomSpaceTransition
block|;
name|friend
name|class
name|WinState
block|;
name|friend
name|class
name|LostState
block|;
name|friend
name|class
name|LevelState
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|LevelState
range|:
name|public
name|QState
block|{
name|public
operator|:
name|LevelState
argument_list|(
name|GraphicsScene
operator|*
name|scene
argument_list|,
name|PlayState
operator|*
name|game
argument_list|,
name|QState
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
name|protected
operator|:
name|void
name|onEntry
argument_list|(
argument|QEvent *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|private
operator|:
name|void
name|initializeLevel
argument_list|()
block|;
name|GraphicsScene
operator|*
name|scene
block|;
name|PlayState
operator|*
name|game
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|PauseState
range|:
name|public
name|QState
block|{
name|public
operator|:
name|explicit
name|PauseState
argument_list|(
name|GraphicsScene
operator|*
name|scene
argument_list|,
name|QState
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
name|protected
operator|:
name|void
name|onEntry
argument_list|(
argument|QEvent *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|void
name|onExit
argument_list|(
argument|QEvent *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|private
operator|:
name|GraphicsScene
operator|*
name|scene
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|LostState
range|:
name|public
name|QState
block|{
name|public
operator|:
name|LostState
argument_list|(
name|GraphicsScene
operator|*
name|scene
argument_list|,
name|PlayState
operator|*
name|game
argument_list|,
name|QState
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
name|protected
operator|:
name|void
name|onEntry
argument_list|(
argument|QEvent *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|void
name|onExit
argument_list|(
argument|QEvent *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|private
operator|:
name|GraphicsScene
operator|*
name|scene
block|;
name|PlayState
operator|*
name|game
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|WinState
range|:
name|public
name|QState
block|{
name|public
operator|:
name|WinState
argument_list|(
name|GraphicsScene
operator|*
name|scene
argument_list|,
name|PlayState
operator|*
name|game
argument_list|,
name|QState
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
name|protected
operator|:
name|void
name|onEntry
argument_list|(
argument|QEvent *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|void
name|onExit
argument_list|(
argument|QEvent *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|private
operator|:
name|GraphicsScene
operator|*
name|scene
block|;
name|PlayState
operator|*
name|game
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|UpdateScoreState
range|:
name|public
name|QState
block|{
name|public
operator|:
name|UpdateScoreState
argument_list|(
name|QState
operator|*
name|parent
argument_list|)
block|;
name|private
operator|:
block|}
decl_stmt|;
end_decl_stmt
begin_comment
comment|//These transtion is used to update the score
end_comment
begin_decl_stmt
name|class
name|UpdateScoreTransition
range|:
name|public
name|QSignalTransition
block|{
name|public
operator|:
name|UpdateScoreTransition
argument_list|(
name|GraphicsScene
operator|*
name|scene
argument_list|,
name|PlayState
operator|*
name|game
argument_list|,
name|QAbstractState
operator|*
name|target
argument_list|)
block|;
name|protected
operator|:
name|virtual
name|bool
name|eventTest
argument_list|(
argument|QEvent *event
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|private
operator|:
name|PlayState
operator|*
name|game
block|;
name|GraphicsScene
operator|*
name|scene
block|; }
decl_stmt|;
end_decl_stmt
begin_comment
comment|//These transtion test if we have won the game
end_comment
begin_decl_stmt
name|class
name|WinTransition
range|:
name|public
name|QSignalTransition
block|{
name|public
operator|:
name|WinTransition
argument_list|(
name|GraphicsScene
operator|*
name|scene
argument_list|,
name|PlayState
operator|*
name|game
argument_list|,
name|QAbstractState
operator|*
name|target
argument_list|)
block|;
name|protected
operator|:
name|virtual
name|bool
name|eventTest
argument_list|(
argument|QEvent *event
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|private
operator|:
name|PlayState
operator|*
name|game
block|;
name|GraphicsScene
operator|*
name|scene
block|; }
decl_stmt|;
end_decl_stmt
begin_comment
comment|//These transtion is true if one level has been completed and the player want to continue
end_comment
begin_decl_stmt
name|class
name|CustomSpaceTransition
range|:
name|public
name|QKeyEventTransition
block|{
name|public
operator|:
name|CustomSpaceTransition
argument_list|(
argument|QWidget *widget
argument_list|,
argument|PlayState *game
argument_list|,
argument|QEvent::Type type
argument_list|,
argument|int key
argument_list|)
block|;
name|protected
operator|:
name|virtual
name|bool
name|eventTest
argument_list|(
argument|QEvent *event
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|private
operator|:
name|PlayState
operator|*
name|game
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// STATES_H
end_comment
end_unit
