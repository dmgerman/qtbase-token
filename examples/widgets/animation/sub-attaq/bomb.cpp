begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|//Own
end_comment
begin_include
include|#
directive|include
file|"bomb.h"
end_include
begin_include
include|#
directive|include
file|"submarine.h"
end_include
begin_include
include|#
directive|include
file|"pixmapitem.h"
end_include
begin_include
include|#
directive|include
file|"animationmanager.h"
end_include
begin_include
include|#
directive|include
file|"qanimationstate.h"
end_include
begin_comment
comment|//Qt
end_comment
begin_include
include|#
directive|include
file|<QtCore/QSequentialAnimationGroup>
end_include
begin_include
include|#
directive|include
file|<QtCore/QPropertyAnimation>
end_include
begin_include
include|#
directive|include
file|<QtCore/QStateMachine>
end_include
begin_include
include|#
directive|include
file|<QtCore/QFinalState>
end_include
begin_constructor
DECL|function|Bomb
name|Bomb
operator|::
name|Bomb
parameter_list|()
member_init_list|:
name|PixmapItem
argument_list|(
name|QString
argument_list|(
literal|"bomb"
argument_list|)
argument_list|,
name|GraphicsScene
operator|::
name|Big
argument_list|)
block|{
name|setZValue
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|launch
name|void
name|Bomb
operator|::
name|launch
parameter_list|(
name|Bomb
operator|::
name|Direction
name|direction
parameter_list|)
block|{
name|QSequentialAnimationGroup
modifier|*
name|launchAnimation
init|=
operator|new
name|QSequentialAnimationGroup
decl_stmt|;
name|AnimationManager
operator|::
name|self
argument_list|()
operator|->
name|registerAnimation
argument_list|(
name|launchAnimation
argument_list|)
expr_stmt|;
name|qreal
name|delta
init|=
name|direction
operator|==
name|Right
condition|?
literal|20
else|:
operator|-
literal|20
decl_stmt|;
name|QPropertyAnimation
modifier|*
name|anim
init|=
operator|new
name|QPropertyAnimation
argument_list|(
name|this
argument_list|,
literal|"pos"
argument_list|)
decl_stmt|;
name|anim
operator|->
name|setEndValue
argument_list|(
name|QPointF
argument_list|(
name|x
argument_list|()
operator|+
name|delta
argument_list|,
name|y
argument_list|()
operator|-
literal|20
argument_list|)
argument_list|)
expr_stmt|;
name|anim
operator|->
name|setDuration
argument_list|(
literal|150
argument_list|)
expr_stmt|;
name|launchAnimation
operator|->
name|addAnimation
argument_list|(
name|anim
argument_list|)
expr_stmt|;
name|anim
operator|=
operator|new
name|QPropertyAnimation
argument_list|(
name|this
argument_list|,
literal|"pos"
argument_list|)
expr_stmt|;
name|anim
operator|->
name|setEndValue
argument_list|(
name|QPointF
argument_list|(
name|x
argument_list|()
operator|+
name|delta
operator|*
literal|2
argument_list|,
name|y
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|anim
operator|->
name|setDuration
argument_list|(
literal|150
argument_list|)
expr_stmt|;
name|launchAnimation
operator|->
name|addAnimation
argument_list|(
name|anim
argument_list|)
expr_stmt|;
name|anim
operator|=
operator|new
name|QPropertyAnimation
argument_list|(
name|this
argument_list|,
literal|"pos"
argument_list|)
expr_stmt|;
name|anim
operator|->
name|setEndValue
argument_list|(
name|QPointF
argument_list|(
name|x
argument_list|()
operator|+
name|delta
operator|*
literal|2
argument_list|,
name|scene
argument_list|()
operator|->
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|anim
operator|->
name|setDuration
argument_list|(
name|y
argument_list|()
operator|/
literal|2
operator|*
literal|60
argument_list|)
expr_stmt|;
name|launchAnimation
operator|->
name|addAnimation
argument_list|(
name|anim
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|anim
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|QVariant
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|onAnimationLaunchValueChanged
argument_list|(
name|QVariant
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|bombExploded
argument_list|()
argument_list|)
argument_list|,
name|launchAnimation
argument_list|,
name|SLOT
argument_list|(
name|stop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//We setup the state machine of the bomb
name|QStateMachine
modifier|*
name|machine
init|=
operator|new
name|QStateMachine
argument_list|(
name|this
argument_list|)
decl_stmt|;
comment|//This state is when the launch animation is playing
name|QAnimationState
modifier|*
name|launched
init|=
operator|new
name|QAnimationState
argument_list|(
name|machine
argument_list|)
decl_stmt|;
name|launched
operator|->
name|setAnimation
argument_list|(
name|launchAnimation
argument_list|)
expr_stmt|;
comment|//End
name|QFinalState
modifier|*
name|final
init|=
operator|new
name|QFinalState
argument_list|(
name|machine
argument_list|)
decl_stmt|;
name|machine
operator|->
name|setInitialState
argument_list|(
name|launched
argument_list|)
expr_stmt|;
comment|//### Add a nice animation when the bomb is destroyed
name|launched
operator|->
name|addTransition
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|bombExploded
argument_list|()
argument_list|)
argument_list|,
name|final
argument_list|)
expr_stmt|;
comment|//If the animation is finished, then we move to the final state
name|launched
operator|->
name|addTransition
argument_list|(
name|launched
argument_list|,
name|SIGNAL
argument_list|(
name|animationFinished
argument_list|()
argument_list|)
argument_list|,
name|final
argument_list|)
expr_stmt|;
comment|//The machine has finished to be executed, then the boat is dead
name|connect
argument_list|(
name|machine
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|bombExecutionFinished
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|machine
operator|->
name|start
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|onAnimationLaunchValueChanged
name|void
name|Bomb
operator|::
name|onAnimationLaunchValueChanged
parameter_list|(
specifier|const
name|QVariant
modifier|&
parameter_list|)
block|{
foreach|foreach
control|(
name|QGraphicsItem
modifier|*
name|item
decl|,
name|collidingItems
argument_list|(
name|Qt
operator|::
name|IntersectsItemBoundingRect
argument_list|)
control|)
block|{
if|if
condition|(
name|item
operator|->
name|type
argument_list|()
operator|==
name|SubMarine
operator|::
name|Type
condition|)
block|{
name|SubMarine
modifier|*
name|s
init|=
cast|static_cast
argument_list|<
name|SubMarine
operator|*
argument_list|>
argument_list|(
name|item
argument_list|)
decl_stmt|;
name|destroy
argument_list|()
expr_stmt|;
name|s
operator|->
name|destroy
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|destroy
name|void
name|Bomb
operator|::
name|destroy
parameter_list|()
block|{
emit|emit
name|bombExploded
argument_list|()
emit|;
block|}
end_function
end_unit
