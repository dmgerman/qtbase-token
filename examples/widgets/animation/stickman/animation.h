begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names **     of its contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|ANIMATION_H
end_ifndef
begin_define
DECL|macro|ANIMATION_H
define|#
directive|define
name|ANIMATION_H
end_define
begin_include
include|#
directive|include
file|<QPointF>
end_include
begin_include
include|#
directive|include
file|<QList>
end_include
begin_include
include|#
directive|include
file|<QString>
end_include
begin_decl_stmt
DECL|variable|Frame
name|class
name|Frame
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QIODevice
name|class
name|QIODevice
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QT_END_NAMESPACE
name|class
name|Animation
block|{
name|public
label|:
name|Animation
argument_list|()
expr_stmt|;
operator|~
name|Animation
argument_list|()
expr_stmt|;
name|void
name|setTotalFrames
parameter_list|(
name|int
name|totalFrames
parameter_list|)
function_decl|;
name|int
name|totalFrames
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setCurrentFrame
parameter_list|(
name|int
name|currentFrame
parameter_list|)
function_decl|;
name|int
name|currentFrame
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setNodeCount
parameter_list|(
name|int
name|nodeCount
parameter_list|)
function_decl|;
name|int
name|nodeCount
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setNodePos
parameter_list|(
name|int
name|idx
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|)
function_decl|;
name|QPointF
name|nodePos
argument_list|(
name|int
name|idx
argument_list|)
decl|const
decl_stmt|;
name|QString
name|name
argument_list|()
specifier|const
expr_stmt|;
name|void
name|setName
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
function_decl|;
name|void
name|save
argument_list|(
name|QIODevice
operator|*
name|device
argument_list|)
decl|const
decl_stmt|;
name|void
name|load
parameter_list|(
name|QIODevice
modifier|*
name|device
parameter_list|)
function_decl|;
name|private
label|:
name|QString
name|m_name
decl_stmt|;
name|QList
operator|<
name|Frame
operator|*
operator|>
name|m_frames
expr_stmt|;
name|int
name|m_currentFrame
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_endif
endif|#
directive|endif
end_endif
end_unit
