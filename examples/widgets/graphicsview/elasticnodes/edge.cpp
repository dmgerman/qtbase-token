begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of The Qt Company Ltd and its Subsidiary(-ies) nor the **     names of its contributors may be used to endorse or promote products **     derived from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"edge.h"
end_include
begin_include
include|#
directive|include
file|"node.h"
end_include
begin_include
include|#
directive|include
file|<math.h>
end_include
begin_include
include|#
directive|include
file|<QPainter>
end_include
begin_decl_stmt
DECL|variable|Pi
specifier|static
specifier|const
name|double
name|Pi
init|=
literal|3.14159265358979323846264338327950288419717
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|TwoPi
specifier|static
name|double
name|TwoPi
init|=
literal|2.0
operator|*
name|Pi
decl_stmt|;
end_decl_stmt
begin_comment
comment|//! [0]
end_comment
begin_constructor
DECL|function|Edge
name|Edge
operator|::
name|Edge
parameter_list|(
name|Node
modifier|*
name|sourceNode
parameter_list|,
name|Node
modifier|*
name|destNode
parameter_list|)
member_init_list|:
name|arrowSize
argument_list|(
literal|10
argument_list|)
block|{
name|setAcceptedMouseButtons
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|source
operator|=
name|sourceNode
expr_stmt|;
name|dest
operator|=
name|destNode
expr_stmt|;
name|source
operator|->
name|addEdge
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|dest
operator|->
name|addEdge
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|adjust
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|//! [0]
end_comment
begin_comment
comment|//! [1]
end_comment
begin_function
DECL|function|sourceNode
name|Node
modifier|*
name|Edge
operator|::
name|sourceNode
parameter_list|()
specifier|const
block|{
return|return
name|source
return|;
block|}
end_function
begin_function
DECL|function|destNode
name|Node
modifier|*
name|Edge
operator|::
name|destNode
parameter_list|()
specifier|const
block|{
return|return
name|dest
return|;
block|}
end_function
begin_comment
comment|//! [1]
end_comment
begin_comment
comment|//! [2]
end_comment
begin_function
DECL|function|adjust
name|void
name|Edge
operator|::
name|adjust
parameter_list|()
block|{
if|if
condition|(
operator|!
name|source
operator|||
operator|!
name|dest
condition|)
return|return;
name|QLineF
name|line
argument_list|(
name|mapFromItem
argument_list|(
name|source
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|mapFromItem
argument_list|(
name|dest
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|qreal
name|length
init|=
name|line
operator|.
name|length
argument_list|()
decl_stmt|;
name|prepareGeometryChange
argument_list|()
expr_stmt|;
if|if
condition|(
name|length
operator|>
name|qreal
argument_list|(
literal|20.
argument_list|)
condition|)
block|{
name|QPointF
name|edgeOffset
argument_list|(
operator|(
name|line
operator|.
name|dx
argument_list|()
operator|*
literal|10
operator|)
operator|/
name|length
argument_list|,
operator|(
name|line
operator|.
name|dy
argument_list|()
operator|*
literal|10
operator|)
operator|/
name|length
argument_list|)
decl_stmt|;
name|sourcePoint
operator|=
name|line
operator|.
name|p1
argument_list|()
operator|+
name|edgeOffset
expr_stmt|;
name|destPoint
operator|=
name|line
operator|.
name|p2
argument_list|()
operator|-
name|edgeOffset
expr_stmt|;
block|}
else|else
block|{
name|sourcePoint
operator|=
name|destPoint
operator|=
name|line
operator|.
name|p1
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|//! [2]
end_comment
begin_comment
comment|//! [3]
end_comment
begin_function
DECL|function|boundingRect
name|QRectF
name|Edge
operator|::
name|boundingRect
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|source
operator|||
operator|!
name|dest
condition|)
return|return
name|QRectF
argument_list|()
return|;
name|qreal
name|penWidth
init|=
literal|1
decl_stmt|;
name|qreal
name|extra
init|=
operator|(
name|penWidth
operator|+
name|arrowSize
operator|)
operator|/
literal|2.0
decl_stmt|;
return|return
name|QRectF
argument_list|(
name|sourcePoint
argument_list|,
name|QSizeF
argument_list|(
name|destPoint
operator|.
name|x
argument_list|()
operator|-
name|sourcePoint
operator|.
name|x
argument_list|()
argument_list|,
name|destPoint
operator|.
name|y
argument_list|()
operator|-
name|sourcePoint
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
operator|.
name|normalized
argument_list|()
operator|.
name|adjusted
argument_list|(
operator|-
name|extra
argument_list|,
operator|-
name|extra
argument_list|,
name|extra
argument_list|,
name|extra
argument_list|)
return|;
block|}
end_function
begin_comment
comment|//! [3]
end_comment
begin_comment
comment|//! [4]
end_comment
begin_function
DECL|function|paint
name|void
name|Edge
operator|::
name|paint
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QStyleOptionGraphicsItem
modifier|*
parameter_list|,
name|QWidget
modifier|*
parameter_list|)
block|{
if|if
condition|(
operator|!
name|source
operator|||
operator|!
name|dest
condition|)
return|return;
name|QLineF
name|line
argument_list|(
name|sourcePoint
argument_list|,
name|destPoint
argument_list|)
decl_stmt|;
if|if
condition|(
name|qFuzzyCompare
argument_list|(
name|line
operator|.
name|length
argument_list|()
argument_list|,
name|qreal
argument_list|(
literal|0.
argument_list|)
argument_list|)
condition|)
return|return;
comment|//! [4]
comment|//! [5]
comment|// Draw the line itself
name|painter
operator|->
name|setPen
argument_list|(
name|QPen
argument_list|(
name|Qt
operator|::
name|black
argument_list|,
literal|1
argument_list|,
name|Qt
operator|::
name|SolidLine
argument_list|,
name|Qt
operator|::
name|RoundCap
argument_list|,
name|Qt
operator|::
name|RoundJoin
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawLine
argument_list|(
name|line
argument_list|)
expr_stmt|;
comment|//! [5]
comment|//! [6]
comment|// Draw the arrows
name|double
name|angle
init|=
operator|::
name|acos
argument_list|(
name|line
operator|.
name|dx
argument_list|()
operator|/
name|line
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|dy
argument_list|()
operator|>=
literal|0
condition|)
name|angle
operator|=
name|TwoPi
operator|-
name|angle
expr_stmt|;
name|QPointF
name|sourceArrowP1
init|=
name|sourcePoint
operator|+
name|QPointF
argument_list|(
name|sin
argument_list|(
name|angle
operator|+
name|Pi
operator|/
literal|3
argument_list|)
operator|*
name|arrowSize
argument_list|,
name|cos
argument_list|(
name|angle
operator|+
name|Pi
operator|/
literal|3
argument_list|)
operator|*
name|arrowSize
argument_list|)
decl_stmt|;
name|QPointF
name|sourceArrowP2
init|=
name|sourcePoint
operator|+
name|QPointF
argument_list|(
name|sin
argument_list|(
name|angle
operator|+
name|Pi
operator|-
name|Pi
operator|/
literal|3
argument_list|)
operator|*
name|arrowSize
argument_list|,
name|cos
argument_list|(
name|angle
operator|+
name|Pi
operator|-
name|Pi
operator|/
literal|3
argument_list|)
operator|*
name|arrowSize
argument_list|)
decl_stmt|;
name|QPointF
name|destArrowP1
init|=
name|destPoint
operator|+
name|QPointF
argument_list|(
name|sin
argument_list|(
name|angle
operator|-
name|Pi
operator|/
literal|3
argument_list|)
operator|*
name|arrowSize
argument_list|,
name|cos
argument_list|(
name|angle
operator|-
name|Pi
operator|/
literal|3
argument_list|)
operator|*
name|arrowSize
argument_list|)
decl_stmt|;
name|QPointF
name|destArrowP2
init|=
name|destPoint
operator|+
name|QPointF
argument_list|(
name|sin
argument_list|(
name|angle
operator|-
name|Pi
operator|+
name|Pi
operator|/
literal|3
argument_list|)
operator|*
name|arrowSize
argument_list|,
name|cos
argument_list|(
name|angle
operator|-
name|Pi
operator|+
name|Pi
operator|/
literal|3
argument_list|)
operator|*
name|arrowSize
argument_list|)
decl_stmt|;
name|painter
operator|->
name|setBrush
argument_list|(
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPolygon
argument_list|(
name|QPolygonF
argument_list|()
operator|<<
name|line
operator|.
name|p1
argument_list|()
operator|<<
name|sourceArrowP1
operator|<<
name|sourceArrowP2
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPolygon
argument_list|(
name|QPolygonF
argument_list|()
operator|<<
name|line
operator|.
name|p2
argument_list|()
operator|<<
name|destArrowP1
operator|<<
name|destArrowP2
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [6]
end_comment
end_unit
