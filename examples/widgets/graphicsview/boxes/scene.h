begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the demonstration applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** BSD License Usage ** Alternatively, you may use this file under the terms of the BSD license ** as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of The Qt Company Ltd nor the names of its **     contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|SCENE_H
end_ifndef
begin_define
DECL|macro|SCENE_H
define|#
directive|define
name|SCENE_H
end_define
begin_comment
comment|//#include<GL/glew.h>
end_comment
begin_include
include|#
directive|include
file|"glextensions.h"
end_include
begin_include
include|#
directive|include
file|<QtWidgets>
end_include
begin_include
include|#
directive|include
file|<QtOpenGL>
end_include
begin_include
include|#
directive|include
file|"roundedbox.h"
end_include
begin_include
include|#
directive|include
file|"gltrianglemesh.h"
end_include
begin_include
include|#
directive|include
file|"trackball.h"
end_include
begin_include
include|#
directive|include
file|"glbuffers.h"
end_include
begin_include
include|#
directive|include
file|"qtbox.h"
end_include
begin_define
DECL|macro|PI
define|#
directive|define
name|PI
value|3.14159265358979
end_define
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QMatrix4x4
name|class
name|QMatrix4x4
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QT_END_NAMESPACE
name|class
name|ParameterEdit
range|:
name|public
name|QWidget
block|{
name|public
operator|:
name|virtual
name|void
name|emitChange
argument_list|()
operator|=
literal|0
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|ColorEdit
range|:
name|public
name|ParameterEdit
block|{
name|Q_OBJECT
name|public
operator|:
name|ColorEdit
argument_list|(
argument|QRgb initialColor
argument_list|,
argument|int id
argument_list|)
block|;
name|QRgb
name|color
argument_list|()
specifier|const
block|{
return|return
name|m_color
return|;
block|}
name|virtual
name|void
name|emitChange
argument_list|()
name|Q_DECL_OVERRIDE
block|{
name|emit
name|colorChanged
argument_list|(
name|m_color
argument_list|,
name|m_id
argument_list|)
block|;}
name|public
name|slots
operator|:
name|void
name|editDone
argument_list|()
block|;
name|signals
operator|:
name|void
name|colorChanged
argument_list|(
argument|QRgb color
argument_list|,
argument|int id
argument_list|)
block|;
name|protected
operator|:
name|virtual
name|void
name|mousePressEvent
argument_list|(
argument|QMouseEvent *event
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|void
name|setColor
argument_list|(
argument|QRgb color
argument_list|)
block|;
comment|// also emits colorChanged()
name|private
operator|:
name|QGraphicsScene
operator|*
name|m_dialogParentScene
block|;
name|QLineEdit
operator|*
name|m_lineEdit
block|;
name|QFrame
operator|*
name|m_button
block|;
name|QRgb
name|m_color
block|;
name|int
name|m_id
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|FloatEdit
range|:
name|public
name|ParameterEdit
block|{
name|Q_OBJECT
name|public
operator|:
name|FloatEdit
argument_list|(
argument|float initialValue
argument_list|,
argument|int id
argument_list|)
block|;
name|float
name|value
argument_list|()
specifier|const
block|{
return|return
name|m_value
return|;
block|}
name|virtual
name|void
name|emitChange
argument_list|()
name|Q_DECL_OVERRIDE
block|{
name|emit
name|valueChanged
argument_list|(
name|m_value
argument_list|,
name|m_id
argument_list|)
block|;}
name|public
name|slots
operator|:
name|void
name|editDone
argument_list|()
block|;
name|signals
operator|:
name|void
name|valueChanged
argument_list|(
argument|float value
argument_list|,
argument|int id
argument_list|)
block|;
name|private
operator|:
name|QGraphicsScene
operator|*
name|m_dialogParentScene
block|;
name|QLineEdit
operator|*
name|m_lineEdit
block|;
name|float
name|m_value
block|;
name|int
name|m_id
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|GraphicsWidget
range|:
name|public
name|QGraphicsProxyWidget
block|{
name|public
operator|:
name|GraphicsWidget
argument_list|()
operator|:
name|QGraphicsProxyWidget
argument_list|(
literal|0
argument_list|,
argument|Qt::Window
argument_list|)
block|{}
name|protected
operator|:
name|virtual
name|QVariant
name|itemChange
argument_list|(
argument|GraphicsItemChange change
argument_list|,
argument|const QVariant&value
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|void
name|resizeEvent
argument_list|(
argument|QGraphicsSceneResizeEvent *event
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|void
name|paint
argument_list|(
argument|QPainter *painter
argument_list|,
argument|const QStyleOptionGraphicsItem *option
argument_list|,
argument|QWidget *widget
argument_list|)
name|Q_DECL_OVERRIDE
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|TwoSidedGraphicsWidget
range|:
name|public
name|QObject
block|{
name|Q_OBJECT
name|public
operator|:
name|TwoSidedGraphicsWidget
argument_list|(
name|QGraphicsScene
operator|*
name|scene
argument_list|)
block|;
name|void
name|setWidget
argument_list|(
argument|int index
argument_list|,
argument|QWidget *widget
argument_list|)
block|;
name|QWidget
operator|*
name|widget
argument_list|(
argument|int index
argument_list|)
block|;
name|public
name|slots
operator|:
name|void
name|flip
argument_list|()
block|;
name|protected
name|slots
operator|:
name|void
name|animateFlip
argument_list|()
block|;
name|private
operator|:
name|GraphicsWidget
operator|*
name|m_proxyWidgets
index|[
literal|2
index|]
block|;
name|int
name|m_current
block|;
name|int
name|m_angle
block|;
comment|// angle in degrees
name|int
name|m_delta
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|RenderOptionsDialog
range|:
name|public
name|QDialog
block|{
name|Q_OBJECT
name|public
operator|:
name|RenderOptionsDialog
argument_list|()
block|;
name|int
name|addTexture
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|)
block|;
name|int
name|addShader
argument_list|(
specifier|const
name|QString
operator|&
name|name
argument_list|)
block|;
name|void
name|emitParameterChanged
argument_list|()
block|;
name|protected
name|slots
operator|:
name|void
name|setColorParameter
argument_list|(
argument|QRgb color
argument_list|,
argument|int id
argument_list|)
block|;
name|void
name|setFloatParameter
argument_list|(
argument|float value
argument_list|,
argument|int id
argument_list|)
block|;
name|signals
operator|:
name|void
name|dynamicCubemapToggled
argument_list|(
name|int
argument_list|)
block|;
name|void
name|colorParameterChanged
argument_list|(
specifier|const
name|QString
operator|&
argument_list|,
name|QRgb
argument_list|)
block|;
name|void
name|floatParameterChanged
argument_list|(
specifier|const
name|QString
operator|&
argument_list|,
name|float
argument_list|)
block|;
name|void
name|textureChanged
argument_list|(
name|int
argument_list|)
block|;
name|void
name|shaderChanged
argument_list|(
name|int
argument_list|)
block|;
name|void
name|doubleClicked
argument_list|()
block|;
name|protected
operator|:
name|virtual
name|void
name|mouseDoubleClickEvent
argument_list|(
argument|QMouseEvent *event
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|QVector
operator|<
name|QByteArray
operator|>
name|m_parameterNames
block|;
name|QComboBox
operator|*
name|m_textureCombo
block|;
name|QComboBox
operator|*
name|m_shaderCombo
block|;
name|QVector
operator|<
name|ParameterEdit
operator|*
operator|>
name|m_parameterEdits
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|ItemDialog
range|:
name|public
name|QDialog
block|{
name|Q_OBJECT
name|public
operator|:
expr|enum
name|ItemType
block|{
name|QtBoxItem
block|,
name|CircleItem
block|,
name|SquareItem
block|,     }
block|;
name|ItemDialog
argument_list|()
block|;
name|public
name|slots
operator|:
name|void
name|triggerNewQtBox
argument_list|()
block|;
name|void
name|triggerNewCircleItem
argument_list|()
block|;
name|void
name|triggerNewSquareItem
argument_list|()
block|;
name|signals
operator|:
name|void
name|doubleClicked
argument_list|()
block|;
name|void
name|newItemTriggered
argument_list|(
argument|ItemDialog::ItemType type
argument_list|)
block|;
name|protected
operator|:
name|virtual
name|void
name|mouseDoubleClickEvent
argument_list|(
argument|QMouseEvent *event
argument_list|)
name|Q_DECL_OVERRIDE
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Scene
range|:
name|public
name|QGraphicsScene
block|{
name|Q_OBJECT
name|public
operator|:
name|Scene
argument_list|(
argument|int width
argument_list|,
argument|int height
argument_list|,
argument|int maxTextureSize
argument_list|)
block|;
operator|~
name|Scene
argument_list|()
block|;
name|virtual
name|void
name|drawBackground
argument_list|(
argument|QPainter *painter
argument_list|,
argument|const QRectF&rect
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|public
name|slots
operator|:
name|void
name|setShader
argument_list|(
argument|int index
argument_list|)
block|;
name|void
name|setTexture
argument_list|(
argument|int index
argument_list|)
block|;
name|void
name|toggleDynamicCubemap
argument_list|(
argument|int state
argument_list|)
block|;
name|void
name|setColorParameter
argument_list|(
argument|const QString&name
argument_list|,
argument|QRgb color
argument_list|)
block|;
name|void
name|setFloatParameter
argument_list|(
argument|const QString&name
argument_list|,
argument|float value
argument_list|)
block|;
name|void
name|newItem
argument_list|(
argument|ItemDialog::ItemType type
argument_list|)
block|;
name|protected
operator|:
name|void
name|renderBoxes
argument_list|(
argument|const QMatrix4x4&view
argument_list|,
argument|int excludeBox = -
literal|2
argument_list|)
block|;
name|void
name|setStates
argument_list|()
block|;
name|void
name|setLights
argument_list|()
block|;
name|void
name|defaultStates
argument_list|()
block|;
name|void
name|renderCubemaps
argument_list|()
block|;
name|virtual
name|void
name|mousePressEvent
argument_list|(
argument|QGraphicsSceneMouseEvent *event
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|void
name|mouseReleaseEvent
argument_list|(
argument|QGraphicsSceneMouseEvent *event
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|void
name|mouseMoveEvent
argument_list|(
argument|QGraphicsSceneMouseEvent *event
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|virtual
name|void
name|wheelEvent
argument_list|(
argument|QGraphicsSceneWheelEvent * event
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|private
operator|:
name|void
name|initGL
argument_list|()
block|;
name|QPointF
name|pixelPosToViewPos
argument_list|(
specifier|const
name|QPointF
operator|&
name|p
argument_list|)
block|;
name|QTime
name|m_time
block|;
name|int
name|m_lastTime
block|;
name|int
name|m_mouseEventTime
block|;
name|int
name|m_distExp
block|;
name|int
name|m_frame
block|;
name|int
name|m_maxTextureSize
block|;
name|int
name|m_currentShader
block|;
name|int
name|m_currentTexture
block|;
name|bool
name|m_dynamicCubemap
block|;
name|bool
name|m_updateAllCubemaps
block|;
name|RenderOptionsDialog
operator|*
name|m_renderOptions
block|;
name|ItemDialog
operator|*
name|m_itemDialog
block|;
name|QTimer
operator|*
name|m_timer
block|;
name|GLRoundedBox
operator|*
name|m_box
block|;
name|TrackBall
name|m_trackBalls
index|[
literal|3
index|]
block|;
name|QVector
operator|<
name|GLTexture
operator|*
operator|>
name|m_textures
block|;
name|GLTextureCube
operator|*
name|m_environment
block|;
name|GLTexture3D
operator|*
name|m_noise
block|;
name|GLRenderTargetCube
operator|*
name|m_mainCubemap
block|;
name|QVector
operator|<
name|GLRenderTargetCube
operator|*
operator|>
name|m_cubemaps
block|;
name|QVector
operator|<
name|QGLShaderProgram
operator|*
operator|>
name|m_programs
block|;
name|QGLShader
operator|*
name|m_vertexShader
block|;
name|QVector
operator|<
name|QGLShader
operator|*
operator|>
name|m_fragmentShaders
block|;
name|QGLShader
operator|*
name|m_environmentShader
block|;
name|QGLShaderProgram
operator|*
name|m_environmentProgram
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
end_unit
