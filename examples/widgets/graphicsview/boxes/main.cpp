begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the demonstration applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|//#include<GL/glew.h>
end_comment
begin_include
include|#
directive|include
file|"glextensions.h"
end_include
begin_include
include|#
directive|include
file|"scene.h"
end_include
begin_include
include|#
directive|include
file|<QtWidgets>
end_include
begin_include
include|#
directive|include
file|<QGLWidget>
end_include
begin_class
DECL|class|GraphicsView
class|class
name|GraphicsView
super|:
specifier|public
name|QGraphicsView
block|{
public|public:
DECL|function|GraphicsView
name|GraphicsView
parameter_list|()
block|{
name|setWindowTitle
argument_list|(
name|tr
argument_list|(
literal|"Boxes"
argument_list|)
argument_list|)
expr_stmt|;
name|setRenderHints
argument_list|(
name|QPainter
operator|::
name|Antialiasing
operator||
name|QPainter
operator|::
name|SmoothPixmapTransform
argument_list|)
expr_stmt|;
comment|//setRenderHints(QPainter::SmoothPixmapTransform);
block|}
protected|protected:
name|void
name|resizeEvent
parameter_list|(
name|QResizeEvent
modifier|*
name|event
parameter_list|)
name|Q_DECL_OVERRIDE
block|{
if|if
condition|(
name|scene
argument_list|()
condition|)
name|scene
argument_list|()
operator|->
name|setSceneRect
argument_list|(
name|QRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|event
operator|->
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QGraphicsView
operator|::
name|resizeEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|matchString
specifier|inline
name|bool
name|matchString
parameter_list|(
specifier|const
name|char
modifier|*
name|extensionString
parameter_list|,
specifier|const
name|char
modifier|*
name|subString
parameter_list|)
block|{
name|int
name|subStringLength
init|=
name|strlen
argument_list|(
name|subString
argument_list|)
decl_stmt|;
return|return
operator|(
name|strncmp
argument_list|(
name|extensionString
argument_list|,
name|subString
argument_list|,
name|subStringLength
argument_list|)
operator|==
literal|0
operator|)
operator|&&
operator|(
operator|(
name|extensionString
index|[
name|subStringLength
index|]
operator|==
literal|' '
operator|)
operator|||
operator|(
name|extensionString
index|[
name|subStringLength
index|]
operator|==
literal|'\0'
operator|)
operator|)
return|;
block|}
end_function
begin_function
DECL|function|necessaryExtensionsSupported
name|bool
name|necessaryExtensionsSupported
parameter_list|()
block|{
specifier|const
name|char
modifier|*
name|extensionString
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|glGetString
argument_list|(
name|GL_EXTENSIONS
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|char
modifier|*
name|p
init|=
name|extensionString
decl_stmt|;
specifier|const
name|int
name|GL_EXT_FBO
init|=
literal|1
decl_stmt|;
specifier|const
name|int
name|GL_ARB_VS
init|=
literal|2
decl_stmt|;
specifier|const
name|int
name|GL_ARB_FS
init|=
literal|4
decl_stmt|;
specifier|const
name|int
name|GL_ARB_SO
init|=
literal|8
decl_stmt|;
name|int
name|extensions
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|*
name|p
condition|)
block|{
if|if
condition|(
name|matchString
argument_list|(
name|p
argument_list|,
literal|"GL_EXT_framebuffer_object"
argument_list|)
condition|)
name|extensions
operator||=
name|GL_EXT_FBO
expr_stmt|;
elseif|else
if|if
condition|(
name|matchString
argument_list|(
name|p
argument_list|,
literal|"GL_ARB_vertex_shader"
argument_list|)
condition|)
name|extensions
operator||=
name|GL_ARB_VS
expr_stmt|;
elseif|else
if|if
condition|(
name|matchString
argument_list|(
name|p
argument_list|,
literal|"GL_ARB_fragment_shader"
argument_list|)
condition|)
name|extensions
operator||=
name|GL_ARB_FS
expr_stmt|;
elseif|else
if|if
condition|(
name|matchString
argument_list|(
name|p
argument_list|,
literal|"GL_ARB_shader_objects"
argument_list|)
condition|)
name|extensions
operator||=
name|GL_ARB_SO
expr_stmt|;
while|while
condition|(
operator|(
operator|*
name|p
operator|!=
literal|' '
operator|)
operator|&&
operator|(
operator|*
name|p
operator|!=
literal|'\0'
operator|)
condition|)
operator|++
name|p
expr_stmt|;
if|if
condition|(
operator|*
name|p
operator|==
literal|' '
condition|)
operator|++
name|p
expr_stmt|;
block|}
return|return
operator|(
name|extensions
operator|==
literal|15
operator|)
return|;
block|}
end_function
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
modifier|*
name|argv
parameter_list|)
block|{
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|QGLFormat
operator|::
name|openGLVersionFlags
argument_list|()
operator|&
name|QGLFormat
operator|::
name|OpenGL_Version_1_5
operator|)
operator|==
literal|0
condition|)
block|{
name|QMessageBox
operator|::
name|critical
argument_list|(
literal|0
argument_list|,
literal|"OpenGL features missing"
argument_list|,
literal|"OpenGL version 1.5 or higher is required to run this demo.\n"
literal|"The program will now exit."
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|int
name|maxTextureSize
init|=
literal|1024
decl_stmt|;
name|QGLWidget
modifier|*
name|widget
init|=
operator|new
name|QGLWidget
argument_list|(
name|QGLFormat
argument_list|(
name|QGL
operator|::
name|SampleBuffers
argument_list|)
argument_list|)
decl_stmt|;
name|widget
operator|->
name|makeCurrent
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|necessaryExtensionsSupported
argument_list|()
condition|)
block|{
name|QMessageBox
operator|::
name|critical
argument_list|(
literal|0
argument_list|,
literal|"OpenGL features missing"
argument_list|,
literal|"The OpenGL extensions required to run this demo are missing.\n"
literal|"The program will now exit."
argument_list|)
expr_stmt|;
operator|delete
name|widget
expr_stmt|;
return|return
operator|-
literal|2
return|;
block|}
comment|// Check if all the necessary functions are resolved.
if|if
condition|(
operator|!
name|getGLExtensionFunctions
argument_list|()
operator|.
name|resolve
argument_list|(
name|widget
operator|->
name|context
argument_list|()
argument_list|)
condition|)
block|{
name|QMessageBox
operator|::
name|critical
argument_list|(
literal|0
argument_list|,
literal|"OpenGL features missing"
argument_list|,
literal|"Failed to resolve OpenGL functions required to run this demo.\n"
literal|"The program will now exit."
argument_list|)
expr_stmt|;
operator|delete
name|widget
expr_stmt|;
return|return
operator|-
literal|3
return|;
block|}
comment|// TODO: Make conditional for final release
name|QMessageBox
operator|::
name|information
argument_list|(
literal|0
argument_list|,
literal|"For your information"
argument_list|,
literal|"This demo can be GPU and CPU intensive and may\n"
literal|"work poorly or not at all on your system."
argument_list|)
expr_stmt|;
name|widget
operator|->
name|makeCurrent
argument_list|()
expr_stmt|;
comment|// The current context must be set before calling Scene's constructor
name|Scene
name|scene
argument_list|(
literal|1024
argument_list|,
literal|768
argument_list|,
name|maxTextureSize
argument_list|)
decl_stmt|;
name|GraphicsView
name|view
decl_stmt|;
name|view
operator|.
name|setViewport
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|view
operator|.
name|setViewportUpdateMode
argument_list|(
name|QGraphicsView
operator|::
name|FullViewportUpdate
argument_list|)
expr_stmt|;
name|view
operator|.
name|setScene
argument_list|(
operator|&
name|scene
argument_list|)
expr_stmt|;
name|view
operator|.
name|show
argument_list|()
expr_stmt|;
return|return
name|app
operator|.
name|exec
argument_list|()
return|;
block|}
end_function
end_unit
