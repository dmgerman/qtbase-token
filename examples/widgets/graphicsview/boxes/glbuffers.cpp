begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the demonstration applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"glbuffers.h"
end_include
begin_include
include|#
directive|include
file|<QtGui/qmatrix4x4.h>
end_include
begin_function
DECL|function|qgluPerspective
name|void
name|qgluPerspective
parameter_list|(
name|GLdouble
name|fovy
parameter_list|,
name|GLdouble
name|aspect
parameter_list|,
name|GLdouble
name|zNear
parameter_list|,
name|GLdouble
name|zFar
parameter_list|)
block|{
specifier|const
name|GLdouble
name|ymax
init|=
name|zNear
operator|*
name|tan
argument_list|(
name|fovy
operator|*
name|M_PI
operator|/
literal|360.0
argument_list|)
decl_stmt|;
specifier|const
name|GLdouble
name|ymin
init|=
operator|-
name|ymax
decl_stmt|;
specifier|const
name|GLdouble
name|xmin
init|=
name|ymin
operator|*
name|aspect
decl_stmt|;
specifier|const
name|GLdouble
name|xmax
init|=
name|ymax
operator|*
name|aspect
decl_stmt|;
name|glFrustum
argument_list|(
name|xmin
argument_list|,
name|xmax
argument_list|,
name|ymin
argument_list|,
name|ymax
argument_list|,
name|zNear
argument_list|,
name|zFar
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//============================================================================//
end_comment
begin_comment
comment|//                                  GLTexture                                 //
end_comment
begin_comment
comment|//============================================================================//
end_comment
begin_constructor
DECL|function|GLTexture
name|GLTexture
operator|::
name|GLTexture
parameter_list|()
member_init_list|:
name|m_texture
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_failed
argument_list|(
literal|false
argument_list|)
block|{
name|glGenTextures
argument_list|(
literal|1
argument_list|,
operator|&
name|m_texture
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~GLTexture
name|GLTexture
operator|::
name|~
name|GLTexture
parameter_list|()
block|{
name|glDeleteTextures
argument_list|(
literal|1
argument_list|,
operator|&
name|m_texture
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_comment
comment|//============================================================================//
end_comment
begin_comment
comment|//                                 GLTexture2D                                //
end_comment
begin_comment
comment|//============================================================================//
end_comment
begin_constructor
DECL|function|GLTexture2D
name|GLTexture2D
operator|::
name|GLTexture2D
parameter_list|(
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
block|{
name|glBindTexture
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|m_texture
argument_list|)
expr_stmt|;
name|glTexImage2D
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|0
argument_list|,
name|GL_BGRA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|glTexParameteri
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|GL_TEXTURE_WRAP_S
argument_list|,
name|GL_REPEAT
argument_list|)
expr_stmt|;
name|glTexParameteri
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|GL_TEXTURE_WRAP_T
argument_list|,
name|GL_REPEAT
argument_list|)
expr_stmt|;
name|glTexParameteri
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|GL_TEXTURE_MAG_FILTER
argument_list|,
name|GL_LINEAR
argument_list|)
expr_stmt|;
name|glTexParameteri
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|GL_TEXTURE_MIN_FILTER
argument_list|,
name|GL_LINEAR
argument_list|)
expr_stmt|;
comment|//glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
comment|//glTexParameteri(GL_TEXTURE_2D, GL_GENERATE_MIPMAP, GL_TRUE);
name|glBindTexture
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|GLTexture2D
name|GLTexture2D
operator|::
name|GLTexture2D
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
block|{
comment|// TODO: Add error handling.
name|QImage
name|image
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|image
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|m_failed
operator|=
literal|true
expr_stmt|;
return|return;
block|}
name|image
operator|=
name|image
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
expr_stmt|;
comment|//qDebug()<< "Image size:"<< image.width()<< "x"<< image.height();
if|if
condition|(
name|width
operator|<=
literal|0
condition|)
name|width
operator|=
name|image
operator|.
name|width
argument_list|()
expr_stmt|;
if|if
condition|(
name|height
operator|<=
literal|0
condition|)
name|height
operator|=
name|image
operator|.
name|height
argument_list|()
expr_stmt|;
if|if
condition|(
name|width
operator|!=
name|image
operator|.
name|width
argument_list|()
operator|||
name|height
operator|!=
name|image
operator|.
name|height
argument_list|()
condition|)
name|image
operator|=
name|image
operator|.
name|scaled
argument_list|(
name|width
argument_list|,
name|height
argument_list|,
name|Qt
operator|::
name|IgnoreAspectRatio
argument_list|,
name|Qt
operator|::
name|SmoothTransformation
argument_list|)
expr_stmt|;
name|glBindTexture
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|m_texture
argument_list|)
expr_stmt|;
comment|// Works on x86, so probably works on all little-endian systems.
comment|// Does it work on big-endian systems?
name|glTexImage2D
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
name|image
operator|.
name|width
argument_list|()
argument_list|,
name|image
operator|.
name|height
argument_list|()
argument_list|,
literal|0
argument_list|,
name|GL_BGRA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|image
operator|.
name|bits
argument_list|()
argument_list|)
expr_stmt|;
name|glTexParameteri
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|GL_TEXTURE_WRAP_S
argument_list|,
name|GL_REPEAT
argument_list|)
expr_stmt|;
name|glTexParameteri
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|GL_TEXTURE_WRAP_T
argument_list|,
name|GL_REPEAT
argument_list|)
expr_stmt|;
name|glTexParameteri
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|GL_TEXTURE_MAG_FILTER
argument_list|,
name|GL_LINEAR
argument_list|)
expr_stmt|;
name|glTexParameteri
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|GL_TEXTURE_MIN_FILTER
argument_list|,
name|GL_LINEAR
argument_list|)
expr_stmt|;
comment|//glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
comment|//glTexParameteri(GL_TEXTURE_2D, GL_GENERATE_MIPMAP, GL_TRUE);
name|glBindTexture
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|load
name|void
name|GLTexture2D
operator|::
name|load
parameter_list|(
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|QRgb
modifier|*
name|data
parameter_list|)
block|{
name|glBindTexture
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|m_texture
argument_list|)
expr_stmt|;
name|glTexImage2D
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
literal|0
argument_list|,
name|GL_BGRA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|glBindTexture
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|bind
name|void
name|GLTexture2D
operator|::
name|bind
parameter_list|()
block|{
name|glBindTexture
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|m_texture
argument_list|)
expr_stmt|;
name|glEnable
argument_list|(
name|GL_TEXTURE_2D
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unbind
name|void
name|GLTexture2D
operator|::
name|unbind
parameter_list|()
block|{
name|glBindTexture
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|glDisable
argument_list|(
name|GL_TEXTURE_2D
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//============================================================================//
end_comment
begin_comment
comment|//                                 GLTexture3D                                //
end_comment
begin_comment
comment|//============================================================================//
end_comment
begin_constructor
DECL|function|GLTexture3D
name|GLTexture3D
operator|::
name|GLTexture3D
parameter_list|(
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|int
name|depth
parameter_list|)
block|{
name|GLBUFFERS_ASSERT_OPENGL
argument_list|(
literal|"GLTexture3D::GLTexture3D"
argument_list|,
argument|glTexImage3D
argument_list|,
argument|return
argument_list|)
name|glBindTexture
argument_list|(
name|GL_TEXTURE_3D
argument_list|,
name|m_texture
argument_list|)
expr_stmt|;
name|glTexImage3D
argument_list|(
name|GL_TEXTURE_3D
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
literal|0
argument_list|,
name|GL_BGRA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|glTexParameteri
argument_list|(
name|GL_TEXTURE_3D
argument_list|,
name|GL_TEXTURE_WRAP_S
argument_list|,
name|GL_REPEAT
argument_list|)
expr_stmt|;
name|glTexParameteri
argument_list|(
name|GL_TEXTURE_3D
argument_list|,
name|GL_TEXTURE_WRAP_T
argument_list|,
name|GL_REPEAT
argument_list|)
expr_stmt|;
name|glTexParameteri
argument_list|(
name|GL_TEXTURE_3D
argument_list|,
name|GL_TEXTURE_WRAP_R
argument_list|,
name|GL_REPEAT
argument_list|)
expr_stmt|;
name|glTexParameteri
argument_list|(
name|GL_TEXTURE_3D
argument_list|,
name|GL_TEXTURE_MAG_FILTER
argument_list|,
name|GL_LINEAR
argument_list|)
expr_stmt|;
name|glTexParameteri
argument_list|(
name|GL_TEXTURE_3D
argument_list|,
name|GL_TEXTURE_MIN_FILTER
argument_list|,
name|GL_LINEAR
argument_list|)
expr_stmt|;
comment|//glTexParameteri(GL_TEXTURE_3D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
comment|//glTexParameteri(GL_TEXTURE_3D, GL_GENERATE_MIPMAP, GL_TRUE);
name|glBindTexture
argument_list|(
name|GL_TEXTURE_3D
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|load
name|void
name|GLTexture3D
operator|::
name|load
parameter_list|(
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|,
name|int
name|depth
parameter_list|,
name|QRgb
modifier|*
name|data
parameter_list|)
block|{
name|GLBUFFERS_ASSERT_OPENGL
argument_list|(
literal|"GLTexture3D::load"
argument_list|,
argument|glTexImage3D
argument_list|,
argument|return
argument_list|)
name|glBindTexture
argument_list|(
name|GL_TEXTURE_3D
argument_list|,
name|m_texture
argument_list|)
expr_stmt|;
name|glTexImage3D
argument_list|(
name|GL_TEXTURE_3D
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
name|width
argument_list|,
name|height
argument_list|,
name|depth
argument_list|,
literal|0
argument_list|,
name|GL_BGRA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|glBindTexture
argument_list|(
name|GL_TEXTURE_3D
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|bind
name|void
name|GLTexture3D
operator|::
name|bind
parameter_list|()
block|{
name|glBindTexture
argument_list|(
name|GL_TEXTURE_3D
argument_list|,
name|m_texture
argument_list|)
expr_stmt|;
name|glEnable
argument_list|(
name|GL_TEXTURE_3D
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unbind
name|void
name|GLTexture3D
operator|::
name|unbind
parameter_list|()
block|{
name|glBindTexture
argument_list|(
name|GL_TEXTURE_3D
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|glDisable
argument_list|(
name|GL_TEXTURE_3D
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//============================================================================//
end_comment
begin_comment
comment|//                                GLTextureCube                               //
end_comment
begin_comment
comment|//============================================================================//
end_comment
begin_constructor
DECL|function|GLTextureCube
name|GLTextureCube
operator|::
name|GLTextureCube
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|glBindTexture
argument_list|(
name|GL_TEXTURE_CUBE_MAP
argument_list|,
name|m_texture
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|6
condition|;
operator|++
name|i
control|)
name|glTexImage2D
argument_list|(
name|GL_TEXTURE_CUBE_MAP_POSITIVE_X
operator|+
name|i
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
name|size
argument_list|,
name|size
argument_list|,
literal|0
argument_list|,
name|GL_BGRA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|glTexParameteri
argument_list|(
name|GL_TEXTURE_CUBE_MAP
argument_list|,
name|GL_TEXTURE_WRAP_S
argument_list|,
name|GL_CLAMP_TO_EDGE
argument_list|)
expr_stmt|;
name|glTexParameteri
argument_list|(
name|GL_TEXTURE_CUBE_MAP
argument_list|,
name|GL_TEXTURE_WRAP_T
argument_list|,
name|GL_CLAMP_TO_EDGE
argument_list|)
expr_stmt|;
name|glTexParameteri
argument_list|(
name|GL_TEXTURE_CUBE_MAP
argument_list|,
name|GL_TEXTURE_WRAP_R
argument_list|,
name|GL_CLAMP_TO_EDGE
argument_list|)
expr_stmt|;
name|glTexParameteri
argument_list|(
name|GL_TEXTURE_CUBE_MAP
argument_list|,
name|GL_TEXTURE_MAG_FILTER
argument_list|,
name|GL_LINEAR
argument_list|)
expr_stmt|;
name|glTexParameteri
argument_list|(
name|GL_TEXTURE_CUBE_MAP
argument_list|,
name|GL_TEXTURE_MIN_FILTER
argument_list|,
name|GL_LINEAR
argument_list|)
expr_stmt|;
comment|//glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
comment|//glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_GENERATE_MIPMAP, GL_TRUE);
name|glBindTexture
argument_list|(
name|GL_TEXTURE_CUBE_MAP
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|GLTextureCube
name|GLTextureCube
operator|::
name|GLTextureCube
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|fileNames
parameter_list|,
name|int
name|size
parameter_list|)
block|{
comment|// TODO: Add error handling.
name|glBindTexture
argument_list|(
name|GL_TEXTURE_CUBE_MAP
argument_list|,
name|m_texture
argument_list|)
expr_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
foreach|foreach
control|(
name|QString
name|file
decl|,
name|fileNames
control|)
block|{
name|QImage
name|image
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|image
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|m_failed
operator|=
literal|true
expr_stmt|;
break|break;
block|}
name|image
operator|=
name|image
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_ARGB32
argument_list|)
expr_stmt|;
comment|//qDebug()<< "Image size:"<< image.width()<< "x"<< image.height();
if|if
condition|(
name|size
operator|<=
literal|0
condition|)
name|size
operator|=
name|image
operator|.
name|width
argument_list|()
expr_stmt|;
if|if
condition|(
name|size
operator|!=
name|image
operator|.
name|width
argument_list|()
operator|||
name|size
operator|!=
name|image
operator|.
name|height
argument_list|()
condition|)
name|image
operator|=
name|image
operator|.
name|scaled
argument_list|(
name|size
argument_list|,
name|size
argument_list|,
name|Qt
operator|::
name|IgnoreAspectRatio
argument_list|,
name|Qt
operator|::
name|SmoothTransformation
argument_list|)
expr_stmt|;
comment|// Works on x86, so probably works on all little-endian systems.
comment|// Does it work on big-endian systems?
name|glTexImage2D
argument_list|(
name|GL_TEXTURE_CUBE_MAP_POSITIVE_X
operator|+
name|index
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
name|image
operator|.
name|width
argument_list|()
argument_list|,
name|image
operator|.
name|height
argument_list|()
argument_list|,
literal|0
argument_list|,
name|GL_BGRA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|image
operator|.
name|bits
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|++
name|index
operator|==
literal|6
condition|)
break|break;
block|}
comment|// Clear remaining faces.
while|while
condition|(
name|index
operator|<
literal|6
condition|)
block|{
name|glTexImage2D
argument_list|(
name|GL_TEXTURE_CUBE_MAP_POSITIVE_X
operator|+
name|index
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
name|size
argument_list|,
name|size
argument_list|,
literal|0
argument_list|,
name|GL_BGRA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
literal|0
argument_list|)
expr_stmt|;
operator|++
name|index
expr_stmt|;
block|}
name|glTexParameteri
argument_list|(
name|GL_TEXTURE_CUBE_MAP
argument_list|,
name|GL_TEXTURE_WRAP_S
argument_list|,
name|GL_CLAMP_TO_EDGE
argument_list|)
expr_stmt|;
name|glTexParameteri
argument_list|(
name|GL_TEXTURE_CUBE_MAP
argument_list|,
name|GL_TEXTURE_WRAP_T
argument_list|,
name|GL_CLAMP_TO_EDGE
argument_list|)
expr_stmt|;
name|glTexParameteri
argument_list|(
name|GL_TEXTURE_CUBE_MAP
argument_list|,
name|GL_TEXTURE_WRAP_R
argument_list|,
name|GL_CLAMP_TO_EDGE
argument_list|)
expr_stmt|;
name|glTexParameteri
argument_list|(
name|GL_TEXTURE_CUBE_MAP
argument_list|,
name|GL_TEXTURE_MAG_FILTER
argument_list|,
name|GL_LINEAR
argument_list|)
expr_stmt|;
name|glTexParameteri
argument_list|(
name|GL_TEXTURE_CUBE_MAP
argument_list|,
name|GL_TEXTURE_MIN_FILTER
argument_list|,
name|GL_LINEAR
argument_list|)
expr_stmt|;
comment|//glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);
comment|//glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_GENERATE_MIPMAP, GL_TRUE);
name|glBindTexture
argument_list|(
name|GL_TEXTURE_CUBE_MAP
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|load
name|void
name|GLTextureCube
operator|::
name|load
parameter_list|(
name|int
name|size
parameter_list|,
name|int
name|face
parameter_list|,
name|QRgb
modifier|*
name|data
parameter_list|)
block|{
name|glBindTexture
argument_list|(
name|GL_TEXTURE_CUBE_MAP
argument_list|,
name|m_texture
argument_list|)
expr_stmt|;
name|glTexImage2D
argument_list|(
name|GL_TEXTURE_CUBE_MAP_POSITIVE_X
operator|+
name|face
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
name|size
argument_list|,
name|size
argument_list|,
literal|0
argument_list|,
name|GL_BGRA
argument_list|,
name|GL_UNSIGNED_BYTE
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|glBindTexture
argument_list|(
name|GL_TEXTURE_CUBE_MAP
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|bind
name|void
name|GLTextureCube
operator|::
name|bind
parameter_list|()
block|{
name|glBindTexture
argument_list|(
name|GL_TEXTURE_CUBE_MAP
argument_list|,
name|m_texture
argument_list|)
expr_stmt|;
name|glEnable
argument_list|(
name|GL_TEXTURE_CUBE_MAP
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|unbind
name|void
name|GLTextureCube
operator|::
name|unbind
parameter_list|()
block|{
name|glBindTexture
argument_list|(
name|GL_TEXTURE_CUBE_MAP
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|glDisable
argument_list|(
name|GL_TEXTURE_CUBE_MAP
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//============================================================================//
end_comment
begin_comment
comment|//                            GLFrameBufferObject                             //
end_comment
begin_comment
comment|//============================================================================//
end_comment
begin_constructor
DECL|function|GLFrameBufferObject
name|GLFrameBufferObject
operator|::
name|GLFrameBufferObject
parameter_list|(
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
member_init_list|:
name|m_fbo
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_depthBuffer
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_width
argument_list|(
name|width
argument_list|)
member_init_list|,
name|m_height
argument_list|(
name|height
argument_list|)
member_init_list|,
name|m_failed
argument_list|(
literal|false
argument_list|)
block|{
name|GLBUFFERS_ASSERT_OPENGL
argument_list|(
literal|"GLFrameBufferObject::GLFrameBufferObject"
argument_list|,
argument|glGenFramebuffersEXT&& glGenRenderbuffersEXT&& glBindRenderbufferEXT&& glRenderbufferStorageEXT
argument_list|,
argument|return
argument_list|)
comment|// TODO: share depth buffers of same size
name|glGenFramebuffersEXT
argument_list|(
literal|1
argument_list|,
operator|&
name|m_fbo
argument_list|)
expr_stmt|;
comment|//glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, m_fbo);
name|glGenRenderbuffersEXT
argument_list|(
literal|1
argument_list|,
operator|&
name|m_depthBuffer
argument_list|)
expr_stmt|;
name|glBindRenderbufferEXT
argument_list|(
name|GL_RENDERBUFFER_EXT
argument_list|,
name|m_depthBuffer
argument_list|)
expr_stmt|;
name|glRenderbufferStorageEXT
argument_list|(
name|GL_RENDERBUFFER_EXT
argument_list|,
name|GL_DEPTH_COMPONENT
argument_list|,
name|m_width
argument_list|,
name|m_height
argument_list|)
expr_stmt|;
comment|//glFramebufferRenderbufferEXT(GL_FRAMEBUFFER_EXT, GL_DEPTH_ATTACHMENT_EXT, GL_RENDERBUFFER_EXT, m_depthBuffer);
comment|//glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, 0);
block|}
end_constructor
begin_destructor
DECL|function|~GLFrameBufferObject
name|GLFrameBufferObject
operator|::
name|~
name|GLFrameBufferObject
parameter_list|()
block|{
name|GLBUFFERS_ASSERT_OPENGL
argument_list|(
literal|"GLFrameBufferObject::~GLFrameBufferObject"
argument_list|,
argument|glDeleteFramebuffersEXT&& glDeleteRenderbuffersEXT
argument_list|,
argument|return
argument_list|)
name|glDeleteFramebuffersEXT
argument_list|(
literal|1
argument_list|,
operator|&
name|m_fbo
argument_list|)
expr_stmt|;
name|glDeleteRenderbuffersEXT
argument_list|(
literal|1
argument_list|,
operator|&
name|m_depthBuffer
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|setAsRenderTarget
name|void
name|GLFrameBufferObject
operator|::
name|setAsRenderTarget
parameter_list|(
name|bool
name|state
parameter_list|)
block|{
name|GLBUFFERS_ASSERT_OPENGL
argument_list|(
literal|"GLFrameBufferObject::setAsRenderTarget"
argument_list|,
argument|glBindFramebufferEXT
argument_list|,
argument|return
argument_list|)
if|if
condition|(
name|state
condition|)
block|{
name|glBindFramebufferEXT
argument_list|(
name|GL_FRAMEBUFFER_EXT
argument_list|,
name|m_fbo
argument_list|)
expr_stmt|;
name|glPushAttrib
argument_list|(
name|GL_VIEWPORT_BIT
argument_list|)
expr_stmt|;
name|glViewport
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|m_width
argument_list|,
name|m_height
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|glPopAttrib
argument_list|()
expr_stmt|;
name|glBindFramebufferEXT
argument_list|(
name|GL_FRAMEBUFFER_EXT
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|isComplete
name|bool
name|GLFrameBufferObject
operator|::
name|isComplete
parameter_list|()
block|{
name|GLBUFFERS_ASSERT_OPENGL
argument_list|(
literal|"GLFrameBufferObject::isComplete"
argument_list|,
argument|glCheckFramebufferStatusEXT
argument_list|,
argument|return
literal|false
argument_list|)
return|return
name|GL_FRAMEBUFFER_COMPLETE_EXT
operator|==
name|glCheckFramebufferStatusEXT
argument_list|(
name|GL_FRAMEBUFFER_EXT
argument_list|)
return|;
block|}
end_function
begin_comment
comment|//============================================================================//
end_comment
begin_comment
comment|//                             GLRenderTargetCube                             //
end_comment
begin_comment
comment|//============================================================================//
end_comment
begin_constructor
DECL|function|GLRenderTargetCube
name|GLRenderTargetCube
operator|::
name|GLRenderTargetCube
parameter_list|(
name|int
name|size
parameter_list|)
member_init_list|:
name|GLTextureCube
argument_list|(
name|size
argument_list|)
member_init_list|,
name|m_fbo
argument_list|(
name|size
argument_list|,
name|size
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|begin
name|void
name|GLRenderTargetCube
operator|::
name|begin
parameter_list|(
name|int
name|face
parameter_list|)
block|{
name|GLBUFFERS_ASSERT_OPENGL
argument_list|(
literal|"GLRenderTargetCube::begin"
argument_list|,
argument|glFramebufferTexture2DEXT&& glFramebufferRenderbufferEXT
argument_list|,
argument|return
argument_list|)
name|m_fbo
operator|.
name|setAsRenderTarget
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|glFramebufferTexture2DEXT
argument_list|(
name|GL_FRAMEBUFFER_EXT
argument_list|,
name|GL_COLOR_ATTACHMENT0_EXT
argument_list|,
name|GL_TEXTURE_CUBE_MAP_POSITIVE_X
operator|+
name|face
argument_list|,
name|m_texture
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|glFramebufferRenderbufferEXT
argument_list|(
name|GL_FRAMEBUFFER_EXT
argument_list|,
name|GL_DEPTH_ATTACHMENT_EXT
argument_list|,
name|GL_RENDERBUFFER_EXT
argument_list|,
name|m_fbo
operator|.
name|m_depthBuffer
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|end
name|void
name|GLRenderTargetCube
operator|::
name|end
parameter_list|()
block|{
name|m_fbo
operator|.
name|setAsRenderTarget
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|getViewMatrix
name|void
name|GLRenderTargetCube
operator|::
name|getViewMatrix
parameter_list|(
name|QMatrix4x4
modifier|&
name|mat
parameter_list|,
name|int
name|face
parameter_list|)
block|{
if|if
condition|(
name|face
operator|<
literal|0
operator|||
name|face
operator|>=
literal|6
condition|)
block|{
name|qWarning
argument_list|(
literal|"GLRenderTargetCube::getViewMatrix: 'face' must be in the range [0, 6). (face == %d)"
argument_list|,
name|face
argument_list|)
expr_stmt|;
return|return;
block|}
specifier|static
name|int
name|perm
index|[
literal|6
index|]
index|[
literal|3
index|]
init|=
block|{
block|{
literal|2
block|,
literal|1
block|,
literal|0
block|}
block|,
block|{
literal|2
block|,
literal|1
block|,
literal|0
block|}
block|,
block|{
literal|0
block|,
literal|2
block|,
literal|1
block|}
block|,
block|{
literal|0
block|,
literal|2
block|,
literal|1
block|}
block|,
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|}
block|,
block|{
literal|0
block|,
literal|1
block|,
literal|2
block|}
block|,     }
decl_stmt|;
specifier|static
name|float
name|signs
index|[
literal|6
index|]
index|[
literal|3
index|]
init|=
block|{
block|{
operator|-
literal|1.0f
block|,
operator|-
literal|1.0f
block|,
operator|-
literal|1.0f
block|}
block|,
block|{
operator|+
literal|1.0f
block|,
operator|-
literal|1.0f
block|,
operator|+
literal|1.0f
block|}
block|,
block|{
operator|+
literal|1.0f
block|,
operator|+
literal|1.0f
block|,
operator|-
literal|1.0f
block|}
block|,
block|{
operator|+
literal|1.0f
block|,
operator|-
literal|1.0f
block|,
operator|+
literal|1.0f
block|}
block|,
block|{
operator|+
literal|1.0f
block|,
operator|-
literal|1.0f
block|,
operator|-
literal|1.0f
block|}
block|,
block|{
operator|-
literal|1.0f
block|,
operator|-
literal|1.0f
block|,
operator|+
literal|1.0f
block|}
block|,     }
decl_stmt|;
name|mat
operator|.
name|fill
argument_list|(
literal|0.0f
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
name|mat
argument_list|(
name|i
argument_list|,
name|perm
index|[
name|face
index|]
index|[
name|i
index|]
argument_list|)
operator|=
name|signs
index|[
name|face
index|]
index|[
name|i
index|]
expr_stmt|;
name|mat
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
operator|=
literal|1.0f
expr_stmt|;
block|}
end_function
begin_function
DECL|function|getProjectionMatrix
name|void
name|GLRenderTargetCube
operator|::
name|getProjectionMatrix
parameter_list|(
name|QMatrix4x4
modifier|&
name|mat
parameter_list|,
name|float
name|nearZ
parameter_list|,
name|float
name|farZ
parameter_list|)
block|{
specifier|static
specifier|const
name|QMatrix4x4
name|reference
argument_list|(
literal|1.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|1.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
literal|0.0f
argument_list|,
operator|-
literal|1.0f
argument_list|,
literal|0.0f
argument_list|)
decl_stmt|;
name|mat
operator|=
name|reference
expr_stmt|;
name|mat
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
operator|=
operator|(
name|nearZ
operator|+
name|farZ
operator|)
operator|/
operator|(
name|nearZ
operator|-
name|farZ
operator|)
expr_stmt|;
name|mat
argument_list|(
literal|2
argument_list|,
literal|3
argument_list|)
operator|=
literal|2.0f
operator|*
name|nearZ
operator|*
name|farZ
operator|/
operator|(
name|nearZ
operator|-
name|farZ
operator|)
expr_stmt|;
block|}
end_function
end_unit
