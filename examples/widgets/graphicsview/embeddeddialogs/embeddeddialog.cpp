begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the demonstration applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** BSD License Usage ** Alternatively, you may use this file under the terms of the BSD license ** as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of The Qt Company Ltd nor the names of its **     contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"embeddeddialog.h"
end_include
begin_include
include|#
directive|include
file|"ui_embeddeddialog.h"
end_include
begin_include
include|#
directive|include
file|<QStyleFactory>
end_include
begin_constructor
DECL|function|EmbeddedDialog
name|EmbeddedDialog
operator|::
name|EmbeddedDialog
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QDialog
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|ui
argument_list|(
operator|new
name|Ui
operator|::
name|EmbeddedDialog
argument_list|)
block|{
name|ui
operator|->
name|setupUi
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|ui
operator|->
name|layoutDirection
operator|->
name|setCurrentIndex
argument_list|(
name|layoutDirection
argument_list|()
operator|!=
name|Qt
operator|::
name|LeftToRight
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|QString
name|styleName
decl|,
name|QStyleFactory
operator|::
name|keys
argument_list|()
control|)
block|{
name|ui
operator|->
name|style
operator|->
name|addItem
argument_list|(
name|styleName
argument_list|)
expr_stmt|;
if|if
condition|(
name|style
argument_list|()
operator|->
name|objectName
argument_list|()
operator|.
name|toLower
argument_list|()
operator|==
name|styleName
operator|.
name|toLower
argument_list|()
condition|)
name|ui
operator|->
name|style
operator|->
name|setCurrentIndex
argument_list|(
name|ui
operator|->
name|style
operator|->
name|count
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
name|connect
argument_list|(
name|ui
operator|->
name|layoutDirection
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|layoutDirectionChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|ui
operator|->
name|spacing
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|spacingChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|ui
operator|->
name|fontComboBox
argument_list|,
name|SIGNAL
argument_list|(
name|currentFontChanged
argument_list|(
name|QFont
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|fontChanged
argument_list|(
name|QFont
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|ui
operator|->
name|style
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|styleChanged
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~EmbeddedDialog
name|EmbeddedDialog
operator|::
name|~
name|EmbeddedDialog
parameter_list|()
block|{
operator|delete
name|ui
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|layoutDirectionChanged
name|void
name|EmbeddedDialog
operator|::
name|layoutDirectionChanged
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|setLayoutDirection
argument_list|(
name|index
operator|==
literal|0
condition|?
name|Qt
operator|::
name|LeftToRight
else|:
name|Qt
operator|::
name|RightToLeft
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|spacingChanged
name|void
name|EmbeddedDialog
operator|::
name|spacingChanged
parameter_list|(
name|int
name|spacing
parameter_list|)
block|{
name|layout
argument_list|()
operator|->
name|setSpacing
argument_list|(
name|spacing
argument_list|)
expr_stmt|;
name|adjustSize
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fontChanged
name|void
name|EmbeddedDialog
operator|::
name|fontChanged
parameter_list|(
specifier|const
name|QFont
modifier|&
name|font
parameter_list|)
block|{
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setStyleHelper
specifier|static
name|void
name|setStyleHelper
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|QStyle
modifier|*
name|style
parameter_list|)
block|{
name|widget
operator|->
name|setStyle
argument_list|(
name|style
argument_list|)
expr_stmt|;
name|widget
operator|->
name|setPalette
argument_list|(
name|style
operator|->
name|standardPalette
argument_list|()
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|QObject
modifier|*
name|child
decl|,
name|widget
operator|->
name|children
argument_list|()
control|)
block|{
if|if
condition|(
name|QWidget
modifier|*
name|childWidget
init|=
name|qobject_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|child
argument_list|)
condition|)
name|setStyleHelper
argument_list|(
name|childWidget
argument_list|,
name|style
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|styleChanged
name|void
name|EmbeddedDialog
operator|::
name|styleChanged
parameter_list|(
specifier|const
name|QString
modifier|&
name|styleName
parameter_list|)
block|{
name|QStyle
modifier|*
name|style
init|=
name|QStyleFactory
operator|::
name|create
argument_list|(
name|styleName
argument_list|)
decl_stmt|;
if|if
condition|(
name|style
condition|)
name|setStyleHelper
argument_list|(
name|this
argument_list|,
name|style
argument_list|)
expr_stmt|;
block|}
end_function
end_unit
