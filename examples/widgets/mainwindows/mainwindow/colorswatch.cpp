begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the demonstration applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"colorswatch.h"
end_include
begin_include
include|#
directive|include
file|<QAction>
end_include
begin_include
include|#
directive|include
file|<QtEvents>
end_include
begin_include
include|#
directive|include
file|<QFrame>
end_include
begin_include
include|#
directive|include
file|<QMainWindow>
end_include
begin_include
include|#
directive|include
file|<QMenu>
end_include
begin_include
include|#
directive|include
file|<QPainter>
end_include
begin_include
include|#
directive|include
file|<QImage>
end_include
begin_include
include|#
directive|include
file|<QColor>
end_include
begin_include
include|#
directive|include
file|<QDialog>
end_include
begin_include
include|#
directive|include
file|<QGridLayout>
end_include
begin_include
include|#
directive|include
file|<QSpinBox>
end_include
begin_include
include|#
directive|include
file|<QLabel>
end_include
begin_include
include|#
directive|include
file|<QPainterPath>
end_include
begin_include
include|#
directive|include
file|<QPushButton>
end_include
begin_include
include|#
directive|include
file|<QHBoxLayout>
end_include
begin_include
include|#
directive|include
file|<QBitmap>
end_include
begin_include
include|#
directive|include
file|<QtDebug>
end_include
begin_undef
DECL|macro|DEBUG_SIZEHINTS
undef|#
directive|undef
name|DEBUG_SIZEHINTS
end_undef
begin_function
DECL|function|bgColorForName
name|QColor
name|bgColorForName
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|"Black"
condition|)
return|return
name|QColor
argument_list|(
literal|"#D8D8D8"
argument_list|)
return|;
elseif|else
if|if
condition|(
name|name
operator|==
literal|"White"
condition|)
return|return
name|QColor
argument_list|(
literal|"#F1F1F1"
argument_list|)
return|;
elseif|else
if|if
condition|(
name|name
operator|==
literal|"Red"
condition|)
return|return
name|QColor
argument_list|(
literal|"#F1D8D8"
argument_list|)
return|;
elseif|else
if|if
condition|(
name|name
operator|==
literal|"Green"
condition|)
return|return
name|QColor
argument_list|(
literal|"#D8E4D8"
argument_list|)
return|;
elseif|else
if|if
condition|(
name|name
operator|==
literal|"Blue"
condition|)
return|return
name|QColor
argument_list|(
literal|"#D8D8F1"
argument_list|)
return|;
elseif|else
if|if
condition|(
name|name
operator|==
literal|"Yellow"
condition|)
return|return
name|QColor
argument_list|(
literal|"#F1F0D8"
argument_list|)
return|;
return|return
name|QColor
argument_list|(
name|name
argument_list|)
operator|.
name|light
argument_list|(
literal|110
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|fgColorForName
name|QColor
name|fgColorForName
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
if|if
condition|(
name|name
operator|==
literal|"Black"
condition|)
return|return
name|QColor
argument_list|(
literal|"#6C6C6C"
argument_list|)
return|;
elseif|else
if|if
condition|(
name|name
operator|==
literal|"White"
condition|)
return|return
name|QColor
argument_list|(
literal|"#F8F8F8"
argument_list|)
return|;
elseif|else
if|if
condition|(
name|name
operator|==
literal|"Red"
condition|)
return|return
name|QColor
argument_list|(
literal|"#F86C6C"
argument_list|)
return|;
elseif|else
if|if
condition|(
name|name
operator|==
literal|"Green"
condition|)
return|return
name|QColor
argument_list|(
literal|"#6CB26C"
argument_list|)
return|;
elseif|else
if|if
condition|(
name|name
operator|==
literal|"Blue"
condition|)
return|return
name|QColor
argument_list|(
literal|"#6C6CF8"
argument_list|)
return|;
elseif|else
if|if
condition|(
name|name
operator|==
literal|"Yellow"
condition|)
return|return
name|QColor
argument_list|(
literal|"#F8F76C"
argument_list|)
return|;
return|return
name|QColor
argument_list|(
name|name
argument_list|)
return|;
block|}
end_function
begin_class
DECL|class|ColorDock
class|class
name|ColorDock
super|:
specifier|public
name|QFrame
block|{
name|Q_OBJECT
public|public:
name|ColorDock
parameter_list|(
specifier|const
name|QString
modifier|&
name|c
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
constructor_decl|;
DECL|member|Q_DECL_OVERRIDE
specifier|virtual
name|QSize
name|sizeHint
parameter_list|()
specifier|const
name|Q_DECL_OVERRIDE
function_decl|;
DECL|member|Q_DECL_OVERRIDE
specifier|virtual
name|QSize
name|minimumSizeHint
parameter_list|()
specifier|const
name|Q_DECL_OVERRIDE
function_decl|;
name|void
name|setCustomSizeHint
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|)
function_decl|;
public|public
name|slots
public|:
name|void
name|changeSizeHints
parameter_list|()
function_decl|;
protected|protected:
DECL|member|Q_DECL_OVERRIDE
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
name|Q_DECL_OVERRIDE
function_decl|;
DECL|member|color
name|QString
name|color
decl_stmt|;
DECL|member|szHint
DECL|member|minSzHint
name|QSize
name|szHint
decl_stmt|,
name|minSzHint
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|ColorDock
name|ColorDock
operator|::
name|ColorDock
parameter_list|(
specifier|const
name|QString
modifier|&
name|c
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QFrame
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|color
argument_list|(
name|c
argument_list|)
block|{
name|QFont
name|font
init|=
name|this
operator|->
name|font
argument_list|()
decl_stmt|;
name|font
operator|.
name|setPointSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|szHint
operator|=
name|QSize
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|minSzHint
operator|=
name|QSize
argument_list|(
literal|125
argument_list|,
literal|75
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|sizeHint
name|QSize
name|ColorDock
operator|::
name|sizeHint
parameter_list|()
specifier|const
block|{
return|return
name|szHint
return|;
block|}
end_function
begin_function
DECL|function|minimumSizeHint
name|QSize
name|ColorDock
operator|::
name|minimumSizeHint
parameter_list|()
specifier|const
block|{
return|return
name|minSzHint
return|;
block|}
end_function
begin_function
DECL|function|paintEvent
name|void
name|ColorDock
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
name|QPainter
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|p
operator|.
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|Antialiasing
argument_list|)
expr_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
name|rect
argument_list|()
argument_list|,
name|bgColorForName
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|save
argument_list|()
expr_stmt|;
specifier|extern
name|void
name|render_qt_text
argument_list|(
name|QPainter
operator|*
argument_list|,
name|int
argument_list|,
name|int
argument_list|,
specifier|const
name|QColor
operator|&
argument_list|)
decl_stmt|;
name|render_qt_text
argument_list|(
operator|&
name|p
argument_list|,
name|width
argument_list|()
argument_list|,
name|height
argument_list|()
argument_list|,
name|fgColorForName
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|restore
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|DEBUG_SIZEHINTS
name|p
operator|.
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|Antialiasing
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QSize
name|sz
init|=
name|size
argument_list|()
decl_stmt|;
name|QSize
name|szHint
init|=
name|sizeHint
argument_list|()
decl_stmt|;
name|QSize
name|minSzHint
init|=
name|minimumSizeHint
argument_list|()
decl_stmt|;
name|QSize
name|maxSz
init|=
name|maximumSize
argument_list|()
decl_stmt|;
name|QString
name|text
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"sz: %1x%2\nszHint: %3x%4\nminSzHint: %5x%6\n"
literal|"maxSz: %8x%9"
argument_list|)
operator|.
name|arg
argument_list|(
name|sz
operator|.
name|width
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|sz
operator|.
name|height
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|szHint
operator|.
name|width
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|szHint
operator|.
name|height
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|minSzHint
operator|.
name|width
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|minSzHint
operator|.
name|height
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|maxSz
operator|.
name|width
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|maxSz
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|QRect
name|r
init|=
name|fontMetrics
argument_list|()
operator|.
name|boundingRect
argument_list|(
name|rect
argument_list|()
argument_list|,
name|Qt
operator|::
name|AlignLeft
operator||
name|Qt
operator|::
name|AlignTop
argument_list|,
name|text
argument_list|)
decl_stmt|;
name|r
operator|.
name|adjust
argument_list|(
operator|-
literal|2
argument_list|,
operator|-
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|p
operator|.
name|translate
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QColor
name|bg
init|=
name|Qt
operator|::
name|yellow
decl_stmt|;
name|bg
operator|.
name|setAlpha
argument_list|(
literal|120
argument_list|)
expr_stmt|;
name|p
operator|.
name|setBrush
argument_list|(
name|bg
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPen
argument_list|(
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawRect
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawText
argument_list|(
name|rect
argument_list|()
argument_list|,
name|Qt
operator|::
name|AlignLeft
operator||
name|Qt
operator|::
name|AlignTop
argument_list|,
name|text
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// DEBUG_SIZEHINTS
block|}
end_function
begin_function
DECL|function|createSpinBox
specifier|static
name|QSpinBox
modifier|*
name|createSpinBox
parameter_list|(
name|int
name|value
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|,
name|int
name|max
init|=
literal|1000
parameter_list|)
block|{
name|QSpinBox
modifier|*
name|result
init|=
operator|new
name|QSpinBox
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|result
operator|->
name|setMinimum
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|result
operator|->
name|setMaximum
argument_list|(
name|max
argument_list|)
expr_stmt|;
name|result
operator|->
name|setValue
argument_list|(
name|value
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|changeSizeHints
name|void
name|ColorDock
operator|::
name|changeSizeHints
parameter_list|()
block|{
name|QDialog
name|dialog
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|dialog
operator|.
name|setWindowTitle
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|QVBoxLayout
modifier|*
name|topLayout
init|=
operator|new
name|QVBoxLayout
argument_list|(
operator|&
name|dialog
argument_list|)
decl_stmt|;
name|QGridLayout
modifier|*
name|inputLayout
init|=
operator|new
name|QGridLayout
argument_list|()
decl_stmt|;
name|topLayout
operator|->
name|addLayout
argument_list|(
name|inputLayout
argument_list|)
expr_stmt|;
name|inputLayout
operator|->
name|addWidget
argument_list|(
operator|new
name|QLabel
argument_list|(
name|tr
argument_list|(
literal|"Size Hint:"
argument_list|)
argument_list|,
operator|&
name|dialog
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|inputLayout
operator|->
name|addWidget
argument_list|(
operator|new
name|QLabel
argument_list|(
name|tr
argument_list|(
literal|"Min Size Hint:"
argument_list|)
argument_list|,
operator|&
name|dialog
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|inputLayout
operator|->
name|addWidget
argument_list|(
operator|new
name|QLabel
argument_list|(
name|tr
argument_list|(
literal|"Max Size:"
argument_list|)
argument_list|,
operator|&
name|dialog
argument_list|)
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|inputLayout
operator|->
name|addWidget
argument_list|(
operator|new
name|QLabel
argument_list|(
name|tr
argument_list|(
literal|"Dockwgt Max Size:"
argument_list|)
argument_list|,
operator|&
name|dialog
argument_list|)
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QSpinBox
modifier|*
name|szHintW
init|=
name|createSpinBox
argument_list|(
name|szHint
operator|.
name|width
argument_list|()
argument_list|,
operator|&
name|dialog
argument_list|)
decl_stmt|;
name|inputLayout
operator|->
name|addWidget
argument_list|(
name|szHintW
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QSpinBox
modifier|*
name|szHintH
init|=
name|createSpinBox
argument_list|(
name|szHint
operator|.
name|height
argument_list|()
argument_list|,
operator|&
name|dialog
argument_list|)
decl_stmt|;
name|inputLayout
operator|->
name|addWidget
argument_list|(
name|szHintH
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QSpinBox
modifier|*
name|minSzHintW
init|=
name|createSpinBox
argument_list|(
name|minSzHint
operator|.
name|width
argument_list|()
argument_list|,
operator|&
name|dialog
argument_list|)
decl_stmt|;
name|inputLayout
operator|->
name|addWidget
argument_list|(
name|minSzHintW
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QSpinBox
modifier|*
name|minSzHintH
init|=
name|createSpinBox
argument_list|(
name|minSzHint
operator|.
name|height
argument_list|()
argument_list|,
operator|&
name|dialog
argument_list|)
decl_stmt|;
name|inputLayout
operator|->
name|addWidget
argument_list|(
name|minSzHintH
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QSize
name|maxSz
init|=
name|maximumSize
argument_list|()
decl_stmt|;
name|QSpinBox
modifier|*
name|maxSzW
init|=
name|createSpinBox
argument_list|(
name|maxSz
operator|.
name|width
argument_list|()
argument_list|,
operator|&
name|dialog
argument_list|,
name|QWIDGETSIZE_MAX
argument_list|)
decl_stmt|;
name|inputLayout
operator|->
name|addWidget
argument_list|(
name|maxSzW
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QSpinBox
modifier|*
name|maxSzH
init|=
name|createSpinBox
argument_list|(
name|maxSz
operator|.
name|height
argument_list|()
argument_list|,
operator|&
name|dialog
argument_list|,
name|QWIDGETSIZE_MAX
argument_list|)
decl_stmt|;
name|inputLayout
operator|->
name|addWidget
argument_list|(
name|maxSzH
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QSize
name|dwMaxSz
init|=
name|parentWidget
argument_list|()
operator|->
name|maximumSize
argument_list|()
decl_stmt|;
name|QSpinBox
modifier|*
name|dwMaxSzW
init|=
name|createSpinBox
argument_list|(
name|dwMaxSz
operator|.
name|width
argument_list|()
argument_list|,
operator|&
name|dialog
argument_list|,
name|QWIDGETSIZE_MAX
argument_list|)
decl_stmt|;
name|inputLayout
operator|->
name|addWidget
argument_list|(
name|dwMaxSzW
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QSpinBox
modifier|*
name|dwMaxSzH
init|=
name|createSpinBox
argument_list|(
name|dwMaxSz
operator|.
name|height
argument_list|()
argument_list|,
operator|&
name|dialog
argument_list|,
name|QWIDGETSIZE_MAX
argument_list|)
decl_stmt|;
name|inputLayout
operator|->
name|addWidget
argument_list|(
name|dwMaxSzH
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|inputLayout
operator|->
name|setColumnStretch
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|inputLayout
operator|->
name|setColumnStretch
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|topLayout
operator|->
name|addStretch
argument_list|()
expr_stmt|;
name|QHBoxLayout
modifier|*
name|buttonBox
init|=
operator|new
name|QHBoxLayout
argument_list|()
decl_stmt|;
name|topLayout
operator|->
name|addLayout
argument_list|(
name|buttonBox
argument_list|)
expr_stmt|;
name|QPushButton
modifier|*
name|okButton
init|=
operator|new
name|QPushButton
argument_list|(
name|tr
argument_list|(
literal|"Ok"
argument_list|)
argument_list|,
operator|&
name|dialog
argument_list|)
decl_stmt|;
name|QPushButton
modifier|*
name|cancelButton
init|=
operator|new
name|QPushButton
argument_list|(
name|tr
argument_list|(
literal|"Cancel"
argument_list|)
argument_list|,
operator|&
name|dialog
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|okButton
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
operator|&
name|dialog
argument_list|,
name|SLOT
argument_list|(
name|accept
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|cancelButton
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
operator|&
name|dialog
argument_list|,
name|SLOT
argument_list|(
name|reject
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|buttonBox
operator|->
name|addStretch
argument_list|()
expr_stmt|;
name|buttonBox
operator|->
name|addWidget
argument_list|(
name|cancelButton
argument_list|)
expr_stmt|;
name|buttonBox
operator|->
name|addWidget
argument_list|(
name|okButton
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dialog
operator|.
name|exec
argument_list|()
condition|)
return|return;
name|szHint
operator|=
name|QSize
argument_list|(
name|szHintW
operator|->
name|value
argument_list|()
argument_list|,
name|szHintH
operator|->
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|minSzHint
operator|=
name|QSize
argument_list|(
name|minSzHintW
operator|->
name|value
argument_list|()
argument_list|,
name|minSzHintH
operator|->
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|maxSz
operator|=
name|QSize
argument_list|(
name|maxSzW
operator|->
name|value
argument_list|()
argument_list|,
name|maxSzH
operator|->
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|setMaximumSize
argument_list|(
name|maxSz
argument_list|)
expr_stmt|;
name|dwMaxSz
operator|=
name|QSize
argument_list|(
name|dwMaxSzW
operator|->
name|value
argument_list|()
argument_list|,
name|dwMaxSzH
operator|->
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|parentWidget
argument_list|()
operator|->
name|setMaximumSize
argument_list|(
name|dwMaxSz
argument_list|)
expr_stmt|;
name|updateGeometry
argument_list|()
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setCustomSizeHint
name|void
name|ColorDock
operator|::
name|setCustomSizeHint
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|)
block|{
name|szHint
operator|=
name|size
expr_stmt|;
name|updateGeometry
argument_list|()
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|ColorSwatch
name|ColorSwatch
operator|::
name|ColorSwatch
parameter_list|(
specifier|const
name|QString
modifier|&
name|colorName
parameter_list|,
name|QMainWindow
modifier|*
name|parent
parameter_list|,
name|Qt
operator|::
name|WindowFlags
name|flags
parameter_list|)
member_init_list|:
name|QDockWidget
argument_list|(
name|parent
argument_list|,
name|flags
argument_list|)
member_init_list|,
name|mainWindow
argument_list|(
name|parent
argument_list|)
block|{
name|setObjectName
argument_list|(
name|colorName
operator|+
name|QLatin1String
argument_list|(
literal|" Dock Widget"
argument_list|)
argument_list|)
expr_stmt|;
name|setWindowTitle
argument_list|(
name|objectName
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|" [*]"
argument_list|)
argument_list|)
expr_stmt|;
name|QFrame
modifier|*
name|swatch
init|=
operator|new
name|ColorDock
argument_list|(
name|colorName
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|swatch
operator|->
name|setFrameStyle
argument_list|(
name|QFrame
operator|::
name|Box
operator||
name|QFrame
operator|::
name|Sunken
argument_list|)
expr_stmt|;
name|setWidget
argument_list|(
name|swatch
argument_list|)
expr_stmt|;
name|changeSizeHintsAction
operator|=
operator|new
name|QAction
argument_list|(
name|tr
argument_list|(
literal|"Change Size Hints"
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|changeSizeHintsAction
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|swatch
argument_list|,
name|SLOT
argument_list|(
name|changeSizeHints
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|closableAction
operator|=
operator|new
name|QAction
argument_list|(
name|tr
argument_list|(
literal|"Closable"
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|closableAction
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|closableAction
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|changeClosable
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|movableAction
operator|=
operator|new
name|QAction
argument_list|(
name|tr
argument_list|(
literal|"Movable"
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|movableAction
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|movableAction
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|changeMovable
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|floatableAction
operator|=
operator|new
name|QAction
argument_list|(
name|tr
argument_list|(
literal|"Floatable"
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|floatableAction
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|floatableAction
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|changeFloatable
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|verticalTitleBarAction
operator|=
operator|new
name|QAction
argument_list|(
name|tr
argument_list|(
literal|"Vertical title bar"
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|verticalTitleBarAction
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|verticalTitleBarAction
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|changeVerticalTitleBar
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|floatingAction
operator|=
operator|new
name|QAction
argument_list|(
name|tr
argument_list|(
literal|"Floating"
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|floatingAction
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|floatingAction
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|changeFloating
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|allowedAreasActions
operator|=
operator|new
name|QActionGroup
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|allowedAreasActions
operator|->
name|setExclusive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|allowLeftAction
operator|=
operator|new
name|QAction
argument_list|(
name|tr
argument_list|(
literal|"Allow on Left"
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|allowLeftAction
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|allowLeftAction
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|allowLeft
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|allowRightAction
operator|=
operator|new
name|QAction
argument_list|(
name|tr
argument_list|(
literal|"Allow on Right"
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|allowRightAction
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|allowRightAction
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|allowRight
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|allowTopAction
operator|=
operator|new
name|QAction
argument_list|(
name|tr
argument_list|(
literal|"Allow on Top"
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|allowTopAction
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|allowTopAction
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|allowTop
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|allowBottomAction
operator|=
operator|new
name|QAction
argument_list|(
name|tr
argument_list|(
literal|"Allow on Bottom"
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|allowBottomAction
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|allowBottomAction
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|allowBottom
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|allowedAreasActions
operator|->
name|addAction
argument_list|(
name|allowLeftAction
argument_list|)
expr_stmt|;
name|allowedAreasActions
operator|->
name|addAction
argument_list|(
name|allowRightAction
argument_list|)
expr_stmt|;
name|allowedAreasActions
operator|->
name|addAction
argument_list|(
name|allowTopAction
argument_list|)
expr_stmt|;
name|allowedAreasActions
operator|->
name|addAction
argument_list|(
name|allowBottomAction
argument_list|)
expr_stmt|;
name|areaActions
operator|=
operator|new
name|QActionGroup
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|areaActions
operator|->
name|setExclusive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|leftAction
operator|=
operator|new
name|QAction
argument_list|(
name|tr
argument_list|(
literal|"Place on Left"
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|leftAction
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|leftAction
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|placeLeft
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|rightAction
operator|=
operator|new
name|QAction
argument_list|(
name|tr
argument_list|(
literal|"Place on Right"
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|rightAction
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|rightAction
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|placeRight
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|topAction
operator|=
operator|new
name|QAction
argument_list|(
name|tr
argument_list|(
literal|"Place on Top"
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|topAction
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|topAction
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|placeTop
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|bottomAction
operator|=
operator|new
name|QAction
argument_list|(
name|tr
argument_list|(
literal|"Place on Bottom"
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|bottomAction
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|bottomAction
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|placeBottom
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|areaActions
operator|->
name|addAction
argument_list|(
name|leftAction
argument_list|)
expr_stmt|;
name|areaActions
operator|->
name|addAction
argument_list|(
name|rightAction
argument_list|)
expr_stmt|;
name|areaActions
operator|->
name|addAction
argument_list|(
name|topAction
argument_list|)
expr_stmt|;
name|areaActions
operator|->
name|addAction
argument_list|(
name|bottomAction
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|movableAction
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|areaActions
argument_list|,
name|SLOT
argument_list|(
name|setEnabled
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|movableAction
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|allowedAreasActions
argument_list|,
name|SLOT
argument_list|(
name|setEnabled
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|floatableAction
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|floatingAction
argument_list|,
name|SLOT
argument_list|(
name|setEnabled
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|floatingAction
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|floatableAction
argument_list|,
name|SLOT
argument_list|(
name|setDisabled
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|movableAction
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|floatableAction
argument_list|,
name|SLOT
argument_list|(
name|setEnabled
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|tabMenu
operator|=
operator|new
name|QMenu
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|tabMenu
operator|->
name|setTitle
argument_list|(
name|tr
argument_list|(
literal|"Tab into"
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|tabMenu
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|(
name|QAction
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|tabInto
argument_list|(
name|QAction
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|splitHMenu
operator|=
operator|new
name|QMenu
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|splitHMenu
operator|->
name|setTitle
argument_list|(
name|tr
argument_list|(
literal|"Split horizontally into"
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|splitHMenu
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|(
name|QAction
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|splitInto
argument_list|(
name|QAction
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|splitVMenu
operator|=
operator|new
name|QMenu
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|splitVMenu
operator|->
name|setTitle
argument_list|(
name|tr
argument_list|(
literal|"Split vertically into"
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|splitVMenu
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|(
name|QAction
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|splitInto
argument_list|(
name|QAction
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|windowModifiedAction
operator|=
operator|new
name|QAction
argument_list|(
name|tr
argument_list|(
literal|"Modified"
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|windowModifiedAction
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|windowModifiedAction
operator|->
name|setChecked
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|windowModifiedAction
argument_list|,
name|SIGNAL
argument_list|(
name|toggled
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|setWindowModified
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|menu
operator|=
operator|new
name|QMenu
argument_list|(
name|colorName
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addAction
argument_list|(
name|toggleViewAction
argument_list|()
argument_list|)
expr_stmt|;
name|QAction
modifier|*
name|action
init|=
name|menu
operator|->
name|addAction
argument_list|(
name|tr
argument_list|(
literal|"Raise"
argument_list|)
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|action
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|raise
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addAction
argument_list|(
name|changeSizeHintsAction
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addSeparator
argument_list|()
expr_stmt|;
name|menu
operator|->
name|addAction
argument_list|(
name|closableAction
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addAction
argument_list|(
name|movableAction
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addAction
argument_list|(
name|floatableAction
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addAction
argument_list|(
name|floatingAction
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addAction
argument_list|(
name|verticalTitleBarAction
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addSeparator
argument_list|()
expr_stmt|;
name|menu
operator|->
name|addActions
argument_list|(
name|allowedAreasActions
operator|->
name|actions
argument_list|()
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addSeparator
argument_list|()
expr_stmt|;
name|menu
operator|->
name|addActions
argument_list|(
name|areaActions
operator|->
name|actions
argument_list|()
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addSeparator
argument_list|()
expr_stmt|;
name|menu
operator|->
name|addMenu
argument_list|(
name|splitHMenu
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addMenu
argument_list|(
name|splitVMenu
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addMenu
argument_list|(
name|tabMenu
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addSeparator
argument_list|()
expr_stmt|;
name|menu
operator|->
name|addAction
argument_list|(
name|windowModifiedAction
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|menu
argument_list|,
name|SIGNAL
argument_list|(
name|aboutToShow
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|updateContextMenu
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|colorName
operator|==
literal|"Black"
condition|)
block|{
name|leftAction
operator|->
name|setShortcut
argument_list|(
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_W
argument_list|)
expr_stmt|;
name|rightAction
operator|->
name|setShortcut
argument_list|(
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_E
argument_list|)
expr_stmt|;
name|toggleViewAction
argument_list|()
operator|->
name|setShortcut
argument_list|(
name|Qt
operator|::
name|CTRL
operator||
name|Qt
operator|::
name|Key_R
argument_list|)
expr_stmt|;
block|}
block|}
end_constructor
begin_function
DECL|function|updateContextMenu
name|void
name|ColorSwatch
operator|::
name|updateContextMenu
parameter_list|()
block|{
specifier|const
name|Qt
operator|::
name|DockWidgetArea
name|area
init|=
name|mainWindow
operator|->
name|dockWidgetArea
argument_list|(
name|this
argument_list|)
decl_stmt|;
specifier|const
name|Qt
operator|::
name|DockWidgetAreas
name|areas
init|=
name|allowedAreas
argument_list|()
decl_stmt|;
name|closableAction
operator|->
name|setChecked
argument_list|(
name|features
argument_list|()
operator|&
name|QDockWidget
operator|::
name|DockWidgetClosable
argument_list|)
expr_stmt|;
if|if
condition|(
name|windowType
argument_list|()
operator|==
name|Qt
operator|::
name|Drawer
condition|)
block|{
name|floatableAction
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|floatingAction
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|movableAction
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|verticalTitleBarAction
operator|->
name|setChecked
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|floatableAction
operator|->
name|setChecked
argument_list|(
name|features
argument_list|()
operator|&
name|QDockWidget
operator|::
name|DockWidgetFloatable
argument_list|)
expr_stmt|;
name|floatingAction
operator|->
name|setChecked
argument_list|(
name|isWindow
argument_list|()
argument_list|)
expr_stmt|;
comment|// done after floating, to get 'floatable' correctly initialized
name|movableAction
operator|->
name|setChecked
argument_list|(
name|features
argument_list|()
operator|&
name|QDockWidget
operator|::
name|DockWidgetMovable
argument_list|)
expr_stmt|;
name|verticalTitleBarAction
operator|->
name|setChecked
argument_list|(
name|features
argument_list|()
operator|&
name|QDockWidget
operator|::
name|DockWidgetVerticalTitleBar
argument_list|)
expr_stmt|;
block|}
name|allowLeftAction
operator|->
name|setChecked
argument_list|(
name|isAreaAllowed
argument_list|(
name|Qt
operator|::
name|LeftDockWidgetArea
argument_list|)
argument_list|)
expr_stmt|;
name|allowRightAction
operator|->
name|setChecked
argument_list|(
name|isAreaAllowed
argument_list|(
name|Qt
operator|::
name|RightDockWidgetArea
argument_list|)
argument_list|)
expr_stmt|;
name|allowTopAction
operator|->
name|setChecked
argument_list|(
name|isAreaAllowed
argument_list|(
name|Qt
operator|::
name|TopDockWidgetArea
argument_list|)
argument_list|)
expr_stmt|;
name|allowBottomAction
operator|->
name|setChecked
argument_list|(
name|isAreaAllowed
argument_list|(
name|Qt
operator|::
name|BottomDockWidgetArea
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|allowedAreasActions
operator|->
name|isEnabled
argument_list|()
condition|)
block|{
name|allowLeftAction
operator|->
name|setEnabled
argument_list|(
name|area
operator|!=
name|Qt
operator|::
name|LeftDockWidgetArea
argument_list|)
expr_stmt|;
name|allowRightAction
operator|->
name|setEnabled
argument_list|(
name|area
operator|!=
name|Qt
operator|::
name|RightDockWidgetArea
argument_list|)
expr_stmt|;
name|allowTopAction
operator|->
name|setEnabled
argument_list|(
name|area
operator|!=
name|Qt
operator|::
name|TopDockWidgetArea
argument_list|)
expr_stmt|;
name|allowBottomAction
operator|->
name|setEnabled
argument_list|(
name|area
operator|!=
name|Qt
operator|::
name|BottomDockWidgetArea
argument_list|)
expr_stmt|;
block|}
name|leftAction
operator|->
name|blockSignals
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|rightAction
operator|->
name|blockSignals
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|topAction
operator|->
name|blockSignals
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bottomAction
operator|->
name|blockSignals
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|leftAction
operator|->
name|setChecked
argument_list|(
name|area
operator|==
name|Qt
operator|::
name|LeftDockWidgetArea
argument_list|)
expr_stmt|;
name|rightAction
operator|->
name|setChecked
argument_list|(
name|area
operator|==
name|Qt
operator|::
name|RightDockWidgetArea
argument_list|)
expr_stmt|;
name|topAction
operator|->
name|setChecked
argument_list|(
name|area
operator|==
name|Qt
operator|::
name|TopDockWidgetArea
argument_list|)
expr_stmt|;
name|bottomAction
operator|->
name|setChecked
argument_list|(
name|area
operator|==
name|Qt
operator|::
name|BottomDockWidgetArea
argument_list|)
expr_stmt|;
name|leftAction
operator|->
name|blockSignals
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|rightAction
operator|->
name|blockSignals
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|topAction
operator|->
name|blockSignals
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|bottomAction
operator|->
name|blockSignals
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|areaActions
operator|->
name|isEnabled
argument_list|()
condition|)
block|{
name|leftAction
operator|->
name|setEnabled
argument_list|(
name|areas
operator|&
name|Qt
operator|::
name|LeftDockWidgetArea
argument_list|)
expr_stmt|;
name|rightAction
operator|->
name|setEnabled
argument_list|(
name|areas
operator|&
name|Qt
operator|::
name|RightDockWidgetArea
argument_list|)
expr_stmt|;
name|topAction
operator|->
name|setEnabled
argument_list|(
name|areas
operator|&
name|Qt
operator|::
name|TopDockWidgetArea
argument_list|)
expr_stmt|;
name|bottomAction
operator|->
name|setEnabled
argument_list|(
name|areas
operator|&
name|Qt
operator|::
name|BottomDockWidgetArea
argument_list|)
expr_stmt|;
block|}
name|tabMenu
operator|->
name|clear
argument_list|()
expr_stmt|;
name|splitHMenu
operator|->
name|clear
argument_list|()
expr_stmt|;
name|splitVMenu
operator|->
name|clear
argument_list|()
expr_stmt|;
name|QList
argument_list|<
name|ColorSwatch
modifier|*
argument_list|>
name|dock_list
init|=
name|mainWindow
operator|->
name|findChildren
argument_list|<
name|ColorSwatch
operator|*
argument_list|>
argument_list|()
decl_stmt|;
foreach|foreach
control|(
name|ColorSwatch
modifier|*
name|dock
decl|,
name|dock_list
control|)
block|{
comment|//        if (!dock->isVisible() || dock->isFloating())
comment|//            continue;
name|tabMenu
operator|->
name|addAction
argument_list|(
name|dock
operator|->
name|objectName
argument_list|()
argument_list|)
expr_stmt|;
name|splitHMenu
operator|->
name|addAction
argument_list|(
name|dock
operator|->
name|objectName
argument_list|()
argument_list|)
expr_stmt|;
name|splitVMenu
operator|->
name|addAction
argument_list|(
name|dock
operator|->
name|objectName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|splitInto
name|void
name|ColorSwatch
operator|::
name|splitInto
parameter_list|(
name|QAction
modifier|*
name|action
parameter_list|)
block|{
name|QList
argument_list|<
name|ColorSwatch
modifier|*
argument_list|>
name|dock_list
init|=
name|mainWindow
operator|->
name|findChildren
argument_list|<
name|ColorSwatch
operator|*
argument_list|>
argument_list|()
decl_stmt|;
name|ColorSwatch
modifier|*
name|target
init|=
literal|0
decl_stmt|;
foreach|foreach
control|(
name|ColorSwatch
modifier|*
name|dock
decl|,
name|dock_list
control|)
block|{
if|if
condition|(
name|action
operator|->
name|text
argument_list|()
operator|==
name|dock
operator|->
name|objectName
argument_list|()
condition|)
block|{
name|target
operator|=
name|dock
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|target
operator|==
literal|0
condition|)
return|return;
name|Qt
operator|::
name|Orientation
name|o
init|=
name|action
operator|->
name|parent
argument_list|()
operator|==
name|splitHMenu
condition|?
name|Qt
operator|::
name|Horizontal
else|:
name|Qt
operator|::
name|Vertical
decl_stmt|;
name|mainWindow
operator|->
name|splitDockWidget
argument_list|(
name|target
argument_list|,
name|this
argument_list|,
name|o
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tabInto
name|void
name|ColorSwatch
operator|::
name|tabInto
parameter_list|(
name|QAction
modifier|*
name|action
parameter_list|)
block|{
name|QList
argument_list|<
name|ColorSwatch
modifier|*
argument_list|>
name|dock_list
init|=
name|mainWindow
operator|->
name|findChildren
argument_list|<
name|ColorSwatch
operator|*
argument_list|>
argument_list|()
decl_stmt|;
name|ColorSwatch
modifier|*
name|target
init|=
literal|0
decl_stmt|;
foreach|foreach
control|(
name|ColorSwatch
modifier|*
name|dock
decl|,
name|dock_list
control|)
block|{
if|if
condition|(
name|action
operator|->
name|text
argument_list|()
operator|==
name|dock
operator|->
name|objectName
argument_list|()
condition|)
block|{
name|target
operator|=
name|dock
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|target
operator|==
literal|0
condition|)
return|return;
name|mainWindow
operator|->
name|tabifyDockWidget
argument_list|(
name|target
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|contextMenuEvent
name|void
name|ColorSwatch
operator|::
name|contextMenuEvent
parameter_list|(
name|QContextMenuEvent
modifier|*
name|event
parameter_list|)
block|{
name|event
operator|->
name|accept
argument_list|()
expr_stmt|;
name|menu
operator|->
name|exec
argument_list|(
name|event
operator|->
name|globalPos
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resizeEvent
name|void
name|ColorSwatch
operator|::
name|resizeEvent
parameter_list|(
name|QResizeEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
name|BlueTitleBar
modifier|*
name|btb
init|=
name|qobject_cast
argument_list|<
name|BlueTitleBar
operator|*
argument_list|>
argument_list|(
name|titleBarWidget
argument_list|()
argument_list|)
condition|)
name|btb
operator|->
name|updateMask
argument_list|()
expr_stmt|;
name|QDockWidget
operator|::
name|resizeEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|allow
name|void
name|ColorSwatch
operator|::
name|allow
parameter_list|(
name|Qt
operator|::
name|DockWidgetArea
name|area
parameter_list|,
name|bool
name|a
parameter_list|)
block|{
name|Qt
operator|::
name|DockWidgetAreas
name|areas
init|=
name|allowedAreas
argument_list|()
decl_stmt|;
name|areas
operator|=
name|a
condition|?
name|areas
operator||
name|area
else|:
name|areas
operator|&
operator|~
name|area
expr_stmt|;
name|setAllowedAreas
argument_list|(
name|areas
argument_list|)
expr_stmt|;
if|if
condition|(
name|areaActions
operator|->
name|isEnabled
argument_list|()
condition|)
block|{
name|leftAction
operator|->
name|setEnabled
argument_list|(
name|areas
operator|&
name|Qt
operator|::
name|LeftDockWidgetArea
argument_list|)
expr_stmt|;
name|rightAction
operator|->
name|setEnabled
argument_list|(
name|areas
operator|&
name|Qt
operator|::
name|RightDockWidgetArea
argument_list|)
expr_stmt|;
name|topAction
operator|->
name|setEnabled
argument_list|(
name|areas
operator|&
name|Qt
operator|::
name|TopDockWidgetArea
argument_list|)
expr_stmt|;
name|bottomAction
operator|->
name|setEnabled
argument_list|(
name|areas
operator|&
name|Qt
operator|::
name|BottomDockWidgetArea
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|place
name|void
name|ColorSwatch
operator|::
name|place
parameter_list|(
name|Qt
operator|::
name|DockWidgetArea
name|area
parameter_list|,
name|bool
name|p
parameter_list|)
block|{
if|if
condition|(
operator|!
name|p
condition|)
return|return;
name|mainWindow
operator|->
name|addDockWidget
argument_list|(
name|area
argument_list|,
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|allowedAreasActions
operator|->
name|isEnabled
argument_list|()
condition|)
block|{
name|allowLeftAction
operator|->
name|setEnabled
argument_list|(
name|area
operator|!=
name|Qt
operator|::
name|LeftDockWidgetArea
argument_list|)
expr_stmt|;
name|allowRightAction
operator|->
name|setEnabled
argument_list|(
name|area
operator|!=
name|Qt
operator|::
name|RightDockWidgetArea
argument_list|)
expr_stmt|;
name|allowTopAction
operator|->
name|setEnabled
argument_list|(
name|area
operator|!=
name|Qt
operator|::
name|TopDockWidgetArea
argument_list|)
expr_stmt|;
name|allowBottomAction
operator|->
name|setEnabled
argument_list|(
name|area
operator|!=
name|Qt
operator|::
name|BottomDockWidgetArea
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setCustomSizeHint
name|void
name|ColorSwatch
operator|::
name|setCustomSizeHint
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|)
block|{
if|if
condition|(
name|ColorDock
modifier|*
name|dock
init|=
name|qobject_cast
argument_list|<
name|ColorDock
operator|*
argument_list|>
argument_list|(
name|widget
argument_list|()
argument_list|)
condition|)
name|dock
operator|->
name|setCustomSizeHint
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|changeClosable
name|void
name|ColorSwatch
operator|::
name|changeClosable
parameter_list|(
name|bool
name|on
parameter_list|)
block|{
name|setFeatures
argument_list|(
name|on
condition|?
name|features
argument_list|()
operator||
name|DockWidgetClosable
else|:
name|features
argument_list|()
operator|&
operator|~
name|DockWidgetClosable
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|changeMovable
name|void
name|ColorSwatch
operator|::
name|changeMovable
parameter_list|(
name|bool
name|on
parameter_list|)
block|{
name|setFeatures
argument_list|(
name|on
condition|?
name|features
argument_list|()
operator||
name|DockWidgetMovable
else|:
name|features
argument_list|()
operator|&
operator|~
name|DockWidgetMovable
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|changeFloatable
name|void
name|ColorSwatch
operator|::
name|changeFloatable
parameter_list|(
name|bool
name|on
parameter_list|)
block|{
name|setFeatures
argument_list|(
name|on
condition|?
name|features
argument_list|()
operator||
name|DockWidgetFloatable
else|:
name|features
argument_list|()
operator|&
operator|~
name|DockWidgetFloatable
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|changeFloating
name|void
name|ColorSwatch
operator|::
name|changeFloating
parameter_list|(
name|bool
name|floating
parameter_list|)
block|{
name|setFloating
argument_list|(
name|floating
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|allowLeft
name|void
name|ColorSwatch
operator|::
name|allowLeft
parameter_list|(
name|bool
name|a
parameter_list|)
block|{
name|allow
argument_list|(
name|Qt
operator|::
name|LeftDockWidgetArea
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|allowRight
name|void
name|ColorSwatch
operator|::
name|allowRight
parameter_list|(
name|bool
name|a
parameter_list|)
block|{
name|allow
argument_list|(
name|Qt
operator|::
name|RightDockWidgetArea
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|allowTop
name|void
name|ColorSwatch
operator|::
name|allowTop
parameter_list|(
name|bool
name|a
parameter_list|)
block|{
name|allow
argument_list|(
name|Qt
operator|::
name|TopDockWidgetArea
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|allowBottom
name|void
name|ColorSwatch
operator|::
name|allowBottom
parameter_list|(
name|bool
name|a
parameter_list|)
block|{
name|allow
argument_list|(
name|Qt
operator|::
name|BottomDockWidgetArea
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|placeLeft
name|void
name|ColorSwatch
operator|::
name|placeLeft
parameter_list|(
name|bool
name|p
parameter_list|)
block|{
name|place
argument_list|(
name|Qt
operator|::
name|LeftDockWidgetArea
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|placeRight
name|void
name|ColorSwatch
operator|::
name|placeRight
parameter_list|(
name|bool
name|p
parameter_list|)
block|{
name|place
argument_list|(
name|Qt
operator|::
name|RightDockWidgetArea
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|placeTop
name|void
name|ColorSwatch
operator|::
name|placeTop
parameter_list|(
name|bool
name|p
parameter_list|)
block|{
name|place
argument_list|(
name|Qt
operator|::
name|TopDockWidgetArea
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|placeBottom
name|void
name|ColorSwatch
operator|::
name|placeBottom
parameter_list|(
name|bool
name|p
parameter_list|)
block|{
name|place
argument_list|(
name|Qt
operator|::
name|BottomDockWidgetArea
argument_list|,
name|p
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|changeVerticalTitleBar
name|void
name|ColorSwatch
operator|::
name|changeVerticalTitleBar
parameter_list|(
name|bool
name|on
parameter_list|)
block|{
name|setFeatures
argument_list|(
name|on
condition|?
name|features
argument_list|()
operator||
name|DockWidgetVerticalTitleBar
else|:
name|features
argument_list|()
operator|&
operator|~
name|DockWidgetVerticalTitleBar
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|minimumSizeHint
name|QSize
name|BlueTitleBar
operator|::
name|minimumSizeHint
parameter_list|()
specifier|const
block|{
name|QDockWidget
modifier|*
name|dw
init|=
name|qobject_cast
argument_list|<
name|QDockWidget
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|()
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|dw
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QSize
name|result
argument_list|(
name|leftPm
operator|.
name|width
argument_list|()
operator|+
name|rightPm
operator|.
name|width
argument_list|()
argument_list|,
name|centerPm
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|dw
operator|->
name|features
argument_list|()
operator|&
name|QDockWidget
operator|::
name|DockWidgetVerticalTitleBar
condition|)
name|result
operator|.
name|transpose
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_constructor
DECL|function|BlueTitleBar
name|BlueTitleBar
operator|::
name|BlueTitleBar
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
block|{
name|leftPm
operator|=
name|QPixmap
argument_list|(
literal|":/res/titlebarLeft.png"
argument_list|)
expr_stmt|;
name|centerPm
operator|=
name|QPixmap
argument_list|(
literal|":/res/titlebarCenter.png"
argument_list|)
expr_stmt|;
name|rightPm
operator|=
name|QPixmap
argument_list|(
literal|":/res/titlebarRight.png"
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|paintEvent
name|void
name|BlueTitleBar
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
name|QPainter
name|painter
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QRect
name|rect
init|=
name|this
operator|->
name|rect
argument_list|()
decl_stmt|;
name|QDockWidget
modifier|*
name|dw
init|=
name|qobject_cast
argument_list|<
name|QDockWidget
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|()
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|dw
operator|!=
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|dw
operator|->
name|features
argument_list|()
operator|&
name|QDockWidget
operator|::
name|DockWidgetVerticalTitleBar
condition|)
block|{
name|QSize
name|s
init|=
name|rect
operator|.
name|size
argument_list|()
decl_stmt|;
name|s
operator|.
name|transpose
argument_list|()
expr_stmt|;
name|rect
operator|.
name|setSize
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|painter
operator|.
name|translate
argument_list|(
name|rect
operator|.
name|left
argument_list|()
argument_list|,
name|rect
operator|.
name|top
argument_list|()
operator|+
name|rect
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|.
name|rotate
argument_list|(
operator|-
literal|90
argument_list|)
expr_stmt|;
name|painter
operator|.
name|translate
argument_list|(
operator|-
name|rect
operator|.
name|left
argument_list|()
argument_list|,
operator|-
name|rect
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|painter
operator|.
name|drawPixmap
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|leftPm
argument_list|)
expr_stmt|;
name|painter
operator|.
name|drawPixmap
argument_list|(
name|rect
operator|.
name|topRight
argument_list|()
operator|-
name|QPoint
argument_list|(
name|rightPm
operator|.
name|width
argument_list|()
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
name|rightPm
argument_list|)
expr_stmt|;
name|QBrush
name|brush
argument_list|(
name|centerPm
argument_list|)
decl_stmt|;
name|painter
operator|.
name|fillRect
argument_list|(
name|rect
operator|.
name|left
argument_list|()
operator|+
name|leftPm
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|top
argument_list|()
argument_list|,
name|rect
operator|.
name|width
argument_list|()
operator|-
name|leftPm
operator|.
name|width
argument_list|()
operator|-
name|rightPm
operator|.
name|width
argument_list|()
argument_list|,
name|centerPm
operator|.
name|height
argument_list|()
argument_list|,
name|centerPm
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mouseReleaseEvent
name|void
name|BlueTitleBar
operator|::
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|QPoint
name|pos
init|=
name|event
operator|->
name|pos
argument_list|()
decl_stmt|;
name|QRect
name|rect
init|=
name|this
operator|->
name|rect
argument_list|()
decl_stmt|;
name|QDockWidget
modifier|*
name|dw
init|=
name|qobject_cast
argument_list|<
name|QDockWidget
operator|*
argument_list|>
argument_list|(
name|parentWidget
argument_list|()
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|dw
operator|!=
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|dw
operator|->
name|features
argument_list|()
operator|&
name|QDockWidget
operator|::
name|DockWidgetVerticalTitleBar
condition|)
block|{
name|QPoint
name|p
init|=
name|pos
decl_stmt|;
name|pos
operator|.
name|setX
argument_list|(
name|rect
operator|.
name|left
argument_list|()
operator|+
name|rect
operator|.
name|bottom
argument_list|()
operator|-
name|p
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|pos
operator|.
name|setY
argument_list|(
name|rect
operator|.
name|top
argument_list|()
operator|+
name|p
operator|.
name|x
argument_list|()
operator|-
name|rect
operator|.
name|left
argument_list|()
argument_list|)
expr_stmt|;
name|QSize
name|s
init|=
name|rect
operator|.
name|size
argument_list|()
decl_stmt|;
name|s
operator|.
name|transpose
argument_list|()
expr_stmt|;
name|rect
operator|.
name|setSize
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
specifier|const
name|int
name|buttonRight
init|=
literal|7
decl_stmt|;
specifier|const
name|int
name|buttonWidth
init|=
literal|20
decl_stmt|;
name|int
name|right
init|=
name|rect
operator|.
name|right
argument_list|()
operator|-
name|pos
operator|.
name|x
argument_list|()
decl_stmt|;
name|int
name|button
init|=
operator|(
name|right
operator|-
name|buttonRight
operator|)
operator|/
name|buttonWidth
decl_stmt|;
switch|switch
condition|(
name|button
condition|)
block|{
case|case
literal|0
case|:
name|event
operator|->
name|accept
argument_list|()
expr_stmt|;
name|dw
operator|->
name|close
argument_list|()
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|event
operator|->
name|accept
argument_list|()
expr_stmt|;
name|dw
operator|->
name|setFloating
argument_list|(
operator|!
name|dw
operator|->
name|isFloating
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
literal|2
case|:
block|{
name|event
operator|->
name|accept
argument_list|()
expr_stmt|;
name|QDockWidget
operator|::
name|DockWidgetFeatures
name|features
init|=
name|dw
operator|->
name|features
argument_list|()
decl_stmt|;
if|if
condition|(
name|features
operator|&
name|QDockWidget
operator|::
name|DockWidgetVerticalTitleBar
condition|)
name|features
operator|&=
operator|~
name|QDockWidget
operator|::
name|DockWidgetVerticalTitleBar
expr_stmt|;
else|else
name|features
operator||=
name|QDockWidget
operator|::
name|DockWidgetVerticalTitleBar
expr_stmt|;
name|dw
operator|->
name|setFeatures
argument_list|(
name|features
argument_list|)
expr_stmt|;
break|break;
block|}
default|default:
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
end_function
begin_function
DECL|function|updateMask
name|void
name|BlueTitleBar
operator|::
name|updateMask
parameter_list|()
block|{
name|QDockWidget
modifier|*
name|dw
init|=
name|qobject_cast
argument_list|<
name|QDockWidget
operator|*
argument_list|>
argument_list|(
name|parent
argument_list|()
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|dw
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QRect
name|rect
init|=
name|dw
operator|->
name|rect
argument_list|()
decl_stmt|;
name|QPixmap
name|bitmap
argument_list|(
name|dw
operator|->
name|size
argument_list|()
argument_list|)
decl_stmt|;
block|{
name|QPainter
name|painter
argument_list|(
operator|&
name|bitmap
argument_list|)
decl_stmt|;
comment|///initialize to transparent
name|painter
operator|.
name|fillRect
argument_list|(
name|rect
argument_list|,
name|Qt
operator|::
name|color0
argument_list|)
expr_stmt|;
name|QRect
name|contents
init|=
name|rect
decl_stmt|;
name|contents
operator|.
name|setTopLeft
argument_list|(
name|geometry
argument_list|()
operator|.
name|bottomLeft
argument_list|()
argument_list|)
expr_stmt|;
name|contents
operator|.
name|setRight
argument_list|(
name|geometry
argument_list|()
operator|.
name|right
argument_list|()
argument_list|)
expr_stmt|;
name|contents
operator|.
name|setBottom
argument_list|(
name|contents
operator|.
name|bottom
argument_list|()
operator|-
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|.
name|fillRect
argument_list|(
name|contents
argument_list|,
name|Qt
operator|::
name|color1
argument_list|)
expr_stmt|;
comment|//let's pait the titlebar
name|QRect
name|titleRect
init|=
name|this
operator|->
name|geometry
argument_list|()
decl_stmt|;
if|if
condition|(
name|dw
operator|->
name|features
argument_list|()
operator|&
name|QDockWidget
operator|::
name|DockWidgetVerticalTitleBar
condition|)
block|{
name|QSize
name|s
init|=
name|rect
operator|.
name|size
argument_list|()
decl_stmt|;
name|s
operator|.
name|transpose
argument_list|()
expr_stmt|;
name|rect
operator|.
name|setSize
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|QSize
name|s2
init|=
name|size
argument_list|()
decl_stmt|;
name|s2
operator|.
name|transpose
argument_list|()
expr_stmt|;
name|titleRect
operator|.
name|setSize
argument_list|(
name|s2
argument_list|)
expr_stmt|;
name|painter
operator|.
name|translate
argument_list|(
name|rect
operator|.
name|left
argument_list|()
argument_list|,
name|rect
operator|.
name|top
argument_list|()
operator|+
name|rect
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|.
name|rotate
argument_list|(
operator|-
literal|90
argument_list|)
expr_stmt|;
name|painter
operator|.
name|translate
argument_list|(
operator|-
name|rect
operator|.
name|left
argument_list|()
argument_list|,
operator|-
name|rect
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|contents
operator|.
name|setTopLeft
argument_list|(
name|titleRect
operator|.
name|bottomLeft
argument_list|()
argument_list|)
expr_stmt|;
name|contents
operator|.
name|setRight
argument_list|(
name|titleRect
operator|.
name|right
argument_list|()
argument_list|)
expr_stmt|;
name|contents
operator|.
name|setBottom
argument_list|(
name|rect
operator|.
name|bottom
argument_list|()
operator|-
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|QRect
name|rect
init|=
name|titleRect
decl_stmt|;
name|painter
operator|.
name|drawPixmap
argument_list|(
name|rect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|leftPm
operator|.
name|mask
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|.
name|fillRect
argument_list|(
name|rect
operator|.
name|left
argument_list|()
operator|+
name|leftPm
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|top
argument_list|()
argument_list|,
name|rect
operator|.
name|width
argument_list|()
operator|-
name|leftPm
operator|.
name|width
argument_list|()
operator|-
name|rightPm
operator|.
name|width
argument_list|()
argument_list|,
name|centerPm
operator|.
name|height
argument_list|()
argument_list|,
name|Qt
operator|::
name|color1
argument_list|)
expr_stmt|;
name|painter
operator|.
name|drawPixmap
argument_list|(
name|rect
operator|.
name|topRight
argument_list|()
operator|-
name|QPoint
argument_list|(
name|rightPm
operator|.
name|width
argument_list|()
operator|-
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
name|rightPm
operator|.
name|mask
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|.
name|fillRect
argument_list|(
name|contents
argument_list|,
name|Qt
operator|::
name|color1
argument_list|)
expr_stmt|;
block|}
name|dw
operator|->
name|setMask
argument_list|(
name|bitmap
argument_list|)
expr_stmt|;
block|}
end_function
begin_include
include|#
directive|include
file|"colorswatch.moc"
end_include
end_unit
