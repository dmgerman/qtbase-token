begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the demonstration applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"mainwindow.h"
end_include
begin_include
include|#
directive|include
file|"colorswatch.h"
end_include
begin_include
include|#
directive|include
file|"toolbar.h"
end_include
begin_include
include|#
directive|include
file|<QAction>
end_include
begin_include
include|#
directive|include
file|<QLayout>
end_include
begin_include
include|#
directive|include
file|<QMenu>
end_include
begin_include
include|#
directive|include
file|<QMenuBar>
end_include
begin_include
include|#
directive|include
file|<QStatusBar>
end_include
begin_include
include|#
directive|include
file|<QTextEdit>
end_include
begin_include
include|#
directive|include
file|<QFile>
end_include
begin_include
include|#
directive|include
file|<QDataStream>
end_include
begin_include
include|#
directive|include
file|<QFileDialog>
end_include
begin_include
include|#
directive|include
file|<QDialogButtonBox>
end_include
begin_include
include|#
directive|include
file|<QMessageBox>
end_include
begin_include
include|#
directive|include
file|<QSignalMapper>
end_include
begin_include
include|#
directive|include
file|<QApplication>
end_include
begin_include
include|#
directive|include
file|<QPainter>
end_include
begin_include
include|#
directive|include
file|<QMouseEvent>
end_include
begin_include
include|#
directive|include
file|<QLineEdit>
end_include
begin_include
include|#
directive|include
file|<QComboBox>
end_include
begin_include
include|#
directive|include
file|<QLabel>
end_include
begin_include
include|#
directive|include
file|<QPushButton>
end_include
begin_include
include|#
directive|include
file|<QTextEdit>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_decl_stmt
DECL|variable|message
specifier|static
specifier|const
name|char
name|message
index|[]
init|=
literal|"<p><b>Qt Main Window Example</b></p>"
literal|"<p>This is a demonstration of the QMainWindow, QToolBar and "
literal|"QDockWidget classes.</p>"
literal|"<p>The tool bar and dock widgets can be dragged around and rearranged "
literal|"using the mouse or via the menu.</p>"
literal|"<p>Each dock widget contains a colored frame and a context "
literal|"(right-click) menu.</p>"
ifdef|#
directive|ifdef
name|Q_OS_MAC
literal|"<p>On OS X, the \"Black\" dock widget has been created as a "
literal|"<em>Drawer</em>, which is a special kind of QDockWidget.</p>"
endif|#
directive|endif
decl_stmt|;
end_decl_stmt
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QDockWidget::DockWidgetFeatures
argument_list|)
end_macro
begin_constructor
DECL|function|MainWindow
name|MainWindow
operator|::
name|MainWindow
parameter_list|(
specifier|const
name|CustomSizeHintMap
modifier|&
name|customSizeHints
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|,
name|Qt
operator|::
name|WindowFlags
name|flags
parameter_list|)
member_init_list|:
name|QMainWindow
argument_list|(
name|parent
argument_list|,
name|flags
argument_list|)
block|{
name|setObjectName
argument_list|(
literal|"MainWindow"
argument_list|)
expr_stmt|;
name|setWindowTitle
argument_list|(
literal|"Qt Main Window Example"
argument_list|)
expr_stmt|;
name|QTextEdit
modifier|*
name|center
init|=
operator|new
name|QTextEdit
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|center
operator|->
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|center
operator|->
name|setMinimumSize
argument_list|(
literal|400
argument_list|,
literal|205
argument_list|)
expr_stmt|;
name|setCentralWidget
argument_list|(
name|center
argument_list|)
expr_stmt|;
name|setupToolBar
argument_list|()
expr_stmt|;
name|setupMenuBar
argument_list|()
expr_stmt|;
name|setupDockWidgets
argument_list|(
name|customSizeHints
argument_list|)
expr_stmt|;
name|statusBar
argument_list|()
operator|->
name|showMessage
argument_list|(
name|tr
argument_list|(
literal|"Status Bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|actionTriggered
name|void
name|MainWindow
operator|::
name|actionTriggered
parameter_list|(
name|QAction
modifier|*
name|action
parameter_list|)
block|{
name|qDebug
argument_list|(
literal|"action '%s' triggered"
argument_list|,
name|action
operator|->
name|text
argument_list|()
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setupToolBar
name|void
name|MainWindow
operator|::
name|setupToolBar
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_OSX
name|setUnifiedTitleAndToolBarOnMac
argument_list|(
literal|true
argument_list|)
expr_stmt|;
endif|#
directive|endif
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
name|ToolBar
modifier|*
name|tb
init|=
operator|new
name|ToolBar
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Tool Bar %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|toolBars
operator|.
name|append
argument_list|(
name|tb
argument_list|)
expr_stmt|;
name|addToolBar
argument_list|(
name|tb
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setupMenuBar
name|void
name|MainWindow
operator|::
name|setupMenuBar
parameter_list|()
block|{
name|QMenu
modifier|*
name|menu
init|=
name|menuBar
argument_list|()
operator|->
name|addMenu
argument_list|(
name|tr
argument_list|(
literal|"&File"
argument_list|)
argument_list|)
decl_stmt|;
name|menu
operator|->
name|addAction
argument_list|(
name|tr
argument_list|(
literal|"Save layout..."
argument_list|)
argument_list|,
name|this
argument_list|,
operator|&
name|MainWindow
operator|::
name|saveLayout
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addAction
argument_list|(
name|tr
argument_list|(
literal|"Load layout..."
argument_list|)
argument_list|,
name|this
argument_list|,
operator|&
name|MainWindow
operator|::
name|loadLayout
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addAction
argument_list|(
name|tr
argument_list|(
literal|"Switch layout direction"
argument_list|)
argument_list|,
name|this
argument_list|,
operator|&
name|MainWindow
operator|::
name|switchLayoutDirection
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addSeparator
argument_list|()
expr_stmt|;
name|menu
operator|->
name|addAction
argument_list|(
name|tr
argument_list|(
literal|"&Quit"
argument_list|)
argument_list|,
name|this
argument_list|,
operator|&
name|QWidget
operator|::
name|close
argument_list|)
expr_stmt|;
name|mainWindowMenu
operator|=
name|menuBar
argument_list|()
operator|->
name|addMenu
argument_list|(
name|tr
argument_list|(
literal|"Main window"
argument_list|)
argument_list|)
expr_stmt|;
name|QAction
modifier|*
name|action
init|=
name|mainWindowMenu
operator|->
name|addAction
argument_list|(
name|tr
argument_list|(
literal|"Animated docks"
argument_list|)
argument_list|)
decl_stmt|;
name|action
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|action
operator|->
name|setChecked
argument_list|(
name|dockOptions
argument_list|()
operator|&
name|AnimatedDocks
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|action
argument_list|,
operator|&
name|QAction
operator|::
name|toggled
argument_list|,
name|this
argument_list|,
operator|&
name|MainWindow
operator|::
name|setDockOptions
argument_list|)
expr_stmt|;
name|action
operator|=
name|mainWindowMenu
operator|->
name|addAction
argument_list|(
name|tr
argument_list|(
literal|"Allow nested docks"
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|action
operator|->
name|setChecked
argument_list|(
name|dockOptions
argument_list|()
operator|&
name|AllowNestedDocks
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|action
argument_list|,
operator|&
name|QAction
operator|::
name|toggled
argument_list|,
name|this
argument_list|,
operator|&
name|MainWindow
operator|::
name|setDockOptions
argument_list|)
expr_stmt|;
name|action
operator|=
name|mainWindowMenu
operator|->
name|addAction
argument_list|(
name|tr
argument_list|(
literal|"Allow tabbed docks"
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|action
operator|->
name|setChecked
argument_list|(
name|dockOptions
argument_list|()
operator|&
name|AllowTabbedDocks
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|action
argument_list|,
operator|&
name|QAction
operator|::
name|toggled
argument_list|,
name|this
argument_list|,
operator|&
name|MainWindow
operator|::
name|setDockOptions
argument_list|)
expr_stmt|;
name|action
operator|=
name|mainWindowMenu
operator|->
name|addAction
argument_list|(
name|tr
argument_list|(
literal|"Force tabbed docks"
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|action
operator|->
name|setChecked
argument_list|(
name|dockOptions
argument_list|()
operator|&
name|ForceTabbedDocks
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|action
argument_list|,
operator|&
name|QAction
operator|::
name|toggled
argument_list|,
name|this
argument_list|,
operator|&
name|MainWindow
operator|::
name|setDockOptions
argument_list|)
expr_stmt|;
name|action
operator|=
name|mainWindowMenu
operator|->
name|addAction
argument_list|(
name|tr
argument_list|(
literal|"Vertical tabs"
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|action
operator|->
name|setChecked
argument_list|(
name|dockOptions
argument_list|()
operator|&
name|VerticalTabs
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|action
argument_list|,
operator|&
name|QAction
operator|::
name|toggled
argument_list|,
name|this
argument_list|,
operator|&
name|MainWindow
operator|::
name|setDockOptions
argument_list|)
expr_stmt|;
name|action
operator|=
name|mainWindowMenu
operator|->
name|addAction
argument_list|(
name|tr
argument_list|(
literal|"Grouped dragging"
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|action
operator|->
name|setChecked
argument_list|(
name|dockOptions
argument_list|()
operator|&
name|GroupedDragging
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|action
argument_list|,
operator|&
name|QAction
operator|::
name|toggled
argument_list|,
name|this
argument_list|,
operator|&
name|MainWindow
operator|::
name|setDockOptions
argument_list|)
expr_stmt|;
name|QMenu
modifier|*
name|toolBarMenu
init|=
name|menuBar
argument_list|()
operator|->
name|addMenu
argument_list|(
name|tr
argument_list|(
literal|"Tool bars"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|toolBars
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|toolBarMenu
operator|->
name|addMenu
argument_list|(
name|toolBars
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|toolbarMenu
argument_list|()
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_OSX
name|toolBarMenu
operator|->
name|addSeparator
argument_list|()
expr_stmt|;
name|action
operator|=
name|toolBarMenu
operator|->
name|addAction
argument_list|(
name|tr
argument_list|(
literal|"Unified"
argument_list|)
argument_list|)
expr_stmt|;
name|action
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|action
operator|->
name|setChecked
argument_list|(
name|unifiedTitleAndToolBarOnMac
argument_list|()
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|action
argument_list|,
operator|&
name|QAction
operator|::
name|toggled
argument_list|,
name|this
argument_list|,
operator|&
name|QMainWindow
operator|::
name|setUnifiedTitleAndToolBarOnMac
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|dockWidgetMenu
operator|=
name|menuBar
argument_list|()
operator|->
name|addMenu
argument_list|(
name|tr
argument_list|(
literal|"&Dock Widgets"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setDockOptions
name|void
name|MainWindow
operator|::
name|setDockOptions
parameter_list|()
block|{
name|DockOptions
name|opts
decl_stmt|;
name|QList
argument_list|<
name|QAction
modifier|*
argument_list|>
name|actions
init|=
name|mainWindowMenu
operator|->
name|actions
argument_list|()
decl_stmt|;
if|if
condition|(
name|actions
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|->
name|isChecked
argument_list|()
condition|)
name|opts
operator||=
name|AnimatedDocks
expr_stmt|;
if|if
condition|(
name|actions
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|->
name|isChecked
argument_list|()
condition|)
name|opts
operator||=
name|AllowNestedDocks
expr_stmt|;
if|if
condition|(
name|actions
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|->
name|isChecked
argument_list|()
condition|)
name|opts
operator||=
name|AllowTabbedDocks
expr_stmt|;
if|if
condition|(
name|actions
operator|.
name|at
argument_list|(
literal|3
argument_list|)
operator|->
name|isChecked
argument_list|()
condition|)
name|opts
operator||=
name|ForceTabbedDocks
expr_stmt|;
if|if
condition|(
name|actions
operator|.
name|at
argument_list|(
literal|4
argument_list|)
operator|->
name|isChecked
argument_list|()
condition|)
name|opts
operator||=
name|VerticalTabs
expr_stmt|;
if|if
condition|(
name|actions
operator|.
name|at
argument_list|(
literal|5
argument_list|)
operator|->
name|isChecked
argument_list|()
condition|)
name|opts
operator||=
name|GroupedDragging
expr_stmt|;
name|QMainWindow
operator|::
name|setDockOptions
argument_list|(
name|opts
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|saveLayout
name|void
name|MainWindow
operator|::
name|saveLayout
parameter_list|()
block|{
name|QString
name|fileName
init|=
name|QFileDialog
operator|::
name|getSaveFileName
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"Save layout"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileName
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
argument_list|)
condition|)
block|{
name|QString
name|msg
init|=
name|tr
argument_list|(
literal|"Failed to open %1\n%2"
argument_list|)
operator|.
name|arg
argument_list|(
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|fileName
argument_list|)
argument_list|,
name|file
operator|.
name|errorString
argument_list|()
argument_list|)
decl_stmt|;
name|QMessageBox
operator|::
name|warning
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"Error"
argument_list|)
argument_list|,
name|msg
argument_list|)
expr_stmt|;
return|return;
block|}
name|QByteArray
name|geo_data
init|=
name|saveGeometry
argument_list|()
decl_stmt|;
name|QByteArray
name|layout_data
init|=
name|saveState
argument_list|()
decl_stmt|;
name|bool
name|ok
init|=
name|file
operator|.
name|putChar
argument_list|(
operator|(
name|uchar
operator|)
name|geo_data
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ok
condition|)
name|ok
operator|=
name|file
operator|.
name|write
argument_list|(
name|geo_data
argument_list|)
operator|==
name|geo_data
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|ok
condition|)
name|ok
operator|=
name|file
operator|.
name|write
argument_list|(
name|layout_data
argument_list|)
operator|==
name|layout_data
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|ok
condition|)
block|{
name|QString
name|msg
init|=
name|tr
argument_list|(
literal|"Error writing to %1\n%2"
argument_list|)
operator|.
name|arg
argument_list|(
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|fileName
argument_list|)
argument_list|,
name|file
operator|.
name|errorString
argument_list|()
argument_list|)
decl_stmt|;
name|QMessageBox
operator|::
name|warning
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"Error"
argument_list|)
argument_list|,
name|msg
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
end_function
begin_function
DECL|function|loadLayout
name|void
name|MainWindow
operator|::
name|loadLayout
parameter_list|()
block|{
name|QString
name|fileName
init|=
name|QFileDialog
operator|::
name|getOpenFileName
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"Load layout"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileName
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|QString
name|msg
init|=
name|tr
argument_list|(
literal|"Failed to open %1\n%2"
argument_list|)
operator|.
name|arg
argument_list|(
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|fileName
argument_list|)
argument_list|,
name|file
operator|.
name|errorString
argument_list|()
argument_list|)
decl_stmt|;
name|QMessageBox
operator|::
name|warning
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"Error"
argument_list|)
argument_list|,
name|msg
argument_list|)
expr_stmt|;
return|return;
block|}
name|uchar
name|geo_size
decl_stmt|;
name|QByteArray
name|geo_data
decl_stmt|;
name|QByteArray
name|layout_data
decl_stmt|;
name|bool
name|ok
init|=
name|file
operator|.
name|getChar
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|geo_size
argument_list|)
decl_stmt|;
if|if
condition|(
name|ok
condition|)
block|{
name|geo_data
operator|=
name|file
operator|.
name|read
argument_list|(
name|geo_size
argument_list|)
expr_stmt|;
name|ok
operator|=
name|geo_data
operator|.
name|size
argument_list|()
operator|==
name|geo_size
expr_stmt|;
block|}
if|if
condition|(
name|ok
condition|)
block|{
name|layout_data
operator|=
name|file
operator|.
name|readAll
argument_list|()
expr_stmt|;
name|ok
operator|=
name|layout_data
operator|.
name|size
argument_list|()
operator|>
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|ok
condition|)
name|ok
operator|=
name|restoreGeometry
argument_list|(
name|geo_data
argument_list|)
expr_stmt|;
if|if
condition|(
name|ok
condition|)
name|ok
operator|=
name|restoreState
argument_list|(
name|layout_data
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ok
condition|)
block|{
name|QString
name|msg
init|=
name|tr
argument_list|(
literal|"Error reading %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|fileName
argument_list|)
argument_list|)
decl_stmt|;
name|QMessageBox
operator|::
name|warning
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"Error"
argument_list|)
argument_list|,
name|msg
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
end_function
begin_class
DECL|class|DockWidgetAreaCornerFunctor
class|class
name|DockWidgetAreaCornerFunctor
block|{
public|public:
DECL|function|DockWidgetAreaCornerFunctor
specifier|explicit
name|DockWidgetAreaCornerFunctor
parameter_list|(
name|QMainWindow
modifier|*
name|mw
parameter_list|,
name|Qt
operator|::
name|Corner
name|c
parameter_list|,
name|Qt
operator|::
name|DockWidgetArea
name|a
parameter_list|)
member_init_list|:
name|m_mainWindow
argument_list|(
name|mw
argument_list|)
member_init_list|,
name|m_area
argument_list|(
name|a
argument_list|)
member_init_list|,
name|m_corner
argument_list|(
name|c
argument_list|)
block|{}
DECL|function|operator ()
name|void
name|operator
name|()
parameter_list|()
specifier|const
block|{
name|m_mainWindow
operator|->
name|setCorner
argument_list|(
name|m_corner
argument_list|,
name|m_area
argument_list|)
expr_stmt|;
block|}
private|private:
DECL|member|m_mainWindow
name|QMainWindow
modifier|*
name|m_mainWindow
decl_stmt|;
DECL|member|m_area
name|Qt
operator|::
name|DockWidgetArea
name|m_area
decl_stmt|;
DECL|member|m_corner
name|Qt
operator|::
name|Corner
name|m_corner
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|addCornerAction
specifier|static
name|QAction
modifier|*
name|addCornerAction
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|QMainWindow
modifier|*
name|mw
parameter_list|,
name|QMenu
modifier|*
name|menu
parameter_list|,
name|QActionGroup
modifier|*
name|group
parameter_list|,
name|Qt
operator|::
name|Corner
name|c
parameter_list|,
name|Qt
operator|::
name|DockWidgetArea
name|a
parameter_list|)
block|{
name|QAction
modifier|*
name|result
init|=
name|menu
operator|->
name|addAction
argument_list|(
name|text
argument_list|,
name|mw
argument_list|,
name|DockWidgetAreaCornerFunctor
argument_list|(
name|mw
argument_list|,
name|c
argument_list|,
name|a
argument_list|)
argument_list|)
decl_stmt|;
name|result
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|group
operator|->
name|addAction
argument_list|(
name|result
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|setupDockWidgets
name|void
name|MainWindow
operator|::
name|setupDockWidgets
parameter_list|(
specifier|const
name|CustomSizeHintMap
modifier|&
name|customSizeHints
parameter_list|)
block|{
name|qRegisterMetaType
argument_list|<
name|QDockWidget
operator|::
name|DockWidgetFeatures
argument_list|>
argument_list|()
expr_stmt|;
name|QMenu
modifier|*
name|cornerMenu
init|=
name|dockWidgetMenu
operator|->
name|addMenu
argument_list|(
name|tr
argument_list|(
literal|"Top left corner"
argument_list|)
argument_list|)
decl_stmt|;
name|QActionGroup
modifier|*
name|group
init|=
operator|new
name|QActionGroup
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|group
operator|->
name|setExclusive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QAction
modifier|*
name|cornerAction
init|=
name|addCornerAction
argument_list|(
name|tr
argument_list|(
literal|"Top dock area"
argument_list|)
argument_list|,
name|this
argument_list|,
name|cornerMenu
argument_list|,
name|group
argument_list|,
name|Qt
operator|::
name|TopLeftCorner
argument_list|,
name|Qt
operator|::
name|TopDockWidgetArea
argument_list|)
decl_stmt|;
name|cornerAction
operator|->
name|setChecked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|addCornerAction
argument_list|(
name|tr
argument_list|(
literal|"Left dock area"
argument_list|)
argument_list|,
name|this
argument_list|,
name|cornerMenu
argument_list|,
name|group
argument_list|,
name|Qt
operator|::
name|TopLeftCorner
argument_list|,
name|Qt
operator|::
name|LeftDockWidgetArea
argument_list|)
expr_stmt|;
name|cornerMenu
operator|=
name|dockWidgetMenu
operator|->
name|addMenu
argument_list|(
name|tr
argument_list|(
literal|"Top right corner"
argument_list|)
argument_list|)
expr_stmt|;
name|group
operator|=
operator|new
name|QActionGroup
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|group
operator|->
name|setExclusive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cornerAction
operator|=
name|addCornerAction
argument_list|(
name|tr
argument_list|(
literal|"Top dock area"
argument_list|)
argument_list|,
name|this
argument_list|,
name|cornerMenu
argument_list|,
name|group
argument_list|,
name|Qt
operator|::
name|TopRightCorner
argument_list|,
name|Qt
operator|::
name|TopDockWidgetArea
argument_list|)
expr_stmt|;
name|cornerAction
operator|->
name|setChecked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|addCornerAction
argument_list|(
name|tr
argument_list|(
literal|"Right dock area"
argument_list|)
argument_list|,
name|this
argument_list|,
name|cornerMenu
argument_list|,
name|group
argument_list|,
name|Qt
operator|::
name|TopRightCorner
argument_list|,
name|Qt
operator|::
name|RightDockWidgetArea
argument_list|)
expr_stmt|;
name|cornerMenu
operator|=
name|dockWidgetMenu
operator|->
name|addMenu
argument_list|(
name|tr
argument_list|(
literal|"Bottom left corner"
argument_list|)
argument_list|)
expr_stmt|;
name|group
operator|=
operator|new
name|QActionGroup
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|group
operator|->
name|setExclusive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cornerAction
operator|=
name|addCornerAction
argument_list|(
name|tr
argument_list|(
literal|"Bottom dock area"
argument_list|)
argument_list|,
name|this
argument_list|,
name|cornerMenu
argument_list|,
name|group
argument_list|,
name|Qt
operator|::
name|BottomLeftCorner
argument_list|,
name|Qt
operator|::
name|BottomDockWidgetArea
argument_list|)
expr_stmt|;
name|cornerAction
operator|->
name|setChecked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|addCornerAction
argument_list|(
name|tr
argument_list|(
literal|"Left dock area"
argument_list|)
argument_list|,
name|this
argument_list|,
name|cornerMenu
argument_list|,
name|group
argument_list|,
name|Qt
operator|::
name|BottomLeftCorner
argument_list|,
name|Qt
operator|::
name|LeftDockWidgetArea
argument_list|)
expr_stmt|;
name|cornerMenu
operator|=
name|dockWidgetMenu
operator|->
name|addMenu
argument_list|(
name|tr
argument_list|(
literal|"Bottom right corner"
argument_list|)
argument_list|)
expr_stmt|;
name|group
operator|=
operator|new
name|QActionGroup
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|group
operator|->
name|setExclusive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|cornerAction
operator|=
name|addCornerAction
argument_list|(
name|tr
argument_list|(
literal|"Bottom dock area"
argument_list|)
argument_list|,
name|this
argument_list|,
name|cornerMenu
argument_list|,
name|group
argument_list|,
name|Qt
operator|::
name|BottomRightCorner
argument_list|,
name|Qt
operator|::
name|BottomDockWidgetArea
argument_list|)
expr_stmt|;
name|cornerAction
operator|->
name|setChecked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|addCornerAction
argument_list|(
name|tr
argument_list|(
literal|"Right dock area"
argument_list|)
argument_list|,
name|this
argument_list|,
name|cornerMenu
argument_list|,
name|group
argument_list|,
name|Qt
operator|::
name|BottomRightCorner
argument_list|,
name|Qt
operator|::
name|RightDockWidgetArea
argument_list|)
expr_stmt|;
name|dockWidgetMenu
operator|->
name|addSeparator
argument_list|()
expr_stmt|;
specifier|static
specifier|const
struct|struct
name|Set
block|{
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
name|uint
name|flags
decl_stmt|;
name|Qt
operator|::
name|DockWidgetArea
name|area
decl_stmt|;
block|}
name|sets
index|[]
init|=
block|{
ifndef|#
directive|ifndef
name|Q_OS_MAC
block|{
literal|"Black"
block|,
literal|0
block|,
name|Qt
operator|::
name|LeftDockWidgetArea
block|}
block|,
else|#
directive|else
block|{
literal|"Black"
block|,
name|Qt
operator|::
name|Drawer
block|,
name|Qt
operator|::
name|LeftDockWidgetArea
block|}
block|,
endif|#
directive|endif
block|{
literal|"White"
block|,
literal|0
block|,
name|Qt
operator|::
name|RightDockWidgetArea
block|}
block|,
block|{
literal|"Red"
block|,
literal|0
block|,
name|Qt
operator|::
name|TopDockWidgetArea
block|}
block|,
block|{
literal|"Green"
block|,
literal|0
block|,
name|Qt
operator|::
name|TopDockWidgetArea
block|}
block|,
block|{
literal|"Blue"
block|,
literal|0
block|,
name|Qt
operator|::
name|BottomDockWidgetArea
block|}
block|,
block|{
literal|"Yellow"
block|,
literal|0
block|,
name|Qt
operator|::
name|BottomDockWidgetArea
block|}
block|}
struct|;
specifier|const
name|int
name|setCount
init|=
sizeof|sizeof
argument_list|(
name|sets
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|Set
argument_list|)
decl_stmt|;
specifier|const
name|QIcon
name|qtIcon
argument_list|(
name|QPixmap
argument_list|(
literal|":/res/qt.png"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|setCount
condition|;
operator|++
name|i
control|)
block|{
name|ColorSwatch
modifier|*
name|swatch
init|=
operator|new
name|ColorSwatch
argument_list|(
name|tr
argument_list|(
name|sets
index|[
name|i
index|]
operator|.
name|name
argument_list|)
argument_list|,
name|this
argument_list|,
name|Qt
operator|::
name|WindowFlags
argument_list|(
name|sets
index|[
name|i
index|]
operator|.
name|flags
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|%
literal|2
condition|)
name|swatch
operator|->
name|setWindowIcon
argument_list|(
name|qtIcon
argument_list|)
expr_stmt|;
if|if
condition|(
name|qstrcmp
argument_list|(
name|sets
index|[
name|i
index|]
operator|.
name|name
argument_list|,
literal|"Blue"
argument_list|)
operator|==
literal|0
condition|)
block|{
name|BlueTitleBar
modifier|*
name|titlebar
init|=
operator|new
name|BlueTitleBar
argument_list|(
name|swatch
argument_list|)
decl_stmt|;
name|swatch
operator|->
name|setTitleBarWidget
argument_list|(
name|titlebar
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|swatch
argument_list|,
operator|&
name|QDockWidget
operator|::
name|topLevelChanged
argument_list|,
name|titlebar
argument_list|,
operator|&
name|BlueTitleBar
operator|::
name|updateMask
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|swatch
argument_list|,
operator|&
name|QDockWidget
operator|::
name|featuresChanged
argument_list|,
name|titlebar
argument_list|,
operator|&
name|BlueTitleBar
operator|::
name|updateMask
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
block|}
name|QString
name|name
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|sets
index|[
name|i
index|]
operator|.
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|customSizeHints
operator|.
name|contains
argument_list|(
name|name
argument_list|)
condition|)
name|swatch
operator|->
name|setCustomSizeHint
argument_list|(
name|customSizeHints
operator|.
name|value
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|addDockWidget
argument_list|(
name|sets
index|[
name|i
index|]
operator|.
name|area
argument_list|,
name|swatch
argument_list|)
expr_stmt|;
name|dockWidgetMenu
operator|->
name|addMenu
argument_list|(
name|swatch
operator|->
name|colorSwatchMenu
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|destroyDockWidgetMenu
operator|=
operator|new
name|QMenu
argument_list|(
name|tr
argument_list|(
literal|"Destroy dock widget"
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|destroyDockWidgetMenu
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|destroyDockWidgetMenu
argument_list|,
operator|&
name|QMenu
operator|::
name|triggered
argument_list|,
name|this
argument_list|,
operator|&
name|MainWindow
operator|::
name|destroyDockWidget
argument_list|)
expr_stmt|;
name|dockWidgetMenu
operator|->
name|addSeparator
argument_list|()
expr_stmt|;
name|dockWidgetMenu
operator|->
name|addAction
argument_list|(
name|tr
argument_list|(
literal|"Add dock widget..."
argument_list|)
argument_list|,
name|this
argument_list|,
operator|&
name|MainWindow
operator|::
name|createDockWidget
argument_list|)
expr_stmt|;
name|dockWidgetMenu
operator|->
name|addMenu
argument_list|(
name|destroyDockWidgetMenu
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|switchLayoutDirection
name|void
name|MainWindow
operator|::
name|switchLayoutDirection
parameter_list|()
block|{
if|if
condition|(
name|layoutDirection
argument_list|()
operator|==
name|Qt
operator|::
name|LeftToRight
condition|)
name|QApplication
operator|::
name|setLayoutDirection
argument_list|(
name|Qt
operator|::
name|RightToLeft
argument_list|)
expr_stmt|;
else|else
name|QApplication
operator|::
name|setLayoutDirection
argument_list|(
name|Qt
operator|::
name|LeftToRight
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|CreateDockWidgetDialog
class|class
name|CreateDockWidgetDialog
super|:
specifier|public
name|QDialog
block|{
public|public:
specifier|explicit
name|CreateDockWidgetDialog
parameter_list|(
name|QWidget
modifier|*
name|parent
init|=
name|Q_NULLPTR
parameter_list|)
constructor_decl|;
DECL|function|enteredObjectName
name|QString
name|enteredObjectName
parameter_list|()
specifier|const
block|{
return|return
name|m_objectName
operator|->
name|text
argument_list|()
return|;
block|}
name|Qt
operator|::
name|DockWidgetArea
name|location
parameter_list|()
specifier|const
function_decl|;
private|private:
DECL|member|m_objectName
name|QLineEdit
modifier|*
name|m_objectName
decl_stmt|;
DECL|member|m_location
name|QComboBox
modifier|*
name|m_location
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|CreateDockWidgetDialog
name|CreateDockWidgetDialog
operator|::
name|CreateDockWidgetDialog
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QDialog
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|m_objectName
argument_list|(
operator|new
name|QLineEdit
argument_list|(
name|this
argument_list|)
argument_list|)
member_init_list|,
name|m_location
argument_list|(
operator|new
name|QComboBox
argument_list|(
name|this
argument_list|)
argument_list|)
block|{
name|setWindowTitle
argument_list|(
name|tr
argument_list|(
literal|"Add Dock Widget"
argument_list|)
argument_list|)
expr_stmt|;
name|setWindowFlags
argument_list|(
name|windowFlags
argument_list|()
operator|&
operator|~
name|Qt
operator|::
name|WindowContextHelpButtonHint
argument_list|)
expr_stmt|;
name|QGridLayout
modifier|*
name|layout
init|=
operator|new
name|QGridLayout
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
operator|new
name|QLabel
argument_list|(
name|tr
argument_list|(
literal|"Object name:"
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|m_objectName
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
operator|new
name|QLabel
argument_list|(
name|tr
argument_list|(
literal|"Location:"
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|m_location
operator|->
name|setEditable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_location
operator|->
name|addItem
argument_list|(
name|tr
argument_list|(
literal|"Top"
argument_list|)
argument_list|)
expr_stmt|;
name|m_location
operator|->
name|addItem
argument_list|(
name|tr
argument_list|(
literal|"Left"
argument_list|)
argument_list|)
expr_stmt|;
name|m_location
operator|->
name|addItem
argument_list|(
name|tr
argument_list|(
literal|"Right"
argument_list|)
argument_list|)
expr_stmt|;
name|m_location
operator|->
name|addItem
argument_list|(
name|tr
argument_list|(
literal|"Bottom"
argument_list|)
argument_list|)
expr_stmt|;
name|m_location
operator|->
name|addItem
argument_list|(
name|tr
argument_list|(
literal|"Restore"
argument_list|)
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|m_location
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QDialogButtonBox
modifier|*
name|buttonBox
init|=
operator|new
name|QDialogButtonBox
argument_list|(
name|QDialogButtonBox
operator|::
name|Ok
operator||
name|QDialogButtonBox
operator|::
name|Cancel
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|buttonBox
argument_list|,
operator|&
name|QDialogButtonBox
operator|::
name|rejected
argument_list|,
name|this
argument_list|,
operator|&
name|QDialog
operator|::
name|reject
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|buttonBox
argument_list|,
operator|&
name|QDialogButtonBox
operator|::
name|accepted
argument_list|,
name|this
argument_list|,
operator|&
name|QDialog
operator|::
name|accept
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|buttonBox
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|location
name|Qt
operator|::
name|DockWidgetArea
name|CreateDockWidgetDialog
operator|::
name|location
parameter_list|()
specifier|const
block|{
switch|switch
condition|(
name|m_location
operator|->
name|currentIndex
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
return|return
name|Qt
operator|::
name|TopDockWidgetArea
return|;
case|case
literal|1
case|:
return|return
name|Qt
operator|::
name|LeftDockWidgetArea
return|;
case|case
literal|2
case|:
return|return
name|Qt
operator|::
name|RightDockWidgetArea
return|;
case|case
literal|3
case|:
return|return
name|Qt
operator|::
name|BottomDockWidgetArea
return|;
default|default:
break|break;
block|}
return|return
name|Qt
operator|::
name|NoDockWidgetArea
return|;
block|}
end_function
begin_function
DECL|function|createDockWidget
name|void
name|MainWindow
operator|::
name|createDockWidget
parameter_list|()
block|{
name|CreateDockWidgetDialog
name|dialog
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|dialog
operator|.
name|exec
argument_list|()
operator|==
name|QDialog
operator|::
name|Rejected
condition|)
return|return;
name|QDockWidget
modifier|*
name|dw
init|=
operator|new
name|QDockWidget
decl_stmt|;
specifier|const
name|QString
name|name
init|=
name|dialog
operator|.
name|enteredObjectName
argument_list|()
decl_stmt|;
name|dw
operator|->
name|setObjectName
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|dw
operator|->
name|setWindowTitle
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|dw
operator|->
name|setWidget
argument_list|(
operator|new
name|QTextEdit
argument_list|)
expr_stmt|;
name|Qt
operator|::
name|DockWidgetArea
name|area
init|=
name|dialog
operator|.
name|location
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|area
condition|)
block|{
case|case
name|Qt
operator|::
name|LeftDockWidgetArea
case|:
case|case
name|Qt
operator|::
name|RightDockWidgetArea
case|:
case|case
name|Qt
operator|::
name|TopDockWidgetArea
case|:
case|case
name|Qt
operator|::
name|BottomDockWidgetArea
case|:
name|addDockWidget
argument_list|(
name|area
argument_list|,
name|dw
argument_list|)
expr_stmt|;
break|break;
default|default:
if|if
condition|(
operator|!
name|restoreDockWidget
argument_list|(
name|dw
argument_list|)
condition|)
block|{
name|QMessageBox
operator|::
name|warning
argument_list|(
name|this
argument_list|,
name|QString
argument_list|()
argument_list|,
name|tr
argument_list|(
literal|"Failed to restore dock widget"
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|dw
expr_stmt|;
return|return;
block|}
break|break;
block|}
name|extraDockWidgets
operator|.
name|append
argument_list|(
name|dw
argument_list|)
expr_stmt|;
name|destroyDockWidgetMenu
operator|->
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|destroyDockWidgetMenu
operator|->
name|addAction
argument_list|(
operator|new
name|QAction
argument_list|(
name|name
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|destroyDockWidget
name|void
name|MainWindow
operator|::
name|destroyDockWidget
parameter_list|(
name|QAction
modifier|*
name|action
parameter_list|)
block|{
name|int
name|index
init|=
name|destroyDockWidgetMenu
operator|->
name|actions
argument_list|()
operator|.
name|indexOf
argument_list|(
name|action
argument_list|)
decl_stmt|;
operator|delete
name|extraDockWidgets
operator|.
name|takeAt
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|destroyDockWidgetMenu
operator|->
name|removeAction
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|action
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
if|if
condition|(
name|destroyDockWidgetMenu
operator|->
name|isEmpty
argument_list|()
condition|)
name|destroyDockWidgetMenu
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
end_unit
