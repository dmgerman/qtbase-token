begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of The Qt Company Ltd and its Subsidiary(-ies) nor the **     names of its contributors may be used to endorse or promote products **     derived from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtWidgets>
end_include
begin_include
include|#
directive|include
file|"mainwidget.h"
end_include
begin_function
DECL|function|showHelp
specifier|static
name|void
name|showHelp
parameter_list|(
name|QCommandLineParser
modifier|&
name|parser
parameter_list|,
specifier|const
name|QString
name|errorMessage
init|=
name|QString
argument_list|()
parameter_list|)
block|{
name|QString
name|text
decl_stmt|;
name|QTextStream
name|str
argument_list|(
operator|&
name|text
argument_list|)
decl_stmt|;
name|str
operator|<<
literal|"<html><head/><body>"
expr_stmt|;
if|if
condition|(
operator|!
name|errorMessage
operator|.
name|isEmpty
argument_list|()
condition|)
name|str
operator|<<
literal|"<p>"
operator|<<
name|errorMessage
operator|<<
literal|"</p>"
expr_stmt|;
name|str
operator|<<
literal|"<pre>"
operator|<<
name|parser
operator|.
name|helpText
argument_list|()
operator|<<
literal|"</pre></body></html>"
expr_stmt|;
name|QMessageBox
name|box
argument_list|(
name|errorMessage
operator|.
name|isEmpty
argument_list|()
condition|?
name|QMessageBox
operator|::
name|Information
else|:
name|QMessageBox
operator|::
name|Warning
argument_list|,
name|QGuiApplication
operator|::
name|applicationDisplayName
argument_list|()
argument_list|,
name|text
argument_list|,
name|QMessageBox
operator|::
name|Ok
argument_list|)
decl_stmt|;
name|box
operator|.
name|setTextInteractionFlags
argument_list|(
name|Qt
operator|::
name|TextBrowserInteraction
argument_list|)
expr_stmt|;
name|box
operator|.
name|exec
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
name|argv
index|[]
parameter_list|)
block|{
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|QCoreApplication
operator|::
name|setApplicationVersion
argument_list|(
name|QT_VERSION_STR
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|setApplicationName
argument_list|(
name|QStringLiteral
argument_list|(
literal|"imagegestures"
argument_list|)
argument_list|)
expr_stmt|;
name|QGuiApplication
operator|::
name|setApplicationDisplayName
argument_list|(
name|QStringLiteral
argument_list|(
literal|"Image Gestures Example"
argument_list|)
argument_list|)
expr_stmt|;
name|QCommandLineParser
name|commandLineParser
decl_stmt|;
specifier|const
name|QCommandLineOption
name|disablePanOption
argument_list|(
literal|"no-pan"
argument_list|,
literal|"Disable pan gesture"
argument_list|)
decl_stmt|;
name|commandLineParser
operator|.
name|addOption
argument_list|(
name|disablePanOption
argument_list|)
expr_stmt|;
specifier|const
name|QCommandLineOption
name|disablePinchOption
argument_list|(
literal|"no-pinch"
argument_list|,
literal|"Disable pinch gesture"
argument_list|)
decl_stmt|;
name|commandLineParser
operator|.
name|addOption
argument_list|(
name|disablePinchOption
argument_list|)
expr_stmt|;
specifier|const
name|QCommandLineOption
name|disableSwipeOption
argument_list|(
literal|"no-swipe"
argument_list|,
literal|"Disable swipe gesture"
argument_list|)
decl_stmt|;
name|commandLineParser
operator|.
name|addOption
argument_list|(
name|disableSwipeOption
argument_list|)
expr_stmt|;
specifier|const
name|QCommandLineOption
name|helpOption
init|=
name|commandLineParser
operator|.
name|addHelpOption
argument_list|()
decl_stmt|;
name|commandLineParser
operator|.
name|addPositionalArgument
argument_list|(
name|QStringLiteral
argument_list|(
literal|"Directory"
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Directory to display"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|description
init|=
name|QGuiApplication
operator|::
name|applicationDisplayName
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"\n\nEnable \"debug\" on the logging category \"qt.examples.imagegestures\" in order to\n"
literal|"in order to obtain verbose information about Qt's gesture event processing,\n"
literal|"for example by setting the environment variables QT_LOGGING_RULES to\n"
literal|"qt.examples.imagegestures.debug=true\n"
argument_list|)
decl_stmt|;
name|commandLineParser
operator|.
name|setApplicationDescription
argument_list|(
name|description
argument_list|)
expr_stmt|;
name|commandLineParser
operator|.
name|process
argument_list|(
name|QCoreApplication
operator|::
name|arguments
argument_list|()
argument_list|)
expr_stmt|;
name|QStringList
name|arguments
init|=
name|commandLineParser
operator|.
name|positionalArguments
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|arguments
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|QFileInfo
argument_list|(
name|arguments
operator|.
name|front
argument_list|()
argument_list|)
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|showHelp
argument_list|(
name|commandLineParser
argument_list|,
name|QLatin1Char
argument_list|(
literal|'"'
argument_list|)
operator|+
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|arguments
operator|.
name|front
argument_list|()
argument_list|)
operator|+
name|QStringLiteral
argument_list|(
literal|"\" is not a directory."
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|QList
argument_list|<
name|Qt
operator|::
name|GestureType
argument_list|>
name|gestures
decl_stmt|;
if|if
condition|(
operator|!
name|commandLineParser
operator|.
name|isSet
argument_list|(
name|disablePanOption
argument_list|)
condition|)
name|gestures
operator|<<
name|Qt
operator|::
name|PanGesture
expr_stmt|;
if|if
condition|(
operator|!
name|commandLineParser
operator|.
name|isSet
argument_list|(
name|disablePinchOption
argument_list|)
condition|)
name|gestures
operator|<<
name|Qt
operator|::
name|PinchGesture
expr_stmt|;
if|if
condition|(
operator|!
name|commandLineParser
operator|.
name|isSet
argument_list|(
name|disableSwipeOption
argument_list|)
condition|)
name|gestures
operator|<<
name|Qt
operator|::
name|SwipeGesture
expr_stmt|;
name|MainWidget
name|w
decl_stmt|;
name|w
operator|.
name|grabGestures
argument_list|(
name|gestures
argument_list|)
expr_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
if|if
condition|(
name|arguments
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|const
name|QStringList
name|picturesLocations
init|=
name|QStandardPaths
operator|::
name|standardLocations
argument_list|(
name|QStandardPaths
operator|::
name|PicturesLocation
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|directory
init|=
name|QFileDialog
operator|::
name|getExistingDirectory
argument_list|(
operator|&
name|w
argument_list|,
literal|"Select image folder"
argument_list|,
name|picturesLocations
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
argument_list|()
else|:
name|picturesLocations
operator|.
name|front
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|directory
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|0
return|;
name|arguments
operator|.
name|append
argument_list|(
name|directory
argument_list|)
expr_stmt|;
block|}
name|w
operator|.
name|openDirectory
argument_list|(
name|arguments
operator|.
name|front
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|app
operator|.
name|exec
argument_list|()
return|;
block|}
end_function
end_unit
