begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names **     of its contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QBrush>
end_include
begin_include
include|#
directive|include
file|<QTime>
end_include
begin_include
include|#
directive|include
file|"mymodel.h"
end_include
begin_comment
comment|//! [quoting mymodel_a]
end_comment
begin_constructor
DECL|function|MyModel
name|MyModel
operator|::
name|MyModel
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractTableModel
argument_list|(
name|parent
argument_list|)
block|{
comment|//    selectedCell = 0;
name|timer
operator|=
operator|new
name|QTimer
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|timer
operator|->
name|setInterval
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|timer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|timerHit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|timer
operator|->
name|start
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|//! [quoting mymodel_a]
end_comment
begin_comment
comment|//-------------------------------------------------------
end_comment
begin_function
DECL|function|rowCount
name|int
name|MyModel
operator|::
name|rowCount
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
comment|/*parent */
parameter_list|)
specifier|const
block|{
return|return
literal|2
return|;
block|}
end_function
begin_comment
comment|//-------------------------------------------------------
end_comment
begin_function
DECL|function|columnCount
name|int
name|MyModel
operator|::
name|columnCount
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
comment|/*parent */
parameter_list|)
specifier|const
block|{
return|return
literal|3
return|;
block|}
end_function
begin_comment
comment|//-------------------------------------------------------
end_comment
begin_comment
comment|//! [quoting mymodel_QVariant ]
end_comment
begin_function
DECL|function|data
name|QVariant
name|MyModel
operator|::
name|data
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
name|int
name|role
parameter_list|)
specifier|const
block|{
name|int
name|row
init|=
name|index
operator|.
name|row
argument_list|()
decl_stmt|;
name|int
name|col
init|=
name|index
operator|.
name|column
argument_list|()
decl_stmt|;
if|if
condition|(
name|role
operator|==
name|Qt
operator|::
name|DisplayRole
condition|)
block|{
if|if
condition|(
name|row
operator|==
literal|0
operator|&&
name|col
operator|==
literal|0
condition|)
block|{
return|return
name|QTime
operator|::
name|currentTime
argument_list|()
operator|.
name|toString
argument_list|()
return|;
block|}
block|}
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_comment
comment|//! [quoting mymodel_QVariant ]
end_comment
begin_comment
comment|//-------------------------------------------------------
end_comment
begin_comment
comment|//! [quoting mymodel_b ]
end_comment
begin_function
DECL|function|timerHit
name|void
name|MyModel
operator|::
name|timerHit
parameter_list|()
block|{
comment|//we identify the top left cell
name|QModelIndex
name|topLeft
init|=
name|createIndex
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|//emit a signal to make the view reread identified data
emit|emit
name|dataChanged
argument_list|(
name|topLeft
argument_list|,
name|topLeft
argument_list|)
emit|;
block|}
end_function
begin_comment
comment|//! [quoting mymodel_b ]
end_comment
end_unit
