begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of The Qt Company Ltd and its Subsidiary(-ies) nor the **     names of its contributors may be used to endorse or promote products **     derived from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore>
end_include
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_comment
comment|//! [0]
end_comment
begin_class
DECL|class|PingEvent
class|class
name|PingEvent
super|:
specifier|public
name|QEvent
block|{
public|public:
DECL|function|PingEvent
name|PingEvent
parameter_list|()
member_init_list|:
name|QEvent
argument_list|(
name|QEvent
operator|::
name|Type
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|2
argument_list|)
argument_list|)
block|{}
block|}
class|;
end_class
begin_class
DECL|class|PongEvent
class|class
name|PongEvent
super|:
specifier|public
name|QEvent
block|{
public|public:
DECL|function|PongEvent
name|PongEvent
parameter_list|()
member_init_list|:
name|QEvent
argument_list|(
name|QEvent
operator|::
name|Type
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|3
argument_list|)
argument_list|)
block|{}
block|}
class|;
end_class
begin_comment
comment|//! [0]
end_comment
begin_comment
comment|//! [1]
end_comment
begin_class
DECL|class|Pinger
class|class
name|Pinger
super|:
specifier|public
name|QState
block|{
public|public:
DECL|function|Pinger
name|Pinger
parameter_list|(
name|QState
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QState
argument_list|(
name|parent
argument_list|)
block|{}
protected|protected:
specifier|virtual
name|void
name|onEntry
parameter_list|(
name|QEvent
modifier|*
parameter_list|)
name|Q_DECL_OVERRIDE
block|{
name|machine
argument_list|()
operator|->
name|postEvent
argument_list|(
operator|new
name|PingEvent
argument_list|()
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|stdout
argument_list|,
literal|"ping?\n"
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_comment
comment|//! [1]
end_comment
begin_comment
comment|//! [3]
end_comment
begin_class
DECL|class|PongTransition
class|class
name|PongTransition
super|:
specifier|public
name|QAbstractTransition
block|{
public|public:
DECL|function|PongTransition
name|PongTransition
parameter_list|()
block|{}
protected|protected:
specifier|virtual
name|bool
name|eventTest
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
name|Q_DECL_OVERRIDE
block|{
return|return
operator|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|User
operator|+
literal|3
operator|)
return|;
block|}
specifier|virtual
name|void
name|onTransition
parameter_list|(
name|QEvent
modifier|*
parameter_list|)
name|Q_DECL_OVERRIDE
block|{
name|machine
argument_list|()
operator|->
name|postDelayedEvent
argument_list|(
operator|new
name|PingEvent
argument_list|()
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|stdout
argument_list|,
literal|"ping?\n"
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_comment
comment|//! [3]
end_comment
begin_comment
comment|//! [2]
end_comment
begin_class
DECL|class|PingTransition
class|class
name|PingTransition
super|:
specifier|public
name|QAbstractTransition
block|{
public|public:
DECL|function|PingTransition
name|PingTransition
parameter_list|()
block|{}
protected|protected:
specifier|virtual
name|bool
name|eventTest
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
name|Q_DECL_OVERRIDE
block|{
return|return
operator|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|User
operator|+
literal|2
operator|)
return|;
block|}
specifier|virtual
name|void
name|onTransition
parameter_list|(
name|QEvent
modifier|*
parameter_list|)
name|Q_DECL_OVERRIDE
block|{
name|machine
argument_list|()
operator|->
name|postDelayedEvent
argument_list|(
operator|new
name|PongEvent
argument_list|()
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|stdout
argument_list|,
literal|"pong!\n"
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_comment
comment|//! [2]
end_comment
begin_comment
comment|//! [4]
end_comment
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
modifier|*
name|argv
parameter_list|)
block|{
name|QCoreApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|QStateMachine
name|machine
decl_stmt|;
name|QState
modifier|*
name|group
init|=
operator|new
name|QState
argument_list|(
name|QState
operator|::
name|ParallelStates
argument_list|)
decl_stmt|;
name|group
operator|->
name|setObjectName
argument_list|(
literal|"group"
argument_list|)
expr_stmt|;
comment|//! [4]
comment|//! [5]
name|Pinger
modifier|*
name|pinger
init|=
operator|new
name|Pinger
argument_list|(
name|group
argument_list|)
decl_stmt|;
name|pinger
operator|->
name|setObjectName
argument_list|(
literal|"pinger"
argument_list|)
expr_stmt|;
name|pinger
operator|->
name|addTransition
argument_list|(
operator|new
name|PongTransition
argument_list|()
argument_list|)
expr_stmt|;
name|QState
modifier|*
name|ponger
init|=
operator|new
name|QState
argument_list|(
name|group
argument_list|)
decl_stmt|;
name|ponger
operator|->
name|setObjectName
argument_list|(
literal|"ponger"
argument_list|)
expr_stmt|;
name|ponger
operator|->
name|addTransition
argument_list|(
operator|new
name|PingTransition
argument_list|()
argument_list|)
expr_stmt|;
comment|//! [5]
comment|//! [6]
name|machine
operator|.
name|addState
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|machine
operator|.
name|setInitialState
argument_list|(
name|group
argument_list|)
expr_stmt|;
name|machine
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|app
operator|.
name|exec
argument_list|()
return|;
block|}
end_function
begin_comment
comment|//! [6]
end_comment
end_unit
