begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the documentation of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of The Qt Company Ltd and its Subsidiary(-ies) nor the **     names of its contributors may be used to endorse or promote products **     derived from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|MOVEMENTTRANSITION_H
end_ifndef
begin_define
DECL|macro|MOVEMENTTRANSITION_H
define|#
directive|define
name|MOVEMENTTRANSITION_H
end_define
begin_include
include|#
directive|include
file|<QtWidgets>
end_include
begin_include
include|#
directive|include
file|"window.h"
end_include
begin_comment
comment|//![0]
end_comment
begin_decl_stmt
name|class
name|MovementTransition
range|:
name|public
name|QEventTransition
block|{
name|Q_OBJECT
name|public
operator|:
name|MovementTransition
argument_list|(
name|Window
operator|*
name|window
argument_list|)
operator|:
name|QEventTransition
argument_list|(
argument|window
argument_list|,
argument|QEvent::KeyPress
argument_list|)
block|{
name|this
operator|->
name|window
operator|=
name|window
block|;     }
comment|//![0]
comment|//![1]
name|protected
operator|:
name|bool
name|eventTest
argument_list|(
argument|QEvent *event
argument_list|)
name|Q_DECL_OVERRIDE
block|{
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|StateMachineWrapped
operator|&&
name|static_cast
operator|<
name|QStateMachine
operator|::
name|WrappedEvent
operator|*
operator|>
operator|(
name|event
operator|)
operator|->
name|event
argument_list|()
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|KeyPress
condition|)
block|{
name|QEvent
modifier|*
name|wrappedEvent
init|=
name|static_cast
operator|<
name|QStateMachine
operator|::
name|WrappedEvent
operator|*
operator|>
operator|(
name|event
operator|)
operator|->
name|event
argument_list|()
decl_stmt|;
name|QKeyEvent
modifier|*
name|keyEvent
init|=
name|static_cast
operator|<
name|QKeyEvent
operator|*
operator|>
operator|(
name|wrappedEvent
operator|)
decl_stmt|;
name|int
name|key
init|=
name|keyEvent
operator|->
name|key
argument_list|()
decl_stmt|;
return|return
name|key
operator|==
name|Qt
operator|::
name|Key_2
operator|||
name|key
operator|==
name|Qt
operator|::
name|Key_8
operator|||
name|key
operator|==
name|Qt
operator|::
name|Key_6
operator|||
name|key
operator|==
name|Qt
operator|::
name|Key_4
operator|||
name|key
operator|==
name|Qt
operator|::
name|Key_Down
operator|||
name|key
operator|==
name|Qt
operator|::
name|Key_Up
operator|||
name|key
operator|==
name|Qt
operator|::
name|Key_Right
operator|||
name|key
operator|==
name|Qt
operator|::
name|Key_Left
return|;
block|}
return|return
name|false
return|;
block|}
comment|//![1]
comment|//![2]
name|void
name|onTransition
argument_list|(
argument|QEvent *event
argument_list|)
name|Q_DECL_OVERRIDE
block|{
name|QKeyEvent
operator|*
name|keyEvent
operator|=
name|static_cast
operator|<
name|QKeyEvent
operator|*
operator|>
operator|(
name|static_cast
operator|<
name|QStateMachine
operator|::
name|WrappedEvent
operator|*
operator|>
operator|(
name|event
operator|)
operator|->
name|event
argument_list|()
operator|)
block|;
name|int
name|key
operator|=
name|keyEvent
operator|->
name|key
argument_list|()
block|;
switch|switch
condition|(
name|key
condition|)
block|{
case|case
name|Qt
operator|::
name|Key_Left
case|:
case|case
name|Qt
operator|::
name|Key_4
case|:
name|window
operator|->
name|movePlayer
argument_list|(
name|Window
operator|::
name|Left
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|Key_Up
case|:
case|case
name|Qt
operator|::
name|Key_8
case|:
name|window
operator|->
name|movePlayer
argument_list|(
name|Window
operator|::
name|Up
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|Key_Right
case|:
case|case
name|Qt
operator|::
name|Key_6
case|:
name|window
operator|->
name|movePlayer
argument_list|(
name|Window
operator|::
name|Right
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|Key_Down
case|:
case|case
name|Qt
operator|::
name|Key_2
case|:
name|window
operator|->
name|movePlayer
argument_list|(
name|Window
operator|::
name|Down
argument_list|)
expr_stmt|;
break|break;
default|default:
empty_stmt|;
block|}
block|}
comment|//![2]
name|private
operator|:
name|Window
operator|*
name|window
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
end_unit
