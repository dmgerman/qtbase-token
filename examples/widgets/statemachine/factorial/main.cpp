begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the QtCore module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** BSD License Usage ** Alternatively, you may use this file under the terms of the BSD license ** as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of The Qt Company Ltd nor the names of its **     contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore>
end_include
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_comment
comment|//! [0]
end_comment
begin_class
DECL|class|Factorial
class|class
name|Factorial
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
name|Q_PROPERTY
argument_list|(
name|int
name|x
name|READ
name|x
name|WRITE
name|setX
argument_list|)
name|Q_PROPERTY
argument_list|(
name|int
name|fac
name|READ
name|fac
name|WRITE
name|setFac
argument_list|)
decl|public
range|:
DECL|function|Factorial
name|Factorial
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
operator|:
name|QObject
argument_list|(
name|parent
argument_list|)
decl_stmt|,
name|m_x
argument_list|(
operator|-
literal|1
argument_list|)
decl_stmt|,
name|m_fac
argument_list|(
literal|1
argument_list|)
argument_list|{     }
DECL|function|x
name|int
name|x
argument_list|()
decl|const
argument_list|{         return
name|m_x
argument_list|;     }
DECL|function|setX
name|void
name|setX
argument_list|(
name|int
name|x
argument_list|)
argument_list|{         if
operator|(
name|x
operator|==
name|m_x
operator|)
return|return;
name|m_x
operator|=
name|x
expr_stmt|;
emit|emit
name|xChanged
argument_list|(
name|x
argument_list|)
emit|;
block|}
DECL|function|fac
name|int
name|fac
argument_list|()
decl|const
argument_list|{         return
name|m_fac
argument_list|;     }
DECL|function|setFac
name|void
name|setFac
argument_list|(
name|int
name|fac
argument_list|)
argument_list|{
name|m_fac
operator|=
name|fac
argument_list|;     }
name|Q_SIGNALS
range|:
name|void
name|xChanged
argument_list|(
argument|int value
argument_list|)
class|;
end_class
begin_private
private|private:
DECL|member|m_x
name|int
name|m_x
decl_stmt|;
DECL|member|m_fac
name|int
name|m_fac
decl_stmt|;
end_private
begin_comment
unit|};
comment|//! [0]
end_comment
begin_comment
comment|//! [1]
end_comment
begin_class
DECL|class|FactorialLoopTransition
class|class
name|FactorialLoopTransition
super|:
specifier|public
name|QSignalTransition
block|{
public|public:
DECL|function|FactorialLoopTransition
name|FactorialLoopTransition
parameter_list|(
name|Factorial
modifier|*
name|fact
parameter_list|)
member_init_list|:
name|QSignalTransition
argument_list|(
name|fact
argument_list|,
name|SIGNAL
argument_list|(
name|xChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
member_init_list|,
name|m_fact
argument_list|(
name|fact
argument_list|)
block|{}
specifier|virtual
name|bool
name|eventTest
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
name|Q_DECL_OVERRIDE
block|{
if|if
condition|(
operator|!
name|QSignalTransition
operator|::
name|eventTest
argument_list|(
name|e
argument_list|)
condition|)
return|return
literal|false
return|;
name|QStateMachine
operator|::
name|SignalEvent
modifier|*
name|se
init|=
cast|static_cast
argument_list|<
name|QStateMachine
operator|::
name|SignalEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
return|return
name|se
operator|->
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
operator|>
literal|1
return|;
block|}
specifier|virtual
name|void
name|onTransition
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
name|Q_DECL_OVERRIDE
block|{
name|QStateMachine
operator|::
name|SignalEvent
modifier|*
name|se
init|=
cast|static_cast
argument_list|<
name|QStateMachine
operator|::
name|SignalEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|int
name|x
init|=
name|se
operator|->
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|fac
init|=
name|m_fact
operator|->
name|property
argument_list|(
literal|"fac"
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|m_fact
operator|->
name|setProperty
argument_list|(
literal|"fac"
argument_list|,
name|x
operator|*
name|fac
argument_list|)
expr_stmt|;
name|m_fact
operator|->
name|setProperty
argument_list|(
literal|"x"
argument_list|,
name|x
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
private|private:
DECL|member|m_fact
name|Factorial
modifier|*
name|m_fact
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|//! [1]
end_comment
begin_comment
comment|//! [2]
end_comment
begin_class
DECL|class|FactorialDoneTransition
class|class
name|FactorialDoneTransition
super|:
specifier|public
name|QSignalTransition
block|{
public|public:
DECL|function|FactorialDoneTransition
name|FactorialDoneTransition
parameter_list|(
name|Factorial
modifier|*
name|fact
parameter_list|)
member_init_list|:
name|QSignalTransition
argument_list|(
name|fact
argument_list|,
name|SIGNAL
argument_list|(
name|xChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
member_init_list|,
name|m_fact
argument_list|(
name|fact
argument_list|)
block|{}
specifier|virtual
name|bool
name|eventTest
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
name|Q_DECL_OVERRIDE
block|{
if|if
condition|(
operator|!
name|QSignalTransition
operator|::
name|eventTest
argument_list|(
name|e
argument_list|)
condition|)
return|return
literal|false
return|;
name|QStateMachine
operator|::
name|SignalEvent
modifier|*
name|se
init|=
cast|static_cast
argument_list|<
name|QStateMachine
operator|::
name|SignalEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
return|return
name|se
operator|->
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
operator|<=
literal|1
return|;
block|}
specifier|virtual
name|void
name|onTransition
parameter_list|(
name|QEvent
modifier|*
parameter_list|)
name|Q_DECL_OVERRIDE
block|{
name|fprintf
argument_list|(
name|stdout
argument_list|,
literal|"%d\n"
argument_list|,
name|m_fact
operator|->
name|property
argument_list|(
literal|"fac"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
block|}
private|private:
DECL|member|m_fact
name|Factorial
modifier|*
name|m_fact
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|//! [2]
end_comment
begin_comment
comment|//! [3]
end_comment
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
modifier|*
name|argv
parameter_list|)
block|{
name|QCoreApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|Factorial
name|factorial
decl_stmt|;
name|QStateMachine
name|machine
decl_stmt|;
comment|//! [3]
comment|//! [4]
name|QState
modifier|*
name|compute
init|=
operator|new
name|QState
argument_list|(
operator|&
name|machine
argument_list|)
decl_stmt|;
name|compute
operator|->
name|assignProperty
argument_list|(
operator|&
name|factorial
argument_list|,
literal|"fac"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|compute
operator|->
name|assignProperty
argument_list|(
operator|&
name|factorial
argument_list|,
literal|"x"
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|compute
operator|->
name|addTransition
argument_list|(
operator|new
name|FactorialLoopTransition
argument_list|(
operator|&
name|factorial
argument_list|)
argument_list|)
expr_stmt|;
comment|//! [4]
comment|//! [5]
name|QFinalState
modifier|*
name|done
init|=
operator|new
name|QFinalState
argument_list|(
operator|&
name|machine
argument_list|)
decl_stmt|;
name|FactorialDoneTransition
modifier|*
name|doneTransition
init|=
operator|new
name|FactorialDoneTransition
argument_list|(
operator|&
name|factorial
argument_list|)
decl_stmt|;
name|doneTransition
operator|->
name|setTargetState
argument_list|(
name|done
argument_list|)
expr_stmt|;
name|compute
operator|->
name|addTransition
argument_list|(
name|doneTransition
argument_list|)
expr_stmt|;
comment|//! [5]
comment|//! [6]
name|machine
operator|.
name|setInitialState
argument_list|(
name|compute
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|machine
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|app
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|machine
operator|.
name|start
argument_list|()
expr_stmt|;
return|return
name|app
operator|.
name|exec
argument_list|()
return|;
block|}
end_function
begin_comment
comment|//! [6]
end_comment
begin_include
include|#
directive|include
file|"main.moc"
end_include
end_unit
