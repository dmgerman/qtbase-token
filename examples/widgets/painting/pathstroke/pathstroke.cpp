begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the demonstration applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"arthurstyle.h"
end_include
begin_include
include|#
directive|include
file|"arthurwidgets.h"
end_include
begin_include
include|#
directive|include
file|"pathstroke.h"
end_include
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_function_decl
specifier|extern
name|void
name|draw_round_rect
parameter_list|(
name|QPainter
modifier|*
name|p
parameter_list|,
specifier|const
name|QRect
modifier|&
name|bounds
parameter_list|,
name|int
name|radius
parameter_list|)
function_decl|;
end_function_decl
begin_constructor
DECL|function|PathStrokeControls
name|PathStrokeControls
operator|::
name|PathStrokeControls
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
name|PathStrokeRenderer
modifier|*
name|renderer
parameter_list|,
name|bool
name|smallScreen
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
block|{
name|m_renderer
operator|=
name|renderer
expr_stmt|;
if|if
condition|(
name|smallScreen
condition|)
name|layoutForSmallScreens
argument_list|()
expr_stmt|;
else|else
name|layoutForDesktop
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|createCommonControls
name|void
name|PathStrokeControls
operator|::
name|createCommonControls
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
block|{
name|m_capGroup
operator|=
operator|new
name|QGroupBox
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|m_capGroup
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Minimum
argument_list|,
name|QSizePolicy
operator|::
name|Fixed
argument_list|)
expr_stmt|;
name|QRadioButton
modifier|*
name|flatCap
init|=
operator|new
name|QRadioButton
argument_list|(
name|m_capGroup
argument_list|)
decl_stmt|;
name|QRadioButton
modifier|*
name|squareCap
init|=
operator|new
name|QRadioButton
argument_list|(
name|m_capGroup
argument_list|)
decl_stmt|;
name|QRadioButton
modifier|*
name|roundCap
init|=
operator|new
name|QRadioButton
argument_list|(
name|m_capGroup
argument_list|)
decl_stmt|;
name|m_capGroup
operator|->
name|setTitle
argument_list|(
name|tr
argument_list|(
literal|"Cap Style"
argument_list|)
argument_list|)
expr_stmt|;
name|flatCap
operator|->
name|setText
argument_list|(
name|tr
argument_list|(
literal|"Flat"
argument_list|)
argument_list|)
expr_stmt|;
name|squareCap
operator|->
name|setText
argument_list|(
name|tr
argument_list|(
literal|"Square"
argument_list|)
argument_list|)
expr_stmt|;
name|roundCap
operator|->
name|setText
argument_list|(
name|tr
argument_list|(
literal|"Round"
argument_list|)
argument_list|)
expr_stmt|;
name|flatCap
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Fixed
argument_list|,
name|QSizePolicy
operator|::
name|Fixed
argument_list|)
expr_stmt|;
name|squareCap
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Fixed
argument_list|,
name|QSizePolicy
operator|::
name|Fixed
argument_list|)
expr_stmt|;
name|roundCap
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Fixed
argument_list|,
name|QSizePolicy
operator|::
name|Fixed
argument_list|)
expr_stmt|;
name|m_joinGroup
operator|=
operator|new
name|QGroupBox
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|m_joinGroup
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Minimum
argument_list|,
name|QSizePolicy
operator|::
name|Fixed
argument_list|)
expr_stmt|;
name|QRadioButton
modifier|*
name|bevelJoin
init|=
operator|new
name|QRadioButton
argument_list|(
name|m_joinGroup
argument_list|)
decl_stmt|;
name|QRadioButton
modifier|*
name|miterJoin
init|=
operator|new
name|QRadioButton
argument_list|(
name|m_joinGroup
argument_list|)
decl_stmt|;
name|QRadioButton
modifier|*
name|roundJoin
init|=
operator|new
name|QRadioButton
argument_list|(
name|m_joinGroup
argument_list|)
decl_stmt|;
name|m_joinGroup
operator|->
name|setTitle
argument_list|(
name|tr
argument_list|(
literal|"Join Style"
argument_list|)
argument_list|)
expr_stmt|;
name|bevelJoin
operator|->
name|setText
argument_list|(
name|tr
argument_list|(
literal|"Bevel"
argument_list|)
argument_list|)
expr_stmt|;
name|miterJoin
operator|->
name|setText
argument_list|(
name|tr
argument_list|(
literal|"Miter"
argument_list|)
argument_list|)
expr_stmt|;
name|roundJoin
operator|->
name|setText
argument_list|(
name|tr
argument_list|(
literal|"Round"
argument_list|)
argument_list|)
expr_stmt|;
name|m_styleGroup
operator|=
operator|new
name|QGroupBox
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|m_styleGroup
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Minimum
argument_list|,
name|QSizePolicy
operator|::
name|Fixed
argument_list|)
expr_stmt|;
name|QRadioButton
modifier|*
name|solidLine
init|=
operator|new
name|QRadioButton
argument_list|(
name|m_styleGroup
argument_list|)
decl_stmt|;
name|QRadioButton
modifier|*
name|dashLine
init|=
operator|new
name|QRadioButton
argument_list|(
name|m_styleGroup
argument_list|)
decl_stmt|;
name|QRadioButton
modifier|*
name|dotLine
init|=
operator|new
name|QRadioButton
argument_list|(
name|m_styleGroup
argument_list|)
decl_stmt|;
name|QRadioButton
modifier|*
name|dashDotLine
init|=
operator|new
name|QRadioButton
argument_list|(
name|m_styleGroup
argument_list|)
decl_stmt|;
name|QRadioButton
modifier|*
name|dashDotDotLine
init|=
operator|new
name|QRadioButton
argument_list|(
name|m_styleGroup
argument_list|)
decl_stmt|;
name|QRadioButton
modifier|*
name|customDashLine
init|=
operator|new
name|QRadioButton
argument_list|(
name|m_styleGroup
argument_list|)
decl_stmt|;
name|m_styleGroup
operator|->
name|setTitle
argument_list|(
name|tr
argument_list|(
literal|"Pen Style"
argument_list|)
argument_list|)
expr_stmt|;
name|QPixmap
name|line_solid
argument_list|(
literal|":res/images/line_solid.png"
argument_list|)
decl_stmt|;
name|solidLine
operator|->
name|setIcon
argument_list|(
name|line_solid
argument_list|)
expr_stmt|;
name|solidLine
operator|->
name|setIconSize
argument_list|(
name|line_solid
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QPixmap
name|line_dashed
argument_list|(
literal|":res/images/line_dashed.png"
argument_list|)
decl_stmt|;
name|dashLine
operator|->
name|setIcon
argument_list|(
name|line_dashed
argument_list|)
expr_stmt|;
name|dashLine
operator|->
name|setIconSize
argument_list|(
name|line_dashed
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QPixmap
name|line_dotted
argument_list|(
literal|":res/images/line_dotted.png"
argument_list|)
decl_stmt|;
name|dotLine
operator|->
name|setIcon
argument_list|(
name|line_dotted
argument_list|)
expr_stmt|;
name|dotLine
operator|->
name|setIconSize
argument_list|(
name|line_dotted
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QPixmap
name|line_dash_dot
argument_list|(
literal|":res/images/line_dash_dot.png"
argument_list|)
decl_stmt|;
name|dashDotLine
operator|->
name|setIcon
argument_list|(
name|line_dash_dot
argument_list|)
expr_stmt|;
name|dashDotLine
operator|->
name|setIconSize
argument_list|(
name|line_dash_dot
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QPixmap
name|line_dash_dot_dot
argument_list|(
literal|":res/images/line_dash_dot_dot.png"
argument_list|)
decl_stmt|;
name|dashDotDotLine
operator|->
name|setIcon
argument_list|(
name|line_dash_dot_dot
argument_list|)
expr_stmt|;
name|dashDotDotLine
operator|->
name|setIconSize
argument_list|(
name|line_dash_dot_dot
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|customDashLine
operator|->
name|setText
argument_list|(
name|tr
argument_list|(
literal|"Custom"
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|fixedHeight
init|=
name|bevelJoin
operator|->
name|sizeHint
argument_list|()
operator|.
name|height
argument_list|()
decl_stmt|;
name|solidLine
operator|->
name|setFixedHeight
argument_list|(
name|fixedHeight
argument_list|)
expr_stmt|;
name|dashLine
operator|->
name|setFixedHeight
argument_list|(
name|fixedHeight
argument_list|)
expr_stmt|;
name|dotLine
operator|->
name|setFixedHeight
argument_list|(
name|fixedHeight
argument_list|)
expr_stmt|;
name|dashDotLine
operator|->
name|setFixedHeight
argument_list|(
name|fixedHeight
argument_list|)
expr_stmt|;
name|dashDotDotLine
operator|->
name|setFixedHeight
argument_list|(
name|fixedHeight
argument_list|)
expr_stmt|;
name|m_pathModeGroup
operator|=
operator|new
name|QGroupBox
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|m_pathModeGroup
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Minimum
argument_list|,
name|QSizePolicy
operator|::
name|Fixed
argument_list|)
expr_stmt|;
name|QRadioButton
modifier|*
name|curveMode
init|=
operator|new
name|QRadioButton
argument_list|(
name|m_pathModeGroup
argument_list|)
decl_stmt|;
name|QRadioButton
modifier|*
name|lineMode
init|=
operator|new
name|QRadioButton
argument_list|(
name|m_pathModeGroup
argument_list|)
decl_stmt|;
name|m_pathModeGroup
operator|->
name|setTitle
argument_list|(
name|tr
argument_list|(
literal|"Line Style"
argument_list|)
argument_list|)
expr_stmt|;
name|curveMode
operator|->
name|setText
argument_list|(
name|tr
argument_list|(
literal|"Curves"
argument_list|)
argument_list|)
expr_stmt|;
name|lineMode
operator|->
name|setText
argument_list|(
name|tr
argument_list|(
literal|"Lines"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Layouts
name|QVBoxLayout
modifier|*
name|capGroupLayout
init|=
operator|new
name|QVBoxLayout
argument_list|(
name|m_capGroup
argument_list|)
decl_stmt|;
name|capGroupLayout
operator|->
name|addWidget
argument_list|(
name|flatCap
argument_list|)
expr_stmt|;
name|capGroupLayout
operator|->
name|addWidget
argument_list|(
name|squareCap
argument_list|)
expr_stmt|;
name|capGroupLayout
operator|->
name|addWidget
argument_list|(
name|roundCap
argument_list|)
expr_stmt|;
name|QVBoxLayout
modifier|*
name|joinGroupLayout
init|=
operator|new
name|QVBoxLayout
argument_list|(
name|m_joinGroup
argument_list|)
decl_stmt|;
name|joinGroupLayout
operator|->
name|addWidget
argument_list|(
name|bevelJoin
argument_list|)
expr_stmt|;
name|joinGroupLayout
operator|->
name|addWidget
argument_list|(
name|miterJoin
argument_list|)
expr_stmt|;
name|joinGroupLayout
operator|->
name|addWidget
argument_list|(
name|roundJoin
argument_list|)
expr_stmt|;
name|QVBoxLayout
modifier|*
name|styleGroupLayout
init|=
operator|new
name|QVBoxLayout
argument_list|(
name|m_styleGroup
argument_list|)
decl_stmt|;
name|styleGroupLayout
operator|->
name|addWidget
argument_list|(
name|solidLine
argument_list|)
expr_stmt|;
name|styleGroupLayout
operator|->
name|addWidget
argument_list|(
name|dashLine
argument_list|)
expr_stmt|;
name|styleGroupLayout
operator|->
name|addWidget
argument_list|(
name|dotLine
argument_list|)
expr_stmt|;
name|styleGroupLayout
operator|->
name|addWidget
argument_list|(
name|dashDotLine
argument_list|)
expr_stmt|;
name|styleGroupLayout
operator|->
name|addWidget
argument_list|(
name|dashDotDotLine
argument_list|)
expr_stmt|;
name|styleGroupLayout
operator|->
name|addWidget
argument_list|(
name|customDashLine
argument_list|)
expr_stmt|;
name|QVBoxLayout
modifier|*
name|pathModeGroupLayout
init|=
operator|new
name|QVBoxLayout
argument_list|(
name|m_pathModeGroup
argument_list|)
decl_stmt|;
name|pathModeGroupLayout
operator|->
name|addWidget
argument_list|(
name|curveMode
argument_list|)
expr_stmt|;
name|pathModeGroupLayout
operator|->
name|addWidget
argument_list|(
name|lineMode
argument_list|)
expr_stmt|;
comment|// Connections
name|connect
argument_list|(
name|flatCap
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|m_renderer
argument_list|,
name|SLOT
argument_list|(
name|setFlatCap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|squareCap
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|m_renderer
argument_list|,
name|SLOT
argument_list|(
name|setSquareCap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|roundCap
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|m_renderer
argument_list|,
name|SLOT
argument_list|(
name|setRoundCap
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|bevelJoin
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|m_renderer
argument_list|,
name|SLOT
argument_list|(
name|setBevelJoin
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|miterJoin
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|m_renderer
argument_list|,
name|SLOT
argument_list|(
name|setMiterJoin
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|roundJoin
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|m_renderer
argument_list|,
name|SLOT
argument_list|(
name|setRoundJoin
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|curveMode
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|m_renderer
argument_list|,
name|SLOT
argument_list|(
name|setCurveMode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|lineMode
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|m_renderer
argument_list|,
name|SLOT
argument_list|(
name|setLineMode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|solidLine
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|m_renderer
argument_list|,
name|SLOT
argument_list|(
name|setSolidLine
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|dashLine
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|m_renderer
argument_list|,
name|SLOT
argument_list|(
name|setDashLine
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|dotLine
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|m_renderer
argument_list|,
name|SLOT
argument_list|(
name|setDotLine
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|dashDotLine
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|m_renderer
argument_list|,
name|SLOT
argument_list|(
name|setDashDotLine
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|dashDotDotLine
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|m_renderer
argument_list|,
name|SLOT
argument_list|(
name|setDashDotDotLine
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|customDashLine
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|m_renderer
argument_list|,
name|SLOT
argument_list|(
name|setCustomDashLine
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set the defaults:
name|flatCap
operator|->
name|setChecked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|bevelJoin
operator|->
name|setChecked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|curveMode
operator|->
name|setChecked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|solidLine
operator|->
name|setChecked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|layoutForDesktop
name|void
name|PathStrokeControls
operator|::
name|layoutForDesktop
parameter_list|()
block|{
name|QGroupBox
modifier|*
name|mainGroup
init|=
operator|new
name|QGroupBox
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|mainGroup
operator|->
name|setFixedWidth
argument_list|(
literal|180
argument_list|)
expr_stmt|;
name|mainGroup
operator|->
name|setTitle
argument_list|(
name|tr
argument_list|(
literal|"Path Stroking"
argument_list|)
argument_list|)
expr_stmt|;
name|createCommonControls
argument_list|(
name|mainGroup
argument_list|)
expr_stmt|;
name|QGroupBox
modifier|*
name|penWidthGroup
init|=
operator|new
name|QGroupBox
argument_list|(
name|mainGroup
argument_list|)
decl_stmt|;
name|QSlider
modifier|*
name|penWidth
init|=
operator|new
name|QSlider
argument_list|(
name|Qt
operator|::
name|Horizontal
argument_list|,
name|penWidthGroup
argument_list|)
decl_stmt|;
name|penWidth
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Preferred
argument_list|,
name|QSizePolicy
operator|::
name|Fixed
argument_list|)
expr_stmt|;
name|penWidthGroup
operator|->
name|setTitle
argument_list|(
name|tr
argument_list|(
literal|"Pen Width"
argument_list|)
argument_list|)
expr_stmt|;
name|penWidth
operator|->
name|setRange
argument_list|(
literal|0
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|QPushButton
modifier|*
name|animated
init|=
operator|new
name|QPushButton
argument_list|(
name|mainGroup
argument_list|)
decl_stmt|;
name|animated
operator|->
name|setText
argument_list|(
name|tr
argument_list|(
literal|"Animate"
argument_list|)
argument_list|)
expr_stmt|;
name|animated
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QPushButton
modifier|*
name|showSourceButton
init|=
operator|new
name|QPushButton
argument_list|(
name|mainGroup
argument_list|)
decl_stmt|;
name|showSourceButton
operator|->
name|setText
argument_list|(
name|tr
argument_list|(
literal|"Show Source"
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_SUPPORT
name|QPushButton
modifier|*
name|enableOpenGLButton
init|=
operator|new
name|QPushButton
argument_list|(
name|mainGroup
argument_list|)
decl_stmt|;
name|enableOpenGLButton
operator|->
name|setText
argument_list|(
name|tr
argument_list|(
literal|"Use OpenGL"
argument_list|)
argument_list|)
expr_stmt|;
name|enableOpenGLButton
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|enableOpenGLButton
operator|->
name|setChecked
argument_list|(
name|m_renderer
operator|->
name|usesOpenGL
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|QGLFormat
operator|::
name|hasOpenGL
argument_list|()
condition|)
name|enableOpenGLButton
operator|->
name|hide
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|QPushButton
modifier|*
name|whatsThisButton
init|=
operator|new
name|QPushButton
argument_list|(
name|mainGroup
argument_list|)
decl_stmt|;
name|whatsThisButton
operator|->
name|setText
argument_list|(
name|tr
argument_list|(
literal|"What's This?"
argument_list|)
argument_list|)
expr_stmt|;
name|whatsThisButton
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// Layouts:
name|QVBoxLayout
modifier|*
name|penWidthLayout
init|=
operator|new
name|QVBoxLayout
argument_list|(
name|penWidthGroup
argument_list|)
decl_stmt|;
name|penWidthLayout
operator|->
name|addWidget
argument_list|(
name|penWidth
argument_list|)
expr_stmt|;
name|QVBoxLayout
modifier|*
name|mainLayout
init|=
operator|new
name|QVBoxLayout
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|mainLayout
operator|->
name|setMargin
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|mainLayout
operator|->
name|addWidget
argument_list|(
name|mainGroup
argument_list|)
expr_stmt|;
name|QVBoxLayout
modifier|*
name|mainGroupLayout
init|=
operator|new
name|QVBoxLayout
argument_list|(
name|mainGroup
argument_list|)
decl_stmt|;
name|mainGroupLayout
operator|->
name|setMargin
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|mainGroupLayout
operator|->
name|addWidget
argument_list|(
name|m_capGroup
argument_list|)
expr_stmt|;
name|mainGroupLayout
operator|->
name|addWidget
argument_list|(
name|m_joinGroup
argument_list|)
expr_stmt|;
name|mainGroupLayout
operator|->
name|addWidget
argument_list|(
name|m_styleGroup
argument_list|)
expr_stmt|;
name|mainGroupLayout
operator|->
name|addWidget
argument_list|(
name|penWidthGroup
argument_list|)
expr_stmt|;
name|mainGroupLayout
operator|->
name|addWidget
argument_list|(
name|m_pathModeGroup
argument_list|)
expr_stmt|;
name|mainGroupLayout
operator|->
name|addWidget
argument_list|(
name|animated
argument_list|)
expr_stmt|;
name|mainGroupLayout
operator|->
name|addStretch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mainGroupLayout
operator|->
name|addWidget
argument_list|(
name|showSourceButton
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_SUPPORT
name|mainGroupLayout
operator|->
name|addWidget
argument_list|(
name|enableOpenGLButton
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|mainGroupLayout
operator|->
name|addWidget
argument_list|(
name|whatsThisButton
argument_list|)
expr_stmt|;
comment|// Set up connections
name|connect
argument_list|(
name|animated
argument_list|,
name|SIGNAL
argument_list|(
name|toggled
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|m_renderer
argument_list|,
name|SLOT
argument_list|(
name|setAnimation
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|penWidth
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|m_renderer
argument_list|,
name|SLOT
argument_list|(
name|setPenWidth
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|showSourceButton
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|m_renderer
argument_list|,
name|SLOT
argument_list|(
name|showSource
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_SUPPORT
name|connect
argument_list|(
name|enableOpenGLButton
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|m_renderer
argument_list|,
name|SLOT
argument_list|(
name|enableOpenGL
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|connect
argument_list|(
name|whatsThisButton
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|m_renderer
argument_list|,
name|SLOT
argument_list|(
name|setDescriptionEnabled
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_renderer
argument_list|,
name|SIGNAL
argument_list|(
name|descriptionEnabledChanged
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|whatsThisButton
argument_list|,
name|SLOT
argument_list|(
name|setChecked
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// Set the defaults
name|animated
operator|->
name|setChecked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|penWidth
operator|->
name|setValue
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|layoutForSmallScreens
name|void
name|PathStrokeControls
operator|::
name|layoutForSmallScreens
parameter_list|()
block|{
name|createCommonControls
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|m_capGroup
operator|->
name|layout
argument_list|()
operator|->
name|setMargin
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|m_joinGroup
operator|->
name|layout
argument_list|()
operator|->
name|setMargin
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|m_styleGroup
operator|->
name|layout
argument_list|()
operator|->
name|setMargin
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|m_pathModeGroup
operator|->
name|layout
argument_list|()
operator|->
name|setMargin
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QPushButton
modifier|*
name|okBtn
init|=
operator|new
name|QPushButton
argument_list|(
name|tr
argument_list|(
literal|"OK"
argument_list|)
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|okBtn
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Fixed
argument_list|,
name|QSizePolicy
operator|::
name|Fixed
argument_list|)
expr_stmt|;
name|okBtn
operator|->
name|setMinimumSize
argument_list|(
literal|100
argument_list|,
name|okBtn
operator|->
name|minimumSize
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|QPushButton
modifier|*
name|quitBtn
init|=
operator|new
name|QPushButton
argument_list|(
name|tr
argument_list|(
literal|"Quit"
argument_list|)
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|quitBtn
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Fixed
argument_list|,
name|QSizePolicy
operator|::
name|Fixed
argument_list|)
expr_stmt|;
name|quitBtn
operator|->
name|setMinimumSize
argument_list|(
literal|100
argument_list|,
name|okBtn
operator|->
name|minimumSize
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|QLabel
modifier|*
name|penWidthLabel
init|=
operator|new
name|QLabel
argument_list|(
name|tr
argument_list|(
literal|" Width:"
argument_list|)
argument_list|)
decl_stmt|;
name|QSlider
modifier|*
name|penWidth
init|=
operator|new
name|QSlider
argument_list|(
name|Qt
operator|::
name|Horizontal
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|penWidth
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Preferred
argument_list|,
name|QSizePolicy
operator|::
name|Fixed
argument_list|)
expr_stmt|;
name|penWidth
operator|->
name|setRange
argument_list|(
literal|0
argument_list|,
literal|500
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_SUPPORT
name|QPushButton
modifier|*
name|enableOpenGLButton
init|=
operator|new
name|QPushButton
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|enableOpenGLButton
operator|->
name|setText
argument_list|(
name|tr
argument_list|(
literal|"Use OpenGL"
argument_list|)
argument_list|)
expr_stmt|;
name|enableOpenGLButton
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|enableOpenGLButton
operator|->
name|setChecked
argument_list|(
name|m_renderer
operator|->
name|usesOpenGL
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|QGLFormat
operator|::
name|hasOpenGL
argument_list|()
condition|)
name|enableOpenGLButton
operator|->
name|hide
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|// Layouts:
name|QHBoxLayout
modifier|*
name|penWidthLayout
init|=
operator|new
name|QHBoxLayout
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|penWidthLayout
operator|->
name|addWidget
argument_list|(
name|penWidthLabel
argument_list|,
literal|0
argument_list|,
name|Qt
operator|::
name|AlignRight
argument_list|)
expr_stmt|;
name|penWidthLayout
operator|->
name|addWidget
argument_list|(
name|penWidth
argument_list|)
expr_stmt|;
name|QVBoxLayout
modifier|*
name|leftLayout
init|=
operator|new
name|QVBoxLayout
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|leftLayout
operator|->
name|addWidget
argument_list|(
name|m_capGroup
argument_list|)
expr_stmt|;
name|leftLayout
operator|->
name|addWidget
argument_list|(
name|m_joinGroup
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_SUPPORT
name|leftLayout
operator|->
name|addWidget
argument_list|(
name|enableOpenGLButton
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|leftLayout
operator|->
name|addLayout
argument_list|(
name|penWidthLayout
argument_list|)
expr_stmt|;
name|QVBoxLayout
modifier|*
name|rightLayout
init|=
operator|new
name|QVBoxLayout
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|rightLayout
operator|->
name|addWidget
argument_list|(
name|m_styleGroup
argument_list|)
expr_stmt|;
name|rightLayout
operator|->
name|addWidget
argument_list|(
name|m_pathModeGroup
argument_list|)
expr_stmt|;
name|QGridLayout
modifier|*
name|mainLayout
init|=
operator|new
name|QGridLayout
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|mainLayout
operator|->
name|setMargin
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Add spacers around the form items so we don't look stupid at higher resolutions
name|mainLayout
operator|->
name|addItem
argument_list|(
operator|new
name|QSpacerItem
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|mainLayout
operator|->
name|addItem
argument_list|(
operator|new
name|QSpacerItem
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mainLayout
operator|->
name|addItem
argument_list|(
operator|new
name|QSpacerItem
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mainLayout
operator|->
name|addItem
argument_list|(
operator|new
name|QSpacerItem
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|mainLayout
operator|->
name|addLayout
argument_list|(
name|leftLayout
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mainLayout
operator|->
name|addLayout
argument_list|(
name|rightLayout
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|mainLayout
operator|->
name|addWidget
argument_list|(
name|quitBtn
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
name|Qt
operator|::
name|AlignHCenter
operator||
name|Qt
operator|::
name|AlignTop
argument_list|)
expr_stmt|;
name|mainLayout
operator|->
name|addWidget
argument_list|(
name|okBtn
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|,
name|Qt
operator|::
name|AlignHCenter
operator||
name|Qt
operator|::
name|AlignTop
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_SUPPORT
name|connect
argument_list|(
name|enableOpenGLButton
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|m_renderer
argument_list|,
name|SLOT
argument_list|(
name|enableOpenGL
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|connect
argument_list|(
name|penWidth
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|m_renderer
argument_list|,
name|SLOT
argument_list|(
name|setPenWidth
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|quitBtn
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|emitQuitSignal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|okBtn
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|emitOkSignal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|m_renderer
operator|->
name|setAnimation
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|penWidth
operator|->
name|setValue
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|emitQuitSignal
name|void
name|PathStrokeControls
operator|::
name|emitQuitSignal
parameter_list|()
block|{
emit|emit
name|quitPressed
argument_list|()
emit|;
block|}
end_function
begin_function
DECL|function|emitOkSignal
name|void
name|PathStrokeControls
operator|::
name|emitOkSignal
parameter_list|()
block|{
emit|emit
name|okPressed
argument_list|()
emit|;
block|}
end_function
begin_constructor
DECL|function|PathStrokeWidget
name|PathStrokeWidget
operator|::
name|PathStrokeWidget
parameter_list|(
name|bool
name|smallScreen
parameter_list|)
block|{
name|setWindowTitle
argument_list|(
name|tr
argument_list|(
literal|"Path Stroking"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Widget construction and property setting
name|m_renderer
operator|=
operator|new
name|PathStrokeRenderer
argument_list|(
name|this
argument_list|,
name|smallScreen
argument_list|)
expr_stmt|;
name|m_controls
operator|=
operator|new
name|PathStrokeControls
argument_list|(
literal|0
argument_list|,
name|m_renderer
argument_list|,
name|smallScreen
argument_list|)
expr_stmt|;
comment|// Layouting
name|QHBoxLayout
modifier|*
name|viewLayout
init|=
operator|new
name|QHBoxLayout
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|viewLayout
operator|->
name|addWidget
argument_list|(
name|m_renderer
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|smallScreen
condition|)
name|viewLayout
operator|->
name|addWidget
argument_list|(
name|m_controls
argument_list|)
expr_stmt|;
name|m_renderer
operator|->
name|loadSourceFile
argument_list|(
literal|":res/pathstroke/pathstroke.cpp"
argument_list|)
expr_stmt|;
name|m_renderer
operator|->
name|loadDescription
argument_list|(
literal|":res/pathstroke/pathstroke.html"
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_renderer
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|showControls
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_controls
argument_list|,
name|SIGNAL
argument_list|(
name|okPressed
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|hideControls
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_controls
argument_list|,
name|SIGNAL
argument_list|(
name|quitPressed
argument_list|()
argument_list|)
argument_list|,
name|QApplication
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|showControls
name|void
name|PathStrokeWidget
operator|::
name|showControls
parameter_list|()
block|{
name|m_controls
operator|->
name|showFullScreen
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hideControls
name|void
name|PathStrokeWidget
operator|::
name|hideControls
parameter_list|()
block|{
name|m_controls
operator|->
name|hide
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setStyle
name|void
name|PathStrokeWidget
operator|::
name|setStyle
parameter_list|(
name|QStyle
modifier|*
name|style
parameter_list|)
block|{
name|QWidget
operator|::
name|setStyle
argument_list|(
name|style
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_controls
operator|!=
literal|0
condition|)
block|{
name|m_controls
operator|->
name|setStyle
argument_list|(
name|style
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QWidget
modifier|*
argument_list|>
name|widgets
init|=
name|m_controls
operator|->
name|findChildren
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|()
decl_stmt|;
foreach|foreach
control|(
name|QWidget
modifier|*
name|w
decl|,
name|widgets
control|)
name|w
operator|->
name|setStyle
argument_list|(
name|style
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_constructor
DECL|function|PathStrokeRenderer
name|PathStrokeRenderer
operator|::
name|PathStrokeRenderer
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
name|bool
name|smallScreen
parameter_list|)
member_init_list|:
name|ArthurFrame
argument_list|(
name|parent
argument_list|)
block|{
name|m_smallScreen
operator|=
name|smallScreen
expr_stmt|;
name|m_pointSize
operator|=
literal|10
expr_stmt|;
name|m_activePoint
operator|=
operator|-
literal|1
expr_stmt|;
name|m_capStyle
operator|=
name|Qt
operator|::
name|FlatCap
expr_stmt|;
name|m_joinStyle
operator|=
name|Qt
operator|::
name|BevelJoin
expr_stmt|;
name|m_pathMode
operator|=
name|CurveMode
expr_stmt|;
name|m_penWidth
operator|=
literal|1
expr_stmt|;
name|m_penStyle
operator|=
name|Qt
operator|::
name|SolidLine
expr_stmt|;
name|m_wasAnimated
operator|=
literal|true
expr_stmt|;
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Expanding
argument_list|,
name|QSizePolicy
operator|::
name|Expanding
argument_list|)
expr_stmt|;
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_AcceptTouchEvents
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|paint
name|void
name|PathStrokeRenderer
operator|::
name|paint
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|)
block|{
if|if
condition|(
name|m_points
operator|.
name|isEmpty
argument_list|()
condition|)
name|initializePoints
argument_list|()
expr_stmt|;
name|painter
operator|->
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|Antialiasing
argument_list|)
expr_stmt|;
name|QPalette
name|pal
init|=
name|palette
argument_list|()
decl_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|Qt
operator|::
name|NoPen
argument_list|)
expr_stmt|;
comment|// Construct the path
name|QPainterPath
name|path
decl_stmt|;
name|path
operator|.
name|moveTo
argument_list|(
name|m_points
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_pathMode
operator|==
name|LineMode
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|m_points
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|path
operator|.
name|lineTo
argument_list|(
name|m_points
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|i
init|=
literal|1
decl_stmt|;
while|while
condition|(
name|i
operator|+
literal|2
operator|<
name|m_points
operator|.
name|size
argument_list|()
condition|)
block|{
name|path
operator|.
name|cubicTo
argument_list|(
name|m_points
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|m_points
operator|.
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|,
name|m_points
operator|.
name|at
argument_list|(
name|i
operator|+
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|+=
literal|3
expr_stmt|;
block|}
while|while
condition|(
name|i
operator|<
name|m_points
operator|.
name|size
argument_list|()
condition|)
block|{
name|path
operator|.
name|lineTo
argument_list|(
name|m_points
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
block|}
comment|// Draw the path
block|{
name|QColor
name|lg
init|=
name|Qt
operator|::
name|red
decl_stmt|;
comment|// The "custom" pen
if|if
condition|(
name|m_penStyle
operator|==
name|Qt
operator|::
name|NoPen
condition|)
block|{
name|QPainterPathStroker
name|stroker
decl_stmt|;
name|stroker
operator|.
name|setWidth
argument_list|(
name|m_penWidth
argument_list|)
expr_stmt|;
name|stroker
operator|.
name|setJoinStyle
argument_list|(
name|m_joinStyle
argument_list|)
expr_stmt|;
name|stroker
operator|.
name|setCapStyle
argument_list|(
name|m_capStyle
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|qreal
argument_list|>
name|dashes
decl_stmt|;
name|qreal
name|space
init|=
literal|4
decl_stmt|;
name|dashes
operator|<<
literal|1
operator|<<
name|space
operator|<<
literal|3
operator|<<
name|space
operator|<<
literal|9
operator|<<
name|space
operator|<<
literal|27
operator|<<
name|space
operator|<<
literal|9
operator|<<
name|space
operator|<<
literal|3
operator|<<
name|space
expr_stmt|;
name|stroker
operator|.
name|setDashPattern
argument_list|(
name|dashes
argument_list|)
expr_stmt|;
name|QPainterPath
name|stroke
init|=
name|stroker
operator|.
name|createStroke
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|painter
operator|->
name|fillPath
argument_list|(
name|stroke
argument_list|,
name|lg
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QPen
name|pen
argument_list|(
name|lg
argument_list|,
name|m_penWidth
argument_list|,
name|m_penStyle
argument_list|,
name|m_capStyle
argument_list|,
name|m_joinStyle
argument_list|)
decl_stmt|;
name|painter
operator|->
name|strokePath
argument_list|(
name|path
argument_list|,
name|pen
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
literal|1
condition|)
block|{
comment|// Draw the control points
name|painter
operator|->
name|setPen
argument_list|(
name|QColor
argument_list|(
literal|50
argument_list|,
literal|100
argument_list|,
literal|120
argument_list|,
literal|200
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setBrush
argument_list|(
name|QColor
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|,
literal|210
argument_list|,
literal|120
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_points
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QPointF
name|pos
init|=
name|m_points
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|painter
operator|->
name|drawEllipse
argument_list|(
name|QRectF
argument_list|(
name|pos
operator|.
name|x
argument_list|()
operator|-
name|m_pointSize
argument_list|,
name|pos
operator|.
name|y
argument_list|()
operator|-
name|m_pointSize
argument_list|,
name|m_pointSize
operator|*
literal|2
argument_list|,
name|m_pointSize
operator|*
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|painter
operator|->
name|setPen
argument_list|(
name|QPen
argument_list|(
name|Qt
operator|::
name|lightGray
argument_list|,
literal|0
argument_list|,
name|Qt
operator|::
name|SolidLine
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setBrush
argument_list|(
name|Qt
operator|::
name|NoBrush
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawPolyline
argument_list|(
name|m_points
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|initializePoints
name|void
name|PathStrokeRenderer
operator|::
name|initializePoints
parameter_list|()
block|{
specifier|const
name|int
name|count
init|=
literal|7
decl_stmt|;
name|m_points
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_vectors
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QMatrix
name|m
decl_stmt|;
name|qreal
name|rot
init|=
literal|360
operator|/
name|count
decl_stmt|;
name|QPointF
name|center
argument_list|(
name|width
argument_list|()
operator|/
literal|2
argument_list|,
name|height
argument_list|()
operator|/
literal|2
argument_list|)
decl_stmt|;
name|QMatrix
name|vm
decl_stmt|;
name|vm
operator|.
name|shear
argument_list|(
literal|2
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|vm
operator|.
name|scale
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|m_vectors
operator|<<
name|QPointF
argument_list|(
literal|.1f
argument_list|,
literal|.25f
argument_list|)
operator|*
operator|(
name|m
operator|*
name|vm
operator|)
expr_stmt|;
name|m_points
operator|<<
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
operator|*
name|m
operator|+
name|center
expr_stmt|;
name|m
operator|.
name|rotate
argument_list|(
name|rot
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|updatePoints
name|void
name|PathStrokeRenderer
operator|::
name|updatePoints
parameter_list|()
block|{
name|qreal
name|pad
init|=
literal|10
decl_stmt|;
name|qreal
name|left
init|=
name|pad
decl_stmt|;
name|qreal
name|right
init|=
name|width
argument_list|()
operator|-
name|pad
decl_stmt|;
name|qreal
name|top
init|=
name|pad
decl_stmt|;
name|qreal
name|bottom
init|=
name|height
argument_list|()
operator|-
name|pad
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|m_points
operator|.
name|size
argument_list|()
operator|==
name|m_vectors
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_points
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QPointF
name|pos
init|=
name|m_points
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QPointF
name|vec
init|=
name|m_vectors
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|pos
operator|+=
name|vec
expr_stmt|;
if|if
condition|(
name|pos
operator|.
name|x
argument_list|()
operator|<
name|left
operator|||
name|pos
operator|.
name|x
argument_list|()
operator|>
name|right
condition|)
block|{
name|vec
operator|.
name|setX
argument_list|(
operator|-
name|vec
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|pos
operator|.
name|setX
argument_list|(
name|pos
operator|.
name|x
argument_list|()
operator|<
name|left
condition|?
name|left
else|:
name|right
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pos
operator|.
name|y
argument_list|()
operator|<
name|top
operator|||
name|pos
operator|.
name|y
argument_list|()
operator|>
name|bottom
condition|)
block|{
name|vec
operator|.
name|setY
argument_list|(
operator|-
name|vec
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|pos
operator|.
name|setY
argument_list|(
name|pos
operator|.
name|y
argument_list|()
operator|<
name|top
condition|?
name|top
else|:
name|bottom
argument_list|)
expr_stmt|;
block|}
name|m_points
index|[
name|i
index|]
operator|=
name|pos
expr_stmt|;
name|m_vectors
index|[
name|i
index|]
operator|=
name|vec
expr_stmt|;
block|}
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mousePressEvent
name|void
name|PathStrokeRenderer
operator|::
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_fingerPointMapping
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|setDescriptionEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_activePoint
operator|=
operator|-
literal|1
expr_stmt|;
name|qreal
name|distance
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_points
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|qreal
name|d
init|=
name|QLineF
argument_list|(
name|e
operator|->
name|pos
argument_list|()
argument_list|,
name|m_points
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|distance
operator|<
literal|0
operator|&&
name|d
operator|<
literal|8
operator|*
name|m_pointSize
operator|)
operator|||
name|d
operator|<
name|distance
condition|)
block|{
name|distance
operator|=
name|d
expr_stmt|;
name|m_activePoint
operator|=
name|i
expr_stmt|;
block|}
block|}
if|if
condition|(
name|m_activePoint
operator|!=
operator|-
literal|1
condition|)
block|{
name|m_wasAnimated
operator|=
name|m_timer
operator|.
name|isActive
argument_list|()
expr_stmt|;
name|setAnimation
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|mouseMoveEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
comment|// If we're not running in small screen mode, always assume we're dragging
name|m_mouseDrag
operator|=
operator|!
name|m_smallScreen
expr_stmt|;
name|m_mousePress
operator|=
name|e
operator|->
name|pos
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mouseMoveEvent
name|void
name|PathStrokeRenderer
operator|::
name|mouseMoveEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_fingerPointMapping
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
comment|// If we've moved more then 25 pixels, assume user is dragging
if|if
condition|(
operator|!
name|m_mouseDrag
operator|&&
name|QPoint
argument_list|(
name|m_mousePress
operator|-
name|e
operator|->
name|pos
argument_list|()
argument_list|)
operator|.
name|manhattanLength
argument_list|()
operator|>
literal|25
condition|)
name|m_mouseDrag
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|m_mouseDrag
operator|&&
name|m_activePoint
operator|>=
literal|0
operator|&&
name|m_activePoint
operator|<
name|m_points
operator|.
name|size
argument_list|()
condition|)
block|{
name|m_points
index|[
name|m_activePoint
index|]
operator|=
name|e
operator|->
name|pos
argument_list|()
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|mouseReleaseEvent
name|void
name|PathStrokeRenderer
operator|::
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_fingerPointMapping
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|m_activePoint
operator|=
operator|-
literal|1
expr_stmt|;
name|setAnimation
argument_list|(
name|m_wasAnimated
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_mouseDrag
operator|&&
name|m_smallScreen
condition|)
emit|emit
name|clicked
argument_list|()
emit|;
block|}
end_function
begin_function
DECL|function|timerEvent
name|void
name|PathStrokeRenderer
operator|::
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|->
name|timerId
argument_list|()
operator|==
name|m_timer
operator|.
name|timerId
argument_list|()
condition|)
block|{
name|updatePoints
argument_list|()
expr_stmt|;
block|}
comment|// else if (e->timerId() == m_fpsTimer.timerId()) {
comment|//         emit frameRate(m_frameCount);
comment|//         m_frameCount = 0;
comment|//     }
block|}
end_function
begin_function
DECL|function|event
name|bool
name|PathStrokeRenderer
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
name|bool
name|touchBegin
init|=
literal|false
decl_stmt|;
switch|switch
condition|(
name|e
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|TouchBegin
case|:
name|touchBegin
operator|=
literal|true
expr_stmt|;
case|case
name|QEvent
operator|::
name|TouchUpdate
case|:
block|{
specifier|const
name|QTouchEvent
modifier|*
specifier|const
name|event
init|=
cast|static_cast
argument_list|<
specifier|const
name|QTouchEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
specifier|const
name|QList
argument_list|<
name|QTouchEvent
operator|::
name|TouchPoint
argument_list|>
name|points
init|=
name|event
operator|->
name|touchPoints
argument_list|()
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QTouchEvent
operator|::
name|TouchPoint
modifier|&
name|touchPoint
decl|,
name|points
control|)
block|{
specifier|const
name|int
name|id
init|=
name|touchPoint
operator|.
name|id
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|touchPoint
operator|.
name|state
argument_list|()
condition|)
block|{
case|case
name|Qt
operator|::
name|TouchPointPressed
case|:
block|{
comment|// find the point, move it
name|QSet
argument_list|<
name|int
argument_list|>
name|activePoints
init|=
name|QSet
argument_list|<
name|int
argument_list|>
operator|::
name|fromList
argument_list|(
name|m_fingerPointMapping
operator|.
name|values
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|activePoint
init|=
operator|-
literal|1
decl_stmt|;
name|qreal
name|distance
init|=
operator|-
literal|1
decl_stmt|;
specifier|const
name|int
name|pointsCount
init|=
name|m_points
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pointsCount
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|activePoints
operator|.
name|contains
argument_list|(
name|i
argument_list|)
condition|)
continue|continue;
name|qreal
name|d
init|=
name|QLineF
argument_list|(
name|touchPoint
operator|.
name|pos
argument_list|()
argument_list|,
name|m_points
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|distance
operator|<
literal|0
operator|&&
name|d
operator|<
literal|12
operator|*
name|m_pointSize
operator|)
operator|||
name|d
operator|<
name|distance
condition|)
block|{
name|distance
operator|=
name|d
expr_stmt|;
name|activePoint
operator|=
name|i
expr_stmt|;
block|}
block|}
if|if
condition|(
name|activePoint
operator|!=
operator|-
literal|1
condition|)
block|{
name|m_fingerPointMapping
operator|.
name|insert
argument_list|(
name|touchPoint
operator|.
name|id
argument_list|()
argument_list|,
name|activePoint
argument_list|)
expr_stmt|;
name|m_points
index|[
name|activePoint
index|]
operator|=
name|touchPoint
operator|.
name|pos
argument_list|()
expr_stmt|;
block|}
break|break;
block|}
case|case
name|Qt
operator|::
name|TouchPointReleased
case|:
block|{
comment|// move the point and release
name|QHash
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
operator|::
name|iterator
name|it
init|=
name|m_fingerPointMapping
operator|.
name|find
argument_list|(
name|id
argument_list|)
decl_stmt|;
name|m_points
index|[
name|it
operator|.
name|value
argument_list|()
index|]
operator|=
name|touchPoint
operator|.
name|pos
argument_list|()
expr_stmt|;
name|m_fingerPointMapping
operator|.
name|erase
argument_list|(
name|it
argument_list|)
expr_stmt|;
break|break;
block|}
case|case
name|Qt
operator|::
name|TouchPointMoved
case|:
block|{
comment|// move the point
specifier|const
name|int
name|pointIdx
init|=
name|m_fingerPointMapping
operator|.
name|value
argument_list|(
name|id
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|pointIdx
operator|>=
literal|0
condition|)
name|m_points
index|[
name|pointIdx
index|]
operator|=
name|touchPoint
operator|.
name|pos
argument_list|()
expr_stmt|;
break|break;
block|}
default|default:
break|break;
block|}
block|}
if|if
condition|(
name|m_fingerPointMapping
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|e
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
else|else
block|{
if|if
condition|(
name|touchBegin
condition|)
block|{
name|m_wasAnimated
operator|=
name|m_timer
operator|.
name|isActive
argument_list|()
expr_stmt|;
name|setAnimation
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|update
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
break|break;
case|case
name|QEvent
operator|::
name|TouchEnd
case|:
if|if
condition|(
name|m_fingerPointMapping
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|e
operator|->
name|ignore
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
name|m_fingerPointMapping
operator|.
name|clear
argument_list|()
expr_stmt|;
name|setAnimation
argument_list|(
name|m_wasAnimated
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
break|break;
default|default:
break|break;
block|}
return|return
name|QWidget
operator|::
name|event
argument_list|(
name|e
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|setAnimation
name|void
name|PathStrokeRenderer
operator|::
name|setAnimation
parameter_list|(
name|bool
name|animation
parameter_list|)
block|{
name|m_timer
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|//     m_fpsTimer.stop();
if|if
condition|(
name|animation
condition|)
block|{
name|m_timer
operator|.
name|start
argument_list|(
literal|25
argument_list|,
name|this
argument_list|)
expr_stmt|;
comment|//         m_fpsTimer.start(1000, this);
comment|//         m_frameCount = 0;
block|}
block|}
end_function
end_unit
