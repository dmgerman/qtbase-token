begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the demonstration applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** BSD License Usage ** Alternatively, you may use this file under the terms of the BSD license ** as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of The Qt Company Ltd nor the names of its **     contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|XFORM_H
end_ifndef
begin_define
DECL|macro|XFORM_H
define|#
directive|define
name|XFORM_H
end_define
begin_include
include|#
directive|include
file|"arthurwidgets.h"
end_include
begin_include
include|#
directive|include
file|<QBasicTimer>
end_include
begin_include
include|#
directive|include
file|<QPolygonF>
end_include
begin_decl_stmt
DECL|variable|HoverPoints
name|class
name|HoverPoints
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QLineEdit
name|class
name|QLineEdit
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QT_END_NAMESPACE
name|class
name|XFormView
range|:
name|public
name|ArthurFrame
block|{
name|public
operator|:
name|Q_OBJECT
name|Q_PROPERTY
argument_list|(
argument|XFormType type READ type WRITE setType
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|bool animation READ animation WRITE setAnimation
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|qreal shear READ shear WRITE setShear
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|qreal rotation READ rotation WRITE setRotation
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|qreal scale READ scale WRITE setScale
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QString text READ text WRITE setText
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|QPixmap pixmap READ pixmap WRITE setPixmap
argument_list|)
name|Q_ENUMS
argument_list|(
argument|XFormType
argument_list|)
name|public
operator|:
expr|enum
name|XFormType
block|{
name|VectorType
block|,
name|PixmapType
block|,
name|TextType
block|}
block|;
name|XFormView
argument_list|(
name|QWidget
operator|*
name|parent
argument_list|)
block|;
name|void
name|paint
argument_list|(
argument|QPainter *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|void
name|drawVectorType
argument_list|(
name|QPainter
operator|*
name|painter
argument_list|)
block|;
name|void
name|drawPixmapType
argument_list|(
name|QPainter
operator|*
name|painter
argument_list|)
block|;
name|void
name|drawTextType
argument_list|(
name|QPainter
operator|*
name|painter
argument_list|)
block|;
name|QSize
name|sizeHint
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|QSize
argument_list|(
literal|500
argument_list|,
literal|500
argument_list|)
return|;
block|}
name|void
name|mousePressEvent
argument_list|(
argument|QMouseEvent *e
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|void
name|resizeEvent
argument_list|(
argument|QResizeEvent *e
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|HoverPoints
operator|*
name|hoverPoints
argument_list|()
block|{
return|return
name|pts
return|;
block|}
name|bool
name|animation
argument_list|()
specifier|const
block|{
return|return
name|timer
operator|.
name|isActive
argument_list|()
return|;
block|}
name|qreal
name|shear
argument_list|()
specifier|const
block|{
return|return
name|m_shear
return|;
block|}
name|qreal
name|scale
argument_list|()
specifier|const
block|{
return|return
name|m_scale
return|;
block|}
name|qreal
name|rotation
argument_list|()
specifier|const
block|{
return|return
name|m_rotation
return|;
block|}
name|void
name|setShear
argument_list|(
argument|qreal s
argument_list|)
block|;
name|void
name|setScale
argument_list|(
argument|qreal s
argument_list|)
block|;
name|void
name|setRotation
argument_list|(
argument|qreal r
argument_list|)
block|;
name|XFormType
name|type
argument_list|()
specifier|const
block|;
name|QPixmap
name|pixmap
argument_list|()
specifier|const
block|;
name|QString
name|text
argument_list|()
specifier|const
block|;
name|public
name|slots
operator|:
name|void
name|setAnimation
argument_list|(
argument|bool animate
argument_list|)
block|;
name|void
name|updateCtrlPoints
argument_list|(
specifier|const
name|QPolygonF
operator|&
argument_list|)
block|;
name|void
name|changeRotation
argument_list|(
argument|int rotation
argument_list|)
block|;
name|void
name|changeScale
argument_list|(
argument|int scale
argument_list|)
block|;
name|void
name|changeShear
argument_list|(
argument|int shear
argument_list|)
block|;
name|void
name|setText
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
block|;
name|void
name|setPixmap
argument_list|(
specifier|const
name|QPixmap
operator|&
argument_list|)
block|;
name|void
name|setType
argument_list|(
argument|XFormType t
argument_list|)
block|;
name|void
name|setVectorType
argument_list|()
block|;
name|void
name|setPixmapType
argument_list|()
block|;
name|void
name|setTextType
argument_list|()
block|;
name|void
name|reset
argument_list|()
block|;
name|signals
operator|:
name|void
name|rotationChanged
argument_list|(
argument|int rotation
argument_list|)
block|;
name|void
name|scaleChanged
argument_list|(
argument|int scale
argument_list|)
block|;
name|void
name|shearChanged
argument_list|(
argument|int shear
argument_list|)
block|;
name|protected
operator|:
name|void
name|timerEvent
argument_list|(
argument|QTimerEvent *e
argument_list|)
name|Q_DECL_OVERRIDE
block|;
ifndef|#
directive|ifndef
name|QT_NO_WHEELEVENT
name|void
name|wheelEvent
argument_list|(
argument|QWheelEvent *
argument_list|)
name|Q_DECL_OVERRIDE
block|;
endif|#
directive|endif
name|private
operator|:
name|QPolygonF
name|ctrlPoints
block|;
name|HoverPoints
operator|*
name|pts
block|;
name|qreal
name|m_rotation
block|;
name|qreal
name|m_scale
block|;
name|qreal
name|m_shear
block|;
name|XFormType
name|m_type
block|;
name|QPixmap
name|m_pixmap
block|;
name|QString
name|m_text
block|;
name|QBasicTimer
name|timer
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|XFormWidget
range|:
name|public
name|QWidget
block|{
name|Q_OBJECT
name|public
operator|:
name|XFormWidget
argument_list|(
name|QWidget
operator|*
name|parent
argument_list|)
block|;
name|private
operator|:
name|XFormView
operator|*
name|view
block|;
name|QLineEdit
operator|*
name|textEditor
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// XFORM_H
end_comment
end_unit
