begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the demonstration applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|HOVERPOINTS_H
end_ifndef
begin_define
DECL|macro|HOVERPOINTS_H
define|#
directive|define
name|HOVERPOINTS_H
end_define
begin_include
include|#
directive|include
file|<QtWidgets>
end_include
begin_macro
DECL|function|QT_FORWARD_DECLARE_CLASS
name|QT_FORWARD_DECLARE_CLASS
argument_list|(
argument|QBypassWidget
argument_list|)
end_macro
begin_decl_stmt
name|class
name|HoverPoints
range|:
name|public
name|QObject
block|{
name|Q_OBJECT
name|public
operator|:
expr|enum
name|PointShape
block|{
name|CircleShape
block|,
name|RectangleShape
block|}
block|;      enum
name|LockType
block|{
name|LockToLeft
operator|=
literal|0x01
block|,
name|LockToRight
operator|=
literal|0x02
block|,
name|LockToTop
operator|=
literal|0x04
block|,
name|LockToBottom
operator|=
literal|0x08
block|}
block|;      enum
name|SortType
block|{
name|NoSort
block|,
name|XSort
block|,
name|YSort
block|}
block|;      enum
name|ConnectionType
block|{
name|NoConnection
block|,
name|LineConnection
block|,
name|CurveConnection
block|}
block|;
name|HoverPoints
argument_list|(
argument|QWidget *widget
argument_list|,
argument|PointShape shape
argument_list|)
block|;
name|bool
name|eventFilter
argument_list|(
argument|QObject *object
argument_list|,
argument|QEvent *event
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|void
name|paintPoints
argument_list|()
block|;
specifier|inline
name|QRectF
name|boundingRect
argument_list|()
specifier|const
block|;
name|void
name|setBoundingRect
argument_list|(
argument|const QRectF&boundingRect
argument_list|)
block|{
name|m_bounds
operator|=
name|boundingRect
block|; }
name|QPolygonF
name|points
argument_list|()
specifier|const
block|{
return|return
name|m_points
return|;
block|}
name|void
name|setPoints
argument_list|(
specifier|const
name|QPolygonF
operator|&
name|points
argument_list|)
block|;
name|QSizeF
name|pointSize
argument_list|()
specifier|const
block|{
return|return
name|m_pointSize
return|;
block|}
name|void
name|setPointSize
argument_list|(
argument|const QSizeF&size
argument_list|)
block|{
name|m_pointSize
operator|=
name|size
block|; }
name|SortType
name|sortType
argument_list|()
specifier|const
block|{
return|return
name|m_sortType
return|;
block|}
name|void
name|setSortType
argument_list|(
argument|SortType sortType
argument_list|)
block|{
name|m_sortType
operator|=
name|sortType
block|; }
name|ConnectionType
name|connectionType
argument_list|()
specifier|const
block|{
return|return
name|m_connectionType
return|;
block|}
name|void
name|setConnectionType
argument_list|(
argument|ConnectionType connectionType
argument_list|)
block|{
name|m_connectionType
operator|=
name|connectionType
block|; }
name|void
name|setConnectionPen
argument_list|(
argument|const QPen&pen
argument_list|)
block|{
name|m_connectionPen
operator|=
name|pen
block|; }
name|void
name|setShapePen
argument_list|(
argument|const QPen&pen
argument_list|)
block|{
name|m_pointPen
operator|=
name|pen
block|; }
name|void
name|setShapeBrush
argument_list|(
argument|const QBrush&brush
argument_list|)
block|{
name|m_pointBrush
operator|=
name|brush
block|; }
name|void
name|setPointLock
argument_list|(
argument|int pos
argument_list|,
argument|LockType lock
argument_list|)
block|{
name|m_locks
index|[
name|pos
index|]
operator|=
name|lock
block|; }
name|void
name|setEditable
argument_list|(
argument|bool editable
argument_list|)
block|{
name|m_editable
operator|=
name|editable
block|; }
name|bool
name|editable
argument_list|()
specifier|const
block|{
return|return
name|m_editable
return|;
block|}
name|public
name|slots
operator|:
name|void
name|setEnabled
argument_list|(
argument|bool enabled
argument_list|)
block|;
name|void
name|setDisabled
argument_list|(
argument|bool disabled
argument_list|)
block|{
name|setEnabled
argument_list|(
operator|!
name|disabled
argument_list|)
block|; }
name|signals
operator|:
name|void
name|pointsChanged
argument_list|(
specifier|const
name|QPolygonF
operator|&
name|points
argument_list|)
block|;
name|public
operator|:
name|void
name|firePointChange
argument_list|()
block|;
name|private
operator|:
specifier|inline
name|QRectF
name|pointBoundingRect
argument_list|(
argument|int i
argument_list|)
specifier|const
block|;
name|void
name|movePoint
argument_list|(
argument|int i
argument_list|,
argument|const QPointF&newPos
argument_list|,
argument|bool emitChange = true
argument_list|)
block|;
name|QWidget
operator|*
name|m_widget
block|;
name|QPolygonF
name|m_points
block|;
name|QRectF
name|m_bounds
block|;
name|PointShape
name|m_shape
block|;
name|SortType
name|m_sortType
block|;
name|ConnectionType
name|m_connectionType
block|;
name|QVector
operator|<
name|uint
operator|>
name|m_locks
block|;
name|QSizeF
name|m_pointSize
block|;
name|int
name|m_currentIndex
block|;
name|bool
name|m_editable
block|;
name|bool
name|m_enabled
block|;
name|QHash
operator|<
name|int
block|,
name|int
operator|>
name|m_fingerPointMapping
block|;
name|QPen
name|m_pointPen
block|;
name|QBrush
name|m_pointBrush
block|;
name|QPen
name|m_connectionPen
block|; }
decl_stmt|;
end_decl_stmt
begin_expr_stmt
DECL|function|pointBoundingRect
specifier|inline
name|QRectF
name|HoverPoints
operator|::
name|pointBoundingRect
argument_list|(
argument|int i
argument_list|)
specifier|const
block|{
name|QPointF
name|p
operator|=
name|m_points
operator|.
name|at
argument_list|(
name|i
argument_list|)
block|;
name|qreal
name|w
operator|=
name|m_pointSize
operator|.
name|width
argument_list|()
block|;
name|qreal
name|h
operator|=
name|m_pointSize
operator|.
name|height
argument_list|()
block|;
name|qreal
name|x
operator|=
name|p
operator|.
name|x
argument_list|()
operator|-
name|w
operator|/
literal|2
block|;
name|qreal
name|y
operator|=
name|p
operator|.
name|y
argument_list|()
operator|-
name|h
operator|/
literal|2
block|;
return|return
name|QRectF
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|boundingRect
specifier|inline
name|QRectF
name|HoverPoints
operator|::
name|boundingRect
argument_list|()
specifier|const
block|{
if|if
condition|(
name|m_bounds
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|m_widget
operator|->
name|rect
argument_list|()
return|;
else|else
return|return
name|m_bounds
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// HOVERPOINTS_H
end_comment
end_unit
