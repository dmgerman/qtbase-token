begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the demonstration applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** BSD License Usage ** Alternatively, you may use this file under the terms of the BSD license ** as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of The Qt Company Ltd nor the names of its **     contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|GRADIENTS_H
end_ifndef
begin_define
DECL|macro|GRADIENTS_H
define|#
directive|define
name|GRADIENTS_H
end_define
begin_include
include|#
directive|include
file|"arthurwidgets.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QRadioButton
name|class
name|QRadioButton
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QT_END_NAMESPACE
DECL|variable|HoverPoints
name|class
name|HoverPoints
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|ShadeWidget
range|:
name|public
name|QWidget
block|{
name|Q_OBJECT
name|public
operator|:
expr|enum
name|ShadeType
block|{
name|RedShade
block|,
name|GreenShade
block|,
name|BlueShade
block|,
name|ARGBShade
block|}
block|;
name|ShadeWidget
argument_list|(
argument|ShadeType type
argument_list|,
argument|QWidget *parent
argument_list|)
block|;
name|void
name|setGradientStops
argument_list|(
specifier|const
name|QGradientStops
operator|&
name|stops
argument_list|)
block|;
name|void
name|paintEvent
argument_list|(
argument|QPaintEvent *e
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|QSize
name|sizeHint
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|QSize
argument_list|(
literal|150
argument_list|,
literal|40
argument_list|)
return|;
block|}
name|QPolygonF
name|points
argument_list|()
specifier|const
block|;
name|HoverPoints
operator|*
name|hoverPoints
argument_list|()
specifier|const
block|{
return|return
name|m_hoverPoints
return|;
block|}
name|uint
name|colorAt
argument_list|(
argument|int x
argument_list|)
block|;
name|signals
operator|:
name|void
name|colorsChanged
argument_list|()
block|;
name|private
operator|:
name|void
name|generateShade
argument_list|()
block|;
name|ShadeType
name|m_shade_type
block|;
name|QImage
name|m_shade
block|;
name|HoverPoints
operator|*
name|m_hoverPoints
block|;
name|QLinearGradient
name|m_alpha_gradient
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|GradientEditor
range|:
name|public
name|QWidget
block|{
name|Q_OBJECT
name|public
operator|:
name|GradientEditor
argument_list|(
name|QWidget
operator|*
name|parent
argument_list|)
block|;
name|void
name|setGradientStops
argument_list|(
specifier|const
name|QGradientStops
operator|&
name|stops
argument_list|)
block|;
name|public
name|slots
operator|:
name|void
name|pointsUpdated
argument_list|()
block|;
name|signals
operator|:
name|void
name|gradientStopsChanged
argument_list|(
specifier|const
name|QGradientStops
operator|&
name|stops
argument_list|)
block|;
name|private
operator|:
name|ShadeWidget
operator|*
name|m_red_shade
block|;
name|ShadeWidget
operator|*
name|m_green_shade
block|;
name|ShadeWidget
operator|*
name|m_blue_shade
block|;
name|ShadeWidget
operator|*
name|m_alpha_shade
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|GradientRenderer
range|:
name|public
name|ArthurFrame
block|{
name|Q_OBJECT
name|public
operator|:
name|GradientRenderer
argument_list|(
name|QWidget
operator|*
name|parent
argument_list|)
block|;
name|void
name|paint
argument_list|(
argument|QPainter *p
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|QSize
name|sizeHint
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{
return|return
name|QSize
argument_list|(
literal|400
argument_list|,
literal|400
argument_list|)
return|;
block|}
name|HoverPoints
operator|*
name|hoverPoints
argument_list|()
specifier|const
block|{
return|return
name|m_hoverPoints
return|;
block|}
name|void
name|mousePressEvent
argument_list|(
argument|QMouseEvent *e
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|public
name|slots
operator|:
name|void
name|setGradientStops
argument_list|(
specifier|const
name|QGradientStops
operator|&
name|stops
argument_list|)
block|;
name|void
name|setPadSpread
argument_list|()
block|{
name|m_spread
operator|=
name|QGradient
operator|::
name|PadSpread
block|;
name|update
argument_list|()
block|; }
name|void
name|setRepeatSpread
argument_list|()
block|{
name|m_spread
operator|=
name|QGradient
operator|::
name|RepeatSpread
block|;
name|update
argument_list|()
block|; }
name|void
name|setReflectSpread
argument_list|()
block|{
name|m_spread
operator|=
name|QGradient
operator|::
name|ReflectSpread
block|;
name|update
argument_list|()
block|; }
name|void
name|setLinearGradient
argument_list|()
block|{
name|m_gradientType
operator|=
name|Qt
operator|::
name|LinearGradientPattern
block|;
name|update
argument_list|()
block|; }
name|void
name|setRadialGradient
argument_list|()
block|{
name|m_gradientType
operator|=
name|Qt
operator|::
name|RadialGradientPattern
block|;
name|update
argument_list|()
block|; }
name|void
name|setConicalGradient
argument_list|()
block|{
name|m_gradientType
operator|=
name|Qt
operator|::
name|ConicalGradientPattern
block|;
name|update
argument_list|()
block|; }
name|private
operator|:
name|QGradientStops
name|m_stops
block|;
name|HoverPoints
operator|*
name|m_hoverPoints
block|;
name|QGradient
operator|::
name|Spread
name|m_spread
block|;
name|Qt
operator|::
name|BrushStyle
name|m_gradientType
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|GradientWidget
range|:
name|public
name|QWidget
block|{
name|Q_OBJECT
name|public
operator|:
name|GradientWidget
argument_list|(
name|QWidget
operator|*
name|parent
argument_list|)
block|;
name|public
name|slots
operator|:
name|void
name|setDefault1
argument_list|()
block|{
name|setDefault
argument_list|(
literal|1
argument_list|)
block|; }
name|void
name|setDefault2
argument_list|()
block|{
name|setDefault
argument_list|(
literal|2
argument_list|)
block|; }
name|void
name|setDefault3
argument_list|()
block|{
name|setDefault
argument_list|(
literal|3
argument_list|)
block|; }
name|void
name|setDefault4
argument_list|()
block|{
name|setDefault
argument_list|(
literal|4
argument_list|)
block|; }
name|private
operator|:
name|void
name|setDefault
argument_list|(
argument|int i
argument_list|)
block|;
name|GradientRenderer
operator|*
name|m_renderer
block|;
name|GradientEditor
operator|*
name|m_editor
block|;
name|QRadioButton
operator|*
name|m_linearButton
block|;
name|QRadioButton
operator|*
name|m_radialButton
block|;
name|QRadioButton
operator|*
name|m_conicalButton
block|;
name|QRadioButton
operator|*
name|m_padSpreadButton
block|;
name|QRadioButton
operator|*
name|m_reflectSpreadButton
block|;
name|QRadioButton
operator|*
name|m_repeatSpreadButton
block|;  }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// GRADIENTS_H
end_comment
end_unit
