begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names **     of its contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtWidgets>
end_include
begin_include
include|#
directive|include
file|"flowlayout.h"
end_include
begin_comment
comment|//! [1]
end_comment
begin_constructor
DECL|function|FlowLayout
name|FlowLayout
operator|::
name|FlowLayout
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
name|int
name|margin
parameter_list|,
name|int
name|hSpacing
parameter_list|,
name|int
name|vSpacing
parameter_list|)
member_init_list|:
name|QLayout
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|m_hSpace
argument_list|(
name|hSpacing
argument_list|)
member_init_list|,
name|m_vSpace
argument_list|(
name|vSpacing
argument_list|)
block|{
name|setContentsMargins
argument_list|(
name|margin
argument_list|,
name|margin
argument_list|,
name|margin
argument_list|,
name|margin
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|FlowLayout
name|FlowLayout
operator|::
name|FlowLayout
parameter_list|(
name|int
name|margin
parameter_list|,
name|int
name|hSpacing
parameter_list|,
name|int
name|vSpacing
parameter_list|)
member_init_list|:
name|m_hSpace
argument_list|(
name|hSpacing
argument_list|)
member_init_list|,
name|m_vSpace
argument_list|(
name|vSpacing
argument_list|)
block|{
name|setContentsMargins
argument_list|(
name|margin
argument_list|,
name|margin
argument_list|,
name|margin
argument_list|,
name|margin
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|//! [1]
end_comment
begin_comment
comment|//! [2]
end_comment
begin_destructor
DECL|function|~FlowLayout
name|FlowLayout
operator|::
name|~
name|FlowLayout
parameter_list|()
block|{
name|QLayoutItem
modifier|*
name|item
decl_stmt|;
while|while
condition|(
operator|(
name|item
operator|=
name|takeAt
argument_list|(
literal|0
argument_list|)
operator|)
condition|)
operator|delete
name|item
expr_stmt|;
block|}
end_destructor
begin_comment
comment|//! [2]
end_comment
begin_comment
comment|//! [3]
end_comment
begin_function
DECL|function|addItem
name|void
name|FlowLayout
operator|::
name|addItem
parameter_list|(
name|QLayoutItem
modifier|*
name|item
parameter_list|)
block|{
name|itemList
operator|.
name|append
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [3]
end_comment
begin_comment
comment|//! [4]
end_comment
begin_function
DECL|function|horizontalSpacing
name|int
name|FlowLayout
operator|::
name|horizontalSpacing
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|m_hSpace
operator|>=
literal|0
condition|)
block|{
return|return
name|m_hSpace
return|;
block|}
else|else
block|{
return|return
name|smartSpacing
argument_list|(
name|QStyle
operator|::
name|PM_LayoutHorizontalSpacing
argument_list|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|verticalSpacing
name|int
name|FlowLayout
operator|::
name|verticalSpacing
parameter_list|()
specifier|const
block|{
if|if
condition|(
name|m_vSpace
operator|>=
literal|0
condition|)
block|{
return|return
name|m_vSpace
return|;
block|}
else|else
block|{
return|return
name|smartSpacing
argument_list|(
name|QStyle
operator|::
name|PM_LayoutVerticalSpacing
argument_list|)
return|;
block|}
block|}
end_function
begin_comment
comment|//! [4]
end_comment
begin_comment
comment|//! [5]
end_comment
begin_function
DECL|function|count
name|int
name|FlowLayout
operator|::
name|count
parameter_list|()
specifier|const
block|{
return|return
name|itemList
operator|.
name|size
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|itemAt
name|QLayoutItem
modifier|*
name|FlowLayout
operator|::
name|itemAt
parameter_list|(
name|int
name|index
parameter_list|)
specifier|const
block|{
return|return
name|itemList
operator|.
name|value
argument_list|(
name|index
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|takeAt
name|QLayoutItem
modifier|*
name|FlowLayout
operator|::
name|takeAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
if|if
condition|(
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<
name|itemList
operator|.
name|size
argument_list|()
condition|)
return|return
name|itemList
operator|.
name|takeAt
argument_list|(
name|index
argument_list|)
return|;
else|else
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|//! [5]
end_comment
begin_comment
comment|//! [6]
end_comment
begin_function
DECL|function|expandingDirections
name|Qt
operator|::
name|Orientations
name|FlowLayout
operator|::
name|expandingDirections
parameter_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|//! [6]
end_comment
begin_comment
comment|//! [7]
end_comment
begin_function
DECL|function|hasHeightForWidth
name|bool
name|FlowLayout
operator|::
name|hasHeightForWidth
parameter_list|()
specifier|const
block|{
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|heightForWidth
name|int
name|FlowLayout
operator|::
name|heightForWidth
parameter_list|(
name|int
name|width
parameter_list|)
specifier|const
block|{
name|int
name|height
init|=
name|doLayout
argument_list|(
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|width
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
return|return
name|height
return|;
block|}
end_function
begin_comment
comment|//! [7]
end_comment
begin_comment
comment|//! [8]
end_comment
begin_function
DECL|function|setGeometry
name|void
name|FlowLayout
operator|::
name|setGeometry
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|)
block|{
name|QLayout
operator|::
name|setGeometry
argument_list|(
name|rect
argument_list|)
expr_stmt|;
name|doLayout
argument_list|(
name|rect
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sizeHint
name|QSize
name|FlowLayout
operator|::
name|sizeHint
parameter_list|()
specifier|const
block|{
return|return
name|minimumSize
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|minimumSize
name|QSize
name|FlowLayout
operator|::
name|minimumSize
parameter_list|()
specifier|const
block|{
name|QSize
name|size
decl_stmt|;
name|QLayoutItem
modifier|*
name|item
decl_stmt|;
foreach|foreach
control|(
name|item
init|,
name|itemList
control|)
name|size
operator|=
name|size
operator|.
name|expandedTo
argument_list|(
name|item
operator|->
name|minimumSize
argument_list|()
argument_list|)
expr_stmt|;
name|size
operator|+=
name|QSize
argument_list|(
literal|2
operator|*
name|margin
argument_list|()
argument_list|,
literal|2
operator|*
name|margin
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|size
return|;
block|}
end_function
begin_comment
comment|//! [8]
end_comment
begin_comment
comment|//! [9]
end_comment
begin_function
DECL|function|doLayout
name|int
name|FlowLayout
operator|::
name|doLayout
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|bool
name|testOnly
parameter_list|)
specifier|const
block|{
name|int
name|left
decl_stmt|,
name|top
decl_stmt|,
name|right
decl_stmt|,
name|bottom
decl_stmt|;
name|getContentsMargins
argument_list|(
operator|&
name|left
argument_list|,
operator|&
name|top
argument_list|,
operator|&
name|right
argument_list|,
operator|&
name|bottom
argument_list|)
expr_stmt|;
name|QRect
name|effectiveRect
init|=
name|rect
operator|.
name|adjusted
argument_list|(
operator|+
name|left
argument_list|,
operator|+
name|top
argument_list|,
operator|-
name|right
argument_list|,
operator|-
name|bottom
argument_list|)
decl_stmt|;
name|int
name|x
init|=
name|effectiveRect
operator|.
name|x
argument_list|()
decl_stmt|;
name|int
name|y
init|=
name|effectiveRect
operator|.
name|y
argument_list|()
decl_stmt|;
name|int
name|lineHeight
init|=
literal|0
decl_stmt|;
comment|//! [9]
comment|//! [10]
name|QLayoutItem
modifier|*
name|item
decl_stmt|;
foreach|foreach
control|(
name|item
init|,
name|itemList
control|)
block|{
name|QWidget
modifier|*
name|wid
init|=
name|item
operator|->
name|widget
argument_list|()
decl_stmt|;
name|int
name|spaceX
init|=
name|horizontalSpacing
argument_list|()
decl_stmt|;
if|if
condition|(
name|spaceX
operator|==
operator|-
literal|1
condition|)
name|spaceX
operator|=
name|wid
operator|->
name|style
argument_list|()
operator|->
name|layoutSpacing
argument_list|(
name|QSizePolicy
operator|::
name|PushButton
argument_list|,
name|QSizePolicy
operator|::
name|PushButton
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|)
expr_stmt|;
name|int
name|spaceY
init|=
name|verticalSpacing
argument_list|()
decl_stmt|;
if|if
condition|(
name|spaceY
operator|==
operator|-
literal|1
condition|)
name|spaceY
operator|=
name|wid
operator|->
name|style
argument_list|()
operator|->
name|layoutSpacing
argument_list|(
name|QSizePolicy
operator|::
name|PushButton
argument_list|,
name|QSizePolicy
operator|::
name|PushButton
argument_list|,
name|Qt
operator|::
name|Vertical
argument_list|)
expr_stmt|;
comment|//! [10]
comment|//! [11]
name|int
name|nextX
init|=
name|x
operator|+
name|item
operator|->
name|sizeHint
argument_list|()
operator|.
name|width
argument_list|()
operator|+
name|spaceX
decl_stmt|;
if|if
condition|(
name|nextX
operator|-
name|spaceX
operator|>
name|effectiveRect
operator|.
name|right
argument_list|()
operator|&&
name|lineHeight
operator|>
literal|0
condition|)
block|{
name|x
operator|=
name|effectiveRect
operator|.
name|x
argument_list|()
expr_stmt|;
name|y
operator|=
name|y
operator|+
name|lineHeight
operator|+
name|spaceY
expr_stmt|;
name|nextX
operator|=
name|x
operator|+
name|item
operator|->
name|sizeHint
argument_list|()
operator|.
name|width
argument_list|()
operator|+
name|spaceX
expr_stmt|;
name|lineHeight
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|testOnly
condition|)
name|item
operator|->
name|setGeometry
argument_list|(
name|QRect
argument_list|(
name|QPoint
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|,
name|item
operator|->
name|sizeHint
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|=
name|nextX
expr_stmt|;
name|lineHeight
operator|=
name|qMax
argument_list|(
name|lineHeight
argument_list|,
name|item
operator|->
name|sizeHint
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|y
operator|+
name|lineHeight
operator|-
name|rect
operator|.
name|y
argument_list|()
operator|+
name|bottom
return|;
block|}
end_function
begin_comment
comment|//! [11]
end_comment
begin_comment
comment|//! [12]
end_comment
begin_function
DECL|function|smartSpacing
name|int
name|FlowLayout
operator|::
name|smartSpacing
parameter_list|(
name|QStyle
operator|::
name|PixelMetric
name|pm
parameter_list|)
specifier|const
block|{
name|QObject
modifier|*
name|parent
init|=
name|this
operator|->
name|parent
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|parent
condition|)
block|{
return|return
operator|-
literal|1
return|;
block|}
elseif|else
if|if
condition|(
name|parent
operator|->
name|isWidgetType
argument_list|()
condition|)
block|{
name|QWidget
modifier|*
name|pw
init|=
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|parent
argument_list|)
decl_stmt|;
return|return
name|pw
operator|->
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|pm
argument_list|,
literal|0
argument_list|,
name|pw
argument_list|)
return|;
block|}
else|else
block|{
return|return
cast|static_cast
argument_list|<
name|QLayout
operator|*
argument_list|>
argument_list|(
name|parent
argument_list|)
operator|->
name|spacing
argument_list|()
return|;
block|}
block|}
end_function
begin_comment
comment|//! [12]
end_comment
end_unit
