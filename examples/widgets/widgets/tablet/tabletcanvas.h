begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** BSD License Usage ** Alternatively, you may use this file under the terms of the BSD license ** as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of The Qt Company Ltd nor the names of its **     contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|TABLETCANVAS_H
end_ifndef
begin_define
DECL|macro|TABLETCANVAS_H
define|#
directive|define
name|TABLETCANVAS_H
end_define
begin_include
include|#
directive|include
file|<QWidget>
end_include
begin_include
include|#
directive|include
file|<QPixmap>
end_include
begin_include
include|#
directive|include
file|<QPoint>
end_include
begin_include
include|#
directive|include
file|<QTabletEvent>
end_include
begin_include
include|#
directive|include
file|<QColor>
end_include
begin_include
include|#
directive|include
file|<QBrush>
end_include
begin_include
include|#
directive|include
file|<QPen>
end_include
begin_include
include|#
directive|include
file|<QPoint>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QPaintEvent
name|class
name|QPaintEvent
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QString
name|class
name|QString
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QT_END_NAMESPACE
comment|//! [0]
name|class
name|TabletCanvas
range|:
name|public
name|QWidget
block|{
name|Q_OBJECT
name|public
operator|:
expr|enum
name|Valuator
block|{
name|PressureValuator
block|,
name|TangentialPressureValuator
block|,
name|TiltValuator
block|,
name|VTiltValuator
block|,
name|HTiltValuator
block|,
name|NoValuator
block|}
block|;
name|Q_ENUM
argument_list|(
argument|Valuator
argument_list|)
name|TabletCanvas
argument_list|()
block|;
name|bool
name|saveImage
argument_list|(
specifier|const
name|QString
operator|&
name|file
argument_list|)
block|;
name|bool
name|loadImage
argument_list|(
specifier|const
name|QString
operator|&
name|file
argument_list|)
block|;
name|void
name|setAlphaChannelValuator
argument_list|(
argument|Valuator type
argument_list|)
block|{
name|m_alphaChannelValuator
operator|=
name|type
block|; }
name|void
name|setColorSaturationValuator
argument_list|(
argument|Valuator type
argument_list|)
block|{
name|m_colorSaturationValuator
operator|=
name|type
block|; }
name|void
name|setLineWidthType
argument_list|(
argument|Valuator type
argument_list|)
block|{
name|m_lineWidthValuator
operator|=
name|type
block|; }
name|void
name|setColor
argument_list|(
argument|const QColor&c
argument_list|)
block|{
if|if
condition|(
name|c
operator|.
name|isValid
argument_list|()
condition|)
name|m_color
operator|=
name|c
expr_stmt|;
block|}
name|QColor
name|color
argument_list|()
specifier|const
block|{
return|return
name|m_color
return|;
block|}
name|void
name|setTabletDevice
argument_list|(
argument|QTabletEvent *event
argument_list|)
block|{
name|updateCursor
argument_list|(
name|event
argument_list|)
block|; }
name|int
name|maximum
argument_list|(
argument|int a
argument_list|,
argument|int b
argument_list|)
block|{
return|return
name|a
operator|>
name|b
operator|?
name|a
operator|:
name|b
return|;
block|}
name|protected
operator|:
name|void
name|tabletEvent
argument_list|(
argument|QTabletEvent *event
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|void
name|paintEvent
argument_list|(
argument|QPaintEvent *event
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|void
name|resizeEvent
argument_list|(
argument|QResizeEvent *event
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|private
operator|:
name|void
name|initPixmap
argument_list|()
block|;
name|void
name|paintPixmap
argument_list|(
name|QPainter
operator|&
name|painter
argument_list|,
name|QTabletEvent
operator|*
name|event
argument_list|)
block|;
name|Qt
operator|::
name|BrushStyle
name|brushPattern
argument_list|(
argument|qreal value
argument_list|)
block|;
name|void
name|updateBrush
argument_list|(
specifier|const
name|QTabletEvent
operator|*
name|event
argument_list|)
block|;
name|void
name|updateCursor
argument_list|(
specifier|const
name|QTabletEvent
operator|*
name|event
argument_list|)
block|;
name|Valuator
name|m_alphaChannelValuator
block|;
name|Valuator
name|m_colorSaturationValuator
block|;
name|Valuator
name|m_lineWidthValuator
block|;
name|QColor
name|m_color
block|;
name|QPixmap
name|m_pixmap
block|;
name|QBrush
name|m_brush
block|;
name|QPen
name|m_pen
block|;
name|bool
name|m_deviceDown
block|;      struct
name|Point
block|{
name|QPointF
name|pos
block|;
name|qreal
name|rotation
block|;     }
name|lastPoint
block|; }
decl_stmt|;
end_decl_stmt
begin_comment
comment|//! [0]
end_comment
begin_endif
endif|#
directive|endif
end_endif
end_unit
