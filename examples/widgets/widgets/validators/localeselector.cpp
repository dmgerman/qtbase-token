begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of The Qt Company Ltd and its Subsidiary(-ies) nor the **     names of its contributors may be used to endorse or promote products **     derived from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"localeselector.h"
end_include
begin_include
include|#
directive|include
file|<QLocale>
end_include
begin_constructor
DECL|function|LocaleSelector
name|LocaleSelector
operator|::
name|LocaleSelector
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QComboBox
argument_list|(
name|parent
argument_list|)
block|{
name|int
name|curIndex
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|index
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|_lang
init|=
name|QLocale
operator|::
name|C
init|;
name|_lang
operator|<=
name|QLocale
operator|::
name|LastLanguage
condition|;
operator|++
name|_lang
control|)
block|{
name|QLocale
operator|::
name|Language
name|lang
init|=
cast|static_cast
argument_list|<
name|QLocale
operator|::
name|Language
argument_list|>
argument_list|(
name|_lang
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QLocale
modifier|&
name|l
decl|,
name|QLocale
operator|::
name|matchingLocales
argument_list|(
name|lang
argument_list|,
name|QLocale
operator|::
name|AnyScript
argument_list|,
name|QLocale
operator|::
name|AnyCountry
argument_list|)
control|)
block|{
name|QString
name|label
init|=
name|QLocale
operator|::
name|languageToString
argument_list|(
name|l
operator|.
name|language
argument_list|()
argument_list|)
decl_stmt|;
name|label
operator|+=
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|label
operator|+=
name|QLocale
operator|::
name|countryToString
argument_list|(
name|l
operator|.
name|country
argument_list|()
argument_list|)
expr_stmt|;
comment|// distinguish locales by script, if there are more than one script for a language/country pair
if|if
condition|(
name|QLocale
operator|::
name|matchingLocales
argument_list|(
name|l
operator|.
name|language
argument_list|()
argument_list|,
name|QLocale
operator|::
name|AnyScript
argument_list|,
name|l
operator|.
name|country
argument_list|()
argument_list|)
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
name|label
operator|+=
name|QLatin1String
argument_list|(
literal|" ("
argument_list|)
operator|+
name|QLocale
operator|::
name|scriptToString
argument_list|(
name|l
operator|.
name|script
argument_list|()
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|')'
argument_list|)
expr_stmt|;
name|addItem
argument_list|(
name|label
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|l
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|l
operator|.
name|language
argument_list|()
operator|==
name|locale
argument_list|()
operator|.
name|language
argument_list|()
operator|&&
name|l
operator|.
name|country
argument_list|()
operator|==
name|locale
argument_list|()
operator|.
name|country
argument_list|()
operator|&&
operator|(
name|locale
argument_list|()
operator|.
name|script
argument_list|()
operator|==
name|QLocale
operator|::
name|AnyScript
operator|||
name|l
operator|.
name|script
argument_list|()
operator|==
name|locale
argument_list|()
operator|.
name|script
argument_list|()
operator|)
condition|)
block|{
name|curIndex
operator|=
name|index
expr_stmt|;
block|}
operator|++
name|index
expr_stmt|;
block|}
block|}
if|if
condition|(
name|curIndex
operator|!=
operator|-
literal|1
condition|)
name|setCurrentIndex
argument_list|(
name|curIndex
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|emitLocaleSelected
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|emitLocaleSelected
name|void
name|LocaleSelector
operator|::
name|emitLocaleSelected
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|QVariant
name|v
init|=
name|itemData
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|v
operator|.
name|isValid
argument_list|()
condition|)
return|return;
specifier|const
name|QLocale
name|l
init|=
name|v
operator|.
name|value
argument_list|<
name|QLocale
argument_list|>
argument_list|()
decl_stmt|;
emit|emit
name|localeSelected
argument_list|(
name|l
argument_list|)
emit|;
block|}
end_function
end_unit
