begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Copyright (C) 2012 Rick Stockton<rickstockton@reno-computerhelp.com> ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of The Qt Company Ltd and its Subsidiary(-ies) nor the **     names of its contributors may be used to endorse or promote products **     derived from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"buttontester.h"
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_function
DECL|function|mousePressEvent
name|void
name|ButtonTester
operator|::
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
name|int
name|j
init|=
name|ButtonTester
operator|::
name|buttonByNumber
argument_list|(
name|e
operator|->
name|button
argument_list|()
argument_list|)
decl_stmt|;
name|QString
name|result
init|=
literal|"Mouse Press: raw button="
operator|+
name|QString
operator|::
name|number
argument_list|(
name|j
argument_list|)
operator|+
literal|"  Qt="
operator|+
name|enumNameFromValue
argument_list|(
name|e
operator|->
name|button
argument_list|()
argument_list|)
decl_stmt|;
name|QString
name|buttonsString
init|=
name|ButtonTester
operator|::
name|enumNamesFromMouseButtons
argument_list|(
name|e
operator|->
name|buttons
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|+=
literal|"\n heldbuttons "
operator|+
name|buttonsString
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
name|result
expr_stmt|;
name|this
operator|->
name|setText
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|this
operator|->
name|repaint
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mouseReleaseEvent
name|void
name|ButtonTester
operator|::
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
name|int
name|j
init|=
name|ButtonTester
operator|::
name|buttonByNumber
argument_list|(
name|e
operator|->
name|button
argument_list|()
argument_list|)
decl_stmt|;
name|QString
name|result
init|=
literal|"Mouse Release: raw button="
operator|+
name|QString
operator|::
name|number
argument_list|(
name|j
argument_list|)
operator|+
literal|"  Qt="
operator|+
name|enumNameFromValue
argument_list|(
name|e
operator|->
name|button
argument_list|()
argument_list|)
decl_stmt|;
name|QString
name|buttonsString
init|=
name|ButtonTester
operator|::
name|enumNamesFromMouseButtons
argument_list|(
name|e
operator|->
name|buttons
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|+=
literal|"\n heldbuttons "
operator|+
name|buttonsString
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
name|result
expr_stmt|;
name|this
operator|->
name|setText
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|this
operator|->
name|repaint
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mouseDoubleClickEvent
name|void
name|ButtonTester
operator|::
name|mouseDoubleClickEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
name|int
name|j
init|=
name|ButtonTester
operator|::
name|buttonByNumber
argument_list|(
name|e
operator|->
name|button
argument_list|()
argument_list|)
decl_stmt|;
name|QString
name|result
init|=
literal|"Mouse DoubleClick: raw button="
operator|+
name|QString
operator|::
name|number
argument_list|(
name|j
argument_list|)
operator|+
literal|"  Qt="
operator|+
name|enumNameFromValue
argument_list|(
name|e
operator|->
name|button
argument_list|()
argument_list|)
decl_stmt|;
name|QString
name|buttonsString
init|=
name|ButtonTester
operator|::
name|enumNamesFromMouseButtons
argument_list|(
name|e
operator|->
name|buttons
argument_list|()
argument_list|)
decl_stmt|;
name|result
operator|+=
literal|"\n heldbuttons"
operator|+
name|buttonsString
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
name|result
expr_stmt|;
name|this
operator|->
name|setText
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_WHEELEVENT
end_ifndef
begin_function
DECL|function|wheelEvent
name|void
name|ButtonTester
operator|::
name|wheelEvent
parameter_list|(
name|QWheelEvent
modifier|*
name|e
parameter_list|)
block|{
name|QString
name|result
decl_stmt|;
if|if
condition|(
name|e
operator|->
name|delta
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|e
operator|->
name|orientation
argument_list|()
operator|==
name|Qt
operator|::
name|Vertical
condition|)
block|{
name|result
operator|=
literal|"Mouse Wheel Event: UP"
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
literal|"Mouse Wheel Event: LEFT"
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|e
operator|->
name|delta
argument_list|()
operator|<
literal|0
condition|)
block|{
if|if
condition|(
name|e
operator|->
name|orientation
argument_list|()
operator|==
name|Qt
operator|::
name|Vertical
condition|)
block|{
name|result
operator|=
literal|"Mouse Wheel Event: DOWN"
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
literal|"Mouse Wheel Event: RIGHT"
expr_stmt|;
block|}
block|}
name|qDebug
argument_list|()
operator|<<
name|result
expr_stmt|;
name|this
operator|->
name|setText
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|buttonByNumber
name|int
name|ButtonTester
operator|::
name|buttonByNumber
parameter_list|(
specifier|const
name|Qt
operator|::
name|MouseButton
name|button
parameter_list|)
block|{
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|NoButton
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|LeftButton
condition|)
return|return
literal|1
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|RightButton
condition|)
return|return
literal|2
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|MiddleButton
condition|)
return|return
literal|3
return|;
comment|/* Please note that Qt Button #4 corresponds to button #8 on all  * platforms which EMULATE wheel events by creating button events  * (Button #4 = Scroll Up; Button #5 = Scroll Down; Button #6 = Scroll  * Left; and Button #7 = Scroll Right.) This includes X11, with both  * Xlib and XCB.  So, the "raw button" for "Qt::BackButton" is  * usually described as "Button #8".   * If your platform supports "smooth scrolling", then, for the cases of  * Qt::BackButton and higher, this program will show "raw button" with a  * value which is too large. Subtract 4 to get the correct button ID for  * your platform.  */
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|BackButton
condition|)
return|return
literal|8
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|ForwardButton
condition|)
return|return
literal|9
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|TaskButton
condition|)
return|return
literal|10
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|ExtraButton4
condition|)
return|return
literal|11
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|ExtraButton5
condition|)
return|return
literal|12
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|ExtraButton6
condition|)
return|return
literal|13
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|ExtraButton7
condition|)
return|return
literal|14
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|ExtraButton8
condition|)
return|return
literal|15
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|ExtraButton9
condition|)
return|return
literal|16
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|ExtraButton10
condition|)
return|return
literal|17
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|ExtraButton11
condition|)
return|return
literal|18
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|ExtraButton12
condition|)
return|return
literal|19
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|ExtraButton13
condition|)
return|return
literal|20
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|ExtraButton14
condition|)
return|return
literal|21
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|ExtraButton15
condition|)
return|return
literal|22
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|ExtraButton16
condition|)
return|return
literal|23
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|ExtraButton17
condition|)
return|return
literal|24
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|ExtraButton18
condition|)
return|return
literal|25
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|ExtraButton19
condition|)
return|return
literal|26
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|ExtraButton20
condition|)
return|return
literal|27
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|ExtraButton21
condition|)
return|return
literal|28
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|ExtraButton22
condition|)
return|return
literal|29
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|ExtraButton23
condition|)
return|return
literal|30
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|ExtraButton24
condition|)
return|return
literal|31
return|;
name|qDebug
argument_list|(
literal|"QMouseShortcutEntry::addShortcut contained Invalid Qt::MouseButton value"
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|enumNameFromValue
name|QString
name|ButtonTester
operator|::
name|enumNameFromValue
parameter_list|(
specifier|const
name|Qt
operator|::
name|MouseButton
name|button
parameter_list|)
block|{
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|NoButton
condition|)
return|return
literal|"NoButton"
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|LeftButton
condition|)
return|return
literal|"LeftButton"
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|RightButton
condition|)
return|return
literal|"RightButton"
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|MiddleButton
condition|)
return|return
literal|"MiddleButton"
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|BackButton
condition|)
return|return
literal|"BackButton"
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|ForwardButton
condition|)
return|return
literal|"ForwardButton"
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|TaskButton
condition|)
return|return
literal|"TaskButton"
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|ExtraButton4
condition|)
return|return
literal|"ExtraButton4"
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|ExtraButton5
condition|)
return|return
literal|"ExtraButton5"
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|ExtraButton6
condition|)
return|return
literal|"ExtraButton6"
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|ExtraButton7
condition|)
return|return
literal|"ExtraButton7"
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|ExtraButton8
condition|)
return|return
literal|"ExtraButton8"
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|ExtraButton9
condition|)
return|return
literal|"ExtraButton9"
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|ExtraButton10
condition|)
return|return
literal|"ExtraButton10"
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|ExtraButton11
condition|)
return|return
literal|"ExtraButton11"
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|ExtraButton12
condition|)
return|return
literal|"ExtraButton12"
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|ExtraButton13
condition|)
return|return
literal|"ExtraButton13"
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|ExtraButton14
condition|)
return|return
literal|"ExtraButton14"
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|ExtraButton15
condition|)
return|return
literal|"ExtraButton15"
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|ExtraButton16
condition|)
return|return
literal|"ExtraButton16"
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|ExtraButton17
condition|)
return|return
literal|"ExtraButton17"
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|ExtraButton18
condition|)
return|return
literal|"ExtraButton18"
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|ExtraButton19
condition|)
return|return
literal|"ExtraButton19"
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|ExtraButton20
condition|)
return|return
literal|"ExtraButton20"
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|ExtraButton21
condition|)
return|return
literal|"ExtraButton21"
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|ExtraButton22
condition|)
return|return
literal|"ExtraButton22"
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|ExtraButton23
condition|)
return|return
literal|"ExtraButton23"
return|;
if|if
condition|(
name|button
operator|==
name|Qt
operator|::
name|ExtraButton24
condition|)
return|return
literal|"ExtraButton24"
return|;
name|qDebug
argument_list|(
literal|"QMouseShortcutEntry::addShortcut contained Invalid Qt::MouseButton value"
argument_list|)
expr_stmt|;
return|return
literal|"NoButton"
return|;
block|}
end_function
begin_function
DECL|function|enumNamesFromMouseButtons
name|QString
name|ButtonTester
operator|::
name|enumNamesFromMouseButtons
parameter_list|(
specifier|const
name|Qt
operator|::
name|MouseButtons
name|buttons
parameter_list|)
block|{
name|QString
name|returnText
init|=
literal|""
decl_stmt|;
if|if
condition|(
name|buttons
operator|==
name|Qt
operator|::
name|NoButton
condition|)
return|return
literal|"NoButton"
return|;
if|if
condition|(
name|buttons
operator|&
name|Qt
operator|::
name|LeftButton
condition|)
name|returnText
operator|+=
literal|"LeftButton "
expr_stmt|;
if|if
condition|(
name|buttons
operator|&
name|Qt
operator|::
name|RightButton
condition|)
name|returnText
operator|+=
literal|"RightButton "
expr_stmt|;
if|if
condition|(
name|buttons
operator|&
name|Qt
operator|::
name|MiddleButton
condition|)
name|returnText
operator|+=
literal|"MiddleButton "
expr_stmt|;
if|if
condition|(
name|buttons
operator|&
name|Qt
operator|::
name|BackButton
condition|)
name|returnText
operator|+=
literal|"BackButton "
expr_stmt|;
if|if
condition|(
name|buttons
operator|&
name|Qt
operator|::
name|ForwardButton
condition|)
name|returnText
operator|+=
literal|"ForwardButton "
expr_stmt|;
if|if
condition|(
name|buttons
operator|&
name|Qt
operator|::
name|TaskButton
condition|)
name|returnText
operator|+=
literal|"TaskButton "
expr_stmt|;
if|if
condition|(
name|buttons
operator|&
name|Qt
operator|::
name|ExtraButton4
condition|)
name|returnText
operator|+=
literal|"ExtraButton4 "
expr_stmt|;
if|if
condition|(
name|buttons
operator|&
name|Qt
operator|::
name|ExtraButton5
condition|)
name|returnText
operator|+=
literal|"ExtraButton5 "
expr_stmt|;
if|if
condition|(
name|buttons
operator|&
name|Qt
operator|::
name|ExtraButton6
condition|)
name|returnText
operator|+=
literal|"ExtraButton6 "
expr_stmt|;
if|if
condition|(
name|buttons
operator|&
name|Qt
operator|::
name|ExtraButton7
condition|)
name|returnText
operator|+=
literal|"ExtraButton7 "
expr_stmt|;
if|if
condition|(
name|buttons
operator|&
name|Qt
operator|::
name|ExtraButton8
condition|)
name|returnText
operator|+=
literal|"ExtraButton8 "
expr_stmt|;
if|if
condition|(
name|buttons
operator|&
name|Qt
operator|::
name|ExtraButton9
condition|)
name|returnText
operator|+=
literal|"ExtraButton9 "
expr_stmt|;
if|if
condition|(
name|buttons
operator|&
name|Qt
operator|::
name|ExtraButton10
condition|)
name|returnText
operator|+=
literal|"ExtraButton10 "
expr_stmt|;
if|if
condition|(
name|buttons
operator|&
name|Qt
operator|::
name|ExtraButton11
condition|)
name|returnText
operator|+=
literal|"ExtraButton11 "
expr_stmt|;
if|if
condition|(
name|buttons
operator|&
name|Qt
operator|::
name|ExtraButton12
condition|)
name|returnText
operator|+=
literal|"ExtraButton12 "
expr_stmt|;
if|if
condition|(
name|buttons
operator|&
name|Qt
operator|::
name|ExtraButton13
condition|)
name|returnText
operator|+=
literal|"ExtraButton13 "
expr_stmt|;
if|if
condition|(
name|buttons
operator|&
name|Qt
operator|::
name|ExtraButton14
condition|)
name|returnText
operator|+=
literal|"ExtraButton14 "
expr_stmt|;
if|if
condition|(
name|buttons
operator|&
name|Qt
operator|::
name|ExtraButton15
condition|)
name|returnText
operator|+=
literal|"ExtraButton15 "
expr_stmt|;
if|if
condition|(
name|buttons
operator|&
name|Qt
operator|::
name|ExtraButton16
condition|)
name|returnText
operator|+=
literal|"ExtraButton16 "
expr_stmt|;
if|if
condition|(
name|buttons
operator|&
name|Qt
operator|::
name|ExtraButton17
condition|)
name|returnText
operator|+=
literal|"ExtraButton17 "
expr_stmt|;
if|if
condition|(
name|buttons
operator|&
name|Qt
operator|::
name|ExtraButton18
condition|)
name|returnText
operator|+=
literal|"ExtraButton18 "
expr_stmt|;
if|if
condition|(
name|buttons
operator|&
name|Qt
operator|::
name|ExtraButton19
condition|)
name|returnText
operator|+=
literal|"ExtraButton19 "
expr_stmt|;
if|if
condition|(
name|buttons
operator|&
name|Qt
operator|::
name|ExtraButton20
condition|)
name|returnText
operator|+=
literal|"ExtraButton20 "
expr_stmt|;
if|if
condition|(
name|buttons
operator|&
name|Qt
operator|::
name|ExtraButton21
condition|)
name|returnText
operator|+=
literal|"ExtraButton21 "
expr_stmt|;
if|if
condition|(
name|buttons
operator|&
name|Qt
operator|::
name|ExtraButton22
condition|)
name|returnText
operator|+=
literal|"ExtraButton22 "
expr_stmt|;
if|if
condition|(
name|buttons
operator|&
name|Qt
operator|::
name|ExtraButton23
condition|)
name|returnText
operator|+=
literal|"ExtraButton23 "
expr_stmt|;
if|if
condition|(
name|buttons
operator|&
name|Qt
operator|::
name|ExtraButton24
condition|)
name|returnText
operator|+=
literal|"ExtraButton24 "
expr_stmt|;
return|return
name|returnText
return|;
block|}
end_function
end_unit
