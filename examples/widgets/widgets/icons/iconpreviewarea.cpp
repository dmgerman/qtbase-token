begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** BSD License Usage ** Alternatively, you may use this file under the terms of the BSD license ** as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of The Qt Company Ltd nor the names of its **     contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtWidgets>
end_include
begin_include
include|#
directive|include
file|"iconpreviewarea.h"
end_include
begin_comment
comment|//! [0]
end_comment
begin_constructor
DECL|function|IconPreviewArea
name|IconPreviewArea
operator|::
name|IconPreviewArea
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
block|{
name|QGridLayout
modifier|*
name|mainLayout
init|=
operator|new
name|QGridLayout
argument_list|(
name|this
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|NumStates
condition|;
operator|++
name|row
control|)
block|{
name|stateLabels
index|[
name|row
index|]
operator|=
name|createHeaderLabel
argument_list|(
name|IconPreviewArea
operator|::
name|iconStateNames
argument_list|()
operator|.
name|at
argument_list|(
name|row
argument_list|)
argument_list|)
expr_stmt|;
name|mainLayout
operator|->
name|addWidget
argument_list|(
name|stateLabels
index|[
name|row
index|]
argument_list|,
name|row
operator|+
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|Q_ASSERT
argument_list|(
name|NumStates
operator|==
literal|2
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|column
init|=
literal|0
init|;
name|column
operator|<
name|NumModes
condition|;
operator|++
name|column
control|)
block|{
name|modeLabels
index|[
name|column
index|]
operator|=
name|createHeaderLabel
argument_list|(
name|IconPreviewArea
operator|::
name|iconModeNames
argument_list|()
operator|.
name|at
argument_list|(
name|column
argument_list|)
argument_list|)
expr_stmt|;
name|mainLayout
operator|->
name|addWidget
argument_list|(
name|modeLabels
index|[
name|column
index|]
argument_list|,
literal|0
argument_list|,
name|column
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|Q_ASSERT
argument_list|(
name|NumModes
operator|==
literal|4
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|column
init|=
literal|0
init|;
name|column
operator|<
name|NumModes
condition|;
operator|++
name|column
control|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|NumStates
condition|;
operator|++
name|row
control|)
block|{
name|pixmapLabels
index|[
name|column
index|]
index|[
name|row
index|]
operator|=
name|createPixmapLabel
argument_list|()
expr_stmt|;
name|mainLayout
operator|->
name|addWidget
argument_list|(
name|pixmapLabels
index|[
name|column
index|]
index|[
name|row
index|]
argument_list|,
name|row
operator|+
literal|1
argument_list|,
name|column
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_constructor
begin_comment
comment|//! [0]
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|Q_COMPILER_INITIALIZER_LISTS
end_ifdef
begin_comment
comment|//! [42]
end_comment
begin_function
DECL|function|iconModes
name|QVector
argument_list|<
name|QIcon
operator|::
name|Mode
argument_list|>
name|IconPreviewArea
operator|::
name|iconModes
parameter_list|()
block|{
specifier|static
specifier|const
name|QVector
argument_list|<
name|QIcon
operator|::
name|Mode
argument_list|>
name|result
init|=
block|{
name|QIcon
operator|::
name|Normal
block|,
name|QIcon
operator|::
name|Active
block|,
name|QIcon
operator|::
name|Disabled
block|,
name|QIcon
operator|::
name|Selected
block|}
decl_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|iconStates
name|QVector
argument_list|<
name|QIcon
operator|::
name|State
argument_list|>
name|IconPreviewArea
operator|::
name|iconStates
parameter_list|()
block|{
specifier|static
specifier|const
name|QVector
argument_list|<
name|QIcon
operator|::
name|State
argument_list|>
name|result
init|=
block|{
name|QIcon
operator|::
name|Off
block|,
name|QIcon
operator|::
name|On
block|}
decl_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|iconModeNames
name|QStringList
name|IconPreviewArea
operator|::
name|iconModeNames
parameter_list|()
block|{
specifier|static
specifier|const
name|QStringList
name|result
init|=
block|{
name|tr
argument_list|(
literal|"Normal"
argument_list|)
block|,
name|tr
argument_list|(
literal|"Active"
argument_list|)
block|,
name|tr
argument_list|(
literal|"Disabled"
argument_list|)
block|,
name|tr
argument_list|(
literal|"Selected"
argument_list|)
block|}
decl_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|iconStateNames
name|QStringList
name|IconPreviewArea
operator|::
name|iconStateNames
parameter_list|()
block|{
specifier|static
specifier|const
name|QStringList
name|result
init|=
block|{
name|tr
argument_list|(
literal|"Off"
argument_list|)
block|,
name|tr
argument_list|(
literal|"On"
argument_list|)
block|}
decl_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|//! [42]
end_comment
begin_else
else|#
directive|else
end_else
begin_comment
comment|// Q_COMPILER_INITIALIZER_LISTS
end_comment
begin_comment
comment|//! [43]
end_comment
begin_function
DECL|function|iconModes
name|QVector
argument_list|<
name|QIcon
operator|::
name|Mode
argument_list|>
name|IconPreviewArea
operator|::
name|iconModes
parameter_list|()
block|{
specifier|static
name|QVector
argument_list|<
name|QIcon
operator|::
name|Mode
argument_list|>
name|result
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
name|result
operator|<<
name|QIcon
operator|::
name|Normal
operator|<<
name|QIcon
operator|::
name|Active
operator|<<
name|QIcon
operator|::
name|Disabled
operator|<<
name|QIcon
operator|::
name|Selected
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|//! [43]
end_comment
begin_function
DECL|function|iconStates
name|QVector
argument_list|<
name|QIcon
operator|::
name|State
argument_list|>
name|IconPreviewArea
operator|::
name|iconStates
parameter_list|()
block|{
specifier|static
name|QVector
argument_list|<
name|QIcon
operator|::
name|State
argument_list|>
name|result
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
name|result
operator|<<
name|QIcon
operator|::
name|Off
operator|<<
name|QIcon
operator|::
name|On
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|iconModeNames
name|QStringList
name|IconPreviewArea
operator|::
name|iconModeNames
parameter_list|()
block|{
specifier|static
name|QStringList
name|result
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
name|result
operator|<<
name|tr
argument_list|(
literal|"Normal"
argument_list|)
operator|<<
name|tr
argument_list|(
literal|"Active"
argument_list|)
operator|<<
name|tr
argument_list|(
literal|"Disabled"
argument_list|)
operator|<<
name|tr
argument_list|(
literal|"Selected"
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|iconStateNames
name|QStringList
name|IconPreviewArea
operator|::
name|iconStateNames
parameter_list|()
block|{
specifier|static
name|QStringList
name|result
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
name|result
operator|<<
name|tr
argument_list|(
literal|"Off"
argument_list|)
operator|<<
name|tr
argument_list|(
literal|"On"
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !Q_COMPILER_INITIALIZER_LISTS
end_comment
begin_comment
comment|//! [1]
end_comment
begin_function
DECL|function|setIcon
name|void
name|IconPreviewArea
operator|::
name|setIcon
parameter_list|(
specifier|const
name|QIcon
modifier|&
name|icon
parameter_list|)
block|{
name|this
operator|->
name|icon
operator|=
name|icon
expr_stmt|;
name|updatePixmapLabels
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [1]
end_comment
begin_comment
comment|//! [2]
end_comment
begin_function
DECL|function|setSize
name|void
name|IconPreviewArea
operator|::
name|setSize
parameter_list|(
specifier|const
name|QSize
modifier|&
name|size
parameter_list|)
block|{
if|if
condition|(
name|size
operator|!=
name|this
operator|->
name|size
condition|)
block|{
name|this
operator|->
name|size
operator|=
name|size
expr_stmt|;
name|updatePixmapLabels
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|//! [2]
end_comment
begin_comment
comment|//! [3]
end_comment
begin_function
DECL|function|createHeaderLabel
name|QLabel
modifier|*
name|IconPreviewArea
operator|::
name|createHeaderLabel
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|QLabel
modifier|*
name|label
init|=
operator|new
name|QLabel
argument_list|(
name|tr
argument_list|(
literal|"<b>%1</b>"
argument_list|)
operator|.
name|arg
argument_list|(
name|text
argument_list|)
argument_list|)
decl_stmt|;
name|label
operator|->
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignCenter
argument_list|)
expr_stmt|;
return|return
name|label
return|;
block|}
end_function
begin_comment
comment|//! [3]
end_comment
begin_comment
comment|//! [4]
end_comment
begin_function
DECL|function|createPixmapLabel
name|QLabel
modifier|*
name|IconPreviewArea
operator|::
name|createPixmapLabel
parameter_list|()
block|{
name|QLabel
modifier|*
name|label
init|=
operator|new
name|QLabel
decl_stmt|;
name|label
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|label
operator|->
name|setAlignment
argument_list|(
name|Qt
operator|::
name|AlignCenter
argument_list|)
expr_stmt|;
name|label
operator|->
name|setFrameShape
argument_list|(
name|QFrame
operator|::
name|Box
argument_list|)
expr_stmt|;
name|label
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Expanding
argument_list|,
name|QSizePolicy
operator|::
name|Expanding
argument_list|)
expr_stmt|;
name|label
operator|->
name|setBackgroundRole
argument_list|(
name|QPalette
operator|::
name|Base
argument_list|)
expr_stmt|;
name|label
operator|->
name|setAutoFillBackground
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|label
operator|->
name|setMinimumSize
argument_list|(
literal|132
argument_list|,
literal|132
argument_list|)
expr_stmt|;
return|return
name|label
return|;
block|}
end_function
begin_comment
comment|//! [4]
end_comment
begin_comment
comment|//! [5]
end_comment
begin_function
DECL|function|updatePixmapLabels
name|void
name|IconPreviewArea
operator|::
name|updatePixmapLabels
parameter_list|()
block|{
name|QWindow
modifier|*
name|window
init|=
name|Q_NULLPTR
decl_stmt|;
if|if
condition|(
specifier|const
name|QWidget
modifier|*
name|nativeParent
init|=
name|nativeParentWidget
argument_list|()
condition|)
name|window
operator|=
name|nativeParent
operator|->
name|windowHandle
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|column
init|=
literal|0
init|;
name|column
operator|<
name|NumModes
condition|;
operator|++
name|column
control|)
block|{
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|NumStates
condition|;
operator|++
name|row
control|)
block|{
specifier|const
name|QPixmap
name|pixmap
init|=
name|icon
operator|.
name|pixmap
argument_list|(
name|window
argument_list|,
name|size
argument_list|,
name|IconPreviewArea
operator|::
name|iconModes
argument_list|()
operator|.
name|at
argument_list|(
name|column
argument_list|)
argument_list|,
name|IconPreviewArea
operator|::
name|iconStates
argument_list|()
operator|.
name|at
argument_list|(
name|row
argument_list|)
argument_list|)
decl_stmt|;
name|QLabel
modifier|*
name|pixmapLabel
init|=
name|pixmapLabels
index|[
name|column
index|]
index|[
name|row
index|]
decl_stmt|;
name|pixmapLabel
operator|->
name|setPixmap
argument_list|(
name|pixmap
argument_list|)
expr_stmt|;
name|pixmapLabel
operator|->
name|setEnabled
argument_list|(
operator|!
name|pixmap
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|toolTip
decl_stmt|;
if|if
condition|(
operator|!
name|pixmap
operator|.
name|isNull
argument_list|()
condition|)
block|{
specifier|const
name|QSize
name|actualSize
init|=
name|icon
operator|.
name|actualSize
argument_list|(
name|size
argument_list|)
decl_stmt|;
name|toolTip
operator|=
name|tr
argument_list|(
literal|"Size: %1x%2\nActual size: %3x%4\nDevice pixel ratio: %5"
argument_list|)
operator|.
name|arg
argument_list|(
name|size
operator|.
name|width
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|size
operator|.
name|height
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|actualSize
operator|.
name|width
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|actualSize
operator|.
name|height
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|pixmap
operator|.
name|devicePixelRatioF
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|pixmapLabel
operator|->
name|setToolTip
argument_list|(
name|toolTip
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|//! [5]
end_comment
end_unit
