begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names **     of its contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|TETRIXPIECE_H
end_ifndef
begin_define
DECL|macro|TETRIXPIECE_H
define|#
directive|define
name|TETRIXPIECE_H
end_define
begin_enum
DECL|enum|TetrixShape
DECL|enumerator|NoShape
DECL|enumerator|ZShape
DECL|enumerator|SShape
DECL|enumerator|LineShape
DECL|enumerator|TShape
DECL|enumerator|SquareShape
enum|enum
name|TetrixShape
block|{
name|NoShape
block|,
name|ZShape
block|,
name|SShape
block|,
name|LineShape
block|,
name|TShape
block|,
name|SquareShape
block|,
DECL|enumerator|LShape
DECL|enumerator|MirroredLShape
name|LShape
block|,
name|MirroredLShape
block|}
enum|;
end_enum
begin_comment
comment|//! [0]
end_comment
begin_decl_stmt
name|class
name|TetrixPiece
block|{
name|public
label|:
name|TetrixPiece
argument_list|()
block|{
name|setShape
argument_list|(
name|NoShape
argument_list|)
expr_stmt|;
block|}
name|void
name|setRandomShape
parameter_list|()
function_decl|;
name|void
name|setShape
parameter_list|(
name|TetrixShape
name|shape
parameter_list|)
function_decl|;
name|TetrixShape
name|shape
argument_list|()
specifier|const
block|{
return|return
name|pieceShape
return|;
block|}
name|int
name|x
argument_list|(
name|int
name|index
argument_list|)
decl|const
block|{
return|return
name|coords
index|[
name|index
index|]
index|[
literal|0
index|]
return|;
block|}
name|int
name|y
argument_list|(
name|int
name|index
argument_list|)
decl|const
block|{
return|return
name|coords
index|[
name|index
index|]
index|[
literal|1
index|]
return|;
block|}
name|int
name|minX
argument_list|()
specifier|const
expr_stmt|;
name|int
name|maxX
argument_list|()
specifier|const
expr_stmt|;
name|int
name|minY
argument_list|()
specifier|const
expr_stmt|;
name|int
name|maxY
argument_list|()
specifier|const
expr_stmt|;
name|TetrixPiece
name|rotatedLeft
argument_list|()
specifier|const
expr_stmt|;
name|TetrixPiece
name|rotatedRight
argument_list|()
specifier|const
expr_stmt|;
name|private
label|:
name|void
name|setX
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|x
parameter_list|)
block|{
name|coords
index|[
name|index
index|]
index|[
literal|0
index|]
operator|=
name|x
expr_stmt|;
block|}
name|void
name|setY
parameter_list|(
name|int
name|index
parameter_list|,
name|int
name|y
parameter_list|)
block|{
name|coords
index|[
name|index
index|]
index|[
literal|1
index|]
operator|=
name|y
expr_stmt|;
block|}
name|TetrixShape
name|pieceShape
decl_stmt|;
name|int
name|coords
index|[
literal|4
index|]
index|[
literal|2
index|]
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_comment
comment|//! [0]
end_comment
begin_endif
endif|#
directive|endif
end_endif
end_unit
