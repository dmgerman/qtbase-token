begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names **     of its contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<math.h>
end_include
begin_include
include|#
directive|include
file|<QtWidgets>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|M_PI
end_ifndef
begin_define
DECL|macro|M_PI
define|#
directive|define
name|M_PI
value|3.1415927
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"pieview.h"
end_include
begin_constructor
DECL|function|PieView
name|PieView
operator|::
name|PieView
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractItemView
argument_list|(
name|parent
argument_list|)
block|{
name|horizontalScrollBar
argument_list|()
operator|->
name|setRange
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|verticalScrollBar
argument_list|()
operator|->
name|setRange
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|margin
operator|=
literal|8
expr_stmt|;
name|totalSize
operator|=
literal|300
expr_stmt|;
name|pieSize
operator|=
name|totalSize
operator|-
literal|2
operator|*
name|margin
expr_stmt|;
name|validItems
operator|=
literal|0
expr_stmt|;
name|totalValue
operator|=
literal|0.0
expr_stmt|;
name|rubberBand
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|dataChanged
name|void
name|PieView
operator|::
name|dataChanged
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|topLeft
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|bottomRight
parameter_list|,
specifier|const
name|QVector
argument_list|<
name|int
argument_list|>
modifier|&
parameter_list|)
block|{
name|QAbstractItemView
operator|::
name|dataChanged
argument_list|(
name|topLeft
argument_list|,
name|bottomRight
argument_list|)
expr_stmt|;
name|validItems
operator|=
literal|0
expr_stmt|;
name|totalValue
operator|=
literal|0.0
expr_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|model
argument_list|()
operator|->
name|rowCount
argument_list|(
name|rootIndex
argument_list|()
argument_list|)
condition|;
operator|++
name|row
control|)
block|{
name|QModelIndex
name|index
init|=
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|row
argument_list|,
literal|1
argument_list|,
name|rootIndex
argument_list|()
argument_list|)
decl_stmt|;
name|double
name|value
init|=
name|model
argument_list|()
operator|->
name|data
argument_list|(
name|index
argument_list|)
operator|.
name|toDouble
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|>
literal|0.0
condition|)
block|{
name|totalValue
operator|+=
name|value
expr_stmt|;
name|validItems
operator|++
expr_stmt|;
block|}
block|}
name|viewport
argument_list|()
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|edit
name|bool
name|PieView
operator|::
name|edit
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
name|EditTrigger
name|trigger
parameter_list|,
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|index
operator|.
name|column
argument_list|()
operator|==
literal|0
condition|)
return|return
name|QAbstractItemView
operator|::
name|edit
argument_list|(
name|index
argument_list|,
name|trigger
argument_list|,
name|event
argument_list|)
return|;
else|else
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*     Returns the item that covers the coordinate given in the view. */
end_comment
begin_function
DECL|function|indexAt
name|QModelIndex
name|PieView
operator|::
name|indexAt
parameter_list|(
specifier|const
name|QPoint
modifier|&
name|point
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|validItems
operator|==
literal|0
condition|)
return|return
name|QModelIndex
argument_list|()
return|;
comment|// Transform the view coordinates into contents widget coordinates.
name|int
name|wx
init|=
name|point
operator|.
name|x
argument_list|()
operator|+
name|horizontalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
decl_stmt|;
name|int
name|wy
init|=
name|point
operator|.
name|y
argument_list|()
operator|+
name|verticalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
decl_stmt|;
if|if
condition|(
name|wx
operator|<
name|totalSize
condition|)
block|{
name|double
name|cx
init|=
name|wx
operator|-
name|totalSize
operator|/
literal|2
decl_stmt|;
name|double
name|cy
init|=
name|totalSize
operator|/
literal|2
operator|-
name|wy
decl_stmt|;
comment|// positive cy for items above the center
comment|// Determine the distance from the center point of the pie chart.
name|double
name|d
init|=
name|pow
argument_list|(
name|pow
argument_list|(
name|cx
argument_list|,
literal|2
argument_list|)
operator|+
name|pow
argument_list|(
name|cy
argument_list|,
literal|2
argument_list|)
argument_list|,
literal|0.5
argument_list|)
decl_stmt|;
if|if
condition|(
name|d
operator|==
literal|0
operator|||
name|d
operator|>
name|pieSize
operator|/
literal|2
condition|)
return|return
name|QModelIndex
argument_list|()
return|;
comment|// Determine the angle of the point.
name|double
name|angle
init|=
operator|(
literal|180
operator|/
name|M_PI
operator|)
operator|*
name|acos
argument_list|(
name|cx
operator|/
name|d
argument_list|)
decl_stmt|;
if|if
condition|(
name|cy
operator|<
literal|0
condition|)
name|angle
operator|=
literal|360
operator|-
name|angle
expr_stmt|;
comment|// Find the relevant slice of the pie.
name|double
name|startAngle
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|model
argument_list|()
operator|->
name|rowCount
argument_list|(
name|rootIndex
argument_list|()
argument_list|)
condition|;
operator|++
name|row
control|)
block|{
name|QModelIndex
name|index
init|=
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|row
argument_list|,
literal|1
argument_list|,
name|rootIndex
argument_list|()
argument_list|)
decl_stmt|;
name|double
name|value
init|=
name|model
argument_list|()
operator|->
name|data
argument_list|(
name|index
argument_list|)
operator|.
name|toDouble
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|>
literal|0.0
condition|)
block|{
name|double
name|sliceAngle
init|=
literal|360
operator|*
name|value
operator|/
name|totalValue
decl_stmt|;
if|if
condition|(
name|angle
operator|>=
name|startAngle
operator|&&
name|angle
operator|<
operator|(
name|startAngle
operator|+
name|sliceAngle
operator|)
condition|)
return|return
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|row
argument_list|,
literal|1
argument_list|,
name|rootIndex
argument_list|()
argument_list|)
return|;
name|startAngle
operator|+=
name|sliceAngle
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|double
name|itemHeight
init|=
name|QFontMetrics
argument_list|(
name|viewOptions
argument_list|()
operator|.
name|font
argument_list|)
operator|.
name|height
argument_list|()
decl_stmt|;
name|int
name|listItem
init|=
name|int
argument_list|(
operator|(
name|wy
operator|-
name|margin
operator|)
operator|/
name|itemHeight
argument_list|)
decl_stmt|;
name|int
name|validRow
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|model
argument_list|()
operator|->
name|rowCount
argument_list|(
name|rootIndex
argument_list|()
argument_list|)
condition|;
operator|++
name|row
control|)
block|{
name|QModelIndex
name|index
init|=
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|row
argument_list|,
literal|1
argument_list|,
name|rootIndex
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|model
argument_list|()
operator|->
name|data
argument_list|(
name|index
argument_list|)
operator|.
name|toDouble
argument_list|()
operator|>
literal|0.0
condition|)
block|{
if|if
condition|(
name|listItem
operator|==
name|validRow
condition|)
return|return
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|rootIndex
argument_list|()
argument_list|)
return|;
comment|// Update the list index that corresponds to the next valid row.
operator|++
name|validRow
expr_stmt|;
block|}
block|}
block|}
return|return
name|QModelIndex
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|isIndexHidden
name|bool
name|PieView
operator|::
name|isIndexHidden
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
comment|/*index*/
parameter_list|)
specifier|const
block|{
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|/*     Returns the rectangle of the item at position \a index in the     model. The rectangle is in contents coordinates. */
end_comment
begin_function
DECL|function|itemRect
name|QRect
name|PieView
operator|::
name|itemRect
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QRect
argument_list|()
return|;
comment|// Check whether the index's row is in the list of rows represented
comment|// by slices.
name|QModelIndex
name|valueIndex
decl_stmt|;
if|if
condition|(
name|index
operator|.
name|column
argument_list|()
operator|!=
literal|1
condition|)
name|valueIndex
operator|=
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|,
literal|1
argument_list|,
name|rootIndex
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|valueIndex
operator|=
name|index
expr_stmt|;
if|if
condition|(
name|model
argument_list|()
operator|->
name|data
argument_list|(
name|valueIndex
argument_list|)
operator|.
name|toDouble
argument_list|()
operator|<=
literal|0.0
condition|)
return|return
name|QRect
argument_list|()
return|;
name|int
name|listItem
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
name|index
operator|.
name|row
argument_list|()
operator|-
literal|1
init|;
name|row
operator|>=
literal|0
condition|;
operator|--
name|row
control|)
block|{
if|if
condition|(
name|model
argument_list|()
operator|->
name|data
argument_list|(
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|row
argument_list|,
literal|1
argument_list|,
name|rootIndex
argument_list|()
argument_list|)
argument_list|)
operator|.
name|toDouble
argument_list|()
operator|>
literal|0.0
condition|)
name|listItem
operator|++
expr_stmt|;
block|}
name|double
name|itemHeight
decl_stmt|;
switch|switch
condition|(
name|index
operator|.
name|column
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
name|itemHeight
operator|=
name|QFontMetrics
argument_list|(
name|viewOptions
argument_list|()
operator|.
name|font
argument_list|)
operator|.
name|height
argument_list|()
expr_stmt|;
return|return
name|QRect
argument_list|(
name|totalSize
argument_list|,
name|int
argument_list|(
name|margin
operator|+
name|listItem
operator|*
name|itemHeight
argument_list|)
argument_list|,
name|totalSize
operator|-
name|margin
argument_list|,
name|int
argument_list|(
name|itemHeight
argument_list|)
argument_list|)
return|;
case|case
literal|1
case|:
return|return
name|viewport
argument_list|()
operator|->
name|rect
argument_list|()
return|;
block|}
return|return
name|QRect
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|itemRegion
name|QRegion
name|PieView
operator|::
name|itemRegion
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QRegion
argument_list|()
return|;
if|if
condition|(
name|index
operator|.
name|column
argument_list|()
operator|!=
literal|1
condition|)
return|return
name|itemRect
argument_list|(
name|index
argument_list|)
return|;
if|if
condition|(
name|model
argument_list|()
operator|->
name|data
argument_list|(
name|index
argument_list|)
operator|.
name|toDouble
argument_list|()
operator|<=
literal|0.0
condition|)
return|return
name|QRegion
argument_list|()
return|;
name|double
name|startAngle
init|=
literal|0.0
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|model
argument_list|()
operator|->
name|rowCount
argument_list|(
name|rootIndex
argument_list|()
argument_list|)
condition|;
operator|++
name|row
control|)
block|{
name|QModelIndex
name|sliceIndex
init|=
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|row
argument_list|,
literal|1
argument_list|,
name|rootIndex
argument_list|()
argument_list|)
decl_stmt|;
name|double
name|value
init|=
name|model
argument_list|()
operator|->
name|data
argument_list|(
name|sliceIndex
argument_list|)
operator|.
name|toDouble
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|>
literal|0.0
condition|)
block|{
name|double
name|angle
init|=
literal|360
operator|*
name|value
operator|/
name|totalValue
decl_stmt|;
if|if
condition|(
name|sliceIndex
operator|==
name|index
condition|)
block|{
name|QPainterPath
name|slicePath
decl_stmt|;
name|slicePath
operator|.
name|moveTo
argument_list|(
name|totalSize
operator|/
literal|2
argument_list|,
name|totalSize
operator|/
literal|2
argument_list|)
expr_stmt|;
name|slicePath
operator|.
name|arcTo
argument_list|(
name|margin
argument_list|,
name|margin
argument_list|,
name|margin
operator|+
name|pieSize
argument_list|,
name|margin
operator|+
name|pieSize
argument_list|,
name|startAngle
argument_list|,
name|angle
argument_list|)
expr_stmt|;
name|slicePath
operator|.
name|closeSubpath
argument_list|()
expr_stmt|;
return|return
name|QRegion
argument_list|(
name|slicePath
operator|.
name|toFillPolygon
argument_list|()
operator|.
name|toPolygon
argument_list|()
argument_list|)
return|;
block|}
name|startAngle
operator|+=
name|angle
expr_stmt|;
block|}
block|}
return|return
name|QRegion
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|horizontalOffset
name|int
name|PieView
operator|::
name|horizontalOffset
parameter_list|()
specifier|const
block|{
return|return
name|horizontalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|mousePressEvent
name|void
name|PieView
operator|::
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|QAbstractItemView
operator|::
name|mousePressEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|origin
operator|=
name|event
operator|->
name|pos
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|rubberBand
condition|)
name|rubberBand
operator|=
operator|new
name|QRubberBand
argument_list|(
name|QRubberBand
operator|::
name|Rectangle
argument_list|,
name|viewport
argument_list|()
argument_list|)
expr_stmt|;
name|rubberBand
operator|->
name|setGeometry
argument_list|(
name|QRect
argument_list|(
name|origin
argument_list|,
name|QSize
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rubberBand
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mouseMoveEvent
name|void
name|PieView
operator|::
name|mouseMoveEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|rubberBand
condition|)
name|rubberBand
operator|->
name|setGeometry
argument_list|(
name|QRect
argument_list|(
name|origin
argument_list|,
name|event
operator|->
name|pos
argument_list|()
argument_list|)
operator|.
name|normalized
argument_list|()
argument_list|)
expr_stmt|;
name|QAbstractItemView
operator|::
name|mouseMoveEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mouseReleaseEvent
name|void
name|PieView
operator|::
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|QAbstractItemView
operator|::
name|mouseReleaseEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
if|if
condition|(
name|rubberBand
condition|)
name|rubberBand
operator|->
name|hide
argument_list|()
expr_stmt|;
name|viewport
argument_list|()
operator|->
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|moveCursor
name|QModelIndex
name|PieView
operator|::
name|moveCursor
parameter_list|(
name|QAbstractItemView
operator|::
name|CursorAction
name|cursorAction
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
comment|/*modifiers*/
parameter_list|)
block|{
name|QModelIndex
name|current
init|=
name|currentIndex
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|cursorAction
condition|)
block|{
case|case
name|MoveLeft
case|:
case|case
name|MoveUp
case|:
if|if
condition|(
name|current
operator|.
name|row
argument_list|()
operator|>
literal|0
condition|)
name|current
operator|=
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|current
operator|.
name|row
argument_list|()
operator|-
literal|1
argument_list|,
name|current
operator|.
name|column
argument_list|()
argument_list|,
name|rootIndex
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|current
operator|=
name|model
argument_list|()
operator|->
name|index
argument_list|(
literal|0
argument_list|,
name|current
operator|.
name|column
argument_list|()
argument_list|,
name|rootIndex
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|MoveRight
case|:
case|case
name|MoveDown
case|:
if|if
condition|(
name|current
operator|.
name|row
argument_list|()
operator|<
name|rows
argument_list|(
name|current
argument_list|)
operator|-
literal|1
condition|)
name|current
operator|=
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|current
operator|.
name|row
argument_list|()
operator|+
literal|1
argument_list|,
name|current
operator|.
name|column
argument_list|()
argument_list|,
name|rootIndex
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|current
operator|=
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|rows
argument_list|(
name|current
argument_list|)
operator|-
literal|1
argument_list|,
name|current
operator|.
name|column
argument_list|()
argument_list|,
name|rootIndex
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
name|viewport
argument_list|()
operator|->
name|update
argument_list|()
expr_stmt|;
return|return
name|current
return|;
block|}
end_function
begin_function
DECL|function|paintEvent
name|void
name|PieView
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
name|event
parameter_list|)
block|{
name|QItemSelectionModel
modifier|*
name|selections
init|=
name|selectionModel
argument_list|()
decl_stmt|;
name|QStyleOptionViewItem
name|option
init|=
name|viewOptions
argument_list|()
decl_stmt|;
name|QBrush
name|background
init|=
name|option
operator|.
name|palette
operator|.
name|base
argument_list|()
decl_stmt|;
name|QPen
name|foreground
argument_list|(
name|option
operator|.
name|palette
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|WindowText
argument_list|)
argument_list|)
decl_stmt|;
name|QPainter
name|painter
argument_list|(
name|viewport
argument_list|()
argument_list|)
decl_stmt|;
name|painter
operator|.
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|Antialiasing
argument_list|)
expr_stmt|;
name|painter
operator|.
name|fillRect
argument_list|(
name|event
operator|->
name|rect
argument_list|()
argument_list|,
name|background
argument_list|)
expr_stmt|;
name|painter
operator|.
name|setPen
argument_list|(
name|foreground
argument_list|)
expr_stmt|;
comment|// Viewport rectangles
name|QRect
name|pieRect
init|=
name|QRect
argument_list|(
name|margin
argument_list|,
name|margin
argument_list|,
name|pieSize
argument_list|,
name|pieSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|validItems
operator|<=
literal|0
condition|)
return|return;
name|painter
operator|.
name|save
argument_list|()
expr_stmt|;
name|painter
operator|.
name|translate
argument_list|(
name|pieRect
operator|.
name|x
argument_list|()
operator|-
name|horizontalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
argument_list|,
name|pieRect
operator|.
name|y
argument_list|()
operator|-
name|verticalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|.
name|drawEllipse
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|pieSize
argument_list|,
name|pieSize
argument_list|)
expr_stmt|;
name|double
name|startAngle
init|=
literal|0.0
decl_stmt|;
name|int
name|row
decl_stmt|;
for|for
control|(
name|row
operator|=
literal|0
init|;
name|row
operator|<
name|model
argument_list|()
operator|->
name|rowCount
argument_list|(
name|rootIndex
argument_list|()
argument_list|)
condition|;
operator|++
name|row
control|)
block|{
name|QModelIndex
name|index
init|=
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|row
argument_list|,
literal|1
argument_list|,
name|rootIndex
argument_list|()
argument_list|)
decl_stmt|;
name|double
name|value
init|=
name|model
argument_list|()
operator|->
name|data
argument_list|(
name|index
argument_list|)
operator|.
name|toDouble
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|>
literal|0.0
condition|)
block|{
name|double
name|angle
init|=
literal|360
operator|*
name|value
operator|/
name|totalValue
decl_stmt|;
name|QModelIndex
name|colorIndex
init|=
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|rootIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QColor
name|color
init|=
name|QColor
argument_list|(
name|model
argument_list|()
operator|->
name|data
argument_list|(
name|colorIndex
argument_list|,
name|Qt
operator|::
name|DecorationRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentIndex
argument_list|()
operator|==
name|index
condition|)
name|painter
operator|.
name|setBrush
argument_list|(
name|QBrush
argument_list|(
name|color
argument_list|,
name|Qt
operator|::
name|Dense4Pattern
argument_list|)
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|selections
operator|->
name|isSelected
argument_list|(
name|index
argument_list|)
condition|)
name|painter
operator|.
name|setBrush
argument_list|(
name|QBrush
argument_list|(
name|color
argument_list|,
name|Qt
operator|::
name|Dense3Pattern
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|painter
operator|.
name|setBrush
argument_list|(
name|QBrush
argument_list|(
name|color
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|.
name|drawPie
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|pieSize
argument_list|,
name|pieSize
argument_list|,
name|int
argument_list|(
name|startAngle
operator|*
literal|16
argument_list|)
argument_list|,
name|int
argument_list|(
name|angle
operator|*
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|startAngle
operator|+=
name|angle
expr_stmt|;
block|}
block|}
name|painter
operator|.
name|restore
argument_list|()
expr_stmt|;
name|int
name|keyNumber
init|=
literal|0
decl_stmt|;
for|for
control|(
name|row
operator|=
literal|0
init|;
name|row
operator|<
name|model
argument_list|()
operator|->
name|rowCount
argument_list|(
name|rootIndex
argument_list|()
argument_list|)
condition|;
operator|++
name|row
control|)
block|{
name|QModelIndex
name|index
init|=
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|row
argument_list|,
literal|1
argument_list|,
name|rootIndex
argument_list|()
argument_list|)
decl_stmt|;
name|double
name|value
init|=
name|model
argument_list|()
operator|->
name|data
argument_list|(
name|index
argument_list|)
operator|.
name|toDouble
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|>
literal|0.0
condition|)
block|{
name|QModelIndex
name|labelIndex
init|=
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|row
argument_list|,
literal|0
argument_list|,
name|rootIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QStyleOptionViewItem
name|option
init|=
name|viewOptions
argument_list|()
decl_stmt|;
name|option
operator|.
name|rect
operator|=
name|visualRect
argument_list|(
name|labelIndex
argument_list|)
expr_stmt|;
if|if
condition|(
name|selections
operator|->
name|isSelected
argument_list|(
name|labelIndex
argument_list|)
condition|)
name|option
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_Selected
expr_stmt|;
if|if
condition|(
name|currentIndex
argument_list|()
operator|==
name|labelIndex
condition|)
name|option
operator|.
name|state
operator||=
name|QStyle
operator|::
name|State_HasFocus
expr_stmt|;
name|itemDelegate
argument_list|()
operator|->
name|paint
argument_list|(
operator|&
name|painter
argument_list|,
name|option
argument_list|,
name|labelIndex
argument_list|)
expr_stmt|;
operator|++
name|keyNumber
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|resizeEvent
name|void
name|PieView
operator|::
name|resizeEvent
parameter_list|(
name|QResizeEvent
modifier|*
comment|/* event */
parameter_list|)
block|{
name|updateGeometries
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rows
name|int
name|PieView
operator|::
name|rows
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
return|return
name|model
argument_list|()
operator|->
name|rowCount
argument_list|(
name|model
argument_list|()
operator|->
name|parent
argument_list|(
name|index
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|rowsInserted
name|void
name|PieView
operator|::
name|rowsInserted
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
for|for
control|(
name|int
name|row
init|=
name|start
init|;
name|row
operator|<=
name|end
condition|;
operator|++
name|row
control|)
block|{
name|QModelIndex
name|index
init|=
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|row
argument_list|,
literal|1
argument_list|,
name|rootIndex
argument_list|()
argument_list|)
decl_stmt|;
name|double
name|value
init|=
name|model
argument_list|()
operator|->
name|data
argument_list|(
name|index
argument_list|)
operator|.
name|toDouble
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|>
literal|0.0
condition|)
block|{
name|totalValue
operator|+=
name|value
expr_stmt|;
operator|++
name|validItems
expr_stmt|;
block|}
block|}
name|QAbstractItemView
operator|::
name|rowsInserted
argument_list|(
name|parent
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rowsAboutToBeRemoved
name|void
name|PieView
operator|::
name|rowsAboutToBeRemoved
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|,
name|int
name|start
parameter_list|,
name|int
name|end
parameter_list|)
block|{
for|for
control|(
name|int
name|row
init|=
name|start
init|;
name|row
operator|<=
name|end
condition|;
operator|++
name|row
control|)
block|{
name|QModelIndex
name|index
init|=
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|row
argument_list|,
literal|1
argument_list|,
name|rootIndex
argument_list|()
argument_list|)
decl_stmt|;
name|double
name|value
init|=
name|model
argument_list|()
operator|->
name|data
argument_list|(
name|index
argument_list|)
operator|.
name|toDouble
argument_list|()
decl_stmt|;
if|if
condition|(
name|value
operator|>
literal|0.0
condition|)
block|{
name|totalValue
operator|-=
name|value
expr_stmt|;
operator|--
name|validItems
expr_stmt|;
block|}
block|}
name|QAbstractItemView
operator|::
name|rowsAboutToBeRemoved
argument_list|(
name|parent
argument_list|,
name|start
argument_list|,
name|end
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|scrollContentsBy
name|void
name|PieView
operator|::
name|scrollContentsBy
parameter_list|(
name|int
name|dx
parameter_list|,
name|int
name|dy
parameter_list|)
block|{
name|viewport
argument_list|()
operator|->
name|scroll
argument_list|(
name|dx
argument_list|,
name|dy
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|scrollTo
name|void
name|PieView
operator|::
name|scrollTo
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
name|ScrollHint
parameter_list|)
block|{
name|QRect
name|area
init|=
name|viewport
argument_list|()
operator|->
name|rect
argument_list|()
decl_stmt|;
name|QRect
name|rect
init|=
name|visualRect
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|rect
operator|.
name|left
argument_list|()
operator|<
name|area
operator|.
name|left
argument_list|()
condition|)
block|{
name|horizontalScrollBar
argument_list|()
operator|->
name|setValue
argument_list|(
name|horizontalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
operator|+
name|rect
operator|.
name|left
argument_list|()
operator|-
name|area
operator|.
name|left
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rect
operator|.
name|right
argument_list|()
operator|>
name|area
operator|.
name|right
argument_list|()
condition|)
block|{
name|horizontalScrollBar
argument_list|()
operator|->
name|setValue
argument_list|(
name|horizontalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
operator|+
name|qMin
argument_list|(
name|rect
operator|.
name|right
argument_list|()
operator|-
name|area
operator|.
name|right
argument_list|()
argument_list|,
name|rect
operator|.
name|left
argument_list|()
operator|-
name|area
operator|.
name|left
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|rect
operator|.
name|top
argument_list|()
operator|<
name|area
operator|.
name|top
argument_list|()
condition|)
block|{
name|verticalScrollBar
argument_list|()
operator|->
name|setValue
argument_list|(
name|verticalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
operator|+
name|rect
operator|.
name|top
argument_list|()
operator|-
name|area
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|rect
operator|.
name|bottom
argument_list|()
operator|>
name|area
operator|.
name|bottom
argument_list|()
condition|)
block|{
name|verticalScrollBar
argument_list|()
operator|->
name|setValue
argument_list|(
name|verticalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
operator|+
name|qMin
argument_list|(
name|rect
operator|.
name|bottom
argument_list|()
operator|-
name|area
operator|.
name|bottom
argument_list|()
argument_list|,
name|rect
operator|.
name|top
argument_list|()
operator|-
name|area
operator|.
name|top
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     Find the indices corresponding to the extent of the selection. */
end_comment
begin_function
DECL|function|setSelection
name|void
name|PieView
operator|::
name|setSelection
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|QItemSelectionModel
operator|::
name|SelectionFlags
name|command
parameter_list|)
block|{
comment|// Use content widget coordinates because we will use the itemRegion()
comment|// function to check for intersections.
name|QRect
name|contentsRect
init|=
name|rect
operator|.
name|translated
argument_list|(
name|horizontalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
argument_list|,
name|verticalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
argument_list|)
operator|.
name|normalized
argument_list|()
decl_stmt|;
name|int
name|rows
init|=
name|model
argument_list|()
operator|->
name|rowCount
argument_list|(
name|rootIndex
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|columns
init|=
name|model
argument_list|()
operator|->
name|columnCount
argument_list|(
name|rootIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QModelIndexList
name|indexes
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|rows
condition|;
operator|++
name|row
control|)
block|{
for|for
control|(
name|int
name|column
init|=
literal|0
init|;
name|column
operator|<
name|columns
condition|;
operator|++
name|column
control|)
block|{
name|QModelIndex
name|index
init|=
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|rootIndex
argument_list|()
argument_list|)
decl_stmt|;
name|QRegion
name|region
init|=
name|itemRegion
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
name|region
operator|.
name|intersects
argument_list|(
name|contentsRect
argument_list|)
condition|)
name|indexes
operator|.
name|append
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|indexes
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|int
name|firstRow
init|=
name|indexes
index|[
literal|0
index|]
operator|.
name|row
argument_list|()
decl_stmt|;
name|int
name|lastRow
init|=
name|indexes
index|[
literal|0
index|]
operator|.
name|row
argument_list|()
decl_stmt|;
name|int
name|firstColumn
init|=
name|indexes
index|[
literal|0
index|]
operator|.
name|column
argument_list|()
decl_stmt|;
name|int
name|lastColumn
init|=
name|indexes
index|[
literal|0
index|]
operator|.
name|column
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|indexes
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|firstRow
operator|=
name|qMin
argument_list|(
name|firstRow
argument_list|,
name|indexes
index|[
name|i
index|]
operator|.
name|row
argument_list|()
argument_list|)
expr_stmt|;
name|lastRow
operator|=
name|qMax
argument_list|(
name|lastRow
argument_list|,
name|indexes
index|[
name|i
index|]
operator|.
name|row
argument_list|()
argument_list|)
expr_stmt|;
name|firstColumn
operator|=
name|qMin
argument_list|(
name|firstColumn
argument_list|,
name|indexes
index|[
name|i
index|]
operator|.
name|column
argument_list|()
argument_list|)
expr_stmt|;
name|lastColumn
operator|=
name|qMax
argument_list|(
name|lastColumn
argument_list|,
name|indexes
index|[
name|i
index|]
operator|.
name|column
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QItemSelection
name|selection
argument_list|(
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|firstRow
argument_list|,
name|firstColumn
argument_list|,
name|rootIndex
argument_list|()
argument_list|)
argument_list|,
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|lastRow
argument_list|,
name|lastColumn
argument_list|,
name|rootIndex
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|selectionModel
argument_list|()
operator|->
name|select
argument_list|(
name|selection
argument_list|,
name|command
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QModelIndex
name|noIndex
decl_stmt|;
name|QItemSelection
name|selection
argument_list|(
name|noIndex
argument_list|,
name|noIndex
argument_list|)
decl_stmt|;
name|selectionModel
argument_list|()
operator|->
name|select
argument_list|(
name|selection
argument_list|,
name|command
argument_list|)
expr_stmt|;
block|}
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateGeometries
name|void
name|PieView
operator|::
name|updateGeometries
parameter_list|()
block|{
name|horizontalScrollBar
argument_list|()
operator|->
name|setPageStep
argument_list|(
name|viewport
argument_list|()
operator|->
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|horizontalScrollBar
argument_list|()
operator|->
name|setRange
argument_list|(
literal|0
argument_list|,
name|qMax
argument_list|(
literal|0
argument_list|,
literal|2
operator|*
name|totalSize
operator|-
name|viewport
argument_list|()
operator|->
name|width
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|verticalScrollBar
argument_list|()
operator|->
name|setPageStep
argument_list|(
name|viewport
argument_list|()
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|verticalScrollBar
argument_list|()
operator|->
name|setRange
argument_list|(
literal|0
argument_list|,
name|qMax
argument_list|(
literal|0
argument_list|,
name|totalSize
operator|-
name|viewport
argument_list|()
operator|->
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|verticalOffset
name|int
name|PieView
operator|::
name|verticalOffset
parameter_list|()
specifier|const
block|{
return|return
name|verticalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
return|;
block|}
end_function
begin_comment
comment|/*     Returns the position of the item in viewport coordinates. */
end_comment
begin_function
DECL|function|visualRect
name|QRect
name|PieView
operator|::
name|visualRect
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|QRect
name|rect
init|=
name|itemRect
argument_list|(
name|index
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|rect
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|rect
return|;
return|return
name|QRect
argument_list|(
name|rect
operator|.
name|left
argument_list|()
operator|-
name|horizontalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
argument_list|,
name|rect
operator|.
name|top
argument_list|()
operator|-
name|verticalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
argument_list|,
name|rect
operator|.
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*     Returns a region corresponding to the selection in viewport coordinates. */
end_comment
begin_function
DECL|function|visualRegionForSelection
name|QRegion
name|PieView
operator|::
name|visualRegionForSelection
parameter_list|(
specifier|const
name|QItemSelection
modifier|&
name|selection
parameter_list|)
specifier|const
block|{
name|int
name|ranges
init|=
name|selection
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|ranges
operator|==
literal|0
condition|)
return|return
name|QRect
argument_list|()
return|;
name|QRegion
name|region
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ranges
condition|;
operator|++
name|i
control|)
block|{
name|QItemSelectionRange
name|range
init|=
name|selection
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
name|range
operator|.
name|top
argument_list|()
init|;
name|row
operator|<=
name|range
operator|.
name|bottom
argument_list|()
condition|;
operator|++
name|row
control|)
block|{
for|for
control|(
name|int
name|col
init|=
name|range
operator|.
name|left
argument_list|()
init|;
name|col
operator|<=
name|range
operator|.
name|right
argument_list|()
condition|;
operator|++
name|col
control|)
block|{
name|QModelIndex
name|index
init|=
name|model
argument_list|()
operator|->
name|index
argument_list|(
name|row
argument_list|,
name|col
argument_list|,
name|rootIndex
argument_list|()
argument_list|)
decl_stmt|;
name|region
operator|+=
name|visualRect
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|region
return|;
block|}
end_function
end_unit
