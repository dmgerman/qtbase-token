begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the demonstration applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** BSD License Usage ** Alternatively, you may use this file under the terms of the BSD license ** as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of The Qt Company Ltd nor the names of its **     contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"spreadsheetdelegate.h"
end_include
begin_include
include|#
directive|include
file|<QtWidgets>
end_include
begin_constructor
DECL|function|SpreadSheetDelegate
name|SpreadSheetDelegate
operator|::
name|SpreadSheetDelegate
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QItemDelegate
argument_list|(
name|parent
argument_list|)
block|{}
end_constructor
begin_function
DECL|function|createEditor
name|QWidget
modifier|*
name|SpreadSheetDelegate
operator|::
name|createEditor
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QStyleOptionViewItem
modifier|&
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|index
operator|.
name|column
argument_list|()
operator|==
literal|1
condition|)
block|{
name|QDateTimeEdit
modifier|*
name|editor
init|=
operator|new
name|QDateTimeEdit
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|editor
operator|->
name|setDisplayFormat
argument_list|(
literal|"dd/M/yyyy"
argument_list|)
expr_stmt|;
name|editor
operator|->
name|setCalendarPopup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|editor
return|;
block|}
name|QLineEdit
modifier|*
name|editor
init|=
operator|new
name|QLineEdit
argument_list|(
name|parent
argument_list|)
decl_stmt|;
comment|// create a completer with the strings in the column as model
name|QStringList
name|allStrings
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|index
operator|.
name|model
argument_list|()
operator|->
name|rowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QString
name|strItem
argument_list|(
name|index
operator|.
name|model
argument_list|()
operator|->
name|data
argument_list|(
name|index
operator|.
name|sibling
argument_list|(
name|i
argument_list|,
name|index
operator|.
name|column
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|EditRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|allStrings
operator|.
name|contains
argument_list|(
name|strItem
argument_list|)
condition|)
name|allStrings
operator|.
name|append
argument_list|(
name|strItem
argument_list|)
expr_stmt|;
block|}
name|QCompleter
modifier|*
name|autoComplete
init|=
operator|new
name|QCompleter
argument_list|(
name|allStrings
argument_list|)
decl_stmt|;
name|editor
operator|->
name|setCompleter
argument_list|(
name|autoComplete
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|editor
argument_list|,
operator|&
name|QLineEdit
operator|::
name|editingFinished
argument_list|,
name|this
argument_list|,
operator|&
name|SpreadSheetDelegate
operator|::
name|commitAndCloseEditor
argument_list|)
expr_stmt|;
return|return
name|editor
return|;
block|}
end_function
begin_function
DECL|function|commitAndCloseEditor
name|void
name|SpreadSheetDelegate
operator|::
name|commitAndCloseEditor
parameter_list|()
block|{
name|QLineEdit
modifier|*
name|editor
init|=
name|qobject_cast
argument_list|<
name|QLineEdit
operator|*
argument_list|>
argument_list|(
name|sender
argument_list|()
argument_list|)
decl_stmt|;
emit|emit
name|commitData
argument_list|(
name|editor
argument_list|)
emit|;
emit|emit
name|closeEditor
argument_list|(
name|editor
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|setEditorData
name|void
name|SpreadSheetDelegate
operator|::
name|setEditorData
parameter_list|(
name|QWidget
modifier|*
name|editor
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|QLineEdit
modifier|*
name|edit
init|=
name|qobject_cast
argument_list|<
name|QLineEdit
operator|*
argument_list|>
argument_list|(
name|editor
argument_list|)
decl_stmt|;
if|if
condition|(
name|edit
condition|)
block|{
name|edit
operator|->
name|setText
argument_list|(
name|index
operator|.
name|model
argument_list|()
operator|->
name|data
argument_list|(
name|index
argument_list|,
name|Qt
operator|::
name|EditRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|QDateTimeEdit
modifier|*
name|dateEditor
init|=
name|qobject_cast
argument_list|<
name|QDateTimeEdit
operator|*
argument_list|>
argument_list|(
name|editor
argument_list|)
decl_stmt|;
if|if
condition|(
name|dateEditor
condition|)
block|{
name|dateEditor
operator|->
name|setDate
argument_list|(
name|QDate
operator|::
name|fromString
argument_list|(
name|index
operator|.
name|model
argument_list|()
operator|->
name|data
argument_list|(
name|index
argument_list|,
name|Qt
operator|::
name|EditRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"d/M/yyyy"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setModelData
name|void
name|SpreadSheetDelegate
operator|::
name|setModelData
parameter_list|(
name|QWidget
modifier|*
name|editor
parameter_list|,
name|QAbstractItemModel
modifier|*
name|model
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|QLineEdit
modifier|*
name|edit
init|=
name|qobject_cast
argument_list|<
name|QLineEdit
operator|*
argument_list|>
argument_list|(
name|editor
argument_list|)
decl_stmt|;
if|if
condition|(
name|edit
condition|)
block|{
name|model
operator|->
name|setData
argument_list|(
name|index
argument_list|,
name|edit
operator|->
name|text
argument_list|()
argument_list|)
expr_stmt|;
return|return;
block|}
name|QDateTimeEdit
modifier|*
name|dateEditor
init|=
name|qobject_cast
argument_list|<
name|QDateTimeEdit
operator|*
argument_list|>
argument_list|(
name|editor
argument_list|)
decl_stmt|;
if|if
condition|(
name|dateEditor
condition|)
name|model
operator|->
name|setData
argument_list|(
name|index
argument_list|,
name|dateEditor
operator|->
name|date
argument_list|()
operator|.
name|toString
argument_list|(
literal|"dd/M/yyyy"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
end_unit
