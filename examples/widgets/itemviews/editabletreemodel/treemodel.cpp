begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of The Qt Company Ltd and its Subsidiary(-ies) nor the **     names of its contributors may be used to endorse or promote products **     derived from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtWidgets>
end_include
begin_include
include|#
directive|include
file|"treeitem.h"
end_include
begin_include
include|#
directive|include
file|"treemodel.h"
end_include
begin_comment
comment|//! [0]
end_comment
begin_constructor
DECL|function|TreeModel
name|TreeModel
operator|::
name|TreeModel
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|headers
parameter_list|,
specifier|const
name|QString
modifier|&
name|data
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractItemModel
argument_list|(
name|parent
argument_list|)
block|{
name|QVector
argument_list|<
name|QVariant
argument_list|>
name|rootData
decl_stmt|;
foreach|foreach
control|(
name|QString
name|header
decl|,
name|headers
control|)
name|rootData
operator|<<
name|header
expr_stmt|;
name|rootItem
operator|=
operator|new
name|TreeItem
argument_list|(
name|rootData
argument_list|)
expr_stmt|;
name|setupModelData
argument_list|(
name|data
operator|.
name|split
argument_list|(
name|QString
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
argument_list|,
name|rootItem
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|//! [0]
end_comment
begin_comment
comment|//! [1]
end_comment
begin_destructor
DECL|function|~TreeModel
name|TreeModel
operator|::
name|~
name|TreeModel
parameter_list|()
block|{
operator|delete
name|rootItem
expr_stmt|;
block|}
end_destructor
begin_comment
comment|//! [1]
end_comment
begin_comment
comment|//! [2]
end_comment
begin_function
DECL|function|columnCount
name|int
name|TreeModel
operator|::
name|columnCount
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
comment|/* parent */
parameter_list|)
specifier|const
block|{
return|return
name|rootItem
operator|->
name|columnCount
argument_list|()
return|;
block|}
end_function
begin_comment
comment|//! [2]
end_comment
begin_function
DECL|function|data
name|QVariant
name|TreeModel
operator|::
name|data
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
name|int
name|role
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QVariant
argument_list|()
return|;
if|if
condition|(
name|role
operator|!=
name|Qt
operator|::
name|DisplayRole
operator|&&
name|role
operator|!=
name|Qt
operator|::
name|EditRole
condition|)
return|return
name|QVariant
argument_list|()
return|;
name|TreeItem
modifier|*
name|item
init|=
name|getItem
argument_list|(
name|index
argument_list|)
decl_stmt|;
return|return
name|item
operator|->
name|data
argument_list|(
name|index
operator|.
name|column
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|//! [3]
end_comment
begin_function
DECL|function|flags
name|Qt
operator|::
name|ItemFlags
name|TreeModel
operator|::
name|flags
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
return|return
literal|0
return|;
return|return
name|Qt
operator|::
name|ItemIsEditable
operator||
name|QAbstractItemModel
operator|::
name|flags
argument_list|(
name|index
argument_list|)
return|;
block|}
end_function
begin_comment
comment|//! [3]
end_comment
begin_comment
comment|//! [4]
end_comment
begin_function
DECL|function|getItem
name|TreeItem
modifier|*
name|TreeModel
operator|::
name|getItem
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|index
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|TreeItem
modifier|*
name|item
init|=
cast|static_cast
argument_list|<
name|TreeItem
operator|*
argument_list|>
argument_list|(
name|index
operator|.
name|internalPointer
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
condition|)
return|return
name|item
return|;
block|}
return|return
name|rootItem
return|;
block|}
end_function
begin_comment
comment|//! [4]
end_comment
begin_function
DECL|function|headerData
name|QVariant
name|TreeModel
operator|::
name|headerData
parameter_list|(
name|int
name|section
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|,
name|int
name|role
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|orientation
operator|==
name|Qt
operator|::
name|Horizontal
operator|&&
name|role
operator|==
name|Qt
operator|::
name|DisplayRole
condition|)
return|return
name|rootItem
operator|->
name|data
argument_list|(
name|section
argument_list|)
return|;
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_comment
comment|//! [5]
end_comment
begin_function
DECL|function|index
name|QModelIndex
name|TreeModel
operator|::
name|index
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|parent
operator|.
name|isValid
argument_list|()
operator|&&
name|parent
operator|.
name|column
argument_list|()
operator|!=
literal|0
condition|)
return|return
name|QModelIndex
argument_list|()
return|;
comment|//! [5]
comment|//! [6]
name|TreeItem
modifier|*
name|parentItem
init|=
name|getItem
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|TreeItem
modifier|*
name|childItem
init|=
name|parentItem
operator|->
name|child
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|childItem
condition|)
return|return
name|createIndex
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|childItem
argument_list|)
return|;
else|else
return|return
name|QModelIndex
argument_list|()
return|;
block|}
end_function
begin_comment
comment|//! [6]
end_comment
begin_function
DECL|function|insertColumns
name|bool
name|TreeModel
operator|::
name|insertColumns
parameter_list|(
name|int
name|position
parameter_list|,
name|int
name|columns
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
block|{
name|bool
name|success
decl_stmt|;
name|beginInsertColumns
argument_list|(
name|parent
argument_list|,
name|position
argument_list|,
name|position
operator|+
name|columns
operator|-
literal|1
argument_list|)
expr_stmt|;
name|success
operator|=
name|rootItem
operator|->
name|insertColumns
argument_list|(
name|position
argument_list|,
name|columns
argument_list|)
expr_stmt|;
name|endInsertColumns
argument_list|()
expr_stmt|;
return|return
name|success
return|;
block|}
end_function
begin_function
DECL|function|insertRows
name|bool
name|TreeModel
operator|::
name|insertRows
parameter_list|(
name|int
name|position
parameter_list|,
name|int
name|rows
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
block|{
name|TreeItem
modifier|*
name|parentItem
init|=
name|getItem
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|bool
name|success
decl_stmt|;
name|beginInsertRows
argument_list|(
name|parent
argument_list|,
name|position
argument_list|,
name|position
operator|+
name|rows
operator|-
literal|1
argument_list|)
expr_stmt|;
name|success
operator|=
name|parentItem
operator|->
name|insertChildren
argument_list|(
name|position
argument_list|,
name|rows
argument_list|,
name|rootItem
operator|->
name|columnCount
argument_list|()
argument_list|)
expr_stmt|;
name|endInsertRows
argument_list|()
expr_stmt|;
return|return
name|success
return|;
block|}
end_function
begin_comment
comment|//! [7]
end_comment
begin_function
DECL|function|parent
name|QModelIndex
name|TreeModel
operator|::
name|parent
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QModelIndex
argument_list|()
return|;
name|TreeItem
modifier|*
name|childItem
init|=
name|getItem
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|TreeItem
modifier|*
name|parentItem
init|=
name|childItem
operator|->
name|parent
argument_list|()
decl_stmt|;
if|if
condition|(
name|parentItem
operator|==
name|rootItem
condition|)
return|return
name|QModelIndex
argument_list|()
return|;
return|return
name|createIndex
argument_list|(
name|parentItem
operator|->
name|childNumber
argument_list|()
argument_list|,
literal|0
argument_list|,
name|parentItem
argument_list|)
return|;
block|}
end_function
begin_comment
comment|//! [7]
end_comment
begin_function
DECL|function|removeColumns
name|bool
name|TreeModel
operator|::
name|removeColumns
parameter_list|(
name|int
name|position
parameter_list|,
name|int
name|columns
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
block|{
name|bool
name|success
decl_stmt|;
name|beginRemoveColumns
argument_list|(
name|parent
argument_list|,
name|position
argument_list|,
name|position
operator|+
name|columns
operator|-
literal|1
argument_list|)
expr_stmt|;
name|success
operator|=
name|rootItem
operator|->
name|removeColumns
argument_list|(
name|position
argument_list|,
name|columns
argument_list|)
expr_stmt|;
name|endRemoveColumns
argument_list|()
expr_stmt|;
if|if
condition|(
name|rootItem
operator|->
name|columnCount
argument_list|()
operator|==
literal|0
condition|)
name|removeRows
argument_list|(
literal|0
argument_list|,
name|rowCount
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|success
return|;
block|}
end_function
begin_function
DECL|function|removeRows
name|bool
name|TreeModel
operator|::
name|removeRows
parameter_list|(
name|int
name|position
parameter_list|,
name|int
name|rows
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
block|{
name|TreeItem
modifier|*
name|parentItem
init|=
name|getItem
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|bool
name|success
init|=
literal|true
decl_stmt|;
name|beginRemoveRows
argument_list|(
name|parent
argument_list|,
name|position
argument_list|,
name|position
operator|+
name|rows
operator|-
literal|1
argument_list|)
expr_stmt|;
name|success
operator|=
name|parentItem
operator|->
name|removeChildren
argument_list|(
name|position
argument_list|,
name|rows
argument_list|)
expr_stmt|;
name|endRemoveRows
argument_list|()
expr_stmt|;
return|return
name|success
return|;
block|}
end_function
begin_comment
comment|//! [8]
end_comment
begin_function
DECL|function|rowCount
name|int
name|TreeModel
operator|::
name|rowCount
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
specifier|const
block|{
name|TreeItem
modifier|*
name|parentItem
init|=
name|getItem
argument_list|(
name|parent
argument_list|)
decl_stmt|;
return|return
name|parentItem
operator|->
name|childCount
argument_list|()
return|;
block|}
end_function
begin_comment
comment|//! [8]
end_comment
begin_function
DECL|function|setData
name|bool
name|TreeModel
operator|::
name|setData
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|,
name|int
name|role
parameter_list|)
block|{
if|if
condition|(
name|role
operator|!=
name|Qt
operator|::
name|EditRole
condition|)
return|return
literal|false
return|;
name|TreeItem
modifier|*
name|item
init|=
name|getItem
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|bool
name|result
init|=
name|item
operator|->
name|setData
argument_list|(
name|index
operator|.
name|column
argument_list|()
argument_list|,
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
condition|)
emit|emit
name|dataChanged
argument_list|(
name|index
argument_list|,
name|index
argument_list|)
emit|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|setHeaderData
name|bool
name|TreeModel
operator|::
name|setHeaderData
parameter_list|(
name|int
name|section
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|,
specifier|const
name|QVariant
modifier|&
name|value
parameter_list|,
name|int
name|role
parameter_list|)
block|{
if|if
condition|(
name|role
operator|!=
name|Qt
operator|::
name|EditRole
operator|||
name|orientation
operator|!=
name|Qt
operator|::
name|Horizontal
condition|)
return|return
literal|false
return|;
name|bool
name|result
init|=
name|rootItem
operator|->
name|setData
argument_list|(
name|section
argument_list|,
name|value
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
condition|)
emit|emit
name|headerDataChanged
argument_list|(
name|orientation
argument_list|,
name|section
argument_list|,
name|section
argument_list|)
emit|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|setupModelData
name|void
name|TreeModel
operator|::
name|setupModelData
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|lines
parameter_list|,
name|TreeItem
modifier|*
name|parent
parameter_list|)
block|{
name|QList
argument_list|<
name|TreeItem
modifier|*
argument_list|>
name|parents
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|indentations
decl_stmt|;
name|parents
operator|<<
name|parent
expr_stmt|;
name|indentations
operator|<<
literal|0
expr_stmt|;
name|int
name|number
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|number
operator|<
name|lines
operator|.
name|count
argument_list|()
condition|)
block|{
name|int
name|position
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|position
operator|<
name|lines
index|[
name|number
index|]
operator|.
name|length
argument_list|()
condition|)
block|{
if|if
condition|(
name|lines
index|[
name|number
index|]
operator|.
name|mid
argument_list|(
name|position
argument_list|,
literal|1
argument_list|)
operator|!=
literal|" "
condition|)
break|break;
operator|++
name|position
expr_stmt|;
block|}
name|QString
name|lineData
init|=
name|lines
index|[
name|number
index|]
operator|.
name|mid
argument_list|(
name|position
argument_list|)
operator|.
name|trimmed
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|lineData
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Read the column data from the rest of the line.
name|QStringList
name|columnStrings
init|=
name|lineData
operator|.
name|split
argument_list|(
literal|"\t"
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
decl_stmt|;
name|QVector
argument_list|<
name|QVariant
argument_list|>
name|columnData
decl_stmt|;
for|for
control|(
name|int
name|column
init|=
literal|0
init|;
name|column
operator|<
name|columnStrings
operator|.
name|count
argument_list|()
condition|;
operator|++
name|column
control|)
name|columnData
operator|<<
name|columnStrings
index|[
name|column
index|]
expr_stmt|;
if|if
condition|(
name|position
operator|>
name|indentations
operator|.
name|last
argument_list|()
condition|)
block|{
comment|// The last child of the current parent is now the new parent
comment|// unless the current parent has no children.
if|if
condition|(
name|parents
operator|.
name|last
argument_list|()
operator|->
name|childCount
argument_list|()
operator|>
literal|0
condition|)
block|{
name|parents
operator|<<
name|parents
operator|.
name|last
argument_list|()
operator|->
name|child
argument_list|(
name|parents
operator|.
name|last
argument_list|()
operator|->
name|childCount
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|indentations
operator|<<
name|position
expr_stmt|;
block|}
block|}
else|else
block|{
while|while
condition|(
name|position
argument_list|<
name|indentations
operator|.
name|last
operator|(
operator|)
operator|&&
name|parents
operator|.
name|count
operator|(
operator|)
argument_list|>
literal|0
condition|)
block|{
name|parents
operator|.
name|pop_back
argument_list|()
expr_stmt|;
name|indentations
operator|.
name|pop_back
argument_list|()
expr_stmt|;
block|}
block|}
comment|// Append a new item to the current parent's list of children.
name|TreeItem
modifier|*
name|parent
init|=
name|parents
operator|.
name|last
argument_list|()
decl_stmt|;
name|parent
operator|->
name|insertChildren
argument_list|(
name|parent
operator|->
name|childCount
argument_list|()
argument_list|,
literal|1
argument_list|,
name|rootItem
operator|->
name|columnCount
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|column
init|=
literal|0
init|;
name|column
operator|<
name|columnData
operator|.
name|size
argument_list|()
condition|;
operator|++
name|column
control|)
name|parent
operator|->
name|child
argument_list|(
name|parent
operator|->
name|childCount
argument_list|()
operator|-
literal|1
argument_list|)
operator|->
name|setData
argument_list|(
name|column
argument_list|,
name|columnData
index|[
name|column
index|]
argument_list|)
expr_stmt|;
block|}
operator|++
name|number
expr_stmt|;
block|}
block|}
end_function
end_unit
