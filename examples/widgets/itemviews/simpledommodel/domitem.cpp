begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names **     of its contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtXml>
end_include
begin_include
include|#
directive|include
file|"domitem.h"
end_include
begin_comment
comment|//! [0]
end_comment
begin_constructor
DECL|function|DomItem
name|DomItem
operator|::
name|DomItem
parameter_list|(
name|QDomNode
modifier|&
name|node
parameter_list|,
name|int
name|row
parameter_list|,
name|DomItem
modifier|*
name|parent
parameter_list|)
block|{
name|domNode
operator|=
name|node
expr_stmt|;
comment|//! [0]
comment|// Record the item's location within its parent.
comment|//! [1]
name|rowNumber
operator|=
name|row
expr_stmt|;
name|parentItem
operator|=
name|parent
expr_stmt|;
block|}
end_constructor
begin_comment
comment|//! [1]
end_comment
begin_comment
comment|//! [2]
end_comment
begin_destructor
DECL|function|~DomItem
name|DomItem
operator|::
name|~
name|DomItem
parameter_list|()
block|{
name|QHash
argument_list|<
name|int
argument_list|,
name|DomItem
modifier|*
argument_list|>
operator|::
name|iterator
name|it
decl_stmt|;
for|for
control|(
name|it
operator|=
name|childItems
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|childItems
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
operator|delete
name|it
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_comment
comment|//! [2]
end_comment
begin_comment
comment|//! [3]
end_comment
begin_function
DECL|function|node
name|QDomNode
name|DomItem
operator|::
name|node
parameter_list|()
specifier|const
block|{
return|return
name|domNode
return|;
block|}
end_function
begin_comment
comment|//! [3]
end_comment
begin_comment
comment|//! [4]
end_comment
begin_function
DECL|function|parent
name|DomItem
modifier|*
name|DomItem
operator|::
name|parent
parameter_list|()
block|{
return|return
name|parentItem
return|;
block|}
end_function
begin_comment
comment|//! [4]
end_comment
begin_comment
comment|//! [5]
end_comment
begin_function
DECL|function|child
name|DomItem
modifier|*
name|DomItem
operator|::
name|child
parameter_list|(
name|int
name|i
parameter_list|)
block|{
if|if
condition|(
name|childItems
operator|.
name|contains
argument_list|(
name|i
argument_list|)
condition|)
return|return
name|childItems
index|[
name|i
index|]
return|;
if|if
condition|(
name|i
operator|>=
literal|0
operator|&&
name|i
operator|<
name|domNode
operator|.
name|childNodes
argument_list|()
operator|.
name|count
argument_list|()
condition|)
block|{
name|QDomNode
name|childNode
init|=
name|domNode
operator|.
name|childNodes
argument_list|()
operator|.
name|item
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|DomItem
modifier|*
name|childItem
init|=
operator|new
name|DomItem
argument_list|(
name|childNode
argument_list|,
name|i
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|childItems
index|[
name|i
index|]
operator|=
name|childItem
expr_stmt|;
return|return
name|childItem
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_comment
comment|//! [5]
end_comment
begin_comment
comment|//! [6]
end_comment
begin_function
DECL|function|row
name|int
name|DomItem
operator|::
name|row
parameter_list|()
block|{
return|return
name|rowNumber
return|;
block|}
end_function
begin_comment
comment|//! [6]
end_comment
end_unit
