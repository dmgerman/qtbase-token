begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 KlarÃ¤lvdalens Datakonsult AB, a KDAB Group company, info@kdab.com, author Giuseppe D'Angelo<giuseppe.dangelo@kdab.com> ** Copyright (C) 2015 Samuel Gaist<samuel.gaist@edeltech.ch> ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of The Qt Company Ltd nor the names of its **     contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"regularexpressiondialog.h"
end_include
begin_include
include|#
directive|include
file|<QApplication>
end_include
begin_include
include|#
directive|include
file|<QCheckBox>
end_include
begin_include
include|#
directive|include
file|<QComboBox>
end_include
begin_include
include|#
directive|include
file|<QLabel>
end_include
begin_include
include|#
directive|include
file|<QLineEdit>
end_include
begin_include
include|#
directive|include
file|<QSpinBox>
end_include
begin_include
include|#
directive|include
file|<QPlainTextEdit>
end_include
begin_include
include|#
directive|include
file|<QTreeWidget>
end_include
begin_include
include|#
directive|include
file|<QAction>
end_include
begin_include
include|#
directive|include
file|<QClipboard>
end_include
begin_include
include|#
directive|include
file|<QHBoxLayout>
end_include
begin_include
include|#
directive|include
file|<QGridLayout>
end_include
begin_include
include|#
directive|include
file|<QFormLayout>
end_include
begin_include
include|#
directive|include
file|<QRegularExpression>
end_include
begin_include
include|#
directive|include
file|<QRegularExpressionMatch>
end_include
begin_include
include|#
directive|include
file|<QRegularExpressionMatchIterator>
end_include
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QRegularExpression::MatchType
argument_list|)
end_macro
begin_constructor
DECL|function|RegularExpressionDialog
name|RegularExpressionDialog
operator|::
name|RegularExpressionDialog
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QDialog
argument_list|(
name|parent
argument_list|)
block|{
name|setupUi
argument_list|()
expr_stmt|;
name|setWindowTitle
argument_list|(
name|tr
argument_list|(
literal|"QRegularExpression Example"
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|patternLineEdit
argument_list|,
operator|&
name|QLineEdit
operator|::
name|textChanged
argument_list|,
name|this
argument_list|,
operator|&
name|RegularExpressionDialog
operator|::
name|refresh
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|subjectTextEdit
argument_list|,
operator|&
name|QPlainTextEdit
operator|::
name|textChanged
argument_list|,
name|this
argument_list|,
operator|&
name|RegularExpressionDialog
operator|::
name|refresh
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|caseInsensitiveOptionCheckBox
argument_list|,
operator|&
name|QCheckBox
operator|::
name|toggled
argument_list|,
name|this
argument_list|,
operator|&
name|RegularExpressionDialog
operator|::
name|refresh
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|dotMatchesEverythingOptionCheckBox
argument_list|,
operator|&
name|QCheckBox
operator|::
name|toggled
argument_list|,
name|this
argument_list|,
operator|&
name|RegularExpressionDialog
operator|::
name|refresh
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|multilineOptionCheckBox
argument_list|,
operator|&
name|QCheckBox
operator|::
name|toggled
argument_list|,
name|this
argument_list|,
operator|&
name|RegularExpressionDialog
operator|::
name|refresh
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|extendedPatternSyntaxOptionCheckBox
argument_list|,
operator|&
name|QCheckBox
operator|::
name|toggled
argument_list|,
name|this
argument_list|,
operator|&
name|RegularExpressionDialog
operator|::
name|refresh
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|invertedGreedinessOptionCheckBox
argument_list|,
operator|&
name|QCheckBox
operator|::
name|toggled
argument_list|,
name|this
argument_list|,
operator|&
name|RegularExpressionDialog
operator|::
name|refresh
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|dontCaptureOptionCheckBox
argument_list|,
operator|&
name|QCheckBox
operator|::
name|toggled
argument_list|,
name|this
argument_list|,
operator|&
name|RegularExpressionDialog
operator|::
name|refresh
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|useUnicodePropertiesOptionCheckBox
argument_list|,
operator|&
name|QCheckBox
operator|::
name|toggled
argument_list|,
name|this
argument_list|,
operator|&
name|RegularExpressionDialog
operator|::
name|refresh
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|optimizeOnFirstUsageOptionCheckBox
argument_list|,
operator|&
name|QCheckBox
operator|::
name|toggled
argument_list|,
name|this
argument_list|,
operator|&
name|RegularExpressionDialog
operator|::
name|refresh
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|dontAutomaticallyOptimizeOptionCheckBox
argument_list|,
operator|&
name|QCheckBox
operator|::
name|toggled
argument_list|,
name|this
argument_list|,
operator|&
name|RegularExpressionDialog
operator|::
name|refresh
argument_list|)
expr_stmt|;
name|connect
argument_list|(
argument|offsetSpinBox
argument_list|,
argument|static_cast<void (QSpinBox::*)(int)>(&QSpinBox::valueChanged)
argument_list|,
argument|this
argument_list|,
argument|&RegularExpressionDialog::refresh
argument_list|)
empty_stmt|;
name|connect
argument_list|(
argument|matchTypeComboBox
argument_list|,
argument|static_cast<void (QComboBox::*)(int)>(&QComboBox::currentIndexChanged)
argument_list|,
argument|this
argument_list|,
argument|&RegularExpressionDialog::refresh
argument_list|)
empty_stmt|;
name|connect
argument_list|(
name|anchoredMatchOptionCheckBox
argument_list|,
operator|&
name|QCheckBox
operator|::
name|toggled
argument_list|,
name|this
argument_list|,
operator|&
name|RegularExpressionDialog
operator|::
name|refresh
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|dontCheckSubjectStringMatchOptionCheckBox
argument_list|,
operator|&
name|QCheckBox
operator|::
name|toggled
argument_list|,
name|this
argument_list|,
operator|&
name|RegularExpressionDialog
operator|::
name|refresh
argument_list|)
expr_stmt|;
name|patternLineEdit
operator|->
name|setText
argument_list|(
name|tr
argument_list|(
literal|"(\\+?\\d+)-(?<prefix>\\d+)-(?<number>\\w+)"
argument_list|)
argument_list|)
expr_stmt|;
name|subjectTextEdit
operator|->
name|setPlainText
argument_list|(
name|tr
argument_list|(
literal|"My office number is +43-152-0123456, my mobile is 001-41-255512 instead."
argument_list|)
argument_list|)
expr_stmt|;
name|refresh
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|refresh
name|void
name|RegularExpressionDialog
operator|::
name|refresh
parameter_list|()
block|{
name|setUpdatesEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|pattern
init|=
name|patternLineEdit
operator|->
name|text
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|text
init|=
name|subjectTextEdit
operator|->
name|toPlainText
argument_list|()
decl_stmt|;
name|offsetSpinBox
operator|->
name|setMaximum
argument_list|(
name|qMax
argument_list|(
literal|0
argument_list|,
name|text
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|escaped
init|=
name|pattern
decl_stmt|;
name|escaped
operator|.
name|replace
argument_list|(
name|QLatin1String
argument_list|(
literal|"\\"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"\\\\"
argument_list|)
argument_list|)
expr_stmt|;
name|escaped
operator|.
name|replace
argument_list|(
name|QLatin1String
argument_list|(
literal|"\""
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"\\\""
argument_list|)
argument_list|)
expr_stmt|;
name|escaped
operator|.
name|prepend
argument_list|(
name|QLatin1String
argument_list|(
literal|"\""
argument_list|)
argument_list|)
expr_stmt|;
name|escaped
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"\""
argument_list|)
argument_list|)
expr_stmt|;
name|escapedPatternLineEdit
operator|->
name|setText
argument_list|(
name|escaped
argument_list|)
expr_stmt|;
name|QRegularExpression
name|rx
argument_list|(
name|pattern
argument_list|)
decl_stmt|;
name|QRegularExpression
operator|::
name|MatchType
name|matchType
init|=
name|matchTypeComboBox
operator|->
name|currentData
argument_list|()
operator|.
name|value
argument_list|<
name|QRegularExpression
operator|::
name|MatchType
argument_list|>
argument_list|()
decl_stmt|;
name|QRegularExpression
operator|::
name|PatternOptions
name|patternOptions
init|=
name|QRegularExpression
operator|::
name|NoPatternOption
decl_stmt|;
name|QRegularExpression
operator|::
name|MatchOptions
name|matchOptions
init|=
name|QRegularExpression
operator|::
name|NoMatchOption
decl_stmt|;
if|if
condition|(
name|anchoredMatchOptionCheckBox
operator|->
name|isChecked
argument_list|()
condition|)
name|matchOptions
operator||=
name|QRegularExpression
operator|::
name|AnchoredMatchOption
expr_stmt|;
if|if
condition|(
name|dontCheckSubjectStringMatchOptionCheckBox
operator|->
name|isChecked
argument_list|()
condition|)
name|matchOptions
operator||=
name|QRegularExpression
operator|::
name|DontCheckSubjectStringMatchOption
expr_stmt|;
if|if
condition|(
name|caseInsensitiveOptionCheckBox
operator|->
name|isChecked
argument_list|()
condition|)
name|patternOptions
operator||=
name|QRegularExpression
operator|::
name|CaseInsensitiveOption
expr_stmt|;
if|if
condition|(
name|dotMatchesEverythingOptionCheckBox
operator|->
name|isChecked
argument_list|()
condition|)
name|patternOptions
operator||=
name|QRegularExpression
operator|::
name|DotMatchesEverythingOption
expr_stmt|;
if|if
condition|(
name|multilineOptionCheckBox
operator|->
name|isChecked
argument_list|()
condition|)
name|patternOptions
operator||=
name|QRegularExpression
operator|::
name|MultilineOption
expr_stmt|;
if|if
condition|(
name|extendedPatternSyntaxOptionCheckBox
operator|->
name|isChecked
argument_list|()
condition|)
name|patternOptions
operator||=
name|QRegularExpression
operator|::
name|ExtendedPatternSyntaxOption
expr_stmt|;
if|if
condition|(
name|invertedGreedinessOptionCheckBox
operator|->
name|isChecked
argument_list|()
condition|)
name|patternOptions
operator||=
name|QRegularExpression
operator|::
name|InvertedGreedinessOption
expr_stmt|;
if|if
condition|(
name|dontCaptureOptionCheckBox
operator|->
name|isChecked
argument_list|()
condition|)
name|patternOptions
operator||=
name|QRegularExpression
operator|::
name|DontCaptureOption
expr_stmt|;
if|if
condition|(
name|useUnicodePropertiesOptionCheckBox
operator|->
name|isChecked
argument_list|()
condition|)
name|patternOptions
operator||=
name|QRegularExpression
operator|::
name|UseUnicodePropertiesOption
expr_stmt|;
if|if
condition|(
name|optimizeOnFirstUsageOptionCheckBox
operator|->
name|isChecked
argument_list|()
condition|)
name|patternOptions
operator||=
name|QRegularExpression
operator|::
name|OptimizeOnFirstUsageOption
expr_stmt|;
if|if
condition|(
name|dontAutomaticallyOptimizeOptionCheckBox
operator|->
name|isChecked
argument_list|()
condition|)
name|patternOptions
operator||=
name|QRegularExpression
operator|::
name|DontAutomaticallyOptimizeOption
expr_stmt|;
name|rx
operator|.
name|setPatternOptions
argument_list|(
name|patternOptions
argument_list|)
expr_stmt|;
name|QPalette
name|palette
init|=
name|patternLineEdit
operator|->
name|palette
argument_list|()
decl_stmt|;
if|if
condition|(
name|rx
operator|.
name|isValid
argument_list|()
condition|)
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Text
argument_list|,
name|subjectTextEdit
operator|->
name|palette
argument_list|()
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|palette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Text
argument_list|,
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|patternLineEdit
operator|->
name|setPalette
argument_list|(
name|palette
argument_list|)
expr_stmt|;
name|matchDetailsTreeWidget
operator|->
name|clear
argument_list|()
expr_stmt|;
name|matchDetailsTreeWidget
operator|->
name|setEnabled
argument_list|(
name|rx
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|rx
operator|.
name|isValid
argument_list|()
condition|)
block|{
specifier|const
name|int
name|capturingGroupsCount
init|=
name|rx
operator|.
name|captureCount
argument_list|()
operator|+
literal|1
decl_stmt|;
name|QRegularExpressionMatchIterator
name|iterator
init|=
name|rx
operator|.
name|globalMatch
argument_list|(
name|text
argument_list|,
name|offsetSpinBox
operator|->
name|value
argument_list|()
argument_list|,
name|matchType
argument_list|,
name|matchOptions
argument_list|)
decl_stmt|;
name|int
name|i
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|QRegularExpressionMatch
name|match
init|=
name|iterator
operator|.
name|next
argument_list|()
decl_stmt|;
name|QTreeWidgetItem
modifier|*
name|matchDetailTopItem
init|=
operator|new
name|QTreeWidgetItem
argument_list|(
name|matchDetailsTreeWidget
argument_list|)
decl_stmt|;
name|matchDetailTopItem
operator|->
name|setText
argument_list|(
literal|0
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|captureGroupIndex
init|=
literal|0
init|;
name|captureGroupIndex
operator|<
name|capturingGroupsCount
condition|;
operator|++
name|captureGroupIndex
control|)
block|{
name|QTreeWidgetItem
modifier|*
name|matchDetailItem
init|=
operator|new
name|QTreeWidgetItem
argument_list|(
name|matchDetailTopItem
argument_list|)
decl_stmt|;
name|matchDetailItem
operator|->
name|setText
argument_list|(
literal|1
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|captureGroupIndex
argument_list|)
argument_list|)
expr_stmt|;
name|matchDetailItem
operator|->
name|setText
argument_list|(
literal|2
argument_list|,
name|match
operator|.
name|captured
argument_list|(
name|captureGroupIndex
argument_list|)
argument_list|)
expr_stmt|;
block|}
operator|++
name|i
expr_stmt|;
block|}
block|}
name|matchDetailsTreeWidget
operator|->
name|expandAll
argument_list|()
expr_stmt|;
name|namedGroupsTreeWidget
operator|->
name|clear
argument_list|()
expr_stmt|;
name|namedGroupsTreeWidget
operator|->
name|setEnabled
argument_list|(
name|rx
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|rx
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|regexpStatusLabel
operator|->
name|setText
argument_list|(
name|tr
argument_list|(
literal|"Valid"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QStringList
name|namedCaptureGroups
init|=
name|rx
operator|.
name|namedCaptureGroups
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|namedCaptureGroups
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QString
name|currentNamedCaptureGroup
init|=
name|namedCaptureGroups
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QTreeWidgetItem
modifier|*
name|namedGroupItem
init|=
operator|new
name|QTreeWidgetItem
argument_list|(
name|namedGroupsTreeWidget
argument_list|)
decl_stmt|;
name|namedGroupItem
operator|->
name|setText
argument_list|(
literal|0
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|namedGroupItem
operator|->
name|setText
argument_list|(
literal|1
argument_list|,
name|currentNamedCaptureGroup
operator|.
name|isNull
argument_list|()
condition|?
name|tr
argument_list|(
literal|"<no name>"
argument_list|)
else|:
name|currentNamedCaptureGroup
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|regexpStatusLabel
operator|->
name|setText
argument_list|(
name|tr
argument_list|(
literal|"Invalid: syntax error at position %1 (%2)"
argument_list|)
operator|.
name|arg
argument_list|(
name|rx
operator|.
name|patternErrorOffset
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|rx
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setUpdatesEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|copyEscapedPatternToClipboard
name|void
name|RegularExpressionDialog
operator|::
name|copyEscapedPatternToClipboard
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
name|QClipboard
modifier|*
name|clipboard
init|=
name|QGuiApplication
operator|::
name|clipboard
argument_list|()
decl_stmt|;
if|if
condition|(
name|clipboard
condition|)
name|clipboard
operator|->
name|setText
argument_list|(
name|escapedPatternLineEdit
operator|->
name|text
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|setupUi
name|void
name|RegularExpressionDialog
operator|::
name|setupUi
parameter_list|()
block|{
name|QWidget
modifier|*
name|leftHalfContainer
init|=
name|setupLeftUi
argument_list|()
decl_stmt|;
name|QFrame
modifier|*
name|verticalSeparator
init|=
operator|new
name|QFrame
decl_stmt|;
name|verticalSeparator
operator|->
name|setFrameStyle
argument_list|(
name|QFrame
operator|::
name|VLine
operator||
name|QFrame
operator|::
name|Sunken
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|rightHalfContainer
init|=
name|setupRightUi
argument_list|()
decl_stmt|;
name|QHBoxLayout
modifier|*
name|mainLayout
init|=
operator|new
name|QHBoxLayout
decl_stmt|;
name|mainLayout
operator|->
name|addWidget
argument_list|(
name|leftHalfContainer
argument_list|)
expr_stmt|;
name|mainLayout
operator|->
name|addWidget
argument_list|(
name|verticalSeparator
argument_list|)
expr_stmt|;
name|mainLayout
operator|->
name|addWidget
argument_list|(
name|rightHalfContainer
argument_list|)
expr_stmt|;
name|setLayout
argument_list|(
name|mainLayout
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setupLeftUi
name|QWidget
modifier|*
name|RegularExpressionDialog
operator|::
name|setupLeftUi
parameter_list|()
block|{
name|QWidget
modifier|*
name|container
init|=
operator|new
name|QWidget
decl_stmt|;
name|QFormLayout
modifier|*
name|layout
init|=
operator|new
name|QFormLayout
argument_list|(
name|container
argument_list|)
decl_stmt|;
name|layout
operator|->
name|setFieldGrowthPolicy
argument_list|(
name|QFormLayout
operator|::
name|AllNonFixedFieldsGrow
argument_list|)
expr_stmt|;
name|layout
operator|->
name|setMargin
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QLabel
modifier|*
name|regexpAndSubjectLabel
init|=
operator|new
name|QLabel
argument_list|(
name|tr
argument_list|(
literal|"<h3>Regular expression and text input</h3>"
argument_list|)
argument_list|)
decl_stmt|;
name|layout
operator|->
name|addRow
argument_list|(
name|regexpAndSubjectLabel
argument_list|)
expr_stmt|;
name|patternLineEdit
operator|=
operator|new
name|QLineEdit
expr_stmt|;
name|patternLineEdit
operator|->
name|setClearButtonEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addRow
argument_list|(
name|tr
argument_list|(
literal|"&Pattern:"
argument_list|)
argument_list|,
name|patternLineEdit
argument_list|)
expr_stmt|;
name|escapedPatternLineEdit
operator|=
operator|new
name|QLineEdit
expr_stmt|;
name|escapedPatternLineEdit
operator|->
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QPalette
name|palette
init|=
name|escapedPatternLineEdit
operator|->
name|palette
argument_list|()
decl_stmt|;
name|palette
operator|.
name|setBrush
argument_list|(
name|QPalette
operator|::
name|Base
argument_list|,
name|palette
operator|.
name|brush
argument_list|(
name|QPalette
operator|::
name|Disabled
argument_list|,
name|QPalette
operator|::
name|Base
argument_list|)
argument_list|)
expr_stmt|;
name|escapedPatternLineEdit
operator|->
name|setPalette
argument_list|(
name|palette
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
name|QAction
modifier|*
name|copyEscapedPatternAction
init|=
operator|new
name|QAction
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|copyEscapedPatternAction
operator|->
name|setText
argument_list|(
name|tr
argument_list|(
literal|"Copy to clipboard"
argument_list|)
argument_list|)
expr_stmt|;
name|copyEscapedPatternAction
operator|->
name|setIcon
argument_list|(
name|QIcon
argument_list|(
name|QStringLiteral
argument_list|(
literal|":/images/copy.png"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|copyEscapedPatternAction
argument_list|,
operator|&
name|QAction
operator|::
name|triggered
argument_list|,
name|this
argument_list|,
operator|&
name|RegularExpressionDialog
operator|::
name|copyEscapedPatternToClipboard
argument_list|)
expr_stmt|;
name|escapedPatternLineEdit
operator|->
name|addAction
argument_list|(
name|copyEscapedPatternAction
argument_list|,
name|QLineEdit
operator|::
name|TrailingPosition
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|layout
operator|->
name|addRow
argument_list|(
name|tr
argument_list|(
literal|"&Escaped pattern:"
argument_list|)
argument_list|,
name|escapedPatternLineEdit
argument_list|)
expr_stmt|;
name|subjectTextEdit
operator|=
operator|new
name|QPlainTextEdit
expr_stmt|;
name|layout
operator|->
name|addRow
argument_list|(
name|tr
argument_list|(
literal|"&Subject text:"
argument_list|)
argument_list|,
name|subjectTextEdit
argument_list|)
expr_stmt|;
name|caseInsensitiveOptionCheckBox
operator|=
operator|new
name|QCheckBox
argument_list|(
name|tr
argument_list|(
literal|"Case insensitive (/i)"
argument_list|)
argument_list|)
expr_stmt|;
name|dotMatchesEverythingOptionCheckBox
operator|=
operator|new
name|QCheckBox
argument_list|(
name|tr
argument_list|(
literal|"Dot matches everything (/s)"
argument_list|)
argument_list|)
expr_stmt|;
name|multilineOptionCheckBox
operator|=
operator|new
name|QCheckBox
argument_list|(
name|tr
argument_list|(
literal|"Multiline (/m)"
argument_list|)
argument_list|)
expr_stmt|;
name|extendedPatternSyntaxOptionCheckBox
operator|=
operator|new
name|QCheckBox
argument_list|(
name|tr
argument_list|(
literal|"Extended pattern (/x)"
argument_list|)
argument_list|)
expr_stmt|;
name|invertedGreedinessOptionCheckBox
operator|=
operator|new
name|QCheckBox
argument_list|(
name|tr
argument_list|(
literal|"Inverted greediness"
argument_list|)
argument_list|)
expr_stmt|;
name|dontCaptureOptionCheckBox
operator|=
operator|new
name|QCheckBox
argument_list|(
name|tr
argument_list|(
literal|"Don't capture"
argument_list|)
argument_list|)
expr_stmt|;
name|useUnicodePropertiesOptionCheckBox
operator|=
operator|new
name|QCheckBox
argument_list|(
name|tr
argument_list|(
literal|"Use unicode properties (/u)"
argument_list|)
argument_list|)
expr_stmt|;
name|optimizeOnFirstUsageOptionCheckBox
operator|=
operator|new
name|QCheckBox
argument_list|(
name|tr
argument_list|(
literal|"Optimize on first usage"
argument_list|)
argument_list|)
expr_stmt|;
name|dontAutomaticallyOptimizeOptionCheckBox
operator|=
operator|new
name|QCheckBox
argument_list|(
name|tr
argument_list|(
literal|"Don't automatically optimize"
argument_list|)
argument_list|)
expr_stmt|;
name|QGridLayout
modifier|*
name|patternOptionsCheckBoxLayout
init|=
operator|new
name|QGridLayout
decl_stmt|;
name|int
name|gridRow
init|=
literal|0
decl_stmt|;
name|patternOptionsCheckBoxLayout
operator|->
name|addWidget
argument_list|(
name|caseInsensitiveOptionCheckBox
argument_list|,
name|gridRow
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|patternOptionsCheckBoxLayout
operator|->
name|addWidget
argument_list|(
name|dotMatchesEverythingOptionCheckBox
argument_list|,
name|gridRow
argument_list|,
literal|2
argument_list|)
expr_stmt|;
operator|++
name|gridRow
expr_stmt|;
name|patternOptionsCheckBoxLayout
operator|->
name|addWidget
argument_list|(
name|multilineOptionCheckBox
argument_list|,
name|gridRow
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|patternOptionsCheckBoxLayout
operator|->
name|addWidget
argument_list|(
name|extendedPatternSyntaxOptionCheckBox
argument_list|,
name|gridRow
argument_list|,
literal|2
argument_list|)
expr_stmt|;
operator|++
name|gridRow
expr_stmt|;
name|patternOptionsCheckBoxLayout
operator|->
name|addWidget
argument_list|(
name|invertedGreedinessOptionCheckBox
argument_list|,
name|gridRow
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|patternOptionsCheckBoxLayout
operator|->
name|addWidget
argument_list|(
name|dontCaptureOptionCheckBox
argument_list|,
name|gridRow
argument_list|,
literal|2
argument_list|)
expr_stmt|;
operator|++
name|gridRow
expr_stmt|;
name|patternOptionsCheckBoxLayout
operator|->
name|addWidget
argument_list|(
name|useUnicodePropertiesOptionCheckBox
argument_list|,
name|gridRow
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|patternOptionsCheckBoxLayout
operator|->
name|addWidget
argument_list|(
name|optimizeOnFirstUsageOptionCheckBox
argument_list|,
name|gridRow
argument_list|,
literal|2
argument_list|)
expr_stmt|;
operator|++
name|gridRow
expr_stmt|;
name|patternOptionsCheckBoxLayout
operator|->
name|addWidget
argument_list|(
name|dontAutomaticallyOptimizeOptionCheckBox
argument_list|,
name|gridRow
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addRow
argument_list|(
name|tr
argument_list|(
literal|"Pattern options:"
argument_list|)
argument_list|,
name|patternOptionsCheckBoxLayout
argument_list|)
expr_stmt|;
name|offsetSpinBox
operator|=
operator|new
name|QSpinBox
expr_stmt|;
name|layout
operator|->
name|addRow
argument_list|(
name|tr
argument_list|(
literal|"Match&offset:"
argument_list|)
argument_list|,
name|offsetSpinBox
argument_list|)
expr_stmt|;
name|matchTypeComboBox
operator|=
operator|new
name|QComboBox
expr_stmt|;
name|matchTypeComboBox
operator|->
name|addItem
argument_list|(
name|tr
argument_list|(
literal|"Normal"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QRegularExpression
operator|::
name|NormalMatch
argument_list|)
argument_list|)
expr_stmt|;
name|matchTypeComboBox
operator|->
name|addItem
argument_list|(
name|tr
argument_list|(
literal|"Partial prefer complete"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QRegularExpression
operator|::
name|PartialPreferCompleteMatch
argument_list|)
argument_list|)
expr_stmt|;
name|matchTypeComboBox
operator|->
name|addItem
argument_list|(
name|tr
argument_list|(
literal|"Partial prefer first"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QRegularExpression
operator|::
name|PartialPreferFirstMatch
argument_list|)
argument_list|)
expr_stmt|;
name|matchTypeComboBox
operator|->
name|addItem
argument_list|(
name|tr
argument_list|(
literal|"No match"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QRegularExpression
operator|::
name|NoMatch
argument_list|)
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addRow
argument_list|(
name|tr
argument_list|(
literal|"Match&type:"
argument_list|)
argument_list|,
name|matchTypeComboBox
argument_list|)
expr_stmt|;
name|dontCheckSubjectStringMatchOptionCheckBox
operator|=
operator|new
name|QCheckBox
argument_list|(
name|tr
argument_list|(
literal|"Don't check subject string"
argument_list|)
argument_list|)
expr_stmt|;
name|anchoredMatchOptionCheckBox
operator|=
operator|new
name|QCheckBox
argument_list|(
name|tr
argument_list|(
literal|"Anchored match"
argument_list|)
argument_list|)
expr_stmt|;
name|QGridLayout
modifier|*
name|matchOptionsCheckBoxLayout
init|=
operator|new
name|QGridLayout
decl_stmt|;
name|matchOptionsCheckBoxLayout
operator|->
name|addWidget
argument_list|(
name|dontCheckSubjectStringMatchOptionCheckBox
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|matchOptionsCheckBoxLayout
operator|->
name|addWidget
argument_list|(
name|anchoredMatchOptionCheckBox
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addRow
argument_list|(
name|tr
argument_list|(
literal|"Match options:"
argument_list|)
argument_list|,
name|matchOptionsCheckBoxLayout
argument_list|)
expr_stmt|;
return|return
name|container
return|;
block|}
end_function
begin_function
DECL|function|setupRightUi
name|QWidget
modifier|*
name|RegularExpressionDialog
operator|::
name|setupRightUi
parameter_list|()
block|{
name|QWidget
modifier|*
name|container
init|=
operator|new
name|QWidget
decl_stmt|;
name|QFormLayout
modifier|*
name|layout
init|=
operator|new
name|QFormLayout
argument_list|(
name|container
argument_list|)
decl_stmt|;
name|layout
operator|->
name|setFieldGrowthPolicy
argument_list|(
name|QFormLayout
operator|::
name|AllNonFixedFieldsGrow
argument_list|)
expr_stmt|;
name|layout
operator|->
name|setMargin
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QLabel
modifier|*
name|matchInfoLabel
init|=
operator|new
name|QLabel
argument_list|(
name|tr
argument_list|(
literal|"<h3>Match information</h3>"
argument_list|)
argument_list|)
decl_stmt|;
name|layout
operator|->
name|addRow
argument_list|(
name|matchInfoLabel
argument_list|)
expr_stmt|;
name|matchDetailsTreeWidget
operator|=
operator|new
name|QTreeWidget
expr_stmt|;
name|matchDetailsTreeWidget
operator|->
name|setHeaderLabels
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|tr
argument_list|(
literal|"Match index"
argument_list|)
operator|<<
name|tr
argument_list|(
literal|"Group index"
argument_list|)
operator|<<
name|tr
argument_list|(
literal|"Captured string"
argument_list|)
argument_list|)
expr_stmt|;
name|matchDetailsTreeWidget
operator|->
name|setSizeAdjustPolicy
argument_list|(
name|QTreeWidget
operator|::
name|AdjustToContents
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addRow
argument_list|(
name|tr
argument_list|(
literal|"Match details:"
argument_list|)
argument_list|,
name|matchDetailsTreeWidget
argument_list|)
expr_stmt|;
name|QFrame
modifier|*
name|horizontalSeparator
init|=
operator|new
name|QFrame
decl_stmt|;
name|horizontalSeparator
operator|->
name|setFrameStyle
argument_list|(
name|QFrame
operator|::
name|HLine
operator||
name|QFrame
operator|::
name|Sunken
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addRow
argument_list|(
name|horizontalSeparator
argument_list|)
expr_stmt|;
name|QLabel
modifier|*
name|regexpInfoLabel
init|=
operator|new
name|QLabel
argument_list|(
name|tr
argument_list|(
literal|"<h3>Regular expression information</h3>"
argument_list|)
argument_list|)
decl_stmt|;
name|layout
operator|->
name|addRow
argument_list|(
name|regexpInfoLabel
argument_list|)
expr_stmt|;
name|regexpStatusLabel
operator|=
operator|new
name|QLabel
argument_list|(
name|tr
argument_list|(
literal|"Valid"
argument_list|)
argument_list|)
expr_stmt|;
name|regexpStatusLabel
operator|->
name|setWordWrap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addRow
argument_list|(
name|tr
argument_list|(
literal|"Pattern status:"
argument_list|)
argument_list|,
name|regexpStatusLabel
argument_list|)
expr_stmt|;
name|namedGroupsTreeWidget
operator|=
operator|new
name|QTreeWidget
expr_stmt|;
name|namedGroupsTreeWidget
operator|->
name|setHeaderLabels
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|tr
argument_list|(
literal|"Index"
argument_list|)
operator|<<
name|tr
argument_list|(
literal|"Named group"
argument_list|)
argument_list|)
expr_stmt|;
name|namedGroupsTreeWidget
operator|->
name|setSizeAdjustPolicy
argument_list|(
name|QTreeWidget
operator|::
name|AdjustToContents
argument_list|)
expr_stmt|;
name|namedGroupsTreeWidget
operator|->
name|setRootIsDecorated
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addRow
argument_list|(
name|tr
argument_list|(
literal|"Named groups:"
argument_list|)
argument_list|,
name|namedGroupsTreeWidget
argument_list|)
expr_stmt|;
return|return
name|container
return|;
block|}
end_function
end_unit
