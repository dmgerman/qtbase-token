begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names **     of its contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"interfaces.h"
end_include
begin_include
include|#
directive|include
file|"mainwindow.h"
end_include
begin_include
include|#
directive|include
file|"paintarea.h"
end_include
begin_include
include|#
directive|include
file|"plugindialog.h"
end_include
begin_include
include|#
directive|include
file|<QPluginLoader>
end_include
begin_include
include|#
directive|include
file|<QTimer>
end_include
begin_include
include|#
directive|include
file|<QScrollArea>
end_include
begin_include
include|#
directive|include
file|<QMessageBox>
end_include
begin_include
include|#
directive|include
file|<QActionGroup>
end_include
begin_include
include|#
directive|include
file|<QAction>
end_include
begin_include
include|#
directive|include
file|<QMenu>
end_include
begin_include
include|#
directive|include
file|<QMenuBar>
end_include
begin_include
include|#
directive|include
file|<QFileDialog>
end_include
begin_include
include|#
directive|include
file|<QColorDialog>
end_include
begin_include
include|#
directive|include
file|<QInputDialog>
end_include
begin_include
include|#
directive|include
file|<QApplication>
end_include
begin_constructor
DECL|function|MainWindow
name|MainWindow
operator|::
name|MainWindow
parameter_list|()
member_init_list|:
name|paintArea
argument_list|(
operator|new
name|PaintArea
argument_list|)
member_init_list|,
name|scrollArea
argument_list|(
operator|new
name|QScrollArea
argument_list|)
block|{
name|scrollArea
operator|->
name|setBackgroundRole
argument_list|(
name|QPalette
operator|::
name|Dark
argument_list|)
expr_stmt|;
name|scrollArea
operator|->
name|setWidget
argument_list|(
name|paintArea
argument_list|)
expr_stmt|;
name|setCentralWidget
argument_list|(
name|scrollArea
argument_list|)
expr_stmt|;
name|createActions
argument_list|()
expr_stmt|;
name|createMenus
argument_list|()
expr_stmt|;
name|loadPlugins
argument_list|()
expr_stmt|;
name|setWindowTitle
argument_list|(
name|tr
argument_list|(
literal|"Plug& Paint"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|brushActionGroup
operator|->
name|actions
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|brushActionGroup
operator|->
name|actions
argument_list|()
operator|.
name|first
argument_list|()
operator|->
name|trigger
argument_list|()
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|500
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|aboutPlugins
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|open
name|void
name|MainWindow
operator|::
name|open
parameter_list|()
block|{
specifier|const
name|QString
name|fileName
init|=
name|QFileDialog
operator|::
name|getOpenFileName
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"Open File"
argument_list|)
argument_list|,
name|QDir
operator|::
name|currentPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fileName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|paintArea
operator|->
name|openImage
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
name|QMessageBox
operator|::
name|information
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"Plug& Paint"
argument_list|)
argument_list|,
name|tr
argument_list|(
literal|"Cannot load %1."
argument_list|)
operator|.
name|arg
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|paintArea
operator|->
name|adjustSize
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|saveAs
name|bool
name|MainWindow
operator|::
name|saveAs
parameter_list|()
block|{
specifier|const
name|QString
name|initialPath
init|=
name|QDir
operator|::
name|currentPath
argument_list|()
operator|+
literal|"/untitled.png"
decl_stmt|;
specifier|const
name|QString
name|fileName
init|=
name|QFileDialog
operator|::
name|getSaveFileName
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"Save As"
argument_list|)
argument_list|,
name|initialPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
return|return
name|paintArea
operator|->
name|saveImage
argument_list|(
name|fileName
argument_list|,
literal|"png"
argument_list|)
return|;
block|}
block|}
end_function
begin_function
DECL|function|brushColor
name|void
name|MainWindow
operator|::
name|brushColor
parameter_list|()
block|{
specifier|const
name|QColor
name|newColor
init|=
name|QColorDialog
operator|::
name|getColor
argument_list|(
name|paintArea
operator|->
name|brushColor
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|newColor
operator|.
name|isValid
argument_list|()
condition|)
name|paintArea
operator|->
name|setBrushColor
argument_list|(
name|newColor
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|brushWidth
name|void
name|MainWindow
operator|::
name|brushWidth
parameter_list|()
block|{
name|bool
name|ok
decl_stmt|;
specifier|const
name|int
name|newWidth
init|=
name|QInputDialog
operator|::
name|getInt
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"Plug& Paint"
argument_list|)
argument_list|,
name|tr
argument_list|(
literal|"Select brush width:"
argument_list|)
argument_list|,
name|paintArea
operator|->
name|brushWidth
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|50
argument_list|,
literal|1
argument_list|,
operator|&
name|ok
argument_list|)
decl_stmt|;
if|if
condition|(
name|ok
condition|)
name|paintArea
operator|->
name|setBrushWidth
argument_list|(
name|newWidth
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [0]
end_comment
begin_function
DECL|function|changeBrush
name|void
name|MainWindow
operator|::
name|changeBrush
parameter_list|()
block|{
name|QAction
modifier|*
name|action
init|=
name|qobject_cast
argument_list|<
name|QAction
operator|*
argument_list|>
argument_list|(
name|sender
argument_list|()
argument_list|)
decl_stmt|;
name|BrushInterface
modifier|*
name|iBrush
init|=
name|qobject_cast
argument_list|<
name|BrushInterface
operator|*
argument_list|>
argument_list|(
name|action
operator|->
name|parent
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|brush
init|=
name|action
operator|->
name|text
argument_list|()
decl_stmt|;
name|paintArea
operator|->
name|setBrush
argument_list|(
name|iBrush
argument_list|,
name|brush
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [0]
end_comment
begin_comment
comment|//! [1]
end_comment
begin_function
DECL|function|insertShape
name|void
name|MainWindow
operator|::
name|insertShape
parameter_list|()
block|{
name|QAction
modifier|*
name|action
init|=
name|qobject_cast
argument_list|<
name|QAction
operator|*
argument_list|>
argument_list|(
name|sender
argument_list|()
argument_list|)
decl_stmt|;
name|ShapeInterface
modifier|*
name|iShape
init|=
name|qobject_cast
argument_list|<
name|ShapeInterface
operator|*
argument_list|>
argument_list|(
name|action
operator|->
name|parent
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QPainterPath
name|path
init|=
name|iShape
operator|->
name|generateShape
argument_list|(
name|action
operator|->
name|text
argument_list|()
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
name|paintArea
operator|->
name|insertShape
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [1]
end_comment
begin_comment
comment|//! [2]
end_comment
begin_function
DECL|function|applyFilter
name|void
name|MainWindow
operator|::
name|applyFilter
parameter_list|()
block|{
name|QAction
modifier|*
name|action
init|=
name|qobject_cast
argument_list|<
name|QAction
operator|*
argument_list|>
argument_list|(
name|sender
argument_list|()
argument_list|)
decl_stmt|;
name|FilterInterface
modifier|*
name|iFilter
init|=
name|qobject_cast
argument_list|<
name|FilterInterface
operator|*
argument_list|>
argument_list|(
name|action
operator|->
name|parent
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QImage
name|image
init|=
name|iFilter
operator|->
name|filterImage
argument_list|(
name|action
operator|->
name|text
argument_list|()
argument_list|,
name|paintArea
operator|->
name|image
argument_list|()
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|paintArea
operator|->
name|setImage
argument_list|(
name|image
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [2]
end_comment
begin_function
DECL|function|about
name|void
name|MainWindow
operator|::
name|about
parameter_list|()
block|{
name|QMessageBox
operator|::
name|about
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"About Plug& Paint"
argument_list|)
argument_list|,
name|tr
argument_list|(
literal|"The<b>Plug& Paint</b> example demonstrates how to write Qt "
literal|"applications that can be extended through plugins."
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [3]
end_comment
begin_function
DECL|function|aboutPlugins
name|void
name|MainWindow
operator|::
name|aboutPlugins
parameter_list|()
block|{
name|PluginDialog
name|dialog
argument_list|(
name|pluginsDir
operator|.
name|path
argument_list|()
argument_list|,
name|pluginFileNames
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|dialog
operator|.
name|exec
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [3]
end_comment
begin_function
DECL|function|createActions
name|void
name|MainWindow
operator|::
name|createActions
parameter_list|()
block|{
name|openAct
operator|=
operator|new
name|QAction
argument_list|(
name|tr
argument_list|(
literal|"&Open..."
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|openAct
operator|->
name|setShortcuts
argument_list|(
name|QKeySequence
operator|::
name|Open
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|openAct
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|open
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|saveAsAct
operator|=
operator|new
name|QAction
argument_list|(
name|tr
argument_list|(
literal|"&Save As..."
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|saveAsAct
operator|->
name|setShortcuts
argument_list|(
name|QKeySequence
operator|::
name|SaveAs
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|saveAsAct
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|saveAs
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|exitAct
operator|=
operator|new
name|QAction
argument_list|(
name|tr
argument_list|(
literal|"E&xit"
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|exitAct
operator|->
name|setShortcuts
argument_list|(
name|QKeySequence
operator|::
name|Quit
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|exitAct
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|close
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|brushColorAct
operator|=
operator|new
name|QAction
argument_list|(
name|tr
argument_list|(
literal|"&Brush Color..."
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|brushColorAct
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|brushColor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|brushWidthAct
operator|=
operator|new
name|QAction
argument_list|(
name|tr
argument_list|(
literal|"&Brush Width..."
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|brushWidthAct
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|brushWidth
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|brushActionGroup
operator|=
operator|new
name|QActionGroup
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|aboutAct
operator|=
operator|new
name|QAction
argument_list|(
name|tr
argument_list|(
literal|"&About"
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|aboutAct
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|about
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|aboutQtAct
operator|=
operator|new
name|QAction
argument_list|(
name|tr
argument_list|(
literal|"About&Qt"
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|aboutQtAct
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|qApp
argument_list|,
name|SLOT
argument_list|(
name|aboutQt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|aboutPluginsAct
operator|=
operator|new
name|QAction
argument_list|(
name|tr
argument_list|(
literal|"About&Plugins"
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|aboutPluginsAct
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|aboutPlugins
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|createMenus
name|void
name|MainWindow
operator|::
name|createMenus
parameter_list|()
block|{
name|fileMenu
operator|=
name|menuBar
argument_list|()
operator|->
name|addMenu
argument_list|(
name|tr
argument_list|(
literal|"&File"
argument_list|)
argument_list|)
expr_stmt|;
name|fileMenu
operator|->
name|addAction
argument_list|(
name|openAct
argument_list|)
expr_stmt|;
name|fileMenu
operator|->
name|addAction
argument_list|(
name|saveAsAct
argument_list|)
expr_stmt|;
name|fileMenu
operator|->
name|addSeparator
argument_list|()
expr_stmt|;
name|fileMenu
operator|->
name|addAction
argument_list|(
name|exitAct
argument_list|)
expr_stmt|;
name|brushMenu
operator|=
name|menuBar
argument_list|()
operator|->
name|addMenu
argument_list|(
name|tr
argument_list|(
literal|"&Brush"
argument_list|)
argument_list|)
expr_stmt|;
name|brushMenu
operator|->
name|addAction
argument_list|(
name|brushColorAct
argument_list|)
expr_stmt|;
name|brushMenu
operator|->
name|addAction
argument_list|(
name|brushWidthAct
argument_list|)
expr_stmt|;
name|brushMenu
operator|->
name|addSeparator
argument_list|()
expr_stmt|;
name|shapesMenu
operator|=
name|menuBar
argument_list|()
operator|->
name|addMenu
argument_list|(
name|tr
argument_list|(
literal|"&Shapes"
argument_list|)
argument_list|)
expr_stmt|;
name|filterMenu
operator|=
name|menuBar
argument_list|()
operator|->
name|addMenu
argument_list|(
name|tr
argument_list|(
literal|"&Filter"
argument_list|)
argument_list|)
expr_stmt|;
name|menuBar
argument_list|()
operator|->
name|addSeparator
argument_list|()
expr_stmt|;
name|helpMenu
operator|=
name|menuBar
argument_list|()
operator|->
name|addMenu
argument_list|(
name|tr
argument_list|(
literal|"&Help"
argument_list|)
argument_list|)
expr_stmt|;
name|helpMenu
operator|->
name|addAction
argument_list|(
name|aboutAct
argument_list|)
expr_stmt|;
name|helpMenu
operator|->
name|addAction
argument_list|(
name|aboutQtAct
argument_list|)
expr_stmt|;
name|helpMenu
operator|->
name|addAction
argument_list|(
name|aboutPluginsAct
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [4]
end_comment
begin_function
DECL|function|loadPlugins
name|void
name|MainWindow
operator|::
name|loadPlugins
parameter_list|()
block|{
foreach|foreach
control|(
name|QObject
modifier|*
name|plugin
decl|,
name|QPluginLoader
operator|::
name|staticInstances
argument_list|()
control|)
name|populateMenus
argument_list|(
name|plugin
argument_list|)
expr_stmt|;
comment|//! [4] //! [5]
name|pluginsDir
operator|=
name|QDir
argument_list|(
name|qApp
operator|->
name|applicationDirPath
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
if|if
condition|(
name|pluginsDir
operator|.
name|dirName
argument_list|()
operator|.
name|toLower
argument_list|()
operator|==
literal|"debug"
operator|||
name|pluginsDir
operator|.
name|dirName
argument_list|()
operator|.
name|toLower
argument_list|()
operator|==
literal|"release"
condition|)
name|pluginsDir
operator|.
name|cdUp
argument_list|()
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
if|if
condition|(
name|pluginsDir
operator|.
name|dirName
argument_list|()
operator|==
literal|"MacOS"
condition|)
block|{
name|pluginsDir
operator|.
name|cdUp
argument_list|()
expr_stmt|;
name|pluginsDir
operator|.
name|cdUp
argument_list|()
expr_stmt|;
name|pluginsDir
operator|.
name|cdUp
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
name|pluginsDir
operator|.
name|cd
argument_list|(
literal|"plugins"
argument_list|)
expr_stmt|;
comment|//! [5]
comment|//! [6]
foreach|foreach
control|(
name|QString
name|fileName
decl|,
name|pluginsDir
operator|.
name|entryList
argument_list|(
name|QDir
operator|::
name|Files
argument_list|)
control|)
block|{
name|QPluginLoader
name|loader
argument_list|(
name|pluginsDir
operator|.
name|absoluteFilePath
argument_list|(
name|fileName
argument_list|)
argument_list|)
decl_stmt|;
name|QObject
modifier|*
name|plugin
init|=
name|loader
operator|.
name|instance
argument_list|()
decl_stmt|;
if|if
condition|(
name|plugin
condition|)
block|{
name|populateMenus
argument_list|(
name|plugin
argument_list|)
expr_stmt|;
name|pluginFileNames
operator|+=
name|fileName
expr_stmt|;
comment|//! [6] //! [7]
block|}
comment|//! [7] //! [8]
block|}
comment|//! [8]
comment|//! [9]
name|brushMenu
operator|->
name|setEnabled
argument_list|(
operator|!
name|brushActionGroup
operator|->
name|actions
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|shapesMenu
operator|->
name|setEnabled
argument_list|(
operator|!
name|shapesMenu
operator|->
name|actions
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|filterMenu
operator|->
name|setEnabled
argument_list|(
operator|!
name|filterMenu
operator|->
name|actions
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [9]
end_comment
begin_comment
comment|//! [10]
end_comment
begin_function
DECL|function|populateMenus
name|void
name|MainWindow
operator|::
name|populateMenus
parameter_list|(
name|QObject
modifier|*
name|plugin
parameter_list|)
block|{
name|BrushInterface
modifier|*
name|iBrush
init|=
name|qobject_cast
argument_list|<
name|BrushInterface
operator|*
argument_list|>
argument_list|(
name|plugin
argument_list|)
decl_stmt|;
if|if
condition|(
name|iBrush
condition|)
name|addToMenu
argument_list|(
name|plugin
argument_list|,
name|iBrush
operator|->
name|brushes
argument_list|()
argument_list|,
name|brushMenu
argument_list|,
name|SLOT
argument_list|(
name|changeBrush
argument_list|()
argument_list|)
argument_list|,
name|brushActionGroup
argument_list|)
expr_stmt|;
name|ShapeInterface
modifier|*
name|iShape
init|=
name|qobject_cast
argument_list|<
name|ShapeInterface
operator|*
argument_list|>
argument_list|(
name|plugin
argument_list|)
decl_stmt|;
if|if
condition|(
name|iShape
condition|)
name|addToMenu
argument_list|(
name|plugin
argument_list|,
name|iShape
operator|->
name|shapes
argument_list|()
argument_list|,
name|shapesMenu
argument_list|,
name|SLOT
argument_list|(
name|insertShape
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|FilterInterface
modifier|*
name|iFilter
init|=
name|qobject_cast
argument_list|<
name|FilterInterface
operator|*
argument_list|>
argument_list|(
name|plugin
argument_list|)
decl_stmt|;
if|if
condition|(
name|iFilter
condition|)
name|addToMenu
argument_list|(
name|plugin
argument_list|,
name|iFilter
operator|->
name|filters
argument_list|()
argument_list|,
name|filterMenu
argument_list|,
name|SLOT
argument_list|(
name|applyFilter
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [10]
end_comment
begin_function
DECL|function|addToMenu
name|void
name|MainWindow
operator|::
name|addToMenu
parameter_list|(
name|QObject
modifier|*
name|plugin
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|texts
parameter_list|,
name|QMenu
modifier|*
name|menu
parameter_list|,
specifier|const
name|char
modifier|*
name|member
parameter_list|,
name|QActionGroup
modifier|*
name|actionGroup
parameter_list|)
block|{
foreach|foreach
control|(
name|QString
name|text
decl|,
name|texts
control|)
block|{
name|QAction
modifier|*
name|action
init|=
operator|new
name|QAction
argument_list|(
name|text
argument_list|,
name|plugin
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|action
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|member
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addAction
argument_list|(
name|action
argument_list|)
expr_stmt|;
if|if
condition|(
name|actionGroup
condition|)
block|{
name|action
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|actionGroup
operator|->
name|addAction
argument_list|(
name|action
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
end_unit
