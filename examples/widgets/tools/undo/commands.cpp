begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the demonstration applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** BSD License Usage ** Alternatively, you may use this file under the terms of the BSD license ** as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of The Qt Company Ltd nor the names of its **     contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"commands.h"
end_include
begin_decl_stmt
DECL|variable|setShapeRectCommandId
specifier|static
specifier|const
name|int
name|setShapeRectCommandId
init|=
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|setShapeColorCommandId
specifier|static
specifier|const
name|int
name|setShapeColorCommandId
init|=
literal|2
decl_stmt|;
end_decl_stmt
begin_comment
comment|/****************************************************************************** ** AddShapeCommand */
end_comment
begin_constructor
DECL|function|AddShapeCommand
name|AddShapeCommand
operator|::
name|AddShapeCommand
parameter_list|(
name|Document
modifier|*
name|doc
parameter_list|,
specifier|const
name|Shape
modifier|&
name|shape
parameter_list|,
name|QUndoCommand
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QUndoCommand
argument_list|(
name|parent
argument_list|)
block|{
name|m_doc
operator|=
name|doc
expr_stmt|;
name|m_shape
operator|=
name|shape
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|undo
name|void
name|AddShapeCommand
operator|::
name|undo
parameter_list|()
block|{
name|m_doc
operator|->
name|deleteShape
argument_list|(
name|m_shapeName
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|redo
name|void
name|AddShapeCommand
operator|::
name|redo
parameter_list|()
block|{
comment|// A shape only gets a name when it is inserted into a document
name|m_shapeName
operator|=
name|m_doc
operator|->
name|addShape
argument_list|(
name|m_shape
argument_list|)
expr_stmt|;
name|setText
argument_list|(
name|QObject
operator|::
name|tr
argument_list|(
literal|"Add %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|m_shapeName
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/****************************************************************************** ** RemoveShapeCommand */
end_comment
begin_constructor
DECL|function|RemoveShapeCommand
name|RemoveShapeCommand
operator|::
name|RemoveShapeCommand
parameter_list|(
name|Document
modifier|*
name|doc
parameter_list|,
specifier|const
name|QString
modifier|&
name|shapeName
parameter_list|,
name|QUndoCommand
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QUndoCommand
argument_list|(
name|parent
argument_list|)
block|{
name|setText
argument_list|(
name|QObject
operator|::
name|tr
argument_list|(
literal|"Remove %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|shapeName
argument_list|)
argument_list|)
expr_stmt|;
name|m_doc
operator|=
name|doc
expr_stmt|;
name|m_shape
operator|=
name|doc
operator|->
name|shape
argument_list|(
name|shapeName
argument_list|)
expr_stmt|;
name|m_shapeName
operator|=
name|shapeName
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|undo
name|void
name|RemoveShapeCommand
operator|::
name|undo
parameter_list|()
block|{
name|m_shapeName
operator|=
name|m_doc
operator|->
name|addShape
argument_list|(
name|m_shape
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|redo
name|void
name|RemoveShapeCommand
operator|::
name|redo
parameter_list|()
block|{
name|m_doc
operator|->
name|deleteShape
argument_list|(
name|m_shapeName
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/****************************************************************************** ** SetShapeColorCommand */
end_comment
begin_constructor
DECL|function|SetShapeColorCommand
name|SetShapeColorCommand
operator|::
name|SetShapeColorCommand
parameter_list|(
name|Document
modifier|*
name|doc
parameter_list|,
specifier|const
name|QString
modifier|&
name|shapeName
parameter_list|,
specifier|const
name|QColor
modifier|&
name|color
parameter_list|,
name|QUndoCommand
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QUndoCommand
argument_list|(
name|parent
argument_list|)
block|{
name|setText
argument_list|(
name|QObject
operator|::
name|tr
argument_list|(
literal|"Set %1's color"
argument_list|)
operator|.
name|arg
argument_list|(
name|shapeName
argument_list|)
argument_list|)
expr_stmt|;
name|m_doc
operator|=
name|doc
expr_stmt|;
name|m_shapeName
operator|=
name|shapeName
expr_stmt|;
name|m_oldColor
operator|=
name|doc
operator|->
name|shape
argument_list|(
name|shapeName
argument_list|)
operator|.
name|color
argument_list|()
expr_stmt|;
name|m_newColor
operator|=
name|color
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|undo
name|void
name|SetShapeColorCommand
operator|::
name|undo
parameter_list|()
block|{
name|m_doc
operator|->
name|setShapeColor
argument_list|(
name|m_shapeName
argument_list|,
name|m_oldColor
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|redo
name|void
name|SetShapeColorCommand
operator|::
name|redo
parameter_list|()
block|{
name|m_doc
operator|->
name|setShapeColor
argument_list|(
name|m_shapeName
argument_list|,
name|m_newColor
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mergeWith
name|bool
name|SetShapeColorCommand
operator|::
name|mergeWith
parameter_list|(
specifier|const
name|QUndoCommand
modifier|*
name|command
parameter_list|)
block|{
if|if
condition|(
name|command
operator|->
name|id
argument_list|()
operator|!=
name|setShapeColorCommandId
condition|)
return|return
literal|false
return|;
specifier|const
name|SetShapeColorCommand
modifier|*
name|other
init|=
cast|static_cast
argument_list|<
specifier|const
name|SetShapeColorCommand
operator|*
argument_list|>
argument_list|(
name|command
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_shapeName
operator|!=
name|other
operator|->
name|m_shapeName
condition|)
return|return
literal|false
return|;
name|m_newColor
operator|=
name|other
operator|->
name|m_newColor
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|id
name|int
name|SetShapeColorCommand
operator|::
name|id
parameter_list|()
specifier|const
block|{
return|return
name|setShapeColorCommandId
return|;
block|}
end_function
begin_comment
comment|/****************************************************************************** ** SetShapeRectCommand */
end_comment
begin_constructor
DECL|function|SetShapeRectCommand
name|SetShapeRectCommand
operator|::
name|SetShapeRectCommand
parameter_list|(
name|Document
modifier|*
name|doc
parameter_list|,
specifier|const
name|QString
modifier|&
name|shapeName
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|QUndoCommand
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QUndoCommand
argument_list|(
name|parent
argument_list|)
block|{
name|setText
argument_list|(
name|QObject
operator|::
name|tr
argument_list|(
literal|"Change %1's geometry"
argument_list|)
operator|.
name|arg
argument_list|(
name|shapeName
argument_list|)
argument_list|)
expr_stmt|;
name|m_doc
operator|=
name|doc
expr_stmt|;
name|m_shapeName
operator|=
name|shapeName
expr_stmt|;
name|m_oldRect
operator|=
name|doc
operator|->
name|shape
argument_list|(
name|shapeName
argument_list|)
operator|.
name|rect
argument_list|()
expr_stmt|;
name|m_newRect
operator|=
name|rect
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|undo
name|void
name|SetShapeRectCommand
operator|::
name|undo
parameter_list|()
block|{
name|m_doc
operator|->
name|setShapeRect
argument_list|(
name|m_shapeName
argument_list|,
name|m_oldRect
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|redo
name|void
name|SetShapeRectCommand
operator|::
name|redo
parameter_list|()
block|{
name|m_doc
operator|->
name|setShapeRect
argument_list|(
name|m_shapeName
argument_list|,
name|m_newRect
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mergeWith
name|bool
name|SetShapeRectCommand
operator|::
name|mergeWith
parameter_list|(
specifier|const
name|QUndoCommand
modifier|*
name|command
parameter_list|)
block|{
if|if
condition|(
name|command
operator|->
name|id
argument_list|()
operator|!=
name|setShapeRectCommandId
condition|)
return|return
literal|false
return|;
specifier|const
name|SetShapeRectCommand
modifier|*
name|other
init|=
cast|static_cast
argument_list|<
specifier|const
name|SetShapeRectCommand
operator|*
argument_list|>
argument_list|(
name|command
argument_list|)
decl_stmt|;
if|if
condition|(
name|m_shapeName
operator|!=
name|other
operator|->
name|m_shapeName
condition|)
return|return
literal|false
return|;
name|m_newRect
operator|=
name|other
operator|->
name|m_newRect
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|id
name|int
name|SetShapeRectCommand
operator|::
name|id
parameter_list|()
specifier|const
block|{
return|return
name|setShapeRectCommandId
return|;
block|}
end_function
end_unit
