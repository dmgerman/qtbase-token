begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the demonstration applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** BSD License Usage ** Alternatively, you may use this file under the terms of the BSD license ** as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of The Qt Company Ltd nor the names of its **     contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QUndoGroup>
end_include
begin_include
include|#
directive|include
file|<QUndoStack>
end_include
begin_include
include|#
directive|include
file|<QFileDialog>
end_include
begin_include
include|#
directive|include
file|<QMessageBox>
end_include
begin_include
include|#
directive|include
file|<QTextStream>
end_include
begin_include
include|#
directive|include
file|<QToolButton>
end_include
begin_include
include|#
directive|include
file|"document.h"
end_include
begin_include
include|#
directive|include
file|"mainwindow.h"
end_include
begin_include
include|#
directive|include
file|"commands.h"
end_include
begin_constructor
DECL|function|MainWindow
name|MainWindow
operator|::
name|MainWindow
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QMainWindow
argument_list|(
name|parent
argument_list|)
block|{
name|setupUi
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|w
init|=
name|documentTabs
operator|->
name|widget
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|documentTabs
operator|->
name|removeTab
argument_list|(
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|w
expr_stmt|;
name|connect
argument_list|(
name|actionOpen
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|openDocument
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|actionClose
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|closeDocument
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|actionNew
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|newDocument
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|actionSave
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|saveDocument
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|actionExit
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|close
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|actionRed
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|setShapeColor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|actionGreen
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|setShapeColor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|actionBlue
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|setShapeColor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|actionAddCircle
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|addShape
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|actionAddRectangle
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|addShape
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|actionAddTriangle
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|addShape
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|actionRemoveShape
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|removeShape
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|actionAddRobot
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|addRobot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|actionAddSnowman
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|addSnowman
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|actionAbout
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|about
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|actionAboutQt
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|aboutQt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|undoLimit
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|updateActions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|documentTabs
argument_list|,
name|SIGNAL
argument_list|(
name|currentChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|updateActions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|actionOpen
operator|->
name|setShortcut
argument_list|(
name|QString
argument_list|(
literal|"Ctrl+O"
argument_list|)
argument_list|)
expr_stmt|;
name|actionClose
operator|->
name|setShortcut
argument_list|(
name|QString
argument_list|(
literal|"Ctrl+W"
argument_list|)
argument_list|)
expr_stmt|;
name|actionNew
operator|->
name|setShortcut
argument_list|(
name|QString
argument_list|(
literal|"Ctrl+N"
argument_list|)
argument_list|)
expr_stmt|;
name|actionSave
operator|->
name|setShortcut
argument_list|(
name|QString
argument_list|(
literal|"Ctrl+S"
argument_list|)
argument_list|)
expr_stmt|;
name|actionExit
operator|->
name|setShortcut
argument_list|(
name|QString
argument_list|(
literal|"Ctrl+Q"
argument_list|)
argument_list|)
expr_stmt|;
name|actionRemoveShape
operator|->
name|setShortcut
argument_list|(
name|QString
argument_list|(
literal|"Del"
argument_list|)
argument_list|)
expr_stmt|;
name|actionRed
operator|->
name|setShortcut
argument_list|(
name|QString
argument_list|(
literal|"Alt+R"
argument_list|)
argument_list|)
expr_stmt|;
name|actionGreen
operator|->
name|setShortcut
argument_list|(
name|QString
argument_list|(
literal|"Alt+G"
argument_list|)
argument_list|)
expr_stmt|;
name|actionBlue
operator|->
name|setShortcut
argument_list|(
name|QString
argument_list|(
literal|"Alt+B"
argument_list|)
argument_list|)
expr_stmt|;
name|actionAddCircle
operator|->
name|setShortcut
argument_list|(
name|QString
argument_list|(
literal|"Alt+C"
argument_list|)
argument_list|)
expr_stmt|;
name|actionAddRectangle
operator|->
name|setShortcut
argument_list|(
name|QString
argument_list|(
literal|"Alt+L"
argument_list|)
argument_list|)
expr_stmt|;
name|actionAddTriangle
operator|->
name|setShortcut
argument_list|(
name|QString
argument_list|(
literal|"Alt+T"
argument_list|)
argument_list|)
expr_stmt|;
name|m_undoGroup
operator|=
operator|new
name|QUndoGroup
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|undoView
operator|->
name|setGroup
argument_list|(
name|m_undoGroup
argument_list|)
expr_stmt|;
name|undoView
operator|->
name|setCleanIcon
argument_list|(
name|QIcon
argument_list|(
literal|":/icons/ok.png"
argument_list|)
argument_list|)
expr_stmt|;
name|QAction
modifier|*
name|undoAction
init|=
name|m_undoGroup
operator|->
name|createUndoAction
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QAction
modifier|*
name|redoAction
init|=
name|m_undoGroup
operator|->
name|createRedoAction
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|undoAction
operator|->
name|setIcon
argument_list|(
name|QIcon
argument_list|(
literal|":/icons/undo.png"
argument_list|)
argument_list|)
expr_stmt|;
name|redoAction
operator|->
name|setIcon
argument_list|(
name|QIcon
argument_list|(
literal|":/icons/redo.png"
argument_list|)
argument_list|)
expr_stmt|;
name|menuShape
operator|->
name|insertAction
argument_list|(
name|menuShape
operator|->
name|actions
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|undoAction
argument_list|)
expr_stmt|;
name|menuShape
operator|->
name|insertAction
argument_list|(
name|undoAction
argument_list|,
name|redoAction
argument_list|)
expr_stmt|;
name|toolBar
operator|->
name|addAction
argument_list|(
name|undoAction
argument_list|)
expr_stmt|;
name|toolBar
operator|->
name|addAction
argument_list|(
name|redoAction
argument_list|)
expr_stmt|;
name|newDocument
argument_list|()
expr_stmt|;
name|updateActions
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_function
DECL|function|updateActions
name|void
name|MainWindow
operator|::
name|updateActions
parameter_list|()
block|{
name|Document
modifier|*
name|doc
init|=
name|currentDocument
argument_list|()
decl_stmt|;
name|m_undoGroup
operator|->
name|setActiveStack
argument_list|(
name|doc
operator|==
literal|0
condition|?
literal|0
else|:
name|doc
operator|->
name|undoStack
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|shapeName
init|=
name|doc
operator|==
literal|0
condition|?
name|QString
argument_list|()
else|:
name|doc
operator|->
name|currentShapeName
argument_list|()
decl_stmt|;
name|actionAddRobot
operator|->
name|setEnabled
argument_list|(
name|doc
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|actionAddSnowman
operator|->
name|setEnabled
argument_list|(
name|doc
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|actionAddCircle
operator|->
name|setEnabled
argument_list|(
name|doc
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|actionAddRectangle
operator|->
name|setEnabled
argument_list|(
name|doc
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|actionAddTriangle
operator|->
name|setEnabled
argument_list|(
name|doc
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|actionClose
operator|->
name|setEnabled
argument_list|(
name|doc
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|actionSave
operator|->
name|setEnabled
argument_list|(
name|doc
operator|!=
literal|0
operator|&&
operator|!
name|doc
operator|->
name|undoStack
argument_list|()
operator|->
name|isClean
argument_list|()
argument_list|)
expr_stmt|;
name|undoLimit
operator|->
name|setEnabled
argument_list|(
name|doc
operator|!=
literal|0
operator|&&
name|doc
operator|->
name|undoStack
argument_list|()
operator|->
name|count
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|shapeName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|actionRed
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|actionGreen
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|actionBlue
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|actionRemoveShape
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|Shape
name|shape
init|=
name|doc
operator|->
name|shape
argument_list|(
name|shapeName
argument_list|)
decl_stmt|;
name|actionRed
operator|->
name|setEnabled
argument_list|(
name|shape
operator|.
name|color
argument_list|()
operator|!=
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|actionGreen
operator|->
name|setEnabled
argument_list|(
name|shape
operator|.
name|color
argument_list|()
operator|!=
name|Qt
operator|::
name|green
argument_list|)
expr_stmt|;
name|actionBlue
operator|->
name|setEnabled
argument_list|(
name|shape
operator|.
name|color
argument_list|()
operator|!=
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
name|actionRemoveShape
operator|->
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|doc
operator|!=
literal|0
condition|)
block|{
name|int
name|index
init|=
name|documentTabs
operator|->
name|indexOf
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|index
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
specifier|static
specifier|const
name|QIcon
name|unsavedIcon
argument_list|(
literal|":/icons/filesave.png"
argument_list|)
decl_stmt|;
name|documentTabs
operator|->
name|setTabIcon
argument_list|(
name|index
argument_list|,
name|doc
operator|->
name|undoStack
argument_list|()
operator|->
name|isClean
argument_list|()
condition|?
name|QIcon
argument_list|()
else|:
name|unsavedIcon
argument_list|)
expr_stmt|;
if|if
condition|(
name|doc
operator|->
name|undoStack
argument_list|()
operator|->
name|count
argument_list|()
operator|==
literal|0
condition|)
name|doc
operator|->
name|undoStack
argument_list|()
operator|->
name|setUndoLimit
argument_list|(
name|undoLimit
operator|->
name|value
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|openDocument
name|void
name|MainWindow
operator|::
name|openDocument
parameter_list|()
block|{
name|QString
name|fileName
init|=
name|QFileDialog
operator|::
name|getOpenFileName
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|fileName
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|QMessageBox
operator|::
name|warning
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"File error"
argument_list|)
argument_list|,
name|tr
argument_list|(
literal|"Failed to open\n%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
return|return;
block|}
name|QTextStream
name|stream
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|Document
modifier|*
name|doc
init|=
operator|new
name|Document
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|doc
operator|->
name|load
argument_list|(
name|stream
argument_list|)
condition|)
block|{
name|QMessageBox
operator|::
name|warning
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"Parse error"
argument_list|)
argument_list|,
name|tr
argument_list|(
literal|"Failed to parse\n%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|doc
expr_stmt|;
return|return;
block|}
name|doc
operator|->
name|setFileName
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|addDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fixedWindowTitle
name|QString
name|MainWindow
operator|::
name|fixedWindowTitle
parameter_list|(
specifier|const
name|Document
modifier|*
name|doc
parameter_list|)
specifier|const
block|{
name|QString
name|title
init|=
name|doc
operator|->
name|fileName
argument_list|()
decl_stmt|;
if|if
condition|(
name|title
operator|.
name|isEmpty
argument_list|()
condition|)
name|title
operator|=
name|tr
argument_list|(
literal|"Unnamed"
argument_list|)
expr_stmt|;
else|else
name|title
operator|=
name|QFileInfo
argument_list|(
name|title
argument_list|)
operator|.
name|fileName
argument_list|()
expr_stmt|;
name|QString
name|result
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
condition|;
operator|++
name|i
control|)
block|{
name|result
operator|=
name|title
expr_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|result
operator|+=
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|bool
name|unique
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|documentTabs
operator|->
name|count
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
specifier|const
name|QWidget
modifier|*
name|widget
init|=
name|documentTabs
operator|->
name|widget
argument_list|(
name|j
argument_list|)
decl_stmt|;
if|if
condition|(
name|widget
operator|==
name|doc
condition|)
continue|continue;
if|if
condition|(
name|result
operator|==
name|documentTabs
operator|->
name|tabText
argument_list|(
name|j
argument_list|)
condition|)
block|{
name|unique
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|unique
condition|)
break|break;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|addDocument
name|void
name|MainWindow
operator|::
name|addDocument
parameter_list|(
name|Document
modifier|*
name|doc
parameter_list|)
block|{
if|if
condition|(
name|documentTabs
operator|->
name|indexOf
argument_list|(
name|doc
argument_list|)
operator|!=
operator|-
literal|1
condition|)
return|return;
name|m_undoGroup
operator|->
name|addStack
argument_list|(
name|doc
operator|->
name|undoStack
argument_list|()
argument_list|)
expr_stmt|;
name|documentTabs
operator|->
name|addTab
argument_list|(
name|doc
argument_list|,
name|fixedWindowTitle
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|doc
argument_list|,
name|SIGNAL
argument_list|(
name|currentShapeChanged
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|updateActions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|doc
operator|->
name|undoStack
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|indexChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|updateActions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|doc
operator|->
name|undoStack
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|cleanChanged
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|updateActions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|setCurrentDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setCurrentDocument
name|void
name|MainWindow
operator|::
name|setCurrentDocument
parameter_list|(
name|Document
modifier|*
name|doc
parameter_list|)
block|{
name|documentTabs
operator|->
name|setCurrentWidget
argument_list|(
name|doc
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|currentDocument
name|Document
modifier|*
name|MainWindow
operator|::
name|currentDocument
parameter_list|()
specifier|const
block|{
return|return
name|qobject_cast
argument_list|<
name|Document
operator|*
argument_list|>
argument_list|(
name|documentTabs
operator|->
name|currentWidget
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|removeDocument
name|void
name|MainWindow
operator|::
name|removeDocument
parameter_list|(
name|Document
modifier|*
name|doc
parameter_list|)
block|{
name|int
name|index
init|=
name|documentTabs
operator|->
name|indexOf
argument_list|(
name|doc
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|==
operator|-
literal|1
condition|)
return|return;
name|documentTabs
operator|->
name|removeTab
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|m_undoGroup
operator|->
name|removeStack
argument_list|(
name|doc
operator|->
name|undoStack
argument_list|()
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|doc
argument_list|,
name|SIGNAL
argument_list|(
name|currentShapeChanged
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|updateActions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|doc
operator|->
name|undoStack
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|indexChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|updateActions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|doc
operator|->
name|undoStack
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|cleanChanged
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|updateActions
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|documentTabs
operator|->
name|count
argument_list|()
operator|==
literal|0
condition|)
block|{
name|newDocument
argument_list|()
expr_stmt|;
name|updateActions
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|saveDocument
name|void
name|MainWindow
operator|::
name|saveDocument
parameter_list|()
block|{
name|Document
modifier|*
name|doc
init|=
name|currentDocument
argument_list|()
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|0
condition|)
return|return;
for|for
control|(
init|;
condition|;
control|)
block|{
name|QString
name|fileName
init|=
name|doc
operator|->
name|fileName
argument_list|()
decl_stmt|;
if|if
condition|(
name|fileName
operator|.
name|isEmpty
argument_list|()
condition|)
name|fileName
operator|=
name|QFileDialog
operator|::
name|getSaveFileName
argument_list|(
name|this
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileName
operator|.
name|isEmpty
argument_list|()
condition|)
break|break;
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
condition|)
block|{
name|QMessageBox
operator|::
name|warning
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"File error"
argument_list|)
argument_list|,
name|tr
argument_list|(
literal|"Failed to open\n%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setFileName
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QTextStream
name|stream
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|doc
operator|->
name|save
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|doc
operator|->
name|setFileName
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
name|int
name|index
init|=
name|documentTabs
operator|->
name|indexOf
argument_list|(
name|doc
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|index
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|documentTabs
operator|->
name|setTabText
argument_list|(
name|index
argument_list|,
name|fixedWindowTitle
argument_list|(
name|doc
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|closeDocument
name|void
name|MainWindow
operator|::
name|closeDocument
parameter_list|()
block|{
name|Document
modifier|*
name|doc
init|=
name|currentDocument
argument_list|()
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|0
condition|)
return|return;
if|if
condition|(
operator|!
name|doc
operator|->
name|undoStack
argument_list|()
operator|->
name|isClean
argument_list|()
condition|)
block|{
name|int
name|button
init|=
name|QMessageBox
operator|::
name|warning
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"Unsaved changes"
argument_list|)
argument_list|,
name|tr
argument_list|(
literal|"Would you like to save this document?"
argument_list|)
argument_list|,
name|QMessageBox
operator|::
name|Yes
argument_list|,
name|QMessageBox
operator|::
name|No
argument_list|)
decl_stmt|;
if|if
condition|(
name|button
operator|==
name|QMessageBox
operator|::
name|Yes
condition|)
name|saveDocument
argument_list|()
expr_stmt|;
block|}
name|removeDocument
argument_list|(
name|doc
argument_list|)
expr_stmt|;
operator|delete
name|doc
expr_stmt|;
block|}
end_function
begin_function
DECL|function|newDocument
name|void
name|MainWindow
operator|::
name|newDocument
parameter_list|()
block|{
name|addDocument
argument_list|(
operator|new
name|Document
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|randomColor
specifier|static
name|QColor
name|randomColor
parameter_list|()
block|{
name|int
name|r
init|=
call|(
name|int
call|)
argument_list|(
literal|3.0
operator|*
operator|(
name|rand
argument_list|()
operator|/
operator|(
name|RAND_MAX
operator|+
literal|1.0
operator|)
operator|)
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|r
condition|)
block|{
case|case
literal|0
case|:
return|return
name|Qt
operator|::
name|red
return|;
case|case
literal|1
case|:
return|return
name|Qt
operator|::
name|green
return|;
default|default:
break|break;
block|}
return|return
name|Qt
operator|::
name|blue
return|;
block|}
end_function
begin_function
DECL|function|randomRect
specifier|static
name|QRect
name|randomRect
parameter_list|(
specifier|const
name|QSize
modifier|&
name|s
parameter_list|)
block|{
name|QSize
name|min
init|=
name|Shape
operator|::
name|minSize
decl_stmt|;
name|int
name|left
init|=
call|(
name|int
call|)
argument_list|(
operator|(
literal|0.0
operator|+
name|s
operator|.
name|width
argument_list|()
operator|-
name|min
operator|.
name|width
argument_list|()
operator|)
operator|*
operator|(
name|rand
argument_list|()
operator|/
operator|(
name|RAND_MAX
operator|+
literal|1.0
operator|)
operator|)
argument_list|)
decl_stmt|;
name|int
name|top
init|=
call|(
name|int
call|)
argument_list|(
operator|(
literal|0.0
operator|+
name|s
operator|.
name|height
argument_list|()
operator|-
name|min
operator|.
name|height
argument_list|()
operator|)
operator|*
operator|(
name|rand
argument_list|()
operator|/
operator|(
name|RAND_MAX
operator|+
literal|1.0
operator|)
operator|)
argument_list|)
decl_stmt|;
name|int
name|width
init|=
call|(
name|int
call|)
argument_list|(
operator|(
literal|0.0
operator|+
name|s
operator|.
name|width
argument_list|()
operator|-
name|left
operator|-
name|min
operator|.
name|width
argument_list|()
operator|)
operator|*
operator|(
name|rand
argument_list|()
operator|/
operator|(
name|RAND_MAX
operator|+
literal|1.0
operator|)
operator|)
argument_list|)
operator|+
name|min
operator|.
name|width
argument_list|()
decl_stmt|;
name|int
name|height
init|=
call|(
name|int
call|)
argument_list|(
operator|(
literal|0.0
operator|+
name|s
operator|.
name|height
argument_list|()
operator|-
name|top
operator|-
name|min
operator|.
name|height
argument_list|()
operator|)
operator|*
operator|(
name|rand
argument_list|()
operator|/
operator|(
name|RAND_MAX
operator|+
literal|1.0
operator|)
operator|)
argument_list|)
operator|+
name|min
operator|.
name|height
argument_list|()
decl_stmt|;
return|return
name|QRect
argument_list|(
name|left
argument_list|,
name|top
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|addShape
name|void
name|MainWindow
operator|::
name|addShape
parameter_list|()
block|{
name|Document
modifier|*
name|doc
init|=
name|currentDocument
argument_list|()
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|0
condition|)
return|return;
name|Shape
operator|::
name|Type
name|type
decl_stmt|;
if|if
condition|(
name|sender
argument_list|()
operator|==
name|actionAddCircle
condition|)
name|type
operator|=
name|Shape
operator|::
name|Circle
expr_stmt|;
elseif|else
if|if
condition|(
name|sender
argument_list|()
operator|==
name|actionAddRectangle
condition|)
name|type
operator|=
name|Shape
operator|::
name|Rectangle
expr_stmt|;
elseif|else
if|if
condition|(
name|sender
argument_list|()
operator|==
name|actionAddTriangle
condition|)
name|type
operator|=
name|Shape
operator|::
name|Triangle
expr_stmt|;
else|else
return|return;
name|Shape
name|newShape
argument_list|(
name|type
argument_list|,
name|randomColor
argument_list|()
argument_list|,
name|randomRect
argument_list|(
name|doc
operator|->
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|doc
operator|->
name|undoStack
argument_list|()
operator|->
name|push
argument_list|(
operator|new
name|AddShapeCommand
argument_list|(
name|doc
argument_list|,
name|newShape
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeShape
name|void
name|MainWindow
operator|::
name|removeShape
parameter_list|()
block|{
name|Document
modifier|*
name|doc
init|=
name|currentDocument
argument_list|()
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|0
condition|)
return|return;
name|QString
name|shapeName
init|=
name|doc
operator|->
name|currentShapeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|shapeName
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|doc
operator|->
name|undoStack
argument_list|()
operator|->
name|push
argument_list|(
operator|new
name|RemoveShapeCommand
argument_list|(
name|doc
argument_list|,
name|shapeName
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setShapeColor
name|void
name|MainWindow
operator|::
name|setShapeColor
parameter_list|()
block|{
name|Document
modifier|*
name|doc
init|=
name|currentDocument
argument_list|()
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|0
condition|)
return|return;
name|QString
name|shapeName
init|=
name|doc
operator|->
name|currentShapeName
argument_list|()
decl_stmt|;
if|if
condition|(
name|shapeName
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|QColor
name|color
decl_stmt|;
if|if
condition|(
name|sender
argument_list|()
operator|==
name|actionRed
condition|)
name|color
operator|=
name|Qt
operator|::
name|red
expr_stmt|;
elseif|else
if|if
condition|(
name|sender
argument_list|()
operator|==
name|actionGreen
condition|)
name|color
operator|=
name|Qt
operator|::
name|green
expr_stmt|;
elseif|else
if|if
condition|(
name|sender
argument_list|()
operator|==
name|actionBlue
condition|)
name|color
operator|=
name|Qt
operator|::
name|blue
expr_stmt|;
else|else
return|return;
if|if
condition|(
name|color
operator|==
name|doc
operator|->
name|shape
argument_list|(
name|shapeName
argument_list|)
operator|.
name|color
argument_list|()
condition|)
return|return;
name|doc
operator|->
name|undoStack
argument_list|()
operator|->
name|push
argument_list|(
operator|new
name|SetShapeColorCommand
argument_list|(
name|doc
argument_list|,
name|shapeName
argument_list|,
name|color
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addSnowman
name|void
name|MainWindow
operator|::
name|addSnowman
parameter_list|()
block|{
name|Document
modifier|*
name|doc
init|=
name|currentDocument
argument_list|()
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|0
condition|)
return|return;
comment|// Create a macro command using beginMacro() and endMacro()
name|doc
operator|->
name|undoStack
argument_list|()
operator|->
name|beginMacro
argument_list|(
name|tr
argument_list|(
literal|"Add snowman"
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|->
name|undoStack
argument_list|()
operator|->
name|push
argument_list|(
operator|new
name|AddShapeCommand
argument_list|(
name|doc
argument_list|,
name|Shape
argument_list|(
name|Shape
operator|::
name|Circle
argument_list|,
name|Qt
operator|::
name|blue
argument_list|,
name|QRect
argument_list|(
literal|51
argument_list|,
literal|30
argument_list|,
literal|97
argument_list|,
literal|95
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|->
name|undoStack
argument_list|()
operator|->
name|push
argument_list|(
operator|new
name|AddShapeCommand
argument_list|(
name|doc
argument_list|,
name|Shape
argument_list|(
name|Shape
operator|::
name|Circle
argument_list|,
name|Qt
operator|::
name|blue
argument_list|,
name|QRect
argument_list|(
literal|27
argument_list|,
literal|123
argument_list|,
literal|150
argument_list|,
literal|133
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|->
name|undoStack
argument_list|()
operator|->
name|push
argument_list|(
operator|new
name|AddShapeCommand
argument_list|(
name|doc
argument_list|,
name|Shape
argument_list|(
name|Shape
operator|::
name|Circle
argument_list|,
name|Qt
operator|::
name|blue
argument_list|,
name|QRect
argument_list|(
literal|11
argument_list|,
literal|253
argument_list|,
literal|188
argument_list|,
literal|146
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|doc
operator|->
name|undoStack
argument_list|()
operator|->
name|endMacro
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addRobot
name|void
name|MainWindow
operator|::
name|addRobot
parameter_list|()
block|{
name|Document
modifier|*
name|doc
init|=
name|currentDocument
argument_list|()
decl_stmt|;
if|if
condition|(
name|doc
operator|==
literal|0
condition|)
return|return;
comment|// Compose a macro command by explicitly adding children to a parent command
name|QUndoCommand
modifier|*
name|parent
init|=
operator|new
name|QUndoCommand
argument_list|(
name|tr
argument_list|(
literal|"Add robot"
argument_list|)
argument_list|)
decl_stmt|;
operator|new
name|AddShapeCommand
argument_list|(
name|doc
argument_list|,
name|Shape
argument_list|(
name|Shape
operator|::
name|Rectangle
argument_list|,
name|Qt
operator|::
name|green
argument_list|,
name|QRect
argument_list|(
literal|115
argument_list|,
literal|15
argument_list|,
literal|81
argument_list|,
literal|70
argument_list|)
argument_list|)
argument_list|,
name|parent
argument_list|)
expr_stmt|;
operator|new
name|AddShapeCommand
argument_list|(
name|doc
argument_list|,
name|Shape
argument_list|(
name|Shape
operator|::
name|Rectangle
argument_list|,
name|Qt
operator|::
name|green
argument_list|,
name|QRect
argument_list|(
literal|82
argument_list|,
literal|89
argument_list|,
literal|148
argument_list|,
literal|188
argument_list|)
argument_list|)
argument_list|,
name|parent
argument_list|)
expr_stmt|;
operator|new
name|AddShapeCommand
argument_list|(
name|doc
argument_list|,
name|Shape
argument_list|(
name|Shape
operator|::
name|Rectangle
argument_list|,
name|Qt
operator|::
name|green
argument_list|,
name|QRect
argument_list|(
literal|76
argument_list|,
literal|280
argument_list|,
literal|80
argument_list|,
literal|165
argument_list|)
argument_list|)
argument_list|,
name|parent
argument_list|)
expr_stmt|;
operator|new
name|AddShapeCommand
argument_list|(
name|doc
argument_list|,
name|Shape
argument_list|(
name|Shape
operator|::
name|Rectangle
argument_list|,
name|Qt
operator|::
name|green
argument_list|,
name|QRect
argument_list|(
literal|163
argument_list|,
literal|280
argument_list|,
literal|80
argument_list|,
literal|164
argument_list|)
argument_list|)
argument_list|,
name|parent
argument_list|)
expr_stmt|;
operator|new
name|AddShapeCommand
argument_list|(
name|doc
argument_list|,
name|Shape
argument_list|(
name|Shape
operator|::
name|Circle
argument_list|,
name|Qt
operator|::
name|blue
argument_list|,
name|QRect
argument_list|(
literal|116
argument_list|,
literal|25
argument_list|,
literal|80
argument_list|,
literal|50
argument_list|)
argument_list|)
argument_list|,
name|parent
argument_list|)
expr_stmt|;
operator|new
name|AddShapeCommand
argument_list|(
name|doc
argument_list|,
name|Shape
argument_list|(
name|Shape
operator|::
name|Rectangle
argument_list|,
name|Qt
operator|::
name|green
argument_list|,
name|QRect
argument_list|(
literal|232
argument_list|,
literal|92
argument_list|,
literal|80
argument_list|,
literal|127
argument_list|)
argument_list|)
argument_list|,
name|parent
argument_list|)
expr_stmt|;
operator|new
name|AddShapeCommand
argument_list|(
name|doc
argument_list|,
name|Shape
argument_list|(
name|Shape
operator|::
name|Rectangle
argument_list|,
name|Qt
operator|::
name|green
argument_list|,
name|QRect
argument_list|(
literal|2
argument_list|,
literal|92
argument_list|,
literal|80
argument_list|,
literal|125
argument_list|)
argument_list|)
argument_list|,
name|parent
argument_list|)
expr_stmt|;
name|doc
operator|->
name|undoStack
argument_list|()
operator|->
name|push
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|about
name|void
name|MainWindow
operator|::
name|about
parameter_list|()
block|{
name|QMessageBox
operator|::
name|about
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"About Undo"
argument_list|)
argument_list|,
name|tr
argument_list|(
literal|"The Undo demonstration shows how to use the Qt Undo framework."
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|aboutQt
name|void
name|MainWindow
operator|::
name|aboutQt
parameter_list|()
block|{
name|QMessageBox
operator|::
name|aboutQt
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"About Qt"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
end_unit
