begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor **     the names of its contributors may be used to endorse or promote **     products derived from this software without specific prior written **     permission. ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtWidgets>
end_include
begin_include
include|#
directive|include
file|"codeeditor.h"
end_include
begin_comment
comment|//![constructor]
end_comment
begin_constructor
DECL|function|CodeEditor
name|CodeEditor
operator|::
name|CodeEditor
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QPlainTextEdit
argument_list|(
name|parent
argument_list|)
block|{
name|lineNumberArea
operator|=
operator|new
name|LineNumberArea
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|blockCountChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|updateLineNumberAreaWidth
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|updateRequest
argument_list|(
name|QRect
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|updateLineNumberArea
argument_list|(
name|QRect
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|cursorPositionChanged
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|highlightCurrentLine
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|updateLineNumberAreaWidth
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|highlightCurrentLine
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|//![constructor]
end_comment
begin_comment
comment|//![extraAreaWidth]
end_comment
begin_function
DECL|function|lineNumberAreaWidth
name|int
name|CodeEditor
operator|::
name|lineNumberAreaWidth
parameter_list|()
block|{
name|int
name|digits
init|=
literal|1
decl_stmt|;
name|int
name|max
init|=
name|qMax
argument_list|(
literal|1
argument_list|,
name|blockCount
argument_list|()
argument_list|)
decl_stmt|;
while|while
condition|(
name|max
operator|>=
literal|10
condition|)
block|{
name|max
operator|/=
literal|10
expr_stmt|;
operator|++
name|digits
expr_stmt|;
block|}
name|int
name|space
init|=
literal|3
operator|+
name|fontMetrics
argument_list|()
operator|.
name|width
argument_list|(
name|QLatin1Char
argument_list|(
literal|'9'
argument_list|)
argument_list|)
operator|*
name|digits
decl_stmt|;
return|return
name|space
return|;
block|}
end_function
begin_comment
comment|//![extraAreaWidth]
end_comment
begin_comment
comment|//![slotUpdateExtraAreaWidth]
end_comment
begin_function
DECL|function|updateLineNumberAreaWidth
name|void
name|CodeEditor
operator|::
name|updateLineNumberAreaWidth
parameter_list|(
name|int
comment|/* newBlockCount */
parameter_list|)
block|{
name|setViewportMargins
argument_list|(
name|lineNumberAreaWidth
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//![slotUpdateExtraAreaWidth]
end_comment
begin_comment
comment|//![slotUpdateRequest]
end_comment
begin_function
DECL|function|updateLineNumberArea
name|void
name|CodeEditor
operator|::
name|updateLineNumberArea
parameter_list|(
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
name|int
name|dy
parameter_list|)
block|{
if|if
condition|(
name|dy
condition|)
name|lineNumberArea
operator|->
name|scroll
argument_list|(
literal|0
argument_list|,
name|dy
argument_list|)
expr_stmt|;
else|else
name|lineNumberArea
operator|->
name|update
argument_list|(
literal|0
argument_list|,
name|rect
operator|.
name|y
argument_list|()
argument_list|,
name|lineNumberArea
operator|->
name|width
argument_list|()
argument_list|,
name|rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|rect
operator|.
name|contains
argument_list|(
name|viewport
argument_list|()
operator|->
name|rect
argument_list|()
argument_list|)
condition|)
name|updateLineNumberAreaWidth
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//![slotUpdateRequest]
end_comment
begin_comment
comment|//![resizeEvent]
end_comment
begin_function
DECL|function|resizeEvent
name|void
name|CodeEditor
operator|::
name|resizeEvent
parameter_list|(
name|QResizeEvent
modifier|*
name|e
parameter_list|)
block|{
name|QPlainTextEdit
operator|::
name|resizeEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|QRect
name|cr
init|=
name|contentsRect
argument_list|()
decl_stmt|;
name|lineNumberArea
operator|->
name|setGeometry
argument_list|(
name|QRect
argument_list|(
name|cr
operator|.
name|left
argument_list|()
argument_list|,
name|cr
operator|.
name|top
argument_list|()
argument_list|,
name|lineNumberAreaWidth
argument_list|()
argument_list|,
name|cr
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//![resizeEvent]
end_comment
begin_comment
comment|//![cursorPositionChanged]
end_comment
begin_function
DECL|function|highlightCurrentLine
name|void
name|CodeEditor
operator|::
name|highlightCurrentLine
parameter_list|()
block|{
name|QList
argument_list|<
name|QTextEdit
operator|::
name|ExtraSelection
argument_list|>
name|extraSelections
decl_stmt|;
if|if
condition|(
operator|!
name|isReadOnly
argument_list|()
condition|)
block|{
name|QTextEdit
operator|::
name|ExtraSelection
name|selection
decl_stmt|;
name|QColor
name|lineColor
init|=
name|QColor
argument_list|(
name|Qt
operator|::
name|yellow
argument_list|)
operator|.
name|lighter
argument_list|(
literal|160
argument_list|)
decl_stmt|;
name|selection
operator|.
name|format
operator|.
name|setBackground
argument_list|(
name|lineColor
argument_list|)
expr_stmt|;
name|selection
operator|.
name|format
operator|.
name|setProperty
argument_list|(
name|QTextFormat
operator|::
name|FullWidthSelection
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|selection
operator|.
name|cursor
operator|=
name|textCursor
argument_list|()
expr_stmt|;
name|selection
operator|.
name|cursor
operator|.
name|clearSelection
argument_list|()
expr_stmt|;
name|extraSelections
operator|.
name|append
argument_list|(
name|selection
argument_list|)
expr_stmt|;
block|}
name|setExtraSelections
argument_list|(
name|extraSelections
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//![cursorPositionChanged]
end_comment
begin_comment
comment|//![extraAreaPaintEvent_0]
end_comment
begin_function
DECL|function|lineNumberAreaPaintEvent
name|void
name|CodeEditor
operator|::
name|lineNumberAreaPaintEvent
parameter_list|(
name|QPaintEvent
modifier|*
name|event
parameter_list|)
block|{
name|QPainter
name|painter
argument_list|(
name|lineNumberArea
argument_list|)
decl_stmt|;
name|painter
operator|.
name|fillRect
argument_list|(
name|event
operator|->
name|rect
argument_list|()
argument_list|,
name|Qt
operator|::
name|lightGray
argument_list|)
expr_stmt|;
comment|//![extraAreaPaintEvent_0]
comment|//![extraAreaPaintEvent_1]
name|QTextBlock
name|block
init|=
name|firstVisibleBlock
argument_list|()
decl_stmt|;
name|int
name|blockNumber
init|=
name|block
operator|.
name|blockNumber
argument_list|()
decl_stmt|;
name|int
name|top
init|=
operator|(
name|int
operator|)
name|blockBoundingGeometry
argument_list|(
name|block
argument_list|)
operator|.
name|translated
argument_list|(
name|contentOffset
argument_list|()
argument_list|)
operator|.
name|top
argument_list|()
decl_stmt|;
name|int
name|bottom
init|=
name|top
operator|+
operator|(
name|int
operator|)
name|blockBoundingRect
argument_list|(
name|block
argument_list|)
operator|.
name|height
argument_list|()
decl_stmt|;
comment|//![extraAreaPaintEvent_1]
comment|//![extraAreaPaintEvent_2]
while|while
condition|(
name|block
operator|.
name|isValid
argument_list|()
operator|&&
name|top
operator|<=
name|event
operator|->
name|rect
argument_list|()
operator|.
name|bottom
argument_list|()
condition|)
block|{
if|if
condition|(
name|block
operator|.
name|isVisible
argument_list|()
operator|&&
name|bottom
operator|>=
name|event
operator|->
name|rect
argument_list|()
operator|.
name|top
argument_list|()
condition|)
block|{
name|QString
name|number
init|=
name|QString
operator|::
name|number
argument_list|(
name|blockNumber
operator|+
literal|1
argument_list|)
decl_stmt|;
name|painter
operator|.
name|setPen
argument_list|(
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
name|painter
operator|.
name|drawText
argument_list|(
literal|0
argument_list|,
name|top
argument_list|,
name|lineNumberArea
operator|->
name|width
argument_list|()
argument_list|,
name|fontMetrics
argument_list|()
operator|.
name|height
argument_list|()
argument_list|,
name|Qt
operator|::
name|AlignRight
argument_list|,
name|number
argument_list|)
expr_stmt|;
block|}
name|block
operator|=
name|block
operator|.
name|next
argument_list|()
expr_stmt|;
name|top
operator|=
name|bottom
expr_stmt|;
name|bottom
operator|=
name|top
operator|+
operator|(
name|int
operator|)
name|blockBoundingRect
argument_list|(
name|block
argument_list|)
operator|.
name|height
argument_list|()
expr_stmt|;
operator|++
name|blockNumber
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|//![extraAreaPaintEvent_2]
end_comment
end_unit
