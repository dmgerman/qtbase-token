begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the demonstration applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** BSD License Usage ** Alternatively, you may use this file under the terms of the BSD license ** as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of The Qt Company Ltd nor the names of its **     contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|TEXTEDIT_H
end_ifndef
begin_define
DECL|macro|TEXTEDIT_H
define|#
directive|define
name|TEXTEDIT_H
end_define
begin_include
include|#
directive|include
file|<QMainWindow>
end_include
begin_include
include|#
directive|include
file|<QMap>
end_include
begin_include
include|#
directive|include
file|<QPointer>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QAction
name|class
name|QAction
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QComboBox
name|class
name|QComboBox
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QFontComboBox
name|class
name|QFontComboBox
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QTextEdit
name|class
name|QTextEdit
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QTextCharFormat
name|class
name|QTextCharFormat
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QMenu
name|class
name|QMenu
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QPrinter
name|class
name|QPrinter
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QT_END_NAMESPACE
name|class
name|TextEdit
range|:
name|public
name|QMainWindow
block|{
name|Q_OBJECT
name|public
operator|:
name|TextEdit
argument_list|(
name|QWidget
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
name|bool
name|load
argument_list|(
specifier|const
name|QString
operator|&
name|f
argument_list|)
block|;
name|public
name|slots
operator|:
name|void
name|fileNew
argument_list|()
block|;
name|protected
operator|:
name|virtual
name|void
name|closeEvent
argument_list|(
argument|QCloseEvent *e
argument_list|)
name|Q_DECL_OVERRIDE
block|;
name|private
name|slots
operator|:
name|void
name|fileOpen
argument_list|()
block|;
name|bool
name|fileSave
argument_list|()
block|;
name|bool
name|fileSaveAs
argument_list|()
block|;
name|void
name|filePrint
argument_list|()
block|;
name|void
name|filePrintPreview
argument_list|()
block|;
name|void
name|filePrintPdf
argument_list|()
block|;
name|void
name|textBold
argument_list|()
block|;
name|void
name|textUnderline
argument_list|()
block|;
name|void
name|textItalic
argument_list|()
block|;
name|void
name|textFamily
argument_list|(
specifier|const
name|QString
operator|&
name|f
argument_list|)
block|;
name|void
name|textSize
argument_list|(
specifier|const
name|QString
operator|&
name|p
argument_list|)
block|;
name|void
name|textStyle
argument_list|(
argument|int styleIndex
argument_list|)
block|;
name|void
name|textColor
argument_list|()
block|;
name|void
name|textAlign
argument_list|(
name|QAction
operator|*
name|a
argument_list|)
block|;
name|void
name|currentCharFormatChanged
argument_list|(
specifier|const
name|QTextCharFormat
operator|&
name|format
argument_list|)
block|;
name|void
name|cursorPositionChanged
argument_list|()
block|;
name|void
name|clipboardDataChanged
argument_list|()
block|;
name|void
name|about
argument_list|()
block|;
name|void
name|printPreview
argument_list|(
name|QPrinter
operator|*
argument_list|)
block|;
name|private
operator|:
name|void
name|setupFileActions
argument_list|()
block|;
name|void
name|setupEditActions
argument_list|()
block|;
name|void
name|setupTextActions
argument_list|()
block|;
name|bool
name|maybeSave
argument_list|()
block|;
name|void
name|setCurrentFileName
argument_list|(
specifier|const
name|QString
operator|&
name|fileName
argument_list|)
block|;
name|void
name|mergeFormatOnWordOrSelection
argument_list|(
specifier|const
name|QTextCharFormat
operator|&
name|format
argument_list|)
block|;
name|void
name|fontChanged
argument_list|(
specifier|const
name|QFont
operator|&
name|f
argument_list|)
block|;
name|void
name|colorChanged
argument_list|(
specifier|const
name|QColor
operator|&
name|c
argument_list|)
block|;
name|void
name|alignmentChanged
argument_list|(
argument|Qt::Alignment a
argument_list|)
block|;
name|QAction
operator|*
name|actionSave
block|;
name|QAction
operator|*
name|actionTextBold
block|;
name|QAction
operator|*
name|actionTextUnderline
block|;
name|QAction
operator|*
name|actionTextItalic
block|;
name|QAction
operator|*
name|actionTextColor
block|;
name|QAction
operator|*
name|actionAlignLeft
block|;
name|QAction
operator|*
name|actionAlignCenter
block|;
name|QAction
operator|*
name|actionAlignRight
block|;
name|QAction
operator|*
name|actionAlignJustify
block|;
name|QAction
operator|*
name|actionUndo
block|;
name|QAction
operator|*
name|actionRedo
block|;
ifndef|#
directive|ifndef
name|QT_NO_CLIPBOARD
name|QAction
operator|*
name|actionCut
block|;
name|QAction
operator|*
name|actionCopy
block|;
name|QAction
operator|*
name|actionPaste
block|;
endif|#
directive|endif
name|QComboBox
operator|*
name|comboStyle
block|;
name|QFontComboBox
operator|*
name|comboFont
block|;
name|QComboBox
operator|*
name|comboSize
block|;
name|QToolBar
operator|*
name|tb
block|;
name|QString
name|fileName
block|;
name|QTextEdit
operator|*
name|textEdit
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// TEXTEDIT_H
end_comment
end_unit
