begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor **     the names of its contributors may be used to endorse or promote **     products derived from this software without specific prior written **     permission. ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"dialog.h"
end_include
begin_decl_stmt
DECL|variable|uniqueAlbumId
name|int
name|uniqueAlbumId
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|uniqueArtistId
name|int
name|uniqueArtistId
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|Dialog
name|Dialog
operator|::
name|Dialog
parameter_list|(
name|QSqlRelationalTableModel
modifier|*
name|albums
parameter_list|,
name|QDomDocument
name|details
parameter_list|,
name|QFile
modifier|*
name|output
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QDialog
argument_list|(
name|parent
argument_list|)
block|{
name|model
operator|=
name|albums
expr_stmt|;
name|albumDetails
operator|=
name|details
expr_stmt|;
name|outputFile
operator|=
name|output
expr_stmt|;
name|QGroupBox
modifier|*
name|inputWidgetBox
init|=
name|createInputWidgets
argument_list|()
decl_stmt|;
name|QDialogButtonBox
modifier|*
name|buttonBox
init|=
name|createButtons
argument_list|()
decl_stmt|;
name|QVBoxLayout
modifier|*
name|layout
init|=
operator|new
name|QVBoxLayout
decl_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|inputWidgetBox
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|buttonBox
argument_list|)
expr_stmt|;
name|setLayout
argument_list|(
name|layout
argument_list|)
expr_stmt|;
name|setWindowTitle
argument_list|(
name|tr
argument_list|(
literal|"Add Album"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|submit
name|void
name|Dialog
operator|::
name|submit
parameter_list|()
block|{
name|QString
name|artist
init|=
name|artistEditor
operator|->
name|text
argument_list|()
decl_stmt|;
name|QString
name|title
init|=
name|titleEditor
operator|->
name|text
argument_list|()
decl_stmt|;
if|if
condition|(
name|artist
operator|.
name|isEmpty
argument_list|()
operator|||
name|title
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QString
name|message
argument_list|(
name|tr
argument_list|(
literal|"Please provide both the name of the artist "
literal|"and the title of the album."
argument_list|)
argument_list|)
decl_stmt|;
name|QMessageBox
operator|::
name|information
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"Add Album"
argument_list|)
argument_list|,
name|message
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|artistId
init|=
name|findArtistId
argument_list|(
name|artist
argument_list|)
decl_stmt|;
name|int
name|albumId
init|=
name|addNewAlbum
argument_list|(
name|title
argument_list|,
name|artistId
argument_list|)
decl_stmt|;
name|QStringList
name|tracks
decl_stmt|;
name|tracks
operator|=
name|tracksEditor
operator|->
name|text
argument_list|()
operator|.
name|split
argument_list|(
literal|','
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
expr_stmt|;
name|addTracks
argument_list|(
name|albumId
argument_list|,
name|tracks
argument_list|)
expr_stmt|;
name|increaseAlbumCount
argument_list|(
name|indexOfArtist
argument_list|(
name|artist
argument_list|)
argument_list|)
expr_stmt|;
name|accept
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|findArtistId
name|int
name|Dialog
operator|::
name|findArtistId
parameter_list|(
specifier|const
name|QString
modifier|&
name|artist
parameter_list|)
block|{
name|QSqlTableModel
modifier|*
name|artistModel
init|=
name|model
operator|->
name|relationModel
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|int
name|row
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|row
operator|<
name|artistModel
operator|->
name|rowCount
argument_list|()
condition|)
block|{
name|QSqlRecord
name|record
init|=
name|artistModel
operator|->
name|record
argument_list|(
name|row
argument_list|)
decl_stmt|;
if|if
condition|(
name|record
operator|.
name|value
argument_list|(
literal|"artist"
argument_list|)
operator|==
name|artist
condition|)
return|return
name|record
operator|.
name|value
argument_list|(
literal|"id"
argument_list|)
operator|.
name|toInt
argument_list|()
return|;
else|else
name|row
operator|++
expr_stmt|;
block|}
return|return
name|addNewArtist
argument_list|(
name|artist
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|addNewArtist
name|int
name|Dialog
operator|::
name|addNewArtist
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
name|QSqlTableModel
modifier|*
name|artistModel
init|=
name|model
operator|->
name|relationModel
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|QSqlRecord
name|record
decl_stmt|;
name|int
name|id
init|=
name|generateArtistId
argument_list|()
decl_stmt|;
name|QSqlField
name|f1
argument_list|(
literal|"id"
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|)
decl_stmt|;
name|QSqlField
name|f2
argument_list|(
literal|"artist"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
decl_stmt|;
name|QSqlField
name|f3
argument_list|(
literal|"albumcount"
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|)
decl_stmt|;
name|f1
operator|.
name|setValue
argument_list|(
name|QVariant
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|f2
operator|.
name|setValue
argument_list|(
name|QVariant
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|f3
operator|.
name|setValue
argument_list|(
name|QVariant
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|record
operator|.
name|append
argument_list|(
name|f1
argument_list|)
expr_stmt|;
name|record
operator|.
name|append
argument_list|(
name|f2
argument_list|)
expr_stmt|;
name|record
operator|.
name|append
argument_list|(
name|f3
argument_list|)
expr_stmt|;
name|artistModel
operator|->
name|insertRecord
argument_list|(
operator|-
literal|1
argument_list|,
name|record
argument_list|)
expr_stmt|;
return|return
name|id
return|;
block|}
end_function
begin_function
DECL|function|addNewAlbum
name|int
name|Dialog
operator|::
name|addNewAlbum
parameter_list|(
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
name|int
name|artistId
parameter_list|)
block|{
name|int
name|id
init|=
name|generateAlbumId
argument_list|()
decl_stmt|;
name|QSqlRecord
name|record
decl_stmt|;
name|QSqlField
name|f1
argument_list|(
literal|"albumid"
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|)
decl_stmt|;
name|QSqlField
name|f2
argument_list|(
literal|"title"
argument_list|,
name|QVariant
operator|::
name|String
argument_list|)
decl_stmt|;
name|QSqlField
name|f3
argument_list|(
literal|"artistid"
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|)
decl_stmt|;
name|QSqlField
name|f4
argument_list|(
literal|"year"
argument_list|,
name|QVariant
operator|::
name|Int
argument_list|)
decl_stmt|;
name|f1
operator|.
name|setValue
argument_list|(
name|QVariant
argument_list|(
name|id
argument_list|)
argument_list|)
expr_stmt|;
name|f2
operator|.
name|setValue
argument_list|(
name|QVariant
argument_list|(
name|title
argument_list|)
argument_list|)
expr_stmt|;
name|f3
operator|.
name|setValue
argument_list|(
name|QVariant
argument_list|(
name|artistId
argument_list|)
argument_list|)
expr_stmt|;
name|f4
operator|.
name|setValue
argument_list|(
name|QVariant
argument_list|(
name|yearEditor
operator|->
name|value
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|record
operator|.
name|append
argument_list|(
name|f1
argument_list|)
expr_stmt|;
name|record
operator|.
name|append
argument_list|(
name|f2
argument_list|)
expr_stmt|;
name|record
operator|.
name|append
argument_list|(
name|f3
argument_list|)
expr_stmt|;
name|record
operator|.
name|append
argument_list|(
name|f4
argument_list|)
expr_stmt|;
name|model
operator|->
name|insertRecord
argument_list|(
operator|-
literal|1
argument_list|,
name|record
argument_list|)
expr_stmt|;
return|return
name|id
return|;
block|}
end_function
begin_function
DECL|function|addTracks
name|void
name|Dialog
operator|::
name|addTracks
parameter_list|(
name|int
name|albumId
parameter_list|,
name|QStringList
name|tracks
parameter_list|)
block|{
name|QDomElement
name|albumNode
init|=
name|albumDetails
operator|.
name|createElement
argument_list|(
literal|"album"
argument_list|)
decl_stmt|;
name|albumNode
operator|.
name|setAttribute
argument_list|(
literal|"id"
argument_list|,
name|albumId
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tracks
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QString
name|trackNumber
init|=
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|<
literal|10
condition|)
name|trackNumber
operator|.
name|prepend
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
name|QDomText
name|textNode
init|=
name|albumDetails
operator|.
name|createTextNode
argument_list|(
name|tracks
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|QDomElement
name|trackNode
init|=
name|albumDetails
operator|.
name|createElement
argument_list|(
literal|"track"
argument_list|)
decl_stmt|;
name|trackNode
operator|.
name|setAttribute
argument_list|(
literal|"number"
argument_list|,
name|trackNumber
argument_list|)
expr_stmt|;
name|trackNode
operator|.
name|appendChild
argument_list|(
name|textNode
argument_list|)
expr_stmt|;
name|albumNode
operator|.
name|appendChild
argument_list|(
name|trackNode
argument_list|)
expr_stmt|;
block|}
name|QDomNodeList
name|archive
init|=
name|albumDetails
operator|.
name|elementsByTagName
argument_list|(
literal|"archive"
argument_list|)
decl_stmt|;
name|archive
operator|.
name|item
argument_list|(
literal|0
argument_list|)
operator|.
name|appendChild
argument_list|(
name|albumNode
argument_list|)
expr_stmt|;
comment|/*     The following code is commented out since the example uses an in     memory database, i.e., altering the XML file will bring the data     out of sync.      if (!outputFile->open(QIODevice::WriteOnly)) {         return;     } else {         QTextStream stream(outputFile);         archive.item(0).save(stream, 4);         outputFile->close();     } */
block|}
end_function
begin_function
DECL|function|increaseAlbumCount
name|void
name|Dialog
operator|::
name|increaseAlbumCount
parameter_list|(
name|QModelIndex
name|artistIndex
parameter_list|)
block|{
name|QSqlTableModel
modifier|*
name|artistModel
init|=
name|model
operator|->
name|relationModel
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|QModelIndex
name|albumCountIndex
decl_stmt|;
name|albumCountIndex
operator|=
name|artistIndex
operator|.
name|sibling
argument_list|(
name|artistIndex
operator|.
name|row
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|int
name|albumCount
init|=
name|albumCountIndex
operator|.
name|data
argument_list|()
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|artistModel
operator|->
name|setData
argument_list|(
name|albumCountIndex
argument_list|,
name|QVariant
argument_list|(
name|albumCount
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|revert
name|void
name|Dialog
operator|::
name|revert
parameter_list|()
block|{
name|artistEditor
operator|->
name|clear
argument_list|()
expr_stmt|;
name|titleEditor
operator|->
name|clear
argument_list|()
expr_stmt|;
name|yearEditor
operator|->
name|setValue
argument_list|(
name|QDate
operator|::
name|currentDate
argument_list|()
operator|.
name|year
argument_list|()
argument_list|)
expr_stmt|;
name|tracksEditor
operator|->
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|createInputWidgets
name|QGroupBox
modifier|*
name|Dialog
operator|::
name|createInputWidgets
parameter_list|()
block|{
name|QGroupBox
modifier|*
name|box
init|=
operator|new
name|QGroupBox
argument_list|(
name|tr
argument_list|(
literal|"Add Album"
argument_list|)
argument_list|)
decl_stmt|;
name|QLabel
modifier|*
name|artistLabel
init|=
operator|new
name|QLabel
argument_list|(
name|tr
argument_list|(
literal|"Artist:"
argument_list|)
argument_list|)
decl_stmt|;
name|QLabel
modifier|*
name|titleLabel
init|=
operator|new
name|QLabel
argument_list|(
name|tr
argument_list|(
literal|"Title:"
argument_list|)
argument_list|)
decl_stmt|;
name|QLabel
modifier|*
name|yearLabel
init|=
operator|new
name|QLabel
argument_list|(
name|tr
argument_list|(
literal|"Year:"
argument_list|)
argument_list|)
decl_stmt|;
name|QLabel
modifier|*
name|tracksLabel
init|=
operator|new
name|QLabel
argument_list|(
name|tr
argument_list|(
literal|"Tracks (separated by comma):"
argument_list|)
argument_list|)
decl_stmt|;
name|artistEditor
operator|=
operator|new
name|QLineEdit
expr_stmt|;
name|titleEditor
operator|=
operator|new
name|QLineEdit
expr_stmt|;
name|yearEditor
operator|=
operator|new
name|QSpinBox
expr_stmt|;
name|yearEditor
operator|->
name|setMinimum
argument_list|(
literal|1900
argument_list|)
expr_stmt|;
name|yearEditor
operator|->
name|setMaximum
argument_list|(
name|QDate
operator|::
name|currentDate
argument_list|()
operator|.
name|year
argument_list|()
argument_list|)
expr_stmt|;
name|yearEditor
operator|->
name|setValue
argument_list|(
name|yearEditor
operator|->
name|maximum
argument_list|()
argument_list|)
expr_stmt|;
name|yearEditor
operator|->
name|setReadOnly
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|tracksEditor
operator|=
operator|new
name|QLineEdit
expr_stmt|;
name|QGridLayout
modifier|*
name|layout
init|=
operator|new
name|QGridLayout
decl_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|artistLabel
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|artistEditor
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|titleLabel
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|titleEditor
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|yearLabel
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|yearEditor
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|tracksLabel
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|tracksEditor
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|box
operator|->
name|setLayout
argument_list|(
name|layout
argument_list|)
expr_stmt|;
return|return
name|box
return|;
block|}
end_function
begin_function
DECL|function|createButtons
name|QDialogButtonBox
modifier|*
name|Dialog
operator|::
name|createButtons
parameter_list|()
block|{
name|QPushButton
modifier|*
name|closeButton
init|=
operator|new
name|QPushButton
argument_list|(
name|tr
argument_list|(
literal|"&Close"
argument_list|)
argument_list|)
decl_stmt|;
name|QPushButton
modifier|*
name|revertButton
init|=
operator|new
name|QPushButton
argument_list|(
name|tr
argument_list|(
literal|"&Revert"
argument_list|)
argument_list|)
decl_stmt|;
name|QPushButton
modifier|*
name|submitButton
init|=
operator|new
name|QPushButton
argument_list|(
name|tr
argument_list|(
literal|"&Submit"
argument_list|)
argument_list|)
decl_stmt|;
name|closeButton
operator|->
name|setDefault
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|closeButton
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|close
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|revertButton
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|revert
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|submitButton
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|submit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QDialogButtonBox
modifier|*
name|buttonBox
init|=
operator|new
name|QDialogButtonBox
decl_stmt|;
name|buttonBox
operator|->
name|addButton
argument_list|(
name|submitButton
argument_list|,
name|QDialogButtonBox
operator|::
name|ResetRole
argument_list|)
expr_stmt|;
name|buttonBox
operator|->
name|addButton
argument_list|(
name|revertButton
argument_list|,
name|QDialogButtonBox
operator|::
name|ResetRole
argument_list|)
expr_stmt|;
name|buttonBox
operator|->
name|addButton
argument_list|(
name|closeButton
argument_list|,
name|QDialogButtonBox
operator|::
name|RejectRole
argument_list|)
expr_stmt|;
return|return
name|buttonBox
return|;
block|}
end_function
begin_function
DECL|function|indexOfArtist
name|QModelIndex
name|Dialog
operator|::
name|indexOfArtist
parameter_list|(
specifier|const
name|QString
modifier|&
name|artist
parameter_list|)
block|{
name|QSqlTableModel
modifier|*
name|artistModel
init|=
name|model
operator|->
name|relationModel
argument_list|(
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|artistModel
operator|->
name|rowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QSqlRecord
name|record
init|=
name|artistModel
operator|->
name|record
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|record
operator|.
name|value
argument_list|(
literal|"artist"
argument_list|)
operator|==
name|artist
condition|)
return|return
name|artistModel
operator|->
name|index
argument_list|(
name|i
argument_list|,
literal|1
argument_list|)
return|;
block|}
return|return
name|QModelIndex
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|generateArtistId
name|int
name|Dialog
operator|::
name|generateArtistId
parameter_list|()
block|{
name|uniqueArtistId
operator|+=
literal|1
expr_stmt|;
return|return
name|uniqueArtistId
return|;
block|}
end_function
begin_function
DECL|function|generateAlbumId
name|int
name|Dialog
operator|::
name|generateAlbumId
parameter_list|()
block|{
name|uniqueAlbumId
operator|+=
literal|1
expr_stmt|;
return|return
name|uniqueAlbumId
return|;
block|}
end_function
end_unit
