begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: http://www.qt-project.org/ ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor **     the names of its contributors may be used to endorse or promote **     products derived from this software without specific prior written **     permission. ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtWidgets>
end_include
begin_include
include|#
directive|include
file|<QtSql>
end_include
begin_include
include|#
directive|include
file|"window.h"
end_include
begin_comment
comment|//! [Set up widgets]
end_comment
begin_constructor
DECL|function|Window
name|Window
operator|::
name|Window
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
block|{
name|setupModel
argument_list|()
expr_stmt|;
name|nameLabel
operator|=
operator|new
name|QLabel
argument_list|(
name|tr
argument_list|(
literal|"Na&me:"
argument_list|)
argument_list|)
expr_stmt|;
name|nameEdit
operator|=
operator|new
name|QLineEdit
argument_list|()
expr_stmt|;
name|addressLabel
operator|=
operator|new
name|QLabel
argument_list|(
name|tr
argument_list|(
literal|"&Address:"
argument_list|)
argument_list|)
expr_stmt|;
name|addressEdit
operator|=
operator|new
name|QTextEdit
argument_list|()
expr_stmt|;
name|typeLabel
operator|=
operator|new
name|QLabel
argument_list|(
name|tr
argument_list|(
literal|"&Type:"
argument_list|)
argument_list|)
expr_stmt|;
name|typeComboBox
operator|=
operator|new
name|QComboBox
argument_list|()
expr_stmt|;
name|nextButton
operator|=
operator|new
name|QPushButton
argument_list|(
name|tr
argument_list|(
literal|"&Next"
argument_list|)
argument_list|)
expr_stmt|;
name|previousButton
operator|=
operator|new
name|QPushButton
argument_list|(
name|tr
argument_list|(
literal|"&Previous"
argument_list|)
argument_list|)
expr_stmt|;
name|nameLabel
operator|->
name|setBuddy
argument_list|(
name|nameEdit
argument_list|)
expr_stmt|;
name|addressLabel
operator|->
name|setBuddy
argument_list|(
name|addressEdit
argument_list|)
expr_stmt|;
name|typeLabel
operator|->
name|setBuddy
argument_list|(
name|typeComboBox
argument_list|)
expr_stmt|;
comment|//! [Set up widgets]
comment|//! [Set up the mapper]
name|QSqlTableModel
modifier|*
name|relModel
init|=
name|model
operator|->
name|relationModel
argument_list|(
name|typeIndex
argument_list|)
decl_stmt|;
name|typeComboBox
operator|->
name|setModel
argument_list|(
name|relModel
argument_list|)
expr_stmt|;
name|typeComboBox
operator|->
name|setModelColumn
argument_list|(
name|relModel
operator|->
name|fieldIndex
argument_list|(
literal|"description"
argument_list|)
argument_list|)
expr_stmt|;
name|mapper
operator|=
operator|new
name|QDataWidgetMapper
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|mapper
operator|->
name|setModel
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|mapper
operator|->
name|setItemDelegate
argument_list|(
operator|new
name|QSqlRelationalDelegate
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|mapper
operator|->
name|addMapping
argument_list|(
name|nameEdit
argument_list|,
name|model
operator|->
name|fieldIndex
argument_list|(
literal|"name"
argument_list|)
argument_list|)
expr_stmt|;
name|mapper
operator|->
name|addMapping
argument_list|(
name|addressEdit
argument_list|,
name|model
operator|->
name|fieldIndex
argument_list|(
literal|"address"
argument_list|)
argument_list|)
expr_stmt|;
name|mapper
operator|->
name|addMapping
argument_list|(
name|typeComboBox
argument_list|,
name|typeIndex
argument_list|)
expr_stmt|;
comment|//! [Set up the mapper]
comment|//! [Set up connections and layouts]
name|connect
argument_list|(
name|previousButton
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|mapper
argument_list|,
name|SLOT
argument_list|(
name|toPrevious
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|nextButton
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|mapper
argument_list|,
name|SLOT
argument_list|(
name|toNext
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|mapper
argument_list|,
name|SIGNAL
argument_list|(
name|currentIndexChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|updateButtons
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QGridLayout
modifier|*
name|layout
init|=
operator|new
name|QGridLayout
argument_list|()
decl_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|nameLabel
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|nameEdit
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|previousButton
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|addressLabel
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|addressEdit
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|nextButton
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|typeLabel
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|typeComboBox
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|setLayout
argument_list|(
name|layout
argument_list|)
expr_stmt|;
name|setWindowTitle
argument_list|(
name|tr
argument_list|(
literal|"SQL Widget Mapper"
argument_list|)
argument_list|)
expr_stmt|;
name|mapper
operator|->
name|toFirst
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_comment
comment|//! [Set up connections and layouts]
end_comment
begin_comment
comment|//! [Set up the main table]
end_comment
begin_function
DECL|function|setupModel
name|void
name|Window
operator|::
name|setupModel
parameter_list|()
block|{
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|addDatabase
argument_list|(
literal|"QSQLITE"
argument_list|)
decl_stmt|;
name|db
operator|.
name|setDatabaseName
argument_list|(
literal|":memory:"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|db
operator|.
name|open
argument_list|()
condition|)
block|{
name|QMessageBox
operator|::
name|critical
argument_list|(
literal|0
argument_list|,
name|tr
argument_list|(
literal|"Cannot open database"
argument_list|)
argument_list|,
name|tr
argument_list|(
literal|"Unable to establish a database connection.\n"
literal|"This example needs SQLite support. Please read "
literal|"the Qt SQL driver documentation for information how "
literal|"to build it."
argument_list|)
argument_list|,
name|QMessageBox
operator|::
name|Cancel
argument_list|)
expr_stmt|;
return|return;
block|}
name|QSqlQuery
name|query
decl_stmt|;
name|query
operator|.
name|exec
argument_list|(
literal|"create table person (id int primary key, "
literal|"name varchar(20), address varchar(200), typeid int)"
argument_list|)
expr_stmt|;
name|query
operator|.
name|exec
argument_list|(
literal|"insert into person values(1, 'Alice', "
literal|"'<qt>123 Main Street<br/>Market Town</qt>', 101)"
argument_list|)
expr_stmt|;
name|query
operator|.
name|exec
argument_list|(
literal|"insert into person values(2, 'Bob', "
literal|"'<qt>PO Box 32<br/>Mail Handling Service"
literal|"<br/>Service City</qt>', 102)"
argument_list|)
expr_stmt|;
name|query
operator|.
name|exec
argument_list|(
literal|"insert into person values(3, 'Carol', "
literal|"'<qt>The Lighthouse<br/>Remote Island</qt>', 103)"
argument_list|)
expr_stmt|;
name|query
operator|.
name|exec
argument_list|(
literal|"insert into person values(4, 'Donald', "
literal|"'<qt>47338 Park Avenue<br/>Big City</qt>', 101)"
argument_list|)
expr_stmt|;
name|query
operator|.
name|exec
argument_list|(
literal|"insert into person values(5, 'Emma', "
literal|"'<qt>Research Station<br/>Base Camp<br/>"
literal|"Big Mountain</qt>', 103)"
argument_list|)
expr_stmt|;
comment|//! [Set up the main table]
comment|//! [Set up the address type table]
name|query
operator|.
name|exec
argument_list|(
literal|"create table addresstype (id int, description varchar(20))"
argument_list|)
expr_stmt|;
name|query
operator|.
name|exec
argument_list|(
literal|"insert into addresstype values(101, 'Home')"
argument_list|)
expr_stmt|;
name|query
operator|.
name|exec
argument_list|(
literal|"insert into addresstype values(102, 'Work')"
argument_list|)
expr_stmt|;
name|query
operator|.
name|exec
argument_list|(
literal|"insert into addresstype values(103, 'Other')"
argument_list|)
expr_stmt|;
name|model
operator|=
operator|new
name|QSqlRelationalTableModel
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|model
operator|->
name|setTable
argument_list|(
literal|"person"
argument_list|)
expr_stmt|;
name|model
operator|->
name|setEditStrategy
argument_list|(
name|QSqlTableModel
operator|::
name|OnManualSubmit
argument_list|)
expr_stmt|;
name|typeIndex
operator|=
name|model
operator|->
name|fieldIndex
argument_list|(
literal|"typeid"
argument_list|)
expr_stmt|;
name|model
operator|->
name|setRelation
argument_list|(
name|typeIndex
argument_list|,
name|QSqlRelation
argument_list|(
literal|"addresstype"
argument_list|,
literal|"id"
argument_list|,
literal|"description"
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|->
name|select
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [Set up the address type table]
end_comment
begin_comment
comment|//! [Slot for updating the buttons]
end_comment
begin_function
DECL|function|updateButtons
name|void
name|Window
operator|::
name|updateButtons
parameter_list|(
name|int
name|row
parameter_list|)
block|{
name|previousButton
operator|->
name|setEnabled
argument_list|(
name|row
operator|>
literal|0
argument_list|)
expr_stmt|;
name|nextButton
operator|->
name|setEnabled
argument_list|(
name|row
operator|<
name|model
operator|->
name|rowCount
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [Slot for updating the buttons]
end_comment
end_unit
