begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the demonstration applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** BSD License Usage ** Alternatively, you may use this file under the terms of the BSD license ** as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of The Qt Company Ltd nor the names of its **     contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|BROWSER_H
end_ifndef
begin_define
DECL|macro|BROWSER_H
define|#
directive|define
name|BROWSER_H
end_define
begin_include
include|#
directive|include
file|<QWidget>
end_include
begin_include
include|#
directive|include
file|<QSqlTableModel>
end_include
begin_include
include|#
directive|include
file|"ui_browserwidget.h"
end_include
begin_decl_stmt
DECL|variable|ConnectionWidget
name|class
name|ConnectionWidget
decl_stmt|;
end_decl_stmt
begin_macro
DECL|function|QT_FORWARD_DECLARE_CLASS
name|QT_FORWARD_DECLARE_CLASS
argument_list|(
argument|QTableView
argument_list|)
end_macro
begin_macro
name|QT_FORWARD_DECLARE_CLASS
argument_list|(
argument|QPushButton
argument_list|)
end_macro
begin_macro
name|QT_FORWARD_DECLARE_CLASS
argument_list|(
argument|QTextEdit
argument_list|)
end_macro
begin_macro
name|QT_FORWARD_DECLARE_CLASS
argument_list|(
argument|QSqlError
argument_list|)
end_macro
begin_decl_stmt
name|class
name|Browser
range|:
name|public
name|QWidget
decl_stmt|,
name|private
name|Ui
decl|::
name|Browser
block|{
name|Q_OBJECT
name|public
range|:
name|Browser
argument_list|(
name|QWidget
operator|*
name|parent
operator|=
literal|0
argument_list|)
decl_stmt|;
name|virtual
operator|~
name|Browser
argument_list|()
expr_stmt|;
name|QSqlError
name|addConnection
parameter_list|(
specifier|const
name|QString
modifier|&
name|driver
parameter_list|,
specifier|const
name|QString
modifier|&
name|dbName
parameter_list|,
specifier|const
name|QString
modifier|&
name|host
parameter_list|,
specifier|const
name|QString
modifier|&
name|user
parameter_list|,
specifier|const
name|QString
modifier|&
name|passwd
parameter_list|,
name|int
name|port
init|=
operator|-
literal|1
parameter_list|)
function_decl|;
name|void
name|insertRow
parameter_list|()
function_decl|;
name|void
name|deleteRow
parameter_list|()
function_decl|;
name|void
name|updateActions
parameter_list|()
function_decl|;
name|public
name|slots
range|:
name|void
name|exec
argument_list|()
decl_stmt|;
name|void
name|showTable
parameter_list|(
specifier|const
name|QString
modifier|&
name|table
parameter_list|)
function_decl|;
name|void
name|showMetaData
parameter_list|(
specifier|const
name|QString
modifier|&
name|table
parameter_list|)
function_decl|;
name|void
name|addConnection
parameter_list|()
function_decl|;
name|void
name|currentChanged
parameter_list|()
block|{
name|updateActions
argument_list|()
expr_stmt|;
block|}
name|void
name|about
parameter_list|()
function_decl|;
name|void
name|on_insertRowAction_triggered
parameter_list|()
block|{
name|insertRow
argument_list|()
expr_stmt|;
block|}
name|void
name|on_deleteRowAction_triggered
parameter_list|()
block|{
name|deleteRow
argument_list|()
expr_stmt|;
block|}
name|void
name|on_fieldStrategyAction_triggered
parameter_list|()
function_decl|;
name|void
name|on_rowStrategyAction_triggered
parameter_list|()
function_decl|;
name|void
name|on_manualStrategyAction_triggered
parameter_list|()
function_decl|;
name|void
name|on_submitAction_triggered
parameter_list|()
function_decl|;
name|void
name|on_revertAction_triggered
parameter_list|()
function_decl|;
name|void
name|on_selectAction_triggered
parameter_list|()
function_decl|;
name|void
name|on_connectionWidget_tableActivated
parameter_list|(
specifier|const
name|QString
modifier|&
name|table
parameter_list|)
block|{
name|showTable
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
name|void
name|on_connectionWidget_metaDataRequested
parameter_list|(
specifier|const
name|QString
modifier|&
name|table
parameter_list|)
block|{
name|showMetaData
argument_list|(
name|table
argument_list|)
expr_stmt|;
block|}
name|void
name|on_submitButton_clicked
parameter_list|()
block|{
name|exec
argument_list|()
expr_stmt|;
name|sqlEdit
operator|->
name|setFocus
argument_list|()
expr_stmt|;
block|}
name|void
name|on_clearButton_clicked
parameter_list|()
block|{
name|sqlEdit
operator|->
name|clear
argument_list|()
expr_stmt|;
name|sqlEdit
operator|->
name|setFocus
argument_list|()
expr_stmt|;
block|}
name|signals
label|:
name|void
name|statusMessage
parameter_list|(
specifier|const
name|QString
modifier|&
name|message
parameter_list|)
function_decl|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|CustomModel
range|:
name|public
name|QSqlTableModel
block|{
name|Q_OBJECT
name|public
operator|:
name|explicit
name|CustomModel
argument_list|(
argument|QObject *parent =
literal|0
argument_list|,
argument|QSqlDatabase db = QSqlDatabase()
argument_list|)
operator|:
name|QSqlTableModel
argument_list|(
argument|parent
argument_list|,
argument|db
argument_list|)
block|{}
name|QVariant
name|data
argument_list|(
argument|const QModelIndex&idx
argument_list|,
argument|int role
argument_list|)
specifier|const
name|Q_DECL_OVERRIDE
block|{
if|if
condition|(
name|role
operator|==
name|Qt
operator|::
name|BackgroundRole
operator|&&
name|isDirty
argument_list|(
name|idx
argument_list|)
condition|)
return|return
name|QBrush
argument_list|(
name|QColor
argument_list|(
name|Qt
operator|::
name|yellow
argument_list|)
argument_list|)
return|;
return|return
name|QSqlTableModel
operator|::
name|data
argument_list|(
name|idx
argument_list|,
name|role
argument_list|)
return|;
block|}
end_decl_stmt
begin_endif
unit|};
endif|#
directive|endif
end_endif
end_unit
