begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the demonstration applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"browser.h"
end_include
begin_include
include|#
directive|include
file|"qsqlconnectiondialog.h"
end_include
begin_include
include|#
directive|include
file|<QtWidgets>
end_include
begin_include
include|#
directive|include
file|<QtSql>
end_include
begin_constructor
DECL|function|Browser
name|Browser
operator|::
name|Browser
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
block|{
name|setupUi
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|table
operator|->
name|addAction
argument_list|(
name|insertRowAction
argument_list|)
expr_stmt|;
name|table
operator|->
name|addAction
argument_list|(
name|deleteRowAction
argument_list|)
expr_stmt|;
name|table
operator|->
name|addAction
argument_list|(
name|fieldStrategyAction
argument_list|)
expr_stmt|;
name|table
operator|->
name|addAction
argument_list|(
name|rowStrategyAction
argument_list|)
expr_stmt|;
name|table
operator|->
name|addAction
argument_list|(
name|manualStrategyAction
argument_list|)
expr_stmt|;
name|table
operator|->
name|addAction
argument_list|(
name|submitAction
argument_list|)
expr_stmt|;
name|table
operator|->
name|addAction
argument_list|(
name|revertAction
argument_list|)
expr_stmt|;
name|table
operator|->
name|addAction
argument_list|(
name|selectAction
argument_list|)
expr_stmt|;
if|if
condition|(
name|QSqlDatabase
operator|::
name|drivers
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|QMessageBox
operator|::
name|information
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"No database drivers found"
argument_list|)
argument_list|,
name|tr
argument_list|(
literal|"This demo requires at least one Qt database driver. "
literal|"Please check the documentation how to build the "
literal|"Qt SQL plugins."
argument_list|)
argument_list|)
expr_stmt|;
emit|emit
name|statusMessage
argument_list|(
name|tr
argument_list|(
literal|"Ready."
argument_list|)
argument_list|)
emit|;
block|}
end_constructor
begin_destructor
DECL|function|~Browser
name|Browser
operator|::
name|~
name|Browser
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|exec
name|void
name|Browser
operator|::
name|exec
parameter_list|()
block|{
name|QSqlQueryModel
modifier|*
name|model
init|=
operator|new
name|QSqlQueryModel
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|model
operator|->
name|setQuery
argument_list|(
name|QSqlQuery
argument_list|(
name|sqlEdit
operator|->
name|toPlainText
argument_list|()
argument_list|,
name|connectionWidget
operator|->
name|currentDatabase
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|table
operator|->
name|setModel
argument_list|(
name|model
argument_list|)
expr_stmt|;
if|if
condition|(
name|model
operator|->
name|lastError
argument_list|()
operator|.
name|type
argument_list|()
operator|!=
name|QSqlError
operator|::
name|NoError
condition|)
emit|emit
name|statusMessage
argument_list|(
name|model
operator|->
name|lastError
argument_list|()
operator|.
name|text
argument_list|()
argument_list|)
emit|;
elseif|else
if|if
condition|(
name|model
operator|->
name|query
argument_list|()
operator|.
name|isSelect
argument_list|()
condition|)
emit|emit
name|statusMessage
argument_list|(
name|tr
argument_list|(
literal|"Query OK."
argument_list|)
argument_list|)
emit|;
else|else
emit|emit
name|statusMessage
argument_list|(
name|tr
argument_list|(
literal|"Query OK, number of affected rows: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|model
operator|->
name|query
argument_list|()
operator|.
name|numRowsAffected
argument_list|()
argument_list|)
argument_list|)
emit|;
name|updateActions
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addConnection
name|QSqlError
name|Browser
operator|::
name|addConnection
parameter_list|(
specifier|const
name|QString
modifier|&
name|driver
parameter_list|,
specifier|const
name|QString
modifier|&
name|dbName
parameter_list|,
specifier|const
name|QString
modifier|&
name|host
parameter_list|,
specifier|const
name|QString
modifier|&
name|user
parameter_list|,
specifier|const
name|QString
modifier|&
name|passwd
parameter_list|,
name|int
name|port
parameter_list|)
block|{
specifier|static
name|int
name|cCount
init|=
literal|0
decl_stmt|;
name|QSqlError
name|err
decl_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|addDatabase
argument_list|(
name|driver
argument_list|,
name|QString
argument_list|(
literal|"Browser%1"
argument_list|)
operator|.
name|arg
argument_list|(
operator|++
name|cCount
argument_list|)
argument_list|)
decl_stmt|;
name|db
operator|.
name|setDatabaseName
argument_list|(
name|dbName
argument_list|)
expr_stmt|;
name|db
operator|.
name|setHostName
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|db
operator|.
name|setPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|db
operator|.
name|open
argument_list|(
name|user
argument_list|,
name|passwd
argument_list|)
condition|)
block|{
name|err
operator|=
name|db
operator|.
name|lastError
argument_list|()
expr_stmt|;
name|db
operator|=
name|QSqlDatabase
argument_list|()
expr_stmt|;
name|QSqlDatabase
operator|::
name|removeDatabase
argument_list|(
name|QString
argument_list|(
literal|"Browser%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|cCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|connectionWidget
operator|->
name|refresh
argument_list|()
expr_stmt|;
return|return
name|err
return|;
block|}
end_function
begin_function
DECL|function|addConnection
name|void
name|Browser
operator|::
name|addConnection
parameter_list|()
block|{
name|QSqlConnectionDialog
name|dialog
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|dialog
operator|.
name|exec
argument_list|()
operator|!=
name|QDialog
operator|::
name|Accepted
condition|)
return|return;
if|if
condition|(
name|dialog
operator|.
name|useInMemoryDatabase
argument_list|()
condition|)
block|{
name|QSqlDatabase
operator|::
name|database
argument_list|(
literal|"in_mem_db"
argument_list|,
literal|false
argument_list|)
operator|.
name|close
argument_list|()
expr_stmt|;
name|QSqlDatabase
operator|::
name|removeDatabase
argument_list|(
literal|"in_mem_db"
argument_list|)
expr_stmt|;
name|QSqlDatabase
name|db
init|=
name|QSqlDatabase
operator|::
name|addDatabase
argument_list|(
literal|"QSQLITE"
argument_list|,
literal|"in_mem_db"
argument_list|)
decl_stmt|;
name|db
operator|.
name|setDatabaseName
argument_list|(
literal|":memory:"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|db
operator|.
name|open
argument_list|()
condition|)
name|QMessageBox
operator|::
name|warning
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"Unable to open database"
argument_list|)
argument_list|,
name|tr
argument_list|(
literal|"An error occurred while "
literal|"opening the connection: "
argument_list|)
operator|+
name|db
operator|.
name|lastError
argument_list|()
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|QSqlQuery
name|q
argument_list|(
literal|""
argument_list|,
name|db
argument_list|)
decl_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"drop table Movies"
argument_list|)
expr_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"drop table Names"
argument_list|)
expr_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"create table Movies (id integer primary key, Title varchar, Director varchar, Rating number)"
argument_list|)
expr_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"insert into Movies values (0, 'Metropolis', 'Fritz Lang', '8.4')"
argument_list|)
expr_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"insert into Movies values (1, 'Nosferatu, eine Symphonie des Grauens', 'F.W. Murnau', '8.1')"
argument_list|)
expr_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"insert into Movies values (2, 'Bis ans Ende der Welt', 'Wim Wenders', '6.5')"
argument_list|)
expr_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"insert into Movies values (3, 'Hardware', 'Richard Stanley', '5.2')"
argument_list|)
expr_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"insert into Movies values (4, 'Mitchell', 'Andrew V. McLaglen', '2.1')"
argument_list|)
expr_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"create table Names (id integer primary key, Firstname varchar, Lastname varchar, City varchar)"
argument_list|)
expr_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"insert into Names values (0, 'Sala', 'Palmer', 'Morristown')"
argument_list|)
expr_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"insert into Names values (1, 'Christopher', 'Walker', 'Morristown')"
argument_list|)
expr_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"insert into Names values (2, 'Donald', 'Duck', 'Andeby')"
argument_list|)
expr_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"insert into Names values (3, 'Buck', 'Rogers', 'Paris')"
argument_list|)
expr_stmt|;
name|q
operator|.
name|exec
argument_list|(
literal|"insert into Names values (4, 'Sherlock', 'Holmes', 'London')"
argument_list|)
expr_stmt|;
name|connectionWidget
operator|->
name|refresh
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|QSqlError
name|err
init|=
name|addConnection
argument_list|(
name|dialog
operator|.
name|driverName
argument_list|()
argument_list|,
name|dialog
operator|.
name|databaseName
argument_list|()
argument_list|,
name|dialog
operator|.
name|hostName
argument_list|()
argument_list|,
name|dialog
operator|.
name|userName
argument_list|()
argument_list|,
name|dialog
operator|.
name|password
argument_list|()
argument_list|,
name|dialog
operator|.
name|port
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|err
operator|.
name|type
argument_list|()
operator|!=
name|QSqlError
operator|::
name|NoError
condition|)
name|QMessageBox
operator|::
name|warning
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"Unable to open database"
argument_list|)
argument_list|,
name|tr
argument_list|(
literal|"An error occurred while "
literal|"opening the connection: "
argument_list|)
operator|+
name|err
operator|.
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|showTable
name|void
name|Browser
operator|::
name|showTable
parameter_list|(
specifier|const
name|QString
modifier|&
name|t
parameter_list|)
block|{
name|QSqlTableModel
modifier|*
name|model
init|=
operator|new
name|CustomModel
argument_list|(
name|table
argument_list|,
name|connectionWidget
operator|->
name|currentDatabase
argument_list|()
argument_list|)
decl_stmt|;
name|model
operator|->
name|setEditStrategy
argument_list|(
name|QSqlTableModel
operator|::
name|OnRowChange
argument_list|)
expr_stmt|;
name|model
operator|->
name|setTable
argument_list|(
name|connectionWidget
operator|->
name|currentDatabase
argument_list|()
operator|.
name|driver
argument_list|()
operator|->
name|escapeIdentifier
argument_list|(
name|t
argument_list|,
name|QSqlDriver
operator|::
name|TableName
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|->
name|select
argument_list|()
expr_stmt|;
if|if
condition|(
name|model
operator|->
name|lastError
argument_list|()
operator|.
name|type
argument_list|()
operator|!=
name|QSqlError
operator|::
name|NoError
condition|)
emit|emit
name|statusMessage
argument_list|(
name|model
operator|->
name|lastError
argument_list|()
operator|.
name|text
argument_list|()
argument_list|)
emit|;
name|table
operator|->
name|setModel
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|table
operator|->
name|setEditTriggers
argument_list|(
name|QAbstractItemView
operator|::
name|DoubleClicked
operator||
name|QAbstractItemView
operator|::
name|EditKeyPressed
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|table
operator|->
name|selectionModel
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|currentRowChanged
argument_list|(
name|QModelIndex
argument_list|,
name|QModelIndex
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|currentChanged
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|updateActions
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|showMetaData
name|void
name|Browser
operator|::
name|showMetaData
parameter_list|(
specifier|const
name|QString
modifier|&
name|t
parameter_list|)
block|{
name|QSqlRecord
name|rec
init|=
name|connectionWidget
operator|->
name|currentDatabase
argument_list|()
operator|.
name|record
argument_list|(
name|t
argument_list|)
decl_stmt|;
name|QStandardItemModel
modifier|*
name|model
init|=
operator|new
name|QStandardItemModel
argument_list|(
name|table
argument_list|)
decl_stmt|;
name|model
operator|->
name|insertRows
argument_list|(
literal|0
argument_list|,
name|rec
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|->
name|insertColumns
argument_list|(
literal|0
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|model
operator|->
name|setHeaderData
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|,
literal|"Fieldname"
argument_list|)
expr_stmt|;
name|model
operator|->
name|setHeaderData
argument_list|(
literal|1
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|,
literal|"Type"
argument_list|)
expr_stmt|;
name|model
operator|->
name|setHeaderData
argument_list|(
literal|2
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|,
literal|"Length"
argument_list|)
expr_stmt|;
name|model
operator|->
name|setHeaderData
argument_list|(
literal|3
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|,
literal|"Precision"
argument_list|)
expr_stmt|;
name|model
operator|->
name|setHeaderData
argument_list|(
literal|4
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|,
literal|"Required"
argument_list|)
expr_stmt|;
name|model
operator|->
name|setHeaderData
argument_list|(
literal|5
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|,
literal|"AutoValue"
argument_list|)
expr_stmt|;
name|model
operator|->
name|setHeaderData
argument_list|(
literal|6
argument_list|,
name|Qt
operator|::
name|Horizontal
argument_list|,
literal|"DefaultValue"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rec
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QSqlField
name|fld
init|=
name|rec
operator|.
name|field
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|model
operator|->
name|setData
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|i
argument_list|,
literal|0
argument_list|)
argument_list|,
name|fld
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|->
name|setData
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|i
argument_list|,
literal|1
argument_list|)
argument_list|,
name|fld
operator|.
name|typeID
argument_list|()
operator|==
operator|-
literal|1
condition|?
name|QString
argument_list|(
name|QVariant
operator|::
name|typeToName
argument_list|(
name|fld
operator|.
name|type
argument_list|()
argument_list|)
argument_list|)
else|:
name|QString
argument_list|(
literal|"%1 (%2)"
argument_list|)
operator|.
name|arg
argument_list|(
name|QVariant
operator|::
name|typeToName
argument_list|(
name|fld
operator|.
name|type
argument_list|()
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|fld
operator|.
name|typeID
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|->
name|setData
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|i
argument_list|,
literal|2
argument_list|)
argument_list|,
name|fld
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|->
name|setData
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|i
argument_list|,
literal|3
argument_list|)
argument_list|,
name|fld
operator|.
name|precision
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|->
name|setData
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|i
argument_list|,
literal|4
argument_list|)
argument_list|,
name|fld
operator|.
name|requiredStatus
argument_list|()
operator|==
operator|-
literal|1
condition|?
name|QVariant
argument_list|(
literal|"?"
argument_list|)
else|:
name|QVariant
argument_list|(
name|bool
argument_list|(
name|fld
operator|.
name|requiredStatus
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|->
name|setData
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|i
argument_list|,
literal|5
argument_list|)
argument_list|,
name|fld
operator|.
name|isAutoValue
argument_list|()
argument_list|)
expr_stmt|;
name|model
operator|->
name|setData
argument_list|(
name|model
operator|->
name|index
argument_list|(
name|i
argument_list|,
literal|6
argument_list|)
argument_list|,
name|fld
operator|.
name|defaultValue
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|table
operator|->
name|setModel
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|table
operator|->
name|setEditTriggers
argument_list|(
name|QAbstractItemView
operator|::
name|NoEditTriggers
argument_list|)
expr_stmt|;
name|updateActions
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insertRow
name|void
name|Browser
operator|::
name|insertRow
parameter_list|()
block|{
name|QSqlTableModel
modifier|*
name|model
init|=
name|qobject_cast
argument_list|<
name|QSqlTableModel
operator|*
argument_list|>
argument_list|(
name|table
operator|->
name|model
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|model
condition|)
return|return;
name|QModelIndex
name|insertIndex
init|=
name|table
operator|->
name|currentIndex
argument_list|()
decl_stmt|;
name|int
name|row
init|=
name|insertIndex
operator|.
name|row
argument_list|()
operator|==
operator|-
literal|1
condition|?
literal|0
else|:
name|insertIndex
operator|.
name|row
argument_list|()
decl_stmt|;
name|model
operator|->
name|insertRow
argument_list|(
name|row
argument_list|)
expr_stmt|;
name|insertIndex
operator|=
name|model
operator|->
name|index
argument_list|(
name|row
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|table
operator|->
name|setCurrentIndex
argument_list|(
name|insertIndex
argument_list|)
expr_stmt|;
name|table
operator|->
name|edit
argument_list|(
name|insertIndex
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|deleteRow
name|void
name|Browser
operator|::
name|deleteRow
parameter_list|()
block|{
name|QSqlTableModel
modifier|*
name|model
init|=
name|qobject_cast
argument_list|<
name|QSqlTableModel
operator|*
argument_list|>
argument_list|(
name|table
operator|->
name|model
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|model
condition|)
return|return;
name|QModelIndexList
name|currentSelection
init|=
name|table
operator|->
name|selectionModel
argument_list|()
operator|->
name|selectedIndexes
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|currentSelection
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|currentSelection
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|column
argument_list|()
operator|!=
literal|0
condition|)
continue|continue;
name|model
operator|->
name|removeRow
argument_list|(
name|currentSelection
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|row
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|updateActions
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateActions
name|void
name|Browser
operator|::
name|updateActions
parameter_list|()
block|{
name|QSqlTableModel
modifier|*
name|tm
init|=
name|qobject_cast
argument_list|<
name|QSqlTableModel
operator|*
argument_list|>
argument_list|(
name|table
operator|->
name|model
argument_list|()
argument_list|)
decl_stmt|;
name|bool
name|enableIns
init|=
name|tm
decl_stmt|;
name|bool
name|enableDel
init|=
name|enableIns
operator|&&
name|table
operator|->
name|currentIndex
argument_list|()
operator|.
name|isValid
argument_list|()
decl_stmt|;
name|insertRowAction
operator|->
name|setEnabled
argument_list|(
name|enableIns
argument_list|)
expr_stmt|;
name|deleteRowAction
operator|->
name|setEnabled
argument_list|(
name|enableDel
argument_list|)
expr_stmt|;
name|fieldStrategyAction
operator|->
name|setEnabled
argument_list|(
name|tm
argument_list|)
expr_stmt|;
name|rowStrategyAction
operator|->
name|setEnabled
argument_list|(
name|tm
argument_list|)
expr_stmt|;
name|manualStrategyAction
operator|->
name|setEnabled
argument_list|(
name|tm
argument_list|)
expr_stmt|;
name|submitAction
operator|->
name|setEnabled
argument_list|(
name|tm
argument_list|)
expr_stmt|;
name|revertAction
operator|->
name|setEnabled
argument_list|(
name|tm
argument_list|)
expr_stmt|;
name|selectAction
operator|->
name|setEnabled
argument_list|(
name|tm
argument_list|)
expr_stmt|;
if|if
condition|(
name|tm
condition|)
block|{
name|QSqlTableModel
operator|::
name|EditStrategy
name|es
init|=
name|tm
operator|->
name|editStrategy
argument_list|()
decl_stmt|;
name|fieldStrategyAction
operator|->
name|setChecked
argument_list|(
name|es
operator|==
name|QSqlTableModel
operator|::
name|OnFieldChange
argument_list|)
expr_stmt|;
name|rowStrategyAction
operator|->
name|setChecked
argument_list|(
name|es
operator|==
name|QSqlTableModel
operator|::
name|OnRowChange
argument_list|)
expr_stmt|;
name|manualStrategyAction
operator|->
name|setChecked
argument_list|(
name|es
operator|==
name|QSqlTableModel
operator|::
name|OnManualSubmit
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|about
name|void
name|Browser
operator|::
name|about
parameter_list|()
block|{
name|QMessageBox
operator|::
name|about
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"About"
argument_list|)
argument_list|,
name|tr
argument_list|(
literal|"The SQL Browser demonstration "
literal|"shows how a data browser can be used to visualize the results of SQL"
literal|"statements on a live database"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|on_fieldStrategyAction_triggered
name|void
name|Browser
operator|::
name|on_fieldStrategyAction_triggered
parameter_list|()
block|{
name|QSqlTableModel
modifier|*
name|tm
init|=
name|qobject_cast
argument_list|<
name|QSqlTableModel
operator|*
argument_list|>
argument_list|(
name|table
operator|->
name|model
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tm
condition|)
name|tm
operator|->
name|setEditStrategy
argument_list|(
name|QSqlTableModel
operator|::
name|OnFieldChange
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|on_rowStrategyAction_triggered
name|void
name|Browser
operator|::
name|on_rowStrategyAction_triggered
parameter_list|()
block|{
name|QSqlTableModel
modifier|*
name|tm
init|=
name|qobject_cast
argument_list|<
name|QSqlTableModel
operator|*
argument_list|>
argument_list|(
name|table
operator|->
name|model
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tm
condition|)
name|tm
operator|->
name|setEditStrategy
argument_list|(
name|QSqlTableModel
operator|::
name|OnRowChange
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|on_manualStrategyAction_triggered
name|void
name|Browser
operator|::
name|on_manualStrategyAction_triggered
parameter_list|()
block|{
name|QSqlTableModel
modifier|*
name|tm
init|=
name|qobject_cast
argument_list|<
name|QSqlTableModel
operator|*
argument_list|>
argument_list|(
name|table
operator|->
name|model
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tm
condition|)
name|tm
operator|->
name|setEditStrategy
argument_list|(
name|QSqlTableModel
operator|::
name|OnManualSubmit
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|on_submitAction_triggered
name|void
name|Browser
operator|::
name|on_submitAction_triggered
parameter_list|()
block|{
name|QSqlTableModel
modifier|*
name|tm
init|=
name|qobject_cast
argument_list|<
name|QSqlTableModel
operator|*
argument_list|>
argument_list|(
name|table
operator|->
name|model
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tm
condition|)
name|tm
operator|->
name|submitAll
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|on_revertAction_triggered
name|void
name|Browser
operator|::
name|on_revertAction_triggered
parameter_list|()
block|{
name|QSqlTableModel
modifier|*
name|tm
init|=
name|qobject_cast
argument_list|<
name|QSqlTableModel
operator|*
argument_list|>
argument_list|(
name|table
operator|->
name|model
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tm
condition|)
name|tm
operator|->
name|revertAll
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|on_selectAction_triggered
name|void
name|Browser
operator|::
name|on_selectAction_triggered
parameter_list|()
block|{
name|QSqlTableModel
modifier|*
name|tm
init|=
name|qobject_cast
argument_list|<
name|QSqlTableModel
operator|*
argument_list|>
argument_list|(
name|table
operator|->
name|model
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tm
condition|)
name|tm
operator|->
name|select
argument_list|()
expr_stmt|;
block|}
end_function
end_unit
