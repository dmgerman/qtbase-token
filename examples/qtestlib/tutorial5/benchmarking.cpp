begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names **     of its contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtWidgets>
end_include
begin_include
include|#
directive|include
file|<qtest.h>
end_include
begin_class
DECL|class|TestBenchmark
class|class
name|TestBenchmark
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|simple
parameter_list|()
function_decl|;
name|void
name|multiple_data
parameter_list|()
function_decl|;
name|void
name|multiple
parameter_list|()
function_decl|;
name|void
name|series_data
parameter_list|()
function_decl|;
name|void
name|series
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_comment
comment|//! [0]
end_comment
begin_function
DECL|function|simple
name|void
name|TestBenchmark
operator|::
name|simple
parameter_list|()
block|{
name|QString
name|str1
init|=
name|QLatin1String
argument_list|(
literal|"This is a test string"
argument_list|)
decl_stmt|;
name|QString
name|str2
init|=
name|QLatin1String
argument_list|(
literal|"This is a test string"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|str1
operator|.
name|localeAwareCompare
argument_list|(
name|str2
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QBENCHMARK
block|{
name|str1
operator|.
name|localeAwareCompare
argument_list|(
name|str2
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|//! [0]
end_comment
begin_comment
comment|//! [1]
end_comment
begin_function
DECL|function|multiple_data
name|void
name|TestBenchmark
operator|::
name|multiple_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"useLocaleCompare"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"locale aware compare"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"standard compare"
argument_list|)
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [1]
end_comment
begin_comment
comment|//! [2]
end_comment
begin_function
DECL|function|multiple
name|void
name|TestBenchmark
operator|::
name|multiple
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|useLocaleCompare
argument_list|)
expr_stmt|;
name|QString
name|str1
init|=
name|QLatin1String
argument_list|(
literal|"This is a test string"
argument_list|)
decl_stmt|;
name|QString
name|str2
init|=
name|QLatin1String
argument_list|(
literal|"This is a test string"
argument_list|)
decl_stmt|;
name|int
name|result
decl_stmt|;
if|if
condition|(
name|useLocaleCompare
condition|)
block|{
name|QBENCHMARK
block|{
name|result
operator|=
name|str1
operator|.
name|localeAwareCompare
argument_list|(
name|str2
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QBENCHMARK
block|{
name|result
operator|=
operator|(
name|str1
operator|==
name|str2
operator|)
expr_stmt|;
block|}
block|}
name|Q_UNUSED
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [2]
end_comment
begin_comment
comment|//! [3]
end_comment
begin_function
DECL|function|series_data
name|void
name|TestBenchmark
operator|::
name|series_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"useLocaleCompare"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"stringSize"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|10000
condition|;
name|i
operator|+=
literal|2000
control|)
block|{
name|QByteArray
name|size
init|=
name|QByteArray
operator|::
name|number
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
operator|(
literal|"locale aware compare--"
operator|+
name|size
operator|)
operator|.
name|constData
argument_list|()
argument_list|)
operator|<<
literal|true
operator|<<
name|i
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
operator|(
literal|"standard compare--"
operator|+
name|size
operator|)
operator|.
name|constData
argument_list|()
argument_list|)
operator|<<
literal|false
operator|<<
name|i
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|//! [4]
end_comment
begin_comment
comment|//! [5]
end_comment
begin_function
DECL|function|series
name|void
name|TestBenchmark
operator|::
name|series
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|useLocaleCompare
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|stringSize
argument_list|)
expr_stmt|;
name|QString
name|str1
init|=
name|QString
argument_list|()
operator|.
name|fill
argument_list|(
literal|'A'
argument_list|,
name|stringSize
argument_list|)
decl_stmt|;
name|QString
name|str2
init|=
name|QString
argument_list|()
operator|.
name|fill
argument_list|(
literal|'A'
argument_list|,
name|stringSize
argument_list|)
decl_stmt|;
name|int
name|result
decl_stmt|;
if|if
condition|(
name|useLocaleCompare
condition|)
block|{
name|QBENCHMARK
block|{
name|result
operator|=
name|str1
operator|.
name|localeAwareCompare
argument_list|(
name|str2
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QBENCHMARK
block|{
name|result
operator|=
operator|(
name|str1
operator|==
name|str2
operator|)
expr_stmt|;
block|}
block|}
name|Q_UNUSED
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [5]
end_comment
begin_macro
name|QTEST_MAIN
argument_list|(
argument|TestBenchmark
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"benchmarking.moc"
end_include
end_unit
