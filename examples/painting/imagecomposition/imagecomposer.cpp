begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: http://www.qt-project.org/ ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor **     the names of its contributors may be used to endorse or promote **     products derived from this software without specific prior written **     permission. ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtWidgets>
end_include
begin_include
include|#
directive|include
file|"imagecomposer.h"
end_include
begin_comment
comment|//! [0]
end_comment
begin_decl_stmt
specifier|static
specifier|const
name|QSize
name|resultSize
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|)
decl_stmt|;
end_decl_stmt
begin_comment
comment|//! [0]
end_comment
begin_comment
comment|//! [1]
end_comment
begin_constructor
DECL|function|ImageComposer
name|ImageComposer
operator|::
name|ImageComposer
parameter_list|()
block|{
name|sourceButton
operator|=
operator|new
name|QToolButton
expr_stmt|;
name|sourceButton
operator|->
name|setIconSize
argument_list|(
name|resultSize
argument_list|)
expr_stmt|;
name|operatorComboBox
operator|=
operator|new
name|QComboBox
expr_stmt|;
name|addOp
argument_list|(
name|QPainter
operator|::
name|CompositionMode_SourceOver
argument_list|,
name|tr
argument_list|(
literal|"SourceOver"
argument_list|)
argument_list|)
expr_stmt|;
name|addOp
argument_list|(
name|QPainter
operator|::
name|CompositionMode_DestinationOver
argument_list|,
name|tr
argument_list|(
literal|"DestinationOver"
argument_list|)
argument_list|)
expr_stmt|;
name|addOp
argument_list|(
name|QPainter
operator|::
name|CompositionMode_Clear
argument_list|,
name|tr
argument_list|(
literal|"Clear"
argument_list|)
argument_list|)
expr_stmt|;
name|addOp
argument_list|(
name|QPainter
operator|::
name|CompositionMode_Source
argument_list|,
name|tr
argument_list|(
literal|"Source"
argument_list|)
argument_list|)
expr_stmt|;
name|addOp
argument_list|(
name|QPainter
operator|::
name|CompositionMode_Destination
argument_list|,
name|tr
argument_list|(
literal|"Destination"
argument_list|)
argument_list|)
expr_stmt|;
name|addOp
argument_list|(
name|QPainter
operator|::
name|CompositionMode_SourceIn
argument_list|,
name|tr
argument_list|(
literal|"SourceIn"
argument_list|)
argument_list|)
expr_stmt|;
name|addOp
argument_list|(
name|QPainter
operator|::
name|CompositionMode_DestinationIn
argument_list|,
name|tr
argument_list|(
literal|"DestinationIn"
argument_list|)
argument_list|)
expr_stmt|;
name|addOp
argument_list|(
name|QPainter
operator|::
name|CompositionMode_SourceOut
argument_list|,
name|tr
argument_list|(
literal|"SourceOut"
argument_list|)
argument_list|)
expr_stmt|;
name|addOp
argument_list|(
name|QPainter
operator|::
name|CompositionMode_DestinationOut
argument_list|,
name|tr
argument_list|(
literal|"DestinationOut"
argument_list|)
argument_list|)
expr_stmt|;
name|addOp
argument_list|(
name|QPainter
operator|::
name|CompositionMode_SourceAtop
argument_list|,
name|tr
argument_list|(
literal|"SourceAtop"
argument_list|)
argument_list|)
expr_stmt|;
name|addOp
argument_list|(
name|QPainter
operator|::
name|CompositionMode_DestinationAtop
argument_list|,
name|tr
argument_list|(
literal|"DestinationAtop"
argument_list|)
argument_list|)
expr_stmt|;
name|addOp
argument_list|(
name|QPainter
operator|::
name|CompositionMode_Xor
argument_list|,
name|tr
argument_list|(
literal|"Xor"
argument_list|)
argument_list|)
expr_stmt|;
name|addOp
argument_list|(
name|QPainter
operator|::
name|CompositionMode_Plus
argument_list|,
name|tr
argument_list|(
literal|"Plus"
argument_list|)
argument_list|)
expr_stmt|;
name|addOp
argument_list|(
name|QPainter
operator|::
name|CompositionMode_Multiply
argument_list|,
name|tr
argument_list|(
literal|"Multiply"
argument_list|)
argument_list|)
expr_stmt|;
name|addOp
argument_list|(
name|QPainter
operator|::
name|CompositionMode_Screen
argument_list|,
name|tr
argument_list|(
literal|"Screen"
argument_list|)
argument_list|)
expr_stmt|;
name|addOp
argument_list|(
name|QPainter
operator|::
name|CompositionMode_Overlay
argument_list|,
name|tr
argument_list|(
literal|"Overlay"
argument_list|)
argument_list|)
expr_stmt|;
name|addOp
argument_list|(
name|QPainter
operator|::
name|CompositionMode_Darken
argument_list|,
name|tr
argument_list|(
literal|"Darken"
argument_list|)
argument_list|)
expr_stmt|;
name|addOp
argument_list|(
name|QPainter
operator|::
name|CompositionMode_Lighten
argument_list|,
name|tr
argument_list|(
literal|"Lighten"
argument_list|)
argument_list|)
expr_stmt|;
name|addOp
argument_list|(
name|QPainter
operator|::
name|CompositionMode_ColorDodge
argument_list|,
name|tr
argument_list|(
literal|"ColorDodge"
argument_list|)
argument_list|)
expr_stmt|;
name|addOp
argument_list|(
name|QPainter
operator|::
name|CompositionMode_ColorBurn
argument_list|,
name|tr
argument_list|(
literal|"ColorBurn"
argument_list|)
argument_list|)
expr_stmt|;
name|addOp
argument_list|(
name|QPainter
operator|::
name|CompositionMode_HardLight
argument_list|,
name|tr
argument_list|(
literal|"HardLight"
argument_list|)
argument_list|)
expr_stmt|;
name|addOp
argument_list|(
name|QPainter
operator|::
name|CompositionMode_SoftLight
argument_list|,
name|tr
argument_list|(
literal|"SoftLight"
argument_list|)
argument_list|)
expr_stmt|;
name|addOp
argument_list|(
name|QPainter
operator|::
name|CompositionMode_Difference
argument_list|,
name|tr
argument_list|(
literal|"Difference"
argument_list|)
argument_list|)
expr_stmt|;
name|addOp
argument_list|(
name|QPainter
operator|::
name|CompositionMode_Exclusion
argument_list|,
name|tr
argument_list|(
literal|"Exclusion"
argument_list|)
argument_list|)
expr_stmt|;
comment|//! [1]
comment|//! [2]
name|destinationButton
operator|=
operator|new
name|QToolButton
expr_stmt|;
name|destinationButton
operator|->
name|setIconSize
argument_list|(
name|resultSize
argument_list|)
expr_stmt|;
name|equalLabel
operator|=
operator|new
name|QLabel
argument_list|(
name|tr
argument_list|(
literal|"="
argument_list|)
argument_list|)
expr_stmt|;
name|resultLabel
operator|=
operator|new
name|QLabel
expr_stmt|;
name|resultLabel
operator|->
name|setMinimumWidth
argument_list|(
name|resultSize
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
comment|//! [2]
comment|//! [3]
name|connect
argument_list|(
name|sourceButton
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|chooseSource
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|operatorComboBox
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|recalculateResult
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|destinationButton
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|chooseDestination
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//! [3]
comment|//! [4]
name|QGridLayout
modifier|*
name|mainLayout
init|=
operator|new
name|QGridLayout
decl_stmt|;
name|mainLayout
operator|->
name|addWidget
argument_list|(
name|sourceButton
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mainLayout
operator|->
name|addWidget
argument_list|(
name|operatorComboBox
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mainLayout
operator|->
name|addWidget
argument_list|(
name|destinationButton
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mainLayout
operator|->
name|addWidget
argument_list|(
name|equalLabel
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|mainLayout
operator|->
name|addWidget
argument_list|(
name|resultLabel
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mainLayout
operator|->
name|setSizeConstraint
argument_list|(
name|QLayout
operator|::
name|SetFixedSize
argument_list|)
expr_stmt|;
name|setLayout
argument_list|(
name|mainLayout
argument_list|)
expr_stmt|;
comment|//! [4]
comment|//! [5]
name|resultImage
operator|=
name|QImage
argument_list|(
name|resultSize
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
expr_stmt|;
name|loadImage
argument_list|(
literal|":/images/butterfly.png"
argument_list|,
operator|&
name|sourceImage
argument_list|,
name|sourceButton
argument_list|)
expr_stmt|;
name|loadImage
argument_list|(
literal|":/images/checker.png"
argument_list|,
operator|&
name|destinationImage
argument_list|,
name|destinationButton
argument_list|)
expr_stmt|;
name|setWindowTitle
argument_list|(
name|tr
argument_list|(
literal|"Image Composition"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|//! [5]
end_comment
begin_comment
comment|//! [6]
end_comment
begin_function
DECL|function|chooseSource
name|void
name|ImageComposer
operator|::
name|chooseSource
parameter_list|()
block|{
name|chooseImage
argument_list|(
name|tr
argument_list|(
literal|"Choose Source Image"
argument_list|)
argument_list|,
operator|&
name|sourceImage
argument_list|,
name|sourceButton
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [6]
end_comment
begin_comment
comment|//! [7]
end_comment
begin_function
DECL|function|chooseDestination
name|void
name|ImageComposer
operator|::
name|chooseDestination
parameter_list|()
block|{
name|chooseImage
argument_list|(
name|tr
argument_list|(
literal|"Choose Destination Image"
argument_list|)
argument_list|,
operator|&
name|destinationImage
argument_list|,
name|destinationButton
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [7]
end_comment
begin_comment
comment|//! [8]
end_comment
begin_function
DECL|function|recalculateResult
name|void
name|ImageComposer
operator|::
name|recalculateResult
parameter_list|()
block|{
name|QPainter
operator|::
name|CompositionMode
name|mode
init|=
name|currentMode
argument_list|()
decl_stmt|;
name|QPainter
name|painter
argument_list|(
operator|&
name|resultImage
argument_list|)
decl_stmt|;
name|painter
operator|.
name|setCompositionMode
argument_list|(
name|QPainter
operator|::
name|CompositionMode_Source
argument_list|)
expr_stmt|;
name|painter
operator|.
name|fillRect
argument_list|(
name|resultImage
operator|.
name|rect
argument_list|()
argument_list|,
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|painter
operator|.
name|setCompositionMode
argument_list|(
name|QPainter
operator|::
name|CompositionMode_SourceOver
argument_list|)
expr_stmt|;
name|painter
operator|.
name|drawImage
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|destinationImage
argument_list|)
expr_stmt|;
name|painter
operator|.
name|setCompositionMode
argument_list|(
name|mode
argument_list|)
expr_stmt|;
name|painter
operator|.
name|drawImage
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|sourceImage
argument_list|)
expr_stmt|;
name|painter
operator|.
name|setCompositionMode
argument_list|(
name|QPainter
operator|::
name|CompositionMode_DestinationOver
argument_list|)
expr_stmt|;
name|painter
operator|.
name|fillRect
argument_list|(
name|resultImage
operator|.
name|rect
argument_list|()
argument_list|,
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|painter
operator|.
name|end
argument_list|()
expr_stmt|;
name|resultLabel
operator|->
name|setPixmap
argument_list|(
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|resultImage
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [8]
end_comment
begin_comment
comment|//! [9]
end_comment
begin_function
DECL|function|addOp
name|void
name|ImageComposer
operator|::
name|addOp
parameter_list|(
name|QPainter
operator|::
name|CompositionMode
name|mode
parameter_list|,
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
name|operatorComboBox
operator|->
name|addItem
argument_list|(
name|name
argument_list|,
name|mode
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [9]
end_comment
begin_comment
comment|//! [10]
end_comment
begin_function
DECL|function|chooseImage
name|void
name|ImageComposer
operator|::
name|chooseImage
parameter_list|(
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
name|QImage
modifier|*
name|image
parameter_list|,
name|QToolButton
modifier|*
name|button
parameter_list|)
block|{
name|QString
name|fileName
init|=
name|QFileDialog
operator|::
name|getOpenFileName
argument_list|(
name|this
argument_list|,
name|title
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fileName
operator|.
name|isEmpty
argument_list|()
condition|)
name|loadImage
argument_list|(
name|fileName
argument_list|,
name|image
argument_list|,
name|button
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [10]
end_comment
begin_comment
comment|//! [11]
end_comment
begin_function
DECL|function|loadImage
name|void
name|ImageComposer
operator|::
name|loadImage
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|,
name|QImage
modifier|*
name|image
parameter_list|,
name|QToolButton
modifier|*
name|button
parameter_list|)
block|{
name|image
operator|->
name|load
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
comment|// Scale the image to given size
operator|*
name|image
operator|=
name|image
operator|->
name|scaled
argument_list|(
name|resultSize
argument_list|,
name|Qt
operator|::
name|KeepAspectRatio
argument_list|)
expr_stmt|;
name|QImage
name|fixedImage
argument_list|(
name|resultSize
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|QPainter
name|painter
argument_list|(
operator|&
name|fixedImage
argument_list|)
decl_stmt|;
name|painter
operator|.
name|setCompositionMode
argument_list|(
name|QPainter
operator|::
name|CompositionMode_Source
argument_list|)
expr_stmt|;
name|painter
operator|.
name|fillRect
argument_list|(
name|fixedImage
operator|.
name|rect
argument_list|()
argument_list|,
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|painter
operator|.
name|setCompositionMode
argument_list|(
name|QPainter
operator|::
name|CompositionMode_SourceOver
argument_list|)
expr_stmt|;
name|painter
operator|.
name|drawImage
argument_list|(
name|imagePos
argument_list|(
operator|*
name|image
argument_list|)
argument_list|,
operator|*
name|image
argument_list|)
expr_stmt|;
name|painter
operator|.
name|end
argument_list|()
expr_stmt|;
name|button
operator|->
name|setIcon
argument_list|(
name|QPixmap
operator|::
name|fromImage
argument_list|(
name|fixedImage
argument_list|)
argument_list|)
expr_stmt|;
operator|*
name|image
operator|=
name|fixedImage
expr_stmt|;
name|recalculateResult
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [11]
end_comment
begin_comment
comment|//! [12]
end_comment
begin_function
DECL|function|currentMode
name|QPainter
operator|::
name|CompositionMode
name|ImageComposer
operator|::
name|currentMode
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|QPainter
operator|::
name|CompositionMode
operator|)
name|operatorComboBox
operator|->
name|itemData
argument_list|(
name|operatorComboBox
operator|->
name|currentIndex
argument_list|()
argument_list|)
operator|.
name|toInt
argument_list|()
return|;
block|}
end_function
begin_comment
comment|//! [12]
end_comment
begin_comment
comment|//! [13]
end_comment
begin_function
DECL|function|imagePos
name|QPoint
name|ImageComposer
operator|::
name|imagePos
parameter_list|(
specifier|const
name|QImage
modifier|&
name|image
parameter_list|)
specifier|const
block|{
return|return
name|QPoint
argument_list|(
operator|(
name|resultSize
operator|.
name|width
argument_list|()
operator|-
name|image
operator|.
name|width
argument_list|()
operator|)
operator|/
literal|2
argument_list|,
operator|(
name|resultSize
operator|.
name|height
argument_list|()
operator|-
name|image
operator|.
name|height
argument_list|()
operator|)
operator|/
literal|2
argument_list|)
return|;
block|}
end_function
begin_comment
comment|//! [13]
end_comment
end_unit
