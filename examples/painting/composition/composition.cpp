begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: http://www.qt-project.org/ ** ** This file is part of the demonstration applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"composition.h"
end_include
begin_include
include|#
directive|include
file|<QBoxLayout>
end_include
begin_include
include|#
directive|include
file|<QRadioButton>
end_include
begin_include
include|#
directive|include
file|<QTimer>
end_include
begin_include
include|#
directive|include
file|<QDateTime>
end_include
begin_include
include|#
directive|include
file|<QSlider>
end_include
begin_include
include|#
directive|include
file|<QMouseEvent>
end_include
begin_include
include|#
directive|include
file|<qmath.h>
end_include
begin_decl_stmt
DECL|variable|animationInterval
specifier|const
name|int
name|animationInterval
init|=
literal|15
decl_stmt|;
end_decl_stmt
begin_comment
DECL|variable|animationInterval
comment|// update every 16 ms = ~60FPS
end_comment
begin_constructor
DECL|function|CompositionWidget
name|CompositionWidget
operator|::
name|CompositionWidget
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
block|{
name|CompositionRenderer
modifier|*
name|view
init|=
operator|new
name|CompositionRenderer
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QGroupBox
modifier|*
name|mainGroup
init|=
operator|new
name|QGroupBox
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|mainGroup
operator|->
name|setTitle
argument_list|(
name|tr
argument_list|(
literal|"Composition Modes"
argument_list|)
argument_list|)
expr_stmt|;
name|QGroupBox
modifier|*
name|modesGroup
init|=
operator|new
name|QGroupBox
argument_list|(
name|mainGroup
argument_list|)
decl_stmt|;
name|modesGroup
operator|->
name|setTitle
argument_list|(
name|tr
argument_list|(
literal|"Mode"
argument_list|)
argument_list|)
expr_stmt|;
name|rbClear
operator|=
operator|new
name|QRadioButton
argument_list|(
name|tr
argument_list|(
literal|"Clear"
argument_list|)
argument_list|,
name|modesGroup
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|rbClear
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|view
argument_list|,
name|SLOT
argument_list|(
name|setClearMode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rbSource
operator|=
operator|new
name|QRadioButton
argument_list|(
name|tr
argument_list|(
literal|"Source"
argument_list|)
argument_list|,
name|modesGroup
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|rbSource
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|view
argument_list|,
name|SLOT
argument_list|(
name|setSourceMode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rbDest
operator|=
operator|new
name|QRadioButton
argument_list|(
name|tr
argument_list|(
literal|"Destination"
argument_list|)
argument_list|,
name|modesGroup
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|rbDest
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|view
argument_list|,
name|SLOT
argument_list|(
name|setDestMode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rbSourceOver
operator|=
operator|new
name|QRadioButton
argument_list|(
name|tr
argument_list|(
literal|"Source Over"
argument_list|)
argument_list|,
name|modesGroup
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|rbSourceOver
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|view
argument_list|,
name|SLOT
argument_list|(
name|setSourceOverMode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rbDestOver
operator|=
operator|new
name|QRadioButton
argument_list|(
name|tr
argument_list|(
literal|"Destination Over"
argument_list|)
argument_list|,
name|modesGroup
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|rbDestOver
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|view
argument_list|,
name|SLOT
argument_list|(
name|setDestOverMode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rbSourceIn
operator|=
operator|new
name|QRadioButton
argument_list|(
name|tr
argument_list|(
literal|"Source In"
argument_list|)
argument_list|,
name|modesGroup
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|rbSourceIn
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|view
argument_list|,
name|SLOT
argument_list|(
name|setSourceInMode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rbDestIn
operator|=
operator|new
name|QRadioButton
argument_list|(
name|tr
argument_list|(
literal|"Dest In"
argument_list|)
argument_list|,
name|modesGroup
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|rbDestIn
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|view
argument_list|,
name|SLOT
argument_list|(
name|setDestInMode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rbSourceOut
operator|=
operator|new
name|QRadioButton
argument_list|(
name|tr
argument_list|(
literal|"Source Out"
argument_list|)
argument_list|,
name|modesGroup
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|rbSourceOut
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|view
argument_list|,
name|SLOT
argument_list|(
name|setSourceOutMode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rbDestOut
operator|=
operator|new
name|QRadioButton
argument_list|(
name|tr
argument_list|(
literal|"Dest Out"
argument_list|)
argument_list|,
name|modesGroup
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|rbDestOut
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|view
argument_list|,
name|SLOT
argument_list|(
name|setDestOutMode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rbSourceAtop
operator|=
operator|new
name|QRadioButton
argument_list|(
name|tr
argument_list|(
literal|"Source Atop"
argument_list|)
argument_list|,
name|modesGroup
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|rbSourceAtop
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|view
argument_list|,
name|SLOT
argument_list|(
name|setSourceAtopMode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rbDestAtop
operator|=
operator|new
name|QRadioButton
argument_list|(
name|tr
argument_list|(
literal|"Dest Atop"
argument_list|)
argument_list|,
name|modesGroup
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|rbDestAtop
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|view
argument_list|,
name|SLOT
argument_list|(
name|setDestAtopMode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rbXor
operator|=
operator|new
name|QRadioButton
argument_list|(
name|tr
argument_list|(
literal|"Xor"
argument_list|)
argument_list|,
name|modesGroup
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|rbXor
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|view
argument_list|,
name|SLOT
argument_list|(
name|setXorMode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rbPlus
operator|=
operator|new
name|QRadioButton
argument_list|(
name|tr
argument_list|(
literal|"Plus"
argument_list|)
argument_list|,
name|modesGroup
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|rbPlus
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|view
argument_list|,
name|SLOT
argument_list|(
name|setPlusMode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rbMultiply
operator|=
operator|new
name|QRadioButton
argument_list|(
name|tr
argument_list|(
literal|"Multiply"
argument_list|)
argument_list|,
name|modesGroup
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|rbMultiply
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|view
argument_list|,
name|SLOT
argument_list|(
name|setMultiplyMode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rbScreen
operator|=
operator|new
name|QRadioButton
argument_list|(
name|tr
argument_list|(
literal|"Screen"
argument_list|)
argument_list|,
name|modesGroup
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|rbScreen
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|view
argument_list|,
name|SLOT
argument_list|(
name|setScreenMode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rbOverlay
operator|=
operator|new
name|QRadioButton
argument_list|(
name|tr
argument_list|(
literal|"Overlay"
argument_list|)
argument_list|,
name|modesGroup
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|rbOverlay
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|view
argument_list|,
name|SLOT
argument_list|(
name|setOverlayMode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rbDarken
operator|=
operator|new
name|QRadioButton
argument_list|(
name|tr
argument_list|(
literal|"Darken"
argument_list|)
argument_list|,
name|modesGroup
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|rbDarken
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|view
argument_list|,
name|SLOT
argument_list|(
name|setDarkenMode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rbLighten
operator|=
operator|new
name|QRadioButton
argument_list|(
name|tr
argument_list|(
literal|"Lighten"
argument_list|)
argument_list|,
name|modesGroup
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|rbLighten
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|view
argument_list|,
name|SLOT
argument_list|(
name|setLightenMode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rbColorDodge
operator|=
operator|new
name|QRadioButton
argument_list|(
name|tr
argument_list|(
literal|"Color Dodge"
argument_list|)
argument_list|,
name|modesGroup
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|rbColorDodge
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|view
argument_list|,
name|SLOT
argument_list|(
name|setColorDodgeMode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rbColorBurn
operator|=
operator|new
name|QRadioButton
argument_list|(
name|tr
argument_list|(
literal|"Color Burn"
argument_list|)
argument_list|,
name|modesGroup
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|rbColorBurn
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|view
argument_list|,
name|SLOT
argument_list|(
name|setColorBurnMode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rbHardLight
operator|=
operator|new
name|QRadioButton
argument_list|(
name|tr
argument_list|(
literal|"Hard Light"
argument_list|)
argument_list|,
name|modesGroup
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|rbHardLight
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|view
argument_list|,
name|SLOT
argument_list|(
name|setHardLightMode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rbSoftLight
operator|=
operator|new
name|QRadioButton
argument_list|(
name|tr
argument_list|(
literal|"Soft Light"
argument_list|)
argument_list|,
name|modesGroup
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|rbSoftLight
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|view
argument_list|,
name|SLOT
argument_list|(
name|setSoftLightMode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rbDifference
operator|=
operator|new
name|QRadioButton
argument_list|(
name|tr
argument_list|(
literal|"Difference"
argument_list|)
argument_list|,
name|modesGroup
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|rbDifference
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|view
argument_list|,
name|SLOT
argument_list|(
name|setDifferenceMode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|rbExclusion
operator|=
operator|new
name|QRadioButton
argument_list|(
name|tr
argument_list|(
literal|"Exclusion"
argument_list|)
argument_list|,
name|modesGroup
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|rbExclusion
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|view
argument_list|,
name|SLOT
argument_list|(
name|setExclusionMode
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QGroupBox
modifier|*
name|circleColorGroup
init|=
operator|new
name|QGroupBox
argument_list|(
name|mainGroup
argument_list|)
decl_stmt|;
name|circleColorGroup
operator|->
name|setTitle
argument_list|(
name|tr
argument_list|(
literal|"Circle color"
argument_list|)
argument_list|)
expr_stmt|;
name|QSlider
modifier|*
name|circleColorSlider
init|=
operator|new
name|QSlider
argument_list|(
name|Qt
operator|::
name|Horizontal
argument_list|,
name|circleColorGroup
argument_list|)
decl_stmt|;
name|circleColorSlider
operator|->
name|setRange
argument_list|(
literal|0
argument_list|,
literal|359
argument_list|)
expr_stmt|;
name|circleColorSlider
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Preferred
argument_list|,
name|QSizePolicy
operator|::
name|Fixed
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|circleColorSlider
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|view
argument_list|,
name|SLOT
argument_list|(
name|setCircleColor
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QGroupBox
modifier|*
name|circleAlphaGroup
init|=
operator|new
name|QGroupBox
argument_list|(
name|mainGroup
argument_list|)
decl_stmt|;
name|circleAlphaGroup
operator|->
name|setTitle
argument_list|(
name|tr
argument_list|(
literal|"Circle alpha"
argument_list|)
argument_list|)
expr_stmt|;
name|QSlider
modifier|*
name|circleAlphaSlider
init|=
operator|new
name|QSlider
argument_list|(
name|Qt
operator|::
name|Horizontal
argument_list|,
name|circleAlphaGroup
argument_list|)
decl_stmt|;
name|circleAlphaSlider
operator|->
name|setRange
argument_list|(
literal|0
argument_list|,
literal|255
argument_list|)
expr_stmt|;
name|circleAlphaSlider
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Preferred
argument_list|,
name|QSizePolicy
operator|::
name|Fixed
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|circleAlphaSlider
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|view
argument_list|,
name|SLOT
argument_list|(
name|setCircleAlpha
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QPushButton
modifier|*
name|showSourceButton
init|=
operator|new
name|QPushButton
argument_list|(
name|mainGroup
argument_list|)
decl_stmt|;
name|showSourceButton
operator|->
name|setText
argument_list|(
name|tr
argument_list|(
literal|"Show Source"
argument_list|)
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_SUPPORT
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_OPENGL_ES
argument_list|)
name|QPushButton
modifier|*
name|enableOpenGLButton
init|=
operator|new
name|QPushButton
argument_list|(
name|mainGroup
argument_list|)
decl_stmt|;
name|enableOpenGLButton
operator|->
name|setText
argument_list|(
name|tr
argument_list|(
literal|"Use OpenGL"
argument_list|)
argument_list|)
expr_stmt|;
name|enableOpenGLButton
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|enableOpenGLButton
operator|->
name|setChecked
argument_list|(
name|view
operator|->
name|usesOpenGL
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|QGLFormat
operator|::
name|hasOpenGL
argument_list|()
operator|||
operator|!
name|QGLPixelBuffer
operator|::
name|hasOpenGLPbuffers
argument_list|()
condition|)
name|enableOpenGLButton
operator|->
name|hide
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|QPushButton
modifier|*
name|whatsThisButton
init|=
operator|new
name|QPushButton
argument_list|(
name|mainGroup
argument_list|)
decl_stmt|;
name|whatsThisButton
operator|->
name|setText
argument_list|(
name|tr
argument_list|(
literal|"What's This?"
argument_list|)
argument_list|)
expr_stmt|;
name|whatsThisButton
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QPushButton
modifier|*
name|animateButton
init|=
operator|new
name|QPushButton
argument_list|(
name|mainGroup
argument_list|)
decl_stmt|;
name|animateButton
operator|->
name|setText
argument_list|(
name|tr
argument_list|(
literal|"Animated"
argument_list|)
argument_list|)
expr_stmt|;
name|animateButton
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|animateButton
operator|->
name|setChecked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QHBoxLayout
modifier|*
name|viewLayout
init|=
operator|new
name|QHBoxLayout
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|viewLayout
operator|->
name|addWidget
argument_list|(
name|view
argument_list|)
expr_stmt|;
name|viewLayout
operator|->
name|addWidget
argument_list|(
name|mainGroup
argument_list|)
expr_stmt|;
name|QVBoxLayout
modifier|*
name|mainGroupLayout
init|=
operator|new
name|QVBoxLayout
argument_list|(
name|mainGroup
argument_list|)
decl_stmt|;
name|mainGroupLayout
operator|->
name|addWidget
argument_list|(
name|circleColorGroup
argument_list|)
expr_stmt|;
name|mainGroupLayout
operator|->
name|addWidget
argument_list|(
name|circleAlphaGroup
argument_list|)
expr_stmt|;
name|mainGroupLayout
operator|->
name|addWidget
argument_list|(
name|modesGroup
argument_list|)
expr_stmt|;
name|mainGroupLayout
operator|->
name|addStretch
argument_list|()
expr_stmt|;
name|mainGroupLayout
operator|->
name|addWidget
argument_list|(
name|animateButton
argument_list|)
expr_stmt|;
name|mainGroupLayout
operator|->
name|addWidget
argument_list|(
name|whatsThisButton
argument_list|)
expr_stmt|;
name|mainGroupLayout
operator|->
name|addWidget
argument_list|(
name|showSourceButton
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_SUPPORT
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_OPENGL_ES
argument_list|)
name|mainGroupLayout
operator|->
name|addWidget
argument_list|(
name|enableOpenGLButton
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QGridLayout
modifier|*
name|modesLayout
init|=
operator|new
name|QGridLayout
argument_list|(
name|modesGroup
argument_list|)
decl_stmt|;
name|modesLayout
operator|->
name|addWidget
argument_list|(
name|rbClear
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|modesLayout
operator|->
name|addWidget
argument_list|(
name|rbSource
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|modesLayout
operator|->
name|addWidget
argument_list|(
name|rbDest
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|modesLayout
operator|->
name|addWidget
argument_list|(
name|rbSourceOver
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|modesLayout
operator|->
name|addWidget
argument_list|(
name|rbDestOver
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|modesLayout
operator|->
name|addWidget
argument_list|(
name|rbSourceIn
argument_list|,
literal|5
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|modesLayout
operator|->
name|addWidget
argument_list|(
name|rbDestIn
argument_list|,
literal|6
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|modesLayout
operator|->
name|addWidget
argument_list|(
name|rbSourceOut
argument_list|,
literal|7
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|modesLayout
operator|->
name|addWidget
argument_list|(
name|rbDestOut
argument_list|,
literal|8
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|modesLayout
operator|->
name|addWidget
argument_list|(
name|rbSourceAtop
argument_list|,
literal|9
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|modesLayout
operator|->
name|addWidget
argument_list|(
name|rbDestAtop
argument_list|,
literal|10
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|modesLayout
operator|->
name|addWidget
argument_list|(
name|rbXor
argument_list|,
literal|11
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|modesLayout
operator|->
name|addWidget
argument_list|(
name|rbPlus
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|modesLayout
operator|->
name|addWidget
argument_list|(
name|rbMultiply
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|modesLayout
operator|->
name|addWidget
argument_list|(
name|rbScreen
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|modesLayout
operator|->
name|addWidget
argument_list|(
name|rbOverlay
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|modesLayout
operator|->
name|addWidget
argument_list|(
name|rbDarken
argument_list|,
literal|4
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|modesLayout
operator|->
name|addWidget
argument_list|(
name|rbLighten
argument_list|,
literal|5
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|modesLayout
operator|->
name|addWidget
argument_list|(
name|rbColorDodge
argument_list|,
literal|6
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|modesLayout
operator|->
name|addWidget
argument_list|(
name|rbColorBurn
argument_list|,
literal|7
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|modesLayout
operator|->
name|addWidget
argument_list|(
name|rbHardLight
argument_list|,
literal|8
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|modesLayout
operator|->
name|addWidget
argument_list|(
name|rbSoftLight
argument_list|,
literal|9
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|modesLayout
operator|->
name|addWidget
argument_list|(
name|rbDifference
argument_list|,
literal|10
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|modesLayout
operator|->
name|addWidget
argument_list|(
name|rbExclusion
argument_list|,
literal|11
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVBoxLayout
modifier|*
name|circleColorLayout
init|=
operator|new
name|QVBoxLayout
argument_list|(
name|circleColorGroup
argument_list|)
decl_stmt|;
name|circleColorLayout
operator|->
name|addWidget
argument_list|(
name|circleColorSlider
argument_list|)
expr_stmt|;
name|QVBoxLayout
modifier|*
name|circleAlphaLayout
init|=
operator|new
name|QVBoxLayout
argument_list|(
name|circleAlphaGroup
argument_list|)
decl_stmt|;
name|circleAlphaLayout
operator|->
name|addWidget
argument_list|(
name|circleAlphaSlider
argument_list|)
expr_stmt|;
name|view
operator|->
name|loadDescription
argument_list|(
literal|":res/composition/composition.html"
argument_list|)
expr_stmt|;
name|view
operator|->
name|loadSourceFile
argument_list|(
literal|":res/composition/composition.cpp"
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|whatsThisButton
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|view
argument_list|,
name|SLOT
argument_list|(
name|setDescriptionEnabled
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|view
argument_list|,
name|SIGNAL
argument_list|(
name|descriptionEnabledChanged
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|whatsThisButton
argument_list|,
name|SLOT
argument_list|(
name|setChecked
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|showSourceButton
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|view
argument_list|,
name|SLOT
argument_list|(
name|showSource
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_SUPPORT
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_OPENGL_ES
argument_list|)
name|connect
argument_list|(
name|enableOpenGLButton
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|view
argument_list|,
name|SLOT
argument_list|(
name|enableOpenGL
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|connect
argument_list|(
name|animateButton
argument_list|,
name|SIGNAL
argument_list|(
name|toggled
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|view
argument_list|,
name|SLOT
argument_list|(
name|setAnimationEnabled
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|circleColorSlider
operator|->
name|setValue
argument_list|(
literal|270
argument_list|)
expr_stmt|;
name|circleAlphaSlider
operator|->
name|setValue
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|rbSourceOut
operator|->
name|animateClick
argument_list|()
expr_stmt|;
name|setWindowTitle
argument_list|(
name|tr
argument_list|(
literal|"Composition Modes"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|nextMode
name|void
name|CompositionWidget
operator|::
name|nextMode
parameter_list|()
block|{
comment|/*       if (!m_animation_enabled)       return;       if (rbClear->isChecked()) rbSource->animateClick();       if (rbSource->isChecked()) rbDest->animateClick();       if (rbDest->isChecked()) rbSourceOver->animateClick();       if (rbSourceOver->isChecked()) rbDestOver->animateClick();       if (rbDestOver->isChecked()) rbSourceIn->animateClick();       if (rbSourceIn->isChecked()) rbDestIn->animateClick();       if (rbDestIn->isChecked()) rbSourceOut->animateClick();       if (rbSourceOut->isChecked()) rbDestOut->animateClick();       if (rbDestOut->isChecked()) rbSourceAtop->animateClick();       if (rbSourceAtop->isChecked()) rbDestAtop->animateClick();       if (rbDestAtop->isChecked()) rbXor->animateClick();       if (rbXor->isChecked()) rbClear->animateClick();     */
block|}
end_function
begin_constructor
DECL|function|CompositionRenderer
name|CompositionRenderer
operator|::
name|CompositionRenderer
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|ArthurFrame
argument_list|(
name|parent
argument_list|)
block|{
name|m_animation_enabled
operator|=
literal|true
expr_stmt|;
name|m_animationTimer
operator|=
name|startTimer
argument_list|(
name|animationInterval
argument_list|)
expr_stmt|;
name|m_image
operator|=
name|QImage
argument_list|(
literal|":res/composition/flower.jpg"
argument_list|)
expr_stmt|;
name|m_image
operator|.
name|setAlphaChannel
argument_list|(
name|QImage
argument_list|(
literal|":res/composition/flower_alpha.jpg"
argument_list|)
argument_list|)
expr_stmt|;
name|m_circle_alpha
operator|=
literal|127
expr_stmt|;
name|m_circle_hue
operator|=
literal|255
expr_stmt|;
name|m_current_object
operator|=
name|NoObject
expr_stmt|;
name|m_composition_mode
operator|=
name|QPainter
operator|::
name|CompositionMode_SourceOut
expr_stmt|;
name|m_circle_pos
operator|=
name|QPoint
argument_list|(
literal|200
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Expanding
argument_list|,
name|QSizePolicy
operator|::
name|Expanding
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_SUPPORT
name|m_pbuffer
operator|=
literal|0
expr_stmt|;
name|m_pbuffer_size
operator|=
literal|1024
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_function
DECL|function|rectangle_around
name|QRectF
name|rectangle_around
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|p
parameter_list|,
specifier|const
name|QSizeF
modifier|&
name|size
init|=
name|QSize
argument_list|(
literal|250
argument_list|,
literal|200
argument_list|)
parameter_list|)
block|{
name|QRectF
name|rect
argument_list|(
name|p
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|rect
operator|.
name|translate
argument_list|(
operator|-
name|size
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|,
operator|-
name|size
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
return|return
name|rect
return|;
block|}
end_function
begin_function
DECL|function|setAnimationEnabled
name|void
name|CompositionRenderer
operator|::
name|setAnimationEnabled
parameter_list|(
name|bool
name|enabled
parameter_list|)
block|{
if|if
condition|(
name|m_animation_enabled
operator|==
name|enabled
condition|)
return|return;
name|m_animation_enabled
operator|=
name|enabled
expr_stmt|;
if|if
condition|(
name|enabled
condition|)
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|m_animationTimer
argument_list|)
expr_stmt|;
name|m_animationTimer
operator|=
name|startTimer
argument_list|(
name|animationInterval
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|killTimer
argument_list|(
name|m_animationTimer
argument_list|)
expr_stmt|;
name|m_animationTimer
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|updateCirclePos
name|void
name|CompositionRenderer
operator|::
name|updateCirclePos
parameter_list|()
block|{
if|if
condition|(
name|m_current_object
operator|!=
name|NoObject
condition|)
return|return;
name|QDateTime
name|dt
init|=
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
decl_stmt|;
name|qreal
name|t
init|=
operator|(
name|dt
operator|.
name|toTime_t
argument_list|()
operator|*
literal|1000
operator|+
name|dt
operator|.
name|time
argument_list|()
operator|.
name|msec
argument_list|()
operator|)
operator|/
literal|1000.0
decl_stmt|;
name|qreal
name|x
init|=
name|width
argument_list|()
operator|/
name|qreal
argument_list|(
literal|2
argument_list|)
operator|+
operator|(
name|qCos
argument_list|(
name|t
operator|*
literal|8
operator|/
literal|11
argument_list|)
operator|+
name|qSin
argument_list|(
operator|-
name|t
argument_list|)
operator|)
operator|*
name|width
argument_list|()
operator|/
name|qreal
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|qreal
name|y
init|=
name|height
argument_list|()
operator|/
name|qreal
argument_list|(
literal|2
argument_list|)
operator|+
operator|(
name|qSin
argument_list|(
name|t
operator|*
literal|6
operator|/
literal|7
argument_list|)
operator|+
name|qCos
argument_list|(
name|t
operator|*
name|qreal
argument_list|(
literal|1.5
argument_list|)
argument_list|)
operator|)
operator|*
name|height
argument_list|()
operator|/
name|qreal
argument_list|(
literal|4
argument_list|)
decl_stmt|;
name|setCirclePos
argument_list|(
name|QLineF
argument_list|(
name|m_circle_pos
argument_list|,
name|QPointF
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
operator|.
name|pointAt
argument_list|(
literal|0.02
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawBase
name|void
name|CompositionRenderer
operator|::
name|drawBase
parameter_list|(
name|QPainter
modifier|&
name|p
parameter_list|)
block|{
name|p
operator|.
name|setPen
argument_list|(
name|Qt
operator|::
name|NoPen
argument_list|)
expr_stmt|;
name|QLinearGradient
name|rect_gradient
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|rect_gradient
operator|.
name|setColorAt
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|rect_gradient
operator|.
name|setColorAt
argument_list|(
literal|.17
argument_list|,
name|Qt
operator|::
name|yellow
argument_list|)
expr_stmt|;
name|rect_gradient
operator|.
name|setColorAt
argument_list|(
literal|.33
argument_list|,
name|Qt
operator|::
name|green
argument_list|)
expr_stmt|;
name|rect_gradient
operator|.
name|setColorAt
argument_list|(
literal|.50
argument_list|,
name|Qt
operator|::
name|cyan
argument_list|)
expr_stmt|;
name|rect_gradient
operator|.
name|setColorAt
argument_list|(
literal|.66
argument_list|,
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
name|rect_gradient
operator|.
name|setColorAt
argument_list|(
literal|.81
argument_list|,
name|Qt
operator|::
name|magenta
argument_list|)
expr_stmt|;
name|rect_gradient
operator|.
name|setColorAt
argument_list|(
literal|1
argument_list|,
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|p
operator|.
name|setBrush
argument_list|(
name|rect_gradient
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawRect
argument_list|(
name|width
argument_list|()
operator|/
literal|2
argument_list|,
literal|0
argument_list|,
name|width
argument_list|()
operator|/
literal|2
argument_list|,
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|QLinearGradient
name|alpha_gradient
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|width
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|alpha_gradient
operator|.
name|setColorAt
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|alpha_gradient
operator|.
name|setColorAt
argument_list|(
literal|0.2
argument_list|,
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|alpha_gradient
operator|.
name|setColorAt
argument_list|(
literal|0.5
argument_list|,
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|alpha_gradient
operator|.
name|setColorAt
argument_list|(
literal|0.8
argument_list|,
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|alpha_gradient
operator|.
name|setColorAt
argument_list|(
literal|1
argument_list|,
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|p
operator|.
name|setCompositionMode
argument_list|(
name|QPainter
operator|::
name|CompositionMode_DestinationIn
argument_list|)
expr_stmt|;
name|p
operator|.
name|setBrush
argument_list|(
name|alpha_gradient
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|width
argument_list|()
argument_list|,
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|setCompositionMode
argument_list|(
name|QPainter
operator|::
name|CompositionMode_DestinationOver
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPen
argument_list|(
name|Qt
operator|::
name|NoPen
argument_list|)
expr_stmt|;
name|p
operator|.
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|SmoothPixmapTransform
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawImage
argument_list|(
name|rect
argument_list|()
argument_list|,
name|m_image
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|drawSource
name|void
name|CompositionRenderer
operator|::
name|drawSource
parameter_list|(
name|QPainter
modifier|&
name|p
parameter_list|)
block|{
name|p
operator|.
name|setPen
argument_list|(
name|Qt
operator|::
name|NoPen
argument_list|)
expr_stmt|;
name|p
operator|.
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|Antialiasing
argument_list|)
expr_stmt|;
name|p
operator|.
name|setCompositionMode
argument_list|(
name|m_composition_mode
argument_list|)
expr_stmt|;
name|QRectF
name|circle_rect
init|=
name|rectangle_around
argument_list|(
name|m_circle_pos
argument_list|)
decl_stmt|;
name|QColor
name|color
init|=
name|QColor
operator|::
name|fromHsvF
argument_list|(
name|m_circle_hue
operator|/
literal|360.0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
name|m_circle_alpha
operator|/
literal|255.0
argument_list|)
decl_stmt|;
name|QLinearGradient
name|circle_gradient
argument_list|(
name|circle_rect
operator|.
name|topLeft
argument_list|()
argument_list|,
name|circle_rect
operator|.
name|bottomRight
argument_list|()
argument_list|)
decl_stmt|;
name|circle_gradient
operator|.
name|setColorAt
argument_list|(
literal|0
argument_list|,
name|color
operator|.
name|light
argument_list|()
argument_list|)
expr_stmt|;
name|circle_gradient
operator|.
name|setColorAt
argument_list|(
literal|0.5
argument_list|,
name|color
argument_list|)
expr_stmt|;
name|circle_gradient
operator|.
name|setColorAt
argument_list|(
literal|1
argument_list|,
name|color
operator|.
name|dark
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|setBrush
argument_list|(
name|circle_gradient
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawEllipse
argument_list|(
name|circle_rect
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|paint
name|void
name|CompositionRenderer
operator|::
name|paint
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_SUPPORT
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_OPENGL_ES
argument_list|)
if|if
condition|(
name|usesOpenGL
argument_list|()
condition|)
block|{
name|int
name|new_pbuf_size
init|=
name|m_pbuffer_size
decl_stmt|;
if|if
condition|(
name|size
argument_list|()
operator|.
name|width
argument_list|()
operator|>
name|m_pbuffer_size
operator|||
name|size
argument_list|()
operator|.
name|height
argument_list|()
operator|>
name|m_pbuffer_size
condition|)
name|new_pbuf_size
operator|*=
literal|2
expr_stmt|;
if|if
condition|(
name|size
argument_list|()
operator|.
name|width
argument_list|()
operator|<
name|m_pbuffer_size
operator|/
literal|2
operator|&&
name|size
argument_list|()
operator|.
name|height
argument_list|()
operator|<
name|m_pbuffer_size
operator|/
literal|2
condition|)
name|new_pbuf_size
operator|/=
literal|2
expr_stmt|;
if|if
condition|(
operator|!
name|m_pbuffer
operator|||
name|new_pbuf_size
operator|!=
name|m_pbuffer_size
condition|)
block|{
if|if
condition|(
name|m_pbuffer
condition|)
block|{
name|m_pbuffer
operator|->
name|deleteTexture
argument_list|(
name|m_base_tex
argument_list|)
expr_stmt|;
name|m_pbuffer
operator|->
name|deleteTexture
argument_list|(
name|m_compositing_tex
argument_list|)
expr_stmt|;
operator|delete
name|m_pbuffer
expr_stmt|;
block|}
name|m_pbuffer
operator|=
operator|new
name|QGLPixelBuffer
argument_list|(
name|QSize
argument_list|(
name|new_pbuf_size
argument_list|,
name|new_pbuf_size
argument_list|)
argument_list|,
name|QGLFormat
operator|::
name|defaultFormat
argument_list|()
argument_list|,
name|glWidget
argument_list|()
argument_list|)
expr_stmt|;
name|m_pbuffer
operator|->
name|makeCurrent
argument_list|()
expr_stmt|;
name|m_base_tex
operator|=
name|m_pbuffer
operator|->
name|generateDynamicTexture
argument_list|()
expr_stmt|;
name|m_compositing_tex
operator|=
name|m_pbuffer
operator|->
name|generateDynamicTexture
argument_list|()
expr_stmt|;
name|m_pbuffer_size
operator|=
name|new_pbuf_size
expr_stmt|;
block|}
if|if
condition|(
name|size
argument_list|()
operator|!=
name|m_previous_size
condition|)
block|{
name|m_previous_size
operator|=
name|size
argument_list|()
expr_stmt|;
name|QPainter
name|p
argument_list|(
name|m_pbuffer
argument_list|)
decl_stmt|;
name|p
operator|.
name|setCompositionMode
argument_list|(
name|QPainter
operator|::
name|CompositionMode_Source
argument_list|)
expr_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|m_pbuffer
operator|->
name|width
argument_list|()
argument_list|,
name|m_pbuffer
operator|->
name|height
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|drawBase
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
name|m_pbuffer
operator|->
name|updateDynamicTexture
argument_list|(
name|m_base_tex
argument_list|)
expr_stmt|;
block|}
name|qreal
name|x_fraction
init|=
name|width
argument_list|()
operator|/
name|float
argument_list|(
name|m_pbuffer
operator|->
name|width
argument_list|()
argument_list|)
decl_stmt|;
name|qreal
name|y_fraction
init|=
name|height
argument_list|()
operator|/
name|float
argument_list|(
name|m_pbuffer
operator|->
name|height
argument_list|()
argument_list|)
decl_stmt|;
block|{
name|QPainter
name|p
argument_list|(
name|m_pbuffer
argument_list|)
decl_stmt|;
name|p
operator|.
name|setCompositionMode
argument_list|(
name|QPainter
operator|::
name|CompositionMode_Source
argument_list|)
expr_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|m_pbuffer
operator|->
name|width
argument_list|()
argument_list|,
name|m_pbuffer
operator|->
name|height
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|p
operator|.
name|save
argument_list|()
expr_stmt|;
comment|// Needed when using the GL1 engine
name|p
operator|.
name|beginNativePainting
argument_list|()
expr_stmt|;
comment|// Needed when using the GL2 engine
name|glBindTexture
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|m_base_tex
argument_list|)
expr_stmt|;
name|glEnable
argument_list|(
name|GL_TEXTURE_2D
argument_list|)
expr_stmt|;
name|glColor4f
argument_list|(
literal|1.
argument_list|,
literal|1.
argument_list|,
literal|1.
argument_list|,
literal|1.
argument_list|)
expr_stmt|;
name|glBegin
argument_list|(
name|GL_QUADS
argument_list|)
expr_stmt|;
block|{
name|glTexCoord2f
argument_list|(
literal|0
argument_list|,
literal|1.0
argument_list|)
expr_stmt|;
name|glVertex2f
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|glTexCoord2f
argument_list|(
name|x_fraction
argument_list|,
literal|1.0
argument_list|)
expr_stmt|;
name|glVertex2f
argument_list|(
name|width
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|glTexCoord2f
argument_list|(
name|x_fraction
argument_list|,
literal|1.0
operator|-
name|y_fraction
argument_list|)
expr_stmt|;
name|glVertex2f
argument_list|(
name|width
argument_list|()
argument_list|,
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|glTexCoord2f
argument_list|(
literal|0
argument_list|,
literal|1.0
operator|-
name|y_fraction
argument_list|)
expr_stmt|;
name|glVertex2f
argument_list|(
literal|0
argument_list|,
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|glEnd
argument_list|()
expr_stmt|;
name|glDisable
argument_list|(
name|GL_TEXTURE_2D
argument_list|)
expr_stmt|;
name|p
operator|.
name|endNativePainting
argument_list|()
expr_stmt|;
comment|// Needed when using the GL2 engine
name|p
operator|.
name|restore
argument_list|()
expr_stmt|;
comment|// Needed when using the GL1 engine
name|drawSource
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
name|m_pbuffer
operator|->
name|updateDynamicTexture
argument_list|(
name|m_compositing_tex
argument_list|)
expr_stmt|;
block|}
name|painter
operator|->
name|beginNativePainting
argument_list|()
expr_stmt|;
comment|// Needed when using the GL2 engine
name|glWidget
argument_list|()
operator|->
name|makeCurrent
argument_list|()
expr_stmt|;
comment|// Needed when using the GL1 engine
name|glBindTexture
argument_list|(
name|GL_TEXTURE_2D
argument_list|,
name|m_compositing_tex
argument_list|)
expr_stmt|;
name|glEnable
argument_list|(
name|GL_TEXTURE_2D
argument_list|)
expr_stmt|;
name|glEnable
argument_list|(
name|GL_BLEND
argument_list|)
expr_stmt|;
name|glBlendFunc
argument_list|(
name|GL_ONE
argument_list|,
name|GL_ONE_MINUS_SRC_ALPHA
argument_list|)
expr_stmt|;
name|glColor4f
argument_list|(
literal|1.
argument_list|,
literal|1.
argument_list|,
literal|1.
argument_list|,
literal|1.
argument_list|)
expr_stmt|;
name|glBegin
argument_list|(
name|GL_QUADS
argument_list|)
expr_stmt|;
block|{
name|glTexCoord2f
argument_list|(
literal|0
argument_list|,
literal|1.0
argument_list|)
expr_stmt|;
name|glVertex2f
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|glTexCoord2f
argument_list|(
name|x_fraction
argument_list|,
literal|1.0
argument_list|)
expr_stmt|;
name|glVertex2f
argument_list|(
name|width
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|glTexCoord2f
argument_list|(
name|x_fraction
argument_list|,
literal|1.0
operator|-
name|y_fraction
argument_list|)
expr_stmt|;
name|glVertex2f
argument_list|(
name|width
argument_list|()
argument_list|,
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|glTexCoord2f
argument_list|(
literal|0
argument_list|,
literal|1.0
operator|-
name|y_fraction
argument_list|)
expr_stmt|;
name|glVertex2f
argument_list|(
literal|0
argument_list|,
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|glEnd
argument_list|()
expr_stmt|;
name|glDisable
argument_list|(
name|GL_TEXTURE_2D
argument_list|)
expr_stmt|;
name|painter
operator|->
name|endNativePainting
argument_list|()
expr_stmt|;
comment|// Needed when using the GL2 engine
block|}
else|else
endif|#
directive|endif
block|{
comment|// using a QImage
if|if
condition|(
name|m_buffer
operator|.
name|size
argument_list|()
operator|!=
name|size
argument_list|()
condition|)
block|{
name|m_buffer
operator|=
name|QImage
argument_list|(
name|size
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
expr_stmt|;
name|m_base_buffer
operator|=
name|QImage
argument_list|(
name|size
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
expr_stmt|;
name|m_base_buffer
operator|.
name|fill
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QPainter
name|p
argument_list|(
operator|&
name|m_base_buffer
argument_list|)
decl_stmt|;
name|drawBase
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|memcpy
argument_list|(
name|m_buffer
operator|.
name|bits
argument_list|()
argument_list|,
name|m_base_buffer
operator|.
name|bits
argument_list|()
argument_list|,
name|m_buffer
operator|.
name|byteCount
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|QPainter
name|p
argument_list|(
operator|&
name|m_buffer
argument_list|)
decl_stmt|;
name|drawSource
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|painter
operator|->
name|drawImage
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|m_buffer
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|mousePressEvent
name|void
name|CompositionRenderer
operator|::
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
name|setDescriptionEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QRectF
name|circle
init|=
name|rectangle_around
argument_list|(
name|m_circle_pos
argument_list|)
decl_stmt|;
if|if
condition|(
name|circle
operator|.
name|contains
argument_list|(
name|e
operator|->
name|pos
argument_list|()
argument_list|)
condition|)
block|{
name|m_current_object
operator|=
name|Circle
expr_stmt|;
name|m_offset
operator|=
name|circle
operator|.
name|center
argument_list|()
operator|-
name|e
operator|->
name|pos
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|m_current_object
operator|=
name|NoObject
expr_stmt|;
block|}
if|if
condition|(
name|m_animation_enabled
condition|)
block|{
name|killTimer
argument_list|(
name|m_animationTimer
argument_list|)
expr_stmt|;
name|m_animationTimer
operator|=
literal|0
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|mouseMoveEvent
name|void
name|CompositionRenderer
operator|::
name|mouseMoveEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
name|m_current_object
operator|==
name|Circle
condition|)
name|setCirclePos
argument_list|(
name|e
operator|->
name|pos
argument_list|()
operator|+
name|m_offset
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mouseReleaseEvent
name|void
name|CompositionRenderer
operator|::
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
parameter_list|)
block|{
name|m_current_object
operator|=
name|NoObject
expr_stmt|;
if|if
condition|(
name|m_animation_enabled
condition|)
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|m_animationTimer
argument_list|)
expr_stmt|;
name|m_animationTimer
operator|=
name|startTimer
argument_list|(
name|animationInterval
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|timerEvent
name|void
name|CompositionRenderer
operator|::
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|timerId
argument_list|()
operator|==
name|m_animationTimer
condition|)
name|updateCirclePos
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setCirclePos
name|void
name|CompositionRenderer
operator|::
name|setCirclePos
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|pos
parameter_list|)
block|{
specifier|const
name|QRect
name|oldRect
init|=
name|rectangle_around
argument_list|(
name|m_circle_pos
argument_list|)
operator|.
name|toAlignedRect
argument_list|()
decl_stmt|;
name|m_circle_pos
operator|=
name|pos
expr_stmt|;
specifier|const
name|QRect
name|newRect
init|=
name|rectangle_around
argument_list|(
name|m_circle_pos
argument_list|)
operator|.
name|toAlignedRect
argument_list|()
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_SUPPORT
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_OPENGL_ES
argument_list|)
if|if
condition|(
name|usesOpenGL
argument_list|()
condition|)
name|update
argument_list|()
expr_stmt|;
else|else
endif|#
directive|endif
name|update
argument_list|(
name|oldRect
operator||
name|newRect
argument_list|)
expr_stmt|;
block|}
end_function
end_unit
