begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor **     the names of its contributors may be used to endorse or promote **     products derived from this software without specific prior written **     permission. ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtGui>
end_include
begin_include
include|#
directive|include
file|"renderarea.h"
end_include
begin_comment
comment|//! [0]
end_comment
begin_constructor
DECL|function|RenderArea
name|RenderArea
operator|::
name|RenderArea
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
block|{
name|shape
operator|=
name|Polygon
expr_stmt|;
name|antialiased
operator|=
literal|false
expr_stmt|;
name|transformed
operator|=
literal|false
expr_stmt|;
name|pixmap
operator|.
name|load
argument_list|(
literal|":/images/qt-logo.png"
argument_list|)
expr_stmt|;
name|setBackgroundRole
argument_list|(
name|QPalette
operator|::
name|Base
argument_list|)
expr_stmt|;
name|setAutoFillBackground
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|//! [0]
end_comment
begin_comment
comment|//! [1]
end_comment
begin_function
DECL|function|minimumSizeHint
name|QSize
name|RenderArea
operator|::
name|minimumSizeHint
parameter_list|()
specifier|const
block|{
return|return
name|QSize
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
return|;
block|}
end_function
begin_comment
comment|//! [1]
end_comment
begin_comment
comment|//! [2]
end_comment
begin_function
DECL|function|sizeHint
name|QSize
name|RenderArea
operator|::
name|sizeHint
parameter_list|()
specifier|const
block|{
return|return
name|QSize
argument_list|(
literal|400
argument_list|,
literal|200
argument_list|)
return|;
block|}
end_function
begin_comment
comment|//! [2]
end_comment
begin_comment
comment|//! [3]
end_comment
begin_function
DECL|function|setShape
name|void
name|RenderArea
operator|::
name|setShape
parameter_list|(
name|Shape
name|shape
parameter_list|)
block|{
name|this
operator|->
name|shape
operator|=
name|shape
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [3]
end_comment
begin_comment
comment|//! [4]
end_comment
begin_function
DECL|function|setPen
name|void
name|RenderArea
operator|::
name|setPen
parameter_list|(
specifier|const
name|QPen
modifier|&
name|pen
parameter_list|)
block|{
name|this
operator|->
name|pen
operator|=
name|pen
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [4]
end_comment
begin_comment
comment|//! [5]
end_comment
begin_function
DECL|function|setBrush
name|void
name|RenderArea
operator|::
name|setBrush
parameter_list|(
specifier|const
name|QBrush
modifier|&
name|brush
parameter_list|)
block|{
name|this
operator|->
name|brush
operator|=
name|brush
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [5]
end_comment
begin_comment
comment|//! [6]
end_comment
begin_function
DECL|function|setAntialiased
name|void
name|RenderArea
operator|::
name|setAntialiased
parameter_list|(
name|bool
name|antialiased
parameter_list|)
block|{
name|this
operator|->
name|antialiased
operator|=
name|antialiased
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [6]
end_comment
begin_comment
comment|//! [7]
end_comment
begin_function
DECL|function|setTransformed
name|void
name|RenderArea
operator|::
name|setTransformed
parameter_list|(
name|bool
name|transformed
parameter_list|)
block|{
name|this
operator|->
name|transformed
operator|=
name|transformed
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [7]
end_comment
begin_comment
comment|//! [8]
end_comment
begin_function
DECL|function|paintEvent
name|void
name|RenderArea
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
comment|/* event */
parameter_list|)
block|{
specifier|static
specifier|const
name|QPoint
name|points
index|[
literal|4
index|]
init|=
block|{
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|80
argument_list|)
block|,
name|QPoint
argument_list|(
literal|20
argument_list|,
literal|10
argument_list|)
block|,
name|QPoint
argument_list|(
literal|80
argument_list|,
literal|30
argument_list|)
block|,
name|QPoint
argument_list|(
literal|90
argument_list|,
literal|70
argument_list|)
block|}
decl_stmt|;
name|QRect
name|rect
argument_list|(
literal|10
argument_list|,
literal|20
argument_list|,
literal|80
argument_list|,
literal|60
argument_list|)
decl_stmt|;
name|QPainterPath
name|path
decl_stmt|;
name|path
operator|.
name|moveTo
argument_list|(
literal|20
argument_list|,
literal|80
argument_list|)
expr_stmt|;
name|path
operator|.
name|lineTo
argument_list|(
literal|20
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|path
operator|.
name|cubicTo
argument_list|(
literal|80
argument_list|,
literal|0
argument_list|,
literal|50
argument_list|,
literal|50
argument_list|,
literal|80
argument_list|,
literal|80
argument_list|)
expr_stmt|;
name|int
name|startAngle
init|=
literal|20
operator|*
literal|16
decl_stmt|;
name|int
name|arcLength
init|=
literal|120
operator|*
literal|16
decl_stmt|;
comment|//! [8]
comment|//! [9]
name|QPainter
name|painter
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|painter
operator|.
name|setPen
argument_list|(
name|pen
argument_list|)
expr_stmt|;
name|painter
operator|.
name|setBrush
argument_list|(
name|brush
argument_list|)
expr_stmt|;
if|if
condition|(
name|antialiased
condition|)
name|painter
operator|.
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|Antialiasing
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//! [9]
comment|//! [10]
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|width
argument_list|()
condition|;
name|x
operator|+=
literal|100
control|)
block|{
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|height
argument_list|()
condition|;
name|y
operator|+=
literal|100
control|)
block|{
name|painter
operator|.
name|save
argument_list|()
expr_stmt|;
name|painter
operator|.
name|translate
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
comment|//! [10] //! [11]
if|if
condition|(
name|transformed
condition|)
block|{
name|painter
operator|.
name|translate
argument_list|(
literal|50
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|painter
operator|.
name|rotate
argument_list|(
literal|60.0
argument_list|)
expr_stmt|;
name|painter
operator|.
name|scale
argument_list|(
literal|0.6
argument_list|,
literal|0.9
argument_list|)
expr_stmt|;
name|painter
operator|.
name|translate
argument_list|(
operator|-
literal|50
argument_list|,
operator|-
literal|50
argument_list|)
expr_stmt|;
block|}
comment|//! [11]
comment|//! [12]
switch|switch
condition|(
name|shape
condition|)
block|{
case|case
name|Line
case|:
name|painter
operator|.
name|drawLine
argument_list|(
name|rect
operator|.
name|bottomLeft
argument_list|()
argument_list|,
name|rect
operator|.
name|topRight
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|Points
case|:
name|painter
operator|.
name|drawPoints
argument_list|(
name|points
argument_list|,
literal|4
argument_list|)
expr_stmt|;
break|break;
case|case
name|Polyline
case|:
name|painter
operator|.
name|drawPolyline
argument_list|(
name|points
argument_list|,
literal|4
argument_list|)
expr_stmt|;
break|break;
case|case
name|Polygon
case|:
name|painter
operator|.
name|drawPolygon
argument_list|(
name|points
argument_list|,
literal|4
argument_list|)
expr_stmt|;
break|break;
case|case
name|Rect
case|:
name|painter
operator|.
name|drawRect
argument_list|(
name|rect
argument_list|)
expr_stmt|;
break|break;
case|case
name|RoundedRect
case|:
name|painter
operator|.
name|drawRoundedRect
argument_list|(
name|rect
argument_list|,
literal|25
argument_list|,
literal|25
argument_list|,
name|Qt
operator|::
name|RelativeSize
argument_list|)
expr_stmt|;
break|break;
case|case
name|Ellipse
case|:
name|painter
operator|.
name|drawEllipse
argument_list|(
name|rect
argument_list|)
expr_stmt|;
break|break;
case|case
name|Arc
case|:
name|painter
operator|.
name|drawArc
argument_list|(
name|rect
argument_list|,
name|startAngle
argument_list|,
name|arcLength
argument_list|)
expr_stmt|;
break|break;
case|case
name|Chord
case|:
name|painter
operator|.
name|drawChord
argument_list|(
name|rect
argument_list|,
name|startAngle
argument_list|,
name|arcLength
argument_list|)
expr_stmt|;
break|break;
case|case
name|Pie
case|:
name|painter
operator|.
name|drawPie
argument_list|(
name|rect
argument_list|,
name|startAngle
argument_list|,
name|arcLength
argument_list|)
expr_stmt|;
break|break;
case|case
name|Path
case|:
name|painter
operator|.
name|drawPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
break|break;
case|case
name|Text
case|:
name|painter
operator|.
name|drawText
argument_list|(
name|rect
argument_list|,
name|Qt
operator|::
name|AlignCenter
argument_list|,
name|tr
argument_list|(
literal|"Qt by\nNokia"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Pixmap
case|:
name|painter
operator|.
name|drawPixmap
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
name|pixmap
argument_list|)
expr_stmt|;
block|}
comment|//! [12] //! [13]
name|painter
operator|.
name|restore
argument_list|()
expr_stmt|;
block|}
block|}
name|painter
operator|.
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|Antialiasing
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|painter
operator|.
name|setPen
argument_list|(
name|palette
argument_list|()
operator|.
name|dark
argument_list|()
operator|.
name|color
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|.
name|setBrush
argument_list|(
name|Qt
operator|::
name|NoBrush
argument_list|)
expr_stmt|;
name|painter
operator|.
name|drawRect
argument_list|(
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|width
argument_list|()
operator|-
literal|1
argument_list|,
name|height
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [13]
end_comment
end_unit
