begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the demonstration applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"pathdeform.h"
end_include
begin_include
include|#
directive|include
file|<QApplication>
end_include
begin_include
include|#
directive|include
file|<QtDebug>
end_include
begin_include
include|#
directive|include
file|<QMouseEvent>
end_include
begin_include
include|#
directive|include
file|<QTimerEvent>
end_include
begin_include
include|#
directive|include
file|<QLayout>
end_include
begin_include
include|#
directive|include
file|<QLineEdit>
end_include
begin_include
include|#
directive|include
file|<QPainter>
end_include
begin_include
include|#
directive|include
file|<QSlider>
end_include
begin_include
include|#
directive|include
file|<QLabel>
end_include
begin_include
include|#
directive|include
file|<QDesktopWidget>
end_include
begin_include
include|#
directive|include
file|<qmath.h>
end_include
begin_constructor
DECL|function|PathDeformControls
name|PathDeformControls
operator|::
name|PathDeformControls
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
name|PathDeformRenderer
modifier|*
name|renderer
parameter_list|,
name|bool
name|smallScreen
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
block|{
name|m_renderer
operator|=
name|renderer
expr_stmt|;
if|if
condition|(
name|smallScreen
condition|)
name|layoutForSmallScreen
argument_list|()
expr_stmt|;
else|else
name|layoutForDesktop
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|layoutForDesktop
name|void
name|PathDeformControls
operator|::
name|layoutForDesktop
parameter_list|()
block|{
name|QGroupBox
modifier|*
name|mainGroup
init|=
operator|new
name|QGroupBox
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|mainGroup
operator|->
name|setTitle
argument_list|(
name|tr
argument_list|(
literal|"Controls"
argument_list|)
argument_list|)
expr_stmt|;
name|QGroupBox
modifier|*
name|radiusGroup
init|=
operator|new
name|QGroupBox
argument_list|(
name|mainGroup
argument_list|)
decl_stmt|;
name|radiusGroup
operator|->
name|setTitle
argument_list|(
name|tr
argument_list|(
literal|"Lens Radius"
argument_list|)
argument_list|)
expr_stmt|;
name|QSlider
modifier|*
name|radiusSlider
init|=
operator|new
name|QSlider
argument_list|(
name|Qt
operator|::
name|Horizontal
argument_list|,
name|radiusGroup
argument_list|)
decl_stmt|;
name|radiusSlider
operator|->
name|setRange
argument_list|(
literal|15
argument_list|,
literal|150
argument_list|)
expr_stmt|;
name|radiusSlider
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Preferred
argument_list|,
name|QSizePolicy
operator|::
name|Fixed
argument_list|)
expr_stmt|;
name|QGroupBox
modifier|*
name|deformGroup
init|=
operator|new
name|QGroupBox
argument_list|(
name|mainGroup
argument_list|)
decl_stmt|;
name|deformGroup
operator|->
name|setTitle
argument_list|(
name|tr
argument_list|(
literal|"Deformation"
argument_list|)
argument_list|)
expr_stmt|;
name|QSlider
modifier|*
name|deformSlider
init|=
operator|new
name|QSlider
argument_list|(
name|Qt
operator|::
name|Horizontal
argument_list|,
name|deformGroup
argument_list|)
decl_stmt|;
name|deformSlider
operator|->
name|setRange
argument_list|(
operator|-
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|deformSlider
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Preferred
argument_list|,
name|QSizePolicy
operator|::
name|Fixed
argument_list|)
expr_stmt|;
name|QGroupBox
modifier|*
name|fontSizeGroup
init|=
operator|new
name|QGroupBox
argument_list|(
name|mainGroup
argument_list|)
decl_stmt|;
name|fontSizeGroup
operator|->
name|setTitle
argument_list|(
name|tr
argument_list|(
literal|"Font Size"
argument_list|)
argument_list|)
expr_stmt|;
name|QSlider
modifier|*
name|fontSizeSlider
init|=
operator|new
name|QSlider
argument_list|(
name|Qt
operator|::
name|Horizontal
argument_list|,
name|fontSizeGroup
argument_list|)
decl_stmt|;
name|fontSizeSlider
operator|->
name|setRange
argument_list|(
literal|16
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|fontSizeSlider
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Preferred
argument_list|,
name|QSizePolicy
operator|::
name|Fixed
argument_list|)
expr_stmt|;
name|QGroupBox
modifier|*
name|textGroup
init|=
operator|new
name|QGroupBox
argument_list|(
name|mainGroup
argument_list|)
decl_stmt|;
name|textGroup
operator|->
name|setTitle
argument_list|(
name|tr
argument_list|(
literal|"Text"
argument_list|)
argument_list|)
expr_stmt|;
name|QLineEdit
modifier|*
name|textInput
init|=
operator|new
name|QLineEdit
argument_list|(
name|textGroup
argument_list|)
decl_stmt|;
name|QPushButton
modifier|*
name|animateButton
init|=
operator|new
name|QPushButton
argument_list|(
name|mainGroup
argument_list|)
decl_stmt|;
name|animateButton
operator|->
name|setText
argument_list|(
name|tr
argument_list|(
literal|"Animated"
argument_list|)
argument_list|)
expr_stmt|;
name|animateButton
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QPushButton
modifier|*
name|showSourceButton
init|=
operator|new
name|QPushButton
argument_list|(
name|mainGroup
argument_list|)
decl_stmt|;
name|showSourceButton
operator|->
name|setText
argument_list|(
name|tr
argument_list|(
literal|"Show Source"
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_SUPPORT
name|QPushButton
modifier|*
name|enableOpenGLButton
init|=
operator|new
name|QPushButton
argument_list|(
name|mainGroup
argument_list|)
decl_stmt|;
name|enableOpenGLButton
operator|->
name|setText
argument_list|(
name|tr
argument_list|(
literal|"Use OpenGL"
argument_list|)
argument_list|)
expr_stmt|;
name|enableOpenGLButton
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|enableOpenGLButton
operator|->
name|setChecked
argument_list|(
name|m_renderer
operator|->
name|usesOpenGL
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|QGLFormat
operator|::
name|hasOpenGL
argument_list|()
condition|)
name|enableOpenGLButton
operator|->
name|hide
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|QPushButton
modifier|*
name|whatsThisButton
init|=
operator|new
name|QPushButton
argument_list|(
name|mainGroup
argument_list|)
decl_stmt|;
name|whatsThisButton
operator|->
name|setText
argument_list|(
name|tr
argument_list|(
literal|"What's This?"
argument_list|)
argument_list|)
expr_stmt|;
name|whatsThisButton
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|mainGroup
operator|->
name|setFixedWidth
argument_list|(
literal|180
argument_list|)
expr_stmt|;
name|QVBoxLayout
modifier|*
name|mainGroupLayout
init|=
operator|new
name|QVBoxLayout
argument_list|(
name|mainGroup
argument_list|)
decl_stmt|;
name|mainGroupLayout
operator|->
name|addWidget
argument_list|(
name|radiusGroup
argument_list|)
expr_stmt|;
name|mainGroupLayout
operator|->
name|addWidget
argument_list|(
name|deformGroup
argument_list|)
expr_stmt|;
name|mainGroupLayout
operator|->
name|addWidget
argument_list|(
name|fontSizeGroup
argument_list|)
expr_stmt|;
name|mainGroupLayout
operator|->
name|addWidget
argument_list|(
name|textGroup
argument_list|)
expr_stmt|;
name|mainGroupLayout
operator|->
name|addWidget
argument_list|(
name|animateButton
argument_list|)
expr_stmt|;
name|mainGroupLayout
operator|->
name|addStretch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_SUPPORT
name|mainGroupLayout
operator|->
name|addWidget
argument_list|(
name|enableOpenGLButton
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|mainGroupLayout
operator|->
name|addWidget
argument_list|(
name|showSourceButton
argument_list|)
expr_stmt|;
name|mainGroupLayout
operator|->
name|addWidget
argument_list|(
name|whatsThisButton
argument_list|)
expr_stmt|;
name|QVBoxLayout
modifier|*
name|radiusGroupLayout
init|=
operator|new
name|QVBoxLayout
argument_list|(
name|radiusGroup
argument_list|)
decl_stmt|;
name|radiusGroupLayout
operator|->
name|addWidget
argument_list|(
name|radiusSlider
argument_list|)
expr_stmt|;
name|QVBoxLayout
modifier|*
name|deformGroupLayout
init|=
operator|new
name|QVBoxLayout
argument_list|(
name|deformGroup
argument_list|)
decl_stmt|;
name|deformGroupLayout
operator|->
name|addWidget
argument_list|(
name|deformSlider
argument_list|)
expr_stmt|;
name|QVBoxLayout
modifier|*
name|fontSizeGroupLayout
init|=
operator|new
name|QVBoxLayout
argument_list|(
name|fontSizeGroup
argument_list|)
decl_stmt|;
name|fontSizeGroupLayout
operator|->
name|addWidget
argument_list|(
name|fontSizeSlider
argument_list|)
expr_stmt|;
name|QVBoxLayout
modifier|*
name|textGroupLayout
init|=
operator|new
name|QVBoxLayout
argument_list|(
name|textGroup
argument_list|)
decl_stmt|;
name|textGroupLayout
operator|->
name|addWidget
argument_list|(
name|textInput
argument_list|)
expr_stmt|;
name|QVBoxLayout
modifier|*
name|mainLayout
init|=
operator|new
name|QVBoxLayout
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|mainLayout
operator|->
name|addWidget
argument_list|(
name|mainGroup
argument_list|)
expr_stmt|;
name|mainLayout
operator|->
name|setMargin
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|radiusSlider
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|m_renderer
argument_list|,
name|SLOT
argument_list|(
name|setRadius
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|deformSlider
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|m_renderer
argument_list|,
name|SLOT
argument_list|(
name|setIntensity
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|fontSizeSlider
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|m_renderer
argument_list|,
name|SLOT
argument_list|(
name|setFontSize
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|animateButton
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|m_renderer
argument_list|,
name|SLOT
argument_list|(
name|setAnimated
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_SUPPORT
name|connect
argument_list|(
name|enableOpenGLButton
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|m_renderer
argument_list|,
name|SLOT
argument_list|(
name|enableOpenGL
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|connect
argument_list|(
name|textInput
argument_list|,
name|SIGNAL
argument_list|(
name|textChanged
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|m_renderer
argument_list|,
name|SLOT
argument_list|(
name|setText
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_renderer
argument_list|,
name|SIGNAL
argument_list|(
name|descriptionEnabledChanged
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|whatsThisButton
argument_list|,
name|SLOT
argument_list|(
name|setChecked
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|whatsThisButton
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|m_renderer
argument_list|,
name|SLOT
argument_list|(
name|setDescriptionEnabled
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|showSourceButton
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|m_renderer
argument_list|,
name|SLOT
argument_list|(
name|showSource
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|animateButton
operator|->
name|animateClick
argument_list|()
expr_stmt|;
name|deformSlider
operator|->
name|setValue
argument_list|(
literal|80
argument_list|)
expr_stmt|;
name|fontSizeSlider
operator|->
name|setValue
argument_list|(
literal|120
argument_list|)
expr_stmt|;
name|radiusSlider
operator|->
name|setValue
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|textInput
operator|->
name|setText
argument_list|(
name|tr
argument_list|(
literal|"Qt"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|layoutForSmallScreen
name|void
name|PathDeformControls
operator|::
name|layoutForSmallScreen
parameter_list|()
block|{
name|QGroupBox
modifier|*
name|mainGroup
init|=
operator|new
name|QGroupBox
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|mainGroup
operator|->
name|setTitle
argument_list|(
name|tr
argument_list|(
literal|"Controls"
argument_list|)
argument_list|)
expr_stmt|;
name|QLabel
modifier|*
name|radiusLabel
init|=
operator|new
name|QLabel
argument_list|(
name|mainGroup
argument_list|)
decl_stmt|;
name|radiusLabel
operator|->
name|setText
argument_list|(
name|tr
argument_list|(
literal|"Lens Radius:"
argument_list|)
argument_list|)
expr_stmt|;
name|QSlider
modifier|*
name|radiusSlider
init|=
operator|new
name|QSlider
argument_list|(
name|Qt
operator|::
name|Horizontal
argument_list|,
name|mainGroup
argument_list|)
decl_stmt|;
name|radiusSlider
operator|->
name|setRange
argument_list|(
literal|15
argument_list|,
literal|150
argument_list|)
expr_stmt|;
name|radiusSlider
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Expanding
argument_list|,
name|QSizePolicy
operator|::
name|Fixed
argument_list|)
expr_stmt|;
name|QLabel
modifier|*
name|deformLabel
init|=
operator|new
name|QLabel
argument_list|(
name|mainGroup
argument_list|)
decl_stmt|;
name|deformLabel
operator|->
name|setText
argument_list|(
name|tr
argument_list|(
literal|"Deformation:"
argument_list|)
argument_list|)
expr_stmt|;
name|QSlider
modifier|*
name|deformSlider
init|=
operator|new
name|QSlider
argument_list|(
name|Qt
operator|::
name|Horizontal
argument_list|,
name|mainGroup
argument_list|)
decl_stmt|;
name|deformSlider
operator|->
name|setRange
argument_list|(
operator|-
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|deformSlider
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Expanding
argument_list|,
name|QSizePolicy
operator|::
name|Fixed
argument_list|)
expr_stmt|;
name|QLabel
modifier|*
name|fontSizeLabel
init|=
operator|new
name|QLabel
argument_list|(
name|mainGroup
argument_list|)
decl_stmt|;
name|fontSizeLabel
operator|->
name|setText
argument_list|(
name|tr
argument_list|(
literal|"Font Size:"
argument_list|)
argument_list|)
expr_stmt|;
name|QSlider
modifier|*
name|fontSizeSlider
init|=
operator|new
name|QSlider
argument_list|(
name|Qt
operator|::
name|Horizontal
argument_list|,
name|mainGroup
argument_list|)
decl_stmt|;
name|fontSizeSlider
operator|->
name|setRange
argument_list|(
literal|16
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|fontSizeSlider
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Expanding
argument_list|,
name|QSizePolicy
operator|::
name|Fixed
argument_list|)
expr_stmt|;
name|QPushButton
modifier|*
name|animateButton
init|=
operator|new
name|QPushButton
argument_list|(
name|tr
argument_list|(
literal|"Animated"
argument_list|)
argument_list|,
name|mainGroup
argument_list|)
decl_stmt|;
name|animateButton
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_SUPPORT
name|QPushButton
modifier|*
name|enableOpenGLButton
init|=
operator|new
name|QPushButton
argument_list|(
name|mainGroup
argument_list|)
decl_stmt|;
name|enableOpenGLButton
operator|->
name|setText
argument_list|(
name|tr
argument_list|(
literal|"Use OpenGL"
argument_list|)
argument_list|)
expr_stmt|;
name|enableOpenGLButton
operator|->
name|setCheckable
argument_list|(
name|mainGroup
argument_list|)
expr_stmt|;
name|enableOpenGLButton
operator|->
name|setChecked
argument_list|(
name|m_renderer
operator|->
name|usesOpenGL
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|QGLFormat
operator|::
name|hasOpenGL
argument_list|()
condition|)
name|enableOpenGLButton
operator|->
name|hide
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|QPushButton
modifier|*
name|quitButton
init|=
operator|new
name|QPushButton
argument_list|(
name|tr
argument_list|(
literal|"Quit"
argument_list|)
argument_list|,
name|mainGroup
argument_list|)
decl_stmt|;
name|QPushButton
modifier|*
name|okButton
init|=
operator|new
name|QPushButton
argument_list|(
name|tr
argument_list|(
literal|"OK"
argument_list|)
argument_list|,
name|mainGroup
argument_list|)
decl_stmt|;
name|QGridLayout
modifier|*
name|mainGroupLayout
init|=
operator|new
name|QGridLayout
argument_list|(
name|mainGroup
argument_list|)
decl_stmt|;
name|mainGroupLayout
operator|->
name|setMargin
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|mainGroupLayout
operator|->
name|addWidget
argument_list|(
name|radiusLabel
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|Qt
operator|::
name|AlignRight
argument_list|)
expr_stmt|;
name|mainGroupLayout
operator|->
name|addWidget
argument_list|(
name|radiusSlider
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mainGroupLayout
operator|->
name|addWidget
argument_list|(
name|deformLabel
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|,
name|Qt
operator|::
name|AlignRight
argument_list|)
expr_stmt|;
name|mainGroupLayout
operator|->
name|addWidget
argument_list|(
name|deformSlider
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mainGroupLayout
operator|->
name|addWidget
argument_list|(
name|fontSizeLabel
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
name|Qt
operator|::
name|AlignRight
argument_list|)
expr_stmt|;
name|mainGroupLayout
operator|->
name|addWidget
argument_list|(
name|fontSizeSlider
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mainGroupLayout
operator|->
name|addWidget
argument_list|(
name|animateButton
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_SUPPORT
name|mainGroupLayout
operator|->
name|addWidget
argument_list|(
name|enableOpenGLButton
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVBoxLayout
modifier|*
name|mainLayout
init|=
operator|new
name|QVBoxLayout
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|mainLayout
operator|->
name|addWidget
argument_list|(
name|mainGroup
argument_list|)
expr_stmt|;
name|mainLayout
operator|->
name|addStretch
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|mainLayout
operator|->
name|addWidget
argument_list|(
name|okButton
argument_list|)
expr_stmt|;
name|mainLayout
operator|->
name|addWidget
argument_list|(
name|quitButton
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|quitButton
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|emitQuitSignal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|okButton
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|emitOkSignal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|radiusSlider
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|m_renderer
argument_list|,
name|SLOT
argument_list|(
name|setRadius
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|deformSlider
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|m_renderer
argument_list|,
name|SLOT
argument_list|(
name|setIntensity
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|fontSizeSlider
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|m_renderer
argument_list|,
name|SLOT
argument_list|(
name|setFontSize
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|animateButton
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|m_renderer
argument_list|,
name|SLOT
argument_list|(
name|setAnimated
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_SUPPORT
name|connect
argument_list|(
name|enableOpenGLButton
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|m_renderer
argument_list|,
name|SLOT
argument_list|(
name|enableOpenGL
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|animateButton
operator|->
name|animateClick
argument_list|()
expr_stmt|;
name|deformSlider
operator|->
name|setValue
argument_list|(
literal|80
argument_list|)
expr_stmt|;
name|fontSizeSlider
operator|->
name|setValue
argument_list|(
literal|120
argument_list|)
expr_stmt|;
name|QRect
name|screen_size
init|=
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|screenGeometry
argument_list|()
decl_stmt|;
name|radiusSlider
operator|->
name|setValue
argument_list|(
name|qMin
argument_list|(
name|screen_size
operator|.
name|width
argument_list|()
argument_list|,
name|screen_size
operator|.
name|height
argument_list|()
argument_list|)
operator|/
literal|5
argument_list|)
expr_stmt|;
name|m_renderer
operator|->
name|setText
argument_list|(
name|tr
argument_list|(
literal|"Qt"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|emitQuitSignal
name|void
name|PathDeformControls
operator|::
name|emitQuitSignal
parameter_list|()
block|{
emit|emit
name|quitPressed
argument_list|()
emit|;
block|}
end_function
begin_function
DECL|function|emitOkSignal
name|void
name|PathDeformControls
operator|::
name|emitOkSignal
parameter_list|()
block|{
emit|emit
name|okPressed
argument_list|()
emit|;
block|}
end_function
begin_constructor
DECL|function|PathDeformWidget
name|PathDeformWidget
operator|::
name|PathDeformWidget
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
name|bool
name|smallScreen
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
block|{
name|setWindowTitle
argument_list|(
name|tr
argument_list|(
literal|"Vector Deformation"
argument_list|)
argument_list|)
expr_stmt|;
name|m_renderer
operator|=
operator|new
name|PathDeformRenderer
argument_list|(
name|this
argument_list|,
name|smallScreen
argument_list|)
expr_stmt|;
name|m_renderer
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Expanding
argument_list|,
name|QSizePolicy
operator|::
name|Expanding
argument_list|)
expr_stmt|;
comment|// Layouts
name|QHBoxLayout
modifier|*
name|mainLayout
init|=
operator|new
name|QHBoxLayout
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|mainLayout
operator|->
name|addWidget
argument_list|(
name|m_renderer
argument_list|)
expr_stmt|;
name|m_controls
operator|=
operator|new
name|PathDeformControls
argument_list|(
literal|0
argument_list|,
name|m_renderer
argument_list|,
name|smallScreen
argument_list|)
expr_stmt|;
name|m_controls
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Fixed
argument_list|,
name|QSizePolicy
operator|::
name|Minimum
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|smallScreen
condition|)
name|mainLayout
operator|->
name|addWidget
argument_list|(
name|m_controls
argument_list|)
expr_stmt|;
name|m_renderer
operator|->
name|loadSourceFile
argument_list|(
literal|":res/deform/pathdeform.cpp"
argument_list|)
expr_stmt|;
name|m_renderer
operator|->
name|loadDescription
argument_list|(
literal|":res/deform/pathdeform.html"
argument_list|)
expr_stmt|;
name|m_renderer
operator|->
name|setDescriptionEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_renderer
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|showControls
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_controls
argument_list|,
name|SIGNAL
argument_list|(
name|okPressed
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|hideControls
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_controls
argument_list|,
name|SIGNAL
argument_list|(
name|quitPressed
argument_list|()
argument_list|)
argument_list|,
name|QApplication
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|showControls
name|void
name|PathDeformWidget
operator|::
name|showControls
parameter_list|()
block|{
name|m_controls
operator|->
name|showFullScreen
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hideControls
name|void
name|PathDeformWidget
operator|::
name|hideControls
parameter_list|()
block|{
name|m_controls
operator|->
name|hide
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setStyle
name|void
name|PathDeformWidget
operator|::
name|setStyle
parameter_list|(
name|QStyle
modifier|*
name|style
parameter_list|)
block|{
name|QWidget
operator|::
name|setStyle
argument_list|(
name|style
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_controls
operator|!=
literal|0
condition|)
block|{
name|m_controls
operator|->
name|setStyle
argument_list|(
name|style
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QWidget
modifier|*
argument_list|>
name|widgets
init|=
name|m_controls
operator|->
name|findChildren
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|()
decl_stmt|;
foreach|foreach
control|(
name|QWidget
modifier|*
name|w
decl|,
name|widgets
control|)
name|w
operator|->
name|setStyle
argument_list|(
name|style
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|circle_bounds
specifier|static
specifier|inline
name|QRect
name|circle_bounds
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|center
parameter_list|,
name|qreal
name|radius
parameter_list|,
name|qreal
name|compensation
parameter_list|)
block|{
return|return
name|QRect
argument_list|(
name|qRound
argument_list|(
name|center
operator|.
name|x
argument_list|()
operator|-
name|radius
operator|-
name|compensation
argument_list|)
argument_list|,
name|qRound
argument_list|(
name|center
operator|.
name|y
argument_list|()
operator|-
name|radius
operator|-
name|compensation
argument_list|)
argument_list|,
name|qRound
argument_list|(
operator|(
name|radius
operator|+
name|compensation
operator|)
operator|*
literal|2
argument_list|)
argument_list|,
name|qRound
argument_list|(
operator|(
name|radius
operator|+
name|compensation
operator|)
operator|*
literal|2
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_decl_stmt
DECL|variable|LENS_EXTENT
specifier|const
name|int
name|LENS_EXTENT
init|=
literal|10
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|PathDeformRenderer
name|PathDeformRenderer
operator|::
name|PathDeformRenderer
parameter_list|(
name|QWidget
modifier|*
name|widget
parameter_list|,
name|bool
name|smallScreen
parameter_list|)
member_init_list|:
name|ArthurFrame
argument_list|(
name|widget
argument_list|)
block|{
name|m_radius
operator|=
literal|100
expr_stmt|;
name|m_pos
operator|=
name|QPointF
argument_list|(
name|m_radius
argument_list|,
name|m_radius
argument_list|)
expr_stmt|;
name|m_direction
operator|=
name|QPointF
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|m_fontSize
operator|=
literal|24
expr_stmt|;
name|m_animated
operator|=
literal|true
expr_stmt|;
name|m_repaintTimer
operator|.
name|start
argument_list|(
literal|25
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|m_repaintTracker
operator|.
name|start
argument_list|()
expr_stmt|;
name|m_intensity
operator|=
literal|100
expr_stmt|;
name|m_smallScreen
operator|=
name|smallScreen
expr_stmt|;
comment|//     m_fpsTimer.start(1000, this);
comment|//     m_fpsCounter = 0;
name|generateLensPixmap
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|setText
name|void
name|PathDeformRenderer
operator|::
name|setText
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|m_text
operator|=
name|text
expr_stmt|;
name|QFont
name|f
argument_list|(
literal|"times new roman,utopia"
argument_list|)
decl_stmt|;
name|f
operator|.
name|setStyleStrategy
argument_list|(
name|QFont
operator|::
name|ForceOutline
argument_list|)
expr_stmt|;
name|f
operator|.
name|setPointSize
argument_list|(
name|m_fontSize
argument_list|)
expr_stmt|;
name|f
operator|.
name|setStyleHint
argument_list|(
name|QFont
operator|::
name|Times
argument_list|)
expr_stmt|;
name|QFontMetrics
name|fm
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|m_paths
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_pathBounds
operator|=
name|QRect
argument_list|()
expr_stmt|;
name|QPointF
name|advance
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|bool
name|do_quick
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|text
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|text
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|unicode
argument_list|()
operator|>=
literal|0x4ff
operator|&&
name|text
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|unicode
argument_list|()
operator|<=
literal|0x1e00
condition|)
block|{
name|do_quick
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|do_quick
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|text
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QPainterPath
name|path
decl_stmt|;
name|path
operator|.
name|addText
argument_list|(
name|advance
argument_list|,
name|f
argument_list|,
name|text
operator|.
name|mid
argument_list|(
name|i
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|m_pathBounds
operator||=
name|path
operator|.
name|boundingRect
argument_list|()
expr_stmt|;
name|m_paths
operator|<<
name|path
expr_stmt|;
name|advance
operator|+=
name|QPointF
argument_list|(
name|fm
operator|.
name|width
argument_list|(
name|text
operator|.
name|mid
argument_list|(
name|i
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QPainterPath
name|path
decl_stmt|;
name|path
operator|.
name|addText
argument_list|(
name|advance
argument_list|,
name|f
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|m_pathBounds
operator||=
name|path
operator|.
name|boundingRect
argument_list|()
expr_stmt|;
name|m_paths
operator|<<
name|path
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_paths
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|m_paths
index|[
name|i
index|]
operator|=
name|m_paths
index|[
name|i
index|]
operator|*
name|QMatrix
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
operator|-
name|m_pathBounds
operator|.
name|x
argument_list|()
argument_list|,
operator|-
name|m_pathBounds
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|generateLensPixmap
name|void
name|PathDeformRenderer
operator|::
name|generateLensPixmap
parameter_list|()
block|{
name|qreal
name|rad
init|=
name|m_radius
operator|+
name|LENS_EXTENT
decl_stmt|;
name|QRect
name|bounds
init|=
name|circle_bounds
argument_list|(
name|QPointF
argument_list|()
argument_list|,
name|rad
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QPainter
name|painter
decl_stmt|;
if|if
condition|(
name|preferImage
argument_list|()
condition|)
block|{
name|m_lens_image
operator|=
name|QImage
argument_list|(
name|bounds
operator|.
name|size
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
expr_stmt|;
name|m_lens_image
operator|.
name|fill
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|painter
operator|.
name|begin
argument_list|(
operator|&
name|m_lens_image
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m_lens_pixmap
operator|=
name|QPixmap
argument_list|(
name|bounds
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|m_lens_pixmap
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|painter
operator|.
name|begin
argument_list|(
operator|&
name|m_lens_pixmap
argument_list|)
expr_stmt|;
block|}
name|QRadialGradient
name|gr
argument_list|(
name|rad
argument_list|,
name|rad
argument_list|,
name|rad
argument_list|,
literal|3
operator|*
name|rad
operator|/
literal|5
argument_list|,
literal|3
operator|*
name|rad
operator|/
literal|5
argument_list|)
decl_stmt|;
name|gr
operator|.
name|setColorAt
argument_list|(
literal|0.0
argument_list|,
name|QColor
argument_list|(
literal|255
argument_list|,
literal|255
argument_list|,
literal|255
argument_list|,
literal|191
argument_list|)
argument_list|)
expr_stmt|;
name|gr
operator|.
name|setColorAt
argument_list|(
literal|0.2
argument_list|,
name|QColor
argument_list|(
literal|255
argument_list|,
literal|255
argument_list|,
literal|127
argument_list|,
literal|191
argument_list|)
argument_list|)
expr_stmt|;
name|gr
operator|.
name|setColorAt
argument_list|(
literal|0.9
argument_list|,
name|QColor
argument_list|(
literal|150
argument_list|,
literal|150
argument_list|,
literal|200
argument_list|,
literal|63
argument_list|)
argument_list|)
expr_stmt|;
name|gr
operator|.
name|setColorAt
argument_list|(
literal|0.95
argument_list|,
name|QColor
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|127
argument_list|)
argument_list|)
expr_stmt|;
name|gr
operator|.
name|setColorAt
argument_list|(
literal|1
argument_list|,
name|QColor
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|.
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|Antialiasing
argument_list|)
expr_stmt|;
name|painter
operator|.
name|setBrush
argument_list|(
name|gr
argument_list|)
expr_stmt|;
name|painter
operator|.
name|setPen
argument_list|(
name|Qt
operator|::
name|NoPen
argument_list|)
expr_stmt|;
name|painter
operator|.
name|drawEllipse
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|bounds
operator|.
name|width
argument_list|()
argument_list|,
name|bounds
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setAnimated
name|void
name|PathDeformRenderer
operator|::
name|setAnimated
parameter_list|(
name|bool
name|animated
parameter_list|)
block|{
name|m_animated
operator|=
name|animated
expr_stmt|;
if|if
condition|(
name|m_animated
condition|)
block|{
comment|//         m_fpsTimer.start(1000, this);
comment|//         m_fpsCounter = 0;
name|m_repaintTimer
operator|.
name|start
argument_list|(
literal|25
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|m_repaintTracker
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|//         m_fpsTimer.stop();
name|m_repaintTimer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|timerEvent
name|void
name|PathDeformRenderer
operator|::
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|->
name|timerId
argument_list|()
operator|==
name|m_repaintTimer
operator|.
name|timerId
argument_list|()
condition|)
block|{
if|if
condition|(
name|QLineF
argument_list|(
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|m_direction
argument_list|)
operator|.
name|length
argument_list|()
operator|>
literal|1
condition|)
name|m_direction
operator|*=
literal|0.995
expr_stmt|;
name|qreal
name|time
init|=
name|m_repaintTracker
operator|.
name|restart
argument_list|()
decl_stmt|;
name|QRect
name|rectBefore
init|=
name|circle_bounds
argument_list|(
name|m_pos
argument_list|,
name|m_radius
argument_list|,
name|m_fontSize
argument_list|)
decl_stmt|;
name|qreal
name|dx
init|=
name|m_direction
operator|.
name|x
argument_list|()
decl_stmt|;
name|qreal
name|dy
init|=
name|m_direction
operator|.
name|y
argument_list|()
decl_stmt|;
if|if
condition|(
name|time
operator|>
literal|0
condition|)
block|{
name|dx
operator|=
name|dx
operator|*
name|time
operator|*
literal|.1
expr_stmt|;
name|dy
operator|=
name|dy
operator|*
name|time
operator|*
literal|.1
expr_stmt|;
block|}
name|m_pos
operator|+=
name|QPointF
argument_list|(
name|dx
argument_list|,
name|dy
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_pos
operator|.
name|x
argument_list|()
operator|-
name|m_radius
operator|<
literal|0
condition|)
block|{
name|m_direction
operator|.
name|setX
argument_list|(
operator|-
name|m_direction
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|m_pos
operator|.
name|setX
argument_list|(
name|m_radius
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m_pos
operator|.
name|x
argument_list|()
operator|+
name|m_radius
operator|>
name|width
argument_list|()
condition|)
block|{
name|m_direction
operator|.
name|setX
argument_list|(
operator|-
name|m_direction
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|m_pos
operator|.
name|setX
argument_list|(
name|width
argument_list|()
operator|-
name|m_radius
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_pos
operator|.
name|y
argument_list|()
operator|-
name|m_radius
operator|<
literal|0
condition|)
block|{
name|m_direction
operator|.
name|setY
argument_list|(
operator|-
name|m_direction
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|m_pos
operator|.
name|setY
argument_list|(
name|m_radius
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m_pos
operator|.
name|y
argument_list|()
operator|+
name|m_radius
operator|>
name|height
argument_list|()
condition|)
block|{
name|m_direction
operator|.
name|setY
argument_list|(
operator|-
name|m_direction
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
name|m_pos
operator|.
name|setY
argument_list|(
name|height
argument_list|()
operator|-
name|m_radius
argument_list|)
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|QT_OPENGL_SUPPORT
if|if
condition|(
name|usesOpenGL
argument_list|()
condition|)
block|{
name|update
argument_list|()
expr_stmt|;
block|}
else|else
endif|#
directive|endif
block|{
name|QRect
name|rectAfter
init|=
name|circle_bounds
argument_list|(
name|m_pos
argument_list|,
name|m_radius
argument_list|,
name|m_fontSize
argument_list|)
decl_stmt|;
name|update
argument_list|(
name|rectAfter
operator||
name|rectBefore
argument_list|)
expr_stmt|;
block|}
block|}
comment|//     else if (e->timerId() == m_fpsTimer.timerId()) {
comment|//         printf("fps: %d\n", m_fpsCounter);
comment|//         emit frameRate(m_fpsCounter);
comment|//         m_fpsCounter = 0;
comment|//     }
block|}
end_function
begin_function
DECL|function|mousePressEvent
name|void
name|PathDeformRenderer
operator|::
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
name|setDescriptionEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_repaintTimer
operator|.
name|stop
argument_list|()
expr_stmt|;
name|m_offset
operator|=
name|QPointF
argument_list|()
expr_stmt|;
if|if
condition|(
name|QLineF
argument_list|(
name|m_pos
argument_list|,
name|e
operator|->
name|pos
argument_list|()
argument_list|)
operator|.
name|length
argument_list|()
operator|<=
name|m_radius
condition|)
name|m_offset
operator|=
name|m_pos
operator|-
name|e
operator|->
name|pos
argument_list|()
expr_stmt|;
name|m_mousePress
operator|=
name|e
operator|->
name|pos
argument_list|()
expr_stmt|;
comment|// If we're not running in small screen mode, always assume we're dragging
name|m_mouseDrag
operator|=
operator|!
name|m_smallScreen
expr_stmt|;
name|mouseMoveEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mouseReleaseEvent
name|void
name|PathDeformRenderer
operator|::
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|->
name|buttons
argument_list|()
operator|==
name|Qt
operator|::
name|NoButton
operator|&&
name|m_animated
condition|)
block|{
name|m_repaintTimer
operator|.
name|start
argument_list|(
literal|10
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|m_repaintTracker
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_mouseDrag
operator|&&
name|m_smallScreen
condition|)
emit|emit
name|clicked
argument_list|()
emit|;
block|}
end_function
begin_function
DECL|function|mouseMoveEvent
name|void
name|PathDeformRenderer
operator|::
name|mouseMoveEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|m_mouseDrag
operator|&&
operator|(
name|QLineF
argument_list|(
name|m_mousePress
argument_list|,
name|e
operator|->
name|pos
argument_list|()
argument_list|)
operator|.
name|length
argument_list|()
operator|>
literal|25.0
operator|)
condition|)
name|m_mouseDrag
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|m_mouseDrag
condition|)
block|{
name|QRect
name|rectBefore
init|=
name|circle_bounds
argument_list|(
name|m_pos
argument_list|,
name|m_radius
argument_list|,
name|m_fontSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|MouseMove
condition|)
block|{
name|QLineF
name|line
argument_list|(
name|m_pos
argument_list|,
name|e
operator|->
name|pos
argument_list|()
operator|+
name|m_offset
argument_list|)
decl_stmt|;
name|line
operator|.
name|setLength
argument_list|(
name|line
operator|.
name|length
argument_list|()
operator|*
literal|.1
argument_list|)
expr_stmt|;
name|QPointF
name|dir
argument_list|(
name|line
operator|.
name|dx
argument_list|()
argument_list|,
name|line
operator|.
name|dy
argument_list|()
argument_list|)
decl_stmt|;
name|m_direction
operator|=
operator|(
name|m_direction
operator|+
name|dir
operator|)
operator|/
literal|2
expr_stmt|;
block|}
name|m_pos
operator|=
name|e
operator|->
name|pos
argument_list|()
operator|+
name|m_offset
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_OPENGL_SUPPORT
if|if
condition|(
name|usesOpenGL
argument_list|()
condition|)
block|{
name|update
argument_list|()
expr_stmt|;
block|}
else|else
endif|#
directive|endif
block|{
name|QRect
name|rectAfter
init|=
name|circle_bounds
argument_list|(
name|m_pos
argument_list|,
name|m_radius
argument_list|,
name|m_fontSize
argument_list|)
decl_stmt|;
name|update
argument_list|(
name|rectBefore
operator||
name|rectAfter
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|lensDeform
name|QPainterPath
name|PathDeformRenderer
operator|::
name|lensDeform
parameter_list|(
specifier|const
name|QPainterPath
modifier|&
name|source
parameter_list|,
specifier|const
name|QPointF
modifier|&
name|offset
parameter_list|)
block|{
name|QPainterPath
name|path
decl_stmt|;
name|path
operator|.
name|addPath
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|qreal
name|flip
init|=
name|m_intensity
operator|/
name|qreal
argument_list|(
literal|100
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|path
operator|.
name|elementCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QPainterPath
operator|::
name|Element
modifier|&
name|e
init|=
name|path
operator|.
name|elementAt
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|qreal
name|x
init|=
name|e
operator|.
name|x
operator|+
name|offset
operator|.
name|x
argument_list|()
decl_stmt|;
name|qreal
name|y
init|=
name|e
operator|.
name|y
operator|+
name|offset
operator|.
name|y
argument_list|()
decl_stmt|;
name|qreal
name|dx
init|=
name|x
operator|-
name|m_pos
operator|.
name|x
argument_list|()
decl_stmt|;
name|qreal
name|dy
init|=
name|y
operator|-
name|m_pos
operator|.
name|y
argument_list|()
decl_stmt|;
name|qreal
name|len
init|=
name|m_radius
operator|-
name|qSqrt
argument_list|(
name|dx
operator|*
name|dx
operator|+
name|dy
operator|*
name|dy
argument_list|)
decl_stmt|;
if|if
condition|(
name|len
operator|>
literal|0
condition|)
block|{
name|path
operator|.
name|setElementPositionAt
argument_list|(
name|i
argument_list|,
name|x
operator|+
name|flip
operator|*
name|dx
operator|*
name|len
operator|/
name|m_radius
argument_list|,
name|y
operator|+
name|flip
operator|*
name|dy
operator|*
name|len
operator|/
name|m_radius
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|path
operator|.
name|setElementPositionAt
argument_list|(
name|i
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|path
return|;
block|}
end_function
begin_function
DECL|function|paint
name|void
name|PathDeformRenderer
operator|::
name|paint
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|)
block|{
name|int
name|pad_x
init|=
literal|5
decl_stmt|;
name|int
name|pad_y
init|=
literal|5
decl_stmt|;
name|int
name|skip_x
init|=
name|qRound
argument_list|(
name|m_pathBounds
operator|.
name|width
argument_list|()
operator|+
name|pad_x
operator|+
name|m_fontSize
operator|/
literal|2
argument_list|)
decl_stmt|;
name|int
name|skip_y
init|=
name|qRound
argument_list|(
name|m_pathBounds
operator|.
name|height
argument_list|()
operator|+
name|pad_y
argument_list|)
decl_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|Qt
operator|::
name|NoPen
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setBrush
argument_list|(
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
name|QRectF
name|clip
argument_list|(
name|painter
operator|->
name|clipPath
argument_list|()
operator|.
name|boundingRect
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|overlap
init|=
name|pad_x
operator|/
literal|2
decl_stmt|;
for|for
control|(
name|int
name|start_y
init|=
literal|0
init|;
name|start_y
operator|<
name|height
argument_list|()
condition|;
name|start_y
operator|+=
name|skip_y
control|)
block|{
if|if
condition|(
name|start_y
operator|>
name|clip
operator|.
name|bottom
argument_list|()
condition|)
break|break;
name|int
name|start_x
init|=
operator|-
name|overlap
decl_stmt|;
for|for
control|(
init|;
name|start_x
operator|<
name|width
argument_list|()
condition|;
name|start_x
operator|+=
name|skip_x
control|)
block|{
if|if
condition|(
name|start_y
operator|+
name|skip_y
operator|>=
name|clip
operator|.
name|top
argument_list|()
operator|&&
name|start_x
operator|+
name|skip_x
operator|>=
name|clip
operator|.
name|left
argument_list|()
operator|&&
name|start_x
operator|<=
name|clip
operator|.
name|right
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_paths
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QPainterPath
name|path
init|=
name|lensDeform
argument_list|(
name|m_paths
index|[
name|i
index|]
argument_list|,
name|QPointF
argument_list|(
name|start_x
argument_list|,
name|start_y
argument_list|)
argument_list|)
decl_stmt|;
name|painter
operator|->
name|drawPath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|overlap
operator|=
name|skip_x
operator|-
operator|(
name|start_x
operator|-
name|width
argument_list|()
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|preferImage
argument_list|()
condition|)
block|{
name|painter
operator|->
name|drawImage
argument_list|(
name|m_pos
operator|-
name|QPointF
argument_list|(
name|m_radius
operator|+
name|LENS_EXTENT
argument_list|,
name|m_radius
operator|+
name|LENS_EXTENT
argument_list|)
argument_list|,
name|m_lens_image
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|painter
operator|->
name|drawPixmap
argument_list|(
name|m_pos
operator|-
name|QPointF
argument_list|(
name|m_radius
operator|+
name|LENS_EXTENT
argument_list|,
name|m_radius
operator|+
name|LENS_EXTENT
argument_list|)
argument_list|,
name|m_lens_pixmap
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setRadius
name|void
name|PathDeformRenderer
operator|::
name|setRadius
parameter_list|(
name|int
name|radius
parameter_list|)
block|{
name|qreal
name|max
init|=
name|qMax
argument_list|(
name|m_radius
argument_list|,
operator|(
name|qreal
operator|)
name|radius
argument_list|)
decl_stmt|;
name|m_radius
operator|=
name|radius
expr_stmt|;
name|generateLensPixmap
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|m_animated
operator|||
name|m_radius
operator|<
name|max
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_OPENGL_SUPPORT
if|if
condition|(
name|usesOpenGL
argument_list|()
condition|)
block|{
name|update
argument_list|()
expr_stmt|;
block|}
else|else
endif|#
directive|endif
block|{
name|update
argument_list|(
name|circle_bounds
argument_list|(
name|m_pos
argument_list|,
name|max
argument_list|,
name|m_fontSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|setIntensity
name|void
name|PathDeformRenderer
operator|::
name|setIntensity
parameter_list|(
name|int
name|intensity
parameter_list|)
block|{
name|m_intensity
operator|=
name|intensity
expr_stmt|;
if|if
condition|(
operator|!
name|m_animated
condition|)
block|{
ifdef|#
directive|ifdef
name|QT_OPENGL_SUPPORT
if|if
condition|(
name|usesOpenGL
argument_list|()
condition|)
block|{
name|update
argument_list|()
expr_stmt|;
block|}
else|else
endif|#
directive|endif
block|{
name|update
argument_list|(
name|circle_bounds
argument_list|(
name|m_pos
argument_list|,
name|m_radius
argument_list|,
name|m_fontSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
end_unit
