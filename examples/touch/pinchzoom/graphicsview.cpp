begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** BSD License Usage ** Alternatively, you may use this file under the terms of the BSD license ** as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of The Qt Company Ltd nor the names of its **     contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"graphicsview.h"
end_include
begin_include
include|#
directive|include
file|<QScrollBar>
end_include
begin_include
include|#
directive|include
file|<QTouchEvent>
end_include
begin_constructor
DECL|function|GraphicsView
name|GraphicsView
operator|::
name|GraphicsView
parameter_list|(
name|QGraphicsScene
modifier|*
name|scene
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QGraphicsView
argument_list|(
name|scene
argument_list|,
name|parent
argument_list|)
member_init_list|,
name|totalScaleFactor
argument_list|(
literal|1
argument_list|)
block|{
name|viewport
argument_list|()
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_AcceptTouchEvents
argument_list|)
expr_stmt|;
name|setDragMode
argument_list|(
name|ScrollHandDrag
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|viewportEvent
name|bool
name|GraphicsView
operator|::
name|viewportEvent
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|event
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|TouchBegin
case|:
case|case
name|QEvent
operator|::
name|TouchUpdate
case|:
case|case
name|QEvent
operator|::
name|TouchEnd
case|:
block|{
name|QTouchEvent
modifier|*
name|touchEvent
init|=
cast|static_cast
argument_list|<
name|QTouchEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QTouchEvent
operator|::
name|TouchPoint
argument_list|>
name|touchPoints
init|=
name|touchEvent
operator|->
name|touchPoints
argument_list|()
decl_stmt|;
if|if
condition|(
name|touchPoints
operator|.
name|count
argument_list|()
operator|==
literal|2
condition|)
block|{
comment|// determine scale factor
specifier|const
name|QTouchEvent
operator|::
name|TouchPoint
modifier|&
name|touchPoint0
init|=
name|touchPoints
operator|.
name|first
argument_list|()
decl_stmt|;
specifier|const
name|QTouchEvent
operator|::
name|TouchPoint
modifier|&
name|touchPoint1
init|=
name|touchPoints
operator|.
name|last
argument_list|()
decl_stmt|;
name|qreal
name|currentScaleFactor
init|=
name|QLineF
argument_list|(
name|touchPoint0
operator|.
name|pos
argument_list|()
argument_list|,
name|touchPoint1
operator|.
name|pos
argument_list|()
argument_list|)
operator|.
name|length
argument_list|()
operator|/
name|QLineF
argument_list|(
name|touchPoint0
operator|.
name|startPos
argument_list|()
argument_list|,
name|touchPoint1
operator|.
name|startPos
argument_list|()
argument_list|)
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|touchEvent
operator|->
name|touchPointStates
argument_list|()
operator|&
name|Qt
operator|::
name|TouchPointReleased
condition|)
block|{
comment|// if one of the fingers is released, remember the current scale
comment|// factor so that adding another finger later will continue zooming
comment|// by adding new scale factor to the existing remembered value.
name|totalScaleFactor
operator|*=
name|currentScaleFactor
expr_stmt|;
name|currentScaleFactor
operator|=
literal|1
expr_stmt|;
block|}
name|setTransform
argument_list|(
name|QTransform
argument_list|()
operator|.
name|scale
argument_list|(
name|totalScaleFactor
operator|*
name|currentScaleFactor
argument_list|,
name|totalScaleFactor
operator|*
name|currentScaleFactor
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
default|default:
break|break;
block|}
return|return
name|QGraphicsView
operator|::
name|viewportEvent
argument_list|(
name|event
argument_list|)
return|;
block|}
end_function
end_unit
