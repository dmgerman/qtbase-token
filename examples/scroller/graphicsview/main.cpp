begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor **     the names of its contributors may be used to endorse or promote **     products derived from this software without specific prior written **     permission. ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore>
end_include
begin_include
include|#
directive|include
file|<QtWidgets>
end_include
begin_define
DECL|macro|NUM_ITEMS
define|#
directive|define
name|NUM_ITEMS
value|100
end_define
begin_define
DECL|macro|NUM_LISTS
define|#
directive|define
name|NUM_LISTS
value|10
end_define
begin_comment
comment|/*!     \class RectObject     Note that it needs to be a QGraphicsObject or else the gestures will not work correctly. */
end_comment
begin_class
DECL|class|RectObject
class|class
name|RectObject
super|:
specifier|public
name|QGraphicsObject
block|{
name|Q_OBJECT
public|public:
DECL|function|RectObject
name|RectObject
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|qreal
name|x
parameter_list|,
name|qreal
name|y
parameter_list|,
name|qreal
name|width
parameter_list|,
name|qreal
name|height
parameter_list|,
name|QBrush
name|brush
parameter_list|,
name|QGraphicsItem
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QGraphicsObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|m_text
argument_list|(
name|text
argument_list|)
member_init_list|,
name|m_rect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|width
argument_list|,
name|height
argument_list|)
member_init_list|,
name|m_pen
argument_list|(
name|brush
operator|.
name|color
argument_list|()
operator|.
name|lighter
argument_list|()
argument_list|,
literal|3.0
argument_list|)
member_init_list|,
name|m_brush
argument_list|(
name|brush
argument_list|)
block|{
name|setFlag
argument_list|(
name|QGraphicsItem
operator|::
name|ItemClipsToShape
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
DECL|function|boundingRect
name|QRectF
name|boundingRect
parameter_list|()
specifier|const
block|{
comment|// here we only want the size of the children and not the size of the children of the children...
name|qreal
name|halfpw
init|=
name|m_pen
operator|.
name|widthF
argument_list|()
operator|/
literal|2
decl_stmt|;
name|QRectF
name|rect
init|=
name|m_rect
decl_stmt|;
if|if
condition|(
name|halfpw
operator|>
literal|0.0
condition|)
name|rect
operator|.
name|adjust
argument_list|(
operator|-
name|halfpw
argument_list|,
operator|-
name|halfpw
argument_list|,
name|halfpw
argument_list|,
name|halfpw
argument_list|)
expr_stmt|;
return|return
name|rect
return|;
block|}
DECL|function|paint
name|void
name|paint
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QStyleOptionGraphicsItem
modifier|*
name|option
parameter_list|,
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|option
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|m_pen
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setBrush
argument_list|(
name|m_brush
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawRect
argument_list|(
name|m_rect
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
name|QFont
name|f
decl_stmt|;
name|f
operator|.
name|setPixelSize
argument_list|(
name|m_rect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setFont
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawText
argument_list|(
name|m_rect
argument_list|,
name|Qt
operator|::
name|AlignCenter
argument_list|,
name|m_text
argument_list|)
expr_stmt|;
block|}
DECL|member|m_text
name|QString
name|m_text
decl_stmt|;
DECL|member|m_rect
name|QRectF
name|m_rect
decl_stmt|;
DECL|member|m_pen
name|QPen
name|m_pen
decl_stmt|;
DECL|member|m_brush
name|QBrush
name|m_brush
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|ViewObject
class|class
name|ViewObject
super|:
specifier|public
name|QGraphicsObject
block|{
name|Q_OBJECT
public|public:
DECL|function|ViewObject
name|ViewObject
parameter_list|(
name|QGraphicsObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QGraphicsObject
argument_list|(
name|parent
argument_list|)
block|{ }
DECL|function|boundingRect
name|QRectF
name|boundingRect
parameter_list|()
specifier|const
block|{
name|QRectF
name|rect
decl_stmt|;
foreach|foreach
control|(
name|QGraphicsItem
modifier|*
name|item
decl|,
name|childItems
argument_list|()
control|)
name|rect
operator||=
name|item
operator|->
name|boundingRect
argument_list|()
operator|.
name|translated
argument_list|(
name|item
operator|->
name|pos
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|rect
return|;
block|}
DECL|function|paint
name|void
name|paint
parameter_list|(
name|QPainter
modifier|*
parameter_list|,
specifier|const
name|QStyleOptionGraphicsItem
modifier|*
parameter_list|,
name|QWidget
modifier|*
parameter_list|)
block|{ }
block|}
class|;
end_class
begin_class
DECL|class|ListObject
class|class
name|ListObject
super|:
specifier|public
name|QGraphicsObject
block|{
name|Q_OBJECT
public|public:
DECL|function|ListObject
name|ListObject
parameter_list|(
specifier|const
name|QSizeF
modifier|&
name|size
parameter_list|,
name|bool
name|useTouch
parameter_list|)
block|{
name|m_size
operator|=
name|size
expr_stmt|;
name|setFlag
argument_list|(
name|QGraphicsItem
operator|::
name|ItemClipsChildrenToShape
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// grab gesture via Touch or Mouse events
name|QScroller
operator|::
name|grabGesture
argument_list|(
name|this
argument_list|,
name|useTouch
condition|?
name|QScroller
operator|::
name|TouchGesture
else|:
name|QScroller
operator|::
name|LeftMouseButtonGesture
argument_list|)
expr_stmt|;
comment|// this needs to be QGraphicsOBJECT - otherwise gesture recognition
comment|// will not work for the parent of the viewport (in this case the
comment|// list)
name|m_viewport
operator|=
operator|new
name|ViewObject
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|viewport
name|QGraphicsObject
modifier|*
name|viewport
parameter_list|()
specifier|const
block|{
return|return
name|m_viewport
return|;
block|}
DECL|function|event
name|bool
name|event
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
switch|switch
condition|(
name|e
operator|->
name|type
argument_list|()
condition|)
block|{
comment|// ![2]
case|case
name|QEvent
operator|::
name|ScrollPrepare
case|:
block|{
name|QScrollPrepareEvent
modifier|*
name|se
init|=
cast|static_cast
argument_list|<
name|QScrollPrepareEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|se
operator|->
name|setViewportSize
argument_list|(
name|m_size
argument_list|)
expr_stmt|;
name|QRectF
name|br
init|=
name|m_viewport
operator|->
name|boundingRect
argument_list|()
decl_stmt|;
name|se
operator|->
name|setContentPosRange
argument_list|(
name|QRectF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|qMax
argument_list|(
name|qreal
argument_list|(
literal|0
argument_list|)
argument_list|,
name|br
operator|.
name|width
argument_list|()
operator|-
name|m_size
operator|.
name|width
argument_list|()
argument_list|)
argument_list|,
name|qMax
argument_list|(
name|qreal
argument_list|(
literal|0
argument_list|)
argument_list|,
name|br
operator|.
name|height
argument_list|()
operator|-
name|m_size
operator|.
name|height
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|se
operator|->
name|setContentPos
argument_list|(
operator|-
name|m_viewport
operator|->
name|pos
argument_list|()
argument_list|)
expr_stmt|;
name|se
operator|->
name|accept
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// ![1]
comment|// ![2]
case|case
name|QEvent
operator|::
name|Scroll
case|:
block|{
name|QScrollEvent
modifier|*
name|se
init|=
cast|static_cast
argument_list|<
name|QScrollEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
decl_stmt|;
name|m_viewport
operator|->
name|setPos
argument_list|(
operator|-
name|se
operator|->
name|contentPos
argument_list|()
operator|-
name|se
operator|->
name|overshootDistance
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
comment|// ![2]
default|default:
break|break;
block|}
return|return
name|QGraphicsObject
operator|::
name|event
argument_list|(
name|e
argument_list|)
return|;
block|}
DECL|function|sceneEvent
name|bool
name|sceneEvent
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
switch|switch
condition|(
name|e
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|TouchBegin
case|:
block|{
comment|// We need to return true for the TouchBegin here in the
comment|// top-most graphics object - otherwise gestures in our parent
comment|// objects will NOT work at all (the accept() flag is already
comment|// set due to our setAcceptTouchEvents(true) call in the c'tor
return|return
literal|true
return|;
block|}
case|case
name|QEvent
operator|::
name|GraphicsSceneMousePress
case|:
block|{
comment|// We need to return true for the MousePress here in the
comment|// top-most graphics object - otherwise gestures in our parent
comment|// objects will NOT work at all (the accept() flag is already
comment|// set to true by Qt)
return|return
literal|true
return|;
block|}
default|default:
break|break;
block|}
return|return
name|QGraphicsObject
operator|::
name|sceneEvent
argument_list|(
name|e
argument_list|)
return|;
block|}
DECL|function|boundingRect
name|QRectF
name|boundingRect
parameter_list|()
specifier|const
block|{
return|return
name|QRectF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|m_size
operator|.
name|width
argument_list|()
operator|+
literal|3
argument_list|,
name|m_size
operator|.
name|height
argument_list|()
argument_list|)
return|;
block|}
DECL|function|paint
name|void
name|paint
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QStyleOptionGraphicsItem
modifier|*
name|option
parameter_list|,
name|QWidget
modifier|*
name|widget
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|option
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|QPen
argument_list|(
name|QColor
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|)
argument_list|,
literal|3.0
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawRect
argument_list|(
name|QRect
argument_list|(
literal|1.5
argument_list|,
literal|1.5
argument_list|,
name|m_size
operator|.
name|width
argument_list|()
operator|-
literal|3
argument_list|,
name|m_size
operator|.
name|height
argument_list|()
operator|-
literal|3
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|member|m_size
name|QSizeF
name|m_size
decl_stmt|;
DECL|member|m_viewport
name|ViewObject
modifier|*
name|m_viewport
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|MainWindow
class|class
name|MainWindow
super|:
specifier|public
name|QMainWindow
block|{
name|Q_OBJECT
public|public:
DECL|function|MainWindow
name|MainWindow
parameter_list|(
name|bool
name|useTouch
parameter_list|)
block|{
name|m_scene
operator|=
operator|new
name|QGraphicsScene
argument_list|()
expr_stmt|;
comment|// -- make the main list
name|ListObject
modifier|*
name|mainList
init|=
operator|new
name|ListObject
argument_list|(
name|QSizeF
argument_list|(
literal|780
argument_list|,
literal|400
argument_list|)
argument_list|,
name|useTouch
argument_list|)
decl_stmt|;
name|mainList
operator|->
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"MainList"
argument_list|)
argument_list|)
expr_stmt|;
name|m_scene
operator|->
name|addItem
argument_list|(
name|mainList
argument_list|)
expr_stmt|;
comment|// ![3]
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_LISTS
condition|;
name|i
operator|++
control|)
block|{
name|ListObject
modifier|*
name|childList
init|=
operator|new
name|ListObject
argument_list|(
name|QSizeF
argument_list|(
name|mainList
operator|->
name|m_size
operator|.
name|width
argument_list|()
operator|/
literal|3
argument_list|,
name|mainList
operator|->
name|m_size
operator|.
name|height
argument_list|()
argument_list|)
argument_list|,
name|useTouch
argument_list|)
decl_stmt|;
name|childList
operator|->
name|setObjectName
argument_list|(
name|QString
argument_list|(
literal|"ChildList %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|fillList
argument_list|(
name|childList
argument_list|)
expr_stmt|;
name|childList
operator|->
name|setParentItem
argument_list|(
name|mainList
operator|->
name|viewport
argument_list|()
argument_list|)
expr_stmt|;
name|childList
operator|->
name|setPos
argument_list|(
name|i
operator|*
name|mainList
operator|->
name|m_size
operator|.
name|width
argument_list|()
operator|/
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|mainList
operator|->
name|viewport
argument_list|()
operator|->
name|setPos
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|/*         list1->setTransformOriginPoint(200, 200);         list1->setRotation(135);         list1->setPos(20 + 200 * .41, 20 + 200 * .41);         */
comment|// ![3]
name|m_view
operator|=
operator|new
name|QGraphicsView
argument_list|(
name|m_scene
argument_list|)
expr_stmt|;
name|setCentralWidget
argument_list|(
name|m_view
argument_list|)
expr_stmt|;
name|setWindowTitle
argument_list|(
name|tr
argument_list|(
literal|"Gesture example"
argument_list|)
argument_list|)
expr_stmt|;
name|m_scene
operator|->
name|setSceneRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|m_view
operator|->
name|viewport
argument_list|()
operator|->
name|width
argument_list|()
argument_list|,
name|m_view
operator|->
name|viewport
argument_list|()
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|/**      *  Fills the list object \a list with RectObjects.      */
DECL|function|fillList
name|void
name|fillList
parameter_list|(
name|ListObject
modifier|*
name|list
parameter_list|)
block|{
name|qreal
name|h
init|=
name|list
operator|->
name|m_size
operator|.
name|height
argument_list|()
operator|/
literal|10
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|NUM_ITEMS
condition|;
name|i
operator|++
control|)
block|{
name|QColor
name|color
init|=
name|QColor
argument_list|(
literal|255
operator|*
name|i
operator|/
name|NUM_ITEMS
argument_list|,
literal|255
operator|*
operator|(
name|NUM_ITEMS
operator|-
name|i
operator|)
operator|/
name|NUM_ITEMS
argument_list|,
literal|127
operator|*
operator|(
name|i
operator|%
literal|2
operator|)
operator|+
literal|64
operator|*
operator|(
name|i
operator|/
literal|2
operator|%
literal|2
operator|)
argument_list|)
decl_stmt|;
name|QString
name|text
init|=
name|QLatin1String
argument_list|(
literal|"Item #"
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QGraphicsItem
modifier|*
name|rect
init|=
operator|new
name|RectObject
argument_list|(
name|text
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|list
operator|->
name|m_size
operator|.
name|width
argument_list|()
operator|-
literal|6
argument_list|,
name|h
operator|-
literal|3
argument_list|,
name|QBrush
argument_list|(
name|color
argument_list|)
argument_list|,
name|list
operator|->
name|viewport
argument_list|()
argument_list|)
decl_stmt|;
name|rect
operator|->
name|setPos
argument_list|(
literal|3
argument_list|,
name|h
operator|*
name|i
operator|+
literal|3
argument_list|)
expr_stmt|;
block|}
name|list
operator|->
name|viewport
argument_list|()
operator|->
name|setPos
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
protected|protected:
DECL|function|resizeEvent
name|void
name|resizeEvent
parameter_list|(
name|QResizeEvent
modifier|*
name|e
parameter_list|)
block|{
comment|// resize the scene according to our own size to prevent scrolling
name|m_scene
operator|->
name|setSceneRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|m_view
operator|->
name|viewport
argument_list|()
operator|->
name|width
argument_list|()
argument_list|,
name|m_view
operator|->
name|viewport
argument_list|()
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|QMainWindow
operator|::
name|resizeEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
block|}
DECL|member|m_scene
name|QGraphicsScene
modifier|*
name|m_scene
decl_stmt|;
DECL|member|m_view
name|QGraphicsView
modifier|*
name|m_view
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
name|argv
index|[]
parameter_list|)
block|{
name|QApplication
name|a
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|bool
name|touch
init|=
operator|(
name|a
operator|.
name|arguments
argument_list|()
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"--touch"
argument_list|)
argument_list|)
operator|)
decl_stmt|;
name|MainWindow
name|mw
argument_list|(
name|touch
argument_list|)
decl_stmt|;
name|mw
operator|.
name|show
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|mw
operator|.
name|raise
argument_list|()
expr_stmt|;
endif|#
directive|endif
return|return
name|a
operator|.
name|exec
argument_list|()
return|;
block|}
end_function
begin_include
include|#
directive|include
file|"main.moc"
end_include
end_unit
