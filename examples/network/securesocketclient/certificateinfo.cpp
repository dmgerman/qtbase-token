begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor **     the names of its contributors may be used to endorse or promote **     products derived from this software without specific prior written **     permission. ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"certificateinfo.h"
end_include
begin_include
include|#
directive|include
file|"ui_certificateinfo.h"
end_include
begin_constructor
DECL|function|CertificateInfo
name|CertificateInfo
operator|::
name|CertificateInfo
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QDialog
argument_list|(
name|parent
argument_list|)
block|{
name|form
operator|=
operator|new
name|Ui_CertificateInfo
expr_stmt|;
name|form
operator|->
name|setupUi
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|form
operator|->
name|certificationPathView
argument_list|,
name|SIGNAL
argument_list|(
name|currentIndexChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|updateCertificateInfo
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~CertificateInfo
name|CertificateInfo
operator|::
name|~
name|CertificateInfo
parameter_list|()
block|{
operator|delete
name|form
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|setCertificateChain
name|void
name|CertificateInfo
operator|::
name|setCertificateChain
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
modifier|&
name|chain
parameter_list|)
block|{
name|this
operator|->
name|chain
operator|=
name|chain
expr_stmt|;
name|form
operator|->
name|certificationPathView
operator|->
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chain
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QSslCertificate
modifier|&
name|cert
init|=
name|chain
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|form
operator|->
name|certificationPathView
operator|->
name|addItem
argument_list|(
name|tr
argument_list|(
literal|"%1%2 (%3)"
argument_list|)
operator|.
name|arg
argument_list|(
operator|!
name|i
condition|?
name|QString
argument_list|()
else|:
name|tr
argument_list|(
literal|"Issued by: "
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|cert
operator|.
name|subjectInfo
argument_list|(
name|QSslCertificate
operator|::
name|Organization
argument_list|)
operator|.
name|join
argument_list|(
name|QLatin1String
argument_list|(
literal|" "
argument_list|)
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|cert
operator|.
name|subjectInfo
argument_list|(
name|QSslCertificate
operator|::
name|CommonName
argument_list|)
operator|.
name|join
argument_list|(
name|QLatin1String
argument_list|(
literal|" "
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|form
operator|->
name|certificationPathView
operator|->
name|setCurrentIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateCertificateInfo
name|void
name|CertificateInfo
operator|::
name|updateCertificateInfo
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|form
operator|->
name|certificateInfoView
operator|->
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|index
operator|>=
literal|0
operator|&&
name|index
operator|<
name|chain
operator|.
name|size
argument_list|()
condition|)
block|{
specifier|const
name|QSslCertificate
modifier|&
name|cert
init|=
name|chain
operator|.
name|at
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|QStringList
name|lines
decl_stmt|;
name|lines
operator|<<
name|tr
argument_list|(
literal|"Organization: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|cert
operator|.
name|subjectInfo
argument_list|(
name|QSslCertificate
operator|::
name|Organization
argument_list|)
operator|.
name|join
argument_list|(
name|QLatin1String
argument_list|(
literal|" "
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|tr
argument_list|(
literal|"Subunit: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|cert
operator|.
name|subjectInfo
argument_list|(
name|QSslCertificate
operator|::
name|OrganizationalUnitName
argument_list|)
operator|.
name|join
argument_list|(
name|QLatin1String
argument_list|(
literal|" "
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|tr
argument_list|(
literal|"Country: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|cert
operator|.
name|subjectInfo
argument_list|(
name|QSslCertificate
operator|::
name|CountryName
argument_list|)
operator|.
name|join
argument_list|(
name|QLatin1String
argument_list|(
literal|" "
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|tr
argument_list|(
literal|"Locality: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|cert
operator|.
name|subjectInfo
argument_list|(
name|QSslCertificate
operator|::
name|LocalityName
argument_list|)
operator|.
name|join
argument_list|(
name|QLatin1String
argument_list|(
literal|" "
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|tr
argument_list|(
literal|"State/Province: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|cert
operator|.
name|subjectInfo
argument_list|(
name|QSslCertificate
operator|::
name|StateOrProvinceName
argument_list|)
operator|.
name|join
argument_list|(
name|QLatin1String
argument_list|(
literal|" "
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|tr
argument_list|(
literal|"Common Name: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|cert
operator|.
name|subjectInfo
argument_list|(
name|QSslCertificate
operator|::
name|CommonName
argument_list|)
operator|.
name|join
argument_list|(
name|QLatin1String
argument_list|(
literal|" "
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|tr
argument_list|(
literal|"Issuer Organization: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|cert
operator|.
name|issuerInfo
argument_list|(
name|QSslCertificate
operator|::
name|Organization
argument_list|)
operator|.
name|join
argument_list|(
name|QLatin1String
argument_list|(
literal|" "
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|tr
argument_list|(
literal|"Issuer Unit Name: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|cert
operator|.
name|issuerInfo
argument_list|(
name|QSslCertificate
operator|::
name|OrganizationalUnitName
argument_list|)
operator|.
name|join
argument_list|(
name|QLatin1String
argument_list|(
literal|" "
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|tr
argument_list|(
literal|"Issuer Country: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|cert
operator|.
name|issuerInfo
argument_list|(
name|QSslCertificate
operator|::
name|CountryName
argument_list|)
operator|.
name|join
argument_list|(
name|QLatin1String
argument_list|(
literal|" "
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|tr
argument_list|(
literal|"Issuer Locality: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|cert
operator|.
name|issuerInfo
argument_list|(
name|QSslCertificate
operator|::
name|LocalityName
argument_list|)
operator|.
name|join
argument_list|(
name|QLatin1String
argument_list|(
literal|" "
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|tr
argument_list|(
literal|"Issuer State/Province: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|cert
operator|.
name|issuerInfo
argument_list|(
name|QSslCertificate
operator|::
name|StateOrProvinceName
argument_list|)
operator|.
name|join
argument_list|(
name|QLatin1String
argument_list|(
literal|" "
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|tr
argument_list|(
literal|"Issuer Common Name: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|cert
operator|.
name|issuerInfo
argument_list|(
name|QSslCertificate
operator|::
name|CommonName
argument_list|)
operator|.
name|join
argument_list|(
name|QLatin1String
argument_list|(
literal|" "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|QString
name|line
decl|,
name|lines
control|)
name|form
operator|->
name|certificateInfoView
operator|->
name|addItem
argument_list|(
name|line
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|form
operator|->
name|certificateInfoView
operator|->
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_function
end_unit
