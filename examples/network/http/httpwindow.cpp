begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor **     the names of its contributors may be used to endorse or promote **     products derived from this software without specific prior written **     permission. ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtWidgets>
end_include
begin_include
include|#
directive|include
file|<QtNetwork>
end_include
begin_include
include|#
directive|include
file|"httpwindow.h"
end_include
begin_include
include|#
directive|include
file|"ui_authenticationdialog.h"
end_include
begin_constructor
DECL|function|HttpWindow
name|HttpWindow
operator|::
name|HttpWindow
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QDialog
argument_list|(
name|parent
argument_list|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_OPENSSL
name|urlLineEdit
operator|=
operator|new
name|QLineEdit
argument_list|(
literal|"https://qt.nokia.com/"
argument_list|)
expr_stmt|;
else|#
directive|else
name|urlLineEdit
operator|=
operator|new
name|QLineEdit
argument_list|(
literal|"http://qt.nokia.com/"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|urlLabel
operator|=
operator|new
name|QLabel
argument_list|(
name|tr
argument_list|(
literal|"&URL:"
argument_list|)
argument_list|)
expr_stmt|;
name|urlLabel
operator|->
name|setBuddy
argument_list|(
name|urlLineEdit
argument_list|)
expr_stmt|;
name|statusLabel
operator|=
operator|new
name|QLabel
argument_list|(
name|tr
argument_list|(
literal|"Please enter the URL of a file you want to "
literal|"download."
argument_list|)
argument_list|)
expr_stmt|;
name|statusLabel
operator|->
name|setWordWrap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|downloadButton
operator|=
operator|new
name|QPushButton
argument_list|(
name|tr
argument_list|(
literal|"Download"
argument_list|)
argument_list|)
expr_stmt|;
name|downloadButton
operator|->
name|setDefault
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|quitButton
operator|=
operator|new
name|QPushButton
argument_list|(
name|tr
argument_list|(
literal|"Quit"
argument_list|)
argument_list|)
expr_stmt|;
name|quitButton
operator|->
name|setAutoDefault
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|buttonBox
operator|=
operator|new
name|QDialogButtonBox
expr_stmt|;
name|buttonBox
operator|->
name|addButton
argument_list|(
name|downloadButton
argument_list|,
name|QDialogButtonBox
operator|::
name|ActionRole
argument_list|)
expr_stmt|;
name|buttonBox
operator|->
name|addButton
argument_list|(
name|quitButton
argument_list|,
name|QDialogButtonBox
operator|::
name|RejectRole
argument_list|)
expr_stmt|;
name|progressDialog
operator|=
operator|new
name|QProgressDialog
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|urlLineEdit
argument_list|,
name|SIGNAL
argument_list|(
name|textChanged
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|enableDownloadButton
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|qnam
argument_list|,
name|SIGNAL
argument_list|(
name|authenticationRequired
argument_list|(
name|QNetworkReply
operator|*
argument_list|,
name|QAuthenticator
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|slotAuthenticationRequired
argument_list|(
name|QNetworkReply
operator|*
argument_list|,
name|QAuthenticator
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_OPENSSL
name|connect
argument_list|(
operator|&
name|qnam
argument_list|,
name|SIGNAL
argument_list|(
name|sslErrors
argument_list|(
name|QNetworkReply
operator|*
argument_list|,
name|QList
argument_list|<
name|QSslError
argument_list|>
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|sslErrors
argument_list|(
name|QNetworkReply
operator|*
argument_list|,
name|QList
argument_list|<
name|QSslError
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|connect
argument_list|(
name|progressDialog
argument_list|,
name|SIGNAL
argument_list|(
name|canceled
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|cancelDownload
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|downloadButton
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|downloadFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|quitButton
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|close
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QHBoxLayout
modifier|*
name|topLayout
init|=
operator|new
name|QHBoxLayout
decl_stmt|;
name|topLayout
operator|->
name|addWidget
argument_list|(
name|urlLabel
argument_list|)
expr_stmt|;
name|topLayout
operator|->
name|addWidget
argument_list|(
name|urlLineEdit
argument_list|)
expr_stmt|;
name|QVBoxLayout
modifier|*
name|mainLayout
init|=
operator|new
name|QVBoxLayout
decl_stmt|;
name|mainLayout
operator|->
name|addLayout
argument_list|(
name|topLayout
argument_list|)
expr_stmt|;
name|mainLayout
operator|->
name|addWidget
argument_list|(
name|statusLabel
argument_list|)
expr_stmt|;
name|mainLayout
operator|->
name|addWidget
argument_list|(
name|buttonBox
argument_list|)
expr_stmt|;
name|setLayout
argument_list|(
name|mainLayout
argument_list|)
expr_stmt|;
name|setWindowTitle
argument_list|(
name|tr
argument_list|(
literal|"HTTP"
argument_list|)
argument_list|)
expr_stmt|;
name|urlLineEdit
operator|->
name|setFocus
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|startRequest
name|void
name|HttpWindow
operator|::
name|startRequest
parameter_list|(
name|QUrl
name|url
parameter_list|)
block|{
name|reply
operator|=
name|qnam
operator|.
name|get
argument_list|(
name|QNetworkRequest
argument_list|(
name|url
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|httpFinished
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|httpReadyRead
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|downloadProgress
argument_list|(
name|qint64
argument_list|,
name|qint64
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|updateDataReadProgress
argument_list|(
name|qint64
argument_list|,
name|qint64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|downloadFile
name|void
name|HttpWindow
operator|::
name|downloadFile
parameter_list|()
block|{
name|url
operator|=
name|urlLineEdit
operator|->
name|text
argument_list|()
expr_stmt|;
name|QFileInfo
name|fileInfo
argument_list|(
name|url
operator|.
name|path
argument_list|()
argument_list|)
decl_stmt|;
name|QString
name|fileName
init|=
name|fileInfo
operator|.
name|fileName
argument_list|()
decl_stmt|;
if|if
condition|(
name|fileName
operator|.
name|isEmpty
argument_list|()
condition|)
name|fileName
operator|=
literal|"index.html"
expr_stmt|;
if|if
condition|(
name|QFile
operator|::
name|exists
argument_list|(
name|fileName
argument_list|)
condition|)
block|{
if|if
condition|(
name|QMessageBox
operator|::
name|question
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"HTTP"
argument_list|)
argument_list|,
name|tr
argument_list|(
literal|"There already exists a file called %1 in "
literal|"the current directory. Overwrite?"
argument_list|)
operator|.
name|arg
argument_list|(
name|fileName
argument_list|)
argument_list|,
name|QMessageBox
operator|::
name|Yes
operator||
name|QMessageBox
operator|::
name|No
argument_list|,
name|QMessageBox
operator|::
name|No
argument_list|)
operator|==
name|QMessageBox
operator|::
name|No
condition|)
return|return;
name|QFile
operator|::
name|remove
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
block|}
name|file
operator|=
operator|new
name|QFile
argument_list|(
name|fileName
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|file
operator|->
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
condition|)
block|{
name|QMessageBox
operator|::
name|information
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"HTTP"
argument_list|)
argument_list|,
name|tr
argument_list|(
literal|"Unable to save the file %1: %2."
argument_list|)
operator|.
name|arg
argument_list|(
name|fileName
argument_list|)
operator|.
name|arg
argument_list|(
name|file
operator|->
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|file
expr_stmt|;
name|file
operator|=
literal|0
expr_stmt|;
return|return;
block|}
name|progressDialog
operator|->
name|setWindowTitle
argument_list|(
name|tr
argument_list|(
literal|"HTTP"
argument_list|)
argument_list|)
expr_stmt|;
name|progressDialog
operator|->
name|setLabelText
argument_list|(
name|tr
argument_list|(
literal|"Downloading %1."
argument_list|)
operator|.
name|arg
argument_list|(
name|fileName
argument_list|)
argument_list|)
expr_stmt|;
name|downloadButton
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
comment|// schedule the request
name|httpRequestAborted
operator|=
literal|false
expr_stmt|;
name|startRequest
argument_list|(
name|url
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cancelDownload
name|void
name|HttpWindow
operator|::
name|cancelDownload
parameter_list|()
block|{
name|statusLabel
operator|->
name|setText
argument_list|(
name|tr
argument_list|(
literal|"Download canceled."
argument_list|)
argument_list|)
expr_stmt|;
name|httpRequestAborted
operator|=
literal|true
expr_stmt|;
name|reply
operator|->
name|abort
argument_list|()
expr_stmt|;
name|downloadButton
operator|->
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|httpFinished
name|void
name|HttpWindow
operator|::
name|httpFinished
parameter_list|()
block|{
if|if
condition|(
name|httpRequestAborted
condition|)
block|{
if|if
condition|(
name|file
condition|)
block|{
name|file
operator|->
name|close
argument_list|()
expr_stmt|;
name|file
operator|->
name|remove
argument_list|()
expr_stmt|;
operator|delete
name|file
expr_stmt|;
name|file
operator|=
literal|0
expr_stmt|;
block|}
name|reply
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
name|progressDialog
operator|->
name|hide
argument_list|()
expr_stmt|;
return|return;
block|}
name|progressDialog
operator|->
name|hide
argument_list|()
expr_stmt|;
name|file
operator|->
name|flush
argument_list|()
expr_stmt|;
name|file
operator|->
name|close
argument_list|()
expr_stmt|;
name|QVariant
name|redirectionTarget
init|=
name|reply
operator|->
name|attribute
argument_list|(
name|QNetworkRequest
operator|::
name|RedirectionTargetAttribute
argument_list|)
decl_stmt|;
if|if
condition|(
name|reply
operator|->
name|error
argument_list|()
condition|)
block|{
name|file
operator|->
name|remove
argument_list|()
expr_stmt|;
name|QMessageBox
operator|::
name|information
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"HTTP"
argument_list|)
argument_list|,
name|tr
argument_list|(
literal|"Download failed: %1."
argument_list|)
operator|.
name|arg
argument_list|(
name|reply
operator|->
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|downloadButton
operator|->
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|redirectionTarget
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QUrl
name|newUrl
init|=
name|url
operator|.
name|resolved
argument_list|(
name|redirectionTarget
operator|.
name|toUrl
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|QMessageBox
operator|::
name|question
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"HTTP"
argument_list|)
argument_list|,
name|tr
argument_list|(
literal|"Redirect to %1 ?"
argument_list|)
operator|.
name|arg
argument_list|(
name|newUrl
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|,
name|QMessageBox
operator|::
name|Yes
operator||
name|QMessageBox
operator|::
name|No
argument_list|)
operator|==
name|QMessageBox
operator|::
name|Yes
condition|)
block|{
name|url
operator|=
name|newUrl
expr_stmt|;
name|reply
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
name|file
operator|->
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|file
operator|->
name|resize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|startRequest
argument_list|(
name|url
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
else|else
block|{
name|QString
name|fileName
init|=
name|QFileInfo
argument_list|(
name|QUrl
argument_list|(
name|urlLineEdit
operator|->
name|text
argument_list|()
argument_list|)
operator|.
name|path
argument_list|()
argument_list|)
operator|.
name|fileName
argument_list|()
decl_stmt|;
name|statusLabel
operator|->
name|setText
argument_list|(
name|tr
argument_list|(
literal|"Downloaded %1 to %2."
argument_list|)
operator|.
name|arg
argument_list|(
name|fileName
argument_list|)
operator|.
name|arg
argument_list|(
name|QDir
operator|::
name|currentPath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|downloadButton
operator|->
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|reply
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
name|reply
operator|=
literal|0
expr_stmt|;
operator|delete
name|file
expr_stmt|;
name|file
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|httpReadyRead
name|void
name|HttpWindow
operator|::
name|httpReadyRead
parameter_list|()
block|{
comment|// this slot gets called every time the QNetworkReply has new data.
comment|// We read all of its new data and write it into the file.
comment|// That way we use less RAM than when reading it at the finished()
comment|// signal of the QNetworkReply
if|if
condition|(
name|file
condition|)
name|file
operator|->
name|write
argument_list|(
name|reply
operator|->
name|readAll
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateDataReadProgress
name|void
name|HttpWindow
operator|::
name|updateDataReadProgress
parameter_list|(
name|qint64
name|bytesRead
parameter_list|,
name|qint64
name|totalBytes
parameter_list|)
block|{
if|if
condition|(
name|httpRequestAborted
condition|)
return|return;
name|progressDialog
operator|->
name|setMaximum
argument_list|(
name|totalBytes
argument_list|)
expr_stmt|;
name|progressDialog
operator|->
name|setValue
argument_list|(
name|bytesRead
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|enableDownloadButton
name|void
name|HttpWindow
operator|::
name|enableDownloadButton
parameter_list|()
block|{
name|downloadButton
operator|->
name|setEnabled
argument_list|(
operator|!
name|urlLineEdit
operator|->
name|text
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|slotAuthenticationRequired
name|void
name|HttpWindow
operator|::
name|slotAuthenticationRequired
parameter_list|(
name|QNetworkReply
modifier|*
parameter_list|,
name|QAuthenticator
modifier|*
name|authenticator
parameter_list|)
block|{
name|QDialog
name|dlg
decl_stmt|;
name|Ui
operator|::
name|Dialog
name|ui
decl_stmt|;
name|ui
operator|.
name|setupUi
argument_list|(
operator|&
name|dlg
argument_list|)
expr_stmt|;
name|dlg
operator|.
name|adjustSize
argument_list|()
expr_stmt|;
name|ui
operator|.
name|siteDescription
operator|->
name|setText
argument_list|(
name|tr
argument_list|(
literal|"%1 at %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|authenticator
operator|->
name|realm
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|url
operator|.
name|host
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Did the URL have information? Fill the UI
comment|// This is only relevant if the URL-supplied credentials were wrong
name|ui
operator|.
name|userEdit
operator|->
name|setText
argument_list|(
name|url
operator|.
name|userName
argument_list|()
argument_list|)
expr_stmt|;
name|ui
operator|.
name|passwordEdit
operator|->
name|setText
argument_list|(
name|url
operator|.
name|password
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|dlg
operator|.
name|exec
argument_list|()
operator|==
name|QDialog
operator|::
name|Accepted
condition|)
block|{
name|authenticator
operator|->
name|setUser
argument_list|(
name|ui
operator|.
name|userEdit
operator|->
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|authenticator
operator|->
name|setPassword
argument_list|(
name|ui
operator|.
name|passwordEdit
operator|->
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_OPENSSL
end_ifndef
begin_function
DECL|function|sslErrors
name|void
name|HttpWindow
operator|::
name|sslErrors
parameter_list|(
name|QNetworkReply
modifier|*
parameter_list|,
specifier|const
name|QList
argument_list|<
name|QSslError
argument_list|>
modifier|&
name|errors
parameter_list|)
block|{
name|QString
name|errorString
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QSslError
modifier|&
name|error
decl|,
name|errors
control|)
block|{
if|if
condition|(
operator|!
name|errorString
operator|.
name|isEmpty
argument_list|()
condition|)
name|errorString
operator|+=
literal|", "
expr_stmt|;
name|errorString
operator|+=
name|error
operator|.
name|errorString
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|QMessageBox
operator|::
name|warning
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"HTTP"
argument_list|)
argument_list|,
name|tr
argument_list|(
literal|"One or more SSL errors has occurred: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|errorString
argument_list|)
argument_list|,
name|QMessageBox
operator|::
name|Ignore
operator||
name|QMessageBox
operator|::
name|Abort
argument_list|)
operator|==
name|QMessageBox
operator|::
name|Ignore
condition|)
block|{
name|reply
operator|->
name|ignoreSslErrors
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
end_unit
