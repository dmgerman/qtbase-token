begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor **     the names of its contributors may be used to endorse or promote **     products derived from this software without specific prior written **     permission. ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|TORRENTCLIENT_H
end_ifndef
begin_define
DECL|macro|TORRENTCLIENT_H
define|#
directive|define
name|TORRENTCLIENT_H
end_define
begin_include
include|#
directive|include
file|<QBitArray>
end_include
begin_include
include|#
directive|include
file|<QHostAddress>
end_include
begin_include
include|#
directive|include
file|<QList>
end_include
begin_decl_stmt
DECL|variable|MetaInfo
name|class
name|MetaInfo
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|PeerWireClient
name|class
name|PeerWireClient
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|TorrentClientPrivate
name|class
name|TorrentClientPrivate
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|TorrentPeer
name|class
name|TorrentPeer
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|TorrentPiece
name|class
name|TorrentPiece
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QTimerEvent
name|class
name|QTimerEvent
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QT_END_NAMESPACE
name|class
name|TorrentPeer
block|{
name|public
label|:
name|QHostAddress
name|address
decl_stmt|;
name|quint16
name|port
decl_stmt|;
name|QString
name|id
decl_stmt|;
name|bool
name|interesting
decl_stmt|;
name|bool
name|seed
decl_stmt|;
name|uint
name|lastVisited
decl_stmt|;
name|uint
name|connectStart
decl_stmt|;
name|uint
name|connectTime
decl_stmt|;
name|QBitArray
name|pieces
decl_stmt|;
name|int
name|numCompletedPieces
decl_stmt|;
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|TorrentPeer
operator|&
name|other
operator|)
block|{
return|return
name|port
operator|==
name|other
operator|.
name|port
operator|&&
name|address
operator|==
name|other
operator|.
name|address
operator|&&
name|id
operator|==
name|other
operator|.
name|id
return|;
block|}
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|TorrentClient
range|:
name|public
name|QObject
block|{
name|Q_OBJECT
name|public
operator|:
expr|enum
name|State
block|{
name|Idle
block|,
name|Paused
block|,
name|Stopping
block|,
name|Preparing
block|,
name|Searching
block|,
name|Connecting
block|,
name|WarmingUp
block|,
name|Downloading
block|,
name|Endgame
block|,
name|Seeding
block|}
block|;     enum
name|Error
block|{
name|UnknownError
block|,
name|TorrentParseError
block|,
name|InvalidTrackerError
block|,
name|FileError
block|,
name|ServerError
block|}
block|;
name|TorrentClient
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
operator|~
name|TorrentClient
argument_list|()
block|;
name|bool
name|setTorrent
argument_list|(
specifier|const
name|QString
operator|&
name|fileName
argument_list|)
block|;
name|bool
name|setTorrent
argument_list|(
specifier|const
name|QByteArray
operator|&
name|torrentData
argument_list|)
block|;
name|MetaInfo
name|metaInfo
argument_list|()
specifier|const
block|;
name|void
name|setMaxConnections
argument_list|(
argument|int connections
argument_list|)
block|;
name|int
name|maxConnections
argument_list|()
specifier|const
block|;
name|void
name|setDestinationFolder
argument_list|(
specifier|const
name|QString
operator|&
name|directory
argument_list|)
block|;
name|QString
name|destinationFolder
argument_list|()
specifier|const
block|;
name|void
name|setDumpedState
argument_list|(
specifier|const
name|QByteArray
operator|&
name|dumpedState
argument_list|)
block|;
name|QByteArray
name|dumpedState
argument_list|()
specifier|const
block|;
comment|// Progress and stats for download feedback.
name|qint64
name|progress
argument_list|()
specifier|const
block|;
name|void
name|setDownloadedBytes
argument_list|(
argument|qint64 bytes
argument_list|)
block|;
name|qint64
name|downloadedBytes
argument_list|()
specifier|const
block|;
name|void
name|setUploadedBytes
argument_list|(
argument|qint64 bytes
argument_list|)
block|;
name|qint64
name|uploadedBytes
argument_list|()
specifier|const
block|;
name|int
name|connectedPeerCount
argument_list|()
specifier|const
block|;
name|int
name|seedCount
argument_list|()
specifier|const
block|;
comment|// Accessors for the tracker
name|QByteArray
name|peerId
argument_list|()
specifier|const
block|;
name|QByteArray
name|infoHash
argument_list|()
specifier|const
block|;
name|quint16
name|serverPort
argument_list|()
specifier|const
block|;
comment|// State and error.
name|State
name|state
argument_list|()
specifier|const
block|;
name|QString
name|stateString
argument_list|()
specifier|const
block|;
name|Error
name|error
argument_list|()
specifier|const
block|;
name|QString
name|errorString
argument_list|()
specifier|const
block|;
name|signals
operator|:
name|void
name|stateChanged
argument_list|(
argument|TorrentClient::State state
argument_list|)
block|;
name|void
name|error
argument_list|(
argument|TorrentClient::Error error
argument_list|)
block|;
name|void
name|downloadCompleted
argument_list|()
block|;
name|void
name|peerInfoUpdated
argument_list|()
block|;
name|void
name|dataSent
argument_list|(
argument|int uploadedBytes
argument_list|)
block|;
name|void
name|dataReceived
argument_list|(
argument|int downloadedBytes
argument_list|)
block|;
name|void
name|progressUpdated
argument_list|(
argument|int percentProgress
argument_list|)
block|;
name|void
name|downloadRateUpdated
argument_list|(
argument|int bytesPerSecond
argument_list|)
block|;
name|void
name|uploadRateUpdated
argument_list|(
argument|int bytesPerSecond
argument_list|)
block|;
name|void
name|stopped
argument_list|()
block|;
name|public
name|slots
operator|:
name|void
name|start
argument_list|()
block|;
name|void
name|stop
argument_list|()
block|;
name|void
name|setPaused
argument_list|(
argument|bool paused
argument_list|)
block|;
name|void
name|setupIncomingConnection
argument_list|(
name|PeerWireClient
operator|*
name|client
argument_list|)
block|;
name|protected
name|slots
operator|:
name|void
name|timerEvent
argument_list|(
name|QTimerEvent
operator|*
name|event
argument_list|)
block|;
name|private
name|slots
operator|:
comment|// File management
name|void
name|sendToPeer
argument_list|(
argument|int readId
argument_list|,
argument|int pieceIndex
argument_list|,
argument|int begin
argument_list|,
argument|const QByteArray&data
argument_list|)
block|;
name|void
name|fullVerificationDone
argument_list|()
block|;
name|void
name|pieceVerified
argument_list|(
argument|int pieceIndex
argument_list|,
argument|bool ok
argument_list|)
block|;
name|void
name|handleFileError
argument_list|()
block|;
comment|// Connection handling
name|void
name|connectToPeers
argument_list|()
block|;
name|QList
operator|<
name|TorrentPeer
operator|*
operator|>
name|weighedFreePeers
argument_list|()
specifier|const
block|;
name|void
name|setupOutgoingConnection
argument_list|()
block|;
name|void
name|initializeConnection
argument_list|(
name|PeerWireClient
operator|*
name|client
argument_list|)
block|;
name|void
name|removeClient
argument_list|()
block|;
name|void
name|peerPiecesAvailable
argument_list|(
specifier|const
name|QBitArray
operator|&
name|pieces
argument_list|)
block|;
name|void
name|peerRequestsBlock
argument_list|(
argument|int pieceIndex
argument_list|,
argument|int begin
argument_list|,
argument|int length
argument_list|)
block|;
name|void
name|blockReceived
argument_list|(
argument|int pieceIndex
argument_list|,
argument|int begin
argument_list|,
argument|const QByteArray&data
argument_list|)
block|;
name|void
name|peerWireBytesWritten
argument_list|(
argument|qint64 bytes
argument_list|)
block|;
name|void
name|peerWireBytesReceived
argument_list|(
argument|qint64 bytes
argument_list|)
block|;
name|int
name|blocksLeftForPiece
argument_list|(
argument|const TorrentPiece *piece
argument_list|)
specifier|const
block|;
comment|// Scheduling
name|void
name|scheduleUploads
argument_list|()
block|;
name|void
name|scheduleDownloads
argument_list|()
block|;
name|void
name|schedulePieceForClient
argument_list|(
name|PeerWireClient
operator|*
name|client
argument_list|)
block|;
name|void
name|requestMore
argument_list|(
name|PeerWireClient
operator|*
name|client
argument_list|)
block|;
name|int
name|requestBlocks
argument_list|(
argument|PeerWireClient *client
argument_list|,
argument|TorrentPiece *piece
argument_list|,
argument|int maxBlocks
argument_list|)
block|;
name|void
name|peerChoked
argument_list|()
block|;
name|void
name|peerUnchoked
argument_list|()
block|;
comment|// Tracker handling
name|void
name|addToPeerList
argument_list|(
specifier|const
name|QList
operator|<
name|TorrentPeer
operator|>
operator|&
name|peerList
argument_list|)
block|;
name|void
name|trackerStopped
argument_list|()
block|;
comment|// Progress
name|void
name|updateProgress
argument_list|(
argument|int progress = -
literal|1
argument_list|)
block|;
name|private
operator|:
name|TorrentClientPrivate
operator|*
name|d
block|;
name|friend
name|class
name|TorrentClientPrivate
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
end_unit
