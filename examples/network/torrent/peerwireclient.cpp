begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor **     the names of its contributors may be used to endorse or promote **     products derived from this software without specific prior written **     permission. ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"peerwireclient.h"
end_include
begin_include
include|#
directive|include
file|<QHostAddress>
end_include
begin_include
include|#
directive|include
file|<QTimerEvent>
end_include
begin_decl_stmt
DECL|variable|PendingRequestTimeout
specifier|static
specifier|const
name|int
name|PendingRequestTimeout
init|=
literal|60
operator|*
literal|1000
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ClientTimeout
specifier|static
specifier|const
name|int
name|ClientTimeout
init|=
literal|120
operator|*
literal|1000
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ConnectTimeout
specifier|static
specifier|const
name|int
name|ConnectTimeout
init|=
literal|60
operator|*
literal|1000
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|KeepAliveInterval
specifier|static
specifier|const
name|int
name|KeepAliveInterval
init|=
literal|30
operator|*
literal|1000
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|RateControlTimerDelay
specifier|static
specifier|const
name|int
name|RateControlTimerDelay
init|=
literal|2000
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|MinimalHeaderSize
specifier|static
specifier|const
name|int
name|MinimalHeaderSize
init|=
literal|48
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|FullHeaderSize
specifier|static
specifier|const
name|int
name|FullHeaderSize
init|=
literal|68
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ProtocolId
specifier|static
specifier|const
name|char
name|ProtocolId
index|[]
init|=
literal|"BitTorrent protocol"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ProtocolIdSize
specifier|static
specifier|const
name|char
name|ProtocolIdSize
init|=
literal|19
decl_stmt|;
end_decl_stmt
begin_comment
comment|// Reads a 32bit unsigned int from data in network order.
end_comment
begin_function
DECL|function|fromNetworkData
specifier|static
specifier|inline
name|quint32
name|fromNetworkData
parameter_list|(
specifier|const
name|char
modifier|*
name|data
parameter_list|)
block|{
specifier|const
name|unsigned
name|char
modifier|*
name|udata
init|=
operator|(
specifier|const
name|unsigned
name|char
operator|*
operator|)
name|data
decl_stmt|;
return|return
operator|(
name|quint32
argument_list|(
name|udata
index|[
literal|0
index|]
argument_list|)
operator|<<
literal|24
operator|)
operator||
operator|(
name|quint32
argument_list|(
name|udata
index|[
literal|1
index|]
argument_list|)
operator|<<
literal|16
operator|)
operator||
operator|(
name|quint32
argument_list|(
name|udata
index|[
literal|2
index|]
argument_list|)
operator|<<
literal|8
operator|)
operator||
operator|(
name|quint32
argument_list|(
name|udata
index|[
literal|3
index|]
argument_list|)
operator|)
return|;
block|}
end_function
begin_comment
comment|// Writes a 32bit unsigned int from num to data in network order.
end_comment
begin_function
DECL|function|toNetworkData
specifier|static
specifier|inline
name|void
name|toNetworkData
parameter_list|(
name|quint32
name|num
parameter_list|,
name|char
modifier|*
name|data
parameter_list|)
block|{
name|unsigned
name|char
modifier|*
name|udata
init|=
operator|(
name|unsigned
name|char
operator|*
operator|)
name|data
decl_stmt|;
name|udata
index|[
literal|3
index|]
operator|=
operator|(
name|num
operator|&
literal|0xff
operator|)
expr_stmt|;
name|udata
index|[
literal|2
index|]
operator|=
operator|(
name|num
operator|&
literal|0xff00
operator|)
operator|>>
literal|8
expr_stmt|;
name|udata
index|[
literal|1
index|]
operator|=
operator|(
name|num
operator|&
literal|0xff0000
operator|)
operator|>>
literal|16
expr_stmt|;
name|udata
index|[
literal|0
index|]
operator|=
operator|(
name|num
operator|&
literal|0xff000000
operator|)
operator|>>
literal|24
expr_stmt|;
block|}
end_function
begin_comment
comment|// Constructs an unconnected PeerWire client and starts the connect timer.
end_comment
begin_constructor
DECL|function|PeerWireClient
name|PeerWireClient
operator|::
name|PeerWireClient
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|peerId
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QTcpSocket
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|pendingBlockSizes
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|pwState
argument_list|(
name|ChokingPeer
operator||
name|ChokedByPeer
argument_list|)
member_init_list|,
name|receivedHandShake
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|gotPeerId
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|sentHandShake
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|nextPacketLength
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|pendingRequestTimer
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|invalidateTimeout
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|keepAliveTimer
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|torrentPeer
argument_list|(
literal|0
argument_list|)
block|{
name|memset
argument_list|(
name|uploadSpeedData
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|uploadSpeedData
argument_list|)
argument_list|)
expr_stmt|;
name|memset
argument_list|(
name|downloadSpeedData
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|downloadSpeedData
argument_list|)
argument_list|)
expr_stmt|;
name|transferSpeedTimer
operator|=
name|startTimer
argument_list|(
name|RateControlTimerDelay
argument_list|)
expr_stmt|;
name|timeoutTimer
operator|=
name|startTimer
argument_list|(
name|ConnectTimeout
argument_list|)
expr_stmt|;
name|peerIdString
operator|=
name|peerId
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|readyToTransfer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|connected
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|readyToTransfer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|connected
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|connected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|disconnected
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|disconnected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|error
argument_list|(
name|QAbstractSocket
operator|::
name|SocketError
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|error
argument_list|(
name|QAbstractSocket
operator|::
name|SocketError
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|bytesWritten
argument_list|(
name|qint64
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|bytesWritten
argument_list|(
name|qint64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|stateChanged
argument_list|(
name|QAbstractSocket
operator|::
name|SocketState
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|socketStateChanged
argument_list|(
name|QAbstractSocket
operator|::
name|SocketState
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|// Registers the peer ID and SHA1 sum of the torrent, and initiates
end_comment
begin_comment
comment|// the handshake.
end_comment
begin_function
DECL|function|initialize
name|void
name|PeerWireClient
operator|::
name|initialize
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|infoHash
parameter_list|,
name|int
name|pieceCount
parameter_list|)
block|{
name|this
operator|->
name|infoHash
operator|=
name|infoHash
expr_stmt|;
name|peerPieces
operator|.
name|resize
argument_list|(
name|pieceCount
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sentHandShake
condition|)
name|sendHandShake
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setPeer
name|void
name|PeerWireClient
operator|::
name|setPeer
parameter_list|(
name|TorrentPeer
modifier|*
name|peer
parameter_list|)
block|{
name|torrentPeer
operator|=
name|peer
expr_stmt|;
block|}
end_function
begin_function
DECL|function|peer
name|TorrentPeer
modifier|*
name|PeerWireClient
operator|::
name|peer
parameter_list|()
specifier|const
block|{
return|return
name|torrentPeer
return|;
block|}
end_function
begin_function
DECL|function|availablePieces
name|QBitArray
name|PeerWireClient
operator|::
name|availablePieces
parameter_list|()
specifier|const
block|{
return|return
name|peerPieces
return|;
block|}
end_function
begin_function
DECL|function|incomingBlocks
name|QList
argument_list|<
name|TorrentBlock
argument_list|>
name|PeerWireClient
operator|::
name|incomingBlocks
parameter_list|()
specifier|const
block|{
return|return
name|incoming
return|;
block|}
end_function
begin_comment
comment|// Sends a "choke" message, asking the peer to stop requesting blocks.
end_comment
begin_function
DECL|function|chokePeer
name|void
name|PeerWireClient
operator|::
name|chokePeer
parameter_list|()
block|{
specifier|const
name|char
name|message
index|[]
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|}
decl_stmt|;
name|write
argument_list|(
name|message
argument_list|,
sizeof|sizeof
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
name|pwState
operator||=
name|ChokingPeer
expr_stmt|;
comment|// After receiving a choke message, the peer will assume all
comment|// pending requests are lost.
name|pendingBlocks
operator|.
name|clear
argument_list|()
expr_stmt|;
name|pendingBlockSizes
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_comment
comment|// Sends an "unchoke" message, allowing the peer to start/resume
end_comment
begin_comment
comment|// requesting blocks.
end_comment
begin_function
DECL|function|unchokePeer
name|void
name|PeerWireClient
operator|::
name|unchokePeer
parameter_list|()
block|{
specifier|const
name|char
name|message
index|[]
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|1
block|}
decl_stmt|;
name|write
argument_list|(
name|message
argument_list|,
sizeof|sizeof
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
name|pwState
operator|&=
operator|~
name|ChokingPeer
expr_stmt|;
if|if
condition|(
name|pendingRequestTimer
condition|)
name|killTimer
argument_list|(
name|pendingRequestTimer
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Sends a "keep-alive" message to prevent the peer from closing
end_comment
begin_comment
comment|// the connection when there's no activity
end_comment
begin_function
DECL|function|sendKeepAlive
name|void
name|PeerWireClient
operator|::
name|sendKeepAlive
parameter_list|()
block|{
specifier|const
name|char
name|message
index|[]
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
name|write
argument_list|(
name|message
argument_list|,
sizeof|sizeof
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Sends an "interested" message, informing the peer that it has got
end_comment
begin_comment
comment|// pieces that we'd like to download.
end_comment
begin_function
DECL|function|sendInterested
name|void
name|PeerWireClient
operator|::
name|sendInterested
parameter_list|()
block|{
specifier|const
name|char
name|message
index|[]
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|2
block|}
decl_stmt|;
name|write
argument_list|(
name|message
argument_list|,
sizeof|sizeof
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
name|pwState
operator||=
name|InterestedInPeer
expr_stmt|;
comment|// After telling the peer that we're interested, we expect to get
comment|// unchoked within a certain timeframe; otherwise we'll drop the
comment|// connection.
if|if
condition|(
name|pendingRequestTimer
condition|)
name|killTimer
argument_list|(
name|pendingRequestTimer
argument_list|)
expr_stmt|;
name|pendingRequestTimer
operator|=
name|startTimer
argument_list|(
name|PendingRequestTimeout
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Sends a "not interested" message, informing the peer that it does
end_comment
begin_comment
comment|// not have any pieces that we'd like to download.
end_comment
begin_function
DECL|function|sendNotInterested
name|void
name|PeerWireClient
operator|::
name|sendNotInterested
parameter_list|()
block|{
specifier|const
name|char
name|message
index|[]
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|3
block|}
decl_stmt|;
name|write
argument_list|(
name|message
argument_list|,
sizeof|sizeof
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
name|pwState
operator|&=
operator|~
name|InterestedInPeer
expr_stmt|;
block|}
end_function
begin_comment
comment|// Sends a piece notification / a "have" message, informing the peer
end_comment
begin_comment
comment|// that we have just downloaded a new piece.
end_comment
begin_function
DECL|function|sendPieceNotification
name|void
name|PeerWireClient
operator|::
name|sendPieceNotification
parameter_list|(
name|int
name|piece
parameter_list|)
block|{
if|if
condition|(
operator|!
name|sentHandShake
condition|)
name|sendHandShake
argument_list|()
expr_stmt|;
name|char
name|message
index|[]
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|5
block|,
literal|4
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
name|toNetworkData
argument_list|(
name|piece
argument_list|,
operator|&
name|message
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|message
argument_list|,
sizeof|sizeof
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Sends the complete list of pieces that we have downloaded.
end_comment
begin_function
DECL|function|sendPieceList
name|void
name|PeerWireClient
operator|::
name|sendPieceList
parameter_list|(
specifier|const
name|QBitArray
modifier|&
name|bitField
parameter_list|)
block|{
comment|// The bitfield message may only be sent immediately after the
comment|// handshaking sequence is completed, and before any other
comment|// messages are sent.
if|if
condition|(
operator|!
name|sentHandShake
condition|)
name|sendHandShake
argument_list|()
expr_stmt|;
comment|// Don't send the bitfield if it's all zeros.
if|if
condition|(
name|bitField
operator|.
name|count
argument_list|(
literal|true
argument_list|)
operator|==
literal|0
condition|)
return|return;
name|int
name|bitFieldSize
init|=
name|bitField
operator|.
name|size
argument_list|()
decl_stmt|;
name|int
name|size
init|=
operator|(
name|bitFieldSize
operator|+
literal|7
operator|)
operator|/
literal|8
decl_stmt|;
name|QByteArray
name|bits
argument_list|(
name|size
argument_list|,
literal|'\0'
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bitFieldSize
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|bitField
operator|.
name|testBit
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|quint32
name|byte
init|=
name|quint32
argument_list|(
name|i
argument_list|)
operator|/
literal|8
decl_stmt|;
name|quint32
name|bit
init|=
name|quint32
argument_list|(
name|i
argument_list|)
operator|%
literal|8
decl_stmt|;
name|bits
index|[
name|byte
index|]
operator|=
name|uchar
argument_list|(
name|bits
operator|.
name|at
argument_list|(
name|byte
argument_list|)
argument_list|)
operator||
operator|(
literal|1
operator|<<
operator|(
literal|7
operator|-
name|bit
operator|)
operator|)
expr_stmt|;
block|}
block|}
name|char
name|message
index|[]
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|5
block|}
decl_stmt|;
name|toNetworkData
argument_list|(
name|bits
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|,
operator|&
name|message
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|message
argument_list|,
sizeof|sizeof
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|bits
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Sends a request for a block.
end_comment
begin_function
DECL|function|requestBlock
name|void
name|PeerWireClient
operator|::
name|requestBlock
parameter_list|(
name|int
name|piece
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|char
name|message
index|[]
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|6
block|}
decl_stmt|;
name|toNetworkData
argument_list|(
literal|13
argument_list|,
operator|&
name|message
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|message
argument_list|,
sizeof|sizeof
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
name|char
name|numbers
index|[
literal|4
operator|*
literal|3
index|]
decl_stmt|;
name|toNetworkData
argument_list|(
name|piece
argument_list|,
operator|&
name|numbers
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|toNetworkData
argument_list|(
name|offset
argument_list|,
operator|&
name|numbers
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|toNetworkData
argument_list|(
name|length
argument_list|,
operator|&
name|numbers
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|numbers
argument_list|,
sizeof|sizeof
argument_list|(
name|numbers
argument_list|)
argument_list|)
expr_stmt|;
name|incoming
operator|<<
name|TorrentBlock
argument_list|(
name|piece
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
expr_stmt|;
comment|// After requesting a block, we expect the block to be sent by the
comment|// other peer within a certain number of seconds. Otherwise, we
comment|// drop the connection.
if|if
condition|(
name|pendingRequestTimer
condition|)
name|killTimer
argument_list|(
name|pendingRequestTimer
argument_list|)
expr_stmt|;
name|pendingRequestTimer
operator|=
name|startTimer
argument_list|(
name|PendingRequestTimeout
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Cancels a request for a block.
end_comment
begin_function
DECL|function|cancelRequest
name|void
name|PeerWireClient
operator|::
name|cancelRequest
parameter_list|(
name|int
name|piece
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
block|{
name|char
name|message
index|[]
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|8
block|}
decl_stmt|;
name|toNetworkData
argument_list|(
literal|13
argument_list|,
operator|&
name|message
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|message
argument_list|,
sizeof|sizeof
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
name|char
name|numbers
index|[
literal|4
operator|*
literal|3
index|]
decl_stmt|;
name|toNetworkData
argument_list|(
name|piece
argument_list|,
operator|&
name|numbers
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|toNetworkData
argument_list|(
name|offset
argument_list|,
operator|&
name|numbers
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|toNetworkData
argument_list|(
name|length
argument_list|,
operator|&
name|numbers
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|numbers
argument_list|,
sizeof|sizeof
argument_list|(
name|numbers
argument_list|)
argument_list|)
expr_stmt|;
name|incoming
operator|.
name|removeAll
argument_list|(
name|TorrentBlock
argument_list|(
name|piece
argument_list|,
name|offset
argument_list|,
name|length
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Sends a block to the peer.
end_comment
begin_function
DECL|function|sendBlock
name|void
name|PeerWireClient
operator|::
name|sendBlock
parameter_list|(
name|int
name|piece
parameter_list|,
name|int
name|offset
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|data
parameter_list|)
block|{
name|QByteArray
name|block
decl_stmt|;
name|char
name|message
index|[]
init|=
block|{
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|7
block|}
decl_stmt|;
name|toNetworkData
argument_list|(
literal|9
operator|+
name|data
operator|.
name|size
argument_list|()
argument_list|,
operator|&
name|message
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|block
operator|+=
name|QByteArray
argument_list|(
name|message
argument_list|,
sizeof|sizeof
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
name|char
name|numbers
index|[
literal|4
operator|*
literal|2
index|]
decl_stmt|;
name|toNetworkData
argument_list|(
name|piece
argument_list|,
operator|&
name|numbers
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|toNetworkData
argument_list|(
name|offset
argument_list|,
operator|&
name|numbers
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
name|block
operator|+=
name|QByteArray
argument_list|(
name|numbers
argument_list|,
sizeof|sizeof
argument_list|(
name|numbers
argument_list|)
argument_list|)
expr_stmt|;
name|block
operator|+=
name|data
expr_stmt|;
name|BlockInfo
name|blockInfo
decl_stmt|;
name|blockInfo
operator|.
name|pieceIndex
operator|=
name|piece
expr_stmt|;
name|blockInfo
operator|.
name|offset
operator|=
name|offset
expr_stmt|;
name|blockInfo
operator|.
name|length
operator|=
name|data
operator|.
name|size
argument_list|()
expr_stmt|;
name|blockInfo
operator|.
name|block
operator|=
name|block
expr_stmt|;
name|pendingBlocks
operator|<<
name|blockInfo
expr_stmt|;
name|pendingBlockSizes
operator|+=
name|block
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|pendingBlockSizes
operator|>
literal|32
operator|*
literal|16384
condition|)
block|{
name|chokePeer
argument_list|()
expr_stmt|;
name|unchokePeer
argument_list|()
expr_stmt|;
return|return;
block|}
emit|emit
name|readyToTransfer
argument_list|()
emit|;
block|}
end_function
begin_comment
comment|// Attempts to write 'bytes' bytes to the socket from the buffer.
end_comment
begin_comment
comment|// This is used by RateController, which precisely controls how much
end_comment
begin_comment
comment|// each client can write.
end_comment
begin_function
DECL|function|writeToSocket
name|qint64
name|PeerWireClient
operator|::
name|writeToSocket
parameter_list|(
name|qint64
name|bytes
parameter_list|)
block|{
name|qint64
name|totalWritten
init|=
literal|0
decl_stmt|;
do|do
block|{
if|if
condition|(
name|outgoingBuffer
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|pendingBlocks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|BlockInfo
name|block
init|=
name|pendingBlocks
operator|.
name|takeFirst
argument_list|()
decl_stmt|;
name|pendingBlockSizes
operator|-=
name|block
operator|.
name|length
expr_stmt|;
name|outgoingBuffer
operator|+=
name|block
operator|.
name|block
expr_stmt|;
block|}
name|qint64
name|written
init|=
name|socket
operator|.
name|write
argument_list|(
name|outgoingBuffer
operator|.
name|constData
argument_list|()
argument_list|,
name|qMin
argument_list|<
name|qint64
argument_list|>
argument_list|(
name|bytes
operator|-
name|totalWritten
argument_list|,
name|outgoingBuffer
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|written
operator|<=
literal|0
condition|)
return|return
name|totalWritten
condition|?
name|totalWritten
else|:
name|written
return|;
name|totalWritten
operator|+=
name|written
expr_stmt|;
name|uploadSpeedData
index|[
literal|0
index|]
operator|+=
name|written
expr_stmt|;
name|outgoingBuffer
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
name|written
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|totalWritten
operator|<
name|bytes
operator|&&
operator|(
operator|!
name|outgoingBuffer
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|pendingBlocks
operator|.
name|isEmpty
argument_list|()
operator|)
condition|)
do|;
return|return
name|totalWritten
return|;
block|}
end_function
begin_comment
comment|// Attempts to read at most 'bytes' bytes from the socket.
end_comment
begin_function
DECL|function|readFromSocket
name|qint64
name|PeerWireClient
operator|::
name|readFromSocket
parameter_list|(
name|qint64
name|bytes
parameter_list|)
block|{
name|char
name|buffer
index|[
literal|1024
index|]
decl_stmt|;
name|qint64
name|totalRead
init|=
literal|0
decl_stmt|;
do|do
block|{
name|qint64
name|bytesRead
init|=
name|socket
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
name|qMin
argument_list|<
name|qint64
argument_list|>
argument_list|(
sizeof|sizeof
argument_list|(
name|buffer
argument_list|)
argument_list|,
name|bytes
operator|-
name|totalRead
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytesRead
operator|<=
literal|0
condition|)
break|break;
name|qint64
name|oldSize
init|=
name|incomingBuffer
operator|.
name|size
argument_list|()
decl_stmt|;
name|incomingBuffer
operator|.
name|resize
argument_list|(
name|oldSize
operator|+
name|bytesRead
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|incomingBuffer
operator|.
name|data
argument_list|()
operator|+
name|oldSize
argument_list|,
name|buffer
argument_list|,
name|bytesRead
argument_list|)
expr_stmt|;
name|totalRead
operator|+=
name|bytesRead
expr_stmt|;
block|}
do|while
condition|(
name|totalRead
operator|<
name|bytes
condition|)
do|;
if|if
condition|(
name|totalRead
operator|>
literal|0
condition|)
block|{
name|downloadSpeedData
index|[
literal|0
index|]
operator|+=
name|totalRead
expr_stmt|;
emit|emit
name|bytesReceived
argument_list|(
name|totalRead
argument_list|)
emit|;
name|processIncomingData
argument_list|()
expr_stmt|;
block|}
return|return
name|totalRead
return|;
block|}
end_function
begin_comment
comment|// Returns the average number of bytes per second this client is
end_comment
begin_comment
comment|// downloading.
end_comment
begin_function
DECL|function|downloadSpeed
name|qint64
name|PeerWireClient
operator|::
name|downloadSpeed
parameter_list|()
specifier|const
block|{
name|qint64
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|unsigned
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
sizeof|sizeof
argument_list|(
name|downloadSpeedData
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|qint64
argument_list|)
condition|;
operator|++
name|i
control|)
name|sum
operator|+=
name|downloadSpeedData
index|[
name|i
index|]
expr_stmt|;
return|return
name|sum
operator|/
operator|(
literal|8
operator|*
literal|2
operator|)
return|;
block|}
end_function
begin_comment
comment|// Returns the average number of bytes per second this client is
end_comment
begin_comment
comment|// uploading.
end_comment
begin_function
DECL|function|uploadSpeed
name|qint64
name|PeerWireClient
operator|::
name|uploadSpeed
parameter_list|()
specifier|const
block|{
name|qint64
name|sum
init|=
literal|0
decl_stmt|;
for|for
control|(
name|unsigned
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
sizeof|sizeof
argument_list|(
name|uploadSpeedData
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|qint64
argument_list|)
condition|;
operator|++
name|i
control|)
name|sum
operator|+=
name|uploadSpeedData
index|[
name|i
index|]
expr_stmt|;
return|return
name|sum
operator|/
operator|(
literal|8
operator|*
literal|2
operator|)
return|;
block|}
end_function
begin_function
DECL|function|setReadBufferSize
name|void
name|PeerWireClient
operator|::
name|setReadBufferSize
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|socket
operator|.
name|setReadBufferSize
argument_list|(
name|size
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|canTransferMore
name|bool
name|PeerWireClient
operator|::
name|canTransferMore
parameter_list|()
specifier|const
block|{
return|return
name|bytesAvailable
argument_list|()
operator|>
literal|0
operator|||
name|socket
operator|.
name|bytesAvailable
argument_list|()
operator|>
literal|0
operator|||
operator|!
name|outgoingBuffer
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|pendingBlocks
operator|.
name|isEmpty
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|connectToHostImplementation
name|void
name|PeerWireClient
operator|::
name|connectToHostImplementation
parameter_list|(
specifier|const
name|QString
modifier|&
name|hostName
parameter_list|,
name|quint16
name|port
parameter_list|,
name|OpenMode
name|openMode
parameter_list|)
block|{
name|setOpenMode
argument_list|(
name|openMode
argument_list|)
expr_stmt|;
name|socket
operator|.
name|connectToHost
argument_list|(
name|hostName
argument_list|,
name|port
argument_list|,
name|openMode
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|diconnectFromHostImplementation
name|void
name|PeerWireClient
operator|::
name|diconnectFromHostImplementation
parameter_list|()
block|{
name|socket
operator|.
name|disconnectFromHost
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|timerEvent
name|void
name|PeerWireClient
operator|::
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|timerId
argument_list|()
operator|==
name|transferSpeedTimer
condition|)
block|{
comment|// Rotate the upload / download records.
for|for
control|(
name|int
name|i
init|=
literal|6
init|;
name|i
operator|>=
literal|0
condition|;
operator|--
name|i
control|)
block|{
name|uploadSpeedData
index|[
name|i
operator|+
literal|1
index|]
operator|=
name|uploadSpeedData
index|[
name|i
index|]
expr_stmt|;
name|downloadSpeedData
index|[
name|i
operator|+
literal|1
index|]
operator|=
name|downloadSpeedData
index|[
name|i
index|]
expr_stmt|;
block|}
name|uploadSpeedData
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
name|downloadSpeedData
index|[
literal|0
index|]
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|timerId
argument_list|()
operator|==
name|timeoutTimer
condition|)
block|{
comment|// Disconnect if we timed out; otherwise the timeout is
comment|// restarted.
if|if
condition|(
name|invalidateTimeout
condition|)
block|{
name|invalidateTimeout
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|abort
argument_list|()
expr_stmt|;
emit|emit
name|infoHashReceived
argument_list|(
name|QByteArray
argument_list|()
argument_list|)
emit|;
block|}
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|timerId
argument_list|()
operator|==
name|pendingRequestTimer
condition|)
block|{
name|abort
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|event
operator|->
name|timerId
argument_list|()
operator|==
name|keepAliveTimer
condition|)
block|{
name|sendKeepAlive
argument_list|()
expr_stmt|;
block|}
name|QTcpSocket
operator|::
name|timerEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Sends the handshake to the peer.
end_comment
begin_function
DECL|function|sendHandShake
name|void
name|PeerWireClient
operator|::
name|sendHandShake
parameter_list|()
block|{
name|sentHandShake
operator|=
literal|true
expr_stmt|;
comment|// Restart the timeout
if|if
condition|(
name|timeoutTimer
condition|)
name|killTimer
argument_list|(
name|timeoutTimer
argument_list|)
expr_stmt|;
name|timeoutTimer
operator|=
name|startTimer
argument_list|(
name|ClientTimeout
argument_list|)
expr_stmt|;
comment|// Write the 68 byte PeerWire handshake.
name|write
argument_list|(
operator|&
name|ProtocolIdSize
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|ProtocolId
argument_list|,
name|ProtocolIdSize
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|QByteArray
argument_list|(
literal|8
argument_list|,
literal|'\0'
argument_list|)
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|infoHash
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|peerIdString
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|processIncomingData
name|void
name|PeerWireClient
operator|::
name|processIncomingData
parameter_list|()
block|{
name|invalidateTimeout
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|receivedHandShake
condition|)
block|{
comment|// Check that we received enough data
if|if
condition|(
name|bytesAvailable
argument_list|()
operator|<
name|MinimalHeaderSize
condition|)
return|return;
comment|// Sanity check the protocol ID
name|QByteArray
name|id
init|=
name|read
argument_list|(
name|ProtocolIdSize
operator|+
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|id
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|!=
name|ProtocolIdSize
operator|||
operator|!
name|id
operator|.
name|mid
argument_list|(
literal|1
argument_list|)
operator|.
name|startsWith
argument_list|(
name|ProtocolId
argument_list|)
condition|)
block|{
name|abort
argument_list|()
expr_stmt|;
return|return;
block|}
comment|// Discard 8 reserved bytes, then read the info hash and peer ID
operator|(
name|void
operator|)
name|read
argument_list|(
literal|8
argument_list|)
expr_stmt|;
comment|// Read infoHash
name|QByteArray
name|peerInfoHash
init|=
name|read
argument_list|(
literal|20
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|infoHash
operator|.
name|isEmpty
argument_list|()
operator|&&
name|peerInfoHash
operator|!=
name|infoHash
condition|)
block|{
name|abort
argument_list|()
expr_stmt|;
return|return;
block|}
emit|emit
name|infoHashReceived
argument_list|(
name|peerInfoHash
argument_list|)
emit|;
if|if
condition|(
name|infoHash
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|abort
argument_list|()
expr_stmt|;
return|return;
block|}
comment|// Send handshake
if|if
condition|(
operator|!
name|sentHandShake
condition|)
name|sendHandShake
argument_list|()
expr_stmt|;
name|receivedHandShake
operator|=
literal|true
expr_stmt|;
block|}
comment|// Handle delayed peer id arrival
if|if
condition|(
operator|!
name|gotPeerId
condition|)
block|{
if|if
condition|(
name|bytesAvailable
argument_list|()
operator|<
literal|20
condition|)
return|return;
name|gotPeerId
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|read
argument_list|(
literal|20
argument_list|)
operator|==
name|peerIdString
condition|)
block|{
comment|// We connected to ourself
name|abort
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
comment|// Initialize keep-alive timer
if|if
condition|(
operator|!
name|keepAliveTimer
condition|)
name|keepAliveTimer
operator|=
name|startTimer
argument_list|(
name|KeepAliveInterval
argument_list|)
expr_stmt|;
do|do
block|{
comment|// Find the packet length
if|if
condition|(
name|nextPacketLength
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|bytesAvailable
argument_list|()
operator|<
literal|4
condition|)
return|return;
name|char
name|tmp
index|[
literal|4
index|]
decl_stmt|;
name|read
argument_list|(
name|tmp
argument_list|,
sizeof|sizeof
argument_list|(
name|tmp
argument_list|)
argument_list|)
expr_stmt|;
name|nextPacketLength
operator|=
name|fromNetworkData
argument_list|(
name|tmp
argument_list|)
expr_stmt|;
if|if
condition|(
name|nextPacketLength
argument_list|<
literal|0
operator|||
name|nextPacketLength
argument_list|>
literal|200000
condition|)
block|{
comment|// Prevent DoS
name|abort
argument_list|()
expr_stmt|;
return|return;
block|}
block|}
comment|// KeepAlive
if|if
condition|(
name|nextPacketLength
operator|==
literal|0
condition|)
block|{
name|nextPacketLength
operator|=
operator|-
literal|1
expr_stmt|;
continue|continue;
block|}
comment|// Wait with parsing until the whole packet has been received
if|if
condition|(
name|bytesAvailable
argument_list|()
operator|<
name|nextPacketLength
condition|)
return|return;
comment|// Read the packet
name|QByteArray
name|packet
init|=
name|read
argument_list|(
name|nextPacketLength
argument_list|)
decl_stmt|;
if|if
condition|(
name|packet
operator|.
name|size
argument_list|()
operator|!=
name|nextPacketLength
condition|)
block|{
name|abort
argument_list|()
expr_stmt|;
return|return;
block|}
switch|switch
condition|(
name|packet
operator|.
name|at
argument_list|(
literal|0
argument_list|)
condition|)
block|{
case|case
name|ChokePacket
case|:
comment|// We have been choked.
name|pwState
operator||=
name|ChokedByPeer
expr_stmt|;
name|incoming
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|pendingRequestTimer
condition|)
name|killTimer
argument_list|(
name|pendingRequestTimer
argument_list|)
expr_stmt|;
emit|emit
name|choked
argument_list|()
emit|;
break|break;
case|case
name|UnchokePacket
case|:
comment|// We have been unchoked.
name|pwState
operator|&=
operator|~
name|ChokedByPeer
expr_stmt|;
emit|emit
name|unchoked
argument_list|()
emit|;
break|break;
case|case
name|InterestedPacket
case|:
comment|// The peer is interested in downloading.
name|pwState
operator||=
name|PeerIsInterested
expr_stmt|;
emit|emit
name|interested
argument_list|()
emit|;
break|break;
case|case
name|NotInterestedPacket
case|:
comment|// The peer is not interested in downloading.
name|pwState
operator|&=
operator|~
name|PeerIsInterested
expr_stmt|;
emit|emit
name|notInterested
argument_list|()
emit|;
break|break;
case|case
name|HavePacket
case|:
block|{
comment|// The peer has a new piece available.
name|quint32
name|index
init|=
name|fromNetworkData
argument_list|(
operator|&
name|packet
operator|.
name|data
argument_list|()
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|<
name|quint32
argument_list|(
name|peerPieces
operator|.
name|size
argument_list|()
argument_list|)
condition|)
block|{
comment|// Only accept indexes within the valid range.
name|peerPieces
operator|.
name|setBit
argument_list|(
name|int
argument_list|(
name|index
argument_list|)
argument_list|)
expr_stmt|;
block|}
emit|emit
name|piecesAvailable
argument_list|(
name|availablePieces
argument_list|()
argument_list|)
emit|;
break|break;
block|}
case|case
name|BitFieldPacket
case|:
comment|// The peer has the following pieces available.
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|packet
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
for|for
control|(
name|int
name|bit
init|=
literal|0
init|;
name|bit
operator|<
literal|8
condition|;
operator|++
name|bit
control|)
block|{
if|if
condition|(
name|packet
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|&
operator|(
literal|1
operator|<<
operator|(
literal|7
operator|-
name|bit
operator|)
operator|)
condition|)
block|{
name|int
name|bitIndex
init|=
name|int
argument_list|(
operator|(
operator|(
name|i
operator|-
literal|1
operator|)
operator|*
literal|8
operator|)
operator|+
name|bit
argument_list|)
decl_stmt|;
if|if
condition|(
name|bitIndex
operator|>=
literal|0
operator|&&
name|bitIndex
operator|<
name|peerPieces
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// Occasionally, broken clients claim to have
comment|// pieces whose index is outside the valid range.
comment|// The most common mistake is the index == size
comment|// case.
name|peerPieces
operator|.
name|setBit
argument_list|(
name|bitIndex
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
emit|emit
name|piecesAvailable
argument_list|(
name|availablePieces
argument_list|()
argument_list|)
emit|;
break|break;
case|case
name|RequestPacket
case|:
block|{
comment|// The peer requests a block.
name|quint32
name|index
init|=
name|fromNetworkData
argument_list|(
operator|&
name|packet
operator|.
name|data
argument_list|()
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|quint32
name|begin
init|=
name|fromNetworkData
argument_list|(
operator|&
name|packet
operator|.
name|data
argument_list|()
index|[
literal|5
index|]
argument_list|)
decl_stmt|;
name|quint32
name|length
init|=
name|fromNetworkData
argument_list|(
operator|&
name|packet
operator|.
name|data
argument_list|()
index|[
literal|9
index|]
argument_list|)
decl_stmt|;
emit|emit
name|blockRequested
argument_list|(
name|int
argument_list|(
name|index
argument_list|)
argument_list|,
name|int
argument_list|(
name|begin
argument_list|)
argument_list|,
name|int
argument_list|(
name|length
argument_list|)
argument_list|)
emit|;
break|break;
block|}
case|case
name|PiecePacket
case|:
block|{
name|int
name|index
init|=
name|int
argument_list|(
name|fromNetworkData
argument_list|(
operator|&
name|packet
operator|.
name|data
argument_list|()
index|[
literal|1
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|begin
init|=
name|int
argument_list|(
name|fromNetworkData
argument_list|(
operator|&
name|packet
operator|.
name|data
argument_list|()
index|[
literal|5
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|incoming
operator|.
name|removeAll
argument_list|(
name|TorrentBlock
argument_list|(
name|index
argument_list|,
name|begin
argument_list|,
name|packet
operator|.
name|size
argument_list|()
operator|-
literal|9
argument_list|)
argument_list|)
expr_stmt|;
comment|// The peer sends a block.
emit|emit
name|blockReceived
argument_list|(
name|index
argument_list|,
name|begin
argument_list|,
name|packet
operator|.
name|mid
argument_list|(
literal|9
argument_list|)
argument_list|)
emit|;
comment|// Kill the pending block timer.
if|if
condition|(
name|pendingRequestTimer
condition|)
block|{
name|killTimer
argument_list|(
name|pendingRequestTimer
argument_list|)
expr_stmt|;
name|pendingRequestTimer
operator|=
literal|0
expr_stmt|;
block|}
break|break;
block|}
case|case
name|CancelPacket
case|:
block|{
comment|// The peer cancels a block request.
name|quint32
name|index
init|=
name|fromNetworkData
argument_list|(
operator|&
name|packet
operator|.
name|data
argument_list|()
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|quint32
name|begin
init|=
name|fromNetworkData
argument_list|(
operator|&
name|packet
operator|.
name|data
argument_list|()
index|[
literal|5
index|]
argument_list|)
decl_stmt|;
name|quint32
name|length
init|=
name|fromNetworkData
argument_list|(
operator|&
name|packet
operator|.
name|data
argument_list|()
index|[
literal|9
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pendingBlocks
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|BlockInfo
modifier|&
name|blockInfo
init|=
name|pendingBlocks
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|blockInfo
operator|.
name|pieceIndex
operator|==
name|int
argument_list|(
name|index
argument_list|)
operator|&&
name|blockInfo
operator|.
name|offset
operator|==
name|int
argument_list|(
name|begin
argument_list|)
operator|&&
name|blockInfo
operator|.
name|length
operator|==
name|int
argument_list|(
name|length
argument_list|)
condition|)
block|{
name|pendingBlocks
operator|.
name|removeAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
break|break;
block|}
default|default:
comment|// Unsupported packet type; just ignore it.
break|break;
block|}
name|nextPacketLength
operator|=
operator|-
literal|1
expr_stmt|;
block|}
do|while
condition|(
name|bytesAvailable
argument_list|()
operator|>
literal|0
condition|)
do|;
block|}
end_function
begin_function
DECL|function|socketStateChanged
name|void
name|PeerWireClient
operator|::
name|socketStateChanged
parameter_list|(
name|QAbstractSocket
operator|::
name|SocketState
name|state
parameter_list|)
block|{
name|setLocalAddress
argument_list|(
name|socket
operator|.
name|localAddress
argument_list|()
argument_list|)
expr_stmt|;
name|setLocalPort
argument_list|(
name|socket
operator|.
name|localPort
argument_list|()
argument_list|)
expr_stmt|;
name|setPeerName
argument_list|(
name|socket
operator|.
name|peerName
argument_list|()
argument_list|)
expr_stmt|;
name|setPeerAddress
argument_list|(
name|socket
operator|.
name|peerAddress
argument_list|()
argument_list|)
expr_stmt|;
name|setPeerPort
argument_list|(
name|socket
operator|.
name|peerPort
argument_list|()
argument_list|)
expr_stmt|;
name|setSocketState
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readData
name|qint64
name|PeerWireClient
operator|::
name|readData
parameter_list|(
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|size
parameter_list|)
block|{
name|int
name|n
init|=
name|qMin
argument_list|<
name|int
argument_list|>
argument_list|(
name|size
argument_list|,
name|incomingBuffer
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|memcpy
argument_list|(
name|data
argument_list|,
name|incomingBuffer
operator|.
name|constData
argument_list|()
argument_list|,
name|n
argument_list|)
expr_stmt|;
name|incomingBuffer
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
return|return
name|n
return|;
block|}
end_function
begin_function
DECL|function|readLineData
name|qint64
name|PeerWireClient
operator|::
name|readLineData
parameter_list|(
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|maxlen
parameter_list|)
block|{
return|return
name|QIODevice
operator|::
name|readLineData
argument_list|(
name|data
argument_list|,
name|maxlen
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|writeData
name|qint64
name|PeerWireClient
operator|::
name|writeData
parameter_list|(
specifier|const
name|char
modifier|*
name|data
parameter_list|,
name|qint64
name|size
parameter_list|)
block|{
name|int
name|oldSize
init|=
name|outgoingBuffer
operator|.
name|size
argument_list|()
decl_stmt|;
name|outgoingBuffer
operator|.
name|resize
argument_list|(
name|oldSize
operator|+
name|size
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|outgoingBuffer
operator|.
name|data
argument_list|()
operator|+
name|oldSize
argument_list|,
name|data
argument_list|,
name|size
argument_list|)
expr_stmt|;
emit|emit
name|readyToTransfer
argument_list|()
emit|;
return|return
name|size
return|;
block|}
end_function
end_unit
