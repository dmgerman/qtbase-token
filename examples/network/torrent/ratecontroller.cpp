begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor **     the names of its contributors may be used to endorse or promote **     products derived from this software without specific prior written **     permission. ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"peerwireclient.h"
end_include
begin_include
include|#
directive|include
file|"ratecontroller.h"
end_include
begin_include
include|#
directive|include
file|<QtCore>
end_include
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|RateController
argument_list|,
argument|rateController
argument_list|)
end_macro
begin_function
DECL|function|instance
name|RateController
modifier|*
name|RateController
operator|::
name|instance
parameter_list|()
block|{
return|return
name|rateController
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|addSocket
name|void
name|RateController
operator|::
name|addSocket
parameter_list|(
name|PeerWireClient
modifier|*
name|socket
parameter_list|)
block|{
name|connect
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|readyToTransfer
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|scheduleTransfer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|->
name|setReadBufferSize
argument_list|(
name|downLimit
operator|*
literal|4
argument_list|)
expr_stmt|;
name|sockets
operator|<<
name|socket
expr_stmt|;
name|scheduleTransfer
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeSocket
name|void
name|RateController
operator|::
name|removeSocket
parameter_list|(
name|PeerWireClient
modifier|*
name|socket
parameter_list|)
block|{
name|disconnect
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|readyToTransfer
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|scheduleTransfer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|->
name|setReadBufferSize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|sockets
operator|.
name|remove
argument_list|(
name|socket
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setDownloadLimit
name|void
name|RateController
operator|::
name|setDownloadLimit
parameter_list|(
name|int
name|bytesPerSecond
parameter_list|)
block|{
name|downLimit
operator|=
name|bytesPerSecond
expr_stmt|;
foreach|foreach
control|(
name|PeerWireClient
modifier|*
name|socket
decl|,
name|sockets
control|)
name|socket
operator|->
name|setReadBufferSize
argument_list|(
name|downLimit
operator|*
literal|4
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|scheduleTransfer
name|void
name|RateController
operator|::
name|scheduleTransfer
parameter_list|()
block|{
if|if
condition|(
name|transferScheduled
condition|)
return|return;
name|transferScheduled
operator|=
literal|true
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|50
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|transfer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|transfer
name|void
name|RateController
operator|::
name|transfer
parameter_list|()
block|{
name|transferScheduled
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|sockets
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|int
name|msecs
init|=
literal|1000
decl_stmt|;
if|if
condition|(
operator|!
name|stopWatch
operator|.
name|isNull
argument_list|()
condition|)
name|msecs
operator|=
name|qMin
argument_list|(
name|msecs
argument_list|,
name|stopWatch
operator|.
name|elapsed
argument_list|()
argument_list|)
expr_stmt|;
name|qint64
name|bytesToWrite
init|=
operator|(
name|upLimit
operator|*
name|msecs
operator|)
operator|/
literal|1000
decl_stmt|;
name|qint64
name|bytesToRead
init|=
operator|(
name|downLimit
operator|*
name|msecs
operator|)
operator|/
literal|1000
decl_stmt|;
if|if
condition|(
name|bytesToWrite
operator|==
literal|0
operator|&&
name|bytesToRead
operator|==
literal|0
condition|)
block|{
name|scheduleTransfer
argument_list|()
expr_stmt|;
return|return;
block|}
name|QSet
argument_list|<
name|PeerWireClient
modifier|*
argument_list|>
name|pendingSockets
decl_stmt|;
foreach|foreach
control|(
name|PeerWireClient
modifier|*
name|client
decl|,
name|sockets
control|)
block|{
if|if
condition|(
name|client
operator|->
name|canTransferMore
argument_list|()
condition|)
name|pendingSockets
operator|<<
name|client
expr_stmt|;
block|}
if|if
condition|(
name|pendingSockets
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|stopWatch
operator|.
name|start
argument_list|()
expr_stmt|;
name|bool
name|canTransferMore
decl_stmt|;
do|do
block|{
name|canTransferMore
operator|=
literal|false
expr_stmt|;
name|qint64
name|writeChunk
init|=
name|qMax
argument_list|<
name|qint64
argument_list|>
argument_list|(
literal|1
argument_list|,
name|bytesToWrite
operator|/
name|pendingSockets
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|qint64
name|readChunk
init|=
name|qMax
argument_list|<
name|qint64
argument_list|>
argument_list|(
literal|1
argument_list|,
name|bytesToRead
operator|/
name|pendingSockets
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|QSetIterator
argument_list|<
name|PeerWireClient
modifier|*
argument_list|>
name|it
argument_list|(
name|pendingSockets
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
operator|&&
operator|(
name|bytesToWrite
operator|>
literal|0
operator|||
name|bytesToRead
operator|>
literal|0
operator|)
condition|)
block|{
name|PeerWireClient
modifier|*
name|socket
init|=
name|it
operator|.
name|next
argument_list|()
decl_stmt|;
if|if
condition|(
name|socket
operator|->
name|state
argument_list|()
operator|!=
name|QAbstractSocket
operator|::
name|ConnectedState
condition|)
block|{
name|pendingSockets
operator|.
name|remove
argument_list|(
name|socket
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|bool
name|dataTransferred
init|=
literal|false
decl_stmt|;
name|qint64
name|available
init|=
name|qMin
argument_list|<
name|qint64
argument_list|>
argument_list|(
name|socket
operator|->
name|socketBytesAvailable
argument_list|()
argument_list|,
name|readChunk
argument_list|)
decl_stmt|;
if|if
condition|(
name|available
operator|>
literal|0
condition|)
block|{
name|qint64
name|readBytes
init|=
name|socket
operator|->
name|readFromSocket
argument_list|(
name|qMin
argument_list|<
name|qint64
argument_list|>
argument_list|(
name|available
argument_list|,
name|bytesToRead
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|readBytes
operator|>
literal|0
condition|)
block|{
name|bytesToRead
operator|-=
name|readBytes
expr_stmt|;
name|dataTransferred
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
name|upLimit
operator|*
literal|2
operator|>
name|socket
operator|->
name|bytesToWrite
argument_list|()
condition|)
block|{
name|qint64
name|chunkSize
init|=
name|qMin
argument_list|<
name|qint64
argument_list|>
argument_list|(
name|writeChunk
argument_list|,
name|bytesToWrite
argument_list|)
decl_stmt|;
name|qint64
name|toWrite
init|=
name|qMin
argument_list|(
name|upLimit
operator|*
literal|2
operator|-
name|socket
operator|->
name|bytesToWrite
argument_list|()
argument_list|,
name|chunkSize
argument_list|)
decl_stmt|;
if|if
condition|(
name|toWrite
operator|>
literal|0
condition|)
block|{
name|qint64
name|writtenBytes
init|=
name|socket
operator|->
name|writeToSocket
argument_list|(
name|toWrite
argument_list|)
decl_stmt|;
if|if
condition|(
name|writtenBytes
operator|>
literal|0
condition|)
block|{
name|bytesToWrite
operator|-=
name|writtenBytes
expr_stmt|;
name|dataTransferred
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|dataTransferred
operator|&&
name|socket
operator|->
name|canTransferMore
argument_list|()
condition|)
name|canTransferMore
operator|=
literal|true
expr_stmt|;
else|else
name|pendingSockets
operator|.
name|remove
argument_list|(
name|socket
argument_list|)
expr_stmt|;
block|}
block|}
do|while
condition|(
name|canTransferMore
operator|&&
operator|(
name|bytesToWrite
operator|>
literal|0
operator|||
name|bytesToRead
operator|>
literal|0
operator|)
operator|&&
operator|!
name|pendingSockets
operator|.
name|isEmpty
argument_list|()
condition|)
do|;
if|if
condition|(
name|canTransferMore
operator|||
name|bytesToWrite
operator|==
literal|0
operator|||
name|bytesToRead
operator|==
literal|0
condition|)
name|scheduleTransfer
argument_list|()
expr_stmt|;
block|}
end_function
end_unit
