begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor **     the names of its contributors may be used to endorse or promote **     products derived from this software without specific prior written **     permission. ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"connectionmanager.h"
end_include
begin_include
include|#
directive|include
file|"peerwireclient.h"
end_include
begin_include
include|#
directive|include
file|"ratecontroller.h"
end_include
begin_include
include|#
directive|include
file|"torrentclient.h"
end_include
begin_include
include|#
directive|include
file|"torrentserver.h"
end_include
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|TorrentServer
argument_list|,
argument|torrentServer
argument_list|)
end_macro
begin_function
DECL|function|instance
name|TorrentServer
modifier|*
name|TorrentServer
operator|::
name|instance
parameter_list|()
block|{
return|return
name|torrentServer
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|addClient
name|void
name|TorrentServer
operator|::
name|addClient
parameter_list|(
name|TorrentClient
modifier|*
name|client
parameter_list|)
block|{
name|clients
operator|<<
name|client
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeClient
name|void
name|TorrentServer
operator|::
name|removeClient
parameter_list|(
name|TorrentClient
modifier|*
name|client
parameter_list|)
block|{
name|clients
operator|.
name|removeAll
argument_list|(
name|client
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|incomingConnection
name|void
name|TorrentServer
operator|::
name|incomingConnection
parameter_list|(
name|int
name|socketDescriptor
parameter_list|)
block|{
name|PeerWireClient
modifier|*
name|client
init|=
operator|new
name|PeerWireClient
argument_list|(
name|ConnectionManager
operator|::
name|instance
argument_list|()
operator|->
name|clientId
argument_list|()
argument_list|,
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
name|client
operator|->
name|setSocketDescriptor
argument_list|(
name|socketDescriptor
argument_list|)
condition|)
block|{
if|if
condition|(
name|ConnectionManager
operator|::
name|instance
argument_list|()
operator|->
name|canAddConnection
argument_list|()
operator|&&
operator|!
name|clients
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|connect
argument_list|(
name|client
argument_list|,
name|SIGNAL
argument_list|(
name|infoHashReceived
argument_list|(
name|QByteArray
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|processInfoHash
argument_list|(
name|QByteArray
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|client
argument_list|,
name|SIGNAL
argument_list|(
name|error
argument_list|(
name|QAbstractSocket
operator|::
name|SocketError
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|removeClient
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|RateController
operator|::
name|instance
argument_list|()
operator|->
name|addSocket
argument_list|(
name|client
argument_list|)
expr_stmt|;
name|ConnectionManager
operator|::
name|instance
argument_list|()
operator|->
name|addConnection
argument_list|(
name|client
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|client
operator|->
name|abort
argument_list|()
expr_stmt|;
operator|delete
name|client
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeClient
name|void
name|TorrentServer
operator|::
name|removeClient
parameter_list|()
block|{
name|PeerWireClient
modifier|*
name|peer
init|=
name|qobject_cast
argument_list|<
name|PeerWireClient
operator|*
argument_list|>
argument_list|(
name|sender
argument_list|()
argument_list|)
decl_stmt|;
name|RateController
operator|::
name|instance
argument_list|()
operator|->
name|removeSocket
argument_list|(
name|peer
argument_list|)
expr_stmt|;
name|ConnectionManager
operator|::
name|instance
argument_list|()
operator|->
name|removeConnection
argument_list|(
name|peer
argument_list|)
expr_stmt|;
name|peer
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|processInfoHash
name|void
name|TorrentServer
operator|::
name|processInfoHash
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|infoHash
parameter_list|)
block|{
name|PeerWireClient
modifier|*
name|peer
init|=
name|qobject_cast
argument_list|<
name|PeerWireClient
operator|*
argument_list|>
argument_list|(
name|sender
argument_list|()
argument_list|)
decl_stmt|;
foreach|foreach
control|(
name|TorrentClient
modifier|*
name|client
decl|,
name|clients
control|)
block|{
if|if
condition|(
name|client
operator|->
name|state
argument_list|()
operator|>=
name|TorrentClient
operator|::
name|Searching
operator|&&
name|client
operator|->
name|infoHash
argument_list|()
operator|==
name|infoHash
condition|)
block|{
name|peer
operator|->
name|disconnect
argument_list|(
name|peer
argument_list|,
literal|0
argument_list|,
name|this
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|client
operator|->
name|setupIncomingConnection
argument_list|(
name|peer
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
name|removeClient
argument_list|()
expr_stmt|;
block|}
end_function
end_unit
