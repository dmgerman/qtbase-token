begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of The Qt Company Ltd nor the names of its **     contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtWidgets>
end_include
begin_include
include|#
directive|include
file|<QtNetwork>
end_include
begin_include
include|#
directive|include
file|"client.h"
end_include
begin_comment
comment|//! [0]
end_comment
begin_constructor
DECL|function|Client
name|Client
operator|::
name|Client
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QDialog
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|hostCombo
argument_list|(
operator|new
name|QComboBox
argument_list|)
member_init_list|,
name|portLineEdit
argument_list|(
operator|new
name|QLineEdit
argument_list|)
member_init_list|,
name|getFortuneButton
argument_list|(
operator|new
name|QPushButton
argument_list|(
name|tr
argument_list|(
literal|"Get Fortune"
argument_list|)
argument_list|)
argument_list|)
member_init_list|,
name|tcpSocket
argument_list|(
operator|new
name|QTcpSocket
argument_list|(
name|this
argument_list|)
argument_list|)
member_init_list|,
name|networkSession
argument_list|(
name|Q_NULLPTR
argument_list|)
block|{
name|setWindowFlags
argument_list|(
name|windowFlags
argument_list|()
operator|&
operator|~
name|Qt
operator|::
name|WindowContextHelpButtonHint
argument_list|)
expr_stmt|;
comment|//! [0]
name|hostCombo
operator|->
name|setEditable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// find out name of this machine
name|QString
name|name
init|=
name|QHostInfo
operator|::
name|localHostName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|hostCombo
operator|->
name|addItem
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|QString
name|domain
init|=
name|QHostInfo
operator|::
name|localDomainName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|domain
operator|.
name|isEmpty
argument_list|()
condition|)
name|hostCombo
operator|->
name|addItem
argument_list|(
name|name
operator|+
name|QChar
argument_list|(
literal|'.'
argument_list|)
operator|+
name|domain
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|name
operator|!=
name|QLatin1String
argument_list|(
literal|"localhost"
argument_list|)
condition|)
name|hostCombo
operator|->
name|addItem
argument_list|(
name|QString
argument_list|(
literal|"localhost"
argument_list|)
argument_list|)
expr_stmt|;
comment|// find out IP addresses of this machine
name|QList
argument_list|<
name|QHostAddress
argument_list|>
name|ipAddressesList
init|=
name|QNetworkInterface
operator|::
name|allAddresses
argument_list|()
decl_stmt|;
comment|// add non-localhost addresses
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ipAddressesList
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|ipAddressesList
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|isLoopback
argument_list|()
condition|)
name|hostCombo
operator|->
name|addItem
argument_list|(
name|ipAddressesList
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// add localhost addresses
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ipAddressesList
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|ipAddressesList
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|isLoopback
argument_list|()
condition|)
name|hostCombo
operator|->
name|addItem
argument_list|(
name|ipAddressesList
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|portLineEdit
operator|->
name|setValidator
argument_list|(
operator|new
name|QIntValidator
argument_list|(
literal|1
argument_list|,
literal|65535
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|QLabel
modifier|*
name|hostLabel
init|=
operator|new
name|QLabel
argument_list|(
name|tr
argument_list|(
literal|"&Server name:"
argument_list|)
argument_list|)
decl_stmt|;
name|hostLabel
operator|->
name|setBuddy
argument_list|(
name|hostCombo
argument_list|)
expr_stmt|;
name|QLabel
modifier|*
name|portLabel
init|=
operator|new
name|QLabel
argument_list|(
name|tr
argument_list|(
literal|"S&erver port:"
argument_list|)
argument_list|)
decl_stmt|;
name|portLabel
operator|->
name|setBuddy
argument_list|(
name|portLineEdit
argument_list|)
expr_stmt|;
name|statusLabel
operator|=
operator|new
name|QLabel
argument_list|(
name|tr
argument_list|(
literal|"This examples requires that you run the "
literal|"Fortune Server example as well."
argument_list|)
argument_list|)
expr_stmt|;
name|getFortuneButton
operator|->
name|setDefault
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|getFortuneButton
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QPushButton
modifier|*
name|quitButton
init|=
operator|new
name|QPushButton
argument_list|(
name|tr
argument_list|(
literal|"Quit"
argument_list|)
argument_list|)
decl_stmt|;
name|QDialogButtonBox
modifier|*
name|buttonBox
init|=
operator|new
name|QDialogButtonBox
decl_stmt|;
name|buttonBox
operator|->
name|addButton
argument_list|(
name|getFortuneButton
argument_list|,
name|QDialogButtonBox
operator|::
name|ActionRole
argument_list|)
expr_stmt|;
name|buttonBox
operator|->
name|addButton
argument_list|(
name|quitButton
argument_list|,
name|QDialogButtonBox
operator|::
name|RejectRole
argument_list|)
expr_stmt|;
comment|//! [1]
name|in
operator|.
name|setDevice
argument_list|(
name|tcpSocket
argument_list|)
expr_stmt|;
name|in
operator|.
name|setVersion
argument_list|(
name|QDataStream
operator|::
name|Qt_4_0
argument_list|)
expr_stmt|;
comment|//! [1]
name|connect
argument_list|(
name|hostCombo
argument_list|,
operator|&
name|QComboBox
operator|::
name|editTextChanged
argument_list|,
name|this
argument_list|,
operator|&
name|Client
operator|::
name|enableGetFortuneButton
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|portLineEdit
argument_list|,
operator|&
name|QLineEdit
operator|::
name|textChanged
argument_list|,
name|this
argument_list|,
operator|&
name|Client
operator|::
name|enableGetFortuneButton
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|getFortuneButton
argument_list|,
operator|&
name|QAbstractButton
operator|::
name|clicked
argument_list|,
name|this
argument_list|,
operator|&
name|Client
operator|::
name|requestNewFortune
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|quitButton
argument_list|,
operator|&
name|QAbstractButton
operator|::
name|clicked
argument_list|,
name|this
argument_list|,
operator|&
name|QWidget
operator|::
name|close
argument_list|)
expr_stmt|;
comment|//! [2] //! [3]
name|connect
argument_list|(
name|tcpSocket
argument_list|,
operator|&
name|QIODevice
operator|::
name|readyRead
argument_list|,
name|this
argument_list|,
operator|&
name|Client
operator|::
name|readFortune
argument_list|)
expr_stmt|;
comment|//! [2] //! [4]
typedef|typedef
name|void
function_decl|(
name|QAbstractSocket
operator|::
modifier|*
name|QAbstractSocketErrorSignal
function_decl|)
parameter_list|(
name|QAbstractSocket
operator|::
name|SocketError
parameter_list|)
function_decl|;
name|connect
argument_list|(
name|tcpSocket
argument_list|,
cast|static_cast
argument_list|<
name|QAbstractSocketErrorSignal
argument_list|>
argument_list|(
operator|&
name|QAbstractSocket
operator|::
name|error
argument_list|)
argument_list|,
comment|//! [3]
name|this
argument_list|,
operator|&
name|Client
operator|::
name|displayError
argument_list|)
expr_stmt|;
comment|//! [4]
name|QGridLayout
modifier|*
name|mainLayout
init|=
name|Q_NULLPTR
decl_stmt|;
if|if
condition|(
name|QGuiApplication
operator|::
name|styleHints
argument_list|()
operator|->
name|showIsFullScreen
argument_list|()
operator|||
name|QGuiApplication
operator|::
name|styleHints
argument_list|()
operator|->
name|showIsMaximized
argument_list|()
condition|)
block|{
name|QVBoxLayout
modifier|*
name|outerVerticalLayout
init|=
operator|new
name|QVBoxLayout
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|outerVerticalLayout
operator|->
name|addItem
argument_list|(
operator|new
name|QSpacerItem
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|QSizePolicy
operator|::
name|Ignored
argument_list|,
name|QSizePolicy
operator|::
name|MinimumExpanding
argument_list|)
argument_list|)
expr_stmt|;
name|QHBoxLayout
modifier|*
name|outerHorizontalLayout
init|=
operator|new
name|QHBoxLayout
decl_stmt|;
name|outerHorizontalLayout
operator|->
name|addItem
argument_list|(
operator|new
name|QSpacerItem
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|QSizePolicy
operator|::
name|MinimumExpanding
argument_list|,
name|QSizePolicy
operator|::
name|Ignored
argument_list|)
argument_list|)
expr_stmt|;
name|QGroupBox
modifier|*
name|groupBox
init|=
operator|new
name|QGroupBox
argument_list|(
name|QGuiApplication
operator|::
name|applicationDisplayName
argument_list|()
argument_list|)
decl_stmt|;
name|mainLayout
operator|=
operator|new
name|QGridLayout
argument_list|(
name|groupBox
argument_list|)
expr_stmt|;
name|outerHorizontalLayout
operator|->
name|addWidget
argument_list|(
name|groupBox
argument_list|)
expr_stmt|;
name|outerHorizontalLayout
operator|->
name|addItem
argument_list|(
operator|new
name|QSpacerItem
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|QSizePolicy
operator|::
name|MinimumExpanding
argument_list|,
name|QSizePolicy
operator|::
name|Ignored
argument_list|)
argument_list|)
expr_stmt|;
name|outerVerticalLayout
operator|->
name|addLayout
argument_list|(
name|outerHorizontalLayout
argument_list|)
expr_stmt|;
name|outerVerticalLayout
operator|->
name|addItem
argument_list|(
operator|new
name|QSpacerItem
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|QSizePolicy
operator|::
name|Ignored
argument_list|,
name|QSizePolicy
operator|::
name|MinimumExpanding
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mainLayout
operator|=
operator|new
name|QGridLayout
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|mainLayout
operator|->
name|addWidget
argument_list|(
name|hostLabel
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mainLayout
operator|->
name|addWidget
argument_list|(
name|hostCombo
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mainLayout
operator|->
name|addWidget
argument_list|(
name|portLabel
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|mainLayout
operator|->
name|addWidget
argument_list|(
name|portLineEdit
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|mainLayout
operator|->
name|addWidget
argument_list|(
name|statusLabel
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|mainLayout
operator|->
name|addWidget
argument_list|(
name|buttonBox
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|setWindowTitle
argument_list|(
name|QGuiApplication
operator|::
name|applicationDisplayName
argument_list|()
argument_list|)
expr_stmt|;
name|portLineEdit
operator|->
name|setFocus
argument_list|()
expr_stmt|;
name|QNetworkConfigurationManager
name|manager
decl_stmt|;
if|if
condition|(
name|manager
operator|.
name|capabilities
argument_list|()
operator|&
name|QNetworkConfigurationManager
operator|::
name|NetworkSessionRequired
condition|)
block|{
comment|// Get saved network configuration
name|QSettings
name|settings
argument_list|(
name|QSettings
operator|::
name|UserScope
argument_list|,
name|QLatin1String
argument_list|(
literal|"QtProject"
argument_list|)
argument_list|)
decl_stmt|;
name|settings
operator|.
name|beginGroup
argument_list|(
name|QLatin1String
argument_list|(
literal|"QtNetwork"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|id
init|=
name|settings
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"DefaultNetworkConfiguration"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|settings
operator|.
name|endGroup
argument_list|()
expr_stmt|;
comment|// If the saved network configuration is not currently discovered use the system default
name|QNetworkConfiguration
name|config
init|=
name|manager
operator|.
name|configurationFromIdentifier
argument_list|(
name|id
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|config
operator|.
name|state
argument_list|()
operator|&
name|QNetworkConfiguration
operator|::
name|Discovered
operator|)
operator|!=
name|QNetworkConfiguration
operator|::
name|Discovered
condition|)
block|{
name|config
operator|=
name|manager
operator|.
name|defaultConfiguration
argument_list|()
expr_stmt|;
block|}
name|networkSession
operator|=
operator|new
name|QNetworkSession
argument_list|(
name|config
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|networkSession
argument_list|,
operator|&
name|QNetworkSession
operator|::
name|opened
argument_list|,
name|this
argument_list|,
operator|&
name|Client
operator|::
name|sessionOpened
argument_list|)
expr_stmt|;
name|getFortuneButton
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|statusLabel
operator|->
name|setText
argument_list|(
name|tr
argument_list|(
literal|"Opening network session."
argument_list|)
argument_list|)
expr_stmt|;
name|networkSession
operator|->
name|open
argument_list|()
expr_stmt|;
block|}
comment|//! [5]
block|}
end_constructor
begin_comment
comment|//! [5]
end_comment
begin_comment
comment|//! [6]
end_comment
begin_function
DECL|function|requestNewFortune
name|void
name|Client
operator|::
name|requestNewFortune
parameter_list|()
block|{
name|getFortuneButton
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|tcpSocket
operator|->
name|abort
argument_list|()
expr_stmt|;
comment|//! [7]
name|tcpSocket
operator|->
name|connectToHost
argument_list|(
name|hostCombo
operator|->
name|currentText
argument_list|()
argument_list|,
name|portLineEdit
operator|->
name|text
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
comment|//! [7]
block|}
end_function
begin_comment
comment|//! [6]
end_comment
begin_comment
comment|//! [8]
end_comment
begin_function
DECL|function|readFortune
name|void
name|Client
operator|::
name|readFortune
parameter_list|()
block|{
name|in
operator|.
name|startTransaction
argument_list|()
expr_stmt|;
name|QString
name|nextFortune
decl_stmt|;
name|in
operator|>>
name|nextFortune
expr_stmt|;
if|if
condition|(
operator|!
name|in
operator|.
name|commitTransaction
argument_list|()
condition|)
return|return;
if|if
condition|(
name|nextFortune
operator|==
name|currentFortune
condition|)
block|{
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|0
argument_list|,
name|this
argument_list|,
operator|&
name|Client
operator|::
name|requestNewFortune
argument_list|)
expr_stmt|;
return|return;
block|}
name|currentFortune
operator|=
name|nextFortune
expr_stmt|;
name|statusLabel
operator|->
name|setText
argument_list|(
name|currentFortune
argument_list|)
expr_stmt|;
name|getFortuneButton
operator|->
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [8]
end_comment
begin_comment
comment|//! [13]
end_comment
begin_function
DECL|function|displayError
name|void
name|Client
operator|::
name|displayError
parameter_list|(
name|QAbstractSocket
operator|::
name|SocketError
name|socketError
parameter_list|)
block|{
switch|switch
condition|(
name|socketError
condition|)
block|{
case|case
name|QAbstractSocket
operator|::
name|RemoteHostClosedError
case|:
break|break;
case|case
name|QAbstractSocket
operator|::
name|HostNotFoundError
case|:
name|QMessageBox
operator|::
name|information
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"Fortune Client"
argument_list|)
argument_list|,
name|tr
argument_list|(
literal|"The host was not found. Please check the "
literal|"host name and port settings."
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QAbstractSocket
operator|::
name|ConnectionRefusedError
case|:
name|QMessageBox
operator|::
name|information
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"Fortune Client"
argument_list|)
argument_list|,
name|tr
argument_list|(
literal|"The connection was refused by the peer. "
literal|"Make sure the fortune server is running, "
literal|"and check that the host name and port "
literal|"settings are correct."
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
name|QMessageBox
operator|::
name|information
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"Fortune Client"
argument_list|)
argument_list|,
name|tr
argument_list|(
literal|"The following error occurred: %1."
argument_list|)
operator|.
name|arg
argument_list|(
name|tcpSocket
operator|->
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|getFortuneButton
operator|->
name|setEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [13]
end_comment
begin_function
DECL|function|enableGetFortuneButton
name|void
name|Client
operator|::
name|enableGetFortuneButton
parameter_list|()
block|{
name|getFortuneButton
operator|->
name|setEnabled
argument_list|(
operator|(
operator|!
name|networkSession
operator|||
name|networkSession
operator|->
name|isOpen
argument_list|()
operator|)
operator|&&
operator|!
name|hostCombo
operator|->
name|currentText
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|portLineEdit
operator|->
name|text
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sessionOpened
name|void
name|Client
operator|::
name|sessionOpened
parameter_list|()
block|{
comment|// Save the used configuration
name|QNetworkConfiguration
name|config
init|=
name|networkSession
operator|->
name|configuration
argument_list|()
decl_stmt|;
name|QString
name|id
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|type
argument_list|()
operator|==
name|QNetworkConfiguration
operator|::
name|UserChoice
condition|)
name|id
operator|=
name|networkSession
operator|->
name|sessionProperty
argument_list|(
name|QLatin1String
argument_list|(
literal|"UserChoiceConfiguration"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
else|else
name|id
operator|=
name|config
operator|.
name|identifier
argument_list|()
expr_stmt|;
name|QSettings
name|settings
argument_list|(
name|QSettings
operator|::
name|UserScope
argument_list|,
name|QLatin1String
argument_list|(
literal|"QtProject"
argument_list|)
argument_list|)
decl_stmt|;
name|settings
operator|.
name|beginGroup
argument_list|(
name|QLatin1String
argument_list|(
literal|"QtNetwork"
argument_list|)
argument_list|)
expr_stmt|;
name|settings
operator|.
name|setValue
argument_list|(
name|QLatin1String
argument_list|(
literal|"DefaultNetworkConfiguration"
argument_list|)
argument_list|,
name|id
argument_list|)
expr_stmt|;
name|settings
operator|.
name|endGroup
argument_list|()
expr_stmt|;
name|statusLabel
operator|->
name|setText
argument_list|(
name|tr
argument_list|(
literal|"This examples requires that you run the "
literal|"Fortune Server example as well."
argument_list|)
argument_list|)
expr_stmt|;
name|enableGetFortuneButton
argument_list|()
expr_stmt|;
block|}
end_function
end_unit
