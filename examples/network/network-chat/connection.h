begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor **     the names of its contributors may be used to endorse or promote **     products derived from this software without specific prior written **     permission. ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|CONNECTION_H
end_ifndef
begin_define
DECL|macro|CONNECTION_H
define|#
directive|define
name|CONNECTION_H
end_define
begin_include
include|#
directive|include
file|<QHostAddress>
end_include
begin_include
include|#
directive|include
file|<QString>
end_include
begin_include
include|#
directive|include
file|<QTcpSocket>
end_include
begin_include
include|#
directive|include
file|<QTime>
end_include
begin_include
include|#
directive|include
file|<QTimer>
end_include
begin_decl_stmt
DECL|variable|MaxBufferSize
specifier|static
specifier|const
name|int
name|MaxBufferSize
init|=
literal|1024000
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Connection
range|:
name|public
name|QTcpSocket
block|{
name|Q_OBJECT
name|public
operator|:
expr|enum
name|ConnectionState
block|{
name|WaitingForGreeting
block|,
name|ReadingGreeting
block|,
name|ReadyForUse
block|}
block|;     enum
name|DataType
block|{
name|PlainText
block|,
name|Ping
block|,
name|Pong
block|,
name|Greeting
block|,
name|Undefined
block|}
block|;
name|Connection
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
name|QString
name|name
argument_list|()
specifier|const
block|;
name|void
name|setGreetingMessage
argument_list|(
specifier|const
name|QString
operator|&
name|message
argument_list|)
block|;
name|bool
name|sendMessage
argument_list|(
specifier|const
name|QString
operator|&
name|message
argument_list|)
block|;
name|signals
operator|:
name|void
name|readyForUse
argument_list|()
block|;
name|void
name|newMessage
argument_list|(
specifier|const
name|QString
operator|&
name|from
argument_list|,
specifier|const
name|QString
operator|&
name|message
argument_list|)
block|;
name|protected
operator|:
name|void
name|timerEvent
argument_list|(
name|QTimerEvent
operator|*
name|timerEvent
argument_list|)
block|;
name|private
name|slots
operator|:
name|void
name|processReadyRead
argument_list|()
block|;
name|void
name|sendPing
argument_list|()
block|;
name|void
name|sendGreetingMessage
argument_list|()
block|;
name|private
operator|:
name|int
name|readDataIntoBuffer
argument_list|(
argument|int maxSize = MaxBufferSize
argument_list|)
block|;
name|int
name|dataLengthForCurrentDataType
argument_list|()
block|;
name|bool
name|readProtocolHeader
argument_list|()
block|;
name|bool
name|hasEnoughData
argument_list|()
block|;
name|void
name|processData
argument_list|()
block|;
name|QString
name|greetingMessage
block|;
name|QString
name|username
block|;
name|QTimer
name|pingTimer
block|;
name|QTime
name|pongTime
block|;
name|QByteArray
name|buffer
block|;
name|ConnectionState
name|state
block|;
name|DataType
name|currentDataType
block|;
name|int
name|numBytesForCurrentDataType
block|;
name|int
name|transferTimerId
block|;
name|bool
name|isGreetingMessageSent
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
end_unit
