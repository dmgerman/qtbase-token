begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names **     of its contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"textprogressbar.h"
end_include
begin_include
include|#
directive|include
file|<QByteArray>
end_include
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_constructor
DECL|function|TextProgressBar
name|TextProgressBar
operator|::
name|TextProgressBar
parameter_list|()
member_init_list|:
name|value
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|maximum
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|iteration
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|clear
name|void
name|TextProgressBar
operator|::
name|clear
parameter_list|()
block|{
name|printf
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|fflush
argument_list|(
name|stdout
argument_list|)
expr_stmt|;
name|iteration
operator|=
literal|0
expr_stmt|;
name|value
operator|=
literal|0
expr_stmt|;
name|maximum
operator|=
operator|-
literal|1
expr_stmt|;
block|}
end_function
begin_function
DECL|function|update
name|void
name|TextProgressBar
operator|::
name|update
parameter_list|()
block|{
operator|++
name|iteration
expr_stmt|;
if|if
condition|(
name|maximum
operator|>
literal|0
condition|)
block|{
comment|// we know the maximum
comment|// draw a progress bar
name|int
name|percent
init|=
name|value
operator|*
literal|100
operator|/
name|maximum
decl_stmt|;
name|int
name|hashes
init|=
name|percent
operator|/
literal|2
decl_stmt|;
name|QByteArray
name|progressbar
argument_list|(
name|hashes
argument_list|,
literal|'#'
argument_list|)
decl_stmt|;
if|if
condition|(
name|percent
operator|%
literal|2
condition|)
name|progressbar
operator|+=
literal|'>'
expr_stmt|;
name|printf
argument_list|(
literal|"\r[%-50s] %3d%% %s     "
argument_list|,
name|progressbar
operator|.
name|constData
argument_list|()
argument_list|,
name|percent
argument_list|,
name|qPrintable
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// we don't know the maximum, so we can't draw a progress bar
name|int
name|center
init|=
operator|(
name|iteration
operator|%
literal|48
operator|)
operator|+
literal|1
decl_stmt|;
comment|// 50 spaces, minus 2
name|QByteArray
name|before
argument_list|(
name|qMax
argument_list|(
name|center
operator|-
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|' '
argument_list|)
decl_stmt|;
name|QByteArray
name|after
argument_list|(
name|qMin
argument_list|(
name|center
operator|+
literal|2
argument_list|,
literal|50
argument_list|)
argument_list|,
literal|' '
argument_list|)
decl_stmt|;
name|printf
argument_list|(
literal|"\r[%s###%s]      %s      "
argument_list|,
name|before
operator|.
name|constData
argument_list|()
argument_list|,
name|after
operator|.
name|constData
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setMessage
name|void
name|TextProgressBar
operator|::
name|setMessage
parameter_list|(
specifier|const
name|QString
modifier|&
name|m
parameter_list|)
block|{
name|message
operator|=
name|m
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setStatus
name|void
name|TextProgressBar
operator|::
name|setStatus
parameter_list|(
name|qint64
name|val
parameter_list|,
name|qint64
name|max
parameter_list|)
block|{
name|value
operator|=
name|val
expr_stmt|;
name|maximum
operator|=
name|max
expr_stmt|;
block|}
end_function
end_unit
