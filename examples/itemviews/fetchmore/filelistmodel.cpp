begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor **     the names of its contributors may be used to endorse or promote **     products derived from this software without specific prior written **     permission. ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"filelistmodel.h"
end_include
begin_include
include|#
directive|include
file|<QApplication>
end_include
begin_include
include|#
directive|include
file|<QPalette>
end_include
begin_include
include|#
directive|include
file|<QBrush>
end_include
begin_include
include|#
directive|include
file|<QDir>
end_include
begin_constructor
DECL|function|FileListModel
name|FileListModel
operator|::
name|FileListModel
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractListModel
argument_list|(
name|parent
argument_list|)
block|{ }
end_constructor
begin_comment
comment|//![4]
end_comment
begin_function
DECL|function|rowCount
name|int
name|FileListModel
operator|::
name|rowCount
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
comment|/* parent */
parameter_list|)
specifier|const
block|{
return|return
name|fileCount
return|;
block|}
end_function
begin_function
DECL|function|data
name|QVariant
name|FileListModel
operator|::
name|data
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
name|int
name|role
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QVariant
argument_list|()
return|;
if|if
condition|(
name|index
operator|.
name|row
argument_list|()
operator|>=
name|fileList
operator|.
name|size
argument_list|()
operator|||
name|index
operator|.
name|row
argument_list|()
operator|<
literal|0
condition|)
return|return
name|QVariant
argument_list|()
return|;
if|if
condition|(
name|role
operator|==
name|Qt
operator|::
name|DisplayRole
condition|)
return|return
name|fileList
operator|.
name|at
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|)
return|;
elseif|else
if|if
condition|(
name|role
operator|==
name|Qt
operator|::
name|BackgroundRole
condition|)
block|{
name|int
name|batch
init|=
operator|(
name|index
operator|.
name|row
argument_list|()
operator|/
literal|100
operator|)
operator|%
literal|2
decl_stmt|;
if|if
condition|(
name|batch
operator|==
literal|0
condition|)
return|return
name|qApp
operator|->
name|palette
argument_list|()
operator|.
name|base
argument_list|()
return|;
else|else
return|return
name|qApp
operator|->
name|palette
argument_list|()
operator|.
name|alternateBase
argument_list|()
return|;
block|}
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_comment
comment|//![4]
end_comment
begin_comment
comment|//![1]
end_comment
begin_function
DECL|function|canFetchMore
name|bool
name|FileListModel
operator|::
name|canFetchMore
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
comment|/* index */
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|fileCount
operator|<
name|fileList
operator|.
name|size
argument_list|()
condition|)
return|return
literal|true
return|;
else|else
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|//![1]
end_comment
begin_comment
comment|//![2]
end_comment
begin_function
DECL|function|fetchMore
name|void
name|FileListModel
operator|::
name|fetchMore
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
comment|/* index */
parameter_list|)
block|{
name|int
name|remainder
init|=
name|fileList
operator|.
name|size
argument_list|()
operator|-
name|fileCount
decl_stmt|;
name|int
name|itemsToFetch
init|=
name|qMin
argument_list|(
literal|100
argument_list|,
name|remainder
argument_list|)
decl_stmt|;
name|beginInsertRows
argument_list|(
name|QModelIndex
argument_list|()
argument_list|,
name|fileCount
argument_list|,
name|fileCount
operator|+
name|itemsToFetch
operator|-
literal|1
argument_list|)
expr_stmt|;
name|fileCount
operator|+=
name|itemsToFetch
expr_stmt|;
name|endInsertRows
argument_list|()
expr_stmt|;
emit|emit
name|numberPopulated
argument_list|(
name|itemsToFetch
argument_list|)
emit|;
block|}
end_function
begin_comment
comment|//![2]
end_comment
begin_comment
comment|//![0]
end_comment
begin_function
DECL|function|setDirPath
name|void
name|FileListModel
operator|::
name|setDirPath
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|)
block|{
name|QDir
name|dir
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|fileList
operator|=
name|dir
operator|.
name|entryList
argument_list|()
expr_stmt|;
name|fileCount
operator|=
literal|0
expr_stmt|;
name|reset
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|//![0]
end_comment
end_unit
