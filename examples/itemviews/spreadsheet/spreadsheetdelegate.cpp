begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: http://www.qt-project.org/ ** ** This file is part of the demonstration applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"spreadsheetdelegate.h"
end_include
begin_include
include|#
directive|include
file|<QtWidgets>
end_include
begin_constructor
DECL|function|SpreadSheetDelegate
name|SpreadSheetDelegate
operator|::
name|SpreadSheetDelegate
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QItemDelegate
argument_list|(
name|parent
argument_list|)
block|{}
end_constructor
begin_function
DECL|function|createEditor
name|QWidget
modifier|*
name|SpreadSheetDelegate
operator|::
name|createEditor
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|QStyleOptionViewItem
modifier|&
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|index
operator|.
name|column
argument_list|()
operator|==
literal|1
condition|)
block|{
name|QDateTimeEdit
modifier|*
name|editor
init|=
operator|new
name|QDateTimeEdit
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|editor
operator|->
name|setDisplayFormat
argument_list|(
literal|"dd/M/yyyy"
argument_list|)
expr_stmt|;
name|editor
operator|->
name|setCalendarPopup
argument_list|(
literal|true
argument_list|)
expr_stmt|;
return|return
name|editor
return|;
block|}
name|QLineEdit
modifier|*
name|editor
init|=
operator|new
name|QLineEdit
argument_list|(
name|parent
argument_list|)
decl_stmt|;
comment|// create a completer with the strings in the column as model
name|QStringList
name|allStrings
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|index
operator|.
name|model
argument_list|()
operator|->
name|rowCount
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QString
name|strItem
argument_list|(
name|index
operator|.
name|model
argument_list|()
operator|->
name|data
argument_list|(
name|index
operator|.
name|sibling
argument_list|(
name|i
argument_list|,
name|index
operator|.
name|column
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|EditRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|allStrings
operator|.
name|contains
argument_list|(
name|strItem
argument_list|)
condition|)
name|allStrings
operator|.
name|append
argument_list|(
name|strItem
argument_list|)
expr_stmt|;
block|}
name|QCompleter
modifier|*
name|autoComplete
init|=
operator|new
name|QCompleter
argument_list|(
name|allStrings
argument_list|)
decl_stmt|;
name|editor
operator|->
name|setCompleter
argument_list|(
name|autoComplete
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|editor
argument_list|,
name|SIGNAL
argument_list|(
name|editingFinished
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|commitAndCloseEditor
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|editor
return|;
block|}
end_function
begin_function
DECL|function|commitAndCloseEditor
name|void
name|SpreadSheetDelegate
operator|::
name|commitAndCloseEditor
parameter_list|()
block|{
name|QLineEdit
modifier|*
name|editor
init|=
name|qobject_cast
argument_list|<
name|QLineEdit
operator|*
argument_list|>
argument_list|(
name|sender
argument_list|()
argument_list|)
decl_stmt|;
emit|emit
name|commitData
argument_list|(
name|editor
argument_list|)
emit|;
emit|emit
name|closeEditor
argument_list|(
name|editor
argument_list|)
emit|;
block|}
end_function
begin_function
DECL|function|setEditorData
name|void
name|SpreadSheetDelegate
operator|::
name|setEditorData
parameter_list|(
name|QWidget
modifier|*
name|editor
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|QLineEdit
modifier|*
name|edit
init|=
name|qobject_cast
argument_list|<
name|QLineEdit
operator|*
argument_list|>
argument_list|(
name|editor
argument_list|)
decl_stmt|;
if|if
condition|(
name|edit
condition|)
block|{
name|edit
operator|->
name|setText
argument_list|(
name|index
operator|.
name|model
argument_list|()
operator|->
name|data
argument_list|(
name|index
argument_list|,
name|Qt
operator|::
name|EditRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QDateTimeEdit
modifier|*
name|dateEditor
init|=
name|qobject_cast
argument_list|<
name|QDateTimeEdit
operator|*
argument_list|>
argument_list|(
name|editor
argument_list|)
decl_stmt|;
if|if
condition|(
name|dateEditor
condition|)
block|{
name|dateEditor
operator|->
name|setDate
argument_list|(
name|QDate
operator|::
name|fromString
argument_list|(
name|index
operator|.
name|model
argument_list|()
operator|->
name|data
argument_list|(
name|index
argument_list|,
name|Qt
operator|::
name|EditRole
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
literal|"d/M/yyyy"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|setModelData
name|void
name|SpreadSheetDelegate
operator|::
name|setModelData
parameter_list|(
name|QWidget
modifier|*
name|editor
parameter_list|,
name|QAbstractItemModel
modifier|*
name|model
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
name|QLineEdit
modifier|*
name|edit
init|=
name|qobject_cast
argument_list|<
name|QLineEdit
operator|*
argument_list|>
argument_list|(
name|editor
argument_list|)
decl_stmt|;
if|if
condition|(
name|edit
condition|)
block|{
name|model
operator|->
name|setData
argument_list|(
name|index
argument_list|,
name|edit
operator|->
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QDateTimeEdit
modifier|*
name|dateEditor
init|=
name|qobject_cast
argument_list|<
name|QDateTimeEdit
operator|*
argument_list|>
argument_list|(
name|editor
argument_list|)
decl_stmt|;
if|if
condition|(
name|dateEditor
condition|)
block|{
name|model
operator|->
name|setData
argument_list|(
name|index
argument_list|,
name|dateEditor
operator|->
name|date
argument_list|()
operator|.
name|toString
argument_list|(
literal|"dd/M/yyyy"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
end_unit
