begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor **     the names of its contributors may be used to endorse or promote **     products derived from this software without specific prior written **     permission. ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtGui>
end_include
begin_include
include|#
directive|include
file|<math.h>
end_include
begin_include
include|#
directive|include
file|"starrating.h"
end_include
begin_decl_stmt
DECL|variable|PaintingScaleFactor
specifier|const
name|int
name|PaintingScaleFactor
init|=
literal|20
decl_stmt|;
end_decl_stmt
begin_comment
comment|//! [0]
end_comment
begin_constructor
DECL|function|StarRating
name|StarRating
operator|::
name|StarRating
parameter_list|(
name|int
name|starCount
parameter_list|,
name|int
name|maxStarCount
parameter_list|)
block|{
name|myStarCount
operator|=
name|starCount
expr_stmt|;
name|myMaxStarCount
operator|=
name|maxStarCount
expr_stmt|;
name|starPolygon
operator|<<
name|QPointF
argument_list|(
literal|1.0
argument_list|,
literal|0.5
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|5
condition|;
operator|++
name|i
control|)
name|starPolygon
operator|<<
name|QPointF
argument_list|(
literal|0.5
operator|+
literal|0.5
operator|*
name|cos
argument_list|(
literal|0.8
operator|*
name|i
operator|*
literal|3.14
argument_list|)
argument_list|,
literal|0.5
operator|+
literal|0.5
operator|*
name|sin
argument_list|(
literal|0.8
operator|*
name|i
operator|*
literal|3.14
argument_list|)
argument_list|)
expr_stmt|;
name|diamondPolygon
operator|<<
name|QPointF
argument_list|(
literal|0.4
argument_list|,
literal|0.5
argument_list|)
operator|<<
name|QPointF
argument_list|(
literal|0.5
argument_list|,
literal|0.4
argument_list|)
operator|<<
name|QPointF
argument_list|(
literal|0.6
argument_list|,
literal|0.5
argument_list|)
operator|<<
name|QPointF
argument_list|(
literal|0.5
argument_list|,
literal|0.6
argument_list|)
operator|<<
name|QPointF
argument_list|(
literal|0.4
argument_list|,
literal|0.5
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|//! [0]
end_comment
begin_comment
comment|//! [1]
end_comment
begin_function
DECL|function|sizeHint
name|QSize
name|StarRating
operator|::
name|sizeHint
parameter_list|()
specifier|const
block|{
return|return
name|PaintingScaleFactor
operator|*
name|QSize
argument_list|(
name|myMaxStarCount
argument_list|,
literal|1
argument_list|)
return|;
block|}
end_function
begin_comment
comment|//! [1]
end_comment
begin_comment
comment|//! [2]
end_comment
begin_function
DECL|function|paint
name|void
name|StarRating
operator|::
name|paint
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QRect
modifier|&
name|rect
parameter_list|,
specifier|const
name|QPalette
modifier|&
name|palette
parameter_list|,
name|EditMode
name|mode
parameter_list|)
specifier|const
block|{
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|painter
operator|->
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|Antialiasing
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setPen
argument_list|(
name|Qt
operator|::
name|NoPen
argument_list|)
expr_stmt|;
if|if
condition|(
name|mode
operator|==
name|Editable
condition|)
block|{
name|painter
operator|->
name|setBrush
argument_list|(
name|palette
operator|.
name|highlight
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|painter
operator|->
name|setBrush
argument_list|(
name|palette
operator|.
name|foreground
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|int
name|yOffset
init|=
operator|(
name|rect
operator|.
name|height
argument_list|()
operator|-
name|PaintingScaleFactor
operator|)
operator|/
literal|2
decl_stmt|;
name|painter
operator|->
name|translate
argument_list|(
name|rect
operator|.
name|x
argument_list|()
argument_list|,
name|rect
operator|.
name|y
argument_list|()
operator|+
name|yOffset
argument_list|)
expr_stmt|;
name|painter
operator|->
name|scale
argument_list|(
name|PaintingScaleFactor
argument_list|,
name|PaintingScaleFactor
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|myMaxStarCount
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|<
name|myStarCount
condition|)
block|{
name|painter
operator|->
name|drawPolygon
argument_list|(
name|starPolygon
argument_list|,
name|Qt
operator|::
name|WindingFill
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|mode
operator|==
name|Editable
condition|)
block|{
name|painter
operator|->
name|drawPolygon
argument_list|(
name|diamondPolygon
argument_list|,
name|Qt
operator|::
name|WindingFill
argument_list|)
expr_stmt|;
block|}
name|painter
operator|->
name|translate
argument_list|(
literal|1.0
argument_list|,
literal|0.0
argument_list|)
expr_stmt|;
block|}
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [2]
end_comment
end_unit
