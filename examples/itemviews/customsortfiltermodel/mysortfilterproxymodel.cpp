begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor **     the names of its contributors may be used to endorse or promote **     products derived from this software without specific prior written **     permission. ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtGui>
end_include
begin_include
include|#
directive|include
file|"mysortfilterproxymodel.h"
end_include
begin_comment
comment|//! [0]
end_comment
begin_constructor
DECL|function|MySortFilterProxyModel
name|MySortFilterProxyModel
operator|::
name|MySortFilterProxyModel
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QSortFilterProxyModel
argument_list|(
name|parent
argument_list|)
block|{ }
end_constructor
begin_comment
comment|//! [0]
end_comment
begin_comment
comment|//! [1]
end_comment
begin_function
DECL|function|setFilterMinimumDate
name|void
name|MySortFilterProxyModel
operator|::
name|setFilterMinimumDate
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|)
block|{
name|minDate
operator|=
name|date
expr_stmt|;
name|invalidateFilter
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [1]
end_comment
begin_comment
comment|//! [2]
end_comment
begin_function
DECL|function|setFilterMaximumDate
name|void
name|MySortFilterProxyModel
operator|::
name|setFilterMaximumDate
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|)
block|{
name|maxDate
operator|=
name|date
expr_stmt|;
name|invalidateFilter
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|//! [2]
end_comment
begin_comment
comment|//! [3]
end_comment
begin_function
DECL|function|filterAcceptsRow
name|bool
name|MySortFilterProxyModel
operator|::
name|filterAcceptsRow
parameter_list|(
name|int
name|sourceRow
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|sourceParent
parameter_list|)
specifier|const
block|{
name|QModelIndex
name|index0
init|=
name|sourceModel
argument_list|()
operator|->
name|index
argument_list|(
name|sourceRow
argument_list|,
literal|0
argument_list|,
name|sourceParent
argument_list|)
decl_stmt|;
name|QModelIndex
name|index1
init|=
name|sourceModel
argument_list|()
operator|->
name|index
argument_list|(
name|sourceRow
argument_list|,
literal|1
argument_list|,
name|sourceParent
argument_list|)
decl_stmt|;
name|QModelIndex
name|index2
init|=
name|sourceModel
argument_list|()
operator|->
name|index
argument_list|(
name|sourceRow
argument_list|,
literal|2
argument_list|,
name|sourceParent
argument_list|)
decl_stmt|;
return|return
operator|(
name|sourceModel
argument_list|()
operator|->
name|data
argument_list|(
name|index0
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|filterRegExp
argument_list|()
argument_list|)
operator|||
name|sourceModel
argument_list|()
operator|->
name|data
argument_list|(
name|index1
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|contains
argument_list|(
name|filterRegExp
argument_list|()
argument_list|)
operator|)
operator|&&
name|dateInRange
argument_list|(
name|sourceModel
argument_list|()
operator|->
name|data
argument_list|(
name|index2
argument_list|)
operator|.
name|toDate
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_comment
comment|//! [3]
end_comment
begin_comment
comment|//! [4] //! [5]
end_comment
begin_function
DECL|function|lessThan
name|bool
name|MySortFilterProxyModel
operator|::
name|lessThan
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|left
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|right
parameter_list|)
specifier|const
block|{
name|QVariant
name|leftData
init|=
name|sourceModel
argument_list|()
operator|->
name|data
argument_list|(
name|left
argument_list|)
decl_stmt|;
name|QVariant
name|rightData
init|=
name|sourceModel
argument_list|()
operator|->
name|data
argument_list|(
name|right
argument_list|)
decl_stmt|;
comment|//! [4]
comment|//! [6]
if|if
condition|(
name|leftData
operator|.
name|type
argument_list|()
operator|==
name|QVariant
operator|::
name|DateTime
condition|)
block|{
return|return
name|leftData
operator|.
name|toDateTime
argument_list|()
operator|<
name|rightData
operator|.
name|toDateTime
argument_list|()
return|;
block|}
else|else
block|{
name|QRegExp
modifier|*
name|emailPattern
init|=
operator|new
name|QRegExp
argument_list|(
literal|"([\\w\\.]*@[\\w\\.]*)"
argument_list|)
decl_stmt|;
name|QString
name|leftString
init|=
name|leftData
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|left
operator|.
name|column
argument_list|()
operator|==
literal|1
operator|&&
name|emailPattern
operator|->
name|indexIn
argument_list|(
name|leftString
argument_list|)
operator|!=
operator|-
literal|1
condition|)
name|leftString
operator|=
name|emailPattern
operator|->
name|cap
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QString
name|rightString
init|=
name|rightData
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|right
operator|.
name|column
argument_list|()
operator|==
literal|1
operator|&&
name|emailPattern
operator|->
name|indexIn
argument_list|(
name|rightString
argument_list|)
operator|!=
operator|-
literal|1
condition|)
name|rightString
operator|=
name|emailPattern
operator|->
name|cap
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|QString
operator|::
name|localeAwareCompare
argument_list|(
name|leftString
argument_list|,
name|rightString
argument_list|)
operator|<
literal|0
return|;
block|}
block|}
end_function
begin_comment
comment|//! [5] //! [6]
end_comment
begin_comment
comment|//! [7]
end_comment
begin_function
DECL|function|dateInRange
name|bool
name|MySortFilterProxyModel
operator|::
name|dateInRange
parameter_list|(
specifier|const
name|QDate
modifier|&
name|date
parameter_list|)
specifier|const
block|{
return|return
operator|(
operator|!
name|minDate
operator|.
name|isValid
argument_list|()
operator|||
name|date
operator|>
name|minDate
operator|)
operator|&&
operator|(
operator|!
name|maxDate
operator|.
name|isValid
argument_list|()
operator|||
name|date
operator|<
name|maxDate
operator|)
return|;
block|}
end_function
begin_comment
comment|//! [7]
end_comment
end_unit
