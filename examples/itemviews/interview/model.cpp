begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: http://www.qt-project.org/ ** ** This file is part of the demonstration applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"model.h"
end_include
begin_include
include|#
directive|include
file|<QIcon>
end_include
begin_include
include|#
directive|include
file|<QPixmap>
end_include
begin_constructor
DECL|function|Model
name|Model
operator|::
name|Model
parameter_list|(
name|int
name|rows
parameter_list|,
name|int
name|columns
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QAbstractItemModel
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|services
argument_list|(
name|QPixmap
argument_list|(
literal|":/images/services.png"
argument_list|)
argument_list|)
member_init_list|,
name|rc
argument_list|(
name|rows
argument_list|)
member_init_list|,
name|cc
argument_list|(
name|columns
argument_list|)
member_init_list|,
name|tree
argument_list|(
operator|new
name|QVector
argument_list|<
name|Node
argument_list|>
argument_list|(
name|rows
argument_list|,
name|Node
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|)
block|{  }
end_constructor
begin_destructor
DECL|function|~Model
name|Model
operator|::
name|~
name|Model
parameter_list|()
block|{
operator|delete
name|tree
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|index
name|QModelIndex
name|Model
operator|::
name|index
parameter_list|(
name|int
name|row
parameter_list|,
name|int
name|column
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|row
operator|<
name|rc
operator|&&
name|row
operator|>=
literal|0
operator|&&
name|column
operator|<
name|cc
operator|&&
name|column
operator|>=
literal|0
condition|)
block|{
name|Node
modifier|*
name|p
init|=
cast|static_cast
argument_list|<
name|Node
operator|*
argument_list|>
argument_list|(
name|parent
operator|.
name|internalPointer
argument_list|()
argument_list|)
decl_stmt|;
name|Node
modifier|*
name|n
init|=
name|node
argument_list|(
name|row
argument_list|,
name|p
argument_list|)
decl_stmt|;
if|if
condition|(
name|n
condition|)
return|return
name|createIndex
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|n
argument_list|)
return|;
block|}
return|return
name|QModelIndex
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|parent
name|QModelIndex
name|Model
operator|::
name|parent
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|child
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|child
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|Node
modifier|*
name|n
init|=
cast|static_cast
argument_list|<
name|Node
operator|*
argument_list|>
argument_list|(
name|child
operator|.
name|internalPointer
argument_list|()
argument_list|)
decl_stmt|;
name|Node
modifier|*
name|p
init|=
name|parent
argument_list|(
name|n
argument_list|)
decl_stmt|;
if|if
condition|(
name|p
condition|)
return|return
name|createIndex
argument_list|(
name|row
argument_list|(
name|p
argument_list|)
argument_list|,
literal|0
argument_list|,
name|p
argument_list|)
return|;
block|}
return|return
name|QModelIndex
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|rowCount
name|int
name|Model
operator|::
name|rowCount
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|parent
operator|.
name|isValid
argument_list|()
operator|&&
name|parent
operator|.
name|column
argument_list|()
operator|!=
literal|0
operator|)
condition|?
literal|0
else|:
name|rc
return|;
block|}
end_function
begin_function
DECL|function|columnCount
name|int
name|Model
operator|::
name|columnCount
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
specifier|const
block|{
name|Q_UNUSED
argument_list|(
name|parent
argument_list|)
expr_stmt|;
return|return
name|cc
return|;
block|}
end_function
begin_function
DECL|function|data
name|QVariant
name|Model
operator|::
name|data
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|,
name|int
name|role
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
return|return
name|QVariant
argument_list|()
return|;
if|if
condition|(
name|role
operator|==
name|Qt
operator|::
name|DisplayRole
condition|)
return|return
literal|"Item "
operator|+
name|QString
operator|::
name|number
argument_list|(
name|index
operator|.
name|row
argument_list|()
argument_list|)
operator|+
literal|":"
operator|+
name|QString
operator|::
name|number
argument_list|(
name|index
operator|.
name|column
argument_list|()
argument_list|)
return|;
if|if
condition|(
name|role
operator|==
name|Qt
operator|::
name|DecorationRole
condition|)
block|{
if|if
condition|(
name|index
operator|.
name|column
argument_list|()
operator|==
literal|0
condition|)
return|return
name|iconProvider
operator|.
name|icon
argument_list|(
name|QFileIconProvider
operator|::
name|Folder
argument_list|)
return|;
return|return
name|iconProvider
operator|.
name|icon
argument_list|(
name|QFileIconProvider
operator|::
name|File
argument_list|)
return|;
block|}
return|return
name|QVariant
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|headerData
name|QVariant
name|Model
operator|::
name|headerData
parameter_list|(
name|int
name|section
parameter_list|,
name|Qt
operator|::
name|Orientation
name|orientation
parameter_list|,
name|int
name|role
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|role
operator|==
name|Qt
operator|::
name|DisplayRole
condition|)
return|return
name|QString
operator|::
name|number
argument_list|(
name|section
argument_list|)
return|;
if|if
condition|(
name|role
operator|==
name|Qt
operator|::
name|DecorationRole
condition|)
return|return
name|QVariant
operator|::
name|fromValue
argument_list|(
name|services
argument_list|)
return|;
return|return
name|QAbstractItemModel
operator|::
name|headerData
argument_list|(
name|section
argument_list|,
name|orientation
argument_list|,
name|role
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|hasChildren
name|bool
name|Model
operator|::
name|hasChildren
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|parent
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|parent
operator|.
name|isValid
argument_list|()
operator|&&
name|parent
operator|.
name|column
argument_list|()
operator|!=
literal|0
condition|)
return|return
literal|false
return|;
return|return
name|rc
operator|>
literal|0
operator|&&
name|cc
operator|>
literal|0
return|;
block|}
end_function
begin_function
DECL|function|flags
name|Qt
operator|::
name|ItemFlags
name|Model
operator|::
name|flags
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
name|index
parameter_list|)
specifier|const
block|{
if|if
condition|(
operator|!
name|index
operator|.
name|isValid
argument_list|()
condition|)
return|return
literal|0
return|;
return|return
operator|(
name|Qt
operator|::
name|ItemIsDragEnabled
operator||
name|Qt
operator|::
name|ItemIsSelectable
operator||
name|Qt
operator|::
name|ItemIsEnabled
operator|)
return|;
block|}
end_function
begin_function
DECL|function|node
name|Model
operator|::
name|Node
modifier|*
name|Model
operator|::
name|node
parameter_list|(
name|int
name|row
parameter_list|,
name|Node
modifier|*
name|parent
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|parent
operator|&&
operator|!
name|parent
operator|->
name|children
condition|)
name|parent
operator|->
name|children
operator|=
operator|new
name|QVector
argument_list|<
name|Node
argument_list|>
argument_list|(
name|rc
argument_list|,
name|Node
argument_list|(
name|parent
argument_list|)
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|Node
argument_list|>
modifier|*
name|v
init|=
name|parent
condition|?
name|parent
operator|->
name|children
else|:
name|tree
decl_stmt|;
return|return
cast|const_cast
argument_list|<
name|Node
operator|*
argument_list|>
argument_list|(
operator|&
operator|(
name|v
operator|->
name|at
argument_list|(
name|row
argument_list|)
operator|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|parent
name|Model
operator|::
name|Node
modifier|*
name|Model
operator|::
name|parent
parameter_list|(
name|Node
modifier|*
name|child
parameter_list|)
specifier|const
block|{
return|return
name|child
condition|?
name|child
operator|->
name|parent
else|:
literal|0
return|;
block|}
end_function
begin_function
DECL|function|row
name|int
name|Model
operator|::
name|row
parameter_list|(
name|Node
modifier|*
name|node
parameter_list|)
specifier|const
block|{
specifier|const
name|Node
modifier|*
name|first
init|=
name|node
operator|->
name|parent
condition|?
operator|&
operator|(
name|node
operator|->
name|parent
operator|->
name|children
operator|->
name|at
argument_list|(
literal|0
argument_list|)
operator|)
else|:
operator|&
operator|(
name|tree
operator|->
name|at
argument_list|(
literal|0
argument_list|)
operator|)
decl_stmt|;
return|return
operator|(
name|node
operator|-
name|first
operator|)
return|;
block|}
end_function
end_unit
