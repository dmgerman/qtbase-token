begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the qmake application of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"unixmake.h"
end_include
begin_include
include|#
directive|include
file|"option.h"
end_include
begin_include
include|#
directive|include
file|"meta.h"
end_include
begin_include
include|#
directive|include
file|<qregexp.h>
end_include
begin_include
include|#
directive|include
file|<qbytearray.h>
end_include
begin_include
include|#
directive|include
file|<qfile.h>
end_include
begin_include
include|#
directive|include
file|<qdir.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<time.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|UnixMakefileGenerator
name|UnixMakefileGenerator
operator|::
name|UnixMakefileGenerator
parameter_list|()
member_init_list|:
name|MakefileGenerator
argument_list|()
member_init_list|,
name|include_deps
argument_list|(
literal|false
argument_list|)
block|{  }
end_constructor
begin_function
name|void
DECL|function|writePrlFile
name|UnixMakefileGenerator
operator|::
name|writePrlFile
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|)
block|{
name|MakefileGenerator
operator|::
name|writePrlFile
argument_list|(
name|t
argument_list|)
expr_stmt|;
comment|// libtool support
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"create_libtool"
argument_list|)
operator|&&
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"lib"
condition|)
block|{
comment|//write .la
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"compile_libtool"
argument_list|)
condition|)
name|warn_msg
argument_list|(
name|WarnLogic
argument_list|,
literal|"create_libtool specified with compile_libtool can lead to conflicting .la\n"
literal|"formats, create_libtool has been disabled\n"
argument_list|)
expr_stmt|;
else|else
name|writeLibtoolFile
argument_list|()
expr_stmt|;
block|}
comment|// pkg-config support
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"create_pc"
argument_list|)
operator|&&
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"lib"
condition|)
name|writePkgConfigFile
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
name|bool
DECL|function|writeMakefile
name|UnixMakefileGenerator
operator|::
name|writeMakefile
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|)
block|{
name|writeHeader
argument_list|(
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|writeDummyMakefile
argument_list|(
name|t
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"app"
operator|||
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"lib"
operator|||
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"aux"
condition|)
block|{
if|if
condition|(
name|Option
operator|::
name|mkfile
operator|::
name|do_stub_makefile
operator|&&
name|MakefileGenerator
operator|::
name|writeStubMakefile
argument_list|(
name|t
argument_list|)
condition|)
return|return
literal|true
return|;
name|writeMakeParts
argument_list|(
name|t
argument_list|)
expr_stmt|;
return|return
name|MakefileGenerator
operator|::
name|writeMakefile
argument_list|(
name|t
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"subdirs"
condition|)
block|{
name|MakefileGenerator
operator|::
name|writeSubDirs
argument_list|(
name|t
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
name|void
DECL|function|writeDefaultVariables
name|UnixMakefileGenerator
operator|::
name|writeDefaultVariables
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|)
block|{
name|MakefileGenerator
operator|::
name|writeDefaultVariables
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"TAR           = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_TAR"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"COMPRESS      = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_GZIP"
argument_list|)
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_DISTNAME"
argument_list|)
condition|)
block|{
name|ProString
name|distname
init|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_ORIG_TARGET"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"no_dist_version"
argument_list|)
condition|)
name|distname
operator|+=
name|project
operator|->
name|first
argument_list|(
literal|"VERSION"
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_DISTNAME"
argument_list|)
operator|=
name|distname
expr_stmt|;
block|}
name|t
operator|<<
literal|"DISTNAME      = "
operator|<<
name|fileVar
argument_list|(
literal|"QMAKE_DISTNAME"
argument_list|)
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_DISTDIR"
argument_list|)
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_DISTDIR"
argument_list|)
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_DISTNAME"
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"DISTDIR = "
operator|<<
name|escapeFilePath
argument_list|(
name|fileFixify
argument_list|(
operator|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"OBJECTS_DIR"
argument_list|)
condition|?
name|ProString
argument_list|(
literal|".tmp/"
argument_list|)
else|:
name|project
operator|->
name|first
argument_list|(
literal|"OBJECTS_DIR"
argument_list|)
operator|)
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_DISTDIR"
argument_list|)
argument_list|,
name|FileFixifyFromOutdir
operator||
name|FileFixifyAbsolute
argument_list|)
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
end_function
begin_function
name|void
DECL|function|writeSubTargets
name|UnixMakefileGenerator
operator|::
name|writeSubTargets
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|,
name|QList
argument_list|<
name|MakefileGenerator
operator|::
name|SubTarget
operator|*
argument_list|>
name|targets
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
name|MakefileGenerator
operator|::
name|writeSubTargets
argument_list|(
name|t
argument_list|,
name|targets
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"dist: distdir FORCE"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\t(cd `dirname $(DISTDIR)`&& $(TAR) $(DISTNAME).tar $(DISTNAME)&& $(COMPRESS) $(DISTNAME).tar)"
literal|"&& $(MOVE) `dirname $(DISTDIR)`/$(DISTNAME).tar.gz .&& $(DEL_FILE) -r $(DISTDIR)"
expr_stmt|;
name|t
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"distdir:"
expr_stmt|;
for|for
control|(
name|int
name|target
init|=
literal|0
init|;
name|target
operator|<
name|targets
operator|.
name|size
argument_list|()
condition|;
operator|++
name|target
control|)
block|{
name|SubTarget
modifier|*
name|subtarget
init|=
name|targets
operator|.
name|at
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|t
operator|<<
literal|" "
operator|<<
name|subtarget
operator|->
name|target
operator|<<
literal|"-distdir"
expr_stmt|;
block|}
name|t
operator|<<
literal|" FORCE\n\t"
operator|<<
name|mkdir_p_asstring
argument_list|(
literal|"$(DISTDIR)"
argument_list|,
literal|false
argument_list|)
operator|<<
literal|"\n\t"
operator|<<
literal|"$(COPY_FILE) --parents "
operator|<<
name|fileVar
argument_list|(
literal|"DISTFILES"
argument_list|)
operator|<<
literal|" $(DISTDIR)"
operator|<<
name|Option
operator|::
name|dir_sep
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
specifier|const
name|QString
name|abs_source_path
init|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_ABSOLUTE_SOURCE_PATH"
argument_list|)
operator|.
name|toQString
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|target
init|=
literal|0
init|;
name|target
operator|<
name|targets
operator|.
name|size
argument_list|()
condition|;
operator|++
name|target
control|)
block|{
name|SubTarget
modifier|*
name|subtarget
init|=
name|targets
operator|.
name|at
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|QString
name|in_directory
init|=
name|subtarget
operator|->
name|in_directory
decl_stmt|;
if|if
condition|(
operator|!
name|in_directory
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|in_directory
operator|.
name|endsWith
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
condition|)
name|in_directory
operator|+=
name|Option
operator|::
name|dir_sep
expr_stmt|;
name|QString
name|out_directory
init|=
name|subtarget
operator|->
name|out_directory
decl_stmt|;
if|if
condition|(
operator|!
name|out_directory
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|out_directory
operator|.
name|endsWith
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
condition|)
name|out_directory
operator|+=
name|Option
operator|::
name|dir_sep
expr_stmt|;
if|if
condition|(
operator|!
name|abs_source_path
operator|.
name|isEmpty
argument_list|()
operator|&&
name|out_directory
operator|.
name|startsWith
argument_list|(
name|abs_source_path
argument_list|)
condition|)
name|out_directory
operator|=
name|Option
operator|::
name|output_dir
operator|+
name|out_directory
operator|.
name|mid
argument_list|(
name|abs_source_path
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|dist_directory
init|=
name|out_directory
decl_stmt|;
if|if
condition|(
name|dist_directory
operator|.
name|endsWith
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
condition|)
name|dist_directory
operator|.
name|chop
argument_list|(
name|Option
operator|::
name|dir_sep
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dist_directory
operator|.
name|startsWith
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
condition|)
name|dist_directory
operator|.
name|prepend
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
expr_stmt|;
name|QString
name|out_directory_cdin
init|=
name|out_directory
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"\n\t"
else|:
literal|"\n\tcd "
operator|+
name|escapeFilePath
argument_list|(
name|out_directory
argument_list|)
operator|+
literal|"&& "
decl_stmt|;
name|QString
name|makefilein
init|=
literal|" -e -f "
operator|+
name|escapeFilePath
argument_list|(
name|subtarget
operator|->
name|makefile
argument_list|)
operator|+
literal|" distdir DISTDIR=$(DISTDIR)"
operator|+
name|escapeFilePath
argument_list|(
name|dist_directory
argument_list|)
decl_stmt|;
name|QString
name|out
init|=
name|subtarget
operator|->
name|makefile
decl_stmt|;
name|QString
name|in
init|=
name|escapeFilePath
argument_list|(
name|fileFixify
argument_list|(
name|in_directory
operator|+
name|subtarget
operator|->
name|profile
argument_list|,
name|FileFixifyAbsolute
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|out
operator|.
name|startsWith
argument_list|(
name|in_directory
argument_list|)
condition|)
name|out
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
name|in_directory
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|<<
name|subtarget
operator|->
name|target
operator|<<
literal|"-distdir: FORCE"
expr_stmt|;
name|writeSubTargetCall
argument_list|(
name|t
argument_list|,
name|in_directory
argument_list|,
name|in
argument_list|,
name|out_directory
argument_list|,
name|escapeFilePath
argument_list|(
name|out
argument_list|)
argument_list|,
name|out_directory_cdin
argument_list|,
name|makefilein
argument_list|)
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
block|}
block|}
end_function
begin_function
name|void
DECL|function|writeMakeParts
name|UnixMakefileGenerator
operator|::
name|writeMakeParts
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|)
block|{
name|bool
name|do_incremental
init|=
operator|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"incremental"
argument_list|)
operator|&&
operator|!
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_INCREMENTAL"
argument_list|)
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
operator|!
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_APP_FLAG"
argument_list|)
operator|.
name|isEmpty
argument_list|()
operator|||
operator|(
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"staticlib"
argument_list|)
operator|)
operator|)
operator|)
decl_stmt|,
name|src_incremental
init|=
literal|false
decl_stmt|;
name|ProStringList
modifier|&
name|bundledFiles
init|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_BUNDLED_FILES"
argument_list|)
decl_stmt|;
name|t
operator|<<
literal|"####### Compiler, tools and options\n\n"
expr_stmt|;
name|t
operator|<<
literal|"CC            = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_CC"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"CXX           = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_CXX"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"DEFINES       = "
operator|<<
name|varGlue
argument_list|(
literal|"PRL_EXPORT_DEFINES"
argument_list|,
literal|"-D"
argument_list|,
literal|" -D"
argument_list|,
literal|" "
argument_list|)
operator|<<
name|varGlue
argument_list|(
literal|"DEFINES"
argument_list|,
literal|"-D"
argument_list|,
literal|" -D"
argument_list|,
literal|""
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"CFLAGS        = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_CFLAGS"
argument_list|)
operator|<<
literal|" $(DEFINES)\n"
expr_stmt|;
name|t
operator|<<
literal|"CXXFLAGS      = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_CXXFLAGS"
argument_list|)
operator|<<
literal|" $(DEFINES)\n"
expr_stmt|;
name|t
operator|<<
literal|"INCPATH       ="
expr_stmt|;
block|{
name|QString
name|isystem
init|=
name|var
argument_list|(
literal|"QMAKE_CFLAGS_ISYSTEM"
argument_list|)
decl_stmt|;
specifier|const
name|ProStringList
modifier|&
name|incs
init|=
name|project
operator|->
name|values
argument_list|(
literal|"INCLUDEPATH"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|incs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|ProString
modifier|&
name|inc
init|=
name|incs
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|inc
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
if|if
condition|(
operator|!
name|isystem
operator|.
name|isEmpty
argument_list|()
operator|&&
name|isSystemInclude
argument_list|(
name|inc
operator|.
name|toQString
argument_list|()
argument_list|)
condition|)
name|t
operator|<<
literal|' '
operator|<<
name|isystem
operator|<<
literal|' '
expr_stmt|;
else|else
name|t
operator|<<
literal|" -I"
expr_stmt|;
name|t
operator|<<
name|escapeFilePath
argument_list|(
name|inc
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_FRAMEWORKPATH_FLAGS"
argument_list|)
condition|)
name|t
operator|<<
literal|" "
operator|<<
name|var
argument_list|(
literal|"QMAKE_FRAMEWORKPATH_FLAGS"
argument_list|)
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
name|writeDefaultVariables
argument_list|(
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"staticlib"
argument_list|)
condition|)
block|{
name|t
operator|<<
literal|"LINK          = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_LINK"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"LFLAGS        = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_LFLAGS"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"LIBS          = $(SUBLIBS) "
operator|<<
name|fixLibFlags
argument_list|(
literal|"QMAKE_LIBS"
argument_list|)
operator|.
name|join
argument_list|(
literal|' '
argument_list|)
operator|<<
literal|' '
operator|<<
name|fixLibFlags
argument_list|(
literal|"QMAKE_LIBS_PRIVATE"
argument_list|)
operator|.
name|join
argument_list|(
literal|' '
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
name|t
operator|<<
literal|"AR            = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_AR"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"RANLIB        = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_RANLIB"
argument_list|)
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"compile_libtool"
argument_list|)
condition|)
name|t
operator|<<
literal|"LIBTOOL       = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_LIBTOOL"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"SED           = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_STREAM_EDITOR"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"STRIP         = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_STRIP"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"####### Output directory\n\n"
expr_stmt|;
comment|// This is used in commands by some .prf files.
if|if
condition|(
operator|!
name|project
operator|->
name|values
argument_list|(
literal|"OBJECTS_DIR"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
name|t
operator|<<
literal|"OBJECTS_DIR   = "
operator|<<
name|fileVar
argument_list|(
literal|"OBJECTS_DIR"
argument_list|)
operator|<<
name|endl
expr_stmt|;
else|else
name|t
operator|<<
literal|"OBJECTS_DIR   = ./\n"
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
comment|/* files */
name|t
operator|<<
literal|"####### Files\n\n"
expr_stmt|;
comment|// This is used by the dist target.
name|t
operator|<<
literal|"SOURCES       = "
operator|<<
name|fileVarList
argument_list|(
literal|"SOURCES"
argument_list|)
operator|<<
literal|' '
operator|<<
name|fileVarList
argument_list|(
literal|"GENERATED_SOURCES"
argument_list|)
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|do_incremental
condition|)
block|{
specifier|const
name|ProStringList
modifier|&
name|objs
init|=
name|project
operator|->
name|values
argument_list|(
literal|"OBJECTS"
argument_list|)
decl_stmt|;
specifier|const
name|ProStringList
modifier|&
name|incrs
init|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_INCREMENTAL"
argument_list|)
decl_stmt|;
name|ProStringList
name|incrs_out
decl_stmt|;
name|t
operator|<<
literal|"OBJECTS       = "
expr_stmt|;
for|for
control|(
name|ProStringList
operator|::
name|ConstIterator
name|objit
init|=
name|objs
operator|.
name|begin
argument_list|()
init|;
name|objit
operator|!=
name|objs
operator|.
name|end
argument_list|()
condition|;
operator|++
name|objit
control|)
block|{
name|bool
name|increment
init|=
literal|false
decl_stmt|;
for|for
control|(
name|ProStringList
operator|::
name|ConstIterator
name|incrit
init|=
name|incrs
operator|.
name|begin
argument_list|()
init|;
name|incrit
operator|!=
name|incrs
operator|.
name|end
argument_list|()
condition|;
operator|++
name|incrit
control|)
block|{
if|if
condition|(
operator|(
operator|*
name|objit
operator|)
operator|.
name|toQString
argument_list|()
operator|.
name|indexOf
argument_list|(
name|QRegExp
argument_list|(
operator|(
operator|*
name|incrit
operator|)
operator|.
name|toQString
argument_list|()
argument_list|,
name|Qt
operator|::
name|CaseSensitive
argument_list|,
name|QRegExp
operator|::
name|Wildcard
argument_list|)
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|increment
operator|=
literal|true
expr_stmt|;
name|incrs_out
operator|.
name|append
argument_list|(
operator|(
operator|*
name|objit
operator|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|increment
condition|)
name|t
operator|<<
literal|"\\\n\t\t"
operator|<<
operator|(
operator|*
name|objit
operator|)
expr_stmt|;
block|}
if|if
condition|(
name|incrs_out
operator|.
name|count
argument_list|()
operator|==
name|objs
operator|.
name|count
argument_list|()
condition|)
block|{
comment|//we just switched places, no real incrementals to be done!
name|t
operator|<<
name|escapeFilePaths
argument_list|(
name|incrs_out
argument_list|)
operator|.
name|join
argument_list|(
literal|" \\\n\t\t"
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|incrs_out
operator|.
name|count
argument_list|()
condition|)
block|{
name|t
operator|<<
name|endl
expr_stmt|;
block|}
else|else
block|{
name|src_incremental
operator|=
literal|true
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"INCREMENTAL_OBJECTS = "
operator|<<
name|escapeFilePaths
argument_list|(
name|incrs_out
argument_list|)
operator|.
name|join
argument_list|(
literal|" \\\n\t\t"
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Used all over the place in both deps and commands.
name|t
operator|<<
literal|"OBJECTS       = "
operator|<<
name|valList
argument_list|(
name|escapeDependencyPaths
argument_list|(
name|project
operator|->
name|values
argument_list|(
literal|"OBJECTS"
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
if|if
condition|(
name|do_incremental
operator|&&
operator|!
name|src_incremental
condition|)
name|do_incremental
operator|=
literal|false
expr_stmt|;
name|t
operator|<<
literal|"DIST          = "
operator|<<
name|valList
argument_list|(
name|fileFixify
argument_list|(
name|project
operator|->
name|values
argument_list|(
literal|"DISTFILES"
argument_list|)
operator|.
name|toQStringList
argument_list|()
argument_list|)
argument_list|)
operator|<<
literal|" "
operator|<<
name|fileVarList
argument_list|(
literal|"HEADERS"
argument_list|)
operator|<<
literal|' '
operator|<<
name|fileVarList
argument_list|(
literal|"SOURCES"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"QMAKE_TARGET  = "
operator|<<
name|fileVar
argument_list|(
literal|"QMAKE_ORIG_TARGET"
argument_list|)
operator|<<
name|endl
expr_stmt|;
comment|// The comment is important for mingw32-make.exe on Windows as otherwise trailing slashes
comment|// would be interpreted as line continuation. The lack of spacing between the value and the
comment|// comment is also important as otherwise quoted use of "$(DESTDIR)" would include this
comment|// spacing.
name|t
operator|<<
literal|"DESTDIR       = "
operator|<<
name|fileVar
argument_list|(
literal|"DESTDIR"
argument_list|)
operator|<<
literal|"#avoid trailing-slash linebreak\n"
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"compile_libtool"
argument_list|)
condition|)
name|t
operator|<<
literal|"TARGETL       = "
operator|<<
name|fileVar
argument_list|(
literal|"TARGET_la"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"TARGET        = "
operator|<<
name|fileVar
argument_list|(
literal|"TARGET"
argument_list|)
operator|<<
name|endl
expr_stmt|;
comment|// ### mixed use!
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"plugin"
argument_list|)
condition|)
block|{
name|t
operator|<<
literal|"TARGETD       = "
operator|<<
name|fileVar
argument_list|(
literal|"TARGET"
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"staticlib"
argument_list|)
operator|&&
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_APP_FLAG"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|t
operator|<<
literal|"TARGETA       = "
operator|<<
name|fileVar
argument_list|(
literal|"TARGETA"
argument_list|)
operator|<<
name|endl
expr_stmt|;
comment|// ### mixed use!
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_BUNDLE"
argument_list|)
condition|)
block|{
name|t
operator|<<
literal|"TARGETD       = "
operator|<<
name|fileVar
argument_list|(
literal|"TARGET_x.y"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"TARGET0       = "
operator|<<
name|fileVar
argument_list|(
literal|"TARGET_"
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"unversioned_libname"
argument_list|)
condition|)
block|{
name|t
operator|<<
literal|"TARGET0       = "
operator|<<
name|fileVar
argument_list|(
literal|"TARGET_"
argument_list|)
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_HPUX_SHLIB"
argument_list|)
condition|)
block|{
name|t
operator|<<
literal|"TARGETD       = "
operator|<<
name|fileVar
argument_list|(
literal|"TARGET_x.y.z"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"TARGET1       = "
operator|<<
name|fileVar
argument_list|(
literal|"TARGET_x"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"TARGET2       = "
operator|<<
name|fileVar
argument_list|(
literal|"TARGET_x.y"
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
else|else
block|{
name|t
operator|<<
literal|"TARGETD       = "
operator|<<
name|fileVar
argument_list|(
literal|"TARGET_x"
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
block|}
block|}
name|writeExtraCompilerVariables
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|writeExtraVariables
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
comment|// blasted includes
specifier|const
name|ProStringList
modifier|&
name|qeui
init|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_EXTRA_INCLUDES"
argument_list|)
decl_stmt|;
name|ProStringList
operator|::
name|ConstIterator
name|it
decl_stmt|;
for|for
control|(
name|it
operator|=
name|qeui
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|qeui
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
name|t
operator|<<
literal|"include "
operator|<<
name|escapeDependencyPath
argument_list|(
operator|*
name|it
argument_list|)
operator|<<
name|endl
expr_stmt|;
comment|/* rules */
name|t
operator|<<
literal|"first: all\n"
expr_stmt|;
name|t
operator|<<
literal|"####### Implicit rules\n\n"
expr_stmt|;
name|t
operator|<<
literal|".SUFFIXES: "
operator|<<
name|Option
operator|::
name|obj_ext
expr_stmt|;
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|cit
init|=
name|Option
operator|::
name|c_ext
operator|.
name|begin
argument_list|()
init|;
name|cit
operator|!=
name|Option
operator|::
name|c_ext
operator|.
name|end
argument_list|()
condition|;
operator|++
name|cit
control|)
name|t
operator|<<
literal|" "
operator|<<
operator|(
operator|*
name|cit
operator|)
expr_stmt|;
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|cppit
init|=
name|Option
operator|::
name|cpp_ext
operator|.
name|begin
argument_list|()
init|;
name|cppit
operator|!=
name|Option
operator|::
name|cpp_ext
operator|.
name|end
argument_list|()
condition|;
operator|++
name|cppit
control|)
name|t
operator|<<
literal|" "
operator|<<
operator|(
operator|*
name|cppit
operator|)
expr_stmt|;
name|t
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|cppit
init|=
name|Option
operator|::
name|cpp_ext
operator|.
name|begin
argument_list|()
init|;
name|cppit
operator|!=
name|Option
operator|::
name|cpp_ext
operator|.
name|end
argument_list|()
condition|;
operator|++
name|cppit
control|)
name|t
operator|<<
operator|(
operator|*
name|cppit
operator|)
operator|<<
name|Option
operator|::
name|obj_ext
operator|<<
literal|":\n\t"
operator|<<
name|var
argument_list|(
literal|"QMAKE_RUN_CXX_IMP"
argument_list|)
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|cit
init|=
name|Option
operator|::
name|c_ext
operator|.
name|begin
argument_list|()
init|;
name|cit
operator|!=
name|Option
operator|::
name|c_ext
operator|.
name|end
argument_list|()
condition|;
operator|++
name|cit
control|)
name|t
operator|<<
operator|(
operator|*
name|cit
operator|)
operator|<<
name|Option
operator|::
name|obj_ext
operator|<<
literal|":\n\t"
operator|<<
name|var
argument_list|(
literal|"QMAKE_RUN_CC_IMP"
argument_list|)
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|include_deps
condition|)
block|{
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"gcc_MD_depends"
argument_list|)
condition|)
block|{
name|ProStringList
name|objects
init|=
name|project
operator|->
name|values
argument_list|(
literal|"OBJECTS"
argument_list|)
decl_stmt|;
for|for
control|(
name|ProStringList
operator|::
name|Iterator
name|it
init|=
name|objects
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|objects
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QString
name|d_file
init|=
operator|(
operator|*
name|it
operator|)
operator|.
name|toQString
argument_list|()
operator|.
name|replace
argument_list|(
name|QRegExp
argument_list|(
name|Option
operator|::
name|obj_ext
operator|+
literal|"$"
argument_list|)
argument_list|,
literal|".d"
argument_list|)
decl_stmt|;
name|t
operator|<<
literal|"-include "
operator|<<
name|escapeDependencyPath
argument_list|(
name|d_file
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_DISTCLEAN"
argument_list|)
operator|<<
name|d_file
expr_stmt|;
block|}
block|}
else|else
block|{
name|QString
name|cmd
init|=
name|var
argument_list|(
literal|"QMAKE_CFLAGS_DEPS"
argument_list|)
operator|+
literal|" "
decl_stmt|;
name|cmd
operator|+=
name|varGlue
argument_list|(
literal|"DEFINES"
argument_list|,
literal|"-D"
argument_list|,
literal|" -D"
argument_list|,
literal|""
argument_list|)
operator|+
name|varGlue
argument_list|(
literal|"PRL_EXPORT_DEFINES"
argument_list|,
literal|" -D"
argument_list|,
literal|" -D"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_ABSOLUTE_SOURCE_PATH"
argument_list|)
condition|)
name|cmd
operator|+=
literal|" -I"
operator|+
name|fileVar
argument_list|(
literal|"QMAKE_ABSOLUTE_SOURCE_PATH"
argument_list|)
operator|+
literal|' '
expr_stmt|;
name|cmd
operator|+=
literal|" $(INCPATH) "
operator|+
name|fileVarGlue
argument_list|(
literal|"DEPENDPATH"
argument_list|,
literal|"-I"
argument_list|,
literal|" -I"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|ProString
name|odir
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|values
argument_list|(
literal|"OBJECTS_DIR"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
name|odir
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"OBJECTS_DIR"
argument_list|)
expr_stmt|;
name|QString
name|odird
init|=
name|escapeDependencyPath
argument_list|(
name|odir
operator|.
name|toQString
argument_list|()
argument_list|)
decl_stmt|;
name|QString
name|pwd
init|=
name|escapeFilePath
argument_list|(
name|fileFixify
argument_list|(
name|qmake_getpwd
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|t
operator|<<
literal|"###### Dependencies\n\n"
expr_stmt|;
name|t
operator|<<
name|odird
operator|<<
literal|".deps/%.d: "
operator|<<
name|pwd
operator|<<
literal|"/%.cpp\n\t"
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"echo_depend_creation"
argument_list|)
condition|)
name|t
operator|<<
literal|"@echo Creating depend for $<\n\t"
expr_stmt|;
name|t
operator|<<
name|mkdir_p_asstring
argument_list|(
literal|"$(@D)"
argument_list|,
literal|false
argument_list|)
operator|<<
literal|"\n\t"
operator|<<
literal|"@$(CXX) "
operator|<<
name|cmd
operator|<<
literal|" $< | sed \"s,^\\($(*F).o\\):,"
operator|<<
name|odir
operator|<<
literal|"\\1:,g\">$@\n\n"
expr_stmt|;
name|t
operator|<<
name|odird
operator|<<
literal|".deps/%.d: "
operator|<<
name|pwd
operator|<<
literal|"/%.c\n\t"
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"echo_depend_creation"
argument_list|)
condition|)
name|t
operator|<<
literal|"@echo Creating depend for $<\n\t"
expr_stmt|;
name|t
operator|<<
name|mkdir_p_asstring
argument_list|(
literal|"$(@D)"
argument_list|,
literal|false
argument_list|)
operator|<<
literal|"\n\t"
operator|<<
literal|"@$(CC) "
operator|<<
name|cmd
operator|<<
literal|" $< | sed \"s,^\\($(*F).o\\):,"
operator|<<
name|odir
operator|<<
literal|"\\1:,g\">$@\n\n"
expr_stmt|;
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|src
index|[]
init|=
block|{
literal|"SOURCES"
block|,
literal|"GENERATED_SOURCES"
block|,
literal|0
block|}
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|src
index|[
name|x
index|]
condition|;
name|x
operator|++
control|)
block|{
specifier|const
name|ProStringList
modifier|&
name|l
init|=
name|project
operator|->
name|values
argument_list|(
name|src
index|[
name|x
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|ProStringList
operator|::
name|ConstIterator
name|it
init|=
name|l
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|l
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
operator|!
operator|(
operator|*
name|it
operator|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QString
name|d_file
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|cit
init|=
name|Option
operator|::
name|c_ext
operator|.
name|begin
argument_list|()
init|;
name|cit
operator|!=
name|Option
operator|::
name|c_ext
operator|.
name|end
argument_list|()
condition|;
operator|++
name|cit
control|)
block|{
if|if
condition|(
operator|(
operator|*
name|it
operator|)
operator|.
name|endsWith
argument_list|(
operator|(
operator|*
name|cit
operator|)
argument_list|)
condition|)
block|{
name|d_file
operator|=
operator|(
operator|*
name|it
operator|)
operator|.
name|left
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|.
name|length
argument_list|()
operator|-
operator|(
operator|*
name|cit
operator|)
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|toQString
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|d_file
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|cppit
init|=
name|Option
operator|::
name|cpp_ext
operator|.
name|begin
argument_list|()
init|;
name|cppit
operator|!=
name|Option
operator|::
name|cpp_ext
operator|.
name|end
argument_list|()
condition|;
operator|++
name|cppit
control|)
block|{
if|if
condition|(
operator|(
operator|*
name|it
operator|)
operator|.
name|endsWith
argument_list|(
operator|(
operator|*
name|cppit
operator|)
argument_list|)
condition|)
block|{
name|d_file
operator|=
operator|(
operator|*
name|it
operator|)
operator|.
name|left
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|.
name|length
argument_list|()
operator|-
operator|(
operator|*
name|cppit
operator|)
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|toQString
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|d_file
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|d_file
operator|=
name|odir
operator|+
literal|".deps/"
operator|+
name|fileFixify
argument_list|(
name|d_file
argument_list|,
name|FileFixifyBackwards
argument_list|)
operator|+
literal|".d"
expr_stmt|;
name|QString
name|d_file_d
init|=
name|escapeDependencyPath
argument_list|(
name|d_file
argument_list|)
decl_stmt|;
name|QStringList
name|deps
init|=
name|findDependencies
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|.
name|toQString
argument_list|()
argument_list|)
operator|.
name|filter
argument_list|(
name|QRegExp
argument_list|(
literal|"((^|/)"
operator|+
name|Option
operator|::
name|h_moc_mod
operator|+
literal|"|"
operator|+
name|Option
operator|::
name|cpp_moc_ext
operator|+
literal|"$)"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|deps
operator|.
name|isEmpty
argument_list|()
condition|)
name|t
operator|<<
name|d_file_d
operator|<<
literal|": "
operator|<<
name|escapeDependencyPaths
argument_list|(
name|deps
argument_list|)
operator|.
name|join
argument_list|(
literal|' '
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"-include "
operator|<<
name|d_file_d
operator|<<
name|endl
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_DISTCLEAN"
argument_list|)
operator|+=
name|d_file
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
name|t
operator|<<
literal|"####### Build rules\n\n"
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|values
argument_list|(
literal|"SUBLIBS"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ProString
name|libdir
init|=
literal|"tmp/"
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"SUBLIBS_DIR"
argument_list|)
condition|)
name|libdir
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"SUBLIBS_DIR"
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"SUBLIBS       = "
expr_stmt|;
specifier|const
name|ProStringList
modifier|&
name|l
init|=
name|project
operator|->
name|values
argument_list|(
literal|"SUBLIBS"
argument_list|)
decl_stmt|;
for|for
control|(
name|ProStringList
operator|::
name|ConstIterator
name|it
init|=
name|l
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|l
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
name|t
operator|<<
name|escapeFilePath
argument_list|(
name|libdir
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_PREFIX_STATICLIB"
argument_list|)
operator|+
operator|(
operator|*
name|it
operator|)
operator|+
literal|'.'
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_EXTENSION_STATICLIB"
argument_list|)
argument_list|)
operator|<<
literal|' '
expr_stmt|;
name|t
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
name|QString
name|target_deps
decl_stmt|;
if|if
condition|(
operator|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"depend_prl"
argument_list|)
operator|||
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"fast_depend_prl"
argument_list|)
operator|)
operator|&&
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_PRL_INTERNAL_FILES"
argument_list|)
condition|)
block|{
specifier|const
name|ProStringList
modifier|&
name|l
init|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PRL_INTERNAL_FILES"
argument_list|)
decl_stmt|;
name|ProStringList
operator|::
name|ConstIterator
name|it
decl_stmt|;
for|for
control|(
name|it
operator|=
name|l
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|l
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QMakeMetaInfo
name|libinfo
argument_list|(
name|project
argument_list|)
decl_stmt|;
if|if
condition|(
name|libinfo
operator|.
name|readLib
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|.
name|toQString
argument_list|()
argument_list|)
operator|&&
operator|!
name|libinfo
operator|.
name|isEmpty
argument_list|(
literal|"QMAKE_PRL_BUILD_DIR"
argument_list|)
condition|)
block|{
name|ProString
name|dir
decl_stmt|;
name|int
name|slsh
init|=
operator|(
operator|*
name|it
operator|)
operator|.
name|lastIndexOf
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
decl_stmt|;
if|if
condition|(
name|slsh
operator|!=
operator|-
literal|1
condition|)
name|dir
operator|=
operator|(
operator|*
name|it
operator|)
operator|.
name|left
argument_list|(
name|slsh
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QString
name|targ
init|=
name|dir
operator|+
name|libinfo
operator|.
name|first
argument_list|(
literal|"QMAKE_PRL_TARGET"
argument_list|)
decl_stmt|;
name|QString
name|targ_d
init|=
name|escapeDependencyPath
argument_list|(
name|targ
argument_list|)
decl_stmt|;
name|target_deps
operator|+=
literal|' '
operator|+
name|targ_d
expr_stmt|;
name|t
operator|<<
name|targ_d
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"fast_depend_prl"
argument_list|)
condition|)
name|t
operator|<<
literal|":\n\t@echo \"Creating '"
expr_stmt|;
else|else
name|t
operator|<<
literal|": FORCE\n\t@echo \"Creating/updating '"
expr_stmt|;
name|t
operator|<<
name|targ
operator|<<
literal|"'\"\n\t"
operator|<<
literal|"(cd "
operator|<<
name|escapeFilePath
argument_list|(
name|libinfo
operator|.
name|first
argument_list|(
literal|"QMAKE_PRL_BUILD_DIR"
argument_list|)
argument_list|)
operator|<<
literal|';'
operator|<<
literal|"$(MAKE))\n"
expr_stmt|;
block|}
block|}
block|}
name|QString
name|deps
init|=
name|escapeDependencyPath
argument_list|(
name|fileFixify
argument_list|(
name|Option
operator|::
name|output
operator|.
name|fileName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|allDeps
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_APP_FLAG"
argument_list|)
operator|.
name|isEmpty
argument_list|()
operator|||
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"aux"
condition|)
block|{
name|QString
name|destdir
init|=
name|project
operator|->
name|first
argument_list|(
literal|"DESTDIR"
argument_list|)
operator|.
name|toQString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_BUNDLE"
argument_list|)
condition|)
block|{
name|QString
name|bundle_loc
init|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_BUNDLE_LOCATION"
argument_list|)
operator|.
name|toQString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|bundle_loc
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|bundle_loc
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
name|bundle_loc
operator|.
name|prepend
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|bundle_loc
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
name|bundle_loc
operator|+=
literal|"/"
expr_stmt|;
name|destdir
operator|+=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_BUNDLE"
argument_list|)
operator|+
name|bundle_loc
expr_stmt|;
block|}
if|if
condition|(
name|do_incremental
condition|)
block|{
comment|//incremental target
name|QString
name|incr_target
init|=
name|var
argument_list|(
literal|"TARGET"
argument_list|)
operator|+
literal|"_incremental"
decl_stmt|;
if|if
condition|(
name|incr_target
operator|.
name|indexOf
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
operator|!=
operator|-
literal|1
condition|)
name|incr_target
operator|=
name|incr_target
operator|.
name|right
argument_list|(
name|incr_target
operator|.
name|length
argument_list|()
operator|-
operator|(
name|incr_target
operator|.
name|lastIndexOf
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
name|QString
name|incr_deps
decl_stmt|,
name|incr_objs
decl_stmt|;
if|if
condition|(
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_INCREMENTAL_STYLE"
argument_list|)
operator|==
literal|"ld"
condition|)
block|{
name|QString
name|incr_target_dir
init|=
name|var
argument_list|(
literal|"OBJECTS_DIR"
argument_list|)
operator|+
name|incr_target
operator|+
name|Option
operator|::
name|obj_ext
decl_stmt|;
name|QString
name|incr_target_dir_d
init|=
name|escapeDependencyPath
argument_list|(
name|incr_target_dir
argument_list|)
decl_stmt|;
name|QString
name|incr_target_dir_f
init|=
name|escapeFilePath
argument_list|(
name|incr_target_dir
argument_list|)
decl_stmt|;
comment|//actual target
name|t
operator|<<
name|incr_target_dir_d
operator|<<
literal|": $(OBJECTS)\n\t"
operator|<<
literal|"ld -r  -o "
operator|<<
name|incr_target_dir_f
operator|<<
literal|" $(OBJECTS)\n"
expr_stmt|;
comment|//communicated below
name|deps
operator|.
name|prepend
argument_list|(
name|incr_target_dir_d
operator|+
literal|' '
argument_list|)
expr_stmt|;
name|incr_deps
operator|=
literal|"$(INCREMENTAL_OBJECTS)"
expr_stmt|;
if|if
condition|(
operator|!
name|incr_objs
operator|.
name|isEmpty
argument_list|()
condition|)
name|incr_objs
operator|+=
literal|" "
expr_stmt|;
name|incr_objs
operator|+=
name|incr_target_dir_f
expr_stmt|;
block|}
else|else
block|{
comment|//actual target
name|QString
name|incr_target_dir
init|=
name|var
argument_list|(
literal|"DESTDIR"
argument_list|)
operator|+
literal|"lib"
operator|+
name|incr_target
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_EXTENSION_SHLIB"
argument_list|)
decl_stmt|;
name|QString
name|incr_target_dir_d
init|=
name|escapeDependencyPath
argument_list|(
name|incr_target_dir
argument_list|)
decl_stmt|;
name|QString
name|incr_target_dir_f
init|=
name|escapeFilePath
argument_list|(
name|incr_target_dir
argument_list|)
decl_stmt|;
name|QString
name|incr_lflags
init|=
name|var
argument_list|(
literal|"QMAKE_LFLAGS_SHLIB"
argument_list|)
operator|+
literal|" "
decl_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"debug"
argument_list|)
condition|)
name|incr_lflags
operator|+=
name|var
argument_list|(
literal|"QMAKE_LFLAGS_DEBUG"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"debug_info"
argument_list|)
condition|)
name|incr_lflags
operator|+=
name|var
argument_list|(
literal|"QMAKE_LFLAGS_RELEASE_WITH_DEBUGINFO"
argument_list|)
expr_stmt|;
else|else
name|incr_lflags
operator|+=
name|var
argument_list|(
literal|"QMAKE_LFLAGS_RELEASE"
argument_list|)
expr_stmt|;
name|t
operator|<<
name|incr_target_dir_d
operator|<<
literal|": $(INCREMENTAL_OBJECTS)\n\t"
expr_stmt|;
if|if
condition|(
operator|!
name|destdir
operator|.
name|isEmpty
argument_list|()
condition|)
name|t
operator|<<
literal|"\n\t"
operator|<<
name|mkdir_p_asstring
argument_list|(
name|destdir
argument_list|)
operator|<<
literal|"\n\t"
expr_stmt|;
name|t
operator|<<
literal|"$(LINK) "
operator|<<
name|incr_lflags
operator|<<
literal|" -o "
operator|<<
name|incr_target_dir_f
operator|<<
literal|" $(INCREMENTAL_OBJECTS)\n"
expr_stmt|;
comment|//communicated below
if|if
condition|(
operator|!
name|destdir
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|incr_objs
operator|.
name|isEmpty
argument_list|()
condition|)
name|incr_objs
operator|+=
literal|" "
expr_stmt|;
name|incr_objs
operator|+=
literal|"-L"
operator|+
name|escapeFilePath
argument_list|(
name|destdir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|incr_objs
operator|.
name|isEmpty
argument_list|()
condition|)
name|incr_objs
operator|+=
literal|" "
expr_stmt|;
name|incr_objs
operator|+=
literal|"-L"
operator|+
name|escapeFilePath
argument_list|(
name|qmake_getpwd
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|incr_objs
operator|.
name|isEmpty
argument_list|()
condition|)
name|incr_objs
operator|+=
literal|" "
expr_stmt|;
name|incr_objs
operator|+=
literal|" -l"
operator|+
name|escapeFilePath
argument_list|(
name|incr_target
argument_list|)
expr_stmt|;
name|deps
operator|.
name|prepend
argument_list|(
name|incr_target_dir_d
operator|+
literal|' '
argument_list|)
expr_stmt|;
name|incr_deps
operator|=
literal|"$(OBJECTS)"
expr_stmt|;
block|}
comment|//real target
name|t
operator|<<
name|var
argument_list|(
literal|"TARGET"
argument_list|)
operator|<<
literal|": "
operator|<<
name|depVar
argument_list|(
literal|"PRE_TARGETDEPS"
argument_list|)
operator|<<
literal|' '
operator|<<
name|incr_deps
operator|<<
literal|' '
operator|<<
name|target_deps
operator|<<
literal|' '
operator|<<
name|depVar
argument_list|(
literal|"POST_TARGETDEPS"
argument_list|)
operator|<<
literal|"\n\t"
expr_stmt|;
if|if
condition|(
operator|!
name|destdir
operator|.
name|isEmpty
argument_list|()
condition|)
name|t
operator|<<
literal|"\n\t"
operator|<<
name|mkdir_p_asstring
argument_list|(
name|destdir
argument_list|)
operator|<<
literal|"\n\t"
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_PRE_LINK"
argument_list|)
condition|)
name|t
operator|<<
name|var
argument_list|(
literal|"QMAKE_PRE_LINK"
argument_list|)
operator|<<
literal|"\n\t"
expr_stmt|;
name|t
operator|<<
literal|"$(LINK) $(LFLAGS) "
operator|<<
name|var
argument_list|(
literal|"QMAKE_LINK_O_FLAG"
argument_list|)
operator|<<
literal|"$(TARGET) "
operator|<<
name|incr_deps
operator|<<
literal|" "
operator|<<
name|incr_objs
operator|<<
literal|" $(OBJCOMP) $(LIBS)"
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_POST_LINK"
argument_list|)
condition|)
name|t
operator|<<
literal|"\n\t"
operator|<<
name|var
argument_list|(
literal|"QMAKE_POST_LINK"
argument_list|)
expr_stmt|;
name|t
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
else|else
block|{
name|t
operator|<<
literal|"$(TARGET): "
operator|<<
name|depVar
argument_list|(
literal|"PRE_TARGETDEPS"
argument_list|)
operator|<<
literal|" $(OBJECTS) "
operator|<<
name|target_deps
operator|<<
literal|' '
operator|<<
name|depVar
argument_list|(
literal|"POST_TARGETDEPS"
argument_list|)
operator|<<
literal|"\n\t"
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|!=
literal|"aux"
condition|)
block|{
if|if
condition|(
operator|!
name|destdir
operator|.
name|isEmpty
argument_list|()
condition|)
name|t
operator|<<
name|mkdir_p_asstring
argument_list|(
name|destdir
argument_list|)
operator|<<
literal|"\n\t"
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_PRE_LINK"
argument_list|)
condition|)
name|t
operator|<<
name|var
argument_list|(
literal|"QMAKE_PRE_LINK"
argument_list|)
operator|<<
literal|"\n\t"
expr_stmt|;
name|t
operator|<<
literal|"$(LINK) $(LFLAGS) "
operator|<<
name|var
argument_list|(
literal|"QMAKE_LINK_O_FLAG"
argument_list|)
operator|<<
literal|"$(TARGET) $(OBJECTS) $(OBJCOMP) $(LIBS)"
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_POST_LINK"
argument_list|)
condition|)
name|t
operator|<<
literal|"\n\t"
operator|<<
name|var
argument_list|(
literal|"QMAKE_POST_LINK"
argument_list|)
expr_stmt|;
block|}
name|t
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
name|allDeps
operator|=
literal|" $(TARGET)"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"staticlib"
argument_list|)
condition|)
block|{
name|QString
name|destdir_r
init|=
name|project
operator|->
name|first
argument_list|(
literal|"DESTDIR"
argument_list|)
operator|.
name|toQString
argument_list|()
decl_stmt|,
name|incr_deps
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_BUNDLE"
argument_list|)
condition|)
block|{
name|QString
name|bundle_loc
init|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_BUNDLE_LOCATION"
argument_list|)
operator|.
name|toQString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|bundle_loc
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|bundle_loc
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
name|bundle_loc
operator|.
name|prepend
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|bundle_loc
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
name|bundle_loc
operator|+=
literal|"/"
expr_stmt|;
name|destdir_r
operator|+=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_BUNDLE"
argument_list|)
operator|+
name|bundle_loc
expr_stmt|;
block|}
name|QString
name|destdir_d
init|=
name|escapeDependencyPath
argument_list|(
name|destdir_r
argument_list|)
decl_stmt|;
name|QString
name|destdir
init|=
name|escapeFilePath
argument_list|(
name|destdir_r
argument_list|)
decl_stmt|;
if|if
condition|(
name|do_incremental
condition|)
block|{
name|ProString
name|s_ext
init|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_EXTENSION_SHLIB"
argument_list|)
decl_stmt|;
name|QString
name|incr_target
init|=
name|var
argument_list|(
literal|"QMAKE_ORIG_TARGET"
argument_list|)
operator|.
name|replace
argument_list|(
name|QRegExp
argument_list|(
literal|"\\."
operator|+
name|s_ext
argument_list|)
argument_list|,
literal|""
argument_list|)
operator|.
name|replace
argument_list|(
name|QRegExp
argument_list|(
literal|"^lib"
argument_list|)
argument_list|,
literal|""
argument_list|)
operator|+
literal|"_incremental"
decl_stmt|;
if|if
condition|(
name|incr_target
operator|.
name|indexOf
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
operator|!=
operator|-
literal|1
condition|)
name|incr_target
operator|=
name|incr_target
operator|.
name|right
argument_list|(
name|incr_target
operator|.
name|length
argument_list|()
operator|-
operator|(
name|incr_target
operator|.
name|lastIndexOf
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_INCREMENTAL_STYLE"
argument_list|)
operator|==
literal|"ld"
condition|)
block|{
name|QString
name|incr_target_dir
init|=
name|var
argument_list|(
literal|"OBJECTS_DIR"
argument_list|)
operator|+
name|incr_target
operator|+
name|Option
operator|::
name|obj_ext
decl_stmt|;
name|QString
name|incr_target_dir_d
init|=
name|escapeDependencyPath
argument_list|(
name|incr_target_dir
argument_list|)
decl_stmt|;
name|QString
name|incr_target_dir_f
init|=
name|escapeFilePath
argument_list|(
name|incr_target_dir
argument_list|)
decl_stmt|;
comment|//actual target
specifier|const
name|QString
name|link_deps
init|=
literal|"$(OBJECTS) "
decl_stmt|;
name|t
operator|<<
name|incr_target_dir_d
operator|<<
literal|": "
operator|<<
name|link_deps
operator|<<
literal|"\n\t"
operator|<<
literal|"ld -r  -o "
operator|<<
name|incr_target_dir_f
operator|<<
literal|' '
operator|<<
name|link_deps
operator|<<
name|endl
expr_stmt|;
comment|//communicated below
name|ProStringList
modifier|&
name|cmd
init|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LINK_SHLIB_CMD"
argument_list|)
decl_stmt|;
name|cmd
index|[
literal|0
index|]
operator|=
name|cmd
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toQString
argument_list|()
operator|.
name|replace
argument_list|(
literal|"$(OBJECTS) "
argument_list|,
literal|"$(INCREMENTAL_OBJECTS)"
argument_list|)
expr_stmt|;
comment|//ick
name|cmd
operator|.
name|append
argument_list|(
name|incr_target_dir_f
argument_list|)
expr_stmt|;
name|deps
operator|.
name|prepend
argument_list|(
name|incr_target_dir_d
operator|+
literal|' '
argument_list|)
expr_stmt|;
name|incr_deps
operator|=
literal|"$(INCREMENTAL_OBJECTS)"
expr_stmt|;
block|}
else|else
block|{
comment|//actual target
name|QString
name|incr_target_dir
init|=
name|destdir_r
operator|+
literal|"lib"
operator|+
name|incr_target
operator|+
literal|'.'
operator|+
name|s_ext
decl_stmt|;
name|QString
name|incr_target_dir_d
init|=
name|escapeDependencyPath
argument_list|(
name|incr_target_dir
argument_list|)
decl_stmt|;
name|QString
name|incr_target_dir_f
init|=
name|escapeFilePath
argument_list|(
name|incr_target_dir
argument_list|)
decl_stmt|;
name|QString
name|incr_lflags
init|=
name|var
argument_list|(
literal|"QMAKE_LFLAGS_SHLIB"
argument_list|)
operator|+
literal|" "
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_LFLAGS_INCREMENTAL"
argument_list|)
condition|)
name|incr_lflags
operator|+=
name|var
argument_list|(
literal|"QMAKE_LFLAGS_INCREMENTAL"
argument_list|)
operator|+
literal|" "
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"debug"
argument_list|)
condition|)
name|incr_lflags
operator|+=
name|var
argument_list|(
literal|"QMAKE_LFLAGS_DEBUG"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"debug_info"
argument_list|)
condition|)
name|incr_lflags
operator|+=
name|var
argument_list|(
literal|"QMAKE_LFLAGS_RELEASE_WITH_DEBUGINFO"
argument_list|)
expr_stmt|;
else|else
name|incr_lflags
operator|+=
name|var
argument_list|(
literal|"QMAKE_LFLAGS_RELEASE"
argument_list|)
expr_stmt|;
name|t
operator|<<
name|incr_target_dir_d
operator|<<
literal|": $(INCREMENTAL_OBJECTS)\n\t"
expr_stmt|;
if|if
condition|(
operator|!
name|destdir
operator|.
name|isEmpty
argument_list|()
condition|)
name|t
operator|<<
name|mkdir_p_asstring
argument_list|(
name|destdir
argument_list|,
literal|false
argument_list|)
operator|<<
literal|"\n\t"
expr_stmt|;
name|t
operator|<<
literal|"$(LINK) "
operator|<<
name|incr_lflags
operator|<<
literal|' '
operator|<<
name|var
argument_list|(
literal|"QMAKE_LINK_O_FLAG"
argument_list|)
operator|<<
name|incr_target_dir_f
operator|<<
literal|" $(INCREMENTAL_OBJECTS)\n"
expr_stmt|;
comment|//communicated below
name|ProStringList
modifier|&
name|cmd
init|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LINK_SHLIB_CMD"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|destdir
operator|.
name|isEmpty
argument_list|()
condition|)
name|cmd
operator|.
name|append
argument_list|(
literal|" -L"
operator|+
name|destdir
argument_list|)
expr_stmt|;
name|cmd
operator|.
name|append
argument_list|(
literal|" -l"
operator|+
name|escapeFilePath
argument_list|(
name|incr_target
argument_list|)
argument_list|)
expr_stmt|;
name|deps
operator|.
name|prepend
argument_list|(
name|incr_target_dir_d
operator|+
literal|' '
argument_list|)
expr_stmt|;
name|incr_deps
operator|=
literal|"$(OBJECTS)"
expr_stmt|;
block|}
comment|//real target
name|t
operator|<<
name|destdir_d
operator|<<
literal|"$(TARGET): "
operator|<<
name|depVar
argument_list|(
literal|"PRE_TARGETDEPS"
argument_list|)
operator|<<
literal|' '
operator|<<
name|incr_deps
operator|<<
literal|" $(SUBLIBS) "
operator|<<
name|target_deps
operator|<<
literal|' '
operator|<<
name|depVar
argument_list|(
literal|"POST_TARGETDEPS"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|t
operator|<<
name|destdir_d
operator|<<
literal|"$(TARGET): "
operator|<<
name|depVar
argument_list|(
literal|"PRE_TARGETDEPS"
argument_list|)
operator|<<
literal|" $(OBJECTS) $(SUBLIBS) $(OBJCOMP) "
operator|<<
name|target_deps
operator|<<
literal|' '
operator|<<
name|depVar
argument_list|(
literal|"POST_TARGETDEPS"
argument_list|)
expr_stmt|;
block|}
name|allDeps
operator|=
literal|' '
operator|+
name|destdir_d
operator|+
literal|"$(TARGET)"
expr_stmt|;
if|if
condition|(
operator|!
name|destdir
operator|.
name|isEmpty
argument_list|()
condition|)
name|t
operator|<<
literal|"\n\t"
operator|<<
name|mkdir_p_asstring
argument_list|(
name|destdir
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_PRE_LINK"
argument_list|)
condition|)
name|t
operator|<<
literal|"\n\t"
operator|<<
name|var
argument_list|(
literal|"QMAKE_PRE_LINK"
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"compile_libtool"
argument_list|)
condition|)
block|{
name|t
operator|<<
literal|"\n\t"
operator|<<
name|var
argument_list|(
literal|"QMAKE_LINK_SHLIB_CMD"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"plugin"
argument_list|)
condition|)
block|{
name|t
operator|<<
literal|"\n\t"
operator|<<
literal|"-$(DEL_FILE) $(TARGET)\n\t"
operator|<<
name|var
argument_list|(
literal|"QMAKE_LINK_SHLIB_CMD"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|destdir
operator|.
name|isEmpty
argument_list|()
condition|)
name|t
operator|<<
literal|"\n\t"
operator|<<
literal|"-$(MOVE) $(TARGET) "
operator|<<
name|destdir
operator|<<
literal|" "
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_POST_LINK"
argument_list|)
condition|)
name|t
operator|<<
literal|"\n\t"
operator|<<
name|var
argument_list|(
literal|"QMAKE_POST_LINK"
argument_list|)
expr_stmt|;
name|t
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_BUNDLE"
argument_list|)
condition|)
block|{
name|bundledFiles
operator|<<
name|destdir_r
operator|+
literal|"$(TARGET)"
expr_stmt|;
name|t
operator|<<
literal|"\n\t"
operator|<<
literal|"-$(DEL_FILE) $(TARGET) $(TARGET0) $(DESTDIR)$(TARGET0)\n\t"
operator|<<
name|var
argument_list|(
literal|"QMAKE_LINK_SHLIB_CMD"
argument_list|)
operator|<<
literal|"\n\t"
operator|<<
name|mkdir_p_asstring
argument_list|(
literal|"\"`dirname $(DESTDIR)$(TARGETD)`\""
argument_list|,
literal|false
argument_list|)
operator|<<
literal|"\n\t"
operator|<<
literal|"-$(MOVE) $(TARGET) $(DESTDIR)$(TARGETD)\n\t"
operator|<<
name|mkdir_p_asstring
argument_list|(
literal|"\"`dirname $(DESTDIR)$(TARGET0)`\""
argument_list|,
literal|false
argument_list|)
operator|<<
literal|"\n\t"
operator|<<
name|varGlue
argument_list|(
literal|"QMAKE_LN_SHLIB"
argument_list|,
literal|"-"
argument_list|,
literal|" "
argument_list|,
literal|" Versions/Current/$(TARGET) $(DESTDIR)$(TARGET0)"
argument_list|)
operator|<<
literal|"\n\t"
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_POST_LINK"
argument_list|)
condition|)
name|t
operator|<<
literal|"\n\t"
operator|<<
name|var
argument_list|(
literal|"QMAKE_POST_LINK"
argument_list|)
expr_stmt|;
name|t
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_HPUX_SHLIB"
argument_list|)
condition|)
block|{
name|t
operator|<<
literal|"\n\t"
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"unversioned_libname"
argument_list|)
condition|)
name|t
operator|<<
literal|"-$(DEL_FILE) $(TARGET) $(TARGET0) $(TARGET1) $(TARGET2)"
expr_stmt|;
else|else
name|t
operator|<<
literal|"-$(DEL_FILE) $(TARGET)"
expr_stmt|;
name|t
operator|<<
literal|"\n\t"
operator|<<
name|var
argument_list|(
literal|"QMAKE_LINK_SHLIB_CMD"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"unversioned_libname"
argument_list|)
condition|)
block|{
name|t
operator|<<
literal|"\n\t"
operator|<<
name|varGlue
argument_list|(
literal|"QMAKE_LN_SHLIB"
argument_list|,
literal|"-"
argument_list|,
literal|" "
argument_list|,
literal|" $(TARGET) $(TARGET0)"
argument_list|)
operator|<<
literal|"\n\t"
operator|<<
name|varGlue
argument_list|(
literal|"QMAKE_LN_SHLIB"
argument_list|,
literal|"-"
argument_list|,
literal|" "
argument_list|,
literal|" $(TARGET) $(TARGET1)"
argument_list|)
operator|<<
literal|"\n\t"
operator|<<
name|varGlue
argument_list|(
literal|"QMAKE_LN_SHLIB"
argument_list|,
literal|"-"
argument_list|,
literal|" "
argument_list|,
literal|" $(TARGET) $(TARGET2)"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|destdir
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|t
operator|<<
literal|"\n\t"
operator|<<
literal|"-$(DEL_FILE) "
operator|<<
name|destdir
operator|<<
literal|"$(TARGET)\n\t"
operator|<<
literal|"-$(MOVE) $(TARGET)  "
operator|<<
name|destdir
operator|<<
literal|" "
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"unversioned_libname"
argument_list|)
condition|)
block|{
name|t
operator|<<
literal|"\n\t"
operator|<<
literal|"-$(DEL_FILE) "
operator|<<
name|destdir
operator|<<
literal|"$(TARGET0)\n\t"
operator|<<
literal|"-$(DEL_FILE) "
operator|<<
name|destdir
operator|<<
literal|"$(TARGET1)\n\t"
operator|<<
literal|"-$(DEL_FILE) "
operator|<<
name|destdir
operator|<<
literal|"$(TARGET2)\n\t"
operator|<<
literal|"-$(MOVE) $(TARGET0) "
operator|<<
name|destdir
operator|<<
literal|" \n\t"
operator|<<
literal|"-$(MOVE) $(TARGET1) "
operator|<<
name|destdir
operator|<<
literal|" \n\t"
operator|<<
literal|"-$(MOVE) $(TARGET2) "
operator|<<
name|destdir
operator|<<
literal|" "
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_POST_LINK"
argument_list|)
condition|)
name|t
operator|<<
literal|"\n\t"
operator|<<
name|var
argument_list|(
literal|"QMAKE_POST_LINK"
argument_list|)
expr_stmt|;
name|t
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
else|else
block|{
name|t
operator|<<
literal|"\n\t"
operator|<<
literal|"-$(DEL_FILE) $(TARGET) $(TARGET0)\n\t"
operator|<<
name|var
argument_list|(
literal|"QMAKE_LINK_SHLIB_CMD"
argument_list|)
operator|<<
literal|"\n\t"
expr_stmt|;
name|t
operator|<<
name|varGlue
argument_list|(
literal|"QMAKE_LN_SHLIB"
argument_list|,
literal|""
argument_list|,
literal|" "
argument_list|,
literal|" $(TARGET) $(TARGET0)"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|destdir
operator|.
name|isEmpty
argument_list|()
condition|)
name|t
operator|<<
literal|"\n\t"
operator|<<
literal|"-$(DEL_FILE) "
operator|<<
name|destdir
operator|<<
literal|"$(TARGET)\n\t"
operator|<<
literal|"-$(DEL_FILE) "
operator|<<
name|destdir
operator|<<
literal|"$(TARGET0)\n\t"
operator|<<
literal|"-$(MOVE) $(TARGET)  "
operator|<<
name|destdir
operator|<<
literal|" \n\t"
operator|<<
literal|"-$(MOVE) $(TARGET0) "
operator|<<
name|destdir
operator|<<
literal|" \n\t"
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_POST_LINK"
argument_list|)
condition|)
name|t
operator|<<
literal|"\n\t"
operator|<<
name|var
argument_list|(
literal|"QMAKE_POST_LINK"
argument_list|)
expr_stmt|;
name|t
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
name|t
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"plugin"
argument_list|)
condition|)
block|{
name|t
operator|<<
literal|"staticlib: $(TARGETA)\n\n"
expr_stmt|;
name|t
operator|<<
literal|"$(TARGETA): "
operator|<<
name|depVar
argument_list|(
literal|"PRE_TARGETDEPS"
argument_list|)
operator|<<
literal|" $(OBJECTS) $(OBJCOMP)"
expr_stmt|;
if|if
condition|(
name|do_incremental
condition|)
name|t
operator|<<
literal|" $(INCREMENTAL_OBJECTS)"
expr_stmt|;
name|t
operator|<<
literal|' '
operator|<<
name|depVar
argument_list|(
literal|"POST_TARGETDEPS"
argument_list|)
operator|<<
literal|"\n\t"
operator|<<
literal|"-$(DEL_FILE) $(TARGETA) \n\t"
operator|<<
name|var
argument_list|(
literal|"QMAKE_AR_CMD"
argument_list|)
expr_stmt|;
if|if
condition|(
name|do_incremental
condition|)
name|t
operator|<<
literal|" $(INCREMENTAL_OBJECTS)"
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_RANLIB"
argument_list|)
condition|)
name|t
operator|<<
literal|"\n\t$(RANLIB) $(TARGETA)"
expr_stmt|;
name|t
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
block|}
else|else
block|{
name|QString
name|destdir_r
init|=
name|project
operator|->
name|first
argument_list|(
literal|"DESTDIR"
argument_list|)
operator|.
name|toQString
argument_list|()
decl_stmt|;
name|QString
name|destdir_d
init|=
name|escapeDependencyPath
argument_list|(
name|destdir_r
argument_list|)
decl_stmt|;
name|QString
name|destdir
init|=
name|escapeFilePath
argument_list|(
name|destdir_r
argument_list|)
decl_stmt|;
name|allDeps
operator|=
literal|' '
operator|+
name|destdir_d
operator|+
literal|"$(TARGET)"
operator|+
name|varGlue
argument_list|(
literal|"QMAKE_AR_SUBLIBS"
argument_list|,
literal|' '
operator|+
name|destdir_d
argument_list|,
literal|' '
operator|+
name|destdir_d
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"staticlib: "
operator|<<
name|destdir_d
operator|<<
literal|"$(TARGET)\n\n"
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_AR_SUBLIBS"
argument_list|)
condition|)
block|{
name|t
operator|<<
name|destdir_d
operator|<<
literal|"$(TARGET): "
operator|<<
name|depVar
argument_list|(
literal|"PRE_TARGETDEPS"
argument_list|)
operator|<<
literal|" $(OBJECTS) $(OBJCOMP) "
operator|<<
name|depVar
argument_list|(
literal|"POST_TARGETDEPS"
argument_list|)
operator|<<
literal|"\n\t"
expr_stmt|;
if|if
condition|(
operator|!
name|destdir
operator|.
name|isEmpty
argument_list|()
condition|)
name|t
operator|<<
name|mkdir_p_asstring
argument_list|(
name|destdir
argument_list|,
literal|false
argument_list|)
operator|<<
literal|"\n\t"
expr_stmt|;
name|t
operator|<<
literal|"-$(DEL_FILE) $(TARGET)\n\t"
operator|<<
name|var
argument_list|(
literal|"QMAKE_AR_CMD"
argument_list|)
operator|<<
literal|"\n"
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_POST_LINK"
argument_list|)
condition|)
name|t
operator|<<
literal|"\t"
operator|<<
name|var
argument_list|(
literal|"QMAKE_POST_LINK"
argument_list|)
operator|<<
literal|"\n"
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_RANLIB"
argument_list|)
condition|)
name|t
operator|<<
literal|"\t$(RANLIB) $(TARGET)\n"
expr_stmt|;
if|if
condition|(
operator|!
name|destdir
operator|.
name|isEmpty
argument_list|()
condition|)
name|t
operator|<<
literal|"\t-$(DEL_FILE) "
operator|<<
name|destdir
operator|<<
literal|"$(TARGET)\n"
operator|<<
literal|"\t-$(MOVE) $(TARGET) "
operator|<<
name|destdir
operator|<<
literal|" \n"
expr_stmt|;
block|}
else|else
block|{
name|int
name|max_files
init|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_MAX_FILES_PER_AR"
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|ProStringList
name|objs
init|=
name|project
operator|->
name|values
argument_list|(
literal|"OBJECTS"
argument_list|)
operator|+
name|project
operator|->
name|values
argument_list|(
literal|"OBJCOMP"
argument_list|)
decl_stmt|,
name|libs
init|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_AR_SUBLIBS"
argument_list|)
decl_stmt|;
name|libs
operator|.
name|prepend
argument_list|(
literal|"$(TARGET)"
argument_list|)
expr_stmt|;
for|for
control|(
name|ProStringList
operator|::
name|Iterator
name|libit
init|=
name|libs
operator|.
name|begin
argument_list|()
init|,
name|objit
init|=
name|objs
operator|.
name|begin
argument_list|()
init|;
name|libit
operator|!=
name|libs
operator|.
name|end
argument_list|()
condition|;
operator|++
name|libit
control|)
block|{
name|ProStringList
name|build
decl_stmt|;
for|for
control|(
name|int
name|cnt
init|=
literal|0
init|;
name|cnt
operator|<
name|max_files
operator|&&
name|objit
operator|!=
name|objs
operator|.
name|end
argument_list|()
condition|;
operator|++
name|objit
operator|,
name|cnt
operator|++
control|)
name|build
operator|<<
operator|(
operator|*
name|objit
operator|)
expr_stmt|;
name|QString
name|ar
decl_stmt|;
name|ProString
name|lib
init|=
name|escapeFilePath
argument_list|(
operator|*
name|libit
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
operator|*
name|libit
operator|)
operator|==
literal|"$(TARGET)"
condition|)
block|{
name|t
operator|<<
name|destdir_d
operator|<<
literal|"$(TARGET): "
operator|<<
name|depVar
argument_list|(
literal|"PRE_TARGETDEPS"
argument_list|)
operator|<<
literal|' '
operator|<<
name|depVar
argument_list|(
literal|"POST_TARGETDEPS"
argument_list|)
operator|<<
name|valList
argument_list|(
name|escapeDependencyPaths
argument_list|(
name|build
argument_list|)
argument_list|)
operator|<<
literal|"\n\t"
expr_stmt|;
name|ar
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_AR_CMD"
argument_list|)
operator|.
name|toQString
argument_list|()
expr_stmt|;
name|ar
operator|.
name|replace
argument_list|(
literal|"$(OBJECTS)"
argument_list|,
name|escapeFilePaths
argument_list|(
name|build
argument_list|)
operator|.
name|join
argument_list|(
literal|' '
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|t
operator|<<
name|escapeDependencyPath
argument_list|(
operator|*
name|libit
argument_list|)
operator|<<
literal|": "
operator|<<
name|valList
argument_list|(
name|escapeDependencyPaths
argument_list|(
name|build
argument_list|)
argument_list|)
operator|<<
literal|"\n\t"
expr_stmt|;
name|ar
operator|=
literal|"$(AR) "
operator|+
name|lib
operator|+
literal|' '
operator|+
name|escapeFilePaths
argument_list|(
name|build
argument_list|)
operator|.
name|join
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|destdir
operator|.
name|isEmpty
argument_list|()
condition|)
name|t
operator|<<
name|mkdir_p_asstring
argument_list|(
name|destdir
argument_list|,
literal|false
argument_list|)
operator|<<
literal|"\n\t"
expr_stmt|;
name|t
operator|<<
literal|"-$(DEL_FILE) "
operator|<<
name|lib
operator|<<
literal|"\n\t"
operator|<<
name|ar
operator|<<
literal|"\n"
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_POST_LINK"
argument_list|)
condition|)
name|t
operator|<<
literal|"\t"
operator|<<
name|var
argument_list|(
literal|"QMAKE_POST_LINK"
argument_list|)
operator|<<
literal|"\n"
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_RANLIB"
argument_list|)
condition|)
name|t
operator|<<
literal|"\t$(RANLIB) "
operator|<<
name|lib
operator|<<
literal|"\n"
expr_stmt|;
if|if
condition|(
operator|!
name|destdir
operator|.
name|isEmpty
argument_list|()
condition|)
name|t
operator|<<
literal|"\t-$(DEL_FILE) "
operator|<<
name|destdir
operator|<<
name|lib
operator|<<
literal|"\n"
operator|<<
literal|"\t-$(MOVE) "
operator|<<
name|lib
operator|<<
literal|' '
operator|<<
name|destdir
operator|<<
literal|" \n"
expr_stmt|;
block|}
block|}
name|t
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
name|writeMakeQmake
argument_list|(
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_FAILED_REQUIREMENTS"
argument_list|)
operator|&&
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"no_autoqmake"
argument_list|)
condition|)
block|{
name|QStringList
name|meta_files
decl_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"create_libtool"
argument_list|)
operator|&&
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"lib"
operator|&&
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"compile_libtool"
argument_list|)
condition|)
block|{
comment|//libtool
name|meta_files
operator|+=
name|libtoolFileName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"create_pc"
argument_list|)
operator|&&
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"lib"
condition|)
block|{
comment|//pkg-config
name|meta_files
operator|+=
name|pkgConfigFileName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|meta_files
operator|.
name|isEmpty
argument_list|()
condition|)
name|t
operator|<<
name|escapeDependencyPaths
argument_list|(
name|meta_files
argument_list|)
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
operator|<<
literal|": \n\t"
operator|<<
literal|"@$(QMAKE) -prl "
operator|<<
name|buildArgs
argument_list|()
operator|<<
literal|' '
operator|<<
name|escapeFilePath
argument_list|(
name|project
operator|->
name|projectFile
argument_list|()
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_BUNDLE"
argument_list|)
condition|)
block|{
name|QHash
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|symlinks
decl_stmt|;
name|ProStringList
modifier|&
name|alldeps
init|=
name|project
operator|->
name|values
argument_list|(
literal|"ALL_DEPS"
argument_list|)
decl_stmt|;
name|QString
name|bundle_dir
init|=
name|project
operator|->
name|first
argument_list|(
literal|"DESTDIR"
argument_list|)
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_BUNDLE"
argument_list|)
operator|+
literal|"/"
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_PKGINFO"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ProString
name|pkginfo
init|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_PKGINFO"
argument_list|)
decl_stmt|;
name|ProString
name|pkginfo_f
init|=
name|escapeFilePath
argument_list|(
name|pkginfo
argument_list|)
decl_stmt|;
name|ProString
name|pkginfo_d
init|=
name|escapeDependencyPath
argument_list|(
name|pkginfo
argument_list|)
decl_stmt|;
name|bundledFiles
operator|<<
name|pkginfo
expr_stmt|;
name|alldeps
operator|<<
name|pkginfo
expr_stmt|;
name|QString
name|destdir
init|=
name|bundle_dir
operator|+
literal|"Contents"
decl_stmt|;
name|t
operator|<<
name|pkginfo_d
operator|<<
literal|": \n\t"
expr_stmt|;
if|if
condition|(
operator|!
name|destdir
operator|.
name|isEmpty
argument_list|()
condition|)
name|t
operator|<<
name|mkdir_p_asstring
argument_list|(
name|destdir
argument_list|)
operator|<<
literal|"\n\t"
expr_stmt|;
name|t
operator|<<
literal|"@$(DEL_FILE) "
operator|<<
name|pkginfo_f
operator|<<
literal|"\n\t"
operator|<<
literal|"@echo \"APPL"
operator|<<
operator|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_PKGINFO_TYPEINFO"
argument_list|)
condition|?
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"????"
argument_list|)
else|:
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_PKGINFO_TYPEINFO"
argument_list|)
operator|.
name|left
argument_list|(
literal|4
argument_list|)
operator|)
operator|<<
literal|"\"> "
operator|<<
name|pkginfo_f
operator|<<
name|endl
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_BUNDLE_RESOURCE_FILE"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ProString
name|resources
init|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_BUNDLE_RESOURCE_FILE"
argument_list|)
decl_stmt|;
name|ProString
name|resources_f
init|=
name|escapeFilePath
argument_list|(
name|resources
argument_list|)
decl_stmt|;
name|ProString
name|resources_d
init|=
name|escapeDependencyPath
argument_list|(
name|resources
argument_list|)
decl_stmt|;
name|bundledFiles
operator|<<
name|resources
expr_stmt|;
name|alldeps
operator|<<
name|resources
expr_stmt|;
name|QString
name|destdir
init|=
name|bundle_dir
operator|+
literal|"Contents/Resources"
decl_stmt|;
name|t
operator|<<
name|resources_d
operator|<<
literal|": \n\t"
expr_stmt|;
name|t
operator|<<
name|mkdir_p_asstring
argument_list|(
name|destdir
argument_list|)
operator|<<
literal|"\n\t"
expr_stmt|;
name|t
operator|<<
literal|"@touch "
operator|<<
name|resources_f
operator|<<
literal|"\n\t\n"
expr_stmt|;
block|}
comment|//copy the plist
while|while
condition|(
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"no_plist"
argument_list|)
condition|)
block|{
comment|// 'while' just to be able to 'break'
name|QString
name|info_plist
init|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_INFO_PLIST"
argument_list|)
operator|.
name|toQString
argument_list|()
decl_stmt|;
if|if
condition|(
name|info_plist
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|info_plist
operator|=
name|escapeFilePath
argument_list|(
name|specdir
argument_list|()
operator|+
name|QDir
operator|::
name|separator
argument_list|()
operator|+
literal|"Info.plist."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|exists
argument_list|(
name|Option
operator|::
name|normalizePath
argument_list|(
name|info_plist
argument_list|)
argument_list|)
condition|)
block|{
name|warn_msg
argument_list|(
name|WarnLogic
argument_list|,
literal|"Could not resolve Info.plist: '%s'. Check if QMAKE_INFO_PLIST points to a valid file."
argument_list|,
name|info_plist
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
else|else
block|{
name|info_plist
operator|=
name|escapeFilePath
argument_list|(
name|fileFixify
argument_list|(
name|info_plist
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|bool
name|isFramework
init|=
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"lib"
operator|&&
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"lib_bundle"
argument_list|)
decl_stmt|;
name|QString
name|info_plist_out
init|=
name|bundle_dir
operator|+
operator|(
name|isFramework
condition|?
operator|(
literal|"Versions/"
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_FRAMEWORK_VERSION"
argument_list|)
operator|+
literal|"/Resources/Info.plist"
operator|)
else|:
literal|"Contents/Info.plist"
operator|)
decl_stmt|;
name|bundledFiles
operator|<<
name|info_plist_out
expr_stmt|;
name|alldeps
operator|<<
name|info_plist_out
expr_stmt|;
name|QString
name|destdir
init|=
name|info_plist_out
operator|.
name|section
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|,
literal|0
argument_list|,
operator|-
literal|2
argument_list|)
decl_stmt|;
name|t
operator|<<
name|escapeDependencyPath
argument_list|(
name|info_plist_out
argument_list|)
operator|<<
literal|": \n\t"
expr_stmt|;
name|info_plist_out
operator|=
name|escapeFilePath
argument_list|(
name|info_plist_out
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|destdir
operator|.
name|isEmpty
argument_list|()
condition|)
name|t
operator|<<
name|mkdir_p_asstring
argument_list|(
name|destdir
argument_list|,
literal|false
argument_list|)
operator|<<
literal|"\n\t"
expr_stmt|;
name|ProStringList
name|commonSedArgs
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|values
argument_list|(
literal|"VERSION"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|commonSedArgs
operator|<<
literal|"-e \"s,@SHORT_VERSION@,"
operator|<<
name|project
operator|->
name|first
argument_list|(
literal|"VER_MAJ"
argument_list|)
operator|<<
literal|"."
operator|<<
name|project
operator|->
name|first
argument_list|(
literal|"VER_MIN"
argument_list|)
operator|<<
literal|",g\" "
expr_stmt|;
name|commonSedArgs
operator|<<
literal|"-e \"s,@FULL_VERSION@,"
operator|<<
name|project
operator|->
name|first
argument_list|(
literal|"VER_MAJ"
argument_list|)
operator|<<
literal|"."
operator|<<
name|project
operator|->
name|first
argument_list|(
literal|"VER_MIN"
argument_list|)
operator|<<
literal|"."
operator|<<
name|project
operator|->
name|first
argument_list|(
literal|"VER_PAT"
argument_list|)
operator|<<
literal|",g\" "
expr_stmt|;
block|}
name|commonSedArgs
operator|<<
literal|"-e \"s,@TYPEINFO@,"
operator|<<
operator|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_PKGINFO_TYPEINFO"
argument_list|)
condition|?
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"????"
argument_list|)
else|:
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_PKGINFO_TYPEINFO"
argument_list|)
operator|.
name|left
argument_list|(
literal|4
argument_list|)
operator|)
operator|<<
literal|",g\" "
expr_stmt|;
name|QString
name|bundlePrefix
init|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_TARGET_BUNDLE_PREFIX"
argument_list|)
operator|.
name|toQString
argument_list|()
decl_stmt|;
if|if
condition|(
name|bundlePrefix
operator|.
name|isEmpty
argument_list|()
condition|)
name|bundlePrefix
operator|=
literal|"com.yourcompany"
expr_stmt|;
if|if
condition|(
name|bundlePrefix
operator|.
name|endsWith
argument_list|(
literal|"."
argument_list|)
condition|)
name|bundlePrefix
operator|.
name|chop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QString
name|bundleIdentifier
init|=
name|bundlePrefix
operator|+
literal|"."
operator|+
name|var
argument_list|(
literal|"QMAKE_BUNDLE"
argument_list|)
decl_stmt|;
if|if
condition|(
name|bundleIdentifier
operator|.
name|endsWith
argument_list|(
literal|".app"
argument_list|)
condition|)
name|bundleIdentifier
operator|.
name|chop
argument_list|(
literal|4
argument_list|)
expr_stmt|;
if|if
condition|(
name|bundleIdentifier
operator|.
name|endsWith
argument_list|(
literal|".framework"
argument_list|)
condition|)
name|bundleIdentifier
operator|.
name|chop
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|commonSedArgs
operator|<<
literal|"-e \"s,@BUNDLEIDENTIFIER@,"
operator|<<
name|bundleIdentifier
operator|<<
literal|",g\" "
expr_stmt|;
if|if
condition|(
operator|!
name|isFramework
condition|)
block|{
name|QString
name|icon
init|=
name|fileFixify
argument_list|(
name|var
argument_list|(
literal|"ICON"
argument_list|)
argument_list|)
decl_stmt|;
name|t
operator|<<
literal|"@$(DEL_FILE) "
operator|<<
name|info_plist_out
operator|<<
literal|"\n\t"
operator|<<
literal|"@sed "
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|ProString
modifier|&
name|arg
decl|,
name|commonSedArgs
control|)
name|t
operator|<<
name|arg
expr_stmt|;
name|t
operator|<<
literal|"-e \"s,@ICON@,"
operator|<<
name|icon
operator|.
name|section
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|,
operator|-
literal|1
argument_list|)
operator|<<
literal|",g\" "
operator|<<
literal|"-e \"s,@EXECUTABLE@,"
operator|<<
name|var
argument_list|(
literal|"QMAKE_ORIG_TARGET"
argument_list|)
operator|<<
literal|",g\" "
operator|<<
literal|"-e \"s,@LIBRARY@,"
operator|<<
name|var
argument_list|(
literal|"QMAKE_ORIG_TARGET"
argument_list|)
operator|<<
literal|",g\" "
operator|<<
literal|"-e \"s,@TYPEINFO@,"
operator|<<
operator|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_PKGINFO_TYPEINFO"
argument_list|)
condition|?
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"????"
argument_list|)
else|:
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_PKGINFO_TYPEINFO"
argument_list|)
operator|.
name|left
argument_list|(
literal|4
argument_list|)
operator|)
operator|<<
literal|",g\" "
operator|<<
literal|""
operator|<<
name|info_plist
operator|<<
literal|">"
operator|<<
name|info_plist_out
operator|<<
name|endl
expr_stmt|;
comment|//copy the icon
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"ICON"
argument_list|)
condition|)
block|{
name|QString
name|dir
init|=
name|bundle_dir
operator|+
literal|"Contents/Resources/"
decl_stmt|;
specifier|const
name|QString
name|icon_path
init|=
name|dir
operator|+
name|icon
operator|.
name|section
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|QString
name|icon_path_f
init|=
name|escapeFilePath
argument_list|(
name|icon_path
argument_list|)
decl_stmt|;
name|bundledFiles
operator|<<
name|icon_path
expr_stmt|;
name|alldeps
operator|<<
name|icon_path
expr_stmt|;
name|t
operator|<<
name|escapeDependencyPath
argument_list|(
name|icon_path
argument_list|)
operator|<<
literal|": "
operator|<<
name|escapeDependencyPath
argument_list|(
name|icon
argument_list|)
operator|<<
literal|"\n\t"
operator|<<
name|mkdir_p_asstring
argument_list|(
name|dir
argument_list|)
operator|<<
literal|"\n\t"
operator|<<
literal|"@$(DEL_FILE) "
operator|<<
name|icon_path_f
operator|<<
literal|"\n\t"
operator|<<
literal|"@$(COPY_FILE) "
operator|<<
name|escapeFilePath
argument_list|(
name|icon
argument_list|)
operator|<<
literal|' '
operator|<<
name|icon_path_f
operator|<<
name|endl
expr_stmt|;
block|}
block|}
else|else
block|{
name|symlinks
index|[
name|bundle_dir
operator|+
literal|"Resources"
index|]
operator|=
literal|"Versions/Current/Resources"
expr_stmt|;
name|t
operator|<<
literal|"@$(DEL_FILE) "
operator|<<
name|info_plist_out
operator|<<
literal|"\n\t"
operator|<<
literal|"@sed "
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|ProString
modifier|&
name|arg
decl|,
name|commonSedArgs
control|)
name|t
operator|<<
name|arg
expr_stmt|;
name|t
operator|<<
literal|"-e \"s,@LIBRARY@,"
operator|<<
name|var
argument_list|(
literal|"QMAKE_ORIG_TARGET"
argument_list|)
operator|<<
literal|",g\" "
operator|<<
literal|"-e \"s,@TYPEINFO@,"
operator|<<
operator|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_PKGINFO_TYPEINFO"
argument_list|)
condition|?
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"????"
argument_list|)
else|:
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_PKGINFO_TYPEINFO"
argument_list|)
operator|.
name|left
argument_list|(
literal|4
argument_list|)
operator|)
operator|<<
literal|",g\" "
operator|<<
literal|""
operator|<<
name|info_plist
operator|<<
literal|">"
operator|<<
name|info_plist_out
operator|<<
name|endl
expr_stmt|;
block|}
break|break;
block|}
comment|// project->isActiveConfig("no_plist")
comment|//copy other data
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_BUNDLE_DATA"
argument_list|)
condition|)
block|{
specifier|const
name|ProStringList
modifier|&
name|bundle_data
init|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_BUNDLE_DATA"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bundle_data
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|ProStringList
modifier|&
name|files
init|=
name|project
operator|->
name|values
argument_list|(
name|ProKey
argument_list|(
name|bundle_data
index|[
name|i
index|]
operator|+
literal|".files"
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|path
init|=
name|bundle_dir
decl_stmt|;
specifier|const
name|ProKey
name|vkey
argument_list|(
name|bundle_data
index|[
name|i
index|]
operator|+
literal|".version"
argument_list|)
decl_stmt|;
specifier|const
name|ProKey
name|pkey
argument_list|(
name|bundle_data
index|[
name|i
index|]
operator|+
literal|".path"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
name|vkey
argument_list|)
condition|)
block|{
name|QString
name|version
init|=
name|project
operator|->
name|first
argument_list|(
name|vkey
argument_list|)
operator|+
literal|"/"
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_FRAMEWORK_VERSION"
argument_list|)
operator|+
literal|"/"
decl_stmt|;
name|ProString
name|name
init|=
name|project
operator|->
name|first
argument_list|(
name|pkey
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
name|name
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|>
literal|0
condition|)
name|name
operator|=
name|name
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|symlinks
index|[
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|path
operator|+
name|name
argument_list|)
index|]
operator|=
name|project
operator|->
name|first
argument_list|(
name|vkey
argument_list|)
operator|+
literal|"/Current/"
operator|+
name|name
expr_stmt|;
name|path
operator|+=
name|version
expr_stmt|;
block|}
name|path
operator|+=
name|project
operator|->
name|first
argument_list|(
name|pkey
argument_list|)
operator|.
name|toQString
argument_list|()
expr_stmt|;
name|path
operator|=
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|path
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|file
init|=
literal|0
init|;
name|file
operator|<
name|files
operator|.
name|count
argument_list|()
condition|;
name|file
operator|++
control|)
block|{
name|QString
name|fn
init|=
name|files
operator|.
name|at
argument_list|(
name|file
argument_list|)
operator|.
name|toQString
argument_list|()
decl_stmt|;
name|QString
name|src
init|=
name|fileFixify
argument_list|(
name|fn
argument_list|,
name|FileFixifyAbsolute
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
name|src
argument_list|)
condition|)
name|src
operator|=
name|fn
expr_stmt|;
name|QString
name|dst
init|=
name|path
operator|+
name|Option
operator|::
name|dir_sep
operator|+
name|fileInfo
argument_list|(
name|fn
argument_list|)
operator|.
name|fileName
argument_list|()
decl_stmt|;
name|bundledFiles
operator|<<
name|dst
expr_stmt|;
name|alldeps
operator|<<
name|dst
expr_stmt|;
name|t
operator|<<
name|escapeDependencyPath
argument_list|(
name|dst
argument_list|)
operator|<<
literal|": "
operator|<<
name|escapeDependencyPath
argument_list|(
name|src
argument_list|)
operator|<<
literal|"\n\t"
operator|<<
name|mkdir_p_asstring
argument_list|(
name|path
argument_list|)
operator|<<
literal|"\n\t"
expr_stmt|;
name|src
operator|=
name|escapeFilePath
argument_list|(
name|src
argument_list|)
expr_stmt|;
name|dst
operator|=
name|escapeFilePath
argument_list|(
name|dst
argument_list|)
expr_stmt|;
name|QFileInfo
name|fi
argument_list|(
name|fileInfo
argument_list|(
name|fn
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fi
operator|.
name|isDir
argument_list|()
condition|)
name|t
operator|<<
literal|"@$(DEL_FILE) -r "
operator|<<
name|dst
operator|<<
literal|"\n\t"
operator|<<
literal|"@$(COPY_DIR) "
operator|<<
name|src
operator|<<
literal|" "
operator|<<
name|dst
operator|<<
name|endl
expr_stmt|;
else|else
name|t
operator|<<
literal|"@$(DEL_FILE) "
operator|<<
name|dst
operator|<<
literal|"\n\t"
operator|<<
literal|"@$(COPY_FILE) "
operator|<<
name|src
operator|<<
literal|" "
operator|<<
name|dst
operator|<<
name|endl
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|symlinks
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QString
name|bundle_dir_f
init|=
name|escapeFilePath
argument_list|(
name|bundle_dir
argument_list|)
decl_stmt|;
name|QHash
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
operator|::
name|ConstIterator
name|symIt
init|=
name|symlinks
operator|.
name|constBegin
argument_list|()
decl_stmt|,
name|symEnd
init|=
name|symlinks
operator|.
name|constEnd
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|symIt
operator|!=
name|symEnd
condition|;
operator|++
name|symIt
control|)
block|{
name|bundledFiles
operator|<<
name|symIt
operator|.
name|key
argument_list|()
expr_stmt|;
name|alldeps
operator|<<
name|symIt
operator|.
name|key
argument_list|()
expr_stmt|;
name|t
operator|<<
name|escapeDependencyPath
argument_list|(
name|symIt
operator|.
name|key
argument_list|()
argument_list|)
operator|<<
literal|":\n\t"
operator|<<
name|mkdir_p_asstring
argument_list|(
name|bundle_dir
argument_list|)
operator|<<
literal|"\n\t"
operator|<<
literal|"@$(SYMLINK) "
operator|<<
name|escapeFilePath
argument_list|(
name|symIt
operator|.
name|value
argument_list|()
argument_list|)
operator|<<
literal|' '
operator|<<
name|bundle_dir_f
operator|<<
name|endl
expr_stmt|;
block|}
name|QString
name|currentLink
init|=
name|bundle_dir
operator|+
literal|"Versions/Current"
decl_stmt|;
name|QString
name|currentLink_f
init|=
name|escapeDependencyPath
argument_list|(
name|currentLink
argument_list|)
decl_stmt|;
name|bundledFiles
operator|<<
name|currentLink
expr_stmt|;
name|alldeps
operator|<<
name|currentLink
expr_stmt|;
name|t
operator|<<
name|currentLink_f
operator|<<
literal|": $(MAKEFILE)\n\t"
operator|<<
name|mkdir_p_asstring
argument_list|(
name|bundle_dir
operator|+
literal|"Versions"
argument_list|)
operator|<<
literal|"\n\t"
operator|<<
literal|"@-$(DEL_FILE) "
operator|<<
name|currentLink_f
operator|<<
literal|"\n\t"
operator|<<
literal|"@$(SYMLINK) "
operator|<<
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_FRAMEWORK_VERSION"
argument_list|)
operator|<<
literal|' '
operator|<<
name|currentLink_f
operator|<<
name|endl
expr_stmt|;
block|}
block|}
name|t
operator|<<
name|endl
operator|<<
literal|"all: "
operator|<<
name|deps
operator|<<
name|valGlue
argument_list|(
name|escapeDependencyPaths
argument_list|(
name|project
operator|->
name|values
argument_list|(
literal|"ALL_DEPS"
argument_list|)
argument_list|)
argument_list|,
literal|" \\\n\t\t"
argument_list|,
literal|" \\\n\t\t"
argument_list|,
literal|""
argument_list|)
operator|<<
name|allDeps
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"dist: distdir FORCE\n\t"
expr_stmt|;
name|t
operator|<<
literal|"(cd `dirname $(DISTDIR)`&& $(TAR) $(DISTNAME).tar $(DISTNAME)&& $(COMPRESS) $(DISTNAME).tar)"
literal|"&& $(MOVE) `dirname $(DISTDIR)`"
operator|<<
name|Option
operator|::
name|dir_sep
operator|<<
literal|"$(DISTNAME).tar.gz ."
literal|"&& $(DEL_FILE) -r $(DISTDIR)"
expr_stmt|;
name|t
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"distdir: FORCE\n\t"
operator|<<
name|mkdir_p_asstring
argument_list|(
literal|"$(DISTDIR)"
argument_list|,
literal|false
argument_list|)
operator|<<
literal|"\n\t"
operator|<<
literal|"$(COPY_FILE) --parents $(DIST) $(DISTDIR)"
operator|<<
name|Option
operator|::
name|dir_sep
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_EXTRA_COMPILERS"
argument_list|)
condition|)
block|{
specifier|const
name|ProStringList
modifier|&
name|quc
init|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_EXTRA_COMPILERS"
argument_list|)
decl_stmt|;
for|for
control|(
name|ProStringList
operator|::
name|ConstIterator
name|it
init|=
name|quc
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|quc
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
specifier|const
name|ProStringList
modifier|&
name|var
init|=
name|project
operator|->
name|values
argument_list|(
name|ProKey
argument_list|(
operator|*
name|it
operator|+
literal|".input"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|ProStringList
operator|::
name|ConstIterator
name|var_it
init|=
name|var
operator|.
name|begin
argument_list|()
init|;
name|var_it
operator|!=
name|var
operator|.
name|end
argument_list|()
condition|;
operator|++
name|var_it
control|)
block|{
specifier|const
name|ProStringList
modifier|&
name|val
init|=
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|var_it
operator|)
operator|.
name|toKey
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|t
operator|<<
literal|"\t$(COPY_FILE) --parents "
operator|<<
name|escapeFilePaths
argument_list|(
name|val
argument_list|)
operator|.
name|join
argument_list|(
literal|' '
argument_list|)
operator|<<
literal|" $(DISTDIR)"
operator|<<
name|Option
operator|::
name|dir_sep
operator|<<
name|endl
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"TRANSLATIONS"
argument_list|)
condition|)
name|t
operator|<<
literal|"\t$(COPY_FILE) --parents "
operator|<<
name|fileVar
argument_list|(
literal|"TRANSLATIONS"
argument_list|)
operator|<<
literal|" $(DISTDIR)"
operator|<<
name|Option
operator|::
name|dir_sep
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|QString
name|clean_targets
init|=
literal|" compiler_clean "
operator|+
name|depVar
argument_list|(
literal|"CLEAN_DEPS"
argument_list|)
decl_stmt|;
if|if
condition|(
name|do_incremental
condition|)
block|{
name|t
operator|<<
literal|"incrclean:\n"
expr_stmt|;
if|if
condition|(
name|src_incremental
condition|)
name|t
operator|<<
literal|"\t-$(DEL_FILE) $(INCREMENTAL_OBJECTS)\n"
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
block|}
name|t
operator|<<
literal|"clean:"
operator|<<
name|clean_targets
operator|<<
literal|"\n\t"
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"OBJECTS"
argument_list|)
condition|)
block|{
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"compile_libtool"
argument_list|)
condition|)
name|t
operator|<<
literal|"-$(LIBTOOL) --mode=clean $(DEL_FILE) $(OBJECTS)\n\t"
expr_stmt|;
else|else
name|t
operator|<<
literal|"-$(DEL_FILE) $(OBJECTS)\n\t"
expr_stmt|;
block|}
if|if
condition|(
name|doPrecompiledHeaders
argument_list|()
operator|&&
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"PRECOMPILED_HEADER"
argument_list|)
condition|)
block|{
name|ProStringList
name|precomp_files
decl_stmt|;
name|ProString
name|precomph_out_dir
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"PRECOMPILED_DIR"
argument_list|)
condition|)
name|precomph_out_dir
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"PRECOMPILED_DIR"
argument_list|)
expr_stmt|;
name|precomph_out_dir
operator|+=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_ORIG_TARGET"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"clang_pch_style"
argument_list|)
condition|)
name|precomph_out_dir
operator|+=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_PCH_OUTPUT_EXT"
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"icc_pch_style"
argument_list|)
condition|)
block|{
comment|// icc style
name|ProString
name|pchBaseName
init|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_ORIG_TARGET"
argument_list|)
decl_stmt|;
name|ProString
name|pchOutput
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"PRECOMPILED_DIR"
argument_list|)
condition|)
name|pchOutput
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"PRECOMPILED_DIR"
argument_list|)
expr_stmt|;
name|pchOutput
operator|+=
name|pchBaseName
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_PCH_OUTPUT_EXT"
argument_list|)
expr_stmt|;
name|ProString
name|sourceFile
init|=
name|pchOutput
operator|+
name|Option
operator|::
name|cpp_ext
operator|.
name|first
argument_list|()
decl_stmt|;
name|ProString
name|objectFile
init|=
name|createObjectList
argument_list|(
name|ProStringList
argument_list|(
name|sourceFile
argument_list|)
argument_list|)
operator|.
name|first
argument_list|()
decl_stmt|;
name|precomp_files
operator|<<
name|precomph_out_dir
operator|<<
name|sourceFile
operator|<<
name|objectFile
expr_stmt|;
block|}
else|else
block|{
comment|// gcc style (including clang_pch_style)
name|precomph_out_dir
operator|+=
name|Option
operator|::
name|dir_sep
expr_stmt|;
name|ProString
name|header_prefix
init|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_PRECOMP_PREFIX"
argument_list|)
decl_stmt|;
name|ProString
name|header_suffix
init|=
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"clang_pch_style"
argument_list|)
condition|?
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_PCH_OUTPUT_EXT"
argument_list|)
else|:
literal|""
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_CFLAGS_PRECOMPILE"
argument_list|)
condition|)
name|precomp_files
operator|+=
name|precomph_out_dir
operator|+
name|header_prefix
operator|+
literal|"c"
operator|+
name|header_suffix
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_CXXFLAGS_PRECOMPILE"
argument_list|)
condition|)
name|precomp_files
operator|+=
name|precomph_out_dir
operator|+
name|header_prefix
operator|+
literal|"c++"
operator|+
name|header_suffix
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"objective_c"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_OBJCFLAGS_PRECOMPILE"
argument_list|)
condition|)
name|precomp_files
operator|+=
name|precomph_out_dir
operator|+
name|header_prefix
operator|+
literal|"objective-c"
operator|+
name|header_suffix
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_OBJCXXFLAGS_PRECOMPILE"
argument_list|)
condition|)
name|precomp_files
operator|+=
name|precomph_out_dir
operator|+
name|header_prefix
operator|+
literal|"objective-c++"
operator|+
name|header_suffix
expr_stmt|;
block|}
block|}
name|t
operator|<<
literal|"-$(DEL_FILE) "
operator|<<
name|escapeFilePaths
argument_list|(
name|precomp_files
argument_list|)
operator|.
name|join
argument_list|(
literal|' '
argument_list|)
operator|<<
literal|"\n\t"
expr_stmt|;
block|}
if|if
condition|(
name|src_incremental
condition|)
name|t
operator|<<
literal|"-$(DEL_FILE) $(INCREMENTAL_OBJECTS)\n\t"
expr_stmt|;
name|t
operator|<<
name|fileVarGlue
argument_list|(
literal|"QMAKE_CLEAN"
argument_list|,
literal|"-$(DEL_FILE) "
argument_list|,
literal|" "
argument_list|,
literal|"\n\t"
argument_list|)
operator|<<
literal|"-$(DEL_FILE) *~ core *.core\n"
operator|<<
name|fileVarGlue
argument_list|(
literal|"CLEAN_FILES"
argument_list|,
literal|"\t-$(DEL_FILE) "
argument_list|,
literal|" "
argument_list|,
literal|""
argument_list|)
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|ProString
name|destdir
init|=
name|project
operator|->
name|first
argument_list|(
literal|"DESTDIR"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|destdir
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|destdir
operator|.
name|endsWith
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
condition|)
name|destdir
operator|+=
name|Option
operator|::
name|dir_sep
expr_stmt|;
name|t
operator|<<
literal|"distclean: clean "
operator|<<
name|depVar
argument_list|(
literal|"DISTCLEAN_DEPS"
argument_list|)
operator|<<
literal|'\n'
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_BUNDLE"
argument_list|)
condition|)
block|{
name|QString
name|bundlePath
init|=
name|escapeFilePath
argument_list|(
name|destdir
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_BUNDLE"
argument_list|)
argument_list|)
decl_stmt|;
name|t
operator|<<
literal|"\t-$(DEL_FILE) -r "
operator|<<
name|bundlePath
operator|<<
name|endl
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"compile_libtool"
argument_list|)
condition|)
block|{
name|t
operator|<<
literal|"\t-$(LIBTOOL) --mode=clean $(DEL_FILE) $(TARGET)\n"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"staticlib"
argument_list|)
operator|||
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"plugin"
argument_list|)
condition|)
block|{
name|t
operator|<<
literal|"\t-$(DEL_FILE) "
operator|<<
name|escapeFilePath
argument_list|(
name|destdir
argument_list|)
operator|<<
literal|"$(TARGET) \n"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_APP_FLAG"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|destdir
operator|=
name|escapeFilePath
argument_list|(
name|destdir
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"\t-$(DEL_FILE) "
operator|<<
name|destdir
operator|<<
literal|"$(TARGET) \n"
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"unversioned_libname"
argument_list|)
condition|)
block|{
name|t
operator|<<
literal|"\t-$(DEL_FILE) "
operator|<<
name|destdir
operator|<<
literal|"$(TARGET0) "
operator|<<
name|destdir
operator|<<
literal|"$(TARGET1) "
operator|<<
name|destdir
operator|<<
literal|"$(TARGET2) $(TARGETA)\n"
expr_stmt|;
block|}
else|else
block|{
name|t
operator|<<
literal|"\t-$(DEL_FILE) $(TARGETA)\n"
expr_stmt|;
block|}
block|}
else|else
block|{
name|t
operator|<<
literal|"\t-$(DEL_FILE) $(TARGET) \n"
expr_stmt|;
block|}
name|t
operator|<<
name|fileVarGlue
argument_list|(
literal|"QMAKE_DISTCLEAN"
argument_list|,
literal|"\t-$(DEL_FILE) "
argument_list|,
literal|" "
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
block|{
name|QString
name|ofile
init|=
name|fileFixify
argument_list|(
name|Option
operator|::
name|output
operator|.
name|fileName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ofile
operator|.
name|isEmpty
argument_list|()
condition|)
name|t
operator|<<
literal|"\t-$(DEL_FILE) "
operator|<<
name|escapeFilePath
argument_list|(
name|ofile
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
name|t
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"####### Sub-libraries\n\n"
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|values
argument_list|(
literal|"SUBLIBS"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ProString
name|libdir
init|=
literal|"tmp/"
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"SUBLIBS_DIR"
argument_list|)
condition|)
name|libdir
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"SUBLIBS_DIR"
argument_list|)
expr_stmt|;
specifier|const
name|ProStringList
modifier|&
name|l
init|=
name|project
operator|->
name|values
argument_list|(
literal|"SUBLIBS"
argument_list|)
decl_stmt|;
for|for
control|(
name|it
operator|=
name|l
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|l
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
name|t
operator|<<
name|escapeDependencyPath
argument_list|(
name|libdir
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_PREFIX_STATICLIB"
argument_list|)
operator|+
operator|(
operator|*
name|it
operator|)
operator|+
literal|'.'
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_EXTENSION_STATICLIB"
argument_list|)
argument_list|)
operator|<<
literal|":\n\t"
operator|<<
name|var
argument_list|(
name|ProKey
argument_list|(
literal|"MAKELIB"
operator|+
operator|*
name|it
argument_list|)
argument_list|)
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
if|if
condition|(
name|doPrecompiledHeaders
argument_list|()
operator|&&
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"PRECOMPILED_HEADER"
argument_list|)
condition|)
block|{
name|QString
name|pchInput
init|=
name|project
operator|->
name|first
argument_list|(
literal|"PRECOMPILED_HEADER"
argument_list|)
operator|.
name|toQString
argument_list|()
decl_stmt|;
name|t
operator|<<
literal|"###### Precompiled headers\n"
expr_stmt|;
name|QString
name|comps
index|[]
init|=
block|{
literal|"C"
block|,
literal|"CXX"
block|,
literal|"OBJC"
block|,
literal|"OBJCXX"
block|,
name|QString
argument_list|()
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
operator|!
name|comps
index|[
name|i
index|]
operator|.
name|isNull
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QString
name|pchFlags
init|=
name|var
argument_list|(
name|ProKey
argument_list|(
literal|"QMAKE_"
operator|+
name|comps
index|[
name|i
index|]
operator|+
literal|"FLAGS_PRECOMPILE"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|pchFlags
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|QString
name|cflags
decl_stmt|;
if|if
condition|(
name|comps
index|[
name|i
index|]
operator|==
literal|"OBJC"
operator|||
name|comps
index|[
name|i
index|]
operator|==
literal|"OBJCXX"
condition|)
name|cflags
operator|+=
literal|" $(CFLAGS)"
expr_stmt|;
else|else
name|cflags
operator|+=
literal|" $("
operator|+
name|comps
index|[
name|i
index|]
operator|+
literal|"FLAGS)"
expr_stmt|;
name|ProString
name|pchBaseName
init|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_ORIG_TARGET"
argument_list|)
decl_stmt|;
name|ProString
name|pchOutput
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"PRECOMPILED_DIR"
argument_list|)
condition|)
name|pchOutput
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"PRECOMPILED_DIR"
argument_list|)
expr_stmt|;
name|pchOutput
operator|+=
name|pchBaseName
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"clang_pch_style"
argument_list|)
condition|)
name|pchOutput
operator|+=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_PCH_OUTPUT_EXT"
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"icc_pch_style"
argument_list|)
condition|)
block|{
comment|// icc style
name|QString
name|sourceFile
init|=
name|pchOutput
operator|+
name|Option
operator|::
name|cpp_ext
operator|.
name|first
argument_list|()
decl_stmt|;
name|QString
name|sourceFile_f
init|=
name|escapeFilePath
argument_list|(
name|sourceFile
argument_list|)
decl_stmt|;
name|QString
name|objectFile
init|=
name|createObjectList
argument_list|(
name|ProStringList
argument_list|(
name|sourceFile
argument_list|)
argument_list|)
operator|.
name|first
argument_list|()
operator|.
name|toQString
argument_list|()
decl_stmt|;
name|t
operator|<<
name|escapeDependencyPath
argument_list|(
name|pchOutput
argument_list|)
operator|<<
literal|": "
operator|<<
name|escapeDependencyPath
argument_list|(
name|pchInput
argument_list|)
operator|<<
literal|' '
operator|<<
name|escapeDependencyPaths
argument_list|(
name|findDependencies
argument_list|(
name|pchInput
argument_list|)
argument_list|)
operator|.
name|join
argument_list|(
literal|" \\\n\t\t"
argument_list|)
operator|<<
literal|"\n\techo \"// Automatically generated, do not modify\"> "
operator|<<
name|sourceFile_f
operator|<<
literal|"\n\trm -f "
operator|<<
name|escapeFilePath
argument_list|(
name|pchOutput
argument_list|)
expr_stmt|;
name|pchFlags
operator|.
name|replace
argument_list|(
literal|"${QMAKE_PCH_TEMP_SOURCE}"
argument_list|,
name|sourceFile_f
argument_list|)
operator|.
name|replace
argument_list|(
literal|"${QMAKE_PCH_TEMP_OBJECT}"
argument_list|,
name|escapeFilePath
argument_list|(
name|objectFile
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// gcc style (including clang_pch_style)
name|ProString
name|header_prefix
init|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_PRECOMP_PREFIX"
argument_list|)
decl_stmt|;
name|ProString
name|header_suffix
init|=
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"clang_pch_style"
argument_list|)
condition|?
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_PCH_OUTPUT_EXT"
argument_list|)
else|:
literal|""
decl_stmt|;
name|pchOutput
operator|+=
name|Option
operator|::
name|dir_sep
expr_stmt|;
name|QString
name|pchOutputDir
init|=
name|pchOutput
operator|.
name|toQString
argument_list|()
decl_stmt|,
name|pchOutputFile
decl_stmt|;
if|if
condition|(
name|comps
index|[
name|i
index|]
operator|==
literal|"C"
condition|)
block|{
name|pchOutputFile
operator|=
literal|"c"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|comps
index|[
name|i
index|]
operator|==
literal|"CXX"
condition|)
block|{
name|pchOutputFile
operator|=
literal|"c++"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"objective_c"
argument_list|)
condition|)
block|{
if|if
condition|(
name|comps
index|[
name|i
index|]
operator|==
literal|"OBJC"
condition|)
name|pchOutputFile
operator|=
literal|"objective-c"
expr_stmt|;
elseif|else
if|if
condition|(
name|comps
index|[
name|i
index|]
operator|==
literal|"OBJCXX"
condition|)
name|pchOutputFile
operator|=
literal|"objective-c++"
expr_stmt|;
block|}
if|if
condition|(
name|pchOutputFile
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|pchOutput
operator|+=
name|header_prefix
operator|+
name|pchOutputFile
operator|+
name|header_suffix
expr_stmt|;
name|t
operator|<<
name|escapeDependencyPath
argument_list|(
name|pchOutput
argument_list|)
operator|<<
literal|": "
operator|<<
name|escapeDependencyPath
argument_list|(
name|pchInput
argument_list|)
operator|<<
literal|' '
operator|<<
name|escapeDependencyPaths
argument_list|(
name|findDependencies
argument_list|(
name|pchInput
argument_list|)
argument_list|)
operator|.
name|join
argument_list|(
literal|" \\\n\t\t"
argument_list|)
operator|<<
literal|"\n\t"
operator|<<
name|mkdir_p_asstring
argument_list|(
name|pchOutputDir
argument_list|)
expr_stmt|;
block|}
name|pchFlags
operator|.
name|replace
argument_list|(
literal|"${QMAKE_PCH_INPUT}"
argument_list|,
name|escapeFilePath
argument_list|(
name|pchInput
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|"${QMAKE_PCH_OUTPUT_BASE}"
argument_list|,
name|escapeFilePath
argument_list|(
name|pchBaseName
operator|.
name|toQString
argument_list|()
argument_list|)
argument_list|)
operator|.
name|replace
argument_list|(
literal|"${QMAKE_PCH_OUTPUT}"
argument_list|,
name|escapeFilePath
argument_list|(
name|pchOutput
operator|.
name|toQString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|compiler
decl_stmt|;
if|if
condition|(
name|comps
index|[
name|i
index|]
operator|==
literal|"C"
operator|||
name|comps
index|[
name|i
index|]
operator|==
literal|"OBJC"
operator|||
name|comps
index|[
name|i
index|]
operator|==
literal|"OBJCXX"
condition|)
name|compiler
operator|=
literal|"$(CC)"
expr_stmt|;
else|else
name|compiler
operator|=
literal|"$(CXX)"
expr_stmt|;
comment|// compile command
name|t
operator|<<
literal|"\n\t"
operator|<<
name|compiler
operator|<<
name|cflags
operator|<<
literal|" $(INCPATH) "
operator|<<
name|pchFlags
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
block|}
name|writeExtraTargets
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|writeExtraCompilerTargets
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|init2
name|void
name|UnixMakefileGenerator
operator|::
name|init2
parameter_list|()
block|{
if|if
condition|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_FRAMEWORK_VERSION"
argument_list|)
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_FRAMEWORK_VERSION"
argument_list|)
operator|.
name|append
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"VER_MAJ"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"aux"
condition|)
block|{
comment|// nothing
block|}
elseif|else
if|if
condition|(
operator|!
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_APP_FLAG"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_BUNDLE"
argument_list|)
condition|)
block|{
name|ProString
name|bundle_loc
init|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_BUNDLE_LOCATION"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|bundle_loc
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|bundle_loc
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
name|bundle_loc
operator|.
name|prepend
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|bundle_loc
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
name|bundle_loc
operator|+=
literal|"/"
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"TARGET"
argument_list|)
operator|.
name|first
argument_list|()
operator|.
name|prepend
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_BUNDLE"
argument_list|)
operator|+
name|bundle_loc
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"TARGET"
argument_list|)
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"TARGET"
argument_list|)
operator|.
name|first
argument_list|()
operator|.
name|prepend
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"DESTDIR"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_CYGWIN_EXE"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"TARGET_EXT"
argument_list|)
operator|.
name|append
argument_list|(
literal|".exe"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"staticlib"
argument_list|)
condition|)
block|{
name|project
operator|->
name|values
argument_list|(
literal|"TARGET"
argument_list|)
operator|.
name|first
argument_list|()
operator|.
name|prepend
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_PREFIX_STATICLIB"
argument_list|)
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"TARGET"
argument_list|)
operator|.
name|first
argument_list|()
operator|+=
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_EXTENSION_STATICLIB"
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_AR_CMD"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_AR_CMD"
argument_list|)
operator|.
name|append
argument_list|(
literal|"$(AR) $(TARGET) $(OBJECTS)"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|project
operator|->
name|values
argument_list|(
literal|"TARGETA"
argument_list|)
operator|.
name|append
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"DESTDIR"
argument_list|)
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_PREFIX_STATICLIB"
argument_list|)
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"TARGET"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_EXTENSION_STATICLIB"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"compile_libtool"
argument_list|)
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"TARGET_la"
argument_list|)
operator|=
name|ProStringList
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"DESTDIR"
argument_list|)
operator|+
literal|"lib"
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"TARGET"
argument_list|)
operator|+
name|Option
operator|::
name|libtool_ext
argument_list|)
expr_stmt|;
name|ProStringList
modifier|&
name|ar_cmd
init|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_AR_CMD"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ar_cmd
operator|.
name|isEmpty
argument_list|()
condition|)
name|ar_cmd
index|[
literal|0
index|]
operator|=
name|ar_cmd
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toQString
argument_list|()
operator|.
name|replace
argument_list|(
literal|"(TARGET)"
argument_list|,
literal|"(TARGETA)"
argument_list|)
expr_stmt|;
else|else
name|ar_cmd
operator|.
name|append
argument_list|(
literal|"$(AR) $(TARGETA) $(OBJECTS)"
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"compile_libtool"
argument_list|)
condition|)
block|{
name|project
operator|->
name|values
argument_list|(
literal|"TARGET"
argument_list|)
operator|=
name|project
operator|->
name|values
argument_list|(
literal|"TARGET_la"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_BUNDLE"
argument_list|)
condition|)
block|{
name|ProString
name|bundle_loc
init|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_BUNDLE_LOCATION"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|bundle_loc
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|bundle_loc
operator|.
name|startsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
name|bundle_loc
operator|.
name|prepend
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|bundle_loc
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
name|bundle_loc
operator|+=
literal|"/"
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"TARGET_"
argument_list|)
operator|.
name|append
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_BUNDLE"
argument_list|)
operator|+
name|bundle_loc
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"TARGET"
argument_list|)
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"TARGET_x.y"
argument_list|)
operator|.
name|append
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_BUNDLE"
argument_list|)
operator|+
literal|"/Versions/"
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_FRAMEWORK_VERSION"
argument_list|)
operator|+
name|bundle_loc
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"TARGET"
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"plugin"
argument_list|)
condition|)
block|{
name|QString
name|prefix
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"no_plugin_name_prefix"
argument_list|)
condition|)
name|prefix
operator|=
literal|"lib"
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"TARGET_x.y.z"
argument_list|)
operator|.
name|append
argument_list|(
name|prefix
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"TARGET"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_EXTENSION_PLUGIN"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"lib_version_first"
argument_list|)
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"TARGET_x"
argument_list|)
operator|.
name|append
argument_list|(
name|prefix
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"TARGET"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"VER_MAJ"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_EXTENSION_PLUGIN"
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|project
operator|->
name|values
argument_list|(
literal|"TARGET_x"
argument_list|)
operator|.
name|append
argument_list|(
name|prefix
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"TARGET"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_EXTENSION_PLUGIN"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"VER_MAJ"
argument_list|)
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"TARGET"
argument_list|)
operator|=
name|project
operator|->
name|values
argument_list|(
literal|"TARGET_x.y.z"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_HPUX_SHLIB"
argument_list|)
condition|)
block|{
name|project
operator|->
name|values
argument_list|(
literal|"TARGET_"
argument_list|)
operator|.
name|append
argument_list|(
literal|"lib"
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"TARGET"
argument_list|)
operator|+
literal|".sl"
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"lib_version_first"
argument_list|)
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"TARGET_x"
argument_list|)
operator|.
name|append
argument_list|(
literal|"lib"
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"VER_MAJ"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"TARGET"
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|project
operator|->
name|values
argument_list|(
literal|"TARGET_x"
argument_list|)
operator|.
name|append
argument_list|(
literal|"lib"
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"TARGET"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"VER_MAJ"
argument_list|)
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"TARGET"
argument_list|)
operator|=
name|project
operator|->
name|values
argument_list|(
literal|"TARGET_x"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_AIX_SHLIB"
argument_list|)
condition|)
block|{
name|project
operator|->
name|values
argument_list|(
literal|"TARGET_"
argument_list|)
operator|.
name|append
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_PREFIX_STATICLIB"
argument_list|)
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"TARGET"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_EXTENSION_STATICLIB"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"lib_version_first"
argument_list|)
condition|)
block|{
name|project
operator|->
name|values
argument_list|(
literal|"TARGET_x"
argument_list|)
operator|.
name|append
argument_list|(
literal|"lib"
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"TARGET"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"VER_MAJ"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_EXTENSION_SHLIB"
argument_list|)
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"TARGET_x.y"
argument_list|)
operator|.
name|append
argument_list|(
literal|"lib"
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"TARGET"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"VER_MAJ"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"VER_MIN"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_EXTENSION_SHLIB"
argument_list|)
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"TARGET_x.y.z"
argument_list|)
operator|.
name|append
argument_list|(
literal|"lib"
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"TARGET"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"VER_MAJ"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"VER_MIN"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"VER_PAT"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_EXTENSION_SHLIB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|project
operator|->
name|values
argument_list|(
literal|"TARGET_x"
argument_list|)
operator|.
name|append
argument_list|(
literal|"lib"
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"TARGET"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_EXTENSION_SHLIB"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"VER_MAJ"
argument_list|)
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"TARGET_x.y"
argument_list|)
operator|.
name|append
argument_list|(
literal|"lib"
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"TARGET"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_EXTENSION_SHLIB"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"VER_MAJ"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"VER_MIN"
argument_list|)
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"TARGET_x.y.z"
argument_list|)
operator|.
name|append
argument_list|(
literal|"lib"
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"TARGET"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_EXTENSION_SHLIB"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"VER_MAJ"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"VER_MIN"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"VER_PAT"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|project
operator|->
name|values
argument_list|(
literal|"TARGET"
argument_list|)
operator|=
name|project
operator|->
name|values
argument_list|(
literal|"TARGET_x.y.z"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|project
operator|->
name|values
argument_list|(
literal|"TARGET_"
argument_list|)
operator|.
name|append
argument_list|(
literal|"lib"
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"TARGET"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_EXTENSION_SHLIB"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"lib_version_first"
argument_list|)
condition|)
block|{
name|project
operator|->
name|values
argument_list|(
literal|"TARGET_x"
argument_list|)
operator|.
name|append
argument_list|(
literal|"lib"
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"TARGET"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"VER_MAJ"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_EXTENSION_SHLIB"
argument_list|)
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"TARGET_x.y"
argument_list|)
operator|.
name|append
argument_list|(
literal|"lib"
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"TARGET"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"VER_MAJ"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"VER_MIN"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_EXTENSION_SHLIB"
argument_list|)
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"TARGET_x.y.z"
argument_list|)
operator|.
name|append
argument_list|(
literal|"lib"
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"TARGET"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"VER_MAJ"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"VER_MIN"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"VER_PAT"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_EXTENSION_SHLIB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|project
operator|->
name|values
argument_list|(
literal|"TARGET_x"
argument_list|)
operator|.
name|append
argument_list|(
literal|"lib"
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"TARGET"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_EXTENSION_SHLIB"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"VER_MAJ"
argument_list|)
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"TARGET_x.y"
argument_list|)
operator|.
name|append
argument_list|(
literal|"lib"
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"TARGET"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_EXTENSION_SHLIB"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"VER_MAJ"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"VER_MIN"
argument_list|)
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"TARGET_x.y.z"
argument_list|)
operator|.
name|append
argument_list|(
literal|"lib"
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"TARGET"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_EXTENSION_SHLIB"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"VER_MAJ"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"VER_MIN"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"VER_PAT"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"unversioned_libname"
argument_list|)
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"TARGET"
argument_list|)
operator|=
name|project
operator|->
name|values
argument_list|(
literal|"TARGET_"
argument_list|)
expr_stmt|;
else|else
name|project
operator|->
name|values
argument_list|(
literal|"TARGET"
argument_list|)
operator|=
name|project
operator|->
name|values
argument_list|(
literal|"TARGET_x.y.z"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LFLAGS_SONAME"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ProString
name|soname
decl_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"plugin"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|project
operator|->
name|values
argument_list|(
literal|"TARGET"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
name|soname
operator|+=
name|project
operator|->
name|first
argument_list|(
literal|"TARGET"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_BUNDLE"
argument_list|)
condition|)
block|{
name|soname
operator|+=
name|project
operator|->
name|first
argument_list|(
literal|"TARGET_x.y"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"unversioned_soname"
argument_list|)
condition|)
block|{
name|soname
operator|=
literal|"lib"
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_ORIG_TARGET"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_EXTENSION_SHLIB"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|project
operator|->
name|values
argument_list|(
literal|"TARGET_x"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|soname
operator|+=
name|project
operator|->
name|first
argument_list|(
literal|"TARGET_x"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|soname
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"absolute_library_soname"
argument_list|)
operator|&&
name|project
operator|->
name|values
argument_list|(
literal|"INSTALLS"
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|"target"
argument_list|)
operator|!=
operator|-
literal|1
operator|&&
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"target.path"
argument_list|)
condition|)
block|{
name|QString
name|instpath
init|=
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"target.path"
argument_list|)
operator|.
name|toQString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|instpath
operator|.
name|endsWith
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
condition|)
name|instpath
operator|+=
name|Option
operator|::
name|dir_sep
expr_stmt|;
name|soname
operator|.
name|prepend
argument_list|(
name|instpath
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_SONAME_PREFIX"
argument_list|)
condition|)
block|{
name|QString
name|sonameprefix
init|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_SONAME_PREFIX"
argument_list|)
operator|.
name|toQString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|sonameprefix
operator|.
name|startsWith
argument_list|(
literal|'@'
argument_list|)
operator|&&
operator|!
name|sonameprefix
operator|.
name|startsWith
argument_list|(
literal|'$'
argument_list|)
condition|)
name|sonameprefix
operator|=
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|sonameprefix
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sonameprefix
operator|.
name|endsWith
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
condition|)
name|sonameprefix
operator|+=
name|Option
operator|::
name|dir_sep
expr_stmt|;
name|soname
operator|.
name|prepend
argument_list|(
name|sonameprefix
argument_list|)
expr_stmt|;
block|}
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LFLAGS_SONAME"
argument_list|)
operator|.
name|first
argument_list|()
operator|+=
name|escapeFilePath
argument_list|(
name|soname
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LINK_SHLIB_CMD"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LINK_SHLIB_CMD"
argument_list|)
operator|.
name|append
argument_list|(
literal|"$(LINK) $(LFLAGS) "
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_LINK_O_FLAG"
argument_list|)
operator|+
literal|"$(TARGET) $(OBJECTS) $(LIBS) $(OBJCOMP)"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_APP_FLAG"
argument_list|)
operator|.
name|isEmpty
argument_list|()
operator|||
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"aux"
condition|)
block|{
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_CFLAGS"
argument_list|)
operator|+=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_CFLAGS_APP"
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_CXXFLAGS"
argument_list|)
operator|+=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_CXXFLAGS_APP"
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LFLAGS"
argument_list|)
operator|+=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LFLAGS_APP"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"dll"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"plugin"
argument_list|)
operator|||
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"plugin_no_share_shlib_cflags"
argument_list|)
condition|)
block|{
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_CFLAGS"
argument_list|)
operator|+=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_CFLAGS_SHLIB"
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_CXXFLAGS"
argument_list|)
operator|+=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_CXXFLAGS_SHLIB"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"plugin"
argument_list|)
condition|)
block|{
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_CFLAGS"
argument_list|)
operator|+=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_CFLAGS_PLUGIN"
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_CXXFLAGS"
argument_list|)
operator|+=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_CXXFLAGS_PLUGIN"
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LFLAGS"
argument_list|)
operator|+=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LFLAGS_PLUGIN"
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"plugin_with_soname"
argument_list|)
operator|&&
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"compile_libtool"
argument_list|)
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LFLAGS"
argument_list|)
operator|+=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LFLAGS_SONAME"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LFLAGS"
argument_list|)
operator|+=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LFLAGS_SHLIB"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_LFLAGS_COMPAT_VERSION"
argument_list|)
condition|)
block|{
if|if
condition|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"COMPAT_VERSION"
argument_list|)
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LFLAGS"
argument_list|)
operator|+=
name|QString
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_LFLAGS_COMPAT_VERSION"
argument_list|)
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"VER_MAJ"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"VER_MIN"
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LFLAGS"
argument_list|)
operator|+=
name|QString
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_LFLAGS_COMPAT_VERSION"
argument_list|)
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"COMPATIBILITY_VERSION"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_LFLAGS_VERSION"
argument_list|)
condition|)
block|{
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LFLAGS"
argument_list|)
operator|+=
name|QString
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_LFLAGS_VERSION"
argument_list|)
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"VER_MAJ"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"VER_MIN"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"VER_PAT"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"compile_libtool"
argument_list|)
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LFLAGS"
argument_list|)
operator|+=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LFLAGS_SONAME"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|include_deps
operator|&&
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"gcc_MD_depends"
argument_list|)
condition|)
block|{
comment|// use -MMD if we know about -isystem too
name|ProString
name|MD_flag
argument_list|(
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_CFLAGS_ISYSTEM"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"-MD"
else|:
literal|"-MMD"
argument_list|)
decl_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_CFLAGS"
argument_list|)
operator|+=
name|MD_flag
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_CXXFLAGS"
argument_list|)
operator|+=
name|MD_flag
expr_stmt|;
block|}
block|}
end_function
begin_function
name|QString
DECL|function|libtoolFileName
name|UnixMakefileGenerator
operator|::
name|libtoolFileName
parameter_list|(
name|bool
name|fixify
parameter_list|)
block|{
name|QString
name|ret
init|=
name|var
argument_list|(
literal|"TARGET"
argument_list|)
decl_stmt|;
name|int
name|slsh
init|=
name|ret
operator|.
name|lastIndexOf
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
decl_stmt|;
if|if
condition|(
name|slsh
operator|!=
operator|-
literal|1
condition|)
name|ret
operator|=
name|ret
operator|.
name|right
argument_list|(
name|ret
operator|.
name|length
argument_list|()
operator|-
name|slsh
operator|-
literal|1
argument_list|)
expr_stmt|;
name|int
name|dot
init|=
name|ret
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|dot
operator|!=
operator|-
literal|1
condition|)
name|ret
operator|=
name|ret
operator|.
name|left
argument_list|(
name|dot
argument_list|)
expr_stmt|;
name|ret
operator|+=
name|Option
operator|::
name|libtool_ext
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_LIBTOOL_DESTDIR"
argument_list|)
condition|)
name|ret
operator|.
name|prepend
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_LIBTOOL_DESTDIR"
argument_list|)
operator|+
name|Option
operator|::
name|dir_sep
argument_list|)
expr_stmt|;
if|if
condition|(
name|fixify
condition|)
block|{
if|if
condition|(
name|QDir
operator|::
name|isRelativePath
argument_list|(
name|ret
argument_list|)
operator|&&
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"DESTDIR"
argument_list|)
condition|)
name|ret
operator|.
name|prepend
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"DESTDIR"
argument_list|)
operator|.
name|toQString
argument_list|()
argument_list|)
expr_stmt|;
name|ret
operator|=
name|fileFixify
argument_list|(
name|ret
argument_list|,
name|FileFixifyBackwards
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
name|void
DECL|function|writeLibtoolFile
name|UnixMakefileGenerator
operator|::
name|writeLibtoolFile
parameter_list|()
block|{
name|QString
name|fname
init|=
name|libtoolFileName
argument_list|()
decl_stmt|,
name|lname
init|=
name|fname
decl_stmt|;
name|mkdir
argument_list|(
name|fileInfo
argument_list|(
name|fname
argument_list|)
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|slsh
init|=
name|lname
operator|.
name|lastIndexOf
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
decl_stmt|;
if|if
condition|(
name|slsh
operator|!=
operator|-
literal|1
condition|)
name|lname
operator|=
name|lname
operator|.
name|right
argument_list|(
name|lname
operator|.
name|length
argument_list|()
operator|-
name|slsh
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QFile
name|ft
argument_list|(
name|fname
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ft
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
condition|)
return|return;
name|QString
name|ffname
argument_list|(
name|fileFixify
argument_list|(
name|fname
argument_list|)
argument_list|)
decl_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"ALL_DEPS"
argument_list|)
operator|.
name|append
argument_list|(
name|ffname
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_DISTCLEAN"
argument_list|)
operator|.
name|append
argument_list|(
name|ffname
argument_list|)
expr_stmt|;
name|QTextStream
name|t
argument_list|(
operator|&
name|ft
argument_list|)
decl_stmt|;
name|t
operator|<<
literal|"# "
operator|<<
name|lname
operator|<<
literal|" - a libtool library file\n"
expr_stmt|;
name|t
operator|<<
literal|"# Generated by qmake/libtool ("
name|QMAKE_VERSION_STR
literal|") (Qt "
operator|<<
name|QT_VERSION_STR
operator|<<
literal|")"
expr_stmt|;
name|t
operator|<<
literal|"\n"
expr_stmt|;
name|t
operator|<<
literal|"# The name that we can dlopen(3).\n"
operator|<<
literal|"dlname='"
operator|<<
name|fileVar
argument_list|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"plugin"
argument_list|)
condition|?
literal|"TARGET"
else|:
literal|"TARGET_x"
argument_list|)
operator|<<
literal|"'\n\n"
expr_stmt|;
name|t
operator|<<
literal|"# Names of this library.\n"
expr_stmt|;
name|t
operator|<<
literal|"library_names='"
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"plugin"
argument_list|)
condition|)
block|{
name|t
operator|<<
name|fileVar
argument_list|(
literal|"TARGET"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_HPUX_SHLIB"
argument_list|)
condition|)
name|t
operator|<<
name|fileVar
argument_list|(
literal|"TARGET_x.y.z"
argument_list|)
operator|<<
literal|' '
expr_stmt|;
name|t
operator|<<
name|fileVar
argument_list|(
literal|"TARGET_x"
argument_list|)
operator|<<
literal|' '
operator|<<
name|fileVar
argument_list|(
literal|"TARGET_"
argument_list|)
expr_stmt|;
block|}
name|t
operator|<<
literal|"'\n\n"
expr_stmt|;
name|t
operator|<<
literal|"# The name of the static archive.\n"
operator|<<
literal|"old_library='"
operator|<<
name|escapeFilePath
argument_list|(
name|lname
operator|.
name|left
argument_list|(
name|lname
operator|.
name|length
argument_list|()
operator|-
name|Option
operator|::
name|libtool_ext
operator|.
name|length
argument_list|()
argument_list|)
argument_list|)
operator|<<
literal|".a'\n\n"
expr_stmt|;
name|t
operator|<<
literal|"# Libraries that this one depends upon.\n"
expr_stmt|;
name|ProStringList
name|libs
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_INTERNAL_PRL_LIBS"
argument_list|)
condition|)
name|libs
operator|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_INTERNAL_PRL_LIBS"
argument_list|)
expr_stmt|;
else|else
name|libs
operator|<<
literal|"QMAKE_LIBS"
expr_stmt|;
comment|//obvious one
name|t
operator|<<
literal|"dependency_libs='"
expr_stmt|;
for|for
control|(
name|ProStringList
operator|::
name|ConstIterator
name|it
init|=
name|libs
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|libs
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
name|t
operator|<<
name|fixLibFlags
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|.
name|toKey
argument_list|()
argument_list|)
operator|.
name|join
argument_list|(
literal|' '
argument_list|)
operator|<<
literal|' '
expr_stmt|;
name|t
operator|<<
literal|"'\n\n"
expr_stmt|;
name|t
operator|<<
literal|"# Version information for "
operator|<<
name|lname
operator|<<
literal|"\n"
expr_stmt|;
name|int
name|maj
init|=
name|project
operator|->
name|first
argument_list|(
literal|"VER_MAJ"
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|min
init|=
name|project
operator|->
name|first
argument_list|(
literal|"VER_MIN"
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|pat
init|=
name|project
operator|->
name|first
argument_list|(
literal|"VER_PAT"
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|t
operator|<<
literal|"current="
operator|<<
operator|(
literal|10
operator|*
name|maj
operator|+
name|min
operator|)
operator|<<
literal|"\n"
comment|// best I can think of
operator|<<
literal|"age=0\n"
operator|<<
literal|"revision="
operator|<<
name|pat
operator|<<
literal|"\n\n"
expr_stmt|;
name|t
operator|<<
literal|"# Is this an already installed library.\n"
literal|"installed=yes\n\n"
expr_stmt|;
comment|// ###
name|t
operator|<<
literal|"# Files to dlopen/dlpreopen.\n"
literal|"dlopen=''\n"
literal|"dlpreopen=''\n\n"
expr_stmt|;
name|ProString
name|install_dir
init|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_LIBTOOL_LIBDIR"
argument_list|)
decl_stmt|;
if|if
condition|(
name|install_dir
operator|.
name|isEmpty
argument_list|()
condition|)
name|install_dir
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"target.path"
argument_list|)
expr_stmt|;
if|if
condition|(
name|install_dir
operator|.
name|isEmpty
argument_list|()
condition|)
name|install_dir
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"DESTDIR"
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"# Directory that this library needs to be installed in:\n"
literal|"libdir='"
operator|<<
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|install_dir
operator|.
name|toQString
argument_list|()
argument_list|,
literal|false
argument_list|)
operator|<<
literal|"'\n"
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
