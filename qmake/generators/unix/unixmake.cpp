begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the qmake application of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"unixmake.h"
end_include
begin_include
include|#
directive|include
file|"option.h"
end_include
begin_include
include|#
directive|include
file|<qregexp.h>
end_include
begin_include
include|#
directive|include
file|<qfile.h>
end_include
begin_include
include|#
directive|include
file|<qhash.h>
end_include
begin_include
include|#
directive|include
file|<qdir.h>
end_include
begin_include
include|#
directive|include
file|<time.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
name|void
DECL|function|init
name|UnixMakefileGenerator
operator|::
name|init
parameter_list|()
block|{
if|if
condition|(
name|init_flag
condition|)
return|return;
name|init_flag
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_EXTENSION_SHLIB"
argument_list|)
condition|)
block|{
if|if
condition|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_CYGWIN_SHLIB"
argument_list|)
condition|)
block|{
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_EXTENSION_SHLIB"
argument_list|)
operator|.
name|append
argument_list|(
literal|"so"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_EXTENSION_SHLIB"
argument_list|)
operator|.
name|append
argument_list|(
literal|"dll"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_PREFIX_SHLIB"
argument_list|)
condition|)
comment|// Prevent crash when using the empty variable.
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PREFIX_SHLIB"
argument_list|)
operator|.
name|append
argument_list|(
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_FAILED_REQUIREMENTS"
argument_list|)
condition|)
comment|/* no point */
return|return;
name|QStringList
modifier|&
name|configs
init|=
name|project
operator|->
name|values
argument_list|(
literal|"CONFIG"
argument_list|)
decl_stmt|;
if|if
condition|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"ICON"
argument_list|)
operator|&&
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"RC_FILE"
argument_list|)
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"ICON"
argument_list|)
operator|=
name|project
operator|->
name|values
argument_list|(
literal|"RC_FILE"
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_EXTENSION_PLUGIN"
argument_list|)
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_EXTENSION_PLUGIN"
argument_list|)
operator|.
name|append
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_EXTENSION_SHLIB"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_COPY_FILE"
argument_list|)
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_COPY_FILE"
argument_list|)
operator|.
name|append
argument_list|(
literal|"$(COPY)"
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_STREAM_EDITOR"
argument_list|)
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_STREAM_EDITOR"
argument_list|)
operator|.
name|append
argument_list|(
literal|"sed"
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_COPY_DIR"
argument_list|)
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_COPY_DIR"
argument_list|)
operator|.
name|append
argument_list|(
literal|"$(COPY) -R"
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_INSTALL_FILE"
argument_list|)
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_INSTALL_FILE"
argument_list|)
operator|.
name|append
argument_list|(
literal|"$(COPY_FILE)"
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_INSTALL_DIR"
argument_list|)
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_INSTALL_DIR"
argument_list|)
operator|.
name|append
argument_list|(
literal|"$(COPY_DIR)"
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_INSTALL_PROGRAM"
argument_list|)
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_INSTALL_PROGRAM"
argument_list|)
operator|.
name|append
argument_list|(
literal|"$(COPY_FILE)"
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_LIBTOOL"
argument_list|)
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LIBTOOL"
argument_list|)
operator|.
name|append
argument_list|(
literal|"libtool --silent"
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_SYMBOLIC_LINK"
argument_list|)
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_SYMBOLIC_LINK"
argument_list|)
operator|.
name|append
argument_list|(
literal|"ln -f -s"
argument_list|)
expr_stmt|;
comment|/* this should probably not be here, but I'm using it to wrap the .t files */
if|if
condition|(
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"app"
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_APP_FLAG"
argument_list|)
operator|.
name|append
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"lib"
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LIB_FLAG"
argument_list|)
operator|.
name|append
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"subdirs"
condition|)
block|{
name|MakefileGenerator
operator|::
name|init
argument_list|()
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"MAKEFILE"
argument_list|)
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"MAKEFILE"
argument_list|)
operator|.
name|append
argument_list|(
literal|"Makefile"
argument_list|)
expr_stmt|;
return|return;
comment|/* subdirs is done */
block|}
comment|//If the TARGET looks like a path split it into DESTDIR and the resulting TARGET
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"TARGET"
argument_list|)
condition|)
block|{
name|project
operator|->
name|values
argument_list|(
literal|"TARGET"
argument_list|)
operator|=
name|escapeFilePaths
argument_list|(
name|project
operator|->
name|values
argument_list|(
literal|"TARGET"
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|targ
init|=
name|unescapeFilePath
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"TARGET"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|slsh
init|=
name|qMax
argument_list|(
name|targ
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
argument_list|,
name|targ
operator|.
name|lastIndexOf
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|slsh
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"DESTDIR"
argument_list|)
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"DESTDIR"
argument_list|)
operator|.
name|append
argument_list|(
literal|""
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|project
operator|->
name|first
argument_list|(
literal|"DESTDIR"
argument_list|)
operator|.
name|right
argument_list|(
literal|1
argument_list|)
operator|!=
name|Option
operator|::
name|dir_sep
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"DESTDIR"
argument_list|)
operator|=
name|QStringList
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"DESTDIR"
argument_list|)
operator|+
name|Option
operator|::
name|dir_sep
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"DESTDIR"
argument_list|)
operator|=
name|QStringList
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"DESTDIR"
argument_list|)
operator|+
name|targ
operator|.
name|left
argument_list|(
name|slsh
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"TARGET"
argument_list|)
operator|=
name|QStringList
argument_list|(
name|targ
operator|.
name|mid
argument_list|(
name|slsh
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_ORIG_TARGET"
argument_list|)
operator|=
name|project
operator|->
name|values
argument_list|(
literal|"TARGET"
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_ORIG_DESTDIR"
argument_list|)
operator|=
name|project
operator|->
name|values
argument_list|(
literal|"DESTDIR"
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LIBS"
argument_list|)
operator|+=
name|escapeFilePaths
argument_list|(
name|project
operator|->
name|values
argument_list|(
literal|"LIBS"
argument_list|)
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LIBS_PRIVATE"
argument_list|)
operator|+=
name|escapeFilePaths
argument_list|(
name|project
operator|->
name|values
argument_list|(
literal|"LIBS_PRIVATE"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_LIB_FLAG"
argument_list|)
operator|&&
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"staticlib"
argument_list|)
operator|)
operator|||
operator|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"qt"
argument_list|)
operator|&&
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"plugin"
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
name|configs
operator|.
name|indexOf
argument_list|(
literal|"dll"
argument_list|)
operator|==
operator|-
literal|1
condition|)
name|configs
operator|.
name|append
argument_list|(
literal|"dll"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_APP_FLAG"
argument_list|)
operator|||
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"dll"
argument_list|)
condition|)
block|{
name|configs
operator|.
name|removeAll
argument_list|(
literal|"staticlib"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_INCREMENTAL"
argument_list|)
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LFLAGS"
argument_list|)
operator|+=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LFLAGS_INCREMENTAL"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_LFLAGS_PREBIND"
argument_list|)
operator|&&
operator|!
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LIB_FLAG"
argument_list|)
operator|.
name|isEmpty
argument_list|()
operator|&&
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"dll"
argument_list|)
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LFLAGS"
argument_list|)
operator|+=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LFLAGS_PREBIND"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_INCDIR"
argument_list|)
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"INCLUDEPATH"
argument_list|)
operator|+=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_INCDIR"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_LIBDIR"
argument_list|)
condition|)
block|{
specifier|const
name|QStringList
modifier|&
name|libdirs
init|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LIBDIR"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|libdirs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_LFLAGS_RPATH"
argument_list|)
operator|&&
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"rpath_libdirs"
argument_list|)
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LFLAGS"
argument_list|)
operator|+=
name|var
argument_list|(
literal|"QMAKE_LFLAGS_RPATH"
argument_list|)
operator|+
name|libdirs
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"rvct_linker"
argument_list|)
condition|)
block|{
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LIBDIR_FLAGS"
argument_list|)
operator|+=
literal|"--userlibpath "
operator|+
name|escapeFilePath
argument_list|(
name|libdirs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"armcc_linker"
argument_list|)
condition|)
block|{
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LIBDIR_FLAGS"
argument_list|)
operator|+=
literal|"-L--userlibpath="
operator|+
name|escapeFilePath
argument_list|(
name|libdirs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LIBDIR_FLAGS"
argument_list|)
operator|+=
literal|"-L"
operator|+
name|escapeFilePath
argument_list|(
name|libdirs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"macx"
argument_list|)
operator|&&
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_FRAMEWORKPATH"
argument_list|)
condition|)
block|{
specifier|const
name|QStringList
modifier|&
name|fwdirs
init|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_FRAMEWORKPATH"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fwdirs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_FRAMEWORKPATH_FLAGS"
argument_list|)
operator|+=
literal|"-F"
operator|+
name|escapeFilePath
argument_list|(
name|fwdirs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_RPATHDIR"
argument_list|)
condition|)
block|{
specifier|const
name|QStringList
modifier|&
name|rpathdirs
init|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_RPATHDIR"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rpathdirs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_LFLAGS_RPATH"
argument_list|)
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LFLAGS"
argument_list|)
operator|+=
name|var
argument_list|(
literal|"QMAKE_LFLAGS_RPATH"
argument_list|)
operator|+
name|escapeFilePath
argument_list|(
name|QFileInfo
argument_list|(
name|rpathdirs
index|[
name|i
index|]
argument_list|)
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_FILETAGS"
argument_list|)
operator|<<
literal|"SOURCES"
operator|<<
literal|"GENERATED_SOURCES"
operator|<<
literal|"TARGET"
operator|<<
literal|"DESTDIR"
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_EXTRA_COMPILERS"
argument_list|)
condition|)
block|{
specifier|const
name|QStringList
modifier|&
name|quc
init|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_EXTRA_COMPILERS"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|quc
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_FILETAGS"
argument_list|)
operator|+=
name|project
operator|->
name|values
argument_list|(
name|quc
index|[
name|i
index|]
operator|+
literal|".input"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"GNUmake"
argument_list|)
operator|&&
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_CFLAGS_DEPS"
argument_list|)
condition|)
name|include_deps
operator|=
literal|true
expr_stmt|;
comment|//do not generate deps
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"compile_libtool"
argument_list|)
condition|)
name|Option
operator|::
name|obj_ext
operator|=
literal|".lo"
expr_stmt|;
comment|//override the .o
name|MakefileGenerator
operator|::
name|init
argument_list|()
expr_stmt|;
name|QString
name|comps
index|[]
init|=
block|{
literal|"C"
block|,
literal|"CXX"
block|,
literal|"OBJC"
block|,
literal|"OBJCXX"
block|,
name|QString
argument_list|()
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
operator|!
name|comps
index|[
name|i
index|]
operator|.
name|isNull
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QString
name|compile_flag
init|=
name|var
argument_list|(
literal|"QMAKE_COMPILE_FLAG"
argument_list|)
decl_stmt|;
if|if
condition|(
name|compile_flag
operator|.
name|isEmpty
argument_list|()
condition|)
name|compile_flag
operator|=
literal|"-c"
expr_stmt|;
if|if
condition|(
name|doPrecompiledHeaders
argument_list|()
operator|&&
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"PRECOMPILED_HEADER"
argument_list|)
condition|)
block|{
name|QString
name|pchFlags
init|=
name|var
argument_list|(
literal|"QMAKE_"
operator|+
name|comps
index|[
name|i
index|]
operator|+
literal|"FLAGS_USE_PRECOMPILE"
argument_list|)
decl_stmt|;
name|QString
name|pchBaseName
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"PRECOMPILED_DIR"
argument_list|)
condition|)
block|{
name|pchBaseName
operator|=
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"PRECOMPILED_DIR"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|pchBaseName
operator|.
name|endsWith
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
condition|)
name|pchBaseName
operator|+=
name|Option
operator|::
name|dir_sep
expr_stmt|;
block|}
name|pchBaseName
operator|+=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_ORIG_TARGET"
argument_list|)
expr_stmt|;
comment|// replace place holders
name|pchFlags
operator|=
name|pchFlags
operator|.
name|replace
argument_list|(
literal|"${QMAKE_PCH_INPUT}"
argument_list|,
name|fileFixify
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"PRECOMPILED_HEADER"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|pchFlags
operator|=
name|pchFlags
operator|.
name|replace
argument_list|(
literal|"${QMAKE_PCH_OUTPUT_BASE}"
argument_list|,
name|pchBaseName
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"icc_pch_style"
argument_list|)
condition|)
block|{
comment|// icc style
name|pchFlags
operator|=
name|pchFlags
operator|.
name|replace
argument_list|(
literal|"${QMAKE_PCH_OUTPUT}"
argument_list|,
name|pchBaseName
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_PCH_OUTPUT_EXT"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// gcc style (including clang_pch_style)
name|QString
name|headerPrefix
init|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_PRECOMP_PREFIX"
argument_list|)
decl_stmt|;
name|QString
name|headerSuffix
decl_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"clang_pch_style"
argument_list|)
condition|)
name|headerSuffix
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_PCH_OUTPUT_EXT"
argument_list|)
expr_stmt|;
else|else
name|pchBaseName
operator|+=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_PCH_OUTPUT_EXT"
argument_list|)
expr_stmt|;
name|pchBaseName
operator|+=
name|Option
operator|::
name|dir_sep
expr_stmt|;
name|QString
name|pchOutputFile
decl_stmt|;
if|if
condition|(
name|comps
index|[
name|i
index|]
operator|==
literal|"C"
condition|)
block|{
name|pchOutputFile
operator|=
literal|"c"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|comps
index|[
name|i
index|]
operator|==
literal|"CXX"
condition|)
block|{
name|pchOutputFile
operator|=
literal|"c++"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"objective_c"
argument_list|)
condition|)
block|{
if|if
condition|(
name|comps
index|[
name|i
index|]
operator|==
literal|"OBJC"
condition|)
name|pchOutputFile
operator|=
literal|"objective-c"
expr_stmt|;
elseif|else
if|if
condition|(
name|comps
index|[
name|i
index|]
operator|==
literal|"OBJCXX"
condition|)
name|pchOutputFile
operator|=
literal|"objective-c++"
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|pchOutputFile
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|pchFlags
operator|=
name|pchFlags
operator|.
name|replace
argument_list|(
literal|"${QMAKE_PCH_OUTPUT}"
argument_list|,
name|pchBaseName
operator|+
name|pchOutputFile
operator|+
name|headerSuffix
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|pchFlags
operator|.
name|isEmpty
argument_list|()
condition|)
name|compile_flag
operator|+=
literal|" "
operator|+
name|pchFlags
expr_stmt|;
block|}
name|QString
name|cflags
decl_stmt|;
if|if
condition|(
name|comps
index|[
name|i
index|]
operator|==
literal|"OBJC"
operator|||
name|comps
index|[
name|i
index|]
operator|==
literal|"OBJCXX"
condition|)
name|cflags
operator|+=
literal|" $(CFLAGS)"
expr_stmt|;
else|else
name|cflags
operator|+=
literal|" $("
operator|+
name|comps
index|[
name|i
index|]
operator|+
literal|"FLAGS)"
expr_stmt|;
name|compile_flag
operator|+=
name|cflags
operator|+
literal|" $(INCPATH)"
expr_stmt|;
name|QString
name|compiler
init|=
name|comps
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|compiler
operator|==
literal|"C"
condition|)
name|compiler
operator|=
literal|"CC"
expr_stmt|;
name|QString
name|runComp
init|=
literal|"QMAKE_RUN_"
operator|+
name|compiler
decl_stmt|;
if|if
condition|(
name|project
operator|->
name|isEmpty
argument_list|(
name|runComp
argument_list|)
condition|)
name|project
operator|->
name|values
argument_list|(
name|runComp
argument_list|)
operator|.
name|append
argument_list|(
literal|"$("
operator|+
name|compiler
operator|+
literal|") "
operator|+
name|compile_flag
operator|+
literal|" -o $obj $src"
argument_list|)
expr_stmt|;
name|QString
name|runCompImp
init|=
literal|"QMAKE_RUN_"
operator|+
name|compiler
operator|+
literal|"_IMP"
decl_stmt|;
if|if
condition|(
name|project
operator|->
name|isEmpty
argument_list|(
name|runCompImp
argument_list|)
condition|)
name|project
operator|->
name|values
argument_list|(
name|runCompImp
argument_list|)
operator|.
name|append
argument_list|(
literal|"$("
operator|+
name|compiler
operator|+
literal|") "
operator|+
name|compile_flag
operator|+
literal|" -o \"$@\" \"$<\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"macx"
argument_list|)
operator|&&
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"TARGET"
argument_list|)
operator|&&
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"compile_libtool"
argument_list|)
operator|&&
operator|(
operator|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"build_pass"
argument_list|)
operator|||
name|project
operator|->
name|isEmpty
argument_list|(
literal|"BUILDS"
argument_list|)
operator|)
operator|)
condition|)
block|{
name|QString
name|bundle
decl_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"bundle"
argument_list|)
operator|&&
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_BUNDLE_EXTENSION"
argument_list|)
condition|)
block|{
name|bundle
operator|=
name|unescapeFilePath
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"TARGET"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_BUNDLE_NAME"
argument_list|)
condition|)
name|bundle
operator|=
name|unescapeFilePath
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_BUNDLE_NAME"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|bundle
operator|.
name|endsWith
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_BUNDLE_EXTENSION"
argument_list|)
argument_list|)
condition|)
name|bundle
operator|+=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_BUNDLE_EXTENSION"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"app"
operator|&&
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"app_bundle"
argument_list|)
condition|)
block|{
name|bundle
operator|=
name|unescapeFilePath
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"TARGET"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_APPLICATION_BUNDLE_NAME"
argument_list|)
condition|)
name|bundle
operator|=
name|unescapeFilePath
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_APPLICATION_BUNDLE_NAME"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|bundle
operator|.
name|endsWith
argument_list|(
literal|".app"
argument_list|)
condition|)
name|bundle
operator|+=
literal|".app"
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_BUNDLE_LOCATION"
argument_list|)
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_BUNDLE_LOCATION"
argument_list|)
operator|.
name|append
argument_list|(
literal|"Contents/MacOS"
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PKGINFO"
argument_list|)
operator|.
name|append
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"DESTDIR"
argument_list|)
operator|+
name|bundle
operator|+
literal|"/Contents/PkgInfo"
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_BUNDLE_RESOURCE_FILE"
argument_list|)
operator|.
name|append
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"DESTDIR"
argument_list|)
operator|+
name|bundle
operator|+
literal|"/Contents/Resources/empty.lproj"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"lib"
operator|&&
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"staticlib"
argument_list|)
operator|&&
operator|(
operator|(
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"plugin"
argument_list|)
operator|&&
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"lib_bundle"
argument_list|)
operator|)
operator|||
operator|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"plugin"
argument_list|)
operator|&&
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"plugin_bundle"
argument_list|)
operator|)
operator|)
condition|)
block|{
name|bundle
operator|=
name|unescapeFilePath
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"TARGET"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"plugin"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_PLUGIN_BUNDLE_NAME"
argument_list|)
condition|)
name|bundle
operator|=
name|unescapeFilePath
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_PLUGIN_BUNDLE_NAME"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_BUNDLE_EXTENSION"
argument_list|)
operator|&&
operator|!
name|bundle
operator|.
name|endsWith
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_BUNDLE_EXTENSION"
argument_list|)
argument_list|)
condition|)
name|bundle
operator|+=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_BUNDLE_EXTENSION"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|bundle
operator|.
name|endsWith
argument_list|(
literal|".plugin"
argument_list|)
condition|)
name|bundle
operator|+=
literal|".plugin"
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_BUNDLE_LOCATION"
argument_list|)
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_BUNDLE_LOCATION"
argument_list|)
operator|.
name|append
argument_list|(
literal|"Contents/MacOS"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_FRAMEWORK_BUNDLE_NAME"
argument_list|)
condition|)
name|bundle
operator|=
name|unescapeFilePath
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_FRAMEWORK_BUNDLE_NAME"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_BUNDLE_EXTENSION"
argument_list|)
operator|&&
operator|!
name|bundle
operator|.
name|endsWith
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_BUNDLE_EXTENSION"
argument_list|)
argument_list|)
condition|)
name|bundle
operator|+=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_BUNDLE_EXTENSION"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|bundle
operator|.
name|endsWith
argument_list|(
literal|".framework"
argument_list|)
condition|)
name|bundle
operator|+=
literal|".framework"
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|bundle
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_BUNDLE"
argument_list|)
operator|=
name|QStringList
argument_list|(
name|bundle
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"ALL_DEPS"
argument_list|)
operator|+=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_PKGINFO"
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"ALL_DEPS"
argument_list|)
operator|+=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_BUNDLE_RESOURCE_FILE"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_BUNDLE"
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_BUNDLE_LOCATION"
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
comment|//no bundling here
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_BUNDLE"
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_BUNDLE_LOCATION"
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_INTERNAL_INCLUDED_FILES"
argument_list|)
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"DISTFILES"
argument_list|)
operator|+=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_INTERNAL_INCLUDED_FILES"
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"DISTFILES"
argument_list|)
operator|+=
name|project
operator|->
name|projectFile
argument_list|()
expr_stmt|;
name|init2
argument_list|()
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_INTERNAL_PRL_LIBS"
argument_list|)
operator|<<
literal|"QMAKE_LIBDIR_FLAGS"
operator|<<
literal|"QMAKE_FRAMEWORKPATH_FLAGS"
operator|<<
literal|"QMAKE_LIBS"
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_MAX_FILES_PER_AR"
argument_list|)
condition|)
block|{
name|bool
name|ok
decl_stmt|;
name|int
name|max_files
init|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_MAX_FILES_PER_AR"
argument_list|)
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
decl_stmt|;
name|QStringList
name|ar_sublibs
decl_stmt|,
name|objs
init|=
name|project
operator|->
name|values
argument_list|(
literal|"OBJECTS"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ok
operator|&&
name|max_files
operator|>
literal|5
operator|&&
name|max_files
operator|<
operator|(
name|int
operator|)
name|objs
operator|.
name|count
argument_list|()
condition|)
block|{
name|QString
name|lib
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|obj_cnt
init|=
literal|0
init|,
name|lib_cnt
init|=
literal|0
init|;
name|i
operator|!=
name|objs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|(
operator|++
name|obj_cnt
operator|)
operator|>=
name|max_files
condition|)
block|{
if|if
condition|(
name|lib_cnt
condition|)
block|{
name|lib
operator|.
name|sprintf
argument_list|(
literal|"lib%s-tmp%d.a"
argument_list|,
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_ORIG_TARGET"
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|lib_cnt
argument_list|)
expr_stmt|;
name|ar_sublibs
operator|<<
name|lib
expr_stmt|;
name|obj_cnt
operator|=
literal|0
expr_stmt|;
block|}
name|lib_cnt
operator|++
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|ar_sublibs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_AR_SUBLIBS"
argument_list|)
operator|=
name|ar_sublibs
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_INTERNAL_PRL_LIBS"
argument_list|)
operator|<<
literal|"QMAKE_AR_SUBLIBS"
expr_stmt|;
block|}
block|}
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"compile_libtool"
argument_list|)
condition|)
block|{
specifier|const
name|QString
name|libtoolify
index|[]
init|=
block|{
literal|"QMAKE_RUN_CC"
block|,
literal|"QMAKE_RUN_CC_IMP"
block|,
literal|"QMAKE_RUN_CXX"
block|,
literal|"QMAKE_RUN_CXX_IMP"
block|,
literal|"QMAKE_LINK_THREAD"
block|,
literal|"QMAKE_LINK"
block|,
literal|"QMAKE_AR_CMD"
block|,
literal|"QMAKE_LINK_SHLIB_CMD"
block|,
name|QString
argument_list|()
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
operator|!
name|libtoolify
index|[
name|i
index|]
operator|.
name|isNull
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QStringList
modifier|&
name|l
init|=
name|project
operator|->
name|values
argument_list|(
name|libtoolify
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|l
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QString
name|libtool_flags
decl_stmt|,
name|comp_flags
decl_stmt|;
if|if
condition|(
name|libtoolify
index|[
name|i
index|]
operator|.
name|startsWith
argument_list|(
literal|"QMAKE_LINK"
argument_list|)
operator|||
name|libtoolify
index|[
name|i
index|]
operator|==
literal|"QMAKE_AR_CMD"
condition|)
block|{
name|libtool_flags
operator|+=
literal|" --mode=link"
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"staticlib"
argument_list|)
condition|)
block|{
name|libtool_flags
operator|+=
literal|" -static"
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_LIB_FLAG"
argument_list|)
condition|)
block|{
name|int
name|maj
init|=
name|project
operator|->
name|first
argument_list|(
literal|"VER_MAJ"
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|min
init|=
name|project
operator|->
name|first
argument_list|(
literal|"VER_MIN"
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|pat
init|=
name|project
operator|->
name|first
argument_list|(
literal|"VER_PAT"
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|comp_flags
operator|+=
literal|" -version-info "
operator|+
name|QString
operator|::
name|number
argument_list|(
literal|10
operator|*
name|maj
operator|+
name|min
argument_list|)
operator|+
literal|":"
operator|+
name|QString
operator|::
name|number
argument_list|(
name|pat
argument_list|)
operator|+
literal|":0"
expr_stmt|;
if|if
condition|(
name|libtoolify
index|[
name|i
index|]
operator|!=
literal|"QMAKE_AR_CMD"
condition|)
block|{
name|QString
name|rpath
init|=
name|Option
operator|::
name|output_dir
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"DESTDIR"
argument_list|)
condition|)
block|{
name|rpath
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"DESTDIR"
argument_list|)
expr_stmt|;
if|if
condition|(
name|QDir
operator|::
name|isRelativePath
argument_list|(
name|rpath
argument_list|)
condition|)
name|rpath
operator|.
name|prepend
argument_list|(
name|Option
operator|::
name|output_dir
operator|+
name|Option
operator|::
name|dir_sep
argument_list|)
expr_stmt|;
block|}
name|comp_flags
operator|+=
literal|" -rpath "
operator|+
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|rpath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"plugin"
argument_list|)
condition|)
name|libtool_flags
operator|+=
literal|" -module"
expr_stmt|;
block|}
else|else
block|{
name|libtool_flags
operator|+=
literal|" --mode=compile"
expr_stmt|;
block|}
name|l
operator|.
name|first
argument_list|()
operator|.
name|prepend
argument_list|(
literal|"$(LIBTOOL)"
operator|+
name|libtool_flags
operator|+
literal|" "
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|comp_flags
operator|.
name|isEmpty
argument_list|()
condition|)
name|l
operator|.
name|first
argument_list|()
operator|+=
name|comp_flags
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
name|void
DECL|function|processPrlVariable
name|UnixMakefileGenerator
operator|::
name|processPrlVariable
parameter_list|(
specifier|const
name|QString
modifier|&
name|var
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|l
parameter_list|)
block|{
if|if
condition|(
name|var
operator|==
literal|"QMAKE_PRL_LIBS"
condition|)
block|{
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_CURRENT_PRL_LIBS"
argument_list|)
operator|+=
name|l
expr_stmt|;
block|}
else|else
name|MakefileGenerator
operator|::
name|processPrlVariable
argument_list|(
name|var
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|QStringList
DECL|function|findDependencies
modifier|&
name|UnixMakefileGenerator
operator|::
name|findDependencies
parameter_list|(
specifier|const
name|QString
modifier|&
name|file
parameter_list|)
block|{
name|QStringList
modifier|&
name|ret
init|=
name|MakefileGenerator
operator|::
name|findDependencies
argument_list|(
name|file
argument_list|)
decl_stmt|;
comment|// Note: The QMAKE_IMAGE_COLLECTION file have all images
comment|// as dependency, so don't add precompiled header then
if|if
condition|(
name|doPrecompiledHeaders
argument_list|()
operator|&&
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"PRECOMPILED_HEADER"
argument_list|)
operator|&&
name|file
operator|!=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_IMAGE_COLLECTION"
argument_list|)
condition|)
block|{
name|QString
name|header_prefix
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"PRECOMPILED_DIR"
argument_list|)
condition|)
name|header_prefix
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"PRECOMPILED_DIR"
argument_list|)
expr_stmt|;
name|header_prefix
operator|+=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_ORIG_TARGET"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"clang_pch_style"
argument_list|)
condition|)
name|header_prefix
operator|+=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_PCH_OUTPUT_EXT"
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"icc_pch_style"
argument_list|)
condition|)
block|{
comment|// icc style
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|it
init|=
name|Option
operator|::
name|cpp_ext
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|Option
operator|::
name|cpp_ext
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
name|file
operator|.
name|endsWith
argument_list|(
operator|*
name|it
argument_list|)
condition|)
block|{
name|ret
operator|+=
name|header_prefix
expr_stmt|;
break|break;
block|}
block|}
block|}
else|else
block|{
comment|// gcc style (including clang_pch_style)
name|QString
name|header_suffix
init|=
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"clang_pch_style"
argument_list|)
condition|?
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_PCH_OUTPUT_EXT"
argument_list|)
else|:
literal|""
decl_stmt|;
name|header_prefix
operator|+=
name|Option
operator|::
name|dir_sep
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_PRECOMP_PREFIX"
argument_list|)
expr_stmt|;
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|it
init|=
name|Option
operator|::
name|c_ext
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|Option
operator|::
name|c_ext
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
name|file
operator|.
name|endsWith
argument_list|(
operator|*
name|it
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_CFLAGS_PRECOMPILE"
argument_list|)
condition|)
block|{
name|QString
name|precomp_c_h
init|=
name|header_prefix
operator|+
literal|"c"
operator|+
name|header_suffix
decl_stmt|;
if|if
condition|(
operator|!
name|ret
operator|.
name|contains
argument_list|(
name|precomp_c_h
argument_list|)
condition|)
name|ret
operator|+=
name|precomp_c_h
expr_stmt|;
block|}
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"objective_c"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_OBJCFLAGS_PRECOMPILE"
argument_list|)
condition|)
block|{
name|QString
name|precomp_objc_h
init|=
name|header_prefix
operator|+
literal|"objective-c"
operator|+
name|header_suffix
decl_stmt|;
if|if
condition|(
operator|!
name|ret
operator|.
name|contains
argument_list|(
name|precomp_objc_h
argument_list|)
condition|)
name|ret
operator|+=
name|precomp_objc_h
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_OBJCXXFLAGS_PRECOMPILE"
argument_list|)
condition|)
block|{
name|QString
name|precomp_objcpp_h
init|=
name|header_prefix
operator|+
literal|"objective-c++"
operator|+
name|header_suffix
decl_stmt|;
if|if
condition|(
operator|!
name|ret
operator|.
name|contains
argument_list|(
name|precomp_objcpp_h
argument_list|)
condition|)
name|ret
operator|+=
name|precomp_objcpp_h
expr_stmt|;
block|}
block|}
break|break;
block|}
block|}
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|it
init|=
name|Option
operator|::
name|cpp_ext
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|Option
operator|::
name|cpp_ext
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
name|file
operator|.
name|endsWith
argument_list|(
operator|*
name|it
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_CXXFLAGS_PRECOMPILE"
argument_list|)
condition|)
block|{
name|QString
name|precomp_cpp_h
init|=
name|header_prefix
operator|+
literal|"c++"
operator|+
name|header_suffix
decl_stmt|;
if|if
condition|(
operator|!
name|ret
operator|.
name|contains
argument_list|(
name|precomp_cpp_h
argument_list|)
condition|)
name|ret
operator|+=
name|precomp_cpp_h
expr_stmt|;
block|}
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"objective_c"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_OBJCXXFLAGS_PRECOMPILE"
argument_list|)
condition|)
block|{
name|QString
name|precomp_objcpp_h
init|=
name|header_prefix
operator|+
literal|"objective-c++"
operator|+
name|header_suffix
decl_stmt|;
if|if
condition|(
operator|!
name|ret
operator|.
name|contains
argument_list|(
name|precomp_objcpp_h
argument_list|)
condition|)
name|ret
operator|+=
name|precomp_objcpp_h
expr_stmt|;
block|}
block|}
break|break;
block|}
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
name|bool
DECL|function|findLibraries
name|UnixMakefileGenerator
operator|::
name|findLibraries
parameter_list|()
block|{
name|QList
argument_list|<
name|QMakeLocalFileName
argument_list|>
name|libdirs
decl_stmt|,
name|frameworkdirs
decl_stmt|;
name|frameworkdirs
operator|.
name|append
argument_list|(
name|QMakeLocalFileName
argument_list|(
literal|"/System/Library/Frameworks"
argument_list|)
argument_list|)
expr_stmt|;
name|frameworkdirs
operator|.
name|append
argument_list|(
name|QMakeLocalFileName
argument_list|(
literal|"/Library/Frameworks"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|lflags
index|[]
init|=
block|{
literal|"QMAKE_LIBDIR_FLAGS"
block|,
literal|"QMAKE_FRAMEWORKPATH_FLAGS"
block|,
literal|"QMAKE_LFLAGS"
block|,
literal|"QMAKE_LIBS"
block|,
literal|"QMAKE_LIBS_PRIVATE"
block|,
name|QString
argument_list|()
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
operator|!
name|lflags
index|[
name|i
index|]
operator|.
name|isNull
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QStringList
modifier|&
name|l
init|=
name|project
operator|->
name|values
argument_list|(
name|lflags
index|[
name|i
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|it
init|=
name|l
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|l
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|bool
name|do_suffix
init|=
literal|true
decl_stmt|;
name|QString
name|stub
decl_stmt|,
name|dir
decl_stmt|,
name|extn
decl_stmt|,
name|opt
init|=
operator|(
operator|*
name|it
operator|)
operator|.
name|trimmed
argument_list|()
decl_stmt|;
if|if
condition|(
name|opt
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
if|if
condition|(
name|opt
operator|.
name|startsWith
argument_list|(
literal|"-L"
argument_list|)
condition|)
block|{
name|QMakeLocalFileName
name|f
argument_list|(
name|opt
operator|.
name|right
argument_list|(
name|opt
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|libdirs
operator|.
name|contains
argument_list|(
name|f
argument_list|)
condition|)
name|libdirs
operator|.
name|append
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|.
name|startsWith
argument_list|(
literal|"-l"
argument_list|)
condition|)
block|{
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"rvct_linker"
argument_list|)
operator|||
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"armcc_linker"
argument_list|)
condition|)
block|{
operator|(
operator|*
name|it
operator|)
operator|=
literal|"lib"
operator|+
name|opt
operator|.
name|mid
argument_list|(
literal|2
argument_list|)
operator|+
literal|".so"
expr_stmt|;
block|}
else|else
block|{
name|stub
operator|=
name|opt
operator|.
name|mid
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|target_mode
operator|==
name|TARG_MACX_MODE
operator|&&
name|opt
operator|.
name|startsWith
argument_list|(
literal|"-F"
argument_list|)
condition|)
block|{
name|frameworkdirs
operator|.
name|append
argument_list|(
name|QMakeLocalFileName
argument_list|(
name|opt
operator|.
name|right
argument_list|(
name|opt
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|target_mode
operator|==
name|TARG_MACX_MODE
operator|&&
name|opt
operator|.
name|startsWith
argument_list|(
literal|"-framework"
argument_list|)
condition|)
block|{
if|if
condition|(
name|opt
operator|.
name|length
argument_list|()
operator|>
literal|11
condition|)
block|{
name|opt
operator|=
name|opt
operator|.
name|mid
argument_list|(
literal|11
argument_list|)
expr_stmt|;
block|}
else|else
block|{
operator|++
name|it
expr_stmt|;
name|opt
operator|=
operator|(
operator|*
name|it
operator|)
expr_stmt|;
block|}
name|do_suffix
operator|=
literal|false
expr_stmt|;
name|extn
operator|=
literal|""
expr_stmt|;
name|dir
operator|=
literal|"/System/Library/Frameworks/"
operator|+
name|opt
operator|+
literal|".framework/"
expr_stmt|;
name|stub
operator|=
name|opt
expr_stmt|;
block|}
block|}
else|else
block|{
name|extn
operator|=
name|dir
operator|=
literal|""
expr_stmt|;
name|stub
operator|=
name|opt
expr_stmt|;
name|int
name|slsh
init|=
name|opt
operator|.
name|lastIndexOf
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
decl_stmt|;
if|if
condition|(
name|slsh
operator|!=
operator|-
literal|1
condition|)
block|{
name|dir
operator|=
name|opt
operator|.
name|left
argument_list|(
name|slsh
argument_list|)
expr_stmt|;
name|stub
operator|=
name|opt
operator|.
name|mid
argument_list|(
name|slsh
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
name|QRegExp
name|stub_reg
argument_list|(
literal|"^.*lib("
operator|+
name|stub
operator|+
literal|"[^./=]*)\\.(.*)$"
argument_list|)
decl_stmt|;
if|if
condition|(
name|stub_reg
operator|.
name|exactMatch
argument_list|(
name|stub
argument_list|)
condition|)
block|{
name|stub
operator|=
name|stub_reg
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|extn
operator|=
name|stub_reg
operator|.
name|cap
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|stub
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|do_suffix
operator|&&
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_"
operator|+
name|stub
operator|.
name|toUpper
argument_list|()
operator|+
literal|"_SUFFIX"
argument_list|)
condition|)
name|stub
operator|+=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_"
operator|+
name|stub
operator|.
name|toUpper
argument_list|()
operator|+
literal|"_SUFFIX"
argument_list|)
expr_stmt|;
name|bool
name|found
init|=
literal|false
decl_stmt|;
name|QStringList
name|extens
decl_stmt|;
if|if
condition|(
operator|!
name|extn
operator|.
name|isNull
argument_list|()
condition|)
name|extens
operator|<<
name|extn
expr_stmt|;
else|else
name|extens
operator|<<
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_EXTENSION_SHLIB"
argument_list|)
operator|.
name|first
argument_list|()
operator|<<
literal|"a"
expr_stmt|;
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|extit
init|=
name|extens
operator|.
name|begin
argument_list|()
init|;
name|extit
operator|!=
name|extens
operator|.
name|end
argument_list|()
condition|;
operator|++
name|extit
control|)
block|{
if|if
condition|(
name|dir
operator|.
name|isNull
argument_list|()
condition|)
block|{
for|for
control|(
name|QList
argument_list|<
name|QMakeLocalFileName
argument_list|>
operator|::
name|Iterator
name|dep_it
init|=
name|libdirs
operator|.
name|begin
argument_list|()
init|;
name|dep_it
operator|!=
name|libdirs
operator|.
name|end
argument_list|()
condition|;
operator|++
name|dep_it
control|)
block|{
name|QString
name|pathToLib
init|=
operator|(
operator|(
operator|*
name|dep_it
operator|)
operator|.
name|local
argument_list|()
operator|+
name|Option
operator|::
name|dir_sep
operator|+
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PREFIX_SHLIB"
argument_list|)
operator|.
name|first
argument_list|()
operator|+
name|stub
operator|+
literal|"."
operator|+
operator|(
operator|*
name|extit
operator|)
operator|)
decl_stmt|;
if|if
condition|(
name|exists
argument_list|(
name|pathToLib
argument_list|)
condition|)
block|{
operator|(
operator|*
name|it
operator|)
operator|=
literal|"-l"
operator|+
name|stub
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
else|else
block|{
if|if
condition|(
name|exists
argument_list|(
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PREFIX_SHLIB"
argument_list|)
operator|.
name|first
argument_list|()
operator|+
name|stub
operator|+
literal|"."
operator|+
operator|(
operator|*
name|extit
operator|)
argument_list|)
condition|)
block|{
operator|(
operator|*
name|it
operator|)
operator|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PREFIX_SHLIB"
argument_list|)
operator|.
name|first
argument_list|()
operator|+
name|stub
operator|+
literal|"."
operator|+
operator|(
operator|*
name|extit
operator|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|found
operator|&&
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"compile_libtool"
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|dep_i
init|=
literal|0
init|;
name|dep_i
operator|<
name|libdirs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|dep_i
control|)
block|{
if|if
condition|(
name|exists
argument_list|(
name|libdirs
index|[
name|dep_i
index|]
operator|.
name|local
argument_list|()
operator|+
name|Option
operator|::
name|dir_sep
operator|+
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PREFIX_SHLIB"
argument_list|)
operator|.
name|first
argument_list|()
operator|+
name|stub
operator|+
name|Option
operator|::
name|libtool_ext
argument_list|)
condition|)
block|{
operator|(
operator|*
name|it
operator|)
operator|=
name|libdirs
index|[
name|dep_i
index|]
operator|.
name|real
argument_list|()
operator|+
name|Option
operator|::
name|dir_sep
operator|+
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PREFIX_SHLIB"
argument_list|)
operator|.
name|first
argument_list|()
operator|+
name|stub
operator|+
name|Option
operator|::
name|libtool_ext
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|linkLib
name|QString
name|linkLib
parameter_list|(
specifier|const
name|QString
modifier|&
name|file
parameter_list|,
specifier|const
name|QString
modifier|&
name|libName
parameter_list|)
block|{
name|QString
name|ret
decl_stmt|;
name|QRegExp
name|reg
argument_list|(
literal|"^.*lib("
operator|+
name|QRegExp
operator|::
name|escape
argument_list|(
name|libName
argument_list|)
operator|+
literal|"[^./=]*).*$"
argument_list|)
decl_stmt|;
if|if
condition|(
name|reg
operator|.
name|exactMatch
argument_list|(
name|file
argument_list|)
condition|)
name|ret
operator|=
literal|"-l"
operator|+
name|reg
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
name|void
DECL|function|processPrlFiles
name|UnixMakefileGenerator
operator|::
name|processPrlFiles
parameter_list|()
block|{
name|QList
argument_list|<
name|QMakeLocalFileName
argument_list|>
name|libdirs
decl_stmt|,
name|frameworkdirs
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|dlib
decl|,
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_DEFAULT_LIBDIRS"
argument_list|)
control|)
name|libdirs
operator|.
name|append
argument_list|(
name|QMakeLocalFileName
argument_list|(
name|dlib
argument_list|)
argument_list|)
expr_stmt|;
name|frameworkdirs
operator|.
name|append
argument_list|(
name|QMakeLocalFileName
argument_list|(
literal|"/System/Library/Frameworks"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|lflags
index|[]
init|=
block|{
literal|"QMAKE_LIBDIR_FLAGS"
block|,
literal|"QMAKE_FRAMEWORKPATH_FLAGS"
block|,
literal|"QMAKE_LFLAGS"
block|,
literal|"QMAKE_LIBS"
block|,
name|QString
argument_list|()
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
operator|!
name|lflags
index|[
name|i
index|]
operator|.
name|isNull
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QStringList
modifier|&
name|l
init|=
name|project
operator|->
name|values
argument_list|(
name|lflags
index|[
name|i
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|lit
init|=
literal|0
init|;
name|lit
operator|<
name|l
operator|.
name|size
argument_list|()
condition|;
operator|++
name|lit
control|)
block|{
name|QString
name|opt
init|=
name|l
operator|.
name|at
argument_list|(
name|lit
argument_list|)
operator|.
name|trimmed
argument_list|()
decl_stmt|;
if|if
condition|(
name|opt
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
if|if
condition|(
name|opt
operator|.
name|startsWith
argument_list|(
literal|"-L"
argument_list|)
condition|)
block|{
name|QMakeLocalFileName
name|l
argument_list|(
name|opt
operator|.
name|right
argument_list|(
name|opt
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|libdirs
operator|.
name|contains
argument_list|(
name|l
argument_list|)
condition|)
name|libdirs
operator|.
name|append
argument_list|(
name|l
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|.
name|startsWith
argument_list|(
literal|"-l"
argument_list|)
condition|)
block|{
name|QString
name|lib
init|=
name|opt
operator|.
name|right
argument_list|(
name|opt
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|dep_i
init|=
literal|0
init|;
name|dep_i
operator|<
name|libdirs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|dep_i
control|)
block|{
specifier|const
name|QMakeLocalFileName
modifier|&
name|lfn
init|=
name|libdirs
index|[
name|dep_i
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"compile_libtool"
argument_list|)
condition|)
block|{
comment|//give them the .libs..
name|QString
name|la
init|=
name|lfn
operator|.
name|local
argument_list|()
operator|+
name|Option
operator|::
name|dir_sep
operator|+
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PREFIX_SHLIB"
argument_list|)
operator|.
name|first
argument_list|()
operator|+
name|lib
operator|+
name|Option
operator|::
name|libtool_ext
decl_stmt|;
if|if
condition|(
name|exists
argument_list|(
name|la
argument_list|)
operator|&&
name|QFile
operator|::
name|exists
argument_list|(
name|lfn
operator|.
name|local
argument_list|()
operator|+
name|Option
operator|::
name|dir_sep
operator|+
literal|".libs"
argument_list|)
condition|)
block|{
name|QString
name|dot_libs
init|=
name|lfn
operator|.
name|real
argument_list|()
operator|+
name|Option
operator|::
name|dir_sep
operator|+
literal|".libs"
decl_stmt|;
name|l
operator|.
name|append
argument_list|(
literal|"-L"
operator|+
name|dot_libs
argument_list|)
expr_stmt|;
name|libdirs
operator|.
name|append
argument_list|(
name|QMakeLocalFileName
argument_list|(
name|dot_libs
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|QString
name|prl
init|=
name|lfn
operator|.
name|local
argument_list|()
operator|+
name|Option
operator|::
name|dir_sep
operator|+
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PREFIX_SHLIB"
argument_list|)
operator|.
name|first
argument_list|()
operator|+
name|lib
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_"
operator|+
name|lib
operator|.
name|toUpper
argument_list|()
operator|+
literal|"_SUFFIX"
argument_list|)
condition|)
name|prl
operator|+=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_"
operator|+
name|lib
operator|.
name|toUpper
argument_list|()
operator|+
literal|"_SUFFIX"
argument_list|)
expr_stmt|;
if|if
condition|(
name|processPrlFile
argument_list|(
name|prl
argument_list|)
condition|)
block|{
if|if
condition|(
name|prl
operator|.
name|startsWith
argument_list|(
name|lfn
operator|.
name|local
argument_list|()
argument_list|)
condition|)
name|prl
operator|.
name|replace
argument_list|(
literal|0
argument_list|,
name|lfn
operator|.
name|local
argument_list|()
operator|.
name|length
argument_list|()
argument_list|,
name|lfn
operator|.
name|real
argument_list|()
argument_list|)
expr_stmt|;
name|opt
operator|=
name|linkLib
argument_list|(
name|prl
argument_list|,
name|lib
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|target_mode
operator|==
name|TARG_MACX_MODE
operator|&&
name|opt
operator|.
name|startsWith
argument_list|(
literal|"-F"
argument_list|)
condition|)
block|{
name|QMakeLocalFileName
name|f
argument_list|(
name|opt
operator|.
name|right
argument_list|(
name|opt
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|frameworkdirs
operator|.
name|contains
argument_list|(
name|f
argument_list|)
condition|)
name|frameworkdirs
operator|.
name|append
argument_list|(
name|f
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|target_mode
operator|==
name|TARG_MACX_MODE
operator|&&
name|opt
operator|.
name|startsWith
argument_list|(
literal|"-framework"
argument_list|)
condition|)
block|{
if|if
condition|(
name|opt
operator|.
name|length
argument_list|()
operator|>
literal|11
condition|)
name|opt
operator|=
name|opt
operator|.
name|mid
argument_list|(
literal|11
argument_list|)
expr_stmt|;
else|else
name|opt
operator|=
name|l
operator|.
name|at
argument_list|(
operator|++
name|lit
argument_list|)
expr_stmt|;
name|opt
operator|=
name|opt
operator|.
name|trimmed
argument_list|()
expr_stmt|;
specifier|const
name|QList
argument_list|<
name|QMakeLocalFileName
argument_list|>
name|dirs
init|=
name|frameworkdirs
operator|+
name|libdirs
decl_stmt|;
for|for
control|(
name|int
name|dep_i
init|=
literal|0
init|;
name|dep_i
operator|<
name|dirs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|dep_i
control|)
block|{
name|QString
name|prl
init|=
name|dirs
index|[
name|dep_i
index|]
operator|.
name|local
argument_list|()
operator|+
literal|"/"
operator|+
name|opt
operator|+
literal|".framework/"
operator|+
name|opt
operator|+
name|Option
operator|::
name|prl_ext
decl_stmt|;
if|if
condition|(
name|processPrlFile
argument_list|(
name|prl
argument_list|)
condition|)
break|break;
block|}
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|opt
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QString
name|lib
init|=
name|opt
decl_stmt|;
name|processPrlFile
argument_list|(
name|lib
argument_list|)
expr_stmt|;
if|#
directive|if
literal|0
block|if(ret)                     opt = linkLib(lib, "");
endif|#
directive|endif
if|if
condition|(
operator|!
name|opt
operator|.
name|isEmpty
argument_list|()
condition|)
name|l
operator|.
name|replaceInStrings
argument_list|(
name|lib
argument_list|,
name|opt
argument_list|)
expr_stmt|;
block|}
name|QStringList
modifier|&
name|prl_libs
init|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_CURRENT_PRL_LIBS"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|prl_libs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|prl
init|=
literal|0
init|;
name|prl
operator|<
name|prl_libs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|prl
control|)
name|l
operator|.
name|insert
argument_list|(
name|lit
operator|+
name|prl
operator|+
literal|1
argument_list|,
name|prl_libs
operator|.
name|at
argument_list|(
name|prl
argument_list|)
argument_list|)
expr_stmt|;
name|prl_libs
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
comment|//merge them into a logical order
if|if
condition|(
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"no_smart_library_merge"
argument_list|)
operator|&&
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"no_lflags_merge"
argument_list|)
condition|)
block|{
name|QHash
argument_list|<
name|QString
argument_list|,
name|QStringList
argument_list|>
name|lflags
decl_stmt|;
for|for
control|(
name|int
name|lit
init|=
literal|0
init|;
name|lit
operator|<
name|l
operator|.
name|size
argument_list|()
condition|;
operator|++
name|lit
control|)
block|{
name|QString
name|arch
argument_list|(
literal|"default"
argument_list|)
decl_stmt|;
name|QString
name|opt
init|=
name|l
operator|.
name|at
argument_list|(
name|lit
argument_list|)
operator|.
name|trimmed
argument_list|()
decl_stmt|;
if|if
condition|(
name|opt
operator|.
name|startsWith
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
if|if
condition|(
name|target_mode
operator|==
name|TARG_MACX_MODE
operator|&&
name|opt
operator|.
name|startsWith
argument_list|(
literal|"-Xarch"
argument_list|)
condition|)
block|{
if|if
condition|(
name|opt
operator|.
name|length
argument_list|()
operator|>
literal|7
condition|)
block|{
name|arch
operator|=
name|opt
operator|.
name|mid
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|opt
operator|=
name|l
operator|.
name|at
argument_list|(
operator|++
name|lit
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|opt
operator|.
name|startsWith
argument_list|(
literal|"-L"
argument_list|)
operator|||
operator|(
name|target_mode
operator|==
name|TARG_MACX_MODE
operator|&&
name|opt
operator|.
name|startsWith
argument_list|(
literal|"-F"
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
operator|!
name|lflags
index|[
name|arch
index|]
operator|.
name|contains
argument_list|(
name|opt
argument_list|)
condition|)
name|lflags
index|[
name|arch
index|]
operator|.
name|append
argument_list|(
name|opt
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|.
name|startsWith
argument_list|(
literal|"-l"
argument_list|)
operator|||
name|opt
operator|==
literal|"-pthread"
condition|)
block|{
comment|// Make sure we keep the dependency-order of libraries
if|if
condition|(
name|lflags
index|[
name|arch
index|]
operator|.
name|contains
argument_list|(
name|opt
argument_list|)
condition|)
name|lflags
index|[
name|arch
index|]
operator|.
name|removeAll
argument_list|(
name|opt
argument_list|)
expr_stmt|;
name|lflags
index|[
name|arch
index|]
operator|.
name|append
argument_list|(
name|opt
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|target_mode
operator|==
name|TARG_MACX_MODE
operator|&&
name|opt
operator|.
name|startsWith
argument_list|(
literal|"-framework"
argument_list|)
condition|)
block|{
if|if
condition|(
name|opt
operator|.
name|length
argument_list|()
operator|>
literal|11
condition|)
name|opt
operator|=
name|opt
operator|.
name|mid
argument_list|(
literal|11
argument_list|)
expr_stmt|;
else|else
block|{
name|opt
operator|=
name|l
operator|.
name|at
argument_list|(
operator|++
name|lit
argument_list|)
expr_stmt|;
if|if
condition|(
name|target_mode
operator|==
name|TARG_MACX_MODE
operator|&&
name|opt
operator|.
name|startsWith
argument_list|(
literal|"-Xarch"
argument_list|)
condition|)
name|opt
operator|=
name|l
operator|.
name|at
argument_list|(
operator|++
name|lit
argument_list|)
expr_stmt|;
comment|// The user has done the right thing and prefixed each part
block|}
name|bool
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|lflags
index|[
name|arch
index|]
operator|.
name|size
argument_list|()
condition|;
operator|++
name|x
control|)
block|{
name|QString
name|xf
init|=
name|lflags
index|[
name|arch
index|]
operator|.
name|at
argument_list|(
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
name|xf
operator|.
name|startsWith
argument_list|(
literal|"-framework"
argument_list|)
condition|)
block|{
name|QString
name|framework
decl_stmt|;
if|if
condition|(
name|xf
operator|.
name|length
argument_list|()
operator|>
literal|11
condition|)
name|framework
operator|=
name|xf
operator|.
name|mid
argument_list|(
literal|11
argument_list|)
expr_stmt|;
else|else
name|framework
operator|=
name|lflags
index|[
name|arch
index|]
operator|.
name|at
argument_list|(
operator|++
name|x
argument_list|)
expr_stmt|;
if|if
condition|(
name|framework
operator|==
name|opt
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|lflags
index|[
name|arch
index|]
operator|.
name|append
argument_list|(
literal|"-framework"
argument_list|)
expr_stmt|;
name|lflags
index|[
name|arch
index|]
operator|.
name|append
argument_list|(
name|opt
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|lflags
index|[
name|arch
index|]
operator|.
name|append
argument_list|(
name|opt
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|opt
operator|.
name|isNull
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|lflags
index|[
name|arch
index|]
operator|.
name|contains
argument_list|(
name|opt
argument_list|)
condition|)
name|lflags
index|[
name|arch
index|]
operator|.
name|append
argument_list|(
name|opt
argument_list|)
expr_stmt|;
block|}
block|}
name|l
operator|=
name|lflags
operator|.
name|take
argument_list|(
literal|"default"
argument_list|)
expr_stmt|;
comment|// Process architecture specific options (Xarch)
name|QHash
argument_list|<
name|QString
argument_list|,
name|QStringList
argument_list|>
operator|::
name|const_iterator
name|archIterator
init|=
name|lflags
operator|.
name|constBegin
argument_list|()
decl_stmt|;
while|while
condition|(
name|archIterator
operator|!=
name|lflags
operator|.
name|constEnd
argument_list|()
condition|)
block|{
specifier|const
name|QStringList
name|archOptions
init|=
name|archIterator
operator|.
name|value
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|archOptions
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|l
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"-Xarch_"
argument_list|)
operator|+
name|archIterator
operator|.
name|key
argument_list|()
argument_list|)
expr_stmt|;
name|l
operator|.
name|append
argument_list|(
name|archOptions
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
operator|++
name|archIterator
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
name|QString
DECL|function|defaultInstall
name|UnixMakefileGenerator
operator|::
name|defaultInstall
parameter_list|(
specifier|const
name|QString
modifier|&
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
operator|!=
literal|"target"
operator|||
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"subdirs"
condition|)
return|return
name|QString
argument_list|()
return|;
name|bool
name|bundle
init|=
literal|false
decl_stmt|;
specifier|const
name|QString
name|root
init|=
literal|"$(INSTALL_ROOT)"
decl_stmt|;
name|QStringList
modifier|&
name|uninst
init|=
name|project
operator|->
name|values
argument_list|(
name|t
operator|+
literal|".uninstall"
argument_list|)
decl_stmt|;
name|QString
name|ret
decl_stmt|,
name|destdir
init|=
name|project
operator|->
name|first
argument_list|(
literal|"DESTDIR"
argument_list|)
decl_stmt|;
name|QString
name|targetdir
init|=
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"target.path"
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|destdir
operator|.
name|isEmpty
argument_list|()
operator|&&
name|destdir
operator|.
name|right
argument_list|(
literal|1
argument_list|)
operator|!=
name|Option
operator|::
name|dir_sep
condition|)
name|destdir
operator|+=
name|Option
operator|::
name|dir_sep
expr_stmt|;
name|targetdir
operator|=
name|fileFixify
argument_list|(
name|targetdir
argument_list|,
name|FileFixifyAbsolute
argument_list|)
expr_stmt|;
if|if
condition|(
name|targetdir
operator|.
name|right
argument_list|(
literal|1
argument_list|)
operator|!=
name|Option
operator|::
name|dir_sep
condition|)
name|targetdir
operator|+=
name|Option
operator|::
name|dir_sep
expr_stmt|;
name|QStringList
name|links
decl_stmt|;
name|QString
name|target
init|=
literal|"$(TARGET)"
decl_stmt|;
specifier|const
name|QStringList
modifier|&
name|targets
init|=
name|project
operator|->
name|values
argument_list|(
name|t
operator|+
literal|".targets"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_BUNDLE"
argument_list|)
condition|)
block|{
name|target
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_BUNDLE"
argument_list|)
expr_stmt|;
name|bundle
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"app"
condition|)
block|{
name|target
operator|=
literal|"$(QMAKE_TARGET)"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"lib"
condition|)
block|{
if|if
condition|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_CYGWIN_SHLIB"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"staticlib"
argument_list|)
operator|&&
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"plugin"
argument_list|)
condition|)
block|{
if|if
condition|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_HPUX_SHLIB"
argument_list|)
condition|)
block|{
name|links
operator|<<
literal|"$(TARGET0)"
operator|<<
literal|"$(TARGET1)"
operator|<<
literal|"$(TARGET2)"
expr_stmt|;
block|}
else|else
block|{
name|links
operator|<<
literal|"$(TARGET0)"
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|targets
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|src
init|=
name|targets
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|,
name|dst
init|=
name|filePrefixRoot
argument_list|(
name|root
argument_list|,
name|targetdir
operator|+
name|src
operator|.
name|section
argument_list|(
literal|'/'
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ret
operator|.
name|isEmpty
argument_list|()
condition|)
name|ret
operator|+=
literal|"\n\t"
expr_stmt|;
name|ret
operator|+=
literal|"-$(INSTALL_FILE) \""
operator|+
name|src
operator|+
literal|"\" \""
operator|+
name|dst
operator|+
literal|"\""
expr_stmt|;
if|if
condition|(
operator|!
name|uninst
operator|.
name|isEmpty
argument_list|()
condition|)
name|uninst
operator|.
name|append
argument_list|(
literal|"\n\t"
argument_list|)
expr_stmt|;
name|uninst
operator|.
name|append
argument_list|(
literal|"-$(DEL_FILE) \""
operator|+
name|dst
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|bundle
operator|&&
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"compile_libtool"
argument_list|)
condition|)
block|{
name|QString
name|src_targ
init|=
name|target
decl_stmt|;
if|if
condition|(
name|src_targ
operator|==
literal|"$(TARGET)"
condition|)
name|src_targ
operator|=
literal|"$(TARGETL)"
expr_stmt|;
name|QString
name|dst_dir
init|=
name|fileFixify
argument_list|(
name|targetdir
argument_list|,
name|FileFixifyAbsolute
argument_list|)
decl_stmt|;
if|if
condition|(
name|QDir
operator|::
name|isRelativePath
argument_list|(
name|dst_dir
argument_list|)
condition|)
name|dst_dir
operator|=
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|Option
operator|::
name|output_dir
operator|+
name|Option
operator|::
name|dir_sep
operator|+
name|dst_dir
argument_list|)
expr_stmt|;
name|ret
operator|=
literal|"-$(LIBTOOL) --mode=install cp \""
operator|+
name|src_targ
operator|+
literal|"\" \""
operator|+
name|filePrefixRoot
argument_list|(
name|root
argument_list|,
name|dst_dir
argument_list|)
operator|+
literal|"\""
expr_stmt|;
name|uninst
operator|.
name|append
argument_list|(
literal|"-$(LIBTOOL) --mode=uninstall \""
operator|+
name|src_targ
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QString
name|src_targ
init|=
name|target
decl_stmt|;
if|if
condition|(
operator|!
name|destdir
operator|.
name|isEmpty
argument_list|()
condition|)
name|src_targ
operator|=
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|destdir
operator|+
name|target
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QString
name|dst_targ
init|=
name|filePrefixRoot
argument_list|(
name|root
argument_list|,
name|fileFixify
argument_list|(
name|targetdir
operator|+
name|target
argument_list|,
name|FileFixifyAbsolute
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|bundle
condition|)
block|{
if|if
condition|(
operator|!
name|ret
operator|.
name|isEmpty
argument_list|()
condition|)
name|ret
operator|+=
literal|"\n\t"
expr_stmt|;
name|ret
operator|+=
literal|"$(DEL_FILE) -r \""
operator|+
name|dst_targ
operator|+
literal|"\"\n\t"
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ret
operator|.
name|isEmpty
argument_list|()
condition|)
name|ret
operator|+=
literal|"\n\t"
expr_stmt|;
name|QString
name|copy_cmd
argument_list|(
literal|"-"
argument_list|)
decl_stmt|;
if|if
condition|(
name|bundle
condition|)
name|copy_cmd
operator|+=
literal|"$(INSTALL_DIR)"
expr_stmt|;
elseif|else
if|if
condition|(
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"lib"
operator|&&
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"staticlib"
argument_list|)
condition|)
name|copy_cmd
operator|+=
literal|"$(INSTALL_FILE)"
expr_stmt|;
else|else
name|copy_cmd
operator|+=
literal|"$(INSTALL_PROGRAM)"
expr_stmt|;
name|copy_cmd
operator|+=
literal|" \""
operator|+
name|src_targ
operator|+
literal|"\" \""
operator|+
name|dst_targ
operator|+
literal|"\""
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"lib"
operator|&&
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"staticlib"
argument_list|)
operator|&&
name|project
operator|->
name|values
argument_list|(
name|t
operator|+
literal|".CONFIG"
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|"fix_rpath"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_FIX_RPATH"
argument_list|)
condition|)
block|{
name|ret
operator|+=
name|copy_cmd
expr_stmt|;
name|ret
operator|+=
literal|"\n\t-"
operator|+
name|var
argument_list|(
literal|"QMAKE_FIX_RPATH"
argument_list|)
operator|+
literal|" \""
operator|+
name|dst_targ
operator|+
literal|"\" \""
operator|+
name|dst_targ
operator|+
literal|"\""
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_LFLAGS_RPATH"
argument_list|)
condition|)
block|{
name|ret
operator|+=
literal|"-$(LINK) $(LFLAGS) "
operator|+
name|var
argument_list|(
literal|"QMAKE_LFLAGS_RPATH"
argument_list|)
operator|+
name|targetdir
operator|+
literal|" -o \""
operator|+
name|dst_targ
operator|+
literal|"\" $(OBJECTS) $(LIBS) $(OBJCOMP)"
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|+=
name|copy_cmd
expr_stmt|;
block|}
block|}
else|else
block|{
name|ret
operator|+=
name|copy_cmd
expr_stmt|;
block|}
if|if
condition|(
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"lib"
operator|&&
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"staticlib"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_RANLIB"
argument_list|)
condition|)
name|ret
operator|+=
name|QString
argument_list|(
literal|"\n\t$(RANLIB) \""
argument_list|)
operator|+
name|dst_targ
operator|+
literal|"\""
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"debug"
argument_list|)
operator|&&
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"nostrip"
argument_list|)
operator|&&
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_STRIP"
argument_list|)
condition|)
block|{
name|ret
operator|+=
literal|"\n\t-$(STRIP)"
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"lib"
operator|&&
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_STRIPFLAGS_LIB"
argument_list|)
condition|)
name|ret
operator|+=
literal|" "
operator|+
name|var
argument_list|(
literal|"QMAKE_STRIPFLAGS_LIB"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"app"
operator|&&
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_STRIPFLAGS_APP"
argument_list|)
condition|)
name|ret
operator|+=
literal|" "
operator|+
name|var
argument_list|(
literal|"QMAKE_STRIPFLAGS_APP"
argument_list|)
expr_stmt|;
if|if
condition|(
name|bundle
condition|)
name|ret
operator|=
literal|" \""
operator|+
name|dst_targ
operator|+
literal|"/Contents/MacOS/$(QMAKE_TARGET)\""
expr_stmt|;
else|else
name|ret
operator|+=
literal|" \""
operator|+
name|dst_targ
operator|+
literal|"\""
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|uninst
operator|.
name|isEmpty
argument_list|()
condition|)
name|uninst
operator|.
name|append
argument_list|(
literal|"\n\t"
argument_list|)
expr_stmt|;
if|if
condition|(
name|bundle
condition|)
name|uninst
operator|.
name|append
argument_list|(
literal|"-$(DEL_FILE) -r \""
operator|+
name|dst_targ
operator|+
literal|"\""
argument_list|)
expr_stmt|;
else|else
name|uninst
operator|.
name|append
argument_list|(
literal|"-$(DEL_FILE) \""
operator|+
name|dst_targ
operator|+
literal|"\""
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|links
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|links
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|target_mode
operator|==
name|TARG_UNIX_MODE
operator|||
name|target_mode
operator|==
name|TARG_MACX_MODE
condition|)
block|{
name|QString
name|link
init|=
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|destdir
operator|+
name|links
index|[
name|i
index|]
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|int
name|lslash
init|=
name|link
operator|.
name|lastIndexOf
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
decl_stmt|;
if|if
condition|(
name|lslash
operator|!=
operator|-
literal|1
condition|)
name|link
operator|=
name|link
operator|.
name|right
argument_list|(
name|link
operator|.
name|length
argument_list|()
operator|-
operator|(
name|lslash
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
name|QString
name|dst_link
init|=
name|filePrefixRoot
argument_list|(
name|root
argument_list|,
name|fileFixify
argument_list|(
name|targetdir
operator|+
name|link
argument_list|,
name|FileFixifyAbsolute
argument_list|)
argument_list|)
decl_stmt|;
name|ret
operator|+=
literal|"\n\t-$(SYMLINK) \"$(TARGET)\" \""
operator|+
name|dst_link
operator|+
literal|"\""
expr_stmt|;
if|if
condition|(
operator|!
name|uninst
operator|.
name|isEmpty
argument_list|()
condition|)
name|uninst
operator|.
name|append
argument_list|(
literal|"\n\t"
argument_list|)
expr_stmt|;
name|uninst
operator|.
name|append
argument_list|(
literal|"-$(DEL_FILE) \""
operator|+
name|dst_link
operator|+
literal|"\""
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"lib"
condition|)
block|{
name|QStringList
name|types
decl_stmt|;
name|types
operator|<<
literal|"prl"
operator|<<
literal|"libtool"
operator|<<
literal|"pkgconfig"
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|types
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QString
name|type
init|=
name|types
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QString
name|meta
decl_stmt|;
if|if
condition|(
name|type
operator|==
literal|"prl"
operator|&&
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"create_prl"
argument_list|)
operator|&&
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"no_install_prl"
argument_list|)
operator|&&
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_INTERNAL_PRL_FILE"
argument_list|)
condition|)
name|meta
operator|=
name|prlFileName
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|==
literal|"libtool"
operator|&&
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"create_libtool"
argument_list|)
operator|&&
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"compile_libtool"
argument_list|)
condition|)
name|meta
operator|=
name|libtoolFileName
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|type
operator|==
literal|"pkgconfig"
operator|&&
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"create_pc"
argument_list|)
condition|)
name|meta
operator|=
name|pkgConfigFileName
argument_list|(
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|meta
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QString
name|src_meta
init|=
name|meta
decl_stmt|;
if|if
condition|(
operator|!
name|destdir
operator|.
name|isEmpty
argument_list|()
condition|)
name|src_meta
operator|=
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|destdir
operator|+
name|meta
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QString
name|dst_meta
init|=
name|filePrefixRoot
argument_list|(
name|root
argument_list|,
name|fileFixify
argument_list|(
name|targetdir
operator|+
name|meta
argument_list|,
name|FileFixifyAbsolute
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|uninst
operator|.
name|isEmpty
argument_list|()
condition|)
name|uninst
operator|.
name|append
argument_list|(
literal|"\n\t"
argument_list|)
expr_stmt|;
name|uninst
operator|.
name|append
argument_list|(
literal|"-$(DEL_FILE) \""
operator|+
name|dst_meta
operator|+
literal|"\""
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|replace_rule
argument_list|(
literal|"QMAKE_"
operator|+
name|type
operator|.
name|toUpper
argument_list|()
operator|+
literal|"_INSTALL_REPLACE"
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|dst_meta_dir
init|=
name|fileInfo
argument_list|(
name|dst_meta
argument_list|)
operator|.
name|path
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|dst_meta_dir
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|ret
operator|.
name|isEmpty
argument_list|()
condition|)
name|ret
operator|+=
literal|"\n\t"
expr_stmt|;
name|ret
operator|+=
name|mkdir_p_asstring
argument_list|(
name|dst_meta_dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|QString
name|install_meta
init|=
literal|"$(INSTALL_FILE) \""
operator|+
name|src_meta
operator|+
literal|"\" \""
operator|+
name|dst_meta
operator|+
literal|"\""
decl_stmt|;
if|if
condition|(
name|project
operator|->
name|isEmpty
argument_list|(
name|replace_rule
argument_list|)
operator|||
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"no_sed_meta_install"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|ret
operator|.
name|isEmpty
argument_list|()
condition|)
name|ret
operator|+=
literal|"\n\t"
expr_stmt|;
name|ret
operator|+=
literal|"-"
operator|+
name|install_meta
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|ret
operator|.
name|isEmpty
argument_list|()
condition|)
name|ret
operator|+=
literal|"\n\t"
expr_stmt|;
name|ret
operator|+=
literal|"-$(SED)"
expr_stmt|;
name|QStringList
name|replace_rules
init|=
name|project
operator|->
name|values
argument_list|(
name|replace_rule
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|r
init|=
literal|0
init|;
name|r
operator|<
name|replace_rules
operator|.
name|size
argument_list|()
condition|;
operator|++
name|r
control|)
block|{
specifier|const
name|QString
name|match
init|=
name|project
operator|->
name|first
argument_list|(
name|replace_rules
operator|.
name|at
argument_list|(
name|r
argument_list|)
operator|+
literal|".match"
argument_list|)
decl_stmt|,
name|replace
init|=
name|project
operator|->
name|first
argument_list|(
name|replace_rules
operator|.
name|at
argument_list|(
name|r
argument_list|)
operator|+
literal|".replace"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|match
operator|.
name|isEmpty
argument_list|()
comment|/*&& match != replace*/
condition|)
name|ret
operator|+=
literal|" -e \"s,"
operator|+
name|match
operator|+
literal|","
operator|+
name|replace
operator|+
literal|",g\""
expr_stmt|;
block|}
name|ret
operator|+=
literal|" \""
operator|+
name|src_meta
operator|+
literal|"\">\""
operator|+
name|dst_meta
operator|+
literal|"\""
expr_stmt|;
comment|//ret += " || " + install_meta;
block|}
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
name|QString
DECL|function|escapeFilePath
name|UnixMakefileGenerator
operator|::
name|escapeFilePath
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|)
specifier|const
block|{
name|QString
name|ret
init|=
name|path
decl_stmt|;
if|if
condition|(
operator|!
name|ret
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ret
operator|=
name|unescapeFilePath
argument_list|(
name|ret
argument_list|)
operator|.
name|replace
argument_list|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"\\ "
argument_list|)
argument_list|)
expr_stmt|;
name|debug_msg
argument_list|(
literal|2
argument_list|,
literal|"EscapeFilePath: %s -> %s"
argument_list|,
name|path
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|ret
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
