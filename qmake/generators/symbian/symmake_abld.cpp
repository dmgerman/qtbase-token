begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the qmake application of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"symmake_abld.h"
end_include
begin_include
include|#
directive|include
file|"initprojectdeploy_symbian.h"
end_include
begin_include
include|#
directive|include
file|<qstring.h>
end_include
begin_include
include|#
directive|include
file|<qstringlist.h>
end_include
begin_include
include|#
directive|include
file|<qdir.h>
end_include
begin_include
include|#
directive|include
file|<qdatetime.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_comment
comment|// Included from tools/shared
end_comment
begin_include
include|#
directive|include
file|<symbian/epocroot_p.h>
end_include
begin_define
DECL|macro|DO_NOTHING_TARGET
define|#
directive|define
name|DO_NOTHING_TARGET
value|"do_nothing"
end_define
begin_define
DECL|macro|CREATE_TEMPS_TARGET
define|#
directive|define
name|CREATE_TEMPS_TARGET
value|"create_temps"
end_define
begin_define
DECL|macro|EXTENSION_CLEAN
define|#
directive|define
name|EXTENSION_CLEAN
value|"extension_clean"
end_define
begin_define
DECL|macro|PRE_TARGETDEPS_TARGET
define|#
directive|define
name|PRE_TARGETDEPS_TARGET
value|"pre_targetdeps"
end_define
begin_define
DECL|macro|COMPILER_CLEAN_TARGET
define|#
directive|define
name|COMPILER_CLEAN_TARGET
value|"compiler_clean"
end_define
begin_define
DECL|macro|FINALIZE_TARGET
define|#
directive|define
name|FINALIZE_TARGET
value|"finalize"
end_define
begin_define
DECL|macro|GENERATED_SOURCES_TARGET
define|#
directive|define
name|GENERATED_SOURCES_TARGET
value|"generated_sources"
end_define
begin_define
DECL|macro|ALL_SOURCE_DEPS_TARGET
define|#
directive|define
name|ALL_SOURCE_DEPS_TARGET
value|"all_source_deps"
end_define
begin_define
DECL|macro|DEPLOYMENT_TARGET
define|#
directive|define
name|DEPLOYMENT_TARGET
value|"deployment"
end_define
begin_define
DECL|macro|DEPLOYMENT_CLEAN_TARGET
define|#
directive|define
name|DEPLOYMENT_CLEAN_TARGET
value|"deployment_clean"
end_define
begin_define
DECL|macro|WINSCW_DEPLOYMENT_TARGET
define|#
directive|define
name|WINSCW_DEPLOYMENT_TARGET
value|"winscw_deployment"
end_define
begin_define
DECL|macro|WINSCW_DEPLOYMENT_CLEAN_TARGET
define|#
directive|define
name|WINSCW_DEPLOYMENT_CLEAN_TARGET
value|"winscw_deployment_clean"
end_define
begin_define
DECL|macro|STORE_BUILD_TARGET
define|#
directive|define
name|STORE_BUILD_TARGET
value|"store_build"
end_define
begin_constructor
DECL|function|SymbianAbldMakefileGenerator
name|SymbianAbldMakefileGenerator
operator|::
name|SymbianAbldMakefileGenerator
parameter_list|()
member_init_list|:
name|SymbianMakefileGenerator
argument_list|()
block|{ }
end_constructor
begin_destructor
DECL|function|~SymbianAbldMakefileGenerator
name|SymbianAbldMakefileGenerator
operator|::
name|~
name|SymbianAbldMakefileGenerator
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|writeMkFile
name|void
name|SymbianAbldMakefileGenerator
operator|::
name|writeMkFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|wrapperFileName
parameter_list|,
name|bool
name|deploymentOnly
parameter_list|)
block|{
name|QFile
name|ft
argument_list|(
name|gnuMakefileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|ft
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
condition|)
block|{
name|generatedFiles
operator|<<
name|ft
operator|.
name|fileName
argument_list|()
expr_stmt|;
name|QTextStream
name|t
argument_list|(
operator|&
name|ft
argument_list|)
decl_stmt|;
name|t
operator|<<
literal|"# =============================================================================="
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"# Generated by qmake ("
operator|<<
name|qmake_version
argument_list|()
operator|<<
literal|") (Qt "
operator|<<
name|QT_VERSION_STR
operator|<<
literal|") on: "
expr_stmt|;
name|t
operator|<<
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
operator|.
name|toString
argument_list|()
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"# This file is generated by qmake and should not be modified by the"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"# user."
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"#  Name        : "
operator|<<
name|gnuMakefileName
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"#  Part of     : "
operator|<<
name|project
operator|->
name|values
argument_list|(
literal|"TARGET"
argument_list|)
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"#  Description : This file is used to call necessary targets on wrapper makefile"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"#                during normal Symbian build process."
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"#  Version     : "
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"#"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"# =============================================================================="
operator|<<
literal|"\n"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"MAKE = make"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"VISUAL_CFG = RELEASE"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"ifeq \"$(CFG)\" \"UDEB\""
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"VISUAL_CFG = DEBUG"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"endif"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|DO_NOTHING_TARGET
literal|" :"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\t"
operator|<<
literal|"@rem "
name|DO_NOTHING_TARGET
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|QString
name|buildDeps
decl_stmt|;
name|QString
name|cleanDeps
decl_stmt|;
name|QString
name|finalDeps
decl_stmt|;
name|QString
name|cleanDepsWinscw
decl_stmt|;
name|QString
name|finalDepsWinscw
decl_stmt|;
name|QStringList
name|wrapperTargets
decl_stmt|;
if|if
condition|(
name|deploymentOnly
condition|)
block|{
name|buildDeps
operator|.
name|append
argument_list|(
name|STORE_BUILD_TARGET
argument_list|)
expr_stmt|;
name|cleanDeps
operator|.
name|append
argument_list|(
name|DEPLOYMENT_CLEAN_TARGET
argument_list|)
expr_stmt|;
name|cleanDepsWinscw
operator|.
name|append
argument_list|(
name|WINSCW_DEPLOYMENT_CLEAN_TARGET
literal|" "
name|DEPLOYMENT_CLEAN_TARGET
argument_list|)
expr_stmt|;
name|finalDeps
operator|.
name|append
argument_list|(
name|DEPLOYMENT_TARGET
argument_list|)
expr_stmt|;
name|finalDepsWinscw
operator|.
name|append
argument_list|(
name|WINSCW_DEPLOYMENT_TARGET
literal|" "
name|DEPLOYMENT_TARGET
argument_list|)
expr_stmt|;
name|wrapperTargets
operator|<<
name|WINSCW_DEPLOYMENT_TARGET
operator|<<
name|WINSCW_DEPLOYMENT_CLEAN_TARGET
operator|<<
name|DEPLOYMENT_TARGET
operator|<<
name|DEPLOYMENT_CLEAN_TARGET
operator|<<
name|STORE_BUILD_TARGET
expr_stmt|;
block|}
else|else
block|{
name|buildDeps
operator|.
name|append
argument_list|(
name|CREATE_TEMPS_TARGET
literal|" "
name|PRE_TARGETDEPS_TARGET
literal|" "
name|STORE_BUILD_TARGET
argument_list|)
expr_stmt|;
name|cleanDeps
operator|.
name|append
argument_list|(
name|EXTENSION_CLEAN
literal|" "
name|DEPLOYMENT_CLEAN_TARGET
argument_list|)
expr_stmt|;
name|cleanDepsWinscw
operator|.
name|append
argument_list|(
name|EXTENSION_CLEAN
literal|" "
name|WINSCW_DEPLOYMENT_CLEAN_TARGET
literal|" "
name|DEPLOYMENT_CLEAN_TARGET
argument_list|)
expr_stmt|;
name|finalDeps
operator|.
name|append
argument_list|(
name|FINALIZE_TARGET
literal|" "
name|DEPLOYMENT_TARGET
argument_list|)
expr_stmt|;
name|finalDepsWinscw
operator|.
name|append
argument_list|(
name|FINALIZE_TARGET
literal|" "
name|WINSCW_DEPLOYMENT_TARGET
literal|" "
name|DEPLOYMENT_TARGET
argument_list|)
expr_stmt|;
name|wrapperTargets
operator|<<
name|PRE_TARGETDEPS_TARGET
operator|<<
name|CREATE_TEMPS_TARGET
operator|<<
name|EXTENSION_CLEAN
operator|<<
name|FINALIZE_TARGET
operator|<<
name|WINSCW_DEPLOYMENT_CLEAN_TARGET
operator|<<
name|WINSCW_DEPLOYMENT_TARGET
operator|<<
name|DEPLOYMENT_CLEAN_TARGET
operator|<<
name|DEPLOYMENT_TARGET
operator|<<
name|STORE_BUILD_TARGET
expr_stmt|;
block|}
name|t
operator|<<
literal|"MAKMAKE: "
operator|<<
name|buildDeps
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"LIB: "
operator|<<
name|buildDeps
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"BLD: "
operator|<<
name|buildDeps
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"ifeq \"$(PLATFORM)\" \"WINSCW\""
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"CLEAN: "
operator|<<
name|cleanDepsWinscw
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"else"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"CLEAN: "
operator|<<
name|cleanDeps
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"endif"
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"CLEANLIB: "
name|DO_NOTHING_TARGET
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"RESOURCE: "
name|DO_NOTHING_TARGET
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"FREEZE: "
name|DO_NOTHING_TARGET
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"SAVESPACE: "
name|DO_NOTHING_TARGET
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"RELEASABLES: "
name|DO_NOTHING_TARGET
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"ifeq \"$(PLATFORM)\" \"WINSCW\""
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"FINAL: "
operator|<<
name|finalDepsWinscw
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"else"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"FINAL: "
operator|<<
name|finalDeps
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"endif"
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|QString
name|makefile
argument_list|(
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|fileInfo
argument_list|(
name|wrapperFileName
argument_list|)
operator|.
name|canonicalFilePath
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
foreach|foreach
control|(
name|QString
name|target
decl|,
name|wrapperTargets
control|)
block|{
name|t
operator|<<
name|target
operator|<<
literal|" : "
operator|<<
name|makefile
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\t-$(MAKE) -f \""
operator|<<
name|makefile
operator|<<
literal|"\" "
operator|<<
name|target
operator|<<
literal|" QT_SIS_TARGET=$(VISUAL_CFG)-$(PLATFORM)"
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
name|t
operator|<<
name|endl
expr_stmt|;
block|}
comment|// if(ft.open(QIODevice::WriteOnly))
block|}
end_function
begin_function
DECL|function|writeWrapperMakefile
name|void
name|SymbianAbldMakefileGenerator
operator|::
name|writeWrapperMakefile
parameter_list|(
name|QFile
modifier|&
name|wrapperFile
parameter_list|,
name|bool
name|isPrimaryMakefile
parameter_list|)
block|{
name|QStringList
name|allPlatforms
decl_stmt|;
foreach|foreach
control|(
name|QString
name|platform
decl|,
name|project
operator|->
name|values
argument_list|(
literal|"SYMBIAN_PLATFORMS"
argument_list|)
control|)
block|{
name|allPlatforms
operator|<<
name|platform
operator|.
name|toLower
argument_list|()
expr_stmt|;
block|}
name|QStringList
name|debugPlatforms
init|=
name|allPlatforms
decl_stmt|;
name|QStringList
name|releasePlatforms
init|=
name|allPlatforms
decl_stmt|;
name|releasePlatforms
operator|.
name|removeAll
argument_list|(
literal|"winscw"
argument_list|)
expr_stmt|;
comment|// No release for emulator
name|QString
name|testClause
decl_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
name|SYMBIAN_TEST_CONFIG
argument_list|)
condition|)
name|testClause
operator|=
name|QLatin1String
argument_list|(
literal|" test"
argument_list|)
expr_stmt|;
else|else
name|testClause
operator|=
name|QLatin1String
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QTextStream
name|t
argument_list|(
operator|&
name|wrapperFile
argument_list|)
decl_stmt|;
name|MakefileGenerator
operator|::
name|writeHeader
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"MAKEFILE          = "
operator|<<
name|fileInfo
argument_list|(
name|wrapperFile
operator|.
name|fileName
argument_list|()
argument_list|)
operator|.
name|fileName
argument_list|()
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"QMAKE             = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_QMAKE"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"DEL_FILE          = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_DEL_FILE"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"DEL_DIR           = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_DEL_DIR"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"DEL_TREE          = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_DEL_TREE"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"MOVE              = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_MOVE"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"CHK_DIR_EXISTS    = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_CHK_DIR_EXISTS"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"MKDIR             = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_MKDIR"
argument_list|)
operator|<<
name|endl
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN32
name|t
operator|<<
literal|"XCOPY             = xcopy /d /f /h /r /y /i"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"ABLD              = ABLD.BAT"
operator|<<
name|endl
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
name|t
operator|<<
literal|"XCOPY             = cp -R -v"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"ABLD              = abld"
operator|<<
name|endl
expr_stmt|;
else|#
directive|else
name|t
operator|<<
literal|"XCOPY             = cp -R -u -v"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"ABLD              = abld"
operator|<<
name|endl
expr_stmt|;
endif|#
directive|endif
name|t
operator|<<
literal|"DEBUG_PLATFORMS   = "
operator|<<
name|debugPlatforms
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"RELEASE_PLATFORMS = "
operator|<<
name|releasePlatforms
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"MAKE              = make"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"ifeq (WINS,$(findstring WINS, $(PLATFORM)))"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"ZDIR=$(EPOCROOT)"
operator|<<
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
literal|"epoc32/release/$(PLATFORM)/$(CFG)/z"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"else"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"ZDIR=$(EPOCROOT)"
operator|<<
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
literal|"epoc32/data/z"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"endif"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"DEFINES"
operator|<<
literal|'\t'
operator|<<
literal|" = "
operator|<<
name|varGlue
argument_list|(
literal|"PRL_EXPORT_DEFINES"
argument_list|,
literal|"-D"
argument_list|,
literal|" -D"
argument_list|,
literal|" "
argument_list|)
operator|<<
name|varGlue
argument_list|(
literal|"QMAKE_COMPILER_DEFINES"
argument_list|,
literal|"-D"
argument_list|,
literal|"-D"
argument_list|,
literal|" "
argument_list|)
operator|<<
name|varGlue
argument_list|(
literal|"DEFINES"
argument_list|,
literal|"-D"
argument_list|,
literal|" -D"
argument_list|,
literal|""
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"INCPATH"
operator|<<
literal|'\t'
operator|<<
literal|" = "
expr_stmt|;
for|for
control|(
name|QMap
argument_list|<
name|QString
argument_list|,
name|QStringList
argument_list|>
operator|::
name|iterator
name|it
init|=
name|systeminclude
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|systeminclude
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QStringList
name|values
init|=
name|it
operator|.
name|value
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|t
operator|<<
literal|" -I\""
operator|<<
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|<<
literal|"\""
expr_stmt|;
block|}
block|}
name|t
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"first: default"
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|debugPlatforms
operator|.
name|contains
argument_list|(
literal|"winscw"
argument_list|)
condition|)
name|t
operator|<<
literal|"default: debug-winscw"
expr_stmt|;
elseif|else
if|if
condition|(
name|debugPlatforms
operator|.
name|contains
argument_list|(
literal|"armv5"
argument_list|)
condition|)
name|t
operator|<<
literal|"default: debug-armv5"
expr_stmt|;
elseif|else
if|if
condition|(
name|debugPlatforms
operator|.
name|size
argument_list|()
condition|)
name|t
operator|<<
literal|"default: debug-"
operator|<<
name|debugPlatforms
operator|.
name|first
argument_list|()
expr_stmt|;
else|else
name|t
operator|<<
literal|"default: all"
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|isPrimaryMakefile
condition|)
block|{
name|t
operator|<<
literal|"all:"
operator|<<
name|endl
expr_stmt|;
block|}
else|else
block|{
name|t
operator|<<
literal|"all: debug release"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
name|QString
name|qmakeCmd
init|=
literal|"\t$(QMAKE) \""
operator|+
name|project
operator|->
name|projectFile
argument_list|()
operator|+
literal|"\" "
operator|+
name|buildArgs
argument_list|()
decl_stmt|;
name|t
operator|<<
literal|"qmake:"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|qmakeCmd
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|BLD_INF_FILENAME
literal|": "
operator|<<
name|project
operator|->
name|projectFile
argument_list|()
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|qmakeCmd
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"$(ABLD): "
name|BLD_INF_FILENAME
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\tbldmake bldfiles"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
name|QString
name|locFileDep
init|=
name|generateLocFileTarget
argument_list|(
name|t
argument_list|,
name|qmakeCmd
argument_list|)
decl_stmt|;
name|t
operator|<<
literal|"debug: "
operator|<<
name|locFileDep
operator|<<
literal|"$(ABLD)"
operator|<<
name|endl
expr_stmt|;
foreach|foreach
control|(
name|QString
name|item
decl|,
name|debugPlatforms
control|)
block|{
name|t
operator|<<
literal|"\t$(ABLD)"
operator|<<
name|testClause
operator|<<
literal|" build "
operator|<<
name|item
operator|<<
literal|" udeb"
operator|<<
name|endl
expr_stmt|;
block|}
name|t
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"release: "
operator|<<
name|locFileDep
operator|<<
literal|"$(ABLD)"
operator|<<
name|endl
expr_stmt|;
foreach|foreach
control|(
name|QString
name|item
decl|,
name|releasePlatforms
control|)
block|{
name|t
operator|<<
literal|"\t$(ABLD)"
operator|<<
name|testClause
operator|<<
literal|" build "
operator|<<
name|item
operator|<<
literal|" urel"
operator|<<
name|endl
expr_stmt|;
block|}
name|t
operator|<<
name|endl
expr_stmt|;
comment|// For more specific builds, targets are in this form: build-platform, e.g. release-armv5
foreach|foreach
control|(
name|QString
name|item
decl|,
name|debugPlatforms
control|)
block|{
name|t
operator|<<
literal|"debug-"
operator|<<
name|item
operator|<<
literal|": "
operator|<<
name|locFileDep
operator|<<
literal|"$(ABLD)"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\t$(ABLD)"
operator|<<
name|testClause
operator|<<
literal|" build "
operator|<<
name|item
operator|<<
literal|" udeb"
operator|<<
name|endl
expr_stmt|;
block|}
foreach|foreach
control|(
name|QString
name|item
decl|,
name|releasePlatforms
control|)
block|{
name|t
operator|<<
literal|"release-"
operator|<<
name|item
operator|<<
literal|": "
operator|<<
name|locFileDep
operator|<<
literal|"$(ABLD)"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\t$(ABLD)"
operator|<<
name|testClause
operator|<<
literal|" build "
operator|<<
name|item
operator|<<
literal|" urel"
operator|<<
name|endl
expr_stmt|;
block|}
name|t
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"export: $(ABLD)"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\t$(ABLD)"
operator|<<
name|testClause
operator|<<
literal|" export"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"cleanexport: $(ABLD)"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\t$(ABLD)"
operator|<<
name|testClause
operator|<<
literal|" cleanexport"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
block|}
comment|// pre_targetdeps target depends on:
comment|//  - all targets specified in PRE_TARGETDEPS
comment|//  - the GENERATED_SOURCES sources (so that they get generated)
comment|//  - all dependencies of sources targeted for compilation
comment|//    (mainly to ensure that any included UNUSED_SOURCES that need to be generated get generated)
comment|//
comment|// Unfortunately, Symbian build chain doesn't support linking generated objects to target,
comment|// so supporting generating sources is the best we can do. This is enough for mocs.
if|if
condition|(
name|targetType
operator|!=
name|TypeSubdirs
condition|)
block|{
name|writeExtraTargets
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|writeExtraCompilerTargets
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|t
operator|<<
name|CREATE_TEMPS_TARGET
literal|":"
operator|<<
name|endl
expr_stmt|;
comment|// generate command lines like this ...
comment|// -@ if NOT EXIST  ".\somedir"         mkdir ".\somedir"
name|QStringList
name|dirsToClean
decl_stmt|;
name|QString
name|dirExists
init|=
name|var
argument_list|(
literal|"QMAKE_CHK_DIR_EXISTS"
argument_list|)
decl_stmt|;
name|QString
name|mkdir
init|=
name|var
argument_list|(
literal|"QMAKE_MKDIR"
argument_list|)
decl_stmt|;
for|for
control|(
name|QMap
argument_list|<
name|QString
argument_list|,
name|QStringList
argument_list|>
operator|::
name|iterator
name|it
init|=
name|systeminclude
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|systeminclude
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QStringList
name|values
init|=
name|it
operator|.
name|value
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|endsWith
argument_list|(
literal|"/"
name|QT_EXTRA_INCLUDE_DIR
argument_list|)
condition|)
block|{
name|QString
name|fixedValue
argument_list|(
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|dirsToClean
operator|<<
name|fixedValue
expr_stmt|;
name|t
operator|<<
literal|"\t-@ "
operator|<<
name|dirExists
operator|<<
literal|" \""
operator|<<
name|fixedValue
operator|<<
literal|"\" "
operator|<<
operator|(
name|isWindowsShell
argument_list|()
condition|?
literal|""
else|:
literal|"|| "
operator|)
operator|<<
name|mkdir
operator|<<
literal|" \""
operator|<<
name|fixedValue
operator|<<
literal|"\""
operator|<<
name|endl
expr_stmt|;
block|}
block|}
block|}
name|t
operator|<<
name|endl
expr_stmt|;
comment|// Note: EXTENSION_CLEAN will get called many times when doing reallyclean
comment|//       This is why the "2> NUL" gets appended to generated clean targets in makefile.cpp.
name|t
operator|<<
name|EXTENSION_CLEAN
literal|": "
name|COMPILER_CLEAN_TARGET
operator|<<
name|endl
expr_stmt|;
name|generateCleanCommands
argument_list|(
name|t
argument_list|,
name|dirsToClean
argument_list|,
literal|"$(DEL_TREE)"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|generateCleanCommands
argument_list|(
name|t
argument_list|,
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_CLEAN"
argument_list|)
argument_list|,
literal|"$(DEL_FILE)"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|PRE_TARGETDEPS_TARGET
literal|":"
operator|<<
name|MAKEFILE_DEPENDENCY_SEPARATOR
name|GENERATED_SOURCES_TARGET
operator|<<
name|MAKEFILE_DEPENDENCY_SEPARATOR
name|ALL_SOURCE_DEPS_TARGET
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|values
argument_list|(
literal|"PRE_TARGETDEPS"
argument_list|)
operator|.
name|size
argument_list|()
condition|)
name|t
operator|<<
name|MAKEFILE_DEPENDENCY_SEPARATOR
operator|<<
name|project
operator|->
name|values
argument_list|(
literal|"PRE_TARGETDEPS"
argument_list|)
operator|.
name|join
argument_list|(
name|MAKEFILE_DEPENDENCY_SEPARATOR
argument_list|)
expr_stmt|;
name|t
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|GENERATED_SOURCES_TARGET
literal|":"
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|values
argument_list|(
literal|"GENERATED_SOURCES"
argument_list|)
operator|.
name|size
argument_list|()
condition|)
name|t
operator|<<
name|MAKEFILE_DEPENDENCY_SEPARATOR
operator|<<
name|project
operator|->
name|values
argument_list|(
literal|"GENERATED_SOURCES"
argument_list|)
operator|.
name|join
argument_list|(
name|MAKEFILE_DEPENDENCY_SEPARATOR
argument_list|)
expr_stmt|;
name|t
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|ALL_SOURCE_DEPS_TARGET
literal|":"
expr_stmt|;
name|QStringList
name|allDeps
decl_stmt|;
for|for
control|(
name|QMap
argument_list|<
name|QString
argument_list|,
name|QStringList
argument_list|>
operator|::
name|iterator
name|it
init|=
name|sources
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|sources
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QString
name|currentSourcePath
init|=
name|it
operator|.
name|key
argument_list|()
decl_stmt|;
name|QStringList
name|values
init|=
name|it
operator|.
name|value
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
comment|// we need additional check
name|QString
name|sourceFile
init|=
name|currentSourcePath
operator|+
literal|"/"
operator|+
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QStringList
name|deps
init|=
name|findDependencies
argument_list|(
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|sourceFile
argument_list|)
argument_list|)
decl_stmt|;
name|appendIfnotExist
argument_list|(
name|allDeps
argument_list|,
name|deps
argument_list|)
expr_stmt|;
block|}
block|}
foreach|foreach
control|(
name|QString
name|item
decl|,
name|allDeps
control|)
block|{
name|t
operator|<<
name|MAKEFILE_DEPENDENCY_SEPARATOR
operator|<<
name|item
expr_stmt|;
block|}
name|t
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
comment|// Post link operations
name|t
operator|<<
name|FINALIZE_TARGET
literal|":"
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_POST_LINK"
argument_list|)
condition|)
block|{
name|t
operator|<<
literal|'\t'
operator|<<
name|var
argument_list|(
literal|"QMAKE_POST_LINK"
argument_list|)
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
block|}
name|t
operator|<<
name|endl
expr_stmt|;
block|}
else|else
block|{
name|QList
argument_list|<
name|MakefileGenerator
operator|::
name|SubTarget
operator|*
argument_list|>
name|subtargets
init|=
name|findSubDirsSubTargets
argument_list|()
decl_stmt|;
name|writeSubTargets
argument_list|(
name|t
argument_list|,
name|subtargets
argument_list|,
name|SubTargetSkipDefaultVariables
operator||
name|SubTargetSkipDefaultTargets
argument_list|)
expr_stmt|;
name|qDeleteAll
argument_list|(
name|subtargets
argument_list|)
expr_stmt|;
block|}
comment|// Deploymend targets for both emulator and rom deployment
name|writeDeploymentTargets
argument_list|(
name|t
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|writeDeploymentTargets
argument_list|(
name|t
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|generateDistcleanTargets
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"clean: $(ABLD)"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\t-$(ABLD)"
operator|<<
name|testClause
operator|<<
literal|" reallyclean"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\t-bldmake clean"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"clean-debug: $(ABLD)"
operator|<<
name|endl
expr_stmt|;
foreach|foreach
control|(
name|QString
name|item
decl|,
name|debugPlatforms
control|)
block|{
name|t
operator|<<
literal|"\t$(ABLD)"
operator|<<
name|testClause
operator|<<
literal|" reallyclean "
operator|<<
name|item
operator|<<
literal|" udeb"
operator|<<
name|endl
expr_stmt|;
block|}
name|t
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"clean-release: $(ABLD)"
operator|<<
name|endl
expr_stmt|;
foreach|foreach
control|(
name|QString
name|item
decl|,
name|releasePlatforms
control|)
block|{
name|t
operator|<<
literal|"\t$(ABLD)"
operator|<<
name|testClause
operator|<<
literal|" reallyclean "
operator|<<
name|item
operator|<<
literal|" urel"
operator|<<
name|endl
expr_stmt|;
block|}
name|t
operator|<<
name|endl
expr_stmt|;
comment|// For more specific builds, targets are in this form: clean-build-platform, e.g. clean-release-armv5
foreach|foreach
control|(
name|QString
name|item
decl|,
name|debugPlatforms
control|)
block|{
name|t
operator|<<
literal|"clean-debug-"
operator|<<
name|item
operator|<<
literal|": $(ABLD)"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\t$(ABLD)"
operator|<<
name|testClause
operator|<<
literal|" reallyclean "
operator|<<
name|item
operator|<<
literal|" udeb"
operator|<<
name|endl
expr_stmt|;
block|}
foreach|foreach
control|(
name|QString
name|item
decl|,
name|releasePlatforms
control|)
block|{
name|t
operator|<<
literal|"clean-release-"
operator|<<
name|item
operator|<<
literal|": $(ABLD)"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\t$(ABLD)"
operator|<<
name|testClause
operator|<<
literal|" reallyclean "
operator|<<
name|item
operator|<<
literal|" urel"
operator|<<
name|endl
expr_stmt|;
block|}
name|t
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"freeze: $(ABLD)"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\t$(ABLD)"
operator|<<
name|testClause
operator|<<
literal|" freeze"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
comment|// Abld toolchain doesn't differentiate between freezing release or debug
name|t
operator|<<
literal|"freeze-debug: freeze"
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"freeze-release: freeze"
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
comment|// For more specific builds, targets are in this form: freeze-build-platform, e.g. freeze-release-armv5,
comment|// though note that debug and release targets of each platform are identical in symbian-abld.
foreach|foreach
control|(
name|QString
name|item
decl|,
name|debugPlatforms
control|)
block|{
name|t
operator|<<
literal|"freeze-debug-"
operator|<<
name|item
operator|<<
literal|": $(ABLD)"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\t$(ABLD)"
operator|<<
name|testClause
operator|<<
literal|" freeze "
operator|<<
name|item
operator|<<
name|endl
expr_stmt|;
block|}
foreach|foreach
control|(
name|QString
name|item
decl|,
name|releasePlatforms
control|)
block|{
name|t
operator|<<
literal|"freeze-release-"
operator|<<
name|item
operator|<<
literal|": $(ABLD)"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\t$(ABLD)"
operator|<<
name|testClause
operator|<<
literal|" freeze "
operator|<<
name|item
operator|<<
name|endl
expr_stmt|;
block|}
name|t
operator|<<
name|endl
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeBldInfExtensionRulesPart
name|void
name|SymbianAbldMakefileGenerator
operator|::
name|writeBldInfExtensionRulesPart
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|,
specifier|const
name|QString
modifier|&
name|iconTargetFile
parameter_list|)
block|{
comment|// We don't use extensions for anything in abld
name|Q_UNUSED
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|iconTargetFile
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeDeploymentTargets
name|bool
name|SymbianAbldMakefileGenerator
operator|::
name|writeDeploymentTargets
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|,
name|bool
name|isRom
parameter_list|)
block|{
if|if
condition|(
name|isRom
condition|)
name|t
operator|<<
name|DEPLOYMENT_TARGET
literal|":"
operator|<<
name|endl
expr_stmt|;
else|else
name|t
operator|<<
name|WINSCW_DEPLOYMENT_TARGET
literal|":"
operator|<<
name|endl
expr_stmt|;
name|QString
name|remoteTestPath
init|=
name|qt_epocRoot
argument_list|()
operator|+
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|QLatin1String
argument_list|(
name|isRom
condition|?
literal|"epoc32/data/z/private/"
else|:
literal|"epoc32/winscw/c/private/"
argument_list|)
argument_list|)
operator|+
name|privateDirUid
decl_stmt|;
name|DeploymentList
name|depList
decl_stmt|;
name|initProjectDeploySymbian
argument_list|(
name|project
argument_list|,
name|depList
argument_list|,
name|remoteTestPath
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|QLatin1String
argument_list|(
name|isRom
condition|?
name|ROM_DEPLOYMENT_PLATFORM
else|:
name|EMULATOR_DEPLOYMENT_PLATFORM
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|,
name|generatedDirs
argument_list|,
name|generatedFiles
argument_list|)
expr_stmt|;
if|if
condition|(
name|depList
operator|.
name|size
argument_list|()
condition|)
name|t
operator|<<
literal|"\t-echo Deploying changed files..."
operator|<<
name|endl
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|depList
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
ifdef|#
directive|ifdef
name|Q_OS_WIN32
comment|// Xcopy prompts for selecting file or directory if target doesn't exist,
comment|// and doesn't provide switch to force file selection. It does provide dir forcing, though,
comment|// so strip the last part of the destination.
name|t
operator|<<
literal|"\t-$(XCOPY) \""
operator|<<
name|depList
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|from
operator|<<
literal|"\" \""
operator|<<
name|depList
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|to
operator|.
name|left
argument_list|(
name|depList
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|to
operator|.
name|lastIndexOf
argument_list|(
literal|"\\"
argument_list|)
operator|+
literal|1
argument_list|)
operator|<<
literal|"\""
operator|<<
name|endl
expr_stmt|;
else|#
directive|else
name|QString
name|dirExists
init|=
name|var
argument_list|(
literal|"QMAKE_CHK_DIR_EXISTS"
argument_list|)
decl_stmt|;
name|QString
name|mkdir
init|=
name|var
argument_list|(
literal|"QMAKE_MKDIR"
argument_list|)
decl_stmt|;
name|QString
name|dir
init|=
name|QFileInfo
argument_list|(
name|depList
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|to
argument_list|)
operator|.
name|dir
argument_list|()
operator|.
name|path
argument_list|()
decl_stmt|;
name|t
operator|<<
literal|"\t-@ "
operator|<<
name|dirExists
operator|<<
literal|" \""
operator|<<
name|dir
operator|<<
literal|"\" || "
operator|<<
name|mkdir
operator|<<
literal|" \""
operator|<<
name|dir
operator|<<
literal|"\""
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\t-$(XCOPY) \""
operator|<<
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|depList
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|from
argument_list|)
operator|<<
literal|"\" \""
operator|<<
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|depList
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|to
argument_list|)
operator|<<
literal|"\""
operator|<<
name|endl
expr_stmt|;
endif|#
directive|endif
block|}
name|t
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|isRom
condition|)
name|t
operator|<<
name|DEPLOYMENT_CLEAN_TARGET
literal|":"
operator|<<
name|endl
expr_stmt|;
else|else
name|t
operator|<<
name|WINSCW_DEPLOYMENT_CLEAN_TARGET
literal|":"
operator|<<
name|endl
expr_stmt|;
name|QStringList
name|cleanList
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|depList
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|cleanList
operator|.
name|append
argument_list|(
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|depList
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|to
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|generateCleanCommands
argument_list|(
name|t
argument_list|,
name|cleanList
argument_list|,
literal|"$(DEL_FILE)"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
comment|// Note: If deployment creates any directories, they will not get deleted after cleanup.
comment|// To do this in robust fashion could be quite complex.
name|t
operator|<<
name|endl
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|writeBldInfMkFilePart
name|void
name|SymbianAbldMakefileGenerator
operator|::
name|writeBldInfMkFilePart
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|,
name|bool
name|addDeploymentExtension
parameter_list|)
block|{
comment|// Normally emulator deployment gets done via regular makefile, but since subdirs
comment|// do not get that, special deployment only makefile is generated for them if needed.
if|if
condition|(
name|targetType
operator|!=
name|TypeSubdirs
operator|||
name|addDeploymentExtension
condition|)
block|{
name|gnuMakefileName
operator|=
name|QLatin1String
argument_list|(
literal|"Makefile_"
argument_list|)
operator|+
name|fileInfo
argument_list|(
name|mmpFileName
argument_list|)
operator|.
name|completeBaseName
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|".mk"
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"gnumakefile "
operator|<<
name|gnuMakefileName
operator|<<
name|endl
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|appendAbldTempDirs
name|void
name|SymbianAbldMakefileGenerator
operator|::
name|appendAbldTempDirs
parameter_list|(
name|QStringList
modifier|&
name|sysincspaths
parameter_list|,
name|QString
name|includepath
parameter_list|)
block|{
comment|// As a workaround for Symbian toolchain insistence to treat include
comment|// statements as relative to source file rather than the file they appear in,
comment|// we generate extra temporary include directories to make
comment|// relative include paths used in various headers to work properly.
comment|// Note that this is not a fix-all solution; it's just a stop-gap measure
comment|// to make Qt itself build until toolchain can support relative includes in
comment|// a way that Qt expects.
name|QString
name|epocPath
argument_list|(
literal|"epoc32"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|includepath
operator|.
name|contains
argument_list|(
name|epocPath
argument_list|)
condition|)
comment|// No temp dirs for epoc includes
name|appendIfnotExist
argument_list|(
name|sysincspaths
argument_list|,
name|includepath
operator|+
name|QString
argument_list|(
literal|"/"
name|QT_EXTRA_INCLUDE_DIR
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
end_unit
