begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the qmake application of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"initprojectdeploy_symbian.h"
end_include
begin_include
include|#
directive|include
file|<QDirIterator>
end_include
begin_include
include|#
directive|include
file|<project.h>
end_include
begin_include
include|#
directive|include
file|<qxmlstream.h>
end_include
begin_include
include|#
directive|include
file|<qsettings.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_comment
comment|// Included from tools/shared
end_comment
begin_include
include|#
directive|include
file|<symbian/epocroot_p.h>
end_include
begin_define
DECL|macro|SYSBIN_DIR
define|#
directive|define
name|SYSBIN_DIR
value|"/sys/bin"
end_define
begin_define
DECL|macro|HW_Z_DIR
define|#
directive|define
name|HW_Z_DIR
value|"epoc32/data/z"
end_define
begin_define
DECL|macro|SUFFIX_DLL
define|#
directive|define
name|SUFFIX_DLL
value|"dll"
end_define
begin_define
DECL|macro|SUFFIX_EXE
define|#
directive|define
name|SUFFIX_EXE
value|"exe"
end_define
begin_define
DECL|macro|SUFFIX_QTPLUGIN
define|#
directive|define
name|SUFFIX_QTPLUGIN
value|"qtplugin"
end_define
begin_function
DECL|function|fixPathToEpocOS
specifier|static
name|QString
name|fixPathToEpocOS
parameter_list|(
specifier|const
name|QString
modifier|&
name|src
parameter_list|)
block|{
name|QString
name|ret
init|=
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|src
argument_list|)
decl_stmt|;
name|bool
name|pathHasDriveLetter
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|ret
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
name|pathHasDriveLetter
operator|=
operator|(
name|ret
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
operator|)
expr_stmt|;
return|return
name|pathHasDriveLetter
condition|?
name|ret
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'\\'
argument_list|)
else|:
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|ret
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|isPlugin
specifier|static
name|bool
name|isPlugin
parameter_list|(
specifier|const
name|QFileInfo
modifier|&
name|info
parameter_list|,
specifier|const
name|QString
modifier|&
name|devicePath
parameter_list|)
block|{
comment|// Libraries are plugins if deployment path is something else than
comment|// SYSBIN_DIR with or without drive letter
if|if
condition|(
literal|0
operator|==
name|info
operator|.
name|suffix
argument_list|()
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
name|SUFFIX_DLL
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|&&
operator|(
name|devicePath
operator|.
name|size
argument_list|()
operator|<
literal|8
operator|||
operator|(
literal|0
operator|!=
name|devicePath
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
name|SYSBIN_DIR
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|&&
literal|0
operator|!=
name|devicePath
operator|.
name|mid
argument_list|(
literal|1
argument_list|)
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
literal|":"
name|SYSBIN_DIR
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|&&
literal|0
operator|!=
name|devicePath
operator|.
name|compare
argument_list|(
name|qt_epocRoot
argument_list|()
operator|+
name|QLatin1String
argument_list|(
argument|HW_Z_DIR SYSBIN_DIR
argument_list|)
argument_list|)
operator|)
operator|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
end_function
begin_function
DECL|function|isBinary
specifier|static
name|bool
name|isBinary
parameter_list|(
specifier|const
name|QFileInfo
modifier|&
name|info
parameter_list|)
block|{
if|if
condition|(
literal|0
operator|==
name|info
operator|.
name|suffix
argument_list|()
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
name|SUFFIX_DLL
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|||
literal|0
operator|==
name|info
operator|.
name|suffix
argument_list|()
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
name|SUFFIX_EXE
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
block|{
return|return
literal|true
return|;
block|}
else|else
block|{
return|return
literal|false
return|;
block|}
block|}
end_function
begin_function
DECL|function|createPluginStub
specifier|static
name|void
name|createPluginStub
parameter_list|(
specifier|const
name|QFileInfo
modifier|&
name|info
parameter_list|,
specifier|const
name|QString
modifier|&
name|devicePath
parameter_list|,
name|DeploymentList
modifier|&
name|deploymentList
parameter_list|,
name|QStringList
modifier|&
name|generatedDirs
parameter_list|,
name|QStringList
modifier|&
name|generatedFiles
parameter_list|)
block|{
name|QString
name|pluginStubDir
init|=
name|Option
operator|::
name|output_dir
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|QLatin1String
argument_list|(
name|PLUGIN_STUB_DIR
argument_list|)
decl_stmt|;
name|QDir
argument_list|()
operator|.
name|mkpath
argument_list|(
name|pluginStubDir
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|generatedDirs
operator|.
name|contains
argument_list|(
name|pluginStubDir
argument_list|)
condition|)
name|generatedDirs
operator|<<
name|pluginStubDir
expr_stmt|;
comment|// Plugin stubs must have different name from the actual plugins, because
comment|// the toolchain for creating ROM images cannot handle non-binary .dll files properly.
name|QFile
name|stubFile
argument_list|(
name|pluginStubDir
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|info
operator|.
name|completeBaseName
argument_list|()
operator|+
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
operator|+
name|QLatin1String
argument_list|(
name|SUFFIX_QTPLUGIN
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|stubFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|generatedFiles
operator|.
name|contains
argument_list|(
name|stubFile
operator|.
name|fileName
argument_list|()
argument_list|)
condition|)
name|generatedFiles
operator|<<
name|stubFile
operator|.
name|fileName
argument_list|()
expr_stmt|;
name|QTextStream
name|t
argument_list|(
operator|&
name|stubFile
argument_list|)
decl_stmt|;
comment|// Add note to stub so that people will not wonder what it is.
comment|// Creation date is added to make new stub to deploy always to
comment|// force plugin cache miss when loading plugins.
name|t
operator|<<
literal|"This file is a Qt plugin stub file. The real Qt plugin is located in "
name|SYSBIN_DIR
literal|". Created:"
operator|<<
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
operator|.
name|toString
argument_list|(
name|Qt
operator|::
name|ISODate
argument_list|)
operator|<<
literal|"\n"
expr_stmt|;
block|}
else|else
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"cannot deploy \"%s\" because of plugin stub file creation failed\n"
argument_list|,
name|info
operator|.
name|fileName
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QFileInfo
name|stubInfo
argument_list|(
name|stubFile
argument_list|)
decl_stmt|;
name|deploymentList
operator|.
name|append
argument_list|(
name|CopyItem
argument_list|(
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|stubInfo
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
argument_list|,
name|fixPathToEpocOS
argument_list|(
name|devicePath
operator|+
literal|"/"
operator|+
name|stubInfo
operator|.
name|fileName
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|generate_uid
name|QString
name|generate_uid
parameter_list|(
specifier|const
name|QString
modifier|&
name|target
parameter_list|)
block|{
specifier|static
name|QMap
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|targetToUid
decl_stmt|;
name|QString
name|tmp
init|=
name|targetToUid
index|[
name|target
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|tmp
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
return|return
name|tmp
return|;
block|}
name|quint32
name|hash
init|=
literal|5381
decl_stmt|;
name|int
name|c
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|target
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|c
operator|=
name|target
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toAscii
argument_list|()
expr_stmt|;
name|hash
operator|^=
name|c
operator|+
operator|(
operator|(
name|c
operator|-
name|i
operator|)
operator|<<
name|i
operator|%
literal|20
operator|)
operator|+
operator|(
operator|(
name|c
operator|+
name|i
operator|)
operator|<<
operator|(
name|i
operator|+
literal|5
operator|)
operator|%
literal|20
operator|)
operator|+
operator|(
operator|(
name|c
operator|-
literal|2
operator|*
name|i
operator|)
operator|<<
operator|(
name|i
operator|+
literal|10
operator|)
operator|%
literal|20
operator|)
operator|+
operator|(
operator|(
name|c
operator|+
literal|2
operator|*
name|i
operator|)
operator|<<
operator|(
name|i
operator|+
literal|15
operator|)
operator|%
literal|20
operator|)
expr_stmt|;
block|}
name|tmp
operator|.
name|setNum
argument_list|(
name|hash
argument_list|,
literal|16
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|tmp
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
literal|8
condition|;
operator|++
name|i
control|)
name|tmp
operator|.
name|prepend
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
name|targetToUid
index|[
name|target
index|]
operator|=
name|tmp
expr_stmt|;
return|return
name|tmp
return|;
block|}
end_function
begin_comment
comment|// UIDs starting with 0xE are test UIDs in symbian
end_comment
begin_function
DECL|function|generate_test_uid
name|QString
name|generate_test_uid
parameter_list|(
specifier|const
name|QString
modifier|&
name|target
parameter_list|)
block|{
name|QString
name|tmp
init|=
name|generate_uid
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|tmp
operator|.
name|replace
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
literal|"E"
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|prepend
argument_list|(
literal|"0x"
argument_list|)
expr_stmt|;
return|return
name|tmp
return|;
block|}
end_function
begin_function
DECL|function|initProjectDeploySymbian
name|void
name|initProjectDeploySymbian
parameter_list|(
name|QMakeProject
modifier|*
name|project
parameter_list|,
name|DeploymentList
modifier|&
name|deploymentList
parameter_list|,
specifier|const
name|QString
modifier|&
name|testPath
parameter_list|,
name|bool
name|deployBinaries
parameter_list|,
name|bool
name|epocBuild
parameter_list|,
specifier|const
name|QString
modifier|&
name|platform
parameter_list|,
specifier|const
name|QString
modifier|&
name|build
parameter_list|,
name|QStringList
modifier|&
name|generatedDirs
parameter_list|,
name|QStringList
modifier|&
name|generatedFiles
parameter_list|)
block|{
name|QString
name|targetPath
init|=
name|testPath
decl_stmt|;
if|if
condition|(
name|targetPath
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
operator|||
name|targetPath
operator|.
name|endsWith
argument_list|(
literal|"\\"
argument_list|)
condition|)
name|targetPath
operator|=
name|targetPath
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
name|targetPath
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|bool
name|targetPathHasDriveLetter
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|targetPath
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|targetPathHasDriveLetter
operator|=
name|targetPath
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
block|}
name|QString
name|deploymentDrive
decl_stmt|;
if|if
condition|(
literal|0
operator|==
name|platform
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
name|ROM_DEPLOYMENT_PLATFORM
argument_list|)
argument_list|)
condition|)
block|{
name|deploymentDrive
operator|=
name|qt_epocRoot
argument_list|()
operator|+
name|HW_Z_DIR
expr_stmt|;
block|}
else|else
block|{
name|deploymentDrive
operator|=
name|targetPathHasDriveLetter
condition|?
name|targetPath
operator|.
name|left
argument_list|(
literal|2
argument_list|)
else|:
name|QLatin1String
argument_list|(
literal|"c:"
argument_list|)
expr_stmt|;
block|}
foreach|foreach
control|(
name|QString
name|item
decl|,
name|project
operator|->
name|values
argument_list|(
literal|"DEPLOYMENT"
argument_list|)
control|)
block|{
name|QString
name|devicePath
init|=
name|project
operator|->
name|first
argument_list|(
name|item
operator|+
literal|".path"
argument_list|)
decl_stmt|;
name|QString
name|devicePathWithoutDrive
init|=
name|devicePath
decl_stmt|;
name|bool
name|devicePathHasDriveLetter
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|devicePath
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|devicePathHasDriveLetter
operator|=
name|devicePath
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
expr_stmt|;
block|}
comment|// Sometimes devicePath can contain disk but APP_RESOURCE_DIR does not,
comment|// so remove the drive letter for comparison purposes.
if|if
condition|(
name|devicePathHasDriveLetter
condition|)
block|{
name|devicePathWithoutDrive
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|deployBinaries
operator|&&
literal|0
operator|!=
name|platform
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
name|ROM_DEPLOYMENT_PLATFORM
argument_list|)
argument_list|)
operator|&&
operator|!
name|devicePathWithoutDrive
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
literal|0
operator|==
name|devicePathWithoutDrive
operator|.
name|compare
argument_list|(
name|project
operator|->
name|values
argument_list|(
literal|"APP_RESOURCE_DIR"
argument_list|)
operator|.
name|join
argument_list|(
literal|""
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|||
literal|0
operator|==
name|devicePathWithoutDrive
operator|.
name|compare
argument_list|(
name|project
operator|->
name|values
argument_list|(
literal|"REG_RESOURCE_IMPORT_DIR"
argument_list|)
operator|.
name|join
argument_list|(
literal|""
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|)
condition|)
block|{
comment|// Do not deploy resources in emulator builds, as that seems to cause conflicts
comment|// If there is ever a real need to deploy pre-built resources for emulator,
comment|// BLD_INF_RULES.prj_exports can be used as a workaround.
continue|continue;
block|}
if|if
condition|(
name|devicePath
operator|.
name|isEmpty
argument_list|()
operator|||
name|devicePath
operator|==
name|QLatin1String
argument_list|(
literal|"."
argument_list|)
condition|)
block|{
name|devicePath
operator|=
name|targetPath
expr_stmt|;
block|}
comment|// check if item.path is relative (! either / or \)
elseif|else
if|if
condition|(
operator|!
operator|(
name|devicePath
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|||
name|devicePath
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'\\'
argument_list|)
operator|||
name|devicePathHasDriveLetter
operator|)
condition|)
block|{
comment|// Create output path
name|devicePath
operator|=
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|QDir
operator|::
name|cleanPath
argument_list|(
name|targetPath
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|devicePath
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
literal|0
operator|==
name|platform
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
name|EMULATOR_DEPLOYMENT_PLATFORM
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|devicePathHasDriveLetter
condition|)
block|{
if|if
condition|(
name|devicePath
operator|.
name|startsWith
argument_list|(
literal|"!"
argument_list|)
condition|)
name|devicePath
operator|=
name|qt_epocRoot
argument_list|()
operator|+
literal|"epoc32/winscw/c"
operator|+
name|devicePath
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
else|else
name|devicePath
operator|=
name|qt_epocRoot
argument_list|()
operator|+
literal|"epoc32/winscw/"
operator|+
name|devicePath
operator|.
name|remove
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|devicePath
operator|=
name|qt_epocRoot
argument_list|()
operator|+
literal|"epoc32/winscw/c"
operator|+
name|devicePath
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|devicePathHasDriveLetter
operator|&&
literal|0
operator|==
name|platform
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
name|ROM_DEPLOYMENT_PLATFORM
argument_list|)
argument_list|)
condition|)
block|{
name|devicePath
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
literal|0
operator|==
name|platform
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
name|ROM_DEPLOYMENT_PLATFORM
argument_list|)
argument_list|)
operator|||
operator|(
operator|!
name|devicePathHasDriveLetter
operator|&&
name|targetPathHasDriveLetter
operator|)
condition|)
block|{
name|devicePath
operator|=
name|deploymentDrive
operator|+
name|devicePath
expr_stmt|;
block|}
block|}
block|}
name|devicePath
operator|.
name|replace
argument_list|(
name|QLatin1String
argument_list|(
literal|"\\"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|deployBinaries
operator|&&
literal|0
operator|==
name|devicePath
operator|.
name|right
argument_list|(
literal|8
argument_list|)
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
name|SYSBIN_DIR
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|&&
literal|0
operator|!=
name|platform
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
name|ROM_DEPLOYMENT_PLATFORM
argument_list|)
argument_list|)
condition|)
block|{
comment|// Skip deploying to SYSBIN_DIR for anything but binary deployments
comment|// Note: Deploying pre-built binaries also follow this rule, so emulator builds
comment|// will not get those deployed. Since there is no way to differentiate currently
comment|// between pre-built binaries for emulator and HW anyway, this is not a major issue.
continue|continue;
block|}
name|QStringList
name|flags
init|=
name|project
operator|->
name|values
argument_list|(
name|item
operator|+
literal|".flags"
argument_list|)
decl_stmt|;
comment|// ### Qt 5: remove .sources, inconsistent with INSTALLS
foreach|foreach
control|(
name|QString
name|source
decl|,
name|project
operator|->
name|values
argument_list|(
name|item
operator|+
literal|".sources"
argument_list|)
operator|+
name|project
operator|->
name|values
argument_list|(
name|item
operator|+
literal|".files"
argument_list|)
control|)
block|{
name|source
operator|=
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|source
argument_list|)
expr_stmt|;
name|QString
name|nameFilter
decl_stmt|;
name|QFileInfo
name|info
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|QString
name|searchPath
decl_stmt|;
name|bool
name|dirSearch
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|info
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|nameFilter
operator|=
name|QLatin1String
argument_list|(
literal|"*"
argument_list|)
expr_stmt|;
name|searchPath
operator|=
name|info
operator|.
name|absoluteFilePath
argument_list|()
expr_stmt|;
name|dirSearch
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|info
operator|.
name|exists
argument_list|()
operator|||
name|source
operator|.
name|indexOf
argument_list|(
literal|'*'
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|nameFilter
operator|=
name|source
operator|.
name|split
argument_list|(
name|QDir
operator|::
name|separator
argument_list|()
argument_list|)
operator|.
name|last
argument_list|()
expr_stmt|;
name|searchPath
operator|=
name|info
operator|.
name|absolutePath
argument_list|()
expr_stmt|;
block|}
else|else
block|{
comment|// Entry was not found. That is ok if it is a binary, since those do not necessarily yet exist.
comment|// Dlls need to be processed even when not deploying binaries for the stubs
if|if
condition|(
name|isBinary
argument_list|(
name|info
argument_list|)
condition|)
block|{
if|if
condition|(
name|deployBinaries
condition|)
block|{
comment|// Executables and libraries are deployed to \sys\bin
name|QFileInfo
name|targetPath
decl_stmt|;
if|if
condition|(
name|epocBuild
condition|)
name|targetPath
operator|.
name|setFile
argument_list|(
name|qt_epocRoot
argument_list|()
operator|+
literal|"epoc32/release/"
operator|+
name|platform
operator|+
literal|"/"
operator|+
name|build
operator|+
literal|"/"
argument_list|)
expr_stmt|;
else|else
name|targetPath
operator|.
name|setFile
argument_list|(
name|info
operator|.
name|path
argument_list|()
operator|+
name|QDir
operator|::
name|separator
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|devicePathHasDriveLetter
condition|)
block|{
name|deploymentList
operator|.
name|append
argument_list|(
name|CopyItem
argument_list|(
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|targetPath
operator|.
name|absolutePath
argument_list|()
operator|+
literal|"/"
operator|+
name|info
operator|.
name|fileName
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|,
name|fixPathToEpocOS
argument_list|(
name|devicePath
operator|.
name|left
argument_list|(
literal|2
argument_list|)
operator|+
name|QLatin1String
argument_list|(
name|SYSBIN_DIR
literal|"/"
argument_list|)
operator|+
name|info
operator|.
name|fileName
argument_list|()
argument_list|)
argument_list|,
name|flags
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|deploymentList
operator|.
name|append
argument_list|(
name|CopyItem
argument_list|(
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|targetPath
operator|.
name|absolutePath
argument_list|()
operator|+
literal|"/"
operator|+
name|info
operator|.
name|fileName
argument_list|()
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
argument_list|,
name|fixPathToEpocOS
argument_list|(
name|deploymentDrive
operator|+
name|QLatin1String
argument_list|(
literal|"/"
name|SYSBIN_DIR
literal|"/"
argument_list|)
operator|+
name|info
operator|.
name|fileName
argument_list|()
argument_list|)
argument_list|,
name|flags
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|isPlugin
argument_list|(
name|info
argument_list|,
name|devicePath
argument_list|)
condition|)
block|{
name|createPluginStub
argument_list|(
name|info
argument_list|,
name|devicePath
argument_list|,
name|deploymentList
argument_list|,
name|generatedDirs
argument_list|,
name|generatedFiles
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
else|else
block|{
comment|// Generate deployment even if file doesn't exist, as this may be the case
comment|// when generating .pkg files.
name|deploymentList
operator|.
name|append
argument_list|(
name|CopyItem
argument_list|(
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|info
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
argument_list|,
name|fixPathToEpocOS
argument_list|(
name|devicePath
operator|+
literal|"/"
operator|+
name|info
operator|.
name|fileName
argument_list|()
argument_list|)
argument_list|,
name|flags
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
block|}
name|int
name|pathSize
init|=
name|info
operator|.
name|absolutePath
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|QDirIterator
name|iterator
argument_list|(
name|searchPath
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|nameFilter
argument_list|,
name|QDir
operator|::
name|Files
operator||
name|QDir
operator|::
name|NoDotAndDotDot
operator||
name|QDir
operator|::
name|NoSymLinks
argument_list|,
name|dirSearch
condition|?
name|QDirIterator
operator|::
name|Subdirectories
else|:
name|QDirIterator
operator|::
name|NoIteratorFlags
argument_list|)
decl_stmt|;
while|while
condition|(
name|iterator
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|iterator
operator|.
name|next
argument_list|()
expr_stmt|;
name|QFileInfo
name|iteratorInfo
argument_list|(
name|iterator
operator|.
name|filePath
argument_list|()
argument_list|)
decl_stmt|;
name|QString
name|absoluteItemPath
init|=
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|iteratorInfo
operator|.
name|absolutePath
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|diffSize
init|=
name|absoluteItemPath
operator|.
name|size
argument_list|()
operator|-
name|pathSize
decl_stmt|;
if|if
condition|(
operator|!
name|iteratorInfo
operator|.
name|isDir
argument_list|()
condition|)
block|{
if|if
condition|(
name|isPlugin
argument_list|(
name|iterator
operator|.
name|fileInfo
argument_list|()
argument_list|,
name|devicePath
argument_list|)
condition|)
block|{
comment|// This deploys pre-built plugins. Other pre-built binaries will deploy normally,
comment|// as they have SYSBIN_DIR target path.
if|if
condition|(
name|deployBinaries
operator|||
operator|(
literal|0
operator|==
name|platform
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
name|ROM_DEPLOYMENT_PLATFORM
argument_list|)
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
name|devicePathHasDriveLetter
condition|)
block|{
name|deploymentList
operator|.
name|append
argument_list|(
name|CopyItem
argument_list|(
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|absoluteItemPath
operator|+
literal|"/"
operator|+
name|iterator
operator|.
name|fileName
argument_list|()
argument_list|)
argument_list|,
name|fixPathToEpocOS
argument_list|(
name|devicePath
operator|.
name|left
argument_list|(
literal|2
argument_list|)
operator|+
name|QLatin1String
argument_list|(
name|SYSBIN_DIR
literal|"/"
argument_list|)
operator|+
name|iterator
operator|.
name|fileName
argument_list|()
argument_list|)
argument_list|,
name|flags
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|deploymentList
operator|.
name|append
argument_list|(
name|CopyItem
argument_list|(
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|absoluteItemPath
operator|+
literal|"/"
operator|+
name|iterator
operator|.
name|fileName
argument_list|()
argument_list|)
argument_list|,
name|fixPathToEpocOS
argument_list|(
name|deploymentDrive
operator|+
name|QLatin1String
argument_list|(
literal|"/"
name|SYSBIN_DIR
literal|"/"
argument_list|)
operator|+
name|iterator
operator|.
name|fileName
argument_list|()
argument_list|)
argument_list|,
name|flags
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|createPluginStub
argument_list|(
name|info
argument_list|,
name|devicePath
operator|+
literal|"/"
operator|+
name|absoluteItemPath
operator|.
name|right
argument_list|(
name|diffSize
argument_list|)
argument_list|,
name|deploymentList
argument_list|,
name|generatedDirs
argument_list|,
name|generatedFiles
argument_list|)
expr_stmt|;
continue|continue;
block|}
else|else
block|{
name|deploymentList
operator|.
name|append
argument_list|(
name|CopyItem
argument_list|(
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|absoluteItemPath
operator|+
literal|"/"
operator|+
name|iterator
operator|.
name|fileName
argument_list|()
argument_list|)
argument_list|,
name|fixPathToEpocOS
argument_list|(
name|devicePath
operator|+
literal|"/"
operator|+
name|absoluteItemPath
operator|.
name|right
argument_list|(
name|diffSize
argument_list|)
operator|+
literal|"/"
operator|+
name|iterator
operator|.
name|fileName
argument_list|()
argument_list|)
argument_list|,
name|flags
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|// Remove deployments that do not actually do anything
if|if
condition|(
literal|0
operator|==
name|platform
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
name|EMULATOR_DEPLOYMENT_PLATFORM
argument_list|)
argument_list|)
operator|||
literal|0
operator|==
name|platform
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
name|ROM_DEPLOYMENT_PLATFORM
argument_list|)
argument_list|)
condition|)
block|{
name|QMutableListIterator
argument_list|<
name|CopyItem
argument_list|>
name|i
argument_list|(
name|deploymentList
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|CopyItem
modifier|&
name|item
init|=
name|i
operator|.
name|next
argument_list|()
decl_stmt|;
name|QFileInfo
name|fromItem
argument_list|(
name|item
operator|.
name|from
argument_list|)
decl_stmt|;
name|QFileInfo
name|toItem
argument_list|(
name|item
operator|.
name|to
argument_list|)
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
if|if
condition|(
literal|0
operator|==
name|fromItem
operator|.
name|absoluteFilePath
argument_list|()
operator|.
name|compare
argument_list|(
name|toItem
operator|.
name|absoluteFilePath
argument_list|()
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
else|#
directive|else
if|if
condition|(
literal|0
operator|==
name|fromItem
operator|.
name|absoluteFilePath
argument_list|()
operator|.
name|compare
argument_list|(
name|toItem
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
condition|)
endif|#
directive|endif
name|i
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function
end_unit
