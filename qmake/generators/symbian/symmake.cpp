begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the qmake application of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"symmake.h"
end_include
begin_include
include|#
directive|include
file|<qstring.h>
end_include
begin_include
include|#
directive|include
file|<qhash.h>
end_include
begin_include
include|#
directive|include
file|<qstringlist.h>
end_include
begin_include
include|#
directive|include
file|<qdir.h>
end_include
begin_include
include|#
directive|include
file|<qdatetime.h>
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_comment
comment|// Included from tools/shared
end_comment
begin_include
include|#
directive|include
file|<symbian/epocroot_p.h>
end_include
begin_define
DECL|macro|RESOURCE_DIRECTORY_MMP
define|#
directive|define
name|RESOURCE_DIRECTORY_MMP
value|"/resource/apps"
end_define
begin_define
DECL|macro|REGISTRATION_RESOURCE_DIRECTORY_HW
define|#
directive|define
name|REGISTRATION_RESOURCE_DIRECTORY_HW
value|"/private/10003a3f/import/apps"
end_define
begin_define
DECL|macro|PLUGIN_COMMON_DEF_FILE_FOR_MMP
define|#
directive|define
name|PLUGIN_COMMON_DEF_FILE_FOR_MMP
value|"./plugin_common.def"
end_define
begin_define
DECL|macro|BLD_INF_FILENAME_LEN
define|#
directive|define
name|BLD_INF_FILENAME_LEN
value|(sizeof(BLD_INF_FILENAME) - 1)
end_define
begin_define
DECL|macro|BLD_INF_RULES_BASE
define|#
directive|define
name|BLD_INF_RULES_BASE
value|"BLD_INF_RULES."
end_define
begin_define
DECL|macro|BLD_INF_TAG_PLATFORMS
define|#
directive|define
name|BLD_INF_TAG_PLATFORMS
value|"prj_platforms"
end_define
begin_define
DECL|macro|BLD_INF_TAG_MMPFILES
define|#
directive|define
name|BLD_INF_TAG_MMPFILES
value|"prj_mmpfiles"
end_define
begin_define
DECL|macro|BLD_INF_TAG_TESTMMPFILES
define|#
directive|define
name|BLD_INF_TAG_TESTMMPFILES
value|"prj_testmmpfiles"
end_define
begin_define
DECL|macro|BLD_INF_TAG_EXTENSIONS
define|#
directive|define
name|BLD_INF_TAG_EXTENSIONS
value|"prj_extensions"
end_define
begin_define
DECL|macro|BLD_INF_TAG_TESTEXTENSIONS
define|#
directive|define
name|BLD_INF_TAG_TESTEXTENSIONS
value|"prj_testextensions"
end_define
begin_define
DECL|macro|MMP_TARGET
define|#
directive|define
name|MMP_TARGET
value|"TARGET"
end_define
begin_define
DECL|macro|MMP_TARGETTYPE
define|#
directive|define
name|MMP_TARGETTYPE
value|"TARGETTYPE"
end_define
begin_define
DECL|macro|MMP_SECUREID
define|#
directive|define
name|MMP_SECUREID
value|"SECUREID"
end_define
begin_define
DECL|macro|MMP_OPTION
define|#
directive|define
name|MMP_OPTION
value|"OPTION"
end_define
begin_define
DECL|macro|MMP_LINKEROPTION
define|#
directive|define
name|MMP_LINKEROPTION
value|"LINKEROPTION"
end_define
begin_define
DECL|macro|MMP_CAPABILITY
define|#
directive|define
name|MMP_CAPABILITY
value|"CAPABILITY"
end_define
begin_define
DECL|macro|MMP_EPOCALLOWDLLDATA
define|#
directive|define
name|MMP_EPOCALLOWDLLDATA
value|"EPOCALLOWDLLDATA"
end_define
begin_define
DECL|macro|MMP_EPOCHEAPSIZE
define|#
directive|define
name|MMP_EPOCHEAPSIZE
value|"EPOCHEAPSIZE"
end_define
begin_define
DECL|macro|MMP_EPOCSTACKSIZE
define|#
directive|define
name|MMP_EPOCSTACKSIZE
value|"EPOCSTACKSIZE"
end_define
begin_define
DECL|macro|MMP_UID
define|#
directive|define
name|MMP_UID
value|"UID"
end_define
begin_define
DECL|macro|MMP_VENDORID
define|#
directive|define
name|MMP_VENDORID
value|"VENDORID"
end_define
begin_define
DECL|macro|MMP_VERSION
define|#
directive|define
name|MMP_VERSION
value|"VERSION"
end_define
begin_define
DECL|macro|MMP_START_RESOURCE
define|#
directive|define
name|MMP_START_RESOURCE
value|"START RESOURCE"
end_define
begin_define
DECL|macro|MMP_END_RESOURCE
define|#
directive|define
name|MMP_END_RESOURCE
value|"END"
end_define
begin_define
DECL|macro|VAR_CXXFLAGS
define|#
directive|define
name|VAR_CXXFLAGS
value|"QMAKE_CXXFLAGS"
end_define
begin_define
DECL|macro|VAR_CFLAGS
define|#
directive|define
name|VAR_CFLAGS
value|"QMAKE_CFLAGS"
end_define
begin_define
DECL|macro|VAR_LFLAGS
define|#
directive|define
name|VAR_LFLAGS
value|"QMAKE_LFLAGS"
end_define
begin_define
DECL|macro|DEFINE_REPLACE_REGEXP
define|#
directive|define
name|DEFINE_REPLACE_REGEXP
value|"[^A-Z0-9_]"
end_define
begin_function
DECL|function|fixPathForMmp
name|QString
name|SymbianMakefileGenerator
operator|::
name|fixPathForMmp
parameter_list|(
specifier|const
name|QString
modifier|&
name|origPath
parameter_list|,
specifier|const
name|QDir
modifier|&
name|parentDir
parameter_list|)
block|{
specifier|static
name|QString
name|epocRootStr
decl_stmt|;
if|if
condition|(
name|epocRootStr
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|epocRootStr
operator|=
name|qt_epocRoot
argument_list|()
expr_stmt|;
name|QFileInfo
name|efi
argument_list|(
name|epocRootStr
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|efi
operator|.
name|exists
argument_list|()
operator|||
name|epocRootStr
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Unable to resolve epocRoot '%s' to real dir on current drive, defaulting to '/' for mmp paths\n"
argument_list|,
name|qPrintable
argument_list|(
name|qt_epocRoot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|epocRootStr
operator|=
literal|"/"
expr_stmt|;
block|}
else|else
block|{
name|epocRootStr
operator|=
name|efi
operator|.
name|absoluteFilePath
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|epocRootStr
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
name|epocRootStr
operator|+=
literal|"/"
expr_stmt|;
name|epocRootStr
operator|+=
literal|"epoc32/"
expr_stmt|;
block|}
name|QString
name|resultPath
init|=
name|origPath
decl_stmt|;
comment|// Make it relative, unless it starts with "%epocroot%/epoc32/"
if|if
condition|(
name|resultPath
operator|.
name|startsWith
argument_list|(
name|epocRootStr
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
block|{
name|resultPath
operator|.
name|replace
argument_list|(
name|epocRootStr
argument_list|,
literal|"/epoc32/"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|resultPath
operator|=
name|parentDir
operator|.
name|relativeFilePath
argument_list|(
name|resultPath
argument_list|)
expr_stmt|;
block|}
name|resultPath
operator|=
name|QDir
operator|::
name|cleanPath
argument_list|(
name|resultPath
argument_list|)
expr_stmt|;
if|if
condition|(
name|resultPath
operator|.
name|isEmpty
argument_list|()
condition|)
name|resultPath
operator|=
literal|"."
expr_stmt|;
return|return
name|resultPath
return|;
block|}
end_function
begin_function
DECL|function|absolutizePath
name|QString
name|SymbianMakefileGenerator
operator|::
name|absolutizePath
parameter_list|(
specifier|const
name|QString
modifier|&
name|origPath
parameter_list|)
block|{
comment|// Prepend epocroot to any paths beginning with "/epoc32/"
name|QString
name|resultPath
init|=
name|QDir
operator|::
name|fromNativeSeparators
argument_list|(
name|origPath
argument_list|)
decl_stmt|;
if|if
condition|(
name|resultPath
operator|.
name|startsWith
argument_list|(
literal|"/epoc32/"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
name|resultPath
operator|=
name|QDir
operator|::
name|fromNativeSeparators
argument_list|(
name|qt_epocRoot
argument_list|()
argument_list|)
operator|+
name|resultPath
operator|.
name|mid
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QFileInfo
name|fi
argument_list|(
name|fileInfo
argument_list|(
name|resultPath
argument_list|)
argument_list|)
decl_stmt|;
comment|// Since origPath can be something given in HEADERS, we need to check if we are dealing
comment|// with a file or a directory. In case the origPath doesn't yet exist, isFile() returns
comment|// false and we default to assuming it is a dir.
if|if
condition|(
name|fi
operator|.
name|isFile
argument_list|()
condition|)
block|{
name|resultPath
operator|=
name|fi
operator|.
name|absolutePath
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|resultPath
operator|=
name|fi
operator|.
name|absoluteFilePath
argument_list|()
expr_stmt|;
block|}
name|resultPath
operator|=
name|QDir
operator|::
name|cleanPath
argument_list|(
name|resultPath
argument_list|)
expr_stmt|;
return|return
name|resultPath
return|;
block|}
end_function
begin_constructor
DECL|function|SymbianMakefileGenerator
name|SymbianMakefileGenerator
operator|::
name|SymbianMakefileGenerator
parameter_list|()
member_init_list|:
name|MakefileGenerator
argument_list|()
member_init_list|,
name|SymbianCommonGenerator
argument_list|(
name|this
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~SymbianMakefileGenerator
name|SymbianMakefileGenerator
operator|::
name|~
name|SymbianMakefileGenerator
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|writeHeader
name|void
name|SymbianMakefileGenerator
operator|::
name|writeHeader
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|)
block|{
name|t
operator|<<
literal|"// ============================================================================"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"// * Makefile for building: "
operator|<<
name|escapeFilePath
argument_list|(
name|var
argument_list|(
literal|"TARGET"
argument_list|)
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"// * Generated by qmake ("
operator|<<
name|qmake_version
argument_list|()
operator|<<
literal|") (Qt "
name|QT_VERSION_STR
literal|") on: "
expr_stmt|;
name|t
operator|<<
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
operator|.
name|toString
argument_list|(
name|Qt
operator|::
name|ISODate
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"// * This file is generated by qmake and should not be modified by the"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"// * user."
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"// * Project:  "
operator|<<
name|fileFixify
argument_list|(
name|project
operator|->
name|projectFile
argument_list|()
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"// * Template: "
operator|<<
name|var
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"// ============================================================================"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
comment|// Defining define for bld.inf
name|QString
name|shortProFilename
init|=
name|project
operator|->
name|projectFile
argument_list|()
decl_stmt|;
name|shortProFilename
operator|.
name|replace
argument_list|(
literal|0
argument_list|,
name|shortProFilename
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
operator|+
literal|1
argument_list|,
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|shortProFilename
operator|.
name|replace
argument_list|(
name|Option
operator|::
name|pro_ext
argument_list|,
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|bldinfDefine
init|=
name|shortProFilename
decl_stmt|;
name|bldinfDefine
operator|.
name|append
argument_list|(
literal|"_"
argument_list|)
expr_stmt|;
name|bldinfDefine
operator|.
name|append
argument_list|(
name|generate_uid
argument_list|(
name|project
operator|->
name|projectFile
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|bldinfDefine
operator|=
name|bldinfDefine
operator|.
name|toUpper
argument_list|()
expr_stmt|;
comment|// replace anything not alphanumeric with underscore
name|QRegExp
name|replacementMask
argument_list|(
name|DEFINE_REPLACE_REGEXP
argument_list|)
decl_stmt|;
name|bldinfDefine
operator|.
name|replace
argument_list|(
name|replacementMask
argument_list|,
name|QLatin1String
argument_list|(
literal|"_"
argument_list|)
argument_list|)
expr_stmt|;
name|bldinfDefine
operator|.
name|prepend
argument_list|(
literal|"BLD_INF_"
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"#define "
operator|<<
name|bldinfDefine
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeMakefile
name|bool
name|SymbianMakefileGenerator
operator|::
name|writeMakefile
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|)
block|{
if|if
condition|(
operator|!
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_FAILED_REQUIREMENTS"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Project files not generated because all requirements are not met:\n\t%s\n"
argument_list|,
name|qPrintable
argument_list|(
name|var
argument_list|(
literal|"QMAKE_FAILED_REQUIREMENTS"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|writeHeader
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|QString
name|numberOfIcons
decl_stmt|;
name|QString
name|iconFile
decl_stmt|;
name|QMap
argument_list|<
name|QString
argument_list|,
name|QStringList
argument_list|>
name|userRssRules
decl_stmt|;
name|readRssRules
argument_list|(
name|numberOfIcons
argument_list|,
name|iconFile
argument_list|,
name|userRssRules
argument_list|)
expr_stmt|;
name|SymbianLocalizationList
name|symbianLocalizationList
decl_stmt|;
name|parseTsFiles
argument_list|(
operator|&
name|symbianLocalizationList
argument_list|)
expr_stmt|;
comment|// Generate pkg files if there are any actual files to deploy
name|bool
name|generatePkg
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|targetType
operator|==
name|TypeExe
condition|)
block|{
name|generatePkg
operator|=
literal|true
expr_stmt|;
block|}
else|else
block|{
foreach|foreach
control|(
name|QString
name|item
decl|,
name|project
operator|->
name|values
argument_list|(
literal|"DEPLOYMENT"
argument_list|)
control|)
block|{
comment|// ### Qt 5: remove .sources, inconsistent with INSTALLS
if|if
condition|(
operator|!
name|project
operator|->
name|values
argument_list|(
name|item
operator|+
literal|".sources"
argument_list|)
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|project
operator|->
name|values
argument_list|(
name|item
operator|+
literal|".files"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|generatePkg
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|generatePkg
condition|)
block|{
name|generatePkgFile
argument_list|(
name|iconFile
argument_list|,
literal|true
argument_list|,
name|symbianLocalizationList
argument_list|)
expr_stmt|;
block|}
name|writeBldInfContent
argument_list|(
name|t
argument_list|,
name|generatePkg
argument_list|,
name|iconFile
argument_list|)
expr_stmt|;
comment|// Generate empty wrapper makefile here, because wrapper makefile must exist before writeMkFile,
comment|// but all required data is not yet available.
name|bool
name|isPrimaryMakefile
init|=
literal|true
decl_stmt|;
name|QString
name|wrapperFileName
init|=
name|Option
operator|::
name|output_dir
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|"Makefile"
argument_list|)
decl_stmt|;
name|QString
name|outputFileName
init|=
name|fileInfo
argument_list|(
name|Option
operator|::
name|output
operator|.
name|fileName
argument_list|()
argument_list|)
operator|.
name|fileName
argument_list|()
decl_stmt|;
if|if
condition|(
name|outputFileName
operator|!=
name|BLD_INF_FILENAME
condition|)
block|{
name|wrapperFileName
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
operator|.
name|append
argument_list|(
name|outputFileName
operator|.
name|startsWith
argument_list|(
name|BLD_INF_FILENAME
argument_list|)
condition|?
name|outputFileName
operator|.
name|mid
argument_list|(
sizeof|sizeof
argument_list|(
name|BLD_INF_FILENAME
argument_list|)
argument_list|)
else|:
name|outputFileName
argument_list|)
expr_stmt|;
name|isPrimaryMakefile
operator|=
literal|false
expr_stmt|;
block|}
name|QFile
name|wrapperMakefile
argument_list|(
name|wrapperFileName
argument_list|)
decl_stmt|;
if|if
condition|(
name|wrapperMakefile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
condition|)
block|{
name|generatedFiles
operator|<<
name|wrapperFileName
expr_stmt|;
block|}
else|else
block|{
name|PRINT_FILE_CREATE_ERROR
argument_list|(
name|wrapperFileName
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|targetType
operator|==
name|TypeSubdirs
condition|)
block|{
comment|// If we have something to deploy, generate extension makefile for just that, since
comment|// normal extension makefile is not getting generated and we need emulator deployment to be done.
if|if
condition|(
name|generatePkg
condition|)
name|writeMkFile
argument_list|(
name|wrapperFileName
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|writeWrapperMakefile
argument_list|(
name|wrapperMakefile
argument_list|,
name|isPrimaryMakefile
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|writeMkFile
argument_list|(
name|wrapperFileName
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QString
name|absoluteMmpFileName
init|=
name|Option
operator|::
name|output_dir
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|mmpFileName
decl_stmt|;
name|writeMmpFile
argument_list|(
name|absoluteMmpFileName
argument_list|,
name|symbianLocalizationList
argument_list|)
expr_stmt|;
if|if
condition|(
name|targetType
operator|==
name|TypeExe
condition|)
block|{
if|if
condition|(
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"no_icon"
argument_list|)
condition|)
block|{
name|writeRegRssFile
argument_list|(
name|userRssRules
argument_list|)
expr_stmt|;
name|writeRssFile
argument_list|(
name|numberOfIcons
argument_list|,
name|iconFile
argument_list|)
expr_stmt|;
name|writeLocFile
argument_list|(
name|symbianLocalizationList
argument_list|)
expr_stmt|;
block|}
block|}
name|writeCustomDefFile
argument_list|()
expr_stmt|;
name|writeWrapperMakefile
argument_list|(
name|wrapperMakefile
argument_list|,
name|isPrimaryMakefile
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|init
name|void
name|SymbianMakefileGenerator
operator|::
name|init
parameter_list|()
block|{
name|MakefileGenerator
operator|::
name|init
argument_list|()
expr_stmt|;
name|SymbianCommonGenerator
operator|::
name|init
argument_list|()
expr_stmt|;
if|if
condition|(
literal|0
operator|!=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PLATFORM"
argument_list|)
operator|.
name|size
argument_list|()
condition|)
name|platform
operator|=
name|varGlue
argument_list|(
literal|"QMAKE_PLATFORM"
argument_list|,
literal|""
argument_list|,
literal|" "
argument_list|,
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
literal|0
operator|==
name|project
operator|->
name|values
argument_list|(
literal|"QMAKESPEC"
argument_list|)
operator|.
name|size
argument_list|()
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"QMAKESPEC"
argument_list|)
operator|.
name|append
argument_list|(
name|qgetenv
argument_list|(
literal|"QMAKESPEC"
argument_list|)
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LIBS"
argument_list|)
operator|+=
name|escapeFilePaths
argument_list|(
name|project
operator|->
name|values
argument_list|(
literal|"LIBS"
argument_list|)
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LIBS_PRIVATE"
argument_list|)
operator|+=
name|escapeFilePaths
argument_list|(
name|project
operator|->
name|values
argument_list|(
literal|"LIBS_PRIVATE"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Disallow renaming of bld.inf.
name|project
operator|->
name|values
argument_list|(
literal|"MAKEFILE"
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"MAKEFILE"
argument_list|)
operator|+=
name|BLD_INF_FILENAME
expr_stmt|;
comment|// .mmp
name|mmpFileName
operator|=
name|fixedTarget
expr_stmt|;
if|if
condition|(
name|targetType
operator|==
name|TypeExe
condition|)
name|mmpFileName
operator|.
name|append
argument_list|(
literal|"_exe"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|targetType
operator|==
name|TypeDll
operator|||
name|targetType
operator|==
name|TypePlugin
condition|)
name|mmpFileName
operator|.
name|append
argument_list|(
literal|"_dll"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|targetType
operator|==
name|TypeLib
condition|)
name|mmpFileName
operator|.
name|append
argument_list|(
literal|"_lib"
argument_list|)
expr_stmt|;
name|mmpFileName
operator|.
name|append
argument_list|(
name|Option
operator|::
name|mmp_ext
argument_list|)
expr_stmt|;
name|initMmpVariables
argument_list|()
expr_stmt|;
name|uid2
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"TARGET.UID2"
argument_list|)
expr_stmt|;
name|uid2
operator|=
name|uid2
operator|.
name|trimmed
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|getTargetExtension
name|QString
name|SymbianMakefileGenerator
operator|::
name|getTargetExtension
parameter_list|()
block|{
name|QString
name|ret
decl_stmt|;
if|if
condition|(
name|targetType
operator|==
name|TypeExe
condition|)
block|{
name|ret
operator|.
name|append
argument_list|(
literal|"exe"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|targetType
operator|==
name|TypeLib
condition|)
block|{
name|ret
operator|.
name|append
argument_list|(
literal|"lib"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|targetType
operator|==
name|TypeDll
operator|||
name|targetType
operator|==
name|TypePlugin
condition|)
block|{
name|ret
operator|.
name|append
argument_list|(
literal|"dll"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|targetType
operator|==
name|TypeSubdirs
condition|)
block|{
comment|// Not actually usable, so return empty
block|}
else|else
block|{
comment|// If nothing else set, default to exe
name|ret
operator|.
name|append
argument_list|(
literal|"exe"
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|generateUID3
name|QString
name|SymbianMakefileGenerator
operator|::
name|generateUID3
parameter_list|()
block|{
name|QString
name|target
init|=
name|project
operator|->
name|first
argument_list|(
literal|"TARGET"
argument_list|)
decl_stmt|;
name|QString
name|currPath
init|=
name|qmake_getpwd
argument_list|()
decl_stmt|;
name|target
operator|.
name|prepend
argument_list|(
literal|"/"
argument_list|)
operator|.
name|prepend
argument_list|(
name|currPath
argument_list|)
expr_stmt|;
return|return
name|generate_test_uid
argument_list|(
name|target
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|initMmpVariables
name|void
name|SymbianMakefileGenerator
operator|::
name|initMmpVariables
parameter_list|()
block|{
name|QStringList
name|sysincspaths
decl_stmt|;
name|QStringList
name|srcincpaths
decl_stmt|;
name|QStringList
name|srcpaths
decl_stmt|;
name|srcpaths
operator|<<
name|project
operator|->
name|values
argument_list|(
literal|"SOURCES"
argument_list|)
operator|<<
name|project
operator|->
name|values
argument_list|(
literal|"GENERATED_SOURCES"
argument_list|)
expr_stmt|;
name|srcpaths
operator|<<
name|project
operator|->
name|values
argument_list|(
literal|"UNUSED_SOURCES"
argument_list|)
operator|<<
name|project
operator|->
name|values
argument_list|(
literal|"UI_SOURCES_DIR"
argument_list|)
expr_stmt|;
name|srcpaths
operator|<<
name|project
operator|->
name|values
argument_list|(
literal|"UI_DIR"
argument_list|)
expr_stmt|;
name|QDir
name|current
init|=
name|QDir
operator|::
name|current
argument_list|()
decl_stmt|;
name|QString
name|absolutizedCurrent
init|=
name|absolutizePath
argument_list|(
literal|"."
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|srcpaths
operator|.
name|size
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
name|QFileInfo
name|fi
argument_list|(
name|fileInfo
argument_list|(
name|srcpaths
operator|.
name|at
argument_list|(
name|j
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// Sometimes sources have other than *.c* files (e.g. *.moc); prune them.
if|if
condition|(
name|fi
operator|.
name|suffix
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"c"
argument_list|)
condition|)
block|{
if|if
condition|(
name|fi
operator|.
name|filePath
argument_list|()
operator|.
name|length
argument_list|()
operator|>
name|fi
operator|.
name|fileName
argument_list|()
operator|.
name|length
argument_list|()
condition|)
block|{
name|appendIfnotExist
argument_list|(
name|srcincpaths
argument_list|,
name|fi
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
name|sources
index|[
name|absolutizePath
argument_list|(
name|fi
operator|.
name|path
argument_list|()
argument_list|)
index|]
operator|+=
name|fi
operator|.
name|fileName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|sources
index|[
name|absolutizedCurrent
index|]
operator|+=
name|fi
operator|.
name|fileName
argument_list|()
expr_stmt|;
name|appendIfnotExist
argument_list|(
name|srcincpaths
argument_list|,
name|absolutizedCurrent
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|QStringList
name|incpaths
decl_stmt|;
name|incpaths
operator|<<
name|project
operator|->
name|values
argument_list|(
literal|"INCLUDEPATH"
argument_list|)
expr_stmt|;
name|incpaths
operator|<<
name|QLibraryInfo
operator|::
name|location
argument_list|(
name|QLibraryInfo
operator|::
name|HeadersPath
argument_list|)
expr_stmt|;
name|incpaths
operator|<<
name|project
operator|->
name|values
argument_list|(
literal|"HEADERS"
argument_list|)
expr_stmt|;
name|incpaths
operator|<<
name|srcincpaths
expr_stmt|;
name|incpaths
operator|<<
name|project
operator|->
name|values
argument_list|(
literal|"UI_HEADERS_DIR"
argument_list|)
expr_stmt|;
name|incpaths
operator|<<
name|project
operator|->
name|values
argument_list|(
literal|"UI_DIR"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|incpaths
operator|.
name|size
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
name|QString
name|includepath
init|=
name|absolutizePath
argument_list|(
name|incpaths
operator|.
name|at
argument_list|(
name|j
argument_list|)
argument_list|)
decl_stmt|;
name|appendIfnotExist
argument_list|(
name|sysincspaths
argument_list|,
name|includepath
argument_list|)
expr_stmt|;
name|appendAbldTempDirs
argument_list|(
name|sysincspaths
argument_list|,
name|includepath
argument_list|)
expr_stmt|;
block|}
comment|// Remove duplicate include path entries
name|QStringList
name|temporary
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sysincspaths
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|origPath
init|=
name|sysincspaths
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QFileInfo
name|origPathInfo
argument_list|(
name|fileInfo
argument_list|(
name|origPath
argument_list|)
argument_list|)
decl_stmt|;
name|bool
name|bFound
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|temporary
operator|.
name|size
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
name|QString
name|tmpPath
init|=
name|temporary
operator|.
name|at
argument_list|(
name|j
argument_list|)
decl_stmt|;
name|QFileInfo
name|tmpPathInfo
argument_list|(
name|fileInfo
argument_list|(
name|tmpPath
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|origPathInfo
operator|.
name|absoluteFilePath
argument_list|()
operator|==
name|tmpPathInfo
operator|.
name|absoluteFilePath
argument_list|()
condition|)
block|{
name|bFound
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|tmpPathInfo
operator|.
name|isRelative
argument_list|()
operator|&&
name|origPathInfo
operator|.
name|isRelative
argument_list|()
condition|)
block|{
comment|// We keep the relative notation
name|temporary
operator|.
name|removeOne
argument_list|(
name|tmpPath
argument_list|)
expr_stmt|;
name|temporary
operator|<<
name|origPath
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|bFound
condition|)
name|temporary
operator|<<
name|origPath
expr_stmt|;
block|}
name|sysincspaths
operator|.
name|clear
argument_list|()
expr_stmt|;
name|sysincspaths
operator|<<
name|temporary
expr_stmt|;
name|systeminclude
operator|.
name|insert
argument_list|(
literal|"SYSTEMINCLUDE"
argument_list|,
name|sysincspaths
argument_list|)
expr_stmt|;
comment|// Check MMP_RULES for singleton keywords that are overridden
name|QStringList
name|overridableMmpKeywords
decl_stmt|;
name|QStringList
name|restrictableMmpKeywords
decl_stmt|;
name|QStringList
name|restrictedMmpKeywords
decl_stmt|;
name|bool
name|inResourceBlock
init|=
literal|false
decl_stmt|;
name|overridableMmpKeywords
operator|<<
name|QLatin1String
argument_list|(
name|MMP_TARGETTYPE
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
name|MMP_EPOCHEAPSIZE
argument_list|)
expr_stmt|;
name|restrictableMmpKeywords
operator|<<
name|QLatin1String
argument_list|(
name|MMP_TARGET
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
name|MMP_SECUREID
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
name|MMP_OPTION
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
name|MMP_LINKEROPTION
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
name|MMP_CAPABILITY
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
name|MMP_EPOCALLOWDLLDATA
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
name|MMP_EPOCSTACKSIZE
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
name|MMP_UID
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
name|MMP_VENDORID
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
name|MMP_VERSION
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|QString
name|item
decl|,
name|project
operator|->
name|values
argument_list|(
literal|"MMP_RULES"
argument_list|)
control|)
block|{
if|if
condition|(
name|project
operator|->
name|values
argument_list|(
name|item
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|handleMmpRulesOverrides
argument_list|(
name|item
argument_list|,
name|inResourceBlock
argument_list|,
name|restrictedMmpKeywords
argument_list|,
name|restrictableMmpKeywords
argument_list|,
name|overridableMmpKeywords
argument_list|)
expr_stmt|;
block|}
else|else
block|{
foreach|foreach
control|(
name|QString
name|itemRow
decl|,
name|project
operator|->
name|values
argument_list|(
name|item
argument_list|)
control|)
block|{
name|handleMmpRulesOverrides
argument_list|(
name|itemRow
argument_list|,
name|inResourceBlock
argument_list|,
name|restrictedMmpKeywords
argument_list|,
name|restrictableMmpKeywords
argument_list|,
name|overridableMmpKeywords
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|restrictedMmpKeywords
operator|.
name|size
argument_list|()
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Warning: Restricted statements detected in MMP_RULES:\n"
literal|"         (%s)\n"
literal|"         Use corresponding qmake variable(s) instead.\n"
argument_list|,
name|qPrintable
argument_list|(
name|restrictedMmpKeywords
operator|.
name|join
argument_list|(
literal|", "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|handleMmpRulesOverrides
name|void
name|SymbianMakefileGenerator
operator|::
name|handleMmpRulesOverrides
parameter_list|(
name|QString
modifier|&
name|checkString
parameter_list|,
name|bool
modifier|&
name|inResourceBlock
parameter_list|,
name|QStringList
modifier|&
name|restrictedMmpKeywords
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|restrictableMmpKeywords
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|overridableMmpKeywords
parameter_list|)
block|{
name|QString
name|simplifiedString
init|=
name|checkString
operator|.
name|simplified
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|inResourceBlock
operator|&&
name|simplifiedString
operator|.
name|startsWith
argument_list|(
name|MMP_START_RESOURCE
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
name|inResourceBlock
operator|=
literal|true
expr_stmt|;
elseif|else
if|if
condition|(
name|inResourceBlock
operator|&&
name|simplifiedString
operator|.
name|startsWith
argument_list|(
name|MMP_END_RESOURCE
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
name|inResourceBlock
operator|=
literal|false
expr_stmt|;
comment|// Allow restricted and overridable items in RESOURCE blocks as those do not actually
comment|// override anything.
if|if
condition|(
operator|!
name|inResourceBlock
condition|)
block|{
name|appendKeywordIfMatchFound
argument_list|(
name|overriddenMmpKeywords
argument_list|,
name|overridableMmpKeywords
argument_list|,
name|simplifiedString
argument_list|)
expr_stmt|;
name|appendKeywordIfMatchFound
argument_list|(
name|restrictedMmpKeywords
argument_list|,
name|restrictableMmpKeywords
argument_list|,
name|simplifiedString
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|appendKeywordIfMatchFound
name|void
name|SymbianMakefileGenerator
operator|::
name|appendKeywordIfMatchFound
parameter_list|(
name|QStringList
modifier|&
name|list
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|keywordList
parameter_list|,
name|QString
modifier|&
name|checkString
parameter_list|)
block|{
comment|// Check if checkString starts with any supplied keyword and
comment|// add the found keyword to list if it does.
foreach|foreach
control|(
name|QString
name|item
decl|,
name|keywordList
control|)
block|{
if|if
condition|(
name|checkString
operator|.
name|startsWith
argument_list|(
name|QString
argument_list|(
name|item
argument_list|)
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|||
name|checkString
operator|.
name|compare
argument_list|(
name|item
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|==
literal|0
condition|)
block|{
name|appendIfnotExist
argument_list|(
name|list
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|removeDuplicatedStrings
name|bool
name|SymbianMakefileGenerator
operator|::
name|removeDuplicatedStrings
parameter_list|(
name|QStringList
modifier|&
name|stringList
parameter_list|)
block|{
name|QStringList
name|tmpStringList
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stringList
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|string
init|=
name|stringList
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmpStringList
operator|.
name|contains
argument_list|(
name|string
argument_list|)
condition|)
continue|continue;
else|else
name|tmpStringList
operator|.
name|append
argument_list|(
name|string
argument_list|)
expr_stmt|;
block|}
name|stringList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|stringList
operator|=
name|tmpStringList
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|writeMmpFileHeader
name|void
name|SymbianMakefileGenerator
operator|::
name|writeMmpFileHeader
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|)
block|{
name|t
operator|<<
literal|"// =============================================================================="
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"// Generated by qmake ("
operator|<<
name|qmake_version
argument_list|()
operator|<<
literal|") (Qt "
name|QT_VERSION_STR
literal|") on: "
expr_stmt|;
name|t
operator|<<
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
operator|.
name|toString
argument_list|(
name|Qt
operator|::
name|ISODate
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"// This file is generated by qmake and should not be modified by the"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"// user."
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"//  Name        : "
operator|<<
name|mmpFileName
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"// =============================================================================="
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeMmpFile
name|void
name|SymbianMakefileGenerator
operator|::
name|writeMmpFile
parameter_list|(
name|QString
modifier|&
name|filename
parameter_list|,
specifier|const
name|SymbianLocalizationList
modifier|&
name|symbianLocalizationList
parameter_list|)
block|{
name|QFile
name|ft
argument_list|(
name|filename
argument_list|)
decl_stmt|;
if|if
condition|(
name|ft
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
condition|)
block|{
name|generatedFiles
operator|<<
name|ft
operator|.
name|fileName
argument_list|()
expr_stmt|;
name|QTextStream
name|t
argument_list|(
operator|&
name|ft
argument_list|)
decl_stmt|;
name|writeMmpFileHeader
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|writeMmpFileTargetPart
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|writeMmpFileResourcePart
argument_list|(
name|t
argument_list|,
name|symbianLocalizationList
argument_list|)
expr_stmt|;
name|writeMmpFileMacrosPart
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|writeMmpFileIncludePart
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|QDir
name|current
init|=
name|QDir
operator|::
name|current
argument_list|()
decl_stmt|;
for|for
control|(
name|QMap
argument_list|<
name|QString
argument_list|,
name|QStringList
argument_list|>
operator|::
name|iterator
name|it
init|=
name|sources
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|sources
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QStringList
name|values
init|=
name|it
operator|.
name|value
argument_list|()
decl_stmt|;
name|QString
name|currentSourcePath
init|=
name|it
operator|.
name|key
argument_list|()
decl_stmt|;
if|if
condition|(
name|values
operator|.
name|size
argument_list|()
condition|)
name|t
operator|<<
literal|"SOURCEPATH \t"
operator|<<
name|fixPathForMmp
argument_list|(
name|currentSourcePath
argument_list|,
name|current
argument_list|)
operator|<<
name|endl
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|sourceFileName
init|=
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|t
operator|<<
literal|"SOURCE\t\t"
operator|<<
name|sourceFileName
operator|<<
name|endl
expr_stmt|;
block|}
name|t
operator|<<
name|endl
expr_stmt|;
block|}
name|t
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"static"
argument_list|)
operator|&&
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"staticlib"
argument_list|)
condition|)
block|{
name|writeMmpFileLibraryPart
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
name|writeMmpFileCapabilityPart
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|writeMmpFileCompilerOptionPart
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|writeMmpFileBinaryVersionPart
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|writeMmpFileRulesPart
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|PRINT_FILE_CREATE_ERROR
argument_list|(
argument|filename
argument_list|)
block|}
block|}
end_function
begin_function
DECL|function|writeMmpFileMacrosPart
name|void
name|SymbianMakefileGenerator
operator|::
name|writeMmpFileMacrosPart
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|)
block|{
name|t
operator|<<
name|endl
expr_stmt|;
name|QStringList
modifier|&
name|defines
init|=
name|project
operator|->
name|values
argument_list|(
literal|"DEFINES"
argument_list|)
decl_stmt|;
if|if
condition|(
name|defines
operator|.
name|size
argument_list|()
condition|)
name|t
operator|<<
literal|"// Qt Macros"
operator|<<
name|endl
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|defines
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|def
init|=
name|defines
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|addMacro
argument_list|(
name|t
argument_list|,
name|def
argument_list|)
expr_stmt|;
block|}
comment|// These are required in order that all methods will be correctly exported e.g from qtestlib
name|QStringList
modifier|&
name|exp_defines
init|=
name|project
operator|->
name|values
argument_list|(
literal|"PRL_EXPORT_DEFINES"
argument_list|)
decl_stmt|;
if|if
condition|(
name|exp_defines
operator|.
name|size
argument_list|()
condition|)
name|t
operator|<<
name|endl
operator|<<
literal|"// Qt Export Defines"
operator|<<
name|endl
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|exp_defines
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|def
init|=
name|exp_defines
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|addMacro
argument_list|(
name|t
argument_list|,
name|def
argument_list|)
expr_stmt|;
block|}
name|t
operator|<<
name|endl
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addMacro
name|void
name|SymbianMakefileGenerator
operator|::
name|addMacro
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|,
specifier|const
name|QString
modifier|&
name|value
parameter_list|)
block|{
name|t
operator|<<
literal|"MACRO\t\t"
operator|<<
name|value
operator|<<
name|endl
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeMmpFileTargetPart
name|void
name|SymbianMakefileGenerator
operator|::
name|writeMmpFileTargetPart
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|)
block|{
name|bool
name|skipTargetType
init|=
name|overriddenMmpKeywords
operator|.
name|contains
argument_list|(
name|MMP_TARGETTYPE
argument_list|)
decl_stmt|;
name|bool
name|skipEpocHeapSize
init|=
name|overriddenMmpKeywords
operator|.
name|contains
argument_list|(
name|MMP_EPOCHEAPSIZE
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetType
operator|==
name|TypeExe
condition|)
block|{
name|t
operator|<<
name|MMP_TARGET
literal|"\t\t"
operator|<<
name|fixedTarget
operator|<<
literal|".exe"
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|skipTargetType
condition|)
block|{
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"stdbinary"
argument_list|)
condition|)
name|t
operator|<<
name|MMP_TARGETTYPE
literal|"\t\tSTDEXE"
operator|<<
name|endl
expr_stmt|;
else|else
name|t
operator|<<
name|MMP_TARGETTYPE
literal|"\t\tEXE"
operator|<<
name|endl
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|targetType
operator|==
name|TypeDll
operator|||
name|targetType
operator|==
name|TypePlugin
condition|)
block|{
name|t
operator|<<
name|MMP_TARGET
literal|"\t\t"
operator|<<
name|fixedTarget
operator|<<
literal|".dll"
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|skipTargetType
condition|)
block|{
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"stdbinary"
argument_list|)
condition|)
name|t
operator|<<
name|MMP_TARGETTYPE
literal|"\t\tSTDDLL"
operator|<<
name|endl
expr_stmt|;
else|else
name|t
operator|<<
name|MMP_TARGETTYPE
literal|"\t\tDLL"
operator|<<
name|endl
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|targetType
operator|==
name|TypeLib
condition|)
block|{
name|t
operator|<<
name|MMP_TARGET
literal|"\t\t"
operator|<<
name|fixedTarget
operator|<<
literal|".lib"
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|skipTargetType
condition|)
block|{
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"stdbinary"
argument_list|)
condition|)
name|t
operator|<<
name|MMP_TARGETTYPE
literal|"\t\tSTDLIB"
operator|<<
name|endl
expr_stmt|;
else|else
name|t
operator|<<
name|MMP_TARGETTYPE
literal|"\t\tLIB"
operator|<<
name|endl
expr_stmt|;
block|}
block|}
else|else
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Error: Unexpected targettype (%d) in SymbianMakefileGenerator::writeMmpFileTargetPart\n"
argument_list|,
name|targetType
argument_list|)
expr_stmt|;
block|}
name|t
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|MMP_UID
literal|"\t\t"
operator|<<
name|uid2
operator|<<
literal|" "
operator|<<
name|uid3
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
literal|0
operator|!=
name|project
operator|->
name|values
argument_list|(
literal|"TARGET.SID"
argument_list|)
operator|.
name|size
argument_list|()
condition|)
block|{
name|t
operator|<<
name|MMP_SECUREID
literal|"\t\t"
operator|<<
name|project
operator|->
name|values
argument_list|(
literal|"TARGET.SID"
argument_list|)
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
literal|0
operator|==
name|uid3
operator|.
name|size
argument_list|()
condition|)
name|t
operator|<<
name|MMP_SECUREID
literal|"\t\t0"
operator|<<
name|endl
expr_stmt|;
else|else
name|t
operator|<<
name|MMP_SECUREID
literal|"\t\t"
operator|<<
name|uid3
operator|<<
name|endl
expr_stmt|;
block|}
comment|// default value used from mkspecs is 0
if|if
condition|(
literal|0
operator|!=
name|project
operator|->
name|values
argument_list|(
literal|"TARGET.VID"
argument_list|)
operator|.
name|size
argument_list|()
condition|)
block|{
name|t
operator|<<
name|MMP_VENDORID
literal|"\t\t"
operator|<<
name|project
operator|->
name|values
argument_list|(
literal|"TARGET.VID"
argument_list|)
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
name|t
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
literal|0
operator|!=
name|project
operator|->
name|first
argument_list|(
literal|"TARGET.EPOCSTACKSIZE"
argument_list|)
operator|.
name|size
argument_list|()
condition|)
name|t
operator|<<
name|MMP_EPOCSTACKSIZE
literal|"\t\t"
operator|<<
name|project
operator|->
name|first
argument_list|(
literal|"TARGET.EPOCSTACKSIZE"
argument_list|)
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|skipEpocHeapSize
operator|&&
literal|0
operator|!=
name|project
operator|->
name|values
argument_list|(
literal|"TARGET.EPOCHEAPSIZE"
argument_list|)
operator|.
name|size
argument_list|()
condition|)
name|t
operator|<<
name|MMP_EPOCHEAPSIZE
literal|"\t\t"
operator|<<
name|project
operator|->
name|values
argument_list|(
literal|"TARGET.EPOCHEAPSIZE"
argument_list|)
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
literal|0
operator|!=
name|project
operator|->
name|values
argument_list|(
literal|"TARGET.EPOCALLOWDLLDATA"
argument_list|)
operator|.
name|size
argument_list|()
condition|)
name|t
operator|<<
name|MMP_EPOCALLOWDLLDATA
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|targetType
operator|==
name|TypePlugin
operator|&&
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"stdbinary"
argument_list|)
condition|)
block|{
comment|// Use custom def file for Qt plugins
name|t
operator|<<
literal|"DEFFILE "
name|PLUGIN_COMMON_DEF_FILE_FOR_MMP
operator|<<
name|endl
expr_stmt|;
block|}
name|t
operator|<<
name|endl
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     Application registration resource files should be installed to the     \private\10003a3f\import\apps directory. */
end_comment
begin_function
DECL|function|writeMmpFileResourcePart
name|void
name|SymbianMakefileGenerator
operator|::
name|writeMmpFileResourcePart
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|,
specifier|const
name|SymbianLocalizationList
modifier|&
name|symbianLocalizationList
parameter_list|)
block|{
if|if
condition|(
operator|(
name|targetType
operator|==
name|TypeExe
operator|)
operator|&&
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"no_icon"
argument_list|)
condition|)
block|{
name|QString
name|locTarget
init|=
name|fixedTarget
decl_stmt|;
name|locTarget
operator|.
name|append
argument_list|(
literal|".rss"
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"SOURCEPATH\t\t\t. "
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"LANG SC "
expr_stmt|;
comment|// no endl
name|SymbianLocalizationListIterator
name|iter
argument_list|(
name|symbianLocalizationList
argument_list|)
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|const
name|SymbianLocalization
modifier|&
name|loc
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|t
operator|<<
name|loc
operator|.
name|symbianLanguageCode
operator|<<
literal|" "
expr_stmt|;
comment|// no endl
block|}
name|t
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|MMP_START_RESOURCE
literal|"\t\t"
operator|<<
name|locTarget
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"HEADER"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"TARGETPATH\t\t\t"
name|RESOURCE_DIRECTORY_MMP
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|MMP_END_RESOURCE
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|QString
name|regTarget
init|=
name|fixedTarget
decl_stmt|;
name|regTarget
operator|.
name|append
argument_list|(
literal|"_reg.rss"
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"SOURCEPATH\t\t\t."
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|MMP_START_RESOURCE
literal|"\t\t"
operator|<<
name|regTarget
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|isForSymbianSbsv2
argument_list|()
condition|)
name|t
operator|<<
literal|"DEPENDS "
operator|<<
name|fixedTarget
operator|<<
literal|".rsg"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"TARGETPATH\t\t"
name|REGISTRATION_RESOURCE_DIRECTORY_HW
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|MMP_END_RESOURCE
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|writeMmpFileSystemIncludePart
name|void
name|SymbianMakefileGenerator
operator|::
name|writeMmpFileSystemIncludePart
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|)
block|{
name|QDir
name|current
init|=
name|QDir
operator|::
name|current
argument_list|()
decl_stmt|;
for|for
control|(
name|QMap
argument_list|<
name|QString
argument_list|,
name|QStringList
argument_list|>
operator|::
name|iterator
name|it
init|=
name|systeminclude
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|systeminclude
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QStringList
name|values
init|=
name|it
operator|.
name|value
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|handledPath
init|=
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|t
operator|<<
literal|"SYSTEMINCLUDE\t\t"
operator|<<
name|fixPathForMmp
argument_list|(
name|handledPath
argument_list|,
name|current
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
block|}
name|t
operator|<<
name|endl
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeMmpFileIncludePart
name|void
name|SymbianMakefileGenerator
operator|::
name|writeMmpFileIncludePart
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|)
block|{
name|writeMmpFileSystemIncludePart
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeMmpFileLibraryPart
name|void
name|SymbianMakefileGenerator
operator|::
name|writeMmpFileLibraryPart
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|)
block|{
name|QStringList
modifier|&
name|libs
init|=
name|project
operator|->
name|values
argument_list|(
literal|"LIBS"
argument_list|)
decl_stmt|;
name|libs
operator|<<
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LIBS"
argument_list|)
operator|<<
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LIBS_PRIVATE"
argument_list|)
expr_stmt|;
name|removeDuplicatedStrings
argument_list|(
name|libs
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|libs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|lib
init|=
name|libs
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|// The -L flag is uninteresting, since all symbian libraries exist in the same directory.
if|if
condition|(
name|lib
operator|.
name|startsWith
argument_list|(
literal|"-l"
argument_list|)
condition|)
block|{
name|lib
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QString
name|mmpStatement
decl_stmt|;
if|if
condition|(
name|lib
operator|.
name|endsWith
argument_list|(
literal|".lib"
argument_list|)
condition|)
block|{
name|lib
operator|.
name|chop
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|mmpStatement
operator|=
literal|"STATICLIBRARY\t"
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|lib
operator|.
name|endsWith
argument_list|(
literal|".dll"
argument_list|)
condition|)
name|lib
operator|.
name|chop
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|mmpStatement
operator|=
literal|"LIBRARY\t\t"
expr_stmt|;
block|}
name|t
operator|<<
name|mmpStatement
operator|<<
name|lib
operator|<<
literal|".lib"
operator|<<
name|endl
expr_stmt|;
block|}
block|}
name|t
operator|<<
name|endl
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeMmpFileCapabilityPart
name|void
name|SymbianMakefileGenerator
operator|::
name|writeMmpFileCapabilityPart
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|)
block|{
if|if
condition|(
literal|0
operator|!=
name|project
operator|->
name|first
argument_list|(
literal|"TARGET.CAPABILITY"
argument_list|)
operator|.
name|size
argument_list|()
condition|)
block|{
name|QStringList
modifier|&
name|capabilities
init|=
name|project
operator|->
name|values
argument_list|(
literal|"TARGET.CAPABILITY"
argument_list|)
decl_stmt|;
name|t
operator|<<
name|MMP_CAPABILITY
literal|"\t\t"
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|capabilities
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|cap
init|=
name|capabilities
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|t
operator|<<
name|cap
operator|<<
literal|" "
expr_stmt|;
block|}
block|}
else|else
block|{
name|t
operator|<<
name|MMP_CAPABILITY
literal|"\t\tNone"
expr_stmt|;
block|}
name|t
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeMmpFileConditionalOptions
name|void
name|SymbianMakefileGenerator
operator|::
name|writeMmpFileConditionalOptions
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|,
specifier|const
name|QString
modifier|&
name|optionType
parameter_list|,
specifier|const
name|QString
modifier|&
name|optionTag
parameter_list|,
specifier|const
name|QString
modifier|&
name|variableBase
parameter_list|)
block|{
foreach|foreach
control|(
name|QString
name|compilerVersion
decl|,
name|project
operator|->
name|values
argument_list|(
literal|"VERSION_FLAGS."
operator|+
name|optionTag
argument_list|)
control|)
block|{
name|QStringList
name|currentValues
init|=
name|project
operator|->
name|values
argument_list|(
name|variableBase
operator|+
literal|"."
operator|+
name|compilerVersion
argument_list|)
decl_stmt|;
if|if
condition|(
name|currentValues
operator|.
name|size
argument_list|()
condition|)
block|{
name|t
operator|<<
literal|"#if defined("
operator|<<
name|compilerVersion
operator|<<
literal|")"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|optionType
operator|<<
literal|" "
operator|<<
name|optionTag
operator|<<
literal|" "
operator|<<
name|currentValues
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"#endif"
operator|<<
name|endl
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|writeMmpFileSimpleOption
name|void
name|SymbianMakefileGenerator
operator|::
name|writeMmpFileSimpleOption
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|,
specifier|const
name|QString
modifier|&
name|optionType
parameter_list|,
specifier|const
name|QString
modifier|&
name|optionTag
parameter_list|,
specifier|const
name|QString
modifier|&
name|options
parameter_list|)
block|{
name|QString
name|trimmedOptions
init|=
name|options
operator|.
name|trimmed
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|trimmedOptions
operator|.
name|isEmpty
argument_list|()
condition|)
name|t
operator|<<
name|optionType
operator|<<
literal|" "
operator|<<
name|optionTag
operator|<<
literal|" "
operator|<<
name|trimmedOptions
operator|<<
name|endl
expr_stmt|;
block|}
end_function
begin_function
DECL|function|appendMmpFileOptions
name|void
name|SymbianMakefileGenerator
operator|::
name|appendMmpFileOptions
parameter_list|(
name|QString
modifier|&
name|options
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|list
parameter_list|)
block|{
if|if
condition|(
name|list
operator|.
name|size
argument_list|()
condition|)
block|{
name|options
operator|.
name|append
argument_list|(
name|list
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
name|options
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|writeMmpFileCompilerOptionPart
name|void
name|SymbianMakefileGenerator
operator|::
name|writeMmpFileCompilerOptionPart
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|)
block|{
name|QStringList
name|keywords
init|=
name|project
operator|->
name|values
argument_list|(
literal|"MMP_OPTION_KEYWORDS"
argument_list|)
decl_stmt|;
name|QStringList
name|commonCxxFlags
init|=
name|project
operator|->
name|values
argument_list|(
name|VAR_CXXFLAGS
argument_list|)
decl_stmt|;
name|QStringList
name|commonCFlags
init|=
name|project
operator|->
name|values
argument_list|(
name|VAR_CFLAGS
argument_list|)
decl_stmt|;
name|QStringList
name|commonLFlags
init|=
name|project
operator|->
name|values
argument_list|(
name|VAR_LFLAGS
argument_list|)
decl_stmt|;
foreach|foreach
control|(
name|QString
name|item
decl|,
name|keywords
control|)
block|{
name|QString
name|compilerOption
decl_stmt|;
name|QString
name|linkerOption
decl_stmt|;
name|appendMmpFileOptions
argument_list|(
name|compilerOption
argument_list|,
name|project
operator|->
name|values
argument_list|(
name|VAR_CXXFLAGS
literal|"."
operator|+
name|item
argument_list|)
argument_list|)
expr_stmt|;
name|appendMmpFileOptions
argument_list|(
name|compilerOption
argument_list|,
name|project
operator|->
name|values
argument_list|(
name|VAR_CFLAGS
literal|"."
operator|+
name|item
argument_list|)
argument_list|)
expr_stmt|;
name|appendMmpFileOptions
argument_list|(
name|compilerOption
argument_list|,
name|commonCxxFlags
argument_list|)
expr_stmt|;
name|appendMmpFileOptions
argument_list|(
name|compilerOption
argument_list|,
name|commonCFlags
argument_list|)
expr_stmt|;
name|appendMmpFileOptions
argument_list|(
name|linkerOption
argument_list|,
name|project
operator|->
name|values
argument_list|(
name|VAR_LFLAGS
literal|"."
operator|+
name|item
argument_list|)
argument_list|)
expr_stmt|;
name|appendMmpFileOptions
argument_list|(
name|linkerOption
argument_list|,
name|commonLFlags
argument_list|)
expr_stmt|;
name|writeMmpFileSimpleOption
argument_list|(
name|t
argument_list|,
name|MMP_OPTION
argument_list|,
name|item
argument_list|,
name|compilerOption
argument_list|)
expr_stmt|;
name|writeMmpFileSimpleOption
argument_list|(
name|t
argument_list|,
name|MMP_LINKEROPTION
argument_list|,
name|item
argument_list|,
name|linkerOption
argument_list|)
expr_stmt|;
name|writeMmpFileConditionalOptions
argument_list|(
name|t
argument_list|,
name|MMP_OPTION
argument_list|,
name|item
argument_list|,
name|VAR_CXXFLAGS
argument_list|)
expr_stmt|;
name|writeMmpFileConditionalOptions
argument_list|(
name|t
argument_list|,
name|MMP_LINKEROPTION
argument_list|,
name|item
argument_list|,
name|VAR_LFLAGS
argument_list|)
expr_stmt|;
block|}
name|t
operator|<<
name|endl
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeMmpFileBinaryVersionPart
name|void
name|SymbianMakefileGenerator
operator|::
name|writeMmpFileBinaryVersionPart
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|)
block|{
name|QString
name|applicationVersion
init|=
name|project
operator|->
name|first
argument_list|(
literal|"VERSION"
argument_list|)
decl_stmt|;
name|QStringList
name|verNumList
init|=
name|applicationVersion
operator|.
name|split
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
name|uint
name|major
init|=
literal|0
decl_stmt|;
name|uint
name|minor
init|=
literal|0
decl_stmt|;
name|uint
name|patch
init|=
literal|0
decl_stmt|;
name|bool
name|success
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|verNumList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|major
operator|=
name|verNumList
index|[
literal|0
index|]
operator|.
name|toUInt
argument_list|(
operator|&
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|success
operator|&&
name|verNumList
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|minor
operator|=
name|verNumList
index|[
literal|1
index|]
operator|.
name|toUInt
argument_list|(
operator|&
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|success
operator|&&
name|verNumList
operator|.
name|size
argument_list|()
operator|>
literal|2
condition|)
block|{
name|patch
operator|=
name|verNumList
index|[
literal|2
index|]
operator|.
name|toUInt
argument_list|(
operator|&
name|success
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|QString
name|mmpVersion
decl_stmt|;
if|if
condition|(
name|success
operator|&&
name|major
operator|<=
literal|0xFFFF
operator|&&
name|minor
operator|<=
literal|0xFF
operator|&&
name|patch
operator|<=
literal|0xFF
condition|)
block|{
comment|// Symbian binary version only has major and minor components, so compress
comment|// Qt's minor and patch values into the minor component. Since Symbian's minor
comment|// component is a 16 bit value, only allow 8 bits for each to avoid overflow.
name|mmpVersion
operator|.
name|append
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|major
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
literal|'.'
argument_list|)
operator|.
name|append
argument_list|(
name|QString
operator|::
name|number
argument_list|(
operator|(
name|minor
operator|<<
literal|8
operator|)
operator|+
name|patch
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|applicationVersion
operator|.
name|isEmpty
argument_list|()
condition|)
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Invalid VERSION string: %s\n"
argument_list|,
name|qPrintable
argument_list|(
name|applicationVersion
argument_list|)
argument_list|)
expr_stmt|;
name|mmpVersion
operator|=
literal|"10.0"
expr_stmt|;
comment|// Default binary version for symbian is 10.0
block|}
name|t
operator|<<
name|MMP_VERSION
literal|" "
operator|<<
name|mmpVersion
operator|<<
name|endl
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeMmpFileRulesPart
name|void
name|SymbianMakefileGenerator
operator|::
name|writeMmpFileRulesPart
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|)
block|{
foreach|foreach
control|(
name|QString
name|item
decl|,
name|project
operator|->
name|values
argument_list|(
literal|"MMP_RULES"
argument_list|)
control|)
block|{
name|t
operator|<<
name|endl
expr_stmt|;
comment|// If there is no stringlist defined for a rule, use rule name directly
comment|// This is convenience for defining single line mmp statements
if|if
condition|(
name|project
operator|->
name|values
argument_list|(
name|item
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|t
operator|<<
name|item
operator|<<
name|endl
expr_stmt|;
block|}
else|else
block|{
foreach|foreach
control|(
name|QString
name|itemRow
decl|,
name|project
operator|->
name|values
argument_list|(
name|item
argument_list|)
control|)
block|{
name|t
operator|<<
name|itemRow
operator|<<
name|endl
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|writeBldInfContent
name|void
name|SymbianMakefileGenerator
operator|::
name|writeBldInfContent
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|,
name|bool
name|addDeploymentExtension
parameter_list|,
specifier|const
name|QString
modifier|&
name|iconFile
parameter_list|)
block|{
comment|// Read user defined bld inf rules
name|QMap
argument_list|<
name|QString
argument_list|,
name|QStringList
argument_list|>
name|userBldInfRules
decl_stmt|;
for|for
control|(
name|QMap
argument_list|<
name|QString
argument_list|,
name|QStringList
argument_list|>
operator|::
name|iterator
name|it
init|=
name|project
operator|->
name|variables
argument_list|()
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|project
operator|->
name|variables
argument_list|()
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
name|it
operator|.
name|key
argument_list|()
operator|.
name|startsWith
argument_list|(
name|BLD_INF_RULES_BASE
argument_list|)
condition|)
block|{
name|QString
name|newKey
init|=
name|it
operator|.
name|key
argument_list|()
operator|.
name|mid
argument_list|(
sizeof|sizeof
argument_list|(
name|BLD_INF_RULES_BASE
argument_list|)
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|newKey
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Warning: Empty BLD_INF_RULES key encountered\n"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|QStringList
name|newValues
decl_stmt|;
name|QStringList
name|values
init|=
name|it
operator|.
name|value
argument_list|()
decl_stmt|;
foreach|foreach
control|(
name|QString
name|item
decl|,
name|values
control|)
block|{
comment|// If there is no stringlist defined for a rule, use rule name directly
comment|// This is convenience for defining single line statements
if|if
condition|(
name|project
operator|->
name|values
argument_list|(
name|item
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|newValues
operator|<<
name|item
expr_stmt|;
block|}
else|else
block|{
foreach|foreach
control|(
name|QString
name|itemRow
decl|,
name|project
operator|->
name|values
argument_list|(
name|item
argument_list|)
control|)
block|{
name|newValues
operator|<<
name|itemRow
expr_stmt|;
block|}
block|}
block|}
name|userBldInfRules
operator|.
name|insert
argument_list|(
name|newKey
argument_list|,
name|newValues
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Add includes of subdirs bld.inf files
name|QString
name|currentPath
init|=
name|qmake_getpwd
argument_list|()
decl_stmt|;
name|QDir
name|directory
argument_list|(
name|currentPath
argument_list|)
decl_stmt|;
specifier|const
name|QStringList
modifier|&
name|subdirs
init|=
name|project
operator|->
name|values
argument_list|(
literal|"SUBDIRS"
argument_list|)
decl_stmt|;
foreach|foreach
control|(
name|QString
name|item
decl|,
name|subdirs
control|)
block|{
name|bool
name|fromFile
init|=
literal|false
decl_stmt|;
name|QString
name|fixedItem
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
name|item
operator|+
literal|".file"
argument_list|)
condition|)
block|{
name|fixedItem
operator|=
name|project
operator|->
name|first
argument_list|(
name|item
operator|+
literal|".file"
argument_list|)
expr_stmt|;
name|fromFile
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
name|item
operator|+
literal|".subdir"
argument_list|)
condition|)
block|{
name|fixedItem
operator|=
name|project
operator|->
name|first
argument_list|(
name|item
operator|+
literal|".subdir"
argument_list|)
expr_stmt|;
name|fromFile
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|fixedItem
operator|=
name|item
expr_stmt|;
name|fromFile
operator|=
name|item
operator|.
name|endsWith
argument_list|(
name|Option
operator|::
name|pro_ext
argument_list|)
expr_stmt|;
block|}
name|QString
name|condition
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
name|item
operator|+
literal|".condition"
argument_list|)
condition|)
name|condition
operator|=
name|project
operator|->
name|first
argument_list|(
name|item
operator|+
literal|".condition"
argument_list|)
expr_stmt|;
name|QFileInfo
name|subdir
argument_list|(
name|fileInfo
argument_list|(
name|fixedItem
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|relativePath
init|=
name|directory
operator|.
name|relativeFilePath
argument_list|(
name|fixedItem
argument_list|)
decl_stmt|;
name|QString
name|fullProName
init|=
name|subdir
operator|.
name|absoluteFilePath
argument_list|()
decl_stmt|;
name|QString
name|bldinfFilename
decl_stmt|;
name|QString
name|subdirFileName
decl_stmt|;
if|if
condition|(
name|fromFile
condition|)
block|{
name|subdirFileName
operator|=
name|subdir
operator|.
name|completeBaseName
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|subdirFileName
operator|=
name|subdir
operator|.
name|fileName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|subdir
operator|.
name|isDir
argument_list|()
condition|)
block|{
comment|// Subdir is a regular project
name|bldinfFilename
operator|=
name|relativePath
operator|+
name|QString
argument_list|(
literal|"/"
argument_list|)
operator|+
name|QString
argument_list|(
name|BLD_INF_FILENAME
argument_list|)
expr_stmt|;
name|fullProName
operator|+=
name|QString
argument_list|(
literal|"/"
argument_list|)
operator|+
name|subdirFileName
operator|+
name|Option
operator|::
name|pro_ext
expr_stmt|;
block|}
else|else
block|{
comment|// Subdir is actually a .pro file
if|if
condition|(
name|relativePath
operator|.
name|contains
argument_list|(
literal|"/"
argument_list|)
condition|)
block|{
comment|// .pro not in same directory as parent .pro
name|relativePath
operator|.
name|remove
argument_list|(
name|relativePath
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
operator|+
literal|1
argument_list|,
name|relativePath
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|bldinfFilename
operator|=
name|relativePath
expr_stmt|;
block|}
else|else
block|{
comment|// .pro and parent .pro in same directory
name|bldinfFilename
operator|=
name|QString
argument_list|(
literal|"./"
argument_list|)
expr_stmt|;
block|}
name|bldinfFilename
operator|+=
name|QString
argument_list|(
name|BLD_INF_FILENAME
literal|"."
argument_list|)
operator|+
name|subdirFileName
expr_stmt|;
block|}
name|QString
name|uid
init|=
name|generate_uid
argument_list|(
name|fullProName
argument_list|)
decl_stmt|;
name|QString
name|bldinfDefine
init|=
name|QString
argument_list|(
literal|"BLD_INF_"
argument_list|)
operator|+
name|subdirFileName
operator|+
name|QString
argument_list|(
literal|"_"
argument_list|)
operator|+
name|uid
decl_stmt|;
name|bldinfDefine
operator|=
name|bldinfDefine
operator|.
name|toUpper
argument_list|()
expr_stmt|;
comment|// replace anything not alphanumeric with underscore
name|QRegExp
name|replacementMask
argument_list|(
name|DEFINE_REPLACE_REGEXP
argument_list|)
decl_stmt|;
name|bldinfDefine
operator|.
name|replace
argument_list|(
name|replacementMask
argument_list|,
name|QLatin1String
argument_list|(
literal|"_"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|condition
operator|.
name|isEmpty
argument_list|()
condition|)
name|t
operator|<<
literal|"#if defined("
operator|<<
name|condition
operator|<<
literal|")"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"#ifndef "
operator|<<
name|bldinfDefine
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\t#include \""
operator|<<
name|bldinfFilename
operator|<<
literal|"\""
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"#endif"
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|condition
operator|.
name|isEmpty
argument_list|()
condition|)
name|t
operator|<<
literal|"#endif"
operator|<<
name|endl
expr_stmt|;
block|}
comment|// Add supported project platforms
name|t
operator|<<
name|endl
operator|<<
name|BLD_INF_TAG_PLATFORMS
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
literal|0
operator|!=
name|project
operator|->
name|values
argument_list|(
literal|"SYMBIAN_PLATFORMS"
argument_list|)
operator|.
name|size
argument_list|()
condition|)
name|t
operator|<<
name|project
operator|->
name|values
argument_list|(
literal|"SYMBIAN_PLATFORMS"
argument_list|)
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|QStringList
name|userItems
init|=
name|userBldInfRules
operator|.
name|value
argument_list|(
name|BLD_INF_TAG_PLATFORMS
argument_list|)
decl_stmt|;
foreach|foreach
control|(
name|QString
name|item
decl|,
name|userItems
control|)
name|t
operator|<<
name|item
operator|<<
name|endl
expr_stmt|;
name|userBldInfRules
operator|.
name|remove
argument_list|(
name|BLD_INF_TAG_PLATFORMS
argument_list|)
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
comment|// Add project mmps and old style extension makefiles
name|QString
name|mmpTag
decl_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
name|SYMBIAN_TEST_CONFIG
argument_list|)
condition|)
name|mmpTag
operator|=
name|QLatin1String
argument_list|(
name|BLD_INF_TAG_TESTMMPFILES
argument_list|)
expr_stmt|;
else|else
name|mmpTag
operator|=
name|QLatin1String
argument_list|(
name|BLD_INF_TAG_MMPFILES
argument_list|)
expr_stmt|;
name|t
operator|<<
name|endl
operator|<<
name|mmpTag
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|writeBldInfMkFilePart
argument_list|(
name|t
argument_list|,
name|addDeploymentExtension
argument_list|)
expr_stmt|;
if|if
condition|(
name|targetType
operator|!=
name|TypeSubdirs
condition|)
name|t
operator|<<
name|mmpFileName
operator|<<
name|endl
expr_stmt|;
name|userItems
operator|=
name|userBldInfRules
operator|.
name|value
argument_list|(
name|mmpTag
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|QString
name|item
decl|,
name|userItems
control|)
name|t
operator|<<
name|item
operator|<<
name|endl
expr_stmt|;
name|userBldInfRules
operator|.
name|remove
argument_list|(
name|mmpTag
argument_list|)
expr_stmt|;
name|QString
name|extensionTag
decl_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
name|SYMBIAN_TEST_CONFIG
argument_list|)
condition|)
name|extensionTag
operator|=
name|QLatin1String
argument_list|(
name|BLD_INF_TAG_TESTEXTENSIONS
argument_list|)
expr_stmt|;
else|else
name|extensionTag
operator|=
name|QLatin1String
argument_list|(
name|BLD_INF_TAG_EXTENSIONS
argument_list|)
expr_stmt|;
name|t
operator|<<
name|endl
operator|<<
name|extensionTag
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
comment|// Generate extension rules
name|writeBldInfExtensionRulesPart
argument_list|(
name|t
argument_list|,
name|iconFile
argument_list|)
expr_stmt|;
name|userItems
operator|=
name|userBldInfRules
operator|.
name|value
argument_list|(
name|extensionTag
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|QString
name|item
decl|,
name|userItems
control|)
name|t
operator|<<
name|item
operator|<<
name|endl
expr_stmt|;
name|userBldInfRules
operator|.
name|remove
argument_list|(
name|extensionTag
argument_list|)
expr_stmt|;
comment|// Add rest of the user defined content
for|for
control|(
name|QMap
argument_list|<
name|QString
argument_list|,
name|QStringList
argument_list|>
operator|::
name|iterator
name|it
init|=
name|userBldInfRules
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|userBldInfRules
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|t
operator|<<
name|endl
operator|<<
name|endl
operator|<<
name|it
operator|.
name|key
argument_list|()
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|userItems
operator|=
name|it
operator|.
name|value
argument_list|()
expr_stmt|;
foreach|foreach
control|(
name|QString
name|item
decl|,
name|userItems
control|)
name|t
operator|<<
name|item
operator|<<
name|endl
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|appendIfnotExist
name|void
name|SymbianMakefileGenerator
operator|::
name|appendIfnotExist
parameter_list|(
name|QStringList
modifier|&
name|list
parameter_list|,
name|QString
name|value
parameter_list|)
block|{
if|if
condition|(
operator|!
name|list
operator|.
name|contains
argument_list|(
name|value
argument_list|)
condition|)
name|list
operator|+=
name|value
expr_stmt|;
block|}
end_function
begin_function
DECL|function|appendIfnotExist
name|void
name|SymbianMakefileGenerator
operator|::
name|appendIfnotExist
parameter_list|(
name|QStringList
modifier|&
name|list
parameter_list|,
name|QStringList
name|values
parameter_list|)
block|{
foreach|foreach
control|(
name|QString
name|item
decl|,
name|values
control|)
name|appendIfnotExist
argument_list|(
name|list
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeTrailingPathSeparators
name|QString
name|SymbianMakefileGenerator
operator|::
name|removeTrailingPathSeparators
parameter_list|(
name|QString
modifier|&
name|file
parameter_list|)
block|{
name|QString
name|ret
init|=
name|file
decl_stmt|;
if|if
condition|(
name|ret
operator|.
name|endsWith
argument_list|(
name|QDir
operator|::
name|separator
argument_list|()
argument_list|)
condition|)
block|{
name|ret
operator|.
name|remove
argument_list|(
name|ret
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|generateCleanCommands
name|void
name|SymbianMakefileGenerator
operator|::
name|generateCleanCommands
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|toClean
parameter_list|,
specifier|const
name|QString
modifier|&
name|cmd
parameter_list|,
specifier|const
name|QString
modifier|&
name|cmdOptions
parameter_list|,
specifier|const
name|QString
modifier|&
name|itemPrefix
parameter_list|,
specifier|const
name|QString
modifier|&
name|itemSuffix
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|toClean
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|item
init|=
name|toClean
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|item
operator|.
name|prepend
argument_list|(
name|itemPrefix
argument_list|)
operator|.
name|append
argument_list|(
name|itemSuffix
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|t
operator|<<
literal|"\t-@ if EXIST \""
operator|<<
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|item
argument_list|)
operator|<<
literal|"\" "
expr_stmt|;
name|t
operator|<<
name|cmd
operator|<<
literal|" "
operator|<<
name|cmdOptions
operator|<<
literal|" \""
operator|<<
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|item
argument_list|)
operator|<<
literal|"\""
operator|<<
name|endl
expr_stmt|;
else|#
directive|else
name|t
operator|<<
literal|"\t-if test -e "
operator|<<
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|item
argument_list|)
operator|<<
literal|"; then "
expr_stmt|;
name|t
operator|<<
name|cmd
operator|<<
literal|" "
operator|<<
name|cmdOptions
operator|<<
literal|" "
operator|<<
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|item
argument_list|)
operator|<<
literal|"; fi"
operator|<<
name|endl
expr_stmt|;
endif|#
directive|endif
block|}
block|}
end_function
begin_function
DECL|function|generateDistcleanTargets
name|void
name|SymbianMakefileGenerator
operator|::
name|generateDistcleanTargets
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|)
block|{
name|t
operator|<<
literal|"dodistclean:"
operator|<<
name|endl
expr_stmt|;
specifier|const
name|QStringList
modifier|&
name|subdirs
init|=
name|project
operator|->
name|values
argument_list|(
literal|"SUBDIRS"
argument_list|)
decl_stmt|;
foreach|foreach
control|(
name|QString
name|item
decl|,
name|subdirs
control|)
block|{
name|bool
name|fromFile
init|=
literal|false
decl_stmt|;
name|QString
name|fixedItem
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
name|item
operator|+
literal|".file"
argument_list|)
condition|)
block|{
name|fixedItem
operator|=
name|project
operator|->
name|first
argument_list|(
name|item
operator|+
literal|".file"
argument_list|)
expr_stmt|;
name|fromFile
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
name|item
operator|+
literal|".subdir"
argument_list|)
condition|)
block|{
name|fixedItem
operator|=
name|project
operator|->
name|first
argument_list|(
name|item
operator|+
literal|".subdir"
argument_list|)
expr_stmt|;
name|fromFile
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|fromFile
operator|=
name|item
operator|.
name|endsWith
argument_list|(
name|Option
operator|::
name|pro_ext
argument_list|)
expr_stmt|;
name|fixedItem
operator|=
name|item
expr_stmt|;
block|}
name|QFileInfo
name|fi
argument_list|(
name|fileInfo
argument_list|(
name|fixedItem
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fromFile
condition|)
block|{
name|t
operator|<<
literal|"\t-$(MAKE) -f \""
operator|<<
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|fi
operator|.
name|absoluteFilePath
argument_list|()
operator|+
literal|"/Makefile"
argument_list|)
operator|<<
literal|"\" dodistclean"
operator|<<
name|endl
expr_stmt|;
block|}
else|else
block|{
name|QString
name|itemName
init|=
name|fi
operator|.
name|fileName
argument_list|()
decl_stmt|;
name|int
name|extIndex
init|=
name|itemName
operator|.
name|lastIndexOf
argument_list|(
name|Option
operator|::
name|pro_ext
argument_list|)
decl_stmt|;
if|if
condition|(
name|extIndex
condition|)
name|fixedItem
operator|=
name|fi
operator|.
name|absolutePath
argument_list|()
operator|+
literal|"/"
operator|+
name|QString
argument_list|(
literal|"Makefile."
argument_list|)
operator|+
name|itemName
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
name|extIndex
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"\t-$(MAKE) -f \""
operator|<<
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|fixedItem
argument_list|)
operator|<<
literal|"\" dodistclean"
operator|<<
name|endl
expr_stmt|;
block|}
block|}
name|generatedFiles
operator|<<
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|fileInfo
argument_list|(
name|Option
operator|::
name|output
operator|.
name|fileName
argument_list|()
argument_list|)
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
expr_stmt|;
comment|// bld.inf
name|generatedFiles
operator|<<
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_INTERNAL_PRL_FILE"
argument_list|)
expr_stmt|;
comment|// Add generated prl files for cleanup
name|generatedFiles
operator|<<
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_DISTCLEAN"
argument_list|)
expr_stmt|;
comment|// Add any additional files marked for distclean
name|QStringList
name|fixedFiles
decl_stmt|;
name|QStringList
name|fixedDirs
decl_stmt|;
foreach|foreach
control|(
name|QString
name|item
decl|,
name|generatedFiles
control|)
block|{
name|QString
name|fixedItem
init|=
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|fileInfo
argument_list|(
name|item
argument_list|)
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fixedFiles
operator|.
name|contains
argument_list|(
name|fixedItem
argument_list|)
condition|)
block|{
name|fixedFiles
operator|<<
name|fixedItem
expr_stmt|;
block|}
block|}
foreach|foreach
control|(
name|QString
name|item
decl|,
name|generatedDirs
control|)
block|{
name|QString
name|fixedItem
init|=
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|fileInfo
argument_list|(
name|item
argument_list|)
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fixedDirs
operator|.
name|contains
argument_list|(
name|fixedItem
argument_list|)
condition|)
block|{
name|fixedDirs
operator|<<
name|fixedItem
expr_stmt|;
block|}
block|}
name|generateCleanCommands
argument_list|(
name|t
argument_list|,
name|fixedFiles
argument_list|,
literal|"$(DEL_FILE)"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|generateCleanCommands
argument_list|(
name|t
argument_list|,
name|fixedDirs
argument_list|,
literal|"$(DEL_DIR)"
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"distclean: clean dodistclean"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
block|}
end_function
begin_comment
comment|// Returns a string that can be used as a dependency to loc file on other targets
end_comment
begin_function
DECL|function|generateLocFileTarget
name|QString
name|SymbianMakefileGenerator
operator|::
name|generateLocFileTarget
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|,
specifier|const
name|QString
modifier|&
name|locCmd
parameter_list|)
block|{
name|QString
name|locFile
decl_stmt|;
if|if
condition|(
name|targetType
operator|==
name|TypeExe
operator|&&
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"no_icon"
argument_list|)
condition|)
block|{
name|locFile
operator|=
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|generateLocFileName
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|<<
name|locFile
operator|<<
name|QLatin1String
argument_list|(
literal|": "
argument_list|)
operator|<<
name|project
operator|->
name|values
argument_list|(
literal|"SYMBIAN_MATCHED_TRANSLATIONS"
argument_list|)
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|locCmd
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
name|locFile
operator|+=
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
block|}
return|return
name|locFile
return|;
block|}
end_function
end_unit
