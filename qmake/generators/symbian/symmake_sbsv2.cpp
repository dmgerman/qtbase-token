begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the qmake application of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"symmake_sbsv2.h"
end_include
begin_include
include|#
directive|include
file|"initprojectdeploy_symbian.h"
end_include
begin_include
include|#
directive|include
file|<qstring.h>
end_include
begin_include
include|#
directive|include
file|<qstringlist.h>
end_include
begin_include
include|#
directive|include
file|<qdir.h>
end_include
begin_include
include|#
directive|include
file|<qdatetime.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_comment
comment|// Included from tools/shared
end_comment
begin_include
include|#
directive|include
file|<symbian/epocroot_p.h>
end_include
begin_constructor
DECL|function|SymbianSbsv2MakefileGenerator
name|SymbianSbsv2MakefileGenerator
operator|::
name|SymbianSbsv2MakefileGenerator
parameter_list|()
member_init_list|:
name|SymbianMakefileGenerator
argument_list|()
block|{ }
end_constructor
begin_destructor
DECL|function|~SymbianSbsv2MakefileGenerator
name|SymbianSbsv2MakefileGenerator
operator|::
name|~
name|SymbianSbsv2MakefileGenerator
parameter_list|()
block|{ }
end_destructor
begin_define
DECL|macro|FLM_DEST_DIR
define|#
directive|define
name|FLM_DEST_DIR
value|"epoc32/tools/makefile_templates/qt"
end_define
begin_define
DECL|macro|FLM_SOURCE_DIR
define|#
directive|define
name|FLM_SOURCE_DIR
value|"/mkspecs/symbian-sbsv2/flm/qt"
end_define
begin_define
DECL|macro|PLATFORM_GCCE
define|#
directive|define
name|PLATFORM_GCCE
value|"gcce"
end_define
begin_define
DECL|macro|PLATFORM_WINSCW
define|#
directive|define
name|PLATFORM_WINSCW
value|"winscw"
end_define
begin_define
DECL|macro|PLATFORM_ARM_PREFIX
define|#
directive|define
name|PLATFORM_ARM_PREFIX
value|"arm"
end_define
begin_define
DECL|macro|BUILD_DEBUG
define|#
directive|define
name|BUILD_DEBUG
value|"udeb"
end_define
begin_define
DECL|macro|BUILD_RELEASE
define|#
directive|define
name|BUILD_RELEASE
value|"urel"
end_define
begin_define
DECL|macro|SBS_RVCT_PREFIX
define|#
directive|define
name|SBS_RVCT_PREFIX
value|"rvct"
end_define
begin_decl_stmt
DECL|variable|winscwPlatform
specifier|static
name|QString
name|winscwPlatform
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|armPlatformPrefix
specifier|static
name|QString
name|armPlatformPrefix
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|gccePlatform
specifier|static
name|QString
name|gccePlatform
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|sbsRvctPrefix
specifier|static
name|QString
name|sbsRvctPrefix
decl_stmt|;
end_decl_stmt
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
end_if
begin_decl_stmt
specifier|extern
name|char
modifier|*
modifier|*
name|environ
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|fixFlmCmd
specifier|static
name|void
name|fixFlmCmd
parameter_list|(
name|QString
modifier|*
name|cmdLine
parameter_list|,
specifier|const
name|QMap
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
modifier|&
name|commandsToReplace
parameter_list|)
block|{
comment|// If commandItem starts with any $$QMAKE_* commands, do a replace for SBS equivalent.
comment|// Command replacement is done only for the start of the command or right after
comment|// concatenation operators (&& and ||), as otherwise unwanted replacements might occur.
specifier|static
name|QString
name|cmdFind
argument_list|(
name|QLatin1String
argument_list|(
literal|"(^|&&\\s*|\\|\\|\\s*)%1"
argument_list|)
argument_list|)
decl_stmt|;
specifier|static
name|QString
name|cmdReplace
argument_list|(
name|QLatin1String
argument_list|(
literal|"\\1%1"
argument_list|)
argument_list|)
decl_stmt|;
comment|// $$escape_expand(\\n\\t) doesn't work for bld.inf files, but is often used as command
comment|// separator, so replace it with "&&" command concatenator.
name|cmdLine
operator|->
name|replace
argument_list|(
literal|"\n\t"
argument_list|,
literal|"&&"
argument_list|)
expr_stmt|;
comment|// Strip output suppression, as sbsv2 can't handle it in FLMs. Cannot be done by simply
comment|// adding "@" to commandsToReplace, as it'd get handled last due to alphabetical ordering,
comment|// potentially masking other commands that need replacing.
if|if
condition|(
name|cmdLine
operator|->
name|contains
argument_list|(
literal|"@"
argument_list|)
condition|)
name|cmdLine
operator|->
name|replace
argument_list|(
name|QRegExp
argument_list|(
name|cmdFind
operator|.
name|arg
argument_list|(
literal|"@"
argument_list|)
argument_list|)
argument_list|,
name|cmdReplace
operator|.
name|arg
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
comment|// Iterate command replacements in reverse alphabetical order of keys so
comment|// that keys which are starts of other longer keys are iterated after longer keys.
name|QMapIterator
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|cmdIter
argument_list|(
name|commandsToReplace
argument_list|)
decl_stmt|;
name|cmdIter
operator|.
name|toBack
argument_list|()
expr_stmt|;
while|while
condition|(
name|cmdIter
operator|.
name|hasPrevious
argument_list|()
condition|)
block|{
name|cmdIter
operator|.
name|previous
argument_list|()
expr_stmt|;
if|if
condition|(
name|cmdLine
operator|->
name|contains
argument_list|(
name|cmdIter
operator|.
name|key
argument_list|()
argument_list|)
condition|)
name|cmdLine
operator|->
name|replace
argument_list|(
name|QRegExp
argument_list|(
name|cmdFind
operator|.
name|arg
argument_list|(
name|cmdIter
operator|.
name|key
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|cmdReplace
operator|.
name|arg
argument_list|(
name|cmdIter
operator|.
name|value
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Sbsv2 toolchain strips all backslashes (even double ones) from option parameters, so just
comment|// assume all backslashes are directory separators and replace them with slashes.
comment|// Problem: If some command actually needs backslashes for something else than dir separator,
comment|// we are out of luck.
name|cmdLine
operator|->
name|replace
argument_list|(
literal|"\\"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Copies Qt FLMs to correct location under epocroot.
end_comment
begin_comment
comment|// This is not done by configure as it is possible to change epocroot after configure.
end_comment
begin_function
DECL|function|exportFlm
name|void
name|SymbianSbsv2MakefileGenerator
operator|::
name|exportFlm
parameter_list|()
block|{
specifier|static
name|bool
name|flmExportDone
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|flmExportDone
condition|)
block|{
name|QDir
name|sourceDir
init|=
name|QDir
argument_list|(
name|QLibraryInfo
operator|::
name|location
argument_list|(
name|QLibraryInfo
operator|::
name|PrefixPath
argument_list|)
operator|+
name|FLM_SOURCE_DIR
argument_list|)
decl_stmt|;
name|QFileInfoList
name|sourceInfos
init|=
name|sourceDir
operator|.
name|entryInfoList
argument_list|(
name|QDir
operator|::
name|Files
argument_list|)
decl_stmt|;
name|QDir
name|destDir
argument_list|(
name|qt_epocRoot
argument_list|()
operator|+
name|FLM_DEST_DIR
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|destDir
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
name|destDir
operator|.
name|mkpath
argument_list|(
name|destDir
operator|.
name|absolutePath
argument_list|()
argument_list|)
condition|)
name|generatedDirs
operator|<<
name|destDir
operator|.
name|absolutePath
argument_list|()
expr_stmt|;
block|}
foreach|foreach
control|(
name|QFileInfo
name|item
decl|,
name|sourceInfos
control|)
block|{
name|QFileInfo
name|destInfo
init|=
name|QFileInfo
argument_list|(
name|destDir
operator|.
name|absolutePath
argument_list|()
operator|+
literal|"/"
operator|+
name|item
operator|.
name|fileName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|destInfo
operator|.
name|exists
argument_list|()
operator|||
name|destInfo
operator|.
name|lastModified
argument_list|()
operator|!=
name|item
operator|.
name|lastModified
argument_list|()
condition|)
block|{
if|if
condition|(
name|destInfo
operator|.
name|exists
argument_list|()
condition|)
name|QFile
operator|::
name|remove
argument_list|(
name|destInfo
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|QFile
operator|::
name|copy
argument_list|(
name|item
operator|.
name|absoluteFilePath
argument_list|()
argument_list|,
name|destInfo
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
condition|)
name|generatedFiles
operator|<<
name|destInfo
operator|.
name|absoluteFilePath
argument_list|()
expr_stmt|;
else|else
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Error: Could not copy '%s' -> '%s'\n"
argument_list|,
name|qPrintable
argument_list|(
name|item
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|destInfo
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|flmExportDone
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|findInstalledCompilerVersions
name|void
name|SymbianSbsv2MakefileGenerator
operator|::
name|findInstalledCompilerVersions
parameter_list|(
specifier|const
name|QString
modifier|&
name|matchExpression
parameter_list|,
specifier|const
name|QString
modifier|&
name|versionPrefix
parameter_list|,
name|QStringList
modifier|*
name|versionList
parameter_list|)
block|{
comment|// No need to be able to find env variables on other operating systems,
comment|// as only linux and windows have support for symbian-sbsv2 toolchain
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|char
modifier|*
name|entry
init|=
literal|0
decl_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
name|QRegExp
name|matcher
argument_list|(
name|matchExpression
argument_list|)
decl_stmt|;
while|while
condition|(
operator|(
name|entry
operator|=
name|environ
index|[
name|count
operator|++
index|]
operator|)
condition|)
block|{
if|if
condition|(
name|matcher
operator|.
name|exactMatch
argument_list|(
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|entry
argument_list|)
argument_list|)
operator|&&
name|fileInfo
argument_list|(
name|matcher
operator|.
name|cap
argument_list|(
name|matcher
operator|.
name|captureCount
argument_list|()
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
comment|// First capture (index 0) is the whole match, which is skipped.
comment|// Next n captures are version numbers, which are interesting.
comment|// Final capture is the env var value, which we already used, so that is skipped, too.
name|int
name|capture
init|=
literal|1
decl_stmt|;
name|int
name|finalCapture
init|=
name|matcher
operator|.
name|captureCount
argument_list|()
operator|-
literal|1
decl_stmt|;
name|QString
name|version
init|=
name|versionPrefix
decl_stmt|;
while|while
condition|(
name|capture
operator|<=
name|finalCapture
condition|)
block|{
name|version
operator|.
name|append
argument_list|(
name|matcher
operator|.
name|cap
argument_list|(
name|capture
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|capture
operator|!=
name|finalCapture
condition|)
name|version
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|)
expr_stmt|;
name|capture
operator|++
expr_stmt|;
block|}
operator|*
name|versionList
operator|<<
name|version
expr_stmt|;
block|}
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|findGcceVersions
name|void
name|SymbianSbsv2MakefileGenerator
operator|::
name|findGcceVersions
parameter_list|(
name|QStringList
modifier|*
name|gcceVersionList
parameter_list|,
name|QString
modifier|*
name|defaultVersion
parameter_list|)
block|{
name|QString
name|matchStr
init|=
name|QLatin1String
argument_list|(
literal|"SBS_GCCE(\\d)(\\d)(\\d)BIN=(.*)"
argument_list|)
decl_stmt|;
name|findInstalledCompilerVersions
argument_list|(
name|matchStr
argument_list|,
name|gccePlatform
argument_list|,
name|gcceVersionList
argument_list|)
expr_stmt|;
name|QString
name|qtGcceVersion
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|qgetenv
argument_list|(
literal|"QT_GCCE_VERSION"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|qtGcceVersion
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|QRegExp
argument_list|(
literal|"\\d+\\.\\d+\\.\\d+"
argument_list|)
operator|.
name|exactMatch
argument_list|(
name|qtGcceVersion
argument_list|)
condition|)
block|{
operator|*
name|defaultVersion
operator|=
name|gccePlatform
operator|+
name|qtGcceVersion
expr_stmt|;
block|}
else|else
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Warning: Variable QT_GCCE_VERSION ('%s') is in incorrect "
literal|"format, expected format is: 'x.y.z'. Attempting to autodetect GCCE version.\n"
argument_list|,
name|qPrintable
argument_list|(
name|qtGcceVersion
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|defaultVersion
operator|->
name|isEmpty
argument_list|()
operator|&&
name|gcceVersionList
operator|->
name|size
argument_list|()
condition|)
block|{
name|gcceVersionList
operator|->
name|sort
argument_list|()
expr_stmt|;
operator|*
name|defaultVersion
operator|=
name|gcceVersionList
operator|->
name|last
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|findRvctVersions
name|void
name|SymbianSbsv2MakefileGenerator
operator|::
name|findRvctVersions
parameter_list|(
name|QStringList
modifier|*
name|rvctVersionList
parameter_list|,
name|QString
modifier|*
name|defaultVersion
parameter_list|)
block|{
name|QString
name|matchStr
init|=
name|QLatin1String
argument_list|(
literal|"RVCT(\\d)(\\d)BIN=(.*)"
argument_list|)
decl_stmt|;
name|findInstalledCompilerVersions
argument_list|(
name|matchStr
argument_list|,
name|sbsRvctPrefix
argument_list|,
name|rvctVersionList
argument_list|)
expr_stmt|;
name|QString
name|qtRvctVersion
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|qgetenv
argument_list|(
literal|"QT_RVCT_VERSION"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|qtRvctVersion
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|QRegExp
argument_list|(
literal|"\\d+\\.\\d+"
argument_list|)
operator|.
name|exactMatch
argument_list|(
name|qtRvctVersion
argument_list|)
condition|)
block|{
operator|*
name|defaultVersion
operator|=
name|sbsRvctPrefix
operator|+
name|qtRvctVersion
expr_stmt|;
block|}
else|else
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Warning: Variable QT_RVCT_VERSION ('%s') is in incorrect "
literal|"format, expected format is: 'x.y'.\n"
argument_list|,
name|qPrintable
argument_list|(
name|qtRvctVersion
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|configClause
name|QString
name|SymbianSbsv2MakefileGenerator
operator|::
name|configClause
parameter_list|(
specifier|const
name|QString
modifier|&
name|platform
parameter_list|,
specifier|const
name|QString
modifier|&
name|build
parameter_list|,
specifier|const
name|QString
modifier|&
name|compilerVersion
parameter_list|,
specifier|const
name|QString
modifier|&
name|clauseTemplate
parameter_list|)
block|{
name|QString
name|retval
decl_stmt|;
if|if
condition|(
name|QString
operator|::
name|compare
argument_list|(
name|platform
argument_list|,
name|winscwPlatform
argument_list|)
operator|==
literal|0
condition|)
block|{
name|retval
operator|=
name|clauseTemplate
operator|.
name|arg
argument_list|(
name|build
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|platform
operator|.
name|startsWith
argument_list|(
name|armPlatformPrefix
argument_list|)
condition|)
block|{
name|QString
name|fixedCompilerVersion
init|=
name|compilerVersion
decl_stmt|;
name|fixedCompilerVersion
operator|.
name|replace
argument_list|(
literal|"."
argument_list|,
literal|"_"
argument_list|)
expr_stmt|;
name|retval
operator|=
name|clauseTemplate
operator|.
name|arg
argument_list|(
name|platform
operator|.
name|mid
argument_list|(
sizeof|sizeof
argument_list|(
name|PLATFORM_ARM_PREFIX
argument_list|)
operator|-
literal|1
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|build
argument_list|)
operator|.
name|arg
argument_list|(
name|fixedCompilerVersion
argument_list|)
expr_stmt|;
block|}
comment|// else - Unsupported platform for makefile target, return empty clause
return|return
name|retval
return|;
block|}
end_function
begin_function
DECL|function|writeSbsDeploymentList
name|void
name|SymbianSbsv2MakefileGenerator
operator|::
name|writeSbsDeploymentList
parameter_list|(
specifier|const
name|DeploymentList
modifier|&
name|depList
parameter_list|,
name|QTextStream
modifier|&
name|t
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|depList
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|t
operator|<<
literal|"START EXTENSION qt/qmake_emulator_deployment"
operator|<<
name|endl
expr_stmt|;
name|QString
name|fromItem
init|=
name|depList
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|from
decl_stmt|;
name|QString
name|toItem
init|=
name|depList
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|to
decl_stmt|;
name|fromItem
operator|.
name|replace
argument_list|(
literal|"\\"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|toItem
operator|.
name|replace
argument_list|(
literal|"\\"
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
comment|// add drive if it doesn't have one yet
if|if
condition|(
name|toItem
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|&&
name|toItem
index|[
literal|1
index|]
operator|!=
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
condition|)
name|toItem
operator|.
name|prepend
argument_list|(
name|QDir
operator|::
name|current
argument_list|()
operator|.
name|absolutePath
argument_list|()
operator|.
name|left
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|t
operator|<<
literal|"OPTION DEPLOY_SOURCE "
operator|<<
name|fromItem
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"OPTION DEPLOY_TARGET "
operator|<<
name|toItem
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"END"
operator|<<
name|endl
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|writeMkFile
name|void
name|SymbianSbsv2MakefileGenerator
operator|::
name|writeMkFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|wrapperFileName
parameter_list|,
name|bool
name|deploymentOnly
parameter_list|)
block|{
comment|// Can't use extension makefile with sbsv2
name|Q_UNUSED
argument_list|(
name|wrapperFileName
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|deploymentOnly
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeWrapperMakefile
name|void
name|SymbianSbsv2MakefileGenerator
operator|::
name|writeWrapperMakefile
parameter_list|(
name|QFile
modifier|&
name|wrapperFile
parameter_list|,
name|bool
name|isPrimaryMakefile
parameter_list|)
block|{
specifier|static
name|QString
name|debugBuild
decl_stmt|;
specifier|static
name|QString
name|releaseBuild
decl_stmt|;
specifier|static
name|QString
name|defaultGcceCompilerVersion
decl_stmt|;
specifier|static
name|QString
name|defaultRvctCompilerVersion
decl_stmt|;
specifier|static
name|QStringList
name|rvctVersions
decl_stmt|;
specifier|static
name|QStringList
name|gcceVersions
decl_stmt|;
specifier|static
name|QStringList
name|allArmCompilerVersions
decl_stmt|;
comment|// Initialize static variables used in makefile creation
if|if
condition|(
name|debugBuild
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|debugBuild
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
name|BUILD_DEBUG
argument_list|)
argument_list|)
expr_stmt|;
name|releaseBuild
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
name|BUILD_RELEASE
argument_list|)
argument_list|)
expr_stmt|;
name|winscwPlatform
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
name|PLATFORM_WINSCW
argument_list|)
argument_list|)
expr_stmt|;
name|gccePlatform
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
name|PLATFORM_GCCE
argument_list|)
argument_list|)
expr_stmt|;
name|armPlatformPrefix
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
name|PLATFORM_ARM_PREFIX
argument_list|)
argument_list|)
expr_stmt|;
name|sbsRvctPrefix
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
name|SBS_RVCT_PREFIX
argument_list|)
argument_list|)
expr_stmt|;
name|findGcceVersions
argument_list|(
operator|&
name|gcceVersions
argument_list|,
operator|&
name|defaultGcceCompilerVersion
argument_list|)
expr_stmt|;
name|findRvctVersions
argument_list|(
operator|&
name|rvctVersions
argument_list|,
operator|&
name|defaultRvctCompilerVersion
argument_list|)
expr_stmt|;
name|allArmCompilerVersions
operator|<<
name|rvctVersions
operator|<<
name|gcceVersions
expr_stmt|;
if|if
condition|(
operator|!
name|allArmCompilerVersions
operator|.
name|size
argument_list|()
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Warning: No HW compilers detected. "
literal|"Please install either GCCE or RVCT compiler to enable release builds.\n"
argument_list|)
expr_stmt|;
block|}
block|}
name|QStringList
name|allPlatforms
decl_stmt|;
foreach|foreach
control|(
name|QString
name|platform
decl|,
name|project
operator|->
name|values
argument_list|(
literal|"SYMBIAN_PLATFORMS"
argument_list|)
control|)
block|{
name|allPlatforms
operator|<<
name|platform
operator|.
name|toLower
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|gcceVersions
operator|.
name|size
argument_list|()
condition|)
name|allPlatforms
operator|.
name|removeAll
argument_list|(
name|gccePlatform
argument_list|)
expr_stmt|;
name|QString
name|testClause
decl_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
name|SYMBIAN_TEST_CONFIG
argument_list|)
condition|)
name|testClause
operator|=
name|QLatin1String
argument_list|(
literal|".test"
argument_list|)
expr_stmt|;
else|else
name|testClause
operator|=
name|QLatin1String
argument_list|(
literal|""
argument_list|)
expr_stmt|;
comment|// Note: armClause is used for gcce, too, which has a side effect
comment|//       of requiring armv* platform(s) in SYMBIAN_PLATFORMS in order
comment|//       to get any compiler version specific targets.
name|QString
name|armClause
init|=
literal|" -c "
name|PLATFORM_ARM_PREFIX
literal|".%1.%2.%3"
operator|+
name|testClause
decl_stmt|;
name|QString
name|genericArmClause
decl_stmt|;
if|if
condition|(
name|defaultRvctCompilerVersion
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Note: Argument %3 needs to be empty string in this version of clause
name|genericArmClause
operator|=
literal|" -c "
name|PLATFORM_ARM_PREFIX
literal|"%1_%2%3"
operator|+
name|testClause
expr_stmt|;
block|}
else|else
block|{
comment|// If defaultRvctCompilerVersion is defined, use specific sbs clause for "generic" clause
name|genericArmClause
operator|=
name|armClause
expr_stmt|;
block|}
name|QString
name|winscwClause
init|=
literal|" -c "
name|PLATFORM_WINSCW
literal|"_%1.mwccinc"
operator|+
name|testClause
decl_stmt|;
empty_stmt|;
name|QStringList
name|armPlatforms
init|=
name|allPlatforms
operator|.
name|filter
argument_list|(
name|QRegExp
argument_list|(
literal|"^"
name|PLATFORM_ARM_PREFIX
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|allArmCompilerVersions
operator|.
name|size
argument_list|()
condition|)
block|{
foreach|foreach
control|(
name|QString
name|item
decl|,
name|armPlatforms
control|)
block|{
name|allPlatforms
operator|.
name|removeAll
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
name|armPlatforms
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|QStringList
name|allClauses
decl_stmt|;
name|QStringList
name|debugClauses
decl_stmt|;
name|QStringList
name|releaseClauses
decl_stmt|;
comment|// Only winscw and arm platforms are supported
name|QStringList
name|debugPlatforms
init|=
name|allPlatforms
decl_stmt|;
name|QStringList
name|releasePlatforms
init|=
name|allPlatforms
decl_stmt|;
name|releasePlatforms
operator|.
name|removeAll
argument_list|(
name|winscwPlatform
argument_list|)
expr_stmt|;
comment|// No release for emulator
if|if
condition|(
operator|!
name|releasePlatforms
operator|.
name|size
argument_list|()
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Warning: No valid release platforms in SYMBIAN_PLATFORMS (%s)\n"
literal|"Most likely required compiler(s) are not properly installed.\n"
argument_list|,
name|qPrintable
argument_list|(
name|project
operator|->
name|values
argument_list|(
literal|"SYMBIAN_PLATFORMS"
argument_list|)
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|debugPlatforms
operator|.
name|contains
argument_list|(
name|winscwPlatform
argument_list|)
condition|)
name|debugClauses
operator|<<
name|configClause
argument_list|(
name|winscwPlatform
argument_list|,
name|debugBuild
argument_list|,
name|QString
argument_list|()
argument_list|,
name|winscwClause
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|QString
name|item
decl|,
name|armPlatforms
control|)
block|{
comment|// Only use single clause per arm platform even if multiple compiler versions were found,
comment|// otherwise we get makefile target collisions from sbsv2 toolchain.
if|if
condition|(
name|rvctVersions
operator|.
name|size
argument_list|()
condition|)
block|{
name|debugClauses
operator|<<
name|configClause
argument_list|(
name|item
argument_list|,
name|debugBuild
argument_list|,
name|defaultRvctCompilerVersion
argument_list|,
name|genericArmClause
argument_list|)
expr_stmt|;
name|releaseClauses
operator|<<
name|configClause
argument_list|(
name|item
argument_list|,
name|releaseBuild
argument_list|,
name|defaultRvctCompilerVersion
argument_list|,
name|genericArmClause
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|debugClauses
operator|<<
name|configClause
argument_list|(
name|item
argument_list|,
name|debugBuild
argument_list|,
name|defaultGcceCompilerVersion
argument_list|,
name|armClause
argument_list|)
expr_stmt|;
name|releaseClauses
operator|<<
name|configClause
argument_list|(
name|item
argument_list|,
name|releaseBuild
argument_list|,
name|defaultGcceCompilerVersion
argument_list|,
name|armClause
argument_list|)
expr_stmt|;
block|}
block|}
name|allClauses
operator|<<
name|debugClauses
operator|<<
name|releaseClauses
expr_stmt|;
name|QTextStream
name|t
argument_list|(
operator|&
name|wrapperFile
argument_list|)
decl_stmt|;
name|MakefileGenerator
operator|::
name|writeHeader
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"MAKEFILE          = "
operator|<<
name|fileInfo
argument_list|(
name|wrapperFile
operator|.
name|fileName
argument_list|()
argument_list|)
operator|.
name|fileName
argument_list|()
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"QMAKE             = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_QMAKE"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"DEL_FILE          = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_DEL_FILE"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"DEL_DIR           = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_DEL_DIR"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"CHK_DIR_EXISTS    = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_CHK_DIR_EXISTS"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"MKDIR             = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_MKDIR"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"MOVE              = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_MOVE"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"DEBUG_PLATFORMS   = "
operator|<<
name|debugPlatforms
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"RELEASE_PLATFORMS = "
operator|<<
name|releasePlatforms
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"MAKE              = make"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"SBS               = sbs"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"DEFINES"
operator|<<
literal|'\t'
operator|<<
literal|" = "
operator|<<
name|varGlue
argument_list|(
literal|"PRL_EXPORT_DEFINES"
argument_list|,
literal|"-D"
argument_list|,
literal|" -D"
argument_list|,
literal|" "
argument_list|)
operator|<<
name|varGlue
argument_list|(
literal|"QMAKE_COMPILER_DEFINES"
argument_list|,
literal|"-D"
argument_list|,
literal|"-D"
argument_list|,
literal|" "
argument_list|)
operator|<<
name|varGlue
argument_list|(
literal|"DEFINES"
argument_list|,
literal|"-D"
argument_list|,
literal|" -D"
argument_list|,
literal|""
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"INCPATH"
operator|<<
literal|'\t'
operator|<<
literal|" = "
expr_stmt|;
for|for
control|(
name|QMap
argument_list|<
name|QString
argument_list|,
name|QStringList
argument_list|>
operator|::
name|iterator
name|it
init|=
name|systeminclude
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|systeminclude
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QStringList
name|values
init|=
name|it
operator|.
name|value
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|t
operator|<<
literal|" -I\""
operator|<<
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|<<
literal|"\" "
expr_stmt|;
block|}
block|}
name|t
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"first: default"
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|isPrimaryMakefile
condition|)
block|{
name|t
operator|<<
literal|"all:"
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"default: all"
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
else|else
block|{
name|t
operator|<<
literal|"all: debug release"
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|debugPlatforms
operator|.
name|contains
argument_list|(
name|winscwPlatform
argument_list|)
condition|)
name|t
operator|<<
literal|"default: debug-winscw"
expr_stmt|;
elseif|else
if|if
condition|(
name|debugPlatforms
operator|.
name|size
argument_list|()
condition|)
name|t
operator|<<
literal|"default: debug-"
operator|<<
name|debugPlatforms
operator|.
name|first
argument_list|()
expr_stmt|;
else|else
name|t
operator|<<
literal|"default: all"
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
name|QString
name|qmakeCmd
init|=
literal|"\t$(QMAKE) \""
operator|+
name|project
operator|->
name|projectFile
argument_list|()
operator|+
literal|"\" "
operator|+
name|buildArgs
argument_list|()
decl_stmt|;
name|t
operator|<<
literal|"qmake:"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|qmakeCmd
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|BLD_INF_FILENAME
literal|": "
operator|<<
name|project
operator|->
name|projectFile
argument_list|()
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|qmakeCmd
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
name|QString
name|locFileDep
init|=
name|generateLocFileTarget
argument_list|(
name|t
argument_list|,
name|qmakeCmd
argument_list|)
decl_stmt|;
name|t
operator|<<
literal|"debug: "
operator|<<
name|locFileDep
operator|<<
name|BLD_INF_FILENAME
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\t$(SBS)"
expr_stmt|;
foreach|foreach
control|(
name|QString
name|clause
decl|,
name|debugClauses
control|)
block|{
name|t
operator|<<
name|clause
expr_stmt|;
block|}
name|t
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"clean-debug: "
operator|<<
name|BLD_INF_FILENAME
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\t$(SBS) reallyclean --toolcheck=off"
expr_stmt|;
foreach|foreach
control|(
name|QString
name|clause
decl|,
name|debugClauses
control|)
block|{
name|t
operator|<<
name|clause
expr_stmt|;
block|}
name|t
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"freeze-debug: "
operator|<<
name|BLD_INF_FILENAME
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\t$(SBS) freeze"
expr_stmt|;
foreach|foreach
control|(
name|QString
name|clause
decl|,
name|debugClauses
control|)
block|{
name|t
operator|<<
name|clause
expr_stmt|;
block|}
name|t
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"release: "
operator|<<
name|locFileDep
operator|<<
name|BLD_INF_FILENAME
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\t$(SBS)"
expr_stmt|;
foreach|foreach
control|(
name|QString
name|clause
decl|,
name|releaseClauses
control|)
block|{
name|t
operator|<<
name|clause
expr_stmt|;
block|}
name|t
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"clean-release: "
operator|<<
name|BLD_INF_FILENAME
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\t$(SBS) reallyclean --toolcheck=off"
expr_stmt|;
foreach|foreach
control|(
name|QString
name|clause
decl|,
name|releaseClauses
control|)
block|{
name|t
operator|<<
name|clause
expr_stmt|;
block|}
name|t
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"freeze-release: "
operator|<<
name|BLD_INF_FILENAME
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\t$(SBS) freeze"
expr_stmt|;
foreach|foreach
control|(
name|QString
name|clause
decl|,
name|releaseClauses
control|)
block|{
name|t
operator|<<
name|clause
expr_stmt|;
block|}
name|t
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|QString
name|defaultGcceArmVersion
decl_stmt|;
if|if
condition|(
name|armPlatforms
operator|.
name|size
argument_list|()
condition|)
block|{
name|defaultGcceArmVersion
operator|=
name|armPlatforms
operator|.
name|first
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|defaultGcceArmVersion
operator|=
name|QLatin1String
argument_list|(
literal|"armv5"
argument_list|)
expr_stmt|;
block|}
comment|// For more specific builds, targets are in this form:
comment|// release-armv5 - generic target, compiler version determined by toolchain or autodetection
comment|// release-armv5-rvct4.0 - compiler version specific target
foreach|foreach
control|(
name|QString
name|item
decl|,
name|debugPlatforms
control|)
block|{
name|QString
name|clause
decl_stmt|;
if|if
condition|(
name|item
operator|.
name|compare
argument_list|(
name|winscwPlatform
argument_list|)
operator|==
literal|0
condition|)
name|clause
operator|=
name|configClause
argument_list|(
name|item
argument_list|,
name|debugBuild
argument_list|,
name|QString
argument_list|()
argument_list|,
name|winscwClause
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|item
operator|.
name|compare
argument_list|(
name|gccePlatform
argument_list|)
operator|==
literal|0
condition|)
name|clause
operator|=
name|configClause
argument_list|(
name|defaultGcceArmVersion
argument_list|,
name|debugBuild
argument_list|,
name|defaultGcceCompilerVersion
argument_list|,
name|armClause
argument_list|)
expr_stmt|;
else|else
comment|// use generic arm clause
name|clause
operator|=
name|configClause
argument_list|(
name|item
argument_list|,
name|debugBuild
argument_list|,
name|defaultRvctCompilerVersion
argument_list|,
name|genericArmClause
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"debug-"
operator|<<
name|item
operator|<<
literal|": "
operator|<<
name|locFileDep
operator|<<
name|BLD_INF_FILENAME
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\t$(SBS)"
operator|<<
name|clause
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"clean-debug-"
operator|<<
name|item
operator|<<
literal|": "
operator|<<
name|BLD_INF_FILENAME
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\t$(SBS) reallyclean"
operator|<<
name|clause
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"freeze-debug-"
operator|<<
name|item
operator|<<
literal|": "
operator|<<
name|BLD_INF_FILENAME
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\t$(SBS) freeze"
operator|<<
name|clause
operator|<<
name|endl
expr_stmt|;
block|}
foreach|foreach
control|(
name|QString
name|item
decl|,
name|releasePlatforms
control|)
block|{
name|QString
name|clause
decl_stmt|;
if|if
condition|(
name|item
operator|.
name|compare
argument_list|(
name|gccePlatform
argument_list|)
operator|==
literal|0
condition|)
name|clause
operator|=
name|configClause
argument_list|(
name|defaultGcceArmVersion
argument_list|,
name|releaseBuild
argument_list|,
name|defaultGcceCompilerVersion
argument_list|,
name|armClause
argument_list|)
expr_stmt|;
else|else
comment|// use generic arm clause
name|clause
operator|=
name|configClause
argument_list|(
name|item
argument_list|,
name|releaseBuild
argument_list|,
name|defaultRvctCompilerVersion
argument_list|,
name|genericArmClause
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"release-"
operator|<<
name|item
operator|<<
literal|": "
operator|<<
name|locFileDep
operator|<<
name|BLD_INF_FILENAME
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\t$(SBS)"
operator|<<
name|clause
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"clean-release-"
operator|<<
name|item
operator|<<
literal|": "
operator|<<
name|BLD_INF_FILENAME
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\t$(SBS) reallyclean"
operator|<<
name|clause
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"freeze-release-"
operator|<<
name|item
operator|<<
literal|": "
operator|<<
name|BLD_INF_FILENAME
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\t$(SBS) freeze"
operator|<<
name|clause
operator|<<
name|endl
expr_stmt|;
block|}
foreach|foreach
control|(
name|QString
name|item
decl|,
name|armPlatforms
control|)
block|{
foreach|foreach
control|(
name|QString
name|compilerVersion
decl|,
name|allArmCompilerVersions
control|)
block|{
name|QString
name|debugClause
init|=
name|configClause
argument_list|(
name|item
argument_list|,
name|debugBuild
argument_list|,
name|compilerVersion
argument_list|,
name|armClause
argument_list|)
decl_stmt|;
name|QString
name|releaseClause
init|=
name|configClause
argument_list|(
name|item
argument_list|,
name|releaseBuild
argument_list|,
name|compilerVersion
argument_list|,
name|armClause
argument_list|)
decl_stmt|;
name|t
operator|<<
literal|"debug-"
operator|<<
name|item
operator|<<
literal|"-"
operator|<<
name|compilerVersion
operator|<<
literal|": "
operator|<<
name|locFileDep
operator|<<
name|BLD_INF_FILENAME
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\t$(SBS)"
operator|<<
name|debugClause
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"clean-debug-"
operator|<<
name|item
operator|<<
literal|"-"
operator|<<
name|compilerVersion
operator|<<
literal|": "
operator|<<
name|BLD_INF_FILENAME
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\t$(SBS) reallyclean"
operator|<<
name|debugClause
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"freeze-debug-"
operator|<<
name|item
operator|<<
literal|"-"
operator|<<
name|compilerVersion
operator|<<
literal|": "
operator|<<
name|BLD_INF_FILENAME
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\t$(SBS) freeze"
operator|<<
name|debugClause
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"release-"
operator|<<
name|item
operator|<<
literal|"-"
operator|<<
name|compilerVersion
operator|<<
literal|": "
operator|<<
name|locFileDep
operator|<<
name|BLD_INF_FILENAME
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\t$(SBS)"
operator|<<
name|releaseClause
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"clean-release-"
operator|<<
name|item
operator|<<
literal|"-"
operator|<<
name|compilerVersion
operator|<<
literal|": "
operator|<<
name|BLD_INF_FILENAME
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\t$(SBS) reallyclean"
operator|<<
name|releaseClause
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"freeze-release-"
operator|<<
name|item
operator|<<
literal|"-"
operator|<<
name|compilerVersion
operator|<<
literal|": "
operator|<<
name|BLD_INF_FILENAME
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\t$(SBS) freeze"
operator|<<
name|releaseClause
operator|<<
name|endl
expr_stmt|;
block|}
block|}
name|t
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"export: "
operator|<<
name|BLD_INF_FILENAME
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\t$(SBS) export"
expr_stmt|;
foreach|foreach
control|(
name|QString
name|clause
decl|,
name|allClauses
control|)
block|{
name|t
operator|<<
name|clause
expr_stmt|;
block|}
name|t
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"cleanexport: "
operator|<<
name|BLD_INF_FILENAME
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\t$(SBS) cleanexport"
expr_stmt|;
foreach|foreach
control|(
name|QString
name|clause
decl|,
name|allClauses
control|)
block|{
name|t
operator|<<
name|clause
expr_stmt|;
block|}
name|t
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
comment|// Typically one wants to freeze release binaries, so make plain freeze target equal to
comment|// freeze-release. If freezing of debug binaries is needed for some reason, then
comment|// freeze-debug target should be used. There is no point to try freezing both with one
comment|// target as both produce the same def file.
name|t
operator|<<
literal|"freeze: freeze-release"
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
comment|// Add all extra targets including extra compiler targets also to wrapper makefile,
comment|// even though many of them may have already been added to bld.inf as FLMs.
comment|// This is to enable use of targets like 'mocables', which call targets generated by extra compilers.
if|if
condition|(
name|targetType
operator|!=
name|TypeSubdirs
condition|)
block|{
name|t
operator|<<
name|extraTargetsCache
expr_stmt|;
name|t
operator|<<
name|extraCompilersCache
expr_stmt|;
block|}
else|else
block|{
name|QList
argument_list|<
name|MakefileGenerator
operator|::
name|SubTarget
operator|*
argument_list|>
name|subtargets
init|=
name|findSubDirsSubTargets
argument_list|()
decl_stmt|;
name|writeSubTargets
argument_list|(
name|t
argument_list|,
name|subtargets
argument_list|,
name|SubTargetSkipDefaultVariables
operator||
name|SubTargetSkipDefaultTargets
argument_list|)
expr_stmt|;
name|qDeleteAll
argument_list|(
name|subtargets
argument_list|)
expr_stmt|;
block|}
name|generateDistcleanTargets
argument_list|(
name|t
argument_list|)
expr_stmt|;
comment|// Do not check for tools when doing generic clean, as most tools are not actually needed for
comment|// cleaning. Mainly this is relevant for environments that do not have winscw compiler.
name|t
operator|<<
literal|"clean: "
operator|<<
name|BLD_INF_FILENAME
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\t-$(SBS) reallyclean --toolcheck=off"
expr_stmt|;
foreach|foreach
control|(
name|QString
name|clause
decl|,
name|allClauses
control|)
block|{
name|t
operator|<<
name|clause
expr_stmt|;
block|}
name|t
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeBldInfExtensionRulesPart
name|void
name|SymbianSbsv2MakefileGenerator
operator|::
name|writeBldInfExtensionRulesPart
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|,
specifier|const
name|QString
modifier|&
name|iconTargetFile
parameter_list|)
block|{
comment|// Makes sure we have needed FLMs in place.
name|exportFlm
argument_list|()
expr_stmt|;
comment|// Parse extra compilers data
name|QStringList
name|defines
decl_stmt|;
name|QStringList
name|incPath
decl_stmt|;
name|defines
operator|<<
name|varGlue
argument_list|(
literal|"PRL_EXPORT_DEFINES"
argument_list|,
literal|"-D"
argument_list|,
literal|" -D"
argument_list|,
literal|" "
argument_list|)
operator|<<
name|varGlue
argument_list|(
literal|"QMAKE_COMPILER_DEFINES"
argument_list|,
literal|"-D"
argument_list|,
literal|"-D"
argument_list|,
literal|" "
argument_list|)
operator|<<
name|varGlue
argument_list|(
literal|"DEFINES"
argument_list|,
literal|"-D"
argument_list|,
literal|" -D"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
for|for
control|(
name|QMap
argument_list|<
name|QString
argument_list|,
name|QStringList
argument_list|>
operator|::
name|iterator
name|it
init|=
name|systeminclude
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|systeminclude
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QStringList
name|values
init|=
name|it
operator|.
name|value
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|incPath
operator|<<
name|QLatin1String
argument_list|(
literal|" -I\""
argument_list|)
operator|+
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|+
literal|"\""
expr_stmt|;
block|}
block|}
name|QMap
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|commandsToReplace
decl_stmt|;
name|commandsToReplace
operator|.
name|insert
argument_list|(
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_COPY"
argument_list|)
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
argument_list|,
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_SBSV2_COPY"
argument_list|)
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
name|commandsToReplace
operator|.
name|insert
argument_list|(
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_COPY_DIR"
argument_list|)
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
argument_list|,
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_SBSV2_COPY_DIR"
argument_list|)
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
name|commandsToReplace
operator|.
name|insert
argument_list|(
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_MOVE"
argument_list|)
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
argument_list|,
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_SBSV2_MOVE"
argument_list|)
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
name|commandsToReplace
operator|.
name|insert
argument_list|(
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_DEL_FILE"
argument_list|)
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
argument_list|,
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_SBSV2_DEL_FILE"
argument_list|)
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
name|commandsToReplace
operator|.
name|insert
argument_list|(
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_MKDIR"
argument_list|)
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
argument_list|,
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_SBSV2_MKDIR"
argument_list|)
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
name|commandsToReplace
operator|.
name|insert
argument_list|(
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_DEL_DIR"
argument_list|)
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
argument_list|,
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_SBSV2_DEL_DIR"
argument_list|)
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
name|commandsToReplace
operator|.
name|insert
argument_list|(
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_DEL_TREE"
argument_list|)
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
argument_list|,
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_SBSV2_DEL_TREE"
argument_list|)
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
comment|// Write extra compilers and targets to initialize QMAKE_ET_* variables
comment|// Cache results to avoid duplicate calls when creating wrapper makefile
name|QTextStream
name|extraCompilerStream
argument_list|(
operator|&
name|extraCompilersCache
argument_list|)
decl_stmt|;
name|QTextStream
name|extraTargetStream
argument_list|(
operator|&
name|extraTargetsCache
argument_list|)
decl_stmt|;
name|writeExtraCompilerTargets
argument_list|(
name|extraCompilerStream
argument_list|)
expr_stmt|;
name|writeExtraTargets
argument_list|(
name|extraTargetStream
argument_list|)
expr_stmt|;
comment|// Figure out everything the target depends on as we don't want to run extra targets that
comment|// are not necessary.
name|QStringList
name|allPreDeps
decl_stmt|;
foreach|foreach
control|(
name|QString
name|item
decl|,
name|project
operator|->
name|values
argument_list|(
literal|"PRE_TARGETDEPS"
argument_list|)
control|)
block|{
name|allPreDeps
operator|.
name|append
argument_list|(
name|fileInfo
argument_list|(
name|item
argument_list|)
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
foreach|foreach
control|(
name|QString
name|item
decl|,
name|project
operator|->
name|values
argument_list|(
literal|"GENERATED_SOURCES"
argument_list|)
control|)
block|{
name|allPreDeps
operator|.
name|append
argument_list|(
name|fileInfo
argument_list|(
name|item
argument_list|)
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|QMap
argument_list|<
name|QString
argument_list|,
name|QStringList
argument_list|>
operator|::
name|iterator
name|it
init|=
name|sources
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|sources
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QString
name|currentSourcePath
init|=
name|it
operator|.
name|key
argument_list|()
decl_stmt|;
name|QStringList
name|values
init|=
name|it
operator|.
name|value
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|values
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|sourceFile
init|=
name|currentSourcePath
operator|+
literal|"/"
operator|+
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QStringList
name|deps
init|=
name|findDependencies
argument_list|(
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|sourceFile
argument_list|)
argument_list|)
decl_stmt|;
foreach|foreach
control|(
name|QString
name|depItem
decl|,
name|deps
control|)
block|{
name|appendIfnotExist
argument_list|(
name|allPreDeps
argument_list|,
name|fileInfo
argument_list|(
name|depItem
argument_list|)
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
comment|// Write FLM rules for all extra targets and compilers that we depend on to build the target.
name|QStringList
name|extraTargets
decl_stmt|;
name|extraTargets
operator|<<
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_EXTRA_TARGETS"
argument_list|)
operator|<<
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_EXTRA_COMPILERS"
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|QString
name|item
decl|,
name|extraTargets
control|)
block|{
foreach|foreach
control|(
name|QString
name|targetItem
decl|,
name|project
operator|->
name|values
argument_list|(
name|QLatin1String
argument_list|(
literal|"QMAKE_INTERNAL_ET_PARSED_TARGETS."
argument_list|)
operator|+
name|item
argument_list|)
control|)
block|{
comment|// Make sure targetpath is absolute
name|QString
name|absoluteTarget
init|=
name|fileInfo
argument_list|(
name|targetItem
argument_list|)
operator|.
name|absoluteFilePath
argument_list|()
decl_stmt|;
if|if
condition|(
name|allPreDeps
operator|.
name|contains
argument_list|(
name|absoluteTarget
argument_list|)
condition|)
block|{
name|QStringList
name|deps
init|=
name|project
operator|->
name|values
argument_list|(
name|QLatin1String
argument_list|(
literal|"QMAKE_INTERNAL_ET_PARSED_DEPS."
argument_list|)
operator|+
name|item
operator|+
name|targetItem
argument_list|)
decl_stmt|;
name|QString
name|commandItem
init|=
name|project
operator|->
name|values
argument_list|(
name|QLatin1String
argument_list|(
literal|"QMAKE_INTERNAL_ET_PARSED_CMD."
argument_list|)
operator|+
name|item
operator|+
name|targetItem
argument_list|)
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
comment|// Make sure all deps paths are absolute
name|QString
name|absoluteDeps
decl_stmt|;
foreach|foreach
control|(
name|QString
name|depItem
decl|,
name|deps
control|)
block|{
if|if
condition|(
operator|!
name|depItem
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|absoluteDeps
operator|.
name|append
argument_list|(
name|fileInfo
argument_list|(
name|depItem
argument_list|)
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
expr_stmt|;
name|absoluteDeps
operator|.
name|append
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
block|}
name|t
operator|<<
literal|"START EXTENSION qt/qmake_extra_pre_targetdep.export"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"OPTION PREDEP_TARGET "
operator|<<
name|absoluteTarget
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"OPTION DEPS "
operator|<<
name|absoluteDeps
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|commandItem
operator|.
name|indexOf
argument_list|(
literal|"$(INCPATH)"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
name|commandItem
operator|.
name|replace
argument_list|(
literal|"$(INCPATH)"
argument_list|,
name|incPath
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|commandItem
operator|.
name|indexOf
argument_list|(
literal|"$(DEFINES)"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
name|commandItem
operator|.
name|replace
argument_list|(
literal|"$(DEFINES)"
argument_list|,
name|defines
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
name|fixFlmCmd
argument_list|(
operator|&
name|commandItem
argument_list|,
name|commandsToReplace
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"OPTION COMMAND "
operator|<<
name|commandItem
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"END"
operator|<<
name|endl
expr_stmt|;
block|}
block|}
block|}
name|t
operator|<<
name|endl
expr_stmt|;
comment|// Write deployment rules
name|QString
name|remoteTestPath
init|=
name|qt_epocRoot
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"epoc32/winscw/c/private/"
argument_list|)
operator|+
name|privateDirUid
decl_stmt|;
name|DeploymentList
name|depList
decl_stmt|;
comment|//write emulator deployment
name|t
operator|<<
literal|"#if defined(WINSCW)"
operator|<<
name|endl
expr_stmt|;
name|initProjectDeploySymbian
argument_list|(
name|project
argument_list|,
name|depList
argument_list|,
name|remoteTestPath
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|QLatin1String
argument_list|(
name|EMULATOR_DEPLOYMENT_PLATFORM
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|,
name|generatedDirs
argument_list|,
name|generatedFiles
argument_list|)
expr_stmt|;
name|writeSbsDeploymentList
argument_list|(
name|depList
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"#endif"
operator|<<
name|endl
expr_stmt|;
comment|//write ROM deployment
name|remoteTestPath
operator|=
name|qt_epocRoot
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"epoc32/data/z/private/"
argument_list|)
operator|+
name|privateDirUid
expr_stmt|;
name|depList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|initProjectDeploySymbian
argument_list|(
name|project
argument_list|,
name|depList
argument_list|,
name|remoteTestPath
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|,
name|QLatin1String
argument_list|(
name|ROM_DEPLOYMENT_PLATFORM
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|,
name|generatedDirs
argument_list|,
name|generatedFiles
argument_list|)
expr_stmt|;
name|writeSbsDeploymentList
argument_list|(
name|depList
argument_list|,
name|t
argument_list|)
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
comment|// Write post link rules
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_POST_LINK"
argument_list|)
condition|)
block|{
name|QString
name|postLinkCmd
init|=
name|var
argument_list|(
literal|"QMAKE_POST_LINK"
argument_list|)
decl_stmt|;
name|fixFlmCmd
argument_list|(
operator|&
name|postLinkCmd
argument_list|,
name|commandsToReplace
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"START EXTENSION qt/qmake_post_link"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"OPTION POST_LINK_CMD "
operator|<<
name|postLinkCmd
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"OPTION LINK_TARGET "
operator|<<
name|fixedTarget
operator|<<
name|QLatin1String
argument_list|(
literal|"."
argument_list|)
operator|<<
name|getTargetExtension
argument_list|()
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"END"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
block|}
comment|// Application icon generation
name|QStringList
name|icons
init|=
name|project
operator|->
name|values
argument_list|(
literal|"ICON"
argument_list|)
decl_stmt|;
if|if
condition|(
name|icons
operator|.
name|size
argument_list|()
condition|)
block|{
name|QString
name|icon
init|=
name|icons
operator|.
name|first
argument_list|()
decl_stmt|;
if|if
condition|(
name|icons
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Warning: Only first icon specified in ICON variable is used: '%s'."
argument_list|,
name|qPrintable
argument_list|(
name|icon
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"START EXTENSION s60/mifconv"
operator|<<
name|endl
expr_stmt|;
name|QFileInfo
name|iconInfo
init|=
name|fileInfo
argument_list|(
name|icon
argument_list|)
decl_stmt|;
name|QFileInfo
name|bldinf
argument_list|(
name|project
operator|->
name|values
argument_list|(
literal|"MAKEFILE"
argument_list|)
operator|.
name|first
argument_list|()
argument_list|)
decl_stmt|;
name|QString
name|iconPath
init|=
name|bldinf
operator|.
name|dir
argument_list|()
operator|.
name|relativeFilePath
argument_list|(
name|iconInfo
operator|.
name|path
argument_list|()
argument_list|)
decl_stmt|;
name|QString
name|iconFile
init|=
name|iconInfo
operator|.
name|baseName
argument_list|()
decl_stmt|;
name|QFileInfo
name|iconTargetInfo
init|=
name|fileInfo
argument_list|(
name|iconTargetFile
argument_list|)
decl_stmt|;
name|QString
name|iconTarget
init|=
name|iconTargetInfo
operator|.
name|fileName
argument_list|()
decl_stmt|;
name|t
operator|<<
literal|"OPTION SOURCES -c32 "
operator|<<
name|iconFile
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"OPTION SOURCEDIR "
operator|<<
name|iconPath
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"OPTION TARGETFILE "
operator|<<
name|iconTarget
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"OPTION SVGENCODINGVERSION 3"
operator|<<
name|endl
expr_stmt|;
comment|// Compatibility with S60 3.1 devices and up
name|t
operator|<<
literal|"END"
operator|<<
name|endl
expr_stmt|;
block|}
name|t
operator|<<
literal|"START EXTENSION qt/qmake_store_build"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"END"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
comment|// Handle QMAKE_CLEAN
name|QStringList
name|cleanFiles
init|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_CLEAN"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|cleanFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QStringList
name|absoluteCleanFiles
decl_stmt|;
foreach|foreach
control|(
name|QString
name|cleanFile
decl|,
name|cleanFiles
control|)
block|{
name|QFileInfo
name|fi
argument_list|(
name|cleanFile
argument_list|)
decl_stmt|;
name|QString
name|fileName
init|=
name|QLatin1String
argument_list|(
literal|"\""
argument_list|)
decl_stmt|;
name|fileName
operator|.
name|append
argument_list|(
name|fi
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
expr_stmt|;
name|fileName
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"\""
argument_list|)
argument_list|)
expr_stmt|;
name|absoluteCleanFiles
operator|<<
name|fileName
expr_stmt|;
block|}
name|t
operator|<<
literal|"START EXTENSION qt/qmake_clean"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"OPTION CLEAN_FILES "
operator|<<
name|absoluteCleanFiles
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"END"
operator|<<
name|endl
expr_stmt|;
block|}
name|t
operator|<<
name|endl
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeBldInfMkFilePart
name|void
name|SymbianSbsv2MakefileGenerator
operator|::
name|writeBldInfMkFilePart
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|,
name|bool
name|addDeploymentExtension
parameter_list|)
block|{
comment|// We don't generate extension makefile in sbsb2
name|Q_UNUSED
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|addDeploymentExtension
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|appendAbldTempDirs
name|void
name|SymbianSbsv2MakefileGenerator
operator|::
name|appendAbldTempDirs
parameter_list|(
name|QStringList
modifier|&
name|sysincspaths
parameter_list|,
name|QString
name|includepath
parameter_list|)
block|{
comment|//Do nothing
name|Q_UNUSED
argument_list|(
name|sysincspaths
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|includepath
argument_list|)
expr_stmt|;
block|}
end_function
end_unit
