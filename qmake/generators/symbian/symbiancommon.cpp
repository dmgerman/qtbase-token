begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the qmake application of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"symbiancommon.h"
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qxmlstream.h>
end_include
begin_comment
comment|// Included from tools/shared
end_comment
begin_include
include|#
directive|include
file|<symbian/epocroot_p.h>
end_include
begin_define
DECL|macro|RESOURCE_DIRECTORY_RESOURCE
define|#
directive|define
name|RESOURCE_DIRECTORY_RESOURCE
value|"\\\\resource\\\\apps\\\\"
end_define
begin_define
DECL|macro|RSS_RULES
define|#
directive|define
name|RSS_RULES
value|"RSS_RULES"
end_define
begin_define
DECL|macro|RSS_RULES_BASE
define|#
directive|define
name|RSS_RULES_BASE
value|"RSS_RULES."
end_define
begin_define
DECL|macro|RSS_TAG_NBROFICONS
define|#
directive|define
name|RSS_TAG_NBROFICONS
value|"number_of_icons"
end_define
begin_define
DECL|macro|RSS_TAG_ICONFILE
define|#
directive|define
name|RSS_TAG_ICONFILE
value|"icon_file"
end_define
begin_define
DECL|macro|RSS_TAG_HEADER
define|#
directive|define
name|RSS_TAG_HEADER
value|"header"
end_define
begin_define
DECL|macro|RSS_TAG_SERVICE_LIST
define|#
directive|define
name|RSS_TAG_SERVICE_LIST
value|"service_list"
end_define
begin_define
DECL|macro|RSS_TAG_FILE_OWNERSHIP_LIST
define|#
directive|define
name|RSS_TAG_FILE_OWNERSHIP_LIST
value|"file_ownership_list"
end_define
begin_define
DECL|macro|RSS_TAG_DATATYPE_LIST
define|#
directive|define
name|RSS_TAG_DATATYPE_LIST
value|"datatype_list"
end_define
begin_define
DECL|macro|RSS_TAG_FOOTER
define|#
directive|define
name|RSS_TAG_FOOTER
value|"footer"
end_define
begin_define
DECL|macro|RSS_TAG_DEFAULT
define|#
directive|define
name|RSS_TAG_DEFAULT
value|"default_rules"
end_define
begin_comment
DECL|macro|RSS_TAG_DEFAULT
comment|// Same as just giving rules without tag
end_comment
begin_define
DECL|macro|PLUGIN_COMMON_DEF_FILE_ACTUAL
define|#
directive|define
name|PLUGIN_COMMON_DEF_FILE_ACTUAL
value|"plugin_commonu.def"
end_define
begin_define
DECL|macro|MANUFACTURER_NOTE_FILE
define|#
directive|define
name|MANUFACTURER_NOTE_FILE
value|"manufacturer_note.txt"
end_define
begin_define
DECL|macro|DEFAULT_MANUFACTURER_NOTE
define|#
directive|define
name|DEFAULT_MANUFACTURER_NOTE
define|\
value|"The package is not supported for devices from this manufacturer. Please try the selfsigned " \     "version of the package instead."
end_define
begin_constructor
DECL|function|SymbianCommonGenerator
name|SymbianCommonGenerator
operator|::
name|SymbianCommonGenerator
parameter_list|(
name|MakefileGenerator
modifier|*
name|generator
parameter_list|)
member_init_list|:
name|generator
argument_list|(
name|generator
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|init
name|void
name|SymbianCommonGenerator
operator|::
name|init
parameter_list|()
block|{
name|QMakeProject
modifier|*
name|project
init|=
name|generator
operator|->
name|project
decl_stmt|;
name|fixedTarget
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_ORIG_TARGET"
argument_list|)
expr_stmt|;
if|if
condition|(
name|fixedTarget
operator|.
name|isEmpty
argument_list|()
condition|)
name|fixedTarget
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"TARGET"
argument_list|)
expr_stmt|;
name|fixedTarget
operator|=
name|generator
operator|->
name|unescapeFilePath
argument_list|(
name|fixedTarget
argument_list|)
expr_stmt|;
name|fixedTarget
operator|=
name|removePathSeparators
argument_list|(
name|fixedTarget
argument_list|)
expr_stmt|;
name|removeSpecialCharacters
argument_list|(
name|fixedTarget
argument_list|)
expr_stmt|;
comment|// This should not be empty since the mkspecs are supposed to set it if missing.
name|uid3
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"TARGET.UID3"
argument_list|)
operator|.
name|trimmed
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|project
operator|->
name|values
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|)
operator|.
name|contains
argument_list|(
literal|"app"
argument_list|)
condition|)
name|targetType
operator|=
name|TypeExe
expr_stmt|;
elseif|else
if|if
condition|(
operator|(
name|project
operator|->
name|values
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|)
operator|.
name|contains
argument_list|(
literal|"lib"
argument_list|)
condition|)
block|{
comment|// Check CONFIG to see if we are to build staticlib or dll
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"staticlib"
argument_list|)
operator|||
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"static"
argument_list|)
condition|)
name|targetType
operator|=
name|TypeLib
expr_stmt|;
elseif|else
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"plugin"
argument_list|)
condition|)
name|targetType
operator|=
name|TypePlugin
expr_stmt|;
else|else
name|targetType
operator|=
name|TypeDll
expr_stmt|;
block|}
else|else
block|{
name|targetType
operator|=
name|TypeSubdirs
expr_stmt|;
block|}
comment|// UID is valid as either hex or decimal, so just convert it to number and back to hex
comment|// to get proper string for private dir
name|bool
name|conversionOk
init|=
literal|false
decl_stmt|;
name|uint
name|uidNum
init|=
name|uid3
operator|.
name|toUInt
argument_list|(
operator|&
name|conversionOk
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|conversionOk
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Error: Invalid UID \"%s\".\n"
argument_list|,
name|uid3
operator|.
name|toUtf8
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|privateDirUid
operator|.
name|setNum
argument_list|(
name|uidNum
argument_list|,
literal|16
argument_list|)
expr_stmt|;
while|while
condition|(
name|privateDirUid
operator|.
name|length
argument_list|()
operator|<
literal|8
condition|)
name|privateDirUid
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|QLatin1Char
argument_list|(
literal|'0'
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|containsStartWithItem
name|bool
name|SymbianCommonGenerator
operator|::
name|containsStartWithItem
parameter_list|(
specifier|const
name|QChar
modifier|&
name|c
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|src
parameter_list|)
block|{
name|bool
name|result
init|=
literal|false
decl_stmt|;
foreach|foreach
control|(
name|QString
name|str
decl|,
name|src
control|)
block|{
if|if
condition|(
name|str
operator|.
name|startsWith
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|result
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|removeSpecialCharacters
name|void
name|SymbianCommonGenerator
operator|::
name|removeSpecialCharacters
parameter_list|(
name|QString
modifier|&
name|str
parameter_list|)
block|{
comment|// When modifying this method check also symbianRemoveSpecialCharacters in symbian.conf
name|QString
name|underscore
init|=
name|QLatin1String
argument_list|(
literal|"_"
argument_list|)
decl_stmt|;
name|str
operator|.
name|replace
argument_list|(
name|QLatin1String
argument_list|(
literal|"/"
argument_list|)
argument_list|,
name|underscore
argument_list|)
expr_stmt|;
name|str
operator|.
name|replace
argument_list|(
name|QLatin1String
argument_list|(
literal|"\\"
argument_list|)
argument_list|,
name|underscore
argument_list|)
expr_stmt|;
name|str
operator|.
name|replace
argument_list|(
name|QLatin1String
argument_list|(
literal|" "
argument_list|)
argument_list|,
name|underscore
argument_list|)
expr_stmt|;
name|str
operator|.
name|replace
argument_list|(
name|QLatin1String
argument_list|(
literal|":"
argument_list|)
argument_list|,
name|underscore
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|romPath
name|QString
name|romPath
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|)
block|{
if|if
condition|(
name|path
operator|.
name|length
argument_list|()
operator|>
literal|2
operator|&&
name|path
index|[
literal|1
index|]
operator|==
literal|':'
condition|)
return|return
name|QLatin1String
argument_list|(
literal|"z:"
argument_list|)
operator|+
name|path
operator|.
name|mid
argument_list|(
literal|2
argument_list|)
return|;
return|return
name|QLatin1String
argument_list|(
literal|"z:"
argument_list|)
operator|+
name|path
return|;
block|}
end_function
begin_function
DECL|function|generatePkgFile
name|void
name|SymbianCommonGenerator
operator|::
name|generatePkgFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|iconFile
parameter_list|,
name|bool
name|epocBuild
parameter_list|,
specifier|const
name|SymbianLocalizationList
modifier|&
name|symbianLocalizationList
parameter_list|)
block|{
name|QMakeProject
modifier|*
name|project
init|=
name|generator
operator|->
name|project
decl_stmt|;
name|QString
name|pkgFilename
init|=
name|Option
operator|::
name|output_dir
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|QString
argument_list|(
literal|"%1_template.pkg"
argument_list|)
operator|.
name|arg
argument_list|(
name|fixedTarget
argument_list|)
decl_stmt|;
name|QFile
name|pkgFile
argument_list|(
name|pkgFilename
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pkgFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
condition|)
block|{
name|PRINT_FILE_CREATE_ERROR
argument_list|(
name|pkgFilename
argument_list|)
expr_stmt|;
return|return;
block|}
name|QString
name|stubPkgFileName
init|=
name|Option
operator|::
name|output_dir
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|QString
argument_list|(
literal|"%1_stub.pkg"
argument_list|)
operator|.
name|arg
argument_list|(
name|fixedTarget
argument_list|)
decl_stmt|;
name|QFile
name|stubPkgFile
argument_list|(
name|stubPkgFileName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|stubPkgFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
condition|)
block|{
name|PRINT_FILE_CREATE_ERROR
argument_list|(
name|stubPkgFileName
argument_list|)
expr_stmt|;
return|return;
block|}
name|generatedFiles
operator|<<
name|pkgFile
operator|.
name|fileName
argument_list|()
expr_stmt|;
name|QTextStream
name|t
argument_list|(
operator|&
name|pkgFile
argument_list|)
decl_stmt|;
name|generatedFiles
operator|<<
name|stubPkgFile
operator|.
name|fileName
argument_list|()
expr_stmt|;
name|QTextStream
name|ts
argument_list|(
operator|&
name|stubPkgFile
argument_list|)
decl_stmt|;
name|QString
name|installerSisHeader
init|=
name|project
operator|->
name|values
argument_list|(
literal|"DEPLOYMENT.installer_header"
argument_list|)
operator|.
name|join
argument_list|(
literal|"\n"
argument_list|)
decl_stmt|;
if|if
condition|(
name|installerSisHeader
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Use correct protected UID for publishing if application UID is in protected range,
comment|// otherwise use self-signable test UID.
name|QRegExp
name|protUidMatcher
argument_list|(
literal|"0[xX][0-7].*"
argument_list|)
decl_stmt|;
if|if
condition|(
name|protUidMatcher
operator|.
name|exactMatch
argument_list|(
name|uid3
argument_list|)
condition|)
name|installerSisHeader
operator|=
name|QLatin1String
argument_list|(
literal|"0x2002CCCF"
argument_list|)
expr_stmt|;
else|else
name|installerSisHeader
operator|=
name|QLatin1String
argument_list|(
literal|"0xA000D7CE"
argument_list|)
expr_stmt|;
comment|// Use default self-signable UID
block|}
name|QString
name|wrapperStreamBuffer
decl_stmt|;
name|QTextStream
name|tw
argument_list|(
operator|&
name|wrapperStreamBuffer
argument_list|)
decl_stmt|;
name|QString
name|dateStr
init|=
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
operator|.
name|toString
argument_list|(
name|Qt
operator|::
name|ISODate
argument_list|)
decl_stmt|;
comment|// Header info
name|QString
name|wrapperPkgFilename
init|=
name|Option
operator|::
name|output_dir
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|QString
argument_list|(
literal|"%1_installer.%2"
argument_list|)
operator|.
name|arg
argument_list|(
name|fixedTarget
argument_list|)
operator|.
name|arg
argument_list|(
literal|"pkg"
argument_list|)
decl_stmt|;
name|QString
name|headerComment
init|=
literal|"; %1 generated by qmake at %2\n"
literal|"; This file is generated by qmake and should not be modified by the user\n"
literal|";\n\n"
decl_stmt|;
name|t
operator|<<
name|headerComment
operator|.
name|arg
argument_list|(
name|pkgFilename
argument_list|)
operator|.
name|arg
argument_list|(
name|dateStr
argument_list|)
expr_stmt|;
name|tw
operator|<<
name|headerComment
operator|.
name|arg
argument_list|(
name|wrapperPkgFilename
argument_list|)
operator|.
name|arg
argument_list|(
name|dateStr
argument_list|)
expr_stmt|;
name|ts
operator|<<
name|headerComment
operator|.
name|arg
argument_list|(
name|stubPkgFileName
argument_list|)
operator|.
name|arg
argument_list|(
name|dateStr
argument_list|)
expr_stmt|;
name|QStringList
name|commonRawPreRules
decl_stmt|;
name|QStringList
name|mainRawPreRules
decl_stmt|;
name|QStringList
name|instRawPreRules
decl_stmt|;
name|QStringList
name|stubRawPreRules
decl_stmt|;
comment|// Though there can't be more than one language or header line, use stringlists
comment|// in case user wants comments to go with the rules.
comment|// Note that it makes no sense to have file specific language or header rules,
comment|// except what is provided for installer header via "DEPLOYMENT.installer_header" variable,
comment|// because stub and main headers should always match. Vendor rules are similarly limited to
comment|// make code cleaner as it is unlikely anyone will want different vendor in different files.
name|QStringList
name|languageRules
decl_stmt|;
name|QStringList
name|headerRules
decl_stmt|;
name|QStringList
name|vendorRules
decl_stmt|;
name|QStringList
name|commonRawPostRules
decl_stmt|;
name|QStringList
name|mainRawPostRules
decl_stmt|;
name|QStringList
name|instRawPostRules
decl_stmt|;
name|QStringList
name|stubRawPostRules
decl_stmt|;
name|QStringList
name|failList
decl_stmt|;
comment|// Used for detecting incorrect usage
name|QString
name|emptySuffix
decl_stmt|;
name|QString
name|mainSuffix
argument_list|(
literal|".main"
argument_list|)
decl_stmt|;
name|QString
name|instSuffix
argument_list|(
literal|".installer"
argument_list|)
decl_stmt|;
name|QString
name|stubSuffix
argument_list|(
literal|".stub"
argument_list|)
decl_stmt|;
foreach|foreach
control|(
name|QString
name|item
decl|,
name|project
operator|->
name|values
argument_list|(
literal|"DEPLOYMENT"
argument_list|)
control|)
block|{
name|parsePreRules
argument_list|(
name|item
argument_list|,
name|emptySuffix
argument_list|,
operator|&
name|commonRawPreRules
argument_list|,
operator|&
name|languageRules
argument_list|,
operator|&
name|headerRules
argument_list|,
operator|&
name|vendorRules
argument_list|)
expr_stmt|;
name|parsePreRules
argument_list|(
name|item
argument_list|,
name|mainSuffix
argument_list|,
operator|&
name|mainRawPreRules
argument_list|,
operator|&
name|failList
argument_list|,
operator|&
name|failList
argument_list|,
operator|&
name|failList
argument_list|)
expr_stmt|;
name|parsePreRules
argument_list|(
name|item
argument_list|,
name|instSuffix
argument_list|,
operator|&
name|instRawPreRules
argument_list|,
operator|&
name|failList
argument_list|,
operator|&
name|failList
argument_list|,
operator|&
name|failList
argument_list|)
expr_stmt|;
name|parsePreRules
argument_list|(
name|item
argument_list|,
name|stubSuffix
argument_list|,
operator|&
name|stubRawPreRules
argument_list|,
operator|&
name|failList
argument_list|,
operator|&
name|failList
argument_list|,
operator|&
name|failList
argument_list|)
expr_stmt|;
name|parsePostRules
argument_list|(
name|item
argument_list|,
name|emptySuffix
argument_list|,
operator|&
name|commonRawPostRules
argument_list|)
expr_stmt|;
name|parsePostRules
argument_list|(
name|item
argument_list|,
name|mainSuffix
argument_list|,
operator|&
name|mainRawPostRules
argument_list|)
expr_stmt|;
name|parsePostRules
argument_list|(
name|item
argument_list|,
name|instSuffix
argument_list|,
operator|&
name|instRawPostRules
argument_list|)
expr_stmt|;
name|parsePostRules
argument_list|(
name|item
argument_list|,
name|stubSuffix
argument_list|,
operator|&
name|stubRawPostRules
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|failList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Warning: Custom language, header, or vendor definitions are not "
literal|"supported by file specific pkg_prerules.* variables.\n"
literal|"Use plain pkg_prerules and/or DEPLOYMENT.installer_header for customizing "
literal|"these items.\n"
argument_list|)
expr_stmt|;
block|}
foreach|foreach
control|(
name|QString
name|item
decl|,
name|commonRawPreRules
control|)
block|{
if|if
condition|(
name|item
operator|.
name|startsWith
argument_list|(
literal|"("
argument_list|)
condition|)
block|{
comment|// Only regular pkg file should have package dependencies
name|mainRawPreRules
operator|<<
name|item
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|item
operator|.
name|startsWith
argument_list|(
literal|"["
argument_list|)
condition|)
block|{
comment|// stub pkg file should not have platform dependencies
name|mainRawPreRules
operator|<<
name|item
expr_stmt|;
name|instRawPreRules
operator|<<
name|item
expr_stmt|;
block|}
else|else
block|{
name|mainRawPreRules
operator|<<
name|item
expr_stmt|;
name|instRawPreRules
operator|<<
name|item
expr_stmt|;
name|stubRawPreRules
operator|<<
name|item
expr_stmt|;
block|}
block|}
comment|// Currently common postrules only go to main
name|mainRawPostRules
operator|<<
name|commonRawPostRules
expr_stmt|;
comment|// Apply some defaults if specific data does not exist in PKG pre-rules
if|if
condition|(
name|languageRules
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|symbianLocalizationList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|languageRules
operator|<<
literal|"; Language\n&EN\n\n"
expr_stmt|;
block|}
else|else
block|{
name|QStringList
name|langCodes
decl_stmt|;
name|SymbianLocalizationListIterator
name|iter
argument_list|(
name|symbianLocalizationList
argument_list|)
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|const
name|SymbianLocalization
modifier|&
name|loc
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|langCodes
operator|<<
name|loc
operator|.
name|symbianLanguageCode
expr_stmt|;
block|}
name|languageRules
operator|<<
name|QString
argument_list|(
literal|"; Languages\n&%1\n\n"
argument_list|)
operator|.
name|arg
argument_list|(
name|langCodes
operator|.
name|join
argument_list|(
literal|","
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|headerRules
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// In case user defines langs, he must take care also about SIS header
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Warning: If language is defined with DEPLOYMENT pkg_prerules, also the SIS header must be defined\n"
argument_list|)
expr_stmt|;
block|}
name|t
operator|<<
name|languageRules
operator|.
name|join
argument_list|(
literal|"\n"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|tw
operator|<<
name|languageRules
operator|.
name|join
argument_list|(
literal|"\n"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|ts
operator|<<
name|languageRules
operator|.
name|join
argument_list|(
literal|"\n"
argument_list|)
operator|<<
name|endl
expr_stmt|;
comment|// Determine application version. If version has missing component values,
comment|// those will default to zero.
comment|// If VERSION is missing altogether or is invalid, use "1,0,0"
name|QStringList
name|verNumList
init|=
name|project
operator|->
name|first
argument_list|(
literal|"VERSION"
argument_list|)
operator|.
name|split
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
name|uint
name|major
init|=
literal|0
decl_stmt|;
name|uint
name|minor
init|=
literal|0
decl_stmt|;
name|uint
name|patch
init|=
literal|0
decl_stmt|;
name|bool
name|success
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|verNumList
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|major
operator|=
name|verNumList
index|[
literal|0
index|]
operator|.
name|toUInt
argument_list|(
operator|&
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|success
operator|&&
name|verNumList
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
block|{
name|minor
operator|=
name|verNumList
index|[
literal|1
index|]
operator|.
name|toUInt
argument_list|(
operator|&
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|success
operator|&&
name|verNumList
operator|.
name|size
argument_list|()
operator|>
literal|2
condition|)
block|{
name|patch
operator|=
name|verNumList
index|[
literal|2
index|]
operator|.
name|toUInt
argument_list|(
operator|&
name|success
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|QString
name|applicationVersion
argument_list|(
literal|"1,0,0"
argument_list|)
decl_stmt|;
if|if
condition|(
name|success
condition|)
name|applicationVersion
operator|=
name|QString
argument_list|(
literal|"%1,%2,%3"
argument_list|)
operator|.
name|arg
argument_list|(
name|major
argument_list|)
operator|.
name|arg
argument_list|(
name|minor
argument_list|)
operator|.
name|arg
argument_list|(
name|patch
argument_list|)
expr_stmt|;
comment|// Append package build version number if it is set
name|QString
name|pkgBuildVersion
init|=
name|project
operator|->
name|first
argument_list|(
literal|"DEPLOYMENT.pkg_build_version"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|pkgBuildVersion
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|success
operator|=
literal|false
expr_stmt|;
name|uint
name|build
init|=
name|pkgBuildVersion
operator|.
name|toUInt
argument_list|(
operator|&
name|success
argument_list|)
decl_stmt|;
if|if
condition|(
name|success
operator|&&
name|build
operator|<
literal|100
condition|)
block|{
if|if
condition|(
name|pkgBuildVersion
operator|.
name|size
argument_list|()
operator|==
literal|1
condition|)
name|pkgBuildVersion
operator|.
name|prepend
argument_list|(
name|QLatin1Char
argument_list|(
literal|'0'
argument_list|)
argument_list|)
expr_stmt|;
name|applicationVersion
operator|.
name|append
argument_list|(
name|pkgBuildVersion
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Warning: Invalid DEPLOYMENT.pkg_build_version (%s), must be a number between 0 - 99\n"
argument_list|,
name|qPrintable
argument_list|(
name|pkgBuildVersion
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Package header
name|QString
name|sisHeader
init|=
literal|"; SIS header: name, uid, version\n#{\"%1\"},(%2),%3\n\n"
decl_stmt|;
name|QString
name|defaultVisualTarget
init|=
name|project
operator|->
name|values
argument_list|(
literal|"DEPLOYMENT.display_name"
argument_list|)
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
if|if
condition|(
name|defaultVisualTarget
operator|.
name|isEmpty
argument_list|()
condition|)
name|defaultVisualTarget
operator|=
name|generator
operator|->
name|escapeFilePath
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"TARGET"
argument_list|)
argument_list|)
expr_stmt|;
name|defaultVisualTarget
operator|=
name|removePathSeparators
argument_list|(
name|defaultVisualTarget
argument_list|)
expr_stmt|;
name|QString
name|visualTarget
init|=
name|generatePkgNameForHeader
argument_list|(
name|symbianLocalizationList
argument_list|,
name|defaultVisualTarget
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|QString
name|wrapperTarget
init|=
name|generatePkgNameForHeader
argument_list|(
name|symbianLocalizationList
argument_list|,
name|defaultVisualTarget
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|installerSisHeader
operator|.
name|startsWith
argument_list|(
literal|"0x"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
block|{
name|tw
operator|<<
name|sisHeader
operator|.
name|arg
argument_list|(
name|wrapperTarget
argument_list|)
operator|.
name|arg
argument_list|(
name|installerSisHeader
argument_list|)
operator|.
name|arg
argument_list|(
name|applicationVersion
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|tw
operator|<<
name|installerSisHeader
operator|<<
name|endl
expr_stmt|;
block|}
if|if
condition|(
name|headerRules
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|t
operator|<<
name|sisHeader
operator|.
name|arg
argument_list|(
name|visualTarget
argument_list|)
operator|.
name|arg
argument_list|(
name|uid3
argument_list|)
operator|.
name|arg
argument_list|(
name|applicationVersion
argument_list|)
expr_stmt|;
name|ts
operator|<<
name|sisHeader
operator|.
name|arg
argument_list|(
name|visualTarget
argument_list|)
operator|.
name|arg
argument_list|(
name|uid3
argument_list|)
operator|.
name|arg
argument_list|(
name|applicationVersion
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|t
operator|<<
name|headerRules
operator|.
name|join
argument_list|(
literal|"\n"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|ts
operator|<<
name|headerRules
operator|.
name|join
argument_list|(
literal|"\n"
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
comment|// Vendor name
if|if
condition|(
operator|!
name|containsStartWithItem
argument_list|(
literal|'%'
argument_list|,
name|vendorRules
argument_list|)
condition|)
block|{
name|QString
name|vendorStr
init|=
name|QLatin1String
argument_list|(
literal|"\"Vendor\","
argument_list|)
decl_stmt|;
name|QString
name|locVendors
init|=
name|vendorStr
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
name|symbianLocalizationList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|locVendors
operator|.
name|append
argument_list|(
name|vendorStr
argument_list|)
expr_stmt|;
block|}
name|locVendors
operator|.
name|chop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|vendorRules
operator|<<
name|QString
argument_list|(
literal|"; Default localized vendor name\n%{%1}\n\n"
argument_list|)
operator|.
name|arg
argument_list|(
name|locVendors
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|containsStartWithItem
argument_list|(
literal|':'
argument_list|,
name|vendorRules
argument_list|)
condition|)
block|{
name|vendorRules
operator|<<
literal|"; Default unique vendor name\n:\"Vendor\"\n\n"
expr_stmt|;
block|}
name|t
operator|<<
name|vendorRules
operator|.
name|join
argument_list|(
literal|"\n"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|tw
operator|<<
name|vendorRules
operator|.
name|join
argument_list|(
literal|"\n"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|ts
operator|<<
name|vendorRules
operator|.
name|join
argument_list|(
literal|"\n"
argument_list|)
operator|<<
name|endl
expr_stmt|;
comment|// PKG pre-rules - these are added before actual file installations i.e. SIS package body
name|QString
name|comment
init|=
literal|"\n; Manual PKG pre-rules from PRO files\n"
decl_stmt|;
if|if
condition|(
name|mainRawPreRules
operator|.
name|size
argument_list|()
condition|)
block|{
name|t
operator|<<
name|comment
expr_stmt|;
name|t
operator|<<
name|mainRawPreRules
operator|.
name|join
argument_list|(
literal|"\n"
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
if|if
condition|(
name|instRawPreRules
operator|.
name|size
argument_list|()
condition|)
block|{
name|tw
operator|<<
name|comment
expr_stmt|;
name|tw
operator|<<
name|instRawPreRules
operator|.
name|join
argument_list|(
literal|"\n"
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
if|if
condition|(
name|stubRawPreRules
operator|.
name|size
argument_list|()
condition|)
block|{
name|ts
operator|<<
name|comment
expr_stmt|;
name|ts
operator|<<
name|stubRawPreRules
operator|.
name|join
argument_list|(
literal|"\n"
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
name|t
operator|<<
name|endl
expr_stmt|;
name|tw
operator|<<
name|endl
expr_stmt|;
name|ts
operator|<<
name|endl
expr_stmt|;
comment|// Begin Manufacturer block
if|if
condition|(
operator|!
name|project
operator|->
name|values
argument_list|(
literal|"DEPLOYMENT.manufacturers"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QString
name|manufacturerStr
argument_list|(
literal|"IF "
argument_list|)
decl_stmt|;
foreach|foreach
control|(
name|QString
name|manufacturer
decl|,
name|project
operator|->
name|values
argument_list|(
literal|"DEPLOYMENT.manufacturers"
argument_list|)
control|)
block|{
name|manufacturerStr
operator|.
name|append
argument_list|(
name|QString
argument_list|(
literal|"(MANUFACTURER)=(%1) OR \n   "
argument_list|)
operator|.
name|arg
argument_list|(
name|manufacturer
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Remove the final OR
name|manufacturerStr
operator|.
name|chop
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|t
operator|<<
name|manufacturerStr
operator|<<
name|endl
expr_stmt|;
block|}
if|if
condition|(
name|symbianLocalizationList
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// Add localized resources to DEPLOYMENT if default resource deployment is done
name|addLocalizedResourcesToDeployment
argument_list|(
literal|"default_resource_deployment.files"
argument_list|,
name|symbianLocalizationList
argument_list|)
expr_stmt|;
name|addLocalizedResourcesToDeployment
argument_list|(
literal|"default_reg_deployment.files"
argument_list|,
name|symbianLocalizationList
argument_list|)
expr_stmt|;
block|}
comment|// deploy files specified by DEPLOYMENT variable
name|QString
name|remoteTestPath
decl_stmt|;
name|QString
name|zDir
decl_stmt|;
name|remoteTestPath
operator|=
name|QString
argument_list|(
literal|"!:\\private\\%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|privateDirUid
argument_list|)
expr_stmt|;
if|if
condition|(
name|epocBuild
condition|)
name|zDir
operator|=
name|qt_epocRoot
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"epoc32/data/z"
argument_list|)
expr_stmt|;
name|DeploymentList
name|depList
decl_stmt|;
name|initProjectDeploySymbian
argument_list|(
name|project
argument_list|,
name|depList
argument_list|,
name|remoteTestPath
argument_list|,
literal|true
argument_list|,
name|epocBuild
argument_list|,
literal|"$(PLATFORM)"
argument_list|,
literal|"$(TARGET)"
argument_list|,
name|generatedDirs
argument_list|,
name|generatedFiles
argument_list|)
expr_stmt|;
if|if
condition|(
name|depList
operator|.
name|size
argument_list|()
condition|)
name|t
operator|<<
literal|"; DEPLOYMENT"
operator|<<
name|endl
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|depList
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|from
init|=
name|depList
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|from
decl_stmt|;
name|QString
name|to
init|=
name|depList
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|to
decl_stmt|;
name|QString
name|flags
decl_stmt|;
name|bool
name|showOnlyFile
init|=
literal|false
decl_stmt|;
foreach|foreach
control|(
name|QString
name|flag
decl|,
name|depList
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|flags
control|)
block|{
if|if
condition|(
name|flag
operator|==
name|QLatin1String
argument_list|(
literal|"FT"
argument_list|)
operator|||
name|flag
operator|==
name|QLatin1String
argument_list|(
literal|"FILETEXT"
argument_list|)
condition|)
block|{
name|showOnlyFile
operator|=
literal|true
expr_stmt|;
block|}
name|flags
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|','
argument_list|)
argument_list|)
operator|.
name|append
argument_list|(
name|flag
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|epocBuild
condition|)
block|{
comment|// Deploy anything not already deployed from under epoc32 instead from under
comment|// \epoc32\data\z\ to enable using pkg file without rebuilding
comment|// the project, which can be useful for some binary only distributions.
if|if
condition|(
operator|!
name|from
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"epoc32"
argument_list|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
block|{
name|from
operator|=
name|to
expr_stmt|;
if|if
condition|(
name|from
operator|.
name|size
argument_list|()
operator|>
literal|1
operator|&&
name|from
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
condition|)
name|from
operator|=
name|from
operator|.
name|mid
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|from
operator|.
name|prepend
argument_list|(
name|zDir
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Files with "FILETEXT"/"FT" flag are meant for showing only at installation time
comment|// and therefore do not belong to the stub package and will not install the file into phone.
if|if
condition|(
name|showOnlyFile
condition|)
name|to
operator|.
name|clear
argument_list|()
expr_stmt|;
else|else
name|ts
operator|<<
name|QString
argument_list|(
literal|"\"\" - \"%1\""
argument_list|)
operator|.
name|arg
argument_list|(
name|romPath
argument_list|(
name|to
argument_list|)
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|QString
argument_list|(
literal|"\"%1\" - \"%2\"%3"
argument_list|)
operator|.
name|arg
argument_list|(
name|from
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|to
argument_list|)
operator|.
name|arg
argument_list|(
name|flags
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
name|t
operator|<<
name|endl
expr_stmt|;
name|ts
operator|<<
name|endl
expr_stmt|;
comment|// PKG post-rules - these are added after actual file installations i.e. SIS package body
name|comment
operator|=
literal|"; Manual PKG post-rules from PRO files\n"
expr_stmt|;
if|if
condition|(
name|mainRawPostRules
operator|.
name|size
argument_list|()
condition|)
block|{
name|t
operator|<<
name|comment
expr_stmt|;
name|t
operator|<<
name|mainRawPostRules
operator|.
name|join
argument_list|(
literal|"\n"
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
if|if
condition|(
name|instRawPostRules
operator|.
name|size
argument_list|()
condition|)
block|{
name|tw
operator|<<
name|comment
expr_stmt|;
name|tw
operator|<<
name|instRawPostRules
operator|.
name|join
argument_list|(
literal|"\n"
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
if|if
condition|(
name|stubRawPostRules
operator|.
name|size
argument_list|()
condition|)
block|{
name|ts
operator|<<
name|comment
expr_stmt|;
name|ts
operator|<<
name|stubRawPostRules
operator|.
name|join
argument_list|(
literal|"\n"
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
comment|// Close Manufacturer block
if|if
condition|(
operator|!
name|project
operator|->
name|values
argument_list|(
literal|"DEPLOYMENT.manufacturers"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QString
name|manufacturerFailNoteFile
decl_stmt|;
if|if
condition|(
name|project
operator|->
name|values
argument_list|(
literal|"DEPLOYMENT.manufacturers.fail_note"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|manufacturerFailNoteFile
operator|=
name|QString
argument_list|(
literal|"%1_"
name|MANUFACTURER_NOTE_FILE
argument_list|)
operator|.
name|arg
argument_list|(
name|uid3
argument_list|)
expr_stmt|;
name|QFile
name|ft
argument_list|(
name|manufacturerFailNoteFile
argument_list|)
decl_stmt|;
if|if
condition|(
name|ft
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
condition|)
block|{
name|generatedFiles
operator|<<
name|ft
operator|.
name|fileName
argument_list|()
expr_stmt|;
name|QTextStream
name|t2
argument_list|(
operator|&
name|ft
argument_list|)
decl_stmt|;
name|t2
operator|<<
name|QString
argument_list|(
name|DEFAULT_MANUFACTURER_NOTE
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
else|else
block|{
name|PRINT_FILE_CREATE_ERROR
argument_list|(
argument|manufacturerFailNoteFile
argument_list|)
block|}
block|}
else|else
block|{
name|manufacturerFailNoteFile
operator|=
name|project
operator|->
name|values
argument_list|(
literal|"DEPLOYMENT.manufacturers.fail_note"
argument_list|)
operator|.
name|join
argument_list|(
literal|""
argument_list|)
expr_stmt|;
block|}
name|t
operator|<<
literal|"ELSEIF NOT(0) ; MANUFACTURER"
operator|<<
name|endl
operator|<<
literal|"\""
operator|<<
name|generator
operator|->
name|fileInfo
argument_list|(
name|manufacturerFailNoteFile
argument_list|)
operator|.
name|absoluteFilePath
argument_list|()
operator|<<
literal|"\""
operator|<<
literal|" - \"\", FILETEXT, TEXTEXIT"
operator|<<
name|endl
operator|<<
literal|"ENDIF ; MANUFACTURER"
operator|<<
name|endl
expr_stmt|;
block|}
comment|// Write wrapper pkg
if|if
condition|(
operator|!
name|installerSisHeader
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QFile
name|wrapperPkgFile
argument_list|(
name|wrapperPkgFilename
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|wrapperPkgFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
condition|)
block|{
name|PRINT_FILE_CREATE_ERROR
argument_list|(
name|wrapperPkgFilename
argument_list|)
expr_stmt|;
return|return;
block|}
name|generatedFiles
operator|<<
name|wrapperPkgFile
operator|.
name|fileName
argument_list|()
expr_stmt|;
name|QTextStream
name|twf
argument_list|(
operator|&
name|wrapperPkgFile
argument_list|)
decl_stmt|;
name|twf
operator|<<
name|wrapperStreamBuffer
operator|<<
name|endl
expr_stmt|;
comment|// Wrapped files deployment
name|QString
name|currentPath
init|=
name|qmake_getpwd
argument_list|()
decl_stmt|;
name|QString
name|sisName
init|=
name|QString
argument_list|(
literal|"%1.sis"
argument_list|)
operator|.
name|arg
argument_list|(
name|fixedTarget
argument_list|)
decl_stmt|;
name|twf
operator|<<
literal|"\""
operator|<<
name|currentPath
operator|<<
literal|"/"
operator|<<
name|sisName
operator|<<
literal|"\" - \"!:\\private\\2002CCCE\\import\\"
operator|<<
name|sisName
operator|<<
literal|"\""
operator|<<
name|endl
expr_stmt|;
name|QString
name|bootStrapPath
init|=
name|QLibraryInfo
operator|::
name|location
argument_list|(
name|QLibraryInfo
operator|::
name|PrefixPath
argument_list|)
decl_stmt|;
name|bootStrapPath
operator|.
name|append
argument_list|(
literal|"/smartinstaller.sis"
argument_list|)
expr_stmt|;
name|QFileInfo
name|fi
argument_list|(
name|generator
operator|->
name|fileInfo
argument_list|(
name|bootStrapPath
argument_list|)
argument_list|)
decl_stmt|;
name|twf
operator|<<
literal|"@\""
operator|<<
name|fi
operator|.
name|absoluteFilePath
argument_list|()
operator|<<
literal|"\",(0x2002CCCD)"
operator|<<
name|endl
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|removePathSeparators
name|QString
name|SymbianCommonGenerator
operator|::
name|removePathSeparators
parameter_list|(
name|QString
modifier|&
name|file
parameter_list|)
block|{
name|QString
name|ret
init|=
name|file
decl_stmt|;
if|if
condition|(
name|QDir
operator|::
name|separator
argument_list|()
operator|.
name|unicode
argument_list|()
operator|!=
literal|'/'
condition|)
name|ret
operator|.
name|replace
argument_list|(
name|QDir
operator|::
name|separator
argument_list|()
argument_list|,
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|.
name|indexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
operator|>=
literal|0
condition|)
name|ret
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
name|ret
operator|.
name|lastIndexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|writeRegRssFile
name|void
name|SymbianCommonGenerator
operator|::
name|writeRegRssFile
parameter_list|(
name|QMap
argument_list|<
name|QString
argument_list|,
name|QStringList
argument_list|>
modifier|&
name|userItems
parameter_list|)
block|{
name|QString
name|filename
argument_list|(
name|fixedTarget
argument_list|)
decl_stmt|;
name|filename
operator|.
name|append
argument_list|(
literal|"_reg.rss"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|Option
operator|::
name|output_dir
operator|.
name|isEmpty
argument_list|()
condition|)
name|filename
operator|=
name|Option
operator|::
name|output_dir
operator|+
literal|'/'
operator|+
name|filename
expr_stmt|;
name|QFile
name|ft
argument_list|(
name|filename
argument_list|)
decl_stmt|;
if|if
condition|(
name|ft
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
condition|)
block|{
name|generatedFiles
operator|<<
name|ft
operator|.
name|fileName
argument_list|()
expr_stmt|;
name|QTextStream
name|t
argument_list|(
operator|&
name|ft
argument_list|)
decl_stmt|;
name|t
operator|<<
literal|"// ============================================================================"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"// * Generated by qmake ("
operator|<<
name|qmake_version
argument_list|()
operator|<<
literal|") (Qt "
name|QT_VERSION_STR
literal|") on: "
expr_stmt|;
name|t
operator|<<
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
operator|.
name|toString
argument_list|(
name|Qt
operator|::
name|ISODate
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"// * This file is generated by qmake and should not be modified by the"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"// * user."
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"// ============================================================================"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"#include<"
operator|<<
name|fixedTarget
operator|<<
literal|".rsg>"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"#include<appinfo.rh>"
operator|<<
name|endl
expr_stmt|;
foreach|foreach
control|(
name|QString
name|item
decl|,
name|userItems
index|[
name|RSS_TAG_HEADER
index|]
control|)
name|t
operator|<<
name|item
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"UID2 KUidAppRegistrationResourceFile"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"UID3 "
operator|<<
name|uid3
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"RESOURCE APP_REGISTRATION_INFO"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\t{"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\tapp_file=\""
operator|<<
name|fixedTarget
operator|<<
literal|"\";"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\tlocalisable_resource_file=\""
name|RESOURCE_DIRECTORY_RESOURCE
operator|<<
name|fixedTarget
operator|<<
literal|"\";"
operator|<<
name|endl
expr_stmt|;
name|writeRegRssList
argument_list|(
name|t
argument_list|,
name|userItems
index|[
name|RSS_TAG_SERVICE_LIST
index|]
argument_list|,
name|QLatin1String
argument_list|(
name|RSS_TAG_SERVICE_LIST
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"SERVICE_INFO"
argument_list|)
argument_list|)
expr_stmt|;
name|writeRegRssList
argument_list|(
name|t
argument_list|,
name|userItems
index|[
name|RSS_TAG_FILE_OWNERSHIP_LIST
index|]
argument_list|,
name|QLatin1String
argument_list|(
name|RSS_TAG_FILE_OWNERSHIP_LIST
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"FILE_OWNERSHIP_INFO"
argument_list|)
argument_list|)
expr_stmt|;
name|writeRegRssList
argument_list|(
name|t
argument_list|,
name|userItems
index|[
name|RSS_TAG_DATATYPE_LIST
index|]
argument_list|,
name|QLatin1String
argument_list|(
name|RSS_TAG_DATATYPE_LIST
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"DATATYPE"
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
foreach|foreach
control|(
name|QString
name|item
decl|,
name|userItems
index|[
name|RSS_TAG_DEFAULT
index|]
control|)
name|t
operator|<<
literal|"\t"
operator|<<
name|item
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|"\n\t"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\t}"
operator|<<
name|endl
expr_stmt|;
foreach|foreach
control|(
name|QString
name|item
decl|,
name|userItems
index|[
name|RSS_TAG_FOOTER
index|]
control|)
name|t
operator|<<
name|item
operator|<<
name|endl
expr_stmt|;
block|}
else|else
block|{
name|PRINT_FILE_CREATE_ERROR
argument_list|(
argument|filename
argument_list|)
block|}
block|}
end_function
begin_function
DECL|function|writeRegRssList
name|void
name|SymbianCommonGenerator
operator|::
name|writeRegRssList
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|,
name|QStringList
modifier|&
name|userList
parameter_list|,
specifier|const
name|QString
modifier|&
name|listTag
parameter_list|,
specifier|const
name|QString
modifier|&
name|listItem
parameter_list|)
block|{
name|int
name|itemCount
init|=
name|userList
operator|.
name|count
argument_list|()
decl_stmt|;
if|if
condition|(
name|itemCount
condition|)
block|{
name|t
operator|<<
literal|"\t"
operator|<<
name|listTag
operator|<<
literal|" ="
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\t\t{"
operator|<<
name|endl
expr_stmt|;
foreach|foreach
control|(
name|QString
name|item
decl|,
name|userList
control|)
block|{
name|t
operator|<<
literal|"\t\t"
operator|<<
name|listItem
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\t\t\t{"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\t\t\t"
operator|<<
name|item
operator|.
name|replace
argument_list|(
literal|"\n"
argument_list|,
literal|"\n\t\t\t"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\t\t\t}"
expr_stmt|;
if|if
condition|(
operator|--
name|itemCount
condition|)
name|t
operator|<<
literal|","
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
block|}
name|t
operator|<<
literal|"\t\t}; "
operator|<<
name|endl
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|writeRssFile
name|void
name|SymbianCommonGenerator
operator|::
name|writeRssFile
parameter_list|(
name|QString
modifier|&
name|numberOfIcons
parameter_list|,
name|QString
modifier|&
name|iconFile
parameter_list|)
block|{
name|QString
name|filename
argument_list|(
name|fixedTarget
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Option
operator|::
name|output_dir
operator|.
name|isEmpty
argument_list|()
condition|)
name|filename
operator|=
name|Option
operator|::
name|output_dir
operator|+
literal|'/'
operator|+
name|filename
expr_stmt|;
name|filename
operator|.
name|append
argument_list|(
literal|".rss"
argument_list|)
expr_stmt|;
name|QFile
name|ft
argument_list|(
name|filename
argument_list|)
decl_stmt|;
if|if
condition|(
name|ft
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
condition|)
block|{
name|generatedFiles
operator|<<
name|ft
operator|.
name|fileName
argument_list|()
expr_stmt|;
name|QTextStream
name|t
argument_list|(
operator|&
name|ft
argument_list|)
decl_stmt|;
name|t
operator|<<
literal|"// ============================================================================"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"// * Generated by qmake ("
operator|<<
name|qmake_version
argument_list|()
operator|<<
literal|") (Qt "
name|QT_VERSION_STR
literal|") on: "
expr_stmt|;
name|t
operator|<<
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
operator|.
name|toString
argument_list|(
name|Qt
operator|::
name|ISODate
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"// * This file is generated by qmake and should not be modified by the"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"// * user."
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"// ============================================================================"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"CHARACTER_SET UTF8"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"#include<appinfo.rh>"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"#include \""
operator|<<
name|fixedTarget
operator|<<
literal|".loc\""
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"RESOURCE LOCALISABLE_APP_INFO r_localisable_app_info"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\t{"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\tshort_caption = STRING_r_short_caption;"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\tcaption_and_icon ="
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\tCAPTION_AND_ICON_INFO"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\t\t{"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\t\tcaption = STRING_r_caption;"
operator|<<
name|endl
expr_stmt|;
name|QString
name|rssIconFile
init|=
name|iconFile
decl_stmt|;
name|rssIconFile
operator|=
name|rssIconFile
operator|.
name|replace
argument_list|(
literal|"/"
argument_list|,
literal|"\\\\"
argument_list|)
expr_stmt|;
if|if
condition|(
name|numberOfIcons
operator|.
name|isEmpty
argument_list|()
operator|||
name|rssIconFile
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// There can be maximum one item in this tag, validated when parsed
name|t
operator|<<
literal|"\t\tnumber_of_icons = 0;"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\t\ticon_file = \"\";"
operator|<<
name|endl
expr_stmt|;
block|}
else|else
block|{
comment|// There can be maximum one item in this tag, validated when parsed
name|t
operator|<<
literal|"\t\tnumber_of_icons = "
operator|<<
name|numberOfIcons
operator|<<
literal|";"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\t\ticon_file = \""
operator|<<
name|rssIconFile
operator|<<
literal|"\";"
operator|<<
name|endl
expr_stmt|;
block|}
name|t
operator|<<
literal|"\t\t};"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\t}"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
block|}
else|else
block|{
name|PRINT_FILE_CREATE_ERROR
argument_list|(
name|filename
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|writeLocFile
name|void
name|SymbianCommonGenerator
operator|::
name|writeLocFile
parameter_list|(
specifier|const
name|SymbianLocalizationList
modifier|&
name|symbianLocalizationList
parameter_list|)
block|{
name|QString
name|filename
init|=
name|generateLocFileName
argument_list|()
decl_stmt|;
name|QFile
name|ft
argument_list|(
name|filename
argument_list|)
decl_stmt|;
if|if
condition|(
name|ft
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
condition|)
block|{
name|generatedFiles
operator|<<
name|ft
operator|.
name|fileName
argument_list|()
expr_stmt|;
name|QTextStream
name|t
argument_list|(
operator|&
name|ft
argument_list|)
decl_stmt|;
name|QString
name|displayName
init|=
name|generator
operator|->
name|project
operator|->
name|values
argument_list|(
literal|"DEPLOYMENT.display_name"
argument_list|)
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
if|if
condition|(
name|displayName
operator|.
name|isEmpty
argument_list|()
condition|)
name|displayName
operator|=
name|generator
operator|->
name|escapeFilePath
argument_list|(
name|generator
operator|->
name|project
operator|->
name|first
argument_list|(
literal|"TARGET"
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"// ============================================================================"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"// * Generated by qmake ("
operator|<<
name|qmake_version
argument_list|()
operator|<<
literal|") (Qt "
name|QT_VERSION_STR
literal|") on: "
expr_stmt|;
name|t
operator|<<
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
operator|.
name|toString
argument_list|(
name|Qt
operator|::
name|ISODate
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"// * This file is generated by qmake and should not be modified by the"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"// * user."
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"// ============================================================================"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"#ifdef LANGUAGE_SC"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"#define STRING_r_short_caption \""
operator|<<
name|displayName
operator|<<
literal|"\""
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"#define STRING_r_caption \""
operator|<<
name|displayName
operator|<<
literal|"\""
operator|<<
name|endl
expr_stmt|;
name|SymbianLocalizationListIterator
name|iter
argument_list|(
name|symbianLocalizationList
argument_list|)
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|const
name|SymbianLocalization
modifier|&
name|loc
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|QString
name|shortCaption
init|=
name|loc
operator|.
name|shortCaption
decl_stmt|;
name|QString
name|longCaption
init|=
name|loc
operator|.
name|longCaption
decl_stmt|;
if|if
condition|(
name|shortCaption
operator|.
name|isEmpty
argument_list|()
condition|)
name|shortCaption
operator|=
name|displayName
expr_stmt|;
if|if
condition|(
name|longCaption
operator|.
name|isEmpty
argument_list|()
condition|)
name|longCaption
operator|=
name|displayName
expr_stmt|;
name|t
operator|<<
literal|"#elif defined LANGUAGE_"
operator|<<
name|loc
operator|.
name|symbianLanguageCode
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"#define STRING_r_short_caption \""
operator|<<
name|shortCaption
operator|<<
literal|"\""
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"#define STRING_r_caption \""
operator|<<
name|longCaption
operator|<<
literal|"\""
operator|<<
name|endl
expr_stmt|;
block|}
name|t
operator|<<
literal|"#else"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"#define STRING_r_short_caption \""
operator|<<
name|displayName
operator|<<
literal|"\""
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"#define STRING_r_caption \""
operator|<<
name|displayName
operator|<<
literal|"\""
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"#endif"
operator|<<
name|endl
expr_stmt|;
block|}
else|else
block|{
name|PRINT_FILE_CREATE_ERROR
argument_list|(
name|filename
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|readRssRules
name|void
name|SymbianCommonGenerator
operator|::
name|readRssRules
parameter_list|(
name|QString
modifier|&
name|numberOfIcons
parameter_list|,
name|QString
modifier|&
name|iconFile
parameter_list|,
name|QMap
argument_list|<
name|QString
argument_list|,
name|QStringList
argument_list|>
modifier|&
name|userRssRules
parameter_list|)
block|{
name|QMakeProject
modifier|*
name|project
init|=
name|generator
operator|->
name|project
decl_stmt|;
for|for
control|(
name|QMap
argument_list|<
name|QString
argument_list|,
name|QStringList
argument_list|>
operator|::
name|iterator
name|it
init|=
name|project
operator|->
name|variables
argument_list|()
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|project
operator|->
name|variables
argument_list|()
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
name|it
operator|.
name|key
argument_list|()
operator|.
name|startsWith
argument_list|(
name|RSS_RULES_BASE
argument_list|)
condition|)
block|{
name|QString
name|newKey
init|=
name|it
operator|.
name|key
argument_list|()
operator|.
name|mid
argument_list|(
sizeof|sizeof
argument_list|(
name|RSS_RULES_BASE
argument_list|)
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|newKey
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Warning: Empty RSS_RULES_BASE key encountered\n"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|QStringList
name|newValues
decl_stmt|;
name|QStringList
name|values
init|=
name|it
operator|.
name|value
argument_list|()
decl_stmt|;
foreach|foreach
control|(
name|QString
name|item
decl|,
name|values
control|)
block|{
comment|// If there is no stringlist defined for a rule, use rule value directly
comment|// This is convenience for defining single line statements
if|if
condition|(
name|project
operator|->
name|values
argument_list|(
name|item
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|newValues
operator|<<
name|item
expr_stmt|;
block|}
else|else
block|{
name|QStringList
name|itemList
decl_stmt|;
foreach|foreach
control|(
name|QString
name|itemRow
decl|,
name|project
operator|->
name|values
argument_list|(
name|item
argument_list|)
control|)
block|{
name|itemList
operator|<<
name|itemRow
expr_stmt|;
block|}
name|newValues
operator|<<
name|itemList
operator|.
name|join
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Verify that there is exactly one value in RSS_TAG_NBROFICONS
if|if
condition|(
name|newKey
operator|==
name|RSS_TAG_NBROFICONS
condition|)
block|{
if|if
condition|(
name|newValues
operator|.
name|count
argument_list|()
operator|==
literal|1
condition|)
block|{
name|numberOfIcons
operator|=
name|newValues
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Warning: There must be exactly one value in '%s%s'\n"
argument_list|,
name|RSS_RULES_BASE
argument_list|,
name|RSS_TAG_NBROFICONS
argument_list|)
expr_stmt|;
continue|continue;
block|}
comment|// Verify that there is exactly one value in RSS_TAG_ICONFILE
block|}
elseif|else
if|if
condition|(
name|newKey
operator|==
name|RSS_TAG_ICONFILE
condition|)
block|{
if|if
condition|(
name|newValues
operator|.
name|count
argument_list|()
operator|==
literal|1
condition|)
block|{
name|iconFile
operator|=
name|newValues
index|[
literal|0
index|]
expr_stmt|;
block|}
else|else
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Warning: There must be exactly one value in '%s%s'\n"
argument_list|,
name|RSS_RULES_BASE
argument_list|,
name|RSS_TAG_ICONFILE
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
elseif|else
if|if
condition|(
name|newKey
operator|==
name|RSS_TAG_HEADER
operator|||
name|newKey
operator|==
name|RSS_TAG_SERVICE_LIST
operator|||
name|newKey
operator|==
name|RSS_TAG_FILE_OWNERSHIP_LIST
operator|||
name|newKey
operator|==
name|RSS_TAG_DATATYPE_LIST
operator|||
name|newKey
operator|==
name|RSS_TAG_FOOTER
operator|||
name|newKey
operator|==
name|RSS_TAG_DEFAULT
condition|)
block|{
name|userRssRules
index|[
name|newKey
index|]
operator|=
name|newValues
expr_stmt|;
continue|continue;
block|}
else|else
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Warning: Unsupported key:'%s%s'\n"
argument_list|,
name|RSS_RULES_BASE
argument_list|,
name|newKey
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
block|}
name|QStringList
name|newValues
decl_stmt|;
foreach|foreach
control|(
name|QString
name|item
decl|,
name|project
operator|->
name|values
argument_list|(
name|RSS_RULES
argument_list|)
control|)
block|{
comment|// If there is no stringlist defined for a rule, use rule value directly
comment|// This is convenience for defining single line statements
if|if
condition|(
name|project
operator|->
name|values
argument_list|(
name|item
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|newValues
operator|<<
name|item
expr_stmt|;
block|}
else|else
block|{
name|newValues
operator|<<
name|project
operator|->
name|values
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
block|}
name|userRssRules
index|[
name|RSS_TAG_DEFAULT
index|]
operator|<<
name|newValues
expr_stmt|;
comment|// Validate that either both RSS_TAG_NBROFICONS and RSS_TAG_ICONFILE keys exist
comment|// or neither of them exist
if|if
condition|(
operator|!
operator|(
operator|(
name|numberOfIcons
operator|.
name|isEmpty
argument_list|()
operator|&&
name|iconFile
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
operator|(
operator|!
name|numberOfIcons
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|iconFile
operator|.
name|isEmpty
argument_list|()
operator|)
operator|)
condition|)
block|{
name|numberOfIcons
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iconFile
operator|.
name|clear
argument_list|()
expr_stmt|;
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Warning: Both or neither of '%s%s' and '%s%s' keys must exist.\n"
argument_list|,
name|RSS_RULES_BASE
argument_list|,
name|RSS_TAG_NBROFICONS
argument_list|,
name|RSS_RULES_BASE
argument_list|,
name|RSS_TAG_ICONFILE
argument_list|)
expr_stmt|;
block|}
comment|// Validate that RSS_TAG_NBROFICONS contains only numbers
if|if
condition|(
operator|!
name|numberOfIcons
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|bool
name|ok
decl_stmt|;
name|numberOfIcons
operator|=
name|numberOfIcons
operator|.
name|simplified
argument_list|()
expr_stmt|;
name|numberOfIcons
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ok
condition|)
block|{
name|numberOfIcons
operator|.
name|clear
argument_list|()
expr_stmt|;
name|iconFile
operator|.
name|clear
argument_list|()
expr_stmt|;
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Warning: '%s%s' must be integer in decimal format.\n"
argument_list|,
name|RSS_RULES_BASE
argument_list|,
name|RSS_TAG_NBROFICONS
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|writeCustomDefFile
name|void
name|SymbianCommonGenerator
operator|::
name|writeCustomDefFile
parameter_list|()
block|{
if|if
condition|(
name|targetType
operator|==
name|TypePlugin
operator|&&
operator|!
name|generator
operator|->
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"stdbinary"
argument_list|)
condition|)
block|{
comment|// Create custom def file for plugin
name|QFile
name|ft
argument_list|(
name|Option
operator|::
name|output_dir
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|QLatin1String
argument_list|(
name|PLUGIN_COMMON_DEF_FILE_ACTUAL
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|ft
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
condition|)
block|{
name|generatedFiles
operator|<<
name|ft
operator|.
name|fileName
argument_list|()
expr_stmt|;
name|QTextStream
name|t
argument_list|(
operator|&
name|ft
argument_list|)
decl_stmt|;
name|t
operator|<<
literal|"; =============================================================================="
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"; Generated by qmake ("
operator|<<
name|qmake_version
argument_list|()
operator|<<
literal|") (Qt "
name|QT_VERSION_STR
literal|") on: "
expr_stmt|;
name|t
operator|<<
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
operator|.
name|toString
argument_list|(
name|Qt
operator|::
name|ISODate
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"; This file is generated by qmake and should not be modified by the"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"; user."
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|";  Name        : "
name|PLUGIN_COMMON_DEF_FILE_ACTUAL
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|";  Part of     : "
operator|<<
name|generator
operator|->
name|project
operator|->
name|values
argument_list|(
literal|"TARGET"
argument_list|)
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|";  Description : Fixes common plugin symbols to known ordinals"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|";  Version     : "
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|";"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"; =============================================================================="
operator|<<
literal|"\n"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"EXPORTS"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\tqt_plugin_query_verification_data @ 1 NONAME"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"\tqt_plugin_instance @ 2 NONAME"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
block|}
else|else
block|{
name|PRINT_FILE_CREATE_ERROR
argument_list|(
argument|QString(PLUGIN_COMMON_DEF_FILE_ACTUAL)
argument_list|)
block|}
block|}
block|}
end_function
begin_function
DECL|function|parseTsFiles
name|void
name|SymbianCommonGenerator
operator|::
name|parseTsFiles
parameter_list|(
name|SymbianLocalizationList
modifier|*
name|symbianLocalizationList
parameter_list|)
block|{
if|if
condition|(
operator|!
name|generator
operator|->
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"localize_deployment"
argument_list|)
condition|)
block|{
return|return;
block|}
name|QStringList
name|symbianTsFiles
decl_stmt|;
name|symbianTsFiles
operator|<<
name|generator
operator|->
name|project
operator|->
name|values
argument_list|(
literal|"SYMBIAN_MATCHED_TRANSLATIONS"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|symbianTsFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fillQt2SymbianLocalizationList
argument_list|(
name|symbianLocalizationList
argument_list|)
expr_stmt|;
name|QMutableListIterator
argument_list|<
name|SymbianLocalization
argument_list|>
name|iter
argument_list|(
operator|*
name|symbianLocalizationList
argument_list|)
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|SymbianLocalization
modifier|&
name|loc
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
specifier|static
name|QString
name|matchStrTemplate
init|=
name|QLatin1String
argument_list|(
literal|".*_%1\\.ts"
argument_list|)
decl_stmt|;
name|QString
name|matchStr
init|=
name|matchStrTemplate
operator|.
name|arg
argument_list|(
name|loc
operator|.
name|qtLanguageCode
argument_list|)
decl_stmt|;
foreach|foreach
control|(
name|QString
name|file
decl|,
name|symbianTsFiles
control|)
block|{
name|QRegExp
name|matcher
argument_list|(
name|matchStr
argument_list|)
decl_stmt|;
if|if
condition|(
name|matcher
operator|.
name|exactMatch
argument_list|(
name|file
argument_list|)
operator|&&
name|parseTsContent
argument_list|(
name|file
argument_list|,
operator|&
name|loc
argument_list|)
condition|)
break|break;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|fillQt2SymbianLocalizationList
name|void
name|SymbianCommonGenerator
operator|::
name|fillQt2SymbianLocalizationList
parameter_list|(
name|SymbianLocalizationList
modifier|*
name|symbianLocalizationList
parameter_list|)
block|{
specifier|static
name|QString
name|symbianCodePrefix
init|=
name|QLatin1String
argument_list|(
literal|"SYMBIAN_LANG."
argument_list|)
decl_stmt|;
name|QStringList
name|symbianLanguages
init|=
name|generator
operator|->
name|project
operator|->
name|values
argument_list|(
literal|"SYMBIAN_MATCHED_LANGUAGES"
argument_list|)
decl_stmt|;
foreach|foreach
control|(
name|QString
name|qtCode
decl|,
name|symbianLanguages
control|)
block|{
name|SymbianLocalization
name|newLoc
decl_stmt|;
name|QString
name|symbianCodeVariable
init|=
name|symbianCodePrefix
operator|+
name|qtCode
decl_stmt|;
name|newLoc
operator|.
name|symbianLanguageCode
operator|=
name|generator
operator|->
name|project
operator|->
name|first
argument_list|(
name|symbianCodeVariable
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|newLoc
operator|.
name|symbianLanguageCode
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|newLoc
operator|.
name|qtLanguageCode
operator|=
name|qtCode
expr_stmt|;
name|symbianLocalizationList
operator|->
name|append
argument_list|(
name|newLoc
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|parsePreRules
name|void
name|SymbianCommonGenerator
operator|::
name|parsePreRules
parameter_list|(
specifier|const
name|QString
modifier|&
name|deploymentVariable
parameter_list|,
specifier|const
name|QString
modifier|&
name|variableSuffix
parameter_list|,
name|QStringList
modifier|*
name|rawRuleList
parameter_list|,
name|QStringList
modifier|*
name|languageRuleList
parameter_list|,
name|QStringList
modifier|*
name|headerRuleList
parameter_list|,
name|QStringList
modifier|*
name|vendorRuleList
parameter_list|)
block|{
name|QMakeProject
modifier|*
name|project
init|=
name|generator
operator|->
name|project
decl_stmt|;
foreach|foreach
control|(
name|QString
name|pkgrulesItem
decl|,
name|project
operator|->
name|values
argument_list|(
name|deploymentVariable
operator|+
literal|".pkg_prerules"
operator|+
name|variableSuffix
argument_list|)
control|)
block|{
name|QStringList
name|pkgrulesValue
init|=
name|project
operator|->
name|values
argument_list|(
name|pkgrulesItem
argument_list|)
decl_stmt|;
comment|// If there is no stringlist defined for a rule, use rule name directly
comment|// This is convenience for defining single line statements
if|if
condition|(
name|pkgrulesValue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|pkgrulesItem
operator|.
name|startsWith
argument_list|(
literal|"&"
argument_list|)
condition|)
operator|*
name|languageRuleList
operator|<<
name|pkgrulesItem
expr_stmt|;
elseif|else
if|if
condition|(
name|pkgrulesItem
operator|.
name|startsWith
argument_list|(
literal|"#"
argument_list|)
condition|)
operator|*
name|headerRuleList
operator|<<
name|pkgrulesItem
expr_stmt|;
elseif|else
if|if
condition|(
name|pkgrulesItem
operator|.
name|startsWith
argument_list|(
literal|"%"
argument_list|)
operator|||
name|pkgrulesItem
operator|.
name|startsWith
argument_list|(
literal|":"
argument_list|)
condition|)
operator|*
name|vendorRuleList
operator|<<
name|pkgrulesItem
expr_stmt|;
else|else
operator|*
name|rawRuleList
operator|<<
name|pkgrulesItem
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|containsStartWithItem
argument_list|(
literal|'&'
argument_list|,
name|pkgrulesValue
argument_list|)
condition|)
block|{
foreach|foreach
control|(
name|QString
name|pkgrule
decl|,
name|pkgrulesValue
control|)
block|{
operator|*
name|languageRuleList
operator|<<
name|pkgrule
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|containsStartWithItem
argument_list|(
literal|'#'
argument_list|,
name|pkgrulesValue
argument_list|)
condition|)
block|{
foreach|foreach
control|(
name|QString
name|pkgrule
decl|,
name|pkgrulesValue
control|)
block|{
operator|*
name|headerRuleList
operator|<<
name|pkgrule
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|containsStartWithItem
argument_list|(
literal|'%'
argument_list|,
name|pkgrulesValue
argument_list|)
operator|||
name|containsStartWithItem
argument_list|(
literal|':'
argument_list|,
name|pkgrulesValue
argument_list|)
condition|)
block|{
foreach|foreach
control|(
name|QString
name|pkgrule
decl|,
name|pkgrulesValue
control|)
block|{
operator|*
name|vendorRuleList
operator|<<
name|pkgrule
expr_stmt|;
block|}
block|}
else|else
block|{
foreach|foreach
control|(
name|QString
name|pkgrule
decl|,
name|pkgrulesValue
control|)
block|{
operator|*
name|rawRuleList
operator|<<
name|pkgrule
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|parsePostRules
name|void
name|SymbianCommonGenerator
operator|::
name|parsePostRules
parameter_list|(
specifier|const
name|QString
modifier|&
name|deploymentVariable
parameter_list|,
specifier|const
name|QString
modifier|&
name|variableSuffix
parameter_list|,
name|QStringList
modifier|*
name|rawRuleList
parameter_list|)
block|{
name|QMakeProject
modifier|*
name|project
init|=
name|generator
operator|->
name|project
decl_stmt|;
foreach|foreach
control|(
name|QString
name|pkgrulesItem
decl|,
name|project
operator|->
name|values
argument_list|(
name|deploymentVariable
operator|+
literal|".pkg_postrules"
operator|+
name|variableSuffix
argument_list|)
control|)
block|{
name|QStringList
name|pkgrulesValue
init|=
name|project
operator|->
name|values
argument_list|(
name|pkgrulesItem
argument_list|)
decl_stmt|;
comment|// If there is no stringlist defined for a rule, use rule name directly
comment|// This is convenience for defining single line statements
if|if
condition|(
name|pkgrulesValue
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
operator|*
name|rawRuleList
operator|<<
name|pkgrulesItem
expr_stmt|;
block|}
else|else
block|{
foreach|foreach
control|(
name|QString
name|pkgrule
decl|,
name|pkgrulesValue
control|)
block|{
operator|*
name|rawRuleList
operator|<<
name|pkgrule
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|parseTsContent
name|bool
name|SymbianCommonGenerator
operator|::
name|parseTsContent
parameter_list|(
specifier|const
name|QString
modifier|&
name|tsFilename
parameter_list|,
name|SymbianLocalization
modifier|*
name|loc
parameter_list|)
block|{
name|bool
name|retval
init|=
literal|true
decl_stmt|;
name|QMakeProject
modifier|*
name|project
init|=
name|generator
operator|->
name|project
decl_stmt|;
name|QFile
name|tsFile
argument_list|(
name|tsFilename
argument_list|)
decl_stmt|;
if|if
condition|(
name|tsFile
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
name|tsFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
specifier|static
name|QString
name|applicationCaptionsContext
init|=
name|QLatin1String
argument_list|(
literal|"QtApplicationCaptions"
argument_list|)
decl_stmt|;
specifier|static
name|QString
name|pkgNameContext
init|=
name|QLatin1String
argument_list|(
literal|"QtPackageNames"
argument_list|)
decl_stmt|;
specifier|static
name|QString
name|tsElement
init|=
name|QLatin1String
argument_list|(
literal|"TS"
argument_list|)
decl_stmt|;
specifier|static
name|QString
name|contextElement
init|=
name|QLatin1String
argument_list|(
literal|"context"
argument_list|)
decl_stmt|;
specifier|static
name|QString
name|nameElement
init|=
name|QLatin1String
argument_list|(
literal|"name"
argument_list|)
decl_stmt|;
specifier|static
name|QString
name|messageElement
init|=
name|QLatin1String
argument_list|(
literal|"message"
argument_list|)
decl_stmt|;
specifier|static
name|QString
name|sourceElement
init|=
name|QLatin1String
argument_list|(
literal|"source"
argument_list|)
decl_stmt|;
specifier|static
name|QString
name|translationElement
init|=
name|QLatin1String
argument_list|(
literal|"translation"
argument_list|)
decl_stmt|;
specifier|static
name|QString
name|shortCaptionId
init|=
name|QLatin1String
argument_list|(
literal|"Application short caption"
argument_list|)
decl_stmt|;
specifier|static
name|QString
name|longCaptionId
init|=
name|QLatin1String
argument_list|(
literal|"Application long caption"
argument_list|)
decl_stmt|;
specifier|static
name|QString
name|pkgDisplayNameId
init|=
name|QLatin1String
argument_list|(
literal|"Package name"
argument_list|)
decl_stmt|;
specifier|static
name|QString
name|installerPkgDisplayNameId
init|=
name|QLatin1String
argument_list|(
literal|"Smart installer package name"
argument_list|)
decl_stmt|;
specifier|static
name|QString
name|languageAttribute
init|=
name|QLatin1String
argument_list|(
literal|"language"
argument_list|)
decl_stmt|;
specifier|static
name|QChar
name|underscoreChar
init|=
name|QLatin1Char
argument_list|(
literal|'_'
argument_list|)
decl_stmt|;
enum|enum
name|CurrentContext
block|{
name|ContextUnknown
block|,
name|ContextUninteresting
block|,
name|ContextInteresting
block|}
enum|;
name|QXmlStreamReader
name|xml
argument_list|(
operator|&
name|tsFile
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|xml
operator|.
name|atEnd
argument_list|()
operator|&&
name|xml
operator|.
name|name
argument_list|()
operator|!=
name|tsElement
condition|)
name|xml
operator|.
name|readNextStartElement
argument_list|()
expr_stmt|;
while|while
condition|(
name|xml
operator|.
name|readNextStartElement
argument_list|()
condition|)
block|{
if|if
condition|(
name|xml
operator|.
name|name
argument_list|()
operator|==
name|contextElement
condition|)
block|{
name|CurrentContext
name|currentContext
init|=
name|ContextUnknown
decl_stmt|;
while|while
condition|(
name|xml
operator|.
name|readNextStartElement
argument_list|()
condition|)
block|{
if|if
condition|(
name|currentContext
operator|==
name|ContextUnknown
condition|)
block|{
comment|// Expect name element before message elements
if|if
condition|(
name|xml
operator|.
name|name
argument_list|()
operator|==
name|nameElement
condition|)
block|{
name|QString
name|nameText
init|=
name|xml
operator|.
name|readElementText
argument_list|()
decl_stmt|;
if|if
condition|(
name|nameText
operator|==
name|applicationCaptionsContext
operator|||
name|nameText
operator|==
name|pkgNameContext
condition|)
block|{
name|currentContext
operator|=
name|ContextInteresting
expr_stmt|;
block|}
else|else
block|{
name|currentContext
operator|=
name|ContextUninteresting
expr_stmt|;
block|}
block|}
else|else
block|{
name|xml
operator|.
name|skipCurrentElement
argument_list|()
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|currentContext
operator|==
name|ContextInteresting
condition|)
block|{
if|if
condition|(
name|xml
operator|.
name|name
argument_list|()
operator|==
name|messageElement
condition|)
block|{
name|QString
name|source
decl_stmt|;
name|QString
name|translation
decl_stmt|;
while|while
condition|(
name|xml
operator|.
name|readNextStartElement
argument_list|()
condition|)
block|{
if|if
condition|(
name|xml
operator|.
name|name
argument_list|()
operator|==
name|sourceElement
condition|)
block|{
name|source
operator|=
name|xml
operator|.
name|readElementText
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|xml
operator|.
name|name
argument_list|()
operator|==
name|translationElement
condition|)
block|{
name|translation
operator|=
name|xml
operator|.
name|readElementText
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|xml
operator|.
name|skipCurrentElement
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|source
operator|==
name|shortCaptionId
condition|)
block|{
if|if
condition|(
name|loc
operator|->
name|shortCaption
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|loc
operator|->
name|shortCaption
operator|=
name|translation
expr_stmt|;
block|}
else|else
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Warning: Duplicate application short caption defined in (%s).\n"
argument_list|,
name|qPrintable
argument_list|(
name|tsFilename
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|source
operator|==
name|longCaptionId
condition|)
block|{
if|if
condition|(
name|loc
operator|->
name|longCaption
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|loc
operator|->
name|longCaption
operator|=
name|translation
expr_stmt|;
block|}
else|else
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Warning: Duplicate application long caption defined in (%s).\n"
argument_list|,
name|qPrintable
argument_list|(
name|tsFilename
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|source
operator|==
name|pkgDisplayNameId
condition|)
block|{
if|if
condition|(
name|loc
operator|->
name|pkgDisplayName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|loc
operator|->
name|pkgDisplayName
operator|=
name|translation
expr_stmt|;
block|}
else|else
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Warning: Duplicate package display name defined in (%s).\n"
argument_list|,
name|qPrintable
argument_list|(
name|tsFilename
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|source
operator|==
name|installerPkgDisplayNameId
condition|)
block|{
if|if
condition|(
name|loc
operator|->
name|installerPkgDisplayName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|loc
operator|->
name|installerPkgDisplayName
operator|=
name|translation
expr_stmt|;
block|}
else|else
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Warning: Duplicate smart installer package display name defined in (%s).\n"
argument_list|,
name|qPrintable
argument_list|(
name|tsFilename
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|xml
operator|.
name|skipCurrentElement
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|xml
operator|.
name|skipCurrentElement
argument_list|()
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|xml
operator|.
name|skipCurrentElement
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|xml
operator|.
name|hasError
argument_list|()
condition|)
block|{
name|retval
operator|=
literal|false
expr_stmt|;
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"ERROR: Encountered error \"%s\" when parsing ts file (%s).\n"
argument_list|,
name|qPrintable
argument_list|(
name|xml
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|tsFilename
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|retval
operator|=
literal|false
expr_stmt|;
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Warning: Could not open ts file (%s).\n"
argument_list|,
name|qPrintable
argument_list|(
name|tsFilename
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|retval
operator|=
literal|false
expr_stmt|;
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Warning: ts file does not exist: (%s), unable to parse it.\n"
argument_list|,
name|qPrintable
argument_list|(
name|tsFilename
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|retval
return|;
block|}
end_function
begin_function
DECL|function|generatePkgNameForHeader
name|QString
name|SymbianCommonGenerator
operator|::
name|generatePkgNameForHeader
parameter_list|(
specifier|const
name|SymbianLocalizationList
modifier|&
name|symbianLocalizationList
parameter_list|,
specifier|const
name|QString
modifier|&
name|defaultName
parameter_list|,
name|bool
name|isForSmartInstaller
parameter_list|)
block|{
name|QStringList
name|allNames
decl_stmt|;
name|QString
name|noTranslation
init|=
name|defaultName
decl_stmt|;
if|if
condition|(
name|isForSmartInstaller
condition|)
name|noTranslation
operator|+=
name|QLatin1String
argument_list|(
literal|" installer"
argument_list|)
expr_stmt|;
name|SymbianLocalizationListIterator
name|iter
argument_list|(
name|symbianLocalizationList
argument_list|)
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|const
name|SymbianLocalization
modifier|&
name|loc
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|QString
name|currentName
decl_stmt|;
if|if
condition|(
name|isForSmartInstaller
condition|)
block|{
name|currentName
operator|=
name|loc
operator|.
name|installerPkgDisplayName
expr_stmt|;
block|}
else|else
block|{
name|currentName
operator|=
name|loc
operator|.
name|pkgDisplayName
expr_stmt|;
block|}
if|if
condition|(
name|currentName
operator|.
name|isEmpty
argument_list|()
condition|)
name|currentName
operator|=
name|noTranslation
expr_stmt|;
name|allNames
operator|<<
name|currentName
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|allNames
operator|.
name|size
argument_list|()
condition|)
name|allNames
operator|<<
name|noTranslation
expr_stmt|;
return|return
name|allNames
operator|.
name|join
argument_list|(
literal|"\",\""
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|addLocalizedResourcesToDeployment
name|void
name|SymbianCommonGenerator
operator|::
name|addLocalizedResourcesToDeployment
parameter_list|(
specifier|const
name|QString
modifier|&
name|deploymentFilesVar
parameter_list|,
specifier|const
name|SymbianLocalizationList
modifier|&
name|symbianLocalizationList
parameter_list|)
block|{
name|QStringList
name|locResources
decl_stmt|;
foreach|foreach
control|(
name|QString
name|defaultResource
decl|,
name|generator
operator|->
name|project
operator|->
name|values
argument_list|(
name|deploymentFilesVar
argument_list|)
control|)
block|{
if|if
condition|(
name|defaultResource
operator|.
name|endsWith
argument_list|(
literal|".rsc"
argument_list|)
condition|)
block|{
name|defaultResource
operator|.
name|chop
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|SymbianLocalizationListIterator
name|iter
argument_list|(
name|symbianLocalizationList
argument_list|)
decl_stmt|;
while|while
condition|(
name|iter
operator|.
name|hasNext
argument_list|()
condition|)
block|{
specifier|const
name|SymbianLocalization
modifier|&
name|loc
init|=
name|iter
operator|.
name|next
argument_list|()
decl_stmt|;
name|locResources
operator|<<
name|QString
argument_list|(
name|defaultResource
operator|+
name|loc
operator|.
name|symbianLanguageCode
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|generator
operator|->
name|project
operator|->
name|values
argument_list|(
name|deploymentFilesVar
argument_list|)
operator|<<
name|locResources
expr_stmt|;
block|}
end_function
begin_function
DECL|function|generateLocFileName
name|QString
name|SymbianCommonGenerator
operator|::
name|generateLocFileName
parameter_list|()
block|{
name|QString
name|fileName
argument_list|(
name|fixedTarget
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Option
operator|::
name|output_dir
operator|.
name|isEmpty
argument_list|()
condition|)
name|fileName
operator|=
name|Option
operator|::
name|output_dir
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|fileName
expr_stmt|;
name|fileName
operator|.
name|append
argument_list|(
literal|".loc"
argument_list|)
expr_stmt|;
return|return
name|fileName
return|;
block|}
end_function
end_unit
