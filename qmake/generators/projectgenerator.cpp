begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the qmake application of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"projectgenerator.h"
end_include
begin_include
include|#
directive|include
file|"option.h"
end_include
begin_include
include|#
directive|include
file|<qdatetime.h>
end_include
begin_include
include|#
directive|include
file|<qdir.h>
end_include
begin_include
include|#
directive|include
file|<qfile.h>
end_include
begin_include
include|#
directive|include
file|<qfileinfo.h>
end_include
begin_include
include|#
directive|include
file|<qregexp.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
DECL|function|project_builtin_regx
name|QString
name|project_builtin_regx
parameter_list|()
comment|//calculate the builtin regular expression..
block|{
name|QString
name|ret
decl_stmt|;
name|QStringList
name|builtin_exts
decl_stmt|;
name|builtin_exts
operator|<<
name|Option
operator|::
name|c_ext
operator|<<
name|Option
operator|::
name|ui_ext
operator|<<
name|Option
operator|::
name|yacc_ext
operator|<<
name|Option
operator|::
name|lex_ext
operator|<<
literal|".ts"
operator|<<
literal|".xlf"
operator|<<
literal|".qrc"
expr_stmt|;
name|builtin_exts
operator|+=
name|Option
operator|::
name|h_ext
operator|+
name|Option
operator|::
name|cpp_ext
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|builtin_exts
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|ret
operator|.
name|isEmpty
argument_list|()
condition|)
name|ret
operator|+=
literal|"; "
expr_stmt|;
name|ret
operator|+=
name|QString
argument_list|(
literal|"*"
argument_list|)
operator|+
name|builtin_exts
index|[
name|i
index|]
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_constructor
DECL|function|ProjectGenerator
name|ProjectGenerator
operator|::
name|ProjectGenerator
parameter_list|()
member_init_list|:
name|MakefileGenerator
argument_list|()
member_init_list|,
name|init_flag
argument_list|(
literal|false
argument_list|)
block|{ }
end_constructor
begin_function
name|void
DECL|function|init
name|ProjectGenerator
operator|::
name|init
parameter_list|()
block|{
if|if
condition|(
name|init_flag
condition|)
return|return;
name|int
name|file_count
init|=
literal|0
decl_stmt|;
name|init_flag
operator|=
literal|true
expr_stmt|;
name|verifyCompilers
argument_list|()
expr_stmt|;
name|project
operator|->
name|loadSpec
argument_list|()
expr_stmt|;
name|project
operator|->
name|evaluateFeatureFile
argument_list|(
literal|"default_pre.prf"
argument_list|)
expr_stmt|;
name|project
operator|->
name|evaluateFeatureFile
argument_list|(
literal|"default_post.prf"
argument_list|)
expr_stmt|;
name|project
operator|->
name|evaluateConfigFeatures
argument_list|()
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"CONFIG"
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
name|Option
operator|::
name|postProcessProject
argument_list|(
name|project
argument_list|)
expr_stmt|;
name|ProValueMap
modifier|&
name|v
init|=
name|project
operator|->
name|variables
argument_list|()
decl_stmt|;
name|QString
name|templ
init|=
name|Option
operator|::
name|globals
operator|->
name|user_template
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
argument_list|(
literal|"app"
argument_list|)
else|:
name|Option
operator|::
name|globals
operator|->
name|user_template
decl_stmt|;
if|if
condition|(
operator|!
name|Option
operator|::
name|globals
operator|->
name|user_template_prefix
operator|.
name|isEmpty
argument_list|()
condition|)
name|templ
operator|.
name|prepend
argument_list|(
name|Option
operator|::
name|globals
operator|->
name|user_template_prefix
argument_list|)
expr_stmt|;
name|v
index|[
literal|"TEMPLATE_ASSIGN"
index|]
operator|+=
name|templ
expr_stmt|;
comment|//the scary stuff
if|if
condition|(
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE_ASSIGN"
argument_list|)
operator|!=
literal|"subdirs"
condition|)
block|{
name|QString
name|builtin_regex
init|=
name|project_builtin_regx
argument_list|()
decl_stmt|;
name|QStringList
name|dirs
init|=
name|Option
operator|::
name|projfile
operator|::
name|project_dirs
decl_stmt|;
if|if
condition|(
name|Option
operator|::
name|projfile
operator|::
name|do_pwd
condition|)
block|{
if|if
condition|(
operator|!
name|v
index|[
literal|"INCLUDEPATH"
index|]
operator|.
name|contains
argument_list|(
literal|"."
argument_list|)
condition|)
name|v
index|[
literal|"INCLUDEPATH"
index|]
operator|+=
literal|"."
expr_stmt|;
name|dirs
operator|.
name|prepend
argument_list|(
name|qmake_getpwd
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dirs
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|dir
decl_stmt|,
name|regex
decl_stmt|,
name|pd
init|=
name|dirs
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|bool
name|add_depend
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|exists
argument_list|(
name|pd
argument_list|)
condition|)
block|{
name|QFileInfo
name|fi
argument_list|(
name|fileInfo
argument_list|(
name|pd
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fi
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|dir
operator|=
name|pd
expr_stmt|;
name|add_depend
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|dir
operator|.
name|right
argument_list|(
literal|1
argument_list|)
operator|!=
name|Option
operator|::
name|dir_sep
condition|)
name|dir
operator|+=
name|Option
operator|::
name|dir_sep
expr_stmt|;
if|if
condition|(
name|Option
operator|::
name|recursive
condition|)
block|{
name|QStringList
name|files
init|=
name|QDir
argument_list|(
name|dir
argument_list|)
operator|.
name|entryList
argument_list|(
name|QDir
operator|::
name|Files
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
name|dirs
operator|.
name|append
argument_list|(
name|dir
operator|+
name|files
index|[
name|i
index|]
operator|+
name|QDir
operator|::
name|separator
argument_list|()
operator|+
name|builtin_regex
argument_list|)
expr_stmt|;
block|}
name|regex
operator|=
name|builtin_regex
expr_stmt|;
block|}
else|else
block|{
name|QString
name|file
init|=
name|pd
decl_stmt|;
name|int
name|s
init|=
name|file
operator|.
name|lastIndexOf
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
operator|-
literal|1
condition|)
name|dir
operator|=
name|file
operator|.
name|left
argument_list|(
name|s
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|addFile
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|add_depend
operator|=
literal|true
expr_stmt|;
name|file_count
operator|++
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
comment|//regexp
name|regex
operator|=
name|pd
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|regex
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|int
name|s
init|=
name|regex
operator|.
name|lastIndexOf
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
operator|-
literal|1
condition|)
block|{
name|dir
operator|=
name|regex
operator|.
name|left
argument_list|(
name|s
operator|+
literal|1
argument_list|)
expr_stmt|;
name|regex
operator|=
name|regex
operator|.
name|right
argument_list|(
name|regex
operator|.
name|length
argument_list|()
operator|-
operator|(
name|s
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|Option
operator|::
name|recursive
condition|)
block|{
name|QStringList
name|entries
init|=
name|QDir
argument_list|(
name|dir
argument_list|)
operator|.
name|entryList
argument_list|(
name|QDir
operator|::
name|Dirs
operator||
name|QDir
operator|::
name|NoDotAndDotDot
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|entries
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
name|dirs
operator|.
name|append
argument_list|(
name|dir
operator|+
name|entries
index|[
name|i
index|]
operator|+
name|QDir
operator|::
name|separator
argument_list|()
operator|+
name|regex
argument_list|)
expr_stmt|;
block|}
name|QStringList
name|files
init|=
name|QDir
argument_list|(
name|dir
argument_list|)
operator|.
name|entryList
argument_list|(
name|QDir
operator|::
name|nameFiltersFromString
argument_list|(
name|regex
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
name|int
operator|)
name|files
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QString
name|file
init|=
name|dir
operator|+
name|files
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
name|addFile
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|add_depend
operator|=
literal|true
expr_stmt|;
name|file_count
operator|++
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|add_depend
operator|&&
operator|!
name|dir
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|v
index|[
literal|"DEPENDPATH"
index|]
operator|.
name|contains
argument_list|(
name|dir
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
block|{
name|QFileInfo
name|fi
argument_list|(
name|fileInfo
argument_list|(
name|dir
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fi
operator|.
name|absoluteFilePath
argument_list|()
operator|!=
name|qmake_getpwd
argument_list|()
condition|)
name|v
index|[
literal|"DEPENDPATH"
index|]
operator|+=
name|fileFixify
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|file_count
condition|)
block|{
comment|//shall we try a subdir?
name|QStringList
name|knownDirs
init|=
name|Option
operator|::
name|projfile
operator|::
name|project_dirs
decl_stmt|;
if|if
condition|(
name|Option
operator|::
name|projfile
operator|::
name|do_pwd
condition|)
name|knownDirs
operator|.
name|prepend
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|out_file
init|=
name|fileFixify
argument_list|(
name|Option
operator|::
name|output
operator|.
name|fileName
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|knownDirs
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|pd
init|=
name|knownDirs
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|exists
argument_list|(
name|pd
argument_list|)
condition|)
block|{
name|QString
name|newdir
init|=
name|pd
decl_stmt|;
name|QFileInfo
name|fi
argument_list|(
name|fileInfo
argument_list|(
name|newdir
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fi
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|newdir
operator|=
name|fileFixify
argument_list|(
name|newdir
argument_list|)
expr_stmt|;
name|ProStringList
modifier|&
name|subdirs
init|=
name|v
index|[
literal|"SUBDIRS"
index|]
decl_stmt|;
if|if
condition|(
name|exists
argument_list|(
name|fi
operator|.
name|filePath
argument_list|()
operator|+
name|QDir
operator|::
name|separator
argument_list|()
operator|+
name|fi
operator|.
name|fileName
argument_list|()
operator|+
name|Option
operator|::
name|pro_ext
argument_list|)
operator|&&
operator|!
name|subdirs
operator|.
name|contains
argument_list|(
name|newdir
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
block|{
name|subdirs
operator|.
name|append
argument_list|(
name|newdir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QStringList
name|profiles
init|=
name|QDir
argument_list|(
name|newdir
argument_list|)
operator|.
name|entryList
argument_list|(
name|QStringList
argument_list|(
literal|"*"
operator|+
name|Option
operator|::
name|pro_ext
argument_list|)
argument_list|,
name|QDir
operator|::
name|Files
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
name|int
operator|)
name|profiles
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QString
name|nd
init|=
name|newdir
decl_stmt|;
if|if
condition|(
name|nd
operator|==
literal|"."
condition|)
name|nd
operator|=
literal|""
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|nd
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|nd
operator|.
name|endsWith
argument_list|(
name|QString
argument_list|(
name|QChar
argument_list|(
name|QDir
operator|::
name|separator
argument_list|()
argument_list|)
argument_list|)
argument_list|)
condition|)
name|nd
operator|+=
name|QDir
operator|::
name|separator
argument_list|()
expr_stmt|;
name|nd
operator|+=
name|profiles
index|[
name|i
index|]
expr_stmt|;
name|fileFixify
argument_list|(
name|nd
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|subdirs
operator|.
name|contains
argument_list|(
name|nd
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
operator|&&
operator|!
name|out_file
operator|.
name|endsWith
argument_list|(
name|nd
argument_list|)
condition|)
name|subdirs
operator|.
name|append
argument_list|(
name|nd
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|Option
operator|::
name|recursive
condition|)
block|{
name|QStringList
name|dirs
init|=
name|QDir
argument_list|(
name|newdir
argument_list|)
operator|.
name|entryList
argument_list|(
name|QDir
operator|::
name|Dirs
operator||
name|QDir
operator|::
name|NoDotAndDotDot
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
name|int
operator|)
name|dirs
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QString
name|nd
init|=
name|fileFixify
argument_list|(
name|newdir
operator|+
name|QDir
operator|::
name|separator
argument_list|()
operator|+
name|dirs
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|knownDirs
operator|.
name|contains
argument_list|(
name|nd
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
name|knownDirs
operator|.
name|append
argument_list|(
name|nd
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
comment|//regexp
name|QString
name|regx
init|=
name|pd
decl_stmt|,
name|dir
decl_stmt|;
name|int
name|s
init|=
name|regx
operator|.
name|lastIndexOf
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
operator|-
literal|1
condition|)
block|{
name|dir
operator|=
name|regx
operator|.
name|left
argument_list|(
name|s
operator|+
literal|1
argument_list|)
expr_stmt|;
name|regx
operator|=
name|regx
operator|.
name|right
argument_list|(
name|regx
operator|.
name|length
argument_list|()
operator|-
operator|(
name|s
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
block|}
name|QStringList
name|files
init|=
name|QDir
argument_list|(
name|dir
argument_list|)
operator|.
name|entryList
argument_list|(
name|QDir
operator|::
name|nameFiltersFromString
argument_list|(
name|regx
argument_list|)
argument_list|,
name|QDir
operator|::
name|Dirs
operator||
name|QDir
operator|::
name|NoDotAndDotDot
argument_list|)
decl_stmt|;
name|ProStringList
modifier|&
name|subdirs
init|=
name|v
index|[
literal|"SUBDIRS"
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
name|int
operator|)
name|files
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QString
name|newdir
argument_list|(
name|dir
operator|+
name|files
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|QFileInfo
name|fi
argument_list|(
name|fileInfo
argument_list|(
name|newdir
argument_list|)
argument_list|)
decl_stmt|;
block|{
name|newdir
operator|=
name|fileFixify
argument_list|(
name|newdir
argument_list|)
expr_stmt|;
if|if
condition|(
name|exists
argument_list|(
name|fi
operator|.
name|filePath
argument_list|()
operator|+
name|QDir
operator|::
name|separator
argument_list|()
operator|+
name|fi
operator|.
name|fileName
argument_list|()
operator|+
name|Option
operator|::
name|pro_ext
argument_list|)
operator|&&
operator|!
name|subdirs
operator|.
name|contains
argument_list|(
name|newdir
argument_list|)
condition|)
block|{
name|subdirs
operator|.
name|append
argument_list|(
name|newdir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QStringList
name|profiles
init|=
name|QDir
argument_list|(
name|newdir
argument_list|)
operator|.
name|entryList
argument_list|(
name|QStringList
argument_list|(
literal|"*"
operator|+
name|Option
operator|::
name|pro_ext
argument_list|)
argument_list|,
name|QDir
operator|::
name|Files
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
name|int
operator|)
name|profiles
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QString
name|nd
init|=
name|newdir
operator|+
name|QDir
operator|::
name|separator
argument_list|()
operator|+
name|files
index|[
name|i
index|]
decl_stmt|;
name|fileFixify
argument_list|(
name|nd
argument_list|)
expr_stmt|;
if|if
condition|(
name|files
index|[
name|i
index|]
operator|!=
literal|"."
operator|&&
name|files
index|[
name|i
index|]
operator|!=
literal|".."
operator|&&
operator|!
name|subdirs
operator|.
name|contains
argument_list|(
name|nd
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
block|{
if|if
condition|(
name|newdir
operator|+
name|files
index|[
name|i
index|]
operator|!=
name|Option
operator|::
name|output_dir
operator|+
name|Option
operator|::
name|output
operator|.
name|fileName
argument_list|()
condition|)
name|subdirs
operator|.
name|append
argument_list|(
name|nd
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|Option
operator|::
name|recursive
operator|&&
operator|!
name|knownDirs
operator|.
name|contains
argument_list|(
name|newdir
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
name|knownDirs
operator|.
name|append
argument_list|(
name|newdir
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
name|v
index|[
literal|"TEMPLATE_ASSIGN"
index|]
operator|=
name|ProStringList
argument_list|(
literal|"subdirs"
argument_list|)
expr_stmt|;
return|return;
block|}
comment|//setup deplist
name|QList
argument_list|<
name|QMakeLocalFileName
argument_list|>
name|deplist
decl_stmt|;
block|{
specifier|const
name|ProStringList
modifier|&
name|d
init|=
name|v
index|[
literal|"DEPENDPATH"
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|d
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|deplist
operator|.
name|append
argument_list|(
name|QMakeLocalFileName
argument_list|(
name|d
index|[
name|i
index|]
operator|.
name|toQString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|setDependencyPaths
argument_list|(
name|deplist
argument_list|)
expr_stmt|;
name|ProStringList
modifier|&
name|h
init|=
name|v
index|[
literal|"HEADERS"
index|]
decl_stmt|;
name|bool
name|no_qt_files
init|=
literal|true
decl_stmt|;
specifier|static
specifier|const
name|char
modifier|*
name|srcs
index|[]
init|=
block|{
literal|"SOURCES"
block|,
literal|"YACCSOURCES"
block|,
literal|"LEXSOURCES"
block|,
literal|"FORMS"
block|,
literal|0
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|srcs
index|[
name|i
index|]
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|ProStringList
modifier|&
name|l
init|=
name|v
index|[
name|srcs
index|[
name|i
index|]
index|]
decl_stmt|;
name|QMakeSourceFileInfo
operator|::
name|SourceFileType
name|type
init|=
name|QMakeSourceFileInfo
operator|::
name|TYPE_C
decl_stmt|;
name|QMakeSourceFileInfo
operator|::
name|addSourceFiles
argument_list|(
name|l
argument_list|,
name|QMakeSourceFileInfo
operator|::
name|SEEK_DEPS
argument_list|,
name|type
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QStringList
name|tmp
init|=
name|QMakeSourceFileInfo
operator|::
name|dependencies
argument_list|(
name|l
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toQString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tmp
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|dep_it
init|=
literal|0
init|;
name|dep_it
operator|<
name|tmp
operator|.
name|size
argument_list|()
condition|;
operator|++
name|dep_it
control|)
block|{
name|QString
name|dep
init|=
name|tmp
index|[
name|dep_it
index|]
decl_stmt|;
name|dep
operator|=
name|fixPathToQmake
argument_list|(
name|dep
argument_list|)
expr_stmt|;
name|QString
name|file_dir
init|=
name|dep
operator|.
name|section
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|,
literal|0
argument_list|,
operator|-
literal|2
argument_list|)
decl_stmt|,
name|file_no_path
init|=
name|dep
operator|.
name|section
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file_dir
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|inc_it
init|=
literal|0
init|;
name|inc_it
operator|<
name|deplist
operator|.
name|size
argument_list|()
condition|;
operator|++
name|inc_it
control|)
block|{
name|QMakeLocalFileName
name|inc
init|=
name|deplist
index|[
name|inc_it
index|]
decl_stmt|;
if|if
condition|(
name|inc
operator|.
name|local
argument_list|()
operator|==
name|file_dir
operator|&&
operator|!
name|v
index|[
literal|"INCLUDEPATH"
index|]
operator|.
name|contains
argument_list|(
name|inc
operator|.
name|real
argument_list|()
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
name|v
index|[
literal|"INCLUDEPATH"
index|]
operator|+=
name|inc
operator|.
name|real
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|no_qt_files
operator|&&
name|file_no_path
operator|.
name|indexOf
argument_list|(
name|QRegExp
argument_list|(
literal|"^q[a-z_0-9].h$"
argument_list|)
argument_list|)
operator|!=
operator|-
literal|1
condition|)
name|no_qt_files
operator|=
literal|false
expr_stmt|;
name|QString
name|h_ext
decl_stmt|;
for|for
control|(
name|int
name|hit
init|=
literal|0
init|;
name|hit
operator|<
name|Option
operator|::
name|h_ext
operator|.
name|size
argument_list|()
condition|;
operator|++
name|hit
control|)
block|{
if|if
condition|(
name|dep
operator|.
name|endsWith
argument_list|(
name|Option
operator|::
name|h_ext
operator|.
name|at
argument_list|(
name|hit
argument_list|)
argument_list|)
condition|)
block|{
name|h_ext
operator|=
name|Option
operator|::
name|h_ext
operator|.
name|at
argument_list|(
name|hit
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|h_ext
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|cppit
init|=
literal|0
init|;
name|cppit
operator|<
name|Option
operator|::
name|cpp_ext
operator|.
name|size
argument_list|()
condition|;
operator|++
name|cppit
control|)
block|{
name|QString
name|src
argument_list|(
name|dep
operator|.
name|left
argument_list|(
name|dep
operator|.
name|length
argument_list|()
operator|-
name|h_ext
operator|.
name|length
argument_list|()
argument_list|)
operator|+
name|Option
operator|::
name|cpp_ext
operator|.
name|at
argument_list|(
name|cppit
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|exists
argument_list|(
name|src
argument_list|)
condition|)
block|{
name|ProStringList
modifier|&
name|srcl
init|=
name|v
index|[
literal|"SOURCES"
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|srcl
operator|.
name|contains
argument_list|(
name|src
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
name|srcl
operator|.
name|append
argument_list|(
name|src
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|dep
operator|.
name|endsWith
argument_list|(
name|Option
operator|::
name|lex_ext
argument_list|)
operator|&&
name|file_no_path
operator|.
name|startsWith
argument_list|(
name|Option
operator|::
name|lex_mod
argument_list|)
condition|)
block|{
name|addConfig
argument_list|(
literal|"lex_included"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|h
operator|.
name|contains
argument_list|(
name|dep
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
name|h
operator|+=
name|dep
expr_stmt|;
block|}
block|}
block|}
block|}
comment|//strip out files that are actually output from internal compilers (ie temporary files)
specifier|const
name|ProStringList
modifier|&
name|quc
init|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_EXTRA_COMPILERS"
argument_list|)
decl_stmt|;
for|for
control|(
name|ProStringList
operator|::
name|ConstIterator
name|it
init|=
name|quc
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|quc
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QString
name|tmp_out
init|=
name|project
operator|->
name|first
argument_list|(
name|ProKey
argument_list|(
operator|*
name|it
operator|+
literal|".output"
argument_list|)
argument_list|)
operator|.
name|toQString
argument_list|()
decl_stmt|;
if|if
condition|(
name|tmp_out
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|ProStringList
name|var_out
init|=
name|project
operator|->
name|values
argument_list|(
name|ProKey
argument_list|(
operator|*
name|it
operator|+
literal|".variable_out"
argument_list|)
argument_list|)
decl_stmt|;
name|bool
name|defaults
init|=
name|var_out
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|var_out
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|ProString
name|v
init|=
name|var_out
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|startsWith
argument_list|(
literal|"GENERATED_"
argument_list|)
condition|)
block|{
name|defaults
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|defaults
condition|)
block|{
name|var_out
operator|<<
literal|"SOURCES"
expr_stmt|;
name|var_out
operator|<<
literal|"HEADERS"
expr_stmt|;
name|var_out
operator|<<
literal|"FORMS"
expr_stmt|;
block|}
specifier|const
name|ProStringList
modifier|&
name|tmp
init|=
name|project
operator|->
name|values
argument_list|(
name|ProKey
argument_list|(
operator|*
name|it
operator|+
literal|".input"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|ProStringList
operator|::
name|ConstIterator
name|it2
init|=
name|tmp
operator|.
name|begin
argument_list|()
init|;
name|it2
operator|!=
name|tmp
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it2
control|)
block|{
name|ProStringList
modifier|&
name|inputs
init|=
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it2
operator|)
operator|.
name|toKey
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|ProStringList
operator|::
name|Iterator
name|input
init|=
name|inputs
operator|.
name|begin
argument_list|()
init|;
name|input
operator|!=
name|inputs
operator|.
name|end
argument_list|()
condition|;
operator|++
name|input
control|)
block|{
name|QString
name|path
init|=
name|replaceExtraCompilerVariables
argument_list|(
name|tmp_out
argument_list|,
operator|(
operator|*
name|input
operator|)
operator|.
name|toQString
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
decl_stmt|;
name|path
operator|=
name|fixPathToQmake
argument_list|(
name|path
argument_list|)
operator|.
name|section
argument_list|(
literal|'/'
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|var_out
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|ProString
name|v
init|=
name|var_out
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|ProStringList
modifier|&
name|list
init|=
name|project
operator|->
name|values
argument_list|(
name|v
operator|.
name|toKey
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|src
init|=
literal|0
init|;
name|src
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
name|list
index|[
name|src
index|]
operator|==
name|path
operator|||
name|list
index|[
name|src
index|]
operator|.
name|endsWith
argument_list|(
literal|"/"
operator|+
name|path
argument_list|)
condition|)
name|list
operator|.
name|removeAt
argument_list|(
name|src
argument_list|)
expr_stmt|;
else|else
operator|++
name|src
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
end_function
begin_function
name|bool
DECL|function|writeMakefile
name|ProjectGenerator
operator|::
name|writeMakefile
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|)
block|{
name|t
operator|<<
literal|"######################################################################"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"# Automatically generated by qmake ("
name|QMAKE_VERSION_STR
literal|") "
operator|<<
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
operator|.
name|toString
argument_list|()
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"######################################################################"
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|Option
operator|::
name|globals
operator|->
name|precmds
operator|.
name|isEmpty
argument_list|()
condition|)
name|t
operator|<<
name|Option
operator|::
name|globals
operator|->
name|precmds
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|getWritableVar
argument_list|(
literal|"TEMPLATE_ASSIGN"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE_ASSIGN"
argument_list|)
operator|==
literal|"subdirs"
condition|)
block|{
name|t
operator|<<
name|endl
operator|<<
literal|"# Directories"
operator|<<
literal|"\n"
operator|<<
name|getWritableVar
argument_list|(
literal|"SUBDIRS"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//figure out target
name|QString
name|ofn
init|=
name|QFileInfo
argument_list|(
cast|static_cast
argument_list|<
name|QFile
operator|*
argument_list|>
argument_list|(
name|t
operator|.
name|device
argument_list|()
argument_list|)
operator|->
name|fileName
argument_list|()
argument_list|)
operator|.
name|completeBaseName
argument_list|()
decl_stmt|;
if|if
condition|(
name|ofn
operator|.
name|isEmpty
argument_list|()
operator|||
name|ofn
operator|==
literal|"-"
condition|)
name|ofn
operator|=
literal|"unknown"
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"TARGET_ASSIGN"
argument_list|)
operator|=
name|ProStringList
argument_list|(
name|ofn
argument_list|)
expr_stmt|;
name|t
operator|<<
name|getWritableVar
argument_list|(
literal|"TARGET_ASSIGN"
argument_list|)
operator|<<
name|getWritableVar
argument_list|(
literal|"CONFIG"
argument_list|,
literal|false
argument_list|)
operator|<<
name|getWritableVar
argument_list|(
literal|"CONFIG_REMOVE"
argument_list|,
literal|false
argument_list|)
operator|<<
name|getWritableVar
argument_list|(
literal|"INCLUDEPATH"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"# Input"
operator|<<
literal|"\n"
expr_stmt|;
name|t
operator|<<
name|getWritableVar
argument_list|(
literal|"HEADERS"
argument_list|)
operator|<<
name|getWritableVar
argument_list|(
literal|"FORMS"
argument_list|)
operator|<<
name|getWritableVar
argument_list|(
literal|"LEXSOURCES"
argument_list|)
operator|<<
name|getWritableVar
argument_list|(
literal|"YACCSOURCES"
argument_list|)
operator|<<
name|getWritableVar
argument_list|(
literal|"SOURCES"
argument_list|)
operator|<<
name|getWritableVar
argument_list|(
literal|"RESOURCES"
argument_list|)
operator|<<
name|getWritableVar
argument_list|(
literal|"TRANSLATIONS"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|Option
operator|::
name|globals
operator|->
name|postcmds
operator|.
name|isEmpty
argument_list|()
condition|)
name|t
operator|<<
name|Option
operator|::
name|globals
operator|->
name|postcmds
operator|<<
name|endl
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
name|bool
DECL|function|addConfig
name|ProjectGenerator
operator|::
name|addConfig
parameter_list|(
specifier|const
name|QString
modifier|&
name|cfg
parameter_list|,
name|bool
name|add
parameter_list|)
block|{
name|ProKey
name|where
init|=
literal|"CONFIG"
decl_stmt|;
if|if
condition|(
operator|!
name|add
condition|)
name|where
operator|=
literal|"CONFIG_REMOVE"
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|values
argument_list|(
name|where
argument_list|)
operator|.
name|contains
argument_list|(
name|cfg
argument_list|)
condition|)
block|{
name|project
operator|->
name|values
argument_list|(
name|where
argument_list|)
operator|+=
name|cfg
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
name|bool
DECL|function|addFile
name|ProjectGenerator
operator|::
name|addFile
parameter_list|(
name|QString
name|file
parameter_list|)
block|{
name|file
operator|=
name|fileFixify
argument_list|(
name|file
argument_list|,
name|qmake_getpwd
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|dir
decl_stmt|;
name|int
name|s
init|=
name|file
operator|.
name|lastIndexOf
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
operator|-
literal|1
condition|)
name|dir
operator|=
name|file
operator|.
name|left
argument_list|(
name|s
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
operator|.
name|mid
argument_list|(
name|dir
operator|.
name|length
argument_list|()
argument_list|,
name|Option
operator|::
name|h_moc_mod
operator|.
name|length
argument_list|()
argument_list|)
operator|==
name|Option
operator|::
name|h_moc_mod
condition|)
return|return
literal|false
return|;
name|ProKey
name|where
decl_stmt|;
for|for
control|(
name|int
name|cppit
init|=
literal|0
init|;
name|cppit
operator|<
name|Option
operator|::
name|cpp_ext
operator|.
name|size
argument_list|()
condition|;
operator|++
name|cppit
control|)
block|{
if|if
condition|(
name|file
operator|.
name|endsWith
argument_list|(
name|Option
operator|::
name|cpp_ext
index|[
name|cppit
index|]
argument_list|)
condition|)
block|{
name|where
operator|=
literal|"SOURCES"
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|where
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|hit
init|=
literal|0
init|;
name|hit
operator|<
name|Option
operator|::
name|h_ext
operator|.
name|size
argument_list|()
condition|;
operator|++
name|hit
control|)
if|if
condition|(
name|file
operator|.
name|endsWith
argument_list|(
name|Option
operator|::
name|h_ext
operator|.
name|at
argument_list|(
name|hit
argument_list|)
argument_list|)
condition|)
block|{
name|where
operator|=
literal|"HEADERS"
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|where
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|cit
init|=
literal|0
init|;
name|cit
operator|<
name|Option
operator|::
name|c_ext
operator|.
name|size
argument_list|()
condition|;
operator|++
name|cit
control|)
block|{
if|if
condition|(
name|file
operator|.
name|endsWith
argument_list|(
name|Option
operator|::
name|c_ext
index|[
name|cit
index|]
argument_list|)
condition|)
block|{
name|where
operator|=
literal|"SOURCES"
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|where
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|file
operator|.
name|endsWith
argument_list|(
name|Option
operator|::
name|ui_ext
argument_list|)
condition|)
name|where
operator|=
literal|"FORMS"
expr_stmt|;
elseif|else
if|if
condition|(
name|file
operator|.
name|endsWith
argument_list|(
name|Option
operator|::
name|lex_ext
argument_list|)
condition|)
name|where
operator|=
literal|"LEXSOURCES"
expr_stmt|;
elseif|else
if|if
condition|(
name|file
operator|.
name|endsWith
argument_list|(
name|Option
operator|::
name|yacc_ext
argument_list|)
condition|)
name|where
operator|=
literal|"YACCSOURCES"
expr_stmt|;
elseif|else
if|if
condition|(
name|file
operator|.
name|endsWith
argument_list|(
literal|".ts"
argument_list|)
operator|||
name|file
operator|.
name|endsWith
argument_list|(
literal|".xlf"
argument_list|)
condition|)
name|where
operator|=
literal|"TRANSLATIONS"
expr_stmt|;
elseif|else
if|if
condition|(
name|file
operator|.
name|endsWith
argument_list|(
literal|".qrc"
argument_list|)
condition|)
name|where
operator|=
literal|"RESOURCES"
expr_stmt|;
block|}
name|QString
name|newfile
init|=
name|fixPathToQmake
argument_list|(
name|fileFixify
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|ProStringList
modifier|&
name|endList
init|=
name|project
operator|->
name|values
argument_list|(
name|where
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|endList
operator|.
name|contains
argument_list|(
name|newfile
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
block|{
name|endList
operator|+=
name|newfile
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
name|QString
DECL|function|getWritableVar
name|ProjectGenerator
operator|::
name|getWritableVar
parameter_list|(
specifier|const
name|char
modifier|*
name|vk
parameter_list|,
name|bool
parameter_list|)
block|{
specifier|const
name|ProKey
name|v
argument_list|(
name|vk
argument_list|)
decl_stmt|;
name|ProStringList
modifier|&
name|vals
init|=
name|project
operator|->
name|values
argument_list|(
name|v
argument_list|)
decl_stmt|;
if|if
condition|(
name|vals
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|""
return|;
comment|// If values contain spaces, ensure that they are quoted
for|for
control|(
name|ProStringList
operator|::
name|iterator
name|it
init|=
name|vals
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|vals
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
operator|(
operator|*
name|it
operator|)
operator|.
name|contains
argument_list|(
literal|' '
argument_list|)
operator|&&
operator|!
operator|(
operator|*
name|it
operator|)
operator|.
name|startsWith
argument_list|(
literal|' '
argument_list|)
condition|)
operator|*
name|it
operator|=
literal|"\""
operator|+
operator|*
name|it
operator|+
literal|"\""
expr_stmt|;
block|}
name|QString
name|ret
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|endsWith
argument_list|(
literal|"_REMOVE"
argument_list|)
condition|)
name|ret
operator|=
name|v
operator|.
name|left
argument_list|(
name|v
operator|.
name|length
argument_list|()
operator|-
literal|7
argument_list|)
operator|+
literal|" -= "
expr_stmt|;
elseif|else
if|if
condition|(
name|v
operator|.
name|endsWith
argument_list|(
literal|"_ASSIGN"
argument_list|)
condition|)
name|ret
operator|=
name|v
operator|.
name|left
argument_list|(
name|v
operator|.
name|length
argument_list|()
operator|-
literal|7
argument_list|)
operator|+
literal|" = "
expr_stmt|;
else|else
name|ret
operator|=
name|v
operator|+
literal|" += "
expr_stmt|;
name|QString
name|join
init|=
name|vals
operator|.
name|join
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|.
name|length
argument_list|()
operator|+
name|join
operator|.
name|length
argument_list|()
operator|>
literal|80
condition|)
block|{
name|QString
name|spaces
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ret
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
name|spaces
operator|+=
literal|" "
expr_stmt|;
name|join
operator|=
name|vals
operator|.
name|join
argument_list|(
literal|" \\\n"
operator|+
name|spaces
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
operator|+
name|join
operator|+
literal|"\n"
return|;
block|}
end_function
begin_function
name|bool
DECL|function|openOutput
name|ProjectGenerator
operator|::
name|openOutput
parameter_list|(
name|QFile
modifier|&
name|file
parameter_list|,
specifier|const
name|QString
modifier|&
name|build
parameter_list|)
specifier|const
block|{
name|QString
name|outdir
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|fileName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QFileInfo
name|fi
argument_list|(
name|fileInfo
argument_list|(
name|file
operator|.
name|fileName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fi
operator|.
name|isDir
argument_list|()
condition|)
name|outdir
operator|=
name|fi
operator|.
name|path
argument_list|()
operator|+
name|QDir
operator|::
name|separator
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|outdir
operator|.
name|isEmpty
argument_list|()
operator|||
name|file
operator|.
name|fileName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QString
name|dir
init|=
name|qmake_getpwd
argument_list|()
decl_stmt|;
name|int
name|s
init|=
name|dir
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
operator|-
literal|1
condition|)
name|dir
operator|=
name|dir
operator|.
name|right
argument_list|(
name|dir
operator|.
name|length
argument_list|()
operator|-
operator|(
name|s
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
name|file
operator|.
name|setFileName
argument_list|(
name|outdir
operator|+
name|dir
operator|+
name|Option
operator|::
name|pro_ext
argument_list|)
expr_stmt|;
block|}
return|return
name|MakefileGenerator
operator|::
name|openOutput
argument_list|(
name|file
argument_list|,
name|build
argument_list|)
return|;
block|}
end_function
begin_function
name|QString
DECL|function|fixPathToQmake
name|ProjectGenerator
operator|::
name|fixPathToQmake
parameter_list|(
specifier|const
name|QString
modifier|&
name|file
parameter_list|)
block|{
name|QString
name|ret
init|=
name|file
decl_stmt|;
if|if
condition|(
name|Option
operator|::
name|dir_sep
operator|!=
name|QLatin1String
argument_list|(
literal|"/"
argument_list|)
condition|)
name|ret
operator|=
name|ret
operator|.
name|replace
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|,
name|QLatin1String
argument_list|(
literal|"/"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
