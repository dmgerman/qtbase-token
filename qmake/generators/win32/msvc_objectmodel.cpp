begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the qmake application of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"msvc_objectmodel.h"
end_include
begin_include
include|#
directive|include
file|"msvc_vcproj.h"
end_include
begin_include
include|#
directive|include
file|"msvc_vcxproj.h"
end_include
begin_include
include|#
directive|include
file|<qscopedpointer.h>
end_include
begin_include
include|#
directive|include
file|<qstringlist.h>
end_include
begin_include
include|#
directive|include
file|<qfileinfo.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
comment|// XML Tags ---------------------------------------------------------
DECL|variable|_Configuration
specifier|const
name|char
name|_Configuration
index|[]
init|=
literal|"Configuration"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_Configurations
specifier|const
name|char
name|_Configurations
index|[]
init|=
literal|"Configurations"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|q_File
specifier|const
name|char
name|q_File
index|[]
init|=
literal|"File"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_FileConfiguration
specifier|const
name|char
name|_FileConfiguration
index|[]
init|=
literal|"FileConfiguration"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|q_Files
specifier|const
name|char
name|q_Files
index|[]
init|=
literal|"Files"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_Filter
specifier|const
name|char
name|_Filter
index|[]
init|=
literal|"Filter"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_Globals
specifier|const
name|char
name|_Globals
index|[]
init|=
literal|"Globals"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_Platform
specifier|const
name|char
name|_Platform
index|[]
init|=
literal|"Platform"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_Platforms
specifier|const
name|char
name|_Platforms
index|[]
init|=
literal|"Platforms"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_Tool
specifier|const
name|char
name|_Tool
index|[]
init|=
literal|"Tool"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_VisualStudioProject
specifier|const
name|char
name|_VisualStudioProject
index|[]
init|=
literal|"VisualStudioProject"
decl_stmt|;
end_decl_stmt
begin_comment
comment|// XML Properties ---------------------------------------------------
end_comment
begin_decl_stmt
DECL|variable|_AddModuleNamesToAssembly
specifier|const
name|char
name|_AddModuleNamesToAssembly
index|[]
init|=
literal|"AddModuleNamesToAssembly"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_AdditionalDependencies
specifier|const
name|char
name|_AdditionalDependencies
index|[]
init|=
literal|"AdditionalDependencies"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_AdditionalFiles
specifier|const
name|char
name|_AdditionalFiles
index|[]
init|=
literal|"AdditionalFiles"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_AdditionalIncludeDirectories
specifier|const
name|char
name|_AdditionalIncludeDirectories
index|[]
init|=
literal|"AdditionalIncludeDirectories"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_AdditionalLibraryDirectories
specifier|const
name|char
name|_AdditionalLibraryDirectories
index|[]
init|=
literal|"AdditionalLibraryDirectories"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_AdditionalOptions
specifier|const
name|char
name|_AdditionalOptions
index|[]
init|=
literal|"AdditionalOptions"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_AdditionalUsingDirectories
specifier|const
name|char
name|_AdditionalUsingDirectories
index|[]
init|=
literal|"AdditionalUsingDirectories"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_AssemblerListingLocation
specifier|const
name|char
name|_AssemblerListingLocation
index|[]
init|=
literal|"AssemblerListingLocation"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_AssemblerOutput
specifier|const
name|char
name|_AssemblerOutput
index|[]
init|=
literal|"AssemblerOutput"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ATLMinimizesCRunTimeLibraryUsage
specifier|const
name|char
name|_ATLMinimizesCRunTimeLibraryUsage
index|[]
init|=
literal|"ATLMinimizesCRunTimeLibraryUsage"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_BaseAddress
specifier|const
name|char
name|_BaseAddress
index|[]
init|=
literal|"BaseAddress"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_BasicRuntimeChecks
specifier|const
name|char
name|_BasicRuntimeChecks
index|[]
init|=
literal|"BasicRuntimeChecks"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_BrowseInformation
specifier|const
name|char
name|_BrowseInformation
index|[]
init|=
literal|"BrowseInformation"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_BrowseInformationFile
specifier|const
name|char
name|_BrowseInformationFile
index|[]
init|=
literal|"BrowseInformationFile"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_BufferSecurityCheck
specifier|const
name|char
name|_BufferSecurityCheck
index|[]
init|=
literal|"BufferSecurityCheck"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_BuildBrowserInformation
specifier|const
name|char
name|_BuildBrowserInformation
index|[]
init|=
literal|"BuildBrowserInformation"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_CPreprocessOptions
specifier|const
name|char
name|_CPreprocessOptions
index|[]
init|=
literal|"CPreprocessOptions"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_CallingConvention
specifier|const
name|char
name|_CallingConvention
index|[]
init|=
literal|"CallingConvention"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_CharacterSet
specifier|const
name|char
name|_CharacterSet
index|[]
init|=
literal|"CharacterSet"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_CommandLine
specifier|const
name|char
name|_CommandLine
index|[]
init|=
literal|"CommandLine"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_CompileAs
specifier|const
name|char
name|_CompileAs
index|[]
init|=
literal|"CompileAs"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_CompileAsManaged
specifier|const
name|char
name|_CompileAsManaged
index|[]
init|=
literal|"CompileAsManaged"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_CompileOnly
specifier|const
name|char
name|_CompileOnly
index|[]
init|=
literal|"CompileOnly"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ConfigurationType
specifier|const
name|char
name|_ConfigurationType
index|[]
init|=
literal|"ConfigurationType"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_Culture
specifier|const
name|char
name|_Culture
index|[]
init|=
literal|"Culture"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_DLLDataFileName
specifier|const
name|char
name|_DLLDataFileName
index|[]
init|=
literal|"DLLDataFileName"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_DataExecutionPrevention
specifier|const
name|char
name|_DataExecutionPrevention
index|[]
init|=
literal|"DataExecutionPrevention"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_DebugInformationFormat
specifier|const
name|char
name|_DebugInformationFormat
index|[]
init|=
literal|"DebugInformationFormat"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_DefaultCharIsUnsigned
specifier|const
name|char
name|_DefaultCharIsUnsigned
index|[]
init|=
literal|"DefaultCharIsUnsigned"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_DefaultCharType
specifier|const
name|char
name|_DefaultCharType
index|[]
init|=
literal|"DefaultCharType"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_DelayLoadDLLs
specifier|const
name|char
name|_DelayLoadDLLs
index|[]
init|=
literal|"DelayLoadDLLs"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_DeleteExtensionsOnClean
specifier|const
name|char
name|_DeleteExtensionsOnClean
index|[]
init|=
literal|"DeleteExtensionsOnClean"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_Description
specifier|const
name|char
name|_Description
index|[]
init|=
literal|"Description"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_Detect64BitPortabilityProblems
specifier|const
name|char
name|_Detect64BitPortabilityProblems
index|[]
init|=
literal|"Detect64BitPortabilityProblems"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_DisableLanguageExtensions
specifier|const
name|char
name|_DisableLanguageExtensions
index|[]
init|=
literal|"DisableLanguageExtensions"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_DisableSpecificWarnings
specifier|const
name|char
name|_DisableSpecificWarnings
index|[]
init|=
literal|"DisableSpecificWarnings"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_EmbedManifest
specifier|const
name|char
name|_EmbedManifest
index|[]
init|=
literal|"EmbedManifest"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_EnableCOMDATFolding
specifier|const
name|char
name|_EnableCOMDATFolding
index|[]
init|=
literal|"EnableCOMDATFolding"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_EnableErrorChecks
specifier|const
name|char
name|_EnableErrorChecks
index|[]
init|=
literal|"EnableErrorChecks"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_EnableEnhancedInstructionSet
specifier|const
name|char
name|_EnableEnhancedInstructionSet
index|[]
init|=
literal|"EnableEnhancedInstructionSet"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_EnableFiberSafeOptimizations
specifier|const
name|char
name|_EnableFiberSafeOptimizations
index|[]
init|=
literal|"EnableFiberSafeOptimizations"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_EnableFunctionLevelLinking
specifier|const
name|char
name|_EnableFunctionLevelLinking
index|[]
init|=
literal|"EnableFunctionLevelLinking"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_EnableIntrinsicFunctions
specifier|const
name|char
name|_EnableIntrinsicFunctions
index|[]
init|=
literal|"EnableIntrinsicFunctions"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_EntryPointSymbol
specifier|const
name|char
name|_EntryPointSymbol
index|[]
init|=
literal|"EntryPointSymbol"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ErrorCheckAllocations
specifier|const
name|char
name|_ErrorCheckAllocations
index|[]
init|=
literal|"ErrorCheckAllocations"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ErrorCheckBounds
specifier|const
name|char
name|_ErrorCheckBounds
index|[]
init|=
literal|"ErrorCheckBounds"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ErrorCheckEnumRange
specifier|const
name|char
name|_ErrorCheckEnumRange
index|[]
init|=
literal|"ErrorCheckEnumRange"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ErrorCheckRefPointers
specifier|const
name|char
name|_ErrorCheckRefPointers
index|[]
init|=
literal|"ErrorCheckRefPointers"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ErrorCheckStubData
specifier|const
name|char
name|_ErrorCheckStubData
index|[]
init|=
literal|"ErrorCheckStubData"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ExceptionHandling
specifier|const
name|char
name|_ExceptionHandling
index|[]
init|=
literal|"ExceptionHandling"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ExcludedFromBuild
specifier|const
name|char
name|_ExcludedFromBuild
index|[]
init|=
literal|"ExcludedFromBuild"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ExpandAttributedSource
specifier|const
name|char
name|_ExpandAttributedSource
index|[]
init|=
literal|"ExpandAttributedSource"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ExportNamedFunctions
specifier|const
name|char
name|_ExportNamedFunctions
index|[]
init|=
literal|"ExportNamedFunctions"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_FavorSizeOrSpeed
specifier|const
name|char
name|_FavorSizeOrSpeed
index|[]
init|=
literal|"FavorSizeOrSpeed"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_FloatingPointModel
specifier|const
name|char
name|_FloatingPointModel
index|[]
init|=
literal|"FloatingPointModel"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_FloatingPointExceptions
specifier|const
name|char
name|_FloatingPointExceptions
index|[]
init|=
literal|"FloatingPointExceptions"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ForceConformanceInForLoopScope
specifier|const
name|char
name|_ForceConformanceInForLoopScope
index|[]
init|=
literal|"ForceConformanceInForLoopScope"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ForceSymbolReferences
specifier|const
name|char
name|_ForceSymbolReferences
index|[]
init|=
literal|"ForceSymbolReferences"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ForcedIncludeFiles
specifier|const
name|char
name|_ForcedIncludeFiles
index|[]
init|=
literal|"ForcedIncludeFiles"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ForcedUsingFiles
specifier|const
name|char
name|_ForcedUsingFiles
index|[]
init|=
literal|"ForcedUsingFiles"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_FullIncludePath
specifier|const
name|char
name|_FullIncludePath
index|[]
init|=
literal|"FullIncludePath"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_FunctionOrder
specifier|const
name|char
name|_FunctionOrder
index|[]
init|=
literal|"FunctionOrder"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_GenerateDebugInformation
specifier|const
name|char
name|_GenerateDebugInformation
index|[]
init|=
literal|"GenerateDebugInformation"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_GenerateMapFile
specifier|const
name|char
name|_GenerateMapFile
index|[]
init|=
literal|"GenerateMapFile"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_GeneratePreprocessedFile
specifier|const
name|char
name|_GeneratePreprocessedFile
index|[]
init|=
literal|"GeneratePreprocessedFile"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_GenerateStublessProxies
specifier|const
name|char
name|_GenerateStublessProxies
index|[]
init|=
literal|"GenerateStublessProxies"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_GenerateTypeLibrary
specifier|const
name|char
name|_GenerateTypeLibrary
index|[]
init|=
literal|"GenerateTypeLibrary"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_GlobalOptimizations
specifier|const
name|char
name|_GlobalOptimizations
index|[]
init|=
literal|"GlobalOptimizations"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_HeaderFileName
specifier|const
name|char
name|_HeaderFileName
index|[]
init|=
literal|"HeaderFileName"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_HeapCommitSize
specifier|const
name|char
name|_HeapCommitSize
index|[]
init|=
literal|"HeapCommitSize"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_HeapReserveSize
specifier|const
name|char
name|_HeapReserveSize
index|[]
init|=
literal|"HeapReserveSize"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_IgnoreAllDefaultLibraries
specifier|const
name|char
name|_IgnoreAllDefaultLibraries
index|[]
init|=
literal|"IgnoreAllDefaultLibraries"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_IgnoreDefaultLibraryNames
specifier|const
name|char
name|_IgnoreDefaultLibraryNames
index|[]
init|=
literal|"IgnoreDefaultLibraryNames"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_IgnoreEmbeddedIDL
specifier|const
name|char
name|_IgnoreEmbeddedIDL
index|[]
init|=
literal|"IgnoreEmbeddedIDL"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_IgnoreImportLibrary
specifier|const
name|char
name|_IgnoreImportLibrary
index|[]
init|=
literal|"IgnoreImportLibrary"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_IgnoreStandardIncludePath
specifier|const
name|char
name|_IgnoreStandardIncludePath
index|[]
init|=
literal|"IgnoreStandardIncludePath"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ImportLibrary
specifier|const
name|char
name|_ImportLibrary
index|[]
init|=
literal|"ImportLibrary"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ImproveFloatingPointConsistency
specifier|const
name|char
name|_ImproveFloatingPointConsistency
index|[]
init|=
literal|"ImproveFloatingPointConsistency"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_InlineFunctionExpansion
specifier|const
name|char
name|_InlineFunctionExpansion
index|[]
init|=
literal|"InlineFunctionExpansion"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_InterfaceIdentifierFileName
specifier|const
name|char
name|_InterfaceIdentifierFileName
index|[]
init|=
literal|"InterfaceIdentifierFileName"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_IntermediateDirectory
specifier|const
name|char
name|_IntermediateDirectory
index|[]
init|=
literal|"IntermediateDirectory"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_KeepComments
specifier|const
name|char
name|_KeepComments
index|[]
init|=
literal|"KeepComments"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_LargeAddressAware
specifier|const
name|char
name|_LargeAddressAware
index|[]
init|=
literal|"LargeAddressAware"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_LinkDLL
specifier|const
name|char
name|_LinkDLL
index|[]
init|=
literal|"LinkDLL"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_LinkIncremental
specifier|const
name|char
name|_LinkIncremental
index|[]
init|=
literal|"LinkIncremental"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_LinkTimeCodeGeneration
specifier|const
name|char
name|_LinkTimeCodeGeneration
index|[]
init|=
literal|"LinkTimeCodeGeneration"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_LinkToManagedResourceFile
specifier|const
name|char
name|_LinkToManagedResourceFile
index|[]
init|=
literal|"LinkToManagedResourceFile"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_MapExports
specifier|const
name|char
name|_MapExports
index|[]
init|=
literal|"MapExports"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_MapFileName
specifier|const
name|char
name|_MapFileName
index|[]
init|=
literal|"MapFileName"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_MapLines
specifier|const
name|char
name|_MapLines
index|[]
init|=
literal|"MapLines "
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_MergeSections
specifier|const
name|char
name|_MergeSections
index|[]
init|=
literal|"MergeSections"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_MergedIDLBaseFileName
specifier|const
name|char
name|_MergedIDLBaseFileName
index|[]
init|=
literal|"MergedIDLBaseFileName"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_MidlCommandFile
specifier|const
name|char
name|_MidlCommandFile
index|[]
init|=
literal|"MidlCommandFile"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_MinimalRebuild
specifier|const
name|char
name|_MinimalRebuild
index|[]
init|=
literal|"MinimalRebuild"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_MkTypLibCompatible
specifier|const
name|char
name|_MkTypLibCompatible
index|[]
init|=
literal|"MkTypLibCompatible"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ModuleDefinitionFile
specifier|const
name|char
name|_ModuleDefinitionFile
index|[]
init|=
literal|"ModuleDefinitionFile"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_Name
specifier|const
name|char
name|_Name
index|[]
init|=
literal|"Name"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ObjectFile
specifier|const
name|char
name|_ObjectFile
index|[]
init|=
literal|"ObjectFile"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_OmitFramePointers
specifier|const
name|char
name|_OmitFramePointers
index|[]
init|=
literal|"OmitFramePointers"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_OpenMP
specifier|const
name|char
name|_OpenMP
index|[]
init|=
literal|"OpenMP"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_Optimization
specifier|const
name|char
name|_Optimization
index|[]
init|=
literal|"Optimization "
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_OptimizeForProcessor
specifier|const
name|char
name|_OptimizeForProcessor
index|[]
init|=
literal|"OptimizeForProcessor"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_OptimizeForWindows98
specifier|const
name|char
name|_OptimizeForWindows98
index|[]
init|=
literal|"OptimizeForWindows98"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_OptimizeForWindowsApplication
specifier|const
name|char
name|_OptimizeForWindowsApplication
index|[]
init|=
literal|"OptimizeForWindowsApplication"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_OptimizeReferences
specifier|const
name|char
name|_OptimizeReferences
index|[]
init|=
literal|"OptimizeReferences"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_OutputDirectory
specifier|const
name|char
name|_OutputDirectory
index|[]
init|=
literal|"OutputDirectory"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_OutputFile
specifier|const
name|char
name|_OutputFile
index|[]
init|=
literal|"OutputFile"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_Outputs
specifier|const
name|char
name|_Outputs
index|[]
init|=
literal|"Outputs"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ParseFiles
specifier|const
name|char
name|_ParseFiles
index|[]
init|=
literal|"ParseFiles"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_PrecompiledHeaderFile
specifier|const
name|char
name|_PrecompiledHeaderFile
index|[]
init|=
literal|"PrecompiledHeaderFile"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_PrecompiledHeaderThrough
specifier|const
name|char
name|_PrecompiledHeaderThrough
index|[]
init|=
literal|"PrecompiledHeaderThrough"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_PreprocessorDefinitions
specifier|const
name|char
name|_PreprocessorDefinitions
index|[]
init|=
literal|"PreprocessorDefinitions"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_PrimaryOutput
specifier|const
name|char
name|_PrimaryOutput
index|[]
init|=
literal|"PrimaryOutput"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ProjectGUID
specifier|const
name|char
name|_ProjectGUID
index|[]
init|=
literal|"ProjectGUID"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_Keyword
specifier|const
name|char
name|_Keyword
index|[]
init|=
literal|"Keyword"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ProjectType
specifier|const
name|char
name|_ProjectType
index|[]
init|=
literal|"ProjectType"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ProgramDatabase
specifier|const
name|char
name|_ProgramDatabase
index|[]
init|=
literal|"ProgramDatabase"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ProgramDataBaseFileName
specifier|const
name|char
name|_ProgramDataBaseFileName
index|[]
init|=
literal|"ProgramDataBaseFileName"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ProgramDatabaseFile
specifier|const
name|char
name|_ProgramDatabaseFile
index|[]
init|=
literal|"ProgramDatabaseFile"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ProxyFileName
specifier|const
name|char
name|_ProxyFileName
index|[]
init|=
literal|"ProxyFileName"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_RandomizedBaseAddress
specifier|const
name|char
name|_RandomizedBaseAddress
index|[]
init|=
literal|"RandomizedBaseAddress"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_RedirectOutputAndErrors
specifier|const
name|char
name|_RedirectOutputAndErrors
index|[]
init|=
literal|"RedirectOutputAndErrors"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_RegisterOutput
specifier|const
name|char
name|_RegisterOutput
index|[]
init|=
literal|"RegisterOutput"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_RelativePath
specifier|const
name|char
name|_RelativePath
index|[]
init|=
literal|"RelativePath"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_RemoteDirectory
specifier|const
name|char
name|_RemoteDirectory
index|[]
init|=
literal|"RemoteDirectory"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ResourceOnlyDLL
specifier|const
name|char
name|_ResourceOnlyDLL
index|[]
init|=
literal|"ResourceOnlyDLL"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ResourceOutputFileName
specifier|const
name|char
name|_ResourceOutputFileName
index|[]
init|=
literal|"ResourceOutputFileName"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_RuntimeLibrary
specifier|const
name|char
name|_RuntimeLibrary
index|[]
init|=
literal|"RuntimeLibrary"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_RuntimeTypeInfo
specifier|const
name|char
name|_RuntimeTypeInfo
index|[]
init|=
literal|"RuntimeTypeInfo"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_SccProjectName
specifier|const
name|char
name|_SccProjectName
index|[]
init|=
literal|"SccProjectName"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_SccLocalPath
specifier|const
name|char
name|_SccLocalPath
index|[]
init|=
literal|"SccLocalPath"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_SetChecksum
specifier|const
name|char
name|_SetChecksum
index|[]
init|=
literal|"SetChecksum"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ShowIncludes
specifier|const
name|char
name|_ShowIncludes
index|[]
init|=
literal|"ShowIncludes"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ShowProgress
specifier|const
name|char
name|_ShowProgress
index|[]
init|=
literal|"ShowProgress"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_SmallerTypeCheck
specifier|const
name|char
name|_SmallerTypeCheck
index|[]
init|=
literal|"SmallerTypeCheck"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_StackCommitSize
specifier|const
name|char
name|_StackCommitSize
index|[]
init|=
literal|"StackCommitSize"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_StackReserveSize
specifier|const
name|char
name|_StackReserveSize
index|[]
init|=
literal|"StackReserveSize"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_StringPooling
specifier|const
name|char
name|_StringPooling
index|[]
init|=
literal|"StringPooling"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_StripPrivateSymbols
specifier|const
name|char
name|_StripPrivateSymbols
index|[]
init|=
literal|"StripPrivateSymbols"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_StructMemberAlignment
specifier|const
name|char
name|_StructMemberAlignment
index|[]
init|=
literal|"StructMemberAlignment"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_SubSystem
specifier|const
name|char
name|_SubSystem
index|[]
init|=
literal|"SubSystem"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_SupportUnloadOfDelayLoadedDLL
specifier|const
name|char
name|_SupportUnloadOfDelayLoadedDLL
index|[]
init|=
literal|"SupportUnloadOfDelayLoadedDLL"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_SuppressStartupBanner
specifier|const
name|char
name|_SuppressStartupBanner
index|[]
init|=
literal|"SuppressStartupBanner"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_SwapRunFromCD
specifier|const
name|char
name|_SwapRunFromCD
index|[]
init|=
literal|"SwapRunFromCD"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_SwapRunFromNet
specifier|const
name|char
name|_SwapRunFromNet
index|[]
init|=
literal|"SwapRunFromNet"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_TargetEnvironment
specifier|const
name|char
name|_TargetEnvironment
index|[]
init|=
literal|"TargetEnvironment"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_TargetMachine
specifier|const
name|char
name|_TargetMachine
index|[]
init|=
literal|"TargetMachine"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_TerminalServerAware
specifier|const
name|char
name|_TerminalServerAware
index|[]
init|=
literal|"TerminalServerAware"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_Path
specifier|const
name|char
name|_Path
index|[]
init|=
literal|"Path"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_TreatWChar_tAsBuiltInType
specifier|const
name|char
name|_TreatWChar_tAsBuiltInType
index|[]
init|=
literal|"TreatWChar_tAsBuiltInType"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_TurnOffAssemblyGeneration
specifier|const
name|char
name|_TurnOffAssemblyGeneration
index|[]
init|=
literal|"TurnOffAssemblyGeneration"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_TypeLibraryFile
specifier|const
name|char
name|_TypeLibraryFile
index|[]
init|=
literal|"TypeLibraryFile"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_TypeLibraryName
specifier|const
name|char
name|_TypeLibraryName
index|[]
init|=
literal|"TypeLibraryName"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_TypeLibraryResourceID
specifier|const
name|char
name|_TypeLibraryResourceID
index|[]
init|=
literal|"TypeLibraryResourceID"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_UndefineAllPreprocessorDefinitions
specifier|const
name|char
name|_UndefineAllPreprocessorDefinitions
index|[]
init|=
literal|"UndefineAllPreprocessorDefinitions"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_UndefinePreprocessorDefinitions
specifier|const
name|char
name|_UndefinePreprocessorDefinitions
index|[]
init|=
literal|"UndefinePreprocessorDefinitions"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_UniqueIdentifier
specifier|const
name|char
name|_UniqueIdentifier
index|[]
init|=
literal|"UniqueIdentifier"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_UseOfATL
specifier|const
name|char
name|_UseOfATL
index|[]
init|=
literal|"UseOfATL"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_UseOfMfc
specifier|const
name|char
name|_UseOfMfc
index|[]
init|=
literal|"UseOfMfc"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_UsePrecompiledHeader
specifier|const
name|char
name|_UsePrecompiledHeader
index|[]
init|=
literal|"UsePrecompiledHeader"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ValidateParameters
specifier|const
name|char
name|_ValidateParameters
index|[]
init|=
literal|"ValidateParameters"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_VCCLCompilerTool
specifier|const
name|char
name|_VCCLCompilerTool
index|[]
init|=
literal|"VCCLCompilerTool"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_VCLibrarianTool
specifier|const
name|char
name|_VCLibrarianTool
index|[]
init|=
literal|"VCLibrarianTool"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_VCLinkerTool
specifier|const
name|char
name|_VCLinkerTool
index|[]
init|=
literal|"VCLinkerTool"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_VCManifestTool
specifier|const
name|char
name|_VCManifestTool
index|[]
init|=
literal|"VCManifestTool"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_VCCustomBuildTool
specifier|const
name|char
name|_VCCustomBuildTool
index|[]
init|=
literal|"VCCustomBuildTool"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_VCResourceCompilerTool
specifier|const
name|char
name|_VCResourceCompilerTool
index|[]
init|=
literal|"VCResourceCompilerTool"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_VCMIDLTool
specifier|const
name|char
name|_VCMIDLTool
index|[]
init|=
literal|"VCMIDLTool"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_Version
specifier|const
name|char
name|_Version
index|[]
init|=
literal|"Version"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_WarnAsError
specifier|const
name|char
name|_WarnAsError
index|[]
init|=
literal|"WarnAsError"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_WarningLevel
specifier|const
name|char
name|_WarningLevel
index|[]
init|=
literal|"WarningLevel"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_WholeProgramOptimization
specifier|const
name|char
name|_WholeProgramOptimization
index|[]
init|=
literal|"WholeProgramOptimization"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_CompileForArchitecture
specifier|const
name|char
name|_CompileForArchitecture
index|[]
init|=
literal|"CompileForArchitecture"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_InterworkCalls
specifier|const
name|char
name|_InterworkCalls
index|[]
init|=
literal|"InterworkCalls"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_GenerateManifest
specifier|const
name|char
name|_GenerateManifest
index|[]
init|=
literal|"GenerateManifest"
decl_stmt|;
end_decl_stmt
begin_comment
comment|// XmlOutput stream functions ------------------------------
end_comment
begin_function
DECL|function|attrT
specifier|inline
name|XmlOutput
operator|::
name|xml_output
name|attrT
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|triState
name|v
parameter_list|)
block|{
if|if
condition|(
name|v
operator|==
name|unset
condition|)
return|return
name|noxml
argument_list|()
return|;
return|return
name|attr
argument_list|(
name|name
argument_list|,
operator|(
name|v
operator|==
name|_True
condition|?
literal|"true"
else|:
literal|"false"
operator|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|attrE
specifier|inline
name|XmlOutput
operator|::
name|xml_output
name|attrE
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|int
name|v
parameter_list|)
block|{
return|return
name|attr
argument_list|(
name|name
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|v
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*ifNot version*/
end_comment
begin_function
DECL|function|attrE
specifier|inline
name|XmlOutput
operator|::
name|xml_output
name|attrE
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|int
name|v
parameter_list|,
name|int
name|ifn
parameter_list|)
block|{
if|if
condition|(
name|v
operator|==
name|ifn
condition|)
return|return
name|noxml
argument_list|()
return|;
return|return
name|attr
argument_list|(
name|name
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|v
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|attrL
specifier|inline
name|XmlOutput
operator|::
name|xml_output
name|attrL
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|qint64
name|v
parameter_list|)
block|{
return|return
name|attr
argument_list|(
name|name
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|v
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*ifNot version*/
end_comment
begin_function
DECL|function|attrL
specifier|inline
name|XmlOutput
operator|::
name|xml_output
name|attrL
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|qint64
name|v
parameter_list|,
name|qint64
name|ifn
parameter_list|)
block|{
if|if
condition|(
name|v
operator|==
name|ifn
condition|)
return|return
name|noxml
argument_list|()
return|;
return|return
name|attr
argument_list|(
name|name
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|v
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|attrS
specifier|inline
name|XmlOutput
operator|::
name|xml_output
name|attrS
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|QString
modifier|&
name|v
parameter_list|)
block|{
if|if
condition|(
name|v
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|noxml
argument_list|()
return|;
return|return
name|attr
argument_list|(
name|name
argument_list|,
name|v
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|attrX
specifier|inline
name|XmlOutput
operator|::
name|xml_output
name|attrX
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|v
parameter_list|,
specifier|const
name|char
modifier|*
name|s
init|=
literal|","
parameter_list|)
block|{
if|if
condition|(
name|v
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|noxml
argument_list|()
return|;
return|return
name|attr
argument_list|(
name|name
argument_list|,
name|v
operator|.
name|join
argument_list|(
name|s
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|operator !
name|triState
name|operator
name|!
parameter_list|(
specifier|const
name|triState
modifier|&
name|rhs
parameter_list|)
block|{
if|if
condition|(
name|rhs
operator|==
name|unset
condition|)
return|return
name|rhs
return|;
name|triState
name|lhs
init|=
operator|(
name|rhs
operator|==
name|_True
condition|?
name|_False
else|:
name|_True
operator|)
decl_stmt|;
return|return
name|lhs
return|;
block|}
end_function
begin_comment
comment|// VCToolBase -------------------------------------------------
end_comment
begin_function
DECL|function|fixCommandLine
name|QStringList
name|VCToolBase
operator|::
name|fixCommandLine
parameter_list|(
specifier|const
name|QString
modifier|&
name|input
parameter_list|)
block|{
comment|// The splitting regexp is a bit bizarre for backwards compat reasons (why else ...).
return|return
name|input
operator|.
name|split
argument_list|(
name|QRegExp
argument_list|(
name|QLatin1String
argument_list|(
literal|"\n\t|\r\\\\h|\r\n"
argument_list|)
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|vcCommandSeparator
specifier|static
name|QString
name|vcCommandSeparator
parameter_list|()
block|{
comment|// MSVC transforms the build tree into a single batch file, simply pasting the contents
comment|// of the custom commands into it, and putting an "if errorlevel goto" statement behind it.
comment|// As we want every sub-command to be error-checked (as is done by makefile-based
comment|// backends), we insert the checks ourselves, using the undocumented jump target.
specifier|static
name|QString
name|cmdSep
init|=
name|QLatin1String
argument_list|(
literal|"&#x000D;&#x000A;if errorlevel 1 goto VCReportError&#x000D;&#x000A;"
argument_list|)
decl_stmt|;
return|return
name|cmdSep
return|;
block|}
end_function
begin_comment
comment|// VCCLCompilerTool -------------------------------------------------
end_comment
begin_constructor
DECL|function|VCCLCompilerTool
name|VCCLCompilerTool
operator|::
name|VCCLCompilerTool
parameter_list|()
member_init_list|:
name|AssemblerOutput
argument_list|(
name|asmListingNone
argument_list|)
member_init_list|,
name|BasicRuntimeChecks
argument_list|(
name|runtimeBasicCheckNone
argument_list|)
member_init_list|,
name|BrowseInformation
argument_list|(
name|brInfoNone
argument_list|)
member_init_list|,
name|BufferSecurityCheck
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|CallingConvention
argument_list|(
name|callConventionDefault
argument_list|)
member_init_list|,
name|CompileAs
argument_list|(
name|compileAsDefault
argument_list|)
member_init_list|,
name|CompileAsManaged
argument_list|(
name|managedDefault
argument_list|)
member_init_list|,
name|CompileAsWinRT
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|CompileOnly
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|DebugInformationFormat
argument_list|(
name|debugDisabled
argument_list|)
member_init_list|,
name|DefaultCharIsUnsigned
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|Detect64BitPortabilityProblems
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|DisableLanguageExtensions
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|EnableEnhancedInstructionSet
argument_list|(
name|archNotSet
argument_list|)
member_init_list|,
name|EnableFiberSafeOptimizations
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|EnableFunctionLevelLinking
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|EnableIntrinsicFunctions
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|ExceptionHandling
argument_list|(
name|ehDefault
argument_list|)
member_init_list|,
name|ExpandAttributedSource
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|FavorSizeOrSpeed
argument_list|(
name|favorNone
argument_list|)
member_init_list|,
name|FloatingPointModel
argument_list|(
name|floatingPointNotSet
argument_list|)
member_init_list|,
name|FloatingPointExceptions
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|ForceConformanceInForLoopScope
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|GeneratePreprocessedFile
argument_list|(
name|preprocessNo
argument_list|)
member_init_list|,
name|PreprocessSuppressLineNumbers
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|GlobalOptimizations
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|IgnoreStandardIncludePath
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|ImproveFloatingPointConsistency
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|InlineFunctionExpansion
argument_list|(
name|expandDefault
argument_list|)
member_init_list|,
name|KeepComments
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|MinimalRebuild
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|OmitDefaultLibName
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|OmitFramePointers
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|OpenMP
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|Optimization
argument_list|(
name|optimizeCustom
argument_list|)
member_init_list|,
name|OptimizeForProcessor
argument_list|(
name|procOptimizeBlended
argument_list|)
member_init_list|,
name|OptimizeForWindowsApplication
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|ProgramDataBaseFileName
argument_list|(
literal|""
argument_list|)
member_init_list|,
name|RuntimeLibrary
argument_list|(
name|rtMultiThreaded
argument_list|)
member_init_list|,
name|RuntimeTypeInfo
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|ShowIncludes
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|SmallerTypeCheck
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|StringPooling
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|StructMemberAlignment
argument_list|(
name|alignNotSet
argument_list|)
member_init_list|,
name|SuppressStartupBanner
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|TreatWChar_tAsBuiltInType
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|TurnOffAssemblyGeneration
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|UndefineAllPreprocessorDefinitions
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|UsePrecompiledHeader
argument_list|(
name|pchUnset
argument_list|)
member_init_list|,
name|UseUnicodeForAssemblerListing
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|WarnAsError
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|WarningLevel
argument_list|(
name|warningLevel_0
argument_list|)
member_init_list|,
name|WholeProgramOptimization
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|CompileForArchitecture
argument_list|(
name|archUnknown
argument_list|)
member_init_list|,
name|InterworkCalls
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|EnablePREfast
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|DisplayFullPaths
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|MultiProcessorCompilation
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|GenerateXMLDocumentationFiles
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|CreateHotpatchableImage
argument_list|(
name|unset
argument_list|)
block|{ }
end_constructor
begin_comment
comment|/*  * Some values for the attribute UsePrecompiledHeader have changed from VS 2003 to VS 2005,  * see the following chart, so we need a function that transforms those values if we are  * using NET2005:  *  * Meaning                      2003    2005  * -----------------------------------------  * Don't use PCH                0       0  * Create PCH (/Yc)             1       1  * Automatically generate (/YX) 2       (seems that it was removed)  * Use specific PCH (/Yu)       3       2  *  */
end_comment
begin_function
DECL|function|xformUsePrecompiledHeaderForNET2005
specifier|inline
name|XmlOutput
operator|::
name|xml_output
name|xformUsePrecompiledHeaderForNET2005
parameter_list|(
name|pchOption
name|whatPch
parameter_list|,
name|DotNET
name|compilerVersion
parameter_list|)
block|{
if|if
condition|(
name|compilerVersion
operator|>=
name|NET2005
condition|)
block|{
if|if
condition|(
name|whatPch
operator|==
name|pchGenerateAuto
condition|)
name|whatPch
operator|=
operator|(
name|pchOption
operator|)
literal|0
expr_stmt|;
if|if
condition|(
name|whatPch
operator|==
name|pchUseUsingSpecific
condition|)
name|whatPch
operator|=
operator|(
name|pchOption
operator|)
literal|2
expr_stmt|;
block|}
return|return
name|attrE
argument_list|(
name|_UsePrecompiledHeader
argument_list|,
name|whatPch
argument_list|,
comment|/*ifNot*/
name|pchUnset
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|xformExceptionHandlingNET2005
specifier|inline
name|XmlOutput
operator|::
name|xml_output
name|xformExceptionHandlingNET2005
parameter_list|(
name|exceptionHandling
name|eh
parameter_list|,
name|DotNET
name|compilerVersion
parameter_list|)
block|{
if|if
condition|(
name|eh
operator|==
name|ehDefault
condition|)
return|return
name|noxml
argument_list|()
return|;
if|if
condition|(
name|compilerVersion
operator|>=
name|NET2005
condition|)
return|return
name|attrE
argument_list|(
name|_ExceptionHandling
argument_list|,
name|eh
argument_list|)
return|;
return|return
name|attrS
argument_list|(
name|_ExceptionHandling
argument_list|,
operator|(
name|eh
operator|==
name|ehNoSEH
condition|?
literal|"true"
else|:
literal|"false"
operator|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|parseOption
name|bool
name|VCCLCompilerTool
operator|::
name|parseOption
parameter_list|(
specifier|const
name|char
modifier|*
name|option
parameter_list|)
block|{
comment|// skip index 0 ('/' or '-')
name|char
name|first
init|=
name|option
index|[
literal|1
index|]
decl_stmt|;
name|char
name|second
init|=
name|option
index|[
literal|2
index|]
decl_stmt|;
name|char
name|third
init|=
name|option
index|[
literal|3
index|]
decl_stmt|;
name|char
name|fourth
init|=
name|option
index|[
literal|4
index|]
decl_stmt|;
name|bool
name|found
init|=
literal|true
decl_stmt|;
switch|switch
condition|(
name|first
condition|)
block|{
case|case
literal|'?'
case|:
case|case
literal|'h'
case|:
if|if
condition|(
name|second
operator|==
literal|'o'
operator|&&
name|third
operator|==
literal|'t'
operator|&&
name|fourth
operator|==
literal|'p'
condition|)
block|{
name|CreateHotpatchableImage
operator|=
name|_True
expr_stmt|;
break|break;
block|}
name|qWarning
argument_list|(
literal|"Generator: Option '/?', '/help': MSVC.NET projects do not support outputting help info"
argument_list|)
expr_stmt|;
name|found
operator|=
literal|false
expr_stmt|;
break|break;
case|case
literal|'@'
case|:
name|qWarning
argument_list|(
literal|"Generator: Option '/@': MSVC.NET projects do not support the use of a response file"
argument_list|)
expr_stmt|;
name|found
operator|=
literal|false
expr_stmt|;
break|break;
case|case
literal|'l'
case|:
name|qWarning
argument_list|(
literal|"Generator: Option '/link': qmake generator does not support passing link options through the compiler tool"
argument_list|)
expr_stmt|;
name|found
operator|=
literal|false
expr_stmt|;
break|break;
case|case
literal|'A'
case|:
if|if
condition|(
name|second
operator|!=
literal|'I'
condition|)
block|{
name|found
operator|=
literal|false
expr_stmt|;
break|break;
block|}
name|AdditionalUsingDirectories
operator|+=
name|option
operator|+
literal|3
expr_stmt|;
break|break;
case|case
literal|'C'
case|:
name|KeepComments
operator|=
name|_True
expr_stmt|;
break|break;
case|case
literal|'D'
case|:
name|PreprocessorDefinitions
operator|+=
name|option
operator|+
literal|2
expr_stmt|;
break|break;
case|case
literal|'E'
case|:
if|if
condition|(
name|second
operator|==
literal|'H'
condition|)
block|{
name|QByteArray
name|opt
argument_list|(
name|option
operator|+
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|opt
operator|.
name|contains
argument_list|(
literal|'a'
argument_list|)
operator|&&
operator|!
name|opt
operator|.
name|contains
argument_list|(
literal|'s'
argument_list|)
operator|&&
operator|!
name|opt
operator|.
name|contains
argument_list|(
literal|'c'
argument_list|)
condition|)
name|ExceptionHandling
operator|=
name|ehSEH
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|opt
operator|.
name|contains
argument_list|(
literal|'a'
argument_list|)
operator|&&
name|opt
operator|.
name|contains
argument_list|(
literal|"s-"
argument_list|)
operator|&&
name|opt
operator|.
name|contains
argument_list|(
literal|"c-"
argument_list|)
condition|)
name|ExceptionHandling
operator|=
name|ehNone
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|opt
operator|.
name|contains
argument_list|(
literal|'a'
argument_list|)
operator|&&
name|opt
operator|.
name|contains
argument_list|(
literal|'s'
argument_list|)
operator|&&
name|opt
operator|.
name|contains
argument_list|(
literal|'c'
argument_list|)
condition|)
name|ExceptionHandling
operator|=
name|ehNoSEH
expr_stmt|;
else|else
block|{
comment|// ExceptionHandling must be false, or it will override
comment|// with an /EHsc option
name|ExceptionHandling
operator|=
name|ehNone
expr_stmt|;
name|AdditionalOptions
operator|+=
name|option
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|->
name|CompilerVersion
operator|<
name|NET2005
operator|&&
name|ExceptionHandling
operator|==
name|ehSEH
condition|)
block|{
name|ExceptionHandling
operator|=
name|ehNone
expr_stmt|;
name|AdditionalOptions
operator|+=
name|option
expr_stmt|;
block|}
break|break;
block|}
elseif|else
if|if
condition|(
name|second
operator|==
literal|'P'
condition|)
block|{
name|PreprocessSuppressLineNumbers
operator|=
name|_True
expr_stmt|;
block|}
name|GeneratePreprocessedFile
operator|=
name|preprocessYes
expr_stmt|;
break|break;
case|case
literal|'F'
case|:
if|if
condition|(
name|second
operator|<=
literal|'9'
operator|&&
name|second
operator|>=
literal|'0'
condition|)
block|{
name|AdditionalOptions
operator|+=
name|option
expr_stmt|;
break|break;
block|}
else|else
block|{
switch|switch
condition|(
name|second
condition|)
block|{
case|case
literal|'A'
case|:
if|if
condition|(
name|third
operator|==
literal|'c'
condition|)
block|{
name|AssemblerOutput
operator|=
name|asmListingAsmMachine
expr_stmt|;
if|if
condition|(
name|fourth
operator|==
literal|'s'
condition|)
name|AssemblerOutput
operator|=
name|asmListingAsmMachineSrc
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|third
operator|==
literal|'s'
condition|)
block|{
name|AssemblerOutput
operator|=
name|asmListingAsmSrc
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|third
operator|==
literal|'u'
condition|)
block|{
name|UseUnicodeForAssemblerListing
operator|=
name|_True
expr_stmt|;
block|}
else|else
block|{
name|AssemblerOutput
operator|=
name|asmListingAssemblyOnly
expr_stmt|;
block|}
break|break;
case|case
literal|'C'
case|:
name|DisplayFullPaths
operator|=
name|_True
expr_stmt|;
break|break;
case|case
literal|'a'
case|:
name|AssemblerListingLocation
operator|=
name|option
operator|+
literal|3
expr_stmt|;
break|break;
case|case
literal|'I'
case|:
name|ForcedIncludeFiles
operator|+=
name|option
operator|+
literal|3
expr_stmt|;
break|break;
case|case
literal|'i'
case|:
name|PreprocessOutputPath
operator|+=
name|option
operator|+
literal|3
expr_stmt|;
break|break;
case|case
literal|'R'
case|:
name|BrowseInformation
operator|=
name|brAllInfo
expr_stmt|;
name|BrowseInformationFile
operator|=
name|option
operator|+
literal|3
expr_stmt|;
break|break;
case|case
literal|'S'
case|:
if|if
condition|(
name|config
operator|->
name|CompilerVersion
operator|<
name|NET2013
condition|)
name|found
operator|=
literal|false
expr_stmt|;
comment|// Ignore this flag. Visual Studio 2013 takes care of this setting.
break|break;
case|case
literal|'r'
case|:
name|BrowseInformation
operator|=
name|brNoLocalSymbols
expr_stmt|;
name|BrowseInformationFile
operator|=
name|option
operator|+
literal|3
expr_stmt|;
break|break;
case|case
literal|'U'
case|:
name|ForcedUsingFiles
operator|+=
name|option
operator|+
literal|3
expr_stmt|;
break|break;
case|case
literal|'d'
case|:
name|ProgramDataBaseFileName
operator|=
name|option
operator|+
literal|3
expr_stmt|;
break|break;
case|case
literal|'e'
case|:
name|OutputFile
operator|=
name|option
operator|+
literal|3
expr_stmt|;
break|break;
case|case
literal|'m'
case|:
name|AdditionalOptions
operator|+=
name|option
expr_stmt|;
break|break;
case|case
literal|'o'
case|:
name|ObjectFile
operator|=
name|option
operator|+
literal|3
expr_stmt|;
break|break;
case|case
literal|'p'
case|:
name|PrecompiledHeaderFile
operator|=
name|option
operator|+
literal|3
expr_stmt|;
break|break;
case|case
literal|'x'
case|:
name|ExpandAttributedSource
operator|=
name|_True
expr_stmt|;
break|break;
default|default:
name|found
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
break|break;
case|case
literal|'G'
case|:
switch|switch
condition|(
name|second
condition|)
block|{
case|case
literal|'3'
case|:
case|case
literal|'4'
case|:
name|qWarning
argument_list|(
literal|"Option '/G3' and '/G4' were phased out in Visual C++ 5.0"
argument_list|)
expr_stmt|;
name|found
operator|=
literal|false
expr_stmt|;
break|break;
case|case
literal|'5'
case|:
name|OptimizeForProcessor
operator|=
name|procOptimizePentium
expr_stmt|;
break|break;
case|case
literal|'6'
case|:
case|case
literal|'B'
case|:
name|OptimizeForProcessor
operator|=
name|procOptimizePentiumProAndAbove
expr_stmt|;
break|break;
case|case
literal|'7'
case|:
name|OptimizeForProcessor
operator|=
name|procOptimizePentium4AndAbove
expr_stmt|;
break|break;
case|case
literal|'A'
case|:
name|OptimizeForWindowsApplication
operator|=
name|_True
expr_stmt|;
break|break;
case|case
literal|'F'
case|:
name|StringPooling
operator|=
name|_True
expr_stmt|;
break|break;
case|case
literal|'H'
case|:
name|AdditionalOptions
operator|+=
name|option
expr_stmt|;
break|break;
case|case
literal|'L'
case|:
name|WholeProgramOptimization
operator|=
name|_True
expr_stmt|;
if|if
condition|(
name|third
operator|==
literal|'-'
condition|)
name|WholeProgramOptimization
operator|=
name|_False
expr_stmt|;
break|break;
case|case
literal|'R'
case|:
name|RuntimeTypeInfo
operator|=
name|_True
expr_stmt|;
if|if
condition|(
name|third
operator|==
literal|'-'
condition|)
name|RuntimeTypeInfo
operator|=
name|_False
expr_stmt|;
break|break;
case|case
literal|'S'
case|:
name|BufferSecurityCheck
operator|=
name|_True
expr_stmt|;
if|if
condition|(
name|third
operator|==
literal|'-'
condition|)
name|BufferSecurityCheck
operator|=
name|_False
expr_stmt|;
break|break;
case|case
literal|'T'
case|:
name|EnableFiberSafeOptimizations
operator|=
name|_True
expr_stmt|;
break|break;
case|case
literal|'X'
case|:
comment|// Same as the /EHsc option, which is Exception Handling without SEH
name|ExceptionHandling
operator|=
name|ehNoSEH
expr_stmt|;
if|if
condition|(
name|third
operator|==
literal|'-'
condition|)
name|ExceptionHandling
operator|=
name|ehNone
expr_stmt|;
break|break;
case|case
literal|'Z'
case|:
case|case
literal|'e'
case|:
case|case
literal|'h'
case|:
name|AdditionalOptions
operator|+=
name|option
expr_stmt|;
break|break;
case|case
literal|'d'
case|:
name|CallingConvention
operator|=
name|callConventionCDecl
expr_stmt|;
break|break;
case|case
literal|'f'
case|:
name|StringPooling
operator|=
name|_True
expr_stmt|;
name|AdditionalOptions
operator|+=
name|option
expr_stmt|;
break|break;
case|case
literal|'m'
case|:
name|MinimalRebuild
operator|=
name|_True
expr_stmt|;
if|if
condition|(
name|third
operator|==
literal|'-'
condition|)
name|MinimalRebuild
operator|=
name|_False
expr_stmt|;
break|break;
case|case
literal|'r'
case|:
name|CallingConvention
operator|=
name|callConventionFastCall
expr_stmt|;
break|break;
case|case
literal|'s'
case|:
name|AdditionalOptions
operator|+=
name|option
expr_stmt|;
break|break;
case|case
literal|'y'
case|:
name|EnableFunctionLevelLinking
operator|=
name|_True
expr_stmt|;
break|break;
case|case
literal|'z'
case|:
name|CallingConvention
operator|=
name|callConventionStdCall
expr_stmt|;
break|break;
default|default:
name|found
operator|=
literal|false
expr_stmt|;
break|break;
block|}
break|break;
case|case
literal|'H'
case|:
name|AdditionalOptions
operator|+=
name|option
expr_stmt|;
break|break;
case|case
literal|'I'
case|:
name|AdditionalIncludeDirectories
operator|+=
name|option
operator|+
literal|2
expr_stmt|;
break|break;
case|case
literal|'J'
case|:
name|DefaultCharIsUnsigned
operator|=
name|_True
expr_stmt|;
break|break;
case|case
literal|'L'
case|:
if|if
condition|(
name|second
operator|==
literal|'D'
condition|)
block|{
name|AdditionalOptions
operator|+=
name|option
expr_stmt|;
break|break;
block|}
name|found
operator|=
literal|false
expr_stmt|;
break|break;
case|case
literal|'M'
case|:
if|if
condition|(
name|second
operator|==
literal|'D'
condition|)
block|{
name|RuntimeLibrary
operator|=
name|rtMultiThreadedDLL
expr_stmt|;
if|if
condition|(
name|third
operator|==
literal|'d'
condition|)
name|RuntimeLibrary
operator|=
name|rtMultiThreadedDebugDLL
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|second
operator|==
literal|'L'
condition|)
block|{
name|RuntimeLibrary
operator|=
name|rtSingleThreaded
expr_stmt|;
if|if
condition|(
name|third
operator|==
literal|'d'
condition|)
name|RuntimeLibrary
operator|=
name|rtSingleThreadedDebug
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|second
operator|==
literal|'T'
condition|)
block|{
name|RuntimeLibrary
operator|=
name|rtMultiThreaded
expr_stmt|;
if|if
condition|(
name|third
operator|==
literal|'d'
condition|)
name|RuntimeLibrary
operator|=
name|rtMultiThreadedDebug
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|second
operator|==
literal|'P'
condition|)
block|{
if|if
condition|(
name|config
operator|->
name|CompilerVersion
operator|>=
name|NET2010
condition|)
block|{
name|MultiProcessorCompilation
operator|=
name|_True
expr_stmt|;
name|MultiProcessorCompilationProcessorCount
operator|=
name|option
operator|+
literal|3
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|config
operator|->
name|CompilerVersion
operator|>=
name|NET2005
condition|)
block|{
name|AdditionalOptions
operator|+=
name|option
expr_stmt|;
block|}
else|else
block|{
name|warn_msg
argument_list|(
name|WarnLogic
argument_list|,
literal|"/MP option is not supported in Visual C++< 2005, ignoring."
argument_list|)
expr_stmt|;
block|}
break|break;
block|}
name|found
operator|=
literal|false
expr_stmt|;
break|break;
case|case
literal|'O'
case|:
switch|switch
condition|(
name|second
condition|)
block|{
case|case
literal|'1'
case|:
name|Optimization
operator|=
name|optimizeMinSpace
expr_stmt|;
break|break;
case|case
literal|'2'
case|:
name|Optimization
operator|=
name|optimizeMaxSpeed
expr_stmt|;
break|break;
case|case
literal|'a'
case|:
name|AdditionalOptions
operator|+=
name|option
expr_stmt|;
break|break;
case|case
literal|'b'
case|:
if|if
condition|(
name|third
operator|==
literal|'0'
condition|)
name|InlineFunctionExpansion
operator|=
name|expandDisable
expr_stmt|;
elseif|else
if|if
condition|(
name|third
operator|==
literal|'1'
condition|)
name|InlineFunctionExpansion
operator|=
name|expandOnlyInline
expr_stmt|;
elseif|else
if|if
condition|(
name|third
operator|==
literal|'2'
condition|)
name|InlineFunctionExpansion
operator|=
name|expandAnySuitable
expr_stmt|;
else|else
name|found
operator|=
literal|false
expr_stmt|;
break|break;
case|case
literal|'d'
case|:
name|Optimization
operator|=
name|optimizeDisabled
expr_stmt|;
break|break;
case|case
literal|'g'
case|:
name|GlobalOptimizations
operator|=
name|_True
expr_stmt|;
break|break;
case|case
literal|'i'
case|:
name|EnableIntrinsicFunctions
operator|=
name|_True
expr_stmt|;
break|break;
case|case
literal|'p'
case|:
name|ImproveFloatingPointConsistency
operator|=
name|_True
expr_stmt|;
if|if
condition|(
name|third
operator|==
literal|'-'
condition|)
name|ImproveFloatingPointConsistency
operator|=
name|_False
expr_stmt|;
break|break;
case|case
literal|'s'
case|:
name|FavorSizeOrSpeed
operator|=
name|favorSize
expr_stmt|;
break|break;
case|case
literal|'t'
case|:
name|FavorSizeOrSpeed
operator|=
name|favorSpeed
expr_stmt|;
break|break;
case|case
literal|'w'
case|:
name|AdditionalOptions
operator|+=
name|option
expr_stmt|;
break|break;
case|case
literal|'x'
case|:
name|Optimization
operator|=
name|optimizeFull
expr_stmt|;
break|break;
case|case
literal|'y'
case|:
name|OmitFramePointers
operator|=
name|_True
expr_stmt|;
if|if
condition|(
name|third
operator|==
literal|'-'
condition|)
name|OmitFramePointers
operator|=
name|_False
expr_stmt|;
break|break;
default|default:
name|found
operator|=
literal|false
expr_stmt|;
break|break;
block|}
break|break;
case|case
literal|'P'
case|:
name|GeneratePreprocessedFile
operator|=
name|preprocessYes
expr_stmt|;
break|break;
case|case
literal|'Q'
case|:
if|if
condition|(
name|second
operator|==
literal|'I'
condition|)
block|{
name|AdditionalOptions
operator|+=
name|option
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|second
operator|==
literal|'R'
condition|)
block|{
name|QString
name|opt
init|=
name|option
operator|+
literal|3
decl_stmt|;
if|if
condition|(
name|opt
operator|==
literal|"interwork-return"
condition|)
block|{
name|InterworkCalls
operator|=
name|_True
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
literal|"arch4"
condition|)
block|{
name|CompileForArchitecture
operator|=
name|archArmv4
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
literal|"arch5"
condition|)
block|{
name|CompileForArchitecture
operator|=
name|archArmv5
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
literal|"arch4T"
condition|)
block|{
name|CompileForArchitecture
operator|=
name|archArmv4T
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
literal|"arch5T"
condition|)
block|{
name|CompileForArchitecture
operator|=
name|archArmv5T
expr_stmt|;
break|break;
block|}
block|}
elseif|else
if|if
condition|(
name|second
operator|==
literal|'M'
condition|)
block|{
name|QString
name|opt
init|=
name|option
operator|+
literal|3
decl_stmt|;
if|if
condition|(
name|opt
operator|==
literal|"mips1"
condition|)
block|{
name|CompileForArchitecture
operator|=
name|archMips1
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
literal|"mips2"
condition|)
block|{
name|CompileForArchitecture
operator|=
name|archMips2
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
literal|"mips3"
condition|)
block|{
name|CompileForArchitecture
operator|=
name|archMips3
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
literal|"mips4"
condition|)
block|{
name|CompileForArchitecture
operator|=
name|archMips4
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
literal|"mips5"
condition|)
block|{
name|CompileForArchitecture
operator|=
name|archMips5
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
literal|"mips16"
condition|)
block|{
name|CompileForArchitecture
operator|=
name|archMips16
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
literal|"mips32"
condition|)
block|{
name|CompileForArchitecture
operator|=
name|archMips32
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
literal|"mips64"
condition|)
block|{
name|CompileForArchitecture
operator|=
name|archMips64
expr_stmt|;
break|break;
block|}
block|}
name|found
operator|=
literal|false
expr_stmt|;
break|break;
case|case
literal|'R'
case|:
if|if
condition|(
name|second
operator|==
literal|'T'
operator|&&
name|third
operator|==
literal|'C'
condition|)
block|{
name|int
name|rtc
init|=
name|BasicRuntimeChecks
decl_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|4
init|;
name|option
index|[
name|i
index|]
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|parseRuntimeCheckOption
argument_list|(
name|option
index|[
name|i
index|]
argument_list|,
operator|&
name|rtc
argument_list|)
condition|)
block|{
name|found
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
name|BasicRuntimeChecks
operator|=
cast|static_cast
argument_list|<
name|basicRuntimeCheckOption
argument_list|>
argument_list|(
name|rtc
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|'T'
case|:
if|if
condition|(
name|second
operator|==
literal|'C'
condition|)
block|{
name|CompileAs
operator|=
name|compileAsC
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|second
operator|==
literal|'P'
condition|)
block|{
name|CompileAs
operator|=
name|compileAsCPlusPlus
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"Generator: Options '/Tp<filename>' and '/Tc<filename>' are not supported by qmake"
argument_list|)
expr_stmt|;
name|found
operator|=
literal|false
expr_stmt|;
break|break;
block|}
break|break;
case|case
literal|'U'
case|:
name|UndefinePreprocessorDefinitions
operator|+=
name|option
operator|+
literal|2
expr_stmt|;
break|break;
case|case
literal|'V'
case|:
name|AdditionalOptions
operator|+=
name|option
expr_stmt|;
break|break;
case|case
literal|'W'
case|:
switch|switch
condition|(
name|second
condition|)
block|{
case|case
literal|'a'
case|:
case|case
literal|'4'
case|:
name|WarningLevel
operator|=
name|warningLevel_4
expr_stmt|;
break|break;
case|case
literal|'3'
case|:
name|WarningLevel
operator|=
name|warningLevel_3
expr_stmt|;
break|break;
case|case
literal|'2'
case|:
name|WarningLevel
operator|=
name|warningLevel_2
expr_stmt|;
break|break;
case|case
literal|'1'
case|:
name|WarningLevel
operator|=
name|warningLevel_1
expr_stmt|;
break|break;
case|case
literal|'0'
case|:
name|WarningLevel
operator|=
name|warningLevel_0
expr_stmt|;
break|break;
case|case
literal|'L'
case|:
name|AdditionalOptions
operator|+=
name|option
expr_stmt|;
break|break;
case|case
literal|'X'
case|:
name|WarnAsError
operator|=
name|_True
expr_stmt|;
break|break;
case|case
literal|'p'
case|:
if|if
condition|(
name|third
operator|==
literal|'6'
operator|&&
name|fourth
operator|==
literal|'4'
condition|)
block|{
if|if
condition|(
name|config
operator|->
name|CompilerVersion
operator|>=
name|NET2010
condition|)
block|{
comment|// Deprecated for VS2010 but can be used under Additional Options.
name|AdditionalOptions
operator|+=
name|option
expr_stmt|;
block|}
else|else
block|{
name|Detect64BitPortabilityProblems
operator|=
name|_True
expr_stmt|;
block|}
break|break;
block|}
comment|// Fallthrough
default|default:
name|found
operator|=
literal|false
expr_stmt|;
break|break;
block|}
break|break;
case|case
literal|'X'
case|:
name|IgnoreStandardIncludePath
operator|=
name|_True
expr_stmt|;
break|break;
case|case
literal|'Y'
case|:
switch|switch
condition|(
name|second
condition|)
block|{
case|case
literal|'\0'
case|:
case|case
literal|'-'
case|:
name|AdditionalOptions
operator|+=
name|option
expr_stmt|;
break|break;
case|case
literal|'X'
case|:
name|UsePrecompiledHeader
operator|=
name|pchGenerateAuto
expr_stmt|;
name|PrecompiledHeaderThrough
operator|=
name|option
operator|+
literal|3
expr_stmt|;
break|break;
case|case
literal|'c'
case|:
name|UsePrecompiledHeader
operator|=
name|pchCreateUsingSpecific
expr_stmt|;
name|PrecompiledHeaderThrough
operator|=
name|option
operator|+
literal|3
expr_stmt|;
break|break;
case|case
literal|'d'
case|:
case|case
literal|'l'
case|:
name|AdditionalOptions
operator|+=
name|option
expr_stmt|;
break|break;
case|case
literal|'u'
case|:
name|UsePrecompiledHeader
operator|=
name|pchUseUsingSpecific
expr_stmt|;
name|PrecompiledHeaderThrough
operator|=
name|option
operator|+
literal|3
expr_stmt|;
break|break;
default|default:
name|found
operator|=
literal|false
expr_stmt|;
break|break;
block|}
break|break;
case|case
literal|'Z'
case|:
switch|switch
condition|(
name|second
condition|)
block|{
case|case
literal|'7'
case|:
name|DebugInformationFormat
operator|=
name|debugOldStyleInfo
expr_stmt|;
break|break;
case|case
literal|'I'
case|:
name|DebugInformationFormat
operator|=
name|debugEditAndContinue
expr_stmt|;
break|break;
case|case
literal|'d'
case|:
name|DebugInformationFormat
operator|=
name|debugLineInfoOnly
expr_stmt|;
break|break;
case|case
literal|'i'
case|:
name|DebugInformationFormat
operator|=
name|debugEnabled
expr_stmt|;
break|break;
case|case
literal|'l'
case|:
name|OmitDefaultLibName
operator|=
name|_True
expr_stmt|;
break|break;
case|case
literal|'a'
case|:
name|DisableLanguageExtensions
operator|=
name|_True
expr_stmt|;
break|break;
case|case
literal|'e'
case|:
name|DisableLanguageExtensions
operator|=
name|_False
expr_stmt|;
break|break;
case|case
literal|'c'
case|:
if|if
condition|(
name|third
operator|==
literal|':'
condition|)
block|{
specifier|const
name|char
modifier|*
name|c
init|=
name|option
operator|+
literal|4
decl_stmt|;
comment|// Go to the end of the option
while|while
condition|(
operator|*
name|c
operator|!=
literal|'\0'
operator|&&
operator|*
name|c
operator|!=
literal|' '
operator|&&
operator|*
name|c
operator|!=
literal|'-'
condition|)
operator|++
name|c
expr_stmt|;
if|if
condition|(
name|fourth
operator|==
literal|'f'
condition|)
name|ForceConformanceInForLoopScope
operator|=
operator|(
operator|(
operator|*
name|c
operator|)
operator|==
literal|'-'
condition|?
name|_False
else|:
name|_True
operator|)
expr_stmt|;
elseif|else
if|if
condition|(
name|fourth
operator|==
literal|'w'
condition|)
name|TreatWChar_tAsBuiltInType
operator|=
operator|(
operator|(
operator|*
name|c
operator|)
operator|==
literal|'-'
condition|?
name|_False
else|:
name|_True
operator|)
expr_stmt|;
else|else
name|found
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|found
operator|=
literal|false
expr_stmt|;
break|break;
block|}
break|break;
case|case
literal|'g'
case|:
case|case
literal|'m'
case|:
case|case
literal|'s'
case|:
name|AdditionalOptions
operator|+=
name|option
expr_stmt|;
break|break;
case|case
literal|'p'
case|:
switch|switch
condition|(
name|third
condition|)
block|{
case|case
literal|'\0'
case|:
case|case
literal|'1'
case|:
name|StructMemberAlignment
operator|=
name|alignSingleByte
expr_stmt|;
if|if
condition|(
name|fourth
operator|==
literal|'6'
condition|)
name|StructMemberAlignment
operator|=
name|alignSixteenBytes
expr_stmt|;
break|break;
case|case
literal|'2'
case|:
name|StructMemberAlignment
operator|=
name|alignTwoBytes
expr_stmt|;
break|break;
case|case
literal|'4'
case|:
name|StructMemberAlignment
operator|=
name|alignFourBytes
expr_stmt|;
break|break;
case|case
literal|'8'
case|:
name|StructMemberAlignment
operator|=
name|alignEightBytes
expr_stmt|;
break|break;
default|default:
name|found
operator|=
literal|false
expr_stmt|;
break|break;
block|}
break|break;
case|case
literal|'W'
case|:
if|if
condition|(
name|third
operator|==
literal|'-'
condition|)
name|CompileAsWinRT
operator|=
name|_False
expr_stmt|;
else|else
name|CompileAsWinRT
operator|=
name|_True
expr_stmt|;
break|break;
default|default:
name|found
operator|=
literal|false
expr_stmt|;
break|break;
block|}
break|break;
case|case
literal|'a'
case|:
if|if
condition|(
name|second
operator|==
literal|'r'
operator|&&
name|third
operator|==
literal|'c'
operator|&&
name|fourth
operator|==
literal|'h'
condition|)
block|{
if|if
condition|(
name|option
index|[
literal|5
index|]
operator|==
literal|':'
condition|)
block|{
specifier|const
name|char
modifier|*
name|o
init|=
name|option
decl_stmt|;
if|if
condition|(
name|o
index|[
literal|6
index|]
operator|==
literal|'S'
operator|&&
name|o
index|[
literal|7
index|]
operator|==
literal|'S'
operator|&&
name|o
index|[
literal|8
index|]
operator|==
literal|'E'
condition|)
block|{
name|EnableEnhancedInstructionSet
operator|=
name|o
index|[
literal|9
index|]
operator|==
literal|'2'
condition|?
name|archSSE2
else|:
name|archSSE
expr_stmt|;
break|break;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|second
operator|==
literal|'n'
operator|&&
name|third
operator|==
literal|'a'
operator|&&
name|fourth
operator|==
literal|'l'
condition|)
block|{
name|EnablePREfast
operator|=
name|_True
expr_stmt|;
break|break;
block|}
name|found
operator|=
literal|false
expr_stmt|;
break|break;
case|case
literal|'b'
case|:
comment|// see http://msdn2.microsoft.com/en-us/library/ms173499.aspx
if|if
condition|(
name|second
operator|==
literal|'i'
operator|&&
name|third
operator|==
literal|'g'
operator|&&
name|fourth
operator|==
literal|'o'
condition|)
block|{
specifier|const
name|char
modifier|*
name|o
init|=
name|option
decl_stmt|;
if|if
condition|(
name|o
index|[
literal|5
index|]
operator|==
literal|'b'
operator|&&
name|o
index|[
literal|6
index|]
operator|==
literal|'j'
condition|)
block|{
name|AdditionalOptions
operator|+=
name|option
expr_stmt|;
break|break;
block|}
block|}
name|found
operator|=
literal|false
expr_stmt|;
break|break;
case|case
literal|'c'
case|:
if|if
condition|(
name|second
operator|==
literal|'\0'
condition|)
block|{
name|CompileOnly
operator|=
name|_True
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|second
operator|==
literal|'l'
condition|)
block|{
if|if
condition|(
name|config
operator|->
name|CompilerVersion
operator|<
name|NET2005
condition|)
block|{
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|5
operator|)
operator|==
literal|'n'
condition|)
block|{
name|CompileAsManaged
operator|=
name|managedAssemblyPure
expr_stmt|;
name|TurnOffAssemblyGeneration
operator|=
name|_True
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|5
operator|)
operator|==
literal|'p'
condition|)
block|{
name|CompileAsManaged
operator|=
name|managedAssemblyPure
expr_stmt|;
name|warn_msg
argument_list|(
name|WarnLogic
argument_list|,
literal|"/clr:pure option only for .NET>= 2005, using /clr"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|5
operator|)
operator|==
literal|'s'
condition|)
block|{
name|CompileAsManaged
operator|=
name|managedAssemblyPure
expr_stmt|;
name|warn_msg
argument_list|(
name|WarnLogic
argument_list|,
literal|"/clr:safe option only for .NET>= 2005, using /clr"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|5
operator|)
operator|==
literal|'o'
condition|)
block|{
name|CompileAsManaged
operator|=
name|managedAssemblyPure
expr_stmt|;
name|warn_msg
argument_list|(
name|WarnLogic
argument_list|,
literal|"/clr:oldSyntax option only for .NET>= 2005, using /clr"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|5
operator|)
operator|==
literal|'i'
condition|)
block|{
name|CompileAsManaged
operator|=
name|managedAssemblyPure
expr_stmt|;
name|warn_msg
argument_list|(
name|WarnLogic
argument_list|,
literal|"initialAppDomain enum value unknown, using /crl"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CompileAsManaged
operator|=
name|managedAssemblyPure
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|5
operator|)
operator|==
literal|'n'
condition|)
block|{
name|CompileAsManaged
operator|=
name|managedAssembly
expr_stmt|;
name|TurnOffAssemblyGeneration
operator|=
name|_True
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|5
operator|)
operator|==
literal|'p'
condition|)
block|{
name|CompileAsManaged
operator|=
name|managedAssemblyPure
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|5
operator|)
operator|==
literal|'s'
condition|)
block|{
name|CompileAsManaged
operator|=
name|managedAssemblySafe
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|5
operator|)
operator|==
literal|'o'
condition|)
block|{
name|CompileAsManaged
operator|=
name|managedAssemblyOldSyntax
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|5
operator|)
operator|==
literal|'i'
condition|)
block|{
name|CompileAsManaged
operator|=
name|managedAssembly
expr_stmt|;
name|warn_msg
argument_list|(
name|WarnLogic
argument_list|,
literal|"initialAppDomain enum value unknown, using /crl default"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|CompileAsManaged
operator|=
name|managedAssembly
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|found
operator|=
literal|false
expr_stmt|;
break|break;
block|}
break|break;
case|case
literal|'d'
case|:
if|if
condition|(
name|second
operator|==
literal|'r'
condition|)
block|{
name|CompileAsManaged
operator|=
name|managedAssembly
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|second
operator|!=
literal|'o'
operator|&&
name|third
operator|==
literal|'c'
condition|)
block|{
name|GenerateXMLDocumentationFiles
operator|=
name|_True
expr_stmt|;
name|XMLDocumentationFileName
operator|+=
name|option
operator|+
literal|4
expr_stmt|;
break|break;
block|}
name|found
operator|=
literal|false
expr_stmt|;
break|break;
case|case
literal|'e'
case|:
if|if
condition|(
name|second
operator|==
literal|'r'
operator|&&
name|third
operator|==
literal|'r'
operator|&&
name|fourth
operator|==
literal|'o'
condition|)
block|{
if|if
condition|(
name|option
index|[
literal|12
index|]
operator|==
literal|':'
condition|)
block|{
if|if
condition|(
name|option
index|[
literal|13
index|]
operator|==
literal|'n'
condition|)
block|{
name|ErrorReporting
operator|=
literal|"None"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|option
index|[
literal|13
index|]
operator|==
literal|'p'
condition|)
block|{
name|ErrorReporting
operator|=
literal|"Prompt"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|option
index|[
literal|13
index|]
operator|==
literal|'q'
condition|)
block|{
name|ErrorReporting
operator|=
literal|"Queue"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|option
index|[
literal|13
index|]
operator|==
literal|'s'
condition|)
block|{
name|ErrorReporting
operator|=
literal|"Send"
expr_stmt|;
block|}
else|else
block|{
name|found
operator|=
literal|false
expr_stmt|;
block|}
break|break;
block|}
block|}
name|found
operator|=
literal|false
expr_stmt|;
break|break;
case|case
literal|'f'
case|:
if|if
condition|(
name|second
operator|==
literal|'p'
operator|&&
name|third
operator|==
literal|':'
condition|)
block|{
comment|// Go to the end of the option
specifier|const
name|char
modifier|*
name|c
init|=
name|option
operator|+
literal|4
decl_stmt|;
while|while
condition|(
operator|*
name|c
operator|!=
literal|'\0'
operator|&&
operator|*
name|c
operator|!=
literal|' '
operator|&&
operator|*
name|c
operator|!=
literal|'-'
condition|)
operator|++
name|c
expr_stmt|;
switch|switch
condition|(
name|fourth
condition|)
block|{
case|case
literal|'e'
case|:
name|FloatingPointExceptions
operator|=
operator|(
operator|(
operator|*
name|c
operator|)
operator|==
literal|'-'
condition|?
name|_False
else|:
name|_True
operator|)
expr_stmt|;
break|break;
case|case
literal|'f'
case|:
name|FloatingPointModel
operator|=
name|floatingPointFast
expr_stmt|;
break|break;
case|case
literal|'p'
case|:
name|FloatingPointModel
operator|=
name|floatingPointPrecise
expr_stmt|;
break|break;
case|case
literal|'s'
case|:
name|FloatingPointModel
operator|=
name|floatingPointStrict
expr_stmt|;
break|break;
default|default:
name|found
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
break|break;
case|case
literal|'n'
case|:
if|if
condition|(
name|second
operator|==
literal|'o'
operator|&&
name|third
operator|==
literal|'B'
operator|&&
name|fourth
operator|==
literal|'o'
condition|)
block|{
name|AdditionalOptions
operator|+=
literal|"/noBool"
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|second
operator|==
literal|'o'
operator|&&
name|third
operator|==
literal|'l'
operator|&&
name|fourth
operator|==
literal|'o'
condition|)
block|{
name|SuppressStartupBanner
operator|=
name|_True
expr_stmt|;
break|break;
block|}
name|found
operator|=
literal|false
expr_stmt|;
break|break;
case|case
literal|'o'
case|:
block|{
specifier|const
name|char
modifier|*
name|str
init|=
name|option
operator|+
literal|2
decl_stmt|;
specifier|const
name|size_t
name|len
init|=
name|strlen
argument_list|(
name|str
argument_list|)
decl_stmt|;
if|if
condition|(
name|len
operator|>=
literal|5
operator|&&
name|len
operator|<=
literal|6
operator|&&
name|strncmp
argument_list|(
name|str
argument_list|,
literal|"penmp"
argument_list|,
literal|5
argument_list|)
operator|==
literal|0
condition|)
block|{
if|if
condition|(
name|len
operator|==
literal|5
condition|)
block|{
name|OpenMP
operator|=
name|_True
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|str
index|[
literal|5
index|]
operator|==
literal|'-'
condition|)
block|{
name|OpenMP
operator|=
name|_False
expr_stmt|;
break|break;
block|}
block|}
name|found
operator|=
literal|false
expr_stmt|;
break|break;
block|}
case|case
literal|'s'
case|:
if|if
condition|(
name|second
operator|==
literal|'h'
operator|&&
name|third
operator|==
literal|'o'
operator|&&
name|fourth
operator|==
literal|'w'
condition|)
block|{
name|ShowIncludes
operator|=
name|_True
expr_stmt|;
break|break;
block|}
name|found
operator|=
literal|false
expr_stmt|;
break|break;
case|case
literal|'u'
case|:
name|UndefineAllPreprocessorDefinitions
operator|=
name|_True
expr_stmt|;
break|break;
case|case
literal|'v'
case|:
if|if
condition|(
name|second
operator|==
literal|'d'
operator|||
name|second
operator|==
literal|'m'
condition|)
block|{
name|AdditionalOptions
operator|+=
name|option
expr_stmt|;
break|break;
block|}
name|found
operator|=
literal|false
expr_stmt|;
break|break;
case|case
literal|'w'
case|:
switch|switch
condition|(
name|second
condition|)
block|{
case|case
literal|'\0'
case|:
name|WarningLevel
operator|=
name|warningLevel_0
expr_stmt|;
break|break;
case|case
literal|'d'
case|:
name|DisableSpecificWarnings
operator|+=
name|option
operator|+
literal|3
expr_stmt|;
break|break;
case|case
literal|'e'
case|:
if|if
condition|(
name|config
operator|->
name|CompilerVersion
operator|<=
name|NET2008
condition|)
name|AdditionalOptions
operator|+=
name|option
expr_stmt|;
else|else
name|TreatSpecificWarningsAsErrors
operator|+=
name|option
operator|+
literal|3
expr_stmt|;
break|break;
default|default:
name|AdditionalOptions
operator|+=
name|option
expr_stmt|;
block|}
break|break;
default|default:
name|AdditionalOptions
operator|+=
name|option
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|warn_msg
argument_list|(
name|WarnLogic
argument_list|,
literal|"Could not parse Compiler option: %s, added as AdditionalOption"
argument_list|,
name|option
argument_list|)
expr_stmt|;
name|AdditionalOptions
operator|+=
name|option
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|parseRuntimeCheckOption
name|bool
name|VCCLCompilerTool
operator|::
name|parseRuntimeCheckOption
parameter_list|(
name|char
name|c
parameter_list|,
name|int
modifier|*
name|rtc
parameter_list|)
block|{
if|if
condition|(
name|c
operator|==
literal|'1'
condition|)
operator|*
name|rtc
operator|=
name|runtimeBasicCheckAll
expr_stmt|;
elseif|else
if|if
condition|(
name|c
operator|==
literal|'c'
condition|)
name|SmallerTypeCheck
operator|=
name|_True
expr_stmt|;
elseif|else
if|if
condition|(
name|c
operator|==
literal|'s'
condition|)
operator|*
name|rtc
operator||=
name|runtimeCheckStackFrame
expr_stmt|;
elseif|else
if|if
condition|(
name|c
operator|==
literal|'u'
condition|)
operator|*
name|rtc
operator||=
name|runtimeCheckUninitVariables
expr_stmt|;
else|else
return|return
literal|false
return|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|// VCLinkerTool -----------------------------------------------------
end_comment
begin_constructor
DECL|function|VCLinkerTool
name|VCLinkerTool
operator|::
name|VCLinkerTool
parameter_list|()
member_init_list|:
name|DataExecutionPrevention
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|EnableCOMDATFolding
argument_list|(
name|optFoldingDefault
argument_list|)
member_init_list|,
name|GenerateDebugInformation
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|GenerateMapFile
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|HeapCommitSize
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|HeapReserveSize
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|IgnoreAllDefaultLibraries
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|IgnoreEmbeddedIDL
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|IgnoreImportLibrary
argument_list|(
name|_True
argument_list|)
member_init_list|,
name|ImageHasSafeExceptionHandlers
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|LargeAddressAware
argument_list|(
name|addrAwareDefault
argument_list|)
member_init_list|,
name|LinkDLL
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|LinkIncremental
argument_list|(
name|linkIncrementalDefault
argument_list|)
member_init_list|,
name|LinkTimeCodeGeneration
argument_list|(
name|optLTCGDefault
argument_list|)
member_init_list|,
name|MapExports
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|MapLines
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|OptimizeForWindows98
argument_list|(
name|optWin98Default
argument_list|)
member_init_list|,
name|OptimizeReferences
argument_list|(
name|optReferencesDefault
argument_list|)
member_init_list|,
name|RandomizedBaseAddress
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|RegisterOutput
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|ResourceOnlyDLL
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|SetChecksum
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|ShowProgress
argument_list|(
name|linkProgressNotSet
argument_list|)
member_init_list|,
name|StackCommitSize
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|StackReserveSize
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|SubSystem
argument_list|(
name|subSystemNotSet
argument_list|)
member_init_list|,
name|SupportUnloadOfDelayLoadedDLL
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|SuppressStartupBanner
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|SwapRunFromCD
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|SwapRunFromNet
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|TargetMachine
argument_list|(
name|machineNotSet
argument_list|)
member_init_list|,
name|TerminalServerAware
argument_list|(
name|termSvrAwareDefault
argument_list|)
member_init_list|,
name|TreatWarningsAsErrors
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|TurnOffAssemblyGeneration
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|TypeLibraryResourceID
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|GenerateManifest
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|EnableUAC
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|UACUIAccess
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|SectionAlignment
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|PreventDllBinding
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|AllowIsolation
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|AssemblyDebug
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|CLRUnmanagedCodeCheck
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|DelaySign
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|GenerateWindowsMetadata
argument_list|(
name|unset
argument_list|)
block|{ }
end_constructor
begin_comment
comment|// Hashing routine to do fast option lookups ----
end_comment
begin_comment
comment|// Slightly rewritten to stop on ':' ',' and '\0'
end_comment
begin_comment
comment|// Original routine in qtranslator.cpp ----------
end_comment
begin_function
DECL|function|elfHash
specifier|static
name|uint
name|elfHash
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|)
block|{
specifier|const
name|uchar
modifier|*
name|k
decl_stmt|;
name|uint
name|h
init|=
literal|0
decl_stmt|;
name|uint
name|g
decl_stmt|;
if|if
condition|(
name|name
condition|)
block|{
name|k
operator|=
operator|(
specifier|const
name|uchar
operator|*
operator|)
name|name
expr_stmt|;
while|while
condition|(
operator|(
operator|*
name|k
operator|)
operator|&&
operator|(
operator|*
name|k
operator|)
operator|!=
literal|':'
operator|&&
operator|(
operator|*
name|k
operator|)
operator|!=
literal|','
operator|&&
operator|(
operator|*
name|k
operator|)
operator|!=
literal|' '
condition|)
block|{
name|h
operator|=
operator|(
name|h
operator|<<
literal|4
operator|)
operator|+
operator|*
name|k
operator|++
expr_stmt|;
if|if
condition|(
operator|(
name|g
operator|=
operator|(
name|h
operator|&
literal|0xf0000000
operator|)
operator|)
operator|!=
literal|0
condition|)
name|h
operator|^=
name|g
operator|>>
literal|24
expr_stmt|;
name|h
operator|&=
operator|~
name|g
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|h
condition|)
name|h
operator|=
literal|1
expr_stmt|;
return|return
name|h
return|;
block|}
end_function
begin_comment
comment|//#define USE_DISPLAY_HASH
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|USE_DISPLAY_HASH
end_ifdef
begin_function
DECL|function|displayHash
specifier|static
name|void
name|displayHash
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|)
block|{
name|printf
argument_list|(
literal|"case 0x%07x: // %s\n    break;\n"
argument_list|,
name|elfHash
argument_list|(
name|str
argument_list|)
argument_list|,
name|str
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|parseOption
name|bool
name|VCLinkerTool
operator|::
name|parseOption
parameter_list|(
specifier|const
name|char
modifier|*
name|option
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|USE_DISPLAY_HASH
comment|// Main options
name|displayHash
argument_list|(
literal|"/ALIGN"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/ALLOWBIND"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/ASSEMBLYMODULE"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/ASSEMBLYRESOURCE"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/BASE"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/DEBUG"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/DEF"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/DEFAULTLIB"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/DELAY"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/DELAYLOAD"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/DLL"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/DRIVER"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/ENTRY"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/EXETYPE"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/EXPORT"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/FIXED"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/FORCE"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/HEAP"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/IDLOUT"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/IGNORE"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/IGNOREIDL"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/IMPLIB"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/INCLUDE"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/INCREMENTAL"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/LARGEADDRESSAWARE"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/LIBPATH"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/LTCG"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/MACHINE"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/MAP"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/MAPINFO"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/MERGE"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/MIDL"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/NOASSEMBLY"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/NODEFAULTLIB"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/NOENTRY"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/NOLOGO"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/OPT"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/ORDER"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/OUT"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/PDB"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/PDBSTRIPPED"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/RELEASE"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/SECTION"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/STACK"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/STUB"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/SUBSYSTEM"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/SWAPRUN"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/TLBID"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/TLBOUT"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/TSAWARE"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/VERBOSE"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/VERSION"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/VXD"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/WS "
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/libpath"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/WINMD"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/WINMDFILE:"
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|USE_DISPLAY_HASH
comment|// Sub options
name|displayHash
argument_list|(
literal|"UNLOAD"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"NOBIND"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"no"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"NOSTATUS"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"STATUS"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"AM33"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"ARM"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"CEE"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"EBC"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"IA64"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"X86"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"X64"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"M32R"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"MIPS"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"MIPS16"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"MIPSFPU"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"MIPSFPU16"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"MIPSR41XX"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"PPC"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"SH3"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"SH3DSP"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"SH4"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"SH5"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"THUMB"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"TRICORE"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"EXPORTS"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"LINES"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"REF"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"NOREF"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"ICF"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"WIN98"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"NOWIN98"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"CONSOLE"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"EFI_APPLICATION"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"EFI_BOOT_SERVICE_DRIVER"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"EFI_ROM"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"EFI_RUNTIME_DRIVER"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"NATIVE"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"POSIX"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"WINDOWS"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"WINDOWSCE"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"NET"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"CD"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"NO"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|bool
name|found
init|=
literal|true
decl_stmt|;
specifier|const
name|uint
name|optionHash
init|=
name|elfHash
argument_list|(
name|option
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|->
name|CompilerVersion
operator|<
name|NET2010
condition|)
block|{
switch|switch
condition|(
name|optionHash
condition|)
block|{
case|case
literal|0x3360dbe
case|:
comment|// /ALIGN[:number]
case|case
literal|0x1485c34
case|:
comment|// /ALLOWBIND[:NO]
case|case
literal|0x33aec94
case|:
comment|// /FIXED[:NO]
case|case
literal|0x7988f7e
case|:
comment|// /SECTION:name,[E][R][W][S][D][K][L][P][X][,ALIGN=#]
case|case
literal|0x0348992
case|:
comment|// /STUB:filename
name|AdditionalOptions
operator|+=
name|option
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
switch|switch
condition|(
name|optionHash
condition|)
block|{
case|case
literal|0x6b21972
case|:
comment|// /DEFAULTLIB:library
case|case
literal|0x396ea92
case|:
comment|// /DRIVER[:UPONLY | :WDM]
case|case
literal|0xaca9d75
case|:
comment|// /EXETYPE[:DYNAMIC | :DEV386]
case|case
literal|0x3ad5444
case|:
comment|// /EXPORT:entryname[,@ordinal[,NONAME]][,DATA]
case|case
literal|0x33b4675
case|:
comment|// /FORCE:[MULTIPLE|UNRESOLVED]
case|case
literal|0x3dc3455
case|:
comment|// /IGNORE:number,number,number,number  ### NOTE: This one is undocumented, but it is even used by Microsoft.
comment|//                                      In recent versions of the Microsoft linker they have disabled this undocumented feature.
case|case
literal|0x0034bc4
case|:
comment|// /VXD
name|AdditionalOptions
operator|+=
name|option
expr_stmt|;
break|break;
case|case
literal|0x3360dbe
case|:
comment|// /ALIGN[:number]
name|SectionAlignment
operator|=
name|QString
argument_list|(
name|option
operator|+
literal|7
argument_list|)
operator|.
name|toLongLong
argument_list|()
expr_stmt|;
break|break;
case|case
literal|0x1485c34
case|:
comment|// /ALLOWBIND[:NO]
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|10
operator|)
operator|==
literal|':'
operator|&&
operator|(
operator|*
operator|(
name|option
operator|+
literal|11
operator|)
operator|==
literal|'n'
operator|||
operator|*
operator|(
name|option
operator|+
literal|11
operator|)
operator|==
literal|'N'
operator|)
condition|)
name|PreventDllBinding
operator|=
name|_False
expr_stmt|;
else|else
name|PreventDllBinding
operator|=
name|_True
expr_stmt|;
break|break;
case|case
literal|0x312011e
case|:
comment|// /ALLOWISOLATION[:NO]
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|15
operator|)
operator|==
literal|':'
operator|&&
operator|(
operator|*
operator|(
name|option
operator|+
literal|16
operator|)
operator|==
literal|'n'
operator|||
operator|*
operator|(
name|option
operator|+
literal|16
operator|)
operator|==
literal|'N'
operator|)
condition|)
name|AllowIsolation
operator|=
name|_False
expr_stmt|;
else|else
name|AllowIsolation
operator|=
name|_True
expr_stmt|;
break|break;
case|case
literal|0x679c075
case|:
comment|// /ASSEMBLYMODULE:filename
name|AddModuleNamesToAssembly
operator|+=
name|option
operator|+
literal|15
expr_stmt|;
break|break;
case|case
literal|0x75f35f7
case|:
comment|// /ASSEMBLYDEBUG[:DISABLE]
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|14
operator|)
operator|==
literal|':'
operator|&&
operator|(
operator|*
operator|(
name|option
operator|+
literal|15
operator|)
operator|==
literal|'D'
operator|)
condition|)
name|AssemblyDebug
operator|=
name|_False
expr_stmt|;
else|else
name|AssemblyDebug
operator|=
name|_True
expr_stmt|;
break|break;
case|case
literal|0x43294a5
case|:
comment|// /ASSEMBLYLINKRESOURCE:filename
name|AssemblyLinkResource
operator|+=
name|option
operator|+
literal|22
expr_stmt|;
break|break;
case|case
literal|0x062d065
case|:
comment|// /ASSEMBLYRESOURCE:filename
name|LinkToManagedResourceFile
operator|=
name|option
operator|+
literal|18
expr_stmt|;
break|break;
case|case
literal|0x0336675
case|:
comment|// /BASE:{address | @filename,key}
comment|// Do we need to do a manual lookup when '@filename,key'?
comment|// Seems BaseAddress only can contain the location...
comment|// We don't use it in Qt, so keep it simple for now
name|BaseAddress
operator|=
name|option
operator|+
literal|6
expr_stmt|;
break|break;
case|case
literal|0x63bf065
case|:
comment|// /CLRIMAGETYPE:{IJW|PURE|SAFE}
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|14
operator|)
operator|==
literal|'I'
condition|)
name|CLRImageType
operator|=
literal|"ForceIJWImage"
expr_stmt|;
elseif|else
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|14
operator|)
operator|==
literal|'P'
condition|)
name|CLRImageType
operator|=
literal|"ForcePureILImage"
expr_stmt|;
elseif|else
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|14
operator|)
operator|==
literal|'S'
condition|)
name|CLRImageType
operator|=
literal|"ForceSafeILImage"
expr_stmt|;
break|break;
case|case
literal|0x5f2a6a2
case|:
comment|// /CLRSUPPORTLASTERROR{:NO | SYSTEMDLL}
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|20
operator|)
operator|==
literal|':'
condition|)
block|{
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|21
operator|)
operator|==
literal|'N'
condition|)
block|{
name|CLRSupportLastError
operator|=
literal|"Disabled"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|21
operator|)
operator|==
literal|'S'
condition|)
block|{
name|CLRSupportLastError
operator|=
literal|"SystemDlls"
expr_stmt|;
block|}
block|}
else|else
block|{
name|CLRSupportLastError
operator|=
literal|"Enabled"
expr_stmt|;
block|}
break|break;
case|case
literal|0xc7984f5
case|:
comment|// /CLRTHREADATTRIBUTE:{STA|MTA|NONE}
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|20
operator|)
operator|==
literal|'N'
condition|)
name|CLRThreadAttribute
operator|=
literal|"DefaultThreadingAttribute"
expr_stmt|;
elseif|else
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|20
operator|)
operator|==
literal|'M'
condition|)
name|CLRThreadAttribute
operator|=
literal|"MTAThreadingAttribute"
expr_stmt|;
elseif|else
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|20
operator|)
operator|==
literal|'S'
condition|)
name|CLRThreadAttribute
operator|=
literal|"STAThreadingAttribute"
expr_stmt|;
break|break;
case|case
literal|0xa8c637b
case|:
comment|// /CLRUNMANAGEDCODECHECK[:NO]
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|23
operator|)
operator|==
literal|'N'
condition|)
name|CLRUnmanagedCodeCheck
operator|=
name|_False
expr_stmt|;
else|else
name|CLRUnmanagedCodeCheck
operator|=
name|_True
expr_stmt|;
break|break;
case|case
literal|0x62d9e94
case|:
comment|// /MANIFEST[:NO]
if|if
condition|(
operator|(
operator|*
operator|(
name|option
operator|+
literal|9
operator|)
operator|==
literal|':'
operator|&&
operator|(
operator|*
operator|(
name|option
operator|+
literal|10
operator|)
operator|==
literal|'N'
operator|||
operator|*
operator|(
name|option
operator|+
literal|10
operator|)
operator|==
literal|'n'
operator|)
operator|)
condition|)
name|GenerateManifest
operator|=
name|_False
expr_stmt|;
else|else
name|GenerateManifest
operator|=
name|_True
expr_stmt|;
break|break;
case|case
literal|0x34be314
case|:
comment|// /WINMD[:NO]
if|if
condition|(
operator|(
operator|*
operator|(
name|option
operator|+
literal|6
operator|)
operator|==
literal|':'
operator|&&
operator|(
operator|*
operator|(
name|option
operator|+
literal|7
operator|)
operator|==
literal|'N'
operator|||
operator|*
operator|(
name|option
operator|+
literal|7
operator|)
operator|==
literal|'n'
operator|)
operator|)
condition|)
name|GenerateWindowsMetadata
operator|=
name|_False
expr_stmt|;
else|else
name|GenerateWindowsMetadata
operator|=
name|_True
expr_stmt|;
break|break;
case|case
literal|0x31be7e5
case|:
comment|// /WINMDFILE:filename
name|WindowsMetadataFile
operator|=
name|option
operator|+
literal|11
expr_stmt|;
break|break;
case|case
literal|0x8b64559
case|:
comment|// /MANIFESTDEPENDENCY:manifest_dependency
name|AdditionalManifestDependencies
operator|+=
name|option
operator|+
literal|20
expr_stmt|;
break|break;
case|case
literal|0xe9e8195
case|:
comment|// /MANIFESTFILE:filename
name|ManifestFile
operator|=
name|option
operator|+
literal|14
expr_stmt|;
break|break;
case|case
literal|0x9e9fb83
case|:
comment|// /MANIFESTUAC http://msdn.microsoft.com/en-us/library/bb384691%28VS.100%29.aspx
if|if
condition|(
operator|(
operator|*
operator|(
name|option
operator|+
literal|12
operator|)
operator|==
literal|':'
operator|&&
operator|(
operator|*
operator|(
name|option
operator|+
literal|13
operator|)
operator|==
literal|'N'
operator|||
operator|*
operator|(
name|option
operator|+
literal|13
operator|)
operator|==
literal|'n'
operator|)
operator|)
condition|)
name|EnableUAC
operator|=
name|_False
expr_stmt|;
elseif|else
if|if
condition|(
operator|(
operator|*
operator|(
name|option
operator|+
literal|12
operator|)
operator|==
literal|':'
operator|&&
operator|(
operator|*
operator|(
name|option
operator|+
literal|13
operator|)
operator|==
literal|'l'
operator|||
operator|*
operator|(
name|option
operator|+
literal|14
operator|)
operator|==
literal|'e'
operator|)
operator|)
condition|)
block|{
comment|// level
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|20
operator|)
operator|==
literal|'a'
condition|)
name|UACExecutionLevel
operator|=
literal|"AsInvoker"
expr_stmt|;
elseif|else
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|20
operator|)
operator|==
literal|'h'
condition|)
name|UACExecutionLevel
operator|=
literal|"HighestAvailable"
expr_stmt|;
elseif|else
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|20
operator|)
operator|==
literal|'r'
condition|)
name|UACExecutionLevel
operator|=
literal|"RequireAdministrator"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
operator|*
operator|(
name|option
operator|+
literal|12
operator|)
operator|==
literal|':'
operator|&&
operator|(
operator|*
operator|(
name|option
operator|+
literal|13
operator|)
operator|==
literal|'u'
operator|||
operator|*
operator|(
name|option
operator|+
literal|14
operator|)
operator|==
literal|'i'
operator|)
operator|)
condition|)
block|{
comment|// uiAccess
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|22
operator|)
operator|==
literal|'t'
condition|)
name|UACUIAccess
operator|=
name|_True
expr_stmt|;
else|else
name|UACUIAccess
operator|=
name|_False
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
operator|*
operator|(
name|option
operator|+
literal|12
operator|)
operator|==
literal|':'
operator|&&
operator|(
operator|*
operator|(
name|option
operator|+
literal|13
operator|)
operator|==
literal|'f'
operator|||
operator|*
operator|(
name|option
operator|+
literal|14
operator|)
operator|==
literal|'r'
operator|)
operator|)
condition|)
block|{
comment|// fragment
name|AdditionalOptions
operator|+=
name|option
expr_stmt|;
block|}
else|else
name|EnableUAC
operator|=
name|_True
expr_stmt|;
break|break;
case|case
literal|0x3389797
case|:
comment|// /DEBUG
name|GenerateDebugInformation
operator|=
name|_True
expr_stmt|;
break|break;
case|case
literal|0x0033896
case|:
comment|// /DEF:filename
name|ModuleDefinitionFile
operator|=
name|option
operator|+
literal|5
expr_stmt|;
break|break;
case|case
literal|0x338a069
case|:
comment|// /DELAY:{UNLOAD | NOBIND}
comment|// MS documentation does not specify what to do with
comment|// this option, so we'll put it in AdditionalOptions
name|AdditionalOptions
operator|+=
name|option
expr_stmt|;
break|break;
case|case
literal|0x06f4bf4
case|:
comment|// /DELAYLOAD:dllname
name|DelayLoadDLLs
operator|+=
name|option
operator|+
literal|11
expr_stmt|;
break|break;
case|case
literal|0x06d451e
case|:
comment|// /DELAYSIGN[:NO]
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|10
operator|)
operator|==
literal|':'
operator|&&
operator|(
operator|*
operator|(
name|option
operator|+
literal|11
operator|)
operator|==
literal|'n'
operator|||
operator|*
operator|(
name|option
operator|+
literal|11
operator|)
operator|==
literal|'N'
operator|)
condition|)
name|DelaySign
operator|=
name|_False
expr_stmt|;
else|else
name|DelaySign
operator|=
name|_True
expr_stmt|;
break|break;
case|case
literal|0x003390c
case|:
comment|// /DLL
comment|// This option is not used for vcproj files
break|break;
case|case
literal|0x2ee8415
case|:
comment|// /DYNAMICBASE[:NO]
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|12
operator|)
operator|==
literal|':'
operator|&&
operator|(
operator|*
operator|(
name|option
operator|+
literal|13
operator|)
operator|==
literal|'n'
operator|||
operator|*
operator|(
name|option
operator|+
literal|13
operator|)
operator|==
literal|'N'
operator|)
condition|)
name|RandomizedBaseAddress
operator|=
name|_False
expr_stmt|;
else|else
name|RandomizedBaseAddress
operator|=
name|_True
expr_stmt|;
break|break;
case|case
literal|0x33a3979
case|:
comment|// /ENTRY:function
name|EntryPointSymbol
operator|=
name|option
operator|+
literal|7
expr_stmt|;
break|break;
case|case
literal|0x4504334
case|:
comment|// /ERRORREPORT:[ NONE | PROMPT | QUEUE | SEND ]
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|12
operator|)
operator|==
literal|':'
condition|)
block|{
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|13
operator|)
operator|==
literal|'N'
condition|)
name|LinkErrorReporting
operator|=
literal|"NoErrorReport"
expr_stmt|;
elseif|else
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|13
operator|)
operator|==
literal|'P'
condition|)
name|LinkErrorReporting
operator|=
literal|"PromptImmediately"
expr_stmt|;
elseif|else
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|13
operator|)
operator|==
literal|'Q'
condition|)
name|LinkErrorReporting
operator|=
literal|"QueueForNextLogin"
expr_stmt|;
elseif|else
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|13
operator|)
operator|==
literal|'S'
condition|)
name|LinkErrorReporting
operator|=
literal|"SendErrorReport"
expr_stmt|;
block|}
break|break;
case|case
literal|0x033c960
case|:
comment|// /HEAP:reserve[,commit]
block|{
name|QStringList
name|both
init|=
name|QString
argument_list|(
name|option
operator|+
literal|6
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|HeapReserveSize
operator|=
name|both
index|[
literal|0
index|]
operator|.
name|toLongLong
argument_list|()
expr_stmt|;
if|if
condition|(
name|both
operator|.
name|count
argument_list|()
operator|==
literal|2
condition|)
name|HeapCommitSize
operator|=
name|both
index|[
literal|1
index|]
operator|.
name|toLongLong
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|0x3d91494
case|:
comment|// /IDLOUT:[path\]filename
name|MergedIDLBaseFileName
operator|=
name|option
operator|+
literal|8
expr_stmt|;
break|break;
case|case
literal|0x345a04c
case|:
comment|// /IGNOREIDL
name|IgnoreEmbeddedIDL
operator|=
name|_True
expr_stmt|;
break|break;
case|case
literal|0x3e250e2
case|:
comment|// /IMPLIB:filename
name|ImportLibrary
operator|=
name|option
operator|+
literal|8
expr_stmt|;
break|break;
case|case
literal|0xe281ab5
case|:
comment|// /INCLUDE:symbol
name|ForceSymbolReferences
operator|+=
name|option
operator|+
literal|9
expr_stmt|;
break|break;
case|case
literal|0xb28103c
case|:
comment|// /INCREMENTAL[:no]
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|12
operator|)
operator|==
literal|':'
operator|&&
operator|(
operator|*
operator|(
name|option
operator|+
literal|13
operator|)
operator|==
literal|'n'
operator|||
operator|*
operator|(
name|option
operator|+
literal|13
operator|)
operator|==
literal|'N'
operator|)
condition|)
name|LinkIncremental
operator|=
name|linkIncrementalNo
expr_stmt|;
else|else
name|LinkIncremental
operator|=
name|linkIncrementalYes
expr_stmt|;
break|break;
case|case
literal|0x07f1ab2
case|:
comment|// /KEYCONTAINER:name
name|KeyContainer
operator|=
name|option
operator|+
literal|14
expr_stmt|;
break|break;
case|case
literal|0xfadaf35
case|:
comment|// /KEYFILE:filename
name|KeyFile
operator|=
name|option
operator|+
literal|9
expr_stmt|;
break|break;
case|case
literal|0x26e4675
case|:
comment|// /LARGEADDRESSAWARE[:no]
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|18
operator|)
operator|==
literal|':'
operator|&&
operator|*
operator|(
name|option
operator|+
literal|19
operator|)
operator|==
literal|'n'
condition|)
name|LargeAddressAware
operator|=
name|addrAwareNoLarge
expr_stmt|;
else|else
name|LargeAddressAware
operator|=
name|addrAwareLarge
expr_stmt|;
break|break;
case|case
literal|0x2f96bc8
case|:
comment|// /libpath:dir
case|case
literal|0x0d745c8
case|:
comment|// /LIBPATH:dir
name|AdditionalLibraryDirectories
operator|+=
name|option
operator|+
literal|9
expr_stmt|;
break|break;
case|case
literal|0x0341877
case|:
comment|// /LTCG[:NOSTATUS|:STATUS]
name|config
operator|->
name|WholeProgramOptimization
operator|=
name|_True
expr_stmt|;
if|if
condition|(
name|config
operator|->
name|CompilerVersion
operator|>=
name|NET2005
condition|)
block|{
name|LinkTimeCodeGeneration
operator|=
name|optLTCGEnabled
expr_stmt|;
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|5
operator|)
operator|==
literal|':'
condition|)
block|{
specifier|const
name|char
modifier|*
name|str
init|=
name|option
operator|+
literal|6
decl_stmt|;
if|if
condition|(
operator|*
name|str
operator|==
literal|'S'
condition|)
name|ShowProgress
operator|=
name|linkProgressAll
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WIN
elseif|else
if|if
condition|(
name|strncasecmp
argument_list|(
name|str
argument_list|,
literal|"pginstrument"
argument_list|,
literal|12
argument_list|)
condition|)
name|LinkTimeCodeGeneration
operator|=
name|optLTCGInstrument
expr_stmt|;
elseif|else
if|if
condition|(
name|strncasecmp
argument_list|(
name|str
argument_list|,
literal|"pgoptimize"
argument_list|,
literal|10
argument_list|)
condition|)
name|LinkTimeCodeGeneration
operator|=
name|optLTCGOptimize
expr_stmt|;
elseif|else
if|if
condition|(
name|strncasecmp
argument_list|(
name|str
argument_list|,
literal|"pgupdate"
argument_list|,
literal|8
argument_list|)
condition|)
name|LinkTimeCodeGeneration
operator|=
name|optLTCGUpdate
expr_stmt|;
else|#
directive|else
elseif|else
if|if
condition|(
name|_stricmp
argument_list|(
name|str
argument_list|,
literal|"pginstrument"
argument_list|)
condition|)
name|LinkTimeCodeGeneration
operator|=
name|optLTCGInstrument
expr_stmt|;
elseif|else
if|if
condition|(
name|_stricmp
argument_list|(
name|str
argument_list|,
literal|"pgoptimize"
argument_list|)
condition|)
name|LinkTimeCodeGeneration
operator|=
name|optLTCGOptimize
expr_stmt|;
elseif|else
if|if
condition|(
name|_stricmp
argument_list|(
name|str
argument_list|,
literal|"pgupdate"
argument_list|)
condition|)
name|LinkTimeCodeGeneration
operator|=
name|optLTCGUpdate
expr_stmt|;
endif|#
directive|endif
block|}
block|}
else|else
block|{
name|AdditionalOptions
operator|.
name|append
argument_list|(
name|option
argument_list|)
expr_stmt|;
block|}
break|break;
case|case
literal|0x379ED25
case|:
case|case
literal|0x157cf65
case|:
comment|// /MACHINE:{AM33|ARM|CEE|IA64|X86|M32R|MIPS|MIPS16|MIPSFPU|MIPSFPU16|MIPSR41XX|PPC|SH3|SH4|SH5|THUMB|TRICORE}
switch|switch
condition|(
name|elfHash
argument_list|(
name|option
operator|+
literal|9
argument_list|)
condition|)
block|{
comment|// Very limited documentation on all options but X86,
case|case
literal|0x0005bb6
case|:
comment|// X86
name|TargetMachine
operator|=
name|machineX86
expr_stmt|;
break|break;
case|case
literal|0x0005b94
case|:
comment|// X64
name|TargetMachine
operator|=
name|machineX64
expr_stmt|;
break|break;
comment|// so we put the others in AdditionalOptions...
case|case
literal|0x0046063
case|:
comment|// AM33
case|case
literal|0x000466d
case|:
comment|// ARM
case|case
literal|0x0004795
case|:
comment|// CEE
case|case
literal|0x0004963
case|:
comment|// EBC
case|case
literal|0x004d494
case|:
comment|// IA64
case|case
literal|0x0050672
case|:
comment|// M32R
case|case
literal|0x0051e53
case|:
comment|// MIPS
case|case
literal|0x51e5646
case|:
comment|// MIPS16
case|case
literal|0x1e57b05
case|:
comment|// MIPSFPU
case|case
literal|0x57b09a6
case|:
comment|// MIPSFPU16
case|case
literal|0x5852738
case|:
comment|// MIPSR41XX
case|case
literal|0x0005543
case|:
comment|// PPC
case|case
literal|0x00057b3
case|:
comment|// SH3
case|case
literal|0x57b7980
case|:
comment|// SH3DSP
case|case
literal|0x00057b4
case|:
comment|// SH4
case|case
literal|0x00057b5
case|:
comment|// SH5
case|case
literal|0x058da12
case|:
comment|// THUMB
case|case
literal|0x96d8435
case|:
comment|// TRICORE
default|default:
name|AdditionalOptions
operator|+=
name|option
expr_stmt|;
break|break;
block|}
break|break;
case|case
literal|0x0034160
case|:
comment|// /MAP[:filename]
name|GenerateMapFile
operator|=
name|_True
expr_stmt|;
if|if
condition|(
name|option
index|[
literal|4
index|]
operator|==
literal|':'
condition|)
name|MapFileName
operator|=
name|option
operator|+
literal|5
expr_stmt|;
break|break;
case|case
literal|0x164e1ef
case|:
comment|// /MAPINFO:{EXPORTS|LINES}
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|9
operator|)
operator|==
literal|'E'
condition|)
name|MapExports
operator|=
name|_True
expr_stmt|;
elseif|else
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|9
operator|)
operator|==
literal|'L'
condition|)
name|MapLines
operator|=
name|_True
expr_stmt|;
break|break;
case|case
literal|0x341a6b5
case|:
comment|// /MERGE:from=to
name|MergeSections
operator|=
name|option
operator|+
literal|7
expr_stmt|;
break|break;
case|case
literal|0x0341d8c
case|:
comment|// /MIDL:@file
name|MidlCommandFile
operator|=
name|option
operator|+
literal|7
expr_stmt|;
break|break;
case|case
literal|0x84e2679
case|:
comment|// /NOASSEMBLY
name|TurnOffAssemblyGeneration
operator|=
name|_True
expr_stmt|;
break|break;
case|case
literal|0x2b21942
case|:
comment|// /NODEFAULTLIB[:library]
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|13
operator|)
operator|==
literal|'\0'
condition|)
name|IgnoreAllDefaultLibraries
operator|=
name|_True
expr_stmt|;
else|else
name|IgnoreDefaultLibraryNames
operator|+=
name|option
operator|+
literal|14
expr_stmt|;
break|break;
case|case
literal|0x33a3a39
case|:
comment|// /NOENTRY
name|ResourceOnlyDLL
operator|=
name|_True
expr_stmt|;
break|break;
case|case
literal|0x434138f
case|:
comment|// /NOLOGO
name|SuppressStartupBanner
operator|=
name|_True
expr_stmt|;
break|break;
case|case
literal|0xc841054
case|:
comment|// /NXCOMPAT[:NO]
if|if
condition|(
operator|(
operator|*
operator|(
name|option
operator|+
literal|9
operator|)
operator|==
literal|':'
operator|&&
operator|(
operator|*
operator|(
name|option
operator|+
literal|10
operator|)
operator|==
literal|'N'
operator|||
operator|*
operator|(
name|option
operator|+
literal|10
operator|)
operator|==
literal|'n'
operator|)
operator|)
condition|)
name|DataExecutionPrevention
operator|=
name|_False
expr_stmt|;
else|else
name|DataExecutionPrevention
operator|=
name|_True
expr_stmt|;
break|break;
case|case
literal|0x0034454
case|:
comment|// /OPT:{REF | NOREF | ICF[=iterations] | NOICF | WIN98 | NOWIN98}
block|{
name|char
name|third
init|=
operator|*
operator|(
name|option
operator|+
literal|7
operator|)
decl_stmt|;
switch|switch
condition|(
name|third
condition|)
block|{
case|case
literal|'F'
case|:
comment|// REF
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|5
operator|)
operator|==
literal|'R'
condition|)
block|{
name|OptimizeReferences
operator|=
name|optReferences
expr_stmt|;
block|}
else|else
block|{
comment|// ICF[=iterations]
name|EnableCOMDATFolding
operator|=
name|optFolding
expr_stmt|;
comment|// [=iterations] case is not documented
block|}
break|break;
case|case
literal|'R'
case|:
comment|// NOREF
name|OptimizeReferences
operator|=
name|optNoReferences
expr_stmt|;
break|break;
case|case
literal|'I'
case|:
comment|// NOICF
name|EnableCOMDATFolding
operator|=
name|optNoFolding
expr_stmt|;
break|break;
case|case
literal|'N'
case|:
comment|// WIN98
name|OptimizeForWindows98
operator|=
name|optWin98Yes
expr_stmt|;
break|break;
case|case
literal|'W'
case|:
comment|// NOWIN98
name|OptimizeForWindows98
operator|=
name|optWin98No
expr_stmt|;
break|break;
default|default:
name|found
operator|=
literal|false
expr_stmt|;
block|}
block|}
break|break;
case|case
literal|0x34468a2
case|:
comment|// /ORDER:@filename
name|FunctionOrder
operator|=
name|option
operator|+
literal|8
expr_stmt|;
break|break;
case|case
literal|0x00344a4
case|:
comment|// /OUT:filename
name|OutputFile
operator|=
name|option
operator|+
literal|5
expr_stmt|;
break|break;
case|case
literal|0x0034482
case|:
comment|// /PDB:filename
name|ProgramDatabaseFile
operator|=
name|option
operator|+
literal|5
expr_stmt|;
break|break;
case|case
literal|0xa2ad314
case|:
comment|// /PDBSTRIPPED:pdb_file_name
name|StripPrivateSymbols
operator|=
name|option
operator|+
literal|13
expr_stmt|;
break|break;
case|case
literal|0x6a09535
case|:
comment|// /RELEASE
name|SetChecksum
operator|=
name|_True
expr_stmt|;
break|break;
case|case
literal|0x348857b
case|:
comment|// /STACK:reserve[,commit]
block|{
name|QStringList
name|both
init|=
name|QString
argument_list|(
name|option
operator|+
literal|7
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
name|StackReserveSize
operator|=
name|both
index|[
literal|0
index|]
operator|.
name|toLongLong
argument_list|()
expr_stmt|;
if|if
condition|(
name|both
operator|.
name|count
argument_list|()
operator|==
literal|2
condition|)
name|StackCommitSize
operator|=
name|both
index|[
literal|1
index|]
operator|.
name|toLongLong
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
literal|0x75AA4D8
case|:
comment|// /SAFESEH:{NO}
if|if
condition|(
name|config
operator|->
name|CompilerVersion
operator|>=
name|NET2010
condition|)
name|ImageHasSafeExceptionHandlers
operator|=
operator|(
name|option
index|[
literal|8
index|]
operator|==
literal|':'
operator|)
condition|?
name|_False
else|:
name|_True
expr_stmt|;
else|else
name|AdditionalOptions
operator|+=
name|option
expr_stmt|;
break|break;
case|case
literal|0x9B3C00D
case|:
case|case
literal|0x78dc00d
case|:
comment|// /SUBSYSTEM:{CONSOLE|EFI_APPLICATION|EFI_BOOT_SERVICE_DRIVER|EFI_ROM|EFI_RUNTIME_DRIVER|NATIVE|POSIX|WINDOWS|WINDOWSCE}[,major[.minor]]
block|{
comment|// Split up in subsystem, and version number
name|QStringList
name|both
init|=
name|QString
argument_list|(
name|option
operator|+
literal|11
argument_list|)
operator|.
name|split
argument_list|(
literal|","
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|elfHash
argument_list|(
name|both
index|[
literal|0
index|]
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
condition|)
block|{
case|case
literal|0x8438445
case|:
comment|// CONSOLE
name|SubSystem
operator|=
name|subSystemConsole
expr_stmt|;
break|break;
case|case
literal|0xbe29493
case|:
comment|// WINDOWS
name|SubSystem
operator|=
name|subSystemWindows
expr_stmt|;
break|break;
comment|// The following are undocumented, so add them to AdditionalOptions
case|case
literal|0x240949e
case|:
comment|// EFI_APPLICATION
case|case
literal|0xe617652
case|:
comment|// EFI_BOOT_SERVICE_DRIVER
case|case
literal|0x9af477d
case|:
comment|// EFI_ROM
case|case
literal|0xd34df42
case|:
comment|// EFI_RUNTIME_DRIVER
case|case
literal|0x5268ea5
case|:
comment|// NATIVE
case|case
literal|0x05547e8
case|:
comment|// POSIX
case|case
literal|0x2949c95
case|:
comment|// WINDOWSCE
case|case
literal|0x4B69795
case|:
comment|// windowsce
name|AdditionalOptions
operator|+=
name|option
expr_stmt|;
break|break;
default|default:
name|found
operator|=
literal|false
expr_stmt|;
block|}
block|}
break|break;
case|case
literal|0x8b654de
case|:
comment|// /SWAPRUN:{NET | CD}
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|9
operator|)
operator|==
literal|'N'
condition|)
name|SwapRunFromNet
operator|=
name|_True
expr_stmt|;
elseif|else
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|9
operator|)
operator|==
literal|'C'
condition|)
name|SwapRunFromCD
operator|=
name|_True
expr_stmt|;
else|else
name|found
operator|=
literal|false
expr_stmt|;
break|break;
case|case
literal|0x34906d4
case|:
comment|// /TLBID:id
name|TypeLibraryResourceID
operator|=
name|QString
argument_list|(
name|option
operator|+
literal|7
argument_list|)
operator|.
name|toLongLong
argument_list|()
expr_stmt|;
break|break;
case|case
literal|0x4907494
case|:
comment|// /TLBOUT:[path\]filename
name|TypeLibraryFile
operator|=
name|option
operator|+
literal|8
expr_stmt|;
break|break;
case|case
literal|0x976b525
case|:
comment|// /TSAWARE[:NO]
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|8
operator|)
operator|==
literal|':'
condition|)
name|TerminalServerAware
operator|=
name|termSvrAwareNo
expr_stmt|;
else|else
name|TerminalServerAware
operator|=
name|termSvrAwareYes
expr_stmt|;
break|break;
case|case
literal|0xaa67735
case|:
comment|// /VERBOSE[:lib]
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|9
operator|)
operator|==
literal|':'
condition|)
block|{
name|ShowProgress
operator|=
name|linkProgressLibs
expr_stmt|;
name|AdditionalOptions
operator|+=
name|option
expr_stmt|;
block|}
else|else
block|{
name|ShowProgress
operator|=
name|linkProgressAll
expr_stmt|;
block|}
break|break;
case|case
literal|0xaa77f7e
case|:
comment|// /VERSION:major[.minor]
name|Version
operator|=
name|option
operator|+
literal|9
expr_stmt|;
break|break;
case|case
literal|0x0034c50
case|:
comment|// /WS[:NO]
if|if
condition|(
name|config
operator|->
name|CompilerVersion
operator|>=
name|NET2010
condition|)
block|{
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|3
operator|)
operator|==
literal|':'
condition|)
name|TreatWarningsAsErrors
operator|=
name|_False
expr_stmt|;
else|else
name|TreatWarningsAsErrors
operator|=
name|_True
expr_stmt|;
block|}
else|else
block|{
name|AdditionalOptions
operator|+=
name|option
expr_stmt|;
block|}
break|break;
default|default:
name|AdditionalOptions
operator|+=
name|option
expr_stmt|;
break|break;
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|warn_msg
argument_list|(
name|WarnLogic
argument_list|,
literal|"Could not parse Linker options: %s, added as AdditionalOption"
argument_list|,
name|option
argument_list|)
expr_stmt|;
name|AdditionalOptions
operator|+=
name|option
expr_stmt|;
block|}
return|return
name|found
return|;
block|}
end_function
begin_comment
comment|// VCManifestTool ---------------------------------------------------
end_comment
begin_constructor
DECL|function|VCManifestTool
name|VCManifestTool
operator|::
name|VCManifestTool
parameter_list|()
member_init_list|:
name|EmbedManifest
argument_list|(
name|unset
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~VCManifestTool
name|VCManifestTool
operator|::
name|~
name|VCManifestTool
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|parseOption
name|bool
name|VCManifestTool
operator|::
name|parseOption
parameter_list|(
specifier|const
name|char
modifier|*
name|option
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|option
argument_list|)
expr_stmt|;
comment|// ### implement if we introduce QMAKE_MT_FLAGS
return|return
literal|false
return|;
block|}
end_function
begin_comment
comment|// VCMIDLTool -------------------------------------------------------
end_comment
begin_constructor
DECL|function|VCMIDLTool
name|VCMIDLTool
operator|::
name|VCMIDLTool
parameter_list|()
member_init_list|:
name|DefaultCharType
argument_list|(
name|midlCharUnsigned
argument_list|)
member_init_list|,
name|EnableErrorChecks
argument_list|(
name|midlDisableAll
argument_list|)
member_init_list|,
name|ErrorCheckAllocations
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|ErrorCheckBounds
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|ErrorCheckEnumRange
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|ErrorCheckRefPointers
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|ErrorCheckStubData
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|GenerateStublessProxies
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|GenerateTypeLibrary
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|IgnoreStandardIncludePath
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|MkTypLibCompatible
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|StructMemberAlignment
argument_list|(
name|midlAlignNotSet
argument_list|)
member_init_list|,
name|SuppressStartupBanner
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|TargetEnvironment
argument_list|(
name|midlTargetNotSet
argument_list|)
member_init_list|,
name|ValidateParameters
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|WarnAsError
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|WarningLevel
argument_list|(
name|midlWarningLevel_0
argument_list|)
member_init_list|,
name|ApplicationConfigurationMode
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|ValidateAllParameters
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|SuppressCompilerWarnings
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|LocaleID
argument_list|(
operator|-
literal|1
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|parseOption
name|bool
name|VCMIDLTool
operator|::
name|parseOption
parameter_list|(
specifier|const
name|char
modifier|*
name|option
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|USE_DISPLAY_HASH
name|displayHash
argument_list|(
literal|"/D name[=def]"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/I directory-list"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/Oi"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/Oic"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/Oicf"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/Oif"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/Os"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/U name"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/WX"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/W{0|1|2|3|4}"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/Zp {N}"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/Zs"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/acf filename"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/align {N}"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/app_config"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/c_ext"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/char ascii7"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/char signed"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/char unsigned"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/client none"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/client stub"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/confirm"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/cpp_cmd cmd_line"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/cpp_opt options"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/cstub filename"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/dlldata filename"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/env win32"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/env win64"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/error all"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/error allocation"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/error bounds_check"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/error enum"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/error none"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/error ref"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/error stub_data"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/h filename"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/header filename"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/iid filename"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/lcid"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/mktyplib203"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/ms_ext"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/ms_union"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/msc_ver<nnnn>"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/newtlb"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/no_cpp"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/no_def_idir"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/no_default_epv"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/no_format_opt"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/no_warn"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/nocpp"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/nologo"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/notlb"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/o filename"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/oldnames"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/oldtlb"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/osf"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/out directory"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/pack {N}"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/prefix all"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/prefix client"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/prefix server"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/prefix switch"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/protocol all"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/protocol dce"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/protocol ndr64"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/proxy filename"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/robust"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/rpcss"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/savePP"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/server none"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/server stub"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/sstub filename"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/syntax_check"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/target {system}"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/tlb filename"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/use_epv"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/win32"
argument_list|)
expr_stmt|;
name|displayHash
argument_list|(
literal|"/win64"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|bool
name|found
init|=
literal|true
decl_stmt|;
name|int
name|offset
init|=
literal|0
decl_stmt|;
specifier|const
name|uint
name|optionHash
init|=
name|elfHash
argument_list|(
name|option
argument_list|)
decl_stmt|;
if|if
condition|(
name|config
operator|->
name|CompilerVersion
operator|<
name|NET2010
condition|)
block|{
switch|switch
condition|(
name|optionHash
condition|)
block|{
case|case
literal|0x5b1cb97
case|:
comment|// /app_config
case|case
literal|0x5a2fc64
case|:
comment|// /client {none|stub}
case|case
literal|0x35aabb2
case|:
comment|// /cstub filename
case|case
literal|0x64ceb12
case|:
comment|// /newtlb
case|case
literal|0x556dbee
case|:
comment|// /no_warn
case|case
literal|0x662bb12
case|:
comment|// /oldtlb
case|case
literal|0x69c9cf2
case|:
comment|// /server {none|stub}
case|case
literal|0x36aabb2
case|:
comment|// /sstub filename
name|AdditionalOptions
operator|+=
name|option
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
switch|switch
condition|(
name|optionHash
condition|)
block|{
case|case
literal|0x0000334
case|:
comment|// /D name[=def]
name|PreprocessorDefinitions
operator|+=
name|option
operator|+
literal|3
expr_stmt|;
break|break;
case|case
literal|0x0000339
case|:
comment|// /I directory-list
name|AdditionalIncludeDirectories
operator|+=
name|option
operator|+
literal|3
expr_stmt|;
break|break;
case|case
literal|0x0345f96
case|:
comment|// /Oicf
case|case
literal|0x00345f6
case|:
comment|// /Oif
name|GenerateStublessProxies
operator|=
name|_True
expr_stmt|;
break|break;
case|case
literal|0x0000345
case|:
comment|// /U name
name|UndefinePreprocessorDefinitions
operator|+=
name|option
operator|+
literal|3
expr_stmt|;
break|break;
case|case
literal|0x00034c8
case|:
comment|// /WX
name|WarnAsError
operator|=
name|_True
expr_stmt|;
break|break;
case|case
literal|0x3582fde
case|:
comment|// /align {N}
name|offset
operator|=
literal|3
expr_stmt|;
comment|// Fallthrough
case|case
literal|0x0003510
case|:
comment|// /Zp {N}
switch|switch
condition|(
operator|*
operator|(
name|option
operator|+
name|offset
operator|+
literal|4
operator|)
condition|)
block|{
case|case
literal|'1'
case|:
name|StructMemberAlignment
operator|=
operator|(
operator|*
operator|(
name|option
operator|+
name|offset
operator|+
literal|5
operator|)
operator|==
literal|'\0'
operator|)
condition|?
name|midlAlignSingleByte
else|:
name|midlAlignSixteenBytes
expr_stmt|;
break|break;
case|case
literal|'2'
case|:
name|StructMemberAlignment
operator|=
name|midlAlignTwoBytes
expr_stmt|;
break|break;
case|case
literal|'4'
case|:
name|StructMemberAlignment
operator|=
name|midlAlignFourBytes
expr_stmt|;
break|break;
case|case
literal|'8'
case|:
name|StructMemberAlignment
operator|=
name|midlAlignEightBytes
expr_stmt|;
break|break;
default|default:
name|found
operator|=
literal|false
expr_stmt|;
block|}
break|break;
case|case
literal|0x5b1cb97
case|:
comment|// /app_config
name|ApplicationConfigurationMode
operator|=
name|_True
expr_stmt|;
break|break;
case|case
literal|0x0359e82
case|:
comment|// /char {ascii7|signed|unsigned}
switch|switch
condition|(
operator|*
operator|(
name|option
operator|+
literal|6
operator|)
condition|)
block|{
case|case
literal|'a'
case|:
name|DefaultCharType
operator|=
name|midlCharAscii7
expr_stmt|;
break|break;
case|case
literal|'s'
case|:
name|DefaultCharType
operator|=
name|midlCharSigned
expr_stmt|;
break|break;
case|case
literal|'u'
case|:
name|DefaultCharType
operator|=
name|midlCharUnsigned
expr_stmt|;
break|break;
default|default:
name|found
operator|=
literal|false
expr_stmt|;
block|}
break|break;
case|case
literal|0x5a2fc64
case|:
comment|// /client {none|stub}
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|8
operator|)
operator|==
literal|'s'
condition|)
name|GenerateClientFiles
operator|=
literal|"Stub"
expr_stmt|;
else|else
name|GenerateClientFiles
operator|=
literal|"None"
expr_stmt|;
break|break;
case|case
literal|0xa766524
case|:
comment|// /cpp_opt options
name|CPreprocessOptions
operator|+=
name|option
operator|+
literal|9
expr_stmt|;
break|break;
case|case
literal|0x35aabb2
case|:
comment|// /cstub filename
name|ClientStubFile
operator|=
name|option
operator|+
literal|7
expr_stmt|;
break|break;
case|case
literal|0xb32abf1
case|:
comment|// /dlldata filename
name|DLLDataFileName
operator|=
name|option
operator|+
literal|9
expr_stmt|;
break|break;
case|case
literal|0x0035c56
case|:
comment|// /env {win32|win64}
name|TargetEnvironment
operator|=
operator|(
operator|*
operator|(
name|option
operator|+
literal|8
operator|)
operator|==
literal|'6'
operator|)
condition|?
name|midlTargetWin64
else|:
name|midlTargetWin32
expr_stmt|;
break|break;
case|case
literal|0x35c9962
case|:
comment|// /error {all|allocation|bounds_check|enum|none|ref|stub_data}
name|EnableErrorChecks
operator|=
name|midlEnableCustom
expr_stmt|;
switch|switch
condition|(
operator|*
operator|(
name|option
operator|+
literal|7
operator|)
condition|)
block|{
case|case
literal|'a'
case|:
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|10
operator|)
operator|==
literal|'\0'
condition|)
name|EnableErrorChecks
operator|=
name|midlEnableAll
expr_stmt|;
else|else
name|ErrorCheckAllocations
operator|=
name|_True
expr_stmt|;
break|break;
case|case
literal|'b'
case|:
name|ErrorCheckBounds
operator|=
name|_True
expr_stmt|;
break|break;
case|case
literal|'e'
case|:
name|ErrorCheckEnumRange
operator|=
name|_True
expr_stmt|;
break|break;
case|case
literal|'n'
case|:
name|EnableErrorChecks
operator|=
name|midlDisableAll
expr_stmt|;
break|break;
case|case
literal|'r'
case|:
name|ErrorCheckRefPointers
operator|=
name|_True
expr_stmt|;
break|break;
case|case
literal|'s'
case|:
name|ErrorCheckStubData
operator|=
name|_True
expr_stmt|;
break|break;
default|default:
name|found
operator|=
literal|false
expr_stmt|;
block|}
break|break;
case|case
literal|0x5eb7af2
case|:
comment|// /header filename
name|offset
operator|=
literal|5
expr_stmt|;
case|case
literal|0x0000358
case|:
comment|// /h filename
name|HeaderFileName
operator|=
name|option
operator|+
name|offset
operator|+
literal|3
expr_stmt|;
break|break;
case|case
literal|0x0035ff4
case|:
comment|// /iid filename
name|InterfaceIdentifierFileName
operator|=
name|option
operator|+
literal|5
expr_stmt|;
break|break;
case|case
literal|0x64b7933
case|:
comment|// /mktyplib203
name|MkTypLibCompatible
operator|=
name|_True
expr_stmt|;
break|break;
case|case
literal|0x64ceb12
case|:
comment|// /newtlb
name|TypeLibFormat
operator|=
literal|"NewFormat"
expr_stmt|;
break|break;
case|case
literal|0x8e0b0a2
case|:
comment|// /no_def_idir
name|IgnoreStandardIncludePath
operator|=
name|_True
expr_stmt|;
break|break;
case|case
literal|0x65635ef
case|:
comment|// /nologo
name|SuppressStartupBanner
operator|=
name|_True
expr_stmt|;
break|break;
case|case
literal|0x695e9f4
case|:
comment|// /no_robust
name|ValidateAllParameters
operator|=
name|_False
expr_stmt|;
break|break;
case|case
literal|0x3656b22
case|:
comment|// /notlb
name|GenerateTypeLibrary
operator|=
name|_True
expr_stmt|;
break|break;
case|case
literal|0x556dbee
case|:
comment|// /no_warn
name|SuppressCompilerWarnings
operator|=
name|_True
expr_stmt|;
break|break;
case|case
literal|0x000035f
case|:
comment|// /o filename
name|RedirectOutputAndErrors
operator|=
name|option
operator|+
literal|3
expr_stmt|;
break|break;
case|case
literal|0x662bb12
case|:
comment|// /oldtlb
name|TypeLibFormat
operator|=
literal|"OldFormat"
expr_stmt|;
break|break;
case|case
literal|0x00366c4
case|:
comment|// /out directory
name|OutputDirectory
operator|=
name|option
operator|+
literal|5
expr_stmt|;
break|break;
case|case
literal|0x36796f9
case|:
comment|// /proxy filename
name|ProxyFileName
operator|=
name|option
operator|+
literal|7
expr_stmt|;
break|break;
case|case
literal|0x6959c94
case|:
comment|// /robust
name|ValidateParameters
operator|=
name|_True
expr_stmt|;
break|break;
case|case
literal|0x6a88df4
case|:
comment|// /target {system}
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|11
operator|)
operator|==
literal|'6'
condition|)
name|TargetEnvironment
operator|=
name|midlTargetWin64
expr_stmt|;
else|else
name|TargetEnvironment
operator|=
name|midlTargetWin32
expr_stmt|;
break|break;
case|case
literal|0x69c9cf2
case|:
comment|// /server {none|stub}
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|8
operator|)
operator|==
literal|'s'
condition|)
name|GenerateServerFiles
operator|=
literal|"Stub"
expr_stmt|;
else|else
name|GenerateServerFiles
operator|=
literal|"None"
expr_stmt|;
break|break;
case|case
literal|0x36aabb2
case|:
comment|// /sstub filename
name|ServerStubFile
operator|=
name|option
operator|+
literal|7
expr_stmt|;
break|break;
case|case
literal|0x0036b22
case|:
comment|// /tlb filename
name|TypeLibraryName
operator|=
name|option
operator|+
literal|5
expr_stmt|;
break|break;
case|case
literal|0x36e0162
case|:
comment|// /win32
name|TargetEnvironment
operator|=
name|midlTargetWin32
expr_stmt|;
break|break;
case|case
literal|0x36e0194
case|:
comment|// /win64
name|TargetEnvironment
operator|=
name|midlTargetWin64
expr_stmt|;
break|break;
case|case
literal|0x0003459
case|:
comment|// /Oi
case|case
literal|0x00345f3
case|:
comment|// /Oic
case|case
literal|0x0003463
case|:
comment|// /Os
case|case
literal|0x0003513
case|:
comment|// /Zs
case|case
literal|0x0035796
case|:
comment|// /acf filename
case|case
literal|0x3595cf4
case|:
comment|// /c_ext
case|case
literal|0xa64d3dd
case|:
comment|// /confirm
case|case
literal|0xa765b64
case|:
comment|// /cpp_cmd cmd_line
case|case
literal|0x03629f4
case|:
comment|// /lcid
case|case
literal|0x6495cc4
case|:
comment|// /ms_ext
case|case
literal|0x96c7a1e
case|:
comment|// /ms_union
case|case
literal|0x4996fa2
case|:
comment|// /msc_ver<nnnn>
case|case
literal|0x6555a40
case|:
comment|// /no_cpp
case|case
literal|0xf64d6a6
case|:
comment|// /no_default_epv
case|case
literal|0x6dd9384
case|:
comment|// /no_format_opt
case|case
literal|0x3655a70
case|:
comment|// /nocpp
case|case
literal|0x2b455a3
case|:
comment|// /oldnames
case|case
literal|0x0036696
case|:
comment|// /osf
case|case
literal|0x036679b
case|:
comment|// /pack {N}
case|case
literal|0x678bd38
case|:
comment|// /prefix {all|client|server|switch}
case|case
literal|0x96b702c
case|:
comment|// /protocol {all|dce|ndr64}
case|case
literal|0x3696aa3
case|:
comment|// /rpcss
case|case
literal|0x698ca60
case|:
comment|// /savePP
case|case
literal|0xce9b12b
case|:
comment|// /syntax_check
case|case
literal|0xc9b5f16
case|:
comment|// /use_epv
name|AdditionalOptions
operator|+=
name|option
expr_stmt|;
break|break;
default|default:
comment|// /W{0|1|2|3|4} case
if|if
condition|(
operator|*
operator|(
name|option
operator|+
literal|1
operator|)
operator|==
literal|'W'
condition|)
block|{
switch|switch
condition|(
operator|*
operator|(
name|option
operator|+
literal|2
operator|)
condition|)
block|{
case|case
literal|'0'
case|:
name|WarningLevel
operator|=
name|midlWarningLevel_0
expr_stmt|;
break|break;
case|case
literal|'1'
case|:
name|WarningLevel
operator|=
name|midlWarningLevel_1
expr_stmt|;
break|break;
case|case
literal|'2'
case|:
name|WarningLevel
operator|=
name|midlWarningLevel_2
expr_stmt|;
break|break;
case|case
literal|'3'
case|:
name|WarningLevel
operator|=
name|midlWarningLevel_3
expr_stmt|;
break|break;
case|case
literal|'4'
case|:
name|WarningLevel
operator|=
name|midlWarningLevel_4
expr_stmt|;
break|break;
default|default:
name|found
operator|=
literal|false
expr_stmt|;
block|}
block|}
break|break;
block|}
if|if
condition|(
operator|!
name|found
condition|)
name|warn_msg
argument_list|(
name|WarnLogic
argument_list|,
literal|"Could not parse MIDL option: %s"
argument_list|,
name|option
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_comment
comment|// VCLibrarianTool --------------------------------------------------
end_comment
begin_constructor
DECL|function|VCLibrarianTool
name|VCLibrarianTool
operator|::
name|VCLibrarianTool
parameter_list|()
member_init_list|:
name|IgnoreAllDefaultLibraries
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|SuppressStartupBanner
argument_list|(
name|_True
argument_list|)
block|{ }
end_constructor
begin_comment
comment|// VCCustomBuildTool ------------------------------------------------
end_comment
begin_constructor
DECL|function|VCCustomBuildTool
name|VCCustomBuildTool
operator|::
name|VCCustomBuildTool
parameter_list|()
block|{
name|ToolName
operator|=
literal|"VCCustomBuildTool"
expr_stmt|;
block|}
end_constructor
begin_comment
comment|// VCResourceCompilerTool -------------------------------------------
end_comment
begin_constructor
DECL|function|VCResourceCompilerTool
name|VCResourceCompilerTool
operator|::
name|VCResourceCompilerTool
parameter_list|()
member_init_list|:
name|Culture
argument_list|(
name|rcUseDefault
argument_list|)
member_init_list|,
name|IgnoreStandardIncludePath
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|ShowProgress
argument_list|(
name|linkProgressNotSet
argument_list|)
member_init_list|,
name|SuppressStartupBanner
argument_list|(
name|unset
argument_list|)
block|{
name|PreprocessorDefinitions
operator|=
name|QStringList
argument_list|(
literal|"NDEBUG"
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_comment
comment|// VCDeploymentTool --------------------------------------------
end_comment
begin_constructor
DECL|function|VCDeploymentTool
name|VCDeploymentTool
operator|::
name|VCDeploymentTool
parameter_list|()
member_init_list|:
name|RegisterOutput
argument_list|(
name|registerNo
argument_list|)
block|{
name|DeploymentTag
operator|=
literal|"DeploymentTool"
expr_stmt|;
name|RemoteDirectory
operator|=
literal|""
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|VCEventTool
name|VCEventTool
operator|::
name|VCEventTool
parameter_list|(
specifier|const
name|QString
modifier|&
name|eventName
parameter_list|)
member_init_list|:
name|ExcludedFromBuild
argument_list|(
name|unset
argument_list|)
block|{
name|EventName
operator|=
name|eventName
expr_stmt|;
name|ToolName
operator|=
literal|"VC"
expr_stmt|;
name|ToolName
operator|+=
name|eventName
expr_stmt|;
name|ToolName
operator|+=
literal|"Tool"
expr_stmt|;
block|}
end_constructor
begin_comment
comment|// VCPostBuildEventTool ---------------------------------------------
end_comment
begin_constructor
DECL|function|VCPostBuildEventTool
name|VCPostBuildEventTool
operator|::
name|VCPostBuildEventTool
parameter_list|()
member_init_list|:
name|VCEventTool
argument_list|(
literal|"PostBuildEvent"
argument_list|)
block|{ }
end_constructor
begin_comment
comment|// VCPreBuildEventTool ----------------------------------------------
end_comment
begin_constructor
DECL|function|VCPreBuildEventTool
name|VCPreBuildEventTool
operator|::
name|VCPreBuildEventTool
parameter_list|()
member_init_list|:
name|VCEventTool
argument_list|(
literal|"PreBuildEvent"
argument_list|)
block|{ }
end_constructor
begin_comment
comment|// VCPreLinkEventTool -----------------------------------------------
end_comment
begin_constructor
DECL|function|VCPreLinkEventTool
name|VCPreLinkEventTool
operator|::
name|VCPreLinkEventTool
parameter_list|()
member_init_list|:
name|VCEventTool
argument_list|(
literal|"PreLinkEvent"
argument_list|)
block|{ }
end_constructor
begin_comment
comment|// VCConfiguration --------------------------------------------------
end_comment
begin_constructor
DECL|function|VCConfiguration
name|VCConfiguration
operator|::
name|VCConfiguration
parameter_list|()
member_init_list|:
name|WinRT
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|WinPhone
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|ATLMinimizesCRunTimeLibraryUsage
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|BuildBrowserInformation
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|CharacterSet
argument_list|(
name|charSetNotSet
argument_list|)
member_init_list|,
name|ConfigurationType
argument_list|(
name|typeApplication
argument_list|)
member_init_list|,
name|RegisterOutput
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|UseOfATL
argument_list|(
name|useATLNotSet
argument_list|)
member_init_list|,
name|UseOfMfc
argument_list|(
name|useMfcStdWin
argument_list|)
member_init_list|,
name|WholeProgramOptimization
argument_list|(
name|unset
argument_list|)
block|{
name|compiler
operator|.
name|config
operator|=
name|this
expr_stmt|;
name|linker
operator|.
name|config
operator|=
name|this
expr_stmt|;
name|idl
operator|.
name|config
operator|=
name|this
expr_stmt|;
name|custom
operator|.
name|config
operator|=
name|this
expr_stmt|;
block|}
end_constructor
begin_comment
comment|// VCFilter ---------------------------------------------------------
end_comment
begin_constructor
DECL|function|VCFilter
name|VCFilter
operator|::
name|VCFilter
parameter_list|()
member_init_list|:
name|ParseFiles
argument_list|(
name|unset
argument_list|)
member_init_list|,
name|Config
argument_list|(
literal|0
argument_list|)
block|{
name|useCustomBuildTool
operator|=
literal|false
expr_stmt|;
name|useCompilerTool
operator|=
literal|false
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|addFile
name|void
name|VCFilter
operator|::
name|addFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|filename
parameter_list|)
block|{
name|Files
operator|+=
name|VCFilterFile
argument_list|(
name|filename
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addFile
name|void
name|VCFilter
operator|::
name|addFile
parameter_list|(
specifier|const
name|VCFilterFile
modifier|&
name|fileInfo
parameter_list|)
block|{
name|Files
operator|+=
name|VCFilterFile
argument_list|(
name|fileInfo
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addFiles
name|void
name|VCFilter
operator|::
name|addFiles
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|fileList
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fileList
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|addFile
argument_list|(
name|fileList
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addFiles
name|void
name|VCFilter
operator|::
name|addFiles
parameter_list|(
specifier|const
name|ProStringList
modifier|&
name|fileList
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fileList
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|addFile
argument_list|(
name|fileList
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toQString
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|modifyPCHstage
name|void
name|VCFilter
operator|::
name|modifyPCHstage
parameter_list|(
name|QString
name|str
parameter_list|)
block|{
name|bool
name|autogenSourceFile
init|=
name|Project
operator|->
name|autogenPrecompCPP
decl_stmt|;
name|bool
name|pchThroughSourceFile
init|=
operator|!
name|Project
operator|->
name|precompCPP
operator|.
name|isEmpty
argument_list|()
decl_stmt|;
name|bool
name|isCFile
init|=
literal|false
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|it
init|=
name|Option
operator|::
name|c_ext
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|Option
operator|::
name|c_ext
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
name|str
operator|.
name|endsWith
argument_list|(
operator|*
name|it
argument_list|)
condition|)
block|{
name|isCFile
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|bool
name|isHFile
init|=
name|Option
operator|::
name|hasFileExtension
argument_list|(
name|str
argument_list|,
name|Option
operator|::
name|h_ext
argument_list|)
operator|&&
operator|(
name|str
operator|==
name|Project
operator|->
name|precompH
operator|)
decl_stmt|;
name|bool
name|isCPPFile
init|=
name|pchThroughSourceFile
operator|&&
operator|(
name|str
operator|==
name|Project
operator|->
name|precompCPP
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|isCFile
operator|&&
operator|!
name|isHFile
operator|&&
operator|!
name|isCPPFile
condition|)
return|return;
if|if
condition|(
name|isHFile
operator|&&
name|pchThroughSourceFile
condition|)
block|{
if|if
condition|(
name|autogenSourceFile
condition|)
block|{
name|useCustomBuildTool
operator|=
literal|true
expr_stmt|;
name|QString
name|toFile
argument_list|(
name|Project
operator|->
name|precompCPP
argument_list|)
decl_stmt|;
name|CustomBuildTool
operator|.
name|Description
operator|=
literal|"Generating precompiled header source file '"
operator|+
name|toFile
operator|+
literal|"' ..."
expr_stmt|;
name|CustomBuildTool
operator|.
name|Outputs
operator|+=
name|toFile
expr_stmt|;
name|QStringList
name|lines
decl_stmt|;
name|CustomBuildTool
operator|.
name|CommandLine
operator|+=
literal|"echo /*-------------------------------------------------------------------->"
operator|+
name|toFile
expr_stmt|;
name|lines
operator|<<
literal|"* Precompiled header source file used by Visual Studio.NET to generate"
expr_stmt|;
name|lines
operator|<<
literal|"* the .pch file."
expr_stmt|;
name|lines
operator|<<
literal|"*"
expr_stmt|;
name|lines
operator|<<
literal|"* Due to issues with the dependencies checker within the IDE, it"
expr_stmt|;
name|lines
operator|<<
literal|"* sometimes fails to recompile the PCH file, if we force the IDE to"
expr_stmt|;
name|lines
operator|<<
literal|"* create the PCH file directly from the header file."
expr_stmt|;
name|lines
operator|<<
literal|"*"
expr_stmt|;
name|lines
operator|<<
literal|"* This file is auto-generated by qmake since no PRECOMPILED_SOURCE was"
expr_stmt|;
name|lines
operator|<<
literal|"* specified, and is used as the common stdafx.cpp. The file is only"
expr_stmt|;
name|lines
operator|<<
name|QLatin1String
argument_list|(
literal|"* generated when creating "
argument_list|)
operator|+
operator|(
name|Config
operator|->
name|CompilerVersion
operator|<
name|NET2010
condition|?
literal|".vcproj"
else|:
literal|".vcxproj"
operator|)
operator|+
literal|" project files, and is not used for"
expr_stmt|;
name|lines
operator|<<
literal|"* command line compilations by nmake."
expr_stmt|;
name|lines
operator|<<
literal|"*"
expr_stmt|;
name|lines
operator|<<
literal|"* WARNING: All changes made in this file will be lost."
expr_stmt|;
name|lines
operator|<<
literal|"--------------------------------------------------------------------*/"
expr_stmt|;
name|lines
operator|<<
literal|"#include \""
operator|+
name|Project
operator|->
name|precompHFilename
operator|+
literal|"\""
expr_stmt|;
foreach|foreach
control|(
name|QString
name|line
decl|,
name|lines
control|)
name|CustomBuildTool
operator|.
name|CommandLine
operator|+=
literal|"echo "
operator|+
name|line
operator|+
literal|">>"
operator|+
name|toFile
expr_stmt|;
block|}
return|return;
block|}
name|useCompilerTool
operator|=
literal|true
expr_stmt|;
comment|// Setup PCH options
name|CompilerTool
operator|.
name|UsePrecompiledHeader
operator|=
operator|(
name|isCFile
condition|?
name|pchNone
else|:
name|pchCreateUsingSpecific
operator|)
expr_stmt|;
name|CompilerTool
operator|.
name|PrecompiledHeaderThrough
operator|=
operator|(
name|isCPPFile
condition|?
name|Project
operator|->
name|precompHFilename
else|:
name|QString
argument_list|(
literal|"$(NOINHERIT)"
argument_list|)
operator|)
expr_stmt|;
name|CompilerTool
operator|.
name|ForcedIncludeFiles
operator|=
name|QStringList
argument_list|(
literal|"$(NOINHERIT)"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addExtraCompiler
name|bool
name|VCFilter
operator|::
name|addExtraCompiler
parameter_list|(
specifier|const
name|VCFilterFile
modifier|&
name|info
parameter_list|)
block|{
specifier|const
name|QStringList
modifier|&
name|extraCompilers
init|=
name|Project
operator|->
name|extraCompilerSources
operator|.
name|value
argument_list|(
name|info
operator|.
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|extraCompilers
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
name|QString
name|inFile
init|=
name|info
operator|.
name|file
decl_stmt|;
comment|// is the extracompiler rule on a file with a built in compiler?
specifier|const
name|QStringList
modifier|&
name|objectMappedFile
init|=
name|Project
operator|->
name|extraCompilerOutputs
index|[
name|inFile
index|]
decl_stmt|;
name|bool
name|hasBuiltIn
init|=
literal|false
decl_stmt|;
if|if
condition|(
operator|!
name|objectMappedFile
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|hasBuiltIn
operator|=
name|Project
operator|->
name|hasBuiltinCompiler
argument_list|(
name|objectMappedFile
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|//        qDebug("*** Extra compiler file has object mapped file '%s' => '%s'", qPrintable(inFile), qPrintable(objectMappedFile.join(' ')));
block|}
name|CustomBuildTool
operator|.
name|AdditionalDependencies
operator|.
name|clear
argument_list|()
expr_stmt|;
name|CustomBuildTool
operator|.
name|CommandLine
operator|.
name|clear
argument_list|()
expr_stmt|;
name|CustomBuildTool
operator|.
name|Description
operator|.
name|clear
argument_list|()
expr_stmt|;
name|CustomBuildTool
operator|.
name|Outputs
operator|.
name|clear
argument_list|()
expr_stmt|;
name|CustomBuildTool
operator|.
name|ToolPath
operator|.
name|clear
argument_list|()
expr_stmt|;
name|CustomBuildTool
operator|.
name|ToolName
operator|=
name|QLatin1String
argument_list|(
name|_VCCustomBuildTool
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|extraCompilers
operator|.
name|count
argument_list|()
condition|;
operator|++
name|x
control|)
block|{
specifier|const
name|QString
modifier|&
name|extraCompilerName
init|=
name|extraCompilers
operator|.
name|at
argument_list|(
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|Project
operator|->
name|verifyExtraCompiler
argument_list|(
name|extraCompilerName
argument_list|,
name|inFile
argument_list|)
operator|&&
operator|!
name|hasBuiltIn
condition|)
continue|continue;
comment|// All information about the extra compiler
name|QString
name|tmp_out
init|=
name|Project
operator|->
name|project
operator|->
name|first
argument_list|(
name|ProKey
argument_list|(
name|extraCompilerName
operator|+
literal|".output"
argument_list|)
argument_list|)
operator|.
name|toQString
argument_list|()
decl_stmt|;
name|QString
name|tmp_cmd
init|=
name|Project
operator|->
name|project
operator|->
name|values
argument_list|(
name|ProKey
argument_list|(
name|extraCompilerName
operator|+
literal|".commands"
argument_list|)
argument_list|)
operator|.
name|join
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
name|QString
name|tmp_cmd_name
init|=
name|Project
operator|->
name|project
operator|->
name|values
argument_list|(
name|ProKey
argument_list|(
name|extraCompilerName
operator|+
literal|".name"
argument_list|)
argument_list|)
operator|.
name|join
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
name|QStringList
name|tmp_dep
init|=
name|Project
operator|->
name|project
operator|->
name|values
argument_list|(
name|ProKey
argument_list|(
name|extraCompilerName
operator|+
literal|".depends"
argument_list|)
argument_list|)
operator|.
name|toQStringList
argument_list|()
decl_stmt|;
name|QString
name|tmp_dep_cmd
init|=
name|Project
operator|->
name|project
operator|->
name|values
argument_list|(
name|ProKey
argument_list|(
name|extraCompilerName
operator|+
literal|".depend_command"
argument_list|)
argument_list|)
operator|.
name|join
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
specifier|const
name|ProStringList
modifier|&
name|configs
init|=
name|Project
operator|->
name|project
operator|->
name|values
argument_list|(
name|ProKey
argument_list|(
name|extraCompilerName
operator|+
literal|".CONFIG"
argument_list|)
argument_list|)
decl_stmt|;
name|bool
name|combined
init|=
name|configs
operator|.
name|indexOf
argument_list|(
literal|"combine"
argument_list|)
operator|!=
operator|-
literal|1
decl_stmt|;
name|QString
name|cmd
decl_stmt|,
name|cmd_name
decl_stmt|,
name|out
decl_stmt|;
name|QStringList
name|deps
decl_stmt|,
name|inputs
decl_stmt|;
comment|// Variabel replacement of output name
name|out
operator|=
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|Project
operator|->
name|replaceExtraCompilerVariables
argument_list|(
name|tmp_out
argument_list|,
name|inFile
argument_list|,
name|QString
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// If file has built-in compiler, we've swapped the input and output of
comment|// the command, as we in Visual Studio cannot have a Custom Buildstep on
comment|// a file which uses a built-in compiler. We would in this case only get
comment|// the result from the extra compiler. If 'hasBuiltIn' is true, we know
comment|// that we're actually on the _output_file_ of the result, and we
comment|// therefore swap inFile and out below, since the extra-compiler still
comment|// must see it as the original way. If the result also has a built-in
comment|// compiler, too bad..
if|if
condition|(
name|hasBuiltIn
condition|)
block|{
name|out
operator|=
name|inFile
expr_stmt|;
name|inFile
operator|=
name|objectMappedFile
operator|.
name|at
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// Dependency for the output
if|if
condition|(
operator|!
name|tmp_dep
operator|.
name|isEmpty
argument_list|()
condition|)
name|deps
operator|=
name|tmp_dep
expr_stmt|;
if|if
condition|(
operator|!
name|tmp_dep_cmd
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// Execute dependency command, and add every line as a dep
name|char
name|buff
index|[
literal|256
index|]
decl_stmt|;
name|QString
name|dep_cmd
init|=
name|Project
operator|->
name|replaceExtraCompilerVariables
argument_list|(
name|tmp_dep_cmd
argument_list|,
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|inFile
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
argument_list|,
name|out
argument_list|)
decl_stmt|;
if|if
condition|(
name|Project
operator|->
name|canExecute
argument_list|(
name|dep_cmd
argument_list|)
condition|)
block|{
name|dep_cmd
operator|.
name|prepend
argument_list|(
name|QLatin1String
argument_list|(
literal|"cd "
argument_list|)
operator|+
name|Project
operator|->
name|escapeFilePath
argument_list|(
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|Option
operator|::
name|output_dir
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|"&& "
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|FILE
modifier|*
name|proc
init|=
name|QT_POPEN
argument_list|(
name|dep_cmd
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
literal|"r"
argument_list|)
condition|)
block|{
name|QString
name|indeps
decl_stmt|;
while|while
condition|(
operator|!
name|feof
argument_list|(
name|proc
argument_list|)
condition|)
block|{
name|int
name|read_in
init|=
operator|(
name|int
operator|)
name|fread
argument_list|(
name|buff
argument_list|,
literal|1
argument_list|,
literal|255
argument_list|,
name|proc
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|read_in
condition|)
break|break;
name|indeps
operator|+=
name|QByteArray
argument_list|(
name|buff
argument_list|,
name|read_in
argument_list|)
expr_stmt|;
block|}
name|QT_PCLOSE
argument_list|(
name|proc
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|indeps
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QStringList
name|extradeps
init|=
name|indeps
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|extradeps
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|dd
init|=
name|extradeps
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|simplified
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|dd
operator|.
name|isEmpty
argument_list|()
condition|)
name|deps
operator|+=
name|Project
operator|->
name|fileFixify
argument_list|(
name|dd
argument_list|,
name|QString
argument_list|()
argument_list|,
name|Option
operator|::
name|output_dir
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|deps
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|deps
index|[
name|i
index|]
operator|=
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|Project
operator|->
name|replaceExtraCompilerVariables
argument_list|(
name|deps
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|inFile
argument_list|,
name|out
argument_list|)
argument_list|,
literal|false
argument_list|)
operator|.
name|trimmed
argument_list|()
expr_stmt|;
comment|// Command for file
if|if
condition|(
name|combined
condition|)
block|{
comment|// Add dependencies for each file
specifier|const
name|ProStringList
modifier|&
name|tmp_in
init|=
name|Project
operator|->
name|project
operator|->
name|values
argument_list|(
name|ProKey
argument_list|(
name|extraCompilerName
operator|+
literal|".input"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|a
init|=
literal|0
init|;
name|a
operator|<
name|tmp_in
operator|.
name|count
argument_list|()
condition|;
operator|++
name|a
control|)
block|{
specifier|const
name|ProStringList
modifier|&
name|files
init|=
name|Project
operator|->
name|project
operator|->
name|values
argument_list|(
name|tmp_in
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|.
name|toKey
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|b
init|=
literal|0
init|;
name|b
operator|<
name|files
operator|.
name|count
argument_list|()
condition|;
operator|++
name|b
control|)
block|{
name|QString
name|file
init|=
name|files
operator|.
name|at
argument_list|(
name|b
argument_list|)
operator|.
name|toQString
argument_list|()
decl_stmt|;
name|deps
operator|+=
name|Project
operator|->
name|findDependencies
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|inputs
operator|+=
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|file
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|deps
operator|=
name|inputs
operator|+
name|deps
expr_stmt|;
comment|// input files themselves too..
comment|// Replace variables for command w/all input files
comment|// ### join gives path issues with directories containing spaces!
name|cmd
operator|=
name|Project
operator|->
name|replaceExtraCompilerVariables
argument_list|(
name|tmp_cmd
argument_list|,
name|inputs
operator|.
name|join
argument_list|(
literal|' '
argument_list|)
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|deps
operator|.
name|prepend
argument_list|(
name|inFile
argument_list|)
expr_stmt|;
comment|// input file itself too..
name|cmd
operator|=
name|Project
operator|->
name|replaceExtraCompilerVariables
argument_list|(
name|tmp_cmd
argument_list|,
name|inFile
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
comment|// Name for command
if|if
condition|(
operator|!
name|tmp_cmd_name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|cmd_name
operator|=
name|Project
operator|->
name|replaceExtraCompilerVariables
argument_list|(
name|tmp_cmd_name
argument_list|,
name|inFile
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|space
init|=
name|cmd
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
if|if
condition|(
name|space
operator|!=
operator|-
literal|1
condition|)
name|cmd_name
operator|=
name|cmd
operator|.
name|left
argument_list|(
name|space
argument_list|)
expr_stmt|;
else|else
name|cmd_name
operator|=
name|cmd
expr_stmt|;
if|if
condition|(
operator|(
name|cmd_name
index|[
literal|0
index|]
operator|==
literal|'\''
operator|||
name|cmd_name
index|[
literal|0
index|]
operator|==
literal|'"'
operator|)
operator|&&
name|cmd_name
index|[
literal|0
index|]
operator|==
name|cmd_name
index|[
name|cmd_name
operator|.
name|length
argument_list|()
operator|-
literal|1
index|]
condition|)
name|cmd_name
operator|=
name|cmd_name
operator|.
name|mid
argument_list|(
literal|1
argument_list|,
name|cmd_name
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
block|}
comment|// Fixify paths
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|deps
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|deps
index|[
name|i
index|]
operator|=
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|deps
index|[
name|i
index|]
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Output in info.additionalFile -----------
if|if
condition|(
operator|!
name|CustomBuildTool
operator|.
name|Description
operator|.
name|isEmpty
argument_list|()
condition|)
name|CustomBuildTool
operator|.
name|Description
operator|+=
literal|", "
expr_stmt|;
name|CustomBuildTool
operator|.
name|Description
operator|+=
name|cmd_name
expr_stmt|;
name|CustomBuildTool
operator|.
name|CommandLine
operator|+=
name|VCToolBase
operator|::
name|fixCommandLine
argument_list|(
name|cmd
operator|.
name|trimmed
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|space
init|=
name|cmd
operator|.
name|indexOf
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
name|QFileInfo
name|finf
argument_list|(
name|cmd
operator|.
name|left
argument_list|(
name|space
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|CustomBuildTool
operator|.
name|ToolPath
operator|.
name|isEmpty
argument_list|()
condition|)
name|CustomBuildTool
operator|.
name|ToolPath
operator|+=
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|finf
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
name|CustomBuildTool
operator|.
name|Outputs
operator|+=
name|out
expr_stmt|;
name|deps
operator|+=
name|CustomBuildTool
operator|.
name|AdditionalDependencies
expr_stmt|;
comment|// Make sure that all deps are only once
name|QStringList
name|uniqDeps
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|deps
operator|.
name|count
argument_list|()
condition|;
operator|++
name|c
control|)
block|{
name|QString
name|aDep
init|=
name|deps
operator|.
name|at
argument_list|(
name|c
argument_list|)
operator|.
name|trimmed
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|aDep
operator|.
name|isEmpty
argument_list|()
condition|)
name|uniqDeps
operator|<<
name|aDep
expr_stmt|;
block|}
name|uniqDeps
operator|.
name|removeDuplicates
argument_list|()
expr_stmt|;
name|CustomBuildTool
operator|.
name|AdditionalDependencies
operator|=
name|uniqDeps
expr_stmt|;
block|}
comment|// Ensure that none of the output files are also dependencies. Or else, the custom buildstep
comment|// will be rebuild every time, even if nothing has changed.
foreach|foreach
control|(
name|QString
name|output
decl|,
name|CustomBuildTool
operator|.
name|Outputs
control|)
block|{
name|CustomBuildTool
operator|.
name|AdditionalDependencies
operator|.
name|removeAll
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
name|useCustomBuildTool
operator|=
operator|!
name|CustomBuildTool
operator|.
name|CommandLine
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
return|return
name|useCustomBuildTool
return|;
block|}
end_function
begin_comment
comment|// VCProjectSingleConfig --------------------------------------------
end_comment
begin_function
DECL|function|filterForExtraCompiler
name|VCFilter
modifier|&
name|VCProjectSingleConfig
operator|::
name|filterForExtraCompiler
parameter_list|(
specifier|const
name|QString
modifier|&
name|compilerName
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ExtraCompilersFiles
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|ExtraCompilersFiles
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|Name
operator|==
name|compilerName
condition|)
return|return
name|ExtraCompilersFiles
index|[
name|i
index|]
return|;
specifier|static
name|VCFilter
name|nullFilter
decl_stmt|;
return|return
name|nullFilter
return|;
block|}
end_function
begin_comment
comment|// Tree file generation ---------------------------------------------
end_comment
begin_function
DECL|function|generateXML
name|void
name|TreeNode
operator|::
name|generateXML
parameter_list|(
name|XmlOutput
modifier|&
name|xml
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|,
name|VCProject
modifier|&
name|tool
parameter_list|,
specifier|const
name|QString
modifier|&
name|filter
parameter_list|)
block|{
if|if
condition|(
name|children
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// Filter
name|ChildrenMap
operator|::
name|ConstIterator
name|it
decl_stmt|,
name|end
init|=
name|children
operator|.
name|constEnd
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|xml
operator|<<
name|tag
argument_list|(
literal|"Filter"
argument_list|)
operator|<<
name|attr
argument_list|(
literal|"Name"
argument_list|,
name|tagName
argument_list|)
operator|<<
name|attr
argument_list|(
literal|"Filter"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
comment|// First round, do nested filters
for|for
control|(
name|it
operator|=
name|children
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|end
condition|;
operator|++
name|it
control|)
if|if
condition|(
operator|(
operator|*
name|it
operator|)
operator|->
name|children
operator|.
name|size
argument_list|()
condition|)
operator|(
operator|*
name|it
operator|)
operator|->
name|generateXML
argument_list|(
name|xml
argument_list|,
name|it
operator|.
name|key
argument_list|()
argument_list|,
name|tool
argument_list|,
name|filter
argument_list|)
expr_stmt|;
comment|// Second round, do leafs
for|for
control|(
name|it
operator|=
name|children
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|end
condition|;
operator|++
name|it
control|)
if|if
condition|(
operator|!
operator|(
operator|*
name|it
operator|)
operator|->
name|children
operator|.
name|size
argument_list|()
condition|)
operator|(
operator|*
name|it
operator|)
operator|->
name|generateXML
argument_list|(
name|xml
argument_list|,
name|it
operator|.
name|key
argument_list|()
argument_list|,
name|tool
argument_list|,
name|filter
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|)
name|xml
operator|<<
name|closetag
argument_list|(
literal|"Filter"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Leaf
name|VCProjectWriter
operator|::
name|outputFileConfigs
argument_list|(
name|tool
argument_list|,
name|xml
argument_list|,
name|info
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// Flat file generation ---------------------------------------------
end_comment
begin_function
DECL|function|generateXML
name|void
name|FlatNode
operator|::
name|generateXML
parameter_list|(
name|XmlOutput
modifier|&
name|xml
parameter_list|,
specifier|const
name|QString
modifier|&
comment|/*tagName*/
parameter_list|,
name|VCProject
modifier|&
name|tool
parameter_list|,
specifier|const
name|QString
modifier|&
name|filter
parameter_list|)
block|{
if|if
condition|(
name|children
operator|.
name|size
argument_list|()
condition|)
block|{
name|ChildrenMapFlat
operator|::
name|ConstIterator
name|it
init|=
name|children
operator|.
name|constBegin
argument_list|()
decl_stmt|;
name|ChildrenMapFlat
operator|::
name|ConstIterator
name|end
init|=
name|children
operator|.
name|constEnd
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|end
condition|;
operator|++
name|it
control|)
block|{
name|VCProjectWriter
operator|::
name|outputFileConfigs
argument_list|(
name|tool
argument_list|,
name|xml
argument_list|,
operator|(
operator|*
name|it
operator|)
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|VCProjectWriter
operator|::
name|write
parameter_list|(
name|XmlOutput
modifier|&
name|xml
parameter_list|,
name|VCProjectSingleConfig
modifier|&
name|tool
parameter_list|)
block|{
name|xml
operator|<<
name|decl
argument_list|(
literal|"1.0"
argument_list|,
literal|"Windows-1252"
argument_list|)
operator|<<
name|tag
argument_list|(
name|_VisualStudioProject
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_ProjectType
argument_list|,
literal|"Visual C++"
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_Version
argument_list|,
name|tool
operator|.
name|Version
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_Name
argument_list|,
name|tool
operator|.
name|Name
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_ProjectGUID
argument_list|,
name|tool
operator|.
name|ProjectGUID
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_Keyword
argument_list|,
name|tool
operator|.
name|Keyword
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_SccProjectName
argument_list|,
name|tool
operator|.
name|SccProjectName
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_SccLocalPath
argument_list|,
name|tool
operator|.
name|SccLocalPath
argument_list|)
operator|<<
name|tag
argument_list|(
name|_Platforms
argument_list|)
operator|<<
name|tag
argument_list|(
name|_Platform
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_Name
argument_list|,
name|tool
operator|.
name|PlatformName
argument_list|)
operator|<<
name|closetag
argument_list|(
name|_Platforms
argument_list|)
operator|<<
name|tag
argument_list|(
name|_Configurations
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|xml
argument_list|,
name|tool
operator|.
name|Configuration
argument_list|)
expr_stmt|;
name|xml
operator|<<
name|closetag
argument_list|(
name|_Configurations
argument_list|)
operator|<<
name|tag
argument_list|(
name|q_Files
argument_list|)
expr_stmt|;
comment|// Add this configuration into a multi-config project, since that's where we have the flat/tree
comment|// XML output functionality
name|VCProject
name|tempProj
decl_stmt|;
name|tempProj
operator|.
name|SingleProjects
operator|+=
name|tool
expr_stmt|;
name|outputFilter
argument_list|(
name|tempProj
argument_list|,
name|xml
argument_list|,
literal|"Sources"
argument_list|)
expr_stmt|;
name|outputFilter
argument_list|(
name|tempProj
argument_list|,
name|xml
argument_list|,
literal|"Headers"
argument_list|)
expr_stmt|;
name|outputFilter
argument_list|(
name|tempProj
argument_list|,
name|xml
argument_list|,
literal|"GeneratedFiles"
argument_list|)
expr_stmt|;
name|outputFilter
argument_list|(
name|tempProj
argument_list|,
name|xml
argument_list|,
literal|"LexYaccFiles"
argument_list|)
expr_stmt|;
name|outputFilter
argument_list|(
name|tempProj
argument_list|,
name|xml
argument_list|,
literal|"TranslationFiles"
argument_list|)
expr_stmt|;
name|outputFilter
argument_list|(
name|tempProj
argument_list|,
name|xml
argument_list|,
literal|"FormFiles"
argument_list|)
expr_stmt|;
name|outputFilter
argument_list|(
name|tempProj
argument_list|,
name|xml
argument_list|,
literal|"ResourceFiles"
argument_list|)
expr_stmt|;
name|outputFilter
argument_list|(
name|tempProj
argument_list|,
name|xml
argument_list|,
literal|"DeploymentFiles"
argument_list|)
expr_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
name|extraCompilersInProject
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tool
operator|.
name|ExtraCompilersFiles
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QString
modifier|&
name|compilerName
init|=
name|tool
operator|.
name|ExtraCompilersFiles
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|Name
decl_stmt|;
if|if
condition|(
operator|!
name|extraCompilersInProject
operator|.
name|contains
argument_list|(
name|compilerName
argument_list|)
condition|)
block|{
name|extraCompilersInProject
operator|+=
name|compilerName
expr_stmt|;
name|tempProj
operator|.
name|ExtraCompilers
operator|+=
name|compilerName
expr_stmt|;
block|}
block|}
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|tempProj
operator|.
name|ExtraCompilers
operator|.
name|count
argument_list|()
condition|;
operator|++
name|x
control|)
block|{
name|outputFilter
argument_list|(
name|tempProj
argument_list|,
name|xml
argument_list|,
name|tempProj
operator|.
name|ExtraCompilers
operator|.
name|at
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|outputFilter
argument_list|(
name|tempProj
argument_list|,
name|xml
argument_list|,
literal|"RootFiles"
argument_list|)
expr_stmt|;
name|xml
operator|<<
name|closetag
argument_list|(
name|q_Files
argument_list|)
operator|<<
name|tag
argument_list|(
name|_Globals
argument_list|)
operator|<<
name|data
argument_list|()
expr_stmt|;
comment|// No "/>" end tag
block|}
end_function
begin_function
DECL|function|write
name|void
name|VCProjectWriter
operator|::
name|write
parameter_list|(
name|XmlOutput
modifier|&
name|xml
parameter_list|,
name|VCProject
modifier|&
name|tool
parameter_list|)
block|{
if|if
condition|(
name|tool
operator|.
name|SingleProjects
operator|.
name|count
argument_list|()
operator|==
literal|0
condition|)
block|{
name|warn_msg
argument_list|(
name|WarnLogic
argument_list|,
literal|"Generator: .NET: no single project in merge project, no output"
argument_list|)
expr_stmt|;
return|return;
block|}
name|xml
operator|<<
name|decl
argument_list|(
literal|"1.0"
argument_list|,
literal|"Windows-1252"
argument_list|)
operator|<<
name|tag
argument_list|(
name|_VisualStudioProject
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_ProjectType
argument_list|,
literal|"Visual C++"
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_Version
argument_list|,
name|tool
operator|.
name|Version
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_Name
argument_list|,
name|tool
operator|.
name|Name
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_ProjectGUID
argument_list|,
name|tool
operator|.
name|ProjectGUID
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_Keyword
argument_list|,
name|tool
operator|.
name|Keyword
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_SccProjectName
argument_list|,
name|tool
operator|.
name|SccProjectName
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_SccLocalPath
argument_list|,
name|tool
operator|.
name|SccLocalPath
argument_list|)
operator|<<
name|tag
argument_list|(
name|_Platforms
argument_list|)
operator|<<
name|tag
argument_list|(
name|_Platform
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_Name
argument_list|,
name|tool
operator|.
name|PlatformName
argument_list|)
operator|<<
name|closetag
argument_list|(
name|_Platforms
argument_list|)
operator|<<
name|tag
argument_list|(
name|_Configurations
argument_list|)
expr_stmt|;
comment|// Output each configuration
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tool
operator|.
name|SingleProjects
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|write
argument_list|(
name|xml
argument_list|,
name|tool
operator|.
name|SingleProjects
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|Configuration
argument_list|)
expr_stmt|;
name|xml
operator|<<
name|closetag
argument_list|(
name|_Configurations
argument_list|)
operator|<<
name|tag
argument_list|(
name|q_Files
argument_list|)
expr_stmt|;
name|outputFilter
argument_list|(
name|tool
argument_list|,
name|xml
argument_list|,
literal|"Sources"
argument_list|)
expr_stmt|;
name|outputFilter
argument_list|(
name|tool
argument_list|,
name|xml
argument_list|,
literal|"Headers"
argument_list|)
expr_stmt|;
name|outputFilter
argument_list|(
name|tool
argument_list|,
name|xml
argument_list|,
literal|"GeneratedFiles"
argument_list|)
expr_stmt|;
name|outputFilter
argument_list|(
name|tool
argument_list|,
name|xml
argument_list|,
literal|"LexYaccFiles"
argument_list|)
expr_stmt|;
name|outputFilter
argument_list|(
name|tool
argument_list|,
name|xml
argument_list|,
literal|"TranslationFiles"
argument_list|)
expr_stmt|;
name|outputFilter
argument_list|(
name|tool
argument_list|,
name|xml
argument_list|,
literal|"FormFiles"
argument_list|)
expr_stmt|;
name|outputFilter
argument_list|(
name|tool
argument_list|,
name|xml
argument_list|,
literal|"ResourceFiles"
argument_list|)
expr_stmt|;
name|outputFilter
argument_list|(
name|tool
argument_list|,
name|xml
argument_list|,
literal|"DeploymentFiles"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|tool
operator|.
name|ExtraCompilers
operator|.
name|count
argument_list|()
condition|;
operator|++
name|x
control|)
block|{
name|outputFilter
argument_list|(
name|tool
argument_list|,
name|xml
argument_list|,
name|tool
operator|.
name|ExtraCompilers
operator|.
name|at
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|outputFilter
argument_list|(
name|tool
argument_list|,
name|xml
argument_list|,
literal|"RootFiles"
argument_list|)
expr_stmt|;
name|xml
operator|<<
name|closetag
argument_list|(
name|q_Files
argument_list|)
operator|<<
name|tag
argument_list|(
name|_Globals
argument_list|)
operator|<<
name|data
argument_list|()
expr_stmt|;
comment|// No "/>" end tag
block|}
end_function
begin_function
DECL|function|write
name|void
name|VCProjectWriter
operator|::
name|write
parameter_list|(
name|XmlOutput
modifier|&
name|xml
parameter_list|,
specifier|const
name|VCCLCompilerTool
modifier|&
name|tool
parameter_list|)
block|{
name|xml
operator|<<
name|tag
argument_list|(
name|_Tool
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_Name
argument_list|,
name|_VCCLCompilerTool
argument_list|)
operator|<<
name|attrX
argument_list|(
name|_AdditionalIncludeDirectories
argument_list|,
name|tool
operator|.
name|AdditionalIncludeDirectories
argument_list|)
operator|<<
name|attrX
argument_list|(
name|_AdditionalOptions
argument_list|,
name|tool
operator|.
name|AdditionalOptions
argument_list|,
literal|" "
argument_list|)
operator|<<
name|attrX
argument_list|(
name|_AdditionalUsingDirectories
argument_list|,
name|tool
operator|.
name|AdditionalUsingDirectories
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_AssemblerListingLocation
argument_list|,
name|tool
operator|.
name|AssemblerListingLocation
argument_list|)
operator|<<
name|attrE
argument_list|(
name|_AssemblerOutput
argument_list|,
name|tool
operator|.
name|AssemblerOutput
argument_list|,
comment|/*ifNot*/
name|asmListingNone
argument_list|)
operator|<<
name|attrE
argument_list|(
name|_BasicRuntimeChecks
argument_list|,
name|tool
operator|.
name|BasicRuntimeChecks
argument_list|,
comment|/*ifNot*/
name|runtimeBasicCheckNone
argument_list|)
operator|<<
name|attrE
argument_list|(
name|_BrowseInformation
argument_list|,
name|tool
operator|.
name|BrowseInformation
argument_list|,
comment|/*ifNot*/
name|brInfoNone
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_BrowseInformationFile
argument_list|,
name|tool
operator|.
name|BrowseInformationFile
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_BufferSecurityCheck
argument_list|,
name|tool
operator|.
name|BufferSecurityCheck
argument_list|)
operator|<<
name|attrE
argument_list|(
name|_CallingConvention
argument_list|,
name|tool
operator|.
name|CallingConvention
argument_list|,
comment|/*ifNot*/
name|callConventionDefault
argument_list|)
operator|<<
name|attrE
argument_list|(
name|_CompileAs
argument_list|,
name|tool
operator|.
name|CompileAs
argument_list|,
name|compileAsDefault
argument_list|)
operator|<<
name|attrE
argument_list|(
name|_CompileAsManaged
argument_list|,
name|tool
operator|.
name|CompileAsManaged
argument_list|,
comment|/*ifNot*/
name|managedDefault
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_CompileOnly
argument_list|,
name|tool
operator|.
name|CompileOnly
argument_list|)
operator|<<
name|attrE
argument_list|(
name|_DebugInformationFormat
argument_list|,
name|tool
operator|.
name|DebugInformationFormat
argument_list|,
comment|/*ifNot*/
name|debugUnknown
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_DefaultCharIsUnsigned
argument_list|,
name|tool
operator|.
name|DefaultCharIsUnsigned
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_Detect64BitPortabilityProblems
argument_list|,
name|tool
operator|.
name|Detect64BitPortabilityProblems
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_DisableLanguageExtensions
argument_list|,
name|tool
operator|.
name|DisableLanguageExtensions
argument_list|)
operator|<<
name|attrX
argument_list|(
name|_DisableSpecificWarnings
argument_list|,
name|tool
operator|.
name|DisableSpecificWarnings
argument_list|)
operator|<<
name|attrE
argument_list|(
name|_EnableEnhancedInstructionSet
argument_list|,
name|tool
operator|.
name|EnableEnhancedInstructionSet
argument_list|,
comment|/*ifnot*/
name|archNotSet
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_EnableFiberSafeOptimizations
argument_list|,
name|tool
operator|.
name|EnableFiberSafeOptimizations
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_EnableFunctionLevelLinking
argument_list|,
name|tool
operator|.
name|EnableFunctionLevelLinking
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_EnableIntrinsicFunctions
argument_list|,
name|tool
operator|.
name|EnableIntrinsicFunctions
argument_list|)
operator|<<
name|xformExceptionHandlingNET2005
argument_list|(
name|tool
operator|.
name|ExceptionHandling
argument_list|,
name|tool
operator|.
name|config
operator|->
name|CompilerVersion
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_ExpandAttributedSource
argument_list|,
name|tool
operator|.
name|ExpandAttributedSource
argument_list|)
operator|<<
name|attrE
argument_list|(
name|_FavorSizeOrSpeed
argument_list|,
name|tool
operator|.
name|FavorSizeOrSpeed
argument_list|,
comment|/*ifNot*/
name|favorNone
argument_list|)
operator|<<
name|attrE
argument_list|(
name|_FloatingPointModel
argument_list|,
name|tool
operator|.
name|FloatingPointModel
argument_list|,
comment|/*ifNot*/
name|floatingPointNotSet
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_FloatingPointExceptions
argument_list|,
name|tool
operator|.
name|FloatingPointExceptions
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_ForceConformanceInForLoopScope
argument_list|,
name|tool
operator|.
name|ForceConformanceInForLoopScope
argument_list|)
operator|<<
name|attrX
argument_list|(
name|_ForcedIncludeFiles
argument_list|,
name|tool
operator|.
name|ForcedIncludeFiles
argument_list|)
operator|<<
name|attrX
argument_list|(
name|_ForcedUsingFiles
argument_list|,
name|tool
operator|.
name|ForcedUsingFiles
argument_list|)
operator|<<
name|attrE
argument_list|(
name|_GeneratePreprocessedFile
argument_list|,
name|tool
operator|.
name|GeneratePreprocessedFile
argument_list|,
comment|/*ifNot*/
name|preprocessUnknown
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_GlobalOptimizations
argument_list|,
name|tool
operator|.
name|GlobalOptimizations
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_IgnoreStandardIncludePath
argument_list|,
name|tool
operator|.
name|IgnoreStandardIncludePath
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_ImproveFloatingPointConsistency
argument_list|,
name|tool
operator|.
name|ImproveFloatingPointConsistency
argument_list|)
operator|<<
name|attrE
argument_list|(
name|_InlineFunctionExpansion
argument_list|,
name|tool
operator|.
name|InlineFunctionExpansion
argument_list|,
comment|/*ifNot*/
name|expandDefault
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_KeepComments
argument_list|,
name|tool
operator|.
name|KeepComments
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_MinimalRebuild
argument_list|,
name|tool
operator|.
name|MinimalRebuild
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_ObjectFile
argument_list|,
name|tool
operator|.
name|ObjectFile
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_OmitFramePointers
argument_list|,
name|tool
operator|.
name|OmitFramePointers
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_OpenMP
argument_list|,
name|tool
operator|.
name|OpenMP
argument_list|)
operator|<<
name|attrE
argument_list|(
name|_Optimization
argument_list|,
name|tool
operator|.
name|Optimization
argument_list|,
comment|/*ifNot*/
name|optimizeDefault
argument_list|)
operator|<<
name|attrE
argument_list|(
name|_OptimizeForProcessor
argument_list|,
name|tool
operator|.
name|OptimizeForProcessor
argument_list|,
comment|/*ifNot*/
name|procOptimizeBlended
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_OptimizeForWindowsApplication
argument_list|,
name|tool
operator|.
name|OptimizeForWindowsApplication
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_OutputFile
argument_list|,
name|tool
operator|.
name|OutputFile
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_PrecompiledHeaderFile
argument_list|,
name|tool
operator|.
name|PrecompiledHeaderFile
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_PrecompiledHeaderThrough
argument_list|,
name|tool
operator|.
name|PrecompiledHeaderThrough
argument_list|)
operator|<<
name|attrX
argument_list|(
name|_PreprocessorDefinitions
argument_list|,
name|tool
operator|.
name|PreprocessorDefinitions
argument_list|)
operator|<<
operator|(
name|tool
operator|.
name|ProgramDataBaseFileName
operator|.
name|isNull
argument_list|()
condition|?
name|noxml
argument_list|()
else|:
name|attr
argument_list|(
name|_ProgramDataBaseFileName
argument_list|,
name|tool
operator|.
name|ProgramDataBaseFileName
argument_list|)
operator|)
operator|<<
name|attrE
argument_list|(
name|_RuntimeLibrary
argument_list|,
name|tool
operator|.
name|RuntimeLibrary
argument_list|,
comment|/*ifNot*/
name|rtUnknown
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_RuntimeTypeInfo
argument_list|,
name|tool
operator|.
name|RuntimeTypeInfo
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_ShowIncludes
argument_list|,
name|tool
operator|.
name|ShowIncludes
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_SmallerTypeCheck
argument_list|,
name|tool
operator|.
name|SmallerTypeCheck
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_StringPooling
argument_list|,
name|tool
operator|.
name|StringPooling
argument_list|)
operator|<<
name|attrE
argument_list|(
name|_StructMemberAlignment
argument_list|,
name|tool
operator|.
name|StructMemberAlignment
argument_list|,
comment|/*ifNot*/
name|alignNotSet
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_SuppressStartupBanner
argument_list|,
name|tool
operator|.
name|SuppressStartupBanner
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_TreatWChar_tAsBuiltInType
argument_list|,
name|tool
operator|.
name|TreatWChar_tAsBuiltInType
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_TurnOffAssemblyGeneration
argument_list|,
name|tool
operator|.
name|TurnOffAssemblyGeneration
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_UndefineAllPreprocessorDefinitions
argument_list|,
name|tool
operator|.
name|UndefineAllPreprocessorDefinitions
argument_list|)
operator|<<
name|attrX
argument_list|(
name|_UndefinePreprocessorDefinitions
argument_list|,
name|tool
operator|.
name|UndefinePreprocessorDefinitions
argument_list|)
operator|<<
name|xformUsePrecompiledHeaderForNET2005
argument_list|(
name|tool
operator|.
name|UsePrecompiledHeader
argument_list|,
name|tool
operator|.
name|config
operator|->
name|CompilerVersion
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_WarnAsError
argument_list|,
name|tool
operator|.
name|WarnAsError
argument_list|)
operator|<<
name|attrE
argument_list|(
name|_WarningLevel
argument_list|,
name|tool
operator|.
name|WarningLevel
argument_list|,
comment|/*ifNot*/
name|warningLevelUnknown
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_WholeProgramOptimization
argument_list|,
name|tool
operator|.
name|WholeProgramOptimization
argument_list|)
operator|<<
name|attrE
argument_list|(
name|_CompileForArchitecture
argument_list|,
name|tool
operator|.
name|CompileForArchitecture
argument_list|,
comment|/*ifNot*/
name|archUnknown
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_InterworkCalls
argument_list|,
name|tool
operator|.
name|InterworkCalls
argument_list|)
operator|<<
name|closetag
argument_list|(
name|_Tool
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|write
name|void
name|VCProjectWriter
operator|::
name|write
parameter_list|(
name|XmlOutput
modifier|&
name|xml
parameter_list|,
specifier|const
name|VCLinkerTool
modifier|&
name|tool
parameter_list|)
block|{
name|xml
operator|<<
name|tag
argument_list|(
name|_Tool
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_Name
argument_list|,
name|_VCLinkerTool
argument_list|)
operator|<<
name|attrX
argument_list|(
name|_AdditionalDependencies
argument_list|,
name|tool
operator|.
name|AdditionalDependencies
argument_list|,
literal|" "
argument_list|)
operator|<<
name|attrX
argument_list|(
name|_AdditionalLibraryDirectories
argument_list|,
name|tool
operator|.
name|AdditionalLibraryDirectories
argument_list|)
operator|<<
name|attrX
argument_list|(
name|_AdditionalOptions
argument_list|,
name|tool
operator|.
name|AdditionalOptions
argument_list|,
literal|" "
argument_list|)
operator|<<
name|attrX
argument_list|(
name|_AddModuleNamesToAssembly
argument_list|,
name|tool
operator|.
name|AddModuleNamesToAssembly
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_BaseAddress
argument_list|,
name|tool
operator|.
name|BaseAddress
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_DataExecutionPrevention
argument_list|,
name|tool
operator|.
name|DataExecutionPrevention
argument_list|)
operator|<<
name|attrX
argument_list|(
name|_DelayLoadDLLs
argument_list|,
name|tool
operator|.
name|DelayLoadDLLs
argument_list|)
operator|<<
name|attrE
argument_list|(
name|_EnableCOMDATFolding
argument_list|,
name|tool
operator|.
name|EnableCOMDATFolding
argument_list|,
comment|/*ifNot*/
name|optFoldingDefault
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_EntryPointSymbol
argument_list|,
name|tool
operator|.
name|EntryPointSymbol
argument_list|)
operator|<<
name|attrX
argument_list|(
name|_ForceSymbolReferences
argument_list|,
name|tool
operator|.
name|ForceSymbolReferences
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_FunctionOrder
argument_list|,
name|tool
operator|.
name|FunctionOrder
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_GenerateDebugInformation
argument_list|,
name|tool
operator|.
name|GenerateDebugInformation
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_GenerateMapFile
argument_list|,
name|tool
operator|.
name|GenerateMapFile
argument_list|)
operator|<<
name|attrL
argument_list|(
name|_HeapCommitSize
argument_list|,
name|tool
operator|.
name|HeapCommitSize
argument_list|,
comment|/*ifNot*/
operator|-
literal|1
argument_list|)
operator|<<
name|attrL
argument_list|(
name|_HeapReserveSize
argument_list|,
name|tool
operator|.
name|HeapReserveSize
argument_list|,
comment|/*ifNot*/
operator|-
literal|1
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_IgnoreAllDefaultLibraries
argument_list|,
name|tool
operator|.
name|IgnoreAllDefaultLibraries
argument_list|)
operator|<<
name|attrX
argument_list|(
name|_IgnoreDefaultLibraryNames
argument_list|,
name|tool
operator|.
name|IgnoreDefaultLibraryNames
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_IgnoreEmbeddedIDL
argument_list|,
name|tool
operator|.
name|IgnoreEmbeddedIDL
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_IgnoreImportLibrary
argument_list|,
name|tool
operator|.
name|IgnoreImportLibrary
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_ImportLibrary
argument_list|,
name|tool
operator|.
name|ImportLibrary
argument_list|)
operator|<<
name|attrE
argument_list|(
name|_LargeAddressAware
argument_list|,
name|tool
operator|.
name|LargeAddressAware
argument_list|,
comment|/*ifNot*/
name|addrAwareDefault
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_LinkDLL
argument_list|,
name|tool
operator|.
name|LinkDLL
argument_list|)
operator|<<
name|attrE
argument_list|(
name|_LinkIncremental
argument_list|,
name|tool
operator|.
name|LinkIncremental
argument_list|,
comment|/*ifNot*/
name|linkIncrementalDefault
argument_list|)
operator|<<
name|attrE
argument_list|(
name|_LinkTimeCodeGeneration
argument_list|,
name|tool
operator|.
name|LinkTimeCodeGeneration
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_LinkToManagedResourceFile
argument_list|,
name|tool
operator|.
name|LinkToManagedResourceFile
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_MapExports
argument_list|,
name|tool
operator|.
name|MapExports
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_MapFileName
argument_list|,
name|tool
operator|.
name|MapFileName
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_MapLines
argument_list|,
name|tool
operator|.
name|MapLines
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_MergedIDLBaseFileName
argument_list|,
name|tool
operator|.
name|MergedIDLBaseFileName
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_MergeSections
argument_list|,
name|tool
operator|.
name|MergeSections
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_MidlCommandFile
argument_list|,
name|tool
operator|.
name|MidlCommandFile
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_ModuleDefinitionFile
argument_list|,
name|tool
operator|.
name|ModuleDefinitionFile
argument_list|)
operator|<<
name|attrE
argument_list|(
name|_OptimizeForWindows98
argument_list|,
name|tool
operator|.
name|OptimizeForWindows98
argument_list|,
comment|/*ifNot*/
name|optWin98Default
argument_list|)
operator|<<
name|attrE
argument_list|(
name|_OptimizeReferences
argument_list|,
name|tool
operator|.
name|OptimizeReferences
argument_list|,
comment|/*ifNot*/
name|optReferencesDefault
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_OutputFile
argument_list|,
name|tool
operator|.
name|OutputFile
argument_list|)
operator|<<
name|attr
argument_list|(
name|_ProgramDatabaseFile
argument_list|,
name|tool
operator|.
name|ProgramDatabaseFile
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_RandomizedBaseAddress
argument_list|,
name|tool
operator|.
name|RandomizedBaseAddress
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_RegisterOutput
argument_list|,
name|tool
operator|.
name|RegisterOutput
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_ResourceOnlyDLL
argument_list|,
name|tool
operator|.
name|ResourceOnlyDLL
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_SetChecksum
argument_list|,
name|tool
operator|.
name|SetChecksum
argument_list|)
operator|<<
name|attrE
argument_list|(
name|_ShowProgress
argument_list|,
name|tool
operator|.
name|ShowProgress
argument_list|,
comment|/*ifNot*/
name|linkProgressNotSet
argument_list|)
operator|<<
name|attrL
argument_list|(
name|_StackCommitSize
argument_list|,
name|tool
operator|.
name|StackCommitSize
argument_list|,
comment|/*ifNot*/
operator|-
literal|1
argument_list|)
operator|<<
name|attrL
argument_list|(
name|_StackReserveSize
argument_list|,
name|tool
operator|.
name|StackReserveSize
argument_list|,
comment|/*ifNot*/
operator|-
literal|1
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_StripPrivateSymbols
argument_list|,
name|tool
operator|.
name|StripPrivateSymbols
argument_list|)
operator|<<
name|attrE
argument_list|(
name|_SubSystem
argument_list|,
name|tool
operator|.
name|SubSystem
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_SupportUnloadOfDelayLoadedDLL
argument_list|,
name|tool
operator|.
name|SupportUnloadOfDelayLoadedDLL
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_SuppressStartupBanner
argument_list|,
name|tool
operator|.
name|SuppressStartupBanner
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_SwapRunFromCD
argument_list|,
name|tool
operator|.
name|SwapRunFromCD
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_SwapRunFromNet
argument_list|,
name|tool
operator|.
name|SwapRunFromNet
argument_list|)
operator|<<
name|attrE
argument_list|(
name|_TargetMachine
argument_list|,
name|tool
operator|.
name|TargetMachine
argument_list|,
comment|/*ifNot*/
name|machineNotSet
argument_list|)
operator|<<
name|attrE
argument_list|(
name|_TerminalServerAware
argument_list|,
name|tool
operator|.
name|TerminalServerAware
argument_list|,
comment|/*ifNot*/
name|termSvrAwareDefault
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_TurnOffAssemblyGeneration
argument_list|,
name|tool
operator|.
name|TurnOffAssemblyGeneration
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_TypeLibraryFile
argument_list|,
name|tool
operator|.
name|TypeLibraryFile
argument_list|)
operator|<<
name|attrL
argument_list|(
name|_TypeLibraryResourceID
argument_list|,
name|tool
operator|.
name|TypeLibraryResourceID
argument_list|,
comment|/*ifNot*/
name|rcUseDefault
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_Version
argument_list|,
name|tool
operator|.
name|Version
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_GenerateManifest
argument_list|,
name|tool
operator|.
name|GenerateManifest
argument_list|)
operator|<<
name|closetag
argument_list|(
name|_Tool
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|write
name|void
name|VCProjectWriter
operator|::
name|write
parameter_list|(
name|XmlOutput
modifier|&
name|xml
parameter_list|,
specifier|const
name|VCManifestTool
modifier|&
name|tool
parameter_list|)
block|{
name|xml
operator|<<
name|tag
argument_list|(
name|_Tool
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_Name
argument_list|,
name|_VCManifestTool
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_EmbedManifest
argument_list|,
name|tool
operator|.
name|EmbedManifest
argument_list|)
operator|<<
name|closetag
argument_list|(
name|_Tool
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|write
name|void
name|VCProjectWriter
operator|::
name|write
parameter_list|(
name|XmlOutput
modifier|&
name|xml
parameter_list|,
specifier|const
name|VCMIDLTool
modifier|&
name|tool
parameter_list|)
block|{
name|xml
operator|<<
name|tag
argument_list|(
name|_Tool
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_Name
argument_list|,
name|_VCMIDLTool
argument_list|)
operator|<<
name|attrX
argument_list|(
name|_AdditionalIncludeDirectories
argument_list|,
name|tool
operator|.
name|AdditionalIncludeDirectories
argument_list|)
operator|<<
name|attrX
argument_list|(
name|_AdditionalOptions
argument_list|,
name|tool
operator|.
name|AdditionalOptions
argument_list|,
literal|" "
argument_list|)
operator|<<
name|attrX
argument_list|(
name|_CPreprocessOptions
argument_list|,
name|tool
operator|.
name|CPreprocessOptions
argument_list|)
operator|<<
name|attrE
argument_list|(
name|_DefaultCharType
argument_list|,
name|tool
operator|.
name|DefaultCharType
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_DLLDataFileName
argument_list|,
name|tool
operator|.
name|DLLDataFileName
argument_list|)
operator|<<
name|attrE
argument_list|(
name|_EnableErrorChecks
argument_list|,
name|tool
operator|.
name|EnableErrorChecks
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_ErrorCheckAllocations
argument_list|,
name|tool
operator|.
name|ErrorCheckAllocations
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_ErrorCheckBounds
argument_list|,
name|tool
operator|.
name|ErrorCheckBounds
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_ErrorCheckEnumRange
argument_list|,
name|tool
operator|.
name|ErrorCheckEnumRange
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_ErrorCheckRefPointers
argument_list|,
name|tool
operator|.
name|ErrorCheckRefPointers
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_ErrorCheckStubData
argument_list|,
name|tool
operator|.
name|ErrorCheckStubData
argument_list|)
operator|<<
name|attrX
argument_list|(
name|_FullIncludePath
argument_list|,
name|tool
operator|.
name|FullIncludePath
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_GenerateStublessProxies
argument_list|,
name|tool
operator|.
name|GenerateStublessProxies
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_GenerateTypeLibrary
argument_list|,
name|tool
operator|.
name|GenerateTypeLibrary
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_HeaderFileName
argument_list|,
name|tool
operator|.
name|HeaderFileName
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_IgnoreStandardIncludePath
argument_list|,
name|tool
operator|.
name|IgnoreStandardIncludePath
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_InterfaceIdentifierFileName
argument_list|,
name|tool
operator|.
name|InterfaceIdentifierFileName
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_MkTypLibCompatible
argument_list|,
name|tool
operator|.
name|MkTypLibCompatible
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_OutputDirectory
argument_list|,
name|tool
operator|.
name|OutputDirectory
argument_list|)
operator|<<
name|attrX
argument_list|(
name|_PreprocessorDefinitions
argument_list|,
name|tool
operator|.
name|PreprocessorDefinitions
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_ProxyFileName
argument_list|,
name|tool
operator|.
name|ProxyFileName
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_RedirectOutputAndErrors
argument_list|,
name|tool
operator|.
name|RedirectOutputAndErrors
argument_list|)
operator|<<
name|attrE
argument_list|(
name|_StructMemberAlignment
argument_list|,
name|tool
operator|.
name|StructMemberAlignment
argument_list|,
comment|/*ifNot*/
name|midlAlignNotSet
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_SuppressStartupBanner
argument_list|,
name|tool
operator|.
name|SuppressStartupBanner
argument_list|)
operator|<<
name|attrE
argument_list|(
name|_TargetEnvironment
argument_list|,
name|tool
operator|.
name|TargetEnvironment
argument_list|,
comment|/*ifNot*/
name|midlTargetNotSet
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_TypeLibraryName
argument_list|,
name|tool
operator|.
name|TypeLibraryName
argument_list|)
operator|<<
name|attrX
argument_list|(
name|_UndefinePreprocessorDefinitions
argument_list|,
name|tool
operator|.
name|UndefinePreprocessorDefinitions
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_ValidateParameters
argument_list|,
name|tool
operator|.
name|ValidateParameters
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_WarnAsError
argument_list|,
name|tool
operator|.
name|WarnAsError
argument_list|)
operator|<<
name|attrE
argument_list|(
name|_WarningLevel
argument_list|,
name|tool
operator|.
name|WarningLevel
argument_list|)
operator|<<
name|closetag
argument_list|(
name|_Tool
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|write
name|void
name|VCProjectWriter
operator|::
name|write
parameter_list|(
name|XmlOutput
modifier|&
name|xml
parameter_list|,
specifier|const
name|VCCustomBuildTool
modifier|&
name|tool
parameter_list|)
block|{
name|xml
operator|<<
name|tag
argument_list|(
name|_Tool
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_Name
argument_list|,
name|tool
operator|.
name|ToolName
argument_list|)
operator|<<
name|attrX
argument_list|(
name|_AdditionalDependencies
argument_list|,
name|tool
operator|.
name|AdditionalDependencies
argument_list|,
literal|";"
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_CommandLine
argument_list|,
name|tool
operator|.
name|CommandLine
operator|.
name|join
argument_list|(
name|vcCommandSeparator
argument_list|()
argument_list|)
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_Description
argument_list|,
name|tool
operator|.
name|Description
argument_list|)
operator|<<
name|attrX
argument_list|(
name|_Outputs
argument_list|,
name|tool
operator|.
name|Outputs
argument_list|,
literal|";"
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_Path
argument_list|,
name|tool
operator|.
name|ToolPath
argument_list|)
operator|<<
name|closetag
argument_list|(
name|_Tool
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|write
name|void
name|VCProjectWriter
operator|::
name|write
parameter_list|(
name|XmlOutput
modifier|&
name|xml
parameter_list|,
specifier|const
name|VCLibrarianTool
modifier|&
name|tool
parameter_list|)
block|{
name|xml
operator|<<
name|tag
argument_list|(
name|_Tool
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_Name
argument_list|,
name|_VCLibrarianTool
argument_list|)
operator|<<
name|attrX
argument_list|(
name|_AdditionalDependencies
argument_list|,
name|tool
operator|.
name|AdditionalDependencies
argument_list|)
operator|<<
name|attrX
argument_list|(
name|_AdditionalLibraryDirectories
argument_list|,
name|tool
operator|.
name|AdditionalLibraryDirectories
argument_list|)
operator|<<
name|attrX
argument_list|(
name|_AdditionalOptions
argument_list|,
name|tool
operator|.
name|AdditionalOptions
argument_list|,
literal|" "
argument_list|)
operator|<<
name|attrX
argument_list|(
name|_ExportNamedFunctions
argument_list|,
name|tool
operator|.
name|ExportNamedFunctions
argument_list|)
operator|<<
name|attrX
argument_list|(
name|_ForceSymbolReferences
argument_list|,
name|tool
operator|.
name|ForceSymbolReferences
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_IgnoreAllDefaultLibraries
argument_list|,
name|tool
operator|.
name|IgnoreAllDefaultLibraries
argument_list|)
operator|<<
name|attrX
argument_list|(
name|_IgnoreDefaultLibraryNames
argument_list|,
name|tool
operator|.
name|IgnoreDefaultLibraryNames
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_ModuleDefinitionFile
argument_list|,
name|tool
operator|.
name|ModuleDefinitionFile
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_OutputFile
argument_list|,
name|tool
operator|.
name|OutputFile
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_SuppressStartupBanner
argument_list|,
name|tool
operator|.
name|SuppressStartupBanner
argument_list|)
operator|<<
name|closetag
argument_list|(
name|_Tool
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|write
name|void
name|VCProjectWriter
operator|::
name|write
parameter_list|(
name|XmlOutput
modifier|&
name|xml
parameter_list|,
specifier|const
name|VCResourceCompilerTool
modifier|&
name|tool
parameter_list|)
block|{
name|xml
operator|<<
name|tag
argument_list|(
name|_Tool
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_Name
argument_list|,
name|_VCResourceCompilerTool
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_Path
argument_list|,
name|tool
operator|.
name|ToolPath
argument_list|)
operator|<<
name|attrX
argument_list|(
name|_AdditionalIncludeDirectories
argument_list|,
name|tool
operator|.
name|AdditionalIncludeDirectories
argument_list|)
operator|<<
name|attrX
argument_list|(
name|_AdditionalOptions
argument_list|,
name|tool
operator|.
name|AdditionalOptions
argument_list|,
literal|" "
argument_list|)
operator|<<
name|attrE
argument_list|(
name|_Culture
argument_list|,
name|tool
operator|.
name|Culture
argument_list|,
comment|/*ifNot*/
name|rcUseDefault
argument_list|)
operator|<<
name|attrX
argument_list|(
name|_FullIncludePath
argument_list|,
name|tool
operator|.
name|FullIncludePath
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_IgnoreStandardIncludePath
argument_list|,
name|tool
operator|.
name|IgnoreStandardIncludePath
argument_list|)
operator|<<
name|attrX
argument_list|(
name|_PreprocessorDefinitions
argument_list|,
name|tool
operator|.
name|PreprocessorDefinitions
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_ResourceOutputFileName
argument_list|,
name|tool
operator|.
name|ResourceOutputFileName
argument_list|)
operator|<<
name|attrE
argument_list|(
name|_ShowProgress
argument_list|,
name|tool
operator|.
name|ShowProgress
argument_list|,
comment|/*ifNot*/
name|linkProgressNotSet
argument_list|)
operator|<<
name|closetag
argument_list|(
name|_Tool
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|write
name|void
name|VCProjectWriter
operator|::
name|write
parameter_list|(
name|XmlOutput
modifier|&
name|xml
parameter_list|,
specifier|const
name|VCEventTool
modifier|&
name|tool
parameter_list|)
block|{
name|xml
operator|<<
name|tag
argument_list|(
name|_Tool
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_Name
argument_list|,
name|tool
operator|.
name|ToolName
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_Path
argument_list|,
name|tool
operator|.
name|ToolPath
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_CommandLine
argument_list|,
name|tool
operator|.
name|CommandLine
operator|.
name|join
argument_list|(
name|vcCommandSeparator
argument_list|()
argument_list|)
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_Description
argument_list|,
name|tool
operator|.
name|Description
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_ExcludedFromBuild
argument_list|,
name|tool
operator|.
name|ExcludedFromBuild
argument_list|)
operator|<<
name|closetag
argument_list|(
name|_Tool
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|write
name|void
name|VCProjectWriter
operator|::
name|write
parameter_list|(
name|XmlOutput
modifier|&
name|xml
parameter_list|,
specifier|const
name|VCDeploymentTool
modifier|&
name|tool
parameter_list|)
block|{
if|if
condition|(
name|tool
operator|.
name|AdditionalFiles
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|xml
operator|<<
name|tag
argument_list|(
name|tool
operator|.
name|DeploymentTag
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_RemoteDirectory
argument_list|,
name|tool
operator|.
name|RemoteDirectory
argument_list|)
operator|<<
name|attrE
argument_list|(
name|_RegisterOutput
argument_list|,
name|tool
operator|.
name|RegisterOutput
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_AdditionalFiles
argument_list|,
name|tool
operator|.
name|AdditionalFiles
argument_list|)
operator|<<
name|closetag
argument_list|(
name|tool
operator|.
name|DeploymentTag
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|write
name|void
name|VCProjectWriter
operator|::
name|write
parameter_list|(
name|XmlOutput
modifier|&
name|xml
parameter_list|,
specifier|const
name|VCConfiguration
modifier|&
name|tool
parameter_list|)
block|{
name|xml
operator|<<
name|tag
argument_list|(
name|_Configuration
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_Name
argument_list|,
name|tool
operator|.
name|Name
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_OutputDirectory
argument_list|,
name|tool
operator|.
name|OutputDirectory
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_ATLMinimizesCRunTimeLibraryUsage
argument_list|,
name|tool
operator|.
name|ATLMinimizesCRunTimeLibraryUsage
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_BuildBrowserInformation
argument_list|,
name|tool
operator|.
name|BuildBrowserInformation
argument_list|)
operator|<<
name|attrE
argument_list|(
name|_CharacterSet
argument_list|,
name|tool
operator|.
name|CharacterSet
argument_list|,
comment|/*ifNot*/
name|charSetNotSet
argument_list|)
operator|<<
name|attrE
argument_list|(
name|_ConfigurationType
argument_list|,
name|tool
operator|.
name|ConfigurationType
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_DeleteExtensionsOnClean
argument_list|,
name|tool
operator|.
name|DeleteExtensionsOnClean
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_ImportLibrary
argument_list|,
name|tool
operator|.
name|ImportLibrary
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_IntermediateDirectory
argument_list|,
name|tool
operator|.
name|IntermediateDirectory
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_PrimaryOutput
argument_list|,
name|tool
operator|.
name|PrimaryOutput
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_ProgramDatabase
argument_list|,
name|tool
operator|.
name|ProgramDatabase
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_RegisterOutput
argument_list|,
name|tool
operator|.
name|RegisterOutput
argument_list|)
operator|<<
name|attrE
argument_list|(
name|_UseOfATL
argument_list|,
name|tool
operator|.
name|UseOfATL
argument_list|,
comment|/*ifNot*/
name|useATLNotSet
argument_list|)
operator|<<
name|attrE
argument_list|(
name|_UseOfMfc
argument_list|,
name|tool
operator|.
name|UseOfMfc
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_WholeProgramOptimization
argument_list|,
name|tool
operator|.
name|WholeProgramOptimization
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|xml
argument_list|,
name|tool
operator|.
name|compiler
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|xml
argument_list|,
name|tool
operator|.
name|custom
argument_list|)
expr_stmt|;
if|if
condition|(
name|tool
operator|.
name|ConfigurationType
operator|==
name|typeStaticLibrary
condition|)
name|write
argument_list|(
name|xml
argument_list|,
name|tool
operator|.
name|librarian
argument_list|)
expr_stmt|;
else|else
name|write
argument_list|(
name|xml
argument_list|,
name|tool
operator|.
name|linker
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|xml
argument_list|,
name|tool
operator|.
name|manifestTool
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|xml
argument_list|,
name|tool
operator|.
name|idl
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|xml
argument_list|,
name|tool
operator|.
name|postBuild
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|xml
argument_list|,
name|tool
operator|.
name|preBuild
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|xml
argument_list|,
name|tool
operator|.
name|preLink
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|xml
argument_list|,
name|tool
operator|.
name|resource
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|xml
argument_list|,
name|tool
operator|.
name|deployment
argument_list|)
expr_stmt|;
name|xml
operator|<<
name|closetag
argument_list|(
name|_Configuration
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|write
name|void
name|VCProjectWriter
operator|::
name|write
parameter_list|(
name|XmlOutput
modifier|&
name|xml
parameter_list|,
name|VCFilter
modifier|&
name|tool
parameter_list|)
block|{
if|if
condition|(
operator|!
name|tool
operator|.
name|Files
operator|.
name|count
argument_list|()
condition|)
return|return;
if|if
condition|(
operator|!
name|tool
operator|.
name|Name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|xml
operator|<<
name|tag
argument_list|(
name|_Filter
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_Name
argument_list|,
name|tool
operator|.
name|Name
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_Filter
argument_list|,
name|tool
operator|.
name|Filter
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_UniqueIdentifier
argument_list|,
name|tool
operator|.
name|Guid
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_ParseFiles
argument_list|,
name|tool
operator|.
name|ParseFiles
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tool
operator|.
name|Files
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|VCFilterFile
modifier|&
name|info
init|=
name|tool
operator|.
name|Files
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|xml
operator|<<
name|tag
argument_list|(
name|q_File
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_RelativePath
argument_list|,
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|info
operator|.
name|file
argument_list|)
argument_list|)
operator|<<
name|data
argument_list|()
expr_stmt|;
comment|// In case no custom builds, to avoid "/>" endings
name|outputFileConfig
argument_list|(
name|tool
argument_list|,
name|xml
argument_list|,
name|tool
operator|.
name|Files
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|file
argument_list|)
expr_stmt|;
name|xml
operator|<<
name|closetag
argument_list|(
name|q_File
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|tool
operator|.
name|Name
operator|.
name|isEmpty
argument_list|()
condition|)
name|xml
operator|<<
name|closetag
argument_list|(
name|_Filter
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// outputs a given filter for all existing configurations of a project
end_comment
begin_function
DECL|function|outputFilter
name|void
name|VCProjectWriter
operator|::
name|outputFilter
parameter_list|(
name|VCProject
modifier|&
name|project
parameter_list|,
name|XmlOutput
modifier|&
name|xml
parameter_list|,
specifier|const
name|QString
modifier|&
name|filtername
parameter_list|)
block|{
name|QScopedPointer
argument_list|<
name|Node
argument_list|>
name|root
decl_stmt|;
if|if
condition|(
name|project
operator|.
name|SingleProjects
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|flat_files
condition|)
name|root
operator|.
name|reset
argument_list|(
operator|new
name|FlatNode
argument_list|)
expr_stmt|;
else|else
name|root
operator|.
name|reset
argument_list|(
operator|new
name|TreeNode
argument_list|)
expr_stmt|;
name|QString
name|name
decl_stmt|,
name|extfilter
decl_stmt|,
name|guid
decl_stmt|;
name|triState
name|parse
init|=
name|unset
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|project
operator|.
name|SingleProjects
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|VCFilter
name|filter
decl_stmt|;
specifier|const
name|VCProjectSingleConfig
modifier|&
name|projectSingleConfig
init|=
name|project
operator|.
name|SingleProjects
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|filtername
operator|==
literal|"RootFiles"
condition|)
block|{
name|filter
operator|=
name|projectSingleConfig
operator|.
name|RootFiles
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filtername
operator|==
literal|"Sources"
condition|)
block|{
name|filter
operator|=
name|projectSingleConfig
operator|.
name|SourceFiles
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filtername
operator|==
literal|"Headers"
condition|)
block|{
name|filter
operator|=
name|projectSingleConfig
operator|.
name|HeaderFiles
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filtername
operator|==
literal|"GeneratedFiles"
condition|)
block|{
name|filter
operator|=
name|projectSingleConfig
operator|.
name|GeneratedFiles
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filtername
operator|==
literal|"LexYaccFiles"
condition|)
block|{
name|filter
operator|=
name|projectSingleConfig
operator|.
name|LexYaccFiles
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filtername
operator|==
literal|"TranslationFiles"
condition|)
block|{
name|filter
operator|=
name|projectSingleConfig
operator|.
name|TranslationFiles
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filtername
operator|==
literal|"FormFiles"
condition|)
block|{
name|filter
operator|=
name|projectSingleConfig
operator|.
name|FormFiles
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filtername
operator|==
literal|"ResourceFiles"
condition|)
block|{
name|filter
operator|=
name|projectSingleConfig
operator|.
name|ResourceFiles
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filtername
operator|==
literal|"DeploymentFiles"
condition|)
block|{
name|filter
operator|=
name|projectSingleConfig
operator|.
name|DeploymentFiles
expr_stmt|;
block|}
else|else
block|{
comment|// ExtraCompilers
name|filter
operator|=
name|project
operator|.
name|SingleProjects
index|[
name|i
index|]
operator|.
name|filterForExtraCompiler
argument_list|(
name|filtername
argument_list|)
expr_stmt|;
block|}
comment|// Merge all files in this filter to root tree
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|filter
operator|.
name|Files
operator|.
name|count
argument_list|()
condition|;
operator|++
name|x
control|)
name|root
operator|->
name|addElement
argument_list|(
name|filter
operator|.
name|Files
operator|.
name|at
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
comment|// Save filter setting from first filter. Next filters
comment|// may differ but we cannot handle that. (ex. extfilter)
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|name
operator|=
name|filter
operator|.
name|Name
expr_stmt|;
name|extfilter
operator|=
name|filter
operator|.
name|Filter
expr_stmt|;
name|parse
operator|=
name|filter
operator|.
name|ParseFiles
expr_stmt|;
name|guid
operator|=
name|filter
operator|.
name|Guid
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|root
operator|->
name|hasElements
argument_list|()
condition|)
return|return;
comment|// Actual XML output ----------------------------------
if|if
condition|(
operator|!
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|xml
operator|<<
name|tag
argument_list|(
name|_Filter
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_Name
argument_list|,
name|name
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_Filter
argument_list|,
name|extfilter
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_UniqueIdentifier
argument_list|,
name|guid
argument_list|)
operator|<<
name|attrT
argument_list|(
name|_ParseFiles
argument_list|,
name|parse
argument_list|)
expr_stmt|;
block|}
name|root
operator|->
name|generateXML
argument_list|(
name|xml
argument_list|,
literal|""
argument_list|,
name|project
argument_list|,
name|filtername
argument_list|)
expr_stmt|;
comment|// output root tree
if|if
condition|(
operator|!
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
name|xml
operator|<<
name|closetag
argument_list|(
name|_Filter
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Output all configurations (by filtername) for a file (by info)
end_comment
begin_comment
comment|// A filters config output is in VCFilter.outputFileConfig()
end_comment
begin_function
DECL|function|outputFileConfigs
name|void
name|VCProjectWriter
operator|::
name|outputFileConfigs
parameter_list|(
name|VCProject
modifier|&
name|project
parameter_list|,
name|XmlOutput
modifier|&
name|xml
parameter_list|,
specifier|const
name|VCFilterFile
modifier|&
name|info
parameter_list|,
specifier|const
name|QString
modifier|&
name|filtername
parameter_list|)
block|{
name|xml
operator|<<
name|tag
argument_list|(
name|q_File
argument_list|)
operator|<<
name|attrS
argument_list|(
name|_RelativePath
argument_list|,
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|info
operator|.
name|file
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|project
operator|.
name|SingleProjects
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|VCFilter
name|filter
decl_stmt|;
specifier|const
name|VCProjectSingleConfig
modifier|&
name|projectSingleConfig
init|=
name|project
operator|.
name|SingleProjects
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|filtername
operator|==
literal|"RootFiles"
condition|)
block|{
name|filter
operator|=
name|projectSingleConfig
operator|.
name|RootFiles
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filtername
operator|==
literal|"Sources"
condition|)
block|{
name|filter
operator|=
name|projectSingleConfig
operator|.
name|SourceFiles
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filtername
operator|==
literal|"Headers"
condition|)
block|{
name|filter
operator|=
name|projectSingleConfig
operator|.
name|HeaderFiles
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filtername
operator|==
literal|"GeneratedFiles"
condition|)
block|{
name|filter
operator|=
name|projectSingleConfig
operator|.
name|GeneratedFiles
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filtername
operator|==
literal|"LexYaccFiles"
condition|)
block|{
name|filter
operator|=
name|projectSingleConfig
operator|.
name|LexYaccFiles
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filtername
operator|==
literal|"TranslationFiles"
condition|)
block|{
name|filter
operator|=
name|projectSingleConfig
operator|.
name|TranslationFiles
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filtername
operator|==
literal|"FormFiles"
condition|)
block|{
name|filter
operator|=
name|projectSingleConfig
operator|.
name|FormFiles
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filtername
operator|==
literal|"ResourceFiles"
condition|)
block|{
name|filter
operator|=
name|projectSingleConfig
operator|.
name|ResourceFiles
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filtername
operator|==
literal|"DeploymentFiles"
condition|)
block|{
name|filter
operator|=
name|projectSingleConfig
operator|.
name|DeploymentFiles
expr_stmt|;
block|}
else|else
block|{
comment|// ExtraCompilers
name|filter
operator|=
name|project
operator|.
name|SingleProjects
index|[
name|i
index|]
operator|.
name|filterForExtraCompiler
argument_list|(
name|filtername
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|filter
operator|.
name|Config
condition|)
comment|// only if the filter is not empty
name|outputFileConfig
argument_list|(
name|filter
argument_list|,
name|xml
argument_list|,
name|info
operator|.
name|file
argument_list|)
expr_stmt|;
block|}
name|xml
operator|<<
name|closetag
argument_list|(
name|q_File
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|outputFileConfig
name|void
name|VCProjectWriter
operator|::
name|outputFileConfig
parameter_list|(
name|VCFilter
modifier|&
name|filter
parameter_list|,
name|XmlOutput
modifier|&
name|xml
parameter_list|,
specifier|const
name|QString
modifier|&
name|filename
parameter_list|)
block|{
comment|// Clearing each filter tool
name|filter
operator|.
name|useCustomBuildTool
operator|=
literal|false
expr_stmt|;
name|filter
operator|.
name|useCompilerTool
operator|=
literal|false
expr_stmt|;
name|filter
operator|.
name|CustomBuildTool
operator|=
name|VCCustomBuildTool
argument_list|()
expr_stmt|;
name|filter
operator|.
name|CompilerTool
operator|=
name|VCCLCompilerTool
argument_list|()
expr_stmt|;
comment|// Unset some default options
name|filter
operator|.
name|CustomBuildTool
operator|.
name|config
operator|=
name|filter
operator|.
name|Config
expr_stmt|;
name|filter
operator|.
name|CompilerTool
operator|.
name|BufferSecurityCheck
operator|=
name|unset
expr_stmt|;
name|filter
operator|.
name|CompilerTool
operator|.
name|DebugInformationFormat
operator|=
name|debugUnknown
expr_stmt|;
name|filter
operator|.
name|CompilerTool
operator|.
name|ExceptionHandling
operator|=
name|ehDefault
expr_stmt|;
name|filter
operator|.
name|CompilerTool
operator|.
name|GeneratePreprocessedFile
operator|=
name|preprocessUnknown
expr_stmt|;
name|filter
operator|.
name|CompilerTool
operator|.
name|Optimization
operator|=
name|optimizeDefault
expr_stmt|;
name|filter
operator|.
name|CompilerTool
operator|.
name|ProgramDataBaseFileName
operator|.
name|clear
argument_list|()
expr_stmt|;
name|filter
operator|.
name|CompilerTool
operator|.
name|RuntimeLibrary
operator|=
name|rtUnknown
expr_stmt|;
name|filter
operator|.
name|CompilerTool
operator|.
name|WarningLevel
operator|=
name|warningLevelUnknown
expr_stmt|;
name|filter
operator|.
name|CompilerTool
operator|.
name|config
operator|=
name|filter
operator|.
name|Config
expr_stmt|;
name|bool
name|inBuild
init|=
literal|false
decl_stmt|;
name|VCFilterFile
name|info
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|filter
operator|.
name|Files
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|filter
operator|.
name|Files
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|file
operator|==
name|filename
condition|)
block|{
name|info
operator|=
name|filter
operator|.
name|Files
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|inBuild
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|inBuild
operator|&=
operator|!
name|info
operator|.
name|excludeFromBuild
expr_stmt|;
if|if
condition|(
name|inBuild
condition|)
block|{
name|filter
operator|.
name|addExtraCompiler
argument_list|(
name|info
argument_list|)
expr_stmt|;
if|if
condition|(
name|filter
operator|.
name|Project
operator|->
name|usePCH
condition|)
name|filter
operator|.
name|modifyPCHstage
argument_list|(
name|info
operator|.
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Excluded files uses an empty compiler stage
if|if
condition|(
name|info
operator|.
name|excludeFromBuild
condition|)
name|filter
operator|.
name|useCompilerTool
operator|=
literal|true
expr_stmt|;
block|}
comment|// Actual XML output ----------------------------------
if|if
condition|(
name|filter
operator|.
name|useCustomBuildTool
operator|||
name|filter
operator|.
name|useCompilerTool
operator|||
operator|!
name|inBuild
condition|)
block|{
name|xml
operator|<<
name|tag
argument_list|(
name|_FileConfiguration
argument_list|)
operator|<<
name|attr
argument_list|(
name|_Name
argument_list|,
name|filter
operator|.
name|Config
operator|->
name|Name
argument_list|)
operator|<<
operator|(
operator|!
name|inBuild
condition|?
name|attrS
argument_list|(
name|_ExcludedFromBuild
argument_list|,
literal|"true"
argument_list|)
else|:
name|noxml
argument_list|()
operator|)
expr_stmt|;
if|if
condition|(
name|filter
operator|.
name|useCustomBuildTool
condition|)
name|filter
operator|.
name|Project
operator|->
name|projectWriter
operator|->
name|write
argument_list|(
name|xml
argument_list|,
name|filter
operator|.
name|CustomBuildTool
argument_list|)
expr_stmt|;
if|if
condition|(
name|filter
operator|.
name|useCompilerTool
condition|)
name|filter
operator|.
name|Project
operator|->
name|projectWriter
operator|->
name|write
argument_list|(
name|xml
argument_list|,
name|filter
operator|.
name|CompilerTool
argument_list|)
expr_stmt|;
name|xml
operator|<<
name|closetag
argument_list|(
name|_FileConfiguration
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
