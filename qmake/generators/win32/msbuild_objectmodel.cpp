begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the qmake application of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"msvc_objectmodel.h"
end_include
begin_include
include|#
directive|include
file|"msbuild_objectmodel.h"
end_include
begin_include
include|#
directive|include
file|"msvc_vcproj.h"
end_include
begin_include
include|#
directive|include
file|"msvc_vcxproj.h"
end_include
begin_include
include|#
directive|include
file|<qstringlist.h>
end_include
begin_include
include|#
directive|include
file|<qfileinfo.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
comment|// XML Tags ---------------------------------------------------------
DECL|variable|_CLCompile
specifier|const
name|char
name|_CLCompile
index|[]
init|=
literal|"ClCompile"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ItemGroup
specifier|const
name|char
name|_ItemGroup
index|[]
init|=
literal|"ItemGroup"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_Link
specifier|const
name|char
name|_Link
index|[]
init|=
literal|"Link"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_Midl
specifier|const
name|char
name|_Midl
index|[]
init|=
literal|"Midl"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ResourceCompile
specifier|const
name|char
name|_ResourceCompile
index|[]
init|=
literal|"ResourceCompile"
decl_stmt|;
end_decl_stmt
begin_comment
comment|// XML Properties ---------------------------------------------------
end_comment
begin_decl_stmt
DECL|variable|_AddModuleNamesToAssembly
specifier|const
name|char
name|_AddModuleNamesToAssembly
index|[]
init|=
literal|"AddModuleNamesToAssembly"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_AdditionalDependencies
specifier|const
name|char
name|_AdditionalDependencies
index|[]
init|=
literal|"AdditionalDependencies"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_AdditionalIncludeDirectories
specifier|const
name|char
name|_AdditionalIncludeDirectories
index|[]
init|=
literal|"AdditionalIncludeDirectories"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_AdditionalLibraryDirectories
specifier|const
name|char
name|_AdditionalLibraryDirectories
index|[]
init|=
literal|"AdditionalLibraryDirectories"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_AdditionalManifestDependencies
specifier|const
name|char
name|_AdditionalManifestDependencies
index|[]
init|=
literal|"AdditionalManifestDependencies"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_AdditionalOptions
specifier|const
name|char
name|_AdditionalOptions
index|[]
init|=
literal|"AdditionalOptions"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_AdditionalUsingDirectories
specifier|const
name|char
name|_AdditionalUsingDirectories
index|[]
init|=
literal|"AdditionalUsingDirectories"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_AllowIsolation
specifier|const
name|char
name|_AllowIsolation
index|[]
init|=
literal|"AllowIsolation"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_AlwaysAppend
specifier|const
name|char
name|_AlwaysAppend
index|[]
init|=
literal|"AlwaysAppend"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ApplicationConfigurationMode
specifier|const
name|char
name|_ApplicationConfigurationMode
index|[]
init|=
literal|"ApplicationConfigurationMode"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_AssemblerListingLocation
specifier|const
name|char
name|_AssemblerListingLocation
index|[]
init|=
literal|"AssemblerListingLocation"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_AssemblerOutput
specifier|const
name|char
name|_AssemblerOutput
index|[]
init|=
literal|"AssemblerOutput"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_AssemblyDebug
specifier|const
name|char
name|_AssemblyDebug
index|[]
init|=
literal|"AssemblyDebug"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_AssemblyLinkResource
specifier|const
name|char
name|_AssemblyLinkResource
index|[]
init|=
literal|"AssemblyLinkResource"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ATLMinimizesCRunTimeLibraryUsage
specifier|const
name|char
name|_ATLMinimizesCRunTimeLibraryUsage
index|[]
init|=
literal|"ATLMinimizesCRunTimeLibraryUsage"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_BaseAddress
specifier|const
name|char
name|_BaseAddress
index|[]
init|=
literal|"BaseAddress"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_BasicRuntimeChecks
specifier|const
name|char
name|_BasicRuntimeChecks
index|[]
init|=
literal|"BasicRuntimeChecks"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_BrowseInformation
specifier|const
name|char
name|_BrowseInformation
index|[]
init|=
literal|"BrowseInformation"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_BrowseInformationFile
specifier|const
name|char
name|_BrowseInformationFile
index|[]
init|=
literal|"BrowseInformationFile"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_BufferSecurityCheck
specifier|const
name|char
name|_BufferSecurityCheck
index|[]
init|=
literal|"BufferSecurityCheck"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_BuildBrowserInformation
specifier|const
name|char
name|_BuildBrowserInformation
index|[]
init|=
literal|"BuildBrowserInformation"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_CallingConvention
specifier|const
name|char
name|_CallingConvention
index|[]
init|=
literal|"CallingConvention"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_CharacterSet
specifier|const
name|char
name|_CharacterSet
index|[]
init|=
literal|"CharacterSet"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ClientStubFile
specifier|const
name|char
name|_ClientStubFile
index|[]
init|=
literal|"ClientStubFile"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_CLRImageType
specifier|const
name|char
name|_CLRImageType
index|[]
init|=
literal|"CLRImageType"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_CLRSupportLastError
specifier|const
name|char
name|_CLRSupportLastError
index|[]
init|=
literal|"CLRSupportLastError"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_CLRThreadAttribute
specifier|const
name|char
name|_CLRThreadAttribute
index|[]
init|=
literal|"CLRThreadAttribute"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_CLRUnmanagedCodeCheck
specifier|const
name|char
name|_CLRUnmanagedCodeCheck
index|[]
init|=
literal|"CLRUnmanagedCodeCheck"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_Command
specifier|const
name|char
name|_Command
index|[]
init|=
literal|"Command"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_CompileAs
specifier|const
name|char
name|_CompileAs
index|[]
init|=
literal|"CompileAs"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_CompileAsManaged
specifier|const
name|char
name|_CompileAsManaged
index|[]
init|=
literal|"CompileAsManaged"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ConfigurationType
specifier|const
name|char
name|_ConfigurationType
index|[]
init|=
literal|"ConfigurationType"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_CPreprocessOptions
specifier|const
name|char
name|_CPreprocessOptions
index|[]
init|=
literal|"CPreprocessOptions"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_CreateHotpatchableImage
specifier|const
name|char
name|_CreateHotpatchableImage
index|[]
init|=
literal|"CreateHotpatchableImage"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_CreateHotPatchableImage
specifier|const
name|char
name|_CreateHotPatchableImage
index|[]
init|=
literal|"CreateHotPatchableImage"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_Culture
specifier|const
name|char
name|_Culture
index|[]
init|=
literal|"Culture"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_DataExecutionPrevention
specifier|const
name|char
name|_DataExecutionPrevention
index|[]
init|=
literal|"DataExecutionPrevention"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_DebugInformationFormat
specifier|const
name|char
name|_DebugInformationFormat
index|[]
init|=
literal|"DebugInformationFormat"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_DefaultCharType
specifier|const
name|char
name|_DefaultCharType
index|[]
init|=
literal|"DefaultCharType"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_DelayLoadDLLs
specifier|const
name|char
name|_DelayLoadDLLs
index|[]
init|=
literal|"DelayLoadDLLs"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_DelaySign
specifier|const
name|char
name|_DelaySign
index|[]
init|=
literal|"DelaySign"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_DeleteExtensionsOnClean
specifier|const
name|char
name|_DeleteExtensionsOnClean
index|[]
init|=
literal|"DeleteExtensionsOnClean"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_DisableLanguageExtensions
specifier|const
name|char
name|_DisableLanguageExtensions
index|[]
init|=
literal|"DisableLanguageExtensions"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_DisableSpecificWarnings
specifier|const
name|char
name|_DisableSpecificWarnings
index|[]
init|=
literal|"DisableSpecificWarnings"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_DisplayLibrary
specifier|const
name|char
name|_DisplayLibrary
index|[]
init|=
literal|"DisplayLibrary"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_DLLDataFileName
specifier|const
name|char
name|_DLLDataFileName
index|[]
init|=
literal|"DLLDataFileName"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_EmbedManagedResourceFile
specifier|const
name|char
name|_EmbedManagedResourceFile
index|[]
init|=
literal|"EmbedManagedResourceFile"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_EnableCOMDATFolding
specifier|const
name|char
name|_EnableCOMDATFolding
index|[]
init|=
literal|"EnableCOMDATFolding"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_EnableUAC
specifier|const
name|char
name|_EnableUAC
index|[]
init|=
literal|"EnableUAC"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_EnableErrorChecks
specifier|const
name|char
name|_EnableErrorChecks
index|[]
init|=
literal|"EnableErrorChecks"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_EnableEnhancedInstructionSet
specifier|const
name|char
name|_EnableEnhancedInstructionSet
index|[]
init|=
literal|"EnableEnhancedInstructionSet"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_EnableFiberSafeOptimizations
specifier|const
name|char
name|_EnableFiberSafeOptimizations
index|[]
init|=
literal|"EnableFiberSafeOptimizations"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_EnablePREfast
specifier|const
name|char
name|_EnablePREfast
index|[]
init|=
literal|"EnablePREfast"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_EntryPointSymbol
specifier|const
name|char
name|_EntryPointSymbol
index|[]
init|=
literal|"EntryPointSymbol"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ErrorCheckAllocations
specifier|const
name|char
name|_ErrorCheckAllocations
index|[]
init|=
literal|"ErrorCheckAllocations"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ErrorCheckBounds
specifier|const
name|char
name|_ErrorCheckBounds
index|[]
init|=
literal|"ErrorCheckBounds"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ErrorCheckEnumRange
specifier|const
name|char
name|_ErrorCheckEnumRange
index|[]
init|=
literal|"ErrorCheckEnumRange"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ErrorCheckRefPointers
specifier|const
name|char
name|_ErrorCheckRefPointers
index|[]
init|=
literal|"ErrorCheckRefPointers"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ErrorCheckStubData
specifier|const
name|char
name|_ErrorCheckStubData
index|[]
init|=
literal|"ErrorCheckStubData"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ErrorReporting
specifier|const
name|char
name|_ErrorReporting
index|[]
init|=
literal|"ErrorReporting"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ExceptionHandling
specifier|const
name|char
name|_ExceptionHandling
index|[]
init|=
literal|"ExceptionHandling"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ExpandAttributedSource
specifier|const
name|char
name|_ExpandAttributedSource
index|[]
init|=
literal|"ExpandAttributedSource"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ExportNamedFunctions
specifier|const
name|char
name|_ExportNamedFunctions
index|[]
init|=
literal|"ExportNamedFunctions"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_FavorSizeOrSpeed
specifier|const
name|char
name|_FavorSizeOrSpeed
index|[]
init|=
literal|"FavorSizeOrSpeed"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_FloatingPointModel
specifier|const
name|char
name|_FloatingPointModel
index|[]
init|=
literal|"FloatingPointModel"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_FloatingPointExceptions
specifier|const
name|char
name|_FloatingPointExceptions
index|[]
init|=
literal|"FloatingPointExceptions"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ForceConformanceInForLoopScope
specifier|const
name|char
name|_ForceConformanceInForLoopScope
index|[]
init|=
literal|"ForceConformanceInForLoopScope"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ForceSymbolReferences
specifier|const
name|char
name|_ForceSymbolReferences
index|[]
init|=
literal|"ForceSymbolReferences"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ForcedIncludeFiles
specifier|const
name|char
name|_ForcedIncludeFiles
index|[]
init|=
literal|"ForcedIncludeFiles"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ForcedUsingFiles
specifier|const
name|char
name|_ForcedUsingFiles
index|[]
init|=
literal|"ForcedUsingFiles"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_FunctionLevelLinking
specifier|const
name|char
name|_FunctionLevelLinking
index|[]
init|=
literal|"FunctionLevelLinking"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_FunctionOrder
specifier|const
name|char
name|_FunctionOrder
index|[]
init|=
literal|"FunctionOrder"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_GenerateClientFiles
specifier|const
name|char
name|_GenerateClientFiles
index|[]
init|=
literal|"GenerateClientFiles"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_GenerateDebugInformation
specifier|const
name|char
name|_GenerateDebugInformation
index|[]
init|=
literal|"GenerateDebugInformation"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_GenerateManifest
specifier|const
name|char
name|_GenerateManifest
index|[]
init|=
literal|"GenerateManifest"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_GenerateMapFile
specifier|const
name|char
name|_GenerateMapFile
index|[]
init|=
literal|"GenerateMapFile"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_GenerateServerFiles
specifier|const
name|char
name|_GenerateServerFiles
index|[]
init|=
literal|"GenerateServerFiles"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_GenerateStublessProxies
specifier|const
name|char
name|_GenerateStublessProxies
index|[]
init|=
literal|"GenerateStublessProxies"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_GenerateTypeLibrary
specifier|const
name|char
name|_GenerateTypeLibrary
index|[]
init|=
literal|"GenerateTypeLibrary"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_GenerateXMLDocumentationFiles
specifier|const
name|char
name|_GenerateXMLDocumentationFiles
index|[]
init|=
literal|"GenerateXMLDocumentationFiles"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_HeaderFileName
specifier|const
name|char
name|_HeaderFileName
index|[]
init|=
literal|"HeaderFileName"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_HeapCommitSize
specifier|const
name|char
name|_HeapCommitSize
index|[]
init|=
literal|"HeapCommitSize"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_HeapReserveSize
specifier|const
name|char
name|_HeapReserveSize
index|[]
init|=
literal|"HeapReserveSize"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_IgnoreAllDefaultLibraries
specifier|const
name|char
name|_IgnoreAllDefaultLibraries
index|[]
init|=
literal|"IgnoreAllDefaultLibraries"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_IgnoreEmbeddedIDL
specifier|const
name|char
name|_IgnoreEmbeddedIDL
index|[]
init|=
literal|"IgnoreEmbeddedIDL"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_IgnoreImportLibrary
specifier|const
name|char
name|_IgnoreImportLibrary
index|[]
init|=
literal|"IgnoreImportLibrary"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_IgnoreSpecificDefaultLibraries
specifier|const
name|char
name|_IgnoreSpecificDefaultLibraries
index|[]
init|=
literal|"IgnoreSpecificDefaultLibraries"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_IgnoreStandardIncludePath
specifier|const
name|char
name|_IgnoreStandardIncludePath
index|[]
init|=
literal|"IgnoreStandardIncludePath"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ImportLibrary
specifier|const
name|char
name|_ImportLibrary
index|[]
init|=
literal|"ImportLibrary"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_InlineFunctionExpansion
specifier|const
name|char
name|_InlineFunctionExpansion
index|[]
init|=
literal|"InlineFunctionExpansion"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_IntrinsicFunctions
specifier|const
name|char
name|_IntrinsicFunctions
index|[]
init|=
literal|"IntrinsicFunctions"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_InterfaceIdentifierFileName
specifier|const
name|char
name|_InterfaceIdentifierFileName
index|[]
init|=
literal|"InterfaceIdentifierFileName"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_IntermediateDirectory
specifier|const
name|char
name|_IntermediateDirectory
index|[]
init|=
literal|"IntermediateDirectory"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_KeyContainer
specifier|const
name|char
name|_KeyContainer
index|[]
init|=
literal|"KeyContainer"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_KeyFile
specifier|const
name|char
name|_KeyFile
index|[]
init|=
literal|"KeyFile"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_LargeAddressAware
specifier|const
name|char
name|_LargeAddressAware
index|[]
init|=
literal|"LargeAddressAware"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_LinkDLL
specifier|const
name|char
name|_LinkDLL
index|[]
init|=
literal|"LinkDLL"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_LinkErrorReporting
specifier|const
name|char
name|_LinkErrorReporting
index|[]
init|=
literal|"LinkErrorReporting"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_LinkIncremental
specifier|const
name|char
name|_LinkIncremental
index|[]
init|=
literal|"LinkIncremental"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_LinkStatus
specifier|const
name|char
name|_LinkStatus
index|[]
init|=
literal|"LinkStatus"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_LinkTimeCodeGeneration
specifier|const
name|char
name|_LinkTimeCodeGeneration
index|[]
init|=
literal|"LinkTimeCodeGeneration"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_LocaleID
specifier|const
name|char
name|_LocaleID
index|[]
init|=
literal|"LocaleID"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ManifestFile
specifier|const
name|char
name|_ManifestFile
index|[]
init|=
literal|"ManifestFile"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_MapExports
specifier|const
name|char
name|_MapExports
index|[]
init|=
literal|"MapExports"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_MapFileName
specifier|const
name|char
name|_MapFileName
index|[]
init|=
literal|"MapFileName"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_MergedIDLBaseFileName
specifier|const
name|char
name|_MergedIDLBaseFileName
index|[]
init|=
literal|"MergedIDLBaseFileName"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_MergeSections
specifier|const
name|char
name|_MergeSections
index|[]
init|=
literal|"MergeSections"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_Message
specifier|const
name|char
name|_Message
index|[]
init|=
literal|"Message"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_MidlCommandFile
specifier|const
name|char
name|_MidlCommandFile
index|[]
init|=
literal|"MidlCommandFile"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_MinimalRebuild
specifier|const
name|char
name|_MinimalRebuild
index|[]
init|=
literal|"MinimalRebuild"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_MkTypLibCompatible
specifier|const
name|char
name|_MkTypLibCompatible
index|[]
init|=
literal|"MkTypLibCompatible"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ModuleDefinitionFile
specifier|const
name|char
name|_ModuleDefinitionFile
index|[]
init|=
literal|"ModuleDefinitionFile"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_MultiProcessorCompilation
specifier|const
name|char
name|_MultiProcessorCompilation
index|[]
init|=
literal|"MultiProcessorCompilation"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_Name
specifier|const
name|char
name|_Name
index|[]
init|=
literal|"Name"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_NoEntryPoint
specifier|const
name|char
name|_NoEntryPoint
index|[]
init|=
literal|"NoEntryPoint"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_NullTerminateStrings
specifier|const
name|char
name|_NullTerminateStrings
index|[]
init|=
literal|"NullTerminateStrings"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ObjectFiles
specifier|const
name|char
name|_ObjectFiles
index|[]
init|=
literal|"ObjectFiles"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ObjectFileName
specifier|const
name|char
name|_ObjectFileName
index|[]
init|=
literal|"ObjectFileName"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_OmitDefaultLibName
specifier|const
name|char
name|_OmitDefaultLibName
index|[]
init|=
literal|"OmitDefaultLibName"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_OmitFramePointers
specifier|const
name|char
name|_OmitFramePointers
index|[]
init|=
literal|"OmitFramePointers"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_OpenMPSupport
specifier|const
name|char
name|_OpenMPSupport
index|[]
init|=
literal|"OpenMPSupport"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_Optimization
specifier|const
name|char
name|_Optimization
index|[]
init|=
literal|"Optimization"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_OptimizeReferences
specifier|const
name|char
name|_OptimizeReferences
index|[]
init|=
literal|"OptimizeReferences"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_OutputDirectory
specifier|const
name|char
name|_OutputDirectory
index|[]
init|=
literal|"OutputDirectory"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_OutputFile
specifier|const
name|char
name|_OutputFile
index|[]
init|=
literal|"OutputFile"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_PrecompiledHeader
specifier|const
name|char
name|_PrecompiledHeader
index|[]
init|=
literal|"PrecompiledHeader"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_PrecompiledHeaderFile
specifier|const
name|char
name|_PrecompiledHeaderFile
index|[]
init|=
literal|"PrecompiledHeaderFile"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_PrecompiledHeaderOutputFile
specifier|const
name|char
name|_PrecompiledHeaderOutputFile
index|[]
init|=
literal|"PrecompiledHeaderOutputFile"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_PreprocessorDefinitions
specifier|const
name|char
name|_PreprocessorDefinitions
index|[]
init|=
literal|"PreprocessorDefinitions"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_PreprocessKeepComments
specifier|const
name|char
name|_PreprocessKeepComments
index|[]
init|=
literal|"PreprocessKeepComments"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_PreprocessOutputPath
specifier|const
name|char
name|_PreprocessOutputPath
index|[]
init|=
literal|"PreprocessOutputPath"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_PreprocessSuppressLineNumbers
specifier|const
name|char
name|_PreprocessSuppressLineNumbers
index|[]
init|=
literal|"PreprocessSuppressLineNumbers"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_PreprocessToFile
specifier|const
name|char
name|_PreprocessToFile
index|[]
init|=
literal|"PreprocessToFile"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_PreventDllBinding
specifier|const
name|char
name|_PreventDllBinding
index|[]
init|=
literal|"PreventDllBinding"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_PrimaryOutput
specifier|const
name|char
name|_PrimaryOutput
index|[]
init|=
literal|"PrimaryOutput"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ProcessorNumber
specifier|const
name|char
name|_ProcessorNumber
index|[]
init|=
literal|"ProcessorNumber"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ProgramDatabase
specifier|const
name|char
name|_ProgramDatabase
index|[]
init|=
literal|"ProgramDatabase"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ProgramDataBaseFileName
specifier|const
name|char
name|_ProgramDataBaseFileName
index|[]
init|=
literal|"ProgramDataBaseFileName"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ProgramDatabaseFile
specifier|const
name|char
name|_ProgramDatabaseFile
index|[]
init|=
literal|"ProgramDatabaseFile"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ProxyFileName
specifier|const
name|char
name|_ProxyFileName
index|[]
init|=
literal|"ProxyFileName"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_RandomizedBaseAddress
specifier|const
name|char
name|_RandomizedBaseAddress
index|[]
init|=
literal|"RandomizedBaseAddress"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_RedirectOutputAndErrors
specifier|const
name|char
name|_RedirectOutputAndErrors
index|[]
init|=
literal|"RedirectOutputAndErrors"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_RegisterOutput
specifier|const
name|char
name|_RegisterOutput
index|[]
init|=
literal|"RegisterOutput"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_RemoveObjects
specifier|const
name|char
name|_RemoveObjects
index|[]
init|=
literal|"RemoveObjects"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ResourceOutputFileName
specifier|const
name|char
name|_ResourceOutputFileName
index|[]
init|=
literal|"ResourceOutputFileName"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_RuntimeLibrary
specifier|const
name|char
name|_RuntimeLibrary
index|[]
init|=
literal|"RuntimeLibrary"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_RuntimeTypeInfo
specifier|const
name|char
name|_RuntimeTypeInfo
index|[]
init|=
literal|"RuntimeTypeInfo"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_SectionAlignment
specifier|const
name|char
name|_SectionAlignment
index|[]
init|=
literal|"SectionAlignment"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ServerStubFile
specifier|const
name|char
name|_ServerStubFile
index|[]
init|=
literal|"ServerStubFile"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_SetChecksum
specifier|const
name|char
name|_SetChecksum
index|[]
init|=
literal|"SetChecksum"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ShowIncludes
specifier|const
name|char
name|_ShowIncludes
index|[]
init|=
literal|"ShowIncludes"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ShowProgress
specifier|const
name|char
name|_ShowProgress
index|[]
init|=
literal|"ShowProgress"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_SmallerTypeCheck
specifier|const
name|char
name|_SmallerTypeCheck
index|[]
init|=
literal|"SmallerTypeCheck"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_StackCommitSize
specifier|const
name|char
name|_StackCommitSize
index|[]
init|=
literal|"StackCommitSize"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_StackReserveSize
specifier|const
name|char
name|_StackReserveSize
index|[]
init|=
literal|"StackReserveSize"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_StringPooling
specifier|const
name|char
name|_StringPooling
index|[]
init|=
literal|"StringPooling"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_StripPrivateSymbols
specifier|const
name|char
name|_StripPrivateSymbols
index|[]
init|=
literal|"StripPrivateSymbols"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_StructMemberAlignment
specifier|const
name|char
name|_StructMemberAlignment
index|[]
init|=
literal|"StructMemberAlignment"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_SubSystem
specifier|const
name|char
name|_SubSystem
index|[]
init|=
literal|"SubSystem"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_SupportNobindOfDelayLoadedDLL
specifier|const
name|char
name|_SupportNobindOfDelayLoadedDLL
index|[]
init|=
literal|"SupportNobindOfDelayLoadedDLL"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_SupportUnloadOfDelayLoadedDLL
specifier|const
name|char
name|_SupportUnloadOfDelayLoadedDLL
index|[]
init|=
literal|"SupportUnloadOfDelayLoadedDLL"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_SuppressCompilerWarnings
specifier|const
name|char
name|_SuppressCompilerWarnings
index|[]
init|=
literal|"SuppressCompilerWarnings"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_SuppressStartupBanner
specifier|const
name|char
name|_SuppressStartupBanner
index|[]
init|=
literal|"SuppressStartupBanner"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_SwapRunFromCD
specifier|const
name|char
name|_SwapRunFromCD
index|[]
init|=
literal|"SwapRunFromCD"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_SwapRunFromNet
specifier|const
name|char
name|_SwapRunFromNet
index|[]
init|=
literal|"SwapRunFromNet"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_TargetEnvironment
specifier|const
name|char
name|_TargetEnvironment
index|[]
init|=
literal|"TargetEnvironment"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_TargetMachine
specifier|const
name|char
name|_TargetMachine
index|[]
init|=
literal|"TargetMachine"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_TerminalServerAware
specifier|const
name|char
name|_TerminalServerAware
index|[]
init|=
literal|"TerminalServerAware"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_TrackerLogDirectory
specifier|const
name|char
name|_TrackerLogDirectory
index|[]
init|=
literal|"TrackerLogDirectory"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_TreatLibWarningAsErrors
specifier|const
name|char
name|_TreatLibWarningAsErrors
index|[]
init|=
literal|"TreatLibWarningAsErrors"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_TreatLinkerWarningAsErrors
specifier|const
name|char
name|_TreatLinkerWarningAsErrors
index|[]
init|=
literal|"TreatLinkerWarningAsErrors"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_TreatSpecificWarningsAsErrors
specifier|const
name|char
name|_TreatSpecificWarningsAsErrors
index|[]
init|=
literal|"TreatSpecificWarningsAsErrors"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_TreatWarningAsError
specifier|const
name|char
name|_TreatWarningAsError
index|[]
init|=
literal|"TreatWarningAsError"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_TreatWChar_tAsBuiltInType
specifier|const
name|char
name|_TreatWChar_tAsBuiltInType
index|[]
init|=
literal|"TreatWChar_tAsBuiltInType"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_TurnOffAssemblyGeneration
specifier|const
name|char
name|_TurnOffAssemblyGeneration
index|[]
init|=
literal|"TurnOffAssemblyGeneration"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_TypeLibFormat
specifier|const
name|char
name|_TypeLibFormat
index|[]
init|=
literal|"TypeLibFormat"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_TypeLibraryFile
specifier|const
name|char
name|_TypeLibraryFile
index|[]
init|=
literal|"TypeLibraryFile"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_TypeLibraryName
specifier|const
name|char
name|_TypeLibraryName
index|[]
init|=
literal|"TypeLibraryName"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_TypeLibraryResourceID
specifier|const
name|char
name|_TypeLibraryResourceID
index|[]
init|=
literal|"TypeLibraryResourceID"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_UACExecutionLevel
specifier|const
name|char
name|_UACExecutionLevel
index|[]
init|=
literal|"UACExecutionLevel"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_UACUIAccess
specifier|const
name|char
name|_UACUIAccess
index|[]
init|=
literal|"UACUIAccess"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_UndefineAllPreprocessorDefinitions
specifier|const
name|char
name|_UndefineAllPreprocessorDefinitions
index|[]
init|=
literal|"UndefineAllPreprocessorDefinitions"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_UndefinePreprocessorDefinitions
specifier|const
name|char
name|_UndefinePreprocessorDefinitions
index|[]
init|=
literal|"UndefinePreprocessorDefinitions"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_UseFullPaths
specifier|const
name|char
name|_UseFullPaths
index|[]
init|=
literal|"UseFullPaths"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_UseOfATL
specifier|const
name|char
name|_UseOfATL
index|[]
init|=
literal|"UseOfATL"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_UseOfMfc
specifier|const
name|char
name|_UseOfMfc
index|[]
init|=
literal|"UseOfMfc"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_UseUnicodeForAssemblerListing
specifier|const
name|char
name|_UseUnicodeForAssemblerListing
index|[]
init|=
literal|"UseUnicodeForAssemblerListing"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_ValidateAllParameters
specifier|const
name|char
name|_ValidateAllParameters
index|[]
init|=
literal|"ValidateAllParameters"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_VCCustomBuildTool
specifier|const
name|char
name|_VCCustomBuildTool
index|[]
init|=
literal|"VCCustomBuildTool"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_Verbose
specifier|const
name|char
name|_Verbose
index|[]
init|=
literal|"Verbose"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_Version
specifier|const
name|char
name|_Version
index|[]
init|=
literal|"Version"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_WarnAsError
specifier|const
name|char
name|_WarnAsError
index|[]
init|=
literal|"WarnAsError"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_WarningLevel
specifier|const
name|char
name|_WarningLevel
index|[]
init|=
literal|"WarningLevel"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_WholeProgramOptimization
specifier|const
name|char
name|_WholeProgramOptimization
index|[]
init|=
literal|"WholeProgramOptimization"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|_XMLDocumentationFileName
specifier|const
name|char
name|_XMLDocumentationFileName
index|[]
init|=
literal|"XMLDocumentationFileName"
decl_stmt|;
end_decl_stmt
begin_comment
comment|// XmlOutput stream functions ------------------------------
end_comment
begin_function
DECL|function|attrTagT
specifier|inline
name|XmlOutput
operator|::
name|xml_output
name|attrTagT
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|triState
name|v
parameter_list|)
block|{
if|if
condition|(
name|v
operator|==
name|unset
condition|)
return|return
name|noxml
argument_list|()
return|;
return|return
name|tagValue
argument_list|(
name|name
argument_list|,
operator|(
name|v
operator|==
name|_True
condition|?
literal|"true"
else|:
literal|"false"
operator|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|attrTagL
specifier|inline
name|XmlOutput
operator|::
name|xml_output
name|attrTagL
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|qint64
name|v
parameter_list|)
block|{
return|return
name|tagValue
argument_list|(
name|name
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|v
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*ifNot version*/
end_comment
begin_function
DECL|function|attrTagL
specifier|inline
name|XmlOutput
operator|::
name|xml_output
name|attrTagL
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|qint64
name|v
parameter_list|,
name|qint64
name|ifn
parameter_list|)
block|{
if|if
condition|(
name|v
operator|==
name|ifn
condition|)
return|return
name|noxml
argument_list|()
return|;
return|return
name|tagValue
argument_list|(
name|name
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|v
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|attrTagS
specifier|inline
name|XmlOutput
operator|::
name|xml_output
name|attrTagS
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|QString
modifier|&
name|v
parameter_list|)
block|{
if|if
condition|(
name|v
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|noxml
argument_list|()
return|;
return|return
name|tagValue
argument_list|(
name|name
argument_list|,
name|v
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|attrTagX
specifier|inline
name|XmlOutput
operator|::
name|xml_output
name|attrTagX
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|v
parameter_list|,
specifier|const
name|char
modifier|*
name|s
init|=
literal|","
parameter_list|)
block|{
if|if
condition|(
name|v
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|noxml
argument_list|()
return|;
name|QStringList
name|temp
init|=
name|v
decl_stmt|;
name|temp
operator|.
name|append
argument_list|(
name|QString
argument_list|(
literal|"%(%1)"
argument_list|)
operator|.
name|arg
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|tagValue
argument_list|(
name|name
argument_list|,
name|temp
operator|.
name|join
argument_list|(
name|s
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|valueTagX
specifier|inline
name|XmlOutput
operator|::
name|xml_output
name|valueTagX
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|v
parameter_list|,
specifier|const
name|char
modifier|*
name|s
init|=
literal|" "
parameter_list|)
block|{
if|if
condition|(
name|v
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|noxml
argument_list|()
return|;
return|return
name|valueTag
argument_list|(
name|v
operator|.
name|join
argument_list|(
name|s
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|valueTagDefX
specifier|inline
name|XmlOutput
operator|::
name|xml_output
name|valueTagDefX
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|v
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|,
specifier|const
name|char
modifier|*
name|s
init|=
literal|" "
parameter_list|)
block|{
if|if
condition|(
name|v
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|noxml
argument_list|()
return|;
name|QStringList
name|temp
init|=
name|v
decl_stmt|;
name|temp
operator|.
name|append
argument_list|(
name|QString
argument_list|(
literal|"%(%1)"
argument_list|)
operator|.
name|arg
argument_list|(
name|tagName
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|valueTag
argument_list|(
name|temp
operator|.
name|join
argument_list|(
name|s
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|valueTagT
specifier|inline
name|XmlOutput
operator|::
name|xml_output
name|valueTagT
parameter_list|(
specifier|const
name|triState
name|v
parameter_list|)
block|{
if|if
condition|(
name|v
operator|==
name|unset
condition|)
return|return
name|noxml
argument_list|()
return|;
return|return
name|valueTag
argument_list|(
name|v
operator|==
name|_True
condition|?
literal|"true"
else|:
literal|"false"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|vcxCommandSeparator
specifier|static
name|QString
name|vcxCommandSeparator
parameter_list|()
block|{
comment|// MSBuild puts the contents of the custom commands into a batch file and calls it.
comment|// As we want every sub-command to be error-checked (as is done by makefile-based
comment|// backends), we insert the checks ourselves, using the undocumented jump target.
specifier|static
name|QString
name|cmdSep
init|=
name|QLatin1String
argument_list|(
literal|"&#x000D;&#x000A;if errorlevel 1 goto VCEnd&#x000D;&#x000A;"
argument_list|)
decl_stmt|;
return|return
name|cmdSep
return|;
block|}
end_function
begin_comment
comment|// Tree file generation ---------------------------------------------
end_comment
begin_function
DECL|function|generateXML
name|void
name|XTreeNode
operator|::
name|generateXML
parameter_list|(
name|XmlOutput
modifier|&
name|xml
parameter_list|,
name|XmlOutput
modifier|&
name|xmlFilter
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|,
name|VCProject
modifier|&
name|tool
parameter_list|,
specifier|const
name|QString
modifier|&
name|filter
parameter_list|)
block|{
if|if
condition|(
name|children
operator|.
name|size
argument_list|()
condition|)
block|{
comment|// Filter
name|QString
name|tempFilterName
decl_stmt|;
name|ChildrenMap
operator|::
name|ConstIterator
name|it
decl_stmt|,
name|end
init|=
name|children
operator|.
name|constEnd
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|tagName
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|tempFilterName
operator|.
name|append
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|tempFilterName
operator|.
name|append
argument_list|(
literal|"\\"
argument_list|)
expr_stmt|;
name|tempFilterName
operator|.
name|append
argument_list|(
name|tagName
argument_list|)
expr_stmt|;
name|xmlFilter
operator|<<
name|tag
argument_list|(
name|_ItemGroup
argument_list|)
expr_stmt|;
name|xmlFilter
operator|<<
name|tag
argument_list|(
literal|"Filter"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Include"
argument_list|,
name|tempFilterName
argument_list|)
operator|<<
name|closetag
argument_list|()
expr_stmt|;
name|xmlFilter
operator|<<
name|closetag
argument_list|()
expr_stmt|;
block|}
comment|// First round, do nested filters
for|for
control|(
name|it
operator|=
name|children
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|end
condition|;
operator|++
name|it
control|)
if|if
condition|(
operator|(
operator|*
name|it
operator|)
operator|->
name|children
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|tempFilterName
operator|.
name|isEmpty
argument_list|()
condition|)
operator|(
operator|*
name|it
operator|)
operator|->
name|generateXML
argument_list|(
name|xml
argument_list|,
name|xmlFilter
argument_list|,
name|it
operator|.
name|key
argument_list|()
argument_list|,
name|tool
argument_list|,
name|tempFilterName
argument_list|)
expr_stmt|;
else|else
operator|(
operator|*
name|it
operator|)
operator|->
name|generateXML
argument_list|(
name|xml
argument_list|,
name|xmlFilter
argument_list|,
name|it
operator|.
name|key
argument_list|()
argument_list|,
name|tool
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
comment|// Second round, do leafs
for|for
control|(
name|it
operator|=
name|children
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|end
condition|;
operator|++
name|it
control|)
if|if
condition|(
operator|!
operator|(
operator|*
name|it
operator|)
operator|->
name|children
operator|.
name|size
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|tempFilterName
operator|.
name|isEmpty
argument_list|()
condition|)
operator|(
operator|*
name|it
operator|)
operator|->
name|generateXML
argument_list|(
name|xml
argument_list|,
name|xmlFilter
argument_list|,
name|it
operator|.
name|key
argument_list|()
argument_list|,
name|tool
argument_list|,
name|tempFilterName
argument_list|)
expr_stmt|;
else|else
operator|(
operator|*
name|it
operator|)
operator|->
name|generateXML
argument_list|(
name|xml
argument_list|,
name|xmlFilter
argument_list|,
name|it
operator|.
name|key
argument_list|()
argument_list|,
name|tool
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// Leaf
name|xml
operator|<<
name|tag
argument_list|(
name|_ItemGroup
argument_list|)
expr_stmt|;
name|xmlFilter
operator|<<
name|tag
argument_list|(
name|_ItemGroup
argument_list|)
expr_stmt|;
name|VCXProjectWriter
operator|::
name|outputFileConfigs
argument_list|(
name|tool
argument_list|,
name|xml
argument_list|,
name|xmlFilter
argument_list|,
name|info
argument_list|,
name|filter
argument_list|)
expr_stmt|;
name|xmlFilter
operator|<<
name|closetag
argument_list|()
expr_stmt|;
name|xml
operator|<<
name|closetag
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// Flat file generation ---------------------------------------------
end_comment
begin_function
DECL|function|generateXML
name|void
name|XFlatNode
operator|::
name|generateXML
parameter_list|(
name|XmlOutput
modifier|&
name|xml
parameter_list|,
name|XmlOutput
modifier|&
name|xmlFilter
parameter_list|,
specifier|const
name|QString
modifier|&
comment|/*tagName*/
parameter_list|,
name|VCProject
modifier|&
name|tool
parameter_list|,
specifier|const
name|QString
modifier|&
name|filter
parameter_list|)
block|{
if|if
condition|(
name|children
operator|.
name|size
argument_list|()
condition|)
block|{
name|ChildrenMapFlat
operator|::
name|ConstIterator
name|it
init|=
name|children
operator|.
name|constBegin
argument_list|()
decl_stmt|;
name|ChildrenMapFlat
operator|::
name|ConstIterator
name|end
init|=
name|children
operator|.
name|constEnd
argument_list|()
decl_stmt|;
name|xml
operator|<<
name|tag
argument_list|(
name|_ItemGroup
argument_list|)
expr_stmt|;
name|xmlFilter
operator|<<
name|tag
argument_list|(
name|_ItemGroup
argument_list|)
expr_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|end
condition|;
operator|++
name|it
control|)
block|{
name|VCXProjectWriter
operator|::
name|outputFileConfigs
argument_list|(
name|tool
argument_list|,
name|xml
argument_list|,
name|xmlFilter
argument_list|,
operator|(
operator|*
name|it
operator|)
argument_list|,
name|filter
argument_list|)
expr_stmt|;
block|}
name|xml
operator|<<
name|closetag
argument_list|()
expr_stmt|;
name|xmlFilter
operator|<<
name|closetag
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|VCXProjectWriter
operator|::
name|write
parameter_list|(
name|XmlOutput
modifier|&
name|xml
parameter_list|,
name|VCProjectSingleConfig
modifier|&
name|tool
parameter_list|)
block|{
name|xml
operator|.
name|setIndentString
argument_list|(
literal|"  "
argument_list|)
expr_stmt|;
name|xml
operator|<<
name|decl
argument_list|(
literal|"1.0"
argument_list|,
literal|"utf-8"
argument_list|)
operator|<<
name|tag
argument_list|(
literal|"Project"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"DefaultTargets"
argument_list|,
literal|"Build"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"ToolsVersion"
argument_list|,
literal|"4.0"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"xmlns"
argument_list|,
literal|"http://schemas.microsoft.com/developer/msbuild/2003"
argument_list|)
operator|<<
name|tag
argument_list|(
literal|"ItemGroup"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Label"
argument_list|,
literal|"ProjectConfigurations"
argument_list|)
expr_stmt|;
name|xml
operator|<<
name|tag
argument_list|(
literal|"ProjectConfiguration"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Include"
argument_list|,
name|tool
operator|.
name|Configuration
operator|.
name|Name
argument_list|)
operator|<<
name|tagValue
argument_list|(
literal|"Configuration"
argument_list|,
name|tool
operator|.
name|Configuration
operator|.
name|ConfigurationName
argument_list|)
operator|<<
name|tagValue
argument_list|(
literal|"Platform"
argument_list|,
name|tool
operator|.
name|PlatformName
argument_list|)
operator|<<
name|closetag
argument_list|()
expr_stmt|;
name|xml
operator|<<
name|closetag
argument_list|()
operator|<<
name|tag
argument_list|(
literal|"PropertyGroup"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Label"
argument_list|,
literal|"Globals"
argument_list|)
operator|<<
name|tagValue
argument_list|(
literal|"ProjectGuid"
argument_list|,
name|tool
operator|.
name|ProjectGUID
argument_list|)
operator|<<
name|tagValue
argument_list|(
literal|"RootNamespace"
argument_list|,
name|tool
operator|.
name|Name
argument_list|)
operator|<<
name|tagValue
argument_list|(
literal|"Keyword"
argument_list|,
name|tool
operator|.
name|Keyword
argument_list|)
operator|<<
name|closetag
argument_list|()
expr_stmt|;
comment|// config part.
name|xml
operator|<<
name|import
argument_list|(
literal|"Project"
argument_list|,
literal|"$(VCTargetsPath)\\Microsoft.Cpp.Default.props"
argument_list|)
expr_stmt|;
name|write
argument_list|(
name|xml
argument_list|,
name|tool
operator|.
name|Configuration
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|condition
init|=
name|generateCondition
argument_list|(
name|tool
operator|.
name|Configuration
argument_list|)
decl_stmt|;
name|xml
operator|<<
name|import
argument_list|(
literal|"Project"
argument_list|,
literal|"$(VCTargetsPath)\\Microsoft.Cpp.props"
argument_list|)
expr_stmt|;
comment|// Extension settings
name|xml
operator|<<
name|tag
argument_list|(
literal|"ImportGroup"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Label"
argument_list|,
literal|"ExtensionSettings"
argument_list|)
operator|<<
name|closetag
argument_list|()
expr_stmt|;
comment|// PropertySheets
name|xml
operator|<<
name|tag
argument_list|(
literal|"ImportGroup"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Condition"
argument_list|,
name|condition
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Label"
argument_list|,
literal|"PropertySheets"
argument_list|)
expr_stmt|;
name|xml
operator|<<
name|tag
argument_list|(
literal|"Import"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Project"
argument_list|,
literal|"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Condition"
argument_list|,
literal|"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')"
argument_list|)
operator|<<
name|closetag
argument_list|()
operator|<<
name|closetag
argument_list|()
expr_stmt|;
comment|// UserMacros
name|xml
operator|<<
name|tag
argument_list|(
literal|"PropertyGroup"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Label"
argument_list|,
literal|"UserMacros"
argument_list|)
operator|<<
name|closetag
argument_list|()
expr_stmt|;
name|xml
operator|<<
name|tag
argument_list|(
literal|"PropertyGroup"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tool
operator|.
name|Configuration
operator|.
name|OutputDirectory
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|xml
operator|<<
name|tag
argument_list|(
literal|"OutDir"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Condition"
argument_list|,
name|condition
argument_list|)
operator|<<
name|valueTag
argument_list|(
name|tool
operator|.
name|Configuration
operator|.
name|OutputDirectory
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|tool
operator|.
name|Configuration
operator|.
name|IntermediateDirectory
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|xml
operator|<<
name|tag
argument_list|(
literal|"IntDir"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Condition"
argument_list|,
name|condition
argument_list|)
operator|<<
name|valueTag
argument_list|(
name|tool
operator|.
name|Configuration
operator|.
name|IntermediateDirectory
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|tool
operator|.
name|Configuration
operator|.
name|PrimaryOutput
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|xml
operator|<<
name|tag
argument_list|(
literal|"TargetName"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Condition"
argument_list|,
name|condition
argument_list|)
operator|<<
name|valueTag
argument_list|(
name|tool
operator|.
name|Configuration
operator|.
name|PrimaryOutput
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|tool
operator|.
name|Configuration
operator|.
name|PrimaryOutputExtension
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|xml
operator|<<
name|tag
argument_list|(
literal|"TargetExt"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Condition"
argument_list|,
name|condition
argument_list|)
operator|<<
name|valueTag
argument_list|(
name|tool
operator|.
name|Configuration
operator|.
name|PrimaryOutputExtension
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tool
operator|.
name|Configuration
operator|.
name|linker
operator|.
name|IgnoreImportLibrary
operator|!=
name|unset
condition|)
block|{
name|xml
operator|<<
name|tag
argument_list|(
literal|"IgnoreImportLibrary"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Condition"
argument_list|,
name|condition
argument_list|)
operator|<<
name|valueTagT
argument_list|(
name|tool
operator|.
name|Configuration
operator|.
name|linker
operator|.
name|IgnoreImportLibrary
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tool
operator|.
name|Configuration
operator|.
name|linker
operator|.
name|LinkIncremental
operator|!=
name|linkIncrementalDefault
condition|)
block|{
specifier|const
name|triState
name|ts
init|=
operator|(
name|tool
operator|.
name|Configuration
operator|.
name|linker
operator|.
name|LinkIncremental
operator|==
name|linkIncrementalYes
condition|?
name|_True
else|:
name|_False
operator|)
decl_stmt|;
name|xml
operator|<<
name|tag
argument_list|(
literal|"LinkIncremental"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Condition"
argument_list|,
name|condition
argument_list|)
operator|<<
name|valueTagT
argument_list|(
name|ts
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tool
operator|.
name|Configuration
operator|.
name|preBuild
operator|.
name|ExcludedFromBuild
operator|!=
name|unset
condition|)
block|{
name|xml
operator|<<
name|tag
argument_list|(
literal|"PreBuildEventUseInBuild"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Condition"
argument_list|,
name|condition
argument_list|)
operator|<<
name|valueTagT
argument_list|(
operator|!
name|tool
operator|.
name|Configuration
operator|.
name|preBuild
operator|.
name|ExcludedFromBuild
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tool
operator|.
name|Configuration
operator|.
name|preLink
operator|.
name|ExcludedFromBuild
operator|!=
name|unset
condition|)
block|{
name|xml
operator|<<
name|tag
argument_list|(
literal|"PreLinkEventUseInBuild"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Condition"
argument_list|,
name|condition
argument_list|)
operator|<<
name|valueTagT
argument_list|(
operator|!
name|tool
operator|.
name|Configuration
operator|.
name|preLink
operator|.
name|ExcludedFromBuild
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tool
operator|.
name|Configuration
operator|.
name|postBuild
operator|.
name|ExcludedFromBuild
operator|!=
name|unset
condition|)
block|{
name|xml
operator|<<
name|tag
argument_list|(
literal|"PostBuildEventUseInBuild"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Condition"
argument_list|,
name|condition
argument_list|)
operator|<<
name|valueTagT
argument_list|(
operator|!
name|tool
operator|.
name|Configuration
operator|.
name|postBuild
operator|.
name|ExcludedFromBuild
argument_list|)
expr_stmt|;
block|}
name|xml
operator|<<
name|closetag
argument_list|()
expr_stmt|;
name|xml
operator|<<
name|tag
argument_list|(
literal|"ItemDefinitionGroup"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Condition"
argument_list|,
name|condition
argument_list|)
expr_stmt|;
comment|// ClCompile
name|write
argument_list|(
name|xml
argument_list|,
name|tool
operator|.
name|Configuration
operator|.
name|compiler
argument_list|)
expr_stmt|;
comment|// Link
name|write
argument_list|(
name|xml
argument_list|,
name|tool
operator|.
name|Configuration
operator|.
name|linker
argument_list|)
expr_stmt|;
comment|// Midl
name|write
argument_list|(
name|xml
argument_list|,
name|tool
operator|.
name|Configuration
operator|.
name|idl
argument_list|)
expr_stmt|;
comment|// ResourceCompiler
name|write
argument_list|(
name|xml
argument_list|,
name|tool
operator|.
name|Configuration
operator|.
name|resource
argument_list|)
expr_stmt|;
comment|// Post build event
if|if
condition|(
name|tool
operator|.
name|Configuration
operator|.
name|postBuild
operator|.
name|ExcludedFromBuild
operator|!=
name|unset
condition|)
name|write
argument_list|(
name|xml
argument_list|,
name|tool
operator|.
name|Configuration
operator|.
name|postBuild
argument_list|)
expr_stmt|;
comment|// Pre build event
if|if
condition|(
name|tool
operator|.
name|Configuration
operator|.
name|preBuild
operator|.
name|ExcludedFromBuild
operator|!=
name|unset
condition|)
name|write
argument_list|(
name|xml
argument_list|,
name|tool
operator|.
name|Configuration
operator|.
name|preBuild
argument_list|)
expr_stmt|;
comment|// Pre link event
if|if
condition|(
name|tool
operator|.
name|Configuration
operator|.
name|preLink
operator|.
name|ExcludedFromBuild
operator|!=
name|unset
condition|)
name|write
argument_list|(
name|xml
argument_list|,
name|tool
operator|.
name|Configuration
operator|.
name|preLink
argument_list|)
expr_stmt|;
name|xml
operator|<<
name|closetag
argument_list|()
expr_stmt|;
name|QFile
name|filterFile
decl_stmt|;
name|filterFile
operator|.
name|setFileName
argument_list|(
name|Option
operator|::
name|output
operator|.
name|fileName
argument_list|()
operator|.
name|append
argument_list|(
literal|".filters"
argument_list|)
argument_list|)
expr_stmt|;
name|filterFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Text
operator||
name|QIODevice
operator|::
name|Truncate
argument_list|)
expr_stmt|;
name|QTextStream
name|ts
argument_list|(
operator|&
name|filterFile
argument_list|)
decl_stmt|;
name|XmlOutput
name|xmlFilter
argument_list|(
name|ts
argument_list|,
name|XmlOutput
operator|::
name|NoConversion
argument_list|)
decl_stmt|;
name|xmlFilter
operator|.
name|setIndentString
argument_list|(
literal|"  "
argument_list|)
expr_stmt|;
name|xmlFilter
operator|<<
name|decl
argument_list|(
literal|"1.0"
argument_list|,
literal|"utf-8"
argument_list|)
operator|<<
name|tag
argument_list|(
literal|"Project"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"ToolsVersion"
argument_list|,
literal|"4.0"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"xmlns"
argument_list|,
literal|"http://schemas.microsoft.com/developer/msbuild/2003"
argument_list|)
expr_stmt|;
name|xmlFilter
operator|<<
name|tag
argument_list|(
literal|"ItemGroup"
argument_list|)
expr_stmt|;
name|VCProject
name|tempProj
decl_stmt|;
name|tempProj
operator|.
name|SingleProjects
operator|+=
name|tool
expr_stmt|;
name|addFilters
argument_list|(
name|tempProj
argument_list|,
name|xmlFilter
argument_list|,
literal|"Form Files"
argument_list|)
expr_stmt|;
name|addFilters
argument_list|(
name|tempProj
argument_list|,
name|xmlFilter
argument_list|,
literal|"Generated Files"
argument_list|)
expr_stmt|;
name|addFilters
argument_list|(
name|tempProj
argument_list|,
name|xmlFilter
argument_list|,
literal|"Header Files"
argument_list|)
expr_stmt|;
name|addFilters
argument_list|(
name|tempProj
argument_list|,
name|xmlFilter
argument_list|,
literal|"LexYacc Files"
argument_list|)
expr_stmt|;
name|addFilters
argument_list|(
name|tempProj
argument_list|,
name|xmlFilter
argument_list|,
literal|"Resource Files"
argument_list|)
expr_stmt|;
name|addFilters
argument_list|(
name|tempProj
argument_list|,
name|xmlFilter
argument_list|,
literal|"Source Files"
argument_list|)
expr_stmt|;
name|addFilters
argument_list|(
name|tempProj
argument_list|,
name|xmlFilter
argument_list|,
literal|"Translation Files"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|tempProj
operator|.
name|ExtraCompilers
operator|.
name|count
argument_list|()
condition|;
operator|++
name|x
control|)
name|addFilters
argument_list|(
name|tempProj
argument_list|,
name|xmlFilter
argument_list|,
name|tempProj
operator|.
name|ExtraCompilers
operator|.
name|at
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|xmlFilter
operator|<<
name|closetag
argument_list|()
expr_stmt|;
name|outputFilter
argument_list|(
name|tempProj
argument_list|,
name|xml
argument_list|,
name|xmlFilter
argument_list|,
literal|"Source Files"
argument_list|)
expr_stmt|;
name|outputFilter
argument_list|(
name|tempProj
argument_list|,
name|xml
argument_list|,
name|xmlFilter
argument_list|,
literal|"Header Files"
argument_list|)
expr_stmt|;
name|outputFilter
argument_list|(
name|tempProj
argument_list|,
name|xml
argument_list|,
name|xmlFilter
argument_list|,
literal|"Generated Files"
argument_list|)
expr_stmt|;
name|outputFilter
argument_list|(
name|tempProj
argument_list|,
name|xml
argument_list|,
name|xmlFilter
argument_list|,
literal|"LexYacc Files"
argument_list|)
expr_stmt|;
name|outputFilter
argument_list|(
name|tempProj
argument_list|,
name|xml
argument_list|,
name|xmlFilter
argument_list|,
literal|"Translation Files"
argument_list|)
expr_stmt|;
name|outputFilter
argument_list|(
name|tempProj
argument_list|,
name|xml
argument_list|,
name|xmlFilter
argument_list|,
literal|"Form Files"
argument_list|)
expr_stmt|;
name|outputFilter
argument_list|(
name|tempProj
argument_list|,
name|xml
argument_list|,
name|xmlFilter
argument_list|,
literal|"Resource Files"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|tempProj
operator|.
name|ExtraCompilers
operator|.
name|count
argument_list|()
condition|;
operator|++
name|x
control|)
block|{
name|outputFilter
argument_list|(
name|tempProj
argument_list|,
name|xml
argument_list|,
name|xmlFilter
argument_list|,
name|tempProj
operator|.
name|ExtraCompilers
operator|.
name|at
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|xml
operator|<<
name|import
argument_list|(
literal|"Project"
argument_list|,
literal|"$(VCTargetsPath)\\Microsoft.Cpp.targets"
argument_list|)
expr_stmt|;
name|xml
operator|<<
name|tag
argument_list|(
literal|"ImportGroup"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Label"
argument_list|,
literal|"ExtensionTargets"
argument_list|)
operator|<<
name|closetag
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|write
name|void
name|VCXProjectWriter
operator|::
name|write
parameter_list|(
name|XmlOutput
modifier|&
name|xml
parameter_list|,
name|VCProject
modifier|&
name|tool
parameter_list|)
block|{
if|if
condition|(
name|tool
operator|.
name|SingleProjects
operator|.
name|count
argument_list|()
operator|==
literal|0
condition|)
block|{
name|warn_msg
argument_list|(
name|WarnLogic
argument_list|,
literal|"Generator: .NET: no single project in merge project, no output"
argument_list|)
expr_stmt|;
return|return;
block|}
name|xml
operator|.
name|setIndentString
argument_list|(
literal|"  "
argument_list|)
expr_stmt|;
name|xml
operator|<<
name|decl
argument_list|(
literal|"1.0"
argument_list|,
literal|"utf-8"
argument_list|)
operator|<<
name|tag
argument_list|(
literal|"Project"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"DefaultTargets"
argument_list|,
literal|"Build"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"ToolsVersion"
argument_list|,
literal|"4.0"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"xmlns"
argument_list|,
literal|"http://schemas.microsoft.com/developer/msbuild/2003"
argument_list|)
operator|<<
name|tag
argument_list|(
literal|"ItemGroup"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Label"
argument_list|,
literal|"ProjectConfigurations"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tool
operator|.
name|SingleProjects
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|xml
operator|<<
name|tag
argument_list|(
literal|"ProjectConfiguration"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Include"
argument_list|,
name|tool
operator|.
name|SingleProjects
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|Configuration
operator|.
name|Name
argument_list|)
operator|<<
name|tagValue
argument_list|(
literal|"Configuration"
argument_list|,
name|tool
operator|.
name|SingleProjects
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|Configuration
operator|.
name|ConfigurationName
argument_list|)
operator|<<
name|tagValue
argument_list|(
literal|"Platform"
argument_list|,
name|tool
operator|.
name|SingleProjects
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|PlatformName
argument_list|)
operator|<<
name|closetag
argument_list|()
expr_stmt|;
block|}
name|xml
operator|<<
name|closetag
argument_list|()
operator|<<
name|tag
argument_list|(
literal|"PropertyGroup"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Label"
argument_list|,
literal|"Globals"
argument_list|)
operator|<<
name|tagValue
argument_list|(
literal|"ProjectGuid"
argument_list|,
name|tool
operator|.
name|ProjectGUID
argument_list|)
operator|<<
name|tagValue
argument_list|(
literal|"RootNamespace"
argument_list|,
name|tool
operator|.
name|Name
argument_list|)
operator|<<
name|tagValue
argument_list|(
literal|"Keyword"
argument_list|,
name|tool
operator|.
name|Keyword
argument_list|)
operator|<<
name|closetag
argument_list|()
expr_stmt|;
comment|// config part.
name|xml
operator|<<
name|import
argument_list|(
literal|"Project"
argument_list|,
literal|"$(VCTargetsPath)\\Microsoft.Cpp.Default.props"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tool
operator|.
name|SingleProjects
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|write
argument_list|(
name|xml
argument_list|,
name|tool
operator|.
name|SingleProjects
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|Configuration
argument_list|)
expr_stmt|;
name|xml
operator|<<
name|import
argument_list|(
literal|"Project"
argument_list|,
literal|"$(VCTargetsPath)\\Microsoft.Cpp.props"
argument_list|)
expr_stmt|;
comment|// Extension settings
name|xml
operator|<<
name|tag
argument_list|(
literal|"ImportGroup"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Label"
argument_list|,
literal|"ExtensionSettings"
argument_list|)
operator|<<
name|closetag
argument_list|()
expr_stmt|;
comment|// PropertySheets
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tool
operator|.
name|SingleProjects
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|xml
operator|<<
name|tag
argument_list|(
literal|"ImportGroup"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Condition"
argument_list|,
name|generateCondition
argument_list|(
name|tool
operator|.
name|SingleProjects
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|Configuration
argument_list|)
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Label"
argument_list|,
literal|"PropertySheets"
argument_list|)
expr_stmt|;
name|xml
operator|<<
name|tag
argument_list|(
literal|"Import"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Project"
argument_list|,
literal|"$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Condition"
argument_list|,
literal|"exists('$(UserRootDir)\\Microsoft.Cpp.$(Platform).user.props')"
argument_list|)
operator|<<
name|closetag
argument_list|()
operator|<<
name|closetag
argument_list|()
expr_stmt|;
block|}
comment|// UserMacros
name|xml
operator|<<
name|tag
argument_list|(
literal|"PropertyGroup"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Label"
argument_list|,
literal|"UserMacros"
argument_list|)
operator|<<
name|closetag
argument_list|()
expr_stmt|;
name|xml
operator|<<
name|tag
argument_list|(
literal|"PropertyGroup"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tool
operator|.
name|SingleProjects
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|VCConfiguration
modifier|&
name|config
init|=
name|tool
operator|.
name|SingleProjects
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|Configuration
decl_stmt|;
specifier|const
name|QString
name|condition
init|=
name|generateCondition
argument_list|(
name|config
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|config
operator|.
name|OutputDirectory
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|xml
operator|<<
name|tag
argument_list|(
literal|"OutDir"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Condition"
argument_list|,
name|condition
argument_list|)
operator|<<
name|valueTag
argument_list|(
name|config
operator|.
name|OutputDirectory
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|config
operator|.
name|IntermediateDirectory
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|xml
operator|<<
name|tag
argument_list|(
literal|"IntDir"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Condition"
argument_list|,
name|condition
argument_list|)
operator|<<
name|valueTag
argument_list|(
name|config
operator|.
name|IntermediateDirectory
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|config
operator|.
name|PrimaryOutput
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|xml
operator|<<
name|tag
argument_list|(
literal|"TargetName"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Condition"
argument_list|,
name|condition
argument_list|)
operator|<<
name|valueTag
argument_list|(
name|config
operator|.
name|PrimaryOutput
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|config
operator|.
name|PrimaryOutputExtension
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|xml
operator|<<
name|tag
argument_list|(
literal|"TargetExt"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Condition"
argument_list|,
name|condition
argument_list|)
operator|<<
name|valueTag
argument_list|(
name|config
operator|.
name|PrimaryOutputExtension
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|linker
operator|.
name|IgnoreImportLibrary
operator|!=
name|unset
condition|)
block|{
name|xml
operator|<<
name|tag
argument_list|(
literal|"IgnoreImportLibrary"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Condition"
argument_list|,
name|condition
argument_list|)
operator|<<
name|valueTagT
argument_list|(
name|config
operator|.
name|linker
operator|.
name|IgnoreImportLibrary
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|linker
operator|.
name|LinkIncremental
operator|!=
name|linkIncrementalDefault
condition|)
block|{
specifier|const
name|triState
name|ts
init|=
operator|(
name|config
operator|.
name|linker
operator|.
name|LinkIncremental
operator|==
name|linkIncrementalYes
condition|?
name|_True
else|:
name|_False
operator|)
decl_stmt|;
name|xml
operator|<<
name|tag
argument_list|(
literal|"LinkIncremental"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Condition"
argument_list|,
name|condition
argument_list|)
operator|<<
name|valueTagT
argument_list|(
name|ts
argument_list|)
expr_stmt|;
block|}
specifier|const
name|triState
name|generateManifest
init|=
name|config
operator|.
name|linker
operator|.
name|GenerateManifest
decl_stmt|;
if|if
condition|(
name|generateManifest
operator|!=
name|unset
condition|)
block|{
name|xml
operator|<<
name|tag
argument_list|(
literal|"GenerateManifest"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Condition"
argument_list|,
name|condition
argument_list|)
operator|<<
name|valueTagT
argument_list|(
name|generateManifest
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|preBuild
operator|.
name|ExcludedFromBuild
operator|!=
name|unset
condition|)
block|{
name|xml
operator|<<
name|tag
argument_list|(
literal|"PreBuildEventUseInBuild"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Condition"
argument_list|,
name|condition
argument_list|)
operator|<<
name|valueTagT
argument_list|(
operator|!
name|config
operator|.
name|preBuild
operator|.
name|ExcludedFromBuild
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|preLink
operator|.
name|ExcludedFromBuild
operator|!=
name|unset
condition|)
block|{
name|xml
operator|<<
name|tag
argument_list|(
literal|"PreLinkEventUseInBuild"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Condition"
argument_list|,
name|condition
argument_list|)
operator|<<
name|valueTagT
argument_list|(
operator|!
name|config
operator|.
name|preLink
operator|.
name|ExcludedFromBuild
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|config
operator|.
name|postBuild
operator|.
name|ExcludedFromBuild
operator|!=
name|unset
condition|)
block|{
name|xml
operator|<<
name|tag
argument_list|(
literal|"PostBuildEventUseInBuild"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Condition"
argument_list|,
name|condition
argument_list|)
operator|<<
name|valueTagT
argument_list|(
operator|!
name|config
operator|.
name|postBuild
operator|.
name|ExcludedFromBuild
argument_list|)
expr_stmt|;
block|}
block|}
name|xml
operator|<<
name|closetag
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tool
operator|.
name|SingleProjects
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|VCConfiguration
modifier|&
name|config
init|=
name|tool
operator|.
name|SingleProjects
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|Configuration
decl_stmt|;
name|xml
operator|<<
name|tag
argument_list|(
literal|"ItemDefinitionGroup"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Condition"
argument_list|,
name|generateCondition
argument_list|(
name|config
argument_list|)
argument_list|)
expr_stmt|;
comment|// ClCompile
name|write
argument_list|(
name|xml
argument_list|,
name|config
operator|.
name|compiler
argument_list|)
expr_stmt|;
comment|// Link
name|write
argument_list|(
name|xml
argument_list|,
name|config
operator|.
name|linker
argument_list|)
expr_stmt|;
comment|// Midl
name|write
argument_list|(
name|xml
argument_list|,
name|config
operator|.
name|idl
argument_list|)
expr_stmt|;
comment|// ResourceCompiler
name|write
argument_list|(
name|xml
argument_list|,
name|config
operator|.
name|resource
argument_list|)
expr_stmt|;
comment|// Post build event
if|if
condition|(
name|config
operator|.
name|postBuild
operator|.
name|ExcludedFromBuild
operator|!=
name|unset
condition|)
name|write
argument_list|(
name|xml
argument_list|,
name|config
operator|.
name|postBuild
argument_list|)
expr_stmt|;
comment|// Pre build event
if|if
condition|(
name|config
operator|.
name|preBuild
operator|.
name|ExcludedFromBuild
operator|!=
name|unset
condition|)
name|write
argument_list|(
name|xml
argument_list|,
name|config
operator|.
name|preBuild
argument_list|)
expr_stmt|;
comment|// Pre link event
if|if
condition|(
name|config
operator|.
name|preLink
operator|.
name|ExcludedFromBuild
operator|!=
name|unset
condition|)
name|write
argument_list|(
name|xml
argument_list|,
name|config
operator|.
name|preLink
argument_list|)
expr_stmt|;
name|xml
operator|<<
name|closetag
argument_list|()
expr_stmt|;
block|}
comment|// The file filters are added in a separate file for MSBUILD.
name|QFile
name|filterFile
decl_stmt|;
name|filterFile
operator|.
name|setFileName
argument_list|(
name|Option
operator|::
name|output
operator|.
name|fileName
argument_list|()
operator|.
name|append
argument_list|(
literal|".filters"
argument_list|)
argument_list|)
expr_stmt|;
name|filterFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Text
operator||
name|QIODevice
operator|::
name|Truncate
argument_list|)
expr_stmt|;
name|QTextStream
name|ts
argument_list|(
operator|&
name|filterFile
argument_list|)
decl_stmt|;
name|XmlOutput
name|xmlFilter
argument_list|(
name|ts
argument_list|,
name|XmlOutput
operator|::
name|NoConversion
argument_list|)
decl_stmt|;
name|xmlFilter
operator|.
name|setIndentString
argument_list|(
literal|"  "
argument_list|)
expr_stmt|;
name|xmlFilter
operator|<<
name|decl
argument_list|(
literal|"1.0"
argument_list|,
literal|"utf-8"
argument_list|)
operator|<<
name|tag
argument_list|(
literal|"Project"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"ToolsVersion"
argument_list|,
literal|"4.0"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"xmlns"
argument_list|,
literal|"http://schemas.microsoft.com/developer/msbuild/2003"
argument_list|)
expr_stmt|;
name|xmlFilter
operator|<<
name|tag
argument_list|(
literal|"ItemGroup"
argument_list|)
expr_stmt|;
name|addFilters
argument_list|(
name|tool
argument_list|,
name|xmlFilter
argument_list|,
literal|"Form Files"
argument_list|)
expr_stmt|;
name|addFilters
argument_list|(
name|tool
argument_list|,
name|xmlFilter
argument_list|,
literal|"Generated Files"
argument_list|)
expr_stmt|;
name|addFilters
argument_list|(
name|tool
argument_list|,
name|xmlFilter
argument_list|,
literal|"Header Files"
argument_list|)
expr_stmt|;
name|addFilters
argument_list|(
name|tool
argument_list|,
name|xmlFilter
argument_list|,
literal|"LexYacc Files"
argument_list|)
expr_stmt|;
name|addFilters
argument_list|(
name|tool
argument_list|,
name|xmlFilter
argument_list|,
literal|"Resource Files"
argument_list|)
expr_stmt|;
name|addFilters
argument_list|(
name|tool
argument_list|,
name|xmlFilter
argument_list|,
literal|"Source Files"
argument_list|)
expr_stmt|;
name|addFilters
argument_list|(
name|tool
argument_list|,
name|xmlFilter
argument_list|,
literal|"Translation Files"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|tool
operator|.
name|ExtraCompilers
operator|.
name|count
argument_list|()
condition|;
operator|++
name|x
control|)
name|addFilters
argument_list|(
name|tool
argument_list|,
name|xmlFilter
argument_list|,
name|tool
operator|.
name|ExtraCompilers
operator|.
name|at
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
name|xmlFilter
operator|<<
name|closetag
argument_list|()
expr_stmt|;
name|outputFilter
argument_list|(
name|tool
argument_list|,
name|xml
argument_list|,
name|xmlFilter
argument_list|,
literal|"Source Files"
argument_list|)
expr_stmt|;
name|outputFilter
argument_list|(
name|tool
argument_list|,
name|xml
argument_list|,
name|xmlFilter
argument_list|,
literal|"Header Files"
argument_list|)
expr_stmt|;
name|outputFilter
argument_list|(
name|tool
argument_list|,
name|xml
argument_list|,
name|xmlFilter
argument_list|,
literal|"Generated Files"
argument_list|)
expr_stmt|;
name|outputFilter
argument_list|(
name|tool
argument_list|,
name|xml
argument_list|,
name|xmlFilter
argument_list|,
literal|"LexYacc Files"
argument_list|)
expr_stmt|;
name|outputFilter
argument_list|(
name|tool
argument_list|,
name|xml
argument_list|,
name|xmlFilter
argument_list|,
literal|"Translation Files"
argument_list|)
expr_stmt|;
name|outputFilter
argument_list|(
name|tool
argument_list|,
name|xml
argument_list|,
name|xmlFilter
argument_list|,
literal|"Form Files"
argument_list|)
expr_stmt|;
name|outputFilter
argument_list|(
name|tool
argument_list|,
name|xml
argument_list|,
name|xmlFilter
argument_list|,
literal|"Resource Files"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|tool
operator|.
name|ExtraCompilers
operator|.
name|count
argument_list|()
condition|;
operator|++
name|x
control|)
block|{
name|outputFilter
argument_list|(
name|tool
argument_list|,
name|xml
argument_list|,
name|xmlFilter
argument_list|,
name|tool
operator|.
name|ExtraCompilers
operator|.
name|at
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|outputFilter
argument_list|(
name|tool
argument_list|,
name|xml
argument_list|,
name|xmlFilter
argument_list|,
literal|"Root Files"
argument_list|)
expr_stmt|;
name|xml
operator|<<
name|import
argument_list|(
literal|"Project"
argument_list|,
literal|"$(VCTargetsPath)\\Microsoft.Cpp.targets"
argument_list|)
expr_stmt|;
name|xml
operator|<<
name|tag
argument_list|(
literal|"ImportGroup"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Label"
argument_list|,
literal|"ExtensionTargets"
argument_list|)
operator|<<
name|closetag
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toString
specifier|static
specifier|inline
name|QString
name|toString
parameter_list|(
name|asmListingOption
name|option
parameter_list|)
block|{
switch|switch
condition|(
name|option
condition|)
block|{
case|case
name|asmListingNone
case|:
break|break;
case|case
name|asmListingAsmMachine
case|:
return|return
literal|"AssemblyAndMachineCode"
return|;
case|case
name|asmListingAsmMachineSrc
case|:
return|return
literal|"All"
return|;
case|case
name|asmListingAsmSrc
case|:
return|return
literal|"AssemblyAndSourceCode"
return|;
case|case
name|asmListingAssemblyOnly
case|:
return|return
literal|"AssemblyCode"
return|;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|toString
specifier|static
specifier|inline
name|QString
name|toString
parameter_list|(
name|basicRuntimeCheckOption
name|option
parameter_list|)
block|{
switch|switch
condition|(
name|option
condition|)
block|{
case|case
name|runtimeBasicCheckNone
case|:
return|return
literal|""
return|;
case|case
name|runtimeCheckStackFrame
case|:
return|return
literal|"StackFrameRuntimeCheck"
return|;
case|case
name|runtimeCheckUninitVariables
case|:
return|return
literal|"UninitializedLocalUsageCheck"
return|;
case|case
name|runtimeBasicCheckAll
case|:
return|return
literal|"EnableFastChecks"
return|;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|toString
specifier|static
specifier|inline
name|QString
name|toString
parameter_list|(
name|callingConventionOption
name|option
parameter_list|)
block|{
switch|switch
condition|(
name|option
condition|)
block|{
case|case
name|callConventionDefault
case|:
break|break;
case|case
name|callConventionCDecl
case|:
return|return
literal|"Cdecl"
return|;
case|case
name|callConventionFastCall
case|:
return|return
literal|"FastCall"
return|;
case|case
name|callConventionStdCall
case|:
return|return
literal|"StdCall"
return|;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|toString
specifier|static
specifier|inline
name|QString
name|toString
parameter_list|(
name|CompileAsOptions
name|option
parameter_list|)
block|{
switch|switch
condition|(
name|option
condition|)
block|{
case|case
name|compileAsDefault
case|:
break|break;
case|case
name|compileAsC
case|:
return|return
literal|"CompileAsC"
return|;
case|case
name|compileAsCPlusPlus
case|:
return|return
literal|"CompileAsCpp"
return|;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|toString
specifier|static
specifier|inline
name|QString
name|toString
parameter_list|(
name|compileAsManagedOptions
name|option
parameter_list|)
block|{
switch|switch
condition|(
name|option
condition|)
block|{
case|case
name|managedDefault
case|:
case|case
name|managedAssemblySafe
case|:
break|break;
case|case
name|managedAssembly
case|:
return|return
literal|"true"
return|;
case|case
name|managedAssemblyPure
case|:
return|return
literal|"Safe"
return|;
case|case
name|managedAssemblyOldSyntax
case|:
return|return
literal|"OldSyntax"
return|;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|toString
specifier|static
specifier|inline
name|QString
name|toString
parameter_list|(
name|debugOption
name|option
parameter_list|)
block|{
switch|switch
condition|(
name|option
condition|)
block|{
case|case
name|debugUnknown
case|:
case|case
name|debugDisabled
case|:
case|case
name|debugLineInfoOnly
case|:
break|break;
case|case
name|debugOldStyleInfo
case|:
return|return
literal|"OldStyle"
return|;
case|case
name|debugEditAndContinue
case|:
return|return
literal|"EditAndContinue"
return|;
case|case
name|debugEnabled
case|:
return|return
literal|"ProgramDatabase"
return|;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|toString
specifier|static
specifier|inline
name|QString
name|toString
parameter_list|(
name|enhancedInstructionSetOption
name|option
parameter_list|)
block|{
switch|switch
condition|(
name|option
condition|)
block|{
case|case
name|archNotSet
case|:
break|break;
case|case
name|archSSE
case|:
return|return
literal|"StreamingSIMDExtensions"
return|;
case|case
name|archSSE2
case|:
return|return
literal|"StreamingSIMDExtensions2"
return|;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|toString
specifier|static
specifier|inline
name|QString
name|toString
parameter_list|(
name|exceptionHandling
name|option
parameter_list|)
block|{
switch|switch
condition|(
name|option
condition|)
block|{
case|case
name|ehDefault
case|:
break|break;
case|case
name|ehNone
case|:
return|return
literal|"false"
return|;
case|case
name|ehNoSEH
case|:
return|return
literal|"Sync"
return|;
case|case
name|ehSEH
case|:
return|return
literal|"Async"
return|;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|toString
specifier|static
specifier|inline
name|QString
name|toString
parameter_list|(
name|favorSizeOrSpeedOption
name|option
parameter_list|)
block|{
switch|switch
condition|(
name|option
condition|)
block|{
case|case
name|favorNone
case|:
break|break;
case|case
name|favorSize
case|:
return|return
literal|"Size"
return|;
case|case
name|favorSpeed
case|:
return|return
literal|"Speed"
return|;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|toString
specifier|static
specifier|inline
name|QString
name|toString
parameter_list|(
name|floatingPointModel
name|option
parameter_list|)
block|{
switch|switch
condition|(
name|option
condition|)
block|{
case|case
name|floatingPointNotSet
case|:
break|break;
case|case
name|floatingPointFast
case|:
return|return
literal|"Fast"
return|;
case|case
name|floatingPointPrecise
case|:
return|return
literal|"Precise"
return|;
case|case
name|floatingPointStrict
case|:
return|return
literal|"Strict"
return|;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|toString
specifier|static
specifier|inline
name|QString
name|toString
parameter_list|(
name|inlineExpansionOption
name|option
parameter_list|)
block|{
switch|switch
condition|(
name|option
condition|)
block|{
case|case
name|expandDefault
case|:
break|break;
case|case
name|expandDisable
case|:
return|return
literal|"Disabled"
return|;
case|case
name|expandOnlyInline
case|:
return|return
literal|"OnlyExplicitInline"
return|;
case|case
name|expandAnySuitable
case|:
return|return
literal|"AnySuitable"
return|;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|toString
specifier|static
specifier|inline
name|QString
name|toString
parameter_list|(
name|optimizeOption
name|option
parameter_list|)
block|{
switch|switch
condition|(
name|option
condition|)
block|{
case|case
name|optimizeCustom
case|:
case|case
name|optimizeDefault
case|:
break|break;
case|case
name|optimizeDisabled
case|:
return|return
literal|"Disabled"
return|;
case|case
name|optimizeMinSpace
case|:
return|return
literal|"MinSpace"
return|;
case|case
name|optimizeMaxSpeed
case|:
return|return
literal|"MaxSpeed"
return|;
case|case
name|optimizeFull
case|:
return|return
literal|"Full"
return|;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|toString
specifier|static
specifier|inline
name|QString
name|toString
parameter_list|(
name|pchOption
name|option
parameter_list|)
block|{
switch|switch
condition|(
name|option
condition|)
block|{
case|case
name|pchUnset
case|:
case|case
name|pchGenerateAuto
case|:
break|break;
case|case
name|pchNone
case|:
return|return
literal|"NotUsing"
return|;
case|case
name|pchCreateUsingSpecific
case|:
return|return
literal|"Create"
return|;
case|case
name|pchUseUsingSpecific
case|:
return|return
literal|"Use"
return|;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|toString
specifier|static
specifier|inline
name|QString
name|toString
parameter_list|(
name|runtimeLibraryOption
name|option
parameter_list|)
block|{
switch|switch
condition|(
name|option
condition|)
block|{
case|case
name|rtUnknown
case|:
case|case
name|rtSingleThreaded
case|:
case|case
name|rtSingleThreadedDebug
case|:
break|break;
case|case
name|rtMultiThreaded
case|:
return|return
literal|"MultiThreaded"
return|;
case|case
name|rtMultiThreadedDLL
case|:
return|return
literal|"MultiThreadedDLL"
return|;
case|case
name|rtMultiThreadedDebug
case|:
return|return
literal|"MultiThreadedDebug"
return|;
case|case
name|rtMultiThreadedDebugDLL
case|:
return|return
literal|"MultiThreadedDebugDLL"
return|;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|toString
specifier|static
specifier|inline
name|QString
name|toString
parameter_list|(
name|structMemberAlignOption
name|option
parameter_list|)
block|{
switch|switch
condition|(
name|option
condition|)
block|{
case|case
name|alignNotSet
case|:
break|break;
case|case
name|alignSingleByte
case|:
return|return
literal|"1Byte"
return|;
case|case
name|alignTwoBytes
case|:
return|return
literal|"2Bytes"
return|;
case|case
name|alignFourBytes
case|:
return|return
literal|"4Bytes"
return|;
case|case
name|alignEightBytes
case|:
return|return
literal|"8Bytes"
return|;
case|case
name|alignSixteenBytes
case|:
return|return
literal|"16Bytes"
return|;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|toString
specifier|static
specifier|inline
name|QString
name|toString
parameter_list|(
name|warningLevelOption
name|option
parameter_list|)
block|{
switch|switch
condition|(
name|option
condition|)
block|{
case|case
name|warningLevelUnknown
case|:
break|break;
case|case
name|warningLevel_0
case|:
return|return
literal|"TurnOffAllWarnings"
return|;
case|case
name|warningLevel_1
case|:
return|return
literal|"Level1"
return|;
case|case
name|warningLevel_2
case|:
return|return
literal|"Level2"
return|;
case|case
name|warningLevel_3
case|:
return|return
literal|"Level3"
return|;
case|case
name|warningLevel_4
case|:
return|return
literal|"Level4"
return|;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|toString
specifier|static
specifier|inline
name|QString
name|toString
parameter_list|(
name|optLinkTimeCodeGenType
name|option
parameter_list|)
block|{
switch|switch
condition|(
name|option
condition|)
block|{
case|case
name|optLTCGDefault
case|:
break|break;
case|case
name|optLTCGEnabled
case|:
return|return
literal|"UseLinkTimeCodeGeneration"
return|;
case|case
name|optLTCGInstrument
case|:
return|return
literal|"PGInstrument"
return|;
case|case
name|optLTCGOptimize
case|:
return|return
literal|"PGOptimization"
return|;
case|case
name|optLTCGUpdate
case|:
return|return
literal|"PGUpdate"
return|;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|toString
specifier|static
specifier|inline
name|QString
name|toString
parameter_list|(
name|subSystemOption
name|option
parameter_list|)
block|{
switch|switch
condition|(
name|option
condition|)
block|{
case|case
name|subSystemNotSet
case|:
break|break;
case|case
name|subSystemConsole
case|:
return|return
literal|"Console"
return|;
case|case
name|subSystemWindows
case|:
return|return
literal|"Windows"
return|;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|toString
specifier|static
specifier|inline
name|QString
name|toString
parameter_list|(
name|machineTypeOption
name|option
parameter_list|)
block|{
switch|switch
condition|(
name|option
condition|)
block|{
case|case
name|machineNotSet
case|:
break|break;
case|case
name|machineX86
case|:
return|return
literal|"MachineX86"
return|;
case|case
name|machineX64
case|:
return|return
literal|"MachineX64"
return|;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|toString
specifier|static
specifier|inline
name|QString
name|toString
parameter_list|(
name|midlCharOption
name|option
parameter_list|)
block|{
switch|switch
condition|(
name|option
condition|)
block|{
case|case
name|midlCharUnsigned
case|:
return|return
literal|"Unsigned"
return|;
case|case
name|midlCharSigned
case|:
return|return
literal|"Signed"
return|;
case|case
name|midlCharAscii7
case|:
return|return
literal|"Ascii"
return|;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|toString
specifier|static
specifier|inline
name|QString
name|toString
parameter_list|(
name|midlErrorCheckOption
name|option
parameter_list|)
block|{
switch|switch
condition|(
name|option
condition|)
block|{
case|case
name|midlAlignNotSet
case|:
break|break;
case|case
name|midlDisableAll
case|:
return|return
literal|"None"
return|;
case|case
name|midlEnableAll
case|:
return|return
literal|"All"
return|;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|toString
specifier|static
specifier|inline
name|QString
name|toString
parameter_list|(
name|midlStructMemberAlignOption
name|option
parameter_list|)
block|{
switch|switch
condition|(
name|option
condition|)
block|{
case|case
name|midlAlignNotSet
case|:
break|break;
case|case
name|midlAlignSingleByte
case|:
return|return
literal|"1"
return|;
case|case
name|midlAlignTwoBytes
case|:
return|return
literal|"2"
return|;
case|case
name|midlAlignFourBytes
case|:
return|return
literal|"4"
return|;
case|case
name|midlAlignEightBytes
case|:
return|return
literal|"8"
return|;
case|case
name|midlAlignSixteenBytes
case|:
return|return
literal|"16"
return|;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|toString
specifier|static
specifier|inline
name|QString
name|toString
parameter_list|(
name|midlTargetEnvironment
name|option
parameter_list|)
block|{
switch|switch
condition|(
name|option
condition|)
block|{
case|case
name|midlTargetNotSet
case|:
break|break;
case|case
name|midlTargetWin32
case|:
return|return
literal|"Win32"
return|;
case|case
name|midlTargetWin64
case|:
return|return
literal|"X64"
return|;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|toString
specifier|static
specifier|inline
name|QString
name|toString
parameter_list|(
name|midlWarningLevelOption
name|option
parameter_list|)
block|{
switch|switch
condition|(
name|option
condition|)
block|{
case|case
name|midlWarningLevel_0
case|:
return|return
literal|"0"
return|;
case|case
name|midlWarningLevel_1
case|:
return|return
literal|"1"
return|;
case|case
name|midlWarningLevel_2
case|:
return|return
literal|"2"
return|;
case|case
name|midlWarningLevel_3
case|:
return|return
literal|"3"
return|;
case|case
name|midlWarningLevel_4
case|:
return|return
literal|"4"
return|;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|toString
specifier|static
specifier|inline
name|QString
name|toString
parameter_list|(
name|enumResourceLangID
name|option
parameter_list|)
block|{
if|if
condition|(
name|option
operator|==
literal|0
condition|)
return|return
name|QString
argument_list|()
return|;
else|else
return|return
name|QString
operator|::
name|number
argument_list|(
name|qlonglong
argument_list|(
name|option
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|toString
specifier|static
specifier|inline
name|QString
name|toString
parameter_list|(
name|charSet
name|option
parameter_list|)
block|{
switch|switch
condition|(
name|option
condition|)
block|{
case|case
name|charSetNotSet
case|:
return|return
literal|"NotSet"
return|;
case|case
name|charSetUnicode
case|:
return|return
literal|"Unicode"
return|;
case|case
name|charSetMBCS
case|:
return|return
literal|"MultiByte"
return|;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|toString
specifier|static
specifier|inline
name|QString
name|toString
parameter_list|(
name|ConfigurationTypes
name|option
parameter_list|)
block|{
switch|switch
condition|(
name|option
condition|)
block|{
case|case
name|typeUnknown
case|:
case|case
name|typeGeneric
case|:
break|break;
case|case
name|typeApplication
case|:
return|return
literal|"Application"
return|;
case|case
name|typeDynamicLibrary
case|:
return|return
literal|"DynamicLibrary"
return|;
case|case
name|typeStaticLibrary
case|:
return|return
literal|"StaticLibrary"
return|;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|toString
specifier|static
specifier|inline
name|QString
name|toString
parameter_list|(
name|useOfATL
name|option
parameter_list|)
block|{
switch|switch
condition|(
name|option
condition|)
block|{
case|case
name|useATLNotSet
case|:
break|break;
case|case
name|useATLStatic
case|:
return|return
literal|"Static"
return|;
case|case
name|useATLDynamic
case|:
return|return
literal|"Dynamic"
return|;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|toString
specifier|static
specifier|inline
name|QString
name|toString
parameter_list|(
name|useOfMfc
name|option
parameter_list|)
block|{
switch|switch
condition|(
name|option
condition|)
block|{
case|case
name|useMfcStdWin
case|:
break|break;
case|case
name|useMfcStatic
case|:
return|return
literal|"Static"
return|;
case|case
name|useMfcDynamic
case|:
return|return
literal|"Dynamic"
return|;
block|}
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|toTriState
specifier|static
specifier|inline
name|triState
name|toTriState
parameter_list|(
name|browseInfoOption
name|option
parameter_list|)
block|{
switch|switch
condition|(
name|option
condition|)
block|{
case|case
name|brInfoNone
case|:
return|return
name|_False
return|;
case|case
name|brAllInfo
case|:
case|case
name|brNoLocalSymbols
case|:
return|return
name|_True
return|;
block|}
return|return
name|unset
return|;
block|}
end_function
begin_function
DECL|function|toTriState
specifier|static
specifier|inline
name|triState
name|toTriState
parameter_list|(
name|preprocessOption
name|option
parameter_list|)
block|{
switch|switch
condition|(
name|option
condition|)
block|{
case|case
name|preprocessUnknown
case|:
break|break;
case|case
name|preprocessNo
case|:
return|return
name|_False
return|;
case|case
name|preprocessNoLineNumbers
case|:
case|case
name|preprocessYes
case|:
return|return
name|_True
return|;
block|}
return|return
name|unset
return|;
block|}
end_function
begin_function
DECL|function|toTriState
specifier|static
specifier|inline
name|triState
name|toTriState
parameter_list|(
name|optFoldingType
name|option
parameter_list|)
block|{
switch|switch
condition|(
name|option
condition|)
block|{
case|case
name|optFoldingDefault
case|:
break|break;
case|case
name|optNoFolding
case|:
return|return
name|_False
return|;
case|case
name|optFolding
case|:
return|return
name|_True
return|;
block|}
return|return
name|unset
return|;
block|}
end_function
begin_function
DECL|function|toTriState
specifier|static
specifier|inline
name|triState
name|toTriState
parameter_list|(
name|addressAwarenessType
name|option
parameter_list|)
block|{
switch|switch
condition|(
name|option
condition|)
block|{
case|case
name|addrAwareDefault
case|:
return|return
name|unset
return|;
case|case
name|addrAwareNoLarge
case|:
return|return
name|_False
return|;
case|case
name|addrAwareLarge
case|:
return|return
name|_True
return|;
block|}
return|return
name|unset
return|;
block|}
end_function
begin_function
DECL|function|toTriState
specifier|static
specifier|inline
name|triState
name|toTriState
parameter_list|(
name|linkIncrementalType
name|option
parameter_list|)
block|{
switch|switch
condition|(
name|option
condition|)
block|{
case|case
name|linkIncrementalDefault
case|:
return|return
name|unset
return|;
case|case
name|linkIncrementalNo
case|:
return|return
name|_False
return|;
case|case
name|linkIncrementalYes
case|:
return|return
name|_True
return|;
block|}
return|return
name|unset
return|;
block|}
end_function
begin_function
DECL|function|toTriState
specifier|static
specifier|inline
name|triState
name|toTriState
parameter_list|(
name|linkProgressOption
name|option
parameter_list|)
block|{
switch|switch
condition|(
name|option
condition|)
block|{
case|case
name|linkProgressNotSet
case|:
return|return
name|unset
return|;
case|case
name|linkProgressAll
case|:
case|case
name|linkProgressLibs
case|:
return|return
name|_True
return|;
block|}
return|return
name|unset
return|;
block|}
end_function
begin_function
DECL|function|toTriState
specifier|static
specifier|inline
name|triState
name|toTriState
parameter_list|(
name|optRefType
name|option
parameter_list|)
block|{
switch|switch
condition|(
name|option
condition|)
block|{
case|case
name|optReferencesDefault
case|:
return|return
name|unset
return|;
case|case
name|optNoReferences
case|:
return|return
name|_False
return|;
case|case
name|optReferences
case|:
return|return
name|_True
return|;
block|}
return|return
name|unset
return|;
block|}
end_function
begin_function
DECL|function|toTriState
specifier|static
specifier|inline
name|triState
name|toTriState
parameter_list|(
name|termSvrAwarenessType
name|option
parameter_list|)
block|{
switch|switch
condition|(
name|option
condition|)
block|{
case|case
name|termSvrAwareDefault
case|:
return|return
name|unset
return|;
case|case
name|termSvrAwareNo
case|:
return|return
name|_False
return|;
case|case
name|termSvrAwareYes
case|:
return|return
name|_True
return|;
block|}
return|return
name|unset
return|;
block|}
end_function
begin_function
DECL|function|write
name|void
name|VCXProjectWriter
operator|::
name|write
parameter_list|(
name|XmlOutput
modifier|&
name|xml
parameter_list|,
specifier|const
name|VCCLCompilerTool
modifier|&
name|tool
parameter_list|)
block|{
name|xml
operator|<<
name|tag
argument_list|(
name|_CLCompile
argument_list|)
operator|<<
name|attrTagX
argument_list|(
name|_AdditionalIncludeDirectories
argument_list|,
name|tool
operator|.
name|AdditionalIncludeDirectories
argument_list|,
literal|";"
argument_list|)
operator|<<
name|attrTagX
argument_list|(
name|_AdditionalOptions
argument_list|,
name|tool
operator|.
name|AdditionalOptions
argument_list|,
literal|" "
argument_list|)
operator|<<
name|attrTagX
argument_list|(
name|_AdditionalUsingDirectories
argument_list|,
name|tool
operator|.
name|AdditionalUsingDirectories
argument_list|,
literal|";"
argument_list|)
comment|//unused<< attrTagS(_AlwaysAppend, tool.AlwaysAppend)
operator|<<
name|attrTagS
argument_list|(
name|_AssemblerListingLocation
argument_list|,
name|tool
operator|.
name|AssemblerListingLocation
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_AssemblerOutput
argument_list|,
name|toString
argument_list|(
name|tool
operator|.
name|AssemblerOutput
argument_list|)
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_BasicRuntimeChecks
argument_list|,
name|toString
argument_list|(
name|tool
operator|.
name|BasicRuntimeChecks
argument_list|)
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_BrowseInformation
argument_list|,
name|toTriState
argument_list|(
name|tool
operator|.
name|BrowseInformation
argument_list|)
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_BrowseInformationFile
argument_list|,
name|tool
operator|.
name|BrowseInformationFile
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_BufferSecurityCheck
argument_list|,
name|tool
operator|.
name|BufferSecurityCheck
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_CallingConvention
argument_list|,
name|toString
argument_list|(
name|tool
operator|.
name|CallingConvention
argument_list|)
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_CompileAs
argument_list|,
name|toString
argument_list|(
name|tool
operator|.
name|CompileAs
argument_list|)
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_CompileAsManaged
argument_list|,
name|toString
argument_list|(
name|tool
operator|.
name|CompileAsManaged
argument_list|)
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_CreateHotpatchableImage
argument_list|,
name|tool
operator|.
name|CreateHotpatchableImage
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_DebugInformationFormat
argument_list|,
name|toString
argument_list|(
name|tool
operator|.
name|DebugInformationFormat
argument_list|)
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_DisableLanguageExtensions
argument_list|,
name|tool
operator|.
name|DisableLanguageExtensions
argument_list|)
operator|<<
name|attrTagX
argument_list|(
name|_DisableSpecificWarnings
argument_list|,
name|tool
operator|.
name|DisableSpecificWarnings
argument_list|,
literal|";"
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_EnableEnhancedInstructionSet
argument_list|,
name|toString
argument_list|(
name|tool
operator|.
name|EnableEnhancedInstructionSet
argument_list|)
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_EnableFiberSafeOptimizations
argument_list|,
name|tool
operator|.
name|EnableFiberSafeOptimizations
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_EnablePREfast
argument_list|,
name|tool
operator|.
name|EnablePREfast
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_ErrorReporting
argument_list|,
name|tool
operator|.
name|ErrorReporting
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_ExceptionHandling
argument_list|,
name|toString
argument_list|(
name|tool
operator|.
name|ExceptionHandling
argument_list|)
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_ExpandAttributedSource
argument_list|,
name|tool
operator|.
name|ExpandAttributedSource
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_FavorSizeOrSpeed
argument_list|,
name|toString
argument_list|(
name|tool
operator|.
name|FavorSizeOrSpeed
argument_list|)
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_FloatingPointExceptions
argument_list|,
name|tool
operator|.
name|FloatingPointExceptions
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_FloatingPointModel
argument_list|,
name|toString
argument_list|(
name|tool
operator|.
name|FloatingPointModel
argument_list|)
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_ForceConformanceInForLoopScope
argument_list|,
name|tool
operator|.
name|ForceConformanceInForLoopScope
argument_list|)
operator|<<
name|attrTagX
argument_list|(
name|_ForcedIncludeFiles
argument_list|,
name|tool
operator|.
name|ForcedIncludeFiles
argument_list|,
literal|";"
argument_list|)
operator|<<
name|attrTagX
argument_list|(
name|_ForcedUsingFiles
argument_list|,
name|tool
operator|.
name|ForcedUsingFiles
argument_list|,
literal|";"
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_FunctionLevelLinking
argument_list|,
name|tool
operator|.
name|EnableFunctionLevelLinking
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_GenerateXMLDocumentationFiles
argument_list|,
name|tool
operator|.
name|GenerateXMLDocumentationFiles
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_IgnoreStandardIncludePath
argument_list|,
name|tool
operator|.
name|IgnoreStandardIncludePath
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_InlineFunctionExpansion
argument_list|,
name|toString
argument_list|(
name|tool
operator|.
name|InlineFunctionExpansion
argument_list|)
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_IntrinsicFunctions
argument_list|,
name|tool
operator|.
name|EnableIntrinsicFunctions
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_MinimalRebuild
argument_list|,
name|tool
operator|.
name|MinimalRebuild
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_MultiProcessorCompilation
argument_list|,
name|tool
operator|.
name|MultiProcessorCompilation
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_ObjectFileName
argument_list|,
name|tool
operator|.
name|ObjectFile
argument_list|)
comment|//unused<< attrTagX(_ObjectFiles, tool.ObjectFiles, ";")
operator|<<
name|attrTagT
argument_list|(
name|_OmitDefaultLibName
argument_list|,
name|tool
operator|.
name|OmitDefaultLibName
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_OmitFramePointers
argument_list|,
name|tool
operator|.
name|OmitFramePointers
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_OpenMPSupport
argument_list|,
name|tool
operator|.
name|OpenMP
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_Optimization
argument_list|,
name|toString
argument_list|(
name|tool
operator|.
name|Optimization
argument_list|)
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_PrecompiledHeader
argument_list|,
name|toString
argument_list|(
name|tool
operator|.
name|UsePrecompiledHeader
argument_list|)
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_PrecompiledHeaderFile
argument_list|,
name|tool
operator|.
name|PrecompiledHeaderThrough
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_PrecompiledHeaderOutputFile
argument_list|,
name|tool
operator|.
name|PrecompiledHeaderFile
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_PreprocessKeepComments
argument_list|,
name|tool
operator|.
name|KeepComments
argument_list|)
operator|<<
name|attrTagX
argument_list|(
name|_PreprocessorDefinitions
argument_list|,
name|tool
operator|.
name|PreprocessorDefinitions
argument_list|,
literal|";"
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_PreprocessOutputPath
argument_list|,
name|tool
operator|.
name|PreprocessOutputPath
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_PreprocessSuppressLineNumbers
argument_list|,
name|tool
operator|.
name|PreprocessSuppressLineNumbers
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_PreprocessToFile
argument_list|,
name|toTriState
argument_list|(
name|tool
operator|.
name|GeneratePreprocessedFile
argument_list|)
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_ProgramDataBaseFileName
argument_list|,
name|tool
operator|.
name|ProgramDataBaseFileName
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_ProcessorNumber
argument_list|,
name|tool
operator|.
name|MultiProcessorCompilationProcessorCount
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_RuntimeLibrary
argument_list|,
name|toString
argument_list|(
name|tool
operator|.
name|RuntimeLibrary
argument_list|)
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_RuntimeTypeInfo
argument_list|,
name|tool
operator|.
name|RuntimeTypeInfo
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_ShowIncludes
argument_list|,
name|tool
operator|.
name|ShowIncludes
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_SmallerTypeCheck
argument_list|,
name|tool
operator|.
name|SmallerTypeCheck
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_StringPooling
argument_list|,
name|tool
operator|.
name|StringPooling
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_StructMemberAlignment
argument_list|,
name|toString
argument_list|(
name|tool
operator|.
name|StructMemberAlignment
argument_list|)
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_SuppressStartupBanner
argument_list|,
name|tool
operator|.
name|SuppressStartupBanner
argument_list|)
comment|//unused<< attrTagS(_TreatSpecificWarningsAsErrors, tool.TreatSpecificWarningsAsErrors)
operator|<<
name|attrTagT
argument_list|(
name|_TreatWarningAsError
argument_list|,
name|tool
operator|.
name|WarnAsError
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_TreatWChar_tAsBuiltInType
argument_list|,
name|tool
operator|.
name|TreatWChar_tAsBuiltInType
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_UndefineAllPreprocessorDefinitions
argument_list|,
name|tool
operator|.
name|UndefineAllPreprocessorDefinitions
argument_list|)
operator|<<
name|attrTagX
argument_list|(
name|_UndefinePreprocessorDefinitions
argument_list|,
name|tool
operator|.
name|UndefinePreprocessorDefinitions
argument_list|,
literal|";"
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_UseFullPaths
argument_list|,
name|tool
operator|.
name|DisplayFullPaths
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_UseUnicodeForAssemblerListing
argument_list|,
name|tool
operator|.
name|UseUnicodeForAssemblerListing
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_WarningLevel
argument_list|,
name|toString
argument_list|(
name|tool
operator|.
name|WarningLevel
argument_list|)
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_WholeProgramOptimization
argument_list|,
name|tool
operator|.
name|WholeProgramOptimization
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_XMLDocumentationFileName
argument_list|,
name|tool
operator|.
name|XMLDocumentationFileName
argument_list|)
operator|<<
name|closetag
argument_list|(
name|_CLCompile
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|write
name|void
name|VCXProjectWriter
operator|::
name|write
parameter_list|(
name|XmlOutput
modifier|&
name|xml
parameter_list|,
specifier|const
name|VCLinkerTool
modifier|&
name|tool
parameter_list|)
block|{
name|xml
operator|<<
name|tag
argument_list|(
name|_Link
argument_list|)
operator|<<
name|attrTagX
argument_list|(
name|_AdditionalDependencies
argument_list|,
name|tool
operator|.
name|AdditionalDependencies
argument_list|,
literal|";"
argument_list|)
operator|<<
name|attrTagX
argument_list|(
name|_AdditionalLibraryDirectories
argument_list|,
name|tool
operator|.
name|AdditionalLibraryDirectories
argument_list|,
literal|";"
argument_list|)
operator|<<
name|attrTagX
argument_list|(
name|_AdditionalManifestDependencies
argument_list|,
name|tool
operator|.
name|AdditionalManifestDependencies
argument_list|,
literal|";"
argument_list|)
operator|<<
name|attrTagX
argument_list|(
name|_AdditionalOptions
argument_list|,
name|tool
operator|.
name|AdditionalOptions
argument_list|,
literal|" "
argument_list|)
operator|<<
name|attrTagX
argument_list|(
name|_AddModuleNamesToAssembly
argument_list|,
name|tool
operator|.
name|AddModuleNamesToAssembly
argument_list|,
literal|";"
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_AllowIsolation
argument_list|,
name|tool
operator|.
name|AllowIsolation
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_AssemblyDebug
argument_list|,
name|tool
operator|.
name|AssemblyDebug
argument_list|)
operator|<<
name|attrTagX
argument_list|(
name|_AssemblyLinkResource
argument_list|,
name|tool
operator|.
name|AssemblyLinkResource
argument_list|,
literal|";"
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_BaseAddress
argument_list|,
name|tool
operator|.
name|BaseAddress
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_CLRImageType
argument_list|,
name|tool
operator|.
name|CLRImageType
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_CLRSupportLastError
argument_list|,
name|tool
operator|.
name|CLRSupportLastError
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_CLRThreadAttribute
argument_list|,
name|tool
operator|.
name|CLRThreadAttribute
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_CLRUnmanagedCodeCheck
argument_list|,
name|tool
operator|.
name|CLRUnmanagedCodeCheck
argument_list|)
comment|//unused<< attrTagS(_CreateHotPatchableImage, tool.CreateHotPatchableImage)
operator|<<
name|attrTagT
argument_list|(
name|_DataExecutionPrevention
argument_list|,
name|tool
operator|.
name|DataExecutionPrevention
argument_list|)
operator|<<
name|attrTagX
argument_list|(
name|_DelayLoadDLLs
argument_list|,
name|tool
operator|.
name|DelayLoadDLLs
argument_list|,
literal|";"
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_DelaySign
argument_list|,
name|tool
operator|.
name|DelaySign
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_EmbedManagedResourceFile
argument_list|,
name|tool
operator|.
name|LinkToManagedResourceFile
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_EnableCOMDATFolding
argument_list|,
name|toTriState
argument_list|(
name|tool
operator|.
name|EnableCOMDATFolding
argument_list|)
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_EnableUAC
argument_list|,
name|tool
operator|.
name|EnableUAC
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_EntryPointSymbol
argument_list|,
name|tool
operator|.
name|EntryPointSymbol
argument_list|)
operator|<<
name|attrTagX
argument_list|(
name|_ForceSymbolReferences
argument_list|,
name|tool
operator|.
name|ForceSymbolReferences
argument_list|,
literal|";"
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_FunctionOrder
argument_list|,
name|tool
operator|.
name|FunctionOrder
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_GenerateDebugInformation
argument_list|,
name|tool
operator|.
name|GenerateDebugInformation
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_GenerateManifest
argument_list|,
name|tool
operator|.
name|GenerateManifest
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_GenerateMapFile
argument_list|,
name|tool
operator|.
name|GenerateMapFile
argument_list|)
operator|<<
name|attrTagL
argument_list|(
name|_HeapCommitSize
argument_list|,
name|tool
operator|.
name|HeapCommitSize
argument_list|,
comment|/*ifNot*/
operator|-
literal|1
argument_list|)
operator|<<
name|attrTagL
argument_list|(
name|_HeapReserveSize
argument_list|,
name|tool
operator|.
name|HeapReserveSize
argument_list|,
comment|/*ifNot*/
operator|-
literal|1
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_IgnoreAllDefaultLibraries
argument_list|,
name|tool
operator|.
name|IgnoreAllDefaultLibraries
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_IgnoreEmbeddedIDL
argument_list|,
name|tool
operator|.
name|IgnoreEmbeddedIDL
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_IgnoreImportLibrary
argument_list|,
name|tool
operator|.
name|IgnoreImportLibrary
argument_list|)
operator|<<
name|attrTagX
argument_list|(
name|_IgnoreSpecificDefaultLibraries
argument_list|,
name|tool
operator|.
name|IgnoreDefaultLibraryNames
argument_list|,
literal|";"
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_ImportLibrary
argument_list|,
name|tool
operator|.
name|ImportLibrary
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_KeyContainer
argument_list|,
name|tool
operator|.
name|KeyContainer
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_KeyFile
argument_list|,
name|tool
operator|.
name|KeyFile
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_LargeAddressAware
argument_list|,
name|toTriState
argument_list|(
name|tool
operator|.
name|LargeAddressAware
argument_list|)
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_LinkDLL
argument_list|,
operator|(
name|tool
operator|.
name|config
operator|->
name|ConfigurationType
operator|==
name|typeDynamicLibrary
condition|?
name|_True
else|:
name|unset
operator|)
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_LinkErrorReporting
argument_list|,
name|tool
operator|.
name|LinkErrorReporting
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_LinkIncremental
argument_list|,
name|toTriState
argument_list|(
name|tool
operator|.
name|LinkIncremental
argument_list|)
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_LinkStatus
argument_list|,
name|toTriState
argument_list|(
name|tool
operator|.
name|ShowProgress
argument_list|)
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_LinkTimeCodeGeneration
argument_list|,
name|toString
argument_list|(
name|tool
operator|.
name|LinkTimeCodeGeneration
argument_list|)
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_ManifestFile
argument_list|,
name|tool
operator|.
name|ManifestFile
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_MapExports
argument_list|,
name|tool
operator|.
name|MapExports
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_MapFileName
argument_list|,
name|tool
operator|.
name|MapFileName
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_MergedIDLBaseFileName
argument_list|,
name|tool
operator|.
name|MergedIDLBaseFileName
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_MergeSections
argument_list|,
name|tool
operator|.
name|MergeSections
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_MidlCommandFile
argument_list|,
name|tool
operator|.
name|MidlCommandFile
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_ModuleDefinitionFile
argument_list|,
name|tool
operator|.
name|ModuleDefinitionFile
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_NoEntryPoint
argument_list|,
name|tool
operator|.
name|ResourceOnlyDLL
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_OptimizeReferences
argument_list|,
name|toTriState
argument_list|(
name|tool
operator|.
name|OptimizeReferences
argument_list|)
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_OutputFile
argument_list|,
name|tool
operator|.
name|OutputFile
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_PreventDllBinding
argument_list|,
name|tool
operator|.
name|PreventDllBinding
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_ProgramDatabaseFile
argument_list|,
name|tool
operator|.
name|ProgramDatabaseFile
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_RandomizedBaseAddress
argument_list|,
name|tool
operator|.
name|RandomizedBaseAddress
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_RegisterOutput
argument_list|,
name|tool
operator|.
name|RegisterOutput
argument_list|)
operator|<<
name|attrTagL
argument_list|(
name|_SectionAlignment
argument_list|,
name|tool
operator|.
name|SectionAlignment
argument_list|,
comment|/*ifNot*/
operator|-
literal|1
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_SetChecksum
argument_list|,
name|tool
operator|.
name|SetChecksum
argument_list|)
operator|<<
name|attrTagL
argument_list|(
name|_StackCommitSize
argument_list|,
name|tool
operator|.
name|StackCommitSize
argument_list|,
comment|/*ifNot*/
operator|-
literal|1
argument_list|)
operator|<<
name|attrTagL
argument_list|(
name|_StackReserveSize
argument_list|,
name|tool
operator|.
name|StackReserveSize
argument_list|,
comment|/*ifNot*/
operator|-
literal|1
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_StripPrivateSymbols
argument_list|,
name|tool
operator|.
name|StripPrivateSymbols
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_SubSystem
argument_list|,
name|toString
argument_list|(
name|tool
operator|.
name|SubSystem
argument_list|)
argument_list|)
comment|//<< attrTagT(_SupportNobindOfDelayLoadedDLL, tool.SupportNobindOfDelayLoadedDLL)
operator|<<
name|attrTagT
argument_list|(
name|_SupportUnloadOfDelayLoadedDLL
argument_list|,
name|tool
operator|.
name|SupportUnloadOfDelayLoadedDLL
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_SuppressStartupBanner
argument_list|,
name|tool
operator|.
name|SuppressStartupBanner
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_SwapRunFromCD
argument_list|,
name|tool
operator|.
name|SwapRunFromCD
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_SwapRunFromNet
argument_list|,
name|tool
operator|.
name|SwapRunFromNet
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_TargetMachine
argument_list|,
name|toString
argument_list|(
name|tool
operator|.
name|TargetMachine
argument_list|)
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_TerminalServerAware
argument_list|,
name|toTriState
argument_list|(
name|tool
operator|.
name|TerminalServerAware
argument_list|)
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_TreatLinkerWarningAsErrors
argument_list|,
name|tool
operator|.
name|TreatWarningsAsErrors
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_TurnOffAssemblyGeneration
argument_list|,
name|tool
operator|.
name|TurnOffAssemblyGeneration
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_TypeLibraryFile
argument_list|,
name|tool
operator|.
name|TypeLibraryFile
argument_list|)
operator|<<
name|attrTagL
argument_list|(
name|_TypeLibraryResourceID
argument_list|,
name|tool
operator|.
name|TypeLibraryResourceID
argument_list|,
comment|/*ifNot*/
literal|0
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_UACExecutionLevel
argument_list|,
name|tool
operator|.
name|UACExecutionLevel
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_UACUIAccess
argument_list|,
name|tool
operator|.
name|UACUIAccess
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_Version
argument_list|,
name|tool
operator|.
name|Version
argument_list|)
operator|<<
name|closetag
argument_list|(
name|_Link
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|write
name|void
name|VCXProjectWriter
operator|::
name|write
parameter_list|(
name|XmlOutput
modifier|&
name|xml
parameter_list|,
specifier|const
name|VCMIDLTool
modifier|&
name|tool
parameter_list|)
block|{
name|xml
operator|<<
name|tag
argument_list|(
name|_Midl
argument_list|)
operator|<<
name|attrTagX
argument_list|(
name|_AdditionalIncludeDirectories
argument_list|,
name|tool
operator|.
name|AdditionalIncludeDirectories
argument_list|,
literal|";"
argument_list|)
operator|<<
name|attrTagX
argument_list|(
name|_AdditionalOptions
argument_list|,
name|tool
operator|.
name|AdditionalOptions
argument_list|,
literal|" "
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_ApplicationConfigurationMode
argument_list|,
name|tool
operator|.
name|ApplicationConfigurationMode
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_ClientStubFile
argument_list|,
name|tool
operator|.
name|ClientStubFile
argument_list|)
operator|<<
name|attrTagX
argument_list|(
name|_CPreprocessOptions
argument_list|,
name|tool
operator|.
name|CPreprocessOptions
argument_list|,
literal|" "
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_DefaultCharType
argument_list|,
name|toString
argument_list|(
name|tool
operator|.
name|DefaultCharType
argument_list|)
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_DLLDataFileName
argument_list|,
name|tool
operator|.
name|DLLDataFileName
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_EnableErrorChecks
argument_list|,
name|toString
argument_list|(
name|tool
operator|.
name|EnableErrorChecks
argument_list|)
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_ErrorCheckAllocations
argument_list|,
name|tool
operator|.
name|ErrorCheckAllocations
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_ErrorCheckBounds
argument_list|,
name|tool
operator|.
name|ErrorCheckBounds
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_ErrorCheckEnumRange
argument_list|,
name|tool
operator|.
name|ErrorCheckEnumRange
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_ErrorCheckRefPointers
argument_list|,
name|tool
operator|.
name|ErrorCheckRefPointers
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_ErrorCheckStubData
argument_list|,
name|tool
operator|.
name|ErrorCheckStubData
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_GenerateClientFiles
argument_list|,
name|tool
operator|.
name|GenerateClientFiles
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_GenerateServerFiles
argument_list|,
name|tool
operator|.
name|GenerateServerFiles
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_GenerateStublessProxies
argument_list|,
name|tool
operator|.
name|GenerateStublessProxies
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_GenerateTypeLibrary
argument_list|,
name|tool
operator|.
name|GenerateTypeLibrary
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_HeaderFileName
argument_list|,
name|tool
operator|.
name|HeaderFileName
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_IgnoreStandardIncludePath
argument_list|,
name|tool
operator|.
name|IgnoreStandardIncludePath
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_InterfaceIdentifierFileName
argument_list|,
name|tool
operator|.
name|InterfaceIdentifierFileName
argument_list|)
operator|<<
name|attrTagL
argument_list|(
name|_LocaleID
argument_list|,
name|tool
operator|.
name|LocaleID
argument_list|,
comment|/*ifNot*/
operator|-
literal|1
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_MkTypLibCompatible
argument_list|,
name|tool
operator|.
name|MkTypLibCompatible
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_OutputDirectory
argument_list|,
name|tool
operator|.
name|OutputDirectory
argument_list|)
operator|<<
name|attrTagX
argument_list|(
name|_PreprocessorDefinitions
argument_list|,
name|tool
operator|.
name|PreprocessorDefinitions
argument_list|,
literal|";"
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_ProxyFileName
argument_list|,
name|tool
operator|.
name|ProxyFileName
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_RedirectOutputAndErrors
argument_list|,
name|tool
operator|.
name|RedirectOutputAndErrors
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_ServerStubFile
argument_list|,
name|tool
operator|.
name|ServerStubFile
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_StructMemberAlignment
argument_list|,
name|toString
argument_list|(
name|tool
operator|.
name|StructMemberAlignment
argument_list|)
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_SuppressCompilerWarnings
argument_list|,
name|tool
operator|.
name|SuppressCompilerWarnings
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_SuppressStartupBanner
argument_list|,
name|tool
operator|.
name|SuppressStartupBanner
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_TargetEnvironment
argument_list|,
name|toString
argument_list|(
name|tool
operator|.
name|TargetEnvironment
argument_list|)
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_TypeLibFormat
argument_list|,
name|tool
operator|.
name|TypeLibFormat
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_TypeLibraryName
argument_list|,
name|tool
operator|.
name|TypeLibraryName
argument_list|)
operator|<<
name|attrTagX
argument_list|(
name|_UndefinePreprocessorDefinitions
argument_list|,
name|tool
operator|.
name|UndefinePreprocessorDefinitions
argument_list|,
literal|";"
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_ValidateAllParameters
argument_list|,
name|tool
operator|.
name|ValidateAllParameters
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_WarnAsError
argument_list|,
name|tool
operator|.
name|WarnAsError
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_WarningLevel
argument_list|,
name|toString
argument_list|(
name|tool
operator|.
name|WarningLevel
argument_list|)
argument_list|)
operator|<<
name|closetag
argument_list|(
name|_Midl
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|write
name|void
name|VCXProjectWriter
operator|::
name|write
parameter_list|(
name|XmlOutput
modifier|&
name|xml
parameter_list|,
specifier|const
name|VCCustomBuildTool
modifier|&
name|tool
parameter_list|)
block|{
specifier|const
name|QString
name|condition
init|=
name|generateCondition
argument_list|(
operator|*
name|tool
operator|.
name|config
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tool
operator|.
name|AdditionalDependencies
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|xml
operator|<<
name|tag
argument_list|(
literal|"AdditionalInputs"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Condition"
argument_list|,
name|condition
argument_list|)
operator|<<
name|valueTagDefX
argument_list|(
name|tool
operator|.
name|AdditionalDependencies
argument_list|,
literal|"AdditionalInputs"
argument_list|,
literal|";"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|tool
operator|.
name|CommandLine
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|xml
operator|<<
name|tag
argument_list|(
literal|"Command"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Condition"
argument_list|,
name|condition
argument_list|)
operator|<<
name|valueTag
argument_list|(
name|tool
operator|.
name|CommandLine
operator|.
name|join
argument_list|(
name|vcxCommandSeparator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|tool
operator|.
name|Description
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|xml
operator|<<
name|tag
argument_list|(
literal|"Message"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Condition"
argument_list|,
name|condition
argument_list|)
operator|<<
name|valueTag
argument_list|(
name|tool
operator|.
name|Description
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|tool
operator|.
name|Outputs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|xml
operator|<<
name|tag
argument_list|(
literal|"Outputs"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Condition"
argument_list|,
name|condition
argument_list|)
operator|<<
name|valueTagDefX
argument_list|(
name|tool
operator|.
name|Outputs
argument_list|,
literal|"Outputs"
argument_list|,
literal|";"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|write
name|void
name|VCXProjectWriter
operator|::
name|write
parameter_list|(
name|XmlOutput
modifier|&
name|xml
parameter_list|,
specifier|const
name|VCLibrarianTool
modifier|&
name|tool
parameter_list|)
block|{
name|xml
operator|<<
name|tag
argument_list|(
name|_Link
argument_list|)
operator|<<
name|attrTagX
argument_list|(
name|_AdditionalDependencies
argument_list|,
name|tool
operator|.
name|AdditionalDependencies
argument_list|,
literal|";"
argument_list|)
operator|<<
name|attrTagX
argument_list|(
name|_AdditionalLibraryDirectories
argument_list|,
name|tool
operator|.
name|AdditionalLibraryDirectories
argument_list|,
literal|";"
argument_list|)
operator|<<
name|attrTagX
argument_list|(
name|_AdditionalOptions
argument_list|,
name|tool
operator|.
name|AdditionalOptions
argument_list|,
literal|" "
argument_list|)
comment|//unused<< attrTagS(_DisplayLibrary, tool.DisplayLibrary)
comment|//unused<< attrTagS(_ErrorReporting, tool.ErrorReporting)
operator|<<
name|attrTagX
argument_list|(
name|_ExportNamedFunctions
argument_list|,
name|tool
operator|.
name|ExportNamedFunctions
argument_list|,
literal|";"
argument_list|)
operator|<<
name|attrTagX
argument_list|(
name|_ForceSymbolReferences
argument_list|,
name|tool
operator|.
name|ForceSymbolReferences
argument_list|,
literal|";"
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_IgnoreAllDefaultLibraries
argument_list|,
name|tool
operator|.
name|IgnoreAllDefaultLibraries
argument_list|)
operator|<<
name|attrTagX
argument_list|(
name|_IgnoreSpecificDefaultLibraries
argument_list|,
name|tool
operator|.
name|IgnoreDefaultLibraryNames
argument_list|,
literal|";"
argument_list|)
comment|//unused<< attrTagT(_LinkTimeCodeGeneration, tool.LinkTimeCodeGeneration)
operator|<<
name|attrTagS
argument_list|(
name|_ModuleDefinitionFile
argument_list|,
name|tool
operator|.
name|ModuleDefinitionFile
argument_list|)
comment|//unused<< attrTagS(_Name, tool.Name)
operator|<<
name|attrTagS
argument_list|(
name|_OutputFile
argument_list|,
name|tool
operator|.
name|OutputFile
argument_list|)
comment|//unused<< attrTagX(_RemoveObjects, tool.RemoveObjects, ";")
comment|//unused<< attrTagS(_SubSystem, tool.SubSystem)
operator|<<
name|attrTagT
argument_list|(
name|_SuppressStartupBanner
argument_list|,
name|tool
operator|.
name|SuppressStartupBanner
argument_list|)
comment|//unused<< attrTagS(_TargetMachine, tool.TargetMachine)
comment|//unused<< attrTagT(_TreatLibWarningAsErrors, tool.TreatLibWarningAsErrors)
comment|//unused<< attrTagT(_Verbose, tool.Verbose)
operator|<<
name|closetag
argument_list|(
name|_Link
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|write
name|void
name|VCXProjectWriter
operator|::
name|write
parameter_list|(
name|XmlOutput
modifier|&
name|xml
parameter_list|,
specifier|const
name|VCResourceCompilerTool
modifier|&
name|tool
parameter_list|)
block|{
name|xml
operator|<<
name|tag
argument_list|(
name|_ResourceCompile
argument_list|)
operator|<<
name|attrTagX
argument_list|(
name|_AdditionalIncludeDirectories
argument_list|,
name|tool
operator|.
name|AdditionalIncludeDirectories
argument_list|,
literal|";"
argument_list|)
operator|<<
name|attrTagX
argument_list|(
name|_AdditionalOptions
argument_list|,
name|tool
operator|.
name|AdditionalOptions
argument_list|,
literal|" "
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_Culture
argument_list|,
name|toString
argument_list|(
name|tool
operator|.
name|Culture
argument_list|)
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_IgnoreStandardIncludePath
argument_list|,
name|tool
operator|.
name|IgnoreStandardIncludePath
argument_list|)
comment|//unused<< attrTagT(_NullTerminateStrings, tool.NullTerminateStrings)
operator|<<
name|attrTagX
argument_list|(
name|_PreprocessorDefinitions
argument_list|,
name|tool
operator|.
name|PreprocessorDefinitions
argument_list|,
literal|";"
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_ResourceOutputFileName
argument_list|,
name|tool
operator|.
name|ResourceOutputFileName
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_ShowProgress
argument_list|,
name|toTriState
argument_list|(
name|tool
operator|.
name|ShowProgress
argument_list|)
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_SuppressStartupBanner
argument_list|,
name|tool
operator|.
name|SuppressStartupBanner
argument_list|)
comment|//unused<< attrTagS(_TrackerLogDirectory, tool.TrackerLogDirectory)
comment|//unused<< attrTagS(_UndefinePreprocessorDefinitions, tool.UndefinePreprocessorDefinitions)
operator|<<
name|closetag
argument_list|(
name|_ResourceCompile
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|write
name|void
name|VCXProjectWriter
operator|::
name|write
parameter_list|(
name|XmlOutput
modifier|&
name|xml
parameter_list|,
specifier|const
name|VCEventTool
modifier|&
name|tool
parameter_list|)
block|{
name|xml
operator|<<
name|tag
argument_list|(
name|tool
operator|.
name|EventName
argument_list|)
operator|<<
name|tag
argument_list|(
name|_Command
argument_list|)
operator|<<
name|valueTag
argument_list|(
name|tool
operator|.
name|CommandLine
operator|.
name|join
argument_list|(
name|vcxCommandSeparator
argument_list|()
argument_list|)
argument_list|)
operator|<<
name|tag
argument_list|(
name|_Message
argument_list|)
operator|<<
name|valueTag
argument_list|(
name|tool
operator|.
name|Description
argument_list|)
operator|<<
name|closetag
argument_list|(
name|tool
operator|.
name|EventName
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|write
name|void
name|VCXProjectWriter
operator|::
name|write
parameter_list|(
name|XmlOutput
modifier|&
name|xml
parameter_list|,
specifier|const
name|VCDeploymentTool
modifier|&
name|tool
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|xml
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|tool
argument_list|)
expr_stmt|;
comment|// SmartDevice deployment not supported in VS 2010
block|}
end_function
begin_function
DECL|function|write
name|void
name|VCXProjectWriter
operator|::
name|write
parameter_list|(
name|XmlOutput
modifier|&
name|xml
parameter_list|,
specifier|const
name|VCConfiguration
modifier|&
name|tool
parameter_list|)
block|{
name|xml
operator|<<
name|tag
argument_list|(
literal|"PropertyGroup"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Condition"
argument_list|,
name|generateCondition
argument_list|(
name|tool
argument_list|)
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Label"
argument_list|,
literal|"Configuration"
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_OutputDirectory
argument_list|,
name|tool
operator|.
name|OutputDirectory
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_ATLMinimizesCRunTimeLibraryUsage
argument_list|,
name|tool
operator|.
name|ATLMinimizesCRunTimeLibraryUsage
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_BuildBrowserInformation
argument_list|,
name|tool
operator|.
name|BuildBrowserInformation
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_CharacterSet
argument_list|,
name|toString
argument_list|(
name|tool
operator|.
name|CharacterSet
argument_list|)
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_ConfigurationType
argument_list|,
name|toString
argument_list|(
name|tool
operator|.
name|ConfigurationType
argument_list|)
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_DeleteExtensionsOnClean
argument_list|,
name|tool
operator|.
name|DeleteExtensionsOnClean
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_ImportLibrary
argument_list|,
name|tool
operator|.
name|ImportLibrary
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_IntermediateDirectory
argument_list|,
name|tool
operator|.
name|IntermediateDirectory
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_PrimaryOutput
argument_list|,
name|tool
operator|.
name|PrimaryOutput
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_ProgramDatabase
argument_list|,
name|tool
operator|.
name|ProgramDatabase
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_RegisterOutput
argument_list|,
name|tool
operator|.
name|RegisterOutput
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_UseOfATL
argument_list|,
name|toString
argument_list|(
name|tool
operator|.
name|UseOfATL
argument_list|)
argument_list|)
operator|<<
name|attrTagS
argument_list|(
name|_UseOfMfc
argument_list|,
name|toString
argument_list|(
name|tool
operator|.
name|UseOfMfc
argument_list|)
argument_list|)
operator|<<
name|attrTagT
argument_list|(
name|_WholeProgramOptimization
argument_list|,
name|tool
operator|.
name|WholeProgramOptimization
argument_list|)
operator|<<
name|closetag
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|write
name|void
name|VCXProjectWriter
operator|::
name|write
parameter_list|(
name|XmlOutput
modifier|&
name|xml
parameter_list|,
name|VCFilter
modifier|&
name|tool
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|xml
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|tool
argument_list|)
expr_stmt|;
comment|// unused in this generator
block|}
end_function
begin_function
DECL|function|addFilters
name|void
name|VCXProjectWriter
operator|::
name|addFilters
parameter_list|(
name|VCProject
modifier|&
name|project
parameter_list|,
name|XmlOutput
modifier|&
name|xmlFilter
parameter_list|,
specifier|const
name|QString
modifier|&
name|filtername
parameter_list|)
block|{
name|bool
name|added
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|project
operator|.
name|SingleProjects
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|VCFilter
name|filter
decl_stmt|;
specifier|const
name|VCProjectSingleConfig
modifier|&
name|singleCfg
init|=
name|project
operator|.
name|SingleProjects
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|filtername
operator|==
literal|"Root Files"
condition|)
block|{
name|filter
operator|=
name|singleCfg
operator|.
name|RootFiles
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filtername
operator|==
literal|"Source Files"
condition|)
block|{
name|filter
operator|=
name|singleCfg
operator|.
name|SourceFiles
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filtername
operator|==
literal|"Header Files"
condition|)
block|{
name|filter
operator|=
name|singleCfg
operator|.
name|HeaderFiles
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filtername
operator|==
literal|"Generated Files"
condition|)
block|{
name|filter
operator|=
name|singleCfg
operator|.
name|GeneratedFiles
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filtername
operator|==
literal|"LexYacc Files"
condition|)
block|{
name|filter
operator|=
name|singleCfg
operator|.
name|LexYaccFiles
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filtername
operator|==
literal|"Translation Files"
condition|)
block|{
name|filter
operator|=
name|singleCfg
operator|.
name|TranslationFiles
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filtername
operator|==
literal|"Form Files"
condition|)
block|{
name|filter
operator|=
name|singleCfg
operator|.
name|FormFiles
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filtername
operator|==
literal|"Resource Files"
condition|)
block|{
name|filter
operator|=
name|singleCfg
operator|.
name|ResourceFiles
expr_stmt|;
block|}
else|else
block|{
comment|// ExtraCompilers
name|filter
operator|=
name|project
operator|.
name|SingleProjects
index|[
name|i
index|]
operator|.
name|filterForExtraCompiler
argument_list|(
name|filtername
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|filter
operator|.
name|Files
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|added
condition|)
block|{
name|xmlFilter
operator|<<
name|tag
argument_list|(
literal|"Filter"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Include"
argument_list|,
name|filtername
argument_list|)
operator|<<
name|attrTagS
argument_list|(
literal|"UniqueIdentifier"
argument_list|,
name|filter
operator|.
name|Guid
argument_list|)
operator|<<
name|attrTagS
argument_list|(
literal|"Extensions"
argument_list|,
name|filter
operator|.
name|Filter
argument_list|)
operator|<<
name|attrTagT
argument_list|(
literal|"ParseFiles"
argument_list|,
name|filter
operator|.
name|ParseFiles
argument_list|)
operator|<<
name|closetag
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|// outputs a given filter for all existing configurations of a project
end_comment
begin_function
DECL|function|outputFilter
name|void
name|VCXProjectWriter
operator|::
name|outputFilter
parameter_list|(
name|VCProject
modifier|&
name|project
parameter_list|,
name|XmlOutput
modifier|&
name|xml
parameter_list|,
name|XmlOutput
modifier|&
name|xmlFilter
parameter_list|,
specifier|const
name|QString
modifier|&
name|filtername
parameter_list|)
block|{
name|XNode
modifier|*
name|root
decl_stmt|;
if|if
condition|(
name|project
operator|.
name|SingleProjects
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|flat_files
condition|)
name|root
operator|=
operator|new
name|XFlatNode
expr_stmt|;
else|else
name|root
operator|=
operator|new
name|XTreeNode
expr_stmt|;
name|QString
name|name
decl_stmt|,
name|extfilter
decl_stmt|;
name|triState
name|parse
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|project
operator|.
name|SingleProjects
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|VCFilter
name|filter
decl_stmt|;
specifier|const
name|VCProjectSingleConfig
modifier|&
name|singleCfg
init|=
name|project
operator|.
name|SingleProjects
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|filtername
operator|==
literal|"Root Files"
condition|)
block|{
name|filter
operator|=
name|singleCfg
operator|.
name|RootFiles
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filtername
operator|==
literal|"Source Files"
condition|)
block|{
name|filter
operator|=
name|singleCfg
operator|.
name|SourceFiles
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filtername
operator|==
literal|"Header Files"
condition|)
block|{
name|filter
operator|=
name|singleCfg
operator|.
name|HeaderFiles
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filtername
operator|==
literal|"Generated Files"
condition|)
block|{
name|filter
operator|=
name|singleCfg
operator|.
name|GeneratedFiles
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filtername
operator|==
literal|"LexYacc Files"
condition|)
block|{
name|filter
operator|=
name|singleCfg
operator|.
name|LexYaccFiles
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filtername
operator|==
literal|"Translation Files"
condition|)
block|{
name|filter
operator|=
name|singleCfg
operator|.
name|TranslationFiles
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filtername
operator|==
literal|"Form Files"
condition|)
block|{
name|filter
operator|=
name|singleCfg
operator|.
name|FormFiles
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filtername
operator|==
literal|"Resource Files"
condition|)
block|{
name|filter
operator|=
name|singleCfg
operator|.
name|ResourceFiles
expr_stmt|;
block|}
else|else
block|{
comment|// ExtraCompilers
name|filter
operator|=
name|project
operator|.
name|SingleProjects
index|[
name|i
index|]
operator|.
name|filterForExtraCompiler
argument_list|(
name|filtername
argument_list|)
expr_stmt|;
block|}
comment|// Merge all files in this filter to root tree
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|filter
operator|.
name|Files
operator|.
name|count
argument_list|()
condition|;
operator|++
name|x
control|)
name|root
operator|->
name|addElement
argument_list|(
name|filter
operator|.
name|Files
operator|.
name|at
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
comment|// Save filter setting from first filter. Next filters
comment|// may differ but we cannot handle that. (ex. extfilter)
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|name
operator|=
name|filter
operator|.
name|Name
expr_stmt|;
name|extfilter
operator|=
name|filter
operator|.
name|Filter
expr_stmt|;
name|parse
operator|=
name|filter
operator|.
name|ParseFiles
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|root
operator|->
name|hasElements
argument_list|()
condition|)
return|return;
name|root
operator|->
name|generateXML
argument_list|(
name|xml
argument_list|,
name|xmlFilter
argument_list|,
literal|""
argument_list|,
name|project
argument_list|,
name|filtername
argument_list|)
expr_stmt|;
comment|// output root tree
block|}
end_function
begin_comment
comment|// Output all configurations (by filtername) for a file (by info)
end_comment
begin_comment
comment|// A filters config output is in VCFilter.outputFileConfig()
end_comment
begin_function
DECL|function|outputFileConfigs
name|void
name|VCXProjectWriter
operator|::
name|outputFileConfigs
parameter_list|(
name|VCProject
modifier|&
name|project
parameter_list|,
name|XmlOutput
modifier|&
name|xml
parameter_list|,
name|XmlOutput
modifier|&
name|xmlFilter
parameter_list|,
specifier|const
name|VCFilterFile
modifier|&
name|info
parameter_list|,
specifier|const
name|QString
modifier|&
name|filtername
parameter_list|)
block|{
comment|// We need to check if the file has any custom build step.
comment|// If there is one then it has to be included with "CustomBuild Include"
name|bool
name|fileAdded
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|project
operator|.
name|SingleProjects
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|VCFilter
name|filter
decl_stmt|;
specifier|const
name|VCProjectSingleConfig
modifier|&
name|singleCfg
init|=
name|project
operator|.
name|SingleProjects
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|filtername
operator|.
name|startsWith
argument_list|(
literal|"Root Files"
argument_list|)
condition|)
block|{
name|filter
operator|=
name|singleCfg
operator|.
name|RootFiles
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filtername
operator|.
name|startsWith
argument_list|(
literal|"Source Files"
argument_list|)
condition|)
block|{
name|filter
operator|=
name|singleCfg
operator|.
name|SourceFiles
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filtername
operator|.
name|startsWith
argument_list|(
literal|"Header Files"
argument_list|)
condition|)
block|{
name|filter
operator|=
name|singleCfg
operator|.
name|HeaderFiles
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filtername
operator|.
name|startsWith
argument_list|(
literal|"Generated Files"
argument_list|)
condition|)
block|{
name|filter
operator|=
name|singleCfg
operator|.
name|GeneratedFiles
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filtername
operator|.
name|startsWith
argument_list|(
literal|"LexYacc Files"
argument_list|)
condition|)
block|{
name|filter
operator|=
name|singleCfg
operator|.
name|LexYaccFiles
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filtername
operator|.
name|startsWith
argument_list|(
literal|"Translation Files"
argument_list|)
condition|)
block|{
name|filter
operator|=
name|singleCfg
operator|.
name|TranslationFiles
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filtername
operator|.
name|startsWith
argument_list|(
literal|"Form Files"
argument_list|)
condition|)
block|{
name|filter
operator|=
name|singleCfg
operator|.
name|FormFiles
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filtername
operator|.
name|startsWith
argument_list|(
literal|"Resource Files"
argument_list|)
condition|)
block|{
name|filter
operator|=
name|singleCfg
operator|.
name|ResourceFiles
expr_stmt|;
block|}
else|else
block|{
comment|// ExtraCompilers
name|filter
operator|=
name|project
operator|.
name|SingleProjects
index|[
name|i
index|]
operator|.
name|filterForExtraCompiler
argument_list|(
name|filtername
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|filter
operator|.
name|Config
condition|)
comment|// only if the filter is not empty
if|if
condition|(
name|outputFileConfig
argument_list|(
name|filter
argument_list|,
name|xml
argument_list|,
name|xmlFilter
argument_list|,
name|info
operator|.
name|file
argument_list|,
name|filtername
argument_list|,
name|fileAdded
argument_list|)
condition|)
comment|// only add it once.
name|fileAdded
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|fileAdded
condition|)
block|{
if|if
condition|(
name|filtername
operator|.
name|startsWith
argument_list|(
literal|"Source Files"
argument_list|)
condition|)
block|{
name|xmlFilter
operator|<<
name|tag
argument_list|(
literal|"ClCompile"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Include"
argument_list|,
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|info
operator|.
name|file
argument_list|)
argument_list|)
operator|<<
name|attrTagS
argument_list|(
literal|"Filter"
argument_list|,
name|filtername
argument_list|)
expr_stmt|;
name|xml
operator|<<
name|tag
argument_list|(
literal|"ClCompile"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Include"
argument_list|,
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|info
operator|.
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filtername
operator|.
name|startsWith
argument_list|(
literal|"Header Files"
argument_list|)
condition|)
block|{
name|xmlFilter
operator|<<
name|tag
argument_list|(
literal|"ClInclude"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Include"
argument_list|,
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|info
operator|.
name|file
argument_list|)
argument_list|)
operator|<<
name|attrTagS
argument_list|(
literal|"Filter"
argument_list|,
name|filtername
argument_list|)
expr_stmt|;
name|xml
operator|<<
name|tag
argument_list|(
literal|"ClInclude"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Include"
argument_list|,
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|info
operator|.
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filtername
operator|.
name|startsWith
argument_list|(
literal|"Generated Files"
argument_list|)
operator|||
name|filtername
operator|.
name|startsWith
argument_list|(
literal|"Form Files"
argument_list|)
condition|)
block|{
if|if
condition|(
name|info
operator|.
name|file
operator|.
name|endsWith
argument_list|(
literal|".h"
argument_list|)
condition|)
block|{
name|xmlFilter
operator|<<
name|tag
argument_list|(
literal|"ClInclude"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Include"
argument_list|,
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|info
operator|.
name|file
argument_list|)
argument_list|)
operator|<<
name|attrTagS
argument_list|(
literal|"Filter"
argument_list|,
name|filtername
argument_list|)
expr_stmt|;
name|xml
operator|<<
name|tag
argument_list|(
literal|"ClInclude"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Include"
argument_list|,
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|info
operator|.
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|info
operator|.
name|file
operator|.
name|endsWith
argument_list|(
literal|".cpp"
argument_list|)
condition|)
block|{
name|xmlFilter
operator|<<
name|tag
argument_list|(
literal|"ClCompile"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Include"
argument_list|,
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|info
operator|.
name|file
argument_list|)
argument_list|)
operator|<<
name|attrTagS
argument_list|(
literal|"Filter"
argument_list|,
name|filtername
argument_list|)
expr_stmt|;
name|xml
operator|<<
name|tag
argument_list|(
literal|"ClCompile"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Include"
argument_list|,
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|info
operator|.
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|info
operator|.
name|file
operator|.
name|endsWith
argument_list|(
literal|".res"
argument_list|)
condition|)
block|{
name|xmlFilter
operator|<<
name|tag
argument_list|(
literal|"CustomBuild"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Include"
argument_list|,
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|info
operator|.
name|file
argument_list|)
argument_list|)
operator|<<
name|attrTagS
argument_list|(
literal|"Filter"
argument_list|,
name|filtername
argument_list|)
expr_stmt|;
name|xml
operator|<<
name|tag
argument_list|(
literal|"CustomBuild"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Include"
argument_list|,
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|info
operator|.
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|xmlFilter
operator|<<
name|tag
argument_list|(
literal|"CustomBuild"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Include"
argument_list|,
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|info
operator|.
name|file
argument_list|)
argument_list|)
operator|<<
name|attrTagS
argument_list|(
literal|"Filter"
argument_list|,
name|filtername
argument_list|)
expr_stmt|;
name|xml
operator|<<
name|tag
argument_list|(
literal|"CustomBuild"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Include"
argument_list|,
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|info
operator|.
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|filtername
operator|.
name|startsWith
argument_list|(
literal|"Root Files"
argument_list|)
condition|)
block|{
if|if
condition|(
name|info
operator|.
name|file
operator|.
name|endsWith
argument_list|(
literal|".rc"
argument_list|)
condition|)
block|{
name|xmlFilter
operator|<<
name|tag
argument_list|(
literal|"ResourceCompile"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Include"
argument_list|,
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|info
operator|.
name|file
argument_list|)
argument_list|)
expr_stmt|;
name|xml
operator|<<
name|tag
argument_list|(
literal|"ResourceCompile"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Include"
argument_list|,
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|info
operator|.
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|xmlFilter
operator|<<
name|tag
argument_list|(
literal|"None"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Include"
argument_list|,
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|info
operator|.
name|file
argument_list|)
argument_list|)
operator|<<
name|attrTagS
argument_list|(
literal|"Filter"
argument_list|,
name|filtername
argument_list|)
expr_stmt|;
name|xml
operator|<<
name|tag
argument_list|(
literal|"None"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Include"
argument_list|,
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|info
operator|.
name|file
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|xml
operator|<<
name|closetag
argument_list|()
expr_stmt|;
name|xmlFilter
operator|<<
name|closetag
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|outputFileConfig
name|bool
name|VCXProjectWriter
operator|::
name|outputFileConfig
parameter_list|(
name|VCFilter
modifier|&
name|filter
parameter_list|,
name|XmlOutput
modifier|&
name|xml
parameter_list|,
name|XmlOutput
modifier|&
name|xmlFilter
parameter_list|,
specifier|const
name|QString
modifier|&
name|filename
parameter_list|,
specifier|const
name|QString
modifier|&
name|filtername
parameter_list|,
name|bool
name|fileAllreadyAdded
parameter_list|)
block|{
name|bool
name|fileAdded
init|=
literal|false
decl_stmt|;
comment|// Clearing each filter tool
name|filter
operator|.
name|useCustomBuildTool
operator|=
literal|false
expr_stmt|;
name|filter
operator|.
name|useCompilerTool
operator|=
literal|false
expr_stmt|;
name|filter
operator|.
name|CustomBuildTool
operator|=
name|VCCustomBuildTool
argument_list|()
expr_stmt|;
name|filter
operator|.
name|CompilerTool
operator|=
name|VCCLCompilerTool
argument_list|()
expr_stmt|;
comment|// Unset some default options
name|filter
operator|.
name|CustomBuildTool
operator|.
name|config
operator|=
name|filter
operator|.
name|Config
expr_stmt|;
name|filter
operator|.
name|CompilerTool
operator|.
name|BufferSecurityCheck
operator|=
name|unset
expr_stmt|;
name|filter
operator|.
name|CompilerTool
operator|.
name|DebugInformationFormat
operator|=
name|debugUnknown
expr_stmt|;
name|filter
operator|.
name|CompilerTool
operator|.
name|ExceptionHandling
operator|=
name|ehDefault
expr_stmt|;
name|filter
operator|.
name|CompilerTool
operator|.
name|ProgramDataBaseFileName
operator|.
name|clear
argument_list|()
expr_stmt|;
name|filter
operator|.
name|CompilerTool
operator|.
name|RuntimeLibrary
operator|=
name|rtUnknown
expr_stmt|;
name|filter
operator|.
name|CompilerTool
operator|.
name|config
operator|=
name|filter
operator|.
name|Config
expr_stmt|;
name|bool
name|inBuild
init|=
literal|false
decl_stmt|;
name|VCFilterFile
name|info
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|filter
operator|.
name|Files
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|filter
operator|.
name|Files
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|file
operator|==
name|filename
condition|)
block|{
name|info
operator|=
name|filter
operator|.
name|Files
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|inBuild
operator|=
literal|true
expr_stmt|;
block|}
block|}
name|inBuild
operator|&=
operator|!
name|info
operator|.
name|excludeFromBuild
expr_stmt|;
if|if
condition|(
name|inBuild
condition|)
block|{
name|filter
operator|.
name|addExtraCompiler
argument_list|(
name|info
argument_list|)
expr_stmt|;
if|if
condition|(
name|filter
operator|.
name|Project
operator|->
name|usePCH
condition|)
name|filter
operator|.
name|modifyPCHstage
argument_list|(
name|info
operator|.
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Excluded files uses an empty compiler stage
if|if
condition|(
name|info
operator|.
name|excludeFromBuild
condition|)
name|filter
operator|.
name|useCompilerTool
operator|=
literal|true
expr_stmt|;
block|}
comment|// Actual XML output ----------------------------------
if|if
condition|(
name|filter
operator|.
name|useCustomBuildTool
operator|||
name|filter
operator|.
name|useCompilerTool
operator|||
operator|!
name|inBuild
condition|)
block|{
if|if
condition|(
name|filter
operator|.
name|useCustomBuildTool
condition|)
block|{
if|if
condition|(
operator|!
name|fileAllreadyAdded
condition|)
block|{
name|fileAdded
operator|=
literal|true
expr_stmt|;
name|xmlFilter
operator|<<
name|tag
argument_list|(
literal|"CustomBuild"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Include"
argument_list|,
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|filename
argument_list|)
argument_list|)
operator|<<
name|attrTagS
argument_list|(
literal|"Filter"
argument_list|,
name|filtername
argument_list|)
expr_stmt|;
name|xml
operator|<<
name|tag
argument_list|(
literal|"CustomBuild"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Include"
argument_list|,
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|filename
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|filtername
operator|.
name|startsWith
argument_list|(
literal|"Form Files"
argument_list|)
operator|||
name|filtername
operator|.
name|startsWith
argument_list|(
literal|"Generated Files"
argument_list|)
operator|||
name|filtername
operator|.
name|startsWith
argument_list|(
literal|"Resource Files"
argument_list|)
condition|)
name|xml
operator|<<
name|attrTagS
argument_list|(
literal|"FileType"
argument_list|,
literal|"Document"
argument_list|)
expr_stmt|;
block|}
name|filter
operator|.
name|Project
operator|->
name|projectWriter
operator|->
name|write
argument_list|(
name|xml
argument_list|,
name|filter
operator|.
name|CustomBuildTool
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|fileAdded
operator|&&
operator|!
name|fileAllreadyAdded
condition|)
block|{
name|fileAdded
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|filtername
operator|.
name|startsWith
argument_list|(
literal|"Source Files"
argument_list|)
condition|)
block|{
name|xmlFilter
operator|<<
name|tag
argument_list|(
literal|"ClCompile"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Include"
argument_list|,
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|filename
argument_list|)
argument_list|)
operator|<<
name|attrTagS
argument_list|(
literal|"Filter"
argument_list|,
name|filtername
argument_list|)
expr_stmt|;
name|xml
operator|<<
name|tag
argument_list|(
literal|"ClCompile"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Include"
argument_list|,
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|filename
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filtername
operator|.
name|startsWith
argument_list|(
literal|"Header Files"
argument_list|)
condition|)
block|{
name|xmlFilter
operator|<<
name|tag
argument_list|(
literal|"ClInclude"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Include"
argument_list|,
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|filename
argument_list|)
argument_list|)
operator|<<
name|attrTagS
argument_list|(
literal|"Filter"
argument_list|,
name|filtername
argument_list|)
expr_stmt|;
name|xml
operator|<<
name|tag
argument_list|(
literal|"ClInclude"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Include"
argument_list|,
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|filename
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filtername
operator|.
name|startsWith
argument_list|(
literal|"Generated Files"
argument_list|)
operator|||
name|filtername
operator|.
name|startsWith
argument_list|(
literal|"Form Files"
argument_list|)
condition|)
block|{
if|if
condition|(
name|filename
operator|.
name|endsWith
argument_list|(
literal|".h"
argument_list|)
condition|)
block|{
name|xmlFilter
operator|<<
name|tag
argument_list|(
literal|"ClInclude"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Include"
argument_list|,
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|filename
argument_list|)
argument_list|)
operator|<<
name|attrTagS
argument_list|(
literal|"Filter"
argument_list|,
name|filtername
argument_list|)
expr_stmt|;
name|xml
operator|<<
name|tag
argument_list|(
literal|"ClInclude"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Include"
argument_list|,
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|filename
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filename
operator|.
name|endsWith
argument_list|(
literal|".cpp"
argument_list|)
condition|)
block|{
name|xmlFilter
operator|<<
name|tag
argument_list|(
literal|"ClCompile"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Include"
argument_list|,
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|filename
argument_list|)
argument_list|)
operator|<<
name|attrTagS
argument_list|(
literal|"Filter"
argument_list|,
name|filtername
argument_list|)
expr_stmt|;
name|xml
operator|<<
name|tag
argument_list|(
literal|"ClCompile"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Include"
argument_list|,
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|filename
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|filename
operator|.
name|endsWith
argument_list|(
literal|".res"
argument_list|)
condition|)
block|{
name|xmlFilter
operator|<<
name|tag
argument_list|(
literal|"CustomBuild"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Include"
argument_list|,
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|filename
argument_list|)
argument_list|)
operator|<<
name|attrTagS
argument_list|(
literal|"Filter"
argument_list|,
name|filtername
argument_list|)
expr_stmt|;
name|xml
operator|<<
name|tag
argument_list|(
literal|"CustomBuild"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Include"
argument_list|,
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|filename
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|xmlFilter
operator|<<
name|tag
argument_list|(
literal|"CustomBuild"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Include"
argument_list|,
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|filename
argument_list|)
argument_list|)
operator|<<
name|attrTagS
argument_list|(
literal|"Filter"
argument_list|,
name|filtername
argument_list|)
expr_stmt|;
name|xml
operator|<<
name|tag
argument_list|(
literal|"CustomBuild"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Include"
argument_list|,
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|filename
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|filtername
operator|.
name|startsWith
argument_list|(
literal|"Root Files"
argument_list|)
condition|)
block|{
if|if
condition|(
name|filename
operator|.
name|endsWith
argument_list|(
literal|".rc"
argument_list|)
condition|)
block|{
name|xmlFilter
operator|<<
name|tag
argument_list|(
literal|"ResourceCompile"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Include"
argument_list|,
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|filename
argument_list|)
argument_list|)
expr_stmt|;
name|xml
operator|<<
name|tag
argument_list|(
literal|"ResourceCompile"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Include"
argument_list|,
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|filename
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
specifier|const
name|QString
name|condition
init|=
name|generateCondition
argument_list|(
operator|*
name|filter
operator|.
name|Config
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|inBuild
condition|)
block|{
name|xml
operator|<<
name|tag
argument_list|(
literal|"ExcludedFromBuild"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Condition"
argument_list|,
name|condition
argument_list|)
operator|<<
name|valueTag
argument_list|(
literal|"true"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|filter
operator|.
name|useCompilerTool
condition|)
block|{
if|if
condition|(
operator|!
name|filter
operator|.
name|CompilerTool
operator|.
name|ForcedIncludeFiles
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|xml
operator|<<
name|tag
argument_list|(
literal|"ForcedIncludeFiles"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Condition"
argument_list|,
name|condition
argument_list|)
operator|<<
name|valueTagX
argument_list|(
name|filter
operator|.
name|CompilerTool
operator|.
name|ForcedIncludeFiles
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|filter
operator|.
name|CompilerTool
operator|.
name|PrecompiledHeaderThrough
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|xml
operator|<<
name|tag
argument_list|(
literal|"PrecompiledHeaderFile"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Condition"
argument_list|,
name|condition
argument_list|)
operator|<<
name|valueTag
argument_list|(
name|filter
operator|.
name|CompilerTool
operator|.
name|PrecompiledHeaderThrough
argument_list|)
operator|<<
name|tag
argument_list|(
literal|"PrecompiledHeader"
argument_list|)
operator|<<
name|attrTag
argument_list|(
literal|"Condition"
argument_list|,
name|condition
argument_list|)
operator|<<
name|valueTag
argument_list|(
name|toString
argument_list|(
name|filter
operator|.
name|CompilerTool
operator|.
name|UsePrecompiledHeader
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|fileAdded
return|;
block|}
end_function
begin_function
DECL|function|generateCondition
name|QString
name|VCXProjectWriter
operator|::
name|generateCondition
parameter_list|(
specifier|const
name|VCConfiguration
modifier|&
name|config
parameter_list|)
block|{
return|return
name|QStringLiteral
argument_list|(
literal|"'$(Configuration)|$(Platform)'=='"
argument_list|)
operator|+
name|config
operator|.
name|Name
operator|+
name|QLatin1Char
argument_list|(
literal|'\''
argument_list|)
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
