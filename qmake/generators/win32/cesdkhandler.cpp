begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the tools applications of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"cesdkhandler.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/QFile>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_include
include|#
directive|include
file|<QtCore/QXmlStreamReader>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|CeSdkInfo
name|CeSdkInfo
operator|::
name|CeSdkInfo
parameter_list|()
member_init_list|:
name|m_major
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_minor
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_constructor
DECL|function|CeSdkHandler
name|CeSdkHandler
operator|::
name|CeSdkHandler
parameter_list|()
block|{ }
end_constructor
begin_function
DECL|function|parse
name|bool
name|CeSdkHandler
operator|::
name|parse
parameter_list|()
block|{
comment|// look at the file at %VCInstallDir%/vcpackages/WCE.VCPlatform.config
comment|// and scan through all installed sdks...
name|m_list
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_vcInstallDir
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|qgetenv
argument_list|(
literal|"VCInstallDir"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_vcInstallDir
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
name|QDir
name|vStudioDir
argument_list|(
name|m_vcInstallDir
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|vStudioDir
operator|.
name|cd
argument_list|(
name|QLatin1String
argument_list|(
literal|"vcpackages"
argument_list|)
argument_list|)
condition|)
return|return
literal|false
return|;
name|QFile
name|configFile
argument_list|(
name|vStudioDir
operator|.
name|absoluteFilePath
argument_list|(
name|QLatin1String
argument_list|(
literal|"WCE.VCPlatform.config"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|configFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
return|return
literal|false
return|;
name|QString
name|currentElement
decl_stmt|;
name|CeSdkInfo
name|currentItem
decl_stmt|;
name|QXmlStreamReader
name|xml
argument_list|(
operator|&
name|configFile
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|xml
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|xml
operator|.
name|readNext
argument_list|()
expr_stmt|;
if|if
condition|(
name|xml
operator|.
name|isStartElement
argument_list|()
condition|)
block|{
name|currentElement
operator|=
name|xml
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
if|if
condition|(
name|currentElement
operator|==
name|QLatin1String
argument_list|(
literal|"Platform"
argument_list|)
condition|)
block|{
name|currentItem
operator|=
name|CeSdkInfo
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|currentElement
operator|==
name|QLatin1String
argument_list|(
literal|"Directories"
argument_list|)
condition|)
block|{
name|QXmlStreamAttributes
name|attr
init|=
name|xml
operator|.
name|attributes
argument_list|()
decl_stmt|;
name|currentItem
operator|.
name|m_include
operator|=
name|fixPaths
argument_list|(
name|attr
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"Include"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|currentItem
operator|.
name|m_lib
operator|=
name|fixPaths
argument_list|(
name|attr
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"Library"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|currentItem
operator|.
name|m_bin
operator|=
name|fixPaths
argument_list|(
name|attr
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"Path"
argument_list|)
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|xml
operator|.
name|isEndElement
argument_list|()
condition|)
block|{
if|if
condition|(
name|xml
operator|.
name|name
argument_list|()
operator|.
name|toString
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"Platform"
argument_list|)
condition|)
name|m_list
operator|.
name|append
argument_list|(
name|currentItem
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|xml
operator|.
name|isCharacters
argument_list|()
operator|&&
operator|!
name|xml
operator|.
name|isWhitespace
argument_list|()
condition|)
block|{
if|if
condition|(
name|currentElement
operator|==
name|QLatin1String
argument_list|(
literal|"PlatformName"
argument_list|)
condition|)
name|currentItem
operator|.
name|m_name
operator|=
name|xml
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|currentElement
operator|==
name|QLatin1String
argument_list|(
literal|"OSMajorVersion"
argument_list|)
condition|)
name|currentItem
operator|.
name|m_major
operator|=
name|xml
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toInt
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|currentElement
operator|==
name|QLatin1String
argument_list|(
literal|"OSMinorVersion"
argument_list|)
condition|)
name|currentItem
operator|.
name|m_minor
operator|=
name|xml
operator|.
name|text
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toInt
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|xml
operator|.
name|error
argument_list|()
operator|&&
name|xml
operator|.
name|error
argument_list|()
operator|!=
name|QXmlStreamReader
operator|::
name|PrematureEndOfDocumentError
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"XML ERROR:"
operator|<<
name|xml
operator|.
name|lineNumber
argument_list|()
operator|<<
literal|": "
operator|<<
name|xml
operator|.
name|errorString
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
name|m_list
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|?
literal|true
else|:
literal|false
return|;
block|}
end_function
begin_function
DECL|function|fixPaths
name|QString
name|CeSdkHandler
operator|::
name|fixPaths
parameter_list|(
name|QString
name|path
parameter_list|)
specifier|const
block|{
name|QRegExp
name|searchStr
argument_list|(
name|QLatin1String
argument_list|(
literal|"(\\$\\(\\w+\\))"
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|fixedString
init|=
name|path
decl_stmt|;
for|for
control|(
name|int
name|index
init|=
name|fixedString
operator|.
name|indexOf
argument_list|(
name|searchStr
argument_list|,
literal|0
argument_list|)
init|;
name|index
operator|>=
literal|0
condition|;
name|index
operator|=
name|fixedString
operator|.
name|indexOf
argument_list|(
name|searchStr
argument_list|,
name|index
argument_list|)
control|)
block|{
specifier|const
name|QString
name|capture
init|=
name|searchStr
operator|.
name|cap
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|fixedString
operator|.
name|replace
argument_list|(
name|index
argument_list|,
name|capture
operator|.
name|length
argument_list|()
argument_list|,
name|capture
operator|.
name|toUpper
argument_list|()
argument_list|)
expr_stmt|;
name|index
operator|+=
name|capture
operator|.
name|length
argument_list|()
expr_stmt|;
comment|// don't count the zero terminator
name|fixedString
operator|.
name|insert
argument_list|(
name|index
argument_list|,
literal|'\\'
argument_list|)
expr_stmt|;
comment|// the configuration file lacks a directory separator for env vars
operator|++
name|index
expr_stmt|;
block|}
return|return
name|fixedString
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
