begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the qmake application of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|MSVC_OBJECTMODEL_H
end_ifndef
begin_define
DECL|macro|MSVC_OBJECTMODEL_H
define|#
directive|define
name|MSVC_OBJECTMODEL_H
end_define
begin_include
include|#
directive|include
file|"project.h"
end_include
begin_include
include|#
directive|include
file|"xmloutput.h"
end_include
begin_include
include|#
directive|include
file|<qatomic.h>
end_include
begin_include
include|#
directive|include
file|<qlist.h>
end_include
begin_include
include|#
directive|include
file|<qstring.h>
end_include
begin_include
include|#
directive|include
file|<qstringlist.h>
end_include
begin_include
include|#
directive|include
file|<qmap.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|enum|DotNET
name|enum
name|DotNET
block|{
DECL|enumerator|NETUnknown
name|NETUnknown
operator|=
literal|0
operator|,
DECL|enumerator|NET2002
name|NET2002
operator|=
literal|0x70
operator|,
DECL|enumerator|NET2003
name|NET2003
operator|=
literal|0x71
operator|,
DECL|enumerator|NET2005
name|NET2005
operator|=
literal|0x80
operator|,
DECL|enumerator|NET2008
name|NET2008
operator|=
literal|0x90
operator|,
DECL|enumerator|NET2010
name|NET2010
operator|=
literal|0xa0
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_comment
comment|/*     This Object model is of course VERY simplyfied,     and does not actually follow the original MSVC     object model. However, it fulfilles the basic     needs for qmake */
end_comment
begin_comment
comment|/*     If a triState value is 'unset' then the     corresponding property is not in the output,     forcing the tool to utilize default values.     False/True values will be in the output... */
end_comment
begin_enum
DECL|enum|customBuildCheck
enum|enum
name|customBuildCheck
block|{
DECL|enumerator|none
name|none
block|,
DECL|enumerator|mocSrc
name|mocSrc
block|,
DECL|enumerator|mocHdr
name|mocHdr
block|,
DECL|enumerator|lexyacc
name|lexyacc
block|}
enum|;
end_enum
begin_enum
DECL|enum|triState
enum|enum
name|triState
block|{
DECL|enumerator|unset
name|unset
init|=
operator|-
literal|1
block|,
DECL|enumerator|_False
name|_False
init|=
literal|0
block|,
DECL|enumerator|_True
name|_True
init|=
literal|1
block|}
enum|;
end_enum
begin_expr_stmt
name|triState
name|operator
operator|!
operator|(
specifier|const
name|triState
operator|&
name|rhs
operator|)
expr_stmt|;
end_expr_stmt
begin_enum
DECL|enum|addressAwarenessType
enum|enum
name|addressAwarenessType
block|{
DECL|enumerator|addrAwareDefault
name|addrAwareDefault
block|,
DECL|enumerator|addrAwareNoLarge
name|addrAwareNoLarge
block|,
DECL|enumerator|addrAwareLarge
name|addrAwareLarge
block|}
enum|;
end_enum
begin_enum
DECL|enum|asmListingOption
enum|enum
name|asmListingOption
block|{
DECL|enumerator|asmListingNone
name|asmListingNone
block|,
DECL|enumerator|asmListingAssemblyOnly
name|asmListingAssemblyOnly
block|,
DECL|enumerator|asmListingAsmMachineSrc
name|asmListingAsmMachineSrc
block|,
DECL|enumerator|asmListingAsmMachine
name|asmListingAsmMachine
block|,
DECL|enumerator|asmListingAsmSrc
name|asmListingAsmSrc
block|}
enum|;
end_enum
begin_enum
DECL|enum|basicRuntimeCheckOption
enum|enum
name|basicRuntimeCheckOption
block|{
DECL|enumerator|runtimeBasicCheckNone
name|runtimeBasicCheckNone
block|,
DECL|enumerator|runtimeCheckStackFrame
name|runtimeCheckStackFrame
block|,
DECL|enumerator|runtimeCheckUninitVariables
name|runtimeCheckUninitVariables
block|,
DECL|enumerator|runtimeBasicCheckAll
name|runtimeBasicCheckAll
block|}
enum|;
end_enum
begin_enum
DECL|enum|browseInfoOption
enum|enum
name|browseInfoOption
block|{
DECL|enumerator|brInfoNone
name|brInfoNone
block|,
DECL|enumerator|brAllInfo
name|brAllInfo
block|,
DECL|enumerator|brNoLocalSymbols
name|brNoLocalSymbols
block|}
enum|;
end_enum
begin_enum
DECL|enum|callingConventionOption
enum|enum
name|callingConventionOption
block|{
DECL|enumerator|callConventionDefault
name|callConventionDefault
init|=
operator|-
literal|1
block|,
DECL|enumerator|callConventionCDecl
name|callConventionCDecl
block|,
DECL|enumerator|callConventionFastCall
name|callConventionFastCall
block|,
DECL|enumerator|callConventionStdCall
name|callConventionStdCall
block|}
enum|;
end_enum
begin_enum
DECL|enum|charSet
enum|enum
name|charSet
block|{
DECL|enumerator|charSetNotSet
name|charSetNotSet
block|,
DECL|enumerator|charSetUnicode
name|charSetUnicode
block|,
DECL|enumerator|charSetMBCS
name|charSetMBCS
block|}
enum|;
end_enum
begin_enum
DECL|enum|compileAsManagedOptions
enum|enum
name|compileAsManagedOptions
block|{
DECL|enumerator|managedDefault
name|managedDefault
init|=
operator|-
literal|1
block|,
comment|// Was: noAssembly
DECL|enumerator|managedAssembly
name|managedAssembly
init|=
literal|1
block|,
DECL|enumerator|managedAssemblyPure
name|managedAssemblyPure
init|=
literal|2
block|,
comment|// Old was: Assembly
DECL|enumerator|managedAssemblySafe
name|managedAssemblySafe
init|=
literal|3
block|,
DECL|enumerator|managedAssemblyOldSyntax
name|managedAssemblyOldSyntax
init|=
literal|4
block|}
enum|;
end_enum
begin_enum
DECL|enum|CompileAsOptions
enum|enum
name|CompileAsOptions
block|{
DECL|enumerator|compileAsDefault
name|compileAsDefault
block|,
DECL|enumerator|compileAsC
name|compileAsC
block|,
DECL|enumerator|compileAsCPlusPlus
name|compileAsCPlusPlus
block|}
enum|;
end_enum
begin_enum
DECL|enum|ConfigurationTypes
enum|enum
name|ConfigurationTypes
block|{
DECL|enumerator|typeUnknown
name|typeUnknown
init|=
literal|0
block|,
DECL|enumerator|typeApplication
name|typeApplication
init|=
literal|1
block|,
DECL|enumerator|typeDynamicLibrary
name|typeDynamicLibrary
init|=
literal|2
block|,
DECL|enumerator|typeStaticLibrary
name|typeStaticLibrary
init|=
literal|4
block|,
DECL|enumerator|typeGeneric
name|typeGeneric
init|=
literal|10
block|}
enum|;
end_enum
begin_enum
DECL|enum|debugOption
enum|enum
name|debugOption
block|{
DECL|enumerator|debugUnknown
name|debugUnknown
init|=
operator|-
literal|1
block|,
DECL|enumerator|debugDisabled
name|debugDisabled
block|,
DECL|enumerator|debugOldStyleInfo
name|debugOldStyleInfo
block|,
DECL|enumerator|debugLineInfoOnly
name|debugLineInfoOnly
block|,
DECL|enumerator|debugEnabled
name|debugEnabled
block|,
DECL|enumerator|debugEditAndContinue
name|debugEditAndContinue
block|}
enum|;
end_enum
begin_enum
DECL|enum|eAppProtectionOption
enum|enum
name|eAppProtectionOption
block|{
DECL|enumerator|eAppProtectUnchanged
name|eAppProtectUnchanged
block|,
DECL|enumerator|eAppProtectLow
name|eAppProtectLow
block|,
DECL|enumerator|eAppProtectMedium
name|eAppProtectMedium
block|,
DECL|enumerator|eAppProtectHigh
name|eAppProtectHigh
block|}
enum|;
end_enum
begin_enum
DECL|enum|enhancedInstructionSetOption
enum|enum
name|enhancedInstructionSetOption
block|{
DECL|enumerator|archNotSet
name|archNotSet
init|=
literal|0
block|,
DECL|enumerator|archSSE
name|archSSE
init|=
literal|1
block|,
DECL|enumerator|archSSE2
name|archSSE2
init|=
literal|2
block|}
enum|;
end_enum
begin_enum
DECL|enum|exceptionHandling
enum|enum
name|exceptionHandling
block|{
DECL|enumerator|ehDefault
name|ehDefault
init|=
operator|-
literal|1
block|,
DECL|enumerator|ehNone
name|ehNone
init|=
literal|0
block|,
DECL|enumerator|ehNoSEH
name|ehNoSEH
init|=
literal|1
block|,
DECL|enumerator|ehSEH
name|ehSEH
init|=
literal|2
block|}
enum|;
end_enum
begin_enum
DECL|enum|enumResourceLangID
enum|enum
name|enumResourceLangID
block|{
DECL|enumerator|rcUseDefault
name|rcUseDefault
init|=
literal|0
block|,
DECL|enumerator|rcAfrikaans
name|rcAfrikaans
init|=
literal|1078
block|,
DECL|enumerator|rcAlbanian
name|rcAlbanian
init|=
literal|1052
block|,
DECL|enumerator|rcArabicAlgeria
name|rcArabicAlgeria
init|=
literal|5121
block|,
DECL|enumerator|rcArabicBahrain
name|rcArabicBahrain
init|=
literal|15361
block|,
DECL|enumerator|rcArabicEgypt
name|rcArabicEgypt
init|=
literal|3073
block|,
DECL|enumerator|rcArabicIraq
name|rcArabicIraq
init|=
literal|2049
block|,
DECL|enumerator|rcArabicJordan
name|rcArabicJordan
init|=
literal|11265
block|,
DECL|enumerator|rcArabicKuwait
name|rcArabicKuwait
init|=
literal|13313
block|,
DECL|enumerator|rcArabicLebanon
name|rcArabicLebanon
init|=
literal|12289
block|,
DECL|enumerator|rcArabicLibya
name|rcArabicLibya
init|=
literal|4097
block|,
DECL|enumerator|rcArabicMorocco
name|rcArabicMorocco
init|=
literal|6145
block|,
DECL|enumerator|rcArabicOman
name|rcArabicOman
init|=
literal|8193
block|,
DECL|enumerator|rcArabicQatar
name|rcArabicQatar
init|=
literal|16385
block|,
DECL|enumerator|rcArabicSaudi
name|rcArabicSaudi
init|=
literal|1025
block|,
DECL|enumerator|rcArabicSyria
name|rcArabicSyria
init|=
literal|10241
block|,
DECL|enumerator|rcArabicTunisia
name|rcArabicTunisia
init|=
literal|7169
block|,
DECL|enumerator|rcArabicUnitedArabEmirates
name|rcArabicUnitedArabEmirates
init|=
literal|14337
block|,
DECL|enumerator|rcArabicYemen
name|rcArabicYemen
init|=
literal|9217
block|,
DECL|enumerator|rcBasque
name|rcBasque
init|=
literal|1069
block|,
DECL|enumerator|rcBulgarian
name|rcBulgarian
init|=
literal|1026
block|,
DECL|enumerator|rcByelorussian
name|rcByelorussian
init|=
literal|1059
block|,
DECL|enumerator|rcCatalan
name|rcCatalan
init|=
literal|1027
block|,
DECL|enumerator|rcChineseHongKong
name|rcChineseHongKong
init|=
literal|3076
block|,
DECL|enumerator|rcChinesePRC
name|rcChinesePRC
init|=
literal|2052
block|,
DECL|enumerator|rcChineseSingapore
name|rcChineseSingapore
init|=
literal|4100
block|,
DECL|enumerator|rcChineseTaiwan
name|rcChineseTaiwan
init|=
literal|1028
block|,
DECL|enumerator|rcCroatian
name|rcCroatian
init|=
literal|1050
block|,
DECL|enumerator|rcCzech
name|rcCzech
init|=
literal|1029
block|,
DECL|enumerator|rcDanish
name|rcDanish
init|=
literal|1030
block|,
DECL|enumerator|rcDutchBelgium
name|rcDutchBelgium
init|=
literal|2067
block|,
DECL|enumerator|rcDutchStandard
name|rcDutchStandard
init|=
literal|1043
block|,
DECL|enumerator|rcEnglishAustralia
name|rcEnglishAustralia
init|=
literal|3081
block|,
DECL|enumerator|rcEnglishBritain
name|rcEnglishBritain
init|=
literal|2057
block|,
DECL|enumerator|rcEnglishCanada
name|rcEnglishCanada
init|=
literal|4105
block|,
DECL|enumerator|RcEnglishCaribbean
name|RcEnglishCaribbean
init|=
literal|9225
block|,
DECL|enumerator|rcEnglishIreland
name|rcEnglishIreland
init|=
literal|6153
block|,
DECL|enumerator|rcEnglishJamaica
name|rcEnglishJamaica
init|=
literal|8201
block|,
DECL|enumerator|rcEnglishNewZealand
name|rcEnglishNewZealand
init|=
literal|5129
block|,
DECL|enumerator|rcEnglishSouthAfrica
name|rcEnglishSouthAfrica
init|=
literal|7177
block|,
DECL|enumerator|rcEnglishUS
name|rcEnglishUS
init|=
literal|1033
block|,
DECL|enumerator|rcEstonian
name|rcEstonian
init|=
literal|1061
block|,
DECL|enumerator|rcFarsi
name|rcFarsi
init|=
literal|1065
block|,
DECL|enumerator|rcFinnish
name|rcFinnish
init|=
literal|1035
block|,
DECL|enumerator|rcFrenchBelgium
name|rcFrenchBelgium
init|=
literal|2060
block|,
DECL|enumerator|rcFrenchCanada
name|rcFrenchCanada
init|=
literal|3084
block|,
DECL|enumerator|rcFrenchLuxembourg
name|rcFrenchLuxembourg
init|=
literal|5132
block|,
DECL|enumerator|rcFrenchStandard
name|rcFrenchStandard
init|=
literal|1036
block|,
DECL|enumerator|rcFrenchSwitzerland
name|rcFrenchSwitzerland
init|=
literal|4108
block|,
DECL|enumerator|rcGermanAustria
name|rcGermanAustria
init|=
literal|3079
block|,
DECL|enumerator|rcGermanLichtenstein
name|rcGermanLichtenstein
init|=
literal|5127
block|,
DECL|enumerator|rcGermanLuxembourg
name|rcGermanLuxembourg
init|=
literal|4103
block|,
DECL|enumerator|rcGermanStandard
name|rcGermanStandard
init|=
literal|1031
block|,
DECL|enumerator|rcGermanSwitzerland
name|rcGermanSwitzerland
init|=
literal|2055
block|,
DECL|enumerator|rcGreek
name|rcGreek
init|=
literal|1032
block|,
DECL|enumerator|rcHebrew
name|rcHebrew
init|=
literal|1037
block|,
DECL|enumerator|rcHungarian
name|rcHungarian
init|=
literal|1038
block|,
DECL|enumerator|rcIcelandic
name|rcIcelandic
init|=
literal|1039
block|,
DECL|enumerator|rcIndonesian
name|rcIndonesian
init|=
literal|1057
block|,
DECL|enumerator|rcItalianStandard
name|rcItalianStandard
init|=
literal|1040
block|,
DECL|enumerator|rcItalianSwitzerland
name|rcItalianSwitzerland
init|=
literal|2064
block|,
DECL|enumerator|rcJapanese
name|rcJapanese
init|=
literal|1041
block|,
DECL|enumerator|rcKorean
name|rcKorean
init|=
literal|1042
block|,
DECL|enumerator|rcKoreanJohab
name|rcKoreanJohab
init|=
literal|2066
block|,
DECL|enumerator|rcLatvian
name|rcLatvian
init|=
literal|1062
block|,
DECL|enumerator|rcLithuanian
name|rcLithuanian
init|=
literal|1063
block|,
DECL|enumerator|rcNorwegianBokmal
name|rcNorwegianBokmal
init|=
literal|1044
block|,
DECL|enumerator|rcNorwegianNynorsk
name|rcNorwegianNynorsk
init|=
literal|2068
block|,
DECL|enumerator|rcPolish
name|rcPolish
init|=
literal|1045
block|,
DECL|enumerator|rcPortugueseBrazilian
name|rcPortugueseBrazilian
init|=
literal|1046
block|,
DECL|enumerator|rcPortugueseStandard
name|rcPortugueseStandard
init|=
literal|2070
block|,
DECL|enumerator|rcRomanian
name|rcRomanian
init|=
literal|1048
block|,
DECL|enumerator|rcRussian
name|rcRussian
init|=
literal|1049
block|,
DECL|enumerator|rcSerbian
name|rcSerbian
init|=
literal|2074
block|,
DECL|enumerator|rcSlovak
name|rcSlovak
init|=
literal|1051
block|,
DECL|enumerator|rcSpanishArgentina
name|rcSpanishArgentina
init|=
literal|11274
block|,
DECL|enumerator|rcSpanishBolivia
name|rcSpanishBolivia
init|=
literal|16394
block|,
DECL|enumerator|rcSpanishChile
name|rcSpanishChile
init|=
literal|13322
block|,
DECL|enumerator|rcSpanishColombia
name|rcSpanishColombia
init|=
literal|9226
block|,
DECL|enumerator|rcSpanishCostaRica
name|rcSpanishCostaRica
init|=
literal|5130
block|,
DECL|enumerator|rcSpanishDominicanRepublic
name|rcSpanishDominicanRepublic
init|=
literal|7178
block|,
DECL|enumerator|rcSpanishEcuador
name|rcSpanishEcuador
init|=
literal|12298
block|,
DECL|enumerator|rcSpanishGuatemala
name|rcSpanishGuatemala
init|=
literal|4106
block|,
DECL|enumerator|rcSpanishMexico
name|rcSpanishMexico
init|=
literal|2058
block|,
DECL|enumerator|rcSpanishModern
name|rcSpanishModern
init|=
literal|3082
block|,
DECL|enumerator|rcSpanishPanama
name|rcSpanishPanama
init|=
literal|6154
block|,
DECL|enumerator|rcSpanishParaguay
name|rcSpanishParaguay
init|=
literal|15370
block|,
DECL|enumerator|rcSpanishPeru
name|rcSpanishPeru
init|=
literal|10250
block|,
DECL|enumerator|rcSpanishTraditional
name|rcSpanishTraditional
init|=
literal|1034
block|,
DECL|enumerator|rcSpanishUruguay
name|rcSpanishUruguay
init|=
literal|14346
block|,
DECL|enumerator|rcSpanishVenezuela
name|rcSpanishVenezuela
init|=
literal|8202
block|,
DECL|enumerator|rcSwedish
name|rcSwedish
init|=
literal|1053
block|,
DECL|enumerator|rcThai
name|rcThai
init|=
literal|1054
block|,
DECL|enumerator|rcTurkish
name|rcTurkish
init|=
literal|1055
block|,
DECL|enumerator|rcUkrainian
name|rcUkrainian
init|=
literal|1058
block|,
DECL|enumerator|rcUrdu
name|rcUrdu
init|=
literal|1056
block|}
enum|;
end_enum
begin_enum
DECL|enum|enumSccEvent
enum|enum
name|enumSccEvent
block|{
DECL|enumerator|eProjectInScc
name|eProjectInScc
block|,
DECL|enumerator|ePreDirtyNotification
name|ePreDirtyNotification
block|}
enum|;
end_enum
begin_enum
DECL|enum|favorSizeOrSpeedOption
enum|enum
name|favorSizeOrSpeedOption
block|{
DECL|enumerator|favorNone
name|favorNone
block|,
DECL|enumerator|favorSpeed
name|favorSpeed
block|,
DECL|enumerator|favorSize
name|favorSize
block|}
enum|;
end_enum
begin_enum
DECL|enum|floatingPointModel
enum|enum
name|floatingPointModel
block|{
DECL|enumerator|floatingPointNotSet
name|floatingPointNotSet
init|=
operator|-
literal|1
block|,
DECL|enumerator|floatingPointPrecise
name|floatingPointPrecise
block|,
DECL|enumerator|floatingPointStrict
name|floatingPointStrict
block|,
DECL|enumerator|floatingPointFast
name|floatingPointFast
block|}
enum|;
end_enum
begin_enum
DECL|enum|genProxyLanguage
enum|enum
name|genProxyLanguage
block|{
DECL|enumerator|genProxyNative
name|genProxyNative
block|,
DECL|enumerator|genProxyManaged
name|genProxyManaged
block|}
enum|;
end_enum
begin_enum
DECL|enum|inlineExpansionOption
enum|enum
name|inlineExpansionOption
block|{
DECL|enumerator|expandDisable
name|expandDisable
block|,
DECL|enumerator|expandOnlyInline
name|expandOnlyInline
block|,
DECL|enumerator|expandAnySuitable
name|expandAnySuitable
block|,
DECL|enumerator|expandDefault
name|expandDefault
comment|// Not useful number, but stops the output
block|}
enum|;
end_enum
begin_enum
DECL|enum|linkIncrementalType
enum|enum
name|linkIncrementalType
block|{
DECL|enumerator|linkIncrementalDefault
name|linkIncrementalDefault
block|,
DECL|enumerator|linkIncrementalNo
name|linkIncrementalNo
block|,
DECL|enumerator|linkIncrementalYes
name|linkIncrementalYes
block|}
enum|;
end_enum
begin_enum
DECL|enum|linkProgressOption
enum|enum
name|linkProgressOption
block|{
DECL|enumerator|linkProgressNotSet
name|linkProgressNotSet
block|,
DECL|enumerator|linkProgressAll
name|linkProgressAll
block|,
DECL|enumerator|linkProgressLibs
name|linkProgressLibs
block|}
enum|;
end_enum
begin_enum
DECL|enum|machineTypeOption
enum|enum
name|machineTypeOption
block|{
DECL|enumerator|machineNotSet
name|machineNotSet
block|,
DECL|enumerator|machineX86
name|machineX86
block|,
DECL|enumerator|machineX64
name|machineX64
init|=
literal|17
block|}
enum|;
end_enum
begin_enum
DECL|enum|midlCharOption
enum|enum
name|midlCharOption
block|{
DECL|enumerator|midlCharUnsigned
name|midlCharUnsigned
block|,
DECL|enumerator|midlCharSigned
name|midlCharSigned
block|,
DECL|enumerator|midlCharAscii7
name|midlCharAscii7
block|}
enum|;
end_enum
begin_enum
DECL|enum|midlErrorCheckOption
enum|enum
name|midlErrorCheckOption
block|{
DECL|enumerator|midlEnableCustom
name|midlEnableCustom
block|,
DECL|enumerator|midlDisableAll
name|midlDisableAll
block|,
DECL|enumerator|midlEnableAll
name|midlEnableAll
block|}
enum|;
end_enum
begin_enum
DECL|enum|midlStructMemberAlignOption
enum|enum
name|midlStructMemberAlignOption
block|{
DECL|enumerator|midlAlignNotSet
name|midlAlignNotSet
block|,
DECL|enumerator|midlAlignSingleByte
name|midlAlignSingleByte
block|,
DECL|enumerator|midlAlignTwoBytes
name|midlAlignTwoBytes
block|,
DECL|enumerator|midlAlignFourBytes
name|midlAlignFourBytes
block|,
DECL|enumerator|midlAlignEightBytes
name|midlAlignEightBytes
block|,
DECL|enumerator|midlAlignSixteenBytes
name|midlAlignSixteenBytes
block|}
enum|;
end_enum
begin_enum
DECL|enum|midlTargetEnvironment
enum|enum
name|midlTargetEnvironment
block|{
DECL|enumerator|midlTargetNotSet
name|midlTargetNotSet
block|,
DECL|enumerator|midlTargetWin32
name|midlTargetWin32
block|,
DECL|enumerator|midlTargetWin64
name|midlTargetWin64
block|}
enum|;
end_enum
begin_enum
DECL|enum|midlWarningLevelOption
enum|enum
name|midlWarningLevelOption
block|{
DECL|enumerator|midlWarningLevel_0
name|midlWarningLevel_0
block|,
DECL|enumerator|midlWarningLevel_1
name|midlWarningLevel_1
block|,
DECL|enumerator|midlWarningLevel_2
name|midlWarningLevel_2
block|,
DECL|enumerator|midlWarningLevel_3
name|midlWarningLevel_3
block|,
DECL|enumerator|midlWarningLevel_4
name|midlWarningLevel_4
block|}
enum|;
end_enum
begin_enum
DECL|enum|optFoldingType
enum|enum
name|optFoldingType
block|{
DECL|enumerator|optFoldingDefault
name|optFoldingDefault
block|,
DECL|enumerator|optNoFolding
name|optNoFolding
block|,
DECL|enumerator|optFolding
name|optFolding
block|}
enum|;
end_enum
begin_enum
DECL|enum|optimizeOption
enum|enum
name|optimizeOption
block|{
DECL|enumerator|optimizeDisabled
name|optimizeDisabled
block|,
DECL|enumerator|optimizeMinSpace
name|optimizeMinSpace
block|,
DECL|enumerator|optimizeMaxSpeed
name|optimizeMaxSpeed
block|,
DECL|enumerator|optimizeFull
name|optimizeFull
block|,
DECL|enumerator|optimizeCustom
name|optimizeCustom
block|,
DECL|enumerator|optimizeDefault
name|optimizeDefault
comment|// Not useful number, but stops the output
block|}
enum|;
end_enum
begin_enum
DECL|enum|optRefType
enum|enum
name|optRefType
block|{
DECL|enumerator|optReferencesDefault
name|optReferencesDefault
block|,
DECL|enumerator|optNoReferences
name|optNoReferences
block|,
DECL|enumerator|optReferences
name|optReferences
block|}
enum|;
end_enum
begin_enum
DECL|enum|optWin98Type
enum|enum
name|optWin98Type
block|{
DECL|enumerator|optWin98Default
name|optWin98Default
block|,
DECL|enumerator|optWin98No
name|optWin98No
block|,
DECL|enumerator|optWin98Yes
name|optWin98Yes
block|}
enum|;
end_enum
begin_enum
DECL|enum|optLinkTimeCodeGenType
enum|enum
name|optLinkTimeCodeGenType
block|{
DECL|enumerator|optLTCGDefault
name|optLTCGDefault
block|,
DECL|enumerator|optLTCGEnabled
name|optLTCGEnabled
block|,
DECL|enumerator|optLTCGInstrument
name|optLTCGInstrument
block|,
DECL|enumerator|optLTCGOptimize
name|optLTCGOptimize
block|,
DECL|enumerator|optLTCGUpdate
name|optLTCGUpdate
block|}
enum|;
end_enum
begin_enum
DECL|enum|pchOption
enum|enum
name|pchOption
block|{
DECL|enumerator|pchUnset
name|pchUnset
init|=
operator|-
literal|1
block|,
DECL|enumerator|pchNone
name|pchNone
block|,
DECL|enumerator|pchCreateUsingSpecific
name|pchCreateUsingSpecific
block|,
DECL|enumerator|pchGenerateAuto
name|pchGenerateAuto
block|,
DECL|enumerator|pchUseUsingSpecific
name|pchUseUsingSpecific
block|}
enum|;
end_enum
begin_enum
DECL|enum|preprocessOption
enum|enum
name|preprocessOption
block|{
DECL|enumerator|preprocessUnknown
name|preprocessUnknown
init|=
operator|-
literal|1
block|,
DECL|enumerator|preprocessNo
name|preprocessNo
block|,
DECL|enumerator|preprocessYes
name|preprocessYes
block|,
DECL|enumerator|preprocessNoLineNumbers
name|preprocessNoLineNumbers
block|}
enum|;
end_enum
begin_enum
DECL|enum|ProcessorOptimizeOption
enum|enum
name|ProcessorOptimizeOption
block|{
DECL|enumerator|procOptimizeBlended
name|procOptimizeBlended
block|,
comment|//GB
DECL|enumerator|procOptimizePentium
name|procOptimizePentium
block|,
comment|//G5
DECL|enumerator|procOptimizePentiumProAndAbove
name|procOptimizePentiumProAndAbove
block|,
comment|//G6
DECL|enumerator|procOptimizePentium4AndAbove
name|procOptimizePentium4AndAbove
comment|//G7
block|}
enum|;
end_enum
begin_enum
DECL|enum|RegisterDeployOption
enum|enum
name|RegisterDeployOption
block|{
DECL|enumerator|registerNo
name|registerNo
init|=
literal|0
block|,
DECL|enumerator|registerYes
name|registerYes
block|}
enum|;
end_enum
begin_enum
DECL|enum|RemoteDebuggerType
enum|enum
name|RemoteDebuggerType
block|{
DECL|enumerator|DbgLocal
name|DbgLocal
block|,
DECL|enumerator|DbgRemote
name|DbgRemote
block|,
DECL|enumerator|DbgRemoteTCPIP
name|DbgRemoteTCPIP
block|}
enum|;
end_enum
begin_enum
DECL|enum|runtimeLibraryOption
enum|enum
name|runtimeLibraryOption
block|{
DECL|enumerator|rtUnknown
name|rtUnknown
init|=
operator|-
literal|1
block|,
DECL|enumerator|rtMultiThreaded
name|rtMultiThreaded
block|,
DECL|enumerator|rtMultiThreadedDebug
name|rtMultiThreadedDebug
block|,
DECL|enumerator|rtMultiThreadedDLL
name|rtMultiThreadedDLL
block|,
DECL|enumerator|rtMultiThreadedDebugDLL
name|rtMultiThreadedDebugDLL
block|,
DECL|enumerator|rtSingleThreaded
name|rtSingleThreaded
block|,
DECL|enumerator|rtSingleThreadedDebug
name|rtSingleThreadedDebug
block|}
enum|;
end_enum
begin_enum
DECL|enum|structMemberAlignOption
enum|enum
name|structMemberAlignOption
block|{
DECL|enumerator|alignNotSet
name|alignNotSet
block|,
DECL|enumerator|alignSingleByte
name|alignSingleByte
block|,
DECL|enumerator|alignTwoBytes
name|alignTwoBytes
block|,
DECL|enumerator|alignFourBytes
name|alignFourBytes
block|,
DECL|enumerator|alignEightBytes
name|alignEightBytes
block|,
DECL|enumerator|alignSixteenBytes
name|alignSixteenBytes
block|}
enum|;
end_enum
begin_enum
DECL|enum|subSystemOption
enum|enum
name|subSystemOption
block|{
DECL|enumerator|subSystemNotSet
name|subSystemNotSet
block|,
DECL|enumerator|subSystemConsole
name|subSystemConsole
block|,
DECL|enumerator|subSystemWindows
name|subSystemWindows
block|}
enum|;
end_enum
begin_enum
DECL|enum|termSvrAwarenessType
enum|enum
name|termSvrAwarenessType
block|{
DECL|enumerator|termSvrAwareDefault
name|termSvrAwareDefault
block|,
DECL|enumerator|termSvrAwareNo
name|termSvrAwareNo
block|,
DECL|enumerator|termSvrAwareYes
name|termSvrAwareYes
block|}
enum|;
end_enum
begin_enum
DECL|enum|toolSetType
enum|enum
name|toolSetType
block|{
DECL|enumerator|toolSetUtility
name|toolSetUtility
block|,
DECL|enumerator|toolSetMakefile
name|toolSetMakefile
block|,
DECL|enumerator|toolSetLinker
name|toolSetLinker
block|,
DECL|enumerator|toolSetLibrarian
name|toolSetLibrarian
block|,
DECL|enumerator|toolSetAll
name|toolSetAll
block|}
enum|;
end_enum
begin_enum
DECL|enum|TypeOfDebugger
enum|enum
name|TypeOfDebugger
block|{
DECL|enumerator|DbgNativeOnly
name|DbgNativeOnly
block|,
DECL|enumerator|DbgManagedOnly
name|DbgManagedOnly
block|,
DECL|enumerator|DbgMixed
name|DbgMixed
block|,
DECL|enumerator|DbgAuto
name|DbgAuto
block|}
enum|;
end_enum
begin_enum
DECL|enum|useOfATL
enum|enum
name|useOfATL
block|{
DECL|enumerator|useATLNotSet
name|useATLNotSet
block|,
DECL|enumerator|useATLStatic
name|useATLStatic
block|,
DECL|enumerator|useATLDynamic
name|useATLDynamic
block|}
enum|;
end_enum
begin_enum
DECL|enum|useOfMfc
enum|enum
name|useOfMfc
block|{
DECL|enumerator|useMfcStdWin
name|useMfcStdWin
block|,
DECL|enumerator|useMfcStatic
name|useMfcStatic
block|,
DECL|enumerator|useMfcDynamic
name|useMfcDynamic
block|}
enum|;
end_enum
begin_enum
DECL|enum|useOfArchitecture
enum|enum
name|useOfArchitecture
block|{
DECL|enumerator|archUnknown
name|archUnknown
init|=
operator|-
literal|1
block|,
DECL|enumerator|archArmv4
name|archArmv4
block|,
DECL|enumerator|archArmv5
name|archArmv5
block|,
DECL|enumerator|archArmv4T
name|archArmv4T
block|,
DECL|enumerator|archArmv5T
name|archArmv5T
block|,
DECL|enumerator|archMips1
name|archMips1
init|=
literal|0
block|,
DECL|enumerator|archMips2
name|archMips2
init|=
literal|1
block|,
DECL|enumerator|archMips3
name|archMips3
init|=
literal|2
block|,
DECL|enumerator|archMips4
name|archMips4
init|=
literal|3
block|,
DECL|enumerator|archMips5
name|archMips5
init|=
literal|4
block|,
DECL|enumerator|archMips16
name|archMips16
init|=
literal|5
block|,
DECL|enumerator|archMips32
name|archMips32
init|=
literal|6
block|,
DECL|enumerator|archMips64
name|archMips64
init|=
literal|7
block|}
enum|;
end_enum
begin_enum
DECL|enum|warningLevelOption
enum|enum
name|warningLevelOption
block|{
DECL|enumerator|warningLevelUnknown
name|warningLevelUnknown
init|=
operator|-
literal|1
block|,
DECL|enumerator|warningLevel_0
name|warningLevel_0
block|,
DECL|enumerator|warningLevel_1
name|warningLevel_1
block|,
DECL|enumerator|warningLevel_2
name|warningLevel_2
block|,
DECL|enumerator|warningLevel_3
name|warningLevel_3
block|,
DECL|enumerator|warningLevel_4
name|warningLevel_4
block|}
enum|;
end_enum
begin_decl_stmt
name|class
name|VCToolBase
block|{
name|protected
label|:
comment|// Functions
name|VCToolBase
argument_list|()
block|{}
name|virtual
operator|~
name|VCToolBase
argument_list|()
block|{}
name|virtual
name|bool
name|parseOption
argument_list|(
specifier|const
name|char
operator|*
name|option
argument_list|)
operator|=
literal|0
expr_stmt|;
name|public
label|:
name|void
name|parseOptions
parameter_list|(
name|QStringList
modifier|&
name|options
parameter_list|)
block|{
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|it
operator|=
name|options
operator|.
name|begin
argument_list|()
init|;
operator|(
name|it
operator|!=
name|options
operator|.
name|end
argument_list|()
operator|)
condition|;
name|it
operator|++
control|)
name|parseOption
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
specifier|static
name|QStringList
name|fixCommandLine
parameter_list|(
specifier|const
name|QString
modifier|&
name|input
parameter_list|)
function_decl|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
DECL|variable|VCConfiguration
name|class
name|VCConfiguration
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|VCProject
name|class
name|VCProject
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|VCCLCompilerTool
range|:
name|public
name|VCToolBase
block|{
name|public
operator|:
comment|// Functions
name|VCCLCompilerTool
argument_list|()
block|;
name|virtual
operator|~
name|VCCLCompilerTool
argument_list|()
block|{}
name|bool
name|parseOption
argument_list|(
specifier|const
name|char
operator|*
name|option
argument_list|)
block|;
comment|// Variables
name|QStringList
name|AdditionalIncludeDirectories
block|;
name|QStringList
name|AdditionalOptions
block|;
name|QStringList
name|AdditionalUsingDirectories
block|;
name|QString
name|AssemblerListingLocation
block|;
name|asmListingOption
name|AssemblerOutput
block|;
name|basicRuntimeCheckOption
name|BasicRuntimeChecks
block|;
name|browseInfoOption
name|BrowseInformation
block|;
name|QString
name|BrowseInformationFile
block|;
name|triState
name|BufferSecurityCheck
block|;
name|callingConventionOption
name|CallingConvention
block|;
name|CompileAsOptions
name|CompileAs
block|;
name|compileAsManagedOptions
name|CompileAsManaged
block|;
name|triState
name|CompileOnly
block|;
name|debugOption
name|DebugInformationFormat
block|;
name|triState
name|DefaultCharIsUnsigned
block|;
name|triState
name|Detect64BitPortabilityProblems
block|;
name|triState
name|DisableLanguageExtensions
block|;
name|QStringList
name|DisableSpecificWarnings
block|;
name|enhancedInstructionSetOption
name|EnableEnhancedInstructionSet
block|;
name|triState
name|EnableFiberSafeOptimizations
block|;
name|triState
name|EnableFunctionLevelLinking
block|;
name|triState
name|EnableIntrinsicFunctions
block|;
name|exceptionHandling
name|ExceptionHandling
block|;
name|triState
name|ExpandAttributedSource
block|;
name|favorSizeOrSpeedOption
name|FavorSizeOrSpeed
block|;
name|floatingPointModel
name|FloatingPointModel
block|;
name|triState
name|FloatingPointExceptions
block|;
name|triState
name|ForceConformanceInForLoopScope
block|;
name|QStringList
name|ForcedIncludeFiles
block|;
name|QStringList
name|ForcedUsingFiles
block|;
name|preprocessOption
name|GeneratePreprocessedFile
block|;
name|triState
name|PreprocessSuppressLineNumbers
block|;
name|triState
name|GlobalOptimizations
block|;
name|triState
name|IgnoreStandardIncludePath
block|;
name|triState
name|ImproveFloatingPointConsistency
block|;
name|inlineExpansionOption
name|InlineFunctionExpansion
block|;
name|triState
name|KeepComments
block|;
name|triState
name|MinimalRebuild
block|;
name|QString
name|ObjectFile
block|;
name|triState
name|OmitDefaultLibName
block|;
name|triState
name|OmitFramePointers
block|;
name|triState
name|OpenMP
block|;
name|optimizeOption
name|Optimization
block|;
name|ProcessorOptimizeOption
name|OptimizeForProcessor
block|;
name|triState
name|OptimizeForWindowsApplication
block|;
name|QString
name|OutputFile
block|;
name|QString
name|PrecompiledHeaderFile
block|;
name|QString
name|PrecompiledHeaderThrough
block|;
name|QStringList
name|PreprocessorDefinitions
block|;
name|QString
name|ProgramDataBaseFileName
block|;
name|runtimeLibraryOption
name|RuntimeLibrary
block|;
name|triState
name|RuntimeTypeInfo
block|;
name|triState
name|ShowIncludes
block|;
name|triState
name|SmallerTypeCheck
block|;
name|triState
name|StringPooling
block|;
name|structMemberAlignOption
name|StructMemberAlignment
block|;
name|triState
name|SuppressStartupBanner
block|;
name|triState
name|TreatWChar_tAsBuiltInType
block|;
name|triState
name|TurnOffAssemblyGeneration
block|;
name|triState
name|UndefineAllPreprocessorDefinitions
block|;
name|QStringList
name|UndefinePreprocessorDefinitions
block|;
name|pchOption
name|UsePrecompiledHeader
block|;
name|triState
name|UseUnicodeForAssemblerListing
block|;
name|triState
name|WarnAsError
block|;
name|warningLevelOption
name|WarningLevel
block|;
name|triState
name|WholeProgramOptimization
block|;
name|useOfArchitecture
name|CompileForArchitecture
block|;
name|triState
name|InterworkCalls
block|;
comment|// VS2010
name|triState
name|EnablePREfast
block|;
name|triState
name|DisplayFullPaths
block|;
name|triState
name|MultiProcessorCompilation
block|;
name|QString
name|MultiProcessorCompilationProcessorCount
block|;
name|triState
name|GenerateXMLDocumentationFiles
block|;
name|QString
name|XMLDocumentationFileName
block|;
name|QString
name|ErrorReporting
block|;
name|triState
name|CreateHotpatchableImage
block|;
name|QString
name|PreprocessOutputPath
block|;
name|VCConfiguration
operator|*
name|config
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|VCLinkerTool
range|:
name|public
name|VCToolBase
block|{
name|public
operator|:
comment|// Functions
name|VCLinkerTool
argument_list|()
block|;
name|virtual
operator|~
name|VCLinkerTool
argument_list|()
block|{}
name|bool
name|parseOption
argument_list|(
specifier|const
name|char
operator|*
name|option
argument_list|)
block|;
comment|// Variables
name|QStringList
name|AdditionalDependencies
block|;
name|QStringList
name|AdditionalLibraryDirectories
block|;
name|QStringList
name|AdditionalOptions
block|;
name|QStringList
name|AddModuleNamesToAssembly
block|;
name|QString
name|BaseAddress
block|;
name|triState
name|DataExecutionPrevention
block|;
name|QStringList
name|DelayLoadDLLs
block|;
name|optFoldingType
name|EnableCOMDATFolding
block|;
name|QString
name|EntryPointSymbol
block|;
name|QStringList
name|ForceSymbolReferences
block|;
name|QString
name|FunctionOrder
block|;
name|triState
name|GenerateDebugInformation
block|;
name|triState
name|GenerateMapFile
block|;
name|qlonglong
name|HeapCommitSize
block|;
name|qlonglong
name|HeapReserveSize
block|;
name|triState
name|IgnoreAllDefaultLibraries
block|;
name|QStringList
name|IgnoreDefaultLibraryNames
block|;
name|triState
name|IgnoreEmbeddedIDL
block|;
name|triState
name|IgnoreImportLibrary
block|;
name|QString
name|ImportLibrary
block|;
name|addressAwarenessType
name|LargeAddressAware
block|;
name|triState
name|LinkDLL
block|;
name|linkIncrementalType
name|LinkIncremental
block|;
name|optLinkTimeCodeGenType
name|LinkTimeCodeGeneration
block|;
name|QString
name|LinkToManagedResourceFile
block|;
name|triState
name|MapExports
block|;
name|QString
name|MapFileName
block|;
name|triState
name|MapLines
block|;
name|QString
name|MergedIDLBaseFileName
block|;
name|QString
name|MergeSections
block|;
comment|// Should be list?
name|QString
name|MidlCommandFile
block|;
name|QString
name|ModuleDefinitionFile
block|;
comment|// Should be list?
name|optWin98Type
name|OptimizeForWindows98
block|;
name|optRefType
name|OptimizeReferences
block|;
name|QString
name|OutputFile
block|;
name|QString
name|ProgramDatabaseFile
block|;
name|triState
name|RandomizedBaseAddress
block|;
name|triState
name|RegisterOutput
block|;
name|triState
name|ResourceOnlyDLL
block|;
name|triState
name|SetChecksum
block|;
name|linkProgressOption
name|ShowProgress
block|;
name|qlonglong
name|StackCommitSize
block|;
name|qlonglong
name|StackReserveSize
block|;
name|QString
name|StripPrivateSymbols
block|;
comment|// Should be list?
name|subSystemOption
name|SubSystem
block|;
name|triState
name|SupportUnloadOfDelayLoadedDLL
block|;
name|triState
name|SuppressStartupBanner
block|;
name|triState
name|SwapRunFromCD
block|;
name|triState
name|SwapRunFromNet
block|;
name|machineTypeOption
name|TargetMachine
block|;
name|termSvrAwarenessType
name|TerminalServerAware
block|;
name|triState
name|TreatWarningsAsErrors
block|;
name|triState
name|TurnOffAssemblyGeneration
block|;
name|QString
name|TypeLibraryFile
block|;
name|qlonglong
name|TypeLibraryResourceID
block|;
name|QString
name|Version
block|;
comment|// VS2010
name|triState
name|GenerateManifest
block|;
name|QStringList
name|AdditionalManifestDependencies
block|;
name|QString
name|ManifestFile
block|;
name|triState
name|EnableUAC
block|;
name|QString
name|UACExecutionLevel
block|;
name|triState
name|UACUIAccess
block|;
name|qlonglong
name|SectionAlignment
block|;
name|triState
name|PreventDllBinding
block|;
name|triState
name|AllowIsolation
block|;
name|triState
name|AssemblyDebug
block|;
name|QStringList
name|AssemblyLinkResource
block|;
name|QString
name|CLRImageType
block|;
name|QString
name|CLRSupportLastError
block|;
name|QString
name|CLRThreadAttribute
block|;
name|triState
name|CLRUnmanagedCodeCheck
block|;
name|triState
name|DelaySign
block|;
name|QString
name|KeyContainer
block|;
name|QString
name|KeyFile
block|;
name|QString
name|LinkErrorReporting
block|;
name|VCConfiguration
operator|*
name|config
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|VCMIDLTool
range|:
name|public
name|VCToolBase
block|{
name|public
operator|:
comment|// Functions
name|VCMIDLTool
argument_list|()
block|;
name|virtual
operator|~
name|VCMIDLTool
argument_list|()
block|{}
name|bool
name|parseOption
argument_list|(
specifier|const
name|char
operator|*
name|option
argument_list|)
block|;
comment|// Variables
name|QStringList
name|AdditionalIncludeDirectories
block|;
name|QStringList
name|AdditionalOptions
block|;
name|QStringList
name|CPreprocessOptions
block|;
name|midlCharOption
name|DefaultCharType
block|;
name|QString
name|DLLDataFileName
block|;
comment|// Should be list?
name|midlErrorCheckOption
name|EnableErrorChecks
block|;
name|triState
name|ErrorCheckAllocations
block|;
name|triState
name|ErrorCheckBounds
block|;
name|triState
name|ErrorCheckEnumRange
block|;
name|triState
name|ErrorCheckRefPointers
block|;
name|triState
name|ErrorCheckStubData
block|;
name|QStringList
name|FullIncludePath
block|;
name|triState
name|GenerateStublessProxies
block|;
name|triState
name|GenerateTypeLibrary
block|;
name|QString
name|HeaderFileName
block|;
name|triState
name|IgnoreStandardIncludePath
block|;
name|QString
name|InterfaceIdentifierFileName
block|;
name|triState
name|MkTypLibCompatible
block|;
name|QString
name|OutputDirectory
block|;
name|QStringList
name|PreprocessorDefinitions
block|;
name|QString
name|ProxyFileName
block|;
name|QString
name|RedirectOutputAndErrors
block|;
name|midlStructMemberAlignOption
name|StructMemberAlignment
block|;
name|triState
name|SuppressStartupBanner
block|;
name|midlTargetEnvironment
name|TargetEnvironment
block|;
name|QString
name|TypeLibraryName
block|;
name|QStringList
name|UndefinePreprocessorDefinitions
block|;
name|triState
name|ValidateParameters
block|;
name|triState
name|WarnAsError
block|;
name|midlWarningLevelOption
name|WarningLevel
block|;
comment|// VS 2010
name|triState
name|ApplicationConfigurationMode
block|;
name|QString
name|GenerateClientFiles
block|;
name|QString
name|ClientStubFile
block|;
name|QString
name|TypeLibFormat
block|;
name|triState
name|ValidateAllParameters
block|;
name|triState
name|SuppressCompilerWarnings
block|;
name|QString
name|GenerateServerFiles
block|;
name|QString
name|ServerStubFile
block|;
name|qlonglong
name|LocaleID
block|;
name|VCConfiguration
operator|*
name|config
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|VCLibrarianTool
range|:
name|public
name|VCToolBase
block|{
name|public
operator|:
comment|// Functions
name|VCLibrarianTool
argument_list|()
block|;
name|virtual
operator|~
name|VCLibrarianTool
argument_list|()
block|{}
name|bool
name|parseOption
argument_list|(
argument|const char*
argument_list|)
block|{
return|return
name|false
return|;
block|}
comment|// Variables
name|QStringList
name|AdditionalDependencies
block|;
name|QStringList
name|AdditionalLibraryDirectories
block|;
name|QStringList
name|AdditionalOptions
block|;
name|QStringList
name|ExportNamedFunctions
block|;
name|QStringList
name|ForceSymbolReferences
block|;
name|triState
name|IgnoreAllDefaultLibraries
block|;
name|QStringList
name|IgnoreDefaultLibraryNames
block|;
name|QString
name|ModuleDefinitionFile
block|;
name|QString
name|OutputFile
block|;
name|triState
name|SuppressStartupBanner
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|VCCustomBuildTool
range|:
name|public
name|VCToolBase
block|{
name|public
operator|:
comment|// Functions
name|VCCustomBuildTool
argument_list|()
block|;
name|virtual
operator|~
name|VCCustomBuildTool
argument_list|()
block|{}
name|bool
name|parseOption
argument_list|(
argument|const char*
argument_list|)
block|{
return|return
name|false
return|;
block|}
comment|// Variables
name|QStringList
name|AdditionalDependencies
block|;
name|QStringList
name|CommandLine
block|;
name|QString
name|Description
block|;
name|QStringList
name|Outputs
block|;
name|QString
name|ToolName
block|;
name|QString
name|ToolPath
block|;
name|VCConfiguration
operator|*
name|config
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|VCResourceCompilerTool
range|:
name|public
name|VCToolBase
block|{
name|public
operator|:
comment|// Functions
name|VCResourceCompilerTool
argument_list|()
block|;
name|virtual
operator|~
name|VCResourceCompilerTool
argument_list|()
block|{}
name|bool
name|parseOption
argument_list|(
argument|const char*
argument_list|)
block|{
return|return
name|false
return|;
block|}
comment|// Variables
name|QStringList
name|AdditionalIncludeDirectories
block|;
name|QStringList
name|AdditionalOptions
block|;
name|enumResourceLangID
name|Culture
block|;
name|QStringList
name|FullIncludePath
block|;
name|triState
name|IgnoreStandardIncludePath
block|;
name|QStringList
name|PreprocessorDefinitions
block|;
name|QString
name|ResourceOutputFileName
block|;
name|linkProgressOption
name|ShowProgress
block|;
name|QString
name|ToolPath
block|;
name|triState
name|SuppressStartupBanner
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|VCDeploymentTool
block|{
name|public
label|:
comment|// Functions
name|VCDeploymentTool
argument_list|()
expr_stmt|;
name|virtual
operator|~
name|VCDeploymentTool
argument_list|()
block|{}
comment|// Variables
name|QString
name|DeploymentTag
expr_stmt|;
name|QString
name|RemoteDirectory
decl_stmt|;
name|RegisterDeployOption
name|RegisterOutput
decl_stmt|;
name|QString
name|AdditionalFiles
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|VCEventTool
range|:
name|public
name|VCToolBase
block|{
name|protected
operator|:
comment|// Functions
name|VCEventTool
argument_list|(
specifier|const
name|QString
operator|&
name|eventName
argument_list|)
block|;
name|virtual
operator|~
name|VCEventTool
argument_list|()
block|{}
name|bool
name|parseOption
argument_list|(
argument|const char*
argument_list|)
block|{
return|return
name|false
return|;
block|}
name|public
operator|:
comment|// Variables
name|QStringList
name|CommandLine
block|;
name|QString
name|Description
block|;
name|triState
name|ExcludedFromBuild
block|;
name|QString
name|EventName
block|;
name|QString
name|ToolName
block|;
name|QString
name|ToolPath
block|; }
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|VCPostBuildEventTool
range|:
name|public
name|VCEventTool
block|{
name|public
operator|:
name|VCPostBuildEventTool
argument_list|()
block|;
operator|~
name|VCPostBuildEventTool
argument_list|()
block|{}
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|VCPreBuildEventTool
range|:
name|public
name|VCEventTool
block|{
name|public
operator|:
name|VCPreBuildEventTool
argument_list|()
block|;
operator|~
name|VCPreBuildEventTool
argument_list|()
block|{}
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|VCPreLinkEventTool
range|:
name|public
name|VCEventTool
block|{
name|public
operator|:
name|VCPreLinkEventTool
argument_list|()
block|;
operator|~
name|VCPreLinkEventTool
argument_list|()
block|{}
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|VCConfiguration
block|{
name|public
label|:
comment|// Functions
name|VCConfiguration
argument_list|()
expr_stmt|;
operator|~
name|VCConfiguration
argument_list|()
block|{}
name|DotNET
name|CompilerVersion
expr_stmt|;
comment|// Variables
name|triState
name|ATLMinimizesCRunTimeLibraryUsage
decl_stmt|;
name|triState
name|BuildBrowserInformation
decl_stmt|;
name|charSet
name|CharacterSet
decl_stmt|;
name|ConfigurationTypes
name|ConfigurationType
decl_stmt|;
name|QString
name|DeleteExtensionsOnClean
decl_stmt|;
name|QString
name|ImportLibrary
decl_stmt|;
name|QString
name|IntermediateDirectory
decl_stmt|;
name|QString
name|Name
decl_stmt|;
comment|// "ConfigurationName|PlatformName"
name|QString
name|ConfigurationName
decl_stmt|;
name|QString
name|OutputDirectory
decl_stmt|;
name|QString
name|PrimaryOutput
decl_stmt|;
name|QString
name|ProgramDatabase
decl_stmt|;
name|triState
name|RegisterOutput
decl_stmt|;
name|useOfATL
name|UseOfATL
decl_stmt|;
name|useOfMfc
name|UseOfMfc
decl_stmt|;
name|triState
name|WholeProgramOptimization
decl_stmt|;
comment|// XML sub-parts
name|VCCLCompilerTool
name|compiler
decl_stmt|;
name|VCLinkerTool
name|linker
decl_stmt|;
name|VCLibrarianTool
name|librarian
decl_stmt|;
name|VCCustomBuildTool
name|custom
decl_stmt|;
name|VCMIDLTool
name|idl
decl_stmt|;
name|VCPostBuildEventTool
name|postBuild
decl_stmt|;
name|VCPreBuildEventTool
name|preBuild
decl_stmt|;
name|VCDeploymentTool
name|deployment
decl_stmt|;
name|VCPreLinkEventTool
name|preLink
decl_stmt|;
name|VCResourceCompilerTool
name|resource
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_struct
DECL|struct|VCFilterFile
struct|struct
name|VCFilterFile
block|{
DECL|function|VCFilterFile
name|VCFilterFile
argument_list|()
block|{
name|excludeFromBuild
operator|=
name|false
expr_stmt|;
block|}
DECL|function|VCFilterFile
name|VCFilterFile
argument_list|(
argument|const QString&filename
argument_list|,
argument|bool exclude = false
argument_list|)
block|{
name|file
operator|=
name|filename
expr_stmt|;
name|excludeFromBuild
operator|=
name|exclude
expr_stmt|;
block|}
DECL|function|VCFilterFile
name|VCFilterFile
argument_list|(
argument|const QString&filename
argument_list|,
argument|const QString&additional
argument_list|,
argument|bool exclude = false
argument_list|)
block|{
name|file
operator|=
name|filename
expr_stmt|;
name|excludeFromBuild
operator|=
name|exclude
expr_stmt|;
name|additionalFile
operator|=
name|additional
expr_stmt|;
block|}
DECL|function|operator
name|bool
name|operator
operator|==
operator|(
specifier|const
name|VCFilterFile
operator|&
name|other
operator|)
block|{
return|return
name|file
operator|==
name|other
operator|.
name|file
operator|&&
name|additionalFile
operator|==
name|other
operator|.
name|additionalFile
operator|&&
name|excludeFromBuild
operator|==
name|other
operator|.
name|excludeFromBuild
return|;
block|}
DECL|member|excludeFromBuild
name|bool
name|excludeFromBuild
decl_stmt|;
DECL|member|file
name|QString
name|file
decl_stmt|;
DECL|member|additionalFile
name|QString
name|additionalFile
decl_stmt|;
comment|// For tools like MOC
block|}
struct|;
end_struct
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_DEBUG_OUTPUT
end_ifndef
begin_expr_stmt
DECL|function|operator
specifier|inline
name|QDebug
name|operator
operator|<<
operator|(
name|QDebug
name|dbg
operator|,
specifier|const
name|VCFilterFile
operator|&
name|p
operator|)
block|{
name|dbg
operator|.
name|nospace
argument_list|()
operator|<<
literal|"VCFilterFile(file("
operator|<<
name|p
operator|.
name|file
operator|<<
literal|") additionalFile("
operator|<<
name|p
operator|.
name|additionalFile
operator|<<
literal|") excludeFromBuild("
operator|<<
name|p
operator|.
name|excludeFromBuild
operator|<<
literal|"))"
operator|<<
name|endl
block|;
return|return
name|dbg
operator|.
name|space
argument_list|()
return|;
block|}
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
DECL|variable|VcprojGenerator
name|class
name|VcprojGenerator
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|VCFilter
block|{
name|public
label|:
comment|// Functions
name|VCFilter
argument_list|()
expr_stmt|;
operator|~
name|VCFilter
argument_list|()
block|{}
name|void
name|addFile
argument_list|(
specifier|const
name|QString
operator|&
name|filename
argument_list|)
expr_stmt|;
name|void
name|addFile
parameter_list|(
specifier|const
name|VCFilterFile
modifier|&
name|fileInfo
parameter_list|)
function_decl|;
name|void
name|addFiles
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|fileList
parameter_list|)
function_decl|;
name|bool
name|addExtraCompiler
parameter_list|(
specifier|const
name|VCFilterFile
modifier|&
name|info
parameter_list|)
function_decl|;
name|void
name|modifyPCHstage
parameter_list|(
name|QString
name|str
parameter_list|)
function_decl|;
comment|// Variables
name|QString
name|Name
decl_stmt|;
name|QString
name|Filter
decl_stmt|;
name|QString
name|Guid
decl_stmt|;
name|triState
name|ParseFiles
decl_stmt|;
name|VcprojGenerator
modifier|*
name|Project
decl_stmt|;
name|VCConfiguration
modifier|*
name|Config
decl_stmt|;
name|QList
operator|<
name|VCFilterFile
operator|>
name|Files
expr_stmt|;
name|customBuildCheck
name|CustomBuild
decl_stmt|;
name|bool
name|useCustomBuildTool
decl_stmt|;
name|VCCustomBuildTool
name|CustomBuildTool
decl_stmt|;
name|bool
name|useCompilerTool
decl_stmt|;
name|VCCLCompilerTool
name|CompilerTool
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_typedef
DECL|typedef|VCFilterList
typedef|typedef
name|QList
operator|<
name|VCFilter
operator|>
name|VCFilterList
expr_stmt|;
end_typedef
begin_decl_stmt
name|class
name|VCProjectSingleConfig
block|{
name|public
label|:
enum|enum
name|FilterTypes
block|{
name|None
block|,
name|Source
block|,
name|Header
block|,
name|Generated
block|,
name|LexYacc
block|,
name|Translation
block|,
name|Resources
block|,
name|Extras
block|}
enum|;
comment|// Functions
name|VCProjectSingleConfig
argument_list|()
block|{}
operator|~
name|VCProjectSingleConfig
argument_list|()
block|{}
comment|// Variables
name|QString
name|Name
expr_stmt|;
name|QString
name|Version
decl_stmt|;
name|QString
name|ProjectGUID
decl_stmt|;
name|QString
name|Keyword
decl_stmt|;
name|QString
name|SccProjectName
decl_stmt|;
name|QString
name|SccLocalPath
decl_stmt|;
name|QString
name|PlatformName
decl_stmt|;
comment|// XML sub-parts
name|VCConfiguration
name|Configuration
decl_stmt|;
name|VCFilter
name|RootFiles
decl_stmt|;
name|VCFilter
name|SourceFiles
decl_stmt|;
name|VCFilter
name|HeaderFiles
decl_stmt|;
name|VCFilter
name|GeneratedFiles
decl_stmt|;
name|VCFilter
name|LexYaccFiles
decl_stmt|;
name|VCFilter
name|TranslationFiles
decl_stmt|;
name|VCFilter
name|FormFiles
decl_stmt|;
name|VCFilter
name|ResourceFiles
decl_stmt|;
name|VCFilterList
name|ExtraCompilersFiles
decl_stmt|;
name|bool
name|flat_files
decl_stmt|;
comment|// Accessor for extracompilers
name|VCFilter
modifier|&
name|filterForExtraCompiler
parameter_list|(
specifier|const
name|QString
modifier|&
name|compilerName
parameter_list|)
function_decl|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_comment
comment|// Tree& Flat view of files --------------------------------------------------
end_comment
begin_decl_stmt
DECL|variable|VCFilter
name|class
name|VCFilter
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|Node
block|{
name|public
label|:
name|virtual
operator|~
name|Node
argument_list|()
block|{ }
name|void
name|addElement
argument_list|(
argument|const VCFilterFile&file
argument_list|)
block|{
name|addElement
argument_list|(
name|file
operator|.
name|file
argument_list|,
name|file
argument_list|)
block|;     }
name|virtual
name|void
name|addElement
argument_list|(
specifier|const
name|QString
operator|&
name|filepath
argument_list|,
specifier|const
name|VCFilterFile
operator|&
name|allInfo
argument_list|)
operator|=
literal|0
expr_stmt|;
name|virtual
name|void
name|removeElements
parameter_list|()
init|=
literal|0
function_decl|;
name|virtual
name|void
name|generateXML
parameter_list|(
name|XmlOutput
modifier|&
name|xml
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|,
name|VCProject
modifier|&
name|tool
parameter_list|,
specifier|const
name|QString
modifier|&
name|filter
parameter_list|)
init|=
literal|0
function_decl|;
name|virtual
name|bool
name|hasElements
parameter_list|()
init|=
literal|0
function_decl|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|TreeNode
range|:
name|public
name|Node
block|{
typedef|typedef
name|QMap
operator|<
name|QString
operator|,
name|TreeNode
operator|*
operator|>
name|ChildrenMap
expr_stmt|;
name|VCFilterFile
name|info
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|ChildrenMap
name|children
decl_stmt|;
end_decl_stmt
begin_label
name|public
label|:
end_label
begin_expr_stmt
name|virtual
operator|~
name|TreeNode
argument_list|()
block|{
name|removeElements
argument_list|()
block|; }
name|int
name|pathIndex
argument_list|(
argument|const QString&filepath
argument_list|)
block|{
name|int
name|Windex
operator|=
name|filepath
operator|.
name|indexOf
argument_list|(
literal|"\\"
argument_list|)
block|;
name|int
name|Uindex
operator|=
name|filepath
operator|.
name|indexOf
argument_list|(
literal|"/"
argument_list|)
block|;
if|if
condition|(
name|Windex
operator|!=
operator|-
literal|1
operator|&&
name|Uindex
operator|!=
operator|-
literal|1
condition|)
return|return
name|qMin
argument_list|(
name|Windex
argument_list|,
name|Uindex
argument_list|)
return|;
elseif|else
if|if
condition|(
name|Windex
operator|!=
operator|-
literal|1
condition|)
return|return
name|Windex
return|;
end_expr_stmt
begin_return
return|return
name|Uindex
return|;
end_return
begin_macro
unit|}      void
name|addElement
argument_list|(
argument|const QString&filepath
argument_list|,
argument|const VCFilterFile&allInfo
argument_list|)
end_macro
begin_block
block|{
name|QString
name|newNodeName
parameter_list|(
name|filepath
parameter_list|)
function_decl|;
name|int
name|index
init|=
name|pathIndex
argument_list|(
name|filepath
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
name|newNodeName
operator|=
name|filepath
operator|.
name|left
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|TreeNode
modifier|*
name|n
init|=
name|children
operator|.
name|value
argument_list|(
name|newNodeName
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|n
condition|)
block|{
name|n
operator|=
name|new
name|TreeNode
expr_stmt|;
name|n
operator|->
name|info
operator|=
name|allInfo
expr_stmt|;
name|children
operator|.
name|insert
argument_list|(
name|newNodeName
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
name|n
operator|->
name|addElement
argument_list|(
name|filepath
operator|.
name|mid
argument_list|(
name|index
operator|+
literal|1
argument_list|)
argument_list|,
name|allInfo
argument_list|)
expr_stmt|;
block|}
end_block
begin_function
name|void
name|removeElements
parameter_list|()
block|{
name|ChildrenMap
operator|::
name|ConstIterator
name|it
operator|=
name|children
operator|.
name|constBegin
argument_list|()
expr_stmt|;
name|ChildrenMap
operator|::
name|ConstIterator
name|end
operator|=
name|children
operator|.
name|constEnd
argument_list|()
expr_stmt|;
for|for
control|(
init|;
name|it
operator|!=
name|end
condition|;
name|it
operator|++
control|)
block|{
operator|(
operator|*
name|it
operator|)
operator|->
name|removeElements
argument_list|()
expr_stmt|;
name|delete
name|it
operator|.
name|value
parameter_list|()
function_decl|;
block|}
name|children
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function_decl
name|void
name|generateXML
parameter_list|(
name|XmlOutput
modifier|&
name|xml
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|,
name|VCProject
modifier|&
name|tool
parameter_list|,
specifier|const
name|QString
modifier|&
name|filter
parameter_list|)
function_decl|;
end_function_decl
begin_function
name|bool
name|hasElements
parameter_list|()
block|{
return|return
name|children
operator|.
name|size
argument_list|()
operator|!=
literal|0
return|;
block|}
end_function
begin_decl_stmt
unit|};
name|class
name|FlatNode
range|:
name|public
name|Node
block|{
typedef|typedef
name|QMap
operator|<
name|QString
operator|,
name|VCFilterFile
operator|>
name|ChildrenMapFlat
expr_stmt|;
name|ChildrenMapFlat
name|children
decl_stmt|;
end_decl_stmt
begin_label
name|public
label|:
end_label
begin_expr_stmt
name|virtual
operator|~
name|FlatNode
argument_list|()
block|{
name|removeElements
argument_list|()
block|; }
name|int
name|pathIndex
argument_list|(
argument|const QString&filepath
argument_list|)
block|{
name|int
name|Windex
operator|=
name|filepath
operator|.
name|lastIndexOf
argument_list|(
literal|"\\"
argument_list|)
block|;
name|int
name|Uindex
operator|=
name|filepath
operator|.
name|lastIndexOf
argument_list|(
literal|"/"
argument_list|)
block|;
if|if
condition|(
name|Windex
operator|!=
operator|-
literal|1
operator|&&
name|Uindex
operator|!=
operator|-
literal|1
condition|)
return|return
name|qMax
argument_list|(
name|Windex
argument_list|,
name|Uindex
argument_list|)
return|;
elseif|else
if|if
condition|(
name|Windex
operator|!=
operator|-
literal|1
condition|)
return|return
name|Windex
return|;
end_expr_stmt
begin_return
return|return
name|Uindex
return|;
end_return
begin_macro
unit|}      void
name|addElement
argument_list|(
argument|const QString&filepath
argument_list|,
argument|const VCFilterFile&allInfo
argument_list|)
end_macro
begin_block
block|{
name|QString
name|newKey
parameter_list|(
name|filepath
parameter_list|)
function_decl|;
name|int
name|index
init|=
name|pathIndex
argument_list|(
name|filepath
argument_list|)
decl_stmt|;
if|if
condition|(
name|index
operator|!=
operator|-
literal|1
condition|)
name|newKey
operator|=
name|filepath
operator|.
name|mid
argument_list|(
name|index
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// Key designed to sort files with same
comment|// name in different paths correctly
name|children
operator|.
name|insert
argument_list|(
name|newKey
operator|+
literal|"\0"
operator|+
name|allInfo
operator|.
name|file
argument_list|,
name|allInfo
argument_list|)
expr_stmt|;
block|}
end_block
begin_function
name|void
name|removeElements
parameter_list|()
block|{
name|children
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function_decl
name|void
name|generateXML
parameter_list|(
name|XmlOutput
modifier|&
name|xml
parameter_list|,
specifier|const
name|QString
modifier|&
name|tagName
parameter_list|,
name|VCProject
modifier|&
name|proj
parameter_list|,
specifier|const
name|QString
modifier|&
name|filter
parameter_list|)
function_decl|;
end_function_decl
begin_function
name|bool
name|hasElements
parameter_list|()
block|{
return|return
name|children
operator|.
name|size
argument_list|()
operator|!=
literal|0
return|;
block|}
end_function
begin_comment
unit|};
comment|// ----------------------------------------------------------------------------
end_comment
begin_decl_stmt
name|class
name|VCProject
block|{
name|public
label|:
comment|// Variables
name|QString
name|Name
decl_stmt|;
name|QString
name|Version
decl_stmt|;
name|QString
name|ProjectGUID
decl_stmt|;
name|QString
name|Keyword
decl_stmt|;
name|QString
name|SccProjectName
decl_stmt|;
name|QString
name|SccLocalPath
decl_stmt|;
name|QString
name|PlatformName
decl_stmt|;
comment|// Single projects
name|QList
operator|<
name|VCProjectSingleConfig
operator|>
name|SingleProjects
expr_stmt|;
comment|// List of all extracompilers
name|QStringList
name|ExtraCompilers
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|VCProjectWriter
block|{
name|public
label|:
name|virtual
operator|~
name|VCProjectWriter
argument_list|()
block|{}
name|virtual
name|void
name|write
argument_list|(
name|XmlOutput
operator|&
argument_list|,
name|VCProjectSingleConfig
operator|&
argument_list|)
expr_stmt|;
name|virtual
name|void
name|write
parameter_list|(
name|XmlOutput
modifier|&
parameter_list|,
name|VCProject
modifier|&
parameter_list|)
function_decl|;
name|virtual
name|void
name|write
parameter_list|(
name|XmlOutput
modifier|&
parameter_list|,
specifier|const
name|VCCLCompilerTool
modifier|&
parameter_list|)
function_decl|;
name|virtual
name|void
name|write
parameter_list|(
name|XmlOutput
modifier|&
parameter_list|,
specifier|const
name|VCLinkerTool
modifier|&
parameter_list|)
function_decl|;
name|virtual
name|void
name|write
parameter_list|(
name|XmlOutput
modifier|&
parameter_list|,
specifier|const
name|VCMIDLTool
modifier|&
parameter_list|)
function_decl|;
name|virtual
name|void
name|write
parameter_list|(
name|XmlOutput
modifier|&
parameter_list|,
specifier|const
name|VCCustomBuildTool
modifier|&
parameter_list|)
function_decl|;
name|virtual
name|void
name|write
parameter_list|(
name|XmlOutput
modifier|&
parameter_list|,
specifier|const
name|VCLibrarianTool
modifier|&
parameter_list|)
function_decl|;
name|virtual
name|void
name|write
parameter_list|(
name|XmlOutput
modifier|&
parameter_list|,
specifier|const
name|VCResourceCompilerTool
modifier|&
parameter_list|)
function_decl|;
name|virtual
name|void
name|write
parameter_list|(
name|XmlOutput
modifier|&
parameter_list|,
specifier|const
name|VCEventTool
modifier|&
parameter_list|)
function_decl|;
name|virtual
name|void
name|write
parameter_list|(
name|XmlOutput
modifier|&
parameter_list|,
specifier|const
name|VCDeploymentTool
modifier|&
parameter_list|)
function_decl|;
name|virtual
name|void
name|write
parameter_list|(
name|XmlOutput
modifier|&
parameter_list|,
specifier|const
name|VCConfiguration
modifier|&
parameter_list|)
function_decl|;
name|virtual
name|void
name|write
parameter_list|(
name|XmlOutput
modifier|&
parameter_list|,
name|VCFilter
modifier|&
parameter_list|)
function_decl|;
name|private
label|:
specifier|static
name|void
name|outputFilter
parameter_list|(
name|VCProject
modifier|&
name|project
parameter_list|,
name|XmlOutput
modifier|&
name|xml
parameter_list|,
specifier|const
name|QString
modifier|&
name|filtername
parameter_list|)
function_decl|;
specifier|static
name|void
name|outputFileConfigs
parameter_list|(
name|VCProject
modifier|&
name|project
parameter_list|,
name|XmlOutput
modifier|&
name|xml
parameter_list|,
specifier|const
name|VCFilterFile
modifier|&
name|info
parameter_list|,
specifier|const
name|QString
modifier|&
name|filtername
parameter_list|)
function_decl|;
specifier|static
name|void
name|outputFileConfig
parameter_list|(
name|VCFilter
modifier|&
name|filter
parameter_list|,
name|XmlOutput
modifier|&
name|xml
parameter_list|,
specifier|const
name|QString
modifier|&
name|filename
parameter_list|)
function_decl|;
name|friend
name|class
name|TreeNode
decl_stmt|;
name|friend
name|class
name|FlatNode
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// MSVC_OBJECTMODEL_H
end_comment
end_unit
