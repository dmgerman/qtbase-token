begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the qmake application of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"mingw_make.h"
end_include
begin_include
include|#
directive|include
file|"option.h"
end_include
begin_include
include|#
directive|include
file|"meta.h"
end_include
begin_include
include|#
directive|include
file|<qregexp.h>
end_include
begin_include
include|#
directive|include
file|<qdir.h>
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|<time.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|MingwMakefileGenerator
name|MingwMakefileGenerator
operator|::
name|MingwMakefileGenerator
parameter_list|()
member_init_list|:
name|Win32MakefileGenerator
argument_list|()
member_init_list|,
name|init_flag
argument_list|(
literal|false
argument_list|)
block|{
if|if
condition|(
name|Option
operator|::
name|shellPath
operator|.
name|isEmpty
argument_list|()
condition|)
name|quote
operator|=
literal|"\""
expr_stmt|;
else|else
name|quote
operator|=
literal|"'"
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|escapeDependencyPath
name|QString
name|MingwMakefileGenerator
operator|::
name|escapeDependencyPath
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|)
specifier|const
block|{
name|QString
name|ret
init|=
name|path
decl_stmt|;
name|ret
operator|.
name|remove
argument_list|(
literal|'\"'
argument_list|)
expr_stmt|;
name|ret
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|"/"
argument_list|)
expr_stmt|;
name|ret
operator|.
name|replace
argument_list|(
literal|' '
argument_list|,
literal|"\\ "
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|getLibTarget
name|QString
name|MingwMakefileGenerator
operator|::
name|getLibTarget
parameter_list|()
block|{
return|return
name|QString
argument_list|(
literal|"lib"
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"TARGET"
argument_list|)
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"TARGET_VERSION_EXT"
argument_list|)
operator|+
literal|".a"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|findLibraries
name|bool
name|MingwMakefileGenerator
operator|::
name|findLibraries
parameter_list|()
block|{
return|return
name|findLibraries
argument_list|(
literal|"QMAKE_LIBS"
argument_list|)
operator|&&
name|findLibraries
argument_list|(
literal|"QMAKE_LIBS_PRIVATE"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|findLibraries
name|bool
name|MingwMakefileGenerator
operator|::
name|findLibraries
parameter_list|(
specifier|const
name|QString
modifier|&
name|where
parameter_list|)
block|{
name|QStringList
modifier|&
name|l
init|=
name|project
operator|->
name|values
argument_list|(
name|where
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QMakeLocalFileName
argument_list|>
name|dirs
decl_stmt|;
block|{
specifier|const
name|QStringList
modifier|&
name|libpaths
init|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LIBDIR"
argument_list|)
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|libpathit
init|=
name|libpaths
operator|.
name|begin
argument_list|()
init|;
name|libpathit
operator|!=
name|libpaths
operator|.
name|end
argument_list|()
condition|;
operator|++
name|libpathit
control|)
name|dirs
operator|.
name|append
argument_list|(
name|QMakeLocalFileName
argument_list|(
operator|(
operator|*
name|libpathit
operator|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QStringList
operator|::
name|Iterator
name|it
init|=
name|l
operator|.
name|begin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|l
operator|.
name|end
argument_list|()
condition|)
block|{
if|if
condition|(
operator|(
operator|*
name|it
operator|)
operator|.
name|startsWith
argument_list|(
literal|"-l"
argument_list|)
condition|)
block|{
name|QString
name|steam
init|=
operator|(
operator|*
name|it
operator|)
operator|.
name|mid
argument_list|(
literal|2
argument_list|)
decl_stmt|,
name|out
decl_stmt|;
name|QString
name|suffix
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_"
operator|+
name|steam
operator|.
name|toUpper
argument_list|()
operator|+
literal|"_SUFFIX"
argument_list|)
condition|)
name|suffix
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_"
operator|+
name|steam
operator|.
name|toUpper
argument_list|()
operator|+
literal|"_SUFFIX"
argument_list|)
expr_stmt|;
for|for
control|(
name|QList
argument_list|<
name|QMakeLocalFileName
argument_list|>
operator|::
name|Iterator
name|dir_it
init|=
name|dirs
operator|.
name|begin
argument_list|()
init|;
name|dir_it
operator|!=
name|dirs
operator|.
name|end
argument_list|()
condition|;
operator|++
name|dir_it
control|)
block|{
name|QString
name|extension
decl_stmt|;
name|int
name|ver
init|=
name|findHighestVersion
argument_list|(
operator|(
operator|*
name|dir_it
operator|)
operator|.
name|local
argument_list|()
argument_list|,
name|steam
argument_list|,
literal|"dll.a|a"
argument_list|)
decl_stmt|;
if|if
condition|(
name|ver
operator|!=
operator|-
literal|1
condition|)
name|extension
operator|+=
name|QString
operator|::
name|number
argument_list|(
name|ver
argument_list|)
expr_stmt|;
name|extension
operator|+=
name|suffix
expr_stmt|;
if|if
condition|(
name|QMakeMetaInfo
operator|::
name|libExists
argument_list|(
operator|(
operator|*
name|dir_it
operator|)
operator|.
name|local
argument_list|()
operator|+
name|Option
operator|::
name|dir_sep
operator|+
name|steam
argument_list|)
operator|||
name|exists
argument_list|(
operator|(
operator|*
name|dir_it
operator|)
operator|.
name|local
argument_list|()
operator|+
name|Option
operator|::
name|dir_sep
operator|+
name|steam
operator|+
name|extension
operator|+
literal|".a"
argument_list|)
operator|||
name|exists
argument_list|(
operator|(
operator|*
name|dir_it
operator|)
operator|.
name|local
argument_list|()
operator|+
name|Option
operator|::
name|dir_sep
operator|+
name|steam
operator|+
name|extension
operator|+
literal|".dll.a"
argument_list|)
condition|)
block|{
name|out
operator|=
operator|(
operator|*
name|it
operator|)
operator|+
name|extension
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|out
operator|.
name|isEmpty
argument_list|()
condition|)
comment|// We assume if it never finds it that its correct
operator|(
operator|*
name|it
operator|)
operator|=
name|out
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
operator|*
name|it
operator|)
operator|.
name|startsWith
argument_list|(
literal|"-L"
argument_list|)
condition|)
block|{
name|dirs
operator|.
name|append
argument_list|(
name|QMakeLocalFileName
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|.
name|mid
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
operator|++
name|it
expr_stmt|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|writeMakefile
name|bool
name|MingwMakefileGenerator
operator|::
name|writeMakefile
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|)
block|{
name|writeHeader
argument_list|(
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_FAILED_REQUIREMENTS"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|t
operator|<<
literal|"all clean:"
operator|<<
literal|"\n\t"
operator|<<
literal|"@echo \"Some of the required modules ("
operator|<<
name|var
argument_list|(
literal|"QMAKE_FAILED_REQUIREMENTS"
argument_list|)
operator|<<
literal|") are not available.\""
operator|<<
literal|"\n\t"
operator|<<
literal|"@echo \"Skipped.\""
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|writeMakeQmake
argument_list|(
name|t
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"app"
operator|||
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"lib"
operator|||
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"aux"
condition|)
block|{
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"create_pc"
argument_list|)
operator|&&
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"lib"
condition|)
name|writePkgConfigFile
argument_list|()
expr_stmt|;
if|if
condition|(
name|Option
operator|::
name|mkfile
operator|::
name|do_stub_makefile
condition|)
block|{
name|t
operator|<<
literal|"QMAKE    = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_QMAKE"
argument_list|)
operator|<<
name|endl
expr_stmt|;
specifier|const
name|QStringList
modifier|&
name|qut
init|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_EXTRA_TARGETS"
argument_list|)
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|it
init|=
name|qut
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|qut
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
name|t
operator|<<
operator|*
name|it
operator|<<
literal|" "
expr_stmt|;
name|t
operator|<<
literal|"first all clean install distclean uninstall: qmake"
operator|<<
name|endl
operator|<<
literal|"qmake_all:"
operator|<<
name|endl
expr_stmt|;
name|writeMakeQmake
argument_list|(
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_NOFORCE"
argument_list|)
condition|)
name|t
operator|<<
literal|"FORCE:"
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
return|return
literal|true
return|;
block|}
name|writeMingwParts
argument_list|(
name|t
argument_list|)
expr_stmt|;
return|return
name|MakefileGenerator
operator|::
name|writeMakefile
argument_list|(
name|t
argument_list|)
return|;
block|}
elseif|else
if|if
condition|(
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"subdirs"
condition|)
block|{
name|writeSubDirs
argument_list|(
name|t
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|createLdObjectScriptFile
name|void
name|createLdObjectScriptFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|objList
parameter_list|)
block|{
name|QString
name|filePath
init|=
name|Option
operator|::
name|output_dir
operator|+
name|QDir
operator|::
name|separator
argument_list|()
operator|+
name|fileName
decl_stmt|;
name|QFile
name|file
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
condition|)
block|{
name|QTextStream
name|t
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|t
operator|<<
literal|"INPUT("
operator|<<
name|endl
expr_stmt|;
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|it
init|=
name|objList
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|objList
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
name|QDir
operator|::
name|isRelativePath
argument_list|(
operator|*
name|it
argument_list|)
condition|)
name|t
operator|<<
literal|"./"
operator|<<
operator|*
name|it
operator|<<
name|endl
expr_stmt|;
else|else
name|t
operator|<<
operator|*
name|it
operator|<<
name|endl
expr_stmt|;
block|}
name|t
operator|<<
literal|");"
operator|<<
name|endl
expr_stmt|;
name|t
operator|.
name|flush
argument_list|()
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|createArObjectScriptFile
name|void
name|createArObjectScriptFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|,
specifier|const
name|QString
modifier|&
name|target
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|objList
parameter_list|)
block|{
name|QString
name|filePath
init|=
name|Option
operator|::
name|output_dir
operator|+
name|QDir
operator|::
name|separator
argument_list|()
operator|+
name|fileName
decl_stmt|;
name|QFile
name|file
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
condition|)
block|{
name|QTextStream
name|t
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|t
operator|<<
literal|"CREATE "
operator|<<
name|target
operator|<<
name|endl
expr_stmt|;
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|it
init|=
name|objList
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|objList
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|t
operator|<<
literal|"ADDMOD "
operator|<<
operator|*
name|it
operator|<<
name|endl
expr_stmt|;
block|}
name|t
operator|<<
literal|"SAVE"
operator|<<
name|endl
expr_stmt|;
name|t
operator|.
name|flush
argument_list|()
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|createRvctObjectScriptFile
name|void
name|createRvctObjectScriptFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|objList
parameter_list|)
block|{
name|QString
name|filePath
init|=
name|Option
operator|::
name|output_dir
operator|+
name|QDir
operator|::
name|separator
argument_list|()
operator|+
name|fileName
decl_stmt|;
name|QFile
name|file
argument_list|(
name|filePath
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
condition|)
block|{
name|QTextStream
name|t
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|it
init|=
name|objList
operator|.
name|constBegin
argument_list|()
init|;
name|it
operator|!=
name|objList
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
name|QDir
operator|::
name|isRelativePath
argument_list|(
operator|*
name|it
argument_list|)
condition|)
name|t
operator|<<
literal|"./"
operator|<<
operator|*
name|it
operator|<<
name|endl
expr_stmt|;
else|else
name|t
operator|<<
operator|*
name|it
operator|<<
name|endl
expr_stmt|;
block|}
name|t
operator|.
name|flush
argument_list|()
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|writeMingwParts
name|void
name|MingwMakefileGenerator
operator|::
name|writeMingwParts
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|)
block|{
name|writeStandardParts
argument_list|(
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|preCompHeaderOut
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QString
name|header
init|=
name|project
operator|->
name|first
argument_list|(
literal|"PRECOMPILED_HEADER"
argument_list|)
decl_stmt|;
name|QString
name|cHeader
init|=
name|preCompHeaderOut
operator|+
name|Option
operator|::
name|dir_sep
operator|+
literal|"c"
decl_stmt|;
name|t
operator|<<
name|escapeDependencyPath
argument_list|(
name|cHeader
argument_list|)
operator|<<
literal|": "
operator|<<
name|escapeDependencyPath
argument_list|(
name|header
argument_list|)
operator|<<
literal|" "
operator|<<
name|escapeDependencyPaths
argument_list|(
name|findDependencies
argument_list|(
name|header
argument_list|)
argument_list|)
operator|.
name|join
argument_list|(
literal|" \\\n\t\t"
argument_list|)
operator|<<
literal|"\n\t"
operator|<<
name|mkdir_p_asstring
argument_list|(
name|preCompHeaderOut
argument_list|)
operator|<<
literal|"\n\t"
operator|<<
literal|"$(CC) -x c-header -c $(CFLAGS) $(INCPATH) -o "
operator|<<
name|cHeader
operator|<<
literal|" "
operator|<<
name|header
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|QString
name|cppHeader
init|=
name|preCompHeaderOut
operator|+
name|Option
operator|::
name|dir_sep
operator|+
literal|"c++"
decl_stmt|;
name|t
operator|<<
name|escapeDependencyPath
argument_list|(
name|cppHeader
argument_list|)
operator|<<
literal|": "
operator|<<
name|escapeDependencyPath
argument_list|(
name|header
argument_list|)
operator|<<
literal|" "
operator|<<
name|escapeDependencyPaths
argument_list|(
name|findDependencies
argument_list|(
name|header
argument_list|)
argument_list|)
operator|.
name|join
argument_list|(
literal|" \\\n\t\t"
argument_list|)
operator|<<
literal|"\n\t"
operator|<<
name|mkdir_p_asstring
argument_list|(
name|preCompHeaderOut
argument_list|)
operator|<<
literal|"\n\t"
operator|<<
literal|"$(CXX) -x c++-header -c $(CXXFLAGS) $(INCPATH) -o "
operator|<<
name|cppHeader
operator|<<
literal|" "
operator|<<
name|header
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|init
name|void
name|MingwMakefileGenerator
operator|::
name|init
parameter_list|()
block|{
if|if
condition|(
name|init_flag
condition|)
return|return;
name|init_flag
operator|=
literal|true
expr_stmt|;
comment|/* this should probably not be here, but I'm using it to wrap the .t files */
if|if
condition|(
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"app"
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_APP_FLAG"
argument_list|)
operator|.
name|append
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"lib"
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LIB_FLAG"
argument_list|)
operator|.
name|append
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"subdirs"
condition|)
block|{
name|MakefileGenerator
operator|::
name|init
argument_list|()
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_COPY_FILE"
argument_list|)
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_COPY_FILE"
argument_list|)
operator|.
name|append
argument_list|(
literal|"$(COPY)"
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_COPY_DIR"
argument_list|)
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_COPY_DIR"
argument_list|)
operator|.
name|append
argument_list|(
literal|"xcopy /s /q /y /i"
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_INSTALL_FILE"
argument_list|)
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_INSTALL_FILE"
argument_list|)
operator|.
name|append
argument_list|(
literal|"$(COPY_FILE)"
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_INSTALL_PROGRAM"
argument_list|)
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_INSTALL_PROGRAM"
argument_list|)
operator|.
name|append
argument_list|(
literal|"$(COPY_FILE)"
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_INSTALL_DIR"
argument_list|)
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_INSTALL_DIR"
argument_list|)
operator|.
name|append
argument_list|(
literal|"$(COPY_DIR)"
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|values
argument_list|(
literal|"MAKEFILE"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"MAKEFILE"
argument_list|)
operator|.
name|append
argument_list|(
literal|"Makefile"
argument_list|)
expr_stmt|;
return|return;
block|}
name|project
operator|->
name|values
argument_list|(
literal|"TARGET_PRL"
argument_list|)
operator|.
name|append
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"TARGET"
argument_list|)
argument_list|)
expr_stmt|;
name|processVars
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|values
argument_list|(
literal|"RES_FILE"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LIBS"
argument_list|)
operator|+=
name|escapeFilePaths
argument_list|(
name|project
operator|->
name|values
argument_list|(
literal|"RES_FILE"
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// LIBS defined in Profile comes first for gcc
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LIBS"
argument_list|)
operator|+=
name|escapeFilePaths
argument_list|(
name|project
operator|->
name|values
argument_list|(
literal|"LIBS"
argument_list|)
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LIBS_PRIVATE"
argument_list|)
operator|+=
name|escapeFilePaths
argument_list|(
name|project
operator|->
name|values
argument_list|(
literal|"LIBS_PRIVATE"
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|targetfilename
init|=
name|project
operator|->
name|values
argument_list|(
literal|"TARGET"
argument_list|)
operator|.
name|first
argument_list|()
decl_stmt|;
name|QStringList
modifier|&
name|configs
init|=
name|project
operator|->
name|values
argument_list|(
literal|"CONFIG"
argument_list|)
decl_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"qt_dll"
argument_list|)
condition|)
if|if
condition|(
name|configs
operator|.
name|indexOf
argument_list|(
literal|"qt"
argument_list|)
operator|==
operator|-
literal|1
condition|)
name|configs
operator|.
name|append
argument_list|(
literal|"qt"
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"dll"
argument_list|)
condition|)
block|{
name|QString
name|destDir
init|=
literal|""
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|first
argument_list|(
literal|"DESTDIR"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
name|destDir
operator|=
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"DESTDIR"
argument_list|)
operator|+
name|Option
operator|::
name|dir_sep
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"MINGW_IMPORT_LIB"
argument_list|)
operator|.
name|prepend
argument_list|(
name|destDir
operator|+
literal|"lib"
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"TARGET"
argument_list|)
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"TARGET_VERSION_EXT"
argument_list|)
operator|+
literal|".a"
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LFLAGS"
argument_list|)
operator|.
name|append
argument_list|(
name|QString
argument_list|(
literal|"-Wl,--out-implib,"
argument_list|)
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"MINGW_IMPORT_LIB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|project
operator|->
name|values
argument_list|(
literal|"DEF_FILE"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QString
name|defFileName
init|=
name|fileFixify
argument_list|(
name|project
operator|->
name|values
argument_list|(
literal|"DEF_FILE"
argument_list|)
argument_list|)
operator|.
name|first
argument_list|()
decl_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LFLAGS"
argument_list|)
operator|.
name|append
argument_list|(
name|QString
argument_list|(
literal|"-Wl,"
argument_list|)
operator|+
name|escapeFilePath
argument_list|(
name|defFileName
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|MakefileGenerator
operator|::
name|init
argument_list|()
expr_stmt|;
comment|// precomp
if|if
condition|(
operator|!
name|project
operator|->
name|first
argument_list|(
literal|"PRECOMPILED_HEADER"
argument_list|)
operator|.
name|isEmpty
argument_list|()
operator|&&
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"precompile_header"
argument_list|)
condition|)
block|{
name|QString
name|preCompHeader
init|=
name|var
argument_list|(
literal|"PRECOMPILED_DIR"
argument_list|)
operator|+
name|QFileInfo
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"PRECOMPILED_HEADER"
argument_list|)
argument_list|)
operator|.
name|fileName
argument_list|()
decl_stmt|;
name|preCompHeaderOut
operator|=
name|preCompHeader
operator|+
literal|".gch"
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_CLEAN"
argument_list|)
operator|.
name|append
argument_list|(
name|preCompHeaderOut
operator|+
name|Option
operator|::
name|dir_sep
operator|+
literal|"c"
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_CLEAN"
argument_list|)
operator|.
name|append
argument_list|(
name|preCompHeaderOut
operator|+
name|Option
operator|::
name|dir_sep
operator|+
literal|"c++"
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_RUN_CC"
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_RUN_CC"
argument_list|)
operator|.
name|append
argument_list|(
literal|"$(CC) -c -include "
operator|+
name|preCompHeader
operator|+
literal|" $(CFLAGS) $(INCPATH) -o $obj $src"
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_RUN_CC_IMP"
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_RUN_CC_IMP"
argument_list|)
operator|.
name|append
argument_list|(
literal|"$(CC)  -c -include "
operator|+
name|preCompHeader
operator|+
literal|" $(CFLAGS) $(INCPATH) -o $@ $<"
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_RUN_CXX"
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_RUN_CXX"
argument_list|)
operator|.
name|append
argument_list|(
literal|"$(CXX) -c -include "
operator|+
name|preCompHeader
operator|+
literal|" $(CXXFLAGS) $(INCPATH) -o $obj $src"
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_RUN_CXX_IMP"
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_RUN_CXX_IMP"
argument_list|)
operator|.
name|append
argument_list|(
literal|"$(CXX) -c -include "
operator|+
name|preCompHeader
operator|+
literal|" $(CXXFLAGS) $(INCPATH) -o $@ $<"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"dll"
argument_list|)
condition|)
block|{
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_CLEAN"
argument_list|)
operator|.
name|append
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"MINGW_IMPORT_LIB"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|fixTargetExt
name|void
name|MingwMakefileGenerator
operator|::
name|fixTargetExt
parameter_list|()
block|{
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"staticlib"
argument_list|)
operator|&&
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"lib"
condition|)
block|{
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LFLAGS"
argument_list|)
operator|.
name|append
argument_list|(
literal|"-static"
argument_list|)
expr_stmt|;
block|}
name|Win32MakefileGenerator
operator|::
name|fixTargetExt
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeIncPart
name|void
name|MingwMakefileGenerator
operator|::
name|writeIncPart
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|)
block|{
name|t
operator|<<
literal|"INCPATH       = "
expr_stmt|;
specifier|const
name|QStringList
modifier|&
name|incs
init|=
name|project
operator|->
name|values
argument_list|(
literal|"INCLUDEPATH"
argument_list|)
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|incit
init|=
name|incs
operator|.
name|begin
argument_list|()
init|;
name|incit
operator|!=
name|incs
operator|.
name|end
argument_list|()
condition|;
operator|++
name|incit
control|)
block|{
name|QString
name|inc
init|=
operator|(
operator|*
name|incit
operator|)
decl_stmt|;
name|inc
operator|.
name|replace
argument_list|(
name|QRegExp
argument_list|(
literal|"\\\\$"
argument_list|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|inc
operator|.
name|replace
argument_list|(
name|QRegExp
argument_list|(
literal|"\""
argument_list|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"-I"
operator|<<
name|quote
operator|<<
name|inc
operator|<<
name|quote
operator|<<
literal|" "
expr_stmt|;
block|}
name|t
operator|<<
literal|"-I"
operator|<<
name|quote
operator|<<
name|specdir
argument_list|()
operator|<<
name|quote
operator|<<
name|endl
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeLibsPart
name|void
name|MingwMakefileGenerator
operator|::
name|writeLibsPart
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|)
block|{
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"staticlib"
argument_list|)
operator|&&
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"lib"
condition|)
block|{
name|t
operator|<<
literal|"LIB        =        "
operator|<<
name|var
argument_list|(
literal|"QMAKE_LIB"
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
else|else
block|{
name|t
operator|<<
literal|"LINK        =        "
operator|<<
name|var
argument_list|(
literal|"QMAKE_LINK"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"LFLAGS        =        "
operator|<<
name|var
argument_list|(
literal|"QMAKE_LFLAGS"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"LIBS        =        "
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LIBDIR"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
name|writeLibDirPart
argument_list|(
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"rvct_linker"
argument_list|)
condition|)
block|{
name|t
operator|<<
name|var
argument_list|(
literal|"QMAKE_LIBS"
argument_list|)
operator|<<
literal|' '
operator|<<
name|var
argument_list|(
literal|"QMAKE_LIBS_PRIVATE"
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
else|else
block|{
name|t
operator|<<
name|var
argument_list|(
literal|"QMAKE_LIBS"
argument_list|)
operator|.
name|replace
argument_list|(
name|QRegExp
argument_list|(
literal|"(\\slib|^lib)"
argument_list|)
argument_list|,
literal|" -l"
argument_list|)
operator|<<
literal|' '
operator|<<
name|var
argument_list|(
literal|"QMAKE_LIBS_PRIVATE"
argument_list|)
operator|.
name|replace
argument_list|(
name|QRegExp
argument_list|(
literal|"(\\slib|^lib)"
argument_list|)
argument_list|,
literal|" -l"
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|writeLibDirPart
name|void
name|MingwMakefileGenerator
operator|::
name|writeLibDirPart
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|)
block|{
name|QStringList
name|libDirs
init|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LIBDIR"
argument_list|)
decl_stmt|;
name|QString
name|libArg
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"-L"
argument_list|)
decl_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"rvct_linker"
argument_list|)
condition|)
name|libArg
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"--userlibpath "
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|libDirs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|libDirs
index|[
name|i
index|]
operator|.
name|remove
argument_list|(
literal|"\""
argument_list|)
expr_stmt|;
if|if
condition|(
name|libDirs
index|[
name|i
index|]
operator|.
name|endsWith
argument_list|(
literal|"\\"
argument_list|)
condition|)
name|libDirs
index|[
name|i
index|]
operator|.
name|chop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|t
operator|<<
name|valGlue
argument_list|(
name|libDirs
argument_list|,
name|libArg
operator|+
name|quote
argument_list|,
name|quote
operator|+
literal|" "
operator|+
name|libArg
operator|+
name|quote
argument_list|,
name|quote
argument_list|)
operator|<<
literal|" "
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeObjectsPart
name|void
name|MingwMakefileGenerator
operator|::
name|writeObjectsPart
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|)
block|{
if|if
condition|(
name|project
operator|->
name|values
argument_list|(
literal|"OBJECTS"
argument_list|)
operator|.
name|count
argument_list|()
operator|<
name|var
argument_list|(
literal|"QMAKE_LINK_OBJECT_MAX"
argument_list|)
operator|.
name|toInt
argument_list|()
condition|)
block|{
name|objectsLinkLine
operator|=
literal|"$(OBJECTS)"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"staticlib"
argument_list|)
operator|&&
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"lib"
condition|)
block|{
name|QString
name|ar_script_file
init|=
name|var
argument_list|(
literal|"QMAKE_LINK_OBJECT_SCRIPT"
argument_list|)
operator|+
literal|"."
operator|+
name|var
argument_list|(
literal|"TARGET"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|var
argument_list|(
literal|"BUILD_NAME"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ar_script_file
operator|+=
literal|"."
operator|+
name|var
argument_list|(
literal|"BUILD_NAME"
argument_list|)
expr_stmt|;
block|}
comment|// QMAKE_LIB is used for win32, including mingw, whereas QMAKE_AR is used on Unix.
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"rvct_linker"
argument_list|)
condition|)
block|{
name|createRvctObjectScriptFile
argument_list|(
name|ar_script_file
argument_list|,
name|project
operator|->
name|values
argument_list|(
literal|"OBJECTS"
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|ar_cmd
init|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LIB"
argument_list|)
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
if|if
condition|(
name|ar_cmd
operator|.
name|isEmpty
argument_list|()
condition|)
name|ar_cmd
operator|=
literal|"armar --create"
expr_stmt|;
name|objectsLinkLine
operator|=
name|ar_cmd
operator|+
literal|" "
operator|+
name|var
argument_list|(
literal|"DEST_TARGET"
argument_list|)
operator|+
literal|" --via "
operator|+
name|escapeFilePath
argument_list|(
name|ar_script_file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Strip off any options since the ar commands will be read from file.
name|QString
name|ar_cmd
init|=
name|var
argument_list|(
literal|"QMAKE_LIB"
argument_list|)
operator|.
name|section
argument_list|(
literal|" "
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
empty_stmt|;
if|if
condition|(
name|ar_cmd
operator|.
name|isEmpty
argument_list|()
condition|)
name|ar_cmd
operator|=
literal|"ar"
expr_stmt|;
name|createArObjectScriptFile
argument_list|(
name|ar_script_file
argument_list|,
name|var
argument_list|(
literal|"DEST_TARGET"
argument_list|)
argument_list|,
name|project
operator|->
name|values
argument_list|(
literal|"OBJECTS"
argument_list|)
argument_list|)
expr_stmt|;
name|objectsLinkLine
operator|=
name|ar_cmd
operator|+
literal|" -M< "
operator|+
name|escapeFilePath
argument_list|(
name|ar_script_file
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QString
name|ld_script_file
init|=
name|var
argument_list|(
literal|"QMAKE_LINK_OBJECT_SCRIPT"
argument_list|)
operator|+
literal|"."
operator|+
name|var
argument_list|(
literal|"TARGET"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|var
argument_list|(
literal|"BUILD_NAME"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ld_script_file
operator|+=
literal|"."
operator|+
name|var
argument_list|(
literal|"BUILD_NAME"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"rvct_linker"
argument_list|)
condition|)
block|{
name|createRvctObjectScriptFile
argument_list|(
name|ld_script_file
argument_list|,
name|project
operator|->
name|values
argument_list|(
literal|"OBJECTS"
argument_list|)
argument_list|)
expr_stmt|;
name|objectsLinkLine
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"--via "
argument_list|)
operator|+
name|escapeFilePath
argument_list|(
name|ld_script_file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|createLdObjectScriptFile
argument_list|(
name|ld_script_file
argument_list|,
name|project
operator|->
name|values
argument_list|(
literal|"OBJECTS"
argument_list|)
argument_list|)
expr_stmt|;
name|objectsLinkLine
operator|=
name|escapeFilePath
argument_list|(
name|ld_script_file
argument_list|)
expr_stmt|;
block|}
block|}
name|Win32MakefileGenerator
operator|::
name|writeObjectsPart
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeBuildRulesPart
name|void
name|MingwMakefileGenerator
operator|::
name|writeBuildRulesPart
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|)
block|{
if|if
condition|(
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"aux"
condition|)
block|{
name|t
operator|<<
literal|"first:"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"all:"
operator|<<
name|endl
expr_stmt|;
return|return;
block|}
name|t
operator|<<
literal|"first: all"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"all: "
operator|<<
name|escapeDependencyPath
argument_list|(
name|fileFixify
argument_list|(
name|Option
operator|::
name|output
operator|.
name|fileName
argument_list|()
argument_list|)
argument_list|)
operator|<<
literal|" "
operator|<<
name|valGlue
argument_list|(
name|escapeDependencyPaths
argument_list|(
name|project
operator|->
name|values
argument_list|(
literal|"ALL_DEPS"
argument_list|)
argument_list|)
argument_list|,
literal|" "
argument_list|,
literal|" "
argument_list|,
literal|" "
argument_list|)
operator|<<
literal|" $(DESTDIR_TARGET)"
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"$(DESTDIR_TARGET): "
operator|<<
name|var
argument_list|(
literal|"PRE_TARGETDEPS"
argument_list|)
operator|<<
literal|" $(OBJECTS) "
operator|<<
name|var
argument_list|(
literal|"POST_TARGETDEPS"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_PRE_LINK"
argument_list|)
condition|)
name|t
operator|<<
literal|"\n\t"
operator|<<
name|var
argument_list|(
literal|"QMAKE_PRE_LINK"
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"staticlib"
argument_list|)
operator|&&
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"lib"
condition|)
block|{
if|if
condition|(
name|project
operator|->
name|values
argument_list|(
literal|"OBJECTS"
argument_list|)
operator|.
name|count
argument_list|()
operator|<
name|var
argument_list|(
literal|"QMAKE_LINK_OBJECT_MAX"
argument_list|)
operator|.
name|toInt
argument_list|()
condition|)
block|{
name|t
operator|<<
literal|"\n\t"
operator|<<
literal|"$(LIB) $(DESTDIR_TARGET) "
operator|<<
name|objectsLinkLine
operator|<<
literal|" "
expr_stmt|;
block|}
else|else
block|{
name|t
operator|<<
literal|"\n\t"
operator|<<
name|objectsLinkLine
operator|<<
literal|" "
expr_stmt|;
block|}
block|}
else|else
block|{
name|t
operator|<<
literal|"\n\t"
operator|<<
literal|"$(LINK) $(LFLAGS) -o $(DESTDIR_TARGET) "
operator|<<
name|objectsLinkLine
operator|<<
literal|" "
operator|<<
literal|" $(LIBS)"
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_POST_LINK"
argument_list|)
condition|)
name|t
operator|<<
literal|"\n\t"
operator|<<
name|var
argument_list|(
literal|"QMAKE_POST_LINK"
argument_list|)
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeRcFilePart
name|void
name|MingwMakefileGenerator
operator|::
name|writeRcFilePart
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|)
block|{
specifier|const
name|QString
name|rc_file
init|=
name|fileFixify
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"RC_FILE"
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|incPathStr
init|=
name|fileInfo
argument_list|(
name|rc_file
argument_list|)
operator|.
name|path
argument_list|()
decl_stmt|;
if|if
condition|(
name|incPathStr
operator|!=
literal|"."
operator|&&
name|QDir
operator|::
name|isRelativePath
argument_list|(
name|incPathStr
argument_list|)
condition|)
name|incPathStr
operator|.
name|prepend
argument_list|(
literal|"./"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|rc_file
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|t
operator|<<
name|escapeDependencyPath
argument_list|(
name|var
argument_list|(
literal|"RES_FILE"
argument_list|)
argument_list|)
operator|<<
literal|": "
operator|<<
name|rc_file
operator|<<
literal|"\n\t"
operator|<<
name|var
argument_list|(
literal|"QMAKE_RC"
argument_list|)
operator|<<
literal|" -i "
operator|<<
name|rc_file
operator|<<
literal|" -o "
operator|<<
name|var
argument_list|(
literal|"RES_FILE"
argument_list|)
operator|<<
literal|" --include-dir="
operator|<<
name|incPathStr
operator|<<
literal|" $(DEFINES)"
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|processPrlVariable
name|void
name|MingwMakefileGenerator
operator|::
name|processPrlVariable
parameter_list|(
specifier|const
name|QString
modifier|&
name|var
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|l
parameter_list|)
block|{
if|if
condition|(
name|var
operator|==
literal|"QMAKE_PRL_LIBS"
condition|)
block|{
name|QString
name|where
init|=
literal|"QMAKE_LIBS"
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_INTERNAL_PRL_LIBS"
argument_list|)
condition|)
name|where
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_INTERNAL_PRL_LIBS"
argument_list|)
expr_stmt|;
name|QStringList
modifier|&
name|out
init|=
name|project
operator|->
name|values
argument_list|(
name|where
argument_list|)
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|it
init|=
name|l
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|l
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|out
operator|.
name|removeAll
argument_list|(
operator|(
operator|*
name|it
operator|)
argument_list|)
expr_stmt|;
name|out
operator|.
name|append
argument_list|(
operator|(
operator|*
name|it
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|Win32MakefileGenerator
operator|::
name|processPrlVariable
argument_list|(
name|var
argument_list|,
name|l
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|findDependencies
name|QStringList
modifier|&
name|MingwMakefileGenerator
operator|::
name|findDependencies
parameter_list|(
specifier|const
name|QString
modifier|&
name|file
parameter_list|)
block|{
name|QStringList
modifier|&
name|aList
init|=
name|MakefileGenerator
operator|::
name|findDependencies
argument_list|(
name|file
argument_list|)
decl_stmt|;
comment|// Note: The QMAKE_IMAGE_COLLECTION file have all images
comment|// as dependency, so don't add precompiled header then
if|if
condition|(
name|file
operator|==
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_IMAGE_COLLECTION"
argument_list|)
operator|||
name|preCompHeaderOut
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|aList
return|;
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|it
init|=
name|Option
operator|::
name|c_ext
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|Option
operator|::
name|c_ext
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
name|file
operator|.
name|endsWith
argument_list|(
operator|*
name|it
argument_list|)
condition|)
block|{
name|QString
name|cHeader
init|=
name|preCompHeaderOut
operator|+
name|Option
operator|::
name|dir_sep
operator|+
literal|"c"
decl_stmt|;
if|if
condition|(
operator|!
name|aList
operator|.
name|contains
argument_list|(
name|cHeader
argument_list|)
condition|)
name|aList
operator|+=
name|cHeader
expr_stmt|;
break|break;
block|}
block|}
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|it
init|=
name|Option
operator|::
name|cpp_ext
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|Option
operator|::
name|cpp_ext
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
name|file
operator|.
name|endsWith
argument_list|(
operator|*
name|it
argument_list|)
condition|)
block|{
name|QString
name|cppHeader
init|=
name|preCompHeaderOut
operator|+
name|Option
operator|::
name|dir_sep
operator|+
literal|"c++"
decl_stmt|;
if|if
condition|(
operator|!
name|aList
operator|.
name|contains
argument_list|(
name|cppHeader
argument_list|)
condition|)
name|aList
operator|+=
name|cppHeader
expr_stmt|;
break|break;
block|}
block|}
return|return
name|aList
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
