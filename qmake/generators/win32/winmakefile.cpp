begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the qmake application of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"winmakefile.h"
end_include
begin_include
include|#
directive|include
file|"option.h"
end_include
begin_include
include|#
directive|include
file|"project.h"
end_include
begin_include
include|#
directive|include
file|"meta.h"
end_include
begin_include
include|#
directive|include
file|<qtextstream.h>
end_include
begin_include
include|#
directive|include
file|<qstring.h>
end_include
begin_include
include|#
directive|include
file|<qhash.h>
end_include
begin_include
include|#
directive|include
file|<qregexp.h>
end_include
begin_include
include|#
directive|include
file|<qstringlist.h>
end_include
begin_include
include|#
directive|include
file|<qdir.h>
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|Win32MakefileGenerator
name|Win32MakefileGenerator
operator|::
name|Win32MakefileGenerator
parameter_list|()
member_init_list|:
name|MakefileGenerator
argument_list|()
block|{ }
end_constructor
begin_function
name|int
DECL|function|findHighestVersion
name|Win32MakefileGenerator
operator|::
name|findHighestVersion
parameter_list|(
specifier|const
name|QString
modifier|&
name|d
parameter_list|,
specifier|const
name|QString
modifier|&
name|stem
parameter_list|)
block|{
name|QString
name|bd
init|=
name|Option
operator|::
name|normalizePath
argument_list|(
name|d
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|exists
argument_list|(
name|bd
argument_list|)
condition|)
return|return
operator|-
literal|1
return|;
name|QMakeMetaInfo
name|libinfo
argument_list|(
name|project
argument_list|)
decl_stmt|;
name|bool
name|libInfoRead
init|=
name|libinfo
operator|.
name|readLib
argument_list|(
name|bd
operator|+
literal|'/'
operator|+
name|stem
argument_list|)
decl_stmt|;
comment|// If the library, for which we're trying to find the highest version
comment|// number, is a static library
if|if
condition|(
name|libInfoRead
operator|&&
name|libinfo
operator|.
name|values
argument_list|(
literal|"QMAKE_PRL_CONFIG"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"staticlib"
argument_list|)
condition|)
return|return
operator|-
literal|1
return|;
specifier|const
name|ProStringList
modifier|&
name|vover
init|=
name|project
operator|->
name|values
argument_list|(
name|ProKey
argument_list|(
literal|"QMAKE_"
operator|+
name|stem
operator|.
name|toUpper
argument_list|()
operator|+
literal|"_VERSION_OVERRIDE"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|vover
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|vover
operator|.
name|first
argument_list|()
operator|.
name|toInt
argument_list|()
return|;
name|int
name|biggest
init|=
operator|-
literal|1
decl_stmt|;
if|if
condition|(
name|libInfoRead
operator|&&
operator|!
name|libinfo
operator|.
name|values
argument_list|(
literal|"QMAKE_PRL_CONFIG"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"staticlib"
argument_list|)
operator|&&
operator|!
name|libinfo
operator|.
name|isEmpty
argument_list|(
literal|"QMAKE_PRL_VERSION"
argument_list|)
condition|)
name|biggest
operator|=
name|libinfo
operator|.
name|first
argument_list|(
literal|"QMAKE_PRL_VERSION"
argument_list|)
operator|.
name|toQString
argument_list|()
operator|.
name|replace
argument_list|(
literal|"."
argument_list|,
literal|""
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
return|return
name|biggest
return|;
block|}
end_function
begin_function
DECL|function|fixLibFlag
name|ProString
name|Win32MakefileGenerator
operator|::
name|fixLibFlag
parameter_list|(
specifier|const
name|ProString
modifier|&
name|lib
parameter_list|)
block|{
if|if
condition|(
name|lib
operator|.
name|startsWith
argument_list|(
literal|"/LIBPATH:"
argument_list|)
condition|)
return|return
name|QLatin1String
argument_list|(
literal|"/LIBPATH:"
argument_list|)
operator|+
name|escapeFilePath
argument_list|(
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|lib
operator|.
name|mid
argument_list|(
literal|9
argument_list|)
operator|.
name|toQString
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
return|;
comment|// This must be a fully resolved library path.
return|return
name|escapeFilePath
argument_list|(
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|lib
operator|.
name|toQString
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
name|bool
DECL|function|findLibraries
name|Win32MakefileGenerator
operator|::
name|findLibraries
parameter_list|(
name|bool
name|linkPrl
parameter_list|,
name|bool
name|mergeLflags
parameter_list|)
block|{
name|QList
argument_list|<
name|QMakeLocalFileName
argument_list|>
name|dirs
decl_stmt|;
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|lflags
index|[]
init|=
block|{
literal|"QMAKE_LIBS"
block|,
literal|"QMAKE_LIBS_PRIVATE"
block|,
literal|0
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|lflags
index|[
name|i
index|]
condition|;
name|i
operator|++
control|)
block|{
name|ProStringList
modifier|&
name|l
init|=
name|project
operator|->
name|values
argument_list|(
name|lflags
index|[
name|i
index|]
argument_list|)
decl_stmt|;
for|for
control|(
name|ProStringList
operator|::
name|Iterator
name|it
init|=
name|l
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|l
operator|.
name|end
argument_list|()
condition|;
control|)
block|{
name|QString
name|opt
init|=
operator|(
operator|*
name|it
operator|)
operator|.
name|toQString
argument_list|()
decl_stmt|;
if|if
condition|(
name|opt
operator|.
name|startsWith
argument_list|(
literal|"/LIBPATH:"
argument_list|)
condition|)
block|{
name|QString
name|libpath
init|=
name|opt
operator|.
name|mid
argument_list|(
literal|9
argument_list|)
decl_stmt|;
name|QMakeLocalFileName
name|lp
argument_list|(
name|libpath
argument_list|)
decl_stmt|;
if|if
condition|(
name|dirs
operator|.
name|contains
argument_list|(
name|lp
argument_list|)
condition|)
block|{
name|it
operator|=
name|l
operator|.
name|erase
argument_list|(
name|it
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|dirs
operator|.
name|append
argument_list|(
name|lp
argument_list|)
expr_stmt|;
operator|(
operator|*
name|it
operator|)
operator|=
literal|"/LIBPATH:"
operator|+
name|lp
operator|.
name|real
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|.
name|startsWith
argument_list|(
literal|"-L"
argument_list|)
operator|||
name|opt
operator|.
name|startsWith
argument_list|(
literal|"/L"
argument_list|)
condition|)
block|{
name|QString
name|libpath
init|=
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|opt
operator|.
name|mid
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|QMakeLocalFileName
name|lp
argument_list|(
name|libpath
argument_list|)
decl_stmt|;
if|if
condition|(
name|dirs
operator|.
name|contains
argument_list|(
name|lp
argument_list|)
condition|)
block|{
name|it
operator|=
name|l
operator|.
name|erase
argument_list|(
name|it
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|dirs
operator|.
name|append
argument_list|(
name|lp
argument_list|)
expr_stmt|;
operator|(
operator|*
name|it
operator|)
operator|=
literal|"/LIBPATH:"
operator|+
name|lp
operator|.
name|real
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|.
name|startsWith
argument_list|(
literal|"-l"
argument_list|)
operator|||
name|opt
operator|.
name|startsWith
argument_list|(
literal|"/l"
argument_list|)
condition|)
block|{
name|QString
name|lib
init|=
name|opt
operator|.
name|right
argument_list|(
name|opt
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
decl_stmt|,
name|out
decl_stmt|;
if|if
condition|(
operator|!
name|lib
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|QList
argument_list|<
name|QMakeLocalFileName
argument_list|>
operator|::
name|Iterator
name|it
init|=
name|dirs
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|dirs
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QString
name|extension
decl_stmt|;
name|int
name|ver
init|=
name|findHighestVersion
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|.
name|local
argument_list|()
argument_list|,
name|lib
argument_list|)
decl_stmt|;
if|if
condition|(
name|ver
operator|>
literal|0
condition|)
name|extension
operator|+=
name|QString
operator|::
name|number
argument_list|(
name|ver
argument_list|)
expr_stmt|;
name|extension
operator|+=
literal|".lib"
expr_stmt|;
name|QString
name|libBase
init|=
operator|(
operator|*
name|it
operator|)
operator|.
name|local
argument_list|()
operator|+
literal|'/'
operator|+
name|lib
decl_stmt|;
if|if
condition|(
operator|(
name|linkPrl
operator|&&
name|processPrlFile
argument_list|(
name|libBase
argument_list|)
operator|)
operator|||
name|exists
argument_list|(
name|libBase
operator|+
name|extension
argument_list|)
condition|)
block|{
name|out
operator|=
operator|(
operator|*
name|it
operator|)
operator|.
name|real
argument_list|()
operator|+
name|Option
operator|::
name|dir_sep
operator|+
name|lib
operator|+
name|extension
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|out
operator|.
name|isEmpty
argument_list|()
condition|)
name|out
operator|=
name|lib
operator|+
literal|".lib"
expr_stmt|;
operator|(
operator|*
name|it
operator|)
operator|=
name|out
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|linkPrl
operator|&&
operator|!
name|processPrlFile
argument_list|(
name|opt
argument_list|)
operator|&&
name|QDir
operator|::
name|isRelativePath
argument_list|(
name|opt
argument_list|)
condition|)
block|{
for|for
control|(
name|QList
argument_list|<
name|QMakeLocalFileName
argument_list|>
operator|::
name|Iterator
name|it
init|=
name|dirs
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|dirs
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QString
name|prl
init|=
operator|(
operator|*
name|it
operator|)
operator|.
name|local
argument_list|()
operator|+
literal|'/'
operator|+
name|opt
decl_stmt|;
if|if
condition|(
name|processPrlFile
argument_list|(
name|prl
argument_list|)
condition|)
break|break;
block|}
block|}
name|ProStringList
modifier|&
name|prl_libs
init|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_CURRENT_PRL_LIBS"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|prl
init|=
literal|0
init|;
name|prl
operator|<
name|prl_libs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|prl
control|)
name|it
operator|=
name|l
operator|.
name|insert
argument_list|(
operator|++
name|it
argument_list|,
name|prl_libs
operator|.
name|at
argument_list|(
name|prl
argument_list|)
argument_list|)
expr_stmt|;
name|prl_libs
operator|.
name|clear
argument_list|()
expr_stmt|;
operator|++
name|it
expr_stmt|;
block|}
if|if
condition|(
name|mergeLflags
condition|)
block|{
name|ProStringList
name|lopts
decl_stmt|;
for|for
control|(
name|int
name|lit
init|=
literal|0
init|;
name|lit
operator|<
name|l
operator|.
name|size
argument_list|()
condition|;
operator|++
name|lit
control|)
block|{
name|ProString
name|opt
init|=
name|l
operator|.
name|at
argument_list|(
name|lit
argument_list|)
decl_stmt|;
if|if
condition|(
name|opt
operator|.
name|startsWith
argument_list|(
literal|"/LIBPATH:"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|lopts
operator|.
name|contains
argument_list|(
name|opt
argument_list|)
condition|)
name|lopts
operator|.
name|append
argument_list|(
name|opt
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Make sure we keep the dependency order of libraries
name|lopts
operator|.
name|removeAll
argument_list|(
name|opt
argument_list|)
expr_stmt|;
name|lopts
operator|.
name|append
argument_list|(
name|opt
argument_list|)
expr_stmt|;
block|}
block|}
name|l
operator|=
name|lopts
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|processVars
name|void
name|Win32MakefileGenerator
operator|::
name|processVars
parameter_list|()
block|{
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_ORIG_TARGET"
argument_list|)
operator|=
name|project
operator|->
name|values
argument_list|(
literal|"TARGET"
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_PROJECT_NAME"
argument_list|)
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PROJECT_NAME"
argument_list|)
operator|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_ORIG_TARGET"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"vc"
argument_list|)
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"MAKEFILE"
argument_list|)
operator|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PROJECT_NAME"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_INCDIR"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"INCLUDEPATH"
argument_list|)
operator|+=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_INCDIR"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|values
argument_list|(
literal|"VERSION"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QStringList
name|l
init|=
name|project
operator|->
name|first
argument_list|(
literal|"VERSION"
argument_list|)
operator|.
name|toQString
argument_list|()
operator|.
name|split
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|l
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"VER_MAJ"
argument_list|)
operator|.
name|append
argument_list|(
name|l
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|l
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"VER_MIN"
argument_list|)
operator|.
name|append
argument_list|(
name|l
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
comment|// TARGET_VERSION_EXT will be used to add a version number onto the target name
if|if
condition|(
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"skip_target_version_ext"
argument_list|)
operator|&&
name|project
operator|->
name|values
argument_list|(
literal|"TARGET_VERSION_EXT"
argument_list|)
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|project
operator|->
name|values
argument_list|(
literal|"VER_MAJ"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"TARGET_VERSION_EXT"
argument_list|)
operator|.
name|append
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"VER_MAJ"
argument_list|)
argument_list|)
expr_stmt|;
name|fixTargetExt
argument_list|()
expr_stmt|;
name|processRcFileVar
argument_list|()
expr_stmt|;
name|ProString
name|libArg
init|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_L_FLAG"
argument_list|)
decl_stmt|;
name|ProStringList
name|libs
decl_stmt|;
name|ProStringList
modifier|&
name|libDir
init|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LIBDIR"
argument_list|)
decl_stmt|;
for|for
control|(
name|ProStringList
operator|::
name|Iterator
name|libDir_it
init|=
name|libDir
operator|.
name|begin
argument_list|()
init|;
name|libDir_it
operator|!=
name|libDir
operator|.
name|end
argument_list|()
condition|;
operator|++
name|libDir_it
control|)
block|{
name|QString
name|lib
init|=
operator|(
operator|*
name|libDir_it
operator|)
operator|.
name|toQString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|lib
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|lib
operator|.
name|endsWith
argument_list|(
literal|'\\'
argument_list|)
condition|)
name|lib
operator|.
name|chop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|libs
operator|<<
name|libArg
operator|+
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|lib
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LIBS"
argument_list|)
operator|+=
name|libs
operator|+
name|project
operator|->
name|values
argument_list|(
literal|"LIBS"
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LIBS_PRIVATE"
argument_list|)
operator|+=
name|project
operator|->
name|values
argument_list|(
literal|"LIBS_PRIVATE"
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|values
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"app"
argument_list|)
condition|)
block|{
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_CFLAGS"
argument_list|)
operator|+=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_CFLAGS_APP"
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_CXXFLAGS"
argument_list|)
operator|+=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_CXXFLAGS_APP"
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LFLAGS"
argument_list|)
operator|+=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LFLAGS_APP"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|project
operator|->
name|values
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"lib"
argument_list|)
operator|&&
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"dll"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"plugin"
argument_list|)
operator|||
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"plugin_no_share_shlib_cflags"
argument_list|)
condition|)
block|{
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_CFLAGS"
argument_list|)
operator|+=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_CFLAGS_SHLIB"
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_CXXFLAGS"
argument_list|)
operator|+=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_CXXFLAGS_SHLIB"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"plugin"
argument_list|)
condition|)
block|{
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_CFLAGS"
argument_list|)
operator|+=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_CFLAGS_PLUGIN"
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_CXXFLAGS"
argument_list|)
operator|+=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_CXXFLAGS_PLUGIN"
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LFLAGS"
argument_list|)
operator|+=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LFLAGS_PLUGIN"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LFLAGS"
argument_list|)
operator|+=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_LFLAGS_SHLIB"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|fixTargetExt
name|void
name|Win32MakefileGenerator
operator|::
name|fixTargetExt
parameter_list|()
block|{
if|if
condition|(
operator|!
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_APP_FLAG"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|project
operator|->
name|values
argument_list|(
literal|"TARGET_EXT"
argument_list|)
operator|.
name|append
argument_list|(
literal|".exe"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"shared"
argument_list|)
condition|)
block|{
name|project
operator|->
name|values
argument_list|(
literal|"LIB_TARGET"
argument_list|)
operator|.
name|prepend
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_PREFIX_STATICLIB"
argument_list|)
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"TARGET"
argument_list|)
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"TARGET_VERSION_EXT"
argument_list|)
operator|+
literal|'.'
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_EXTENSION_STATICLIB"
argument_list|)
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"TARGET_EXT"
argument_list|)
operator|.
name|append
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"TARGET_VERSION_EXT"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_EXTENSION_SHLIB"
argument_list|)
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"TARGET"
argument_list|)
operator|.
name|first
argument_list|()
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_PREFIX_SHLIB"
argument_list|)
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"TARGET"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|project
operator|->
name|values
argument_list|(
literal|"TARGET_EXT"
argument_list|)
operator|.
name|append
argument_list|(
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_EXTENSION_STATICLIB"
argument_list|)
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"TARGET"
argument_list|)
operator|.
name|first
argument_list|()
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_PREFIX_STATICLIB"
argument_list|)
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"TARGET"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|processRcFileVar
name|void
name|Win32MakefileGenerator
operator|::
name|processRcFileVar
parameter_list|()
block|{
if|if
condition|(
name|Option
operator|::
name|qmake_mode
operator|==
name|Option
operator|::
name|QMAKE_GENERATE_NOTHING
condition|)
return|return;
specifier|const
name|QString
name|manifestFile
init|=
name|getManifestFileForRcFile
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
operator|(
operator|!
name|project
operator|->
name|values
argument_list|(
literal|"VERSION"
argument_list|)
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|project
operator|->
name|values
argument_list|(
literal|"RC_ICONS"
argument_list|)
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|manifestFile
operator|.
name|isEmpty
argument_list|()
operator|)
operator|&&
name|project
operator|->
name|values
argument_list|(
literal|"RC_FILE"
argument_list|)
operator|.
name|isEmpty
argument_list|()
operator|&&
name|project
operator|->
name|values
argument_list|(
literal|"RES_FILE"
argument_list|)
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"no_generated_target_info"
argument_list|)
operator|&&
operator|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"shared"
argument_list|)
operator|||
operator|!
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_APP_FLAG"
argument_list|)
operator|.
name|isEmpty
argument_list|()
operator|)
operator|)
operator|||
operator|!
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_WRITE_DEFAULT_RC"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QByteArray
name|rcString
decl_stmt|;
name|QTextStream
name|ts
argument_list|(
operator|&
name|rcString
argument_list|,
name|QFile
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|QStringList
name|vers
init|=
name|project
operator|->
name|first
argument_list|(
literal|"VERSION"
argument_list|)
operator|.
name|toQString
argument_list|()
operator|.
name|split
argument_list|(
literal|"."
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|vers
operator|.
name|size
argument_list|()
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
name|vers
operator|+=
literal|"0"
expr_stmt|;
name|QString
name|versionString
init|=
name|vers
operator|.
name|join
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
name|QStringList
name|rcIcons
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|ProString
modifier|&
name|icon
decl|,
name|project
operator|->
name|values
argument_list|(
literal|"RC_ICONS"
argument_list|)
control|)
name|rcIcons
operator|.
name|append
argument_list|(
name|fileFixify
argument_list|(
name|icon
operator|.
name|toQString
argument_list|()
argument_list|,
name|FileFixifyAbsolute
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|companyName
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_TARGET_COMPANY"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
name|companyName
operator|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_TARGET_COMPANY"
argument_list|)
operator|.
name|join
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|QString
name|description
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_TARGET_DESCRIPTION"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
name|description
operator|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_TARGET_DESCRIPTION"
argument_list|)
operator|.
name|join
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|QString
name|copyright
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_TARGET_COPYRIGHT"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
name|copyright
operator|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_TARGET_COPYRIGHT"
argument_list|)
operator|.
name|join
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|QString
name|productName
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_TARGET_PRODUCT"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
name|productName
operator|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_TARGET_PRODUCT"
argument_list|)
operator|.
name|join
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
else|else
name|productName
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"TARGET"
argument_list|)
operator|.
name|toQString
argument_list|()
expr_stmt|;
name|QString
name|originalName
init|=
name|project
operator|->
name|first
argument_list|(
literal|"TARGET"
argument_list|)
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"TARGET_EXT"
argument_list|)
decl_stmt|;
name|int
name|rcLang
init|=
name|project
operator|->
name|intValue
argument_list|(
literal|"RC_LANG"
argument_list|,
literal|1033
argument_list|)
decl_stmt|;
comment|// default: English(USA)
name|int
name|rcCodePage
init|=
name|project
operator|->
name|intValue
argument_list|(
literal|"RC_CODEPAGE"
argument_list|,
literal|1200
argument_list|)
decl_stmt|;
comment|// default: Unicode
name|ts
operator|<<
literal|"# if defined(UNDER_CE)\n"
expr_stmt|;
name|ts
operator|<<
literal|"#  include<winbase.h>\n"
expr_stmt|;
name|ts
operator|<<
literal|"# else\n"
expr_stmt|;
name|ts
operator|<<
literal|"#  include<windows.h>\n"
expr_stmt|;
name|ts
operator|<<
literal|"# endif\n"
expr_stmt|;
name|ts
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|rcIcons
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rcIcons
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|ts
operator|<<
name|QString
argument_list|(
literal|"IDI_ICON%1\tICON\tDISCARDABLE\t%2"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|.
name|arg
argument_list|(
name|cQuoted
argument_list|(
name|rcIcons
index|[
name|i
index|]
argument_list|)
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|ts
operator|<<
name|endl
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|manifestFile
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QString
name|manifestResourceId
decl_stmt|;
if|if
condition|(
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"lib"
condition|)
name|manifestResourceId
operator|=
name|QStringLiteral
argument_list|(
literal|"ISOLATIONAWARE_MANIFEST_RESOURCE_ID"
argument_list|)
expr_stmt|;
else|else
name|manifestResourceId
operator|=
name|QStringLiteral
argument_list|(
literal|"CREATEPROCESS_MANIFEST_RESOURCE_ID"
argument_list|)
expr_stmt|;
name|ts
operator|<<
name|manifestResourceId
operator|<<
literal|" RT_MANIFEST \""
operator|<<
name|manifestFile
operator|<<
literal|"\"\n"
expr_stmt|;
block|}
name|ts
operator|<<
literal|"VS_VERSION_INFO VERSIONINFO\n"
expr_stmt|;
name|ts
operator|<<
literal|"\tFILEVERSION "
operator|<<
name|QString
argument_list|(
name|versionString
argument_list|)
operator|.
name|replace
argument_list|(
literal|"."
argument_list|,
literal|","
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|ts
operator|<<
literal|"\tPRODUCTVERSION "
operator|<<
name|QString
argument_list|(
name|versionString
argument_list|)
operator|.
name|replace
argument_list|(
literal|"."
argument_list|,
literal|","
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|ts
operator|<<
literal|"\tFILEFLAGSMASK 0x3fL\n"
expr_stmt|;
name|ts
operator|<<
literal|"#ifdef _DEBUG\n"
expr_stmt|;
name|ts
operator|<<
literal|"\tFILEFLAGS VS_FF_DEBUG\n"
expr_stmt|;
name|ts
operator|<<
literal|"#else\n"
expr_stmt|;
name|ts
operator|<<
literal|"\tFILEFLAGS 0x0L\n"
expr_stmt|;
name|ts
operator|<<
literal|"#endif\n"
expr_stmt|;
name|ts
operator|<<
literal|"\tFILEOS VOS__WINDOWS32\n"
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"shared"
argument_list|)
condition|)
name|ts
operator|<<
literal|"\tFILETYPE VFT_DLL\n"
expr_stmt|;
else|else
name|ts
operator|<<
literal|"\tFILETYPE VFT_APP\n"
expr_stmt|;
name|ts
operator|<<
literal|"\tFILESUBTYPE 0x0L\n"
expr_stmt|;
name|ts
operator|<<
literal|"\tBEGIN\n"
expr_stmt|;
name|ts
operator|<<
literal|"\t\tBLOCK \"StringFileInfo\"\n"
expr_stmt|;
name|ts
operator|<<
literal|"\t\tBEGIN\n"
expr_stmt|;
name|ts
operator|<<
literal|"\t\t\tBLOCK \""
operator|<<
name|QString
argument_list|(
literal|"%1%2"
argument_list|)
operator|.
name|arg
argument_list|(
name|rcLang
argument_list|,
literal|4
argument_list|,
literal|16
argument_list|,
name|QLatin1Char
argument_list|(
literal|'0'
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|rcCodePage
argument_list|,
literal|4
argument_list|,
literal|16
argument_list|,
name|QLatin1Char
argument_list|(
literal|'0'
argument_list|)
argument_list|)
operator|<<
literal|"\"\n"
expr_stmt|;
name|ts
operator|<<
literal|"\t\t\tBEGIN\n"
expr_stmt|;
name|ts
operator|<<
literal|"\t\t\t\tVALUE \"CompanyName\", \""
operator|<<
name|companyName
operator|<<
literal|"\\0\"\n"
expr_stmt|;
name|ts
operator|<<
literal|"\t\t\t\tVALUE \"FileDescription\", \""
operator|<<
name|description
operator|<<
literal|"\\0\"\n"
expr_stmt|;
name|ts
operator|<<
literal|"\t\t\t\tVALUE \"FileVersion\", \""
operator|<<
name|versionString
operator|<<
literal|"\\0\"\n"
expr_stmt|;
name|ts
operator|<<
literal|"\t\t\t\tVALUE \"LegalCopyright\", \""
operator|<<
name|copyright
operator|<<
literal|"\\0\"\n"
expr_stmt|;
name|ts
operator|<<
literal|"\t\t\t\tVALUE \"OriginalFilename\", \""
operator|<<
name|originalName
operator|<<
literal|"\\0\"\n"
expr_stmt|;
name|ts
operator|<<
literal|"\t\t\t\tVALUE \"ProductName\", \""
operator|<<
name|productName
operator|<<
literal|"\\0\"\n"
expr_stmt|;
name|ts
operator|<<
literal|"\t\t\t\tVALUE \"ProductVersion\", \""
operator|<<
name|versionString
operator|<<
literal|"\\0\"\n"
expr_stmt|;
name|ts
operator|<<
literal|"\t\t\tEND\n"
expr_stmt|;
name|ts
operator|<<
literal|"\t\tEND\n"
expr_stmt|;
name|ts
operator|<<
literal|"\t\tBLOCK \"VarFileInfo\"\n"
expr_stmt|;
name|ts
operator|<<
literal|"\t\tBEGIN\n"
expr_stmt|;
name|ts
operator|<<
literal|"\t\t\tVALUE \"Translation\", "
operator|<<
name|QString
argument_list|(
literal|"0x%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|rcLang
argument_list|,
literal|4
argument_list|,
literal|16
argument_list|,
name|QLatin1Char
argument_list|(
literal|'0'
argument_list|)
argument_list|)
operator|<<
literal|", "
operator|<<
name|QString
argument_list|(
literal|"%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|rcCodePage
argument_list|,
literal|4
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|ts
operator|<<
literal|"\t\tEND\n"
expr_stmt|;
name|ts
operator|<<
literal|"\tEND\n"
expr_stmt|;
name|ts
operator|<<
literal|"/* End of Version info */\n"
expr_stmt|;
name|ts
operator|<<
name|endl
expr_stmt|;
name|ts
operator|.
name|flush
argument_list|()
expr_stmt|;
name|QString
name|rcFilename
init|=
name|project
operator|->
name|first
argument_list|(
literal|"OUT_PWD"
argument_list|)
operator|+
literal|"/"
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"TARGET"
argument_list|)
operator|+
literal|"_resource"
operator|+
literal|".rc"
decl_stmt|;
name|QFile
name|rcFile
argument_list|(
name|QDir
operator|::
name|cleanPath
argument_list|(
name|rcFilename
argument_list|)
argument_list|)
decl_stmt|;
name|bool
name|writeRcFile
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|rcFile
operator|.
name|exists
argument_list|()
operator|&&
name|rcFile
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|writeRcFile
operator|=
name|rcFile
operator|.
name|readAll
argument_list|()
operator|!=
name|rcString
expr_stmt|;
name|rcFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|writeRcFile
condition|)
block|{
name|bool
name|ok
decl_stmt|;
name|ok
operator|=
name|rcFile
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ok
condition|)
block|{
comment|// The file can't be opened... try creating the containing
comment|// directory first (needed for clean shadow builds)
name|QDir
argument_list|()
operator|.
name|mkpath
argument_list|(
name|QFileInfo
argument_list|(
name|rcFile
argument_list|)
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
name|ok
operator|=
name|rcFile
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ok
condition|)
block|{
operator|::
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Cannot open for writing: %s"
argument_list|,
name|rcFile
operator|.
name|fileName
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
operator|::
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|rcFile
operator|.
name|write
argument_list|(
name|rcString
argument_list|)
expr_stmt|;
name|rcFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_WRITE_DEFAULT_RC"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"RC_FILE"
argument_list|)
operator|.
name|insert
argument_list|(
literal|0
argument_list|,
name|rcFile
operator|.
name|fileName
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|project
operator|->
name|values
argument_list|(
literal|"RC_FILE"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|project
operator|->
name|values
argument_list|(
literal|"RES_FILE"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Both rc and res file specified.\n"
argument_list|)
expr_stmt|;
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Please specify one of them, not both."
argument_list|)
expr_stmt|;
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|QString
name|resFile
init|=
name|project
operator|->
name|first
argument_list|(
literal|"RC_FILE"
argument_list|)
operator|.
name|toQString
argument_list|()
decl_stmt|;
comment|// if this is a shadow build then use the absolute path of the rc file
if|if
condition|(
name|Option
operator|::
name|output_dir
operator|!=
name|qmake_getpwd
argument_list|()
condition|)
block|{
name|QFileInfo
name|fi
argument_list|(
name|resFile
argument_list|)
decl_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"RC_FILE"
argument_list|)
operator|.
name|first
argument_list|()
operator|=
name|fi
operator|.
name|absoluteFilePath
argument_list|()
expr_stmt|;
block|}
name|resFile
operator|.
name|replace
argument_list|(
literal|".rc"
argument_list|,
name|Option
operator|::
name|res_ext
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"RES_FILE"
argument_list|)
operator|.
name|prepend
argument_list|(
name|fileInfo
argument_list|(
name|resFile
argument_list|)
operator|.
name|fileName
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|resDestDir
decl_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"staticlib"
argument_list|)
condition|)
name|resDestDir
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"DESTDIR"
argument_list|)
operator|.
name|toQString
argument_list|()
expr_stmt|;
else|else
name|resDestDir
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"OBJECTS_DIR"
argument_list|)
operator|.
name|toQString
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|resDestDir
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|resDestDir
operator|.
name|append
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"RES_FILE"
argument_list|)
operator|.
name|first
argument_list|()
operator|.
name|prepend
argument_list|(
name|resDestDir
argument_list|)
expr_stmt|;
block|}
name|project
operator|->
name|values
argument_list|(
literal|"RES_FILE"
argument_list|)
operator|.
name|first
argument_list|()
operator|=
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"RES_FILE"
argument_list|)
operator|.
name|toQString
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"POST_TARGETDEPS"
argument_list|)
operator|+=
name|project
operator|->
name|values
argument_list|(
literal|"RES_FILE"
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"CLEAN_FILES"
argument_list|)
operator|+=
name|project
operator|->
name|values
argument_list|(
literal|"RES_FILE"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|writeCleanParts
name|void
name|Win32MakefileGenerator
operator|::
name|writeCleanParts
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|)
block|{
name|t
operator|<<
literal|"clean: compiler_clean "
operator|<<
name|depVar
argument_list|(
literal|"CLEAN_DEPS"
argument_list|)
expr_stmt|;
block|{
specifier|const
name|char
modifier|*
name|clean_targets
index|[]
init|=
block|{
literal|"OBJECTS"
block|,
literal|"QMAKE_CLEAN"
block|,
literal|"CLEAN_FILES"
block|,
literal|0
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|clean_targets
index|[
name|i
index|]
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|ProStringList
modifier|&
name|list
init|=
name|project
operator|->
name|values
argument_list|(
name|clean_targets
index|[
name|i
index|]
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|del_statement
argument_list|(
literal|"-$(DEL_FILE)"
argument_list|)
decl_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"no_delete_multiple_files"
argument_list|)
condition|)
block|{
for|for
control|(
name|ProStringList
operator|::
name|ConstIterator
name|it
init|=
name|list
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|list
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
name|t
operator|<<
literal|"\n\t"
operator|<<
name|del_statement
operator|<<
literal|' '
operator|<<
name|escapeFilePath
argument_list|(
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|.
name|toQString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QString
name|files
decl_stmt|,
name|file
decl_stmt|;
specifier|const
name|int
name|commandlineLimit
init|=
literal|2047
decl_stmt|;
comment|// NT limit, expanded
for|for
control|(
name|ProStringList
operator|::
name|ConstIterator
name|it
init|=
name|list
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|list
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|file
operator|=
literal|' '
operator|+
name|escapeFilePath
argument_list|(
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|.
name|toQString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|del_statement
operator|.
name|length
argument_list|()
operator|+
name|files
operator|.
name|length
argument_list|()
operator|+
name|qMax
argument_list|(
name|fixEnvVariables
argument_list|(
name|file
argument_list|)
operator|.
name|length
argument_list|()
argument_list|,
name|file
operator|.
name|length
argument_list|()
argument_list|)
operator|>
name|commandlineLimit
condition|)
block|{
name|t
operator|<<
literal|"\n\t"
operator|<<
name|del_statement
operator|<<
name|files
expr_stmt|;
name|files
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|files
operator|+=
name|file
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|files
operator|.
name|isEmpty
argument_list|()
condition|)
name|t
operator|<<
literal|"\n\t"
operator|<<
name|del_statement
operator|<<
name|files
expr_stmt|;
block|}
block|}
block|}
name|t
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"distclean: clean "
operator|<<
name|depVar
argument_list|(
literal|"DISTCLEAN_DEPS"
argument_list|)
expr_stmt|;
block|{
specifier|const
name|char
modifier|*
name|clean_targets
index|[]
init|=
block|{
literal|"QMAKE_DISTCLEAN"
block|,
literal|0
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|clean_targets
index|[
name|i
index|]
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|ProStringList
modifier|&
name|list
init|=
name|project
operator|->
name|values
argument_list|(
name|clean_targets
index|[
name|i
index|]
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|del_statement
argument_list|(
literal|"-$(DEL_FILE)"
argument_list|)
decl_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"no_delete_multiple_files"
argument_list|)
condition|)
block|{
for|for
control|(
name|ProStringList
operator|::
name|ConstIterator
name|it
init|=
name|list
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|list
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
name|t
operator|<<
literal|"\n\t"
operator|<<
name|del_statement
operator|<<
literal|" "
operator|<<
name|escapeFilePath
argument_list|(
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|.
name|toQString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QString
name|files
decl_stmt|,
name|file
decl_stmt|;
specifier|const
name|int
name|commandlineLimit
init|=
literal|2047
decl_stmt|;
comment|// NT limit, expanded
for|for
control|(
name|ProStringList
operator|::
name|ConstIterator
name|it
init|=
name|list
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|list
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|file
operator|=
literal|" "
operator|+
name|escapeFilePath
argument_list|(
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|.
name|toQString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|del_statement
operator|.
name|length
argument_list|()
operator|+
name|files
operator|.
name|length
argument_list|()
operator|+
name|qMax
argument_list|(
name|fixEnvVariables
argument_list|(
name|file
argument_list|)
operator|.
name|length
argument_list|()
argument_list|,
name|file
operator|.
name|length
argument_list|()
argument_list|)
operator|>
name|commandlineLimit
condition|)
block|{
name|t
operator|<<
literal|"\n\t"
operator|<<
name|del_statement
operator|<<
name|files
expr_stmt|;
name|files
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|files
operator|+=
name|file
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|files
operator|.
name|isEmpty
argument_list|()
condition|)
name|t
operator|<<
literal|"\n\t"
operator|<<
name|del_statement
operator|<<
name|files
expr_stmt|;
block|}
block|}
block|}
name|t
operator|<<
literal|"\n\t-$(DEL_FILE) $(DESTDIR_TARGET)\n"
expr_stmt|;
block|{
name|QString
name|ofile
init|=
name|fileFixify
argument_list|(
name|Option
operator|::
name|output
operator|.
name|fileName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ofile
operator|.
name|isEmpty
argument_list|()
condition|)
name|t
operator|<<
literal|"\t-$(DEL_FILE) "
operator|<<
name|escapeFilePath
argument_list|(
name|ofile
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
name|t
operator|<<
name|endl
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeIncPart
name|void
name|Win32MakefileGenerator
operator|::
name|writeIncPart
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|)
block|{
name|t
operator|<<
literal|"INCPATH       = "
expr_stmt|;
specifier|const
name|ProStringList
modifier|&
name|incs
init|=
name|project
operator|->
name|values
argument_list|(
literal|"INCLUDEPATH"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|incs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|inc
init|=
name|incs
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toQString
argument_list|()
decl_stmt|;
name|inc
operator|.
name|replace
argument_list|(
name|QRegExp
argument_list|(
literal|"\\\\$"
argument_list|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|inc
operator|.
name|isEmpty
argument_list|()
condition|)
name|t
operator|<<
literal|"-I"
operator|<<
name|escapeFilePath
argument_list|(
name|inc
argument_list|)
operator|<<
literal|' '
expr_stmt|;
block|}
name|t
operator|<<
name|endl
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeStandardParts
name|void
name|Win32MakefileGenerator
operator|::
name|writeStandardParts
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|)
block|{
name|t
operator|<<
literal|"####### Compiler, tools and options\n\n"
expr_stmt|;
name|t
operator|<<
literal|"CC            = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_CC"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"CXX           = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_CXX"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"DEFINES       = "
operator|<<
name|varGlue
argument_list|(
literal|"PRL_EXPORT_DEFINES"
argument_list|,
literal|"-D"
argument_list|,
literal|" -D"
argument_list|,
literal|" "
argument_list|)
operator|<<
name|varGlue
argument_list|(
literal|"DEFINES"
argument_list|,
literal|"-D"
argument_list|,
literal|" -D"
argument_list|,
literal|""
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"CFLAGS        = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_CFLAGS"
argument_list|)
operator|<<
literal|" $(DEFINES)\n"
expr_stmt|;
name|t
operator|<<
literal|"CXXFLAGS      = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_CXXFLAGS"
argument_list|)
operator|<<
literal|" $(DEFINES)\n"
expr_stmt|;
name|writeIncPart
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|writeLibsPart
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"QMAKE         = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_QMAKE"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"IDC           = "
operator|<<
operator|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_IDC"
argument_list|)
condition|?
name|QString
argument_list|(
literal|"idc"
argument_list|)
else|:
name|var
argument_list|(
literal|"QMAKE_IDC"
argument_list|)
operator|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"IDL           = "
operator|<<
operator|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_IDL"
argument_list|)
condition|?
name|QString
argument_list|(
literal|"midl"
argument_list|)
else|:
name|var
argument_list|(
literal|"QMAKE_IDL"
argument_list|)
operator|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"ZIP           = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_ZIP"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"DEF_FILE      = "
operator|<<
name|fileVar
argument_list|(
literal|"DEF_FILE"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"RES_FILE      = "
operator|<<
name|fileVar
argument_list|(
literal|"RES_FILE"
argument_list|)
operator|<<
name|endl
expr_stmt|;
comment|// Not on mingw, can't see why not though...
name|t
operator|<<
literal|"COPY          = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_COPY"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"SED           = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_STREAM_EDITOR"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"COPY_FILE     = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_COPY_FILE"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"COPY_DIR      = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_COPY_DIR"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"DEL_FILE      = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_DEL_FILE"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"DEL_DIR       = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_DEL_DIR"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"MOVE          = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_MOVE"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"CHK_DIR_EXISTS= "
operator|<<
name|var
argument_list|(
literal|"QMAKE_CHK_DIR_EXISTS"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"MKDIR         = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_MKDIR"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"INSTALL_FILE    = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_INSTALL_FILE"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"INSTALL_PROGRAM = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_INSTALL_PROGRAM"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"INSTALL_DIR     = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_INSTALL_DIR"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"####### Output directory\n\n"
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|values
argument_list|(
literal|"OBJECTS_DIR"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
name|t
operator|<<
literal|"OBJECTS_DIR   = "
operator|<<
name|escapeFilePath
argument_list|(
name|var
argument_list|(
literal|"OBJECTS_DIR"
argument_list|)
operator|.
name|remove
argument_list|(
name|QRegExp
argument_list|(
literal|"\\\\$"
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|endl
expr_stmt|;
else|else
name|t
operator|<<
literal|"OBJECTS_DIR   = . \n"
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"####### Files\n\n"
expr_stmt|;
name|t
operator|<<
literal|"SOURCES       = "
operator|<<
name|valList
argument_list|(
name|escapeFilePaths
argument_list|(
name|project
operator|->
name|values
argument_list|(
literal|"SOURCES"
argument_list|)
argument_list|)
argument_list|)
operator|<<
literal|" "
operator|<<
name|valList
argument_list|(
name|escapeFilePaths
argument_list|(
name|project
operator|->
name|values
argument_list|(
literal|"GENERATED_SOURCES"
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|endl
expr_stmt|;
comment|// do this here so we can set DEST_TARGET to be the complete path to the final target if it is needed.
name|QString
name|orgDestDir
init|=
name|var
argument_list|(
literal|"DESTDIR"
argument_list|)
decl_stmt|;
name|QString
name|destDir
init|=
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|orgDestDir
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|destDir
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|(
name|orgDestDir
operator|.
name|endsWith
argument_list|(
literal|'/'
argument_list|)
operator|||
name|orgDestDir
operator|.
name|endsWith
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
operator|)
condition|)
name|destDir
operator|+=
name|Option
operator|::
name|dir_sep
expr_stmt|;
name|QString
name|target
init|=
name|QString
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"TARGET"
argument_list|)
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"TARGET_EXT"
argument_list|)
argument_list|)
decl_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"DEST_TARGET"
argument_list|)
operator|.
name|prepend
argument_list|(
name|destDir
operator|+
name|target
argument_list|)
expr_stmt|;
name|writeObjectsPart
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|writeExtraCompilerVariables
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|writeExtraVariables
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"DIST          = "
operator|<<
name|fileVarList
argument_list|(
literal|"DISTFILES"
argument_list|)
operator|<<
literal|' '
operator|<<
name|fileVarList
argument_list|(
literal|"HEADERS"
argument_list|)
operator|<<
literal|' '
operator|<<
name|fileVarList
argument_list|(
literal|"SOURCES"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"QMAKE_TARGET  = "
operator|<<
name|fileVar
argument_list|(
literal|"QMAKE_ORIG_TARGET"
argument_list|)
operator|<<
name|endl
expr_stmt|;
comment|// The comment is important to maintain variable compatibility with Unix
comment|// Makefiles, while not interpreting a trailing-slash as a linebreak
name|t
operator|<<
literal|"DESTDIR        = "
operator|<<
name|escapeFilePath
argument_list|(
name|destDir
argument_list|)
operator|<<
literal|" #avoid trailing-slash linebreak\n"
expr_stmt|;
name|t
operator|<<
literal|"TARGET         = "
operator|<<
name|escapeFilePath
argument_list|(
name|target
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"DESTDIR_TARGET = "
operator|<<
name|fileVar
argument_list|(
literal|"DEST_TARGET"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"####### Implicit rules\n\n"
expr_stmt|;
name|writeImplicitRulesPart
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"####### Build rules\n\n"
expr_stmt|;
name|writeBuildRulesPart
argument_list|(
name|t
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"shared"
argument_list|)
operator|&&
operator|!
name|project
operator|->
name|values
argument_list|(
literal|"DLLDESTDIR"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|const
name|ProStringList
modifier|&
name|dlldirs
init|=
name|project
operator|->
name|values
argument_list|(
literal|"DLLDESTDIR"
argument_list|)
decl_stmt|;
for|for
control|(
name|ProStringList
operator|::
name|ConstIterator
name|dlldir
init|=
name|dlldirs
operator|.
name|begin
argument_list|()
init|;
name|dlldir
operator|!=
name|dlldirs
operator|.
name|end
argument_list|()
condition|;
operator|++
name|dlldir
control|)
block|{
name|t
operator|<<
literal|"\t-$(COPY_FILE) $(DESTDIR_TARGET) "
operator|<<
name|escapeFilePath
argument_list|(
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
operator|(
operator|*
name|dlldir
operator|)
operator|.
name|toQString
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
block|}
name|t
operator|<<
name|endl
expr_stmt|;
name|writeRcFilePart
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|writeMakeQmake
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|QStringList
name|dist_files
init|=
name|fileFixify
argument_list|(
name|Option
operator|::
name|mkfile
operator|::
name|project_files
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_INTERNAL_INCLUDED_FILES"
argument_list|)
condition|)
name|dist_files
operator|+=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_INTERNAL_INCLUDED_FILES"
argument_list|)
operator|.
name|toQStringList
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"TRANSLATIONS"
argument_list|)
condition|)
name|dist_files
operator|<<
name|var
argument_list|(
literal|"TRANSLATIONS"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"FORMS"
argument_list|)
condition|)
block|{
specifier|const
name|ProStringList
modifier|&
name|forms
init|=
name|project
operator|->
name|values
argument_list|(
literal|"FORMS"
argument_list|)
decl_stmt|;
for|for
control|(
name|ProStringList
operator|::
name|ConstIterator
name|formit
init|=
name|forms
operator|.
name|begin
argument_list|()
init|;
name|formit
operator|!=
name|forms
operator|.
name|end
argument_list|()
condition|;
operator|++
name|formit
control|)
block|{
name|QString
name|ui_h
init|=
name|fileFixify
argument_list|(
operator|(
operator|*
name|formit
operator|)
operator|+
name|Option
operator|::
name|h_ext
operator|.
name|first
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|exists
argument_list|(
name|ui_h
argument_list|)
condition|)
name|dist_files
operator|<<
name|ui_h
expr_stmt|;
block|}
block|}
name|t
operator|<<
literal|"dist:\n\t"
operator|<<
literal|"$(ZIP) "
operator|<<
name|var
argument_list|(
literal|"QMAKE_ORIG_TARGET"
argument_list|)
operator|<<
literal|".zip $(SOURCES) $(DIST) "
operator|<<
name|escapeFilePaths
argument_list|(
name|dist_files
argument_list|)
operator|.
name|join
argument_list|(
literal|' '
argument_list|)
operator|<<
literal|' '
operator|<<
name|fileVar
argument_list|(
literal|"TRANSLATIONS"
argument_list|)
operator|<<
literal|' '
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_EXTRA_COMPILERS"
argument_list|)
condition|)
block|{
specifier|const
name|ProStringList
modifier|&
name|quc
init|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_EXTRA_COMPILERS"
argument_list|)
decl_stmt|;
for|for
control|(
name|ProStringList
operator|::
name|ConstIterator
name|it
init|=
name|quc
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|quc
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
specifier|const
name|ProStringList
modifier|&
name|inputs
init|=
name|project
operator|->
name|values
argument_list|(
name|ProKey
argument_list|(
operator|*
name|it
operator|+
literal|".input"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|ProStringList
operator|::
name|ConstIterator
name|input
init|=
name|inputs
operator|.
name|begin
argument_list|()
init|;
name|input
operator|!=
name|inputs
operator|.
name|end
argument_list|()
condition|;
operator|++
name|input
control|)
name|t
operator|<<
name|escapeFilePath
argument_list|(
operator|*
name|input
argument_list|)
operator|<<
literal|' '
expr_stmt|;
block|}
block|}
name|t
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|writeCleanParts
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|writeExtraTargets
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|writeExtraCompilerTargets
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|t
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeLibsPart
name|void
name|Win32MakefileGenerator
operator|::
name|writeLibsPart
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|)
block|{
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"staticlib"
argument_list|)
operator|&&
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"lib"
condition|)
block|{
name|t
operator|<<
literal|"LIBAPP        = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_LIB"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"LIBFLAGS      = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_LIBFLAGS"
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
else|else
block|{
name|t
operator|<<
literal|"LINKER        = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_LINK"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"LFLAGS        = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_LFLAGS"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"LIBS          = "
operator|<<
name|fixLibFlags
argument_list|(
literal|"QMAKE_LIBS"
argument_list|)
operator|.
name|join
argument_list|(
literal|' '
argument_list|)
operator|<<
literal|' '
operator|<<
name|fixLibFlags
argument_list|(
literal|"QMAKE_LIBS_PRIVATE"
argument_list|)
operator|.
name|join
argument_list|(
literal|' '
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|writeObjectsPart
name|void
name|Win32MakefileGenerator
operator|::
name|writeObjectsPart
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|)
block|{
comment|// Used in both deps and commands.
name|t
operator|<<
literal|"OBJECTS       = "
operator|<<
name|valList
argument_list|(
name|escapeDependencyPaths
argument_list|(
name|project
operator|->
name|values
argument_list|(
literal|"OBJECTS"
argument_list|)
argument_list|)
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeImplicitRulesPart
name|void
name|Win32MakefileGenerator
operator|::
name|writeImplicitRulesPart
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|)
block|{
name|t
operator|<<
literal|".SUFFIXES:"
expr_stmt|;
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|cppit
init|=
name|Option
operator|::
name|cpp_ext
operator|.
name|begin
argument_list|()
init|;
name|cppit
operator|!=
name|Option
operator|::
name|cpp_ext
operator|.
name|end
argument_list|()
condition|;
operator|++
name|cppit
control|)
name|t
operator|<<
literal|" "
operator|<<
operator|(
operator|*
name|cppit
operator|)
expr_stmt|;
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|cit
init|=
name|Option
operator|::
name|c_ext
operator|.
name|begin
argument_list|()
init|;
name|cit
operator|!=
name|Option
operator|::
name|c_ext
operator|.
name|end
argument_list|()
condition|;
operator|++
name|cit
control|)
name|t
operator|<<
literal|" "
operator|<<
operator|(
operator|*
name|cit
operator|)
expr_stmt|;
name|t
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|cppit
init|=
name|Option
operator|::
name|cpp_ext
operator|.
name|begin
argument_list|()
init|;
name|cppit
operator|!=
name|Option
operator|::
name|cpp_ext
operator|.
name|end
argument_list|()
condition|;
operator|++
name|cppit
control|)
name|t
operator|<<
operator|(
operator|*
name|cppit
operator|)
operator|<<
name|Option
operator|::
name|obj_ext
operator|<<
literal|":\n\t"
operator|<<
name|var
argument_list|(
literal|"QMAKE_RUN_CXX_IMP"
argument_list|)
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|cit
init|=
name|Option
operator|::
name|c_ext
operator|.
name|begin
argument_list|()
init|;
name|cit
operator|!=
name|Option
operator|::
name|c_ext
operator|.
name|end
argument_list|()
condition|;
operator|++
name|cit
control|)
name|t
operator|<<
operator|(
operator|*
name|cit
operator|)
operator|<<
name|Option
operator|::
name|obj_ext
operator|<<
literal|":\n\t"
operator|<<
name|var
argument_list|(
literal|"QMAKE_RUN_CC_IMP"
argument_list|)
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeBuildRulesPart
name|void
name|Win32MakefileGenerator
operator|::
name|writeBuildRulesPart
parameter_list|(
name|QTextStream
modifier|&
parameter_list|)
block|{ }
end_function
begin_function
DECL|function|writeRcFilePart
name|void
name|Win32MakefileGenerator
operator|::
name|writeRcFilePart
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|)
block|{
if|if
condition|(
operator|!
name|project
operator|->
name|values
argument_list|(
literal|"RC_FILE"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|const
name|ProString
name|res_file
init|=
name|project
operator|->
name|first
argument_list|(
literal|"RES_FILE"
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|rc_file
init|=
name|fileFixify
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"RC_FILE"
argument_list|)
operator|.
name|toQString
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|ProStringList
name|rcIncPaths
init|=
name|project
operator|->
name|values
argument_list|(
literal|"RC_INCLUDEPATH"
argument_list|)
decl_stmt|;
name|QString
name|incPathStr
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|rcIncPaths
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|ProString
modifier|&
name|path
init|=
name|rcIncPaths
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|incPathStr
operator|+=
name|QStringLiteral
argument_list|(
literal|" /i "
argument_list|)
expr_stmt|;
name|incPathStr
operator|+=
name|escapeFilePath
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
comment|// The resource tool may use defines. This might be the same defines passed in as the
comment|// compiler, since you may use these defines in the .rc file itself.
comment|// As the escape syntax for the command line defines for RC is different from that for CL,
comment|// we might have to set specific defines for RC.
name|ProString
name|defines
init|=
name|varGlue
argument_list|(
literal|"RC_DEFINES"
argument_list|,
literal|" -D"
argument_list|,
literal|" -D"
argument_list|,
literal|""
argument_list|)
decl_stmt|;
if|if
condition|(
name|defines
operator|.
name|isEmpty
argument_list|()
condition|)
name|defines
operator|=
name|ProString
argument_list|(
literal|" $(DEFINES)"
argument_list|)
expr_stmt|;
comment|// Also, we need to add the _DEBUG define manually since the compiler defines this symbol
comment|// by itself, and we use it in the automatically created rc file when VERSION is defined
comment|// in the .pro file.
name|t
operator|<<
name|escapeDependencyPath
argument_list|(
name|res_file
argument_list|)
operator|<<
literal|": "
operator|<<
name|escapeDependencyPath
argument_list|(
name|rc_file
argument_list|)
operator|<<
literal|"\n\t"
operator|<<
name|var
argument_list|(
literal|"QMAKE_RC"
argument_list|)
operator|<<
operator|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"debug"
argument_list|)
condition|?
literal|" -D_DEBUG"
else|:
literal|""
operator|)
operator|<<
name|defines
operator|<<
name|incPathStr
operator|<<
literal|" -fo "
operator|<<
name|escapeFilePath
argument_list|(
name|res_file
argument_list|)
operator|<<
literal|' '
operator|<<
name|escapeFilePath
argument_list|(
name|rc_file
argument_list|)
expr_stmt|;
name|t
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|defaultInstall
name|QString
name|Win32MakefileGenerator
operator|::
name|defaultInstall
parameter_list|(
specifier|const
name|QString
modifier|&
name|t
parameter_list|)
block|{
if|if
condition|(
operator|(
name|t
operator|!=
literal|"target"
operator|&&
name|t
operator|!=
literal|"dlltarget"
operator|)
operator|||
operator|(
name|t
operator|==
literal|"dlltarget"
operator|&&
operator|(
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|!=
literal|"lib"
operator|||
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"shared"
argument_list|)
operator|)
operator|)
operator|||
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"subdirs"
operator|||
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"aux"
condition|)
return|return
name|QString
argument_list|()
return|;
specifier|const
name|QString
name|root
init|=
literal|"$(INSTALL_ROOT)"
decl_stmt|;
name|ProStringList
modifier|&
name|uninst
init|=
name|project
operator|->
name|values
argument_list|(
name|ProKey
argument_list|(
name|t
operator|+
literal|".uninstall"
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|ret
decl_stmt|;
name|QString
name|targetdir
init|=
name|fileFixify
argument_list|(
name|project
operator|->
name|first
argument_list|(
name|ProKey
argument_list|(
name|t
operator|+
literal|".path"
argument_list|)
argument_list|)
operator|.
name|toQString
argument_list|()
argument_list|,
name|FileFixifyAbsolute
argument_list|)
decl_stmt|;
if|if
condition|(
name|targetdir
operator|.
name|right
argument_list|(
literal|1
argument_list|)
operator|!=
name|Option
operator|::
name|dir_sep
condition|)
name|targetdir
operator|+=
name|Option
operator|::
name|dir_sep
expr_stmt|;
if|if
condition|(
name|t
operator|==
literal|"target"
operator|&&
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"lib"
condition|)
block|{
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"create_prl"
argument_list|)
operator|&&
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"no_install_prl"
argument_list|)
operator|&&
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_INTERNAL_PRL_FILE"
argument_list|)
condition|)
block|{
name|QString
name|dst_prl
init|=
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_INTERNAL_PRL_FILE"
argument_list|)
operator|.
name|toQString
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|slsh
init|=
name|dst_prl
operator|.
name|lastIndexOf
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
decl_stmt|;
if|if
condition|(
name|slsh
operator|!=
operator|-
literal|1
condition|)
name|dst_prl
operator|=
name|dst_prl
operator|.
name|right
argument_list|(
name|dst_prl
operator|.
name|length
argument_list|()
operator|-
name|slsh
operator|-
literal|1
argument_list|)
expr_stmt|;
name|dst_prl
operator|=
name|filePrefixRoot
argument_list|(
name|root
argument_list|,
name|targetdir
operator|+
name|dst_prl
argument_list|)
expr_stmt|;
name|ret
operator|+=
name|installMetaFile
argument_list|(
name|ProKey
argument_list|(
literal|"QMAKE_PRL_INSTALL_REPLACE"
argument_list|)
argument_list|,
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_INTERNAL_PRL_FILE"
argument_list|)
operator|.
name|toQString
argument_list|()
argument_list|,
name|dst_prl
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|uninst
operator|.
name|isEmpty
argument_list|()
condition|)
name|uninst
operator|.
name|append
argument_list|(
literal|"\n\t"
argument_list|)
expr_stmt|;
name|uninst
operator|.
name|append
argument_list|(
literal|"-$(DEL_FILE) "
operator|+
name|escapeFilePath
argument_list|(
name|dst_prl
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"create_pc"
argument_list|)
condition|)
block|{
name|QString
name|dst_pc
init|=
name|pkgConfigFileName
argument_list|(
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dst_pc
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|dst_pc
operator|=
name|filePrefixRoot
argument_list|(
name|root
argument_list|,
name|targetdir
operator|+
name|dst_pc
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|dst_pc_dir
init|=
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|fileInfo
argument_list|(
name|dst_pc
argument_list|)
operator|.
name|path
argument_list|()
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dst_pc_dir
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|ret
operator|.
name|isEmpty
argument_list|()
condition|)
name|ret
operator|+=
literal|"\n\t"
expr_stmt|;
name|ret
operator|+=
name|mkdir_p_asstring
argument_list|(
name|dst_pc_dir
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|ret
operator|.
name|isEmpty
argument_list|()
condition|)
name|ret
operator|+=
literal|"\n\t"
expr_stmt|;
name|ret
operator|+=
name|installMetaFile
argument_list|(
name|ProKey
argument_list|(
literal|"QMAKE_PKGCONFIG_INSTALL_REPLACE"
argument_list|)
argument_list|,
name|pkgConfigFileName
argument_list|(
literal|true
argument_list|)
argument_list|,
name|dst_pc
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|uninst
operator|.
name|isEmpty
argument_list|()
condition|)
name|uninst
operator|.
name|append
argument_list|(
literal|"\n\t"
argument_list|)
expr_stmt|;
name|uninst
operator|.
name|append
argument_list|(
literal|"-$(DEL_FILE) "
operator|+
name|escapeFilePath
argument_list|(
name|dst_pc
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"shared"
argument_list|)
operator|&&
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"plugin"
argument_list|)
condition|)
block|{
name|ProString
name|lib_target
init|=
name|project
operator|->
name|first
argument_list|(
literal|"LIB_TARGET"
argument_list|)
decl_stmt|;
name|QString
name|src_targ
init|=
name|escapeFilePath
argument_list|(
operator|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"DESTDIR"
argument_list|)
condition|?
name|QString
argument_list|(
literal|"$(DESTDIR)"
argument_list|)
else|:
name|project
operator|->
name|first
argument_list|(
literal|"DESTDIR"
argument_list|)
operator|)
operator|+
name|lib_target
argument_list|)
decl_stmt|;
name|QString
name|dst_targ
init|=
name|escapeFilePath
argument_list|(
name|filePrefixRoot
argument_list|(
name|root
argument_list|,
name|fileFixify
argument_list|(
name|targetdir
operator|+
name|lib_target
argument_list|,
name|FileFixifyAbsolute
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ret
operator|.
name|isEmpty
argument_list|()
condition|)
name|ret
operator|+=
literal|"\n\t"
expr_stmt|;
name|ret
operator|+=
name|QString
argument_list|(
literal|"-$(INSTALL_FILE) "
argument_list|)
operator|+
name|src_targ
operator|+
literal|' '
operator|+
name|dst_targ
expr_stmt|;
if|if
condition|(
operator|!
name|uninst
operator|.
name|isEmpty
argument_list|()
condition|)
name|uninst
operator|.
name|append
argument_list|(
literal|"\n\t"
argument_list|)
expr_stmt|;
name|uninst
operator|.
name|append
argument_list|(
literal|"-$(DEL_FILE) "
operator|+
name|dst_targ
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|t
operator|==
literal|"dlltarget"
operator|||
name|project
operator|->
name|values
argument_list|(
name|ProKey
argument_list|(
name|t
operator|+
literal|".CONFIG"
argument_list|)
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|"no_dll"
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|QString
name|src_targ
init|=
literal|"$(DESTDIR_TARGET)"
decl_stmt|;
name|QString
name|dst_targ
init|=
name|escapeFilePath
argument_list|(
name|filePrefixRoot
argument_list|(
name|root
argument_list|,
name|fileFixify
argument_list|(
name|targetdir
operator|+
literal|"$(TARGET)"
argument_list|,
name|FileFixifyAbsolute
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ret
operator|.
name|isEmpty
argument_list|()
condition|)
name|ret
operator|+=
literal|"\n\t"
expr_stmt|;
name|ret
operator|+=
name|QString
argument_list|(
literal|"-$(INSTALL_FILE) "
argument_list|)
operator|+
name|src_targ
operator|+
literal|' '
operator|+
name|dst_targ
expr_stmt|;
if|if
condition|(
operator|!
name|uninst
operator|.
name|isEmpty
argument_list|()
condition|)
name|uninst
operator|.
name|append
argument_list|(
literal|"\n\t"
argument_list|)
expr_stmt|;
name|uninst
operator|.
name|append
argument_list|(
literal|"-$(DEL_FILE) "
operator|+
name|dst_targ
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|escapeFilePath
name|QString
name|Win32MakefileGenerator
operator|::
name|escapeFilePath
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|)
specifier|const
block|{
name|QString
name|ret
init|=
name|path
decl_stmt|;
if|if
condition|(
operator|!
name|ret
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|ret
operator|.
name|contains
argument_list|(
literal|' '
argument_list|)
operator|||
name|ret
operator|.
name|contains
argument_list|(
literal|'\t'
argument_list|)
condition|)
name|ret
operator|=
literal|"\""
operator|+
name|ret
operator|+
literal|"\""
expr_stmt|;
name|debug_msg
argument_list|(
literal|2
argument_list|,
literal|"EscapeFilePath: %s -> %s"
argument_list|,
name|path
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|ret
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|cQuoted
name|QString
name|Win32MakefileGenerator
operator|::
name|cQuoted
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|)
block|{
name|QString
name|ret
init|=
name|str
decl_stmt|;
name|ret
operator|.
name|replace
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\\'
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"\\\\"
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|replace
argument_list|(
name|QLatin1Char
argument_list|(
literal|'"'
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"\\\""
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|prepend
argument_list|(
name|QLatin1Char
argument_list|(
literal|'"'
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'"'
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|getManifestFileForRcFile
name|QString
name|Win32MakefileGenerator
operator|::
name|getManifestFileForRcFile
parameter_list|()
specifier|const
block|{
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
