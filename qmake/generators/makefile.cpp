begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the qmake application of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"makefile.h"
end_include
begin_include
include|#
directive|include
file|"option.h"
end_include
begin_include
include|#
directive|include
file|"cachekeys.h"
end_include
begin_include
include|#
directive|include
file|"meta.h"
end_include
begin_include
include|#
directive|include
file|<qdir.h>
end_include
begin_include
include|#
directive|include
file|<qfile.h>
end_include
begin_include
include|#
directive|include
file|<qtextstream.h>
end_include
begin_include
include|#
directive|include
file|<qregexp.h>
end_include
begin_include
include|#
directive|include
file|<qhash.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qbuffer.h>
end_include
begin_include
include|#
directive|include
file|<qsettings.h>
end_include
begin_include
include|#
directive|include
file|<qdatetime.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
end_if
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_else
else|#
directive|else
end_else
begin_include
include|#
directive|include
file|<io.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|<time.h>
end_include
begin_include
include|#
directive|include
file|<fcntl.h>
end_include
begin_include
include|#
directive|include
file|<sys/types.h>
end_include
begin_include
include|#
directive|include
file|<sys/stat.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
comment|// Well, Windows doesn't have this, so here's the macro
ifndef|#
directive|ifndef
name|S_ISDIR
DECL|macro|S_ISDIR
define|#
directive|define
name|S_ISDIR
parameter_list|(
name|m
parameter_list|)
value|(((m)& S_IFMT) == S_IFDIR)
endif|#
directive|endif
DECL|function|canExecute
name|bool
name|MakefileGenerator
operator|::
name|canExecute
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|cmdline
parameter_list|,
name|int
modifier|*
name|a
parameter_list|)
specifier|const
block|{
name|int
name|argv0
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cmdline
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|cmdline
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|contains
argument_list|(
literal|'='
argument_list|)
condition|)
block|{
name|argv0
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|a
condition|)
operator|*
name|a
operator|=
name|argv0
expr_stmt|;
if|if
condition|(
name|argv0
operator|!=
operator|-
literal|1
condition|)
block|{
specifier|const
name|QString
name|c
init|=
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|cmdline
operator|.
name|at
argument_list|(
name|argv0
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|exists
argument_list|(
name|c
argument_list|)
condition|)
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|mkdir_p_asstring
name|QString
name|MakefileGenerator
operator|::
name|mkdir_p_asstring
parameter_list|(
specifier|const
name|QString
modifier|&
name|dir
parameter_list|,
name|bool
name|escape
parameter_list|)
specifier|const
block|{
name|QString
name|ret
init|=
literal|"@"
operator|+
name|chkdir
operator|+
literal|" "
decl_stmt|;
if|if
condition|(
name|escape
condition|)
name|ret
operator|+=
name|escapeFilePath
argument_list|(
name|dir
argument_list|)
expr_stmt|;
else|else
name|ret
operator|+=
name|dir
expr_stmt|;
name|ret
operator|+=
literal|" "
operator|+
name|chkglue
operator|+
literal|"$(MKDIR) "
expr_stmt|;
if|if
condition|(
name|escape
condition|)
name|ret
operator|+=
name|escapeFilePath
argument_list|(
name|dir
argument_list|)
expr_stmt|;
else|else
name|ret
operator|+=
name|dir
expr_stmt|;
name|ret
operator|+=
literal|" "
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|mkdir
name|bool
name|MakefileGenerator
operator|::
name|mkdir
parameter_list|(
specifier|const
name|QString
modifier|&
name|in_path
parameter_list|)
specifier|const
block|{
name|QString
name|path
init|=
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|in_path
argument_list|)
decl_stmt|;
if|if
condition|(
name|QFile
operator|::
name|exists
argument_list|(
name|path
argument_list|)
condition|)
return|return
literal|true
return|;
name|QDir
name|d
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
name|QDir
operator|::
name|separator
argument_list|()
argument_list|)
condition|)
block|{
name|d
operator|.
name|cd
argument_list|(
name|QString
argument_list|(
name|QDir
operator|::
name|separator
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|path
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|bool
name|ret
init|=
literal|true
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|bool
name|driveExists
init|=
literal|true
decl_stmt|;
if|if
condition|(
operator|!
name|QDir
operator|::
name|isRelativePath
argument_list|(
name|path
argument_list|)
condition|)
block|{
if|if
condition|(
name|QFile
operator|::
name|exists
argument_list|(
name|path
operator|.
name|left
argument_list|(
literal|3
argument_list|)
argument_list|)
condition|)
block|{
name|d
operator|.
name|cd
argument_list|(
name|path
operator|.
name|left
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|path
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|warn_msg
argument_list|(
name|WarnLogic
argument_list|,
literal|"Cannot access drive '%s' (%s)"
argument_list|,
name|path
operator|.
name|left
argument_list|(
literal|3
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
name|path
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|driveExists
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|driveExists
condition|)
endif|#
directive|endif
block|{
name|QStringList
name|subs
init|=
name|path
operator|.
name|split
argument_list|(
name|QDir
operator|::
name|separator
argument_list|()
argument_list|)
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|subit
init|=
name|subs
operator|.
name|begin
argument_list|()
init|;
name|subit
operator|!=
name|subs
operator|.
name|end
argument_list|()
condition|;
operator|++
name|subit
control|)
block|{
if|if
condition|(
operator|!
name|d
operator|.
name|cd
argument_list|(
operator|*
name|subit
argument_list|)
condition|)
block|{
name|d
operator|.
name|mkdir
argument_list|(
operator|(
operator|*
name|subit
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|d
operator|.
name|exists
argument_list|(
operator|(
operator|*
name|subit
operator|)
argument_list|)
condition|)
block|{
name|d
operator|.
name|cd
argument_list|(
operator|(
operator|*
name|subit
operator|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
end_function
begin_comment
comment|// ** base makefile generator
end_comment
begin_constructor
DECL|function|MakefileGenerator
name|MakefileGenerator
operator|::
name|MakefileGenerator
parameter_list|()
member_init_list|:
name|init_opath_already
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|init_already
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|no_io
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|project
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_function
name|void
DECL|function|verifyCompilers
name|MakefileGenerator
operator|::
name|verifyCompilers
parameter_list|()
block|{
name|QHash
argument_list|<
name|QString
argument_list|,
name|QStringList
argument_list|>
modifier|&
name|v
init|=
name|project
operator|->
name|variables
argument_list|()
decl_stmt|;
name|QStringList
modifier|&
name|quc
init|=
name|v
index|[
literal|"QMAKE_EXTRA_COMPILERS"
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|quc
operator|.
name|size
argument_list|()
condition|;
control|)
block|{
name|bool
name|error
init|=
literal|false
decl_stmt|;
name|QString
name|comp
init|=
name|quc
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
index|[
name|comp
operator|+
literal|".output"
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|v
index|[
name|comp
operator|+
literal|".output_function"
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|v
index|[
name|comp
operator|+
literal|".output"
index|]
operator|.
name|append
argument_list|(
literal|"${QMAKE_FUNC_FILE_IN_"
operator|+
name|v
index|[
name|comp
operator|+
literal|".output_function"
index|]
operator|.
name|first
argument_list|()
operator|+
literal|"}"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|error
operator|=
literal|true
expr_stmt|;
name|warn_msg
argument_list|(
name|WarnLogic
argument_list|,
literal|"Compiler: %s: No output file specified"
argument_list|,
name|comp
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|v
index|[
name|comp
operator|+
literal|".input"
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|error
operator|=
literal|true
expr_stmt|;
name|warn_msg
argument_list|(
name|WarnLogic
argument_list|,
literal|"Compiler: %s: No input variable specified"
argument_list|,
name|comp
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|error
condition|)
name|quc
operator|.
name|removeAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
else|else
operator|++
name|i
expr_stmt|;
block|}
block|}
end_function
begin_function
name|void
DECL|function|initOutPaths
name|MakefileGenerator
operator|::
name|initOutPaths
parameter_list|()
block|{
if|if
condition|(
name|init_opath_already
condition|)
return|return;
name|verifyCompilers
argument_list|()
expr_stmt|;
name|init_opath_already
operator|=
literal|true
expr_stmt|;
name|QHash
argument_list|<
name|QString
argument_list|,
name|QStringList
argument_list|>
modifier|&
name|v
init|=
name|project
operator|->
name|variables
argument_list|()
decl_stmt|;
comment|//for shadow builds
if|if
condition|(
operator|!
name|v
operator|.
name|contains
argument_list|(
literal|"QMAKE_ABSOLUTE_SOURCE_PATH"
argument_list|)
condition|)
block|{
if|if
condition|(
name|Option
operator|::
name|mkfile
operator|::
name|do_cache
operator|&&
operator|!
name|project
operator|->
name|cacheFile
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|v
operator|.
name|contains
argument_list|(
literal|"QMAKE_ABSOLUTE_SOURCE_ROOT"
argument_list|)
condition|)
block|{
name|QString
name|root
init|=
name|v
index|[
literal|"QMAKE_ABSOLUTE_SOURCE_ROOT"
index|]
operator|.
name|first
argument_list|()
decl_stmt|;
name|root
operator|=
name|QDir
operator|::
name|fromNativeSeparators
argument_list|(
name|root
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|root
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QFileInfo
name|fi
init|=
name|fileInfo
argument_list|(
name|project
operator|->
name|cacheFile
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fi
operator|.
name|makeAbsolute
argument_list|()
condition|)
block|{
name|QString
name|cache_r
init|=
name|fi
operator|.
name|path
argument_list|()
decl_stmt|,
name|pwd
init|=
name|Option
operator|::
name|output_dir
decl_stmt|;
if|if
condition|(
name|pwd
operator|.
name|startsWith
argument_list|(
name|cache_r
argument_list|)
operator|&&
operator|!
name|pwd
operator|.
name|startsWith
argument_list|(
name|root
argument_list|)
condition|)
block|{
name|pwd
operator|=
name|root
operator|+
name|pwd
operator|.
name|mid
argument_list|(
name|cache_r
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|exists
argument_list|(
name|pwd
argument_list|)
condition|)
name|v
operator|.
name|insert
argument_list|(
literal|"QMAKE_ABSOLUTE_SOURCE_PATH"
argument_list|,
name|QStringList
argument_list|(
name|pwd
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|v
index|[
literal|"QMAKE_ABSOLUTE_SOURCE_PATH"
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QString
modifier|&
name|asp
init|=
name|v
index|[
literal|"QMAKE_ABSOLUTE_SOURCE_PATH"
index|]
operator|.
name|first
argument_list|()
decl_stmt|;
name|asp
operator|=
name|QDir
operator|::
name|fromNativeSeparators
argument_list|(
name|asp
argument_list|)
expr_stmt|;
if|if
condition|(
name|asp
operator|.
name|isEmpty
argument_list|()
operator|||
name|asp
operator|==
name|Option
operator|::
name|output_dir
condition|)
comment|//if they're the same, why bother?
name|v
index|[
literal|"QMAKE_ABSOLUTE_SOURCE_PATH"
index|]
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|QString
name|currentDir
init|=
name|qmake_getpwd
argument_list|()
decl_stmt|;
comment|//just to go back to
comment|//some builtin directories
if|if
condition|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"PRECOMPILED_DIR"
argument_list|)
operator|&&
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"OBJECTS_DIR"
argument_list|)
condition|)
name|v
index|[
literal|"PRECOMPILED_DIR"
index|]
operator|=
name|v
index|[
literal|"OBJECTS_DIR"
index|]
expr_stmt|;
name|QString
name|dirs
index|[]
init|=
block|{
name|QString
argument_list|(
literal|"OBJECTS_DIR"
argument_list|)
block|,
name|QString
argument_list|(
literal|"DESTDIR"
argument_list|)
block|,
name|QString
argument_list|(
literal|"QMAKE_PKGCONFIG_DESTDIR"
argument_list|)
block|,
name|QString
argument_list|(
literal|"SUBLIBS_DIR"
argument_list|)
block|,
name|QString
argument_list|(
literal|"DLLDESTDIR"
argument_list|)
block|,
name|QString
argument_list|(
literal|"QMAKE_LIBTOOL_DESTDIR"
argument_list|)
block|,
name|QString
argument_list|(
literal|"PRECOMPILED_DIR"
argument_list|)
block|,
name|QString
argument_list|()
block|}
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
operator|!
name|dirs
index|[
name|x
index|]
operator|.
name|isEmpty
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
name|v
index|[
name|dirs
index|[
name|x
index|]
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
specifier|const
name|QString
name|orig_path
init|=
name|v
index|[
name|dirs
index|[
name|x
index|]
index|]
operator|.
name|first
argument_list|()
decl_stmt|;
name|QString
modifier|&
name|pathRef
init|=
name|v
index|[
name|dirs
index|[
name|x
index|]
index|]
operator|.
name|first
argument_list|()
decl_stmt|;
name|pathRef
operator|=
name|fileFixify
argument_list|(
name|pathRef
argument_list|,
name|Option
operator|::
name|output_dir
argument_list|,
name|Option
operator|::
name|output_dir
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
comment|// We don't want to add a separator for DLLDESTDIR on Windows (###why?)
if|if
condition|(
operator|!
operator|(
name|dirs
index|[
name|x
index|]
operator|==
literal|"DLLDESTDIR"
operator|)
condition|)
endif|#
directive|endif
block|{
if|if
condition|(
operator|!
name|pathRef
operator|.
name|endsWith
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
condition|)
name|pathRef
operator|+=
name|Option
operator|::
name|dir_sep
expr_stmt|;
block|}
if|if
condition|(
name|noIO
argument_list|()
condition|)
continue|continue;
name|QString
name|path
init|=
name|project
operator|->
name|first
argument_list|(
name|dirs
index|[
name|x
index|]
argument_list|)
decl_stmt|;
comment|//not to be changed any further
name|path
operator|=
name|fileFixify
argument_list|(
name|path
argument_list|,
name|currentDir
argument_list|,
name|Option
operator|::
name|output_dir
argument_list|)
expr_stmt|;
name|debug_msg
argument_list|(
literal|3
argument_list|,
literal|"Fixed output_dir %s (%s) into %s"
argument_list|,
name|dirs
index|[
name|x
index|]
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|orig_path
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|path
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|mkdir
argument_list|(
name|path
argument_list|)
condition|)
name|warn_msg
argument_list|(
name|WarnLogic
argument_list|,
literal|"%s: Cannot access directory '%s'"
argument_list|,
name|dirs
index|[
name|x
index|]
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|path
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//out paths from the extra compilers
specifier|const
name|QStringList
modifier|&
name|quc
init|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_EXTRA_COMPILERS"
argument_list|)
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|it
init|=
name|quc
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|quc
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QString
name|tmp_out
init|=
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".output"
argument_list|)
operator|.
name|first
argument_list|()
decl_stmt|;
if|if
condition|(
name|tmp_out
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
specifier|const
name|QStringList
modifier|&
name|tmp
init|=
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".input"
argument_list|)
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|it2
init|=
name|tmp
operator|.
name|begin
argument_list|()
init|;
name|it2
operator|!=
name|tmp
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it2
control|)
block|{
name|QStringList
modifier|&
name|inputs
init|=
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it2
operator|)
argument_list|)
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|input
init|=
name|inputs
operator|.
name|begin
argument_list|()
init|;
name|input
operator|!=
name|inputs
operator|.
name|end
argument_list|()
condition|;
operator|++
name|input
control|)
block|{
operator|(
operator|*
name|input
operator|)
operator|=
name|fileFixify
argument_list|(
operator|(
operator|*
name|input
operator|)
argument_list|,
name|Option
operator|::
name|output_dir
argument_list|,
name|Option
operator|::
name|output_dir
argument_list|)
expr_stmt|;
name|QString
name|path
init|=
name|unescapeFilePath
argument_list|(
name|replaceExtraCompilerVariables
argument_list|(
name|tmp_out
argument_list|,
operator|(
operator|*
name|input
operator|)
argument_list|,
name|QString
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|path
operator|=
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|int
name|slash
init|=
name|path
operator|.
name|lastIndexOf
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
decl_stmt|;
if|if
condition|(
name|slash
operator|!=
operator|-
literal|1
condition|)
block|{
name|path
operator|=
name|path
operator|.
name|left
argument_list|(
name|slash
argument_list|)
expr_stmt|;
comment|// Make out path only if it does not contain makefile variables
if|if
condition|(
operator|!
name|path
operator|.
name|contains
argument_list|(
literal|"${"
argument_list|)
condition|)
if|if
condition|(
name|path
operator|!=
literal|"."
operator|&&
operator|!
name|mkdir
argument_list|(
name|fileFixify
argument_list|(
name|path
argument_list|,
name|qmake_getpwd
argument_list|()
argument_list|,
name|Option
operator|::
name|output_dir
argument_list|)
argument_list|)
condition|)
name|warn_msg
argument_list|(
name|WarnLogic
argument_list|,
literal|"%s: Cannot access directory '%s'"
argument_list|,
operator|(
operator|*
name|it
operator|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|path
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|v
index|[
literal|"DESTDIR"
index|]
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QDir
name|d
argument_list|(
name|v
index|[
literal|"DESTDIR"
index|]
operator|.
name|first
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|d
operator|.
name|absolutePath
argument_list|()
argument_list|)
operator|==
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|Option
operator|::
name|output_dir
argument_list|)
condition|)
name|v
operator|.
name|remove
argument_list|(
literal|"DESTDIR"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
name|QMakeProject
DECL|function|projectFile
modifier|*
name|MakefileGenerator
operator|::
name|projectFile
parameter_list|()
specifier|const
block|{
return|return
name|project
return|;
block|}
end_function
begin_function
name|void
DECL|function|setProjectFile
name|MakefileGenerator
operator|::
name|setProjectFile
parameter_list|(
name|QMakeProject
modifier|*
name|p
parameter_list|)
block|{
if|if
condition|(
name|project
condition|)
return|return;
name|project
operator|=
name|p
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"win32"
argument_list|)
condition|)
name|target_mode
operator|=
name|TARG_WIN_MODE
expr_stmt|;
elseif|else
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"macx"
argument_list|)
condition|)
name|target_mode
operator|=
name|TARG_MACX_MODE
expr_stmt|;
else|else
name|target_mode
operator|=
name|TARG_UNIX_MODE
expr_stmt|;
name|init
argument_list|()
expr_stmt|;
name|findLibraries
argument_list|()
expr_stmt|;
if|if
condition|(
name|Option
operator|::
name|qmake_mode
operator|==
name|Option
operator|::
name|QMAKE_GENERATE_MAKEFILE
operator|&&
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"link_prl"
argument_list|)
condition|)
comment|//load up prl's'
name|processPrlFiles
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
name|QStringList
DECL|function|findFilesInVPATH
name|MakefileGenerator
operator|::
name|findFilesInVPATH
parameter_list|(
name|QStringList
name|l
parameter_list|,
name|uchar
name|flags
parameter_list|,
specifier|const
name|QString
modifier|&
name|vpath_var
parameter_list|)
block|{
name|QStringList
name|vpath
decl_stmt|;
specifier|const
name|QHash
argument_list|<
name|QString
argument_list|,
name|QStringList
argument_list|>
modifier|&
name|v
init|=
name|project
operator|->
name|variables
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|val_it
init|=
literal|0
init|;
name|val_it
operator|<
name|l
operator|.
name|count
argument_list|()
condition|;
control|)
block|{
name|bool
name|remove_file
init|=
literal|false
decl_stmt|;
name|QString
modifier|&
name|val
init|=
name|l
index|[
name|val_it
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|val
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QString
name|file
init|=
name|fixEnvVariables
argument_list|(
name|val
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|VPATH_NoFixify
operator|)
condition|)
name|file
operator|=
name|fileFixify
argument_list|(
name|file
argument_list|,
name|qmake_getpwd
argument_list|()
argument_list|,
name|Option
operator|::
name|output_dir
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
literal|'\"'
operator|&&
name|file
operator|.
name|at
argument_list|(
name|file
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|==
literal|'\"'
condition|)
name|file
operator|=
name|file
operator|.
name|mid
argument_list|(
literal|1
argument_list|,
name|file
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|exists
argument_list|(
name|file
argument_list|)
condition|)
block|{
operator|++
name|val_it
expr_stmt|;
continue|continue;
block|}
name|bool
name|found
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|QDir
operator|::
name|isRelativePath
argument_list|(
name|val
argument_list|)
condition|)
block|{
if|if
condition|(
name|vpath
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|vpath_var
operator|.
name|isEmpty
argument_list|()
condition|)
name|vpath
operator|=
name|v
index|[
name|vpath_var
index|]
expr_stmt|;
name|vpath
operator|+=
name|v
index|[
literal|"VPATH"
index|]
operator|+
name|v
index|[
literal|"QMAKE_ABSOLUTE_SOURCE_PATH"
index|]
operator|+
name|v
index|[
literal|"DEPENDPATH"
index|]
expr_stmt|;
if|if
condition|(
name|Option
operator|::
name|output_dir
operator|!=
name|qmake_getpwd
argument_list|()
condition|)
name|vpath
operator|+=
name|Option
operator|::
name|output_dir
expr_stmt|;
block|}
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|vpath_it
init|=
name|vpath
operator|.
name|begin
argument_list|()
init|;
name|vpath_it
operator|!=
name|vpath
operator|.
name|end
argument_list|()
condition|;
operator|++
name|vpath_it
control|)
block|{
name|QString
name|real_dir
init|=
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
operator|(
operator|*
name|vpath_it
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|exists
argument_list|(
name|real_dir
operator|+
name|QDir
operator|::
name|separator
argument_list|()
operator|+
name|val
argument_list|)
condition|)
block|{
name|QString
name|dir
init|=
operator|(
operator|*
name|vpath_it
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|endsWith
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
condition|)
name|dir
operator|+=
name|Option
operator|::
name|dir_sep
expr_stmt|;
name|val
operator|=
name|dir
operator|+
name|val
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|VPATH_NoFixify
operator|)
condition|)
name|val
operator|=
name|fileFixify
argument_list|(
name|val
argument_list|)
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
name|debug_msg
argument_list|(
literal|1
argument_list|,
literal|"Found file through vpath %s -> %s"
argument_list|,
name|file
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|val
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|QString
name|dir
decl_stmt|,
name|regex
init|=
name|val
decl_stmt|,
name|real_dir
decl_stmt|;
if|if
condition|(
name|regex
operator|.
name|lastIndexOf
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|dir
operator|=
name|regex
operator|.
name|left
argument_list|(
name|regex
operator|.
name|lastIndexOf
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|real_dir
operator|=
name|dir
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|VPATH_NoFixify
operator|)
condition|)
name|real_dir
operator|=
name|fileFixify
argument_list|(
name|real_dir
argument_list|,
name|qmake_getpwd
argument_list|()
argument_list|,
name|Option
operator|::
name|output_dir
argument_list|)
operator|+
literal|'/'
expr_stmt|;
name|regex
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
name|dir
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|real_dir
operator|.
name|isEmpty
argument_list|()
operator|||
name|exists
argument_list|(
name|real_dir
argument_list|)
condition|)
block|{
name|QStringList
name|files
init|=
name|QDir
argument_list|(
name|real_dir
argument_list|)
operator|.
name|entryList
argument_list|(
name|QStringList
argument_list|(
name|regex
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|debug_msg
argument_list|(
literal|1
argument_list|,
literal|"%s:%d Failure to find %s in vpath (%s)"
argument_list|,
name|__FILE__
argument_list|,
name|__LINE__
argument_list|,
name|val
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|vpath
operator|.
name|join
argument_list|(
literal|"::"
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|VPATH_RemoveMissingFiles
condition|)
name|remove_file
operator|=
literal|true
expr_stmt|;
elseif|else
if|if
condition|(
name|flags
operator|&
name|VPATH_WarnMissingFiles
condition|)
name|warn_msg
argument_list|(
name|WarnLogic
argument_list|,
literal|"Failure to find: %s"
argument_list|,
name|val
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|l
operator|.
name|removeAt
argument_list|(
name|val_it
argument_list|)
expr_stmt|;
name|QString
name|a
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
operator|(
name|int
operator|)
name|files
operator|.
name|count
argument_list|()
operator|-
literal|1
init|;
name|i
operator|>=
literal|0
condition|;
name|i
operator|--
control|)
block|{
if|if
condition|(
name|files
index|[
name|i
index|]
operator|==
literal|"."
operator|||
name|files
index|[
name|i
index|]
operator|==
literal|".."
condition|)
continue|continue;
name|a
operator|=
name|real_dir
operator|+
name|files
index|[
name|i
index|]
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|VPATH_NoFixify
operator|)
condition|)
name|a
operator|=
name|fileFixify
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|l
operator|.
name|insert
argument_list|(
name|val_it
argument_list|,
name|a
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
name|debug_msg
argument_list|(
literal|1
argument_list|,
literal|"%s:%d Cannot match %s%s, as %s does not exist."
argument_list|,
name|__FILE__
argument_list|,
name|__LINE__
argument_list|,
name|real_dir
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|regex
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|real_dir
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|VPATH_RemoveMissingFiles
condition|)
name|remove_file
operator|=
literal|true
expr_stmt|;
elseif|else
if|if
condition|(
name|flags
operator|&
name|VPATH_WarnMissingFiles
condition|)
name|warn_msg
argument_list|(
name|WarnLogic
argument_list|,
literal|"Failure to find: %s"
argument_list|,
name|val
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|remove_file
condition|)
name|l
operator|.
name|removeAt
argument_list|(
name|val_it
argument_list|)
expr_stmt|;
else|else
operator|++
name|val_it
expr_stmt|;
block|}
return|return
name|l
return|;
block|}
end_function
begin_function
name|void
DECL|function|initCompiler
name|MakefileGenerator
operator|::
name|initCompiler
parameter_list|(
specifier|const
name|MakefileGenerator
operator|::
name|Compiler
modifier|&
name|comp
parameter_list|)
block|{
name|QHash
argument_list|<
name|QString
argument_list|,
name|QStringList
argument_list|>
modifier|&
name|v
init|=
name|project
operator|->
name|variables
argument_list|()
decl_stmt|;
name|QStringList
modifier|&
name|l
init|=
name|v
index|[
name|comp
operator|.
name|variable_in
index|]
decl_stmt|;
comment|// find all the relevant file inputs
if|if
condition|(
operator|!
name|init_compiler_already
operator|.
name|contains
argument_list|(
name|comp
operator|.
name|variable_in
argument_list|)
condition|)
block|{
name|init_compiler_already
operator|.
name|insert
argument_list|(
name|comp
operator|.
name|variable_in
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|noIO
argument_list|()
condition|)
name|l
operator|=
name|findFilesInVPATH
argument_list|(
name|l
argument_list|,
operator|(
name|comp
operator|.
name|flags
operator|&
name|Compiler
operator|::
name|CompilerRemoveNoExist
operator|)
condition|?
name|VPATH_RemoveMissingFiles
else|:
name|VPATH_WarnMissingFiles
argument_list|,
literal|"VPATH_"
operator|+
name|comp
operator|.
name|variable_in
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
name|void
DECL|function|init
name|MakefileGenerator
operator|::
name|init
parameter_list|()
block|{
name|initOutPaths
argument_list|()
expr_stmt|;
if|if
condition|(
name|init_already
condition|)
return|return;
name|verifyCompilers
argument_list|()
expr_stmt|;
name|init_already
operator|=
literal|true
expr_stmt|;
name|QHash
argument_list|<
name|QString
argument_list|,
name|QStringList
argument_list|>
modifier|&
name|v
init|=
name|project
operator|->
name|variables
argument_list|()
decl_stmt|;
name|chkdir
operator|=
name|v
index|[
literal|"QMAKE_CHK_DIR_EXISTS"
index|]
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
name|chkfile
operator|=
name|v
index|[
literal|"QMAKE_CHK_FILE_EXISTS"
index|]
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
if|if
condition|(
name|chkfile
operator|.
name|isEmpty
argument_list|()
condition|)
comment|// Backwards compat with Qt4 specs
name|chkfile
operator|=
name|isWindowsShell
argument_list|()
condition|?
literal|"if not exist"
else|:
literal|"test -f"
expr_stmt|;
name|chkglue
operator|=
name|v
index|[
literal|"QMAKE_CHK_EXISTS_GLUE"
index|]
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
if|if
condition|(
name|chkglue
operator|.
name|isEmpty
argument_list|()
condition|)
comment|// Backwards compat with Qt4 specs
name|chkglue
operator|=
name|isWindowsShell
argument_list|()
condition|?
literal|""
else|:
literal|"|| "
expr_stmt|;
name|QStringList
modifier|&
name|quc
init|=
name|v
index|[
literal|"QMAKE_EXTRA_COMPILERS"
index|]
decl_stmt|;
comment|//make sure the COMPILERS are in the correct input/output chain order
for|for
control|(
name|int
name|comp_out
init|=
literal|0
init|,
name|jump_count
init|=
literal|0
init|;
name|comp_out
operator|<
name|quc
operator|.
name|size
argument_list|()
condition|;
operator|++
name|comp_out
control|)
block|{
name|continue_compiler_chain
label|:
if|if
condition|(
name|jump_count
operator|>
name|quc
operator|.
name|size
argument_list|()
condition|)
comment|//just to avoid an infinite loop here
break|break;
if|if
condition|(
name|v
operator|.
name|contains
argument_list|(
name|quc
operator|.
name|at
argument_list|(
name|comp_out
argument_list|)
operator|+
literal|".variable_out"
argument_list|)
condition|)
block|{
specifier|const
name|QStringList
modifier|&
name|outputs
init|=
name|v
operator|.
name|value
argument_list|(
name|quc
operator|.
name|at
argument_list|(
name|comp_out
argument_list|)
operator|+
literal|".variable_out"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|out
init|=
literal|0
init|;
name|out
operator|<
name|outputs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|out
control|)
block|{
for|for
control|(
name|int
name|comp_in
init|=
literal|0
init|;
name|comp_in
operator|<
name|quc
operator|.
name|size
argument_list|()
condition|;
operator|++
name|comp_in
control|)
block|{
if|if
condition|(
name|comp_in
operator|==
name|comp_out
condition|)
continue|continue;
if|if
condition|(
name|v
operator|.
name|contains
argument_list|(
name|quc
operator|.
name|at
argument_list|(
name|comp_in
argument_list|)
operator|+
literal|".input"
argument_list|)
condition|)
block|{
specifier|const
name|QStringList
modifier|&
name|inputs
init|=
name|v
operator|.
name|value
argument_list|(
name|quc
operator|.
name|at
argument_list|(
name|comp_in
argument_list|)
operator|+
literal|".input"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|in
init|=
literal|0
init|;
name|in
operator|<
name|inputs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|in
control|)
block|{
if|if
condition|(
name|inputs
operator|.
name|at
argument_list|(
name|in
argument_list|)
operator|==
name|outputs
operator|.
name|at
argument_list|(
name|out
argument_list|)
operator|&&
name|comp_out
operator|>
name|comp_in
condition|)
block|{
operator|++
name|jump_count
expr_stmt|;
comment|//move comp_out to comp_in and continue the compiler chain
name|quc
operator|.
name|move
argument_list|(
name|comp_out
argument_list|,
name|comp_in
argument_list|)
expr_stmt|;
name|comp_out
operator|=
name|comp_in
expr_stmt|;
goto|goto
name|continue_compiler_chain
goto|;
block|}
block|}
block|}
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_SUBSTITUTES"
argument_list|)
condition|)
block|{
specifier|const
name|QStringList
modifier|&
name|subs
init|=
name|v
index|[
literal|"QMAKE_SUBSTITUTES"
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|subs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|inn
init|=
name|subs
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|+
literal|".input"
decl_stmt|,
name|outn
init|=
name|subs
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|+
literal|".output"
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|contains
argument_list|(
name|inn
argument_list|)
operator|||
name|v
operator|.
name|contains
argument_list|(
name|outn
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|v
operator|.
name|contains
argument_list|(
name|inn
argument_list|)
operator|||
operator|!
name|v
operator|.
name|contains
argument_list|(
name|outn
argument_list|)
condition|)
block|{
name|warn_msg
argument_list|(
name|WarnLogic
argument_list|,
literal|"Substitute '%s' has only one of .input and .output"
argument_list|,
name|subs
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
specifier|const
name|QStringList
modifier|&
name|tinn
init|=
name|v
index|[
name|inn
index|]
decl_stmt|,
modifier|&
name|toutn
init|=
name|v
index|[
name|outn
index|]
decl_stmt|;
if|if
condition|(
name|tinn
operator|.
name|length
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|warn_msg
argument_list|(
name|WarnLogic
argument_list|,
literal|"Substitute '%s.input' does not have exactly one value"
argument_list|,
name|subs
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
if|if
condition|(
name|toutn
operator|.
name|length
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|warn_msg
argument_list|(
name|WarnLogic
argument_list|,
literal|"Substitute '%s.output' does not have exactly one value"
argument_list|,
name|subs
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|inn
operator|=
name|fileFixify
argument_list|(
name|tinn
operator|.
name|first
argument_list|()
argument_list|,
name|qmake_getpwd
argument_list|()
argument_list|)
expr_stmt|;
name|outn
operator|=
name|fileFixify
argument_list|(
name|toutn
operator|.
name|first
argument_list|()
argument_list|,
name|qmake_getpwd
argument_list|()
argument_list|,
name|Option
operator|::
name|output_dir
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|inn
operator|=
name|fileFixify
argument_list|(
name|subs
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|qmake_getpwd
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|QFile
operator|::
name|exists
argument_list|(
name|inn
argument_list|)
condition|)
block|{
comment|// random insanity for backwards compat: .in file specified with absolute out dir
name|inn
operator|=
name|fileFixify
argument_list|(
name|subs
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|inn
operator|.
name|endsWith
argument_list|(
literal|".in"
argument_list|)
condition|)
block|{
name|warn_msg
argument_list|(
name|WarnLogic
argument_list|,
literal|"Substitute '%s' does not end with '.in'"
argument_list|,
name|inn
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|outn
operator|=
name|fileFixify
argument_list|(
name|inn
operator|.
name|left
argument_list|(
name|inn
operator|.
name|length
argument_list|()
operator|-
literal|3
argument_list|)
argument_list|,
name|qmake_getpwd
argument_list|()
argument_list|,
name|Option
operator|::
name|output_dir
argument_list|)
expr_stmt|;
block|}
name|QString
name|confign
init|=
name|subs
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|+
literal|".CONFIG"
decl_stmt|;
name|bool
name|verbatim
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|contains
argument_list|(
name|confign
argument_list|)
condition|)
name|verbatim
operator|=
name|v
index|[
name|confign
index|]
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"verbatim"
argument_list|)
argument_list|)
expr_stmt|;
name|QFile
name|in
argument_list|(
name|inn
argument_list|)
decl_stmt|;
if|if
condition|(
name|in
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|QByteArray
name|contentBytes
decl_stmt|;
if|if
condition|(
name|verbatim
condition|)
block|{
name|contentBytes
operator|=
name|in
operator|.
name|readAll
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|QString
name|contents
decl_stmt|;
name|QStack
argument_list|<
name|int
argument_list|>
name|state
decl_stmt|;
enum|enum
block|{
name|IN_CONDITION
block|,
name|MET_CONDITION
block|,
name|PENDING_CONDITION
block|}
enum|;
for|for
control|(
name|int
name|count
init|=
literal|1
init|;
operator|!
name|in
operator|.
name|atEnd
argument_list|()
condition|;
operator|++
name|count
control|)
block|{
name|QString
name|line
init|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|in
operator|.
name|readLine
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"!!IF "
argument_list|)
condition|)
block|{
if|if
condition|(
name|state
operator|.
name|isEmpty
argument_list|()
operator|||
name|state
operator|.
name|top
argument_list|()
operator|==
name|IN_CONDITION
condition|)
block|{
name|QString
name|test
init|=
name|line
operator|.
name|mid
argument_list|(
literal|5
argument_list|,
name|line
operator|.
name|length
argument_list|()
operator|-
operator|(
literal|5
operator|+
literal|1
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|project
operator|->
name|test
argument_list|(
name|test
argument_list|)
condition|)
name|state
operator|.
name|push
argument_list|(
name|IN_CONDITION
argument_list|)
expr_stmt|;
else|else
name|state
operator|.
name|push
argument_list|(
name|PENDING_CONDITION
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|state
operator|.
name|push
argument_list|(
name|MET_CONDITION
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"!!ELIF "
argument_list|)
condition|)
block|{
if|if
condition|(
name|state
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|warn_msg
argument_list|(
name|WarnLogic
argument_list|,
literal|"(%s:%d): Unexpected else condition"
argument_list|,
name|in
operator|.
name|fileName
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|state
operator|.
name|top
argument_list|()
operator|==
name|PENDING_CONDITION
condition|)
block|{
name|QString
name|test
init|=
name|line
operator|.
name|mid
argument_list|(
literal|7
argument_list|,
name|line
operator|.
name|length
argument_list|()
operator|-
operator|(
literal|7
operator|+
literal|1
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|project
operator|->
name|test
argument_list|(
name|test
argument_list|)
condition|)
block|{
name|state
operator|.
name|pop
argument_list|()
expr_stmt|;
name|state
operator|.
name|push
argument_list|(
name|IN_CONDITION
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|state
operator|.
name|top
argument_list|()
operator|==
name|IN_CONDITION
condition|)
block|{
name|state
operator|.
name|pop
argument_list|()
expr_stmt|;
name|state
operator|.
name|push
argument_list|(
name|MET_CONDITION
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"!!ELSE"
argument_list|)
condition|)
block|{
if|if
condition|(
name|state
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|warn_msg
argument_list|(
name|WarnLogic
argument_list|,
literal|"(%s:%d): Unexpected else condition"
argument_list|,
name|in
operator|.
name|fileName
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|state
operator|.
name|top
argument_list|()
operator|==
name|PENDING_CONDITION
condition|)
block|{
name|state
operator|.
name|pop
argument_list|()
expr_stmt|;
name|state
operator|.
name|push
argument_list|(
name|IN_CONDITION
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|state
operator|.
name|top
argument_list|()
operator|==
name|IN_CONDITION
condition|)
block|{
name|state
operator|.
name|pop
argument_list|()
expr_stmt|;
name|state
operator|.
name|push
argument_list|(
name|MET_CONDITION
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|line
operator|.
name|startsWith
argument_list|(
literal|"!!ENDIF"
argument_list|)
condition|)
block|{
if|if
condition|(
name|state
operator|.
name|isEmpty
argument_list|()
condition|)
name|warn_msg
argument_list|(
name|WarnLogic
argument_list|,
literal|"(%s:%d): Unexpected endif"
argument_list|,
name|in
operator|.
name|fileName
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|count
argument_list|)
expr_stmt|;
else|else
name|state
operator|.
name|pop
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|state
operator|.
name|isEmpty
argument_list|()
operator|||
name|state
operator|.
name|top
argument_list|()
operator|==
name|IN_CONDITION
condition|)
block|{
name|contents
operator|+=
name|project
operator|->
name|expand
argument_list|(
name|line
argument_list|,
name|in
operator|.
name|fileName
argument_list|()
argument_list|,
name|count
argument_list|)
expr_stmt|;
block|}
block|}
name|contentBytes
operator|=
name|contents
operator|.
name|toUtf8
argument_list|()
expr_stmt|;
block|}
name|QFile
name|out
argument_list|(
name|outn
argument_list|)
decl_stmt|;
if|if
condition|(
name|out
operator|.
name|exists
argument_list|()
operator|&&
name|out
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|QByteArray
name|old
init|=
name|out
operator|.
name|readAll
argument_list|()
decl_stmt|;
if|if
condition|(
name|contentBytes
operator|==
name|old
condition|)
block|{
name|v
index|[
literal|"QMAKE_INTERNAL_INCLUDED_FILES"
index|]
operator|.
name|append
argument_list|(
name|in
operator|.
name|fileName
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|out
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|out
operator|.
name|remove
argument_list|()
condition|)
block|{
name|warn_msg
argument_list|(
name|WarnLogic
argument_list|,
literal|"Cannot clear substitute '%s'"
argument_list|,
name|out
operator|.
name|fileName
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
block|}
name|mkdir
argument_list|(
name|QFileInfo
argument_list|(
name|out
argument_list|)
operator|.
name|absolutePath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|out
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
argument_list|)
condition|)
block|{
name|v
index|[
literal|"QMAKE_INTERNAL_INCLUDED_FILES"
index|]
operator|.
name|append
argument_list|(
name|in
operator|.
name|fileName
argument_list|()
argument_list|)
expr_stmt|;
name|out
operator|.
name|write
argument_list|(
name|contentBytes
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|warn_msg
argument_list|(
name|WarnLogic
argument_list|,
literal|"Cannot open substitute for output '%s'"
argument_list|,
name|out
operator|.
name|fileName
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|warn_msg
argument_list|(
name|WarnLogic
argument_list|,
literal|"Cannot open substitute for input '%s'"
argument_list|,
name|in
operator|.
name|fileName
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|int
name|x
decl_stmt|;
comment|//build up a list of compilers
name|QList
argument_list|<
name|Compiler
argument_list|>
name|compilers
decl_stmt|;
block|{
specifier|const
name|char
modifier|*
name|builtins
index|[]
init|=
block|{
literal|"OBJECTS"
block|,
literal|"SOURCES"
block|,
literal|"PRECOMPILED_HEADER"
block|,
literal|0
block|}
decl_stmt|;
for|for
control|(
name|x
operator|=
literal|0
init|;
name|builtins
index|[
name|x
index|]
condition|;
operator|++
name|x
control|)
block|{
name|Compiler
name|compiler
decl_stmt|;
name|compiler
operator|.
name|variable_in
operator|=
name|builtins
index|[
name|x
index|]
expr_stmt|;
name|compiler
operator|.
name|flags
operator|=
name|Compiler
operator|::
name|CompilerBuiltin
expr_stmt|;
name|compiler
operator|.
name|type
operator|=
name|QMakeSourceFileInfo
operator|::
name|TYPE_C
expr_stmt|;
if|if
condition|(
operator|!
name|strcmp
argument_list|(
name|builtins
index|[
name|x
index|]
argument_list|,
literal|"OBJECTS"
argument_list|)
condition|)
name|compiler
operator|.
name|flags
operator||=
name|Compiler
operator|::
name|CompilerNoCheckDeps
expr_stmt|;
name|compilers
operator|.
name|append
argument_list|(
name|compiler
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|it
init|=
name|quc
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|quc
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
specifier|const
name|QStringList
modifier|&
name|inputs
init|=
name|v
index|[
operator|(
operator|*
name|it
operator|)
operator|+
literal|".input"
index|]
decl_stmt|;
for|for
control|(
name|x
operator|=
literal|0
init|;
name|x
operator|<
name|inputs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|x
control|)
block|{
name|Compiler
name|compiler
decl_stmt|;
name|compiler
operator|.
name|variable_in
operator|=
name|inputs
operator|.
name|at
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|compiler
operator|.
name|flags
operator|=
name|Compiler
operator|::
name|CompilerNoFlags
expr_stmt|;
if|if
condition|(
name|v
index|[
operator|(
operator|*
name|it
operator|)
operator|+
literal|".CONFIG"
index|]
operator|.
name|indexOf
argument_list|(
literal|"ignore_no_exist"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
name|compiler
operator|.
name|flags
operator||=
name|Compiler
operator|::
name|CompilerRemoveNoExist
expr_stmt|;
if|if
condition|(
name|v
index|[
operator|(
operator|*
name|it
operator|)
operator|+
literal|".CONFIG"
index|]
operator|.
name|indexOf
argument_list|(
literal|"no_dependencies"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
name|compiler
operator|.
name|flags
operator||=
name|Compiler
operator|::
name|CompilerNoCheckDeps
expr_stmt|;
if|if
condition|(
name|v
index|[
operator|(
operator|*
name|it
operator|)
operator|+
literal|".CONFIG"
index|]
operator|.
name|indexOf
argument_list|(
literal|"add_inputs_as_makefile_deps"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
name|compiler
operator|.
name|flags
operator||=
name|Compiler
operator|::
name|CompilerAddInputsAsMakefileDeps
expr_stmt|;
name|QString
name|dep_type
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".dependency_type"
argument_list|)
condition|)
name|dep_type
operator|=
name|project
operator|->
name|first
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".dependency_type"
argument_list|)
expr_stmt|;
if|if
condition|(
name|dep_type
operator|.
name|isEmpty
argument_list|()
condition|)
name|compiler
operator|.
name|type
operator|=
name|QMakeSourceFileInfo
operator|::
name|TYPE_UNKNOWN
expr_stmt|;
elseif|else
if|if
condition|(
name|dep_type
operator|==
literal|"TYPE_UI"
condition|)
name|compiler
operator|.
name|type
operator|=
name|QMakeSourceFileInfo
operator|::
name|TYPE_UI
expr_stmt|;
else|else
name|compiler
operator|.
name|type
operator|=
name|QMakeSourceFileInfo
operator|::
name|TYPE_C
expr_stmt|;
name|compilers
operator|.
name|append
argument_list|(
name|compiler
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|{
comment|//do the path fixifying
name|QStringList
name|paths
decl_stmt|;
for|for
control|(
name|x
operator|=
literal|0
init|;
name|x
operator|<
name|compilers
operator|.
name|count
argument_list|()
condition|;
operator|++
name|x
control|)
block|{
if|if
condition|(
operator|!
name|paths
operator|.
name|contains
argument_list|(
name|compilers
operator|.
name|at
argument_list|(
name|x
argument_list|)
operator|.
name|variable_in
argument_list|)
condition|)
name|paths
operator|<<
name|compilers
operator|.
name|at
argument_list|(
name|x
argument_list|)
operator|.
name|variable_in
expr_stmt|;
block|}
name|paths
operator|<<
literal|"INCLUDEPATH"
operator|<<
literal|"QMAKE_INTERNAL_INCLUDED_FILES"
operator|<<
literal|"PRECOMPILED_HEADER"
expr_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|paths
operator|.
name|count
argument_list|()
condition|;
name|y
operator|++
control|)
block|{
name|QStringList
modifier|&
name|l
init|=
name|v
index|[
name|paths
index|[
name|y
index|]
index|]
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|it
init|=
name|l
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|l
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
operator|(
operator|*
name|it
operator|)
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|exists
argument_list|(
operator|(
operator|*
name|it
operator|)
argument_list|)
condition|)
operator|(
operator|*
name|it
operator|)
operator|=
name|fileFixify
argument_list|(
operator|(
operator|*
name|it
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|noIO
argument_list|()
operator|||
operator|!
name|doDepends
argument_list|()
operator|||
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"GNUmake"
argument_list|)
condition|)
name|QMakeSourceFileInfo
operator|::
name|setDependencyMode
argument_list|(
name|QMakeSourceFileInfo
operator|::
name|NonRecursive
argument_list|)
expr_stmt|;
for|for
control|(
name|x
operator|=
literal|0
init|;
name|x
operator|<
name|compilers
operator|.
name|count
argument_list|()
condition|;
operator|++
name|x
control|)
name|initCompiler
argument_list|(
name|compilers
operator|.
name|at
argument_list|(
name|x
argument_list|)
argument_list|)
expr_stmt|;
comment|//merge actual compiler outputs into their variable_out. This is done last so that
comment|//files are already properly fixified.
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|it
init|=
name|quc
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|quc
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QString
name|tmp_out
init|=
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".output"
argument_list|)
operator|.
name|first
argument_list|()
decl_stmt|;
if|if
condition|(
name|tmp_out
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".CONFIG"
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|"combine"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
specifier|const
name|QStringList
modifier|&
name|compilerInputs
init|=
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".input"
argument_list|)
decl_stmt|;
comment|// Don't generate compiler output if it doesn't have input.
if|if
condition|(
name|compilerInputs
operator|.
name|isEmpty
argument_list|()
operator|||
name|project
operator|->
name|values
argument_list|(
name|compilerInputs
operator|.
name|first
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|tmp_out
operator|.
name|indexOf
argument_list|(
literal|"$"
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
if|if
condition|(
operator|!
name|verifyExtraCompiler
argument_list|(
operator|(
operator|*
name|it
operator|)
argument_list|,
name|QString
argument_list|()
argument_list|)
condition|)
comment|//verify
continue|continue;
name|QString
name|out
init|=
name|fileFixify
argument_list|(
name|tmp_out
argument_list|,
name|Option
operator|::
name|output_dir
argument_list|,
name|Option
operator|::
name|output_dir
argument_list|)
decl_stmt|;
name|bool
name|pre_dep
init|=
operator|(
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".CONFIG"
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|"target_predeps"
argument_list|)
operator|!=
operator|-
literal|1
operator|)
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|contains
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".variable_out"
argument_list|)
condition|)
block|{
specifier|const
name|QStringList
modifier|&
name|var_out
init|=
name|v
operator|.
name|value
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".variable_out"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|var_out
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|v
init|=
name|var_out
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|==
name|QLatin1String
argument_list|(
literal|"SOURCES"
argument_list|)
condition|)
name|v
operator|=
literal|"GENERATED_SOURCES"
expr_stmt|;
elseif|else
if|if
condition|(
name|v
operator|==
name|QLatin1String
argument_list|(
literal|"OBJECTS"
argument_list|)
condition|)
name|pre_dep
operator|=
literal|false
expr_stmt|;
name|QStringList
modifier|&
name|list
init|=
name|project
operator|->
name|values
argument_list|(
name|v
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|list
operator|.
name|contains
argument_list|(
name|out
argument_list|)
condition|)
name|list
operator|.
name|append
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".CONFIG"
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|"no_link"
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|QStringList
modifier|&
name|list
init|=
name|project
operator|->
name|values
argument_list|(
literal|"OBJECTS"
argument_list|)
decl_stmt|;
name|pre_dep
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|list
operator|.
name|contains
argument_list|(
name|out
argument_list|)
condition|)
name|list
operator|.
name|append
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QStringList
modifier|&
name|list
init|=
name|project
operator|->
name|values
argument_list|(
literal|"UNUSED_SOURCES"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|list
operator|.
name|contains
argument_list|(
name|out
argument_list|)
condition|)
name|list
operator|.
name|append
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pre_dep
condition|)
block|{
name|QStringList
modifier|&
name|list
init|=
name|project
operator|->
name|values
argument_list|(
literal|"PRE_TARGETDEPS"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|list
operator|.
name|contains
argument_list|(
name|out
argument_list|)
condition|)
name|list
operator|.
name|append
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
specifier|const
name|QStringList
modifier|&
name|tmp
init|=
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".input"
argument_list|)
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|it2
init|=
name|tmp
operator|.
name|begin
argument_list|()
init|;
name|it2
operator|!=
name|tmp
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it2
control|)
block|{
specifier|const
name|QStringList
name|inputs
init|=
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it2
operator|)
argument_list|)
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|input
init|=
name|inputs
operator|.
name|constBegin
argument_list|()
init|;
name|input
operator|!=
name|inputs
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|input
control|)
block|{
if|if
condition|(
operator|(
operator|*
name|input
operator|)
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|QString
name|in
init|=
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
operator|(
operator|*
name|input
operator|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|verifyExtraCompiler
argument_list|(
operator|(
operator|*
name|it
operator|)
argument_list|,
name|in
argument_list|)
condition|)
comment|//verify
continue|continue;
name|QString
name|out
init|=
name|replaceExtraCompilerVariables
argument_list|(
name|tmp_out
argument_list|,
operator|(
operator|*
name|input
operator|)
argument_list|,
name|QString
argument_list|()
argument_list|)
decl_stmt|;
name|out
operator|=
name|fileFixify
argument_list|(
name|out
argument_list|,
name|Option
operator|::
name|output_dir
argument_list|,
name|Option
operator|::
name|output_dir
argument_list|)
expr_stmt|;
name|bool
name|pre_dep
init|=
operator|(
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".CONFIG"
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|"target_predeps"
argument_list|)
operator|!=
operator|-
literal|1
operator|)
decl_stmt|;
if|if
condition|(
name|v
operator|.
name|contains
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".variable_out"
argument_list|)
condition|)
block|{
specifier|const
name|QStringList
modifier|&
name|var_out
init|=
name|project
operator|->
name|values
argument_list|(
operator|*
name|it
operator|+
literal|".variable_out"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|var_out
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|v
init|=
name|var_out
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|v
operator|==
name|QLatin1String
argument_list|(
literal|"SOURCES"
argument_list|)
condition|)
name|v
operator|=
literal|"GENERATED_SOURCES"
expr_stmt|;
elseif|else
if|if
condition|(
name|v
operator|==
name|QLatin1String
argument_list|(
literal|"OBJECTS"
argument_list|)
condition|)
name|pre_dep
operator|=
literal|false
expr_stmt|;
name|QStringList
modifier|&
name|list
init|=
name|project
operator|->
name|values
argument_list|(
name|v
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|list
operator|.
name|contains
argument_list|(
name|out
argument_list|)
condition|)
name|list
operator|.
name|append
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".CONFIG"
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|"no_link"
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|pre_dep
operator|=
literal|false
expr_stmt|;
name|QStringList
modifier|&
name|list
init|=
name|project
operator|->
name|values
argument_list|(
literal|"OBJECTS"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|list
operator|.
name|contains
argument_list|(
name|out
argument_list|)
condition|)
name|list
operator|.
name|append
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QStringList
modifier|&
name|list
init|=
name|project
operator|->
name|values
argument_list|(
literal|"UNUSED_SOURCES"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|list
operator|.
name|contains
argument_list|(
name|out
argument_list|)
condition|)
name|list
operator|.
name|append
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|pre_dep
condition|)
block|{
name|QStringList
modifier|&
name|list
init|=
name|project
operator|->
name|values
argument_list|(
literal|"PRE_TARGETDEPS"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|list
operator|.
name|contains
argument_list|(
name|out
argument_list|)
condition|)
name|list
operator|.
name|append
argument_list|(
name|out
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
comment|//handle dependencies
name|depHeuristicsCache
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|noIO
argument_list|()
condition|)
block|{
comment|// dependency paths
name|QStringList
name|incDirs
init|=
name|v
index|[
literal|"DEPENDPATH"
index|]
operator|+
name|v
index|[
literal|"QMAKE_ABSOLUTE_SOURCE_PATH"
index|]
decl_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"depend_includepath"
argument_list|)
condition|)
name|incDirs
operator|+=
name|v
index|[
literal|"INCLUDEPATH"
index|]
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"no_include_pwd"
argument_list|)
condition|)
block|{
name|QString
name|pwd
init|=
name|qmake_getpwd
argument_list|()
decl_stmt|;
if|if
condition|(
name|pwd
operator|.
name|isEmpty
argument_list|()
condition|)
name|pwd
operator|=
literal|"."
expr_stmt|;
name|incDirs
operator|+=
name|pwd
expr_stmt|;
block|}
name|QList
argument_list|<
name|QMakeLocalFileName
argument_list|>
name|deplist
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|it
init|=
name|incDirs
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|incDirs
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
name|deplist
operator|.
name|append
argument_list|(
name|QMakeLocalFileName
argument_list|(
name|unescapeFilePath
argument_list|(
operator|(
operator|*
name|it
operator|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QMakeSourceFileInfo
operator|::
name|setDependencyPaths
argument_list|(
name|deplist
argument_list|)
expr_stmt|;
name|debug_msg
argument_list|(
literal|1
argument_list|,
literal|"Dependency Directories: %s"
argument_list|,
name|incDirs
operator|.
name|join
argument_list|(
literal|" :: "
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
comment|//cache info
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"qmake_cache"
argument_list|)
condition|)
block|{
name|QString
name|cache_file
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_INTERNAL_CACHE_FILE"
argument_list|)
condition|)
block|{
name|cache_file
operator|=
name|QDir
operator|::
name|fromNativeSeparators
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_INTERNAL_CACHE_FILE"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cache_file
operator|=
literal|".qmake.internal.cache"
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"build_pass"
argument_list|)
condition|)
name|cache_file
operator|+=
literal|".BUILD."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"BUILD_PASS"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|cache_file
operator|.
name|indexOf
argument_list|(
literal|'/'
argument_list|)
operator|==
operator|-
literal|1
condition|)
name|cache_file
operator|.
name|prepend
argument_list|(
name|Option
operator|::
name|output_dir
operator|+
literal|'/'
argument_list|)
expr_stmt|;
name|QMakeSourceFileInfo
operator|::
name|setCacheFile
argument_list|(
name|cache_file
argument_list|)
expr_stmt|;
block|}
comment|//add to dependency engine
for|for
control|(
name|x
operator|=
literal|0
init|;
name|x
operator|<
name|compilers
operator|.
name|count
argument_list|()
condition|;
operator|++
name|x
control|)
block|{
specifier|const
name|MakefileGenerator
operator|::
name|Compiler
modifier|&
name|comp
init|=
name|compilers
operator|.
name|at
argument_list|(
name|x
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|comp
operator|.
name|flags
operator|&
name|Compiler
operator|::
name|CompilerNoCheckDeps
operator|)
condition|)
block|{
name|addSourceFiles
argument_list|(
name|v
index|[
name|comp
operator|.
name|variable_in
index|]
argument_list|,
name|QMakeSourceFileInfo
operator|::
name|SEEK_DEPS
argument_list|,
operator|(
name|QMakeSourceFileInfo
operator|::
name|SourceFileType
operator|)
name|comp
operator|.
name|type
argument_list|)
expr_stmt|;
if|if
condition|(
name|comp
operator|.
name|flags
operator|&
name|Compiler
operator|::
name|CompilerAddInputsAsMakefileDeps
condition|)
block|{
name|QStringList
modifier|&
name|l
init|=
name|v
index|[
name|comp
operator|.
name|variable_in
index|]
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|v
index|[
literal|"QMAKE_INTERNAL_INCLUDED_FILES"
index|]
operator|.
name|indexOf
argument_list|(
name|l
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
operator|==
operator|-
literal|1
condition|)
name|v
index|[
literal|"QMAKE_INTERNAL_INCLUDED_FILES"
index|]
operator|.
name|append
argument_list|(
name|l
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
name|processSources
argument_list|()
expr_stmt|;
comment|//remove anything in SOURCES which is included (thus it need not be linked in)
comment|//all sources and generated sources must be turned into objects at some point (the one builtin compiler)
name|v
index|[
literal|"OBJECTS"
index|]
operator|+=
name|createObjectList
argument_list|(
name|v
index|[
literal|"SOURCES"
index|]
argument_list|)
operator|+
name|createObjectList
argument_list|(
name|v
index|[
literal|"GENERATED_SOURCES"
index|]
argument_list|)
expr_stmt|;
comment|//Translation files
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"TRANSLATIONS"
argument_list|)
condition|)
block|{
name|QStringList
modifier|&
name|trf
init|=
name|project
operator|->
name|values
argument_list|(
literal|"TRANSLATIONS"
argument_list|)
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|it
init|=
name|trf
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|trf
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
operator|(
operator|*
name|it
operator|)
operator|=
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
operator|(
operator|*
name|it
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"no_include_pwd"
argument_list|)
condition|)
block|{
comment|//get the output_dir into the pwd
if|if
condition|(
name|Option
operator|::
name|output_dir
operator|!=
name|qmake_getpwd
argument_list|()
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"INCLUDEPATH"
argument_list|)
operator|.
name|append
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
block|}
comment|//fix up the target deps
name|QString
name|fixpaths
index|[]
init|=
block|{
name|QString
argument_list|(
literal|"PRE_TARGETDEPS"
argument_list|)
block|,
name|QString
argument_list|(
literal|"POST_TARGETDEPS"
argument_list|)
block|,
name|QString
argument_list|()
block|}
decl_stmt|;
for|for
control|(
name|int
name|path
init|=
literal|0
init|;
operator|!
name|fixpaths
index|[
name|path
index|]
operator|.
name|isNull
argument_list|()
condition|;
name|path
operator|++
control|)
block|{
name|QStringList
modifier|&
name|l
init|=
name|v
index|[
name|fixpaths
index|[
name|path
index|]
index|]
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|val_it
init|=
name|l
operator|.
name|begin
argument_list|()
init|;
name|val_it
operator|!=
name|l
operator|.
name|end
argument_list|()
condition|;
operator|++
name|val_it
control|)
block|{
if|if
condition|(
operator|!
operator|(
operator|*
name|val_it
operator|)
operator|.
name|isEmpty
argument_list|()
condition|)
operator|(
operator|*
name|val_it
operator|)
operator|=
name|escapeDependencyPath
argument_list|(
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
operator|(
operator|*
name|val_it
operator|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|//extra depends
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"DEPENDS"
argument_list|)
condition|)
block|{
name|QStringList
modifier|&
name|l
init|=
name|v
index|[
literal|"DEPENDS"
index|]
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|it
init|=
name|l
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|l
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QStringList
name|files
init|=
name|v
index|[
operator|(
operator|*
name|it
operator|)
operator|+
literal|".file"
index|]
operator|+
name|v
index|[
operator|(
operator|*
name|it
operator|)
operator|+
literal|".files"
index|]
decl_stmt|;
comment|//why do I support such evil things?
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|file_it
init|=
name|files
operator|.
name|begin
argument_list|()
init|;
name|file_it
operator|!=
name|files
operator|.
name|end
argument_list|()
condition|;
operator|++
name|file_it
control|)
block|{
name|QStringList
modifier|&
name|out_deps
init|=
name|findDependencies
argument_list|(
operator|*
name|file_it
argument_list|)
decl_stmt|;
name|QStringList
modifier|&
name|in_deps
init|=
name|v
index|[
operator|(
operator|*
name|it
operator|)
operator|+
literal|".depends"
index|]
decl_stmt|;
comment|//even more evilness..
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|dep_it
init|=
name|in_deps
operator|.
name|begin
argument_list|()
init|;
name|dep_it
operator|!=
name|in_deps
operator|.
name|end
argument_list|()
condition|;
operator|++
name|dep_it
control|)
block|{
if|if
condition|(
name|exists
argument_list|(
operator|*
name|dep_it
argument_list|)
condition|)
block|{
name|out_deps
operator|.
name|append
argument_list|(
operator|*
name|dep_it
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QString
name|dir
decl_stmt|,
name|regex
init|=
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
operator|(
operator|*
name|dep_it
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|regex
operator|.
name|lastIndexOf
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|dir
operator|=
name|regex
operator|.
name|left
argument_list|(
name|regex
operator|.
name|lastIndexOf
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|regex
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
name|dir
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QStringList
name|files
init|=
name|QDir
argument_list|(
name|dir
argument_list|)
operator|.
name|entryList
argument_list|(
name|QStringList
argument_list|(
name|regex
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|files
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|warn_msg
argument_list|(
name|WarnLogic
argument_list|,
literal|"Dependency for [%s]: Not found %s"
argument_list|,
operator|(
operator|*
name|file_it
operator|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
operator|(
operator|*
name|dep_it
operator|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|files
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
name|out_deps
operator|.
name|append
argument_list|(
name|dir
operator|+
name|files
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
comment|// escape qmake command
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_QMAKE"
argument_list|)
operator|=
name|escapeFilePaths
argument_list|(
name|QStringList
argument_list|(
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|Option
operator|::
name|qmake_abslocation
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|bool
DECL|function|processPrlFile
name|MakefileGenerator
operator|::
name|processPrlFile
parameter_list|(
name|QString
modifier|&
name|file
parameter_list|)
block|{
name|bool
name|ret
init|=
literal|false
decl_stmt|,
name|try_replace_file
init|=
literal|false
decl_stmt|;
name|QString
name|meta_file
decl_stmt|,
name|orig_file
init|=
name|file
decl_stmt|;
if|if
condition|(
name|QMakeMetaInfo
operator|::
name|libExists
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|try_replace_file
operator|=
literal|true
expr_stmt|;
name|meta_file
operator|=
name|file
expr_stmt|;
name|file
operator|=
literal|""
expr_stmt|;
block|}
else|else
block|{
name|QString
name|tmp
init|=
name|file
decl_stmt|;
name|int
name|ext
init|=
name|tmp
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|ext
operator|!=
operator|-
literal|1
condition|)
name|tmp
operator|=
name|tmp
operator|.
name|left
argument_list|(
name|ext
argument_list|)
expr_stmt|;
name|meta_file
operator|=
name|tmp
expr_stmt|;
block|}
comment|//    meta_file = fileFixify(meta_file);
name|QString
name|real_meta_file
init|=
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|meta_file
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|meta_file
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QString
name|f
init|=
name|fileFixify
argument_list|(
name|real_meta_file
argument_list|,
name|qmake_getpwd
argument_list|()
argument_list|,
name|Option
operator|::
name|output_dir
argument_list|)
decl_stmt|;
if|if
condition|(
name|QMakeMetaInfo
operator|::
name|libExists
argument_list|(
name|f
argument_list|)
condition|)
block|{
name|QMakeMetaInfo
name|libinfo
decl_stmt|;
name|debug_msg
argument_list|(
literal|1
argument_list|,
literal|"Processing PRL file: %s"
argument_list|,
name|real_meta_file
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|libinfo
operator|.
name|readLib
argument_list|(
name|f
argument_list|)
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Error processing meta file: %s\n"
argument_list|,
name|real_meta_file
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"no_read_prl_"
operator|+
name|libinfo
operator|.
name|type
argument_list|()
operator|.
name|toLower
argument_list|()
argument_list|)
condition|)
block|{
name|debug_msg
argument_list|(
literal|2
argument_list|,
literal|"Ignored meta file %s [%s]"
argument_list|,
name|real_meta_file
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|libinfo
operator|.
name|type
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
literal|true
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_CURRENT_PRL_LIBS"
argument_list|)
operator|=
name|libinfo
operator|.
name|values
argument_list|(
literal|"QMAKE_PRL_LIBS"
argument_list|)
expr_stmt|;
name|QStringList
modifier|&
name|defs
init|=
name|project
operator|->
name|values
argument_list|(
literal|"DEFINES"
argument_list|)
decl_stmt|;
specifier|const
name|QStringList
modifier|&
name|prl_defs
init|=
name|project
operator|->
name|values
argument_list|(
literal|"PRL_EXPORT_DEFINES"
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|def
decl|,
name|libinfo
operator|.
name|values
argument_list|(
literal|"QMAKE_PRL_DEFINES"
argument_list|)
control|)
if|if
condition|(
operator|!
name|defs
operator|.
name|contains
argument_list|(
name|def
argument_list|)
operator|&&
name|prl_defs
operator|.
name|contains
argument_list|(
name|def
argument_list|)
condition|)
name|defs
operator|.
name|append
argument_list|(
name|def
argument_list|)
expr_stmt|;
if|if
condition|(
name|try_replace_file
operator|&&
operator|!
name|libinfo
operator|.
name|isEmpty
argument_list|(
literal|"QMAKE_PRL_TARGET"
argument_list|)
condition|)
block|{
name|QString
name|dir
decl_stmt|;
name|int
name|slsh
init|=
name|real_meta_file
operator|.
name|lastIndexOf
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
decl_stmt|;
if|if
condition|(
name|slsh
operator|!=
operator|-
literal|1
condition|)
name|dir
operator|=
name|real_meta_file
operator|.
name|left
argument_list|(
name|slsh
operator|+
literal|1
argument_list|)
expr_stmt|;
name|file
operator|=
name|libinfo
operator|.
name|first
argument_list|(
literal|"QMAKE_PRL_TARGET"
argument_list|)
expr_stmt|;
if|if
condition|(
name|QDir
operator|::
name|isRelativePath
argument_list|(
name|file
argument_list|)
condition|)
name|file
operator|.
name|prepend
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|ret
condition|)
block|{
name|QString
name|mf
init|=
name|QMakeMetaInfo
operator|::
name|findLib
argument_list|(
name|meta_file
argument_list|)
decl_stmt|;
if|if
condition|(
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PRL_INTERNAL_FILES"
argument_list|)
operator|.
name|indexOf
argument_list|(
name|mf
argument_list|)
operator|==
operator|-
literal|1
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PRL_INTERNAL_FILES"
argument_list|)
operator|.
name|append
argument_list|(
name|mf
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_INTERNAL_INCLUDED_FILES"
argument_list|)
operator|.
name|indexOf
argument_list|(
name|mf
argument_list|)
operator|==
operator|-
literal|1
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_INTERNAL_INCLUDED_FILES"
argument_list|)
operator|.
name|append
argument_list|(
name|mf
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|try_replace_file
operator|&&
name|file
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|#
directive|if
literal|0
block|warn_msg(WarnLogic, "Found prl [%s] file with no target [%s]!", meta_file.toLatin1().constData(),                  orig_file.toLatin1().constData());
endif|#
directive|endif
name|file
operator|=
name|orig_file
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
name|void
DECL|function|filterIncludedFiles
name|MakefileGenerator
operator|::
name|filterIncludedFiles
parameter_list|(
specifier|const
name|QString
modifier|&
name|var
parameter_list|)
block|{
name|QStringList
modifier|&
name|inputs
init|=
name|project
operator|->
name|values
argument_list|(
name|var
argument_list|)
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|input
init|=
name|inputs
operator|.
name|begin
argument_list|()
init|;
name|input
operator|!=
name|inputs
operator|.
name|end
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
name|QMakeSourceFileInfo
operator|::
name|included
argument_list|(
operator|(
operator|*
name|input
operator|)
argument_list|)
operator|>
literal|0
condition|)
name|input
operator|=
name|inputs
operator|.
name|erase
argument_list|(
name|input
argument_list|)
expr_stmt|;
else|else
operator|++
name|input
expr_stmt|;
block|}
block|}
end_function
begin_function
name|void
DECL|function|processPrlFiles
name|MakefileGenerator
operator|::
name|processPrlFiles
parameter_list|()
block|{
name|qFatal
argument_list|(
literal|"MakefileGenerator::processPrlFiles() called!"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
DECL|function|writePrlFile
name|MakefileGenerator
operator|::
name|writePrlFile
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|)
block|{
name|QString
name|target
init|=
name|project
operator|->
name|first
argument_list|(
literal|"TARGET"
argument_list|)
decl_stmt|;
name|int
name|slsh
init|=
name|target
operator|.
name|lastIndexOf
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
decl_stmt|;
if|if
condition|(
name|slsh
operator|!=
operator|-
literal|1
condition|)
name|target
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
name|slsh
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QString
name|bdir
init|=
name|Option
operator|::
name|output_dir
decl_stmt|;
if|if
condition|(
name|bdir
operator|.
name|isEmpty
argument_list|()
condition|)
name|bdir
operator|=
name|qmake_getpwd
argument_list|()
expr_stmt|;
name|t
operator|<<
literal|"QMAKE_PRL_BUILD_DIR = "
operator|<<
name|bdir
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|projectFile
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|project
operator|->
name|projectFile
argument_list|()
operator|!=
literal|"-"
condition|)
name|t
operator|<<
literal|"QMAKE_PRO_INPUT = "
operator|<<
name|project
operator|->
name|projectFile
argument_list|()
operator|.
name|section
argument_list|(
literal|'/'
argument_list|,
operator|-
literal|1
argument_list|)
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_ABSOLUTE_SOURCE_PATH"
argument_list|)
condition|)
name|t
operator|<<
literal|"QMAKE_PRL_SOURCE_DIR = "
operator|<<
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_ABSOLUTE_SOURCE_PATH"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"QMAKE_PRL_TARGET = "
operator|<<
name|target
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"PRL_EXPORT_DEFINES"
argument_list|)
condition|)
name|t
operator|<<
literal|"QMAKE_PRL_DEFINES = "
operator|<<
name|project
operator|->
name|values
argument_list|(
literal|"PRL_EXPORT_DEFINES"
argument_list|)
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"PRL_EXPORT_CFLAGS"
argument_list|)
condition|)
name|t
operator|<<
literal|"QMAKE_PRL_CFLAGS = "
operator|<<
name|project
operator|->
name|values
argument_list|(
literal|"PRL_EXPORT_CFLAGS"
argument_list|)
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"PRL_EXPORT_CXXFLAGS"
argument_list|)
condition|)
name|t
operator|<<
literal|"QMAKE_PRL_CXXFLAGS = "
operator|<<
name|project
operator|->
name|values
argument_list|(
literal|"PRL_EXPORT_CXXFLAGS"
argument_list|)
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"CONFIG"
argument_list|)
condition|)
name|t
operator|<<
literal|"QMAKE_PRL_CONFIG = "
operator|<<
name|project
operator|->
name|values
argument_list|(
literal|"CONFIG"
argument_list|)
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"TARGET_VERSION_EXT"
argument_list|)
condition|)
name|t
operator|<<
literal|"QMAKE_PRL_VERSION = "
operator|<<
name|project
operator|->
name|first
argument_list|(
literal|"TARGET_VERSION_EXT"
argument_list|)
operator|<<
name|endl
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"VERSION"
argument_list|)
condition|)
name|t
operator|<<
literal|"QMAKE_PRL_VERSION = "
operator|<<
name|project
operator|->
name|first
argument_list|(
literal|"VERSION"
argument_list|)
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"staticlib"
argument_list|)
operator|||
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"explicitlib"
argument_list|)
condition|)
block|{
name|QStringList
name|libs
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_INTERNAL_PRL_LIBS"
argument_list|)
condition|)
name|libs
operator|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_INTERNAL_PRL_LIBS"
argument_list|)
expr_stmt|;
else|else
name|libs
operator|<<
literal|"QMAKE_LIBS"
expr_stmt|;
comment|//obvious one
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"staticlib"
argument_list|)
condition|)
name|libs
operator|<<
literal|"QMAKE_LIBS_PRIVATE"
expr_stmt|;
name|t
operator|<<
literal|"QMAKE_PRL_LIBS = "
expr_stmt|;
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|it
init|=
name|libs
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|libs
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
name|t
operator|<<
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it
operator|)
argument_list|)
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|"\\\\"
argument_list|)
operator|<<
literal|" "
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
block|}
block|}
end_function
begin_function
name|bool
DECL|function|writeProjectMakefile
name|MakefileGenerator
operator|::
name|writeProjectMakefile
parameter_list|()
block|{
name|QTextStream
name|t
argument_list|(
operator|&
name|Option
operator|::
name|output
argument_list|)
decl_stmt|;
comment|//header
name|writeHeader
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|SubTarget
modifier|*
argument_list|>
name|targets
decl_stmt|;
block|{
name|QStringList
name|builds
init|=
name|project
operator|->
name|values
argument_list|(
literal|"BUILDS"
argument_list|)
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|it
init|=
name|builds
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|builds
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|SubTarget
modifier|*
name|st
init|=
operator|new
name|SubTarget
decl_stmt|;
name|targets
operator|.
name|append
argument_list|(
name|st
argument_list|)
expr_stmt|;
name|st
operator|->
name|makefile
operator|=
literal|"$(MAKEFILE)."
operator|+
operator|(
operator|*
name|it
operator|)
expr_stmt|;
name|st
operator|->
name|name
operator|=
operator|(
operator|*
name|it
operator|)
expr_stmt|;
name|st
operator|->
name|target
operator|=
name|project
operator|->
name|isEmpty
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".target"
argument_list|)
condition|?
operator|(
operator|*
name|it
operator|)
else|:
name|project
operator|->
name|first
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".target"
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"build_all"
argument_list|)
condition|)
block|{
name|t
operator|<<
literal|"first: all"
operator|<<
name|endl
expr_stmt|;
name|QList
argument_list|<
name|SubTarget
modifier|*
argument_list|>
operator|::
name|Iterator
name|it
decl_stmt|;
comment|//install
name|t
operator|<<
literal|"install: "
expr_stmt|;
for|for
control|(
name|it
operator|=
name|targets
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|targets
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
name|t
operator|<<
operator|(
operator|*
name|it
operator|)
operator|->
name|target
operator|<<
literal|"-install "
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
comment|//uninstall
name|t
operator|<<
literal|"uninstall: "
expr_stmt|;
for|for
control|(
name|it
operator|=
name|targets
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|targets
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
name|t
operator|<<
operator|(
operator|*
name|it
operator|)
operator|->
name|target
operator|<<
literal|"-uninstall "
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
block|}
else|else
block|{
name|t
operator|<<
literal|"first: "
operator|<<
name|targets
operator|.
name|first
argument_list|()
operator|->
name|target
operator|<<
name|endl
operator|<<
literal|"install: "
operator|<<
name|targets
operator|.
name|first
argument_list|()
operator|->
name|target
operator|<<
literal|"-install"
operator|<<
name|endl
operator|<<
literal|"uninstall: "
operator|<<
name|targets
operator|.
name|first
argument_list|()
operator|->
name|target
operator|<<
literal|"-uninstall"
operator|<<
name|endl
expr_stmt|;
block|}
name|writeSubTargets
argument_list|(
name|t
argument_list|,
name|targets
argument_list|,
name|SubTargetsNoFlags
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"no_autoqmake"
argument_list|)
condition|)
block|{
for|for
control|(
name|QList
argument_list|<
name|SubTarget
operator|*
argument_list|>
operator|::
name|Iterator
name|it
init|=
name|targets
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|targets
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
name|t
operator|<<
operator|(
operator|*
name|it
operator|)
operator|->
name|makefile
operator|<<
literal|": "
operator|<<
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|fileFixify
argument_list|(
name|Option
operator|::
name|output
operator|.
name|fileName
argument_list|()
argument_list|)
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
name|qDeleteAll
argument_list|(
name|targets
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
name|bool
DECL|function|write
name|MakefileGenerator
operator|::
name|write
parameter_list|()
block|{
if|if
condition|(
operator|!
name|project
condition|)
return|return
literal|false
return|;
name|writePrlFile
argument_list|()
expr_stmt|;
if|if
condition|(
name|Option
operator|::
name|qmake_mode
operator|==
name|Option
operator|::
name|QMAKE_GENERATE_MAKEFILE
operator|||
comment|//write makefile
name|Option
operator|::
name|qmake_mode
operator|==
name|Option
operator|::
name|QMAKE_GENERATE_PROJECT
condition|)
block|{
name|QTextStream
name|t
argument_list|(
operator|&
name|Option
operator|::
name|output
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|writeMakefile
argument_list|(
name|t
argument_list|)
condition|)
block|{
if|#
directive|if
literal|1
name|warn_msg
argument_list|(
name|WarnLogic
argument_list|,
literal|"Unable to generate output for: %s [TEMPLATE %s]"
argument_list|,
name|Option
operator|::
name|output
operator|.
name|fileName
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|Option
operator|::
name|output
operator|.
name|exists
argument_list|()
condition|)
name|Option
operator|::
name|output
operator|.
name|remove
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
name|QString
DECL|function|prlFileName
name|MakefileGenerator
operator|::
name|prlFileName
parameter_list|(
name|bool
name|fixify
parameter_list|)
block|{
name|QString
name|ret
init|=
name|project
operator|->
name|first
argument_list|(
literal|"TARGET_PRL"
argument_list|)
decl_stmt|;
empty_stmt|;
if|if
condition|(
name|ret
operator|.
name|isEmpty
argument_list|()
condition|)
name|ret
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"TARGET"
argument_list|)
expr_stmt|;
name|int
name|slsh
init|=
name|ret
operator|.
name|lastIndexOf
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
decl_stmt|;
if|if
condition|(
name|slsh
operator|!=
operator|-
literal|1
condition|)
name|ret
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
name|slsh
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ret
operator|.
name|endsWith
argument_list|(
name|Option
operator|::
name|prl_ext
argument_list|)
condition|)
block|{
name|int
name|dot
init|=
name|ret
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|dot
operator|!=
operator|-
literal|1
condition|)
name|ret
operator|.
name|truncate
argument_list|(
name|dot
argument_list|)
expr_stmt|;
name|ret
operator|+=
name|Option
operator|::
name|prl_ext
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_BUNDLE"
argument_list|)
condition|)
name|ret
operator|.
name|prepend
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_BUNDLE"
argument_list|)
operator|+
name|Option
operator|::
name|dir_sep
argument_list|)
expr_stmt|;
if|if
condition|(
name|fixify
condition|)
block|{
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"DESTDIR"
argument_list|)
condition|)
name|ret
operator|.
name|prepend
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"DESTDIR"
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|=
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|fileFixify
argument_list|(
name|ret
argument_list|,
name|qmake_getpwd
argument_list|()
argument_list|,
name|Option
operator|::
name|output_dir
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
name|void
DECL|function|writePrlFile
name|MakefileGenerator
operator|::
name|writePrlFile
parameter_list|()
block|{
if|if
condition|(
operator|(
name|Option
operator|::
name|qmake_mode
operator|==
name|Option
operator|::
name|QMAKE_GENERATE_MAKEFILE
operator|||
name|Option
operator|::
name|qmake_mode
operator|==
name|Option
operator|::
name|QMAKE_GENERATE_PRL
operator|)
operator|&&
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_FAILED_REQUIREMENTS"
argument_list|)
operator|.
name|isEmpty
argument_list|()
operator|&&
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"create_prl"
argument_list|)
operator|&&
operator|(
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"lib"
operator|||
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"vclib"
operator|)
operator|&&
operator|(
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"plugin"
argument_list|)
operator|||
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"static"
argument_list|)
operator|)
condition|)
block|{
comment|//write prl file
name|QString
name|local_prl
init|=
name|prlFileName
argument_list|()
decl_stmt|;
name|QString
name|prl
init|=
name|fileFixify
argument_list|(
name|local_prl
argument_list|)
decl_stmt|;
name|mkdir
argument_list|(
name|fileInfo
argument_list|(
name|local_prl
argument_list|)
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
name|QFile
name|ft
argument_list|(
name|local_prl
argument_list|)
decl_stmt|;
if|if
condition|(
name|ft
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
condition|)
block|{
name|project
operator|->
name|values
argument_list|(
literal|"ALL_DEPS"
argument_list|)
operator|.
name|append
argument_list|(
name|prl
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_INTERNAL_PRL_FILE"
argument_list|)
operator|.
name|append
argument_list|(
name|prl
argument_list|)
expr_stmt|;
name|QTextStream
name|t
argument_list|(
operator|&
name|ft
argument_list|)
decl_stmt|;
name|writePrlFile
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
name|void
DECL|function|writeObj
name|MakefileGenerator
operator|::
name|writeObj
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|,
specifier|const
name|QString
modifier|&
name|src
parameter_list|)
block|{
specifier|const
name|QStringList
modifier|&
name|srcl
init|=
name|project
operator|->
name|values
argument_list|(
name|src
argument_list|)
decl_stmt|;
specifier|const
name|QStringList
name|objl
init|=
name|createObjectList
argument_list|(
name|srcl
argument_list|)
decl_stmt|;
name|QStringList
operator|::
name|ConstIterator
name|oit
init|=
name|objl
operator|.
name|begin
argument_list|()
decl_stmt|;
name|QStringList
operator|::
name|ConstIterator
name|sit
init|=
name|srcl
operator|.
name|begin
argument_list|()
decl_stmt|;
name|QString
name|stringSrc
argument_list|(
literal|"$src"
argument_list|)
decl_stmt|;
name|QString
name|stringObj
argument_list|(
literal|"$obj"
argument_list|)
decl_stmt|;
for|for
control|(
init|;
name|sit
operator|!=
name|srcl
operator|.
name|end
argument_list|()
operator|&&
name|oit
operator|!=
name|objl
operator|.
name|end
argument_list|()
condition|;
operator|++
name|oit
operator|,
operator|++
name|sit
control|)
block|{
if|if
condition|(
operator|(
operator|*
name|sit
operator|)
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|t
operator|<<
name|escapeDependencyPath
argument_list|(
operator|(
operator|*
name|oit
operator|)
argument_list|)
operator|<<
literal|": "
operator|<<
name|escapeDependencyPath
argument_list|(
operator|(
operator|*
name|sit
operator|)
argument_list|)
operator|<<
literal|" "
operator|<<
name|escapeDependencyPaths
argument_list|(
name|findDependencies
argument_list|(
operator|(
operator|*
name|sit
operator|)
argument_list|)
argument_list|)
operator|.
name|join
argument_list|(
literal|" \\\n\t\t"
argument_list|)
expr_stmt|;
name|QString
name|comp
decl_stmt|,
name|cimp
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|cppit
init|=
name|Option
operator|::
name|cpp_ext
operator|.
name|begin
argument_list|()
init|;
name|cppit
operator|!=
name|Option
operator|::
name|cpp_ext
operator|.
name|end
argument_list|()
condition|;
operator|++
name|cppit
control|)
block|{
if|if
condition|(
operator|(
operator|*
name|sit
operator|)
operator|.
name|endsWith
argument_list|(
operator|(
operator|*
name|cppit
operator|)
argument_list|)
condition|)
block|{
name|comp
operator|=
literal|"QMAKE_RUN_CXX"
expr_stmt|;
name|cimp
operator|=
literal|"QMAKE_RUN_CXX_IMP"
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|comp
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|comp
operator|=
literal|"QMAKE_RUN_CC"
expr_stmt|;
name|cimp
operator|=
literal|"QMAKE_RUN_CC_IMP"
expr_stmt|;
block|}
name|bool
name|use_implicit_rule
init|=
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
name|cimp
argument_list|)
decl_stmt|;
name|use_implicit_rule
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|use_implicit_rule
condition|)
block|{
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"OBJECTS_DIR"
argument_list|)
condition|)
block|{
name|use_implicit_rule
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|int
name|dot
init|=
operator|(
operator|*
name|sit
operator|)
operator|.
name|lastIndexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|dot
operator|==
operator|-
literal|1
operator|||
operator|(
operator|(
operator|*
name|sit
operator|)
operator|.
name|left
argument_list|(
name|dot
argument_list|)
operator|+
name|Option
operator|::
name|obj_ext
operator|!=
operator|(
operator|*
name|oit
operator|)
operator|)
condition|)
name|use_implicit_rule
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|use_implicit_rule
operator|&&
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
name|comp
argument_list|)
condition|)
block|{
name|QString
name|p
init|=
name|var
argument_list|(
name|comp
argument_list|)
decl_stmt|,
name|srcf
argument_list|(
operator|*
name|sit
argument_list|)
decl_stmt|;
name|p
operator|.
name|replace
argument_list|(
name|stringSrc
argument_list|,
name|escapeFilePath
argument_list|(
name|srcf
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|replace
argument_list|(
name|stringObj
argument_list|,
name|escapeFilePath
argument_list|(
operator|(
operator|*
name|oit
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"\n\t"
operator|<<
name|p
expr_stmt|;
block|}
name|t
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
block|}
end_function
begin_function
name|QString
DECL|function|filePrefixRoot
name|MakefileGenerator
operator|::
name|filePrefixRoot
parameter_list|(
specifier|const
name|QString
modifier|&
name|root
parameter_list|,
specifier|const
name|QString
modifier|&
name|path
parameter_list|)
block|{
name|QString
name|ret
argument_list|(
name|root
operator|+
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|length
argument_list|()
operator|>
literal|2
operator|&&
name|path
index|[
literal|1
index|]
operator|==
literal|':'
condition|)
comment|//c:\foo
name|ret
operator|=
name|QString
argument_list|(
name|path
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
operator|+
name|root
operator|+
name|path
operator|.
name|mid
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|ret
operator|.
name|endsWith
argument_list|(
literal|"\\"
argument_list|)
condition|)
name|ret
operator|=
name|ret
operator|.
name|left
argument_list|(
name|ret
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
name|void
DECL|function|writeInstalls
name|MakefileGenerator
operator|::
name|writeInstalls
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|,
specifier|const
name|QString
modifier|&
name|installs
parameter_list|,
name|bool
name|noBuild
parameter_list|)
block|{
name|QString
name|rm_dir_contents
argument_list|(
literal|"-$(DEL_FILE)"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|isWindowsShell
argument_list|()
condition|)
comment|//ick
name|rm_dir_contents
operator|=
literal|"-$(DEL_FILE) -r"
expr_stmt|;
name|QString
name|all_installs
decl_stmt|,
name|all_uninstalls
decl_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
name|made_dirs
decl_stmt|,
name|removed_dirs
decl_stmt|;
specifier|const
name|QStringList
modifier|&
name|l
init|=
name|project
operator|->
name|values
argument_list|(
name|installs
argument_list|)
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|it
init|=
name|l
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|l
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QString
name|pvar
init|=
operator|(
operator|*
name|it
operator|)
operator|+
literal|".path"
decl_stmt|;
if|if
condition|(
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".CONFIG"
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|"no_path"
argument_list|)
operator|==
operator|-
literal|1
operator|&&
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".CONFIG"
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|"dummy_install"
argument_list|)
operator|==
operator|-
literal|1
operator|&&
name|project
operator|->
name|values
argument_list|(
name|pvar
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|warn_msg
argument_list|(
name|WarnLogic
argument_list|,
literal|"%s is not defined: install target not created\n"
argument_list|,
name|pvar
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|bool
name|do_default
init|=
literal|true
decl_stmt|;
specifier|const
name|QString
name|root
init|=
literal|"$(INSTALL_ROOT)"
decl_stmt|;
name|QString
name|dst
decl_stmt|;
if|if
condition|(
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".CONFIG"
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|"no_path"
argument_list|)
operator|==
operator|-
literal|1
operator|&&
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".CONFIG"
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|"dummy_install"
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|dst
operator|=
name|fileFixify
argument_list|(
name|unescapeFilePath
argument_list|(
name|project
operator|->
name|values
argument_list|(
name|pvar
argument_list|)
operator|.
name|first
argument_list|()
argument_list|)
argument_list|,
name|FileFixifyAbsolute
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dst
operator|.
name|endsWith
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
condition|)
name|dst
operator|+=
name|Option
operator|::
name|dir_sep
expr_stmt|;
block|}
name|QStringList
name|tmp
decl_stmt|,
name|inst
decl_stmt|,
name|uninst
decl_stmt|;
comment|//other
name|tmp
operator|=
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".extra"
argument_list|)
expr_stmt|;
if|if
condition|(
name|tmp
operator|.
name|isEmpty
argument_list|()
condition|)
name|tmp
operator|=
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".commands"
argument_list|)
expr_stmt|;
comment|//to allow compatible name
if|if
condition|(
operator|!
name|tmp
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|do_default
operator|=
literal|false
expr_stmt|;
name|inst
operator|<<
name|tmp
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
comment|//masks
name|tmp
operator|=
name|findFilesInVPATH
argument_list|(
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".files"
argument_list|)
argument_list|,
name|VPATH_NoFixify
argument_list|)
expr_stmt|;
name|tmp
operator|=
name|fileFixify
argument_list|(
name|tmp
argument_list|,
name|FileFixifyAbsolute
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tmp
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|do_default
operator|=
literal|false
expr_stmt|;
name|QString
name|base_path
init|=
name|project
operator|->
name|first
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".base"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|base_path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|base_path
operator|=
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|base_path
argument_list|,
literal|false
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|base_path
operator|.
name|endsWith
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
condition|)
name|base_path
operator|+=
name|Option
operator|::
name|dir_sep
expr_stmt|;
block|}
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|wild_it
init|=
name|tmp
operator|.
name|begin
argument_list|()
init|;
name|wild_it
operator|!=
name|tmp
operator|.
name|end
argument_list|()
condition|;
operator|++
name|wild_it
control|)
block|{
name|QString
name|wild
init|=
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
operator|(
operator|*
name|wild_it
operator|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|QString
name|dirstr
init|=
name|qmake_getpwd
argument_list|()
decl_stmt|,
name|filestr
init|=
name|wild
decl_stmt|;
name|int
name|slsh
init|=
name|filestr
operator|.
name|lastIndexOf
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
decl_stmt|;
if|if
condition|(
name|slsh
operator|!=
operator|-
literal|1
condition|)
block|{
name|dirstr
operator|=
name|filestr
operator|.
name|left
argument_list|(
name|slsh
operator|+
literal|1
argument_list|)
expr_stmt|;
name|filestr
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
name|slsh
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|dirstr
operator|.
name|endsWith
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
condition|)
name|dirstr
operator|+=
name|Option
operator|::
name|dir_sep
expr_stmt|;
name|QString
name|dst_dir
init|=
name|dst
decl_stmt|;
if|if
condition|(
operator|!
name|base_path
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|dirstr
operator|.
name|startsWith
argument_list|(
name|base_path
argument_list|)
condition|)
block|{
name|warn_msg
argument_list|(
name|WarnLogic
argument_list|,
literal|"File %s in install rule %s does not start with base %s"
argument_list|,
name|qPrintable
argument_list|(
name|wild
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
operator|*
name|it
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|base_path
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QString
name|dir_sfx
init|=
name|dirstr
operator|.
name|mid
argument_list|(
name|base_path
operator|.
name|length
argument_list|()
argument_list|)
decl_stmt|;
name|dst_dir
operator|+=
name|dir_sfx
expr_stmt|;
if|if
condition|(
operator|!
name|dir_sfx
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|made_dirs
operator|.
name|contains
argument_list|(
name|dir_sfx
argument_list|)
condition|)
block|{
name|made_dirs
operator|.
name|insert
argument_list|(
name|dir_sfx
argument_list|)
expr_stmt|;
name|QString
name|tmp_dst
init|=
name|fileFixify
argument_list|(
name|dst_dir
argument_list|,
name|FileFixifyAbsolute
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|tmp_dst
operator|.
name|chop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|inst
operator|<<
name|mkdir_p_asstring
argument_list|(
name|filePrefixRoot
argument_list|(
name|root
argument_list|,
name|tmp_dst
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|dst
operator|.
name|length
argument_list|()
init|;
name|i
operator|<
name|dst_dir
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|dst_dir
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
name|Option
operator|::
name|dir_sep
condition|)
block|{
name|QString
name|subd
init|=
name|dst_dir
operator|.
name|left
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|removed_dirs
operator|.
name|contains
argument_list|(
name|subd
argument_list|)
condition|)
block|{
name|removed_dirs
operator|.
name|insert
argument_list|(
name|subd
argument_list|)
expr_stmt|;
name|tmp_dst
operator|=
name|fileFixify
argument_list|(
name|subd
argument_list|,
name|FileFixifyAbsolute
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|uninst
operator|<<
literal|"-$(DEL_DIR) "
operator|+
name|escapeFilePath
argument_list|(
name|filePrefixRoot
argument_list|(
name|root
argument_list|,
name|tmp_dst
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
block|}
name|bool
name|is_target
init|=
operator|(
name|wild
operator|==
name|fileFixify
argument_list|(
name|var
argument_list|(
literal|"TARGET"
argument_list|)
argument_list|,
name|FileFixifyAbsolute
argument_list|)
operator|)
decl_stmt|;
if|if
condition|(
name|is_target
operator|||
name|exists
argument_list|(
name|wild
argument_list|)
condition|)
block|{
comment|//real file or target
name|QFileInfo
name|fi
argument_list|(
name|fileInfo
argument_list|(
name|wild
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|dst_file
init|=
name|filePrefixRoot
argument_list|(
name|root
argument_list|,
name|dst_dir
argument_list|)
decl_stmt|;
if|if
condition|(
name|fi
operator|.
name|isDir
argument_list|()
operator|&&
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"copy_dir_files"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|dst_file
operator|.
name|endsWith
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
condition|)
name|dst_file
operator|+=
name|Option
operator|::
name|dir_sep
expr_stmt|;
name|dst_file
operator|+=
name|fi
operator|.
name|fileName
argument_list|()
expr_stmt|;
block|}
name|QString
name|cmd
decl_stmt|;
if|if
condition|(
name|fi
operator|.
name|isDir
argument_list|()
condition|)
name|cmd
operator|=
literal|"-$(INSTALL_DIR)"
expr_stmt|;
elseif|else
if|if
condition|(
name|is_target
operator|||
name|fi
operator|.
name|isExecutable
argument_list|()
condition|)
name|cmd
operator|=
literal|"-$(INSTALL_PROGRAM)"
expr_stmt|;
else|else
name|cmd
operator|=
literal|"-$(INSTALL_FILE)"
expr_stmt|;
name|cmd
operator|+=
literal|" "
operator|+
name|escapeFilePath
argument_list|(
name|wild
argument_list|)
operator|+
literal|" "
operator|+
name|escapeFilePath
argument_list|(
name|dst_file
argument_list|)
expr_stmt|;
name|inst
operator|<<
name|cmd
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"debug"
argument_list|)
operator|&&
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"nostrip"
argument_list|)
operator|&&
operator|!
name|fi
operator|.
name|isDir
argument_list|()
operator|&&
name|fi
operator|.
name|isExecutable
argument_list|()
operator|&&
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_STRIP"
argument_list|)
condition|)
name|inst
operator|<<
name|QString
argument_list|(
literal|"-"
argument_list|)
operator|+
name|var
argument_list|(
literal|"QMAKE_STRIP"
argument_list|)
operator|+
literal|" "
operator|+
name|escapeFilePath
argument_list|(
name|filePrefixRoot
argument_list|(
name|root
argument_list|,
name|fileFixify
argument_list|(
name|dst_dir
operator|+
name|filestr
argument_list|,
name|FileFixifyAbsolute
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|uninst
operator|.
name|append
argument_list|(
name|rm_dir_contents
operator|+
literal|" "
operator|+
name|escapeFilePath
argument_list|(
name|filePrefixRoot
argument_list|(
name|root
argument_list|,
name|fileFixify
argument_list|(
name|dst_dir
operator|+
name|filestr
argument_list|,
name|FileFixifyAbsolute
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|QString
name|local_dirstr
init|=
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|dirstr
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|QStringList
name|files
init|=
name|QDir
argument_list|(
name|local_dirstr
argument_list|)
operator|.
name|entryList
argument_list|(
name|QStringList
argument_list|(
name|filestr
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QStringList
modifier|&
name|installConfigValues
init|=
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".CONFIG"
argument_list|)
decl_stmt|;
if|if
condition|(
name|installConfigValues
operator|.
name|contains
argument_list|(
literal|"no_check_exist"
argument_list|)
operator|&&
name|files
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QString
name|dst_file
init|=
name|filePrefixRoot
argument_list|(
name|root
argument_list|,
name|dst_dir
argument_list|)
decl_stmt|;
name|QString
name|cmd
decl_stmt|;
if|if
condition|(
name|installConfigValues
operator|.
name|contains
argument_list|(
literal|"directory"
argument_list|)
condition|)
block|{
name|cmd
operator|=
name|QLatin1String
argument_list|(
literal|"-$(INSTALL_DIR)"
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"copy_dir_files"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|dst_file
operator|.
name|endsWith
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
condition|)
name|dst_file
operator|+=
name|Option
operator|::
name|dir_sep
expr_stmt|;
name|dst_file
operator|+=
name|filestr
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|installConfigValues
operator|.
name|contains
argument_list|(
literal|"executable"
argument_list|)
condition|)
block|{
name|cmd
operator|=
name|QLatin1String
argument_list|(
literal|"-$(INSTALL_PROGRAM)"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cmd
operator|=
name|QLatin1String
argument_list|(
literal|"-$(INSTALL_FILE)"
argument_list|)
expr_stmt|;
block|}
name|cmd
operator|+=
literal|" "
operator|+
name|escapeFilePath
argument_list|(
name|wild
argument_list|)
operator|+
literal|" "
operator|+
name|escapeFilePath
argument_list|(
name|dst_file
argument_list|)
expr_stmt|;
name|inst
operator|<<
name|cmd
expr_stmt|;
name|uninst
operator|.
name|append
argument_list|(
name|rm_dir_contents
operator|+
literal|" "
operator|+
name|escapeFilePath
argument_list|(
name|filePrefixRoot
argument_list|(
name|root
argument_list|,
name|fileFixify
argument_list|(
name|dst_dir
operator|+
name|filestr
argument_list|,
name|FileFixifyAbsolute
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|files
operator|.
name|count
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
name|QString
name|file
init|=
name|files
index|[
name|x
index|]
decl_stmt|;
if|if
condition|(
name|file
operator|==
literal|"."
operator|||
name|file
operator|==
literal|".."
condition|)
comment|//blah
continue|continue;
name|uninst
operator|.
name|append
argument_list|(
name|rm_dir_contents
operator|+
literal|" "
operator|+
name|escapeFilePath
argument_list|(
name|filePrefixRoot
argument_list|(
name|root
argument_list|,
name|fileFixify
argument_list|(
name|dst_dir
operator|+
name|file
argument_list|,
name|FileFixifyAbsolute
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QFileInfo
name|fi
argument_list|(
name|fileInfo
argument_list|(
name|dirstr
operator|+
name|file
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|dst_file
init|=
name|filePrefixRoot
argument_list|(
name|root
argument_list|,
name|fileFixify
argument_list|(
name|dst_dir
argument_list|,
name|FileFixifyAbsolute
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fi
operator|.
name|isDir
argument_list|()
operator|&&
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"copy_dir_files"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|dst_file
operator|.
name|endsWith
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
condition|)
name|dst_file
operator|+=
name|Option
operator|::
name|dir_sep
expr_stmt|;
name|dst_file
operator|+=
name|fi
operator|.
name|fileName
argument_list|()
expr_stmt|;
block|}
name|QString
name|cmd
init|=
name|QString
argument_list|(
name|fi
operator|.
name|isDir
argument_list|()
condition|?
literal|"-$(INSTALL_DIR)"
else|:
literal|"-$(INSTALL_FILE)"
argument_list|)
operator|+
literal|" "
operator|+
name|escapeFilePath
argument_list|(
name|dirstr
operator|+
name|file
argument_list|)
operator|+
literal|" "
operator|+
name|escapeFilePath
argument_list|(
name|dst_file
argument_list|)
decl_stmt|;
name|inst
operator|<<
name|cmd
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"debug"
argument_list|)
operator|&&
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"nostrip"
argument_list|)
operator|&&
operator|!
name|fi
operator|.
name|isDir
argument_list|()
operator|&&
name|fi
operator|.
name|isExecutable
argument_list|()
operator|&&
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_STRIP"
argument_list|)
condition|)
name|inst
operator|<<
name|QString
argument_list|(
literal|"-"
argument_list|)
operator|+
name|var
argument_list|(
literal|"QMAKE_STRIP"
argument_list|)
operator|+
literal|" "
operator|+
name|escapeFilePath
argument_list|(
name|filePrefixRoot
argument_list|(
name|root
argument_list|,
name|fileFixify
argument_list|(
name|dst_dir
operator|+
name|file
argument_list|,
name|FileFixifyAbsolute
argument_list|,
literal|false
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|QString
name|target
decl_stmt|;
comment|//default?
if|if
condition|(
name|do_default
condition|)
name|target
operator|=
name|defaultInstall
argument_list|(
operator|(
operator|*
name|it
operator|)
argument_list|)
expr_stmt|;
else|else
name|target
operator|=
name|inst
operator|.
name|join
argument_list|(
literal|"\n\t"
argument_list|)
expr_stmt|;
name|QString
name|puninst
init|=
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".uninstall"
argument_list|)
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|puninst
operator|.
name|isEmpty
argument_list|()
condition|)
name|uninst
operator|<<
name|puninst
expr_stmt|;
if|if
condition|(
operator|!
name|target
operator|.
name|isEmpty
argument_list|()
operator|||
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".CONFIG"
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|"dummy_install"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|noBuild
operator|||
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".CONFIG"
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|"no_build"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
name|t
operator|<<
literal|"install_"
operator|<<
operator|(
operator|*
name|it
operator|)
operator|<<
literal|":"
expr_stmt|;
elseif|else
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"build_all"
argument_list|)
condition|)
name|t
operator|<<
literal|"install_"
operator|<<
operator|(
operator|*
name|it
operator|)
operator|<<
literal|": all"
expr_stmt|;
else|else
name|t
operator|<<
literal|"install_"
operator|<<
operator|(
operator|*
name|it
operator|)
operator|<<
literal|": first"
expr_stmt|;
specifier|const
name|QStringList
modifier|&
name|deps
init|=
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".depends"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|deps
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|dep_it
init|=
name|deps
operator|.
name|begin
argument_list|()
init|;
name|dep_it
operator|!=
name|deps
operator|.
name|end
argument_list|()
condition|;
operator|++
name|dep_it
control|)
block|{
name|QString
name|targ
init|=
name|var
argument_list|(
operator|(
operator|*
name|dep_it
operator|)
operator|+
literal|".target"
argument_list|)
decl_stmt|;
if|if
condition|(
name|targ
operator|.
name|isEmpty
argument_list|()
condition|)
name|targ
operator|=
operator|(
operator|*
name|dep_it
operator|)
expr_stmt|;
name|t
operator|<<
literal|" "
operator|<<
name|escapeDependencyPath
argument_list|(
name|targ
argument_list|)
expr_stmt|;
block|}
block|}
name|t
operator|<<
literal|" FORCE\n\t"
expr_stmt|;
specifier|const
name|QStringList
modifier|&
name|dirs
init|=
name|project
operator|->
name|values
argument_list|(
name|pvar
argument_list|)
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|pit
init|=
name|dirs
operator|.
name|begin
argument_list|()
init|;
name|pit
operator|!=
name|dirs
operator|.
name|end
argument_list|()
condition|;
operator|++
name|pit
control|)
block|{
name|QString
name|tmp_dst
init|=
name|fileFixify
argument_list|(
operator|(
operator|*
name|pit
operator|)
argument_list|,
name|FileFixifyAbsolute
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|t
operator|<<
name|mkdir_p_asstring
argument_list|(
name|filePrefixRoot
argument_list|(
name|root
argument_list|,
name|tmp_dst
argument_list|)
argument_list|)
operator|<<
literal|"\n\t"
expr_stmt|;
block|}
name|t
operator|<<
name|target
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|uninst
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|t
operator|<<
literal|"uninstall_"
operator|<<
operator|(
operator|*
name|it
operator|)
operator|<<
literal|": FORCE"
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
name|uninst
operator|.
name|size
argument_list|()
init|;
operator|--
name|i
operator|>=
literal|0
condition|;
control|)
name|t
operator|<<
literal|"\n\t"
operator|<<
name|uninst
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"\n\t-$(DEL_DIR) "
operator|<<
name|filePrefixRoot
argument_list|(
name|root
argument_list|,
name|dst
argument_list|)
operator|<<
literal|" "
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
name|t
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".CONFIG"
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|"no_default_install"
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|all_installs
operator|+=
name|QString
argument_list|(
literal|"install_"
argument_list|)
operator|+
operator|(
operator|*
name|it
operator|)
operator|+
literal|" "
expr_stmt|;
if|if
condition|(
operator|!
name|uninst
operator|.
name|isEmpty
argument_list|()
condition|)
name|all_uninstalls
operator|+=
literal|"uninstall_"
operator|+
operator|(
operator|*
name|it
operator|)
operator|+
literal|" "
expr_stmt|;
block|}
block|}
else|else
block|{
name|debug_msg
argument_list|(
literal|1
argument_list|,
literal|"no definition for install %s: install target not created"
argument_list|,
operator|(
operator|*
name|it
operator|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|t
operator|<<
literal|"install: "
operator|<<
name|var
argument_list|(
literal|"INSTALLDEPS"
argument_list|)
operator|<<
literal|" "
operator|<<
name|all_installs
operator|<<
literal|" FORCE\n\nuninstall: "
operator|<<
name|all_uninstalls
operator|<<
literal|" "
operator|<<
name|var
argument_list|(
literal|"UNINSTALLDEPS"
argument_list|)
operator|<<
literal|" FORCE\n\n"
expr_stmt|;
block|}
end_function
begin_function
name|QString
DECL|function|var
name|MakefileGenerator
operator|::
name|var
parameter_list|(
specifier|const
name|QString
modifier|&
name|var
parameter_list|)
block|{
return|return
name|val
argument_list|(
name|project
operator|->
name|values
argument_list|(
name|var
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
name|QString
DECL|function|val
name|MakefileGenerator
operator|::
name|val
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|varList
parameter_list|)
block|{
return|return
name|valGlue
argument_list|(
name|varList
argument_list|,
literal|""
argument_list|,
literal|" "
argument_list|,
literal|""
argument_list|)
return|;
block|}
end_function
begin_function
name|QString
DECL|function|varGlue
name|MakefileGenerator
operator|::
name|varGlue
parameter_list|(
specifier|const
name|QString
modifier|&
name|var
parameter_list|,
specifier|const
name|QString
modifier|&
name|before
parameter_list|,
specifier|const
name|QString
modifier|&
name|glue
parameter_list|,
specifier|const
name|QString
modifier|&
name|after
parameter_list|)
block|{
return|return
name|valGlue
argument_list|(
name|project
operator|->
name|values
argument_list|(
name|var
argument_list|)
argument_list|,
name|before
argument_list|,
name|glue
argument_list|,
name|after
argument_list|)
return|;
block|}
end_function
begin_function
name|QString
DECL|function|fileVarGlue
name|MakefileGenerator
operator|::
name|fileVarGlue
parameter_list|(
specifier|const
name|QString
modifier|&
name|var
parameter_list|,
specifier|const
name|QString
modifier|&
name|before
parameter_list|,
specifier|const
name|QString
modifier|&
name|glue
parameter_list|,
specifier|const
name|QString
modifier|&
name|after
parameter_list|)
block|{
name|QStringList
name|varList
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|val
decl|,
name|project
operator|->
name|values
argument_list|(
name|var
argument_list|)
control|)
name|varList
operator|<<
name|escapeFilePath
argument_list|(
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|val
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|valGlue
argument_list|(
name|varList
argument_list|,
name|before
argument_list|,
name|glue
argument_list|,
name|after
argument_list|)
return|;
block|}
end_function
begin_function
name|QString
DECL|function|valGlue
name|MakefileGenerator
operator|::
name|valGlue
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|varList
parameter_list|,
specifier|const
name|QString
modifier|&
name|before
parameter_list|,
specifier|const
name|QString
modifier|&
name|glue
parameter_list|,
specifier|const
name|QString
modifier|&
name|after
parameter_list|)
block|{
name|QString
name|ret
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|it
init|=
name|varList
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|varList
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
operator|!
operator|(
operator|*
name|it
operator|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|ret
operator|.
name|isEmpty
argument_list|()
condition|)
name|ret
operator|+=
name|glue
expr_stmt|;
name|ret
operator|+=
operator|(
operator|*
name|it
operator|)
expr_stmt|;
block|}
block|}
return|return
name|ret
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
argument_list|(
literal|""
argument_list|)
else|:
name|before
operator|+
name|ret
operator|+
name|after
return|;
block|}
end_function
begin_function
name|QString
DECL|function|varList
name|MakefileGenerator
operator|::
name|varList
parameter_list|(
specifier|const
name|QString
modifier|&
name|var
parameter_list|)
block|{
return|return
name|valList
argument_list|(
name|project
operator|->
name|values
argument_list|(
name|var
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
name|QString
DECL|function|valList
name|MakefileGenerator
operator|::
name|valList
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|varList
parameter_list|)
block|{
return|return
name|valGlue
argument_list|(
name|varList
argument_list|,
literal|""
argument_list|,
literal|" \\\n\t\t"
argument_list|,
literal|""
argument_list|)
return|;
block|}
end_function
begin_function
name|QStringList
DECL|function|createObjectList
name|MakefileGenerator
operator|::
name|createObjectList
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|sources
parameter_list|)
block|{
name|QStringList
name|ret
decl_stmt|;
name|QString
name|objdir
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|values
argument_list|(
literal|"OBJECTS_DIR"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
name|objdir
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"OBJECTS_DIR"
argument_list|)
expr_stmt|;
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|it
init|=
name|sources
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|sources
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QFileInfo
name|fi
argument_list|(
name|fileInfo
argument_list|(
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
operator|(
operator|*
name|it
operator|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|dir
decl_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"object_parallel_to_source"
argument_list|)
condition|)
block|{
comment|// The source paths are relative to the output dir, but we need source-relative paths
name|QString
name|sourceRelativePath
init|=
name|fileFixify
argument_list|(
operator|*
name|it
argument_list|,
name|qmake_getpwd
argument_list|()
argument_list|,
name|Option
operator|::
name|output_dir
argument_list|)
decl_stmt|;
name|sourceRelativePath
operator|=
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|sourceRelativePath
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|sourceRelativePath
operator|.
name|startsWith
argument_list|(
literal|".."
operator|+
name|Option
operator|::
name|dir_sep
argument_list|)
condition|)
name|sourceRelativePath
operator|=
name|fileFixify
argument_list|(
name|sourceRelativePath
argument_list|,
name|FileFixifyAbsolute
argument_list|)
expr_stmt|;
if|if
condition|(
name|QDir
operator|::
name|isAbsolutePath
argument_list|(
name|sourceRelativePath
argument_list|)
condition|)
name|sourceRelativePath
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
name|sourceRelativePath
operator|.
name|indexOf
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|dir
operator|=
name|objdir
expr_stmt|;
comment|// We still respect OBJECTS_DIR
name|int
name|lastDirSepPosition
init|=
name|sourceRelativePath
operator|.
name|lastIndexOf
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
decl_stmt|;
if|if
condition|(
name|lastDirSepPosition
operator|!=
operator|-
literal|1
condition|)
name|dir
operator|+=
name|sourceRelativePath
operator|.
name|leftRef
argument_list|(
name|lastDirSepPosition
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|noIO
argument_list|()
condition|)
block|{
comment|// Ensure that the final output directory of each object exists
name|QString
name|outRelativePath
init|=
name|fileFixify
argument_list|(
name|dir
argument_list|,
name|qmake_getpwd
argument_list|()
argument_list|,
name|Option
operator|::
name|output_dir
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|mkdir
argument_list|(
name|outRelativePath
argument_list|)
condition|)
name|warn_msg
argument_list|(
name|WarnLogic
argument_list|,
literal|"Cannot create directory '%s'"
argument_list|,
name|outRelativePath
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|dir
operator|=
name|objdir
expr_stmt|;
block|}
name|ret
operator|.
name|append
argument_list|(
name|dir
operator|+
name|fi
operator|.
name|completeBaseName
argument_list|()
operator|+
name|Option
operator|::
name|obj_ext
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_constructor
DECL|function|ReplaceExtraCompilerCacheKey
name|ReplaceExtraCompilerCacheKey
operator|::
name|ReplaceExtraCompilerCacheKey
parameter_list|(
specifier|const
name|QString
modifier|&
name|v
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|i
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|o
parameter_list|)
block|{
specifier|static
name|QString
name|doubleColon
init|=
name|QLatin1String
argument_list|(
literal|"::"
argument_list|)
decl_stmt|;
name|hash
operator|=
literal|0
expr_stmt|;
name|pwd
operator|=
name|qmake_getpwd
argument_list|()
expr_stmt|;
name|var
operator|=
name|v
expr_stmt|;
block|{
name|QStringList
name|il
init|=
name|i
decl_stmt|;
name|il
operator|.
name|sort
argument_list|()
expr_stmt|;
name|in
operator|=
name|il
operator|.
name|join
argument_list|(
name|doubleColon
argument_list|)
expr_stmt|;
block|}
block|{
name|QStringList
name|ol
init|=
name|o
decl_stmt|;
name|ol
operator|.
name|sort
argument_list|()
expr_stmt|;
name|out
operator|=
name|ol
operator|.
name|join
argument_list|(
name|doubleColon
argument_list|)
expr_stmt|;
block|}
block|}
end_constructor
begin_function
DECL|function|operator ==
name|bool
name|ReplaceExtraCompilerCacheKey
operator|::
name|operator
name|==
parameter_list|(
specifier|const
name|ReplaceExtraCompilerCacheKey
modifier|&
name|f
parameter_list|)
specifier|const
block|{
return|return
operator|(
name|hashCode
argument_list|()
operator|==
name|f
operator|.
name|hashCode
argument_list|()
operator|&&
name|f
operator|.
name|in
operator|==
name|in
operator|&&
name|f
operator|.
name|out
operator|==
name|out
operator|&&
name|f
operator|.
name|var
operator|==
name|var
operator|&&
name|f
operator|.
name|pwd
operator|==
name|pwd
operator|)
return|;
block|}
end_function
begin_function
name|QString
DECL|function|replaceExtraCompilerVariables
name|MakefileGenerator
operator|::
name|replaceExtraCompilerVariables
parameter_list|(
specifier|const
name|QString
modifier|&
name|orig_var
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|in
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|out
parameter_list|)
block|{
comment|//lazy cache
name|ReplaceExtraCompilerCacheKey
name|cacheKey
argument_list|(
name|orig_var
argument_list|,
name|in
argument_list|,
name|out
argument_list|)
decl_stmt|;
name|QString
name|cacheVal
init|=
name|extraCompilerVariablesCache
operator|.
name|value
argument_list|(
name|cacheKey
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|cacheVal
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|cacheVal
return|;
comment|//do the work
name|QString
name|ret
init|=
name|orig_var
decl_stmt|;
name|QRegExp
name|reg_var
argument_list|(
literal|"\\$\\{.*\\}"
argument_list|)
decl_stmt|;
name|reg_var
operator|.
name|setMinimal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|rep
init|=
literal|0
init|;
operator|(
name|rep
operator|=
name|reg_var
operator|.
name|indexIn
argument_list|(
name|ret
argument_list|,
name|rep
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|;
control|)
block|{
name|QStringList
name|val
decl_stmt|;
specifier|const
name|QString
name|var
init|=
name|ret
operator|.
name|mid
argument_list|(
name|rep
operator|+
literal|2
argument_list|,
name|reg_var
operator|.
name|matchedLength
argument_list|()
operator|-
literal|3
argument_list|)
decl_stmt|;
name|bool
name|filePath
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|val
operator|.
name|isEmpty
argument_list|()
operator|&&
name|var
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"QMAKE_VAR_"
argument_list|)
argument_list|)
condition|)
block|{
specifier|const
name|QString
name|varname
init|=
name|var
operator|.
name|mid
argument_list|(
literal|10
argument_list|)
decl_stmt|;
name|val
operator|+=
name|project
operator|->
name|values
argument_list|(
name|varname
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|val
operator|.
name|isEmpty
argument_list|()
operator|&&
name|var
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"QMAKE_VAR_FIRST_"
argument_list|)
argument_list|)
condition|)
block|{
specifier|const
name|QString
name|varname
init|=
name|var
operator|.
name|mid
argument_list|(
literal|16
argument_list|)
decl_stmt|;
name|val
operator|+=
name|project
operator|->
name|first
argument_list|(
name|varname
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|val
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|in
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|var
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"QMAKE_FUNC_FILE_IN_"
argument_list|)
argument_list|)
condition|)
block|{
name|filePath
operator|=
literal|true
expr_stmt|;
specifier|const
name|QString
name|funcname
init|=
name|var
operator|.
name|mid
argument_list|(
literal|19
argument_list|)
decl_stmt|;
name|val
operator|+=
name|project
operator|->
name|expand
argument_list|(
name|funcname
argument_list|,
name|QList
argument_list|<
name|QStringList
argument_list|>
argument_list|()
operator|<<
name|in
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|var
operator|==
name|QLatin1String
argument_list|(
literal|"QMAKE_FILE_BASE"
argument_list|)
operator|||
name|var
operator|==
name|QLatin1String
argument_list|(
literal|"QMAKE_FILE_IN_BASE"
argument_list|)
condition|)
block|{
comment|//filePath = true;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|in
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QFileInfo
name|fi
argument_list|(
name|fileInfo
argument_list|(
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|in
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|base
init|=
name|fi
operator|.
name|completeBaseName
argument_list|()
decl_stmt|;
if|if
condition|(
name|base
operator|.
name|isNull
argument_list|()
condition|)
name|base
operator|=
name|fi
operator|.
name|fileName
argument_list|()
expr_stmt|;
name|val
operator|+=
name|base
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|var
operator|==
name|QLatin1String
argument_list|(
literal|"QMAKE_FILE_EXT"
argument_list|)
condition|)
block|{
name|filePath
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|in
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QFileInfo
name|fi
argument_list|(
name|fileInfo
argument_list|(
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|in
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|ext
decl_stmt|;
comment|// Ensure complementarity with QMAKE_FILE_BASE
name|int
name|baseLen
init|=
name|fi
operator|.
name|completeBaseName
argument_list|()
operator|.
name|length
argument_list|()
decl_stmt|;
if|if
condition|(
name|baseLen
operator|==
literal|0
condition|)
name|ext
operator|=
name|fi
operator|.
name|fileName
argument_list|()
expr_stmt|;
else|else
name|ext
operator|=
name|fi
operator|.
name|fileName
argument_list|()
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
name|baseLen
argument_list|)
expr_stmt|;
name|val
operator|+=
name|ext
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|var
operator|==
name|QLatin1String
argument_list|(
literal|"QMAKE_FILE_PATH"
argument_list|)
operator|||
name|var
operator|==
name|QLatin1String
argument_list|(
literal|"QMAKE_FILE_IN_PATH"
argument_list|)
condition|)
block|{
name|filePath
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|in
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|val
operator|+=
name|fileInfo
argument_list|(
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|in
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
operator|.
name|path
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|var
operator|==
name|QLatin1String
argument_list|(
literal|"QMAKE_FILE_NAME"
argument_list|)
operator|||
name|var
operator|==
name|QLatin1String
argument_list|(
literal|"QMAKE_FILE_IN"
argument_list|)
condition|)
block|{
name|filePath
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|in
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|val
operator|+=
name|fileInfo
argument_list|(
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|in
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
operator|.
name|filePath
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|val
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|out
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|var
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"QMAKE_FUNC_FILE_OUT_"
argument_list|)
argument_list|)
condition|)
block|{
name|filePath
operator|=
literal|true
expr_stmt|;
specifier|const
name|QString
name|funcname
init|=
name|var
operator|.
name|mid
argument_list|(
literal|20
argument_list|)
decl_stmt|;
name|val
operator|+=
name|project
operator|->
name|expand
argument_list|(
name|funcname
argument_list|,
name|QList
argument_list|<
name|QStringList
argument_list|>
argument_list|()
operator|<<
name|out
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|var
operator|==
name|QLatin1String
argument_list|(
literal|"QMAKE_FILE_OUT"
argument_list|)
condition|)
block|{
name|filePath
operator|=
literal|true
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|out
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|val
operator|+=
name|fileInfo
argument_list|(
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|out
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
operator|.
name|filePath
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|var
operator|==
name|QLatin1String
argument_list|(
literal|"QMAKE_FILE_OUT_BASE"
argument_list|)
condition|)
block|{
comment|//filePath = true;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|out
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QFileInfo
name|fi
argument_list|(
name|fileInfo
argument_list|(
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|out
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|base
init|=
name|fi
operator|.
name|completeBaseName
argument_list|()
decl_stmt|;
if|if
condition|(
name|base
operator|.
name|isNull
argument_list|()
condition|)
name|base
operator|=
name|fi
operator|.
name|fileName
argument_list|()
expr_stmt|;
name|val
operator|+=
name|base
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|val
operator|.
name|isEmpty
argument_list|()
operator|&&
name|var
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"QMAKE_FUNC_"
argument_list|)
argument_list|)
condition|)
block|{
specifier|const
name|QString
name|funcname
init|=
name|var
operator|.
name|mid
argument_list|(
literal|11
argument_list|)
decl_stmt|;
name|val
operator|+=
name|project
operator|->
name|expand
argument_list|(
name|funcname
argument_list|,
name|QList
argument_list|<
name|QStringList
argument_list|>
argument_list|()
operator|<<
name|in
operator|<<
name|out
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|val
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QString
name|fullVal
decl_stmt|;
if|if
condition|(
name|filePath
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|val
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QString
name|file
init|=
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|unescapeFilePath
argument_list|(
name|val
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fullVal
operator|.
name|isEmpty
argument_list|()
condition|)
name|fullVal
operator|+=
literal|" "
expr_stmt|;
name|fullVal
operator|+=
name|escapeFilePath
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|fullVal
operator|=
name|val
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|ret
operator|.
name|replace
argument_list|(
name|rep
argument_list|,
name|reg_var
operator|.
name|matchedLength
argument_list|()
argument_list|,
name|fullVal
argument_list|)
expr_stmt|;
name|rep
operator|+=
name|fullVal
operator|.
name|length
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|rep
operator|+=
name|reg_var
operator|.
name|matchedLength
argument_list|()
expr_stmt|;
block|}
block|}
comment|//cache the value
name|extraCompilerVariablesCache
operator|.
name|insert
argument_list|(
name|cacheKey
argument_list|,
name|ret
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
name|bool
DECL|function|verifyExtraCompiler
name|MakefileGenerator
operator|::
name|verifyExtraCompiler
parameter_list|(
specifier|const
name|QString
modifier|&
name|comp
parameter_list|,
specifier|const
name|QString
modifier|&
name|file_unfixed
parameter_list|)
block|{
if|if
condition|(
name|noIO
argument_list|()
condition|)
return|return
literal|false
return|;
specifier|const
name|QString
name|file
init|=
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|file_unfixed
argument_list|)
decl_stmt|;
if|if
condition|(
name|project
operator|->
name|values
argument_list|(
name|comp
operator|+
literal|".CONFIG"
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|"moc_verify"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|QMakeSourceFileInfo
operator|::
name|addSourceFile
argument_list|(
name|file
argument_list|,
name|QMakeSourceFileInfo
operator|::
name|SEEK_MOCS
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|mocable
argument_list|(
name|file
argument_list|)
condition|)
block|{
return|return
literal|false
return|;
block|}
else|else
block|{
name|project
operator|->
name|values
argument_list|(
literal|"MOCABLES"
argument_list|)
operator|.
name|append
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|project
operator|->
name|values
argument_list|(
name|comp
operator|+
literal|".CONFIG"
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|"function_verify"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|QString
name|tmp_out
init|=
name|project
operator|->
name|values
argument_list|(
name|comp
operator|+
literal|".output"
argument_list|)
operator|.
name|first
argument_list|()
decl_stmt|;
if|if
condition|(
name|tmp_out
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
name|QStringList
name|verify_function
init|=
name|project
operator|->
name|values
argument_list|(
name|comp
operator|+
literal|".verify_function"
argument_list|)
decl_stmt|;
if|if
condition|(
name|verify_function
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|verify_function
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|bool
name|invert
init|=
literal|false
decl_stmt|;
name|QString
name|verify
init|=
name|verify_function
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|verify
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'!'
argument_list|)
condition|)
block|{
name|invert
operator|=
literal|true
expr_stmt|;
name|verify
operator|=
name|verify
operator|.
name|mid
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|project
operator|->
name|values
argument_list|(
name|comp
operator|+
literal|".CONFIG"
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|"combine"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|bool
name|pass
init|=
name|project
operator|->
name|test
argument_list|(
name|verify
argument_list|,
name|QList
argument_list|<
name|QStringList
argument_list|>
argument_list|()
operator|<<
name|QStringList
argument_list|(
name|tmp_out
argument_list|)
operator|<<
name|QStringList
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|invert
condition|)
name|pass
operator|=
operator|!
name|pass
expr_stmt|;
if|if
condition|(
operator|!
name|pass
condition|)
return|return
literal|false
return|;
block|}
else|else
block|{
specifier|const
name|QStringList
modifier|&
name|tmp
init|=
name|project
operator|->
name|values
argument_list|(
name|comp
operator|+
literal|".input"
argument_list|)
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|it
init|=
name|tmp
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|tmp
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
specifier|const
name|QStringList
modifier|&
name|inputs
init|=
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it
operator|)
argument_list|)
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|input
init|=
name|inputs
operator|.
name|begin
argument_list|()
init|;
name|input
operator|!=
name|inputs
operator|.
name|end
argument_list|()
condition|;
operator|++
name|input
control|)
block|{
if|if
condition|(
operator|(
operator|*
name|input
operator|)
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|QString
name|in
init|=
name|fileFixify
argument_list|(
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
operator|(
operator|*
name|input
operator|)
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|in
operator|==
name|file
condition|)
block|{
name|bool
name|pass
init|=
name|project
operator|->
name|test
argument_list|(
name|verify
argument_list|,
name|QList
argument_list|<
name|QStringList
argument_list|>
argument_list|()
operator|<<
name|QStringList
argument_list|(
name|replaceExtraCompilerVariables
argument_list|(
name|tmp_out
argument_list|,
operator|(
operator|*
name|input
operator|)
argument_list|,
name|QString
argument_list|()
argument_list|)
argument_list|)
operator|<<
name|QStringList
argument_list|(
name|file
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|invert
condition|)
name|pass
operator|=
operator|!
name|pass
expr_stmt|;
if|if
condition|(
operator|!
name|pass
condition|)
return|return
literal|false
return|;
break|break;
block|}
block|}
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|project
operator|->
name|values
argument_list|(
name|comp
operator|+
literal|".CONFIG"
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|"verify"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|QString
name|tmp_out
init|=
name|project
operator|->
name|values
argument_list|(
name|comp
operator|+
literal|".output"
argument_list|)
operator|.
name|first
argument_list|()
decl_stmt|;
if|if
condition|(
name|tmp_out
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
literal|false
return|;
name|QString
name|tmp_cmd
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
name|comp
operator|+
literal|".commands"
argument_list|)
condition|)
block|{
name|int
name|argv0
init|=
operator|-
literal|1
decl_stmt|;
name|QStringList
name|cmdline
init|=
name|project
operator|->
name|values
argument_list|(
name|comp
operator|+
literal|".commands"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cmdline
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|cmdline
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|contains
argument_list|(
literal|'='
argument_list|)
condition|)
block|{
name|argv0
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|argv0
operator|!=
operator|-
literal|1
condition|)
block|{
name|cmdline
index|[
name|argv0
index|]
operator|=
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|cmdline
operator|.
name|at
argument_list|(
name|argv0
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|tmp_cmd
operator|=
name|cmdline
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|project
operator|->
name|values
argument_list|(
name|comp
operator|+
literal|".CONFIG"
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|"combine"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|QString
name|cmd
init|=
name|replaceExtraCompilerVariables
argument_list|(
name|tmp_cmd
argument_list|,
name|QString
argument_list|()
argument_list|,
name|tmp_out
argument_list|)
decl_stmt|;
if|if
condition|(
name|system
argument_list|(
name|cmd
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
block|}
else|else
block|{
specifier|const
name|QStringList
modifier|&
name|tmp
init|=
name|project
operator|->
name|values
argument_list|(
name|comp
operator|+
literal|".input"
argument_list|)
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|it
init|=
name|tmp
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|tmp
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
specifier|const
name|QStringList
modifier|&
name|inputs
init|=
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it
operator|)
argument_list|)
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|input
init|=
name|inputs
operator|.
name|begin
argument_list|()
init|;
name|input
operator|!=
name|inputs
operator|.
name|end
argument_list|()
condition|;
operator|++
name|input
control|)
block|{
if|if
condition|(
operator|(
operator|*
name|input
operator|)
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|QString
name|in
init|=
name|fileFixify
argument_list|(
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
operator|(
operator|*
name|input
operator|)
argument_list|,
literal|false
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|in
operator|==
name|file
condition|)
block|{
name|QString
name|out
init|=
name|replaceExtraCompilerVariables
argument_list|(
name|tmp_out
argument_list|,
operator|(
operator|*
name|input
operator|)
argument_list|,
name|QString
argument_list|()
argument_list|)
decl_stmt|;
name|QString
name|cmd
init|=
name|replaceExtraCompilerVariables
argument_list|(
name|tmp_cmd
argument_list|,
name|in
argument_list|,
name|out
argument_list|)
decl_stmt|;
if|if
condition|(
name|system
argument_list|(
name|cmd
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
condition|)
return|return
literal|false
return|;
break|break;
block|}
block|}
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
name|void
DECL|function|writeExtraTargets
name|MakefileGenerator
operator|::
name|writeExtraTargets
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|)
block|{
specifier|const
name|QStringList
modifier|&
name|qut
init|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_EXTRA_TARGETS"
argument_list|)
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|it
init|=
name|qut
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|qut
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QString
name|targ
init|=
name|var
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".target"
argument_list|)
decl_stmt|,
name|cmd
init|=
name|var
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".commands"
argument_list|)
decl_stmt|,
name|deps
decl_stmt|;
if|if
condition|(
name|targ
operator|.
name|isEmpty
argument_list|()
condition|)
name|targ
operator|=
operator|(
operator|*
name|it
operator|)
expr_stmt|;
specifier|const
name|QStringList
modifier|&
name|deplist
init|=
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".depends"
argument_list|)
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|dep_it
init|=
name|deplist
operator|.
name|begin
argument_list|()
init|;
name|dep_it
operator|!=
name|deplist
operator|.
name|end
argument_list|()
condition|;
operator|++
name|dep_it
control|)
block|{
name|QString
name|dep
init|=
name|var
argument_list|(
operator|(
operator|*
name|dep_it
operator|)
operator|+
literal|".target"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dep
operator|.
name|isEmpty
argument_list|()
condition|)
name|dep
operator|=
operator|(
operator|*
name|dep_it
operator|)
expr_stmt|;
name|deps
operator|+=
literal|" "
operator|+
name|escapeDependencyPath
argument_list|(
name|dep
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".CONFIG"
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|"fix_target"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
name|targ
operator|=
name|fileFixify
argument_list|(
name|targ
argument_list|,
name|Option
operator|::
name|output_dir
argument_list|,
name|Option
operator|::
name|output_dir
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".CONFIG"
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|"phony"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
name|deps
operator|+=
name|QLatin1String
argument_list|(
literal|" FORCE"
argument_list|)
expr_stmt|;
name|t
operator|<<
name|escapeDependencyPath
argument_list|(
name|targ
argument_list|)
operator|<<
literal|":"
operator|<<
name|deps
expr_stmt|;
if|if
condition|(
operator|!
name|cmd
operator|.
name|isEmpty
argument_list|()
condition|)
name|t
operator|<<
literal|"\n\t"
operator|<<
name|cmd
expr_stmt|;
name|t
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
block|}
end_function
begin_function
name|void
DECL|function|writeExtraCompilerTargets
name|MakefileGenerator
operator|::
name|writeExtraCompilerTargets
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|)
block|{
name|QString
name|clean_targets
decl_stmt|;
specifier|const
name|QStringList
modifier|&
name|quc
init|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_EXTRA_COMPILERS"
argument_list|)
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|it
init|=
name|quc
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|quc
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QString
name|tmp_out
init|=
name|fileFixify
argument_list|(
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".output"
argument_list|)
operator|.
name|first
argument_list|()
argument_list|,
name|Option
operator|::
name|output_dir
argument_list|,
name|Option
operator|::
name|output_dir
argument_list|)
decl_stmt|;
name|QString
name|tmp_cmd
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".commands"
argument_list|)
condition|)
block|{
name|QStringList
name|cmdline
init|=
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".commands"
argument_list|)
decl_stmt|;
name|int
name|argv0
init|=
name|findExecutable
argument_list|(
name|cmdline
argument_list|)
decl_stmt|;
if|if
condition|(
name|argv0
operator|!=
operator|-
literal|1
condition|)
block|{
name|cmdline
index|[
name|argv0
index|]
operator|=
name|escapeFilePath
argument_list|(
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|cmdline
operator|.
name|at
argument_list|(
name|argv0
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|tmp_cmd
operator|=
name|cmdline
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
block|}
name|QStringList
name|tmp_dep
init|=
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".depends"
argument_list|)
decl_stmt|;
name|QString
name|tmp_dep_cmd
decl_stmt|;
name|QString
name|dep_cd_cmd
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".depend_command"
argument_list|)
condition|)
block|{
name|int
name|argv0
init|=
operator|-
literal|1
decl_stmt|;
name|QStringList
name|cmdline
init|=
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".depend_command"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cmdline
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|cmdline
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|contains
argument_list|(
literal|'='
argument_list|)
condition|)
block|{
name|argv0
operator|=
name|i
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|argv0
operator|!=
operator|-
literal|1
condition|)
block|{
specifier|const
name|QString
name|c
init|=
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|cmdline
operator|.
name|at
argument_list|(
name|argv0
argument_list|)
argument_list|,
literal|true
argument_list|)
decl_stmt|;
if|if
condition|(
name|exists
argument_list|(
name|c
argument_list|)
condition|)
block|{
name|cmdline
index|[
name|argv0
index|]
operator|=
name|escapeFilePath
argument_list|(
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|cmdline
operator|.
name|at
argument_list|(
name|argv0
argument_list|)
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|cmdline
index|[
name|argv0
index|]
operator|=
name|escapeFilePath
argument_list|(
name|cmdline
operator|.
name|at
argument_list|(
name|argv0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QFileInfo
name|cmdFileInfo
argument_list|(
name|cmdline
index|[
name|argv0
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|cmdFileInfo
operator|.
name|isAbsolute
argument_list|()
operator|||
name|cmdFileInfo
operator|.
name|exists
argument_list|()
condition|)
name|tmp_dep_cmd
operator|=
name|cmdline
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
block|}
name|dep_cd_cmd
operator|=
name|QLatin1String
argument_list|(
literal|"cd "
argument_list|)
operator|+
name|escapeFilePath
argument_list|(
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|Option
operator|::
name|output_dir
argument_list|,
literal|false
argument_list|)
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|"&& "
argument_list|)
expr_stmt|;
block|}
specifier|const
name|QStringList
modifier|&
name|vars
init|=
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".variables"
argument_list|)
decl_stmt|;
if|if
condition|(
name|tmp_out
operator|.
name|isEmpty
argument_list|()
operator|||
name|tmp_cmd
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|QStringList
name|tmp_inputs
decl_stmt|;
block|{
specifier|const
name|QStringList
modifier|&
name|comp_inputs
init|=
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".input"
argument_list|)
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|it2
init|=
name|comp_inputs
operator|.
name|begin
argument_list|()
init|;
name|it2
operator|!=
name|comp_inputs
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it2
control|)
block|{
specifier|const
name|QStringList
modifier|&
name|tmp
init|=
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it2
operator|)
argument_list|)
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|input
init|=
name|tmp
operator|.
name|begin
argument_list|()
init|;
name|input
operator|!=
name|tmp
operator|.
name|end
argument_list|()
condition|;
operator|++
name|input
control|)
block|{
name|QString
name|in
init|=
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
operator|(
operator|*
name|input
operator|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
if|if
condition|(
name|verifyExtraCompiler
argument_list|(
operator|(
operator|*
name|it
operator|)
argument_list|,
name|in
argument_list|)
condition|)
name|tmp_inputs
operator|.
name|append
argument_list|(
operator|(
operator|*
name|input
operator|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|t
operator|<<
literal|"compiler_"
operator|<<
operator|(
operator|*
name|it
operator|)
operator|<<
literal|"_make_all:"
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".CONFIG"
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|"combine"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// compilers with a combined input only have one output
name|QString
name|input
init|=
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".output"
argument_list|)
operator|.
name|first
argument_list|()
decl_stmt|;
name|t
operator|<<
literal|" "
operator|<<
name|escapeDependencyPath
argument_list|(
name|replaceExtraCompilerVariables
argument_list|(
name|tmp_out
argument_list|,
name|input
argument_list|,
name|QString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|input
init|=
name|tmp_inputs
operator|.
name|begin
argument_list|()
init|;
name|input
operator|!=
name|tmp_inputs
operator|.
name|end
argument_list|()
condition|;
operator|++
name|input
control|)
block|{
name|t
operator|<<
literal|" "
operator|<<
name|escapeDependencyPath
argument_list|(
name|replaceExtraCompilerVariables
argument_list|(
name|tmp_out
argument_list|,
operator|(
operator|*
name|input
operator|)
argument_list|,
name|QString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|t
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".CONFIG"
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|"no_clean"
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|QString
name|tmp_clean
init|=
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".clean"
argument_list|)
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
name|QString
name|tmp_clean_cmds
init|=
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".clean_commands"
argument_list|)
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tmp_inputs
operator|.
name|isEmpty
argument_list|()
condition|)
name|clean_targets
operator|+=
name|QString
argument_list|(
literal|"compiler_"
operator|+
operator|(
operator|*
name|it
operator|)
operator|+
literal|"_clean "
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"compiler_"
operator|<<
operator|(
operator|*
name|it
operator|)
operator|<<
literal|"_clean:"
expr_stmt|;
name|bool
name|wrote_clean_cmds
init|=
literal|false
decl_stmt|,
name|wrote_clean
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|tmp_clean_cmds
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|wrote_clean_cmds
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tmp_clean_cmds
operator|.
name|indexOf
argument_list|(
literal|"${QMAKE_"
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|t
operator|<<
literal|"\n\t"
operator|<<
name|tmp_clean_cmds
expr_stmt|;
name|wrote_clean_cmds
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|tmp_clean
operator|.
name|isEmpty
argument_list|()
condition|)
name|tmp_clean
operator|=
name|tmp_out
expr_stmt|;
if|if
condition|(
name|tmp_clean
operator|.
name|indexOf
argument_list|(
literal|"${QMAKE_"
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|t
operator|<<
literal|"\n\t"
operator|<<
literal|"-$(DEL_FILE) "
operator|<<
name|tmp_clean
expr_stmt|;
name|wrote_clean
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|wrote_clean_cmds
operator|||
operator|!
name|wrote_clean
condition|)
block|{
name|QStringList
name|cleans
decl_stmt|;
specifier|const
name|QString
name|del_statement
argument_list|(
literal|"-$(DEL_FILE)"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|wrote_clean
condition|)
block|{
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"no_delete_multiple_files"
argument_list|)
condition|)
block|{
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|input
init|=
name|tmp_inputs
operator|.
name|begin
argument_list|()
init|;
name|input
operator|!=
name|tmp_inputs
operator|.
name|end
argument_list|()
condition|;
operator|++
name|input
control|)
name|cleans
operator|.
name|append
argument_list|(
literal|" "
operator|+
name|replaceExtraCompilerVariables
argument_list|(
name|tmp_clean
argument_list|,
operator|(
operator|*
name|input
operator|)
argument_list|,
name|replaceExtraCompilerVariables
argument_list|(
name|tmp_out
argument_list|,
operator|(
operator|*
name|input
operator|)
argument_list|,
name|QString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QString
name|files
decl_stmt|,
name|file
decl_stmt|;
specifier|const
name|int
name|commandlineLimit
init|=
literal|2047
decl_stmt|;
comment|// NT limit, expanded
for|for
control|(
name|int
name|input
init|=
literal|0
init|;
name|input
operator|<
name|tmp_inputs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|input
control|)
block|{
name|file
operator|=
literal|" "
operator|+
name|replaceExtraCompilerVariables
argument_list|(
name|tmp_clean
argument_list|,
name|tmp_inputs
operator|.
name|at
argument_list|(
name|input
argument_list|)
argument_list|,
name|replaceExtraCompilerVariables
argument_list|(
name|tmp_out
argument_list|,
name|tmp_inputs
operator|.
name|at
argument_list|(
name|input
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|del_statement
operator|.
name|length
argument_list|()
operator|+
name|files
operator|.
name|length
argument_list|()
operator|+
name|qMax
argument_list|(
name|fixEnvVariables
argument_list|(
name|file
argument_list|)
operator|.
name|length
argument_list|()
argument_list|,
name|file
operator|.
name|length
argument_list|()
argument_list|)
operator|>
name|commandlineLimit
condition|)
block|{
name|cleans
operator|.
name|append
argument_list|(
name|files
argument_list|)
expr_stmt|;
name|files
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|files
operator|+=
name|file
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|files
operator|.
name|isEmpty
argument_list|()
condition|)
name|cleans
operator|.
name|append
argument_list|(
name|files
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|cleans
operator|.
name|isEmpty
argument_list|()
condition|)
name|t
operator|<<
name|valGlue
argument_list|(
name|cleans
argument_list|,
literal|"\n\t"
operator|+
name|del_statement
argument_list|,
literal|"\n\t"
operator|+
name|del_statement
argument_list|,
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|wrote_clean_cmds
condition|)
block|{
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|input
init|=
name|tmp_inputs
operator|.
name|begin
argument_list|()
init|;
name|input
operator|!=
name|tmp_inputs
operator|.
name|end
argument_list|()
condition|;
operator|++
name|input
control|)
block|{
name|t
operator|<<
literal|"\n\t"
operator|<<
name|replaceExtraCompilerVariables
argument_list|(
name|tmp_clean_cmds
argument_list|,
operator|(
operator|*
name|input
operator|)
argument_list|,
name|replaceExtraCompilerVariables
argument_list|(
name|tmp_out
argument_list|,
operator|(
operator|*
name|input
operator|)
argument_list|,
name|QString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|t
operator|<<
name|endl
expr_stmt|;
block|}
if|if
condition|(
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".CONFIG"
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|"combine"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|tmp_out
operator|.
name|indexOf
argument_list|(
literal|"${QMAKE_"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|warn_msg
argument_list|(
name|WarnLogic
argument_list|,
literal|"QMAKE_EXTRA_COMPILERS(%s) with combine has variable output."
argument_list|,
operator|(
operator|*
name|it
operator|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|QStringList
name|deps
decl_stmt|,
name|inputs
decl_stmt|;
if|if
condition|(
operator|!
name|tmp_dep
operator|.
name|isEmpty
argument_list|()
condition|)
name|deps
operator|+=
name|fileFixify
argument_list|(
name|tmp_dep
argument_list|,
name|Option
operator|::
name|output_dir
argument_list|,
name|Option
operator|::
name|output_dir
argument_list|)
expr_stmt|;
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|input
init|=
name|tmp_inputs
operator|.
name|begin
argument_list|()
init|;
name|input
operator|!=
name|tmp_inputs
operator|.
name|end
argument_list|()
condition|;
operator|++
name|input
control|)
block|{
name|deps
operator|+=
name|findDependencies
argument_list|(
operator|(
operator|*
name|input
operator|)
argument_list|)
expr_stmt|;
name|inputs
operator|+=
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
operator|(
operator|*
name|input
operator|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tmp_dep_cmd
operator|.
name|isEmpty
argument_list|()
operator|&&
name|doDepends
argument_list|()
condition|)
block|{
name|char
name|buff
index|[
literal|256
index|]
decl_stmt|;
name|QString
name|dep_cmd
init|=
name|replaceExtraCompilerVariables
argument_list|(
name|tmp_dep_cmd
argument_list|,
operator|(
operator|*
name|input
operator|)
argument_list|,
name|tmp_out
argument_list|)
decl_stmt|;
name|dep_cmd
operator|=
name|dep_cd_cmd
operator|+
name|fixEnvVariables
argument_list|(
name|dep_cmd
argument_list|)
expr_stmt|;
if|if
condition|(
name|FILE
modifier|*
name|proc
init|=
name|QT_POPEN
argument_list|(
name|dep_cmd
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
literal|"r"
argument_list|)
condition|)
block|{
name|QString
name|indeps
decl_stmt|;
while|while
condition|(
operator|!
name|feof
argument_list|(
name|proc
argument_list|)
condition|)
block|{
name|int
name|read_in
init|=
operator|(
name|int
operator|)
name|fread
argument_list|(
name|buff
argument_list|,
literal|1
argument_list|,
literal|255
argument_list|,
name|proc
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|read_in
condition|)
break|break;
name|indeps
operator|+=
name|QByteArray
argument_list|(
name|buff
argument_list|,
name|read_in
argument_list|)
expr_stmt|;
block|}
name|QT_PCLOSE
argument_list|(
name|proc
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|indeps
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QStringList
name|dep_cmd_deps
init|=
name|indeps
operator|.
name|replace
argument_list|(
literal|'\n'
argument_list|,
literal|' '
argument_list|)
operator|.
name|simplified
argument_list|()
operator|.
name|split
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dep_cmd_deps
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
modifier|&
name|file
init|=
name|dep_cmd_deps
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|exists
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|QString
name|localFile
decl_stmt|;
name|QList
argument_list|<
name|QMakeLocalFileName
argument_list|>
name|depdirs
init|=
name|QMakeSourceFileInfo
operator|::
name|dependencyPaths
argument_list|()
decl_stmt|;
for|for
control|(
name|QList
argument_list|<
name|QMakeLocalFileName
argument_list|>
operator|::
name|Iterator
name|it
init|=
name|depdirs
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|depdirs
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
name|exists
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|.
name|real
argument_list|()
operator|+
name|Option
operator|::
name|dir_sep
operator|+
name|file
argument_list|)
condition|)
block|{
name|localFile
operator|=
operator|(
operator|*
name|it
operator|)
operator|.
name|local
argument_list|()
operator|+
name|Option
operator|::
name|dir_sep
operator|+
name|file
expr_stmt|;
break|break;
block|}
block|}
name|file
operator|=
name|localFile
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|file
operator|.
name|isEmpty
argument_list|()
condition|)
name|file
operator|=
name|fileFixify
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
name|deps
operator|+=
name|dep_cmd_deps
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|inputs
operator|.
name|size
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
name|tmp_out
operator|==
name|inputs
operator|.
name|at
argument_list|(
name|i
argument_list|)
condition|)
name|inputs
operator|.
name|removeAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
else|else
operator|++
name|i
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|deps
operator|.
name|size
argument_list|()
condition|;
control|)
block|{
if|if
condition|(
name|tmp_out
operator|==
name|deps
operator|.
name|at
argument_list|(
name|i
argument_list|)
condition|)
name|deps
operator|.
name|removeAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
else|else
operator|++
name|i
expr_stmt|;
block|}
if|if
condition|(
name|inputs
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|QString
name|cmd
init|=
name|replaceExtraCompilerVariables
argument_list|(
name|tmp_cmd
argument_list|,
name|escapeFilePaths
argument_list|(
name|inputs
argument_list|)
argument_list|,
name|QStringList
argument_list|(
name|tmp_out
argument_list|)
argument_list|)
decl_stmt|;
name|t
operator|<<
name|escapeDependencyPath
argument_list|(
name|tmp_out
argument_list|)
operator|<<
literal|":"
expr_stmt|;
comment|// compiler.CONFIG+=explicit_dependencies means that ONLY compiler.depends gets to cause Makefile dependencies
if|if
condition|(
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".CONFIG"
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|"explicit_dependencies"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|t
operator|<<
literal|" "
operator|<<
name|valList
argument_list|(
name|escapeDependencyPaths
argument_list|(
name|fileFixify
argument_list|(
name|tmp_dep
argument_list|,
name|Option
operator|::
name|output_dir
argument_list|,
name|Option
operator|::
name|output_dir
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|t
operator|<<
literal|" "
operator|<<
name|valList
argument_list|(
name|escapeDependencyPaths
argument_list|(
name|inputs
argument_list|)
argument_list|)
operator|<<
literal|" "
operator|<<
name|valList
argument_list|(
name|escapeDependencyPaths
argument_list|(
name|deps
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|t
operator|<<
literal|"\n\t"
operator|<<
name|cmd
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
continue|continue;
block|}
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|input
init|=
name|tmp_inputs
operator|.
name|begin
argument_list|()
init|;
name|input
operator|!=
name|tmp_inputs
operator|.
name|end
argument_list|()
condition|;
operator|++
name|input
control|)
block|{
name|QString
name|in
init|=
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
operator|(
operator|*
name|input
operator|)
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|QStringList
name|deps
init|=
name|findDependencies
argument_list|(
operator|(
operator|*
name|input
operator|)
argument_list|)
decl_stmt|;
name|deps
operator|+=
name|escapeDependencyPath
argument_list|(
name|in
argument_list|)
expr_stmt|;
name|QString
name|out
init|=
name|replaceExtraCompilerVariables
argument_list|(
name|tmp_out
argument_list|,
operator|(
operator|*
name|input
operator|)
argument_list|,
name|QString
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|tmp_dep
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QStringList
name|pre_deps
init|=
name|fileFixify
argument_list|(
name|tmp_dep
argument_list|,
name|Option
operator|::
name|output_dir
argument_list|,
name|Option
operator|::
name|output_dir
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pre_deps
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|deps
operator|+=
name|replaceExtraCompilerVariables
argument_list|(
name|pre_deps
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
operator|(
operator|*
name|input
operator|)
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
name|QString
name|cmd
init|=
name|replaceExtraCompilerVariables
argument_list|(
name|tmp_cmd
argument_list|,
operator|(
operator|*
name|input
operator|)
argument_list|,
name|out
argument_list|)
decl_stmt|;
comment|// NOTE: The var -> QMAKE_COMP_var replace feature is unsupported, do not use!
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|it3
init|=
name|vars
operator|.
name|constBegin
argument_list|()
init|;
name|it3
operator|!=
name|vars
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|it3
control|)
name|cmd
operator|.
name|replace
argument_list|(
literal|"$("
operator|+
operator|(
operator|*
name|it3
operator|)
operator|+
literal|")"
argument_list|,
literal|"$(QMAKE_COMP_"
operator|+
operator|(
operator|*
name|it3
operator|)
operator|+
literal|")"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tmp_dep_cmd
operator|.
name|isEmpty
argument_list|()
operator|&&
name|doDepends
argument_list|()
condition|)
block|{
name|char
name|buff
index|[
literal|256
index|]
decl_stmt|;
name|QString
name|dep_cmd
init|=
name|replaceExtraCompilerVariables
argument_list|(
name|tmp_dep_cmd
argument_list|,
operator|(
operator|*
name|input
operator|)
argument_list|,
name|out
argument_list|)
decl_stmt|;
name|dep_cmd
operator|=
name|dep_cd_cmd
operator|+
name|fixEnvVariables
argument_list|(
name|dep_cmd
argument_list|)
expr_stmt|;
if|if
condition|(
name|FILE
modifier|*
name|proc
init|=
name|QT_POPEN
argument_list|(
name|dep_cmd
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
literal|"r"
argument_list|)
condition|)
block|{
name|QString
name|indeps
decl_stmt|;
while|while
condition|(
operator|!
name|feof
argument_list|(
name|proc
argument_list|)
condition|)
block|{
name|int
name|read_in
init|=
operator|(
name|int
operator|)
name|fread
argument_list|(
name|buff
argument_list|,
literal|1
argument_list|,
literal|255
argument_list|,
name|proc
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|read_in
condition|)
break|break;
name|indeps
operator|+=
name|QByteArray
argument_list|(
name|buff
argument_list|,
name|read_in
argument_list|)
expr_stmt|;
block|}
name|QT_PCLOSE
argument_list|(
name|proc
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|indeps
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QStringList
name|dep_cmd_deps
init|=
name|indeps
operator|.
name|replace
argument_list|(
literal|'\n'
argument_list|,
literal|' '
argument_list|)
operator|.
name|simplified
argument_list|()
operator|.
name|split
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|dep_cmd_deps
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
modifier|&
name|file
init|=
name|dep_cmd_deps
index|[
name|i
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|exists
argument_list|(
name|file
argument_list|)
condition|)
block|{
name|QString
name|localFile
decl_stmt|;
name|QList
argument_list|<
name|QMakeLocalFileName
argument_list|>
name|depdirs
init|=
name|QMakeSourceFileInfo
operator|::
name|dependencyPaths
argument_list|()
decl_stmt|;
for|for
control|(
name|QList
argument_list|<
name|QMakeLocalFileName
argument_list|>
operator|::
name|Iterator
name|it
init|=
name|depdirs
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|depdirs
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
name|exists
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|.
name|real
argument_list|()
operator|+
name|Option
operator|::
name|dir_sep
operator|+
name|file
argument_list|)
condition|)
block|{
name|localFile
operator|=
operator|(
operator|*
name|it
operator|)
operator|.
name|local
argument_list|()
operator|+
name|Option
operator|::
name|dir_sep
operator|+
name|file
expr_stmt|;
break|break;
block|}
block|}
name|file
operator|=
name|localFile
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|file
operator|.
name|isEmpty
argument_list|()
condition|)
name|file
operator|=
name|fileFixify
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
name|deps
operator|+=
name|dep_cmd_deps
expr_stmt|;
block|}
block|}
comment|//use the depend system to find includes of these included files
name|QStringList
name|inc_deps
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|deps
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QString
name|dep
init|=
name|deps
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|QFile
operator|::
name|exists
argument_list|(
name|dep
argument_list|)
condition|)
block|{
name|SourceFileType
name|type
init|=
name|TYPE_UNKNOWN
decl_stmt|;
if|if
condition|(
name|type
operator|==
name|TYPE_UNKNOWN
condition|)
block|{
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|cit
init|=
name|Option
operator|::
name|c_ext
operator|.
name|begin
argument_list|()
init|;
name|cit
operator|!=
name|Option
operator|::
name|c_ext
operator|.
name|end
argument_list|()
condition|;
operator|++
name|cit
control|)
block|{
if|if
condition|(
name|dep
operator|.
name|endsWith
argument_list|(
operator|(
operator|*
name|cit
operator|)
argument_list|)
condition|)
block|{
name|type
operator|=
name|TYPE_C
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|type
operator|==
name|TYPE_UNKNOWN
condition|)
block|{
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|cppit
init|=
name|Option
operator|::
name|cpp_ext
operator|.
name|begin
argument_list|()
init|;
name|cppit
operator|!=
name|Option
operator|::
name|cpp_ext
operator|.
name|end
argument_list|()
condition|;
operator|++
name|cppit
control|)
block|{
if|if
condition|(
name|dep
operator|.
name|endsWith
argument_list|(
operator|(
operator|*
name|cppit
operator|)
argument_list|)
condition|)
block|{
name|type
operator|=
name|TYPE_C
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|type
operator|==
name|TYPE_UNKNOWN
condition|)
block|{
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|hit
init|=
name|Option
operator|::
name|h_ext
operator|.
name|begin
argument_list|()
init|;
name|type
operator|==
name|TYPE_UNKNOWN
operator|&&
name|hit
operator|!=
name|Option
operator|::
name|h_ext
operator|.
name|end
argument_list|()
condition|;
operator|++
name|hit
control|)
block|{
if|if
condition|(
name|dep
operator|.
name|endsWith
argument_list|(
operator|(
operator|*
name|hit
operator|)
argument_list|)
condition|)
block|{
name|type
operator|=
name|TYPE_C
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|type
operator|!=
name|TYPE_UNKNOWN
condition|)
block|{
if|if
condition|(
operator|!
name|QMakeSourceFileInfo
operator|::
name|containsSourceFile
argument_list|(
name|dep
argument_list|,
name|type
argument_list|)
condition|)
name|QMakeSourceFileInfo
operator|::
name|addSourceFile
argument_list|(
name|dep
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|inc_deps
operator|+=
name|QMakeSourceFileInfo
operator|::
name|dependencies
argument_list|(
name|dep
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|deps
operator|+=
name|inc_deps
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|deps
operator|.
name|size
argument_list|()
condition|;
control|)
block|{
name|QString
modifier|&
name|dep
init|=
name|deps
index|[
name|i
index|]
decl_stmt|;
name|dep
operator|=
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|unescapeFilePath
argument_list|(
name|dep
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|out
operator|==
name|dep
condition|)
name|deps
operator|.
name|removeAt
argument_list|(
name|i
argument_list|)
expr_stmt|;
else|else
operator|++
name|i
expr_stmt|;
block|}
name|t
operator|<<
name|escapeDependencyPath
argument_list|(
name|out
argument_list|)
operator|<<
literal|": "
operator|<<
name|valList
argument_list|(
name|escapeDependencyPaths
argument_list|(
name|deps
argument_list|)
argument_list|)
operator|<<
literal|"\n\t"
operator|<<
name|cmd
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
block|}
name|t
operator|<<
literal|"compiler_clean: "
operator|<<
name|clean_targets
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
end_function
begin_function
name|void
DECL|function|writeExtraCompilerVariables
name|MakefileGenerator
operator|::
name|writeExtraCompilerVariables
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|)
block|{
name|bool
name|first
init|=
literal|true
decl_stmt|;
specifier|const
name|QStringList
modifier|&
name|quc
init|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_EXTRA_COMPILERS"
argument_list|)
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|it
init|=
name|quc
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|quc
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
specifier|const
name|QStringList
modifier|&
name|vars
init|=
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".variables"
argument_list|)
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|varit
init|=
name|vars
operator|.
name|begin
argument_list|()
init|;
name|varit
operator|!=
name|vars
operator|.
name|end
argument_list|()
condition|;
operator|++
name|varit
control|)
block|{
if|if
condition|(
name|first
condition|)
block|{
name|t
operator|<<
literal|"\n####### Custom Compiler Variables"
operator|<<
name|endl
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
block|}
name|t
operator|<<
literal|"QMAKE_COMP_"
operator|<<
operator|(
operator|*
name|varit
operator|)
operator|<<
literal|" = "
operator|<<
name|valList
argument_list|(
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|varit
operator|)
argument_list|)
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|first
condition|)
name|t
operator|<<
name|endl
expr_stmt|;
block|}
end_function
begin_function
name|void
DECL|function|writeExtraVariables
name|MakefileGenerator
operator|::
name|writeExtraVariables
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|)
block|{
name|t
operator|<<
name|endl
expr_stmt|;
name|QStringList
name|outlist
decl_stmt|;
specifier|const
name|QHash
argument_list|<
name|QString
argument_list|,
name|QStringList
argument_list|>
modifier|&
name|vars
init|=
name|project
operator|->
name|variables
argument_list|()
decl_stmt|;
specifier|const
name|QStringList
modifier|&
name|exports
init|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_EXTRA_VARIABLES"
argument_list|)
decl_stmt|;
for|for
control|(
name|QHash
argument_list|<
name|QString
argument_list|,
name|QStringList
argument_list|>
operator|::
name|ConstIterator
name|it
init|=
name|vars
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|vars
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|exp_it
init|=
name|exports
operator|.
name|begin
argument_list|()
init|;
name|exp_it
operator|!=
name|exports
operator|.
name|end
argument_list|()
condition|;
operator|++
name|exp_it
control|)
block|{
name|QRegExp
name|rx
argument_list|(
operator|(
operator|*
name|exp_it
operator|)
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|,
name|QRegExp
operator|::
name|Wildcard
argument_list|)
decl_stmt|;
if|if
condition|(
name|rx
operator|.
name|exactMatch
argument_list|(
name|it
operator|.
name|key
argument_list|()
argument_list|)
condition|)
name|outlist
operator|<<
operator|(
literal|"EXPORT_"
operator|+
name|it
operator|.
name|key
argument_list|()
operator|+
literal|" = "
operator|+
name|it
operator|.
name|value
argument_list|()
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
operator|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|outlist
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|t
operator|<<
literal|"####### Custom Variables"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|outlist
operator|.
name|join
argument_list|(
literal|"\n"
argument_list|)
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
block|}
end_function
begin_function
name|bool
DECL|function|writeStubMakefile
name|MakefileGenerator
operator|::
name|writeStubMakefile
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|)
block|{
name|t
operator|<<
literal|"QMAKE    = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_QMAKE"
argument_list|)
operator|<<
name|endl
expr_stmt|;
specifier|const
name|QStringList
modifier|&
name|qut
init|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_EXTRA_TARGETS"
argument_list|)
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|it
init|=
name|qut
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|qut
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
name|t
operator|<<
operator|*
name|it
operator|<<
literal|" "
expr_stmt|;
comment|//const QString ofile = Option::fixPathToTargetOS(fileFixify(Option::output.fileName()));
name|t
operator|<<
literal|"first all clean install distclean uninstall: "
operator|<<
literal|"qmake"
operator|<<
name|endl
operator|<<
literal|"qmake_all:"
operator|<<
name|endl
expr_stmt|;
name|writeMakeQmake
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"FORCE:"
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
name|bool
DECL|function|writeMakefile
name|MakefileGenerator
operator|::
name|writeMakefile
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|)
block|{
name|t
operator|<<
literal|"####### Compile"
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|writeObj
argument_list|(
name|t
argument_list|,
literal|"SOURCES"
argument_list|)
expr_stmt|;
name|writeObj
argument_list|(
name|t
argument_list|,
literal|"GENERATED_SOURCES"
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"####### Install"
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|writeInstalls
argument_list|(
name|t
argument_list|,
literal|"INSTALLS"
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"FORCE:"
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|fixifySpecdir
name|QString
name|MakefileGenerator
operator|::
name|fixifySpecdir
parameter_list|(
specifier|const
name|QString
modifier|&
name|spec
parameter_list|,
specifier|const
name|QString
modifier|&
name|outdir
parameter_list|)
block|{
if|if
condition|(
name|QFileInfo
argument_list|(
name|spec
argument_list|)
operator|.
name|isAbsolute
argument_list|()
condition|)
return|return
name|fileFixify
argument_list|(
name|spec
argument_list|,
name|outdir
argument_list|)
return|;
return|return
name|spec
return|;
block|}
end_function
begin_function
DECL|function|buildArgs
name|QString
name|MakefileGenerator
operator|::
name|buildArgs
parameter_list|()
block|{
name|QString
name|ret
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|arg
decl|,
name|Option
operator|::
name|qmake_args
control|)
name|ret
operator|+=
literal|" "
operator|+
name|escapeFilePath
argument_list|(
name|arg
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_comment
comment|//could get stored argv, but then it would have more options than are
end_comment
begin_comment
comment|//probably necesary this will try to guess the bare minimum..
end_comment
begin_function
DECL|function|build_args
name|QString
name|MakefileGenerator
operator|::
name|build_args
parameter_list|(
specifier|const
name|QString
modifier|&
name|outdir
parameter_list|)
block|{
name|QString
name|ret
init|=
literal|"$(QMAKE)"
decl_stmt|;
comment|// general options and arguments
name|ret
operator|+=
name|buildArgs
argument_list|()
expr_stmt|;
comment|//output
name|QString
name|ofile
init|=
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|fileFixify
argument_list|(
name|Option
operator|::
name|output
operator|.
name|fileName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ofile
operator|.
name|isEmpty
argument_list|()
operator|&&
name|ofile
operator|!=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_MAKEFILE"
argument_list|)
condition|)
name|ret
operator|+=
literal|" -o "
operator|+
name|escapeFilePath
argument_list|(
name|ofile
argument_list|)
expr_stmt|;
comment|//inputs
name|ret
operator|+=
literal|" "
operator|+
name|escapeFilePath
argument_list|(
name|fileFixify
argument_list|(
name|project
operator|->
name|projectFile
argument_list|()
argument_list|,
name|outdir
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
name|void
DECL|function|writeHeader
name|MakefileGenerator
operator|::
name|writeHeader
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|)
block|{
name|t
operator|<<
literal|"#############################################################################"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"# Makefile for building: "
operator|<<
name|escapeFilePath
argument_list|(
name|var
argument_list|(
literal|"TARGET"
argument_list|)
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"# Generated by qmake ("
operator|<<
name|qmake_version
argument_list|()
operator|<<
literal|") (Qt "
operator|<<
name|QT_VERSION_STR
operator|<<
literal|") on: "
expr_stmt|;
name|t
operator|<<
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
operator|.
name|toString
argument_list|()
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"# Project:  "
operator|<<
name|fileFixify
argument_list|(
name|project
operator|->
name|projectFile
argument_list|()
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"# Template: "
operator|<<
name|var
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"build_pass"
argument_list|)
condition|)
name|t
operator|<<
literal|"# Command: "
operator|<<
name|build_args
argument_list|()
operator|.
name|replace
argument_list|(
literal|"$(QMAKE)"
argument_list|,
name|var
argument_list|(
literal|"QMAKE_QMAKE"
argument_list|)
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"#############################################################################"
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
block|}
end_function
begin_function
name|QList
argument_list|<
name|MakefileGenerator
operator|::
name|SubTarget
operator|*
argument_list|>
DECL|function|findSubDirsSubTargets
name|MakefileGenerator
operator|::
name|findSubDirsSubTargets
parameter_list|()
specifier|const
block|{
name|QList
argument_list|<
name|SubTarget
modifier|*
argument_list|>
name|targets
decl_stmt|;
block|{
specifier|const
name|QStringList
name|subdirs
init|=
name|project
operator|->
name|values
argument_list|(
literal|"SUBDIRS"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|subdir
init|=
literal|0
init|;
name|subdir
operator|<
name|subdirs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|subdir
control|)
block|{
name|QString
name|fixedSubdir
init|=
name|subdirs
index|[
name|subdir
index|]
decl_stmt|;
name|fixedSubdir
operator|=
name|fixedSubdir
operator|.
name|replace
argument_list|(
name|QRegExp
argument_list|(
literal|"[^a-zA-Z0-9_]"
argument_list|)
argument_list|,
literal|"-"
argument_list|)
expr_stmt|;
name|SubTarget
modifier|*
name|st
init|=
operator|new
name|SubTarget
decl_stmt|;
name|st
operator|->
name|name
operator|=
name|subdirs
index|[
name|subdir
index|]
expr_stmt|;
name|targets
operator|.
name|append
argument_list|(
name|st
argument_list|)
expr_stmt|;
name|bool
name|fromFile
init|=
literal|false
decl_stmt|;
name|QString
name|file
init|=
name|subdirs
index|[
name|subdir
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
name|fixedSubdir
operator|+
literal|".file"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
name|fixedSubdir
operator|+
literal|".subdir"
argument_list|)
condition|)
name|warn_msg
argument_list|(
name|WarnLogic
argument_list|,
literal|"Cannot assign both file and subdir for subdir %s"
argument_list|,
name|subdirs
index|[
name|subdir
index|]
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|file
operator|=
name|project
operator|->
name|first
argument_list|(
name|fixedSubdir
operator|+
literal|".file"
argument_list|)
expr_stmt|;
name|fromFile
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
name|fixedSubdir
operator|+
literal|".subdir"
argument_list|)
condition|)
block|{
name|file
operator|=
name|project
operator|->
name|first
argument_list|(
name|fixedSubdir
operator|+
literal|".subdir"
argument_list|)
expr_stmt|;
name|fromFile
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|fromFile
operator|=
name|file
operator|.
name|endsWith
argument_list|(
name|Option
operator|::
name|pro_ext
argument_list|)
expr_stmt|;
block|}
name|file
operator|=
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|file
argument_list|)
expr_stmt|;
if|if
condition|(
name|fromFile
condition|)
block|{
name|int
name|slsh
init|=
name|file
operator|.
name|lastIndexOf
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
decl_stmt|;
if|if
condition|(
name|slsh
operator|!=
operator|-
literal|1
condition|)
block|{
name|st
operator|->
name|in_directory
operator|=
name|file
operator|.
name|left
argument_list|(
name|slsh
operator|+
literal|1
argument_list|)
expr_stmt|;
name|st
operator|->
name|profile
operator|=
name|file
operator|.
name|mid
argument_list|(
name|slsh
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|st
operator|->
name|profile
operator|=
name|file
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|file
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"subdir_first_pro"
argument_list|)
condition|)
name|st
operator|->
name|profile
operator|=
name|file
operator|.
name|section
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|,
operator|-
literal|1
argument_list|)
operator|+
name|Option
operator|::
name|pro_ext
expr_stmt|;
name|st
operator|->
name|in_directory
operator|=
name|file
expr_stmt|;
block|}
while|while
condition|(
name|st
operator|->
name|in_directory
operator|.
name|endsWith
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
condition|)
name|st
operator|->
name|in_directory
operator|.
name|chop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileInfo
argument_list|(
name|st
operator|->
name|in_directory
argument_list|)
operator|.
name|isRelative
argument_list|()
condition|)
name|st
operator|->
name|out_directory
operator|=
name|st
operator|->
name|in_directory
expr_stmt|;
else|else
name|st
operator|->
name|out_directory
operator|=
name|fileFixify
argument_list|(
name|st
operator|->
name|in_directory
argument_list|,
name|qmake_getpwd
argument_list|()
argument_list|,
name|Option
operator|::
name|output_dir
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
name|fixedSubdir
operator|+
literal|".makefile"
argument_list|)
condition|)
block|{
name|st
operator|->
name|makefile
operator|=
name|project
operator|->
name|first
argument_list|(
name|fixedSubdir
operator|+
literal|".makefile"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|st
operator|->
name|makefile
operator|=
literal|"Makefile"
expr_stmt|;
if|if
condition|(
operator|!
name|st
operator|->
name|profile
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QString
name|basename
init|=
name|st
operator|->
name|in_directory
decl_stmt|;
name|int
name|new_slsh
init|=
name|basename
operator|.
name|lastIndexOf
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
decl_stmt|;
if|if
condition|(
name|new_slsh
operator|!=
operator|-
literal|1
condition|)
name|basename
operator|=
name|basename
operator|.
name|mid
argument_list|(
name|new_slsh
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|st
operator|->
name|profile
operator|!=
name|basename
operator|+
name|Option
operator|::
name|pro_ext
condition|)
name|st
operator|->
name|makefile
operator|+=
literal|"."
operator|+
name|st
operator|->
name|profile
operator|.
name|left
argument_list|(
name|st
operator|->
name|profile
operator|.
name|length
argument_list|()
operator|-
name|Option
operator|::
name|pro_ext
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
name|fixedSubdir
operator|+
literal|".depends"
argument_list|)
condition|)
block|{
specifier|const
name|QStringList
name|depends
init|=
name|project
operator|->
name|values
argument_list|(
name|fixedSubdir
operator|+
literal|".depends"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|depend
init|=
literal|0
init|;
name|depend
operator|<
name|depends
operator|.
name|size
argument_list|()
condition|;
operator|++
name|depend
control|)
block|{
name|bool
name|found
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|subDep
init|=
literal|0
init|;
name|subDep
operator|<
name|subdirs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|subDep
control|)
block|{
if|if
condition|(
name|subdirs
index|[
name|subDep
index|]
operator|==
name|depends
operator|.
name|at
argument_list|(
name|depend
argument_list|)
condition|)
block|{
name|QString
name|fixedSubDep
init|=
name|subdirs
index|[
name|subDep
index|]
decl_stmt|;
name|fixedSubDep
operator|=
name|fixedSubDep
operator|.
name|replace
argument_list|(
name|QRegExp
argument_list|(
literal|"[^a-zA-Z0-9_]"
argument_list|)
argument_list|,
literal|"-"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
name|fixedSubDep
operator|+
literal|".target"
argument_list|)
condition|)
block|{
name|st
operator|->
name|depends
operator|+=
name|project
operator|->
name|first
argument_list|(
name|fixedSubDep
operator|+
literal|".target"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QString
name|d
init|=
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|subdirs
index|[
name|subDep
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
name|fixedSubDep
operator|+
literal|".file"
argument_list|)
condition|)
name|d
operator|=
name|project
operator|->
name|first
argument_list|(
name|fixedSubDep
operator|+
literal|".file"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
name|fixedSubDep
operator|+
literal|".subdir"
argument_list|)
condition|)
name|d
operator|=
name|project
operator|->
name|first
argument_list|(
name|fixedSubDep
operator|+
literal|".subdir"
argument_list|)
expr_stmt|;
name|st
operator|->
name|depends
operator|+=
literal|"sub-"
operator|+
name|d
operator|.
name|replace
argument_list|(
name|QRegExp
argument_list|(
literal|"[^a-zA-Z0-9_]"
argument_list|)
argument_list|,
literal|"-"
argument_list|)
expr_stmt|;
block|}
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|found
condition|)
block|{
name|QString
name|depend_str
init|=
name|depends
operator|.
name|at
argument_list|(
name|depend
argument_list|)
decl_stmt|;
name|st
operator|->
name|depends
operator|+=
name|depend_str
operator|.
name|replace
argument_list|(
name|QRegExp
argument_list|(
literal|"[^a-zA-Z0-9_]"
argument_list|)
argument_list|,
literal|"-"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
name|fixedSubdir
operator|+
literal|".target"
argument_list|)
condition|)
block|{
name|st
operator|->
name|target
operator|=
name|project
operator|->
name|first
argument_list|(
name|fixedSubdir
operator|+
literal|".target"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|st
operator|->
name|target
operator|=
literal|"sub-"
operator|+
name|file
expr_stmt|;
name|st
operator|->
name|target
operator|=
name|st
operator|->
name|target
operator|.
name|replace
argument_list|(
name|QRegExp
argument_list|(
literal|"[^a-zA-Z0-9_]"
argument_list|)
argument_list|,
literal|"-"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
return|return
name|targets
return|;
block|}
end_function
begin_function
name|void
DECL|function|writeSubDirs
name|MakefileGenerator
operator|::
name|writeSubDirs
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|)
block|{
name|QList
argument_list|<
name|SubTarget
modifier|*
argument_list|>
name|targets
init|=
name|findSubDirsSubTargets
argument_list|()
decl_stmt|;
name|t
operator|<<
literal|"first: make_first"
operator|<<
name|endl
expr_stmt|;
name|int
name|flags
init|=
name|SubTargetInstalls
decl_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"ordered"
argument_list|)
condition|)
name|flags
operator||=
name|SubTargetOrdered
expr_stmt|;
name|writeSubTargets
argument_list|(
name|t
argument_list|,
name|targets
argument_list|,
name|flags
argument_list|)
expr_stmt|;
name|qDeleteAll
argument_list|(
name|targets
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeSubMakeCall
name|void
name|MakefileGenerator
operator|::
name|writeSubMakeCall
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|,
specifier|const
name|QString
modifier|&
name|callPrefix
parameter_list|,
specifier|const
name|QString
modifier|&
name|makeArguments
parameter_list|)
block|{
name|t
operator|<<
name|callPrefix
operator|<<
literal|"$(MAKE)"
operator|<<
name|makeArguments
operator|<<
name|endl
expr_stmt|;
block|}
end_function
begin_function
name|void
DECL|function|writeSubTargetCall
name|MakefileGenerator
operator|::
name|writeSubTargetCall
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|,
specifier|const
name|QString
modifier|&
name|in_directory
parameter_list|,
specifier|const
name|QString
modifier|&
name|in
parameter_list|,
specifier|const
name|QString
modifier|&
name|out_directory
parameter_list|,
specifier|const
name|QString
modifier|&
name|out
parameter_list|,
specifier|const
name|QString
modifier|&
name|out_directory_cdin
parameter_list|,
specifier|const
name|QString
modifier|&
name|makefilein
parameter_list|)
block|{
name|QString
name|pfx
decl_stmt|;
if|if
condition|(
operator|!
name|in
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|in_directory
operator|.
name|isEmpty
argument_list|()
condition|)
name|t
operator|<<
literal|"\n\t"
operator|<<
name|mkdir_p_asstring
argument_list|(
name|out_directory
argument_list|)
expr_stmt|;
name|pfx
operator|=
literal|"( "
operator|+
name|chkfile
operator|+
literal|" "
operator|+
name|out
operator|+
literal|" "
operator|+
name|chkglue
operator|+
literal|"$(QMAKE) "
operator|+
name|in
operator|+
name|buildArgs
argument_list|()
operator|+
literal|" -o "
operator|+
name|out
operator|+
literal|" )&& "
expr_stmt|;
block|}
name|writeSubMakeCall
argument_list|(
name|t
argument_list|,
name|out_directory_cdin
operator|+
name|pfx
argument_list|,
name|makefilein
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
DECL|function|writeSubTargets
name|MakefileGenerator
operator|::
name|writeSubTargets
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|,
name|QList
argument_list|<
name|MakefileGenerator
operator|::
name|SubTarget
operator|*
argument_list|>
name|targets
parameter_list|,
name|int
name|flags
parameter_list|)
block|{
comment|// blasted includes
specifier|const
name|QStringList
modifier|&
name|qeui
init|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_EXTRA_INCLUDES"
argument_list|)
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|qeui_it
init|=
name|qeui
operator|.
name|begin
argument_list|()
init|;
name|qeui_it
operator|!=
name|qeui
operator|.
name|end
argument_list|()
condition|;
operator|++
name|qeui_it
control|)
name|t
operator|<<
literal|"include "
operator|<<
operator|(
operator|*
name|qeui_it
operator|)
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|SubTargetSkipDefaultVariables
operator|)
condition|)
block|{
name|QString
name|ofile
init|=
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|Option
operator|::
name|output
operator|.
name|fileName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|ofile
operator|.
name|lastIndexOf
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
operator|!=
operator|-
literal|1
condition|)
name|ofile
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
name|ofile
operator|.
name|lastIndexOf
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"MAKEFILE      = "
operator|<<
name|ofile
operator|<<
name|endl
expr_stmt|;
comment|/* Calling Option::fixPathToTargetOS() is necessary for MinGW/MSYS, which requires          * back-slashes to be turned into slashes. */
name|t
operator|<<
literal|"QMAKE         = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_QMAKE"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"DEL_FILE      = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_DEL_FILE"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"CHK_DIR_EXISTS= "
operator|<<
name|var
argument_list|(
literal|"QMAKE_CHK_DIR_EXISTS"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"MKDIR         = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_MKDIR"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"COPY          = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_COPY"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"COPY_FILE     = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_COPY_FILE"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"COPY_DIR      = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_COPY_DIR"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"INSTALL_FILE  = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_INSTALL_FILE"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"INSTALL_PROGRAM = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_INSTALL_PROGRAM"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"INSTALL_DIR   = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_INSTALL_DIR"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"DEL_FILE      = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_DEL_FILE"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"SYMLINK       = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_SYMBOLIC_LINK"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"DEL_DIR       = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_DEL_DIR"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"MOVE          = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_MOVE"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"SUBTARGETS    = "
expr_stmt|;
comment|// subtargets are sub-directory
for|for
control|(
name|int
name|target
init|=
literal|0
init|;
name|target
operator|<
name|targets
operator|.
name|size
argument_list|()
condition|;
operator|++
name|target
control|)
name|t
operator|<<
literal|" \\\n\t\t"
operator|<<
name|targets
operator|.
name|at
argument_list|(
name|target
argument_list|)
operator|->
name|target
expr_stmt|;
name|t
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
name|writeExtraVariables
argument_list|(
name|t
argument_list|)
expr_stmt|;
name|QStringList
name|targetSuffixes
decl_stmt|;
specifier|const
name|QString
name|abs_source_path
init|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_ABSOLUTE_SOURCE_PATH"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|SubTargetSkipDefaultTargets
operator|)
condition|)
block|{
name|targetSuffixes
operator|<<
literal|"make_first"
operator|<<
literal|"all"
operator|<<
literal|"clean"
operator|<<
literal|"distclean"
operator|<<
name|QString
argument_list|(
operator|(
name|flags
operator|&
name|SubTargetInstalls
operator|)
condition|?
literal|"install_subtargets"
else|:
literal|"install"
argument_list|)
operator|<<
name|QString
argument_list|(
operator|(
name|flags
operator|&
name|SubTargetInstalls
operator|)
condition|?
literal|"uninstall_subtargets"
else|:
literal|"uninstall"
argument_list|)
expr_stmt|;
block|}
name|bool
name|dont_recurse
init|=
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"dont_recurse"
argument_list|)
decl_stmt|;
comment|// generate target rules
for|for
control|(
name|int
name|target
init|=
literal|0
init|;
name|target
operator|<
name|targets
operator|.
name|size
argument_list|()
condition|;
operator|++
name|target
control|)
block|{
name|SubTarget
modifier|*
name|subtarget
init|=
name|targets
operator|.
name|at
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|QString
name|in_directory
init|=
name|subtarget
operator|->
name|in_directory
decl_stmt|;
if|if
condition|(
operator|!
name|in_directory
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|in_directory
operator|.
name|endsWith
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
condition|)
name|in_directory
operator|+=
name|Option
operator|::
name|dir_sep
expr_stmt|;
name|QString
name|out_directory
init|=
name|subtarget
operator|->
name|out_directory
decl_stmt|;
if|if
condition|(
operator|!
name|out_directory
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|out_directory
operator|.
name|endsWith
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
condition|)
name|out_directory
operator|+=
name|Option
operator|::
name|dir_sep
expr_stmt|;
if|if
condition|(
operator|!
name|abs_source_path
operator|.
name|isEmpty
argument_list|()
operator|&&
name|out_directory
operator|.
name|startsWith
argument_list|(
name|abs_source_path
argument_list|)
condition|)
name|out_directory
operator|=
name|Option
operator|::
name|output_dir
operator|+
name|out_directory
operator|.
name|mid
argument_list|(
name|abs_source_path
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|out_directory_cdin
init|=
name|out_directory
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"\n\t"
else|:
literal|"\n\tcd "
operator|+
name|out_directory
operator|+
literal|"&& "
decl_stmt|;
name|QString
name|makefilein
init|=
literal|" -f "
operator|+
name|subtarget
operator|->
name|makefile
decl_stmt|;
comment|//qmake it
name|QString
name|out
decl_stmt|;
name|QString
name|in
decl_stmt|;
if|if
condition|(
operator|!
name|subtarget
operator|->
name|profile
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|out
operator|=
name|subtarget
operator|->
name|makefile
expr_stmt|;
name|in
operator|=
name|escapeFilePath
argument_list|(
name|fileFixify
argument_list|(
name|in_directory
operator|+
name|subtarget
operator|->
name|profile
argument_list|,
name|FileFixifyAbsolute
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|out
operator|.
name|startsWith
argument_list|(
name|in_directory
argument_list|)
condition|)
name|out
operator|=
name|out
operator|.
name|mid
argument_list|(
name|in_directory
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|t
operator|<<
name|subtarget
operator|->
name|target
operator|<<
literal|"-qmake_all: "
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|SubTargetOrdered
condition|)
block|{
if|if
condition|(
name|target
condition|)
name|t
operator|<<
name|targets
operator|.
name|at
argument_list|(
name|target
operator|-
literal|1
argument_list|)
operator|->
name|target
operator|<<
literal|"-qmake_all"
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|subtarget
operator|->
name|depends
operator|.
name|isEmpty
argument_list|()
condition|)
name|t
operator|<<
name|valGlue
argument_list|(
name|subtarget
operator|->
name|depends
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|"-qmake_all "
argument_list|,
literal|"-qmake_all"
argument_list|)
expr_stmt|;
block|}
name|t
operator|<<
literal|" FORCE\n\t"
expr_stmt|;
if|if
condition|(
operator|!
name|in_directory
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|t
operator|<<
name|mkdir_p_asstring
argument_list|(
name|out_directory
argument_list|)
operator|<<
name|out_directory_cdin
expr_stmt|;
block|}
name|t
operator|<<
literal|"$(QMAKE) "
operator|<<
name|in
operator|<<
name|buildArgs
argument_list|()
operator|<<
literal|" -o "
operator|<<
name|out
expr_stmt|;
if|if
condition|(
operator|!
name|dont_recurse
condition|)
name|writeSubMakeCall
argument_list|(
name|t
argument_list|,
name|out_directory_cdin
argument_list|,
name|makefilein
operator|+
literal|" qmake_all"
argument_list|)
expr_stmt|;
else|else
name|t
operator|<<
name|endl
expr_stmt|;
block|}
block|{
comment|//actually compile
name|t
operator|<<
name|subtarget
operator|->
name|target
operator|<<
literal|":"
expr_stmt|;
if|if
condition|(
operator|!
name|subtarget
operator|->
name|depends
operator|.
name|isEmpty
argument_list|()
condition|)
name|t
operator|<<
literal|" "
operator|<<
name|valList
argument_list|(
name|subtarget
operator|->
name|depends
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|" FORCE"
expr_stmt|;
name|writeSubTargetCall
argument_list|(
name|t
argument_list|,
name|in_directory
argument_list|,
name|in
argument_list|,
name|out_directory
argument_list|,
name|out
argument_list|,
name|out_directory_cdin
argument_list|,
name|makefilein
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|suffix
init|=
literal|0
init|;
name|suffix
operator|<
name|targetSuffixes
operator|.
name|size
argument_list|()
condition|;
operator|++
name|suffix
control|)
block|{
name|QString
name|s
init|=
name|targetSuffixes
operator|.
name|at
argument_list|(
name|suffix
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|==
literal|"install_subtargets"
condition|)
name|s
operator|=
literal|"install"
expr_stmt|;
elseif|else
if|if
condition|(
name|s
operator|==
literal|"uninstall_subtargets"
condition|)
name|s
operator|=
literal|"uninstall"
expr_stmt|;
elseif|else
if|if
condition|(
name|s
operator|==
literal|"make_first"
condition|)
name|s
operator|=
name|QString
argument_list|()
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|SubTargetOrdered
condition|)
block|{
name|t
operator|<<
name|subtarget
operator|->
name|target
operator|<<
literal|"-"
operator|<<
name|targetSuffixes
operator|.
name|at
argument_list|(
name|suffix
argument_list|)
operator|<<
literal|"-ordered:"
expr_stmt|;
if|if
condition|(
name|target
condition|)
name|t
operator|<<
literal|" "
operator|<<
name|targets
operator|.
name|at
argument_list|(
name|target
operator|-
literal|1
argument_list|)
operator|->
name|target
operator|<<
literal|"-"
operator|<<
name|targetSuffixes
operator|.
name|at
argument_list|(
name|suffix
argument_list|)
operator|<<
literal|"-ordered "
expr_stmt|;
name|t
operator|<<
literal|" FORCE"
expr_stmt|;
name|writeSubTargetCall
argument_list|(
name|t
argument_list|,
name|in_directory
argument_list|,
name|in
argument_list|,
name|out_directory
argument_list|,
name|out
argument_list|,
name|out_directory_cdin
argument_list|,
name|makefilein
operator|+
literal|" "
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
name|t
operator|<<
name|subtarget
operator|->
name|target
operator|<<
literal|"-"
operator|<<
name|targetSuffixes
operator|.
name|at
argument_list|(
name|suffix
argument_list|)
operator|<<
literal|":"
expr_stmt|;
if|if
condition|(
operator|!
name|subtarget
operator|->
name|depends
operator|.
name|isEmpty
argument_list|()
condition|)
name|t
operator|<<
literal|" "
operator|<<
name|valGlue
argument_list|(
name|subtarget
operator|->
name|depends
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|"-"
operator|+
name|targetSuffixes
operator|.
name|at
argument_list|(
name|suffix
argument_list|)
operator|+
literal|" "
argument_list|,
literal|"-"
operator|+
name|targetSuffixes
operator|.
name|at
argument_list|(
name|suffix
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|" FORCE"
expr_stmt|;
name|writeSubTargetCall
argument_list|(
name|t
argument_list|,
name|in_directory
argument_list|,
name|in
argument_list|,
name|out_directory
argument_list|,
name|out
argument_list|,
name|out_directory_cdin
argument_list|,
name|makefilein
operator|+
literal|" "
operator|+
name|s
argument_list|)
expr_stmt|;
block|}
block|}
name|t
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|SubTargetSkipDefaultTargets
operator|)
condition|)
block|{
name|writeMakeQmake
argument_list|(
name|t
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"qmake_all:"
expr_stmt|;
if|if
condition|(
operator|!
name|targets
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
for|for
control|(
name|QList
argument_list|<
name|SubTarget
operator|*
argument_list|>
operator|::
name|Iterator
name|it
init|=
name|targets
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|targets
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
operator|!
operator|(
operator|*
name|it
operator|)
operator|->
name|profile
operator|.
name|isEmpty
argument_list|()
condition|)
name|t
operator|<<
literal|" "
operator|<<
operator|(
operator|*
name|it
operator|)
operator|->
name|target
operator|<<
literal|"-"
operator|<<
literal|"qmake_all"
expr_stmt|;
block|}
block|}
name|t
operator|<<
literal|" FORCE"
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
for|for
control|(
name|int
name|s
init|=
literal|0
init|;
name|s
operator|<
name|targetSuffixes
operator|.
name|size
argument_list|()
condition|;
operator|++
name|s
control|)
block|{
name|QString
name|suffix
init|=
name|targetSuffixes
operator|.
name|at
argument_list|(
name|s
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|flags
operator|&
name|SubTargetInstalls
operator|)
operator|&&
name|suffix
operator|.
name|endsWith
argument_list|(
literal|"install"
argument_list|)
condition|)
continue|continue;
name|t
operator|<<
name|suffix
operator|<<
literal|":"
expr_stmt|;
for|for
control|(
name|int
name|target
init|=
literal|0
init|;
name|target
operator|<
name|targets
operator|.
name|size
argument_list|()
condition|;
operator|++
name|target
control|)
block|{
name|SubTarget
modifier|*
name|subTarget
init|=
name|targets
operator|.
name|at
argument_list|(
name|target
argument_list|)
decl_stmt|;
if|if
condition|(
name|suffix
operator|==
literal|"make_first"
operator|&&
name|project
operator|->
name|values
argument_list|(
name|subTarget
operator|->
name|name
operator|+
literal|".CONFIG"
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|"no_default_target"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
continue|continue;
block|}
if|if
condition|(
operator|(
name|suffix
operator|==
literal|"install_subtargets"
operator|||
name|suffix
operator|==
literal|"uninstall_subtargets"
operator|)
operator|&&
name|project
operator|->
name|values
argument_list|(
name|subTarget
operator|->
name|name
operator|+
literal|".CONFIG"
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|"no_default_install"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
continue|continue;
block|}
name|QString
name|targetRule
init|=
name|subTarget
operator|->
name|target
operator|+
literal|"-"
operator|+
name|suffix
decl_stmt|;
if|if
condition|(
name|flags
operator|&
name|SubTargetOrdered
condition|)
name|targetRule
operator|+=
literal|"-ordered"
expr_stmt|;
name|t
operator|<<
literal|" "
operator|<<
name|targetRule
expr_stmt|;
block|}
if|if
condition|(
name|suffix
operator|==
literal|"all"
operator|||
name|suffix
operator|==
literal|"make_first"
condition|)
name|t
operator|<<
name|varGlue
argument_list|(
literal|"ALL_DEPS"
argument_list|,
literal|" "
argument_list|,
literal|" "
argument_list|,
literal|""
argument_list|)
expr_stmt|;
if|if
condition|(
name|suffix
operator|==
literal|"clean"
condition|)
name|t
operator|<<
name|varGlue
argument_list|(
literal|"CLEAN_DEPS"
argument_list|,
literal|" "
argument_list|,
literal|" "
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|" FORCE"
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|suffix
operator|==
literal|"clean"
condition|)
block|{
name|t
operator|<<
name|fileVarGlue
argument_list|(
literal|"QMAKE_CLEAN"
argument_list|,
literal|"\t-$(DEL_FILE) "
argument_list|,
literal|"\n\t-$(DEL_FILE) "
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|suffix
operator|==
literal|"distclean"
condition|)
block|{
name|QString
name|ofile
init|=
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|fileFixify
argument_list|(
name|Option
operator|::
name|output
operator|.
name|fileName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ofile
operator|.
name|isEmpty
argument_list|()
condition|)
name|t
operator|<<
literal|"\t-$(DEL_FILE) "
operator|<<
name|ofile
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|fileVarGlue
argument_list|(
literal|"QMAKE_DISTCLEAN"
argument_list|,
literal|"\t-$(DEL_FILE) "
argument_list|,
literal|" "
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
block|}
block|}
comment|// user defined targets
specifier|const
name|QStringList
modifier|&
name|qut
init|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_EXTRA_TARGETS"
argument_list|)
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|qut_it
init|=
name|qut
operator|.
name|begin
argument_list|()
init|;
name|qut_it
operator|!=
name|qut
operator|.
name|end
argument_list|()
condition|;
operator|++
name|qut_it
control|)
block|{
name|QString
name|targ
init|=
name|var
argument_list|(
operator|(
operator|*
name|qut_it
operator|)
operator|+
literal|".target"
argument_list|)
decl_stmt|,
name|cmd
init|=
name|var
argument_list|(
operator|(
operator|*
name|qut_it
operator|)
operator|+
literal|".commands"
argument_list|)
decl_stmt|,
name|deps
decl_stmt|;
if|if
condition|(
name|targ
operator|.
name|isEmpty
argument_list|()
condition|)
name|targ
operator|=
operator|(
operator|*
name|qut_it
operator|)
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
specifier|const
name|QStringList
modifier|&
name|deplist
init|=
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|qut_it
operator|)
operator|+
literal|".depends"
argument_list|)
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|dep_it
init|=
name|deplist
operator|.
name|begin
argument_list|()
init|;
name|dep_it
operator|!=
name|deplist
operator|.
name|end
argument_list|()
condition|;
operator|++
name|dep_it
control|)
block|{
name|QString
name|dep
init|=
name|var
argument_list|(
operator|(
operator|*
name|dep_it
operator|)
operator|+
literal|".target"
argument_list|)
decl_stmt|;
if|if
condition|(
name|dep
operator|.
name|isEmpty
argument_list|()
condition|)
name|dep
operator|=
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
operator|*
name|dep_it
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|deps
operator|+=
literal|" "
operator|+
name|dep
expr_stmt|;
block|}
if|if
condition|(
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|qut_it
operator|)
operator|+
literal|".CONFIG"
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|"recursive"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|QSet
argument_list|<
name|QString
argument_list|>
name|recurse
decl_stmt|;
if|if
condition|(
name|project
operator|->
name|isSet
argument_list|(
operator|(
operator|*
name|qut_it
operator|)
operator|+
literal|".recurse"
argument_list|)
condition|)
block|{
name|recurse
operator|=
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|qut_it
operator|)
operator|+
literal|".recurse"
argument_list|)
operator|.
name|toSet
argument_list|()
expr_stmt|;
block|}
else|else
block|{
for|for
control|(
name|int
name|target
init|=
literal|0
init|;
name|target
operator|<
name|targets
operator|.
name|size
argument_list|()
condition|;
operator|++
name|target
control|)
name|recurse
operator|.
name|insert
argument_list|(
name|targets
operator|.
name|at
argument_list|(
name|target
argument_list|)
operator|->
name|name
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|target
init|=
literal|0
init|;
name|target
operator|<
name|targets
operator|.
name|size
argument_list|()
condition|;
operator|++
name|target
control|)
block|{
name|SubTarget
modifier|*
name|subtarget
init|=
name|targets
operator|.
name|at
argument_list|(
name|target
argument_list|)
decl_stmt|;
name|QString
name|in_directory
init|=
name|subtarget
operator|->
name|in_directory
decl_stmt|;
if|if
condition|(
operator|!
name|in_directory
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|in_directory
operator|.
name|endsWith
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
condition|)
name|in_directory
operator|+=
name|Option
operator|::
name|dir_sep
expr_stmt|;
name|QString
name|out_directory
init|=
name|subtarget
operator|->
name|out_directory
decl_stmt|;
if|if
condition|(
operator|!
name|out_directory
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|out_directory
operator|.
name|endsWith
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
condition|)
name|out_directory
operator|+=
name|Option
operator|::
name|dir_sep
expr_stmt|;
if|if
condition|(
operator|!
name|abs_source_path
operator|.
name|isEmpty
argument_list|()
operator|&&
name|out_directory
operator|.
name|startsWith
argument_list|(
name|abs_source_path
argument_list|)
condition|)
name|out_directory
operator|=
name|Option
operator|::
name|output_dir
operator|+
name|out_directory
operator|.
name|mid
argument_list|(
name|abs_source_path
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|recurse
operator|.
name|contains
argument_list|(
name|subtarget
operator|->
name|name
argument_list|)
condition|)
continue|continue;
name|QString
name|out_directory_cdin
init|=
name|out_directory
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"\n\t"
else|:
literal|"\n\tcd "
operator|+
name|out_directory
operator|+
literal|"&& "
decl_stmt|;
name|QString
name|makefilein
init|=
literal|" -f "
operator|+
name|subtarget
operator|->
name|makefile
decl_stmt|;
name|QString
name|out
decl_stmt|;
name|QString
name|in
decl_stmt|;
if|if
condition|(
operator|!
name|subtarget
operator|->
name|profile
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|out
operator|=
name|subtarget
operator|->
name|makefile
expr_stmt|;
name|in
operator|=
name|escapeFilePath
argument_list|(
name|fileFixify
argument_list|(
name|in_directory
operator|+
name|subtarget
operator|->
name|profile
argument_list|,
name|FileFixifyAbsolute
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|out
operator|.
name|startsWith
argument_list|(
name|in_directory
argument_list|)
condition|)
name|out
operator|=
name|out
operator|.
name|mid
argument_list|(
name|in_directory
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//write the rule/depends
if|if
condition|(
name|flags
operator|&
name|SubTargetOrdered
condition|)
block|{
specifier|const
name|QString
name|dep
init|=
name|subtarget
operator|->
name|target
operator|+
literal|"-"
operator|+
operator|(
operator|*
name|qut_it
operator|)
operator|+
literal|"_ordered"
decl_stmt|;
name|t
operator|<<
name|dep
operator|<<
literal|":"
expr_stmt|;
if|if
condition|(
name|target
condition|)
name|t
operator|<<
literal|" "
operator|<<
name|targets
operator|.
name|at
argument_list|(
name|target
operator|-
literal|1
argument_list|)
operator|->
name|target
operator|<<
literal|"-"
operator|<<
operator|(
operator|*
name|qut_it
operator|)
operator|<<
literal|"_ordered "
expr_stmt|;
name|deps
operator|+=
literal|" "
operator|+
name|dep
expr_stmt|;
block|}
else|else
block|{
specifier|const
name|QString
name|dep
init|=
name|subtarget
operator|->
name|target
operator|+
literal|"-"
operator|+
operator|(
operator|*
name|qut_it
operator|)
decl_stmt|;
name|t
operator|<<
name|dep
operator|<<
literal|":"
expr_stmt|;
if|if
condition|(
operator|!
name|subtarget
operator|->
name|depends
operator|.
name|isEmpty
argument_list|()
condition|)
name|t
operator|<<
literal|" "
operator|<<
name|valGlue
argument_list|(
name|subtarget
operator|->
name|depends
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|"-"
operator|+
operator|(
operator|*
name|qut_it
operator|)
operator|+
literal|" "
argument_list|,
literal|"-"
operator|+
operator|(
operator|*
name|qut_it
operator|)
argument_list|)
expr_stmt|;
name|deps
operator|+=
literal|" "
operator|+
name|dep
expr_stmt|;
block|}
name|QString
name|sub_targ
init|=
name|targ
decl_stmt|;
if|if
condition|(
name|project
operator|->
name|isSet
argument_list|(
operator|(
operator|*
name|qut_it
operator|)
operator|+
literal|".recurse_target"
argument_list|)
condition|)
name|sub_targ
operator|=
name|project
operator|->
name|first
argument_list|(
operator|(
operator|*
name|qut_it
operator|)
operator|+
literal|".recurse_target"
argument_list|)
expr_stmt|;
comment|//write the commands
name|writeSubTargetCall
argument_list|(
name|t
argument_list|,
name|in_directory
argument_list|,
name|in
argument_list|,
name|out_directory
argument_list|,
name|out
argument_list|,
name|out_directory_cdin
argument_list|,
name|makefilein
operator|+
literal|" "
operator|+
name|sub_targ
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|qut_it
operator|)
operator|+
literal|".CONFIG"
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|"phony"
argument_list|)
operator|!=
operator|-
literal|1
condition|)
name|deps
operator|+=
literal|" FORCE"
expr_stmt|;
name|t
operator|<<
name|targ
operator|<<
literal|":"
operator|<<
name|deps
operator|<<
literal|"\n"
expr_stmt|;
if|if
condition|(
operator|!
name|cmd
operator|.
name|isEmpty
argument_list|()
condition|)
name|t
operator|<<
literal|"\t"
operator|<<
name|cmd
operator|<<
name|endl
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
name|SubTargetInstalls
condition|)
block|{
name|project
operator|->
name|values
argument_list|(
literal|"INSTALLDEPS"
argument_list|)
operator|+=
literal|"install_subtargets"
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"UNINSTALLDEPS"
argument_list|)
operator|+=
literal|"uninstall_subtargets"
expr_stmt|;
name|writeInstalls
argument_list|(
name|t
argument_list|,
literal|"INSTALLS"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
name|t
operator|<<
literal|"FORCE:"
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
end_function
begin_function
name|void
DECL|function|writeMakeQmake
name|MakefileGenerator
operator|::
name|writeMakeQmake
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|,
name|bool
name|noDummyQmakeAll
parameter_list|)
block|{
name|QString
name|ofile
init|=
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|fileFixify
argument_list|(
name|Option
operator|::
name|output
operator|.
name|fileName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_FAILED_REQUIREMENTS"
argument_list|)
operator|&&
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_INTERNAL_PRL_FILE"
argument_list|)
condition|)
block|{
name|QStringList
name|files
init|=
name|fileFixify
argument_list|(
name|Option
operator|::
name|mkfile
operator|::
name|project_files
argument_list|)
decl_stmt|;
name|t
operator|<<
name|escapeDependencyPath
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_INTERNAL_PRL_FILE"
argument_list|)
argument_list|)
operator|<<
literal|": "
operator|<<
literal|"\n\t"
operator|<<
literal|"@$(QMAKE) -prl "
operator|<<
name|buildArgs
argument_list|()
operator|<<
literal|" "
operator|<<
name|files
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
name|QString
name|pfile
init|=
name|project
operator|->
name|projectFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|pfile
operator|!=
literal|"(stdin)"
condition|)
block|{
name|QString
name|qmake
init|=
name|build_args
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|ofile
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"no_autoqmake"
argument_list|)
condition|)
block|{
name|t
operator|<<
name|escapeFilePath
argument_list|(
name|ofile
argument_list|)
operator|<<
literal|": "
operator|<<
name|escapeDependencyPath
argument_list|(
name|fileFixify
argument_list|(
name|pfile
argument_list|)
argument_list|)
operator|<<
literal|" "
expr_stmt|;
if|if
condition|(
name|Option
operator|::
name|mkfile
operator|::
name|do_cache
condition|)
block|{
if|if
condition|(
operator|!
name|project
operator|->
name|confFile
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|t
operator|<<
name|escapeDependencyPath
argument_list|(
name|fileFixify
argument_list|(
name|project
operator|->
name|confFile
argument_list|()
argument_list|)
argument_list|)
operator|<<
literal|" "
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|cacheFile
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|t
operator|<<
name|escapeDependencyPath
argument_list|(
name|fileFixify
argument_list|(
name|project
operator|->
name|cacheFile
argument_list|()
argument_list|)
argument_list|)
operator|<<
literal|" "
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|specdir
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|exists
argument_list|(
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|specdir
argument_list|()
operator|+
name|QDir
operator|::
name|separator
argument_list|()
operator|+
literal|"qmake.conf"
argument_list|)
argument_list|)
condition|)
name|t
operator|<<
name|escapeDependencyPath
argument_list|(
name|specdir
argument_list|()
operator|+
name|Option
operator|::
name|dir_sep
operator|+
literal|"qmake.conf"
argument_list|)
operator|<<
literal|" "
expr_stmt|;
block|}
specifier|const
name|QStringList
modifier|&
name|included
init|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_INTERNAL_INCLUDED_FILES"
argument_list|)
decl_stmt|;
name|t
operator|<<
name|escapeDependencyPaths
argument_list|(
name|included
argument_list|)
operator|.
name|join
argument_list|(
literal|" \\\n\t\t"
argument_list|)
operator|<<
literal|"\n\t"
operator|<<
name|qmake
operator|<<
name|endl
expr_stmt|;
for|for
control|(
name|int
name|include
init|=
literal|0
init|;
name|include
operator|<
name|included
operator|.
name|size
argument_list|()
condition|;
operator|++
name|include
control|)
block|{
specifier|const
name|QString
name|i
argument_list|(
name|included
operator|.
name|at
argument_list|(
name|include
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|i
operator|.
name|isEmpty
argument_list|()
condition|)
name|t
operator|<<
name|i
operator|<<
literal|":"
operator|<<
name|endl
expr_stmt|;
block|}
block|}
if|if
condition|(
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_ORIG_TARGET"
argument_list|)
operator|!=
literal|"qmake"
condition|)
block|{
name|t
operator|<<
literal|"qmake: FORCE\n\t@"
operator|<<
name|qmake
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
operator|!
name|noDummyQmakeAll
condition|)
name|t
operator|<<
literal|"qmake_all: FORCE"
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
name|QFileInfo
DECL|function|fileInfo
name|MakefileGenerator
operator|::
name|fileInfo
parameter_list|(
name|QString
name|file
parameter_list|)
specifier|const
block|{
specifier|static
name|QHash
argument_list|<
name|FileInfoCacheKey
argument_list|,
name|QFileInfo
argument_list|>
modifier|*
name|cache
init|=
literal|0
decl_stmt|;
specifier|static
name|QFileInfo
name|noInfo
init|=
name|QFileInfo
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|cache
condition|)
block|{
name|cache
operator|=
operator|new
name|QHash
argument_list|<
name|FileInfoCacheKey
argument_list|,
name|QFileInfo
argument_list|>
expr_stmt|;
name|qmakeAddCacheClear
argument_list|(
name|qmakeDeleteCacheClear
argument_list|<
name|QHash
argument_list|<
name|FileInfoCacheKey
argument_list|,
name|QFileInfo
argument_list|>
argument_list|>
argument_list|,
operator|(
name|void
operator|*
operator|*
operator|)
operator|&
name|cache
argument_list|)
expr_stmt|;
block|}
name|FileInfoCacheKey
name|cacheKey
argument_list|(
name|file
argument_list|)
decl_stmt|;
name|QFileInfo
name|value
init|=
name|cache
operator|->
name|value
argument_list|(
name|cacheKey
argument_list|,
name|noInfo
argument_list|)
decl_stmt|;
if|if
condition|(
name|value
operator|!=
name|noInfo
condition|)
return|return
name|value
return|;
name|QFileInfo
name|fi
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|fi
operator|.
name|exists
argument_list|()
condition|)
name|cache
operator|->
name|insert
argument_list|(
name|cacheKey
argument_list|,
name|fi
argument_list|)
expr_stmt|;
return|return
name|fi
return|;
block|}
end_function
begin_function
name|QString
DECL|function|unescapeFilePath
name|MakefileGenerator
operator|::
name|unescapeFilePath
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|)
specifier|const
block|{
name|QString
name|ret
init|=
name|path
decl_stmt|;
if|if
condition|(
operator|!
name|ret
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|ret
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"\\ "
argument_list|)
argument_list|)
condition|)
name|ret
operator|.
name|replace
argument_list|(
name|QLatin1String
argument_list|(
literal|"\\ "
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|.
name|contains
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\"'
argument_list|)
argument_list|)
condition|)
name|ret
operator|.
name|remove
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\"'
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
name|QStringList
DECL|function|escapeFilePaths
name|MakefileGenerator
operator|::
name|escapeFilePaths
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|paths
parameter_list|)
specifier|const
block|{
name|QStringList
name|ret
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paths
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|ret
operator|.
name|append
argument_list|(
name|escapeFilePath
argument_list|(
name|paths
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
name|QStringList
DECL|function|escapeDependencyPaths
name|MakefileGenerator
operator|::
name|escapeDependencyPaths
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|paths
parameter_list|)
specifier|const
block|{
name|QStringList
name|ret
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paths
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|ret
operator|.
name|append
argument_list|(
name|escapeDependencyPath
argument_list|(
name|paths
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
name|QStringList
DECL|function|unescapeFilePaths
name|MakefileGenerator
operator|::
name|unescapeFilePaths
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|paths
parameter_list|)
specifier|const
block|{
name|QStringList
name|ret
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paths
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|ret
operator|.
name|append
argument_list|(
name|unescapeFilePath
argument_list|(
name|paths
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
name|QStringList
DECL|function|fileFixify
name|MakefileGenerator
operator|::
name|fileFixify
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|files
parameter_list|,
specifier|const
name|QString
modifier|&
name|out_dir
parameter_list|,
specifier|const
name|QString
modifier|&
name|in_dir
parameter_list|,
name|FileFixifyType
name|fix
parameter_list|,
name|bool
name|canon
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|files
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|files
return|;
name|QStringList
name|ret
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|it
init|=
name|files
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|files
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
operator|!
operator|(
operator|*
name|it
operator|)
operator|.
name|isEmpty
argument_list|()
condition|)
name|ret
operator|<<
name|fileFixify
argument_list|(
operator|(
operator|*
name|it
operator|)
argument_list|,
name|out_dir
argument_list|,
name|in_dir
argument_list|,
name|fix
argument_list|,
name|canon
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
name|QString
DECL|function|fileFixify
name|MakefileGenerator
operator|::
name|fileFixify
parameter_list|(
specifier|const
name|QString
modifier|&
name|file
parameter_list|,
specifier|const
name|QString
modifier|&
name|out_d
parameter_list|,
specifier|const
name|QString
modifier|&
name|in_d
parameter_list|,
name|FileFixifyType
name|fix
parameter_list|,
name|bool
name|canon
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|file
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|file
return|;
name|QString
name|ret
init|=
name|unescapeFilePath
argument_list|(
name|file
argument_list|)
decl_stmt|;
comment|//do the fixin'
name|QString
name|orig_file
init|=
name|ret
decl_stmt|;
if|if
condition|(
name|ret
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'~'
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|ret
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"~/"
argument_list|)
argument_list|)
condition|)
name|ret
operator|=
name|QDir
operator|::
name|homePath
argument_list|()
operator|+
name|ret
operator|.
name|mid
argument_list|(
literal|1
argument_list|)
expr_stmt|;
else|else
name|warn_msg
argument_list|(
name|WarnLogic
argument_list|,
literal|"Unable to expand ~ in %s"
argument_list|,
name|ret
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fix
operator|==
name|FileFixifyAbsolute
operator|||
operator|(
name|fix
operator|==
name|FileFixifyDefault
operator|&&
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"no_fixpath"
argument_list|)
operator|)
condition|)
block|{
if|if
condition|(
name|fix
operator|==
name|FileFixifyAbsolute
operator|&&
name|QDir
operator|::
name|isRelativePath
argument_list|(
name|ret
argument_list|)
condition|)
block|{
comment|//already absolute
name|QString
name|pwd
init|=
name|qmake_getpwd
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|pwd
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
condition|)
name|pwd
operator|+=
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|ret
operator|.
name|prepend
argument_list|(
name|pwd
argument_list|)
expr_stmt|;
block|}
name|ret
operator|=
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|ret
argument_list|,
literal|false
argument_list|,
name|canon
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//fix it..
name|QString
name|out_dir
init|=
name|QDir
argument_list|(
name|Option
operator|::
name|output_dir
argument_list|)
operator|.
name|absoluteFilePath
argument_list|(
name|out_d
argument_list|)
decl_stmt|;
name|QString
name|in_dir
init|=
name|QDir
argument_list|(
name|qmake_getpwd
argument_list|()
argument_list|)
operator|.
name|absoluteFilePath
argument_list|(
name|in_d
argument_list|)
decl_stmt|;
block|{
name|QFileInfo
name|in_fi
argument_list|(
name|fileInfo
argument_list|(
name|in_dir
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|in_fi
operator|.
name|exists
argument_list|()
condition|)
name|in_dir
operator|=
name|in_fi
operator|.
name|canonicalFilePath
argument_list|()
expr_stmt|;
name|QFileInfo
name|out_fi
argument_list|(
name|fileInfo
argument_list|(
name|out_dir
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|out_fi
operator|.
name|exists
argument_list|()
condition|)
name|out_dir
operator|=
name|out_fi
operator|.
name|canonicalFilePath
argument_list|()
expr_stmt|;
block|}
name|QString
name|qfile
argument_list|(
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|ret
argument_list|,
literal|true
argument_list|,
name|canon
argument_list|)
argument_list|)
decl_stmt|;
name|QFileInfo
name|qfileinfo
argument_list|(
name|fileInfo
argument_list|(
name|qfile
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|out_dir
operator|!=
name|in_dir
operator|||
operator|!
name|qfileinfo
operator|.
name|isRelative
argument_list|()
condition|)
block|{
if|if
condition|(
name|qfileinfo
operator|.
name|isRelative
argument_list|()
condition|)
block|{
name|ret
operator|=
name|in_dir
operator|+
literal|"/"
operator|+
name|qfile
expr_stmt|;
name|qfileinfo
operator|.
name|setFile
argument_list|(
name|ret
argument_list|)
expr_stmt|;
block|}
name|ret
operator|=
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|ret
argument_list|,
literal|false
argument_list|,
name|canon
argument_list|)
expr_stmt|;
if|if
condition|(
name|canon
operator|&&
name|qfileinfo
operator|.
name|exists
argument_list|()
operator|&&
name|file
operator|==
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|ret
argument_list|,
literal|true
argument_list|,
name|canon
argument_list|)
condition|)
name|ret
operator|=
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|qfileinfo
operator|.
name|canonicalFilePath
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|match_dir
init|=
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|out_dir
argument_list|,
literal|false
argument_list|,
name|canon
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|==
name|match_dir
condition|)
block|{
name|ret
operator|=
literal|""
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ret
operator|.
name|startsWith
argument_list|(
name|match_dir
operator|+
name|Option
operator|::
name|dir_sep
argument_list|)
condition|)
block|{
name|ret
operator|=
name|ret
operator|.
name|mid
argument_list|(
name|match_dir
operator|.
name|length
argument_list|()
operator|+
name|Option
operator|::
name|dir_sep
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//figure out the depth
name|int
name|depth
init|=
literal|4
decl_stmt|;
if|if
condition|(
name|Option
operator|::
name|qmake_mode
operator|==
name|Option
operator|::
name|QMAKE_GENERATE_MAKEFILE
operator|||
name|Option
operator|::
name|qmake_mode
operator|==
name|Option
operator|::
name|QMAKE_GENERATE_PRL
condition|)
block|{
if|if
condition|(
name|project
operator|&&
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_PROJECT_DEPTH"
argument_list|)
condition|)
name|depth
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_PROJECT_DEPTH"
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|Option
operator|::
name|mkfile
operator|::
name|cachefile_depth
operator|!=
operator|-
literal|1
condition|)
name|depth
operator|=
name|Option
operator|::
name|mkfile
operator|::
name|cachefile_depth
expr_stmt|;
block|}
comment|//calculate how much can be removed
name|QString
name|dot_prefix
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<=
name|depth
condition|;
name|i
operator|++
control|)
block|{
name|int
name|sl
init|=
name|match_dir
operator|.
name|lastIndexOf
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
decl_stmt|;
if|if
condition|(
name|sl
operator|==
operator|-
literal|1
condition|)
break|break;
name|match_dir
operator|=
name|match_dir
operator|.
name|left
argument_list|(
name|sl
argument_list|)
expr_stmt|;
if|if
condition|(
name|match_dir
operator|.
name|isEmpty
argument_list|()
condition|)
break|break;
if|if
condition|(
name|ret
operator|.
name|startsWith
argument_list|(
name|match_dir
operator|+
name|Option
operator|::
name|dir_sep
argument_list|)
condition|)
block|{
comment|//concat
name|int
name|remlen
init|=
name|ret
operator|.
name|length
argument_list|()
operator|-
operator|(
name|match_dir
operator|.
name|length
argument_list|()
operator|+
literal|1
operator|)
decl_stmt|;
if|if
condition|(
name|remlen
operator|<
literal|0
condition|)
name|remlen
operator|=
literal|0
expr_stmt|;
name|ret
operator|=
name|ret
operator|.
name|right
argument_list|(
name|remlen
argument_list|)
expr_stmt|;
comment|//prepend
for|for
control|(
name|int
name|o
init|=
literal|0
init|;
name|o
operator|<
name|i
condition|;
name|o
operator|++
control|)
name|dot_prefix
operator|+=
literal|".."
operator|+
name|Option
operator|::
name|dir_sep
expr_stmt|;
break|break;
block|}
block|}
name|ret
operator|.
name|prepend
argument_list|(
name|dot_prefix
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|ret
operator|=
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|ret
argument_list|,
literal|false
argument_list|,
name|canon
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|ret
operator|.
name|isEmpty
argument_list|()
condition|)
name|ret
operator|=
literal|"."
expr_stmt|;
name|debug_msg
argument_list|(
literal|3
argument_list|,
literal|"Fixed[%d,%d] %s :: to :: %s [%s::%s] [%s::%s]"
argument_list|,
name|fix
argument_list|,
name|canon
argument_list|,
name|orig_file
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|ret
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|in_d
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|out_d
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|qmake_getpwd
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|Option
operator|::
name|output_dir
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
name|void
DECL|function|checkMultipleDefinition
name|MakefileGenerator
operator|::
name|checkMultipleDefinition
parameter_list|(
specifier|const
name|QString
modifier|&
name|f
parameter_list|,
specifier|const
name|QString
modifier|&
name|w
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|Option
operator|::
name|warn_level
operator|&
name|WarnLogic
operator|)
condition|)
return|return;
name|QString
name|file
init|=
name|f
decl_stmt|;
name|int
name|slsh
init|=
name|f
operator|.
name|lastIndexOf
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
decl_stmt|;
if|if
condition|(
name|slsh
operator|!=
operator|-
literal|1
condition|)
name|file
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
name|slsh
operator|+
literal|1
argument_list|)
expr_stmt|;
specifier|const
name|QStringList
modifier|&
name|l
init|=
name|project
operator|->
name|values
argument_list|(
name|w
argument_list|)
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|val_it
init|=
name|l
operator|.
name|begin
argument_list|()
init|;
name|val_it
operator|!=
name|l
operator|.
name|end
argument_list|()
condition|;
operator|++
name|val_it
control|)
block|{
name|QString
name|file2
argument_list|(
operator|(
operator|*
name|val_it
operator|)
argument_list|)
decl_stmt|;
name|slsh
operator|=
name|file2
operator|.
name|lastIndexOf
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
expr_stmt|;
if|if
condition|(
name|slsh
operator|!=
operator|-
literal|1
condition|)
name|file2
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
name|slsh
operator|+
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|file2
operator|==
name|file
condition|)
block|{
name|warn_msg
argument_list|(
name|WarnLogic
argument_list|,
literal|"Found potential symbol conflict of %s (%s) in %s"
argument_list|,
name|file
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
operator|(
operator|*
name|val_it
operator|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|w
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
end_function
begin_function
name|QMakeLocalFileName
DECL|function|fixPathForFile
name|MakefileGenerator
operator|::
name|fixPathForFile
parameter_list|(
specifier|const
name|QMakeLocalFileName
modifier|&
name|file
parameter_list|,
name|bool
name|forOpen
parameter_list|)
block|{
if|if
condition|(
name|forOpen
condition|)
return|return
name|QMakeLocalFileName
argument_list|(
name|fileFixify
argument_list|(
name|file
operator|.
name|real
argument_list|()
argument_list|,
name|qmake_getpwd
argument_list|()
argument_list|,
name|Option
operator|::
name|output_dir
argument_list|)
argument_list|)
return|;
return|return
name|QMakeLocalFileName
argument_list|(
name|fileFixify
argument_list|(
name|file
operator|.
name|real
argument_list|()
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
name|QFileInfo
DECL|function|findFileInfo
name|MakefileGenerator
operator|::
name|findFileInfo
parameter_list|(
specifier|const
name|QMakeLocalFileName
modifier|&
name|file
parameter_list|)
block|{
return|return
name|fileInfo
argument_list|(
name|file
operator|.
name|local
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
name|QMakeLocalFileName
DECL|function|findFileForDep
name|MakefileGenerator
operator|::
name|findFileForDep
parameter_list|(
specifier|const
name|QMakeLocalFileName
modifier|&
name|dep
parameter_list|,
specifier|const
name|QMakeLocalFileName
modifier|&
name|file
parameter_list|)
block|{
name|QMakeLocalFileName
name|ret
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"SKIP_DEPENDS"
argument_list|)
condition|)
block|{
name|bool
name|found
init|=
literal|false
decl_stmt|;
specifier|const
name|QStringList
modifier|&
name|nodeplist
init|=
name|project
operator|->
name|values
argument_list|(
literal|"SKIP_DEPENDS"
argument_list|)
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|it
init|=
name|nodeplist
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|nodeplist
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QRegExp
name|regx
argument_list|(
operator|(
operator|*
name|it
operator|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|regx
operator|.
name|indexIn
argument_list|(
name|dep
operator|.
name|local
argument_list|()
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|found
condition|)
return|return
name|ret
return|;
block|}
name|ret
operator|=
name|QMakeSourceFileInfo
operator|::
name|findFileForDep
argument_list|(
name|dep
argument_list|,
name|file
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ret
operator|.
name|isNull
argument_list|()
condition|)
return|return
name|ret
return|;
comment|//these are some "hacky" heuristics it will try to do on an include
comment|//however these can be turned off at runtime, I'm not sure how
comment|//reliable these will be, most likely when problems arise turn it off
comment|//and see if they go away..
if|if
condition|(
name|Option
operator|::
name|mkfile
operator|::
name|do_dep_heuristics
condition|)
block|{
if|if
condition|(
name|depHeuristicsCache
operator|.
name|contains
argument_list|(
name|dep
operator|.
name|real
argument_list|()
argument_list|)
condition|)
return|return
name|depHeuristicsCache
index|[
name|dep
operator|.
name|real
argument_list|()
index|]
return|;
if|if
condition|(
name|Option
operator|::
name|output_dir
operator|!=
name|qmake_getpwd
argument_list|()
operator|&&
name|QDir
operator|::
name|isRelativePath
argument_list|(
name|dep
operator|.
name|real
argument_list|()
argument_list|)
condition|)
block|{
comment|//is it from the shadow tree
name|QList
argument_list|<
name|QMakeLocalFileName
argument_list|>
name|depdirs
init|=
name|QMakeSourceFileInfo
operator|::
name|dependencyPaths
argument_list|()
decl_stmt|;
name|depdirs
operator|.
name|prepend
argument_list|(
name|fileInfo
argument_list|(
name|file
operator|.
name|real
argument_list|()
argument_list|)
operator|.
name|absoluteDir
argument_list|()
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|pwd
init|=
name|qmake_getpwd
argument_list|()
decl_stmt|;
if|if
condition|(
name|pwd
operator|.
name|at
argument_list|(
name|pwd
operator|.
name|length
argument_list|()
operator|-
literal|1
argument_list|)
operator|!=
literal|'/'
condition|)
name|pwd
operator|+=
literal|'/'
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|depdirs
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QString
name|dir
init|=
name|depdirs
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|real
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|QDir
operator|::
name|isRelativePath
argument_list|(
name|dir
argument_list|)
operator|&&
name|dir
operator|.
name|startsWith
argument_list|(
name|pwd
argument_list|)
condition|)
name|dir
operator|=
name|dir
operator|.
name|mid
argument_list|(
name|pwd
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|QDir
operator|::
name|isRelativePath
argument_list|(
name|dir
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|dir
operator|.
name|endsWith
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
condition|)
name|dir
operator|+=
name|Option
operator|::
name|dir_sep
expr_stmt|;
name|QString
name|shadow
init|=
name|fileFixify
argument_list|(
name|dir
operator|+
name|dep
operator|.
name|local
argument_list|()
argument_list|,
name|pwd
argument_list|,
name|Option
operator|::
name|output_dir
argument_list|)
decl_stmt|;
if|if
condition|(
name|exists
argument_list|(
name|shadow
argument_list|)
condition|)
block|{
name|ret
operator|=
name|QMakeLocalFileName
argument_list|(
name|shadow
argument_list|)
expr_stmt|;
goto|goto
name|found_dep_from_heuristic
goto|;
block|}
block|}
block|}
block|}
block|{
comment|//is it from an EXTRA_TARGET
specifier|const
name|QString
name|dep_basename
init|=
name|dep
operator|.
name|local
argument_list|()
operator|.
name|section
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|const
name|QStringList
modifier|&
name|qut
init|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_EXTRA_TARGETS"
argument_list|)
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|it
init|=
name|qut
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|qut
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QString
name|targ
init|=
name|var
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".target"
argument_list|)
decl_stmt|;
if|if
condition|(
name|targ
operator|.
name|isEmpty
argument_list|()
condition|)
name|targ
operator|=
operator|(
operator|*
name|it
operator|)
expr_stmt|;
name|QString
name|out
init|=
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|targ
argument_list|)
decl_stmt|;
if|if
condition|(
name|out
operator|==
name|dep
operator|.
name|real
argument_list|()
operator|||
name|out
operator|.
name|section
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|,
operator|-
literal|1
argument_list|)
operator|==
name|dep_basename
condition|)
block|{
name|ret
operator|=
name|QMakeLocalFileName
argument_list|(
name|out
argument_list|)
expr_stmt|;
goto|goto
name|found_dep_from_heuristic
goto|;
block|}
block|}
block|}
block|{
comment|//is it from an EXTRA_COMPILER
specifier|const
name|QString
name|dep_basename
init|=
name|dep
operator|.
name|local
argument_list|()
operator|.
name|section
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
specifier|const
name|QStringList
modifier|&
name|quc
init|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_EXTRA_COMPILERS"
argument_list|)
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|it
init|=
name|quc
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|quc
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QString
name|tmp_out
init|=
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".output"
argument_list|)
operator|.
name|first
argument_list|()
decl_stmt|;
if|if
condition|(
name|tmp_out
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
specifier|const
name|QStringList
modifier|&
name|tmp
init|=
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".input"
argument_list|)
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|it2
init|=
name|tmp
operator|.
name|begin
argument_list|()
init|;
name|it2
operator|!=
name|tmp
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it2
control|)
block|{
specifier|const
name|QStringList
modifier|&
name|inputs
init|=
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it2
operator|)
argument_list|)
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|input
init|=
name|inputs
operator|.
name|begin
argument_list|()
init|;
name|input
operator|!=
name|inputs
operator|.
name|end
argument_list|()
condition|;
operator|++
name|input
control|)
block|{
name|QString
name|out
init|=
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|unescapeFilePath
argument_list|(
name|replaceExtraCompilerVariables
argument_list|(
name|tmp_out
argument_list|,
operator|(
operator|*
name|input
operator|)
argument_list|,
name|QString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|out
operator|==
name|dep
operator|.
name|real
argument_list|()
operator|||
name|out
operator|.
name|section
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|,
operator|-
literal|1
argument_list|)
operator|==
name|dep_basename
condition|)
block|{
name|ret
operator|=
name|QMakeLocalFileName
argument_list|(
name|fileFixify
argument_list|(
name|out
argument_list|,
name|qmake_getpwd
argument_list|()
argument_list|,
name|Option
operator|::
name|output_dir
argument_list|)
argument_list|)
expr_stmt|;
goto|goto
name|found_dep_from_heuristic
goto|;
block|}
block|}
block|}
block|}
block|}
name|found_dep_from_heuristic
label|:
name|depHeuristicsCache
operator|.
name|insert
argument_list|(
name|dep
operator|.
name|real
argument_list|()
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
name|QStringList
DECL|function|findDependencies
modifier|&
name|MakefileGenerator
operator|::
name|findDependencies
parameter_list|(
specifier|const
name|QString
modifier|&
name|file
parameter_list|)
block|{
specifier|const
name|QString
name|fixedFile
init|=
name|fileFixify
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dependsCache
operator|.
name|contains
argument_list|(
name|fixedFile
argument_list|)
condition|)
block|{
if|#
directive|if
literal|1
name|QStringList
name|deps
init|=
name|QMakeSourceFileInfo
operator|::
name|dependencies
argument_list|(
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|!=
name|fixedFile
condition|)
name|deps
operator|+=
name|QMakeSourceFileInfo
operator|::
name|dependencies
argument_list|(
name|fixedFile
argument_list|)
expr_stmt|;
else|#
directive|else
name|QStringList
name|deps
init|=
name|QMakeSourceFileInfo
operator|::
name|dependencies
argument_list|(
name|fixedFile
argument_list|)
decl_stmt|;
endif|#
directive|endif
name|dependsCache
operator|.
name|insert
argument_list|(
name|fixedFile
argument_list|,
name|deps
argument_list|)
expr_stmt|;
block|}
return|return
name|dependsCache
index|[
name|fixedFile
index|]
return|;
block|}
end_function
begin_function
name|QString
DECL|function|specdir
name|MakefileGenerator
operator|::
name|specdir
parameter_list|()
block|{
if|if
condition|(
name|spec
operator|.
name|isEmpty
argument_list|()
condition|)
name|spec
operator|=
name|fileFixify
argument_list|(
name|project
operator|->
name|specDir
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|spec
return|;
block|}
end_function
begin_function
name|bool
DECL|function|openOutput
name|MakefileGenerator
operator|::
name|openOutput
parameter_list|(
name|QFile
modifier|&
name|file
parameter_list|,
specifier|const
name|QString
modifier|&
name|build
parameter_list|)
specifier|const
block|{
block|{
name|QString
name|outdir
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|fileName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|QDir
operator|::
name|isRelativePath
argument_list|(
name|file
operator|.
name|fileName
argument_list|()
argument_list|)
condition|)
name|file
operator|.
name|setFileName
argument_list|(
name|Option
operator|::
name|output_dir
operator|+
literal|"/"
operator|+
name|file
operator|.
name|fileName
argument_list|()
argument_list|)
expr_stmt|;
comment|//pwd when qmake was run
name|QFileInfo
name|fi
argument_list|(
name|fileInfo
argument_list|(
name|file
operator|.
name|fileName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fi
operator|.
name|isDir
argument_list|()
condition|)
name|outdir
operator|=
name|file
operator|.
name|fileName
argument_list|()
operator|+
literal|'/'
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|outdir
operator|.
name|isEmpty
argument_list|()
operator|||
name|file
operator|.
name|fileName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QString
name|fname
init|=
literal|"Makefile"
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"MAKEFILE"
argument_list|)
condition|)
name|fname
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"MAKEFILE"
argument_list|)
expr_stmt|;
name|file
operator|.
name|setFileName
argument_list|(
name|outdir
operator|+
name|fname
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|QDir
operator|::
name|isRelativePath
argument_list|(
name|file
operator|.
name|fileName
argument_list|()
argument_list|)
condition|)
block|{
name|QString
name|fname
init|=
name|Option
operator|::
name|output_dir
decl_stmt|;
comment|//pwd when qmake was run
if|if
condition|(
operator|!
name|fname
operator|.
name|endsWith
argument_list|(
literal|"/"
argument_list|)
condition|)
name|fname
operator|+=
literal|"/"
expr_stmt|;
name|fname
operator|+=
name|file
operator|.
name|fileName
argument_list|()
expr_stmt|;
name|file
operator|.
name|setFileName
argument_list|(
name|fname
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|build
operator|.
name|isEmpty
argument_list|()
condition|)
name|file
operator|.
name|setFileName
argument_list|(
name|file
operator|.
name|fileName
argument_list|()
operator|+
literal|"."
operator|+
name|build
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_MAKEFILE"
argument_list|)
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_MAKEFILE"
argument_list|)
operator|.
name|append
argument_list|(
name|file
operator|.
name|fileName
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|slsh
init|=
name|file
operator|.
name|fileName
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
literal|'/'
argument_list|)
decl_stmt|;
if|if
condition|(
name|slsh
operator|!=
operator|-
literal|1
condition|)
name|mkdir
argument_list|(
name|file
operator|.
name|fileName
argument_list|()
operator|.
name|left
argument_list|(
name|slsh
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Text
operator||
name|QIODevice
operator|::
name|Truncate
argument_list|)
condition|)
block|{
name|QFileInfo
name|fi
argument_list|(
name|fileInfo
argument_list|(
name|Option
operator|::
name|output
operator|.
name|fileName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|od
decl_stmt|;
if|if
condition|(
name|fi
operator|.
name|isSymLink
argument_list|()
condition|)
name|od
operator|=
name|fileInfo
argument_list|(
name|fi
operator|.
name|readLink
argument_list|()
argument_list|)
operator|.
name|absolutePath
argument_list|()
expr_stmt|;
else|else
name|od
operator|=
name|fi
operator|.
name|path
argument_list|()
expr_stmt|;
name|od
operator|=
name|QDir
operator|::
name|fromNativeSeparators
argument_list|(
name|od
argument_list|)
expr_stmt|;
if|if
condition|(
name|QDir
operator|::
name|isRelativePath
argument_list|(
name|od
argument_list|)
condition|)
block|{
name|QString
name|dir
init|=
name|Option
operator|::
name|output_dir
decl_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|endsWith
argument_list|(
literal|'/'
argument_list|)
operator|&&
operator|!
name|od
operator|.
name|isEmpty
argument_list|()
condition|)
name|dir
operator|+=
literal|'/'
expr_stmt|;
name|od
operator|.
name|prepend
argument_list|(
name|dir
argument_list|)
expr_stmt|;
block|}
name|Option
operator|::
name|output_dir
operator|=
name|od
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
name|QString
DECL|function|pkgConfigFileName
name|MakefileGenerator
operator|::
name|pkgConfigFileName
parameter_list|(
name|bool
name|fixify
parameter_list|)
block|{
name|QString
name|ret
init|=
name|var
argument_list|(
literal|"TARGET"
argument_list|)
decl_stmt|;
name|int
name|slsh
init|=
name|ret
operator|.
name|lastIndexOf
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
decl_stmt|;
if|if
condition|(
name|slsh
operator|!=
operator|-
literal|1
condition|)
name|ret
operator|=
name|ret
operator|.
name|right
argument_list|(
name|ret
operator|.
name|length
argument_list|()
operator|-
name|slsh
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|ret
operator|.
name|startsWith
argument_list|(
literal|"lib"
argument_list|)
condition|)
name|ret
operator|=
name|ret
operator|.
name|mid
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|int
name|dot
init|=
name|ret
operator|.
name|indexOf
argument_list|(
literal|'.'
argument_list|)
decl_stmt|;
if|if
condition|(
name|dot
operator|!=
operator|-
literal|1
condition|)
name|ret
operator|=
name|ret
operator|.
name|left
argument_list|(
name|dot
argument_list|)
expr_stmt|;
name|ret
operator|+=
name|Option
operator|::
name|pkgcfg_ext
expr_stmt|;
name|QString
name|subdir
init|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_PKGCONFIG_DESTDIR"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|subdir
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// initOutPaths() appends dir_sep, but just to be safe..
if|if
condition|(
operator|!
name|subdir
operator|.
name|endsWith
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
condition|)
name|ret
operator|.
name|prepend
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
expr_stmt|;
name|ret
operator|.
name|prepend
argument_list|(
name|subdir
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|fixify
condition|)
block|{
if|if
condition|(
name|QDir
operator|::
name|isRelativePath
argument_list|(
name|ret
argument_list|)
operator|&&
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"DESTDIR"
argument_list|)
condition|)
name|ret
operator|.
name|prepend
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"DESTDIR"
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|=
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|fileFixify
argument_list|(
name|ret
argument_list|,
name|qmake_getpwd
argument_list|()
argument_list|,
name|Option
operator|::
name|output_dir
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
name|QString
DECL|function|pkgConfigPrefix
name|MakefileGenerator
operator|::
name|pkgConfigPrefix
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_PKGCONFIG_PREFIX"
argument_list|)
condition|)
return|return
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_PKGCONFIG_PREFIX"
argument_list|)
return|;
return|return
name|QLibraryInfo
operator|::
name|rawLocation
argument_list|(
name|QLibraryInfo
operator|::
name|PrefixPath
argument_list|,
name|QLibraryInfo
operator|::
name|FinalPaths
argument_list|)
return|;
block|}
end_function
begin_function
name|QString
DECL|function|pkgConfigFixPath
name|MakefileGenerator
operator|::
name|pkgConfigFixPath
parameter_list|(
name|QString
name|path
parameter_list|)
specifier|const
block|{
name|QString
name|prefix
init|=
name|pkgConfigPrefix
argument_list|()
decl_stmt|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
name|prefix
argument_list|)
condition|)
name|path
operator|=
name|path
operator|.
name|replace
argument_list|(
name|prefix
argument_list|,
literal|"${prefix}"
argument_list|)
expr_stmt|;
return|return
name|path
return|;
block|}
end_function
begin_function
name|void
DECL|function|writePkgConfigFile
name|MakefileGenerator
operator|::
name|writePkgConfigFile
parameter_list|()
block|{
name|QString
name|fname
init|=
name|pkgConfigFileName
argument_list|()
decl_stmt|,
name|lname
init|=
name|fname
decl_stmt|;
name|mkdir
argument_list|(
name|fileInfo
argument_list|(
name|fname
argument_list|)
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|slsh
init|=
name|lname
operator|.
name|lastIndexOf
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
decl_stmt|;
if|if
condition|(
name|slsh
operator|!=
operator|-
literal|1
condition|)
name|lname
operator|=
name|lname
operator|.
name|right
argument_list|(
name|lname
operator|.
name|length
argument_list|()
operator|-
name|slsh
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QFile
name|ft
argument_list|(
name|fname
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ft
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
condition|)
return|return;
name|project
operator|->
name|values
argument_list|(
literal|"ALL_DEPS"
argument_list|)
operator|.
name|append
argument_list|(
name|fileFixify
argument_list|(
name|fname
argument_list|)
argument_list|)
expr_stmt|;
name|QTextStream
name|t
argument_list|(
operator|&
name|ft
argument_list|)
decl_stmt|;
name|QString
name|prefix
init|=
name|pkgConfigPrefix
argument_list|()
decl_stmt|;
name|QString
name|libDir
init|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_PKGCONFIG_LIBDIR"
argument_list|)
decl_stmt|;
if|if
condition|(
name|libDir
operator|.
name|isEmpty
argument_list|()
condition|)
name|libDir
operator|=
name|prefix
operator|+
name|Option
operator|::
name|dir_sep
operator|+
literal|"lib"
operator|+
name|Option
operator|::
name|dir_sep
expr_stmt|;
name|QString
name|includeDir
init|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_PKGCONFIG_INCDIR"
argument_list|)
decl_stmt|;
if|if
condition|(
name|includeDir
operator|.
name|isEmpty
argument_list|()
condition|)
name|includeDir
operator|=
name|prefix
operator|+
literal|"/include"
expr_stmt|;
name|t
operator|<<
literal|"prefix="
operator|<<
name|prefix
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"exec_prefix=${prefix}\n"
operator|<<
literal|"libdir="
operator|<<
name|pkgConfigFixPath
argument_list|(
name|libDir
argument_list|)
operator|<<
literal|"\n"
operator|<<
literal|"includedir="
operator|<<
name|pkgConfigFixPath
argument_list|(
name|includeDir
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
name|endl
expr_stmt|;
comment|//extra PKGCONFIG variables
specifier|const
name|QStringList
modifier|&
name|pkgconfig_vars
init|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PKGCONFIG_VARIABLES"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pkgconfig_vars
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|var
init|=
name|project
operator|->
name|first
argument_list|(
name|pkgconfig_vars
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|+
literal|".name"
argument_list|)
decl_stmt|,
name|val
init|=
name|project
operator|->
name|values
argument_list|(
name|pkgconfig_vars
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|+
literal|".value"
argument_list|)
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
if|if
condition|(
name|var
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|val
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|const
name|QStringList
modifier|&
name|var_vars
init|=
name|project
operator|->
name|values
argument_list|(
name|pkgconfig_vars
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|+
literal|".variable"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|v
init|=
literal|0
init|;
name|v
operator|<
name|var_vars
operator|.
name|size
argument_list|()
condition|;
operator|++
name|v
control|)
block|{
specifier|const
name|QStringList
modifier|&
name|vars
init|=
name|project
operator|->
name|values
argument_list|(
name|var_vars
operator|.
name|at
argument_list|(
name|v
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|var
init|=
literal|0
init|;
name|var
operator|<
name|vars
operator|.
name|size
argument_list|()
condition|;
operator|++
name|var
control|)
block|{
if|if
condition|(
operator|!
name|val
operator|.
name|isEmpty
argument_list|()
condition|)
name|val
operator|+=
literal|" "
expr_stmt|;
name|val
operator|+=
name|pkgConfigFixPath
argument_list|(
name|vars
operator|.
name|at
argument_list|(
name|var
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|t
operator|<<
name|var
operator|<<
literal|"="
operator|<<
name|val
operator|<<
name|endl
expr_stmt|;
block|}
name|t
operator|<<
name|endl
expr_stmt|;
name|QString
name|name
init|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_PKGCONFIG_NAME"
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|name
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_ORIG_TARGET"
argument_list|)
operator|.
name|toLower
argument_list|()
expr_stmt|;
name|name
operator|.
name|replace
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|name
index|[
literal|0
index|]
operator|.
name|toUpper
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|t
operator|<<
literal|"Name: "
operator|<<
name|name
operator|<<
name|endl
expr_stmt|;
name|QString
name|desc
init|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PKGCONFIG_DESCRIPTION"
argument_list|)
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
if|if
condition|(
name|desc
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|desc
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_ORIG_TARGET"
argument_list|)
operator|.
name|toLower
argument_list|()
expr_stmt|;
name|desc
operator|.
name|replace
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
name|desc
index|[
literal|0
index|]
operator|.
name|toUpper
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|desc
operator|=
name|name
expr_stmt|;
block|}
if|if
condition|(
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"lib"
condition|)
block|{
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"plugin"
argument_list|)
condition|)
name|desc
operator|+=
literal|" Plugin"
expr_stmt|;
else|else
name|desc
operator|+=
literal|" Library"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"app"
condition|)
block|{
name|desc
operator|+=
literal|" Application"
expr_stmt|;
block|}
block|}
name|t
operator|<<
literal|"Description: "
operator|<<
name|desc
operator|<<
name|endl
expr_stmt|;
name|t
operator|<<
literal|"Version: "
operator|<<
name|project
operator|->
name|first
argument_list|(
literal|"VERSION"
argument_list|)
operator|<<
name|endl
expr_stmt|;
comment|// libs
name|t
operator|<<
literal|"Libs: "
expr_stmt|;
name|QString
name|pkgConfiglibDir
decl_stmt|;
name|QString
name|pkgConfiglibName
decl_stmt|;
if|if
condition|(
name|target_mode
operator|==
name|TARG_MACX_MODE
operator|&&
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"lib_bundle"
argument_list|)
condition|)
block|{
name|pkgConfiglibDir
operator|=
literal|"-F${libdir}"
expr_stmt|;
name|QString
name|bundle
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_FRAMEWORK_BUNDLE_NAME"
argument_list|)
condition|)
name|bundle
operator|=
name|unescapeFilePath
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_FRAMEWORK_BUNDLE_NAME"
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|bundle
operator|=
name|unescapeFilePath
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"TARGET"
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|suffix
init|=
name|bundle
operator|.
name|lastIndexOf
argument_list|(
literal|".framework"
argument_list|)
decl_stmt|;
if|if
condition|(
name|suffix
operator|!=
operator|-
literal|1
condition|)
name|bundle
operator|=
name|bundle
operator|.
name|left
argument_list|(
name|suffix
argument_list|)
expr_stmt|;
name|pkgConfiglibName
operator|=
literal|"-framework "
operator|+
name|bundle
operator|+
literal|" "
expr_stmt|;
block|}
else|else
block|{
name|pkgConfiglibDir
operator|=
literal|"-L${libdir}"
expr_stmt|;
name|pkgConfiglibName
operator|=
literal|"-l"
operator|+
name|lname
operator|.
name|left
argument_list|(
name|lname
operator|.
name|length
argument_list|()
operator|-
name|Option
operator|::
name|libtool_ext
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"shared"
argument_list|)
condition|)
name|pkgConfiglibName
operator|+=
name|project
operator|->
name|first
argument_list|(
literal|"TARGET_VERSION_EXT"
argument_list|)
expr_stmt|;
block|}
name|t
operator|<<
name|pkgConfiglibDir
operator|<<
literal|" "
operator|<<
name|pkgConfiglibName
operator|<<
literal|" "
operator|<<
name|endl
expr_stmt|;
name|QStringList
name|libs
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_INTERNAL_PRL_LIBS"
argument_list|)
condition|)
block|{
name|libs
operator|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_INTERNAL_PRL_LIBS"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|libs
operator|<<
literal|"QMAKE_LIBS"
expr_stmt|;
comment|//obvious one
block|}
name|libs
operator|<<
literal|"QMAKE_LIBS_PRIVATE"
expr_stmt|;
name|libs
operator|<<
literal|"QMAKE_LFLAGS_THREAD"
expr_stmt|;
comment|//not sure about this one, but what about things like -pthread?
name|t
operator|<<
literal|"Libs.private: "
expr_stmt|;
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|it
init|=
name|libs
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|libs
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|t
operator|<<
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it
operator|)
argument_list|)
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
operator|<<
literal|" "
expr_stmt|;
block|}
name|t
operator|<<
name|endl
expr_stmt|;
comment|// flags
comment|// ### too many
name|t
operator|<<
literal|"Cflags: "
comment|//<< var("QMAKE_CXXFLAGS")<< " "
operator|<<
name|varGlue
argument_list|(
literal|"PRL_EXPORT_DEFINES"
argument_list|,
literal|"-D"
argument_list|,
literal|" -D"
argument_list|,
literal|" "
argument_list|)
operator|<<
name|project
operator|->
name|values
argument_list|(
literal|"PRL_EXPORT_CXXFLAGS"
argument_list|)
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
operator|<<
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PKGCONFIG_CFLAGS"
argument_list|)
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
comment|//<< varGlue("DEFINES","-D"," -D"," ")
operator|<<
literal|" -I${includedir}"
operator|<<
name|endl
expr_stmt|;
comment|// requires
specifier|const
name|QString
name|requires
init|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PKGCONFIG_REQUIRES"
argument_list|)
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|requires
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|t
operator|<<
literal|"Requires: "
operator|<<
name|requires
operator|<<
name|endl
expr_stmt|;
block|}
name|t
operator|<<
name|endl
expr_stmt|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
