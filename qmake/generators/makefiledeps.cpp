begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the qmake application of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"makefiledeps.h"
end_include
begin_include
include|#
directive|include
file|"option.h"
end_include
begin_include
include|#
directive|include
file|<qdir.h>
end_include
begin_include
include|#
directive|include
file|<qdatetime.h>
end_include
begin_include
include|#
directive|include
file|<qfileinfo.h>
end_include
begin_include
include|#
directive|include
file|<qbuffer.h>
end_include
begin_include
include|#
directive|include
file|<qplatformdefs.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
end_if
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_else
else|#
directive|else
end_else
begin_include
include|#
directive|include
file|<io.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|<time.h>
end_include
begin_include
include|#
directive|include
file|<fcntl.h>
end_include
begin_include
include|#
directive|include
file|<sys/types.h>
end_include
begin_include
include|#
directive|include
file|<sys/stat.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
operator|&&
name|_MSC_VER
operator|>=
literal|1400
end_if
begin_include
include|#
directive|include
file|<share.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_function
name|QT_BEGIN_NAMESPACE
comment|// FIXME: a line ending in CRLF gets counted as two lines.
if|#
directive|if
literal|1
DECL|macro|qmake_endOfLine
define|#
directive|define
name|qmake_endOfLine
parameter_list|(
name|c
parameter_list|)
value|(c == '\r' || c == '\n')
else|#
directive|else
specifier|inline
name|bool
name|qmake_endOfLine
parameter_list|(
specifier|const
name|char
modifier|&
name|c
parameter_list|)
block|{
return|return
operator|(
name|c
operator|==
literal|'\r'
operator|||
name|c
operator|==
literal|'\n'
operator|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//#define QMAKE_USE_CACHE
end_comment
begin_constructor
DECL|function|QMakeLocalFileName
name|QMakeLocalFileName
operator|::
name|QMakeLocalFileName
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
member_init_list|:
name|is_null
argument_list|(
name|name
operator|.
name|isNull
argument_list|()
argument_list|)
block|{
if|if
condition|(
operator|!
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|name
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'"'
argument_list|)
operator|&&
name|name
operator|.
name|at
argument_list|(
name|name
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'"'
argument_list|)
condition|)
name|real_name
operator|=
name|name
operator|.
name|mid
argument_list|(
literal|1
argument_list|,
name|name
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
else|else
name|real_name
operator|=
name|name
expr_stmt|;
block|}
block|}
end_constructor
begin_function
specifier|const
name|QString
DECL|function|local
modifier|&
name|QMakeLocalFileName
operator|::
name|local
parameter_list|()
specifier|const
block|{
if|if
condition|(
operator|!
name|is_null
operator|&&
name|local_name
operator|.
name|isNull
argument_list|()
condition|)
name|local_name
operator|=
name|Option
operator|::
name|normalizePath
argument_list|(
name|real_name
argument_list|)
expr_stmt|;
return|return
name|local_name
return|;
block|}
end_function
begin_struct_decl
struct_decl|struct
name|SourceDependChildren
struct_decl|;
end_struct_decl
begin_struct
DECL|struct|SourceFile
struct|struct
name|SourceFile
block|{
DECL|function|SourceFile
name|SourceFile
parameter_list|()
member_init_list|:
name|deps
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|type
argument_list|(
name|QMakeSourceFileInfo
operator|::
name|TYPE_UNKNOWN
argument_list|)
member_init_list|,
name|mocable
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|traversed
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|exists
argument_list|(
literal|1
argument_list|)
member_init_list|,
name|moc_checked
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|dep_checked
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|included_count
argument_list|(
literal|0
argument_list|)
block|{ }
name|~
name|SourceFile
parameter_list|()
destructor_decl|;
DECL|member|file
name|QMakeLocalFileName
name|file
decl_stmt|;
DECL|member|deps
name|SourceDependChildren
modifier|*
name|deps
decl_stmt|;
DECL|member|type
name|QMakeSourceFileInfo
operator|::
name|SourceFileType
name|type
decl_stmt|;
DECL|member|mocable
DECL|member|traversed
DECL|member|exists
name|uint
name|mocable
range|:
literal|1
decl_stmt|,
name|traversed
range|:
literal|1
decl_stmt|,
name|exists
range|:
literal|1
decl_stmt|;
DECL|member|moc_checked
DECL|member|dep_checked
name|uint
name|moc_checked
range|:
literal|1
decl_stmt|,
name|dep_checked
range|:
literal|1
decl_stmt|;
DECL|member|included_count
name|uchar
name|included_count
decl_stmt|;
block|}
struct|;
end_struct
begin_struct
DECL|struct|SourceDependChildren
struct|struct
name|SourceDependChildren
block|{
DECL|member|children
name|SourceFile
modifier|*
modifier|*
name|children
decl_stmt|;
DECL|member|num_nodes
DECL|member|used_nodes
name|int
name|num_nodes
decl_stmt|,
name|used_nodes
decl_stmt|;
DECL|function|SourceDependChildren
name|SourceDependChildren
parameter_list|()
member_init_list|:
name|children
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|num_nodes
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|used_nodes
argument_list|(
literal|0
argument_list|)
block|{ }
DECL|function|~SourceDependChildren
name|~
name|SourceDependChildren
parameter_list|()
block|{
if|if
condition|(
name|children
condition|)
name|free
argument_list|(
name|children
argument_list|)
expr_stmt|;
name|children
operator|=
literal|0
expr_stmt|;
block|}
DECL|function|addChild
name|void
name|addChild
parameter_list|(
name|SourceFile
modifier|*
name|s
parameter_list|)
block|{
if|if
condition|(
name|num_nodes
operator|<=
name|used_nodes
condition|)
block|{
name|num_nodes
operator|+=
literal|200
expr_stmt|;
name|children
operator|=
operator|(
name|SourceFile
operator|*
operator|*
operator|)
name|realloc
argument_list|(
name|children
argument_list|,
sizeof|sizeof
argument_list|(
name|SourceFile
operator|*
argument_list|)
operator|*
operator|(
name|num_nodes
operator|)
argument_list|)
expr_stmt|;
block|}
name|children
index|[
name|used_nodes
operator|++
index|]
operator|=
name|s
expr_stmt|;
block|}
block|}
struct|;
end_struct
begin_destructor
DECL|function|~SourceFile
name|SourceFile
operator|::
name|~
name|SourceFile
parameter_list|()
block|{
operator|delete
name|deps
expr_stmt|;
block|}
end_destructor
begin_class
DECL|class|SourceFiles
class|class
name|SourceFiles
block|{
name|int
name|hash
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
public|public:
name|SourceFiles
parameter_list|()
constructor_decl|;
name|~
name|SourceFiles
parameter_list|()
destructor_decl|;
name|SourceFile
modifier|*
name|lookupFile
parameter_list|(
specifier|const
name|char
modifier|*
parameter_list|)
function_decl|;
DECL|function|lookupFile
specifier|inline
name|SourceFile
modifier|*
name|lookupFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|f
parameter_list|)
block|{
return|return
name|lookupFile
argument_list|(
name|f
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
return|;
block|}
DECL|function|lookupFile
specifier|inline
name|SourceFile
modifier|*
name|lookupFile
parameter_list|(
specifier|const
name|QMakeLocalFileName
modifier|&
name|f
parameter_list|)
block|{
return|return
name|lookupFile
argument_list|(
name|f
operator|.
name|local
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
return|;
block|}
name|void
name|addFile
parameter_list|(
name|SourceFile
modifier|*
parameter_list|,
specifier|const
name|char
modifier|*
name|k
init|=
literal|0
parameter_list|,
name|bool
name|own
init|=
literal|true
parameter_list|)
function_decl|;
DECL|struct|SourceFileNode
struct|struct
name|SourceFileNode
block|{
DECL|function|SourceFileNode
name|SourceFileNode
parameter_list|()
member_init_list|:
name|key
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|next
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|file
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|own_file
argument_list|(
literal|1
argument_list|)
block|{ }
DECL|function|~SourceFileNode
name|~
name|SourceFileNode
parameter_list|()
block|{
operator|delete
index|[]
name|key
expr_stmt|;
if|if
condition|(
name|own_file
condition|)
operator|delete
name|file
expr_stmt|;
block|}
DECL|member|key
name|char
modifier|*
name|key
decl_stmt|;
DECL|member|next
name|SourceFileNode
modifier|*
name|next
decl_stmt|;
DECL|member|file
name|SourceFile
modifier|*
name|file
decl_stmt|;
DECL|member|own_file
name|uint
name|own_file
range|:
literal|1
decl_stmt|;
DECL|member|nodes
block|}
modifier|*
modifier|*
name|nodes
struct|;
DECL|member|num_nodes
name|int
name|num_nodes
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|SourceFiles
name|SourceFiles
operator|::
name|SourceFiles
parameter_list|()
block|{
name|nodes
operator|=
operator|(
name|SourceFileNode
operator|*
operator|*
operator|)
name|malloc
argument_list|(
sizeof|sizeof
argument_list|(
name|SourceFileNode
operator|*
argument_list|)
operator|*
operator|(
name|num_nodes
operator|=
literal|3037
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|num_nodes
condition|;
name|n
operator|++
control|)
name|nodes
index|[
name|n
index|]
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~SourceFiles
name|SourceFiles
operator|::
name|~
name|SourceFiles
parameter_list|()
block|{
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
name|n
operator|<
name|num_nodes
condition|;
name|n
operator|++
control|)
block|{
for|for
control|(
name|SourceFileNode
modifier|*
name|next
init|=
name|nodes
index|[
name|n
index|]
init|;
name|next
condition|;
control|)
block|{
name|SourceFileNode
modifier|*
name|next_next
init|=
name|next
operator|->
name|next
decl_stmt|;
operator|delete
name|next
expr_stmt|;
name|next
operator|=
name|next_next
expr_stmt|;
block|}
block|}
name|free
argument_list|(
name|nodes
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|hash
name|int
name|SourceFiles
operator|::
name|hash
parameter_list|(
specifier|const
name|char
modifier|*
name|file
parameter_list|)
block|{
name|uint
name|h
init|=
literal|0
decl_stmt|,
name|g
decl_stmt|;
while|while
condition|(
operator|*
name|file
condition|)
block|{
name|h
operator|=
operator|(
name|h
operator|<<
literal|4
operator|)
operator|+
operator|*
name|file
expr_stmt|;
if|if
condition|(
operator|(
name|g
operator|=
operator|(
name|h
operator|&
literal|0xf0000000
operator|)
operator|)
operator|!=
literal|0
condition|)
name|h
operator|^=
name|g
operator|>>
literal|23
expr_stmt|;
name|h
operator|&=
operator|~
name|g
expr_stmt|;
name|file
operator|++
expr_stmt|;
block|}
return|return
name|h
return|;
block|}
end_function
begin_function
DECL|function|lookupFile
name|SourceFile
modifier|*
name|SourceFiles
operator|::
name|lookupFile
parameter_list|(
specifier|const
name|char
modifier|*
name|file
parameter_list|)
block|{
name|int
name|h
init|=
name|hash
argument_list|(
name|file
argument_list|)
operator|%
name|num_nodes
decl_stmt|;
for|for
control|(
name|SourceFileNode
modifier|*
name|p
init|=
name|nodes
index|[
name|h
index|]
init|;
name|p
condition|;
name|p
operator|=
name|p
operator|->
name|next
control|)
block|{
if|if
condition|(
operator|!
name|strcmp
argument_list|(
name|p
operator|->
name|key
argument_list|,
name|file
argument_list|)
condition|)
return|return
name|p
operator|->
name|file
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|addFile
name|void
name|SourceFiles
operator|::
name|addFile
parameter_list|(
name|SourceFile
modifier|*
name|p
parameter_list|,
specifier|const
name|char
modifier|*
name|k
parameter_list|,
name|bool
name|own_file
parameter_list|)
block|{
specifier|const
name|QByteArray
name|ba
init|=
name|p
operator|->
name|file
operator|.
name|local
argument_list|()
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|k
condition|)
name|k
operator|=
name|ba
operator|.
name|constData
argument_list|()
expr_stmt|;
name|int
name|h
init|=
name|hash
argument_list|(
name|k
argument_list|)
operator|%
name|num_nodes
decl_stmt|;
name|SourceFileNode
modifier|*
name|pn
init|=
operator|new
name|SourceFileNode
decl_stmt|;
name|pn
operator|->
name|own_file
operator|=
name|own_file
expr_stmt|;
name|pn
operator|->
name|key
operator|=
name|qstrdup
argument_list|(
name|k
argument_list|)
expr_stmt|;
name|pn
operator|->
name|file
operator|=
name|p
expr_stmt|;
name|pn
operator|->
name|next
operator|=
name|nodes
index|[
name|h
index|]
expr_stmt|;
name|nodes
index|[
name|h
index|]
operator|=
name|pn
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dependTreeWalker
name|void
name|QMakeSourceFileInfo
operator|::
name|dependTreeWalker
parameter_list|(
name|SourceFile
modifier|*
name|node
parameter_list|,
name|SourceDependChildren
modifier|*
name|place
parameter_list|)
block|{
if|if
condition|(
name|node
operator|->
name|traversed
operator|||
operator|!
name|node
operator|->
name|exists
condition|)
return|return;
name|place
operator|->
name|addChild
argument_list|(
name|node
argument_list|)
expr_stmt|;
name|node
operator|->
name|traversed
operator|=
literal|true
expr_stmt|;
comment|//set flag
if|if
condition|(
name|node
operator|->
name|deps
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|node
operator|->
name|deps
operator|->
name|used_nodes
condition|;
name|i
operator|++
control|)
name|dependTreeWalker
argument_list|(
name|node
operator|->
name|deps
operator|->
name|children
index|[
name|i
index|]
argument_list|,
name|place
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setDependencyPaths
name|void
name|QMakeSourceFileInfo
operator|::
name|setDependencyPaths
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QMakeLocalFileName
argument_list|>
modifier|&
name|l
parameter_list|)
block|{
comment|// Ensure that depdirs does not contain the same paths several times, to minimize the stats
name|QList
argument_list|<
name|QMakeLocalFileName
argument_list|>
name|ll
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|ll
operator|.
name|contains
argument_list|(
name|l
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
name|ll
operator|.
name|append
argument_list|(
name|l
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|depdirs
operator|=
name|ll
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dependencies
name|QStringList
name|QMakeSourceFileInfo
operator|::
name|dependencies
parameter_list|(
specifier|const
name|QString
modifier|&
name|file
parameter_list|)
block|{
name|QStringList
name|ret
decl_stmt|;
if|if
condition|(
operator|!
name|files
condition|)
return|return
name|ret
return|;
if|if
condition|(
name|SourceFile
modifier|*
name|node
init|=
name|files
operator|->
name|lookupFile
argument_list|(
name|QMakeLocalFileName
argument_list|(
name|file
argument_list|)
argument_list|)
condition|)
block|{
if|if
condition|(
name|node
operator|->
name|deps
condition|)
block|{
comment|/* I stick them into a SourceDependChildren here because it is faster to just                iterate over the list to stick them in the list, and reset the flag, then it is                to loop over the tree (about 50% faster I saw) --Sam */
name|SourceDependChildren
name|place
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|node
operator|->
name|deps
operator|->
name|used_nodes
condition|;
name|i
operator|++
control|)
name|dependTreeWalker
argument_list|(
name|node
operator|->
name|deps
operator|->
name|children
index|[
name|i
index|]
argument_list|,
operator|&
name|place
argument_list|)
expr_stmt|;
if|if
condition|(
name|place
operator|.
name|children
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|place
operator|.
name|used_nodes
condition|;
name|i
operator|++
control|)
block|{
name|place
operator|.
name|children
index|[
name|i
index|]
operator|->
name|traversed
operator|=
literal|false
expr_stmt|;
comment|//reset flag
name|ret
operator|.
name|append
argument_list|(
name|place
operator|.
name|children
index|[
name|i
index|]
operator|->
name|file
operator|.
name|real
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
name|int
DECL|function|included
name|QMakeSourceFileInfo
operator|::
name|included
parameter_list|(
specifier|const
name|QString
modifier|&
name|file
parameter_list|)
block|{
if|if
condition|(
operator|!
name|files
condition|)
return|return
literal|0
return|;
if|if
condition|(
name|SourceFile
modifier|*
name|node
init|=
name|files
operator|->
name|lookupFile
argument_list|(
name|QMakeLocalFileName
argument_list|(
name|file
argument_list|)
argument_list|)
condition|)
return|return
name|node
operator|->
name|included_count
return|;
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|mocable
name|bool
name|QMakeSourceFileInfo
operator|::
name|mocable
parameter_list|(
specifier|const
name|QString
modifier|&
name|file
parameter_list|)
block|{
if|if
condition|(
name|SourceFile
modifier|*
name|node
init|=
name|files
operator|->
name|lookupFile
argument_list|(
name|QMakeLocalFileName
argument_list|(
name|file
argument_list|)
argument_list|)
condition|)
return|return
name|node
operator|->
name|mocable
return|;
return|return
literal|false
return|;
block|}
end_function
begin_constructor
DECL|function|QMakeSourceFileInfo
name|QMakeSourceFileInfo
operator|::
name|QMakeSourceFileInfo
parameter_list|(
specifier|const
name|QString
modifier|&
name|cf
parameter_list|)
block|{
comment|//dep_mode
name|dep_mode
operator|=
name|Recursive
expr_stmt|;
comment|//quick project lookups
name|includes
operator|=
name|files
operator|=
literal|0
expr_stmt|;
name|files_changed
operator|=
literal|false
expr_stmt|;
comment|//buffer
name|spare_buffer
operator|=
literal|0
expr_stmt|;
name|spare_buffer_size
operator|=
literal|0
expr_stmt|;
comment|//cache
name|cachefile
operator|=
name|cf
expr_stmt|;
if|if
condition|(
operator|!
name|cachefile
operator|.
name|isEmpty
argument_list|()
condition|)
name|loadCache
argument_list|(
name|cachefile
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~QMakeSourceFileInfo
name|QMakeSourceFileInfo
operator|::
name|~
name|QMakeSourceFileInfo
parameter_list|()
block|{
comment|//cache
if|if
condition|(
operator|!
name|cachefile
operator|.
name|isEmpty
argument_list|()
comment|/*&& files_changed*/
condition|)
name|saveCache
argument_list|(
name|cachefile
argument_list|)
expr_stmt|;
comment|//buffer
if|if
condition|(
name|spare_buffer
condition|)
block|{
name|free
argument_list|(
name|spare_buffer
argument_list|)
expr_stmt|;
name|spare_buffer
operator|=
literal|0
expr_stmt|;
name|spare_buffer_size
operator|=
literal|0
expr_stmt|;
block|}
comment|//quick project lookup
operator|delete
name|files
expr_stmt|;
operator|delete
name|includes
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|setCacheFile
name|void
name|QMakeSourceFileInfo
operator|::
name|setCacheFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|cf
parameter_list|)
block|{
name|cachefile
operator|=
name|cf
expr_stmt|;
name|loadCache
argument_list|(
name|cachefile
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addSourceFiles
name|void
name|QMakeSourceFileInfo
operator|::
name|addSourceFiles
parameter_list|(
specifier|const
name|ProStringList
modifier|&
name|l
parameter_list|,
name|uchar
name|seek
parameter_list|,
name|QMakeSourceFileInfo
operator|::
name|SourceFileType
name|type
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|addSourceFile
argument_list|(
name|l
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toQString
argument_list|()
argument_list|,
name|seek
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addSourceFile
name|void
name|QMakeSourceFileInfo
operator|::
name|addSourceFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|f
parameter_list|,
name|uchar
name|seek
parameter_list|,
name|QMakeSourceFileInfo
operator|::
name|SourceFileType
name|type
parameter_list|)
block|{
if|if
condition|(
operator|!
name|files
condition|)
name|files
operator|=
operator|new
name|SourceFiles
expr_stmt|;
name|QMakeLocalFileName
name|fn
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|SourceFile
modifier|*
name|file
init|=
name|files
operator|->
name|lookupFile
argument_list|(
name|fn
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
condition|)
block|{
name|file
operator|=
operator|new
name|SourceFile
expr_stmt|;
name|file
operator|->
name|file
operator|=
name|fn
expr_stmt|;
name|files
operator|->
name|addFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|file
operator|->
name|type
operator|!=
name|type
operator|&&
name|file
operator|->
name|type
operator|!=
name|TYPE_UNKNOWN
operator|&&
name|type
operator|!=
name|TYPE_UNKNOWN
condition|)
name|warn_msg
argument_list|(
name|WarnLogic
argument_list|,
literal|"%s is marked as %d, then %d!"
argument_list|,
name|f
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|file
operator|->
name|type
argument_list|,
name|type
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|type
operator|!=
name|TYPE_UNKNOWN
condition|)
name|file
operator|->
name|type
operator|=
name|type
expr_stmt|;
if|if
condition|(
name|seek
operator|&
name|SEEK_MOCS
operator|&&
operator|!
name|file
operator|->
name|moc_checked
condition|)
name|findMocs
argument_list|(
name|file
argument_list|)
expr_stmt|;
if|if
condition|(
name|seek
operator|&
name|SEEK_DEPS
operator|&&
operator|!
name|file
operator|->
name|dep_checked
condition|)
name|findDeps
argument_list|(
name|file
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|containsSourceFile
name|bool
name|QMakeSourceFileInfo
operator|::
name|containsSourceFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|f
parameter_list|,
name|SourceFileType
name|type
parameter_list|)
block|{
if|if
condition|(
name|SourceFile
modifier|*
name|file
init|=
name|files
operator|->
name|lookupFile
argument_list|(
name|QMakeLocalFileName
argument_list|(
name|f
argument_list|)
argument_list|)
condition|)
return|return
operator|(
name|file
operator|->
name|type
operator|==
name|type
operator|||
name|file
operator|->
name|type
operator|==
name|TYPE_UNKNOWN
operator|||
name|type
operator|==
name|TYPE_UNKNOWN
operator|)
return|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|isSystemInclude
name|bool
name|QMakeSourceFileInfo
operator|::
name|isSystemInclude
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
if|if
condition|(
name|QDir
operator|::
name|isRelativePath
argument_list|(
name|name
argument_list|)
condition|)
block|{
comment|// if we got a relative path here, it's either an -I flag with a relative path
comment|// or an include file we couldn't locate. Either way, conclude it's not
comment|// a system include.
return|return
literal|false
return|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|systemIncludes
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
comment|// check if name is located inside the system include dir:
name|QDir
name|systemDir
argument_list|(
name|systemIncludes
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|relativePath
init|=
name|systemDir
operator|.
name|relativeFilePath
argument_list|(
name|name
argument_list|)
decl_stmt|;
comment|// the relative path might be absolute if we're crossing drives on Windows
if|if
condition|(
name|QDir
operator|::
name|isAbsolutePath
argument_list|(
name|relativePath
argument_list|)
operator|||
name|relativePath
operator|.
name|startsWith
argument_list|(
literal|"../"
argument_list|)
condition|)
continue|continue;
name|debug_msg
argument_list|(
literal|5
argument_list|,
literal|"File/dir %s is in system dir %s, skipping"
argument_list|,
name|qPrintable
argument_list|(
name|name
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|systemIncludes
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|getBuffer
name|char
modifier|*
name|QMakeSourceFileInfo
operator|::
name|getBuffer
parameter_list|(
name|int
name|s
parameter_list|)
block|{
if|if
condition|(
operator|!
name|spare_buffer
operator|||
name|spare_buffer_size
operator|<
name|s
condition|)
name|spare_buffer
operator|=
operator|(
name|char
operator|*
operator|)
name|realloc
argument_list|(
name|spare_buffer
argument_list|,
name|spare_buffer_size
operator|=
name|s
argument_list|)
expr_stmt|;
return|return
name|spare_buffer
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|S_ISDIR
end_ifndef
begin_define
DECL|macro|S_ISDIR
define|#
directive|define
name|S_ISDIR
parameter_list|(
name|x
parameter_list|)
value|(x& _S_IFDIR)
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|fixPathForFile
name|QMakeLocalFileName
name|QMakeSourceFileInfo
operator|::
name|fixPathForFile
parameter_list|(
specifier|const
name|QMakeLocalFileName
modifier|&
name|f
parameter_list|,
name|bool
parameter_list|)
block|{
return|return
name|f
return|;
block|}
end_function
begin_function
DECL|function|findFileForDep
name|QMakeLocalFileName
name|QMakeSourceFileInfo
operator|::
name|findFileForDep
parameter_list|(
specifier|const
name|QMakeLocalFileName
modifier|&
comment|/*dep*/
parameter_list|,
specifier|const
name|QMakeLocalFileName
modifier|&
comment|/*file*/
parameter_list|)
block|{
return|return
name|QMakeLocalFileName
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|findFileInfo
name|QFileInfo
name|QMakeSourceFileInfo
operator|::
name|findFileInfo
parameter_list|(
specifier|const
name|QMakeLocalFileName
modifier|&
name|dep
parameter_list|)
block|{
return|return
name|QFileInfo
argument_list|(
name|dep
operator|.
name|real
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|findDeps
name|bool
name|QMakeSourceFileInfo
operator|::
name|findDeps
parameter_list|(
name|SourceFile
modifier|*
name|file
parameter_list|)
block|{
if|if
condition|(
name|file
operator|->
name|dep_checked
operator|||
name|file
operator|->
name|type
operator|==
name|TYPE_UNKNOWN
condition|)
return|return
literal|true
return|;
name|files_changed
operator|=
literal|true
expr_stmt|;
name|file
operator|->
name|dep_checked
operator|=
literal|true
expr_stmt|;
specifier|const
name|QMakeLocalFileName
name|sourceFile
init|=
name|fixPathForFile
argument_list|(
name|file
operator|->
name|file
argument_list|,
literal|true
argument_list|)
decl_stmt|;
name|struct
name|stat
name|fst
decl_stmt|;
name|char
modifier|*
name|buffer
init|=
literal|0
decl_stmt|;
name|int
name|buffer_len
init|=
literal|0
decl_stmt|;
block|{
name|int
name|fd
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
operator|&&
name|_MSC_VER
operator|>=
literal|1400
if|if
condition|(
name|_sopen_s
argument_list|(
operator|&
name|fd
argument_list|,
name|sourceFile
operator|.
name|local
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|_O_RDONLY
argument_list|,
name|_SH_DENYNO
argument_list|,
name|_S_IREAD
argument_list|)
operator|!=
literal|0
condition|)
name|fd
operator|=
operator|-
literal|1
expr_stmt|;
else|#
directive|else
name|fd
operator|=
name|open
argument_list|(
name|sourceFile
operator|.
name|local
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|O_RDONLY
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|fd
operator|==
operator|-
literal|1
operator|||
name|fstat
argument_list|(
name|fd
argument_list|,
operator|&
name|fst
argument_list|)
operator|||
name|S_ISDIR
argument_list|(
name|fst
operator|.
name|st_mode
argument_list|)
condition|)
block|{
if|if
condition|(
name|fd
operator|!=
operator|-
literal|1
condition|)
name|QT_CLOSE
argument_list|(
name|fd
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|buffer
operator|=
name|getBuffer
argument_list|(
name|fst
operator|.
name|st_size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|have_read
init|=
literal|0
init|;
operator|(
name|have_read
operator|=
name|QT_READ
argument_list|(
name|fd
argument_list|,
name|buffer
operator|+
name|buffer_len
argument_list|,
name|fst
operator|.
name|st_size
operator|-
name|buffer_len
argument_list|)
operator|)
condition|;
name|buffer_len
operator|+=
name|have_read
control|)
empty_stmt|;
name|QT_CLOSE
argument_list|(
name|fd
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|buffer
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|file
operator|->
name|deps
condition|)
name|file
operator|->
name|deps
operator|=
operator|new
name|SourceDependChildren
expr_stmt|;
name|int
name|line_count
init|=
literal|1
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|buffer_len
condition|;
operator|++
name|x
control|)
block|{
name|bool
name|try_local
init|=
literal|true
decl_stmt|;
name|char
modifier|*
name|inc
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|file
operator|->
name|type
operator|==
name|QMakeSourceFileInfo
operator|::
name|TYPE_UI
condition|)
block|{
comment|// skip whitespaces
while|while
condition|(
name|x
operator|<
name|buffer_len
operator|&&
operator|(
name|buffer
index|[
name|x
index|]
operator|==
literal|' '
operator|||
name|buffer
index|[
name|x
index|]
operator|==
literal|'\t'
operator|)
condition|)
operator|++
name|x
expr_stmt|;
if|if
condition|(
name|buffer
index|[
name|x
index|]
operator|==
literal|'<'
condition|)
block|{
operator|++
name|x
expr_stmt|;
if|if
condition|(
name|buffer_len
operator|>=
name|x
operator|+
literal|12
operator|&&
operator|!
name|strncmp
argument_list|(
name|buffer
operator|+
name|x
argument_list|,
literal|"includehint"
argument_list|,
literal|11
argument_list|)
operator|&&
operator|(
name|buffer
index|[
name|x
operator|+
literal|11
index|]
operator|==
literal|' '
operator|||
name|buffer
index|[
name|x
operator|+
literal|11
index|]
operator|==
literal|'>'
operator|)
condition|)
block|{
for|for
control|(
name|x
operator|+=
literal|11
init|;
name|buffer
index|[
name|x
index|]
operator|!=
literal|'>'
condition|;
operator|++
name|x
control|)
block|{}
comment|// skip
name|int
name|inc_len
init|=
literal|0
decl_stmt|;
for|for
control|(
name|x
operator|+=
literal|1
init|;
name|buffer
index|[
name|x
operator|+
name|inc_len
index|]
operator|!=
literal|'<'
condition|;
operator|++
name|inc_len
control|)
block|{}
comment|// skip
name|buffer
index|[
name|x
operator|+
name|inc_len
index|]
operator|=
literal|'\0'
expr_stmt|;
name|inc
operator|=
name|buffer
operator|+
name|x
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|buffer_len
operator|>=
name|x
operator|+
literal|13
operator|&&
operator|!
name|strncmp
argument_list|(
name|buffer
operator|+
name|x
argument_list|,
literal|"customwidget"
argument_list|,
literal|12
argument_list|)
operator|&&
operator|(
name|buffer
index|[
name|x
operator|+
literal|12
index|]
operator|==
literal|' '
operator|||
name|buffer
index|[
name|x
operator|+
literal|12
index|]
operator|==
literal|'>'
operator|)
condition|)
block|{
for|for
control|(
name|x
operator|+=
literal|13
init|;
name|buffer
index|[
name|x
index|]
operator|!=
literal|'>'
condition|;
operator|++
name|x
control|)
block|{}
comment|// skip up to>
while|while
condition|(
name|x
operator|<
name|buffer_len
condition|)
block|{
for|for
control|(
name|x
operator|++
init|;
name|buffer
index|[
name|x
index|]
operator|!=
literal|'<'
condition|;
operator|++
name|x
control|)
block|{}
comment|// skip up to<
name|x
operator|++
expr_stmt|;
if|if
condition|(
name|buffer_len
operator|>=
name|x
operator|+
literal|7
operator|&&
operator|!
name|strncmp
argument_list|(
name|buffer
operator|+
name|x
argument_list|,
literal|"header"
argument_list|,
literal|6
argument_list|)
operator|&&
operator|(
name|buffer
index|[
name|x
operator|+
literal|6
index|]
operator|==
literal|' '
operator|||
name|buffer
index|[
name|x
operator|+
literal|6
index|]
operator|==
literal|'>'
operator|)
condition|)
block|{
for|for
control|(
name|x
operator|+=
literal|7
init|;
name|buffer
index|[
name|x
index|]
operator|!=
literal|'>'
condition|;
operator|++
name|x
control|)
block|{}
comment|// skip up to>
name|int
name|inc_len
init|=
literal|0
decl_stmt|;
for|for
control|(
name|x
operator|+=
literal|1
init|;
name|buffer
index|[
name|x
operator|+
name|inc_len
index|]
operator|!=
literal|'<'
condition|;
operator|++
name|inc_len
control|)
block|{}
comment|// skip
name|buffer
index|[
name|x
operator|+
name|inc_len
index|]
operator|=
literal|'\0'
expr_stmt|;
name|inc
operator|=
name|buffer
operator|+
name|x
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|buffer_len
operator|>=
name|x
operator|+
literal|14
operator|&&
operator|!
name|strncmp
argument_list|(
name|buffer
operator|+
name|x
argument_list|,
literal|"/customwidget"
argument_list|,
literal|13
argument_list|)
operator|&&
operator|(
name|buffer
index|[
name|x
operator|+
literal|13
index|]
operator|==
literal|' '
operator|||
name|buffer
index|[
name|x
operator|+
literal|13
index|]
operator|==
literal|'>'
operator|)
condition|)
block|{
name|x
operator|+=
literal|14
expr_stmt|;
break|break;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|buffer_len
operator|>=
name|x
operator|+
literal|8
operator|&&
operator|!
name|strncmp
argument_list|(
name|buffer
operator|+
name|x
argument_list|,
literal|"include"
argument_list|,
literal|7
argument_list|)
operator|&&
operator|(
name|buffer
index|[
name|x
operator|+
literal|7
index|]
operator|==
literal|' '
operator|||
name|buffer
index|[
name|x
operator|+
literal|7
index|]
operator|==
literal|'>'
operator|)
condition|)
block|{
for|for
control|(
name|x
operator|+=
literal|8
init|;
name|buffer
index|[
name|x
index|]
operator|!=
literal|'>'
condition|;
operator|++
name|x
control|)
block|{
if|if
condition|(
name|buffer_len
operator|>=
name|x
operator|+
literal|9
operator|&&
name|buffer
index|[
name|x
index|]
operator|==
literal|'i'
operator|&&
operator|!
name|strncmp
argument_list|(
name|buffer
operator|+
name|x
argument_list|,
literal|"impldecl"
argument_list|,
literal|8
argument_list|)
condition|)
block|{
for|for
control|(
name|x
operator|+=
literal|8
init|;
name|buffer
index|[
name|x
index|]
operator|!=
literal|'='
condition|;
operator|++
name|x
control|)
block|{}
comment|// skip
if|if
condition|(
name|buffer
index|[
name|x
index|]
operator|!=
literal|'='
condition|)
continue|continue;
for|for
control|(
operator|++
name|x
init|;
name|buffer
index|[
name|x
index|]
operator|==
literal|'\t'
operator|||
name|buffer
index|[
name|x
index|]
operator|==
literal|' '
condition|;
operator|++
name|x
control|)
block|{}
comment|// skip
name|char
name|quote
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|buffer
index|[
name|x
index|]
operator|==
literal|'\''
operator|||
name|buffer
index|[
name|x
index|]
operator|==
literal|'"'
condition|)
block|{
name|quote
operator|=
name|buffer
index|[
name|x
index|]
expr_stmt|;
operator|++
name|x
expr_stmt|;
block|}
name|int
name|val_len
decl_stmt|;
for|for
control|(
name|val_len
operator|=
literal|0
init|;
literal|true
condition|;
operator|++
name|val_len
control|)
block|{
if|if
condition|(
name|quote
condition|)
block|{
if|if
condition|(
name|buffer
index|[
name|x
operator|+
name|val_len
index|]
operator|==
name|quote
condition|)
break|break;
block|}
elseif|else
if|if
condition|(
name|buffer
index|[
name|x
operator|+
name|val_len
index|]
operator|==
literal|'>'
operator|||
name|buffer
index|[
name|x
operator|+
name|val_len
index|]
operator|==
literal|' '
condition|)
block|{
break|break;
block|}
block|}
comment|//?                            char saved = buffer[x + val_len];
name|buffer
index|[
name|x
operator|+
name|val_len
index|]
operator|=
literal|'\0'
expr_stmt|;
if|if
condition|(
operator|!
name|strcmp
argument_list|(
name|buffer
operator|+
name|x
argument_list|,
literal|"in implementation"
argument_list|)
condition|)
block|{
comment|//### do this
block|}
block|}
block|}
name|int
name|inc_len
init|=
literal|0
decl_stmt|;
for|for
control|(
name|x
operator|+=
literal|1
init|;
name|buffer
index|[
name|x
operator|+
name|inc_len
index|]
operator|!=
literal|'<'
condition|;
operator|++
name|inc_len
control|)
block|{}
comment|// skip
name|buffer
index|[
name|x
operator|+
name|inc_len
index|]
operator|=
literal|'\0'
expr_stmt|;
name|inc
operator|=
name|buffer
operator|+
name|x
expr_stmt|;
block|}
block|}
comment|//read past new line now..
for|for
control|(
init|;
name|x
operator|<
name|buffer_len
operator|&&
operator|!
name|qmake_endOfLine
argument_list|(
name|buffer
index|[
name|x
index|]
argument_list|)
condition|;
operator|++
name|x
control|)
block|{}
comment|// skip
operator|++
name|line_count
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|file
operator|->
name|type
operator|==
name|QMakeSourceFileInfo
operator|::
name|TYPE_QRC
condition|)
block|{         }
elseif|else
if|if
condition|(
name|file
operator|->
name|type
operator|==
name|QMakeSourceFileInfo
operator|::
name|TYPE_C
condition|)
block|{
for|for
control|(
name|int
name|beginning
init|=
literal|1
init|;
name|x
operator|<
name|buffer_len
condition|;
operator|++
name|x
control|)
block|{
comment|// Seek code or directive, skipping comments and space:
for|for
control|(
init|;
name|x
operator|<
name|buffer_len
condition|;
operator|++
name|x
control|)
block|{
if|if
condition|(
name|buffer
index|[
name|x
index|]
operator|==
literal|' '
operator|||
name|buffer
index|[
name|x
index|]
operator|==
literal|'\t'
condition|)
block|{
comment|// keep going
block|}
elseif|else
if|if
condition|(
name|buffer
index|[
name|x
index|]
operator|==
literal|'/'
operator|&&
name|x
operator|+
literal|1
operator|<
name|buffer_len
operator|&&
operator|(
name|buffer
index|[
name|x
operator|+
literal|1
index|]
operator|==
literal|'/'
operator|||
name|buffer
index|[
name|x
operator|+
literal|1
index|]
operator|==
literal|'*'
operator|)
condition|)
block|{
operator|++
name|x
expr_stmt|;
if|if
condition|(
name|buffer
index|[
name|x
index|]
operator|==
literal|'/'
condition|)
block|{
comment|// C++-style comment
for|for
control|(
init|;
name|x
operator|<
name|buffer_len
operator|&&
operator|!
name|qmake_endOfLine
argument_list|(
name|buffer
index|[
name|x
index|]
argument_list|)
condition|;
operator|++
name|x
control|)
block|{}
comment|// skip
name|beginning
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
comment|// C-style comment
while|while
condition|(
operator|++
name|x
operator|<
name|buffer_len
condition|)
block|{
if|if
condition|(
name|buffer
index|[
name|x
index|]
operator|==
literal|'*'
condition|)
block|{
if|if
condition|(
name|x
operator|+
literal|1
operator|<
name|buffer_len
operator|&&
name|buffer
index|[
name|x
operator|+
literal|1
index|]
operator|==
literal|'/'
condition|)
block|{
operator|++
name|x
expr_stmt|;
comment|// skip '*'; for loop skips '/'.
break|break;
block|}
block|}
elseif|else
if|if
condition|(
name|qmake_endOfLine
argument_list|(
name|buffer
index|[
name|x
index|]
argument_list|)
condition|)
block|{
operator|++
name|line_count
expr_stmt|;
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|qmake_endOfLine
argument_list|(
name|buffer
index|[
name|x
index|]
argument_list|)
condition|)
block|{
operator|++
name|line_count
expr_stmt|;
name|beginning
operator|=
literal|1
expr_stmt|;
block|}
else|else
block|{
break|break;
block|}
block|}
if|if
condition|(
name|x
operator|>=
name|buffer_len
condition|)
break|break;
comment|// preprocessor directive
if|if
condition|(
name|beginning
operator|&&
name|buffer
index|[
name|x
index|]
operator|==
literal|'#'
condition|)
block|{
comment|// Advance to start of preprocessing directive
while|while
condition|(
operator|++
name|x
operator|<
name|buffer_len
operator|&&
operator|(
name|buffer
index|[
name|x
index|]
operator|==
literal|' '
operator|||
name|buffer
index|[
name|x
index|]
operator|==
literal|'\t'
operator|)
condition|)
block|{}
comment|// skip
if|if
condition|(
name|qmake_endOfLine
argument_list|(
name|buffer
index|[
name|x
index|]
argument_list|)
condition|)
block|{
operator|++
name|line_count
expr_stmt|;
name|beginning
operator|=
literal|1
expr_stmt|;
continue|continue;
block|}
break|break;
block|}
comment|// quoted strings
if|if
condition|(
name|buffer
index|[
name|x
index|]
operator|==
literal|'\''
operator|||
name|buffer
index|[
name|x
index|]
operator|==
literal|'"'
condition|)
block|{
specifier|const
name|char
name|term
init|=
name|buffer
index|[
name|x
index|]
decl_stmt|;
while|while
condition|(
operator|++
name|x
operator|<
name|buffer_len
condition|)
block|{
if|if
condition|(
name|buffer
index|[
name|x
index|]
operator|==
name|term
condition|)
block|{
operator|++
name|x
expr_stmt|;
break|break;
block|}
elseif|else
if|if
condition|(
name|buffer
index|[
name|x
index|]
operator|==
literal|'\\'
condition|)
block|{
operator|++
name|x
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|qmake_endOfLine
argument_list|(
name|buffer
index|[
name|x
index|]
argument_list|)
condition|)
block|{
operator|++
name|line_count
expr_stmt|;
block|}
block|}
block|}
name|beginning
operator|=
literal|0
expr_stmt|;
block|}
if|if
condition|(
name|x
operator|>=
name|buffer_len
condition|)
break|break;
comment|// Got a preprocessor directive
specifier|const
name|char
modifier|*
specifier|const
name|keyword
init|=
name|buffer
operator|+
name|x
decl_stmt|;
for|for
control|(
init|;
name|x
operator|<
name|buffer_len
operator|&&
name|buffer
index|[
name|x
index|]
operator|>=
literal|'a'
operator|&&
name|buffer
index|[
name|x
index|]
operator|<=
literal|'z'
condition|;
name|x
operator|++
control|)
block|{}
comment|// skip over identifier
name|int
name|keyword_len
init|=
name|buffer
operator|+
name|x
operator|-
name|keyword
decl_stmt|;
for|for
control|(
init|;
name|x
operator|<
name|buffer_len
operator|&&
operator|(
name|buffer
index|[
name|x
index|]
operator|==
literal|' '
operator|||
name|buffer
index|[
name|x
index|]
operator|==
literal|'\t'
operator|)
condition|;
name|x
operator|++
control|)
block|{}
comment|// skip spaces after keyword
comment|/* Keyword with nothing after it, e.g. #endif: not interesting. */
if|if
condition|(
name|qmake_endOfLine
argument_list|(
name|buffer
index|[
name|x
index|]
argument_list|)
condition|)
name|keyword_len
operator|=
literal|0
expr_stmt|;
if|if
condition|(
operator|(
name|keyword_len
operator|==
literal|7
operator|&&
operator|!
name|strncmp
argument_list|(
name|keyword
argument_list|,
literal|"include"
argument_list|,
literal|7
argument_list|)
operator|)
comment|// C& Obj-C
operator|||
operator|(
name|keyword_len
operator|==
literal|6
operator|&&
operator|!
name|strncmp
argument_list|(
name|keyword
argument_list|,
literal|"import"
argument_list|,
literal|6
argument_list|)
operator|)
condition|)
block|{
comment|// Obj-C
name|char
name|term
init|=
name|buffer
index|[
name|x
index|]
decl_stmt|;
if|if
condition|(
name|term
operator|==
literal|'<'
condition|)
block|{
name|try_local
operator|=
literal|false
expr_stmt|;
name|term
operator|=
literal|'>'
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|term
operator|!=
literal|'"'
condition|)
block|{
comment|//wtf?
continue|continue;
block|}
name|x
operator|++
expr_stmt|;
name|int
name|inc_len
decl_stmt|;
for|for
control|(
name|inc_len
operator|=
literal|0
init|;
name|buffer
index|[
name|x
operator|+
name|inc_len
index|]
operator|!=
name|term
operator|&&
operator|!
name|qmake_endOfLine
argument_list|(
name|buffer
index|[
name|x
operator|+
name|inc_len
index|]
argument_list|)
condition|;
operator|++
name|inc_len
control|)
block|{}
comment|// skip until end of include name
name|buffer
index|[
name|x
operator|+
name|inc_len
index|]
operator|=
literal|'\0'
expr_stmt|;
name|inc
operator|=
name|buffer
operator|+
name|x
expr_stmt|;
name|x
operator|+=
name|inc_len
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|buffer
index|[
name|x
index|]
operator|==
literal|'\''
operator|||
name|buffer
index|[
name|x
index|]
operator|==
literal|'"'
condition|)
block|{
specifier|const
name|char
name|term
init|=
name|buffer
index|[
name|x
operator|++
index|]
decl_stmt|;
while|while
condition|(
name|x
operator|<
name|buffer_len
condition|)
block|{
if|if
condition|(
name|buffer
index|[
name|x
index|]
operator|==
name|term
condition|)
break|break;
if|if
condition|(
name|buffer
index|[
name|x
index|]
operator|==
literal|'\\'
condition|)
block|{
name|x
operator|+=
literal|2
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|qmake_endOfLine
argument_list|(
name|buffer
index|[
name|x
index|]
argument_list|)
condition|)
operator|++
name|line_count
expr_stmt|;
operator|++
name|x
expr_stmt|;
block|}
block|}
block|}
else|else
block|{
operator|--
name|x
expr_stmt|;
block|}
block|}
if|if
condition|(
name|inc
condition|)
block|{
if|if
condition|(
operator|!
name|includes
condition|)
name|includes
operator|=
operator|new
name|SourceFiles
expr_stmt|;
name|SourceFile
modifier|*
name|dep
init|=
name|includes
operator|->
name|lookupFile
argument_list|(
name|inc
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dep
condition|)
block|{
name|bool
name|exists
init|=
literal|false
decl_stmt|;
name|QMakeLocalFileName
name|lfn
argument_list|(
name|inc
argument_list|)
decl_stmt|;
if|if
condition|(
name|QDir
operator|::
name|isRelativePath
argument_list|(
name|lfn
operator|.
name|real
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|try_local
condition|)
block|{
name|QDir
name|sourceDir
init|=
name|findFileInfo
argument_list|(
name|sourceFile
argument_list|)
operator|.
name|dir
argument_list|()
decl_stmt|;
name|QMakeLocalFileName
name|f
argument_list|(
name|sourceDir
operator|.
name|absoluteFilePath
argument_list|(
name|lfn
operator|.
name|local
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|findFileInfo
argument_list|(
name|f
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
block|{
name|lfn
operator|=
name|fixPathForFile
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|exists
operator|=
literal|true
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|exists
condition|)
block|{
comment|//path lookup
for|for
control|(
name|QList
argument_list|<
name|QMakeLocalFileName
argument_list|>
operator|::
name|Iterator
name|it
init|=
name|depdirs
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|depdirs
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QMakeLocalFileName
name|f
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|.
name|real
argument_list|()
operator|+
name|Option
operator|::
name|dir_sep
operator|+
name|lfn
operator|.
name|real
argument_list|()
argument_list|)
decl_stmt|;
name|QFileInfo
name|fi
argument_list|(
name|findFileInfo
argument_list|(
name|f
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fi
operator|.
name|exists
argument_list|()
operator|&&
operator|!
name|fi
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|lfn
operator|=
name|fixPathForFile
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|exists
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|exists
condition|)
block|{
comment|//heuristic lookup
name|lfn
operator|=
name|findFileForDep
argument_list|(
name|QMakeLocalFileName
argument_list|(
name|inc
argument_list|)
argument_list|,
name|file
operator|->
name|file
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|exists
operator|=
operator|!
name|lfn
operator|.
name|isNull
argument_list|()
operator|)
condition|)
name|lfn
operator|=
name|fixPathForFile
argument_list|(
name|lfn
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|exists
operator|=
name|QFile
operator|::
name|exists
argument_list|(
name|lfn
operator|.
name|real
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|lfn
operator|.
name|isNull
argument_list|()
operator|&&
operator|!
name|isSystemInclude
argument_list|(
name|lfn
operator|.
name|real
argument_list|()
argument_list|)
condition|)
block|{
name|dep
operator|=
name|files
operator|->
name|lookupFile
argument_list|(
name|lfn
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|dep
condition|)
block|{
name|dep
operator|=
operator|new
name|SourceFile
expr_stmt|;
name|dep
operator|->
name|file
operator|=
name|lfn
expr_stmt|;
name|dep
operator|->
name|type
operator|=
name|QMakeSourceFileInfo
operator|::
name|TYPE_C
expr_stmt|;
name|files
operator|->
name|addFile
argument_list|(
name|dep
argument_list|)
expr_stmt|;
name|includes
operator|->
name|addFile
argument_list|(
name|dep
argument_list|,
name|inc
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|dep
operator|->
name|exists
operator|=
name|exists
expr_stmt|;
block|}
block|}
if|if
condition|(
name|dep
operator|&&
name|dep
operator|->
name|file
operator|!=
name|file
operator|->
name|file
condition|)
block|{
name|dep
operator|->
name|included_count
operator|++
expr_stmt|;
if|if
condition|(
name|dep
operator|->
name|exists
condition|)
block|{
name|debug_msg
argument_list|(
literal|5
argument_list|,
literal|"%s:%d Found dependency to %s"
argument_list|,
name|file
operator|->
name|file
operator|.
name|real
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|line_count
argument_list|,
name|dep
operator|->
name|file
operator|.
name|local
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|file
operator|->
name|deps
operator|->
name|addChild
argument_list|(
name|dep
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|dependencyMode
argument_list|()
operator|==
name|Recursive
condition|)
block|{
comment|//done last because buffer is shared
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|file
operator|->
name|deps
operator|->
name|used_nodes
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|file
operator|->
name|deps
operator|->
name|children
index|[
name|i
index|]
operator|->
name|deps
condition|)
name|findDeps
argument_list|(
name|file
operator|->
name|deps
operator|->
name|children
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|isCWordChar
specifier|static
name|bool
name|isCWordChar
parameter_list|(
name|char
name|c
parameter_list|)
block|{
return|return
name|c
operator|==
literal|'_'
operator|||
operator|(
name|c
operator|>=
literal|'a'
operator|&&
name|c
operator|<=
literal|'z'
operator|)
operator|||
operator|(
name|c
operator|>=
literal|'A'
operator|&&
name|c
operator|<=
literal|'Z'
operator|)
operator|||
operator|(
name|c
operator|>=
literal|'0'
operator|&&
name|c
operator|<=
literal|'9'
operator|)
return|;
block|}
end_function
begin_function
DECL|function|findMocs
name|bool
name|QMakeSourceFileInfo
operator|::
name|findMocs
parameter_list|(
name|SourceFile
modifier|*
name|file
parameter_list|)
block|{
if|if
condition|(
name|file
operator|->
name|moc_checked
condition|)
return|return
literal|true
return|;
name|files_changed
operator|=
literal|true
expr_stmt|;
name|file
operator|->
name|moc_checked
operator|=
literal|true
expr_stmt|;
name|int
name|buffer_len
decl_stmt|;
name|char
modifier|*
name|buffer
init|=
literal|0
decl_stmt|;
block|{
name|struct
name|stat
name|fst
decl_stmt|;
name|int
name|fd
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
operator|&&
name|_MSC_VER
operator|>=
literal|1400
if|if
condition|(
name|_sopen_s
argument_list|(
operator|&
name|fd
argument_list|,
name|fixPathForFile
argument_list|(
name|file
operator|->
name|file
argument_list|,
literal|true
argument_list|)
operator|.
name|local
argument_list|()
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|_O_RDONLY
argument_list|,
name|_SH_DENYNO
argument_list|,
name|_S_IREAD
argument_list|)
operator|!=
literal|0
condition|)
name|fd
operator|=
operator|-
literal|1
expr_stmt|;
else|#
directive|else
name|fd
operator|=
name|open
argument_list|(
name|fixPathForFile
argument_list|(
name|file
operator|->
name|file
argument_list|,
literal|true
argument_list|)
operator|.
name|local
argument_list|()
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|O_RDONLY
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|fd
operator|==
operator|-
literal|1
operator|||
name|fstat
argument_list|(
name|fd
argument_list|,
operator|&
name|fst
argument_list|)
operator|||
name|S_ISDIR
argument_list|(
name|fst
operator|.
name|st_mode
argument_list|)
condition|)
block|{
if|if
condition|(
name|fd
operator|!=
operator|-
literal|1
condition|)
name|QT_CLOSE
argument_list|(
name|fd
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
comment|//shouldn't happen
block|}
name|buffer
operator|=
name|getBuffer
argument_list|(
name|fst
operator|.
name|st_size
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|have_read
init|=
name|buffer_len
operator|=
literal|0
init|;
operator|(
name|have_read
operator|=
name|QT_READ
argument_list|(
name|fd
argument_list|,
name|buffer
operator|+
name|buffer_len
argument_list|,
name|fst
operator|.
name|st_size
operator|-
name|buffer_len
argument_list|)
operator|)
condition|;
name|buffer_len
operator|+=
name|have_read
control|)
empty_stmt|;
name|QT_CLOSE
argument_list|(
name|fd
argument_list|)
expr_stmt|;
block|}
name|debug_msg
argument_list|(
literal|2
argument_list|,
literal|"findMocs: %s"
argument_list|,
name|file
operator|->
name|file
operator|.
name|local
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|line_count
init|=
literal|1
decl_stmt|;
name|bool
name|ignore_qobject
init|=
literal|false
decl_stmt|,
name|ignore_qgadget
init|=
literal|false
decl_stmt|;
comment|/* qmake ignore Q_GADGET */
comment|/* qmake ignore Q_OBJECT */
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|buffer_len
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
name|buffer
index|[
name|x
index|]
operator|==
literal|'/'
condition|)
block|{
operator|++
name|x
expr_stmt|;
if|if
condition|(
name|buffer_len
operator|>=
name|x
condition|)
block|{
if|if
condition|(
name|buffer
index|[
name|x
index|]
operator|==
literal|'/'
condition|)
block|{
comment|// C++-style comment
for|for
control|(
init|;
name|x
operator|<
name|buffer_len
operator|&&
operator|!
name|qmake_endOfLine
argument_list|(
name|buffer
index|[
name|x
index|]
argument_list|)
condition|;
operator|++
name|x
control|)
block|{}
comment|// skip
block|}
elseif|else
if|if
condition|(
name|buffer
index|[
name|x
index|]
operator|==
literal|'*'
condition|)
block|{
comment|// C-style comment
for|for
control|(
operator|++
name|x
init|;
name|x
operator|<
name|buffer_len
condition|;
operator|++
name|x
control|)
block|{
if|if
condition|(
name|buffer
index|[
name|x
index|]
operator|==
literal|'t'
operator|||
name|buffer
index|[
name|x
index|]
operator|==
literal|'q'
condition|)
block|{
comment|// ignore
if|if
condition|(
name|buffer_len
operator|>=
operator|(
name|x
operator|+
literal|20
operator|)
operator|&&
operator|!
name|strncmp
argument_list|(
name|buffer
operator|+
name|x
operator|+
literal|1
argument_list|,
literal|"make ignore Q_OBJECT"
argument_list|,
literal|20
argument_list|)
condition|)
block|{
name|debug_msg
argument_list|(
literal|2
argument_list|,
literal|"Mocgen: %s:%d Found \"qmake ignore Q_OBJECT\""
argument_list|,
name|file
operator|->
name|file
operator|.
name|real
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|line_count
argument_list|)
expr_stmt|;
name|x
operator|+=
literal|20
expr_stmt|;
name|ignore_qobject
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|buffer_len
operator|>=
operator|(
name|x
operator|+
literal|20
operator|)
operator|&&
operator|!
name|strncmp
argument_list|(
name|buffer
operator|+
name|x
operator|+
literal|1
argument_list|,
literal|"make ignore Q_GADGET"
argument_list|,
literal|20
argument_list|)
condition|)
block|{
name|debug_msg
argument_list|(
literal|2
argument_list|,
literal|"Mocgen: %s:%d Found \"qmake ignore Q_GADGET\""
argument_list|,
name|file
operator|->
name|file
operator|.
name|real
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|line_count
argument_list|)
expr_stmt|;
name|x
operator|+=
literal|20
expr_stmt|;
name|ignore_qgadget
operator|=
literal|true
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|buffer
index|[
name|x
index|]
operator|==
literal|'*'
condition|)
block|{
if|if
condition|(
name|buffer_len
operator|>=
name|x
operator|+
literal|1
operator|&&
name|buffer
index|[
name|x
operator|+
literal|1
index|]
operator|==
literal|'/'
condition|)
block|{
operator|++
name|x
expr_stmt|;
break|break;
block|}
block|}
elseif|else
if|if
condition|(
name|Option
operator|::
name|debug_level
operator|&&
name|qmake_endOfLine
argument_list|(
name|buffer
index|[
name|x
index|]
argument_list|)
condition|)
block|{
operator|++
name|line_count
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|buffer
index|[
name|x
index|]
operator|==
literal|'\''
operator|||
name|buffer
index|[
name|x
index|]
operator|==
literal|'"'
condition|)
block|{
specifier|const
name|char
name|term
init|=
name|buffer
index|[
name|x
operator|++
index|]
decl_stmt|;
while|while
condition|(
name|x
operator|<
name|buffer_len
condition|)
block|{
if|if
condition|(
name|buffer
index|[
name|x
index|]
operator|==
name|term
condition|)
break|break;
if|if
condition|(
name|buffer
index|[
name|x
index|]
operator|==
literal|'\\'
condition|)
block|{
name|x
operator|+=
literal|2
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|qmake_endOfLine
argument_list|(
name|buffer
index|[
name|x
index|]
argument_list|)
condition|)
operator|++
name|line_count
expr_stmt|;
operator|++
name|x
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
name|Option
operator|::
name|debug_level
operator|&&
name|qmake_endOfLine
argument_list|(
name|buffer
index|[
name|x
index|]
argument_list|)
condition|)
operator|++
name|line_count
expr_stmt|;
if|if
condition|(
name|buffer_len
operator|>
name|x
operator|+
literal|2
operator|&&
name|buffer
index|[
name|x
operator|+
literal|1
index|]
operator|==
literal|'Q'
operator|&&
name|buffer
index|[
name|x
operator|+
literal|2
index|]
operator|==
literal|'_'
operator|&&
operator|!
name|isCWordChar
argument_list|(
name|buffer
index|[
name|x
index|]
argument_list|)
condition|)
block|{
operator|++
name|x
expr_stmt|;
name|int
name|match
init|=
literal|0
decl_stmt|;
specifier|static
specifier|const
name|char
modifier|*
name|interesting
index|[]
init|=
block|{
literal|"OBJECT"
block|,
literal|"GADGET"
block|}
decl_stmt|;
for|for
control|(
name|int
name|interest
init|=
literal|0
init|,
name|m1
init|,
name|m2
init|;
name|interest
operator|<
literal|2
condition|;
operator|++
name|interest
control|)
block|{
if|if
condition|(
name|interest
operator|==
literal|0
operator|&&
name|ignore_qobject
condition|)
continue|continue;
elseif|else
if|if
condition|(
name|interest
operator|==
literal|1
operator|&&
name|ignore_qgadget
condition|)
continue|continue;
for|for
control|(
name|m1
operator|=
literal|0
operator|,
name|m2
operator|=
literal|0
init|;
name|interesting
index|[
name|interest
index|]
index|[
name|m1
index|]
condition|;
operator|++
name|m1
control|)
block|{
if|if
condition|(
name|interesting
index|[
name|interest
index|]
index|[
name|m1
index|]
operator|!=
name|buffer
index|[
name|x
operator|+
literal|2
operator|+
name|m1
index|]
condition|)
block|{
name|m2
operator|=
operator|-
literal|1
expr_stmt|;
break|break;
block|}
operator|++
name|m2
expr_stmt|;
block|}
if|if
condition|(
name|m1
operator|==
name|m2
condition|)
block|{
name|match
operator|=
name|m2
operator|+
literal|2
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|match
operator|&&
operator|!
name|isCWordChar
argument_list|(
name|buffer
index|[
name|x
operator|+
name|match
index|]
argument_list|)
condition|)
block|{
if|if
condition|(
name|Option
operator|::
name|debug_level
condition|)
block|{
name|buffer
index|[
name|x
operator|+
name|match
index|]
operator|=
literal|'\0'
expr_stmt|;
name|debug_msg
argument_list|(
literal|2
argument_list|,
literal|"Mocgen: %s:%d Found MOC symbol %s"
argument_list|,
name|file
operator|->
name|file
operator|.
name|real
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|line_count
argument_list|,
name|buffer
operator|+
name|x
argument_list|)
expr_stmt|;
block|}
name|file
operator|->
name|mocable
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|saveCache
name|void
name|QMakeSourceFileInfo
operator|::
name|saveCache
parameter_list|(
specifier|const
name|QString
modifier|&
name|cf
parameter_list|)
block|{
ifdef|#
directive|ifdef
name|QMAKE_USE_CACHE
if|if
condition|(
name|cf
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|QFile
name|file
argument_list|(
name|QMakeLocalFileName
argument_list|(
name|cf
argument_list|)
operator|.
name|local
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
condition|)
block|{
name|QTextStream
name|stream
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|stream
operator|<<
name|qmake_version
argument_list|()
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
comment|//version
block|{
comment|//cache verification
name|QMap
argument_list|<
name|QString
argument_list|,
name|QStringList
argument_list|>
name|verify
init|=
name|getCacheVerification
argument_list|()
decl_stmt|;
name|stream
operator|<<
name|verify
operator|.
name|count
argument_list|()
operator|<<
name|endl
expr_stmt|;
for|for
control|(
name|QMap
argument_list|<
name|QString
argument_list|,
name|QStringList
argument_list|>
operator|::
name|iterator
name|it
init|=
name|verify
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|verify
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|stream
operator|<<
name|it
operator|.
name|key
argument_list|()
operator|<<
name|endl
operator|<<
name|it
operator|.
name|value
argument_list|()
operator|.
name|join
argument_list|(
literal|';'
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
name|stream
operator|<<
name|endl
expr_stmt|;
block|}
if|if
condition|(
name|files
operator|->
name|nodes
condition|)
block|{
for|for
control|(
name|int
name|file
init|=
literal|0
init|;
name|file
operator|<
name|files
operator|->
name|num_nodes
condition|;
operator|++
name|file
control|)
block|{
for|for
control|(
name|SourceFiles
operator|::
name|SourceFileNode
modifier|*
name|node
init|=
name|files
operator|->
name|nodes
index|[
name|file
index|]
init|;
name|node
condition|;
name|node
operator|=
name|node
operator|->
name|next
control|)
block|{
name|stream
operator|<<
name|node
operator|->
name|file
operator|->
name|file
operator|.
name|local
argument_list|()
operator|<<
name|endl
expr_stmt|;
comment|//source
name|stream
operator|<<
name|node
operator|->
name|file
operator|->
name|type
operator|<<
name|endl
expr_stmt|;
comment|//type
comment|//depends
name|stream
operator|<<
literal|";"
expr_stmt|;
if|if
condition|(
name|node
operator|->
name|file
operator|->
name|deps
condition|)
block|{
for|for
control|(
name|int
name|depend
init|=
literal|0
init|;
name|depend
operator|<
name|node
operator|->
name|file
operator|->
name|deps
operator|->
name|used_nodes
condition|;
operator|++
name|depend
control|)
block|{
if|if
condition|(
name|depend
condition|)
name|stream
operator|<<
literal|";"
expr_stmt|;
name|stream
operator|<<
name|node
operator|->
name|file
operator|->
name|deps
operator|->
name|children
index|[
name|depend
index|]
operator|->
name|file
operator|.
name|local
argument_list|()
expr_stmt|;
block|}
block|}
name|stream
operator|<<
name|endl
expr_stmt|;
name|stream
operator|<<
name|node
operator|->
name|file
operator|->
name|mocable
operator|<<
name|endl
expr_stmt|;
comment|//mocable
name|stream
operator|<<
name|endl
expr_stmt|;
comment|//just for human readability
block|}
block|}
block|}
name|stream
operator|.
name|flush
argument_list|()
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|cf
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|loadCache
name|void
name|QMakeSourceFileInfo
operator|::
name|loadCache
parameter_list|(
specifier|const
name|QString
modifier|&
name|cf
parameter_list|)
block|{
if|if
condition|(
name|cf
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
ifdef|#
directive|ifdef
name|QMAKE_USE_CACHE
name|QMakeLocalFileName
name|cache_file
argument_list|(
name|cf
argument_list|)
decl_stmt|;
name|int
name|fd
init|=
name|open
argument_list|(
name|QMakeLocalFileName
argument_list|(
name|cf
argument_list|)
operator|.
name|local
argument_list|()
operator|.
name|toLatin1
argument_list|()
argument_list|,
name|O_RDONLY
argument_list|)
decl_stmt|;
if|if
condition|(
name|fd
operator|==
operator|-
literal|1
condition|)
return|return;
name|QFileInfo
name|cache_fi
init|=
name|findFileInfo
argument_list|(
name|cache_file
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|cache_fi
operator|.
name|exists
argument_list|()
operator|||
name|cache_fi
operator|.
name|isDir
argument_list|()
condition|)
return|return;
name|QFile
name|file
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|,
name|fd
argument_list|)
condition|)
return|return;
name|QTextStream
name|stream
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
if|if
condition|(
name|stream
operator|.
name|readLine
argument_list|()
operator|==
name|qmake_version
argument_list|()
condition|)
block|{
comment|//version check
name|stream
operator|.
name|skipWhiteSpace
argument_list|()
expr_stmt|;
name|bool
name|verified
init|=
literal|true
decl_stmt|;
block|{
comment|//cache verification
name|QMap
argument_list|<
name|QString
argument_list|,
name|QStringList
argument_list|>
name|verify
decl_stmt|;
name|int
name|len
init|=
name|stream
operator|.
name|readLine
argument_list|()
operator|.
name|toInt
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|len
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|var
init|=
name|stream
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|QString
name|val
init|=
name|stream
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|verify
operator|.
name|insert
argument_list|(
name|var
argument_list|,
name|val
operator|.
name|split
argument_list|(
literal|';'
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|verified
operator|=
name|verifyCache
argument_list|(
name|verify
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|verified
condition|)
block|{
name|stream
operator|.
name|skipWhiteSpace
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|files
condition|)
name|files
operator|=
operator|new
name|SourceFiles
expr_stmt|;
while|while
condition|(
operator|!
name|stream
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|QString
name|source
init|=
name|stream
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|QString
name|type
init|=
name|stream
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|QString
name|depends
init|=
name|stream
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|QString
name|mocable
init|=
name|stream
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|stream
operator|.
name|skipWhiteSpace
argument_list|()
expr_stmt|;
name|QMakeLocalFileName
name|fn
argument_list|(
name|source
argument_list|)
decl_stmt|;
name|QFileInfo
name|fi
init|=
name|findFileInfo
argument_list|(
name|fn
argument_list|)
decl_stmt|;
name|SourceFile
modifier|*
name|file
init|=
name|files
operator|->
name|lookupFile
argument_list|(
name|fn
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
condition|)
block|{
name|file
operator|=
operator|new
name|SourceFile
expr_stmt|;
name|file
operator|->
name|file
operator|=
name|fn
expr_stmt|;
name|files
operator|->
name|addFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
name|file
operator|->
name|type
operator|=
operator|(
name|SourceFileType
operator|)
name|type
operator|.
name|toInt
argument_list|()
expr_stmt|;
name|file
operator|->
name|exists
operator|=
name|fi
operator|.
name|exists
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|fi
operator|.
name|exists
argument_list|()
operator|&&
name|fi
operator|.
name|lastModified
argument_list|()
operator|<
name|cache_fi
operator|.
name|lastModified
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|file
operator|->
name|dep_checked
condition|)
block|{
comment|//get depends
if|if
condition|(
operator|!
name|file
operator|->
name|deps
condition|)
name|file
operator|->
name|deps
operator|=
operator|new
name|SourceDependChildren
expr_stmt|;
name|file
operator|->
name|dep_checked
operator|=
literal|true
expr_stmt|;
name|QStringList
name|depend_list
init|=
name|depends
operator|.
name|split
argument_list|(
literal|";"
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|depend
init|=
literal|0
init|;
name|depend
operator|<
name|depend_list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|depend
control|)
block|{
name|QMakeLocalFileName
name|dep_fn
argument_list|(
name|depend_list
operator|.
name|at
argument_list|(
name|depend
argument_list|)
argument_list|)
decl_stmt|;
name|QFileInfo
name|dep_fi
argument_list|(
name|findFileInfo
argument_list|(
name|dep_fn
argument_list|)
argument_list|)
decl_stmt|;
name|SourceFile
modifier|*
name|dep
init|=
name|files
operator|->
name|lookupFile
argument_list|(
name|dep_fn
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dep
condition|)
block|{
name|dep
operator|=
operator|new
name|SourceFile
expr_stmt|;
name|dep
operator|->
name|file
operator|=
name|dep_fn
expr_stmt|;
name|dep
operator|->
name|exists
operator|=
name|dep_fi
operator|.
name|exists
argument_list|()
expr_stmt|;
name|dep
operator|->
name|type
operator|=
name|QMakeSourceFileInfo
operator|::
name|TYPE_UNKNOWN
expr_stmt|;
name|files
operator|->
name|addFile
argument_list|(
name|dep
argument_list|)
expr_stmt|;
block|}
name|dep
operator|->
name|included_count
operator|++
expr_stmt|;
name|file
operator|->
name|deps
operator|->
name|addChild
argument_list|(
name|dep
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|file
operator|->
name|moc_checked
condition|)
block|{
comment|//get mocs
name|file
operator|->
name|moc_checked
operator|=
literal|true
expr_stmt|;
name|file
operator|->
name|mocable
operator|=
name|mocable
operator|.
name|toInt
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|getCacheVerification
name|QMap
argument_list|<
name|QString
argument_list|,
name|QStringList
argument_list|>
name|QMakeSourceFileInfo
operator|::
name|getCacheVerification
parameter_list|()
block|{
return|return
name|QMap
argument_list|<
name|QString
argument_list|,
name|QStringList
argument_list|>
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|verifyCache
name|bool
name|QMakeSourceFileInfo
operator|::
name|verifyCache
parameter_list|(
specifier|const
name|QMap
argument_list|<
name|QString
argument_list|,
name|QStringList
argument_list|>
modifier|&
name|v
parameter_list|)
block|{
return|return
name|v
operator|==
name|getCacheVerification
argument_list|()
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
