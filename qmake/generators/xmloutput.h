begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the qmake application of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:GPL-EXCEPT$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3 as published by the Free Software ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|XMLOUTPUT_H
end_ifndef
begin_define
DECL|macro|XMLOUTPUT_H
define|#
directive|define
name|XMLOUTPUT_H
end_define
begin_include
include|#
directive|include
file|<qtextstream.h>
end_include
begin_include
include|#
directive|include
file|<qstack.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|class
name|XmlOutput
block|{
name|public
label|:
enum|enum
name|ConverstionType
block|{
name|NoConversion
block|,
comment|// No change
name|EscapeConversion
block|,
comment|// Use '\"'
name|XMLConversion
comment|// Use&quot;
block|}
enum|;
enum|enum
name|XMLFormat
block|{
name|NoNewLine
block|,
comment|// No new lines, unless added manually
name|NewLine
comment|// All properties& tags indented on new lines
block|}
enum|;
enum|enum
name|XMLState
block|{
name|Bare
block|,
comment|// Not in tag or attribute
name|Tag
block|,
comment|//<tagname attribute1="value"
name|Attribute
comment|//  attribute2="value">
block|}
enum|;
enum|enum
name|XMLType
block|{
name|tNothing
block|,
comment|// No XML output, and not state change
name|tRaw
block|,
comment|// Raw text (no formating)
name|tDeclaration
block|,
comment|//<?xml version="x.x" encoding="xxx"?>
name|tTag
block|,
comment|//<tagname attribute1="value"
name|tTagValue
block|,
comment|//<tagname>value</tagname>
name|tValueTag
block|,
comment|// value</tagname>
name|tCloseTag
block|,
comment|// Closes an open tag
name|tAttribute
block|,
comment|//  attribute2="value">
name|tAttributeTag
block|,
comment|//  attribute on the same line as a tag
name|tData
block|,
comment|// Tag data (formating done)
name|tImport
block|,
comment|//<import "type"="path" />
name|tComment
block|,
comment|//<!-- Comment -->
name|tCDATA
comment|//<![CDATA[ ... ]]>
block|}
enum|;
name|XmlOutput
argument_list|(
argument|QTextStream&file
argument_list|,
argument|ConverstionType type = XMLConversion
argument_list|)
empty_stmt|;
operator|~
name|XmlOutput
argument_list|()
expr_stmt|;
comment|// Settings
name|void
name|setIndentString
parameter_list|(
specifier|const
name|QString
modifier|&
name|indentString
parameter_list|)
function_decl|;
name|QString
name|indentString
parameter_list|()
function_decl|;
name|void
name|setIndentLevel
parameter_list|(
name|int
name|level
parameter_list|)
function_decl|;
name|int
name|indentLevel
parameter_list|()
function_decl|;
name|void
name|setState
parameter_list|(
name|XMLState
name|state
parameter_list|)
function_decl|;
name|void
name|setFormat
parameter_list|(
name|XMLFormat
name|newFormat
parameter_list|)
function_decl|;
name|XMLState
name|state
parameter_list|()
function_decl|;
struct|struct
name|xml_output
block|{
name|XMLType
name|xo_type
decl_stmt|;
comment|// Type of struct instance
name|QString
name|xo_text
decl_stmt|;
comment|// Tag/Attribute name/xml version
name|QString
name|xo_value
decl_stmt|;
comment|// Value of attributes/xml encoding
name|xml_output
argument_list|(
argument|XMLType type
argument_list|,
argument|const QString&text
argument_list|,
argument|const QString&value
argument_list|)
block|:
name|xo_type
argument_list|(
name|type
argument_list|)
operator|,
name|xo_text
argument_list|(
name|text
argument_list|)
operator|,
name|xo_value
argument_list|(
argument|value
argument_list|)
block|{}
name|xml_output
argument_list|(
specifier|const
name|xml_output
operator|&
name|xo
argument_list|)
operator|:
name|xo_type
argument_list|(
name|xo
operator|.
name|xo_type
argument_list|)
operator|,
name|xo_text
argument_list|(
name|xo
operator|.
name|xo_text
argument_list|)
operator|,
name|xo_value
argument_list|(
argument|xo.xo_value
argument_list|)
block|{}
block|}
struct|;
comment|// Streams
name|XmlOutput
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|QString
operator|&
name|o
operator|)
expr_stmt|;
name|XmlOutput
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|xml_output
operator|&
name|o
operator|)
expr_stmt|;
name|private
label|:
name|void
name|increaseIndent
parameter_list|()
function_decl|;
name|void
name|decreaseIndent
parameter_list|()
function_decl|;
name|void
name|updateIndent
parameter_list|()
function_decl|;
name|QString
name|doConversion
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
function_decl|;
comment|// Output functions
name|void
name|newTag
parameter_list|(
specifier|const
name|QString
modifier|&
name|tag
parameter_list|)
function_decl|;
name|void
name|newTagOpen
parameter_list|(
specifier|const
name|QString
modifier|&
name|tag
parameter_list|)
function_decl|;
name|void
name|closeOpen
parameter_list|()
function_decl|;
name|void
name|closeTag
parameter_list|()
function_decl|;
name|void
name|closeTo
parameter_list|(
specifier|const
name|QString
modifier|&
name|tag
parameter_list|)
function_decl|;
name|void
name|closeAll
parameter_list|()
function_decl|;
name|void
name|addDeclaration
parameter_list|(
specifier|const
name|QString
modifier|&
name|version
parameter_list|,
specifier|const
name|QString
modifier|&
name|encoding
parameter_list|)
function_decl|;
name|void
name|addRaw
parameter_list|(
specifier|const
name|QString
modifier|&
name|rawText
parameter_list|)
function_decl|;
name|void
name|addAttribute
parameter_list|(
specifier|const
name|QString
modifier|&
name|attribute
parameter_list|,
specifier|const
name|QString
modifier|&
name|value
parameter_list|)
function_decl|;
name|void
name|addAttributeTag
parameter_list|(
specifier|const
name|QString
modifier|&
name|attribute
parameter_list|,
specifier|const
name|QString
modifier|&
name|value
parameter_list|)
function_decl|;
name|void
name|addData
parameter_list|(
specifier|const
name|QString
modifier|&
name|data
parameter_list|)
function_decl|;
comment|// Data
name|QTextStream
modifier|&
name|xmlFile
decl_stmt|;
name|QString
name|indent
decl_stmt|;
name|QString
name|currentIndent
decl_stmt|;
name|int
name|currentLevel
decl_stmt|;
name|XMLState
name|currentState
decl_stmt|;
name|XMLFormat
name|format
decl_stmt|;
name|ConverstionType
name|conversion
decl_stmt|;
name|QStack
operator|<
name|QString
operator|>
name|tagStack
expr_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
DECL|function|noxml
specifier|inline
name|XmlOutput
operator|::
name|xml_output
name|noxml
argument_list|()
block|{
return|return
name|XmlOutput
operator|::
name|xml_output
argument_list|(
name|XmlOutput
operator|::
name|tNothing
argument_list|,
name|QString
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|raw
specifier|inline
name|XmlOutput
operator|::
name|xml_output
name|raw
argument_list|(
argument|const QString&rawText
argument_list|)
block|{
return|return
name|XmlOutput
operator|::
name|xml_output
argument_list|(
name|XmlOutput
operator|::
name|tRaw
argument_list|,
name|rawText
argument_list|,
name|QString
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|declaration
specifier|inline
name|XmlOutput
operator|::
name|xml_output
name|declaration
argument_list|(
argument|const QString&version = QString(
literal|"1.0"
argument|)
argument_list|,
argument|const QString&encoding = QString()
argument_list|)
block|{
return|return
name|XmlOutput
operator|::
name|xml_output
argument_list|(
name|XmlOutput
operator|::
name|tDeclaration
argument_list|,
name|version
argument_list|,
name|encoding
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|decl
specifier|inline
name|XmlOutput
operator|::
name|xml_output
name|decl
argument_list|(
argument|const QString&version = QString(
literal|"1.0"
argument|)
argument_list|,
argument|const QString&encoding = QString()
argument_list|)
block|{
return|return
name|declaration
argument_list|(
name|version
argument_list|,
name|encoding
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|tag
specifier|inline
name|XmlOutput
operator|::
name|xml_output
name|tag
argument_list|(
argument|const QString&name
argument_list|)
block|{
return|return
name|XmlOutput
operator|::
name|xml_output
argument_list|(
name|XmlOutput
operator|::
name|tTag
argument_list|,
name|name
argument_list|,
name|QString
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|valueTag
specifier|inline
name|XmlOutput
operator|::
name|xml_output
name|valueTag
argument_list|(
argument|const QString&value
argument_list|)
block|{
return|return
name|XmlOutput
operator|::
name|xml_output
argument_list|(
name|XmlOutput
operator|::
name|tValueTag
argument_list|,
name|value
argument_list|,
name|QString
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|tagValue
specifier|inline
name|XmlOutput
operator|::
name|xml_output
name|tagValue
argument_list|(
argument|const QString&tagName
argument_list|,
argument|const QString&value
argument_list|)
block|{
return|return
name|XmlOutput
operator|::
name|xml_output
argument_list|(
name|XmlOutput
operator|::
name|tTagValue
argument_list|,
name|tagName
argument_list|,
name|value
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|import
specifier|inline
name|XmlOutput
operator|::
name|xml_output
name|import
argument_list|(
argument|const QString&tagName
argument_list|,
argument|const QString&value
argument_list|)
block|{
return|return
name|XmlOutput
operator|::
name|xml_output
argument_list|(
name|XmlOutput
operator|::
name|tImport
argument_list|,
name|tagName
argument_list|,
name|value
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|closetag
specifier|inline
name|XmlOutput
operator|::
name|xml_output
name|closetag
argument_list|()
block|{
return|return
name|XmlOutput
operator|::
name|xml_output
argument_list|(
name|XmlOutput
operator|::
name|tCloseTag
argument_list|,
name|QString
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|closetag
specifier|inline
name|XmlOutput
operator|::
name|xml_output
name|closetag
argument_list|(
argument|const QString&toTag
argument_list|)
block|{
return|return
name|XmlOutput
operator|::
name|xml_output
argument_list|(
name|XmlOutput
operator|::
name|tCloseTag
argument_list|,
name|toTag
argument_list|,
name|QString
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|closeall
specifier|inline
name|XmlOutput
operator|::
name|xml_output
name|closeall
argument_list|()
block|{
return|return
name|XmlOutput
operator|::
name|xml_output
argument_list|(
name|XmlOutput
operator|::
name|tCloseTag
argument_list|,
name|QString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"all"
argument_list|)
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|attribute
specifier|inline
name|XmlOutput
operator|::
name|xml_output
name|attribute
argument_list|(
argument|const QString&name
argument_list|,
argument|const QString&value
argument_list|)
block|{
return|return
name|XmlOutput
operator|::
name|xml_output
argument_list|(
name|XmlOutput
operator|::
name|tAttribute
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|attributeTag
specifier|inline
name|XmlOutput
operator|::
name|xml_output
name|attributeTag
argument_list|(
argument|const QString&name
argument_list|,
argument|const QString&value
argument_list|)
block|{
return|return
name|XmlOutput
operator|::
name|xml_output
argument_list|(
name|XmlOutput
operator|::
name|tAttributeTag
argument_list|,
name|name
argument_list|,
name|value
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|attr
specifier|inline
name|XmlOutput
operator|::
name|xml_output
name|attr
argument_list|(
argument|const QString&name
argument_list|,
argument|const QString&value
argument_list|)
block|{
return|return
name|attribute
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|attrTag
specifier|inline
name|XmlOutput
operator|::
name|xml_output
name|attrTag
argument_list|(
argument|const QString&name
argument_list|,
argument|const QString&value
argument_list|)
block|{
return|return
name|attributeTag
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|data
specifier|inline
name|XmlOutput
operator|::
name|xml_output
name|data
argument_list|(
argument|const QString&text = QString()
argument_list|)
block|{
return|return
name|XmlOutput
operator|::
name|xml_output
argument_list|(
name|XmlOutput
operator|::
name|tData
argument_list|,
name|text
argument_list|,
name|QString
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|comment
specifier|inline
name|XmlOutput
operator|::
name|xml_output
name|comment
argument_list|(
argument|const QString&text
argument_list|)
block|{
return|return
name|XmlOutput
operator|::
name|xml_output
argument_list|(
name|XmlOutput
operator|::
name|tComment
argument_list|,
name|text
argument_list|,
name|QString
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|cdata
specifier|inline
name|XmlOutput
operator|::
name|xml_output
name|cdata
argument_list|(
argument|const QString&text
argument_list|)
block|{
return|return
name|XmlOutput
operator|::
name|xml_output
argument_list|(
name|XmlOutput
operator|::
name|tCDATA
argument_list|,
name|text
argument_list|,
name|QString
argument_list|()
argument_list|)
return|;
block|}
end_expr_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// XMLOUTPUT_H
end_comment
end_unit
