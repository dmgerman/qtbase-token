begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the qmake application of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:GPL-EXCEPT$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3 as published by the Free Software ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|PBUILDER_PBX_H
end_ifndef
begin_define
DECL|macro|PBUILDER_PBX_H
define|#
directive|define
name|PBUILDER_PBX_H
end_define
begin_include
include|#
directive|include
file|"unixmake.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|class
name|ProjectBuilderMakefileGenerator
range|:
name|public
name|UnixMakefileGenerator
block|{
name|bool
name|writingUnixMakefileGenerator
block|;
name|QString
name|pbx_dir
block|;
name|int
name|pbuilderVersion
argument_list|()
specifier|const
block|;
name|bool
name|writeSubDirs
argument_list|(
name|QTextStream
operator|&
argument_list|)
block|;
name|bool
name|writeMakeParts
argument_list|(
name|QTextStream
operator|&
argument_list|)
block|;
name|bool
name|writeMakefile
argument_list|(
name|QTextStream
operator|&
argument_list|)
block|;
name|QString
name|pbxbuild
argument_list|()
block|;
name|QHash
operator|<
name|QString
block|,
name|QString
operator|>
name|keys
block|;
name|QString
name|keyFor
argument_list|(
specifier|const
name|QString
operator|&
name|file
argument_list|)
block|;
name|QString
name|findProgram
argument_list|(
specifier|const
name|ProString
operator|&
name|prog
argument_list|)
block|;
name|QString
name|fixForOutput
argument_list|(
specifier|const
name|QString
operator|&
name|file
argument_list|)
block|;
name|ProStringList
name|fixListForOutput
argument_list|(
specifier|const
name|char
operator|*
name|where
argument_list|)
block|;
name|ProStringList
name|fixListForOutput
argument_list|(
specifier|const
name|ProStringList
operator|&
name|list
argument_list|)
block|;
name|int
name|reftypeForFile
argument_list|(
specifier|const
name|QString
operator|&
name|where
argument_list|)
block|;
name|QString
name|projectSuffix
argument_list|()
specifier|const
block|;     enum
block|{
name|SettingsAsList
operator|=
literal|0x01
block|,
name|SettingsNoQuote
operator|=
literal|0x02
block|}
block|;
specifier|inline
name|QString
name|writeSettings
argument_list|(
argument|const QString&var
argument_list|,
argument|const char *val
argument_list|,
argument|int flags=
literal|0
argument_list|,
argument|int indent_level=
literal|0
argument_list|)
block|{
return|return
name|writeSettings
argument_list|(
name|var
argument_list|,
name|ProString
argument_list|(
name|val
argument_list|)
argument_list|,
name|flags
argument_list|,
name|indent_level
argument_list|)
return|;
block|}
specifier|inline
name|QString
name|writeSettings
argument_list|(
argument|const QString&var
argument_list|,
argument|const QString&val
argument_list|,
argument|int flags=
literal|0
argument_list|,
argument|int indent_level=
literal|0
argument_list|)
block|{
return|return
name|writeSettings
argument_list|(
name|var
argument_list|,
name|ProString
argument_list|(
name|val
argument_list|)
argument_list|,
name|flags
argument_list|,
name|indent_level
argument_list|)
return|;
block|}
specifier|inline
name|QString
name|writeSettings
argument_list|(
argument|const QString&var
argument_list|,
argument|const ProString&val
argument_list|,
argument|int flags=
literal|0
argument_list|,
argument|int indent_level=
literal|0
argument_list|)
block|{
return|return
name|writeSettings
argument_list|(
name|var
argument_list|,
name|ProStringList
argument_list|(
name|val
argument_list|)
argument_list|,
name|flags
argument_list|,
name|indent_level
argument_list|)
return|;
block|}
name|QString
name|writeSettings
argument_list|(
argument|const QString&var
argument_list|,
argument|const ProStringList&vals
argument_list|,
argument|int flags=
literal|0
argument_list|,
argument|int indent_level=
literal|0
argument_list|)
block|;
name|public
operator|:
name|ProjectBuilderMakefileGenerator
argument_list|()
block|;
operator|~
name|ProjectBuilderMakefileGenerator
argument_list|()
block|;
name|virtual
name|bool
name|supportsMetaBuild
argument_list|()
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|openOutput
argument_list|(
argument|QFile&
argument_list|,
argument|const QString&
argument_list|)
specifier|const
block|;
name|protected
operator|:
name|bool
name|doPrecompiledHeaders
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|doDepends
argument_list|()
specifier|const
block|{
return|return
name|writingUnixMakefileGenerator
operator|&&
name|UnixMakefileGenerator
operator|::
name|doDepends
argument_list|()
return|;
block|}
expr|}
block|;
DECL|function|~ProjectBuilderMakefileGenerator
specifier|inline
name|ProjectBuilderMakefileGenerator
operator|::
operator|~
name|ProjectBuilderMakefileGenerator
argument_list|()
block|{ }
name|QT_END_NAMESPACE
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// PBUILDER_PBX_H
end_comment
end_unit
