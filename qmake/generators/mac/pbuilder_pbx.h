begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the qmake application of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|PBUILDER_PBX_H
end_ifndef
begin_define
DECL|macro|PBUILDER_PBX_H
define|#
directive|define
name|PBUILDER_PBX_H
end_define
begin_include
include|#
directive|include
file|"unixmake.h"
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
name|class
name|ProjectBuilderMakefileGenerator
range|:
name|public
name|UnixMakefileGenerator
block|{
name|bool
name|writingUnixMakefileGenerator
block|;
name|QString
name|pbx_dir
block|;
name|int
name|pbuilderVersion
argument_list|()
specifier|const
block|;
name|bool
name|writeSubDirs
argument_list|(
name|QTextStream
operator|&
argument_list|)
block|;
name|bool
name|writeMakeParts
argument_list|(
name|QTextStream
operator|&
argument_list|)
block|;
name|bool
name|writeMakefile
argument_list|(
name|QTextStream
operator|&
argument_list|)
block|;
name|QString
name|pbxbuild
argument_list|()
block|;
name|QMap
operator|<
name|QString
block|,
name|QString
operator|>
name|keys
block|;
name|QString
name|keyFor
argument_list|(
specifier|const
name|QString
operator|&
name|file
argument_list|)
block|;
name|QString
name|findProgram
argument_list|(
specifier|const
name|QString
operator|&
name|prog
argument_list|)
block|;
name|QString
name|fixForOutput
argument_list|(
specifier|const
name|QString
operator|&
name|file
argument_list|)
block|;
name|QStringList
name|fixListForOutput
argument_list|(
specifier|const
name|QString
operator|&
name|where
argument_list|)
block|;
name|int
name|reftypeForFile
argument_list|(
specifier|const
name|QString
operator|&
name|where
argument_list|)
block|;
name|QString
name|projectSuffix
argument_list|()
specifier|const
block|;     enum
block|{
name|SettingsAsList
operator|=
literal|0x01
block|,
name|SettingsNoQuote
operator|=
literal|0x02
block|}
block|;
specifier|inline
name|QString
name|writeSettings
argument_list|(
argument|QString var
argument_list|,
argument|QString val
argument_list|,
argument|int flags=
literal|0
argument_list|,
argument|int indent_level=
literal|0
argument_list|)
block|{
name|Q_UNUSED
argument_list|(
name|indent_level
argument_list|)
block|;
return|return
name|writeSettings
argument_list|(
name|var
argument_list|,
name|QStringList
argument_list|(
name|val
argument_list|)
argument_list|,
name|flags
argument_list|)
return|;
block|}
name|QString
name|writeSettings
argument_list|(
argument|QString var
argument_list|,
argument|QStringList vals
argument_list|,
argument|int flags=
literal|0
argument_list|,
argument|int indent_level=
literal|0
argument_list|)
block|;
name|public
operator|:
name|ProjectBuilderMakefileGenerator
argument_list|()
block|;
operator|~
name|ProjectBuilderMakefileGenerator
argument_list|()
block|;
name|virtual
name|bool
name|supportsMetaBuild
argument_list|()
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|openOutput
argument_list|(
argument|QFile&
argument_list|,
argument|const QString&
argument_list|)
specifier|const
block|;
name|protected
operator|:
name|virtual
name|QString
name|escapeFilePath
argument_list|(
argument|const QString&path
argument_list|)
specifier|const
block|;
name|bool
name|doPrecompiledHeaders
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
name|virtual
name|bool
name|doDepends
argument_list|()
specifier|const
block|{
return|return
name|false
return|;
block|}
comment|//never necesary
expr|}
block|;
DECL|function|~ProjectBuilderMakefileGenerator
specifier|inline
name|ProjectBuilderMakefileGenerator
operator|::
operator|~
name|ProjectBuilderMakefileGenerator
argument_list|()
block|{ }
name|QT_END_NAMESPACE
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// PBUILDER_PBX_H
end_comment
end_unit
