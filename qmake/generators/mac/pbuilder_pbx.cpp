begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the qmake application of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"pbuilder_pbx.h"
end_include
begin_include
include|#
directive|include
file|"option.h"
end_include
begin_include
include|#
directive|include
file|"meta.h"
end_include
begin_include
include|#
directive|include
file|<qdir.h>
end_include
begin_include
include|#
directive|include
file|<qregexp.h>
end_include
begin_include
include|#
directive|include
file|<qcryptographichash.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|<time.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_UNIX
end_ifdef
begin_include
include|#
directive|include
file|<sys/types.h>
end_include
begin_include
include|#
directive|include
file|<sys/stat.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_DARWIN
end_ifdef
begin_include
include|#
directive|include
file|<ApplicationServices/ApplicationServices.h>
end_include
begin_include
include|#
directive|include
file|<private/qcore_mac_p.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_function
name|QT_BEGIN_NAMESPACE
comment|//#define GENERATE_AGGREGRATE_SUBDIR
comment|// Note: this is fairly hacky, but it does the job...
DECL|function|qtMD5
specifier|static
name|QString
name|qtMD5
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|src
parameter_list|)
block|{
name|QByteArray
name|digest
init|=
name|QCryptographicHash
operator|::
name|hash
argument_list|(
name|src
argument_list|,
name|QCryptographicHash
operator|::
name|Md5
argument_list|)
decl_stmt|;
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
name|digest
operator|.
name|toHex
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_constructor
DECL|function|ProjectBuilderMakefileGenerator
name|ProjectBuilderMakefileGenerator
operator|::
name|ProjectBuilderMakefileGenerator
parameter_list|()
member_init_list|:
name|UnixMakefileGenerator
argument_list|()
block|{  }
end_constructor
begin_function
name|bool
DECL|function|writeMakefile
name|ProjectBuilderMakefileGenerator
operator|::
name|writeMakefile
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|)
block|{
name|writingUnixMakefileGenerator
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_FAILED_REQUIREMENTS"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|/* for now just dump, I need to generated an empty xml or something.. */
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Project file not generated because all requirements not met:\n\t%s\n"
argument_list|,
name|var
argument_list|(
literal|"QMAKE_FAILED_REQUIREMENTS"
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
name|project
operator|->
name|values
argument_list|(
literal|"MAKEFILE"
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"MAKEFILE"
argument_list|)
operator|.
name|append
argument_list|(
literal|"Makefile"
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"app"
operator|||
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"lib"
condition|)
return|return
name|writeMakeParts
argument_list|(
name|t
argument_list|)
return|;
elseif|else
if|if
condition|(
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"subdirs"
condition|)
return|return
name|writeSubDirs
argument_list|(
name|t
argument_list|)
return|;
return|return
literal|false
return|;
block|}
end_function
begin_struct
DECL|struct|ProjectBuilderSubDirs
struct|struct
name|ProjectBuilderSubDirs
block|{
DECL|member|project
name|QMakeProject
modifier|*
name|project
decl_stmt|;
DECL|member|subdir
name|QString
name|subdir
decl_stmt|;
DECL|member|autoDelete
name|bool
name|autoDelete
decl_stmt|;
DECL|function|ProjectBuilderSubDirs
name|ProjectBuilderSubDirs
parameter_list|(
name|QMakeProject
modifier|*
name|p
parameter_list|,
name|QString
name|s
parameter_list|,
name|bool
name|a
init|=
literal|true
parameter_list|)
member_init_list|:
name|project
argument_list|(
name|p
argument_list|)
member_init_list|,
name|subdir
argument_list|(
name|s
argument_list|)
member_init_list|,
name|autoDelete
argument_list|(
name|a
argument_list|)
block|{ }
DECL|function|~ProjectBuilderSubDirs
name|~
name|ProjectBuilderSubDirs
parameter_list|()
block|{
if|if
condition|(
name|autoDelete
condition|)
operator|delete
name|project
expr_stmt|;
block|}
block|}
struct|;
end_struct
begin_function
name|bool
DECL|function|writeSubDirs
name|ProjectBuilderMakefileGenerator
operator|::
name|writeSubDirs
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|)
block|{
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"generate_pbxbuild_makefile"
argument_list|)
condition|)
block|{
name|QString
name|mkwrap
init|=
name|fileFixify
argument_list|(
name|pbx_dir
operator|+
name|Option
operator|::
name|dir_sep
operator|+
literal|".."
operator|+
name|Option
operator|::
name|dir_sep
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"MAKEFILE"
argument_list|)
argument_list|,
name|qmake_getpwd
argument_list|()
argument_list|)
decl_stmt|;
name|QFile
name|mkwrapf
argument_list|(
name|mkwrap
argument_list|)
decl_stmt|;
if|if
condition|(
name|mkwrapf
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
condition|)
block|{
name|debug_msg
argument_list|(
literal|1
argument_list|,
literal|"pbuilder: Creating file: %s"
argument_list|,
name|mkwrap
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QTextStream
name|mkwrapt
argument_list|(
operator|&
name|mkwrapf
argument_list|)
decl_stmt|;
name|writingUnixMakefileGenerator
operator|=
literal|true
expr_stmt|;
name|UnixMakefileGenerator
operator|::
name|writeSubDirs
argument_list|(
name|mkwrapt
argument_list|)
expr_stmt|;
name|writingUnixMakefileGenerator
operator|=
literal|false
expr_stmt|;
block|}
block|}
comment|//HEADER
specifier|const
name|int
name|pbVersion
init|=
name|pbuilderVersion
argument_list|()
decl_stmt|;
name|t
operator|<<
literal|"// !$*UTF8*$!"
operator|<<
literal|"\n"
operator|<<
literal|"{"
operator|<<
literal|"\n"
operator|<<
literal|"\t"
operator|<<
name|writeSettings
argument_list|(
literal|"archiveVersion"
argument_list|,
literal|"1"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t"
operator|<<
literal|"classes = {"
operator|<<
literal|"\n"
operator|<<
literal|"\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
operator|<<
literal|"\t"
operator|<<
name|writeSettings
argument_list|(
literal|"objectVersion"
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|pbVersion
argument_list|)
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t"
operator|<<
literal|"objects = {"
operator|<<
name|endl
expr_stmt|;
comment|//SUBDIRS
name|QList
argument_list|<
name|ProjectBuilderSubDirs
modifier|*
argument_list|>
name|pb_subdirs
decl_stmt|;
name|pb_subdirs
operator|.
name|append
argument_list|(
operator|new
name|ProjectBuilderSubDirs
argument_list|(
name|project
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|oldpwd
init|=
name|qmake_getpwd
argument_list|()
decl_stmt|;
name|QMap
argument_list|<
name|QString
argument_list|,
name|QStringList
argument_list|>
name|groups
decl_stmt|;
for|for
control|(
name|int
name|pb_subdir
init|=
literal|0
init|;
name|pb_subdir
operator|<
name|pb_subdirs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|pb_subdir
control|)
block|{
name|ProjectBuilderSubDirs
modifier|*
name|pb
init|=
name|pb_subdirs
index|[
name|pb_subdir
index|]
decl_stmt|;
specifier|const
name|QStringList
name|subdirs
init|=
name|pb
operator|->
name|project
operator|->
name|values
argument_list|(
literal|"SUBDIRS"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|subdir
init|=
literal|0
init|;
name|subdir
operator|<
name|subdirs
operator|.
name|count
argument_list|()
condition|;
name|subdir
operator|++
control|)
block|{
name|QString
name|tmp
init|=
name|subdirs
index|[
name|subdir
index|]
decl_stmt|;
if|if
condition|(
operator|!
name|pb
operator|->
name|project
operator|->
name|isEmpty
argument_list|(
name|tmp
operator|+
literal|".file"
argument_list|)
condition|)
name|tmp
operator|=
name|pb
operator|->
name|project
operator|->
name|first
argument_list|(
name|tmp
operator|+
literal|".file"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
operator|!
name|pb
operator|->
name|project
operator|->
name|isEmpty
argument_list|(
name|tmp
operator|+
literal|".subdir"
argument_list|)
condition|)
name|tmp
operator|=
name|pb
operator|->
name|project
operator|->
name|first
argument_list|(
name|tmp
operator|+
literal|".subdir"
argument_list|)
expr_stmt|;
if|if
condition|(
name|fileInfo
argument_list|(
name|tmp
argument_list|)
operator|.
name|isRelative
argument_list|()
operator|&&
operator|!
name|pb
operator|->
name|subdir
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QString
name|subdir
init|=
name|pb
operator|->
name|subdir
decl_stmt|;
if|if
condition|(
operator|!
name|subdir
operator|.
name|endsWith
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
condition|)
name|subdir
operator|+=
name|Option
operator|::
name|dir_sep
expr_stmt|;
name|tmp
operator|=
name|subdir
operator|+
name|tmp
expr_stmt|;
block|}
name|QFileInfo
name|fi
argument_list|(
name|fileInfo
argument_list|(
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|tmp
argument_list|,
literal|true
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fi
operator|.
name|exists
argument_list|()
condition|)
block|{
if|if
condition|(
name|fi
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|QString
name|profile
init|=
name|tmp
decl_stmt|;
if|if
condition|(
operator|!
name|profile
operator|.
name|endsWith
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
condition|)
name|profile
operator|+=
name|Option
operator|::
name|dir_sep
expr_stmt|;
name|profile
operator|+=
name|fi
operator|.
name|baseName
argument_list|()
operator|+
name|Option
operator|::
name|pro_ext
expr_stmt|;
name|fi
operator|=
name|QFileInfo
argument_list|(
name|profile
argument_list|)
expr_stmt|;
block|}
name|QMakeProject
name|tmp_proj
decl_stmt|;
name|QString
name|dir
init|=
name|fi
operator|.
name|path
argument_list|()
decl_stmt|,
name|fn
init|=
name|fi
operator|.
name|fileName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|qmake_setpwd
argument_list|(
name|dir
argument_list|)
condition|)
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"Cannot find directory: %s\n"
argument_list|,
name|dir
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|tmp_proj
operator|.
name|read
argument_list|(
name|fn
argument_list|)
condition|)
block|{
if|if
condition|(
name|Option
operator|::
name|debug_level
condition|)
block|{
name|debug_msg
argument_list|(
literal|1
argument_list|,
literal|"Dumping all variables:"
argument_list|)
expr_stmt|;
name|QHash
argument_list|<
name|QString
argument_list|,
name|QStringList
argument_list|>
modifier|&
name|vars
init|=
name|tmp_proj
operator|.
name|variables
argument_list|()
decl_stmt|;
for|for
control|(
name|QHash
argument_list|<
name|QString
argument_list|,
name|QStringList
argument_list|>
operator|::
name|Iterator
name|it
init|=
name|vars
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|vars
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
name|it
operator|.
name|key
argument_list|()
operator|.
name|left
argument_list|(
literal|1
argument_list|)
operator|!=
literal|"."
operator|&&
operator|!
name|it
operator|.
name|value
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|debug_msg
argument_list|(
literal|1
argument_list|,
literal|"%s: %s === %s"
argument_list|,
name|fn
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|it
operator|.
name|key
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|it
operator|.
name|value
argument_list|()
operator|.
name|join
argument_list|(
literal|" :: "
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|tmp_proj
operator|.
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"subdirs"
condition|)
block|{
name|QMakeProject
modifier|*
name|pp
init|=
operator|new
name|QMakeProject
argument_list|(
operator|&
name|tmp_proj
argument_list|)
decl_stmt|;
name|pp
operator|->
name|read
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|pb_subdirs
operator|+=
operator|new
name|ProjectBuilderSubDirs
argument_list|(
name|pp
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|tmp_proj
operator|.
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"app"
operator|||
name|tmp_proj
operator|.
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"lib"
condition|)
block|{
name|QString
name|pbxproj
init|=
name|qmake_getpwd
argument_list|()
operator|+
name|Option
operator|::
name|dir_sep
operator|+
name|tmp_proj
operator|.
name|first
argument_list|(
literal|"TARGET"
argument_list|)
operator|+
name|projectSuffix
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|exists
argument_list|(
name|pbxproj
argument_list|)
condition|)
block|{
name|warn_msg
argument_list|(
name|WarnLogic
argument_list|,
literal|"Ignored (not found) '%s'"
argument_list|,
name|pbxproj
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
goto|goto
name|nextfile
goto|;
comment|// # Dirty!
block|}
specifier|const
name|QString
name|project_key
init|=
name|keyFor
argument_list|(
name|pbxproj
operator|+
literal|"_PROJECTREF"
argument_list|)
decl_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PBX_SUBDIRS"
argument_list|)
operator|+=
name|pbxproj
expr_stmt|;
comment|//PROJECTREF
block|{
name|bool
name|in_root
init|=
literal|true
decl_stmt|;
name|QString
name|name
init|=
name|qmake_getpwd
argument_list|()
decl_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"flat"
argument_list|)
condition|)
block|{
name|QString
name|flat_file
init|=
name|fileFixify
argument_list|(
name|name
argument_list|,
name|oldpwd
argument_list|,
name|Option
operator|::
name|output_dir
argument_list|,
name|FileFixifyRelative
argument_list|)
decl_stmt|;
if|if
condition|(
name|flat_file
operator|.
name|indexOf
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|QStringList
name|dirs
init|=
name|flat_file
operator|.
name|split
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
decl_stmt|;
name|name
operator|=
name|dirs
operator|.
name|back
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|QString
name|flat_file
init|=
name|fileFixify
argument_list|(
name|name
argument_list|,
name|oldpwd
argument_list|,
name|Option
operator|::
name|output_dir
argument_list|,
name|FileFixifyRelative
argument_list|)
decl_stmt|;
if|if
condition|(
name|QDir
operator|::
name|isRelativePath
argument_list|(
name|flat_file
argument_list|)
operator|&&
name|flat_file
operator|.
name|indexOf
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|QString
name|last_grp
argument_list|(
literal|"QMAKE_SUBDIR_PBX_HEIR_GROUP"
argument_list|)
decl_stmt|;
name|QStringList
name|dirs
init|=
name|flat_file
operator|.
name|split
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
decl_stmt|;
name|name
operator|=
name|dirs
operator|.
name|back
argument_list|()
expr_stmt|;
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|dir_it
init|=
name|dirs
operator|.
name|begin
argument_list|()
init|;
name|dir_it
operator|!=
name|dirs
operator|.
name|end
argument_list|()
condition|;
operator|++
name|dir_it
control|)
block|{
name|QString
name|new_grp
argument_list|(
name|last_grp
operator|+
name|Option
operator|::
name|dir_sep
operator|+
operator|(
operator|*
name|dir_it
operator|)
argument_list|)
decl_stmt|,
name|new_grp_key
argument_list|(
name|keyFor
argument_list|(
name|new_grp
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|dir_it
operator|==
name|dirs
operator|.
name|begin
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|groups
operator|.
name|contains
argument_list|(
name|new_grp
argument_list|)
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_SUBDIR_PBX_GROUPS"
argument_list|)
operator|.
name|append
argument_list|(
name|new_grp_key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|groups
index|[
name|last_grp
index|]
operator|.
name|contains
argument_list|(
name|new_grp_key
argument_list|)
condition|)
name|groups
index|[
name|last_grp
index|]
operator|+=
name|new_grp_key
expr_stmt|;
block|}
name|last_grp
operator|=
name|new_grp
expr_stmt|;
block|}
name|groups
index|[
name|last_grp
index|]
operator|+=
name|project_key
expr_stmt|;
name|in_root
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|in_root
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_SUBDIR_PBX_GROUPS"
argument_list|)
operator|+=
name|project_key
expr_stmt|;
name|t
operator|<<
literal|"\t\t"
operator|<<
name|project_key
operator|<<
literal|" = {"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"isa"
argument_list|,
literal|"PBXFileReference"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"lastKnownFileType"
argument_list|,
literal|"wrapper.pb-project"
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"name"
argument_list|,
name|escapeFilePath
argument_list|(
name|tmp_proj
operator|.
name|first
argument_list|(
literal|"TARGET"
argument_list|)
operator|+
name|projectSuffix
argument_list|()
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"path"
argument_list|,
name|pbxproj
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"refType"
argument_list|,
literal|"0"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"sourceTree"
argument_list|,
literal|"<absolute>"
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
expr_stmt|;
comment|//WRAPPER
name|t
operator|<<
literal|"\t\t"
operator|<<
name|keyFor
argument_list|(
name|pbxproj
operator|+
literal|"_WRAPPER"
argument_list|)
operator|<<
literal|" = {"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"isa"
argument_list|,
literal|"PBXReferenceProxy"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
if|if
condition|(
name|tmp_proj
operator|.
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"app"
condition|)
block|{
name|t
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"fileType"
argument_list|,
literal|"wrapper.application"
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"path"
argument_list|,
name|tmp_proj
operator|.
name|first
argument_list|(
literal|"TARGET"
argument_list|)
operator|+
literal|".app"
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
block|}
else|else
block|{
name|t
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"fileType"
argument_list|,
literal|"compiled.mach-o.dylib"
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"path"
argument_list|,
name|tmp_proj
operator|.
name|first
argument_list|(
literal|"TARGET"
argument_list|)
operator|+
literal|".dylib"
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
block|}
name|t
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"refType"
argument_list|,
literal|"3"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"remoteRef"
argument_list|,
name|keyFor
argument_list|(
name|pbxproj
operator|+
literal|"_WRAPPERREF"
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"sourceTree"
argument_list|,
literal|"BUILT_PRODUCTS_DIR"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
expr_stmt|;
name|t
operator|<<
literal|"\t\t"
operator|<<
name|keyFor
argument_list|(
name|pbxproj
operator|+
literal|"_WRAPPERREF"
argument_list|)
operator|<<
literal|" = {"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"containerPortal"
argument_list|,
name|project_key
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"isa"
argument_list|,
literal|"PBXContainerItemProxy"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"proxyType"
argument_list|,
literal|"2"
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
comment|//<< "\t\t\t"<< writeSettings("remoteGlobalIDString", keyFor(pbxproj + "QMAKE_PBX_REFERENCE"))<< ";"<< "\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"remoteGlobalIDString"
argument_list|,
name|keyFor
argument_list|(
name|pbxproj
operator|+
literal|"QMAKE_PBX_REFERENCE!!!"
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"remoteInfo"
argument_list|,
name|tmp_proj
operator|.
name|first
argument_list|(
literal|"TARGET"
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
expr_stmt|;
comment|//PRODUCTGROUP
name|t
operator|<<
literal|"\t\t"
operator|<<
name|keyFor
argument_list|(
name|pbxproj
operator|+
literal|"_PRODUCTGROUP"
argument_list|)
operator|<<
literal|" = {"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"children"
argument_list|,
name|project
operator|->
name|values
argument_list|(
name|pbxproj
operator|+
literal|"_WRAPPER"
argument_list|)
argument_list|,
name|SettingsAsList
argument_list|,
literal|4
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"isa"
argument_list|,
literal|"PBXGroup"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"name"
argument_list|,
literal|"Products"
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"refType"
argument_list|,
literal|"4"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"sourceTree"
argument_list|,
literal|"<group>"
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|GENERATE_AGGREGRATE_SUBDIR
comment|//TARGET (for aggregate)
block|{
comment|//container
specifier|const
name|QString
name|container_proxy
init|=
name|keyFor
argument_list|(
name|pbxproj
operator|+
literal|"_CONTAINERPROXY"
argument_list|)
decl_stmt|;
name|t
operator|<<
literal|"\t\t"
operator|<<
name|container_proxy
operator|<<
literal|" = {"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"containerPortal"
argument_list|,
name|project_key
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"isa"
argument_list|,
literal|"PBXContainerItemProxy"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"proxyType"
argument_list|,
literal|"1"
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"remoteGlobalIDString"
argument_list|,
name|keyFor
argument_list|(
name|pbxproj
operator|+
literal|"QMAKE_PBX_TARGET"
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"remoteInfo"
argument_list|,
name|tmp_proj
operator|.
name|first
argument_list|(
literal|"TARGET"
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
expr_stmt|;
comment|//targetref
name|t
operator|<<
literal|"\t\t"
operator|<<
name|keyFor
argument_list|(
name|pbxproj
operator|+
literal|"_TARGETREF"
argument_list|)
operator|<<
literal|" = {"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"isa"
argument_list|,
literal|"PBXTargetDependency"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"name"
argument_list|,
name|fixForOutput
argument_list|(
name|tmp_proj
operator|.
name|first
argument_list|(
literal|"TARGET"
argument_list|)
operator|+
literal|" (from "
operator|+
name|tmp_proj
operator|.
name|first
argument_list|(
literal|"TARGET"
argument_list|)
operator|+
name|projectSuffix
argument_list|()
operator|+
literal|")"
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"targetProxy"
argument_list|,
name|container_proxy
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
expr_stmt|;
block|}
endif|#
directive|endif
block|}
block|}
name|nextfile
label|:
name|qmake_setpwd
argument_list|(
name|oldpwd
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|qDeleteAll
argument_list|(
name|pb_subdirs
argument_list|)
expr_stmt|;
name|pb_subdirs
operator|.
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|QMap
argument_list|<
name|QString
argument_list|,
name|QStringList
argument_list|>
operator|::
name|Iterator
name|grp_it
init|=
name|groups
operator|.
name|begin
argument_list|()
init|;
name|grp_it
operator|!=
name|groups
operator|.
name|end
argument_list|()
condition|;
operator|++
name|grp_it
control|)
block|{
name|t
operator|<<
literal|"\t\t"
operator|<<
name|keyFor
argument_list|(
name|grp_it
operator|.
name|key
argument_list|()
argument_list|)
operator|<<
literal|" = {"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"isa"
argument_list|,
literal|"PBXGroup"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"children"
argument_list|,
name|grp_it
operator|.
name|value
argument_list|()
argument_list|,
name|SettingsAsList
argument_list|,
literal|4
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"name"
argument_list|,
name|escapeFilePath
argument_list|(
name|grp_it
operator|.
name|key
argument_list|()
operator|.
name|section
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"refType"
argument_list|,
literal|"4"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
expr_stmt|;
block|}
comment|//DUMP EVERYTHING THAT TIES THE ABOVE TOGETHER
comment|//BUILDSTYLE
name|QString
name|active_buildstyle
decl_stmt|;
for|for
control|(
name|int
name|as_release
init|=
literal|0
init|;
name|as_release
operator|<
literal|2
condition|;
name|as_release
operator|++
control|)
block|{
name|QMap
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|settings
decl_stmt|;
name|settings
operator|.
name|insert
argument_list|(
literal|"COPY_PHASE_STRIP"
argument_list|,
operator|(
name|as_release
condition|?
literal|"YES"
else|:
literal|"NO"
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|as_release
condition|)
name|settings
operator|.
name|insert
argument_list|(
literal|"GCC_GENERATE_DEBUGGING_SYMBOLS"
argument_list|,
literal|"NO"
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"sdk"
argument_list|)
operator|&&
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_MAC_SDK"
argument_list|)
condition|)
name|settings
operator|.
name|insert
argument_list|(
literal|"SDKROOT"
argument_list|,
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_MAC_SDK"
argument_list|)
argument_list|)
expr_stmt|;
block|{
specifier|const
name|QStringList
modifier|&
name|l
init|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_MAC_XCODE_SETTINGS"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|name
init|=
name|l
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|value
init|=
name|project
operator|->
name|values
argument_list|(
name|name
operator|+
name|QLatin1String
argument_list|(
literal|".value"
argument_list|)
argument_list|)
operator|.
name|join
argument_list|(
name|QString
argument_list|(
name|Option
operator|::
name|field_sep
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
name|name
operator|+
name|QLatin1String
argument_list|(
literal|".name"
argument_list|)
argument_list|)
condition|)
name|name
operator|=
name|project
operator|->
name|values
argument_list|(
name|name
operator|+
name|QLatin1String
argument_list|(
literal|".name"
argument_list|)
argument_list|)
operator|.
name|first
argument_list|()
expr_stmt|;
name|settings
operator|.
name|insert
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|QString
name|name
decl_stmt|;
if|if
condition|(
name|pbVersion
operator|>=
literal|42
condition|)
name|name
operator|=
operator|(
name|as_release
condition|?
literal|"Release"
else|:
literal|"Debug"
operator|)
expr_stmt|;
else|else
name|name
operator|=
operator|(
name|as_release
condition|?
literal|"Deployment"
else|:
literal|"Development"
operator|)
expr_stmt|;
if|if
condition|(
name|pbVersion
operator|>=
literal|42
condition|)
block|{
name|QString
name|key
init|=
name|keyFor
argument_list|(
literal|"QMAKE_SUBDIR_PBX_BUILDCONFIG_"
operator|+
name|name
argument_list|)
decl_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_SUBDIR_PBX_BUILDCONFIGS"
argument_list|)
operator|.
name|append
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"\t\t"
operator|<<
name|key
operator|<<
literal|" = {"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"isa"
argument_list|,
literal|"XCBuildConfiguration"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
literal|"buildSettings = {"
operator|<<
literal|"\n"
expr_stmt|;
for|for
control|(
name|QMap
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
operator|::
name|Iterator
name|set_it
init|=
name|settings
operator|.
name|begin
argument_list|()
init|;
name|set_it
operator|!=
name|settings
operator|.
name|end
argument_list|()
condition|;
operator|++
name|set_it
control|)
name|t
operator|<<
literal|"\t\t\t\t"
operator|<<
name|writeSettings
argument_list|(
name|set_it
operator|.
name|key
argument_list|()
argument_list|,
name|set_it
operator|.
name|value
argument_list|()
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
name|t
operator|<<
literal|"\t\t\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
expr_stmt|;
block|}
name|QString
name|key
init|=
name|keyFor
argument_list|(
literal|"QMAKE_SUBDIR_PBX_BUILDSTYLE_"
operator|+
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"debug"
argument_list|)
operator|!=
operator|(
name|bool
operator|)
name|as_release
condition|)
block|{
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_SUBDIR_PBX_BUILDSTYLES"
argument_list|)
operator|.
name|append
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|active_buildstyle
operator|=
name|name
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pbVersion
operator|>=
literal|42
condition|)
block|{
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_SUBDIR_PBX_BUILDSTYLES"
argument_list|)
operator|.
name|append
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|t
operator|<<
literal|"\t\t"
operator|<<
name|key
operator|<<
literal|" = {"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"buildRules"
argument_list|,
name|QStringList
argument_list|()
argument_list|,
name|SettingsAsList
argument_list|,
literal|4
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
literal|"buildSettings = {"
operator|<<
literal|"\n"
expr_stmt|;
for|for
control|(
name|QMap
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
operator|::
name|Iterator
name|set_it
init|=
name|settings
operator|.
name|begin
argument_list|()
init|;
name|set_it
operator|!=
name|settings
operator|.
name|end
argument_list|()
condition|;
operator|++
name|set_it
control|)
name|t
operator|<<
literal|"\t\t\t\t"
operator|<<
name|writeSettings
argument_list|(
name|set_it
operator|.
name|key
argument_list|()
argument_list|,
name|set_it
operator|.
name|value
argument_list|()
argument_list|)
operator|<<
literal|";\n"
expr_stmt|;
name|t
operator|<<
literal|"\t\t\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"isa"
argument_list|,
literal|"PBXBuildStyle"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
expr_stmt|;
block|}
if|if
condition|(
name|pbVersion
operator|>=
literal|42
condition|)
block|{
name|t
operator|<<
literal|"\t\t"
operator|<<
name|keyFor
argument_list|(
literal|"QMAKE_SUBDIR_PBX_BUILDCONFIG_LIST"
argument_list|)
operator|<<
literal|" = {"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"isa"
argument_list|,
literal|"XCConfigurationList"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"buildConfigurations"
argument_list|,
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_SUBDIR_PBX_BUILDCONFIGS"
argument_list|)
argument_list|,
name|SettingsAsList
argument_list|,
literal|4
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"defaultConfigurationIsVisible"
argument_list|,
literal|"0"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"defaultConfigurationIsName"
argument_list|,
name|active_buildstyle
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|GENERATE_AGGREGRATE_SUBDIR
comment|//target
name|t
operator|<<
literal|"\t\t"
operator|<<
name|keyFor
argument_list|(
literal|"QMAKE_SUBDIR_PBX_AGGREGATE_TARGET"
argument_list|)
operator|<<
literal|" = {"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"buildPhases"
argument_list|,
name|QStringList
argument_list|()
argument_list|,
name|SettingsAsList
argument_list|,
literal|4
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
literal|"buildSettings = {"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"PRODUCT_NAME"
argument_list|,
name|project
operator|->
name|values
argument_list|(
literal|"TARGET"
argument_list|)
operator|.
name|first
argument_list|()
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
expr_stmt|;
block|{
name|QStringList
name|dependencies
decl_stmt|;
specifier|const
name|QStringList
modifier|&
name|qmake_subdirs
init|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PBX_SUBDIRS"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qmake_subdirs
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
name|dependencies
operator|+=
name|keyFor
argument_list|(
name|qmake_subdirs
index|[
name|i
index|]
operator|+
literal|"_TARGETREF"
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"dependencies"
argument_list|,
name|dependencies
argument_list|,
name|SettingsAsList
argument_list|,
literal|4
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
block|}
name|t
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"isa"
argument_list|,
literal|"PBXAggregateTarget"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"name"
argument_list|,
name|project
operator|->
name|values
argument_list|(
literal|"TARGET"
argument_list|)
operator|.
name|first
argument_list|()
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"productName"
argument_list|,
name|project
operator|->
name|values
argument_list|(
literal|"TARGET"
argument_list|)
operator|.
name|first
argument_list|()
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
expr_stmt|;
endif|#
directive|endif
comment|//ROOT_GROUP
name|t
operator|<<
literal|"\t\t"
operator|<<
name|keyFor
argument_list|(
literal|"QMAKE_SUBDIR_PBX_ROOT_GROUP"
argument_list|)
operator|<<
literal|" = {"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"children"
argument_list|,
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_SUBDIR_PBX_GROUPS"
argument_list|)
argument_list|,
name|SettingsAsList
argument_list|,
literal|4
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"isa"
argument_list|,
literal|"PBXGroup"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"refType"
argument_list|,
literal|"4"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"sourceTree"
argument_list|,
literal|"<group>"
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
expr_stmt|;
comment|//ROOT
name|t
operator|<<
literal|"\t\t"
operator|<<
name|keyFor
argument_list|(
literal|"QMAKE_SUBDIR_PBX_ROOT"
argument_list|)
operator|<<
literal|" = {"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
literal|"buildSettings = {"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"buildStyles"
argument_list|,
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_SUBDIR_PBX_BUILDSTYLES"
argument_list|)
argument_list|,
name|SettingsAsList
argument_list|,
literal|4
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"isa"
argument_list|,
literal|"PBXProject"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"mainGroup"
argument_list|,
name|keyFor
argument_list|(
literal|"QMAKE_SUBDIR_PBX_ROOT_GROUP"
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"projectDirPath"
argument_list|,
name|QStringList
argument_list|()
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
if|if
condition|(
name|pbVersion
operator|>=
literal|42
condition|)
name|t
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"buildConfigurationList"
argument_list|,
name|keyFor
argument_list|(
literal|"QMAKE_SUBDIR_PBX_BUILDCONFIG_LIST"
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
name|t
operator|<<
literal|"\t\t\t"
operator|<<
literal|"projectReferences = ("
operator|<<
literal|"\n"
expr_stmt|;
block|{
name|QStringList
modifier|&
name|qmake_subdirs
init|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PBX_SUBDIRS"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qmake_subdirs
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QString
name|subdir
init|=
name|qmake_subdirs
index|[
name|i
index|]
decl_stmt|;
name|t
operator|<<
literal|"\t\t\t\t"
operator|<<
literal|"{"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"ProductGroup"
argument_list|,
name|keyFor
argument_list|(
name|subdir
operator|+
literal|"_PRODUCTGROUP"
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"ProjectRef"
argument_list|,
name|keyFor
argument_list|(
name|subdir
operator|+
literal|"_PROJECTREF"
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t\t"
operator|<<
literal|"},"
operator|<<
literal|"\n"
expr_stmt|;
block|}
block|}
name|t
operator|<<
literal|"\t\t\t"
operator|<<
literal|");"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"targets"
argument_list|,
ifdef|#
directive|ifdef
name|GENERATE_AGGREGRATE_SUBDIR
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_SUBDIR_AGGREGATE_TARGET"
argument_list|)
argument_list|,
else|#
directive|else
name|QStringList
argument_list|()
argument_list|,
endif|#
directive|endif
name|SettingsAsList
argument_list|,
literal|4
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
expr_stmt|;
comment|//FOOTER
name|t
operator|<<
literal|"\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
operator|<<
literal|"\t"
operator|<<
name|writeSettings
argument_list|(
literal|"rootObject"
argument_list|,
name|keyFor
argument_list|(
literal|"QMAKE_SUBDIR_PBX_ROOT"
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"}"
operator|<<
name|endl
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_class
DECL|class|ProjectBuilderSources
class|class
name|ProjectBuilderSources
block|{
DECL|member|buildable
DECL|member|object_output
name|bool
name|buildable
decl_stmt|,
name|object_output
decl_stmt|;
DECL|member|key
DECL|member|group
DECL|member|compiler
name|QString
name|key
decl_stmt|,
name|group
decl_stmt|,
name|compiler
decl_stmt|;
public|public:
name|ProjectBuilderSources
parameter_list|(
specifier|const
name|QString
modifier|&
name|key
parameter_list|,
name|bool
name|buildable
init|=
literal|false
parameter_list|,
specifier|const
name|QString
modifier|&
name|group
init|=
name|QString
argument_list|()
parameter_list|,
specifier|const
name|QString
modifier|&
name|compiler
init|=
name|QString
argument_list|()
parameter_list|,
name|bool
name|producesObject
init|=
literal|false
parameter_list|)
constructor_decl|;
name|QStringList
name|files
parameter_list|(
name|QMakeProject
modifier|*
name|project
parameter_list|)
specifier|const
function_decl|;
DECL|function|isBuildable
specifier|inline
name|bool
name|isBuildable
parameter_list|()
specifier|const
block|{
return|return
name|buildable
return|;
block|}
DECL|function|keyName
specifier|inline
name|QString
name|keyName
parameter_list|()
specifier|const
block|{
return|return
name|key
return|;
block|}
DECL|function|groupName
specifier|inline
name|QString
name|groupName
parameter_list|()
specifier|const
block|{
return|return
name|group
return|;
block|}
DECL|function|compilerName
specifier|inline
name|QString
name|compilerName
parameter_list|()
specifier|const
block|{
return|return
name|compiler
return|;
block|}
DECL|function|isObjectOutput
specifier|inline
name|bool
name|isObjectOutput
parameter_list|(
specifier|const
name|QString
modifier|&
name|file
parameter_list|)
specifier|const
block|{
name|bool
name|ret
init|=
name|object_output
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
operator|!
name|ret
operator|&&
name|i
operator|<
name|Option
operator|::
name|c_ext
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|file
operator|.
name|endsWith
argument_list|(
name|Option
operator|::
name|c_ext
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|ret
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
operator|!
name|ret
operator|&&
name|i
operator|<
name|Option
operator|::
name|cpp_ext
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|file
operator|.
name|endsWith
argument_list|(
name|Option
operator|::
name|cpp_ext
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
condition|)
block|{
name|ret
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
return|return
name|ret
return|;
block|}
block|}
class|;
end_class
begin_constructor
DECL|function|ProjectBuilderSources
name|ProjectBuilderSources
operator|::
name|ProjectBuilderSources
parameter_list|(
specifier|const
name|QString
modifier|&
name|k
parameter_list|,
name|bool
name|b
parameter_list|,
specifier|const
name|QString
modifier|&
name|g
parameter_list|,
specifier|const
name|QString
modifier|&
name|c
parameter_list|,
name|bool
name|o
parameter_list|)
member_init_list|:
name|buildable
argument_list|(
name|b
argument_list|)
member_init_list|,
name|object_output
argument_list|(
name|o
argument_list|)
member_init_list|,
name|key
argument_list|(
name|k
argument_list|)
member_init_list|,
name|group
argument_list|(
name|g
argument_list|)
member_init_list|,
name|compiler
argument_list|(
name|c
argument_list|)
block|{
if|if
condition|(
name|group
operator|.
name|isNull
argument_list|()
condition|)
block|{
if|if
condition|(
name|k
operator|==
literal|"SOURCES"
condition|)
name|group
operator|=
literal|"Sources"
expr_stmt|;
elseif|else
if|if
condition|(
name|k
operator|==
literal|"HEADERS"
condition|)
name|group
operator|=
literal|"Headers"
expr_stmt|;
elseif|else
if|if
condition|(
name|k
operator|==
literal|"QMAKE_INTERNAL_INCLUDED_FILES"
condition|)
name|group
operator|=
literal|"Sources [qmake]"
expr_stmt|;
elseif|else
if|if
condition|(
name|k
operator|==
literal|"GENERATED_SOURCES"
operator|||
name|k
operator|==
literal|"GENERATED_FILES"
condition|)
name|group
operator|=
literal|"Temporary Sources"
expr_stmt|;
else|else
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"No group available for %s!\n"
argument_list|,
name|k
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_constructor
begin_function
name|QStringList
DECL|function|files
name|ProjectBuilderSources
operator|::
name|files
parameter_list|(
name|QMakeProject
modifier|*
name|project
parameter_list|)
specifier|const
block|{
name|QStringList
name|ret
init|=
name|project
operator|->
name|values
argument_list|(
name|key
argument_list|)
decl_stmt|;
if|if
condition|(
name|key
operator|==
literal|"QMAKE_INTERNAL_INCLUDED_FILES"
condition|)
block|{
name|QString
name|pfile
init|=
name|project
operator|->
name|projectFile
argument_list|()
decl_stmt|;
if|if
condition|(
name|pfile
operator|!=
literal|"(stdin)"
condition|)
name|ret
operator|.
name|prepend
argument_list|(
name|pfile
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ret
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QStringList
name|newret
decl_stmt|;
if|if
condition|(
operator|!
name|ret
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|endsWith
argument_list|(
name|Option
operator|::
name|prf_ext
argument_list|)
condition|)
name|newret
operator|.
name|append
argument_list|(
name|ret
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|ret
operator|=
name|newret
expr_stmt|;
block|}
block|}
if|if
condition|(
name|key
operator|==
literal|"SOURCES"
operator|&&
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"app"
operator|&&
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"ICON"
argument_list|)
condition|)
name|ret
operator|.
name|append
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"ICON"
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
name|bool
DECL|function|writeMakeParts
name|ProjectBuilderMakefileGenerator
operator|::
name|writeMakeParts
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|)
block|{
name|QStringList
name|tmp
decl_stmt|;
name|bool
name|did_preprocess
init|=
literal|false
decl_stmt|;
comment|//HEADER
specifier|const
name|int
name|pbVersion
init|=
name|pbuilderVersion
argument_list|()
decl_stmt|;
name|t
operator|<<
literal|"// !$*UTF8*$!"
operator|<<
literal|"\n"
operator|<<
literal|"{"
operator|<<
literal|"\n"
operator|<<
literal|"\t"
operator|<<
name|writeSettings
argument_list|(
literal|"archiveVersion"
argument_list|,
literal|"1"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t"
operator|<<
literal|"classes = {"
operator|<<
literal|"\n"
operator|<<
literal|"\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
operator|<<
literal|"\t"
operator|<<
name|writeSettings
argument_list|(
literal|"objectVersion"
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|pbVersion
argument_list|)
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t"
operator|<<
literal|"objects = {"
operator|<<
name|endl
expr_stmt|;
comment|//MAKE QMAKE equivelant
if|if
condition|(
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"no_autoqmake"
argument_list|)
operator|&&
name|project
operator|->
name|projectFile
argument_list|()
operator|!=
literal|"(stdin)"
condition|)
block|{
name|QString
name|mkfile
init|=
name|pbx_dir
operator|+
name|Option
operator|::
name|dir_sep
operator|+
literal|"qt_makeqmake.mak"
decl_stmt|;
name|QFile
name|mkf
argument_list|(
name|mkfile
argument_list|)
decl_stmt|;
if|if
condition|(
name|mkf
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
condition|)
block|{
name|writingUnixMakefileGenerator
operator|=
literal|true
expr_stmt|;
name|debug_msg
argument_list|(
literal|1
argument_list|,
literal|"pbuilder: Creating file: %s"
argument_list|,
name|mkfile
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QTextStream
name|mkt
argument_list|(
operator|&
name|mkf
argument_list|)
decl_stmt|;
name|writeHeader
argument_list|(
name|mkt
argument_list|)
expr_stmt|;
name|mkt
operator|<<
literal|"QMAKE    = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_QMAKE"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|writeMakeQmake
argument_list|(
name|mkt
argument_list|)
expr_stmt|;
name|mkt
operator|.
name|flush
argument_list|()
expr_stmt|;
name|mkf
operator|.
name|close
argument_list|()
expr_stmt|;
name|writingUnixMakefileGenerator
operator|=
literal|false
expr_stmt|;
block|}
name|QString
name|phase_key
init|=
name|keyFor
argument_list|(
literal|"QMAKE_PBX_MAKEQMAKE_BUILDPHASE"
argument_list|)
decl_stmt|;
name|mkfile
operator|=
name|fileFixify
argument_list|(
name|mkfile
argument_list|,
name|qmake_getpwd
argument_list|()
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PBX_PRESCRIPT_BUILDPHASES"
argument_list|)
operator|.
name|append
argument_list|(
name|phase_key
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"\t\t"
operator|<<
name|phase_key
operator|<<
literal|" = {"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"buildActionMask"
argument_list|,
literal|"2147483647"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"files"
argument_list|,
name|QStringList
argument_list|()
argument_list|,
name|SettingsAsList
argument_list|,
literal|4
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"generatedFileNames"
argument_list|,
name|QStringList
argument_list|()
argument_list|,
name|SettingsAsList
argument_list|,
literal|4
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"isa"
argument_list|,
literal|"PBXShellScriptBuildPhase"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"name"
argument_list|,
literal|"Qt Qmake"
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"neededFileNames"
argument_list|,
name|QStringList
argument_list|()
argument_list|,
name|SettingsAsList
argument_list|,
literal|4
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"shellPath"
argument_list|,
literal|"/bin/sh"
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"shellScript"
argument_list|,
name|fixForOutput
argument_list|(
literal|"make -C "
operator|+
name|escapeFilePath
argument_list|(
name|qmake_getpwd
argument_list|()
argument_list|)
operator|+
literal|" -f '"
operator|+
name|escapeFilePath
argument_list|(
name|mkfile
argument_list|)
operator|+
literal|"'"
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
expr_stmt|;
block|}
comment|//DUMP SOURCES
name|QMap
argument_list|<
name|QString
argument_list|,
name|QStringList
argument_list|>
name|groups
decl_stmt|;
name|QList
argument_list|<
name|ProjectBuilderSources
argument_list|>
name|sources
decl_stmt|;
name|sources
operator|.
name|append
argument_list|(
name|ProjectBuilderSources
argument_list|(
literal|"SOURCES"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|sources
operator|.
name|append
argument_list|(
name|ProjectBuilderSources
argument_list|(
literal|"GENERATED_SOURCES"
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|sources
operator|.
name|append
argument_list|(
name|ProjectBuilderSources
argument_list|(
literal|"GENERATED_FILES"
argument_list|)
argument_list|)
expr_stmt|;
name|sources
operator|.
name|append
argument_list|(
name|ProjectBuilderSources
argument_list|(
literal|"HEADERS"
argument_list|)
argument_list|)
expr_stmt|;
name|sources
operator|.
name|append
argument_list|(
name|ProjectBuilderSources
argument_list|(
literal|"QMAKE_INTERNAL_INCLUDED_FILES"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_EXTRA_COMPILERS"
argument_list|)
condition|)
block|{
specifier|const
name|QStringList
modifier|&
name|quc
init|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_EXTRA_COMPILERS"
argument_list|)
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|it
init|=
name|quc
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|quc
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
name|QString
name|tmp_out
init|=
name|project
operator|->
name|first
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".output"
argument_list|)
decl_stmt|;
if|if
condition|(
name|project
operator|->
name|isEmpty
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".output"
argument_list|)
condition|)
continue|continue;
name|QString
name|name
init|=
operator|(
operator|*
name|it
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".name"
argument_list|)
condition|)
name|name
operator|=
name|project
operator|->
name|first
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".name"
argument_list|)
expr_stmt|;
specifier|const
name|QStringList
modifier|&
name|inputs
init|=
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".input"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|input
init|=
literal|0
init|;
name|input
operator|<
name|inputs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|input
control|)
block|{
if|if
condition|(
name|project
operator|->
name|isEmpty
argument_list|(
name|inputs
operator|.
name|at
argument_list|(
name|input
argument_list|)
argument_list|)
condition|)
continue|continue;
name|bool
name|duplicate
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sources
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|sources
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|keyName
argument_list|()
operator|==
name|inputs
operator|.
name|at
argument_list|(
name|input
argument_list|)
condition|)
block|{
name|duplicate
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|duplicate
condition|)
block|{
name|bool
name|isObj
init|=
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".CONFIG"
argument_list|)
operator|.
name|indexOf
argument_list|(
literal|"no_link"
argument_list|)
operator|==
operator|-
literal|1
decl_stmt|;
specifier|const
name|QStringList
modifier|&
name|outputs
init|=
name|project
operator|->
name|values
argument_list|(
operator|(
operator|*
name|it
operator|)
operator|+
literal|".variable_out"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|output
init|=
literal|0
init|;
name|output
operator|<
name|outputs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|output
control|)
block|{
if|if
condition|(
name|outputs
operator|.
name|at
argument_list|(
name|output
argument_list|)
operator|!=
literal|"OBJECT"
condition|)
block|{
name|isObj
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
name|sources
operator|.
name|append
argument_list|(
name|ProjectBuilderSources
argument_list|(
name|inputs
operator|.
name|at
argument_list|(
name|input
argument_list|)
argument_list|,
literal|true
argument_list|,
name|QString
argument_list|(
literal|"Sources ["
argument_list|)
operator|+
name|name
operator|+
literal|"]"
argument_list|,
operator|(
operator|*
name|it
operator|)
argument_list|,
name|isObj
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
for|for
control|(
name|int
name|source
init|=
literal|0
init|;
name|source
operator|<
name|sources
operator|.
name|size
argument_list|()
condition|;
operator|++
name|source
control|)
block|{
name|QStringList
modifier|&
name|src_list
init|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PBX_"
operator|+
name|sources
operator|.
name|at
argument_list|(
name|source
argument_list|)
operator|.
name|keyName
argument_list|()
argument_list|)
decl_stmt|;
name|QStringList
modifier|&
name|root_group_list
init|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PBX_GROUPS"
argument_list|)
decl_stmt|;
name|QStringList
name|files
init|=
name|fileFixify
argument_list|(
name|sources
operator|.
name|at
argument_list|(
name|source
argument_list|)
operator|.
name|files
argument_list|(
name|project
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|f
init|=
literal|0
init|;
name|f
operator|<
name|files
operator|.
name|count
argument_list|()
condition|;
operator|++
name|f
control|)
block|{
name|QString
name|file
init|=
name|files
index|[
name|f
index|]
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|length
argument_list|()
operator|>=
literal|2
operator|&&
operator|(
name|file
index|[
literal|0
index|]
operator|==
literal|'"'
operator|||
name|file
index|[
literal|0
index|]
operator|==
literal|'\''
operator|)
operator|&&
name|file
index|[
operator|(
name|int
operator|)
name|file
operator|.
name|length
argument_list|()
operator|-
literal|1
index|]
operator|==
name|file
index|[
literal|0
index|]
condition|)
name|file
operator|=
name|file
operator|.
name|mid
argument_list|(
literal|1
argument_list|,
name|file
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|sources
operator|.
name|at
argument_list|(
name|source
argument_list|)
operator|.
name|compilerName
argument_list|()
operator|.
name|isNull
argument_list|()
operator|&&
operator|!
name|verifyExtraCompiler
argument_list|(
name|sources
operator|.
name|at
argument_list|(
name|source
argument_list|)
operator|.
name|compilerName
argument_list|()
argument_list|,
name|file
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|file
operator|.
name|endsWith
argument_list|(
name|Option
operator|::
name|prl_ext
argument_list|)
condition|)
continue|continue;
name|bool
name|in_root
init|=
literal|true
decl_stmt|;
name|QString
name|src_key
init|=
name|keyFor
argument_list|(
name|file
argument_list|)
decl_stmt|,
name|name
init|=
name|file
decl_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"flat"
argument_list|)
condition|)
block|{
name|QString
name|flat_file
init|=
name|fileFixify
argument_list|(
name|file
argument_list|,
name|qmake_getpwd
argument_list|()
argument_list|,
name|Option
operator|::
name|output_dir
argument_list|,
name|FileFixifyRelative
argument_list|)
decl_stmt|;
if|if
condition|(
name|flat_file
operator|.
name|indexOf
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|QStringList
name|dirs
init|=
name|flat_file
operator|.
name|split
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
decl_stmt|;
name|name
operator|=
name|dirs
operator|.
name|back
argument_list|()
expr_stmt|;
block|}
block|}
else|else
block|{
name|QString
name|flat_file
init|=
name|fileFixify
argument_list|(
name|file
argument_list|,
name|qmake_getpwd
argument_list|()
argument_list|,
name|Option
operator|::
name|output_dir
argument_list|,
name|FileFixifyRelative
argument_list|)
decl_stmt|;
if|if
condition|(
name|QDir
operator|::
name|isRelativePath
argument_list|(
name|flat_file
argument_list|)
operator|&&
name|flat_file
operator|.
name|indexOf
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|QString
name|last_grp
argument_list|(
literal|"QMAKE_PBX_"
operator|+
name|sources
operator|.
name|at
argument_list|(
name|source
argument_list|)
operator|.
name|groupName
argument_list|()
operator|+
literal|"_HEIR_GROUP"
argument_list|)
decl_stmt|;
name|QStringList
name|dirs
init|=
name|flat_file
operator|.
name|split
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
decl_stmt|;
name|name
operator|=
name|dirs
operator|.
name|back
argument_list|()
expr_stmt|;
name|dirs
operator|.
name|pop_back
argument_list|()
expr_stmt|;
comment|//remove the file portion as it will be added via src_key
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|dir_it
init|=
name|dirs
operator|.
name|begin
argument_list|()
init|;
name|dir_it
operator|!=
name|dirs
operator|.
name|end
argument_list|()
condition|;
operator|++
name|dir_it
control|)
block|{
name|QString
name|new_grp
argument_list|(
name|last_grp
operator|+
name|Option
operator|::
name|dir_sep
operator|+
operator|(
operator|*
name|dir_it
operator|)
argument_list|)
decl_stmt|,
name|new_grp_key
argument_list|(
name|keyFor
argument_list|(
name|new_grp
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|dir_it
operator|==
name|dirs
operator|.
name|begin
argument_list|()
condition|)
block|{
if|if
condition|(
operator|!
name|src_list
operator|.
name|contains
argument_list|(
name|new_grp_key
argument_list|)
condition|)
name|src_list
operator|.
name|append
argument_list|(
name|new_grp_key
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|groups
index|[
name|last_grp
index|]
operator|.
name|contains
argument_list|(
name|new_grp_key
argument_list|)
condition|)
name|groups
index|[
name|last_grp
index|]
operator|+=
name|new_grp_key
expr_stmt|;
block|}
name|last_grp
operator|=
name|new_grp
expr_stmt|;
block|}
name|groups
index|[
name|last_grp
index|]
operator|+=
name|src_key
expr_stmt|;
name|in_root
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
name|in_root
condition|)
name|src_list
operator|.
name|append
argument_list|(
name|src_key
argument_list|)
expr_stmt|;
comment|//source reference
name|t
operator|<<
literal|"\t\t"
operator|<<
name|src_key
operator|<<
literal|" = {"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"isa"
argument_list|,
literal|"PBXFileReference"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"name"
argument_list|,
name|escapeFilePath
argument_list|(
name|name
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"path"
argument_list|,
name|escapeFilePath
argument_list|(
name|file
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"refType"
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|reftypeForFile
argument_list|(
name|file
argument_list|)
argument_list|)
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
if|if
condition|(
name|pbVersion
operator|>=
literal|38
condition|)
block|{
name|QString
name|filetype
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|cppit
init|=
name|Option
operator|::
name|cpp_ext
operator|.
name|begin
argument_list|()
init|;
name|cppit
operator|!=
name|Option
operator|::
name|cpp_ext
operator|.
name|end
argument_list|()
condition|;
operator|++
name|cppit
control|)
block|{
if|if
condition|(
name|file
operator|.
name|endsWith
argument_list|(
operator|(
operator|*
name|cppit
operator|)
argument_list|)
condition|)
block|{
name|filetype
operator|=
literal|"sourcecode.cpp.cpp"
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|filetype
operator|.
name|isNull
argument_list|()
condition|)
name|t
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"lastKnownFileType"
argument_list|,
name|filetype
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
block|}
name|t
operator|<<
literal|"\t\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
expr_stmt|;
if|if
condition|(
name|sources
operator|.
name|at
argument_list|(
name|source
argument_list|)
operator|.
name|isBuildable
argument_list|()
condition|)
block|{
comment|//build reference
name|QString
name|build_key
init|=
name|keyFor
argument_list|(
name|file
operator|+
literal|".BUILDABLE"
argument_list|)
decl_stmt|;
name|t
operator|<<
literal|"\t\t"
operator|<<
name|build_key
operator|<<
literal|" = {"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"fileRef"
argument_list|,
name|src_key
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"isa"
argument_list|,
literal|"PBXBuildFile"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
literal|"settings = {"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"ATTRIBUTES"
argument_list|,
name|QStringList
argument_list|()
argument_list|,
name|SettingsAsList
argument_list|,
literal|5
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
expr_stmt|;
if|if
condition|(
name|sources
operator|.
name|at
argument_list|(
name|source
argument_list|)
operator|.
name|isObjectOutput
argument_list|(
name|file
argument_list|)
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PBX_OBJ"
argument_list|)
operator|.
name|append
argument_list|(
name|build_key
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|src_list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QString
name|group_key
init|=
name|keyFor
argument_list|(
name|sources
operator|.
name|at
argument_list|(
name|source
argument_list|)
operator|.
name|groupName
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|root_group_list
operator|.
name|indexOf
argument_list|(
name|group_key
argument_list|)
operator|==
operator|-
literal|1
condition|)
name|root_group_list
operator|+=
name|group_key
expr_stmt|;
name|QStringList
modifier|&
name|group
init|=
name|groups
index|[
name|sources
operator|.
name|at
argument_list|(
name|source
argument_list|)
operator|.
name|groupName
argument_list|()
index|]
decl_stmt|;
for|for
control|(
name|int
name|src
init|=
literal|0
init|;
name|src
operator|<
name|src_list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|src
control|)
block|{
if|if
condition|(
name|group
operator|.
name|indexOf
argument_list|(
name|src_list
operator|.
name|at
argument_list|(
name|src
argument_list|)
argument_list|)
operator|==
operator|-
literal|1
condition|)
name|group
operator|+=
name|src_list
operator|.
name|at
argument_list|(
name|src
argument_list|)
expr_stmt|;
block|}
block|}
block|}
for|for
control|(
name|QMap
argument_list|<
name|QString
argument_list|,
name|QStringList
argument_list|>
operator|::
name|Iterator
name|grp_it
init|=
name|groups
operator|.
name|begin
argument_list|()
init|;
name|grp_it
operator|!=
name|groups
operator|.
name|end
argument_list|()
condition|;
operator|++
name|grp_it
control|)
block|{
name|t
operator|<<
literal|"\t\t"
operator|<<
name|keyFor
argument_list|(
name|grp_it
operator|.
name|key
argument_list|()
argument_list|)
operator|<<
literal|" = {"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"isa"
argument_list|,
literal|"PBXGroup"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"children"
argument_list|,
name|grp_it
operator|.
name|value
argument_list|()
argument_list|,
name|SettingsAsList
argument_list|,
literal|4
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"name"
argument_list|,
name|escapeFilePath
argument_list|(
name|grp_it
operator|.
name|key
argument_list|()
operator|.
name|section
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|,
operator|-
literal|1
argument_list|)
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"refType"
argument_list|,
literal|"4"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
expr_stmt|;
block|}
comment|//PREPROCESS BUILDPHASE (just a makefile)
block|{
name|QString
name|mkfile
init|=
name|pbx_dir
operator|+
name|Option
operator|::
name|dir_sep
operator|+
literal|"qt_preprocess.mak"
decl_stmt|;
name|QFile
name|mkf
argument_list|(
name|mkfile
argument_list|)
decl_stmt|;
if|if
condition|(
name|mkf
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
condition|)
block|{
name|writingUnixMakefileGenerator
operator|=
literal|true
expr_stmt|;
name|did_preprocess
operator|=
literal|true
expr_stmt|;
name|debug_msg
argument_list|(
literal|1
argument_list|,
literal|"pbuilder: Creating file: %s"
argument_list|,
name|mkfile
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QTextStream
name|mkt
argument_list|(
operator|&
name|mkf
argument_list|)
decl_stmt|;
name|writeHeader
argument_list|(
name|mkt
argument_list|)
expr_stmt|;
name|mkt
operator|<<
literal|"MOC       = "
operator|<<
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|var
argument_list|(
literal|"QMAKE_MOC"
argument_list|)
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|mkt
operator|<<
literal|"UIC       = "
operator|<<
name|Option
operator|::
name|fixPathToTargetOS
argument_list|(
name|var
argument_list|(
literal|"QMAKE_UIC"
argument_list|)
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|mkt
operator|<<
literal|"LEX       = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_LEX"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|mkt
operator|<<
literal|"LEXFLAGS  = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_LEXFLAGS"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|mkt
operator|<<
literal|"YACC      = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_YACC"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|mkt
operator|<<
literal|"YACCFLAGS = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_YACCFLAGS"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|mkt
operator|<<
literal|"DEFINES       = "
operator|<<
name|varGlue
argument_list|(
literal|"PRL_EXPORT_DEFINES"
argument_list|,
literal|"-D"
argument_list|,
literal|" -D"
argument_list|,
literal|" "
argument_list|)
operator|<<
name|varGlue
argument_list|(
literal|"DEFINES"
argument_list|,
literal|"-D"
argument_list|,
literal|" -D"
argument_list|,
literal|""
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|mkt
operator|<<
literal|"INCPATH       = "
operator|<<
literal|"-I"
operator|<<
name|specdir
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"no_include_pwd"
argument_list|)
condition|)
block|{
name|QString
name|pwd
init|=
name|escapeFilePath
argument_list|(
name|fileFixify
argument_list|(
name|qmake_getpwd
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|pwd
operator|.
name|isEmpty
argument_list|()
condition|)
name|pwd
operator|=
literal|"."
expr_stmt|;
name|mkt
operator|<<
literal|" -I"
operator|<<
name|pwd
expr_stmt|;
block|}
block|{
specifier|const
name|QStringList
modifier|&
name|incs
init|=
name|project
operator|->
name|values
argument_list|(
literal|"INCLUDEPATH"
argument_list|)
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|ConstIterator
name|incit
init|=
name|incs
operator|.
name|begin
argument_list|()
init|;
name|incit
operator|!=
name|incs
operator|.
name|end
argument_list|()
condition|;
operator|++
name|incit
control|)
name|mkt
operator|<<
literal|" "
operator|<<
literal|"-I"
operator|<<
name|escapeFilePath
argument_list|(
operator|(
operator|*
name|incit
operator|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_FRAMEWORKPATH_FLAGS"
argument_list|)
condition|)
name|mkt
operator|<<
literal|" "
operator|<<
name|var
argument_list|(
literal|"QMAKE_FRAMEWORKPATH_FLAGS"
argument_list|)
expr_stmt|;
name|mkt
operator|<<
name|endl
expr_stmt|;
name|mkt
operator|<<
literal|"DEL_FILE  = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_DEL_FILE"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|mkt
operator|<<
literal|"MOVE      = "
operator|<<
name|var
argument_list|(
literal|"QMAKE_MOVE"
argument_list|)
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|mkt
operator|<<
literal|"IMAGES = "
operator|<<
name|varList
argument_list|(
literal|"QMAKE_IMAGE_COLLECTION"
argument_list|)
operator|<<
name|endl
expr_stmt|;
name|mkt
operator|<<
literal|"PARSERS ="
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"YACCSOURCES"
argument_list|)
condition|)
block|{
name|QStringList
modifier|&
name|yaccs
init|=
name|project
operator|->
name|values
argument_list|(
literal|"YACCSOURCES"
argument_list|)
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|yit
init|=
name|yaccs
operator|.
name|begin
argument_list|()
init|;
name|yit
operator|!=
name|yaccs
operator|.
name|end
argument_list|()
condition|;
operator|++
name|yit
control|)
block|{
name|QFileInfo
name|fi
argument_list|(
name|fileInfo
argument_list|(
operator|(
operator|*
name|yit
operator|)
argument_list|)
argument_list|)
decl_stmt|;
name|mkt
operator|<<
literal|" "
operator|<<
name|fi
operator|.
name|path
argument_list|()
operator|<<
name|Option
operator|::
name|dir_sep
operator|<<
name|fi
operator|.
name|baseName
argument_list|()
operator|<<
name|Option
operator|::
name|yacc_mod
operator|<<
name|Option
operator|::
name|cpp_ext
operator|.
name|first
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"LEXSOURCES"
argument_list|)
condition|)
block|{
name|QStringList
modifier|&
name|lexs
init|=
name|project
operator|->
name|values
argument_list|(
literal|"LEXSOURCES"
argument_list|)
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|lit
init|=
name|lexs
operator|.
name|begin
argument_list|()
init|;
name|lit
operator|!=
name|lexs
operator|.
name|end
argument_list|()
condition|;
operator|++
name|lit
control|)
block|{
name|QFileInfo
name|fi
argument_list|(
name|fileInfo
argument_list|(
operator|(
operator|*
name|lit
operator|)
argument_list|)
argument_list|)
decl_stmt|;
name|mkt
operator|<<
literal|" "
operator|<<
name|fi
operator|.
name|path
argument_list|()
operator|<<
name|Option
operator|::
name|dir_sep
operator|<<
name|fi
operator|.
name|baseName
argument_list|()
operator|<<
name|Option
operator|::
name|lex_mod
operator|<<
name|Option
operator|::
name|cpp_ext
operator|.
name|first
argument_list|()
expr_stmt|;
block|}
block|}
name|mkt
operator|<<
literal|"\n"
expr_stmt|;
name|mkt
operator|<<
literal|"preprocess: $(PARSERS) compilers"
operator|<<
name|endl
expr_stmt|;
name|mkt
operator|<<
literal|"clean preprocess_clean: parser_clean compiler_clean"
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|mkt
operator|<<
literal|"parser_clean:"
operator|<<
literal|"\n"
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"YACCSOURCES"
argument_list|)
operator|||
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"LEXSOURCES"
argument_list|)
condition|)
name|mkt
operator|<<
literal|"\t-rm -f $(PARSERS)"
operator|<<
literal|"\n"
expr_stmt|;
name|writeExtraTargets
argument_list|(
name|mkt
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_EXTRA_COMPILERS"
argument_list|)
condition|)
block|{
name|mkt
operator|<<
literal|"compilers:"
expr_stmt|;
specifier|const
name|QStringList
modifier|&
name|compilers
init|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_EXTRA_COMPILERS"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|compiler
init|=
literal|0
init|;
name|compiler
operator|<
name|compilers
operator|.
name|size
argument_list|()
condition|;
operator|++
name|compiler
control|)
block|{
name|QString
name|tmp_out
init|=
name|project
operator|->
name|first
argument_list|(
name|compilers
operator|.
name|at
argument_list|(
name|compiler
argument_list|)
operator|+
literal|".output"
argument_list|)
decl_stmt|;
if|if
condition|(
name|project
operator|->
name|isEmpty
argument_list|(
name|compilers
operator|.
name|at
argument_list|(
name|compiler
argument_list|)
operator|+
literal|".output"
argument_list|)
condition|)
continue|continue;
specifier|const
name|QStringList
modifier|&
name|inputs
init|=
name|project
operator|->
name|values
argument_list|(
name|compilers
operator|.
name|at
argument_list|(
name|compiler
argument_list|)
operator|+
literal|".input"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|input
init|=
literal|0
init|;
name|input
operator|<
name|inputs
operator|.
name|size
argument_list|()
condition|;
operator|++
name|input
control|)
block|{
if|if
condition|(
name|project
operator|->
name|isEmpty
argument_list|(
name|inputs
operator|.
name|at
argument_list|(
name|input
argument_list|)
argument_list|)
condition|)
continue|continue;
specifier|const
name|QStringList
modifier|&
name|files
init|=
name|project
operator|->
name|values
argument_list|(
name|inputs
operator|.
name|at
argument_list|(
name|input
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|file
init|=
literal|0
init|,
name|added
init|=
literal|0
init|;
name|file
operator|<
name|files
operator|.
name|size
argument_list|()
condition|;
operator|++
name|file
control|)
block|{
if|if
condition|(
operator|!
name|verifyExtraCompiler
argument_list|(
name|compilers
operator|.
name|at
argument_list|(
name|compiler
argument_list|)
argument_list|,
name|files
operator|.
name|at
argument_list|(
name|file
argument_list|)
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|added
operator|&&
operator|!
operator|(
name|added
operator|%
literal|3
operator|)
condition|)
name|mkt
operator|<<
literal|"\\\n\t"
expr_stmt|;
operator|++
name|added
expr_stmt|;
specifier|const
name|QString
name|file_name
init|=
name|fileFixify
argument_list|(
name|files
operator|.
name|at
argument_list|(
name|file
argument_list|)
argument_list|,
name|Option
operator|::
name|output_dir
argument_list|,
name|Option
operator|::
name|output_dir
argument_list|)
decl_stmt|;
name|mkt
operator|<<
literal|" "
operator|<<
name|replaceExtraCompilerVariables
argument_list|(
name|tmp_out
argument_list|,
name|file_name
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|mkt
operator|<<
name|endl
expr_stmt|;
name|writeExtraCompilerTargets
argument_list|(
name|mkt
argument_list|)
expr_stmt|;
name|writingUnixMakefileGenerator
operator|=
literal|false
expr_stmt|;
block|}
name|mkt
operator|.
name|flush
argument_list|()
expr_stmt|;
name|mkf
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|mkfile
operator|=
name|fileFixify
argument_list|(
name|mkfile
argument_list|,
name|qmake_getpwd
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|phase_key
init|=
name|keyFor
argument_list|(
literal|"QMAKE_PBX_PREPROCESS_TARGET"
argument_list|)
decl_stmt|;
comment|//        project->values("QMAKE_PBX_BUILDPHASES").append(phase_key);
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PBX_PRESCRIPT_BUILDPHASES"
argument_list|)
operator|.
name|append
argument_list|(
name|phase_key
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"\t\t"
operator|<<
name|phase_key
operator|<<
literal|" = {"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"buildActionMask"
argument_list|,
literal|"2147483647"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"files"
argument_list|,
name|QStringList
argument_list|()
argument_list|,
name|SettingsAsList
argument_list|,
literal|4
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"generatedFileNames"
argument_list|,
name|fixListForOutput
argument_list|(
literal|"QMAKE_PBX_OBJ"
argument_list|)
argument_list|,
name|SettingsAsList
argument_list|,
literal|4
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"isa"
argument_list|,
literal|"PBXShellScriptBuildPhase"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"name"
argument_list|,
literal|"Qt Preprocessors"
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"neededFileNames"
argument_list|,
name|fixListForOutput
argument_list|(
literal|"QMAKE_PBX_OBJ"
argument_list|)
argument_list|,
name|SettingsAsList
argument_list|,
literal|4
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"shellPath"
argument_list|,
literal|"/bin/sh"
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"shellScript"
argument_list|,
name|fixForOutput
argument_list|(
literal|"make -C "
operator|+
name|escapeFilePath
argument_list|(
name|qmake_getpwd
argument_list|()
argument_list|)
operator|+
literal|" -f '"
operator|+
name|escapeFilePath
argument_list|(
name|mkfile
argument_list|)
operator|+
literal|"'"
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
expr_stmt|;
block|}
comment|//SOURCE BUILDPHASE
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_PBX_OBJ"
argument_list|)
condition|)
block|{
name|QString
name|grp
init|=
literal|"Build Sources"
decl_stmt|,
name|key
init|=
name|keyFor
argument_list|(
name|grp
argument_list|)
decl_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PBX_BUILDPHASES"
argument_list|)
operator|.
name|append
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"\t\t"
operator|<<
name|key
operator|<<
literal|" = {"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"buildActionMask"
argument_list|,
literal|"2147483647"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"files"
argument_list|,
name|fixListForOutput
argument_list|(
literal|"QMAKE_PBX_OBJ"
argument_list|)
argument_list|,
name|SettingsAsList
argument_list|,
literal|4
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"isa"
argument_list|,
literal|"PBXSourcesBuildPhase"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"name"
argument_list|,
name|grp
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"staticlib"
argument_list|)
condition|)
block|{
comment|//DUMP LIBRARIES
name|QStringList
modifier|&
name|libdirs
init|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PBX_LIBPATHS"
argument_list|)
decl_stmt|,
modifier|&
name|frameworkdirs
init|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_FRAMEWORKPATH"
argument_list|)
decl_stmt|;
name|QString
name|libs
index|[]
init|=
block|{
literal|"QMAKE_LFLAGS"
block|,
literal|"QMAKE_LIBDIR_FLAGS"
block|,
literal|"QMAKE_FRAMEWORKPATH_FLAGS"
block|,
literal|"QMAKE_LIBS"
block|,
name|QString
argument_list|()
block|}
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
operator|!
name|libs
index|[
name|i
index|]
operator|.
name|isNull
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|tmp
operator|=
name|project
operator|->
name|values
argument_list|(
name|libs
index|[
name|i
index|]
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|tmp
operator|.
name|count
argument_list|()
condition|;
control|)
block|{
name|bool
name|remove
init|=
literal|false
decl_stmt|;
name|QString
name|library
decl_stmt|,
name|name
decl_stmt|,
name|opt
init|=
name|tmp
index|[
name|x
index|]
operator|.
name|trimmed
argument_list|()
decl_stmt|;
if|if
condition|(
name|opt
operator|.
name|length
argument_list|()
operator|>=
literal|2
operator|&&
operator|(
name|opt
index|[
literal|0
index|]
operator|==
literal|'"'
operator|||
name|opt
index|[
literal|0
index|]
operator|==
literal|'\''
operator|)
operator|&&
name|opt
index|[
operator|(
name|int
operator|)
name|opt
operator|.
name|length
argument_list|()
operator|-
literal|1
index|]
operator|==
name|opt
index|[
literal|0
index|]
condition|)
name|opt
operator|=
name|opt
operator|.
name|mid
argument_list|(
literal|1
argument_list|,
name|opt
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|opt
operator|.
name|startsWith
argument_list|(
literal|"-L"
argument_list|)
condition|)
block|{
name|QString
name|r
init|=
name|opt
operator|.
name|right
argument_list|(
name|opt
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
decl_stmt|;
name|fixForOutput
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|libdirs
operator|.
name|append
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
literal|"-prebind"
condition|)
block|{
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_DO_PREBINDING"
argument_list|)
operator|.
name|append
argument_list|(
literal|"TRUE"
argument_list|)
expr_stmt|;
name|remove
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|.
name|startsWith
argument_list|(
literal|"-l"
argument_list|)
condition|)
block|{
name|name
operator|=
name|opt
operator|.
name|right
argument_list|(
name|opt
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
name|QString
name|lib
argument_list|(
literal|"lib"
operator|+
name|name
argument_list|)
decl_stmt|;
for|for
control|(
name|QStringList
operator|::
name|Iterator
name|lit
init|=
name|libdirs
operator|.
name|begin
argument_list|()
init|;
name|lit
operator|!=
name|libdirs
operator|.
name|end
argument_list|()
condition|;
operator|++
name|lit
control|)
block|{
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"link_prl"
argument_list|)
condition|)
block|{
comment|/* This isn't real nice, but it is real useful. This looks in a prl                                for what the library will ultimately be called so we can stick it                                in the ProjectFile. If the prl format ever changes (not likely) then                                this will not really work. However, more concerning is that it will                                encode the version number in the Project file which might be a bad                                things in days to come? --Sam                             */
name|QString
name|lib_file
init|=
operator|(
operator|*
name|lit
operator|)
operator|+
name|Option
operator|::
name|dir_sep
operator|+
name|lib
decl_stmt|;
if|if
condition|(
name|QMakeMetaInfo
operator|::
name|libExists
argument_list|(
name|lib_file
argument_list|)
condition|)
block|{
name|QMakeMetaInfo
name|libinfo
decl_stmt|;
if|if
condition|(
name|libinfo
operator|.
name|readLib
argument_list|(
name|lib_file
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|libinfo
operator|.
name|isEmpty
argument_list|(
literal|"QMAKE_PRL_TARGET"
argument_list|)
condition|)
block|{
name|library
operator|=
operator|(
operator|*
name|lit
operator|)
operator|+
name|Option
operator|::
name|dir_sep
operator|+
name|libinfo
operator|.
name|first
argument_list|(
literal|"QMAKE_PRL_TARGET"
argument_list|)
expr_stmt|;
name|debug_msg
argument_list|(
literal|1
argument_list|,
literal|"pbuilder: Found library (%s) via PRL %s (%s)"
argument_list|,
name|opt
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|lib_file
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|library
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|remove
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|remove
condition|)
block|{
name|QString
name|extns
index|[]
init|=
block|{
literal|".dylib"
block|,
literal|".so"
block|,
literal|".a"
block|,
name|QString
argument_list|()
block|}
decl_stmt|;
for|for
control|(
name|int
name|n
init|=
literal|0
init|;
operator|!
name|remove
operator|&&
operator|!
name|extns
index|[
name|n
index|]
operator|.
name|isNull
argument_list|()
condition|;
name|n
operator|++
control|)
block|{
name|QString
name|tmp
init|=
operator|(
operator|*
name|lit
operator|)
operator|+
name|Option
operator|::
name|dir_sep
operator|+
name|lib
operator|+
name|extns
index|[
name|n
index|]
decl_stmt|;
if|if
condition|(
name|exists
argument_list|(
name|tmp
argument_list|)
condition|)
block|{
name|library
operator|=
name|tmp
expr_stmt|;
name|debug_msg
argument_list|(
literal|1
argument_list|,
literal|"pbuilder: Found library (%s) via %s"
argument_list|,
name|opt
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|library
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|remove
operator|=
literal|true
expr_stmt|;
block|}
block|}
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|opt
operator|.
name|startsWith
argument_list|(
literal|"-F"
argument_list|)
condition|)
block|{
name|QString
name|r
decl_stmt|;
if|if
condition|(
name|opt
operator|.
name|size
argument_list|()
operator|>
literal|2
condition|)
block|{
name|r
operator|=
name|opt
operator|.
name|right
argument_list|(
name|opt
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|x
operator|==
name|tmp
operator|.
name|count
argument_list|()
operator|-
literal|1
condition|)
break|break;
name|r
operator|=
name|tmp
index|[
operator|++
name|x
index|]
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|r
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fixForOutput
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|frameworkdirs
operator|.
name|append
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
literal|"-framework"
condition|)
block|{
if|if
condition|(
name|x
operator|==
name|tmp
operator|.
name|count
argument_list|()
operator|-
literal|1
condition|)
break|break;
specifier|const
name|QString
name|framework
init|=
name|tmp
index|[
name|x
operator|+
literal|1
index|]
decl_stmt|;
name|QStringList
name|fdirs
init|=
name|frameworkdirs
decl_stmt|;
name|fdirs
operator|<<
literal|"/System/Library/Frameworks/"
operator|<<
literal|"/Library/Frameworks/"
expr_stmt|;
for|for
control|(
name|int
name|fdir
init|=
literal|0
init|;
name|fdir
operator|<
name|fdirs
operator|.
name|count
argument_list|()
condition|;
name|fdir
operator|++
control|)
block|{
if|if
condition|(
name|exists
argument_list|(
name|fdirs
index|[
name|fdir
index|]
operator|+
name|QDir
operator|::
name|separator
argument_list|()
operator|+
name|framework
operator|+
literal|".framework"
argument_list|)
condition|)
block|{
name|tmp
operator|.
name|removeAt
argument_list|(
name|x
argument_list|)
expr_stmt|;
name|remove
operator|=
literal|true
expr_stmt|;
name|library
operator|=
name|fdirs
index|[
name|fdir
index|]
operator|+
name|Option
operator|::
name|dir_sep
operator|+
name|framework
operator|+
literal|".framework"
expr_stmt|;
break|break;
block|}
block|}
block|}
elseif|else
if|if
condition|(
name|opt
operator|.
name|left
argument_list|(
literal|1
argument_list|)
operator|!=
literal|"-"
condition|)
block|{
if|if
condition|(
name|exists
argument_list|(
name|opt
argument_list|)
condition|)
block|{
name|remove
operator|=
literal|true
expr_stmt|;
name|library
operator|=
name|opt
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|library
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
specifier|const
name|int
name|slsh
init|=
name|library
operator|.
name|lastIndexOf
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
decl_stmt|;
if|if
condition|(
name|name
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|slsh
operator|!=
operator|-
literal|1
condition|)
name|name
operator|=
name|library
operator|.
name|right
argument_list|(
name|library
operator|.
name|length
argument_list|()
operator|-
name|slsh
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|slsh
operator|!=
operator|-
literal|1
condition|)
block|{
specifier|const
name|QString
name|path
init|=
name|QFileInfo
argument_list|(
name|library
operator|.
name|left
argument_list|(
name|slsh
argument_list|)
argument_list|)
operator|.
name|absoluteFilePath
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|path
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|libdirs
operator|.
name|contains
argument_list|(
name|path
argument_list|)
condition|)
name|libdirs
operator|+=
name|path
expr_stmt|;
block|}
name|library
operator|=
name|fileFixify
argument_list|(
name|library
argument_list|)
expr_stmt|;
name|QString
name|key
init|=
name|keyFor
argument_list|(
name|library
argument_list|)
decl_stmt|;
name|bool
name|is_frmwrk
init|=
operator|(
name|library
operator|.
name|endsWith
argument_list|(
literal|".framework"
argument_list|)
operator|)
decl_stmt|;
name|t
operator|<<
literal|"\t\t"
operator|<<
name|key
operator|<<
literal|" = {"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"isa"
argument_list|,
operator|(
name|is_frmwrk
condition|?
literal|"PBXFrameworkReference"
else|:
literal|"PBXFileReference"
operator|)
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"name"
argument_list|,
name|escapeFilePath
argument_list|(
name|name
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"path"
argument_list|,
name|escapeFilePath
argument_list|(
name|library
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"refType"
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|reftypeForFile
argument_list|(
name|library
argument_list|)
argument_list|)
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PBX_LIBRARIES"
argument_list|)
operator|.
name|append
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|QString
name|build_key
init|=
name|keyFor
argument_list|(
name|library
operator|+
literal|".BUILDABLE"
argument_list|)
decl_stmt|;
name|t
operator|<<
literal|"\t\t"
operator|<<
name|build_key
operator|<<
literal|" = {"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"fileRef"
argument_list|,
name|key
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"isa"
argument_list|,
literal|"PBXBuildFile"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
literal|"settings = {"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PBX_BUILD_LIBRARIES"
argument_list|)
operator|.
name|append
argument_list|(
name|build_key
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|remove
condition|)
name|tmp
operator|.
name|removeAt
argument_list|(
name|x
argument_list|)
expr_stmt|;
else|else
name|x
operator|++
expr_stmt|;
block|}
name|project
operator|->
name|values
argument_list|(
name|libs
index|[
name|i
index|]
argument_list|)
operator|=
name|tmp
expr_stmt|;
block|}
block|}
comment|//SUBLIBS BUILDPHASE (just another makefile)
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"SUBLIBS"
argument_list|)
condition|)
block|{
name|QString
name|mkfile
init|=
name|pbx_dir
operator|+
name|Option
operator|::
name|dir_sep
operator|+
literal|"qt_sublibs.mak"
decl_stmt|;
name|QFile
name|mkf
argument_list|(
name|mkfile
argument_list|)
decl_stmt|;
if|if
condition|(
name|mkf
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
condition|)
block|{
name|writingUnixMakefileGenerator
operator|=
literal|true
expr_stmt|;
name|debug_msg
argument_list|(
literal|1
argument_list|,
literal|"pbuilder: Creating file: %s"
argument_list|,
name|mkfile
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QTextStream
name|mkt
argument_list|(
operator|&
name|mkf
argument_list|)
decl_stmt|;
name|writeHeader
argument_list|(
name|mkt
argument_list|)
expr_stmt|;
name|mkt
operator|<<
literal|"SUBLIBS= "
expr_stmt|;
name|tmp
operator|=
name|project
operator|->
name|values
argument_list|(
literal|"SUBLIBS"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tmp
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
name|t
operator|<<
literal|"tmp/lib"
operator|<<
name|tmp
index|[
name|i
index|]
operator|<<
literal|".a "
expr_stmt|;
name|t
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|mkt
operator|<<
literal|"sublibs: $(SUBLIBS)"
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|tmp
operator|=
name|project
operator|->
name|values
argument_list|(
literal|"SUBLIBS"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tmp
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
name|t
operator|<<
literal|"tmp/lib"
operator|<<
name|tmp
index|[
name|i
index|]
operator|<<
literal|".a"
operator|<<
literal|":\n\t"
operator|<<
name|var
argument_list|(
name|QString
argument_list|(
literal|"MAKELIB"
argument_list|)
operator|+
name|tmp
index|[
name|i
index|]
argument_list|)
operator|<<
name|endl
operator|<<
name|endl
expr_stmt|;
name|mkt
operator|.
name|flush
argument_list|()
expr_stmt|;
name|mkf
operator|.
name|close
argument_list|()
expr_stmt|;
name|writingUnixMakefileGenerator
operator|=
literal|false
expr_stmt|;
block|}
name|QString
name|phase_key
init|=
name|keyFor
argument_list|(
literal|"QMAKE_PBX_SUBLIBS_BUILDPHASE"
argument_list|)
decl_stmt|;
name|mkfile
operator|=
name|fileFixify
argument_list|(
name|mkfile
argument_list|,
name|qmake_getpwd
argument_list|()
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PBX_PRESCRIPT_BUILDPHASES"
argument_list|)
operator|.
name|append
argument_list|(
name|phase_key
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"\t\t"
operator|<<
name|phase_key
operator|<<
literal|" = {"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"buildActionMask"
argument_list|,
literal|"2147483647"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"files"
argument_list|,
name|QStringList
argument_list|()
argument_list|,
name|SettingsAsList
argument_list|,
literal|4
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"generatedFileNames"
argument_list|,
name|QStringList
argument_list|()
argument_list|,
name|SettingsAsList
argument_list|,
literal|4
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"isa"
argument_list|,
literal|"PBXShellScriptBuildPhase"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"name"
argument_list|,
literal|"Qt Sublibs"
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"neededFileNames"
argument_list|,
name|QStringList
argument_list|()
argument_list|,
name|SettingsAsList
argument_list|,
literal|4
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"shellPath"
argument_list|,
literal|"/bin/sh"
argument_list|)
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"shellScript"
argument_list|,
name|fixForOutput
argument_list|(
literal|"make -C "
operator|+
name|escapeFilePath
argument_list|(
name|qmake_getpwd
argument_list|()
argument_list|)
operator|+
literal|" -f '"
operator|+
name|escapeFilePath
argument_list|(
name|mkfile
argument_list|)
operator|+
literal|"'"
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
expr_stmt|;
block|}
comment|//LIBRARY BUILDPHASE
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_PBX_LIBRARIES"
argument_list|)
condition|)
block|{
name|tmp
operator|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PBX_LIBRARIES"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tmp
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QString
name|grp
argument_list|(
literal|"External Frameworks and Libraries"
argument_list|)
decl_stmt|,
name|key
init|=
name|keyFor
argument_list|(
name|grp
argument_list|)
decl_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PBX_GROUPS"
argument_list|)
operator|.
name|append
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"\t\t"
operator|<<
name|key
operator|<<
literal|" = {"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"children"
argument_list|,
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PBX_LIBRARIES"
argument_list|)
argument_list|,
name|SettingsAsList
argument_list|,
literal|4
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"isa"
argument_list|,
literal|"PBXGroup"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"name"
argument_list|,
name|escapeFilePath
argument_list|(
name|grp
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"path"
argument_list|,
name|QStringList
argument_list|()
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"refType"
argument_list|,
literal|"4"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
expr_stmt|;
block|}
block|}
block|{
name|QString
name|grp
argument_list|(
literal|"Frameworks& Libraries"
argument_list|)
decl_stmt|,
name|key
init|=
name|keyFor
argument_list|(
name|grp
argument_list|)
decl_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PBX_BUILDPHASES"
argument_list|)
operator|.
name|append
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"\t\t"
operator|<<
name|key
operator|<<
literal|" = {"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"buildActionMask"
argument_list|,
literal|"2147483647"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"files"
argument_list|,
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PBX_BUILD_LIBRARIES"
argument_list|)
argument_list|,
name|SettingsAsList
argument_list|,
literal|4
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"isa"
argument_list|,
literal|"PBXFrameworksBuildPhase"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"name"
argument_list|,
name|escapeFilePath
argument_list|(
name|grp
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
expr_stmt|;
block|}
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"app_bundle"
argument_list|)
operator|&&
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"app"
condition|)
block|{
comment|//BUNDLE RESOURCES
name|QString
name|grp
argument_list|(
literal|"Bundle Resources"
argument_list|)
decl_stmt|,
name|key
init|=
name|keyFor
argument_list|(
name|grp
argument_list|)
decl_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PBX_BUILDPHASES"
argument_list|)
operator|.
name|append
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"\t\t"
operator|<<
name|key
operator|<<
literal|" = {"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"buildActionMask"
argument_list|,
literal|"2147483647"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
literal|"files = ("
operator|<<
literal|"\n"
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"ICON"
argument_list|)
condition|)
block|{
name|QString
name|icon
init|=
name|project
operator|->
name|first
argument_list|(
literal|"ICON"
argument_list|)
decl_stmt|;
if|if
condition|(
name|icon
operator|.
name|length
argument_list|()
operator|>=
literal|2
operator|&&
operator|(
name|icon
index|[
literal|0
index|]
operator|==
literal|'"'
operator|||
name|icon
index|[
literal|0
index|]
operator|==
literal|'\''
operator|)
operator|&&
name|icon
index|[
operator|(
name|int
operator|)
name|icon
operator|.
name|length
argument_list|()
operator|-
literal|1
index|]
operator|==
name|icon
index|[
literal|0
index|]
condition|)
name|icon
operator|=
name|icon
operator|.
name|mid
argument_list|(
literal|1
argument_list|,
name|icon
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"\t\t\t\t"
operator|<<
name|keyFor
argument_list|(
name|icon
operator|+
literal|".BUILDABLE"
argument_list|)
operator|<<
literal|",\n"
expr_stmt|;
block|}
name|t
operator|<<
literal|"\t\t\t"
operator|<<
literal|");"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"isa"
argument_list|,
literal|"PBXResourcesBuildPhase"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"name"
argument_list|,
name|escapeFilePath
argument_list|(
name|grp
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
expr_stmt|;
block|}
block|{
comment|//INSTALL BUILDPHASE (copy)
name|QString
name|phase_key
init|=
name|keyFor
argument_list|(
literal|"QMAKE_PBX_TARGET_COPY_PHASE"
argument_list|)
decl_stmt|;
name|QString
name|destDir
init|=
name|Option
operator|::
name|output_dir
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_ORIG_DESTDIR"
argument_list|)
condition|)
name|destDir
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_ORIG_DESTDIR"
argument_list|)
expr_stmt|;
name|destDir
operator|=
name|fixForOutput
argument_list|(
name|destDir
argument_list|)
expr_stmt|;
name|destDir
operator|=
name|fileInfo
argument_list|(
name|Option
operator|::
name|fixPathToLocalOS
argument_list|(
name|destDir
argument_list|)
argument_list|)
operator|.
name|absoluteFilePath
argument_list|()
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PBX_PRESCRIPT_BUILDPHASES"
argument_list|)
operator|.
name|append
argument_list|(
name|phase_key
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"\t\t"
operator|<<
name|phase_key
operator|<<
literal|" = {\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"name"
argument_list|,
literal|"Project Copy"
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"buildActionMask"
argument_list|,
literal|"2147483647"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"dstPath"
argument_list|,
name|escapeFilePath
argument_list|(
name|destDir
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"dstSubfolderSpec"
argument_list|,
literal|"0"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"files"
argument_list|,
name|keyFor
argument_list|(
literal|"QMAKE_PBX_TARGET_COPY_FILE"
argument_list|)
argument_list|,
name|SettingsAsList
argument_list|,
literal|4
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"isa"
argument_list|,
literal|"PBXCopyFilesBuildPhase"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"runOnlyForDeploymentPostprocessing"
argument_list|,
literal|"0"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t"
operator|<<
literal|"};\n"
operator|<<
literal|"\t\t"
operator|<<
name|keyFor
argument_list|(
literal|"QMAKE_PBX_TARGET_COPY_FILE"
argument_list|)
operator|<<
literal|" = {\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"fileRef"
argument_list|,
name|keyFor
argument_list|(
name|pbx_dir
operator|+
literal|"QMAKE_PBX_REFERENCE"
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"isa"
argument_list|,
literal|"PBXBuildFile"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
literal|"settings = {\n"
operator|<<
literal|"\t\t\t"
operator|<<
literal|"};\n"
operator|<<
literal|"\t\t"
operator|<<
literal|"};\n"
expr_stmt|;
block|}
comment|//BUNDLE_DATA BUILDPHASE (copy)
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_BUNDLE_DATA"
argument_list|)
condition|)
block|{
name|QStringList
name|bundle_file_refs
decl_stmt|;
comment|//all bundle data
specifier|const
name|QStringList
modifier|&
name|bundle_data
init|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_BUNDLE_DATA"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bundle_data
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QStringList
name|pbx_files
decl_stmt|;
comment|//all files
specifier|const
name|QStringList
modifier|&
name|files
init|=
name|project
operator|->
name|values
argument_list|(
name|bundle_data
index|[
name|i
index|]
operator|+
literal|".files"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|file
init|=
literal|0
init|;
name|file
operator|<
name|files
operator|.
name|count
argument_list|()
condition|;
name|file
operator|++
control|)
block|{
name|QString
name|file_ref_key
init|=
name|keyFor
argument_list|(
literal|"QMAKE_PBX_BUNDLE_COPY_FILE_REF."
operator|+
name|bundle_data
index|[
name|i
index|]
operator|+
literal|"-"
operator|+
name|files
index|[
name|file
index|]
argument_list|)
decl_stmt|;
name|bundle_file_refs
operator|+=
name|file_ref_key
expr_stmt|;
name|t
operator|<<
literal|"\t\t"
operator|<<
name|file_ref_key
operator|<<
literal|" = {"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"isa"
argument_list|,
literal|"PBXFileReference"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"path"
argument_list|,
name|escapeFilePath
argument_list|(
name|files
index|[
name|file
index|]
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"refType"
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|reftypeForFile
argument_list|(
name|files
index|[
name|file
index|]
argument_list|)
argument_list|)
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
expr_stmt|;
name|QString
name|copy_file_key
init|=
name|keyFor
argument_list|(
literal|"QMAKE_PBX_BUNDLE_COPY_FILE."
operator|+
name|bundle_data
index|[
name|i
index|]
operator|+
literal|"-"
operator|+
name|files
index|[
name|file
index|]
argument_list|)
decl_stmt|;
name|pbx_files
operator|+=
name|copy_file_key
expr_stmt|;
name|t
operator|<<
literal|"\t\t"
operator|<<
name|copy_file_key
operator|<<
literal|" = {\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"fileRef"
argument_list|,
name|file_ref_key
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"isa"
argument_list|,
literal|"PBXBuildFile"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
literal|"settings = {\n"
operator|<<
literal|"\t\t\t"
operator|<<
literal|"}"
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t"
operator|<<
literal|"}"
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
block|}
comment|//the phase
name|QString
name|phase_key
init|=
name|keyFor
argument_list|(
literal|"QMAKE_PBX_BUNDLE_COPY."
operator|+
name|bundle_data
index|[
name|i
index|]
argument_list|)
decl_stmt|;
name|QString
name|path
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
name|bundle_data
index|[
name|i
index|]
operator|+
literal|".version"
argument_list|)
condition|)
block|{
comment|//###
block|}
name|path
operator|+=
name|project
operator|->
name|first
argument_list|(
name|bundle_data
index|[
name|i
index|]
operator|+
literal|".path"
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PBX_PRESCRIPT_BUILDPHASES"
argument_list|)
operator|.
name|append
argument_list|(
name|phase_key
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"\t\t"
operator|<<
name|phase_key
operator|<<
literal|" = {\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"name"
argument_list|,
literal|"Bundle Copy ["
operator|+
name|bundle_data
index|[
name|i
index|]
operator|+
literal|"]"
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"buildActionMask"
argument_list|,
literal|"2147483647"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"dstPath"
argument_list|,
name|escapeFilePath
argument_list|(
name|path
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"dstSubfolderSpec"
argument_list|,
literal|"1"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"files"
argument_list|,
name|pbx_files
argument_list|,
name|SettingsAsList
argument_list|,
literal|4
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"isa"
argument_list|,
literal|"PBXCopyFilesBuildPhase"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"runOnlyForDeploymentPostprocessing"
argument_list|,
literal|"0"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t"
operator|<<
literal|"}"
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
block|}
name|QString
name|bundle_copy_key
init|=
name|keyFor
argument_list|(
literal|"QMAKE_PBX_BUNDLE_COPY"
argument_list|)
decl_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PBX_GROUPS"
argument_list|)
operator|.
name|append
argument_list|(
name|bundle_copy_key
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"\t\t"
operator|<<
name|bundle_copy_key
operator|<<
literal|" = {"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"children"
argument_list|,
name|bundle_file_refs
argument_list|,
name|SettingsAsList
argument_list|,
literal|4
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"isa"
argument_list|,
literal|"PBXGroup"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"name"
argument_list|,
literal|"Source [bundle data]"
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"path"
argument_list|,
name|QStringList
argument_list|()
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"refType"
argument_list|,
literal|"4"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
expr_stmt|;
block|}
if|if
condition|(
comment|/*pbVersion>= 38&&*/
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_PBX_PRESCRIPT_BUILDPHASES"
argument_list|)
operator|&&
literal|0
condition|)
block|{
comment|// build reference
name|t
operator|<<
literal|"\t\t"
operator|<<
name|keyFor
argument_list|(
literal|"QMAKE_PBX_PRESCRIPT_BUILDREFERENCE"
argument_list|)
operator|<<
literal|" = {"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"includeInIndex"
argument_list|,
literal|"0"
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"isa"
argument_list|,
literal|"PBXFileReference"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"path"
argument_list|,
literal|"preprocessor.out"
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"refType"
argument_list|,
literal|"3"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"sourceTree"
argument_list|,
literal|"BUILT_PRODUCTS_DIR"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PBX_PRODUCTS"
argument_list|)
operator|.
name|append
argument_list|(
name|keyFor
argument_list|(
literal|"QMAKE_PBX_PRESCRIPTS_BUILDREFERENCE"
argument_list|)
argument_list|)
expr_stmt|;
comment|//build phase
name|t
operator|<<
literal|"\t\t"
operator|<<
name|keyFor
argument_list|(
literal|"QMAKE_PBX_PRESCRIPTS_BUILDPHASE"
argument_list|)
operator|<<
literal|" = {"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"buildPhases"
argument_list|,
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PBX_PRESCRIPT_BUILDPHASES"
argument_list|)
argument_list|,
name|SettingsAsList
argument_list|,
literal|4
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"buildRules"
argument_list|,
name|QStringList
argument_list|()
argument_list|,
name|SettingsAsList
argument_list|,
literal|4
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"buildSettings"
argument_list|,
name|QStringList
argument_list|()
argument_list|,
name|SettingsAsList
argument_list|,
literal|4
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"dependencies"
argument_list|,
name|QStringList
argument_list|()
argument_list|,
name|SettingsAsList
argument_list|,
literal|4
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"isa"
argument_list|,
literal|"PBXNativeTarget"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"name"
argument_list|,
literal|"Qt Preprocessor Steps"
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"productName"
argument_list|,
literal|"Qt Preprocessor Steps"
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"productReference"
argument_list|,
name|keyFor
argument_list|(
literal|"QMAKE_PBX_PRESCRIPTS_BUILDREFERENCE"
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_PBX_PRODUCT_TYPE"
argument_list|)
condition|)
name|t
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"productType"
argument_list|,
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_PBX_PRODUCT_TYPE"
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
else|else
name|t
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"productType"
argument_list|,
literal|"com.apple.product-type.tool"
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
name|t
operator|<<
literal|"\t\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
expr_stmt|;
comment|//dependency
name|t
operator|<<
literal|"\t\t"
operator|<<
name|keyFor
argument_list|(
literal|"QMAKE_PBX_PRESCRIPTS_DEPENDENCY"
argument_list|)
operator|<<
literal|" = {"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"isa"
argument_list|,
literal|"PBXTargetDependency"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"target"
argument_list|,
name|keyFor
argument_list|(
literal|"QMAKE_PBX_PRESCRIPTS_BUILDPHASE"
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PBX_TARGET_DEPENDS"
argument_list|)
operator|.
name|append
argument_list|(
name|keyFor
argument_list|(
literal|"QMAKE_PBX_PRESCRIPTS_DEPENDENCY"
argument_list|)
argument_list|)
expr_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PBX_PRESCRIPT_BUILDPHASES"
argument_list|)
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|//these are already consumed above
block|}
comment|//DUMP EVERYTHING THAT TIES THE ABOVE TOGETHER
comment|//ROOT_GROUP
name|t
operator|<<
literal|"\t\t"
operator|<<
name|keyFor
argument_list|(
literal|"QMAKE_PBX_ROOT_GROUP"
argument_list|)
operator|<<
literal|" = {"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"children"
argument_list|,
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PBX_GROUPS"
argument_list|)
argument_list|,
name|SettingsAsList
argument_list|,
literal|4
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"isa"
argument_list|,
literal|"PBXGroup"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"name"
argument_list|,
name|escapeFilePath
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_ORIG_TARGET"
argument_list|)
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"path"
argument_list|,
name|QStringList
argument_list|()
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"refType"
argument_list|,
literal|"4"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
expr_stmt|;
comment|//REFERENCE
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PBX_PRODUCTS"
argument_list|)
operator|.
name|append
argument_list|(
name|keyFor
argument_list|(
name|pbx_dir
operator|+
literal|"QMAKE_PBX_REFERENCE"
argument_list|)
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"\t\t"
operator|<<
name|keyFor
argument_list|(
name|pbx_dir
operator|+
literal|"QMAKE_PBX_REFERENCE"
argument_list|)
operator|<<
literal|" = {"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"isa"
argument_list|,
literal|"PBXFileReference"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"app"
condition|)
block|{
name|QString
name|targ
init|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_ORIG_TARGET"
argument_list|)
decl_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"bundle"
argument_list|)
operator|&&
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_BUNDLE_EXTENSION"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_BUNDLE_NAME"
argument_list|)
condition|)
name|targ
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_BUNDLE_NAME"
argument_list|)
expr_stmt|;
name|targ
operator|+=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_BUNDLE_EXTENSION"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_PBX_BUNDLE_TYPE"
argument_list|)
condition|)
name|t
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"explicitFileType"
argument_list|,
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_PBX_BUNDLE_TYPE"
argument_list|)
argument_list|)
operator|+
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"app_bundle"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_APPLICATION_BUNDLE_NAME"
argument_list|)
condition|)
name|targ
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_APPLICATION_BUNDLE_NAME"
argument_list|)
expr_stmt|;
name|targ
operator|+=
literal|".app"
expr_stmt|;
name|t
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"explicitFileType"
argument_list|,
literal|"wrapper.application"
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
block|}
else|else
block|{
name|t
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"explicitFileType"
argument_list|,
literal|"wrapper.executable"
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
block|}
name|QString
name|app
init|=
operator|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"DESTDIR"
argument_list|)
condition|?
name|project
operator|->
name|first
argument_list|(
literal|"DESTDIR"
argument_list|)
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_ORIG_TARGET"
argument_list|)
else|:
name|qmake_getpwd
argument_list|()
operator|)
operator|+
name|Option
operator|::
name|dir_sep
operator|+
name|targ
decl_stmt|;
name|t
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"path"
argument_list|,
name|escapeFilePath
argument_list|(
name|targ
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
block|}
else|else
block|{
name|QString
name|lib
init|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_ORIG_TARGET"
argument_list|)
decl_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"staticlib"
argument_list|)
condition|)
block|{
name|lib
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"TARGET"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"lib_bundle"
argument_list|)
condition|)
block|{
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"plugin"
argument_list|)
condition|)
name|lib
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"TARGET"
argument_list|)
expr_stmt|;
else|else
name|lib
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"TARGET_"
argument_list|)
expr_stmt|;
block|}
name|int
name|slsh
init|=
name|lib
operator|.
name|lastIndexOf
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|)
decl_stmt|;
if|if
condition|(
name|slsh
operator|!=
operator|-
literal|1
condition|)
name|lib
operator|=
name|lib
operator|.
name|right
argument_list|(
name|lib
operator|.
name|length
argument_list|()
operator|-
name|slsh
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"bundle"
argument_list|)
operator|&&
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_BUNDLE_EXTENSION"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_BUNDLE_NAME"
argument_list|)
condition|)
name|lib
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_BUNDLE_NAME"
argument_list|)
expr_stmt|;
name|lib
operator|+=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_BUNDLE_EXTENSION"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_PBX_BUNDLE_TYPE"
argument_list|)
condition|)
name|t
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"explicitFileType"
argument_list|,
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_PBX_BUNDLE_TYPE"
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"staticlib"
argument_list|)
operator|&&
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"lib_bundle"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_FRAMEWORK_BUNDLE_NAME"
argument_list|)
condition|)
name|lib
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_FRAMEWORK_BUNDLE_NAME"
argument_list|)
expr_stmt|;
name|lib
operator|+=
literal|".framework"
expr_stmt|;
name|t
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"explicitFileType"
argument_list|,
literal|"wrapper.framework"
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
block|}
else|else
block|{
name|t
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"explicitFileType"
argument_list|,
literal|"compiled.mach-o.dylib"
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
block|}
name|t
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"path"
argument_list|,
name|escapeFilePath
argument_list|(
name|lib
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
block|}
name|t
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"refType"
argument_list|,
literal|"3"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"sourceTree"
argument_list|,
literal|"BUILT_PRODUCTS_DIR"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
expr_stmt|;
block|{
comment|//Products group
name|QString
name|grp
argument_list|(
literal|"Products"
argument_list|)
decl_stmt|,
name|key
init|=
name|keyFor
argument_list|(
name|grp
argument_list|)
decl_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PBX_GROUPS"
argument_list|)
operator|.
name|append
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"\t\t"
operator|<<
name|key
operator|<<
literal|" = {"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"children"
argument_list|,
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PBX_PRODUCTS"
argument_list|)
argument_list|,
name|SettingsAsList
argument_list|,
literal|4
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"isa"
argument_list|,
literal|"PBXGroup"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"name"
argument_list|,
literal|"Products"
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"refType"
argument_list|,
literal|"4"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
expr_stmt|;
block|}
comment|//TARGET
name|QString
name|target_key
init|=
name|keyFor
argument_list|(
name|pbx_dir
operator|+
literal|"QMAKE_PBX_TARGET"
argument_list|)
decl_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PBX_TARGETS"
argument_list|)
operator|.
name|append
argument_list|(
name|target_key
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"\t\t"
operator|<<
name|target_key
operator|<<
literal|" = {"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"buildPhases"
argument_list|,
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PBX_PRESCRIPT_BUILDPHASES"
argument_list|)
operator|+
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PBX_BUILDPHASES"
argument_list|)
argument_list|,
name|SettingsAsList
argument_list|,
literal|4
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
literal|"buildSettings = {"
operator|<<
literal|"\n"
expr_stmt|;
name|QString
name|cCompiler
init|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_CC"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|cCompiler
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|t
operator|<<
literal|"\t\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"CC"
argument_list|,
name|fixForOutput
argument_list|(
name|findProgram
argument_list|(
name|cCompiler
argument_list|)
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
block|}
name|cCompiler
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_CXX"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|cCompiler
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|t
operator|<<
literal|"\t\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"CPLUSPLUS"
argument_list|,
name|fixForOutput
argument_list|(
name|findProgram
argument_list|(
name|cCompiler
argument_list|)
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
block|}
name|t
operator|<<
literal|"\t\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"HEADER_SEARCH_PATHS"
argument_list|,
name|fixListForOutput
argument_list|(
literal|"INCLUDEPATH"
argument_list|)
operator|+
name|QStringList
argument_list|(
name|fixForOutput
argument_list|(
name|specdir
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|SettingsAsList
argument_list|,
literal|5
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"LIBRARY_SEARCH_PATHS"
argument_list|,
name|fixListForOutput
argument_list|(
literal|"QMAKE_PBX_LIBPATHS"
argument_list|)
argument_list|,
name|SettingsAsList
argument_list|,
literal|5
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"OPTIMIZATION_CFLAGS"
argument_list|,
name|QStringList
argument_list|()
argument_list|,
name|SettingsAsList
argument_list|,
literal|5
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
block|{
name|QStringList
name|cflags
init|=
name|fixListForOutput
argument_list|(
literal|"QMAKE_CFLAGS"
argument_list|)
decl_stmt|;
specifier|const
name|QStringList
modifier|&
name|prl_defines
init|=
name|project
operator|->
name|values
argument_list|(
literal|"PRL_EXPORT_DEFINES"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|prl_defines
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|cflags
operator|+=
literal|"-D"
operator|+
name|prl_defines
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
specifier|const
name|QStringList
modifier|&
name|defines
init|=
name|project
operator|->
name|values
argument_list|(
literal|"DEFINES"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|defines
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|cflags
operator|+=
literal|"-D"
operator|+
name|defines
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"\t\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"OTHER_CFLAGS"
argument_list|,
name|cflags
argument_list|,
name|SettingsAsList
argument_list|,
literal|5
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
block|}
block|{
name|QStringList
name|cxxflags
init|=
name|fixListForOutput
argument_list|(
literal|"QMAKE_CXXFLAGS"
argument_list|)
decl_stmt|;
specifier|const
name|QStringList
modifier|&
name|prl_defines
init|=
name|project
operator|->
name|values
argument_list|(
literal|"PRL_EXPORT_DEFINES"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|prl_defines
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|cxxflags
operator|+=
literal|"-D"
operator|+
name|prl_defines
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
specifier|const
name|QStringList
modifier|&
name|defines
init|=
name|project
operator|->
name|values
argument_list|(
literal|"DEFINES"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|defines
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|cxxflags
operator|+=
literal|"-D"
operator|+
name|defines
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"\t\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"OTHER_CPLUSPLUSFLAGS"
argument_list|,
name|cxxflags
argument_list|,
name|SettingsAsList
argument_list|,
literal|5
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
block|}
name|t
operator|<<
literal|"\t\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"LEXFLAGS"
argument_list|,
name|fixListForOutput
argument_list|(
literal|"QMAKE_LEXFLAGS"
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"YACCFLAGS"
argument_list|,
name|fixListForOutput
argument_list|(
literal|"QMAKE_YACCFLAGS"
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"OTHER_REZFLAGS"
argument_list|,
name|QStringList
argument_list|()
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"SECTORDER_FLAGS"
argument_list|,
name|QStringList
argument_list|()
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"WARNING_CFLAGS"
argument_list|,
name|QStringList
argument_list|()
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"PREBINDING"
argument_list|,
name|QStringList
argument_list|(
operator|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_DO_PREBINDING"
argument_list|)
condition|?
literal|"NO"
else|:
literal|"YES"
operator|)
argument_list|)
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"PRECOMPILED_HEADER"
argument_list|)
condition|)
block|{
if|if
condition|(
name|pbVersion
operator|>=
literal|38
condition|)
block|{
name|t
operator|<<
literal|"\t\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"GCC_PRECOMPILE_PREFIX_HEADER"
argument_list|,
literal|"YES"
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"GCC_PREFIX_HEADER"
argument_list|,
name|escapeFilePath
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"PRECOMPILED_HEADER"
argument_list|)
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
block|}
else|else
block|{
name|t
operator|<<
literal|"\t\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"PRECOMPILE_PREFIX_HEADER"
argument_list|,
literal|"YES"
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"PREFIX_HEADER"
argument_list|,
name|escapeFilePath
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"PRECOMPILED_HEADER"
argument_list|)
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|(
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"app"
operator|&&
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"app_bundle"
argument_list|)
operator|)
operator|||
operator|(
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"lib"
operator|&&
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"staticlib"
argument_list|)
operator|&&
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"lib_bundle"
argument_list|)
operator|)
condition|)
block|{
name|QString
name|plist
init|=
name|fileFixify
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_INFO_PLIST"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|plist
operator|.
name|isEmpty
argument_list|()
condition|)
name|plist
operator|=
name|specdir
argument_list|()
operator|+
name|QDir
operator|::
name|separator
argument_list|()
operator|+
literal|"Info.plist."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
expr_stmt|;
if|if
condition|(
name|exists
argument_list|(
name|plist
argument_list|)
condition|)
block|{
name|QFile
name|plist_in_file
argument_list|(
name|plist
argument_list|)
decl_stmt|;
if|if
condition|(
name|plist_in_file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|QTextStream
name|plist_in
argument_list|(
operator|&
name|plist_in_file
argument_list|)
decl_stmt|;
name|QString
name|plist_in_text
init|=
name|plist_in
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|plist_in_text
operator|=
name|plist_in_text
operator|.
name|replace
argument_list|(
literal|"@ICON@"
argument_list|,
operator|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"ICON"
argument_list|)
condition|?
name|QString
argument_list|(
literal|""
argument_list|)
else|:
name|project
operator|->
name|first
argument_list|(
literal|"ICON"
argument_list|)
operator|.
name|section
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|,
operator|-
literal|1
argument_list|)
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"app"
condition|)
block|{
name|plist_in_text
operator|=
name|plist_in_text
operator|.
name|replace
argument_list|(
literal|"@EXECUTABLE@"
argument_list|,
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_ORIG_TARGET"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|plist_in_text
operator|=
name|plist_in_text
operator|.
name|replace
argument_list|(
literal|"@LIBRARY@"
argument_list|,
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_ORIG_TARGET"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|project
operator|->
name|values
argument_list|(
literal|"VERSION"
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|plist_in_text
operator|=
name|plist_in_text
operator|.
name|replace
argument_list|(
literal|"@SHORT_VERSION@"
argument_list|,
name|project
operator|->
name|first
argument_list|(
literal|"VER_MAJ"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"VER_MIN"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|plist_in_text
operator|=
name|plist_in_text
operator|.
name|replace
argument_list|(
literal|"@TYPEINFO@"
argument_list|,
operator|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_PKGINFO_TYPEINFO"
argument_list|)
condition|?
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"????"
argument_list|)
else|:
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_PKGINFO_TYPEINFO"
argument_list|)
operator|.
name|left
argument_list|(
literal|4
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|QFile
name|plist_out_file
argument_list|(
literal|"Info.plist"
argument_list|)
decl_stmt|;
if|if
condition|(
name|plist_out_file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
condition|)
block|{
name|QTextStream
name|plist_out
argument_list|(
operator|&
name|plist_out_file
argument_list|)
decl_stmt|;
name|plist_out
operator|<<
name|plist_in_text
expr_stmt|;
name|t
operator|<<
literal|"\t\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"INFOPLIST_FILE"
argument_list|,
literal|"Info.plist"
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
block|}
block|}
block|}
block|}
if|#
directive|if
literal|1
name|t
operator|<<
literal|"\t\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"BUILD_ROOT"
argument_list|,
name|escapeFilePath
argument_list|(
name|qmake_getpwd
argument_list|()
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"staticlib"
argument_list|)
condition|)
block|{
name|t
operator|<<
literal|"\t\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"OTHER_LDFLAGS"
argument_list|,
name|fixListForOutput
argument_list|(
literal|"SUBLIBS"
argument_list|)
operator|+
name|fixListForOutput
argument_list|(
literal|"QMAKE_LFLAGS"
argument_list|)
operator|+
name|fixListForOutput
argument_list|(
literal|"QMAKE_LIBDIR_FLAGS"
argument_list|)
operator|+
name|fixListForOutput
argument_list|(
literal|"QMAKE_FRAMEWORKPATH_FLAGS"
argument_list|)
operator|+
name|fixListForOutput
argument_list|(
literal|"QMAKE_LIBS"
argument_list|)
argument_list|,
name|SettingsAsList
argument_list|,
literal|6
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"DESTDIR"
argument_list|)
condition|)
block|{
name|QString
name|dir
init|=
name|project
operator|->
name|first
argument_list|(
literal|"DESTDIR"
argument_list|)
decl_stmt|;
if|if
condition|(
name|QDir
operator|::
name|isRelativePath
argument_list|(
name|dir
argument_list|)
condition|)
name|dir
operator|.
name|prepend
argument_list|(
name|qmake_getpwd
argument_list|()
operator|+
name|Option
operator|::
name|dir_sep
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"\t\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"INSTALL_DIR"
argument_list|,
name|dir
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
block|}
if|if
condition|(
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"lib"
condition|)
block|{
name|t
operator|<<
literal|"\t\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"INSTALL_PATH"
argument_list|,
name|QStringList
argument_list|()
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"VERSION"
argument_list|)
operator|&&
name|project
operator|->
name|first
argument_list|(
literal|"VERSION"
argument_list|)
operator|!=
literal|"0.0.0"
condition|)
block|{
name|t
operator|<<
literal|"\t\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"DYLIB_CURRENT_VERSION"
argument_list|,
name|project
operator|->
name|first
argument_list|(
literal|"VER_MAJ"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"VER_MIN"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"VER_PAT"
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"COMPAT_VERSION"
argument_list|)
condition|)
name|t
operator|<<
literal|"\t\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"DYLIB_COMPATIBILITY_VERSION"
argument_list|,
name|project
operator|->
name|first
argument_list|(
literal|"VER_MAJ"
argument_list|)
operator|+
literal|"."
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"VER_MIN"
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"lib"
operator|&&
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"staticlib"
argument_list|)
operator|&&
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"lib_bundle"
argument_list|)
condition|)
name|t
operator|<<
literal|"\t\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"FRAMEWORK_VERSION"
argument_list|,
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_FRAMEWORK_VERSION"
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"COMPAT_FRAMEWORKPATH"
argument_list|)
condition|)
name|t
operator|<<
literal|"\t\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"FRAMEWORK_SEARCH_PATHS"
argument_list|,
name|fixListForOutput
argument_list|(
literal|"QMAKE_FRAMEWORKPATH"
argument_list|)
argument_list|,
name|SettingsAsList
argument_list|,
literal|5
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"COMPAT_VERSION"
argument_list|)
condition|)
name|t
operator|<<
literal|"\t\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"DYLIB_COMPATIBILITY_VERSION"
argument_list|,
name|project
operator|->
name|first
argument_list|(
literal|"COMPAT_VERSION"
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_MACOSX_DEPLOYMENT_TARGET"
argument_list|)
condition|)
name|t
operator|<<
literal|"\t\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"MACOSX_DEPLOYMENT_TARGET"
argument_list|,
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_MACOSX_DEPLOYMENT_TARGET"
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
if|if
condition|(
name|pbVersion
operator|>=
literal|38
condition|)
block|{
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"OBJECTS_DIR"
argument_list|)
condition|)
name|t
operator|<<
literal|"\t\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"OBJROOT"
argument_list|,
name|fixForOutput
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"OBJECTS_DIR"
argument_list|)
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
block|}
if|#
directive|if
literal|0
block|if(!project->isEmpty("DESTDIR"))         t<< "\t\t\t\t"<< writeSettings("SYMROOT", fixForOutput(project->first("DESTDIR")))<< ";"<< "\n";     else         t<< "\t\t\t\t"<< writeSettings("SYMROOT", fixForOutput(qmake_getpwd()))<< ";"<< "\n";
endif|#
directive|endif
block|{
name|QStringList
name|archs
decl_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"x86"
argument_list|)
condition|)
name|archs
operator|+=
literal|"i386"
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"ppc"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|archs
operator|.
name|isEmpty
argument_list|()
condition|)
name|archs
operator|+=
literal|" "
expr_stmt|;
name|archs
operator|+=
literal|"ppc"
expr_stmt|;
block|}
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"ppc64"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|archs
operator|.
name|isEmpty
argument_list|()
condition|)
name|archs
operator|+=
literal|" "
expr_stmt|;
name|archs
operator|+=
literal|"ppc64"
expr_stmt|;
block|}
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"x86_64"
argument_list|)
condition|)
block|{
if|if
condition|(
operator|!
name|archs
operator|.
name|isEmpty
argument_list|()
condition|)
name|archs
operator|+=
literal|" "
expr_stmt|;
name|archs
operator|+=
literal|"x86_64"
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|archs
operator|.
name|isEmpty
argument_list|()
condition|)
name|t
operator|<<
literal|"\t\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"ARCHS"
argument_list|,
name|archs
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
block|}
if|if
condition|(
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"app"
condition|)
block|{
if|if
condition|(
name|pbVersion
operator|<
literal|38
operator|&&
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"app_bundle"
argument_list|)
condition|)
name|t
operator|<<
literal|"\t\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"WRAPPER_SUFFIX"
argument_list|,
literal|"app"
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
name|t
operator|<<
literal|"\t\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"PRODUCT_NAME"
argument_list|,
name|fixForOutput
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_ORIG_TARGET"
argument_list|)
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"plugin"
argument_list|)
operator|&&
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"staticlib"
argument_list|)
condition|)
block|{
name|t
operator|<<
literal|"\t\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"LIBRARY_STYLE"
argument_list|,
literal|"STATIC"
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
block|}
else|else
block|{
name|t
operator|<<
literal|"\t\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"LIBRARY_STYLE"
argument_list|,
literal|"DYNAMIC"
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
block|}
name|QString
name|lib
init|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_ORIG_TARGET"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"lib_bundle"
argument_list|)
operator|&&
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"staticlib"
argument_list|)
condition|)
name|lib
operator|.
name|prepend
argument_list|(
literal|"lib"
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"\t\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"PRODUCT_NAME"
argument_list|,
name|escapeFilePath
argument_list|(
name|lib
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
block|}
name|tmp
operator|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PBX_VARS"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|tmp
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QString
name|var
init|=
name|tmp
index|[
name|i
index|]
decl_stmt|,
name|val
init|=
name|qgetenv
argument_list|(
name|var
operator|.
name|toLatin1
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|.
name|isEmpty
argument_list|()
operator|&&
name|var
operator|==
literal|"TB"
condition|)
name|val
operator|=
literal|"/usr/bin/"
expr_stmt|;
name|t
operator|<<
literal|"\t\t\t\t"
operator|<<
name|writeSettings
argument_list|(
name|var
argument_list|,
name|escapeFilePath
argument_list|(
name|val
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
block|}
name|t
operator|<<
literal|"\t\t\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
literal|"conditionalBuildSettings = {"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"dependencies"
argument_list|,
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PBX_TARGET_DEPENDS"
argument_list|)
argument_list|,
name|SettingsAsList
argument_list|,
literal|4
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"productReference"
argument_list|,
name|keyFor
argument_list|(
name|pbx_dir
operator|+
literal|"QMAKE_PBX_REFERENCE"
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"shouldUseHeadermap"
argument_list|,
literal|"1"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
if|if
condition|(
name|pbVersion
operator|>=
literal|38
condition|)
name|t
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"isa"
argument_list|,
literal|"PBXNativeTarget"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"app"
condition|)
block|{
if|if
condition|(
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"app_bundle"
argument_list|)
condition|)
block|{
if|if
condition|(
name|pbVersion
operator|>=
literal|38
condition|)
block|{
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_PBX_PRODUCT_TYPE"
argument_list|)
condition|)
name|t
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"productType"
argument_list|,
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_PBX_PRODUCT_TYPE"
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
else|else
name|t
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"productType"
argument_list|,
literal|"com.apple.product-type.tool"
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
block|}
else|else
block|{
name|t
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"isa"
argument_list|,
literal|"PBXToolTarget"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
name|pbVersion
operator|>=
literal|38
condition|)
block|{
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_PBX_PRODUCT_TYPE"
argument_list|)
condition|)
name|t
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"productType"
argument_list|,
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_PBX_PRODUCT_TYPE"
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
else|else
name|t
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"productType"
argument_list|,
literal|"com.apple.product-type.application"
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
block|}
else|else
block|{
name|t
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"isa"
argument_list|,
literal|"PBXApplicationTarget"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
block|}
name|t
operator|<<
literal|"\t\t\t"
operator|<<
literal|"productSettingsXML = \""
expr_stmt|;
name|bool
name|read_plist
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|exists
argument_list|(
literal|"Info.plist"
argument_list|)
condition|)
block|{
name|QFile
name|plist
argument_list|(
literal|"Info.plist"
argument_list|)
decl_stmt|;
if|if
condition|(
name|plist
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|read_plist
operator|=
literal|true
expr_stmt|;
name|QTextStream
name|stream
argument_list|(
operator|&
name|plist
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|stream
operator|.
name|atEnd
argument_list|()
condition|)
name|t
operator|<<
name|stream
operator|.
name|readLine
argument_list|()
operator|.
name|replace
argument_list|(
literal|'"'
argument_list|,
literal|"\\\""
argument_list|)
operator|<<
name|endl
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|read_plist
condition|)
block|{
name|t
operator|<<
literal|"<?xml version="
operator|<<
literal|"\\\"1.0\\\" encoding="
operator|<<
literal|"\\\"UTF-8\\\""
operator|<<
literal|"?>"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t\t"
operator|<<
literal|"<!DOCTYPE plist SYSTEM \\\"file://localhost/System/"
operator|<<
literal|"Library/DTDs/PropertyList.dtd\\\">"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t\t"
operator|<<
literal|"<plist version=\\\"0.9\\\">"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t\t"
operator|<<
literal|"<dict>"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t\t\t"
operator|<<
literal|"<key>CFBundleDevelopmentRegion</key>"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t\t\t"
operator|<<
literal|"<string>English</string>"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t\t\t"
operator|<<
literal|"<key>CFBundleExecutable</key>"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t\t\t"
operator|<<
literal|"<string>"
operator|<<
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_ORIG_TARGET"
argument_list|)
operator|<<
literal|"</string>"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t\t\t"
operator|<<
literal|"<key>CFBundleIconFile</key>"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t\t\t"
operator|<<
literal|"<string>"
operator|<<
name|var
argument_list|(
literal|"ICON"
argument_list|)
operator|.
name|section
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|,
operator|-
literal|1
argument_list|)
operator|<<
literal|"</string>"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t\t\t"
operator|<<
literal|"<key>CFBundleInfoDictionaryVersion</key>"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t\t\t"
operator|<<
literal|"<string>6.0</string>"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t\t\t"
operator|<<
literal|"<key>CFBundlePackageType</key>"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t\t\t"
operator|<<
literal|"<string>APPL</string>"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t\t\t"
operator|<<
literal|"<key>CFBundleSignature</key>"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t\t\t"
operator|<<
literal|"<string>"
operator|<<
operator|(
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_PKGINFO_TYPEINFO"
argument_list|)
condition|?
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"????"
argument_list|)
else|:
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_PKGINFO_TYPEINFO"
argument_list|)
operator|.
name|left
argument_list|(
literal|4
argument_list|)
operator|)
operator|<<
literal|"</string>"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t\t\t"
operator|<<
literal|"<key>CFBundleVersion</key>"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t\t\t"
operator|<<
literal|"<string>0.1</string>"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t\t\t"
operator|<<
literal|"<key>CSResourcesFileMapped</key>"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t\t\t"
operator|<<
literal|"<true/>"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t\t"
operator|<<
literal|"</dict>"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t\t"
operator|<<
literal|"</plist>"
expr_stmt|;
block|}
name|t
operator|<<
literal|"\";"
operator|<<
literal|"\n"
expr_stmt|;
block|}
name|t
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"name"
argument_list|,
name|escapeFilePath
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_ORIG_TARGET"
argument_list|)
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"productName"
argument_list|,
name|escapeFilePath
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_ORIG_TARGET"
argument_list|)
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
block|}
else|else
block|{
name|QString
name|lib
init|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_ORIG_TARGET"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"lib_bundle"
argument_list|)
operator|&&
operator|!
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"staticlib"
argument_list|)
condition|)
name|lib
operator|.
name|prepend
argument_list|(
literal|"lib"
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"name"
argument_list|,
name|escapeFilePath
argument_list|(
name|lib
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"productName"
argument_list|,
name|escapeFilePath
argument_list|(
name|lib
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
if|if
condition|(
name|pbVersion
operator|>=
literal|38
condition|)
block|{
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_PBX_PRODUCT_TYPE"
argument_list|)
condition|)
name|t
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"productType"
argument_list|,
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_PBX_PRODUCT_TYPE"
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
elseif|else
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"staticlib"
argument_list|)
condition|)
name|t
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"productType"
argument_list|,
literal|"com.apple.product-type.library.static"
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
elseif|else
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"lib_bundle"
argument_list|)
condition|)
name|t
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"productType"
argument_list|,
literal|"com.apple.product-type.framework"
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
else|else
name|t
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"productType"
argument_list|,
literal|"com.apple.product-type.library.dynamic"
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
block|}
else|else
block|{
name|t
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"isa"
argument_list|,
literal|"PBXLibraryTarget"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
block|}
block|}
name|t
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"startupPath"
argument_list|,
literal|"<<ProjectDirectory>>"
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"DESTDIR"
argument_list|)
condition|)
name|t
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"productInstallPath"
argument_list|,
name|escapeFilePath
argument_list|(
name|project
operator|->
name|first
argument_list|(
literal|"DESTDIR"
argument_list|)
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
name|t
operator|<<
literal|"\t\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
expr_stmt|;
comment|//DEBUG/RELEASE
name|QString
name|active_buildstyle
decl_stmt|;
for|for
control|(
name|int
name|as_release
init|=
literal|0
init|;
name|as_release
operator|<
literal|2
condition|;
name|as_release
operator|++
control|)
block|{
name|QMap
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|settings
decl_stmt|;
name|settings
operator|.
name|insert
argument_list|(
literal|"COPY_PHASE_STRIP"
argument_list|,
operator|(
name|as_release
condition|?
literal|"YES"
else|:
literal|"NO"
operator|)
argument_list|)
expr_stmt|;
name|settings
operator|.
name|insert
argument_list|(
literal|"GCC_GENERATE_DEBUGGING_SYMBOLS"
argument_list|,
name|as_release
condition|?
literal|"NO"
else|:
literal|"YES"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|as_release
condition|)
name|settings
operator|.
name|insert
argument_list|(
literal|"GCC_OPTIMIZATION_LEVEL"
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"sdk"
argument_list|)
operator|&&
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_MAC_SDK"
argument_list|)
condition|)
name|settings
operator|.
name|insert
argument_list|(
literal|"SDKROOT"
argument_list|,
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_MAC_SDK"
argument_list|)
argument_list|)
expr_stmt|;
block|{
specifier|const
name|QStringList
modifier|&
name|l
init|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_MAC_XCODE_SETTINGS"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|name
init|=
name|l
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|value
init|=
name|project
operator|->
name|values
argument_list|(
name|name
operator|+
name|QLatin1String
argument_list|(
literal|".value"
argument_list|)
argument_list|)
operator|.
name|join
argument_list|(
name|QString
argument_list|(
name|Option
operator|::
name|field_sep
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
name|name
operator|+
name|QLatin1String
argument_list|(
literal|".name"
argument_list|)
argument_list|)
condition|)
name|name
operator|=
name|project
operator|->
name|values
argument_list|(
name|name
operator|+
name|QLatin1String
argument_list|(
literal|".name"
argument_list|)
argument_list|)
operator|.
name|first
argument_list|()
expr_stmt|;
name|settings
operator|.
name|insert
argument_list|(
name|name
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
block|}
name|QString
name|name
decl_stmt|;
if|if
condition|(
name|pbVersion
operator|>=
literal|42
condition|)
name|name
operator|=
operator|(
name|as_release
condition|?
literal|"Release"
else|:
literal|"Debug"
operator|)
expr_stmt|;
else|else
name|name
operator|=
operator|(
name|as_release
condition|?
literal|"Deployment"
else|:
literal|"Development"
operator|)
expr_stmt|;
if|if
condition|(
name|pbVersion
operator|>=
literal|42
condition|)
block|{
name|QString
name|key
init|=
name|keyFor
argument_list|(
literal|"QMAKE_PBX_BUILDCONFIG_"
operator|+
name|name
argument_list|)
decl_stmt|;
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PBX_BUILDCONFIGS"
argument_list|)
operator|.
name|append
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|t
operator|<<
literal|"\t\t"
operator|<<
name|key
operator|<<
literal|" = {"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"isa"
argument_list|,
literal|"XCBuildConfiguration"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
literal|"buildSettings = {"
operator|<<
literal|"\n"
expr_stmt|;
for|for
control|(
name|QMap
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
operator|::
name|Iterator
name|set_it
init|=
name|settings
operator|.
name|begin
argument_list|()
init|;
name|set_it
operator|!=
name|settings
operator|.
name|end
argument_list|()
condition|;
operator|++
name|set_it
control|)
name|t
operator|<<
literal|"\t\t\t\t"
operator|<<
name|writeSettings
argument_list|(
name|set_it
operator|.
name|key
argument_list|()
argument_list|,
name|set_it
operator|.
name|value
argument_list|()
argument_list|)
operator|<<
literal|";\n"
expr_stmt|;
name|t
operator|<<
literal|"\t\t\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
expr_stmt|;
block|}
name|QString
name|key
init|=
name|keyFor
argument_list|(
literal|"QMAKE_PBX_BUILDSTYLE_"
operator|+
name|name
argument_list|)
decl_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"debug"
argument_list|)
operator|!=
operator|(
name|bool
operator|)
name|as_release
condition|)
block|{
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PBX_BUILDSTYLES"
argument_list|)
operator|.
name|append
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|active_buildstyle
operator|=
name|name
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|pbVersion
operator|>=
literal|42
condition|)
block|{
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PBX_BUILDSTYLES"
argument_list|)
operator|.
name|append
argument_list|(
name|key
argument_list|)
expr_stmt|;
block|}
name|t
operator|<<
literal|"\t\t"
operator|<<
name|key
operator|<<
literal|" = {"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"buildRules"
argument_list|,
name|QStringList
argument_list|()
argument_list|,
name|SettingsAsList
argument_list|,
literal|4
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
literal|"buildSettings = {"
operator|<<
literal|"\n"
expr_stmt|;
for|for
control|(
name|QMap
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
operator|::
name|Iterator
name|set_it
init|=
name|settings
operator|.
name|begin
argument_list|()
init|;
name|set_it
operator|!=
name|settings
operator|.
name|end
argument_list|()
condition|;
operator|++
name|set_it
control|)
name|t
operator|<<
literal|"\t\t\t\t"
operator|<<
name|writeSettings
argument_list|(
name|set_it
operator|.
name|key
argument_list|()
argument_list|,
name|set_it
operator|.
name|value
argument_list|()
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
name|t
operator|<<
literal|"\t\t\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"isa"
argument_list|,
literal|"PBXBuildStyle"
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"name"
argument_list|,
name|name
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
expr_stmt|;
block|}
if|if
condition|(
name|pbVersion
operator|>=
literal|42
condition|)
block|{
name|t
operator|<<
literal|"\t\t"
operator|<<
name|keyFor
argument_list|(
literal|"QMAKE_PBX_BUILDCONFIG_LIST"
argument_list|)
operator|<<
literal|" = {"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"isa"
argument_list|,
literal|"XCConfigurationList"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"buildConfigurations"
argument_list|,
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PBX_BUILDCONFIGS"
argument_list|)
argument_list|,
name|SettingsAsList
argument_list|,
literal|4
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"defaultConfigurationIsVisible"
argument_list|,
literal|"0"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"defaultConfigurationIsName"
argument_list|,
name|active_buildstyle
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
expr_stmt|;
block|}
comment|//ROOT
name|t
operator|<<
literal|"\t\t"
operator|<<
name|keyFor
argument_list|(
literal|"QMAKE_PBX_ROOT"
argument_list|)
operator|<<
literal|" = {"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"buildStyles"
argument_list|,
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PBX_BUILDSTYLES"
argument_list|)
argument_list|,
name|SettingsAsList
argument_list|,
literal|4
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"hasScannedForEncodings"
argument_list|,
literal|"1"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"isa"
argument_list|,
literal|"PBXProject"
argument_list|,
name|SettingsNoQuote
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"mainGroup"
argument_list|,
name|keyFor
argument_list|(
literal|"QMAKE_PBX_ROOT_GROUP"
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
if|if
condition|(
name|pbVersion
operator|>=
literal|42
condition|)
name|t
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"buildConfigurationList"
argument_list|,
name|keyFor
argument_list|(
literal|"QMAKE_PBX_BUILDCONFIG_LIST"
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
expr_stmt|;
name|t
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"projectDirPath"
argument_list|,
name|QStringList
argument_list|()
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t\t"
operator|<<
name|writeSettings
argument_list|(
literal|"targets"
argument_list|,
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PBX_TARGETS"
argument_list|)
argument_list|,
name|SettingsAsList
argument_list|,
literal|4
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"\t\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
expr_stmt|;
comment|//FOOTER
name|t
operator|<<
literal|"\t"
operator|<<
literal|"};"
operator|<<
literal|"\n"
operator|<<
literal|"\t"
operator|<<
name|writeSettings
argument_list|(
literal|"rootObject"
argument_list|,
name|keyFor
argument_list|(
literal|"QMAKE_PBX_ROOT"
argument_list|)
argument_list|)
operator|<<
literal|";"
operator|<<
literal|"\n"
operator|<<
literal|"}"
operator|<<
name|endl
expr_stmt|;
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"generate_pbxbuild_makefile"
argument_list|)
condition|)
block|{
name|QString
name|mkwrap
init|=
name|fileFixify
argument_list|(
name|pbx_dir
operator|+
name|Option
operator|::
name|dir_sep
operator|+
literal|".."
operator|+
name|Option
operator|::
name|dir_sep
operator|+
name|project
operator|->
name|first
argument_list|(
literal|"MAKEFILE"
argument_list|)
argument_list|,
name|qmake_getpwd
argument_list|()
argument_list|)
decl_stmt|;
name|QFile
name|mkwrapf
argument_list|(
name|mkwrap
argument_list|)
decl_stmt|;
if|if
condition|(
name|mkwrapf
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
condition|)
block|{
name|writingUnixMakefileGenerator
operator|=
literal|true
expr_stmt|;
name|debug_msg
argument_list|(
literal|1
argument_list|,
literal|"pbuilder: Creating file: %s"
argument_list|,
name|mkwrap
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QTextStream
name|mkwrapt
argument_list|(
operator|&
name|mkwrapf
argument_list|)
decl_stmt|;
name|writeHeader
argument_list|(
name|mkwrapt
argument_list|)
expr_stmt|;
specifier|const
name|char
name|cleans
index|[]
init|=
literal|"preprocess_clean "
decl_stmt|;
name|mkwrapt
operator|<<
literal|"#This is a makefile wrapper for PROJECT BUILDER\n"
operator|<<
literal|"all:"
operator|<<
literal|"\n\t"
operator|<<
literal|"cd "
operator|<<
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_ORIG_TARGET"
argument_list|)
operator|<<
name|projectSuffix
argument_list|()
operator|<<
literal|"/&& "
operator|<<
name|pbxbuild
argument_list|()
operator|<<
literal|"\n"
operator|<<
literal|"install: all"
operator|<<
literal|"\n\t"
operator|<<
literal|"cd "
operator|<<
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_ORIG_TARGET"
argument_list|)
operator|<<
name|projectSuffix
argument_list|()
operator|<<
literal|"/&& "
operator|<<
name|pbxbuild
argument_list|()
operator|<<
literal|" install\n"
operator|<<
literal|"distclean clean: preprocess_clean"
operator|<<
literal|"\n\t"
operator|<<
literal|"cd "
operator|<<
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_ORIG_TARGET"
argument_list|)
operator|<<
name|projectSuffix
argument_list|()
operator|<<
literal|"/&& "
operator|<<
name|pbxbuild
argument_list|()
operator|<<
literal|" clean"
operator|<<
literal|"\n"
operator|<<
operator|(
operator|!
name|did_preprocess
condition|?
name|cleans
else|:
literal|""
operator|)
operator|<<
literal|":"
operator|<<
literal|"\n"
expr_stmt|;
if|if
condition|(
name|did_preprocess
condition|)
name|mkwrapt
operator|<<
name|cleans
operator|<<
literal|":"
operator|<<
literal|"\n\t"
operator|<<
literal|"make -f "
operator|<<
name|pbx_dir
operator|<<
name|Option
operator|::
name|dir_sep
operator|<<
literal|"qt_preprocess.mak $@"
operator|<<
name|endl
expr_stmt|;
name|writingUnixMakefileGenerator
operator|=
literal|false
expr_stmt|;
block|}
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
name|QString
DECL|function|findProgram
name|ProjectBuilderMakefileGenerator
operator|::
name|findProgram
parameter_list|(
specifier|const
name|QString
modifier|&
name|prog
parameter_list|)
block|{
name|QString
name|ret
init|=
name|prog
decl_stmt|;
if|if
condition|(
name|QDir
operator|::
name|isRelativePath
argument_list|(
name|ret
argument_list|)
condition|)
block|{
name|QStringList
name|paths
init|=
name|QString
argument_list|(
name|qgetenv
argument_list|(
literal|"PATH"
argument_list|)
argument_list|)
operator|.
name|split
argument_list|(
literal|':'
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|paths
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|path
init|=
name|paths
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|+
literal|"/"
operator|+
name|prog
decl_stmt|;
if|if
condition|(
name|exists
argument_list|(
name|path
argument_list|)
condition|)
block|{
name|ret
operator|=
name|path
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
name|QString
DECL|function|fixForOutput
name|ProjectBuilderMakefileGenerator
operator|::
name|fixForOutput
parameter_list|(
specifier|const
name|QString
modifier|&
name|values
parameter_list|)
block|{
comment|//get the environment variables references
name|QRegExp
name|reg_var
argument_list|(
literal|"\\$\\((.*)\\)"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|rep
init|=
literal|0
init|;
operator|(
name|rep
operator|=
name|reg_var
operator|.
name|indexIn
argument_list|(
name|values
argument_list|,
name|rep
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|;
control|)
block|{
if|if
condition|(
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PBX_VARS"
argument_list|)
operator|.
name|indexOf
argument_list|(
name|reg_var
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|==
operator|-
literal|1
condition|)
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_PBX_VARS"
argument_list|)
operator|.
name|append
argument_list|(
name|reg_var
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|rep
operator|+=
name|reg_var
operator|.
name|matchedLength
argument_list|()
expr_stmt|;
block|}
name|QString
name|ret
init|=
name|values
decl_stmt|;
name|ret
operator|=
name|ret
operator|.
name|replace
argument_list|(
name|QRegExp
argument_list|(
literal|"\\\\ "
argument_list|)
argument_list|,
literal|" "
argument_list|)
expr_stmt|;
comment|//unescape spaces
name|ret
operator|=
name|ret
operator|.
name|replace
argument_list|(
name|QRegExp
argument_list|(
literal|"('|\\\\|\")"
argument_list|)
argument_list|,
literal|"\\\\1"
argument_list|)
expr_stmt|;
comment|//fix quotes
name|ret
operator|=
name|ret
operator|.
name|replace
argument_list|(
literal|"\t"
argument_list|,
literal|"    "
argument_list|)
expr_stmt|;
comment|//fix tabs
name|ret
operator|=
name|ret
operator|.
name|replace
argument_list|(
name|QRegExp
argument_list|(
literal|" "
argument_list|)
argument_list|,
literal|"\\ "
argument_list|)
expr_stmt|;
comment|//escape spaces
return|return
name|ret
return|;
block|}
end_function
begin_function
name|QStringList
DECL|function|fixListForOutput
name|ProjectBuilderMakefileGenerator
operator|::
name|fixListForOutput
parameter_list|(
specifier|const
name|QString
modifier|&
name|where
parameter_list|)
block|{
name|QStringList
name|ret
decl_stmt|;
specifier|const
name|QStringList
modifier|&
name|l
init|=
name|project
operator|->
name|values
argument_list|(
name|where
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
name|ret
operator|+=
name|fixForOutput
argument_list|(
name|l
index|[
name|i
index|]
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
name|QString
DECL|function|keyFor
name|ProjectBuilderMakefileGenerator
operator|::
name|keyFor
parameter_list|(
specifier|const
name|QString
modifier|&
name|block
parameter_list|)
block|{
if|#
directive|if
literal|1
comment|//This make this code much easier to debug..
if|if
condition|(
name|project
operator|->
name|isActiveConfig
argument_list|(
literal|"no_pb_munge_key"
argument_list|)
condition|)
return|return
name|block
return|;
endif|#
directive|endif
name|QString
name|ret
decl_stmt|;
if|if
condition|(
operator|!
name|keys
operator|.
name|contains
argument_list|(
name|block
argument_list|)
condition|)
block|{
name|ret
operator|=
name|qtMD5
argument_list|(
name|block
operator|.
name|toUtf8
argument_list|()
argument_list|)
operator|.
name|left
argument_list|(
literal|24
argument_list|)
operator|.
name|toUpper
argument_list|()
expr_stmt|;
name|keys
operator|.
name|insert
argument_list|(
name|block
argument_list|,
name|ret
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|=
name|keys
index|[
name|block
index|]
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
name|bool
DECL|function|openOutput
name|ProjectBuilderMakefileGenerator
operator|::
name|openOutput
parameter_list|(
name|QFile
modifier|&
name|file
parameter_list|,
specifier|const
name|QString
modifier|&
name|build
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|QDir
operator|::
name|isRelativePath
argument_list|(
name|file
operator|.
name|fileName
argument_list|()
argument_list|)
condition|)
name|file
operator|.
name|setFileName
argument_list|(
name|Option
operator|::
name|output_dir
operator|+
literal|"/"
operator|+
name|file
operator|.
name|fileName
argument_list|()
argument_list|)
expr_stmt|;
comment|//pwd when qmake was run
name|QFileInfo
name|fi
argument_list|(
name|fileInfo
argument_list|(
name|file
operator|.
name|fileName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|fi
operator|.
name|suffix
argument_list|()
operator|!=
literal|"pbxproj"
operator|||
name|file
operator|.
name|fileName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QString
name|output
init|=
name|file
operator|.
name|fileName
argument_list|()
decl_stmt|;
if|if
condition|(
name|fi
operator|.
name|isDir
argument_list|()
condition|)
name|output
operator|+=
name|QDir
operator|::
name|separator
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|output
operator|.
name|endsWith
argument_list|(
name|projectSuffix
argument_list|()
argument_list|)
condition|)
block|{
if|if
condition|(
name|file
operator|.
name|fileName
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|||
name|fi
operator|.
name|isDir
argument_list|()
condition|)
block|{
if|if
condition|(
name|project
operator|->
name|first
argument_list|(
literal|"TEMPLATE"
argument_list|)
operator|==
literal|"subdirs"
operator|||
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_ORIG_TARGET"
argument_list|)
condition|)
name|output
operator|+=
name|fileInfo
argument_list|(
name|project
operator|->
name|projectFile
argument_list|()
argument_list|)
operator|.
name|baseName
argument_list|()
expr_stmt|;
else|else
name|output
operator|+=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_ORIG_TARGET"
argument_list|)
expr_stmt|;
block|}
name|output
operator|+=
name|projectSuffix
argument_list|()
operator|+
name|QDir
operator|::
name|separator
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|output
index|[
operator|(
name|int
operator|)
name|output
operator|.
name|length
argument_list|()
operator|-
literal|1
index|]
operator|!=
name|QDir
operator|::
name|separator
argument_list|()
condition|)
block|{
name|output
operator|+=
name|QDir
operator|::
name|separator
argument_list|()
expr_stmt|;
block|}
name|output
operator|+=
name|QString
argument_list|(
literal|"project.pbxproj"
argument_list|)
expr_stmt|;
name|output
operator|=
name|unescapeFilePath
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|file
operator|.
name|setFileName
argument_list|(
name|output
argument_list|)
expr_stmt|;
block|}
name|bool
name|ret
init|=
name|UnixMakefileGenerator
operator|::
name|openOutput
argument_list|(
name|file
argument_list|,
name|build
argument_list|)
decl_stmt|;
operator|(
operator|(
name|ProjectBuilderMakefileGenerator
operator|*
operator|)
name|this
operator|)
operator|->
name|pbx_dir
operator|=
name|Option
operator|::
name|output_dir
operator|.
name|section
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|Option
operator|::
name|output_dir
operator|=
name|pbx_dir
operator|.
name|section
argument_list|(
name|Option
operator|::
name|dir_sep
argument_list|,
literal|0
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_comment
comment|/* This function is such a hack it is almost pointless, but it    eliminates the warning message from ProjectBuilder that the project    file is for an older version. I guess this could be used someday if    the format of the output is dependant upon the version of    ProjectBuilder as well. */
end_comment
begin_function
name|int
DECL|function|pbuilderVersion
name|ProjectBuilderMakefileGenerator
operator|::
name|pbuilderVersion
parameter_list|()
specifier|const
block|{
name|QString
name|ret
decl_stmt|;
if|if
condition|(
operator|!
name|project
operator|->
name|isEmpty
argument_list|(
literal|"QMAKE_PBUILDER_VERSION"
argument_list|)
condition|)
block|{
name|ret
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_PBUILDER_VERSION"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QString
name|version
decl_stmt|,
name|version_plist
init|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_PBUILDER_VERSION_PLIST"
argument_list|)
decl_stmt|;
if|if
condition|(
name|version_plist
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
ifdef|#
directive|ifdef
name|Q_OS_DARWIN
name|ret
operator|=
name|QLatin1String
argument_list|(
literal|"34"
argument_list|)
expr_stmt|;
name|QCFType
argument_list|<
name|CFURLRef
argument_list|>
name|cfurl
decl_stmt|;
name|OSStatus
name|err
init|=
name|LSFindApplicationForInfo
argument_list|(
literal|0
argument_list|,
name|CFSTR
argument_list|(
literal|"com.apple.Xcode"
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|&
name|cfurl
argument_list|)
decl_stmt|;
if|if
condition|(
name|err
operator|==
name|noErr
condition|)
block|{
name|QCFType
argument_list|<
name|CFBundleRef
argument_list|>
name|bundle
init|=
name|CFBundleCreate
argument_list|(
literal|0
argument_list|,
name|cfurl
argument_list|)
decl_stmt|;
if|if
condition|(
name|bundle
condition|)
block|{
name|CFStringRef
name|str
init|=
name|CFStringRef
argument_list|(
name|CFBundleGetValueForInfoDictionaryKey
argument_list|(
name|bundle
argument_list|,
name|CFSTR
argument_list|(
literal|"CFBundleShortVersionString"
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|str
condition|)
block|{
name|QStringList
name|versions
init|=
name|QCFString
operator|::
name|toQString
argument_list|(
name|str
argument_list|)
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|versionMajor
init|=
name|versions
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|int
name|versionMinor
init|=
name|versions
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|versionMajor
operator|>=
literal|2
condition|)
block|{
name|ret
operator|=
name|QLatin1String
argument_list|(
literal|"42"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|versionMajor
operator|==
literal|1
operator|&&
name|versionMinor
operator|>=
literal|5
condition|)
block|{
name|ret
operator|=
name|QLatin1String
argument_list|(
literal|"39"
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
else|#
directive|else
if|if
condition|(
name|exists
argument_list|(
literal|"/Developer/Applications/Xcode.app/Contents/version.plist"
argument_list|)
condition|)
name|version_plist
operator|=
literal|"/Developer/Applications/Xcode.app/Contents/version.plist"
expr_stmt|;
else|else
name|version_plist
operator|=
literal|"/Developer/Applications/Project Builder.app/Contents/version.plist"
expr_stmt|;
endif|#
directive|endif
block|}
else|else
block|{
name|version_plist
operator|=
name|version_plist
operator|.
name|replace
argument_list|(
name|QRegExp
argument_list|(
literal|"\""
argument_list|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|ret
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QFile
name|version_file
argument_list|(
name|version_plist
argument_list|)
decl_stmt|;
if|if
condition|(
name|version_file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|debug_msg
argument_list|(
literal|1
argument_list|,
literal|"pbuilder: version.plist: Reading file: %s"
argument_list|,
name|version_plist
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QTextStream
name|plist
argument_list|(
operator|&
name|version_file
argument_list|)
decl_stmt|;
name|bool
name|in_dict
init|=
literal|false
decl_stmt|;
name|QString
name|current_key
decl_stmt|;
name|QRegExp
name|keyreg
argument_list|(
literal|"^<key>(.*)</key>$"
argument_list|)
decl_stmt|,
name|stringreg
argument_list|(
literal|"^<string>(.*)</string>$"
argument_list|)
decl_stmt|;
while|while
condition|(
operator|!
name|plist
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|QString
name|line
init|=
name|plist
operator|.
name|readLine
argument_list|()
operator|.
name|trimmed
argument_list|()
decl_stmt|;
if|if
condition|(
name|line
operator|==
literal|"<dict>"
condition|)
name|in_dict
operator|=
literal|true
expr_stmt|;
elseif|else
if|if
condition|(
name|line
operator|==
literal|"</dict>"
condition|)
name|in_dict
operator|=
literal|false
expr_stmt|;
elseif|else
if|if
condition|(
name|in_dict
condition|)
block|{
if|if
condition|(
name|keyreg
operator|.
name|exactMatch
argument_list|(
name|line
argument_list|)
condition|)
name|current_key
operator|=
name|keyreg
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|current_key
operator|==
literal|"CFBundleShortVersionString"
operator|&&
name|stringreg
operator|.
name|exactMatch
argument_list|(
name|line
argument_list|)
condition|)
name|version
operator|=
name|stringreg
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
name|plist
operator|.
name|flush
argument_list|()
expr_stmt|;
name|version_file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|debug_msg
argument_list|(
literal|1
argument_list|,
literal|"pbuilder: version.plist: Failure to open %s"
argument_list|,
name|version_plist
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|version
operator|.
name|isEmpty
argument_list|()
operator|&&
name|version_plist
operator|.
name|contains
argument_list|(
literal|"Xcode"
argument_list|)
condition|)
block|{
name|ret
operator|=
literal|"39"
expr_stmt|;
block|}
else|else
block|{
name|int
name|versionMajor
init|=
name|version
operator|.
name|left
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|versionMajor
operator|>=
literal|2
condition|)
name|ret
operator|=
literal|"42"
expr_stmt|;
elseif|else
if|if
condition|(
name|version
operator|==
literal|"1.5"
condition|)
name|ret
operator|=
literal|"39"
expr_stmt|;
elseif|else
if|if
condition|(
name|version
operator|==
literal|"1.1"
condition|)
name|ret
operator|=
literal|"34"
expr_stmt|;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|ret
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|bool
name|ok
decl_stmt|;
name|int
name|int_ret
init|=
name|ret
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
decl_stmt|;
if|if
condition|(
name|ok
condition|)
block|{
name|debug_msg
argument_list|(
literal|1
argument_list|,
literal|"pbuilder: version.plist: Got version: %d"
argument_list|,
name|int_ret
argument_list|)
expr_stmt|;
return|return
name|int_ret
return|;
block|}
block|}
name|debug_msg
argument_list|(
literal|1
argument_list|,
literal|"pbuilder: version.plist: Fallback to default version"
argument_list|)
expr_stmt|;
return|return
literal|42
return|;
comment|//my fallback
block|}
end_function
begin_function
name|int
DECL|function|reftypeForFile
name|ProjectBuilderMakefileGenerator
operator|::
name|reftypeForFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|where
parameter_list|)
block|{
name|int
name|ret
init|=
literal|0
decl_stmt|;
comment|//absolute is the default..
if|if
condition|(
name|QDir
operator|::
name|isRelativePath
argument_list|(
name|unescapeFilePath
argument_list|(
name|where
argument_list|)
argument_list|)
condition|)
name|ret
operator|=
literal|4
expr_stmt|;
comment|//relative
return|return
name|ret
return|;
block|}
end_function
begin_function
name|QString
DECL|function|projectSuffix
name|ProjectBuilderMakefileGenerator
operator|::
name|projectSuffix
parameter_list|()
specifier|const
block|{
specifier|const
name|int
name|pbVersion
init|=
name|pbuilderVersion
argument_list|()
decl_stmt|;
if|if
condition|(
name|pbVersion
operator|>=
literal|42
condition|)
return|return
literal|".xcodeproj"
return|;
elseif|else
if|if
condition|(
name|pbVersion
operator|>=
literal|38
condition|)
return|return
literal|".xcode"
return|;
return|return
literal|".pbproj"
return|;
block|}
end_function
begin_function
name|QString
DECL|function|pbxbuild
name|ProjectBuilderMakefileGenerator
operator|::
name|pbxbuild
parameter_list|()
block|{
if|if
condition|(
name|exists
argument_list|(
literal|"/usr/bin/pbbuild"
argument_list|)
condition|)
return|return
literal|"pbbuild"
return|;
if|if
condition|(
name|exists
argument_list|(
literal|"/usr/bin/xcodebuild"
argument_list|)
condition|)
return|return
literal|"xcodebuild"
return|;
return|return
operator|(
name|pbuilderVersion
argument_list|()
operator|>=
literal|38
condition|?
literal|"xcodebuild"
else|:
literal|"pbxbuild"
operator|)
return|;
block|}
end_function
begin_function
name|QString
DECL|function|escapeFilePath
name|ProjectBuilderMakefileGenerator
operator|::
name|escapeFilePath
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|)
specifier|const
block|{
if|#
directive|if
literal|1
comment|//in the middle of generating a Makefile!
if|if
condition|(
name|writingUnixMakefileGenerator
condition|)
return|return
name|UnixMakefileGenerator
operator|::
name|escapeFilePath
argument_list|(
name|path
argument_list|)
return|;
comment|//generating stuff for the xml file!
name|QString
name|ret
init|=
name|path
decl_stmt|;
if|if
condition|(
operator|!
name|ret
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|ret
operator|=
name|unescapeFilePath
argument_list|(
name|ret
argument_list|)
expr_stmt|;
name|debug_msg
argument_list|(
literal|2
argument_list|,
literal|"EscapeFilePath: %s -> %s"
argument_list|,
name|path
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|ret
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
else|#
directive|else
return|return
name|UnixMakefileGenerator
operator|::
name|escapeFilePath
argument_list|(
name|path
argument_list|)
return|;
endif|#
directive|endif
block|}
end_function
begin_function
name|QString
DECL|function|writeSettings
name|ProjectBuilderMakefileGenerator
operator|::
name|writeSettings
parameter_list|(
name|QString
name|var
parameter_list|,
name|QStringList
name|vals
parameter_list|,
name|int
name|flags
parameter_list|,
name|int
name|indent_level
parameter_list|)
block|{
name|QString
name|ret
decl_stmt|;
specifier|const
name|QString
name|quote
init|=
operator|(
name|flags
operator|&
name|SettingsNoQuote
operator|)
condition|?
literal|""
else|:
literal|"\""
decl_stmt|;
specifier|const
name|QString
name|escape_quote
init|=
name|quote
operator|.
name|isEmpty
argument_list|()
condition|?
literal|""
else|:
literal|"\\"
operator|+
name|quote
decl_stmt|;
name|QString
name|newline
init|=
literal|"\n"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indent_level
condition|;
operator|++
name|i
control|)
name|newline
operator|+=
literal|"\t"
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|SettingsAsList
condition|)
block|{
name|ret
operator|+=
name|var
operator|+
literal|" = ("
operator|+
name|newline
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|count
init|=
literal|0
init|;
name|i
operator|<
name|vals
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|val
init|=
name|vals
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|val
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|count
operator|++
operator|>
literal|0
condition|)
name|ret
operator|+=
literal|","
operator|+
name|newline
expr_stmt|;
name|ret
operator|+=
name|quote
operator|+
name|val
operator|.
name|replace
argument_list|(
name|quote
argument_list|,
name|escape_quote
argument_list|)
operator|+
name|quote
expr_stmt|;
block|}
block|}
name|ret
operator|+=
literal|")"
expr_stmt|;
block|}
else|else
block|{
name|ret
operator|+=
name|var
operator|+
literal|" = "
operator|+
name|quote
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|vals
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|val
init|=
name|vals
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
comment|//             if(val.isEmpty())
comment|//                 val = quote + quote;
if|if
condition|(
name|i
condition|)
name|ret
operator|+=
literal|" "
expr_stmt|;
name|ret
operator|+=
name|val
expr_stmt|;
block|}
name|ret
operator|+=
name|quote
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
