begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the qmake application of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qmakevfs.h"
end_include
begin_include
include|#
directive|include
file|"ioutils.h"
end_include
begin_using
using|using
namespace|namespace
name|QMakeInternal
namespace|;
end_using
begin_include
include|#
directive|include
file|<qdir.h>
end_include
begin_include
include|#
directive|include
file|<qfile.h>
end_include
begin_include
include|#
directive|include
file|<qfileinfo.h>
end_include
begin_define
DECL|macro|fL1S
define|#
directive|define
name|fL1S
parameter_list|(
name|s
parameter_list|)
value|QString::fromLatin1(s)
end_define
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_constructor
DECL|function|QMakeVfs
name|QMakeVfs
operator|::
name|QMakeVfs
parameter_list|()
ifndef|#
directive|ifndef
name|PROEVALUATOR_FULL
member_init_list|:
name|m_magicMissing
argument_list|(
name|fL1S
argument_list|(
literal|"missing"
argument_list|)
argument_list|)
member_init_list|,
name|m_magicExisting
argument_list|(
name|fL1S
argument_list|(
literal|"existing"
argument_list|)
argument_list|)
endif|#
directive|endif
block|{ }
end_constructor
begin_function
DECL|function|writeFile
name|bool
name|QMakeVfs
operator|::
name|writeFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|fn
parameter_list|,
name|QIODevice
operator|::
name|OpenMode
name|mode
parameter_list|,
specifier|const
name|QString
modifier|&
name|contents
parameter_list|,
name|QString
modifier|*
name|errStr
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|PROEVALUATOR_FULL
ifdef|#
directive|ifdef
name|PROEVALUATOR_THREAD_SAFE
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|m_mutex
argument_list|)
decl_stmt|;
endif|#
directive|endif
name|QString
modifier|*
name|cont
init|=
operator|&
name|m_files
index|[
name|fn
index|]
decl_stmt|;
if|if
condition|(
name|mode
operator|&
name|QIODevice
operator|::
name|Append
condition|)
operator|*
name|cont
operator|+=
name|contents
expr_stmt|;
else|else
operator|*
name|cont
operator|=
name|contents
expr_stmt|;
name|Q_UNUSED
argument_list|(
argument|errStr
argument_list|)
return|return
literal|true
return|;
else|#
directive|else
name|QFileInfo
name|qfi
argument_list|(
name|fn
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|QDir
operator|::
name|current
argument_list|()
operator|.
name|mkpath
argument_list|(
name|qfi
operator|.
name|path
argument_list|()
argument_list|)
condition|)
block|{
operator|*
name|errStr
operator|=
name|fL1S
argument_list|(
literal|"Cannot create parent directory"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|QByteArray
name|bytes
init|=
name|contents
operator|.
name|toLocal8Bit
argument_list|()
decl_stmt|;
name|QFile
name|cfile
argument_list|(
name|fn
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|mode
operator|&
name|QIODevice
operator|::
name|Append
operator|)
operator|&&
name|cfile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
condition|)
block|{
if|if
condition|(
name|cfile
operator|.
name|readAll
argument_list|()
operator|==
name|bytes
condition|)
return|return
literal|true
return|;
name|cfile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|cfile
operator|.
name|open
argument_list|(
name|mode
operator||
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
condition|)
block|{
operator|*
name|errStr
operator|=
name|cfile
operator|.
name|errorString
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
name|cfile
operator|.
name|write
argument_list|(
name|bytes
argument_list|)
expr_stmt|;
name|cfile
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|cfile
operator|.
name|error
argument_list|()
operator|!=
name|QFile
operator|::
name|NoError
condition|)
block|{
operator|*
name|errStr
operator|=
name|cfile
operator|.
name|errorString
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|readFile
name|bool
name|QMakeVfs
operator|::
name|readFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|fn
parameter_list|,
name|QString
modifier|*
name|contents
parameter_list|,
name|QString
modifier|*
name|errStr
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|PROEVALUATOR_FULL
ifdef|#
directive|ifdef
name|PROEVALUATOR_THREAD_SAFE
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|m_mutex
argument_list|)
decl_stmt|;
endif|#
directive|endif
name|QHash
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
operator|::
name|ConstIterator
name|it
init|=
name|m_files
operator|.
name|constFind
argument_list|(
name|fn
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|m_files
operator|.
name|constEnd
argument_list|()
condition|)
block|{
if|if
condition|(
name|it
operator|->
name|constData
argument_list|()
operator|==
name|m_magicMissing
operator|.
name|constData
argument_list|()
condition|)
block|{
operator|*
name|errStr
operator|=
name|fL1S
argument_list|(
literal|"No such file or directory"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|it
operator|->
name|constData
argument_list|()
operator|!=
name|m_magicExisting
operator|.
name|constData
argument_list|()
condition|)
block|{
operator|*
name|contents
operator|=
operator|*
name|it
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
endif|#
directive|endif
name|QFile
name|file
argument_list|(
name|fn
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
ifndef|#
directive|ifndef
name|PROEVALUATOR_FULL
if|if
condition|(
operator|!
name|IoUtils
operator|::
name|exists
argument_list|(
name|fn
argument_list|)
condition|)
block|{
name|m_files
index|[
name|fn
index|]
operator|=
name|m_magicMissing
expr_stmt|;
operator|*
name|errStr
operator|=
name|fL1S
argument_list|(
literal|"No such file or directory"
argument_list|)
expr_stmt|;
block|}
else|else
endif|#
directive|endif
operator|*
name|errStr
operator|=
name|file
operator|.
name|errorString
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
ifndef|#
directive|ifndef
name|PROEVALUATOR_FULL
name|m_files
index|[
name|fn
index|]
operator|=
name|m_magicExisting
expr_stmt|;
endif|#
directive|endif
name|QByteArray
name|bcont
init|=
name|file
operator|.
name|readAll
argument_list|()
decl_stmt|;
if|if
condition|(
name|bcont
operator|.
name|startsWith
argument_list|(
literal|"\xef\xbb\xbf"
argument_list|)
condition|)
block|{
comment|// UTF-8 BOM will cause subtle errors
operator|*
name|errStr
operator|=
name|fL1S
argument_list|(
literal|"Unexpected UTF-8 BOM"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
operator|*
name|contents
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|bcont
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|exists
name|bool
name|QMakeVfs
operator|::
name|exists
parameter_list|(
specifier|const
name|QString
modifier|&
name|fn
parameter_list|)
block|{
ifndef|#
directive|ifndef
name|PROEVALUATOR_FULL
ifdef|#
directive|ifdef
name|PROEVALUATOR_THREAD_SAFE
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|m_mutex
argument_list|)
decl_stmt|;
endif|#
directive|endif
name|QHash
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
operator|::
name|ConstIterator
name|it
init|=
name|m_files
operator|.
name|constFind
argument_list|(
name|fn
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|m_files
operator|.
name|constEnd
argument_list|()
condition|)
return|return
name|it
operator|->
name|constData
argument_list|()
operator|!=
name|m_magicMissing
operator|.
name|constData
argument_list|()
return|;
endif|#
directive|endif
name|bool
name|ex
init|=
name|IoUtils
operator|::
name|exists
argument_list|(
name|fn
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|PROEVALUATOR_FULL
name|m_files
index|[
name|fn
index|]
operator|=
name|ex
condition|?
name|m_magicExisting
else|:
name|m_magicMissing
expr_stmt|;
endif|#
directive|endif
return|return
name|ex
return|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|PROEVALUATOR_FULL
end_ifndef
begin_comment
comment|// This should be called when the sources may have changed (e.g., VCS update).
end_comment
begin_function
DECL|function|invalidateCache
name|void
name|QMakeVfs
operator|::
name|invalidateCache
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|PROEVALUATOR_THREAD_SAFE
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|m_mutex
argument_list|)
decl_stmt|;
endif|#
directive|endif
name|QHash
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
operator|::
name|Iterator
name|it
init|=
name|m_files
operator|.
name|begin
argument_list|()
decl_stmt|,
name|eit
init|=
name|m_files
operator|.
name|end
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|eit
condition|)
block|{
if|if
condition|(
name|it
operator|->
name|constData
argument_list|()
operator|==
name|m_magicMissing
operator|.
name|constData
argument_list|()
operator|||
name|it
operator|->
name|constData
argument_list|()
operator|==
name|m_magicExisting
operator|.
name|constData
argument_list|()
condition|)
name|it
operator|=
name|m_files
operator|.
name|erase
argument_list|(
name|it
argument_list|)
expr_stmt|;
else|else
operator|++
name|it
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// This should be called when generated files may have changed (e.g., actual build).
end_comment
begin_function
DECL|function|invalidateContents
name|void
name|QMakeVfs
operator|::
name|invalidateContents
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|PROEVALUATOR_THREAD_SAFE
name|QMutexLocker
name|locker
argument_list|(
operator|&
name|m_mutex
argument_list|)
decl_stmt|;
endif|#
directive|endif
name|m_files
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
