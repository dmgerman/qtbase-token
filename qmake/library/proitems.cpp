begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the qmake application of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"proitems.h"
end_include
begin_include
include|#
directive|include
file|<qfileinfo.h>
end_include
begin_include
include|#
directive|include
file|<qset.h>
end_include
begin_include
include|#
directive|include
file|<qstringlist.h>
end_include
begin_include
include|#
directive|include
file|<qtextstream.h>
end_include
begin_function
name|QT_BEGIN_NAMESPACE
comment|// from qhash.cpp
DECL|function|hash
name|uint
name|ProString
operator|::
name|hash
parameter_list|(
specifier|const
name|QChar
modifier|*
name|p
parameter_list|,
name|int
name|n
parameter_list|)
block|{
name|uint
name|h
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|n
operator|--
condition|)
block|{
name|h
operator|=
operator|(
name|h
operator|<<
literal|4
operator|)
operator|+
operator|(
operator|*
name|p
operator|++
operator|)
operator|.
name|unicode
argument_list|()
expr_stmt|;
name|h
operator|^=
operator|(
name|h
operator|&
literal|0xf0000000
operator|)
operator|>>
literal|23
expr_stmt|;
name|h
operator|&=
literal|0x0fffffff
expr_stmt|;
block|}
return|return
name|h
return|;
block|}
end_function
begin_constructor
DECL|function|ProString
name|ProString
operator|::
name|ProString
parameter_list|()
member_init_list|:
name|m_offset
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_length
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_file
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_hash
argument_list|(
literal|0x80000000
argument_list|)
block|{ }
end_constructor
begin_constructor
DECL|function|ProString
name|ProString
operator|::
name|ProString
parameter_list|(
specifier|const
name|ProString
modifier|&
name|other
parameter_list|)
member_init_list|:
name|m_string
argument_list|(
name|other
operator|.
name|m_string
argument_list|)
member_init_list|,
name|m_offset
argument_list|(
name|other
operator|.
name|m_offset
argument_list|)
member_init_list|,
name|m_length
argument_list|(
name|other
operator|.
name|m_length
argument_list|)
member_init_list|,
name|m_file
argument_list|(
name|other
operator|.
name|m_file
argument_list|)
member_init_list|,
name|m_hash
argument_list|(
name|other
operator|.
name|m_hash
argument_list|)
block|{ }
end_constructor
begin_constructor
DECL|function|ProString
name|ProString
operator|::
name|ProString
parameter_list|(
specifier|const
name|ProString
modifier|&
name|other
parameter_list|,
name|OmitPreHashing
parameter_list|)
member_init_list|:
name|m_string
argument_list|(
name|other
operator|.
name|m_string
argument_list|)
member_init_list|,
name|m_offset
argument_list|(
name|other
operator|.
name|m_offset
argument_list|)
member_init_list|,
name|m_length
argument_list|(
name|other
operator|.
name|m_length
argument_list|)
member_init_list|,
name|m_file
argument_list|(
name|other
operator|.
name|m_file
argument_list|)
member_init_list|,
name|m_hash
argument_list|(
literal|0x80000000
argument_list|)
block|{ }
end_constructor
begin_constructor
DECL|function|ProString
name|ProString
operator|::
name|ProString
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|,
name|DoPreHashing
parameter_list|)
member_init_list|:
name|m_string
argument_list|(
name|str
argument_list|)
member_init_list|,
name|m_offset
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_length
argument_list|(
name|str
operator|.
name|length
argument_list|()
argument_list|)
member_init_list|,
name|m_file
argument_list|(
literal|0
argument_list|)
block|{
name|updatedHash
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|ProString
name|ProString
operator|::
name|ProString
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|)
member_init_list|:
name|m_string
argument_list|(
name|str
argument_list|)
member_init_list|,
name|m_offset
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_length
argument_list|(
name|str
operator|.
name|length
argument_list|()
argument_list|)
member_init_list|,
name|m_file
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_hash
argument_list|(
literal|0x80000000
argument_list|)
block|{ }
end_constructor
begin_constructor
DECL|function|ProString
name|ProString
operator|::
name|ProString
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|DoPreHashing
parameter_list|)
member_init_list|:
name|m_string
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|str
argument_list|)
argument_list|)
member_init_list|,
name|m_offset
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_length
argument_list|(
name|qstrlen
argument_list|(
name|str
argument_list|)
argument_list|)
member_init_list|,
name|m_file
argument_list|(
literal|0
argument_list|)
block|{
name|updatedHash
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|ProString
name|ProString
operator|::
name|ProString
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|)
member_init_list|:
name|m_string
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|str
argument_list|)
argument_list|)
member_init_list|,
name|m_offset
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_length
argument_list|(
name|qstrlen
argument_list|(
name|str
argument_list|)
argument_list|)
member_init_list|,
name|m_file
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_hash
argument_list|(
literal|0x80000000
argument_list|)
block|{ }
end_constructor
begin_constructor
DECL|function|ProString
name|ProString
operator|::
name|ProString
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|DoPreHashing
parameter_list|)
member_init_list|:
name|m_string
argument_list|(
name|str
argument_list|)
member_init_list|,
name|m_offset
argument_list|(
name|offset
argument_list|)
member_init_list|,
name|m_length
argument_list|(
name|length
argument_list|)
member_init_list|,
name|m_file
argument_list|(
literal|0
argument_list|)
block|{
name|updatedHash
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|ProString
name|ProString
operator|::
name|ProString
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|hash
parameter_list|)
member_init_list|:
name|m_string
argument_list|(
name|str
argument_list|)
member_init_list|,
name|m_offset
argument_list|(
name|offset
argument_list|)
member_init_list|,
name|m_length
argument_list|(
name|length
argument_list|)
member_init_list|,
name|m_file
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_hash
argument_list|(
name|hash
argument_list|)
block|{ }
end_constructor
begin_constructor
DECL|function|ProString
name|ProString
operator|::
name|ProString
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|)
member_init_list|:
name|m_string
argument_list|(
name|str
argument_list|)
member_init_list|,
name|m_offset
argument_list|(
name|offset
argument_list|)
member_init_list|,
name|m_length
argument_list|(
name|length
argument_list|)
member_init_list|,
name|m_file
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_hash
argument_list|(
literal|0x80000000
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|setValue
name|void
name|ProString
operator|::
name|setValue
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|)
block|{
name|m_string
operator|=
name|str
operator|,
name|m_offset
operator|=
literal|0
operator|,
name|m_length
operator|=
name|str
operator|.
name|length
argument_list|()
operator|,
name|m_hash
operator|=
literal|0x80000000
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updatedHash
name|uint
name|ProString
operator|::
name|updatedHash
parameter_list|()
specifier|const
block|{
return|return
operator|(
name|m_hash
operator|=
name|hash
argument_list|(
name|m_string
operator|.
name|constData
argument_list|()
operator|+
name|m_offset
argument_list|,
name|m_length
argument_list|)
operator|)
return|;
block|}
end_function
begin_function
DECL|function|qHash
name|uint
name|qHash
parameter_list|(
specifier|const
name|ProString
modifier|&
name|str
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|str
operator|.
name|m_hash
operator|&
literal|0x80000000
operator|)
condition|)
return|return
name|str
operator|.
name|m_hash
return|;
return|return
name|str
operator|.
name|updatedHash
argument_list|()
return|;
block|}
end_function
begin_constructor
DECL|function|ProKey
name|ProKey
operator|::
name|ProKey
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|)
member_init_list|:
name|ProString
argument_list|(
name|str
argument_list|,
name|DoHash
argument_list|)
block|{ }
end_constructor
begin_constructor
DECL|function|ProKey
name|ProKey
operator|::
name|ProKey
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|)
member_init_list|:
name|ProString
argument_list|(
name|str
argument_list|,
name|DoHash
argument_list|)
block|{ }
end_constructor
begin_constructor
DECL|function|ProKey
name|ProKey
operator|::
name|ProKey
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
member_init_list|:
name|ProString
argument_list|(
name|str
argument_list|,
name|off
argument_list|,
name|len
argument_list|,
name|DoHash
argument_list|)
block|{ }
end_constructor
begin_constructor
DECL|function|ProKey
name|ProKey
operator|::
name|ProKey
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|,
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|,
name|uint
name|hash
parameter_list|)
member_init_list|:
name|ProString
argument_list|(
name|str
argument_list|,
name|off
argument_list|,
name|len
argument_list|,
name|hash
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|setValue
name|void
name|ProKey
operator|::
name|setValue
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|)
block|{
name|m_string
operator|=
name|str
operator|,
name|m_offset
operator|=
literal|0
operator|,
name|m_length
operator|=
name|str
operator|.
name|length
argument_list|()
expr_stmt|;
name|updatedHash
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toQString
name|QString
name|ProString
operator|::
name|toQString
parameter_list|()
specifier|const
block|{
return|return
name|m_string
operator|.
name|mid
argument_list|(
name|m_offset
argument_list|,
name|m_length
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|toQString
name|QString
modifier|&
name|ProString
operator|::
name|toQString
parameter_list|(
name|QString
modifier|&
name|tmp
parameter_list|)
specifier|const
block|{
return|return
name|tmp
operator|.
name|setRawData
argument_list|(
name|m_string
operator|.
name|constData
argument_list|()
operator|+
name|m_offset
argument_list|,
name|m_length
argument_list|)
return|;
block|}
end_function
begin_comment
comment|/*!  * \brief ProString::prepareExtend  * \param extraLen number of new characters to be added  * \param thisTarget offset to which current contents should be moved  * \param extraTarget offset at which new characters will be added  * \return pointer to storage location for new characters  *  * Prepares the string for adding new characters.  * If the string is detached and has enough space, it will be changed in place.  * Otherwise, it will be replaced with a new string object, thus detaching.  * In either case, the hash will be reset.  */
end_comment
begin_function
DECL|function|prepareExtend
name|QChar
modifier|*
name|ProString
operator|::
name|prepareExtend
parameter_list|(
name|int
name|extraLen
parameter_list|,
name|int
name|thisTarget
parameter_list|,
name|int
name|extraTarget
parameter_list|)
block|{
if|if
condition|(
name|m_string
operator|.
name|isDetached
argument_list|()
operator|&&
name|m_length
operator|+
name|extraLen
operator|<=
name|m_string
operator|.
name|capacity
argument_list|()
condition|)
block|{
name|m_string
operator|.
name|reserve
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// Prevent the resize() below from reallocating
name|QChar
modifier|*
name|ptr
init|=
operator|(
name|QChar
operator|*
operator|)
name|m_string
operator|.
name|constData
argument_list|()
decl_stmt|;
if|if
condition|(
name|m_offset
operator|!=
name|thisTarget
condition|)
name|memmove
argument_list|(
name|ptr
operator|+
name|thisTarget
argument_list|,
name|ptr
operator|+
name|m_offset
argument_list|,
name|m_length
operator|*
literal|2
argument_list|)
expr_stmt|;
name|ptr
operator|+=
name|extraTarget
expr_stmt|;
name|m_offset
operator|=
literal|0
expr_stmt|;
name|m_length
operator|+=
name|extraLen
expr_stmt|;
name|m_string
operator|.
name|resize
argument_list|(
name|m_length
argument_list|)
expr_stmt|;
name|m_hash
operator|=
literal|0x80000000
expr_stmt|;
return|return
name|ptr
return|;
block|}
else|else
block|{
name|QString
name|neu
argument_list|(
name|m_length
operator|+
name|extraLen
argument_list|,
name|Qt
operator|::
name|Uninitialized
argument_list|)
decl_stmt|;
name|QChar
modifier|*
name|ptr
init|=
operator|(
name|QChar
operator|*
operator|)
name|neu
operator|.
name|constData
argument_list|()
decl_stmt|;
name|memcpy
argument_list|(
name|ptr
operator|+
name|thisTarget
argument_list|,
name|m_string
operator|.
name|constData
argument_list|()
operator|+
name|m_offset
argument_list|,
name|m_length
operator|*
literal|2
argument_list|)
expr_stmt|;
name|ptr
operator|+=
name|extraTarget
expr_stmt|;
operator|*
name|this
operator|=
name|ProString
argument_list|(
name|neu
argument_list|)
expr_stmt|;
return|return
name|ptr
return|;
block|}
block|}
end_function
begin_function
DECL|function|prepend
name|ProString
modifier|&
name|ProString
operator|::
name|prepend
parameter_list|(
specifier|const
name|ProString
modifier|&
name|other
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|m_length
condition|)
block|{
if|if
condition|(
operator|!
name|m_length
condition|)
block|{
operator|*
name|this
operator|=
name|other
expr_stmt|;
block|}
else|else
block|{
name|QChar
modifier|*
name|ptr
init|=
name|prepareExtend
argument_list|(
name|other
operator|.
name|m_length
argument_list|,
name|other
operator|.
name|m_length
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|memcpy
argument_list|(
name|ptr
argument_list|,
name|other
operator|.
name|constData
argument_list|()
argument_list|,
name|other
operator|.
name|m_length
operator|*
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_file
condition|)
name|m_file
operator|=
name|other
operator|.
name|m_file
expr_stmt|;
block|}
block|}
return|return
operator|*
name|this
return|;
block|}
end_function
begin_function
DECL|function|append
name|ProString
modifier|&
name|ProString
operator|::
name|append
parameter_list|(
specifier|const
name|QLatin1String
name|other
parameter_list|)
block|{
specifier|const
name|char
modifier|*
name|latin1
init|=
name|other
operator|.
name|latin1
argument_list|()
decl_stmt|;
name|int
name|size
init|=
name|other
operator|.
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
name|size
condition|)
block|{
name|QChar
modifier|*
name|ptr
init|=
name|prepareExtend
argument_list|(
name|size
argument_list|,
literal|0
argument_list|,
name|m_length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
name|i
operator|++
control|)
operator|*
name|ptr
operator|++
operator|=
name|QLatin1Char
argument_list|(
name|latin1
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
return|return
operator|*
name|this
return|;
block|}
end_function
begin_function
DECL|function|append
name|ProString
modifier|&
name|ProString
operator|::
name|append
parameter_list|(
name|QChar
name|other
parameter_list|)
block|{
name|QChar
modifier|*
name|ptr
init|=
name|prepareExtend
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
name|m_length
argument_list|)
decl_stmt|;
operator|*
name|ptr
operator|=
name|other
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
end_function
begin_comment
comment|// If pending != 0, prefix with space if appending to non-empty non-pending
end_comment
begin_function
DECL|function|append
name|ProString
modifier|&
name|ProString
operator|::
name|append
parameter_list|(
specifier|const
name|ProString
modifier|&
name|other
parameter_list|,
name|bool
modifier|*
name|pending
parameter_list|)
block|{
if|if
condition|(
name|other
operator|.
name|m_length
condition|)
block|{
if|if
condition|(
operator|!
name|m_length
condition|)
block|{
operator|*
name|this
operator|=
name|other
expr_stmt|;
block|}
else|else
block|{
name|QChar
modifier|*
name|ptr
decl_stmt|;
if|if
condition|(
name|pending
operator|&&
operator|!
operator|*
name|pending
condition|)
block|{
name|ptr
operator|=
name|prepareExtend
argument_list|(
literal|1
operator|+
name|other
operator|.
name|m_length
argument_list|,
literal|0
argument_list|,
name|m_length
argument_list|)
expr_stmt|;
operator|*
name|ptr
operator|++
operator|=
literal|32
expr_stmt|;
block|}
else|else
block|{
name|ptr
operator|=
name|prepareExtend
argument_list|(
name|other
operator|.
name|m_length
argument_list|,
literal|0
argument_list|,
name|m_length
argument_list|)
expr_stmt|;
block|}
name|memcpy
argument_list|(
name|ptr
argument_list|,
name|other
operator|.
name|m_string
operator|.
name|constData
argument_list|()
operator|+
name|other
operator|.
name|m_offset
argument_list|,
name|other
operator|.
name|m_length
operator|*
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|other
operator|.
name|m_file
condition|)
name|m_file
operator|=
name|other
operator|.
name|m_file
expr_stmt|;
block|}
if|if
condition|(
name|pending
condition|)
operator|*
name|pending
operator|=
literal|true
expr_stmt|;
block|}
return|return
operator|*
name|this
return|;
block|}
end_function
begin_function
DECL|function|append
name|ProString
modifier|&
name|ProString
operator|::
name|append
parameter_list|(
specifier|const
name|ProStringList
modifier|&
name|other
parameter_list|,
name|bool
modifier|*
name|pending
parameter_list|,
name|bool
name|skipEmpty1st
parameter_list|)
block|{
if|if
condition|(
specifier|const
name|int
name|sz
init|=
name|other
operator|.
name|size
argument_list|()
condition|)
block|{
name|int
name|startIdx
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|pending
operator|&&
operator|!
operator|*
name|pending
operator|&&
name|skipEmpty1st
operator|&&
name|other
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|sz
operator|==
literal|1
condition|)
return|return
operator|*
name|this
return|;
name|startIdx
operator|=
literal|1
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|m_length
operator|&&
name|sz
operator|==
name|startIdx
operator|+
literal|1
condition|)
block|{
operator|*
name|this
operator|=
name|other
operator|.
name|at
argument_list|(
name|startIdx
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|totalLength
init|=
name|sz
operator|-
name|startIdx
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|startIdx
init|;
name|i
operator|<
name|sz
condition|;
operator|++
name|i
control|)
name|totalLength
operator|+=
name|other
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
name|bool
name|putSpace
init|=
literal|false
decl_stmt|;
if|if
condition|(
name|pending
operator|&&
operator|!
operator|*
name|pending
operator|&&
name|m_length
condition|)
name|putSpace
operator|=
literal|true
expr_stmt|;
else|else
name|totalLength
operator|--
expr_stmt|;
name|QChar
modifier|*
name|ptr
init|=
name|prepareExtend
argument_list|(
name|totalLength
argument_list|,
literal|0
argument_list|,
name|m_length
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|startIdx
init|;
name|i
operator|<
name|sz
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|putSpace
condition|)
operator|*
name|ptr
operator|++
operator|=
literal|32
expr_stmt|;
else|else
name|putSpace
operator|=
literal|true
expr_stmt|;
specifier|const
name|ProString
modifier|&
name|str
init|=
name|other
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|memcpy
argument_list|(
name|ptr
argument_list|,
name|str
operator|.
name|m_string
operator|.
name|constData
argument_list|()
operator|+
name|str
operator|.
name|m_offset
argument_list|,
name|str
operator|.
name|m_length
operator|*
literal|2
argument_list|)
expr_stmt|;
name|ptr
operator|+=
name|str
operator|.
name|m_length
expr_stmt|;
block|}
if|if
condition|(
name|other
operator|.
name|last
argument_list|()
operator|.
name|m_file
condition|)
name|m_file
operator|=
name|other
operator|.
name|last
argument_list|()
operator|.
name|m_file
expr_stmt|;
block|}
if|if
condition|(
name|pending
condition|)
operator|*
name|pending
operator|=
literal|true
expr_stmt|;
block|}
return|return
operator|*
name|this
return|;
block|}
end_function
begin_function
DECL|function|operator +
name|QString
name|operator
name|+
parameter_list|(
specifier|const
name|ProString
modifier|&
name|one
parameter_list|,
specifier|const
name|ProString
modifier|&
name|two
parameter_list|)
block|{
if|if
condition|(
name|two
operator|.
name|m_length
condition|)
block|{
if|if
condition|(
operator|!
name|one
operator|.
name|m_length
condition|)
block|{
return|return
name|two
operator|.
name|toQString
argument_list|()
return|;
block|}
else|else
block|{
name|QString
name|neu
argument_list|(
name|one
operator|.
name|m_length
operator|+
name|two
operator|.
name|m_length
argument_list|,
name|Qt
operator|::
name|Uninitialized
argument_list|)
decl_stmt|;
name|ushort
modifier|*
name|ptr
init|=
operator|(
name|ushort
operator|*
operator|)
name|neu
operator|.
name|constData
argument_list|()
decl_stmt|;
name|memcpy
argument_list|(
name|ptr
argument_list|,
name|one
operator|.
name|m_string
operator|.
name|constData
argument_list|()
operator|+
name|one
operator|.
name|m_offset
argument_list|,
name|one
operator|.
name|m_length
operator|*
literal|2
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|ptr
operator|+
name|one
operator|.
name|m_length
argument_list|,
name|two
operator|.
name|m_string
operator|.
name|constData
argument_list|()
operator|+
name|two
operator|.
name|m_offset
argument_list|,
name|two
operator|.
name|m_length
operator|*
literal|2
argument_list|)
expr_stmt|;
return|return
name|neu
return|;
block|}
block|}
return|return
name|one
operator|.
name|toQString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|mid
name|ProString
name|ProString
operator|::
name|mid
parameter_list|(
name|int
name|off
parameter_list|,
name|int
name|len
parameter_list|)
specifier|const
block|{
name|ProString
name|ret
argument_list|(
operator|*
name|this
argument_list|,
name|NoHash
argument_list|)
decl_stmt|;
if|if
condition|(
name|off
operator|>
name|m_length
condition|)
name|off
operator|=
name|m_length
expr_stmt|;
name|ret
operator|.
name|m_offset
operator|+=
name|off
expr_stmt|;
name|ret
operator|.
name|m_length
operator|-=
name|off
expr_stmt|;
if|if
condition|(
operator|(
name|uint
operator|)
name|ret
operator|.
name|m_length
operator|>
operator|(
name|uint
operator|)
name|len
condition|)
comment|// Unsigned comparison to interpret< 0 as infinite
name|ret
operator|.
name|m_length
operator|=
name|len
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|trimmed
name|ProString
name|ProString
operator|::
name|trimmed
parameter_list|()
specifier|const
block|{
name|ProString
name|ret
argument_list|(
operator|*
name|this
argument_list|,
name|NoHash
argument_list|)
decl_stmt|;
name|int
name|cur
init|=
name|m_offset
decl_stmt|;
name|int
name|end
init|=
name|cur
operator|+
name|m_length
decl_stmt|;
specifier|const
name|QChar
modifier|*
name|data
init|=
name|m_string
operator|.
name|constData
argument_list|()
decl_stmt|;
for|for
control|(
init|;
name|cur
operator|<
name|end
condition|;
name|cur
operator|++
control|)
if|if
condition|(
operator|!
name|data
index|[
name|cur
index|]
operator|.
name|isSpace
argument_list|()
condition|)
block|{
comment|// No underrun check - we know there is at least one non-whitespace
while|while
condition|(
name|data
index|[
name|end
operator|-
literal|1
index|]
operator|.
name|isSpace
argument_list|()
condition|)
name|end
operator|--
expr_stmt|;
break|break;
block|}
name|ret
operator|.
name|m_offset
operator|=
name|cur
expr_stmt|;
name|ret
operator|.
name|m_length
operator|=
name|end
operator|-
name|cur
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|operator <<
name|QTextStream
modifier|&
name|operator
name|<<
parameter_list|(
name|QTextStream
modifier|&
name|t
parameter_list|,
specifier|const
name|ProString
modifier|&
name|str
parameter_list|)
block|{
name|t
operator|<<
name|str
operator|.
name|toQString
argument_list|()
expr_stmt|;
comment|// XXX optimize ... somehow
return|return
name|t
return|;
block|}
end_function
begin_function
DECL|function|ProStringList_join
specifier|static
name|QString
name|ProStringList_join
parameter_list|(
specifier|const
name|ProStringList
modifier|&
name|this_
parameter_list|,
specifier|const
name|QChar
modifier|*
name|sep
parameter_list|,
specifier|const
name|int
name|sepSize
parameter_list|)
block|{
name|int
name|totalLength
init|=
literal|0
decl_stmt|;
specifier|const
name|int
name|sz
init|=
name|this_
operator|.
name|size
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
operator|++
name|i
control|)
name|totalLength
operator|+=
name|this_
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|sz
condition|)
name|totalLength
operator|+=
name|sepSize
operator|*
operator|(
name|sz
operator|-
literal|1
operator|)
expr_stmt|;
name|QString
name|res
argument_list|(
name|totalLength
argument_list|,
name|Qt
operator|::
name|Uninitialized
argument_list|)
decl_stmt|;
name|QChar
modifier|*
name|ptr
init|=
operator|(
name|QChar
operator|*
operator|)
name|res
operator|.
name|constData
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sz
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
condition|)
block|{
name|memcpy
argument_list|(
name|ptr
argument_list|,
name|sep
argument_list|,
name|sepSize
operator|*
sizeof|sizeof
argument_list|(
name|QChar
argument_list|)
argument_list|)
expr_stmt|;
name|ptr
operator|+=
name|sepSize
expr_stmt|;
block|}
specifier|const
name|ProString
modifier|&
name|str
init|=
name|this_
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|memcpy
argument_list|(
name|ptr
argument_list|,
name|str
operator|.
name|constData
argument_list|()
argument_list|,
name|str
operator|.
name|size
argument_list|()
operator|*
sizeof|sizeof
argument_list|(
name|QChar
argument_list|)
argument_list|)
expr_stmt|;
name|ptr
operator|+=
name|str
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
return|return
name|res
return|;
block|}
end_function
begin_function
DECL|function|join
name|QString
name|ProStringList
operator|::
name|join
parameter_list|(
specifier|const
name|QString
modifier|&
name|sep
parameter_list|)
specifier|const
block|{
return|return
name|ProStringList_join
argument_list|(
operator|*
name|this
argument_list|,
name|sep
operator|.
name|constData
argument_list|()
argument_list|,
name|sep
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|join
name|QString
name|ProStringList
operator|::
name|join
parameter_list|(
name|QChar
name|sep
parameter_list|)
specifier|const
block|{
return|return
name|ProStringList_join
argument_list|(
operator|*
name|this
argument_list|,
operator|&
name|sep
argument_list|,
literal|1
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|removeAll
name|void
name|ProStringList
operator|::
name|removeAll
parameter_list|(
specifier|const
name|ProString
modifier|&
name|str
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|size
argument_list|()
init|;
operator|--
name|i
operator|>=
literal|0
condition|;
control|)
if|if
condition|(
name|at
argument_list|(
name|i
argument_list|)
operator|==
name|str
condition|)
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeAll
name|void
name|ProStringList
operator|::
name|removeAll
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
name|size
argument_list|()
init|;
operator|--
name|i
operator|>=
literal|0
condition|;
control|)
if|if
condition|(
name|at
argument_list|(
name|i
argument_list|)
operator|==
name|str
condition|)
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeEach
name|void
name|ProStringList
operator|::
name|removeEach
parameter_list|(
specifier|const
name|ProStringList
modifier|&
name|value
parameter_list|)
block|{
foreach|foreach
control|(
specifier|const
name|ProString
modifier|&
name|str
decl|,
name|value
control|)
if|if
condition|(
operator|!
name|str
operator|.
name|isEmpty
argument_list|()
condition|)
name|removeAll
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeEmpty
name|void
name|ProStringList
operator|::
name|removeEmpty
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
name|size
argument_list|()
init|;
operator|--
name|i
operator|>=
literal|0
condition|;
control|)
if|if
condition|(
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
name|remove
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeDuplicates
name|void
name|ProStringList
operator|::
name|removeDuplicates
parameter_list|()
block|{
name|int
name|n
init|=
name|size
argument_list|()
decl_stmt|;
name|int
name|j
init|=
literal|0
decl_stmt|;
name|QSet
argument_list|<
name|ProString
argument_list|>
name|seen
decl_stmt|;
name|seen
operator|.
name|reserve
argument_list|(
name|n
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|n
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|ProString
modifier|&
name|s
init|=
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|seen
operator|.
name|contains
argument_list|(
name|s
argument_list|)
condition|)
continue|continue;
name|seen
operator|.
name|insert
argument_list|(
name|s
argument_list|)
expr_stmt|;
if|if
condition|(
name|j
operator|!=
name|i
condition|)
operator|(
operator|*
name|this
operator|)
index|[
name|j
index|]
operator|=
name|s
expr_stmt|;
operator|++
name|j
expr_stmt|;
block|}
if|if
condition|(
name|n
operator|!=
name|j
condition|)
name|erase
argument_list|(
name|begin
argument_list|()
operator|+
name|j
argument_list|,
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insertUnique
name|void
name|ProStringList
operator|::
name|insertUnique
parameter_list|(
specifier|const
name|ProStringList
modifier|&
name|value
parameter_list|)
block|{
foreach|foreach
control|(
specifier|const
name|ProString
modifier|&
name|str
decl|,
name|value
control|)
if|if
condition|(
operator|!
name|str
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|contains
argument_list|(
name|str
argument_list|)
condition|)
name|append
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|ProStringList
name|ProStringList
operator|::
name|ProStringList
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|list
parameter_list|)
block|{
name|reserve
argument_list|(
name|list
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|str
decl|,
name|list
control|)
operator|*
name|this
operator|<<
name|ProString
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|toQStringList
name|QStringList
name|ProStringList
operator|::
name|toQStringList
parameter_list|()
specifier|const
block|{
name|QStringList
name|ret
decl_stmt|;
name|ret
operator|.
name|reserve
argument_list|(
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
comment|// foreach causes MSVC2010 ICE
name|ret
operator|<<
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toQString
argument_list|()
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|contains
name|bool
name|ProStringList
operator|::
name|contains
parameter_list|(
specifier|const
name|ProString
modifier|&
name|str
parameter_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
parameter_list|)
specifier|const
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
if|if
condition|(
operator|!
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|compare
argument_list|(
name|str
argument_list|,
name|cs
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|contains
name|bool
name|ProStringList
operator|::
name|contains
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
parameter_list|)
specifier|const
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
if|if
condition|(
operator|!
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|compare
argument_list|(
name|str
argument_list|,
name|cs
argument_list|)
condition|)
return|return
literal|true
return|;
return|return
literal|false
return|;
block|}
end_function
begin_constructor
DECL|function|ProFile
name|ProFile
operator|::
name|ProFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
member_init_list|:
name|m_refCount
argument_list|(
literal|1
argument_list|)
member_init_list|,
name|m_fileName
argument_list|(
name|fileName
argument_list|)
member_init_list|,
name|m_ok
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|m_hostBuild
argument_list|(
literal|false
argument_list|)
block|{
if|if
condition|(
operator|!
name|fileName
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'('
argument_list|)
argument_list|)
condition|)
name|m_directoryName
operator|=
name|QFileInfo
argument_list|(
comment|// qmake sickness: canonicalize only the directory!
name|fileName
operator|.
name|left
argument_list|(
name|fileName
operator|.
name|lastIndexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
argument_list|)
argument_list|)
operator|.
name|canonicalFilePath
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~ProFile
name|ProFile
operator|::
name|~
name|ProFile
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|getStr
name|ProString
name|ProFile
operator|::
name|getStr
parameter_list|(
specifier|const
name|ushort
modifier|*
modifier|&
name|tPtr
parameter_list|)
block|{
name|uint
name|len
init|=
operator|*
name|tPtr
operator|++
decl_stmt|;
name|ProString
name|ret
argument_list|(
name|items
argument_list|()
argument_list|,
name|tPtr
operator|-
name|tokPtr
argument_list|()
argument_list|,
name|len
argument_list|)
decl_stmt|;
name|ret
operator|.
name|setSource
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|tPtr
operator|+=
name|len
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|getHashStr
name|ProKey
name|ProFile
operator|::
name|getHashStr
parameter_list|(
specifier|const
name|ushort
modifier|*
modifier|&
name|tPtr
parameter_list|)
block|{
name|uint
name|hash
init|=
operator|*
name|tPtr
operator|++
decl_stmt|;
name|hash
operator||=
operator|(
name|uint
operator|)
operator|*
name|tPtr
operator|++
operator|<<
literal|16
expr_stmt|;
name|uint
name|len
init|=
operator|*
name|tPtr
operator|++
decl_stmt|;
name|ProKey
name|ret
argument_list|(
name|items
argument_list|()
argument_list|,
name|tPtr
operator|-
name|tokPtr
argument_list|()
argument_list|,
name|len
argument_list|,
name|hash
argument_list|)
decl_stmt|;
name|tPtr
operator|+=
name|len
expr_stmt|;
return|return
name|ret
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
