begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the qmake application of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|PROITEMS_H
end_ifndef
begin_define
DECL|macro|PROITEMS_H
define|#
directive|define
name|PROITEMS_H
end_define
begin_include
include|#
directive|include
file|"qmake_global.h"
end_include
begin_include
include|#
directive|include
file|<QString>
end_include
begin_include
include|#
directive|include
file|<QStringList>
end_include
begin_include
include|#
directive|include
file|<QHash>
end_include
begin_include
include|#
directive|include
file|<QTextStream>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
if|#
directive|if
literal|0
define|#
directive|define
name|PROITEM_EXPLICIT
value|explicit
else|#
directive|else
DECL|macro|PROITEM_EXPLICIT
define|#
directive|define
name|PROITEM_EXPLICIT
endif|#
directive|endif
DECL|variable|ProKey
name|class
name|ProKey
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ProStringList
name|class
name|ProStringList
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|ProString
block|{
name|public
label|:
name|ProString
argument_list|()
block|{}
name|ProString
argument_list|(
specifier|const
name|ProString
operator|&
name|other
argument_list|)
operator|:
name|m_string
argument_list|(
argument|other.m_string
argument_list|)
block|{}
name|PROITEM_EXPLICIT
name|ProString
argument_list|(
specifier|const
name|QString
operator|&
name|str
argument_list|)
operator|:
name|m_string
argument_list|(
argument|str
argument_list|)
block|{}
name|PROITEM_EXPLICIT
name|ProString
argument_list|(
specifier|const
name|char
operator|*
name|str
argument_list|)
operator|:
name|m_string
argument_list|(
argument|QLatin1String(str)
argument_list|)
block|{}
name|void
name|clear
argument_list|()
block|{
name|m_string
operator|.
name|clear
argument_list|()
block|; }
name|ProString
operator|&
name|prepend
argument_list|(
argument|const ProString&other
argument_list|)
block|{
name|m_string
operator|.
name|prepend
argument_list|(
name|other
operator|.
name|m_string
argument_list|)
block|;
return|return
operator|*
name|this
return|;
block|}
name|ProString
modifier|&
name|append
parameter_list|(
specifier|const
name|ProString
modifier|&
name|other
parameter_list|)
block|{
name|m_string
operator|.
name|append
argument_list|(
name|other
operator|.
name|m_string
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|ProString
modifier|&
name|append
parameter_list|(
specifier|const
name|QString
modifier|&
name|other
parameter_list|)
block|{
name|m_string
operator|.
name|append
argument_list|(
name|other
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|ProString
modifier|&
name|append
parameter_list|(
specifier|const
name|char
modifier|*
name|other
parameter_list|)
block|{
name|m_string
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
name|other
argument_list|)
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|ProString
modifier|&
name|append
parameter_list|(
name|QChar
name|other
parameter_list|)
block|{
name|m_string
operator|.
name|append
argument_list|(
name|other
argument_list|)
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|ProString
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|ProString
operator|&
name|other
operator|)
block|{
return|return
name|append
argument_list|(
name|other
argument_list|)
return|;
block|}
name|ProString
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|QString
operator|&
name|other
operator|)
block|{
return|return
name|append
argument_list|(
name|other
argument_list|)
return|;
block|}
name|ProString
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|char
operator|*
name|other
operator|)
block|{
return|return
name|append
argument_list|(
name|other
argument_list|)
return|;
block|}
name|ProString
operator|&
name|operator
operator|+=
operator|(
name|QChar
name|other
operator|)
block|{
return|return
name|append
argument_list|(
name|other
argument_list|)
return|;
block|}
name|void
name|chop
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|m_string
operator|.
name|chop
argument_list|(
name|n
argument_list|)
expr_stmt|;
block|}
name|void
name|chopFront
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|m_string
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
name|n
argument_list|)
expr_stmt|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|ProString
operator|&
name|other
operator|)
specifier|const
block|{
return|return
name|toQStringRef
argument_list|()
operator|==
name|other
operator|.
name|toQStringRef
argument_list|()
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QString
operator|&
name|other
operator|)
specifier|const
block|{
return|return
name|toQStringRef
argument_list|()
operator|==
name|other
return|;
block|}
name|bool
name|operator
operator|==
operator|(
name|QLatin1String
name|other
operator|)
specifier|const
block|{
return|return
name|toQStringRef
argument_list|()
operator|==
name|other
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|char
operator|*
name|other
operator|)
specifier|const
block|{
return|return
name|toQStringRef
argument_list|()
operator|==
name|QLatin1String
argument_list|(
name|other
argument_list|)
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|ProString
operator|&
name|other
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|other
operator|)
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QString
operator|&
name|other
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|other
operator|)
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
name|QLatin1String
name|other
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|other
operator|)
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|char
operator|*
name|other
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|other
operator|)
return|;
block|}
name|bool
name|isNull
argument_list|()
specifier|const
block|{
return|return
name|m_string
operator|.
name|isNull
argument_list|()
return|;
block|}
name|bool
name|isEmpty
argument_list|()
specifier|const
block|{
return|return
name|m_string
operator|.
name|isEmpty
argument_list|()
return|;
block|}
name|int
name|length
argument_list|()
specifier|const
block|{
return|return
name|m_string
operator|.
name|size
argument_list|()
return|;
block|}
name|int
name|size
argument_list|()
specifier|const
block|{
return|return
name|m_string
operator|.
name|size
argument_list|()
return|;
block|}
name|QChar
name|at
argument_list|(
name|int
name|i
argument_list|)
decl|const
block|{
return|return
name|m_string
operator|.
name|at
argument_list|(
name|i
argument_list|)
return|;
block|}
specifier|const
name|QChar
operator|*
name|constData
argument_list|()
specifier|const
block|{
return|return
name|m_string
operator|.
name|constData
argument_list|()
return|;
block|}
name|ProString
name|mid
argument_list|(
name|int
name|off
argument_list|,
name|int
name|len
operator|=
operator|-
literal|1
argument_list|)
decl|const
block|{
return|return
name|m_string
operator|.
name|mid
argument_list|(
name|off
argument_list|,
name|len
argument_list|)
return|;
block|}
name|ProString
name|left
argument_list|(
name|int
name|len
argument_list|)
decl|const
block|{
return|return
name|mid
argument_list|(
literal|0
argument_list|,
name|len
argument_list|)
return|;
block|}
name|ProString
name|right
argument_list|(
name|int
name|len
argument_list|)
decl|const
block|{
return|return
name|mid
argument_list|(
name|qMax
argument_list|(
literal|0
argument_list|,
name|size
argument_list|()
operator|-
name|len
argument_list|)
argument_list|)
return|;
block|}
name|ProString
name|trimmed
argument_list|()
specifier|const
block|{
return|return
name|m_string
operator|.
name|trimmed
argument_list|()
return|;
block|}
name|int
name|compare
argument_list|(
specifier|const
name|ProString
operator|&
name|sub
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
block|{
return|return
name|toQStringRef
argument_list|()
operator|.
name|compare
argument_list|(
name|sub
operator|.
name|toQStringRef
argument_list|()
argument_list|,
name|cs
argument_list|)
return|;
block|}
name|int
name|compare
argument_list|(
specifier|const
name|QString
operator|&
name|sub
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
block|{
return|return
name|toQStringRef
argument_list|()
operator|.
name|compare
argument_list|(
name|sub
argument_list|,
name|cs
argument_list|)
return|;
block|}
name|int
name|compare
argument_list|(
specifier|const
name|char
operator|*
name|sub
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
block|{
return|return
name|toQStringRef
argument_list|()
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
name|sub
argument_list|)
argument_list|,
name|cs
argument_list|)
return|;
block|}
name|bool
name|startsWith
argument_list|(
specifier|const
name|ProString
operator|&
name|sub
argument_list|)
decl|const
block|{
return|return
name|toQStringRef
argument_list|()
operator|.
name|startsWith
argument_list|(
name|sub
operator|.
name|toQStringRef
argument_list|()
argument_list|)
return|;
block|}
name|bool
name|startsWith
argument_list|(
specifier|const
name|QString
operator|&
name|sub
argument_list|)
decl|const
block|{
return|return
name|toQStringRef
argument_list|()
operator|.
name|startsWith
argument_list|(
name|sub
argument_list|)
return|;
block|}
name|bool
name|startsWith
argument_list|(
specifier|const
name|char
operator|*
name|sub
argument_list|)
decl|const
block|{
return|return
name|toQStringRef
argument_list|()
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
name|sub
argument_list|)
argument_list|)
return|;
block|}
name|bool
name|startsWith
argument_list|(
name|QChar
name|c
argument_list|)
decl|const
block|{
return|return
name|toQStringRef
argument_list|()
operator|.
name|startsWith
argument_list|(
name|c
argument_list|)
return|;
block|}
name|bool
name|endsWith
argument_list|(
specifier|const
name|ProString
operator|&
name|sub
argument_list|)
decl|const
block|{
return|return
name|toQStringRef
argument_list|()
operator|.
name|endsWith
argument_list|(
name|sub
operator|.
name|toQStringRef
argument_list|()
argument_list|)
return|;
block|}
name|bool
name|endsWith
argument_list|(
specifier|const
name|QString
operator|&
name|sub
argument_list|)
decl|const
block|{
return|return
name|toQStringRef
argument_list|()
operator|.
name|endsWith
argument_list|(
name|sub
argument_list|)
return|;
block|}
name|bool
name|endsWith
argument_list|(
specifier|const
name|char
operator|*
name|sub
argument_list|)
decl|const
block|{
return|return
name|toQStringRef
argument_list|()
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
name|sub
argument_list|)
argument_list|)
return|;
block|}
name|bool
name|endsWith
argument_list|(
name|QChar
name|c
argument_list|)
decl|const
block|{
return|return
name|toQStringRef
argument_list|()
operator|.
name|endsWith
argument_list|(
name|c
argument_list|)
return|;
block|}
name|int
name|indexOf
argument_list|(
specifier|const
name|QString
operator|&
name|s
argument_list|,
name|int
name|from
operator|=
literal|0
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
block|{
return|return
name|toQStringRef
argument_list|()
operator|.
name|indexOf
argument_list|(
name|s
argument_list|,
name|from
argument_list|,
name|cs
argument_list|)
return|;
block|}
name|int
name|indexOf
argument_list|(
specifier|const
name|char
operator|*
name|s
argument_list|,
name|int
name|from
operator|=
literal|0
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
block|{
return|return
name|toQStringRef
argument_list|()
operator|.
name|indexOf
argument_list|(
name|QLatin1String
argument_list|(
name|s
argument_list|)
argument_list|,
name|from
argument_list|,
name|cs
argument_list|)
return|;
block|}
name|int
name|indexOf
argument_list|(
name|QChar
name|c
argument_list|,
name|int
name|from
operator|=
literal|0
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
block|{
return|return
name|toQStringRef
argument_list|()
operator|.
name|indexOf
argument_list|(
name|c
argument_list|,
name|from
argument_list|,
name|cs
argument_list|)
return|;
block|}
name|int
name|lastIndexOf
argument_list|(
specifier|const
name|QString
operator|&
name|s
argument_list|,
name|int
name|from
operator|=
operator|-
literal|1
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
block|{
return|return
name|toQStringRef
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
name|s
argument_list|,
name|from
argument_list|,
name|cs
argument_list|)
return|;
block|}
name|int
name|lastIndexOf
argument_list|(
specifier|const
name|char
operator|*
name|s
argument_list|,
name|int
name|from
operator|=
operator|-
literal|1
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
block|{
return|return
name|toQStringRef
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
name|QLatin1String
argument_list|(
name|s
argument_list|)
argument_list|,
name|from
argument_list|,
name|cs
argument_list|)
return|;
block|}
name|int
name|lastIndexOf
argument_list|(
name|QChar
name|c
argument_list|,
name|int
name|from
operator|=
operator|-
literal|1
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
block|{
return|return
name|toQStringRef
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
name|c
argument_list|,
name|from
argument_list|,
name|cs
argument_list|)
return|;
block|}
name|bool
name|contains
argument_list|(
specifier|const
name|QString
operator|&
name|s
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
block|{
return|return
name|indexOf
argument_list|(
name|s
argument_list|,
literal|0
argument_list|,
name|cs
argument_list|)
operator|>=
literal|0
return|;
block|}
name|bool
name|contains
argument_list|(
specifier|const
name|char
operator|*
name|s
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
block|{
return|return
name|indexOf
argument_list|(
name|QLatin1String
argument_list|(
name|s
argument_list|)
argument_list|,
literal|0
argument_list|,
name|cs
argument_list|)
operator|>=
literal|0
return|;
block|}
name|bool
name|contains
argument_list|(
name|QChar
name|c
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
block|{
return|return
name|indexOf
argument_list|(
name|c
argument_list|,
literal|0
argument_list|,
name|cs
argument_list|)
operator|>=
literal|0
return|;
block|}
name|int
name|toInt
argument_list|(
name|bool
operator|*
name|ok
operator|=
literal|0
argument_list|)
decl|const
block|{
return|return
name|toQString
argument_list|()
operator|.
name|toInt
argument_list|(
name|ok
argument_list|)
return|;
block|}
comment|// XXX optimize
name|short
name|toShort
argument_list|(
name|bool
operator|*
name|ok
operator|=
literal|0
argument_list|)
decl|const
block|{
return|return
name|toQString
argument_list|()
operator|.
name|toShort
argument_list|(
name|ok
argument_list|)
return|;
block|}
comment|// XXX optimize
name|ALWAYS_INLINE
name|QStringRef
name|toQStringRef
argument_list|()
specifier|const
block|{
return|return
name|QStringRef
argument_list|(
operator|&
name|m_string
argument_list|,
literal|0
argument_list|,
name|m_string
operator|.
name|length
argument_list|()
argument_list|)
return|;
block|}
name|ALWAYS_INLINE
name|ProKey
modifier|&
name|toKey
parameter_list|()
block|{
return|return
operator|*
operator|(
name|ProKey
operator|*
operator|)
name|this
return|;
block|}
name|ALWAYS_INLINE
specifier|const
name|ProKey
operator|&
name|toKey
argument_list|()
specifier|const
block|{
return|return
operator|*
operator|(
specifier|const
name|ProKey
operator|*
operator|)
name|this
return|;
block|}
name|QString
name|toQString
argument_list|()
specifier|const
block|{
return|return
name|m_string
return|;
block|}
name|QByteArray
name|toLatin1
argument_list|()
specifier|const
block|{
return|return
name|toQStringRef
argument_list|()
operator|.
name|toLatin1
argument_list|()
return|;
block|}
name|private
label|:
name|ProString
argument_list|(
specifier|const
name|ProKey
operator|&
name|other
argument_list|)
expr_stmt|;
name|ProString
modifier|&
name|operator
init|=
operator|(
specifier|const
name|ProKey
operator|&
name|other
operator|)
decl_stmt|;
name|QString
name|m_string
decl_stmt|;
name|friend
name|uint
name|qHash
parameter_list|(
specifier|const
name|ProKey
modifier|&
name|str
parameter_list|,
name|uint
name|seed
parameter_list|)
function_decl|;
name|friend
name|QString
name|operator
operator|+
operator|(
specifier|const
name|ProString
operator|&
name|one
operator|,
specifier|const
name|ProString
operator|&
name|two
operator|)
expr_stmt|;
name|friend
name|QString
operator|&
name|operator
operator|+=
operator|(
name|QString
operator|&
name|that
operator|,
specifier|const
name|ProString
operator|&
name|other
operator|)
expr_stmt|;
name|friend
name|class
name|ProKey
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|Q_DECLARE_TYPEINFO
argument_list|(
name|ProString
argument_list|,
name|Q_MOVABLE_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|class
name|ProKey
range|:
name|public
name|ProString
block|{
name|public
operator|:
name|ALWAYS_INLINE
name|ProKey
argument_list|()
operator|:
name|ProString
argument_list|()
block|{}
name|explicit
name|ProKey
argument_list|(
specifier|const
name|QString
operator|&
name|str
argument_list|)
operator|:
name|ProString
argument_list|(
argument|str
argument_list|)
block|{}
name|PROITEM_EXPLICIT
name|ProKey
argument_list|(
specifier|const
name|char
operator|*
name|str
argument_list|)
operator|:
name|ProString
argument_list|(
argument|str
argument_list|)
block|{}
ifdef|#
directive|ifdef
name|Q_CC_MSVC
comment|// Workaround strange MSVC behaviour when exporting classes with ProKey members.
name|ALWAYS_INLINE
name|ProKey
argument_list|(
specifier|const
name|ProKey
operator|&
name|other
argument_list|)
operator|:
name|ProString
argument_list|(
argument|other.toString()
argument_list|)
block|{}
name|ALWAYS_INLINE
name|ProKey
operator|&
name|operator
operator|=
operator|(
specifier|const
name|ProKey
operator|&
name|other
operator|)
block|{
name|toString
argument_list|()
operator|=
name|other
operator|.
name|toString
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
endif|#
directive|endif
name|ALWAYS_INLINE
name|ProString
operator|&
name|toString
argument_list|()
block|{
return|return
operator|*
operator|(
name|ProString
operator|*
operator|)
name|this
return|;
block|}
name|ALWAYS_INLINE
specifier|const
name|ProString
operator|&
name|toString
argument_list|()
specifier|const
block|{
return|return
operator|*
operator|(
specifier|const
name|ProString
operator|*
operator|)
name|this
return|;
block|}
name|private
operator|:
name|ProKey
argument_list|(
specifier|const
name|ProString
operator|&
name|other
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|Q_DECLARE_TYPEINFO
argument_list|(
name|ProKey
argument_list|,
name|Q_MOVABLE_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function
DECL|function|qHash
specifier|inline
name|uint
name|qHash
parameter_list|(
specifier|const
name|ProKey
modifier|&
name|key
parameter_list|,
name|uint
name|seed
init|=
literal|0
parameter_list|)
block|{
return|return
name|qHash
argument_list|(
name|key
operator|.
name|m_string
argument_list|,
name|seed
argument_list|)
return|;
block|}
end_function
begin_expr_stmt
DECL|function|operator
specifier|inline
name|QString
name|operator
operator|+
operator|(
specifier|const
name|ProString
operator|&
name|one
operator|,
specifier|const
name|ProString
operator|&
name|two
operator|)
block|{
return|return
name|one
operator|.
name|m_string
operator|+
name|two
operator|.
name|m_string
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
specifier|inline
name|QString
name|operator
operator|+
operator|(
specifier|const
name|ProString
operator|&
name|one
operator|,
specifier|const
name|QString
operator|&
name|two
operator|)
block|{
return|return
name|one
operator|+
name|ProString
argument_list|(
name|two
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
specifier|inline
name|QString
name|operator
operator|+
operator|(
specifier|const
name|QString
operator|&
name|one
operator|,
specifier|const
name|ProString
operator|&
name|two
operator|)
block|{
return|return
name|ProString
argument_list|(
name|one
argument_list|)
operator|+
name|two
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
specifier|inline
name|QString
name|operator
operator|+
operator|(
specifier|const
name|ProString
operator|&
name|one
operator|,
specifier|const
name|char
operator|*
name|two
operator|)
block|{
return|return
name|one
operator|+
name|ProString
argument_list|(
name|two
argument_list|)
return|;
block|}
end_expr_stmt
begin_comment
comment|// XXX optimize
end_comment
begin_expr_stmt
DECL|function|operator
specifier|inline
name|QString
name|operator
operator|+
operator|(
specifier|const
name|char
operator|*
name|one
operator|,
specifier|const
name|ProString
operator|&
name|two
operator|)
block|{
return|return
name|ProString
argument_list|(
name|one
argument_list|)
operator|+
name|two
return|;
block|}
end_expr_stmt
begin_comment
comment|// XXX optimize
end_comment
begin_expr_stmt
DECL|variable|operator
specifier|inline
name|QString
operator|&
name|operator
operator|+=
operator|(
name|QString
operator|&
name|that
operator|,
specifier|const
name|ProString
operator|&
name|other
operator|)
block|{
return|return
name|that
operator|+=
name|other
operator|.
name|toQStringRef
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QString
operator|&
name|that
operator|,
specifier|const
name|ProString
operator|&
name|other
operator|)
block|{
return|return
name|other
operator|==
name|that
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QString
operator|&
name|that
operator|,
specifier|const
name|ProString
operator|&
name|other
operator|)
block|{
return|return
operator|!
operator|(
name|other
operator|==
name|that
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|QTextStream
operator|&
name|operator
operator|<<
operator|(
name|QTextStream
operator|&
name|t
operator|,
specifier|const
name|ProString
operator|&
name|str
operator|)
block|{
name|t
operator|<<
name|str
operator|.
name|toQString
argument_list|()
block|;
return|return
name|t
return|;
block|}
end_expr_stmt
begin_decl_stmt
name|class
name|ProStringList
range|:
name|public
name|QList
operator|<
name|ProString
operator|>
block|{
name|public
operator|:
name|ProStringList
argument_list|()
block|{}
name|ProStringList
argument_list|(
argument|const ProString&str
argument_list|)
block|{
operator|*
name|this
operator|<<
name|str
block|; }
name|explicit
name|ProStringList
argument_list|(
specifier|const
name|QStringList
operator|&
name|list
argument_list|)
operator|:
name|QList
operator|<
name|ProString
operator|>
operator|(
operator|*
operator|(
specifier|const
name|ProStringList
operator|*
operator|)
operator|&
name|list
operator|)
block|{}
name|QStringList
name|toQStringList
argument_list|()
specifier|const
block|{
return|return
operator|*
operator|(
specifier|const
name|QStringList
operator|*
operator|)
name|this
return|;
block|}
name|ProStringList
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|ProString
operator|&
name|str
operator|)
block|{
name|QList
operator|<
name|ProString
operator|>
operator|::
name|operator
operator|<<
operator|(
name|str
operator|)
block|;
return|return
operator|*
name|this
return|;
block|}
name|QString
name|join
argument_list|(
argument|const QString&sep
argument_list|)
specifier|const
block|{
return|return
name|toQStringList
argument_list|()
operator|.
name|join
argument_list|(
name|sep
argument_list|)
return|;
block|}
name|void
name|remove
argument_list|(
argument|int idx
argument_list|)
block|{
name|removeAt
argument_list|(
name|idx
argument_list|)
block|; }
name|bool
name|contains
argument_list|(
argument|const ProString&str
argument_list|,
argument|Qt::CaseSensitivity cs = Qt::CaseSensitive
argument_list|)
specifier|const
block|{
return|return
name|contains
argument_list|(
name|str
operator|.
name|toQString
argument_list|()
argument_list|,
name|cs
argument_list|)
return|;
block|}
name|bool
name|contains
argument_list|(
argument|const QString&str
argument_list|,
argument|Qt::CaseSensitivity cs = Qt::CaseSensitive
argument_list|)
specifier|const
block|{
return|return
operator|(
operator|*
operator|(
specifier|const
name|QStringList
operator|*
operator|)
name|this
operator|)
operator|.
name|contains
argument_list|(
name|str
argument_list|,
name|cs
argument_list|)
return|;
block|}
name|bool
name|contains
argument_list|(
argument|const char *str
argument_list|,
argument|Qt::CaseSensitivity cs = Qt::CaseSensitive
argument_list|)
specifier|const
block|{
return|return
operator|(
operator|*
operator|(
specifier|const
name|QStringList
operator|*
operator|)
name|this
operator|)
operator|.
name|contains
argument_list|(
name|str
argument_list|,
name|cs
argument_list|)
return|;
block|}
expr|}
block|;
name|Q_DECLARE_TYPEINFO
argument_list|(
name|ProStringList
argument_list|,
name|Q_MOVABLE_TYPE
argument_list|)
block|;
DECL|function|operator
specifier|inline
name|ProStringList
name|operator
operator|+
operator|(
specifier|const
name|ProStringList
operator|&
name|one
expr|,
specifier|const
name|ProStringList
operator|&
name|two
operator|)
block|{
name|ProStringList
name|ret
operator|=
name|one
block|;
name|ret
operator|+=
name|two
block|;
return|return
name|ret
return|;
block|}
DECL|typedef|ProKey
DECL|typedef|ProValueMap
typedef|typedef
name|QHash
operator|<
name|ProKey
operator|,
name|ProStringList
operator|>
name|ProValueMap
expr_stmt|;
name|QT_END_NAMESPACE
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// PROITEMS_H
end_comment
end_unit
