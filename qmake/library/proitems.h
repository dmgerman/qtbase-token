begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the qmake application of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|PROITEMS_H
end_ifndef
begin_define
DECL|macro|PROITEMS_H
define|#
directive|define
name|PROITEMS_H
end_define
begin_include
include|#
directive|include
file|"qmake_global.h"
end_include
begin_include
include|#
directive|include
file|<qstring.h>
end_include
begin_include
include|#
directive|include
file|<qvector.h>
end_include
begin_include
include|#
directive|include
file|<qhash.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QTextStream
name|class
name|QTextStream
decl_stmt|;
end_decl_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|PROPARSER_THREAD_SAFE
end_ifdef
begin_typedef
DECL|typedef|ProItemRefCount
typedef|typedef
name|QAtomicInt
name|ProItemRefCount
typedef|;
end_typedef
begin_else
else|#
directive|else
end_else
begin_decl_stmt
name|class
name|ProItemRefCount
block|{
name|public
label|:
name|ProItemRefCount
argument_list|(
argument|int cnt =
literal|0
argument_list|)
block|:
name|m_cnt
argument_list|(
argument|cnt
argument_list|)
block|{}
name|bool
name|ref
parameter_list|()
block|{
return|return
operator|++
name|m_cnt
operator|!=
literal|0
return|;
block|}
name|bool
name|deref
parameter_list|()
block|{
return|return
operator|--
name|m_cnt
operator|!=
literal|0
return|;
block|}
name|ProItemRefCount
modifier|&
name|operator
init|=
operator|(
name|int
name|value
operator|)
block|{
name|m_cnt
operator|=
name|value
block|;
return|return
operator|*
name|this
return|;
block|}
name|private
label|:
name|int
name|m_cnt
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_BUILD_QMAKE
end_ifndef
begin_define
DECL|macro|PROITEM_EXPLICIT
define|#
directive|define
name|PROITEM_EXPLICIT
value|explicit
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|PROITEM_EXPLICIT
define|#
directive|define
name|PROITEM_EXPLICIT
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
DECL|variable|ProKey
name|class
name|ProKey
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ProStringList
name|class
name|ProStringList
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|ProFile
name|class
name|ProFile
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|ProString
block|{
name|public
label|:
name|ProString
argument_list|()
expr_stmt|;
name|ProString
argument_list|(
specifier|const
name|ProString
operator|&
name|other
argument_list|)
expr_stmt|;
name|PROITEM_EXPLICIT
name|ProString
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|)
function_decl|;
name|PROITEM_EXPLICIT
name|ProString
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|)
function_decl|;
name|ProString
argument_list|(
argument|const QString&str
argument_list|,
argument|int offset
argument_list|,
argument|int length
argument_list|)
empty_stmt|;
name|void
name|setValue
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|)
function_decl|;
name|void
name|clear
parameter_list|()
block|{
name|m_string
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_length
operator|=
literal|0
expr_stmt|;
block|}
name|ProString
modifier|&
name|setSource
parameter_list|(
specifier|const
name|ProString
modifier|&
name|other
parameter_list|)
block|{
name|m_file
operator|=
name|other
operator|.
name|m_file
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|ProString
modifier|&
name|setSource
parameter_list|(
specifier|const
name|ProFile
modifier|*
name|pro
parameter_list|)
block|{
name|m_file
operator|=
name|pro
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
specifier|const
name|ProFile
operator|*
name|sourceFile
argument_list|()
specifier|const
block|{
return|return
name|m_file
return|;
block|}
name|ProString
modifier|&
name|prepend
parameter_list|(
specifier|const
name|ProString
modifier|&
name|other
parameter_list|)
function_decl|;
name|ProString
modifier|&
name|append
parameter_list|(
specifier|const
name|ProString
modifier|&
name|other
parameter_list|,
name|bool
modifier|*
name|pending
init|=
literal|0
parameter_list|)
function_decl|;
name|ProString
modifier|&
name|append
parameter_list|(
specifier|const
name|QString
modifier|&
name|other
parameter_list|)
block|{
return|return
name|append
argument_list|(
name|ProString
argument_list|(
name|other
argument_list|)
argument_list|)
return|;
block|}
name|ProString
modifier|&
name|append
parameter_list|(
specifier|const
name|QLatin1String
name|other
parameter_list|)
function_decl|;
name|ProString
modifier|&
name|append
parameter_list|(
specifier|const
name|char
modifier|*
name|other
parameter_list|)
block|{
return|return
name|append
argument_list|(
name|QLatin1String
argument_list|(
name|other
argument_list|)
argument_list|)
return|;
block|}
name|ProString
modifier|&
name|append
parameter_list|(
name|QChar
name|other
parameter_list|)
function_decl|;
name|ProString
modifier|&
name|append
parameter_list|(
specifier|const
name|ProStringList
modifier|&
name|other
parameter_list|,
name|bool
modifier|*
name|pending
init|=
literal|0
parameter_list|,
name|bool
name|skipEmpty1st
init|=
name|false
parameter_list|)
function_decl|;
name|ProString
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|ProString
operator|&
name|other
operator|)
block|{
return|return
name|append
argument_list|(
name|other
argument_list|)
return|;
block|}
name|ProString
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|QString
operator|&
name|other
operator|)
block|{
return|return
name|append
argument_list|(
name|other
argument_list|)
return|;
block|}
name|ProString
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|QLatin1String
name|other
operator|)
block|{
return|return
name|append
argument_list|(
name|other
argument_list|)
return|;
block|}
name|ProString
operator|&
name|operator
operator|+=
operator|(
specifier|const
name|char
operator|*
name|other
operator|)
block|{
return|return
name|append
argument_list|(
name|other
argument_list|)
return|;
block|}
name|ProString
operator|&
name|operator
operator|+=
operator|(
name|QChar
name|other
operator|)
block|{
return|return
name|append
argument_list|(
name|other
argument_list|)
return|;
block|}
name|void
name|chop
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|n
operator|<=
name|m_length
argument_list|)
expr_stmt|;
name|m_length
operator|-=
name|n
expr_stmt|;
block|}
name|void
name|chopFront
parameter_list|(
name|int
name|n
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
name|n
operator|<=
name|m_length
argument_list|)
expr_stmt|;
name|m_offset
operator|+=
name|n
expr_stmt|;
name|m_length
operator|-=
name|n
expr_stmt|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|ProString
operator|&
name|other
operator|)
specifier|const
block|{
return|return
name|toQStringRef
argument_list|()
operator|==
name|other
operator|.
name|toQStringRef
argument_list|()
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QString
operator|&
name|other
operator|)
specifier|const
block|{
return|return
name|toQStringRef
argument_list|()
operator|==
name|other
return|;
block|}
name|bool
name|operator
operator|==
operator|(
name|QLatin1String
name|other
operator|)
specifier|const
block|{
return|return
name|toQStringRef
argument_list|()
operator|==
name|other
return|;
block|}
name|bool
name|operator
operator|==
operator|(
specifier|const
name|char
operator|*
name|other
operator|)
specifier|const
block|{
return|return
name|toQStringRef
argument_list|()
operator|==
name|QLatin1String
argument_list|(
name|other
argument_list|)
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|ProString
operator|&
name|other
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|other
operator|)
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QString
operator|&
name|other
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|other
operator|)
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
name|QLatin1String
name|other
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|other
operator|)
return|;
block|}
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|char
operator|*
name|other
operator|)
specifier|const
block|{
return|return
operator|!
operator|(
operator|*
name|this
operator|==
name|other
operator|)
return|;
block|}
name|bool
name|isNull
argument_list|()
specifier|const
block|{
return|return
name|m_string
operator|.
name|isNull
argument_list|()
return|;
block|}
name|bool
name|isEmpty
argument_list|()
specifier|const
block|{
return|return
operator|!
name|m_length
return|;
block|}
name|int
name|length
argument_list|()
specifier|const
block|{
return|return
name|m_length
return|;
block|}
name|int
name|size
argument_list|()
specifier|const
block|{
return|return
name|m_length
return|;
block|}
name|QChar
name|at
argument_list|(
name|int
name|i
argument_list|)
decl|const
block|{
name|Q_ASSERT
argument_list|(
operator|(
name|uint
operator|)
name|i
operator|<
operator|(
name|uint
operator|)
name|m_length
argument_list|)
expr_stmt|;
return|return
name|constData
argument_list|()
index|[
name|i
index|]
return|;
block|}
specifier|const
name|QChar
operator|*
name|constData
argument_list|()
specifier|const
block|{
return|return
name|m_string
operator|.
name|constData
argument_list|()
operator|+
name|m_offset
return|;
block|}
name|ProString
name|mid
argument_list|(
name|int
name|off
argument_list|,
name|int
name|len
operator|=
operator|-
literal|1
argument_list|)
decl|const
decl_stmt|;
name|ProString
name|left
argument_list|(
name|int
name|len
argument_list|)
decl|const
block|{
return|return
name|mid
argument_list|(
literal|0
argument_list|,
name|len
argument_list|)
return|;
block|}
name|ProString
name|right
argument_list|(
name|int
name|len
argument_list|)
decl|const
block|{
return|return
name|mid
argument_list|(
name|qMax
argument_list|(
literal|0
argument_list|,
name|size
argument_list|()
operator|-
name|len
argument_list|)
argument_list|)
return|;
block|}
name|ProString
name|trimmed
argument_list|()
specifier|const
expr_stmt|;
name|int
name|compare
argument_list|(
specifier|const
name|ProString
operator|&
name|sub
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
block|{
return|return
name|toQStringRef
argument_list|()
operator|.
name|compare
argument_list|(
name|sub
operator|.
name|toQStringRef
argument_list|()
argument_list|,
name|cs
argument_list|)
return|;
block|}
name|int
name|compare
argument_list|(
specifier|const
name|QString
operator|&
name|sub
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
block|{
return|return
name|toQStringRef
argument_list|()
operator|.
name|compare
argument_list|(
name|sub
argument_list|,
name|cs
argument_list|)
return|;
block|}
name|int
name|compare
argument_list|(
specifier|const
name|char
operator|*
name|sub
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
block|{
return|return
name|toQStringRef
argument_list|()
operator|.
name|compare
argument_list|(
name|QLatin1String
argument_list|(
name|sub
argument_list|)
argument_list|,
name|cs
argument_list|)
return|;
block|}
name|bool
name|startsWith
argument_list|(
specifier|const
name|ProString
operator|&
name|sub
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
block|{
return|return
name|toQStringRef
argument_list|()
operator|.
name|startsWith
argument_list|(
name|sub
operator|.
name|toQStringRef
argument_list|()
argument_list|,
name|cs
argument_list|)
return|;
block|}
name|bool
name|startsWith
argument_list|(
specifier|const
name|QString
operator|&
name|sub
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
block|{
return|return
name|toQStringRef
argument_list|()
operator|.
name|startsWith
argument_list|(
name|sub
argument_list|,
name|cs
argument_list|)
return|;
block|}
name|bool
name|startsWith
argument_list|(
specifier|const
name|char
operator|*
name|sub
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
block|{
return|return
name|toQStringRef
argument_list|()
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
name|sub
argument_list|)
argument_list|,
name|cs
argument_list|)
return|;
block|}
name|bool
name|startsWith
argument_list|(
name|QChar
name|c
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
block|{
return|return
name|toQStringRef
argument_list|()
operator|.
name|startsWith
argument_list|(
name|c
argument_list|,
name|cs
argument_list|)
return|;
block|}
name|bool
name|endsWith
argument_list|(
specifier|const
name|ProString
operator|&
name|sub
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
block|{
return|return
name|toQStringRef
argument_list|()
operator|.
name|endsWith
argument_list|(
name|sub
operator|.
name|toQStringRef
argument_list|()
argument_list|,
name|cs
argument_list|)
return|;
block|}
name|bool
name|endsWith
argument_list|(
specifier|const
name|QString
operator|&
name|sub
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
block|{
return|return
name|toQStringRef
argument_list|()
operator|.
name|endsWith
argument_list|(
name|sub
argument_list|,
name|cs
argument_list|)
return|;
block|}
name|bool
name|endsWith
argument_list|(
specifier|const
name|char
operator|*
name|sub
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
block|{
return|return
name|toQStringRef
argument_list|()
operator|.
name|endsWith
argument_list|(
name|QLatin1String
argument_list|(
name|sub
argument_list|)
argument_list|,
name|cs
argument_list|)
return|;
block|}
name|bool
name|endsWith
argument_list|(
name|QChar
name|c
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
block|{
return|return
name|toQStringRef
argument_list|()
operator|.
name|endsWith
argument_list|(
name|c
argument_list|,
name|cs
argument_list|)
return|;
block|}
name|int
name|indexOf
argument_list|(
specifier|const
name|QString
operator|&
name|s
argument_list|,
name|int
name|from
operator|=
literal|0
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
block|{
return|return
name|toQStringRef
argument_list|()
operator|.
name|indexOf
argument_list|(
name|s
argument_list|,
name|from
argument_list|,
name|cs
argument_list|)
return|;
block|}
name|int
name|indexOf
argument_list|(
specifier|const
name|char
operator|*
name|s
argument_list|,
name|int
name|from
operator|=
literal|0
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
block|{
return|return
name|toQStringRef
argument_list|()
operator|.
name|indexOf
argument_list|(
name|QLatin1String
argument_list|(
name|s
argument_list|)
argument_list|,
name|from
argument_list|,
name|cs
argument_list|)
return|;
block|}
name|int
name|indexOf
argument_list|(
name|QChar
name|c
argument_list|,
name|int
name|from
operator|=
literal|0
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
block|{
return|return
name|toQStringRef
argument_list|()
operator|.
name|indexOf
argument_list|(
name|c
argument_list|,
name|from
argument_list|,
name|cs
argument_list|)
return|;
block|}
name|int
name|lastIndexOf
argument_list|(
specifier|const
name|QString
operator|&
name|s
argument_list|,
name|int
name|from
operator|=
operator|-
literal|1
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
block|{
return|return
name|toQStringRef
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
name|s
argument_list|,
name|from
argument_list|,
name|cs
argument_list|)
return|;
block|}
name|int
name|lastIndexOf
argument_list|(
specifier|const
name|char
operator|*
name|s
argument_list|,
name|int
name|from
operator|=
operator|-
literal|1
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
block|{
return|return
name|toQStringRef
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
name|QLatin1String
argument_list|(
name|s
argument_list|)
argument_list|,
name|from
argument_list|,
name|cs
argument_list|)
return|;
block|}
name|int
name|lastIndexOf
argument_list|(
name|QChar
name|c
argument_list|,
name|int
name|from
operator|=
operator|-
literal|1
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
block|{
return|return
name|toQStringRef
argument_list|()
operator|.
name|lastIndexOf
argument_list|(
name|c
argument_list|,
name|from
argument_list|,
name|cs
argument_list|)
return|;
block|}
name|bool
name|contains
argument_list|(
specifier|const
name|QString
operator|&
name|s
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
block|{
return|return
name|indexOf
argument_list|(
name|s
argument_list|,
literal|0
argument_list|,
name|cs
argument_list|)
operator|>=
literal|0
return|;
block|}
name|bool
name|contains
argument_list|(
specifier|const
name|char
operator|*
name|s
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
block|{
return|return
name|indexOf
argument_list|(
name|QLatin1String
argument_list|(
name|s
argument_list|)
argument_list|,
literal|0
argument_list|,
name|cs
argument_list|)
operator|>=
literal|0
return|;
block|}
name|bool
name|contains
argument_list|(
name|QChar
name|c
argument_list|,
name|Qt
operator|::
name|CaseSensitivity
name|cs
operator|=
name|Qt
operator|::
name|CaseSensitive
argument_list|)
decl|const
block|{
return|return
name|indexOf
argument_list|(
name|c
argument_list|,
literal|0
argument_list|,
name|cs
argument_list|)
operator|>=
literal|0
return|;
block|}
name|int
name|toInt
argument_list|(
name|bool
operator|*
name|ok
operator|=
literal|0
argument_list|,
name|int
name|base
operator|=
literal|10
argument_list|)
decl|const
block|{
return|return
name|toQString
argument_list|()
operator|.
name|toInt
argument_list|(
name|ok
argument_list|,
name|base
argument_list|)
return|;
block|}
comment|// XXX optimize
name|short
name|toShort
argument_list|(
name|bool
operator|*
name|ok
operator|=
literal|0
argument_list|,
name|int
name|base
operator|=
literal|10
argument_list|)
decl|const
block|{
return|return
name|toQString
argument_list|()
operator|.
name|toShort
argument_list|(
name|ok
argument_list|,
name|base
argument_list|)
return|;
block|}
comment|// XXX optimize
name|uint
name|hash
argument_list|()
specifier|const
block|{
return|return
name|m_hash
return|;
block|}
specifier|static
name|uint
name|hash
parameter_list|(
specifier|const
name|QChar
modifier|*
name|p
parameter_list|,
name|int
name|n
parameter_list|)
function_decl|;
name|ALWAYS_INLINE
name|QStringRef
name|toQStringRef
argument_list|()
specifier|const
block|{
return|return
name|QStringRef
argument_list|(
operator|&
name|m_string
argument_list|,
name|m_offset
argument_list|,
name|m_length
argument_list|)
return|;
block|}
name|ALWAYS_INLINE
name|ProKey
modifier|&
name|toKey
parameter_list|()
block|{
return|return
operator|*
operator|(
name|ProKey
operator|*
operator|)
name|this
return|;
block|}
name|ALWAYS_INLINE
specifier|const
name|ProKey
operator|&
name|toKey
argument_list|()
specifier|const
block|{
return|return
operator|*
operator|(
specifier|const
name|ProKey
operator|*
operator|)
name|this
return|;
block|}
name|QString
name|toQString
argument_list|()
specifier|const
expr_stmt|;
name|QString
modifier|&
name|toQString
argument_list|(
name|QString
operator|&
name|tmp
argument_list|)
decl|const
decl_stmt|;
name|QByteArray
name|toLatin1
argument_list|()
specifier|const
block|{
return|return
name|toQStringRef
argument_list|()
operator|.
name|toLatin1
argument_list|()
return|;
block|}
name|private
label|:
name|ProString
argument_list|(
specifier|const
name|ProKey
operator|&
name|other
argument_list|)
expr_stmt|;
name|ProString
modifier|&
name|operator
init|=
operator|(
specifier|const
name|ProKey
operator|&
name|other
operator|)
decl_stmt|;
enum|enum
name|OmitPreHashing
block|{
name|NoHash
block|}
enum|;
name|ProString
argument_list|(
specifier|const
name|ProString
operator|&
name|other
argument_list|,
name|OmitPreHashing
argument_list|)
expr_stmt|;
enum|enum
name|DoPreHashing
block|{
name|DoHash
block|}
enum|;
name|ALWAYS_INLINE
name|ProString
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|,
name|DoPreHashing
parameter_list|)
function_decl|;
name|ALWAYS_INLINE
name|ProString
parameter_list|(
specifier|const
name|char
modifier|*
name|str
parameter_list|,
name|DoPreHashing
parameter_list|)
function_decl|;
name|ALWAYS_INLINE
name|ProString
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|DoPreHashing
parameter_list|)
function_decl|;
name|ALWAYS_INLINE
name|ProString
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|,
name|int
name|offset
parameter_list|,
name|int
name|length
parameter_list|,
name|uint
name|hash
parameter_list|)
function_decl|;
name|QString
name|m_string
decl_stmt|;
name|int
name|m_offset
decl_stmt|,
name|m_length
decl_stmt|;
specifier|const
name|ProFile
modifier|*
name|m_file
decl_stmt|;
name|mutable
name|uint
name|m_hash
decl_stmt|;
name|QChar
modifier|*
name|prepareExtend
parameter_list|(
name|int
name|extraLen
parameter_list|,
name|int
name|thisTarget
parameter_list|,
name|int
name|extraTarget
parameter_list|)
function_decl|;
name|uint
name|updatedHash
argument_list|()
specifier|const
expr_stmt|;
name|friend
name|uint
name|qHash
parameter_list|(
specifier|const
name|ProString
modifier|&
name|str
parameter_list|)
function_decl|;
name|friend
name|QString
name|operator
operator|+
operator|(
specifier|const
name|ProString
operator|&
name|one
operator|,
specifier|const
name|ProString
operator|&
name|two
operator|)
expr_stmt|;
name|friend
name|class
name|ProKey
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|Q_DECLARE_TYPEINFO
argument_list|(
name|ProString
argument_list|,
name|Q_MOVABLE_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|class
name|ProKey
range|:
name|public
name|ProString
block|{
name|public
operator|:
name|ALWAYS_INLINE
name|ProKey
argument_list|()
operator|:
name|ProString
argument_list|()
block|{}
name|explicit
name|ProKey
argument_list|(
specifier|const
name|QString
operator|&
name|str
argument_list|)
block|;
name|PROITEM_EXPLICIT
name|ProKey
argument_list|(
specifier|const
name|char
operator|*
name|str
argument_list|)
block|;
name|ProKey
argument_list|(
argument|const QString&str
argument_list|,
argument|int off
argument_list|,
argument|int len
argument_list|)
block|;
name|ProKey
argument_list|(
argument|const QString&str
argument_list|,
argument|int off
argument_list|,
argument|int len
argument_list|,
argument|uint hash
argument_list|)
block|;
name|void
name|setValue
argument_list|(
specifier|const
name|QString
operator|&
name|str
argument_list|)
block|;
ifdef|#
directive|ifdef
name|Q_CC_MSVC
comment|// Workaround strange MSVC behaviour when exporting classes with ProKey members.
name|ALWAYS_INLINE
name|ProKey
argument_list|(
specifier|const
name|ProKey
operator|&
name|other
argument_list|)
operator|:
name|ProString
argument_list|(
argument|other.toString()
argument_list|)
block|{}
name|ALWAYS_INLINE
name|ProKey
operator|&
name|operator
operator|=
operator|(
specifier|const
name|ProKey
operator|&
name|other
operator|)
block|{
name|toString
argument_list|()
operator|=
name|other
operator|.
name|toString
argument_list|()
block|;
return|return
operator|*
name|this
return|;
block|}
endif|#
directive|endif
name|ALWAYS_INLINE
name|ProString
operator|&
name|toString
argument_list|()
block|{
return|return
operator|*
operator|(
name|ProString
operator|*
operator|)
name|this
return|;
block|}
name|ALWAYS_INLINE
specifier|const
name|ProString
operator|&
name|toString
argument_list|()
specifier|const
block|{
return|return
operator|*
operator|(
specifier|const
name|ProString
operator|*
operator|)
name|this
return|;
block|}
name|private
operator|:
name|ProKey
argument_list|(
specifier|const
name|ProString
operator|&
name|other
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|Q_DECLARE_TYPEINFO
argument_list|(
name|ProKey
argument_list|,
name|Q_MOVABLE_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function_decl
name|uint
name|qHash
parameter_list|(
specifier|const
name|ProString
modifier|&
name|str
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|QString
name|operator
operator|+
operator|(
specifier|const
name|ProString
operator|&
name|one
operator|,
specifier|const
name|ProString
operator|&
name|two
operator|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|function|operator
specifier|inline
name|QString
name|operator
operator|+
operator|(
specifier|const
name|ProString
operator|&
name|one
operator|,
specifier|const
name|QString
operator|&
name|two
operator|)
block|{
return|return
name|one
operator|+
name|ProString
argument_list|(
name|two
argument_list|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
specifier|inline
name|QString
name|operator
operator|+
operator|(
specifier|const
name|QString
operator|&
name|one
operator|,
specifier|const
name|ProString
operator|&
name|two
operator|)
block|{
return|return
name|ProString
argument_list|(
name|one
argument_list|)
operator|+
name|two
return|;
block|}
end_expr_stmt
begin_expr_stmt
DECL|function|operator
specifier|inline
name|QString
name|operator
operator|+
operator|(
specifier|const
name|ProString
operator|&
name|one
operator|,
specifier|const
name|char
operator|*
name|two
operator|)
block|{
return|return
name|one
operator|+
name|ProString
argument_list|(
name|two
argument_list|)
return|;
block|}
end_expr_stmt
begin_comment
comment|// XXX optimize
end_comment
begin_expr_stmt
DECL|function|operator
specifier|inline
name|QString
name|operator
operator|+
operator|(
specifier|const
name|char
operator|*
name|one
operator|,
specifier|const
name|ProString
operator|&
name|two
operator|)
block|{
return|return
name|ProString
argument_list|(
name|one
argument_list|)
operator|+
name|two
return|;
block|}
end_expr_stmt
begin_comment
comment|// XXX optimize
end_comment
begin_expr_stmt
DECL|variable|operator
specifier|inline
name|QString
operator|&
name|operator
operator|+=
operator|(
name|QString
operator|&
name|that
operator|,
specifier|const
name|ProString
operator|&
name|other
operator|)
block|{
return|return
name|that
operator|+=
name|other
operator|.
name|toQStringRef
argument_list|()
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QString
operator|&
name|that
operator|,
specifier|const
name|ProString
operator|&
name|other
operator|)
block|{
return|return
name|other
operator|==
name|that
return|;
block|}
end_expr_stmt
begin_expr_stmt
specifier|inline
name|bool
name|operator
operator|!=
operator|(
specifier|const
name|QString
operator|&
name|that
operator|,
specifier|const
name|ProString
operator|&
name|other
operator|)
block|{
return|return
operator|!
operator|(
name|other
operator|==
name|that
operator|)
return|;
block|}
end_expr_stmt
begin_expr_stmt
name|QTextStream
operator|&
name|operator
operator|<<
operator|(
name|QTextStream
operator|&
name|t
operator|,
specifier|const
name|ProString
operator|&
name|str
operator|)
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|class
name|ProStringList
range|:
name|public
name|QVector
operator|<
name|ProString
operator|>
block|{
name|public
operator|:
name|ProStringList
argument_list|()
block|{}
name|ProStringList
argument_list|(
argument|const ProString&str
argument_list|)
block|{
operator|*
name|this
operator|<<
name|str
block|; }
name|explicit
name|ProStringList
argument_list|(
specifier|const
name|QStringList
operator|&
name|list
argument_list|)
block|;
name|QStringList
name|toQStringList
argument_list|()
specifier|const
block|;
name|ProStringList
operator|&
name|operator
operator|<<
operator|(
specifier|const
name|ProString
operator|&
name|str
operator|)
block|{
name|QVector
operator|<
name|ProString
operator|>
operator|::
name|operator
operator|<<
operator|(
name|str
operator|)
block|;
return|return
operator|*
name|this
return|;
block|}
name|int
name|length
argument_list|()
specifier|const
block|{
return|return
name|size
argument_list|()
return|;
block|}
name|QString
name|join
argument_list|(
argument|const QString&sep
argument_list|)
specifier|const
block|;
name|QString
name|join
argument_list|(
argument|QChar sep
argument_list|)
specifier|const
block|;
name|void
name|insertUnique
argument_list|(
specifier|const
name|ProStringList
operator|&
name|value
argument_list|)
block|;
name|void
name|removeAll
argument_list|(
specifier|const
name|ProString
operator|&
name|str
argument_list|)
block|;
name|void
name|removeAll
argument_list|(
specifier|const
name|char
operator|*
name|str
argument_list|)
block|;
name|void
name|removeEach
argument_list|(
specifier|const
name|ProStringList
operator|&
name|value
argument_list|)
block|;
name|void
name|removeAt
argument_list|(
argument|int idx
argument_list|)
block|{
name|remove
argument_list|(
name|idx
argument_list|)
block|; }
name|void
name|removeEmpty
argument_list|()
block|;
name|void
name|removeDuplicates
argument_list|()
block|;
name|bool
name|contains
argument_list|(
argument|const ProString&str
argument_list|,
argument|Qt::CaseSensitivity cs = Qt::CaseSensitive
argument_list|)
specifier|const
block|;
name|bool
name|contains
argument_list|(
argument|const QString&str
argument_list|,
argument|Qt::CaseSensitivity cs = Qt::CaseSensitive
argument_list|)
specifier|const
block|{
return|return
name|contains
argument_list|(
name|ProString
argument_list|(
name|str
argument_list|)
argument_list|,
name|cs
argument_list|)
return|;
block|}
name|bool
name|contains
argument_list|(
argument|const char *str
argument_list|,
argument|Qt::CaseSensitivity cs = Qt::CaseSensitive
argument_list|)
specifier|const
block|; }
decl_stmt|;
end_decl_stmt
begin_expr_stmt
name|Q_DECLARE_TYPEINFO
argument_list|(
name|ProStringList
argument_list|,
name|Q_MOVABLE_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt
begin_expr_stmt
DECL|function|operator
specifier|inline
name|ProStringList
name|operator
operator|+
operator|(
specifier|const
name|ProStringList
operator|&
name|one
operator|,
specifier|const
name|ProStringList
operator|&
name|two
operator|)
block|{
name|ProStringList
name|ret
operator|=
name|one
block|;
name|ret
operator|+=
name|two
block|;
return|return
name|ret
return|;
block|}
end_expr_stmt
begin_typedef
DECL|typedef|ProKey
DECL|typedef|ProValueMap
typedef|typedef
name|QHash
operator|<
name|ProKey
operator|,
name|ProStringList
operator|>
name|ProValueMap
expr_stmt|;
end_typedef
begin_comment
comment|// These token definitions affect both ProFileEvaluator and ProWriter
end_comment
begin_enum
DECL|enum|ProToken
enum|enum
name|ProToken
block|{
DECL|enumerator|TokTerminator
name|TokTerminator
init|=
literal|0
block|,
comment|// end of stream (possibly not included in length; must be zero)
DECL|enumerator|TokLine
name|TokLine
block|,
comment|// line marker:
comment|// - line (1)
DECL|enumerator|TokAssign
name|TokAssign
block|,
comment|// variable =
DECL|enumerator|TokAppend
name|TokAppend
block|,
comment|// variable +=
DECL|enumerator|TokAppendUnique
name|TokAppendUnique
block|,
comment|// variable *=
DECL|enumerator|TokRemove
name|TokRemove
block|,
comment|// variable -=
DECL|enumerator|TokReplace
name|TokReplace
block|,
comment|// variable ~=
comment|// previous literal/expansion is a variable manipulation
comment|// - lower bound for expected output length (1)
comment|// - value expression + TokValueTerminator
DECL|enumerator|TokValueTerminator
name|TokValueTerminator
block|,
comment|// assignment value terminator
DECL|enumerator|TokLiteral
name|TokLiteral
block|,
comment|// literal string (fully dequoted)
comment|// - length (1)
comment|// - string data (length; unterminated)
DECL|enumerator|TokHashLiteral
name|TokHashLiteral
block|,
comment|// literal string with hash (fully dequoted)
comment|// - hash (2)
comment|// - length (1)
comment|// - string data (length; unterminated)
DECL|enumerator|TokVariable
name|TokVariable
block|,
comment|// qmake variable expansion
comment|// - hash (2)
comment|// - name length (1)
comment|// - name (name length; unterminated)
DECL|enumerator|TokProperty
name|TokProperty
block|,
comment|// qmake property expansion
comment|// - hash (2)
comment|// - name length (1)
comment|// - name (name length; unterminated)
DECL|enumerator|TokEnvVar
name|TokEnvVar
block|,
comment|// environment variable expansion
comment|// - name length (1)
comment|// - name (name length; unterminated)
DECL|enumerator|TokFuncName
name|TokFuncName
block|,
comment|// replace function expansion
comment|// - hash (2)
comment|// - name length (1)
comment|// - name (name length; unterminated)
comment|// - ((nested expansion + TokArgSeparator)* + nested expansion)?
comment|// - TokFuncTerminator
DECL|enumerator|TokArgSeparator
name|TokArgSeparator
block|,
comment|// function argument separator
DECL|enumerator|TokFuncTerminator
name|TokFuncTerminator
block|,
comment|// function argument list terminator
DECL|enumerator|TokCondition
name|TokCondition
block|,
comment|// previous literal/expansion is a conditional
DECL|enumerator|TokTestCall
name|TokTestCall
block|,
comment|// previous literal/expansion is a test function call
comment|// - ((nested expansion + TokArgSeparator)* + nested expansion)?
comment|// - TokFuncTerminator
DECL|enumerator|TokReturn
name|TokReturn
block|,
comment|// previous literal/expansion is a return value
DECL|enumerator|TokBreak
name|TokBreak
block|,
comment|// break loop
DECL|enumerator|TokNext
name|TokNext
block|,
comment|// shortcut to next loop iteration
DECL|enumerator|TokNot
name|TokNot
block|,
comment|// '!' operator
DECL|enumerator|TokAnd
name|TokAnd
block|,
comment|// ':' operator
DECL|enumerator|TokOr
name|TokOr
block|,
comment|// '|' operator
DECL|enumerator|TokBranch
name|TokBranch
block|,
comment|// branch point:
comment|// - then block length (2)
comment|// - then block + TokTerminator (then block length)
comment|// - else block length (2)
comment|// - else block + TokTerminator (else block length)
DECL|enumerator|TokForLoop
name|TokForLoop
block|,
comment|// for loop:
comment|// - variable name: hash (2), length (1), chars (length)
comment|// - expression: length (2), bytes + TokValueTerminator (length)
comment|// - body length (2)
comment|// - body + TokTerminator (body length)
DECL|enumerator|TokTestDef
name|TokTestDef
block|,
comment|// test function definition:
DECL|enumerator|TokReplaceDef
name|TokReplaceDef
block|,
comment|// replace function definition:
comment|// - function name: hash (2), length (1), chars (length)
comment|// - body length (2)
comment|// - body + TokTerminator (body length)
DECL|enumerator|TokMask
name|TokMask
init|=
literal|0xff
block|,
DECL|enumerator|TokQuoted
name|TokQuoted
init|=
literal|0x100
block|,
comment|// The expression is quoted => join expanded stringlist
DECL|enumerator|TokNewStr
name|TokNewStr
init|=
literal|0x200
comment|// Next stringlist element
block|}
enum|;
end_enum
begin_decl_stmt
name|class
name|QMAKE_EXPORT
name|ProFile
block|{
name|public
label|:
name|explicit
name|ProFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|)
function_decl|;
operator|~
name|ProFile
argument_list|()
expr_stmt|;
name|QString
name|fileName
argument_list|()
specifier|const
block|{
return|return
name|m_fileName
return|;
block|}
name|QString
name|directoryName
argument_list|()
specifier|const
block|{
return|return
name|m_directoryName
return|;
block|}
specifier|const
name|QString
operator|&
name|items
argument_list|()
specifier|const
block|{
return|return
name|m_proitems
return|;
block|}
name|QString
modifier|*
name|itemsRef
parameter_list|()
block|{
return|return
operator|&
name|m_proitems
return|;
block|}
specifier|const
name|ushort
operator|*
name|tokPtr
argument_list|()
specifier|const
block|{
return|return
operator|(
specifier|const
name|ushort
operator|*
operator|)
name|m_proitems
operator|.
name|constData
argument_list|()
return|;
block|}
name|void
name|ref
parameter_list|()
block|{
name|m_refCount
operator|.
name|ref
argument_list|()
expr_stmt|;
block|}
name|void
name|deref
parameter_list|()
block|{
if|if
condition|(
operator|!
name|m_refCount
operator|.
name|deref
argument_list|()
condition|)
name|delete
name|this
decl_stmt|;
block|}
name|bool
name|isOk
argument_list|()
specifier|const
block|{
return|return
name|m_ok
return|;
block|}
name|void
name|setOk
parameter_list|(
name|bool
name|ok
parameter_list|)
block|{
name|m_ok
operator|=
name|ok
expr_stmt|;
block|}
name|bool
name|isHostBuild
argument_list|()
specifier|const
block|{
return|return
name|m_hostBuild
return|;
block|}
name|void
name|setHostBuild
parameter_list|(
name|bool
name|host_build
parameter_list|)
block|{
name|m_hostBuild
operator|=
name|host_build
expr_stmt|;
block|}
name|ProString
name|getStr
parameter_list|(
specifier|const
name|ushort
modifier|*
modifier|&
name|tPtr
parameter_list|)
function_decl|;
name|ProKey
name|getHashStr
parameter_list|(
specifier|const
name|ushort
modifier|*
modifier|&
name|tPtr
parameter_list|)
function_decl|;
name|private
label|:
name|ProItemRefCount
name|m_refCount
decl_stmt|;
name|QString
name|m_proitems
decl_stmt|;
name|QString
name|m_fileName
decl_stmt|;
name|QString
name|m_directoryName
decl_stmt|;
name|bool
name|m_ok
decl_stmt|;
name|bool
name|m_hostBuild
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|ProFunctionDef
block|{
name|public
label|:
name|ProFunctionDef
argument_list|(
argument|ProFile *pro
argument_list|,
argument|int offset
argument_list|)
block|:
name|m_pro
argument_list|(
name|pro
argument_list|)
operator|,
name|m_offset
argument_list|(
argument|offset
argument_list|)
block|{
name|m_pro
operator|->
name|ref
argument_list|()
block|; }
name|ProFunctionDef
argument_list|(
specifier|const
name|ProFunctionDef
operator|&
name|o
argument_list|)
operator|:
name|m_pro
argument_list|(
name|o
operator|.
name|m_pro
argument_list|)
operator|,
name|m_offset
argument_list|(
argument|o.m_offset
argument_list|)
block|{
name|m_pro
operator|->
name|ref
argument_list|()
block|; }
operator|~
name|ProFunctionDef
argument_list|()
block|{
name|m_pro
operator|->
name|deref
argument_list|()
block|; }
name|ProFunctionDef
operator|&
name|operator
operator|=
operator|(
specifier|const
name|ProFunctionDef
operator|&
name|o
operator|)
block|{
if|if
condition|(
name|this
operator|!=
operator|&
name|o
condition|)
block|{
name|m_pro
operator|->
name|deref
argument_list|()
expr_stmt|;
name|m_pro
operator|=
name|o
operator|.
name|m_pro
expr_stmt|;
name|m_pro
operator|->
name|ref
argument_list|()
expr_stmt|;
name|m_offset
operator|=
name|o
operator|.
name|m_offset
expr_stmt|;
block|}
return|return
operator|*
name|this
return|;
block|}
name|ProFile
operator|*
name|pro
argument_list|()
specifier|const
block|{
return|return
name|m_pro
return|;
block|}
specifier|const
name|ushort
operator|*
name|tokPtr
argument_list|()
specifier|const
block|{
return|return
name|m_pro
operator|->
name|tokPtr
argument_list|()
operator|+
name|m_offset
return|;
block|}
name|private
label|:
name|ProFile
modifier|*
name|m_pro
decl_stmt|;
name|int
name|m_offset
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_expr_stmt
name|Q_DECLARE_TYPEINFO
argument_list|(
name|ProFunctionDef
argument_list|,
name|Q_MOVABLE_TYPE
argument_list|)
expr_stmt|;
end_expr_stmt
begin_struct
DECL|struct|ProFunctionDefs
struct|struct
name|ProFunctionDefs
block|{
DECL|member|ProKey
DECL|member|testFunctions
name|QHash
operator|<
name|ProKey
operator|,
name|ProFunctionDef
operator|>
name|testFunctions
expr_stmt|;
DECL|member|ProKey
DECL|member|replaceFunctions
name|QHash
operator|<
name|ProKey
operator|,
name|ProFunctionDef
operator|>
name|replaceFunctions
expr_stmt|;
block|}
struct|;
end_struct
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// PROITEMS_H
end_comment
end_unit
