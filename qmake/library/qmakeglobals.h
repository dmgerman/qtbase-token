begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the qmake application of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QMAKEGLOBALS_H
end_ifndef
begin_define
DECL|macro|QMAKEGLOBALS_H
define|#
directive|define
name|QMAKEGLOBALS_H
end_define
begin_include
include|#
directive|include
file|"qmake_global.h"
end_include
begin_include
include|#
directive|include
file|"proitems.h"
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|QT_BUILD_QMAKE
end_ifdef
begin_include
include|#
directive|include
file|<property.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<qhash.h>
end_include
begin_include
include|#
directive|include
file|<qstringlist.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_BOOTSTRAPPED
end_ifndef
begin_include
include|#
directive|include
file|<qprocess.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|PROEVALUATOR_THREAD_SAFE
end_ifdef
begin_include
include|#
directive|include
file|<qmutex.h>
end_include
begin_include
include|#
directive|include
file|<qwaitcondition.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QMakeEvaluator
name|class
name|QMakeEvaluator
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|QMakeBaseKey
block|{
name|public
label|:
name|QMakeBaseKey
argument_list|(
argument|const QString&_root
argument_list|,
argument|const QString&_stash
argument_list|,
argument|bool _hostBuild
argument_list|)
empty_stmt|;
name|QString
name|root
decl_stmt|;
name|QString
name|stash
decl_stmt|;
name|bool
name|hostBuild
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_function_decl
name|uint
name|qHash
parameter_list|(
specifier|const
name|QMakeBaseKey
modifier|&
name|key
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|bool
name|operator
operator|==
operator|(
specifier|const
name|QMakeBaseKey
operator|&
name|one
operator|,
specifier|const
name|QMakeBaseKey
operator|&
name|two
operator|)
expr_stmt|;
end_expr_stmt
begin_decl_stmt
name|class
name|QMakeBaseEnv
block|{
name|public
label|:
name|QMakeBaseEnv
argument_list|()
expr_stmt|;
operator|~
name|QMakeBaseEnv
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|PROEVALUATOR_THREAD_SAFE
name|QMutex
name|mutex
decl_stmt|;
name|QWaitCondition
name|cond
decl_stmt|;
name|bool
name|inProgress
decl_stmt|;
comment|// The coupling of this flag to thread safety exists because for other
comment|// use cases failure is immediately fatal anyway.
name|bool
name|isOk
decl_stmt|;
endif|#
directive|endif
name|QMakeEvaluator
modifier|*
name|evaluator
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|QMAKE_EXPORT
name|QMakeCmdLineParserState
block|{
name|public
label|:
name|QMakeCmdLineParserState
argument_list|(
specifier|const
name|QString
operator|&
name|_pwd
argument_list|)
operator|:
name|pwd
argument_list|(
name|_pwd
argument_list|)
operator|,
name|after
argument_list|(
argument|false
argument_list|)
block|{}
name|QString
name|pwd
expr_stmt|;
name|QStringList
name|precmds
decl_stmt|,
name|preconfigs
decl_stmt|,
name|postcmds
decl_stmt|,
name|postconfigs
decl_stmt|;
name|bool
name|after
decl_stmt|;
name|void
name|flush
parameter_list|()
block|{
name|after
operator|=
name|false
expr_stmt|;
block|}
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|QMAKE_EXPORT
name|QMakeGlobals
block|{
name|public
label|:
name|QMakeGlobals
argument_list|()
expr_stmt|;
operator|~
name|QMakeGlobals
argument_list|()
expr_stmt|;
name|bool
name|do_cache
decl_stmt|;
name|QString
name|dir_sep
decl_stmt|;
name|QString
name|dirlist_sep
decl_stmt|;
name|QString
name|cachefile
decl_stmt|;
ifdef|#
directive|ifdef
name|PROEVALUATOR_SETENV
name|QProcessEnvironment
name|environment
decl_stmt|;
endif|#
directive|endif
name|QString
name|qmake_abslocation
decl_stmt|;
name|QStringList
name|qmake_args
decl_stmt|;
name|QString
name|qtconf
decl_stmt|;
name|QString
name|qmakespec
decl_stmt|,
name|xqmakespec
decl_stmt|;
name|QString
name|user_template
decl_stmt|,
name|user_template_prefix
decl_stmt|;
name|QString
name|precmds
decl_stmt|,
name|postcmds
decl_stmt|;
ifdef|#
directive|ifdef
name|PROEVALUATOR_DEBUG
name|int
name|debugLevel
decl_stmt|;
endif|#
directive|endif
enum|enum
name|ArgumentReturn
block|{
name|ArgumentUnknown
block|,
name|ArgumentMalformed
block|,
name|ArgumentsOk
block|}
enum|;
name|ArgumentReturn
name|addCommandLineArguments
parameter_list|(
name|QMakeCmdLineParserState
modifier|&
name|state
parameter_list|,
name|QStringList
modifier|&
name|args
parameter_list|,
name|int
modifier|*
name|pos
parameter_list|)
function_decl|;
name|void
name|commitCommandLineArguments
parameter_list|(
name|QMakeCmdLineParserState
modifier|&
name|state
parameter_list|)
function_decl|;
name|void
name|setCommandLineArguments
parameter_list|(
specifier|const
name|QString
modifier|&
name|pwd
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|args
parameter_list|)
function_decl|;
name|void
name|useEnvironment
parameter_list|()
function_decl|;
name|void
name|setDirectories
parameter_list|(
specifier|const
name|QString
modifier|&
name|input_dir
parameter_list|,
specifier|const
name|QString
modifier|&
name|output_dir
parameter_list|)
function_decl|;
ifdef|#
directive|ifdef
name|QT_BUILD_QMAKE
name|void
name|setQMakeProperty
parameter_list|(
name|QMakeProperty
modifier|*
name|prop
parameter_list|)
block|{
name|property
operator|=
name|prop
expr_stmt|;
block|}
name|ProString
name|propertyValue
argument_list|(
specifier|const
name|ProKey
operator|&
name|name
argument_list|)
decl|const
block|{
return|return
name|property
operator|->
name|value
argument_list|(
name|name
argument_list|)
return|;
block|}
else|#
directive|else
ifdef|#
directive|ifdef
name|PROEVALUATOR_INIT_PROPS
name|bool
name|initProperties
parameter_list|()
function_decl|;
else|#
directive|else
name|void
name|setProperties
argument_list|(
specifier|const
name|QHash
operator|<
name|QString
argument_list|,
name|QString
operator|>
operator|&
name|props
argument_list|)
decl_stmt|;
name|void
name|setProperties
argument_list|(
specifier|const
name|QHash
operator|<
name|ProKey
argument_list|,
name|ProString
operator|>
operator|&
name|props
argument_list|)
block|{
name|properties
operator|=
name|props
expr_stmt|;
block|}
endif|#
directive|endif
name|ProString
name|propertyValue
argument_list|(
specifier|const
name|ProKey
operator|&
name|name
argument_list|)
decl|const
block|{
return|return
name|properties
operator|.
name|value
argument_list|(
name|name
argument_list|)
return|;
block|}
endif|#
directive|endif
name|QString
name|expandEnvVars
argument_list|(
specifier|const
name|QString
operator|&
name|str
argument_list|)
decl|const
decl_stmt|;
name|QString
name|shadowedPath
argument_list|(
specifier|const
name|QString
operator|&
name|fileName
argument_list|)
decl|const
decl_stmt|;
name|QStringList
name|splitPathList
argument_list|(
specifier|const
name|QString
operator|&
name|value
argument_list|)
decl|const
decl_stmt|;
name|private
label|:
name|QString
name|getEnv
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
decl|const
decl_stmt|;
name|QStringList
name|getPathListEnv
argument_list|(
specifier|const
name|QString
operator|&
name|var
argument_list|)
decl|const
decl_stmt|;
name|QString
name|cleanSpec
parameter_list|(
name|QMakeCmdLineParserState
modifier|&
name|state
parameter_list|,
specifier|const
name|QString
modifier|&
name|spec
parameter_list|)
function_decl|;
name|QString
name|source_root
decl_stmt|,
name|build_root
decl_stmt|;
ifdef|#
directive|ifdef
name|QT_BUILD_QMAKE
name|QMakeProperty
modifier|*
name|property
decl_stmt|;
else|#
directive|else
name|QHash
operator|<
name|ProKey
operator|,
name|ProString
operator|>
name|properties
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|PROEVALUATOR_THREAD_SAFE
name|QMutex
name|mutex
decl_stmt|;
endif|#
directive|endif
name|QHash
operator|<
name|QMakeBaseKey
operator|,
name|QMakeBaseEnv
operator|*
operator|>
name|baseEnvs
expr_stmt|;
name|friend
name|class
name|QMakeEvaluator
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QMAKEGLOBALS_H
end_comment
end_unit
