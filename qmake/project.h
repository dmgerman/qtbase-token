begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the qmake application of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|PROJECT_H
end_ifndef
begin_define
DECL|macro|PROJECT_H
define|#
directive|define
name|PROJECT_H
end_define
begin_include
include|#
directive|include
file|<qstringlist.h>
end_include
begin_include
include|#
directive|include
file|<qtextstream.h>
end_include
begin_include
include|#
directive|include
file|<qstring.h>
end_include
begin_include
include|#
directive|include
file|<qstack.h>
end_include
begin_include
include|#
directive|include
file|<qhash.h>
end_include
begin_include
include|#
directive|include
file|<qmetatype.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QMakeProperty
name|class
name|QMakeProperty
decl_stmt|;
end_decl_stmt
begin_struct_decl
struct_decl|struct
name|ParsableBlock
struct_decl|;
end_struct_decl
begin_struct_decl
struct_decl|struct
name|IteratorBlock
struct_decl|;
end_struct_decl
begin_struct_decl
struct_decl|struct
name|FunctionBlock
struct_decl|;
end_struct_decl
begin_decl_stmt
name|class
name|QMakeProject
block|{
struct|struct
name|ScopeBlock
block|{
enum|enum
name|TestStatus
block|{
name|TestNone
block|,
name|TestFound
block|,
name|TestSeek
block|}
enum|;
name|ScopeBlock
argument_list|()
operator|:
name|iterate
argument_list|(
literal|0
argument_list|)
operator|,
name|ignore
argument_list|(
name|false
argument_list|)
operator|,
name|else_status
argument_list|(
argument|TestNone
argument_list|)
block|{ }
name|ScopeBlock
argument_list|(
argument|bool i
argument_list|)
operator|:
name|iterate
argument_list|(
literal|0
argument_list|)
operator|,
name|ignore
argument_list|(
name|i
argument_list|)
operator|,
name|else_status
argument_list|(
argument|TestNone
argument_list|)
block|{ }
operator|~
name|ScopeBlock
argument_list|()
expr_stmt|;
name|IteratorBlock
modifier|*
name|iterate
decl_stmt|;
name|uint
name|ignore
range|:
literal|1
decl_stmt|,
name|else_status
range|:
literal|2
decl_stmt|;
block|}
struct|;
name|friend
struct_decl|struct
name|ParsableBlock
struct_decl|;
name|friend
struct_decl|struct
name|IteratorBlock
struct_decl|;
name|friend
struct_decl|struct
name|FunctionBlock
struct_decl|;
name|QStack
operator|<
name|ScopeBlock
operator|>
name|scope_blocks
expr_stmt|;
name|QStack
operator|<
name|FunctionBlock
operator|*
operator|>
name|function_blocks
expr_stmt|;
name|IteratorBlock
modifier|*
name|iterator
decl_stmt|;
name|FunctionBlock
modifier|*
name|function
decl_stmt|;
name|QHash
operator|<
name|QString
operator|,
name|FunctionBlock
operator|*
operator|>
name|testFunctions
operator|,
name|replaceFunctions
expr_stmt|;
name|bool
name|recursive
decl_stmt|;
name|bool
name|host_build
decl_stmt|;
name|bool
name|need_restart
decl_stmt|;
name|bool
name|own_prop
decl_stmt|;
name|bool
name|backslashWarned
decl_stmt|;
name|QString
name|conffile
decl_stmt|;
name|QString
name|superfile
decl_stmt|;
name|QString
name|cachefile
decl_stmt|;
name|QString
name|real_spec
decl_stmt|,
name|short_spec
decl_stmt|;
name|QString
name|pfile
decl_stmt|;
name|QMakeProperty
modifier|*
name|prop
decl_stmt|;
name|void
name|reset
parameter_list|()
function_decl|;
name|QStringList
name|extra_configs
decl_stmt|;
name|QHash
operator|<
name|QString
operator|,
name|QStringList
operator|>
name|vars
operator|,
name|init_vars
operator|,
name|base_vars
operator|,
name|extra_vars
expr_stmt|;
name|bool
name|parse
argument_list|(
specifier|const
name|QString
operator|&
name|text
argument_list|,
name|QHash
operator|<
name|QString
argument_list|,
name|QStringList
operator|>
operator|&
name|place
argument_list|,
name|int
name|line_count
operator|=
literal|1
argument_list|)
decl_stmt|;
enum|enum
name|IncludeStatus
block|{
name|IncludeSuccess
block|,
name|IncludeFeatureAlreadyLoaded
block|,
name|IncludeFailure
block|,
name|IncludeNoExist
block|,
name|IncludeParseFailure
block|}
enum|;
enum|enum
name|IncludeFlags
block|{
name|IncludeFlagNone
init|=
literal|0x00
block|,
name|IncludeFlagFeature
init|=
literal|0x01
block|,
name|IncludeFlagNewParser
init|=
literal|0x02
block|,
name|IncludeFlagNewProject
init|=
literal|0x04
block|}
enum|;
name|IncludeStatus
name|doProjectInclude
argument_list|(
name|QString
name|file
argument_list|,
name|uchar
name|flags
argument_list|,
name|QHash
operator|<
name|QString
argument_list|,
name|QStringList
operator|>
operator|&
name|place
argument_list|)
decl_stmt|;
name|bool
name|doProjectCheckReqs
argument_list|(
specifier|const
name|QStringList
operator|&
name|deps
argument_list|,
name|QHash
operator|<
name|QString
argument_list|,
name|QStringList
operator|>
operator|&
name|place
argument_list|)
decl_stmt|;
name|bool
name|doVariableReplace
argument_list|(
name|QString
operator|&
name|str
argument_list|,
name|QHash
operator|<
name|QString
argument_list|,
name|QStringList
operator|>
operator|&
name|place
argument_list|)
decl_stmt|;
name|QStringList
name|doVariableReplaceExpand
argument_list|(
specifier|const
name|QString
operator|&
name|str
argument_list|,
name|QHash
operator|<
name|QString
argument_list|,
name|QStringList
operator|>
operator|&
name|place
argument_list|,
name|bool
operator|*
name|ok
operator|=
literal|0
argument_list|)
decl_stmt|;
name|void
name|init
parameter_list|(
name|QMakeProperty
modifier|*
parameter_list|)
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
name|void
name|loadDefaults
parameter_list|()
function_decl|;
name|void
name|setupProject
parameter_list|()
function_decl|;
name|QStringList
modifier|&
name|values
argument_list|(
specifier|const
name|QString
operator|&
name|v
argument_list|,
name|QHash
operator|<
name|QString
argument_list|,
name|QStringList
operator|>
operator|&
name|place
argument_list|)
decl_stmt|;
name|QStringList
modifier|&
name|magicValues
argument_list|(
specifier|const
name|QString
operator|&
name|v
argument_list|,
name|QHash
operator|<
name|QString
argument_list|,
name|QStringList
operator|>
operator|&
name|place
argument_list|)
decl_stmt|;
name|QStringList
name|qmakeFeaturePaths
parameter_list|()
function_decl|;
name|public
label|:
name|QMakeProject
argument_list|(
argument|QMakeProperty *p =
literal|0
argument_list|)
block|{
name|init
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
name|QMakeProject
argument_list|(
name|QMakeProject
operator|*
name|p
argument_list|,
specifier|const
name|QHash
operator|<
name|QString
argument_list|,
name|QStringList
operator|>
operator|*
name|nvars
operator|=
literal|0
argument_list|)
expr_stmt|;
operator|~
name|QMakeProject
argument_list|()
expr_stmt|;
name|void
name|setExtraVars
argument_list|(
specifier|const
name|QHash
operator|<
name|QString
argument_list|,
name|QStringList
operator|>
operator|&
name|_vars
argument_list|)
block|{
name|extra_vars
operator|=
name|_vars
expr_stmt|;
block|}
name|void
name|setExtraConfigs
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|_cfgs
parameter_list|)
block|{
name|extra_configs
operator|=
name|_cfgs
expr_stmt|;
block|}
enum|enum
block|{
name|ReadProFile
init|=
literal|0x01
block|,
name|ReadSetup
init|=
literal|0x02
block|,
name|ReadFeatures
init|=
literal|0x04
block|,
name|ReadAll
init|=
literal|0xFF
block|}
enum|;
specifier|inline
name|bool
name|parse
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
return|return
name|parse
argument_list|(
name|text
argument_list|,
name|vars
argument_list|)
return|;
block|}
name|bool
name|read
parameter_list|(
specifier|const
name|QString
modifier|&
name|project
parameter_list|,
name|uchar
name|cmd
init|=
name|ReadAll
parameter_list|)
function_decl|;
name|bool
name|read
parameter_list|(
name|uchar
name|cmd
init|=
name|ReadAll
parameter_list|)
function_decl|;
name|QStringList
name|userExpandFunctions
parameter_list|()
block|{
return|return
name|replaceFunctions
operator|.
name|keys
argument_list|()
return|;
block|}
name|QStringList
name|userTestFunctions
parameter_list|()
block|{
return|return
name|testFunctions
operator|.
name|keys
argument_list|()
return|;
block|}
name|QString
name|projectFile
parameter_list|()
function_decl|;
name|QString
name|confFile
argument_list|()
specifier|const
block|{
return|return
name|conffile
return|;
block|}
name|QString
name|cacheFile
argument_list|()
specifier|const
block|{
return|return
name|cachefile
return|;
block|}
name|QString
name|specDir
argument_list|()
specifier|const
block|{
return|return
name|real_spec
return|;
block|}
specifier|inline
name|QMakeProperty
modifier|*
name|properties
parameter_list|()
block|{
return|return
name|prop
return|;
block|}
name|bool
name|doProjectTest
argument_list|(
name|QString
name|str
argument_list|,
name|QHash
operator|<
name|QString
argument_list|,
name|QStringList
operator|>
operator|&
name|place
argument_list|)
decl_stmt|;
name|bool
name|doProjectTest
argument_list|(
name|QString
name|func
argument_list|,
specifier|const
name|QString
operator|&
name|params
argument_list|,
name|QHash
operator|<
name|QString
argument_list|,
name|QStringList
operator|>
operator|&
name|place
argument_list|)
decl_stmt|;
name|bool
name|doProjectTest
argument_list|(
name|QString
name|func
argument_list|,
name|QStringList
name|args
argument_list|,
name|QHash
operator|<
name|QString
argument_list|,
name|QStringList
operator|>
operator|&
name|place
argument_list|)
decl_stmt|;
name|bool
name|doProjectTest
argument_list|(
name|QString
name|func
argument_list|,
name|QList
operator|<
name|QStringList
operator|>
name|args
argument_list|,
name|QHash
operator|<
name|QString
argument_list|,
name|QStringList
operator|>
operator|&
name|place
argument_list|)
decl_stmt|;
name|QStringList
name|doProjectExpand
argument_list|(
name|QString
name|func
argument_list|,
specifier|const
name|QString
operator|&
name|params
argument_list|,
name|QHash
operator|<
name|QString
argument_list|,
name|QStringList
operator|>
operator|&
name|place
argument_list|)
decl_stmt|;
name|QStringList
name|doProjectExpand
argument_list|(
name|QString
name|func
argument_list|,
name|QStringList
name|args
argument_list|,
name|QHash
operator|<
name|QString
argument_list|,
name|QStringList
operator|>
operator|&
name|place
argument_list|)
decl_stmt|;
name|QStringList
name|doProjectExpand
argument_list|(
name|QString
name|func
argument_list|,
name|QList
operator|<
name|QStringList
operator|>
name|args
argument_list|,
name|QHash
operator|<
name|QString
argument_list|,
name|QStringList
operator|>
operator|&
name|place
argument_list|)
decl_stmt|;
name|QStringList
name|expand
parameter_list|(
specifier|const
name|QString
modifier|&
name|v
parameter_list|)
function_decl|;
name|QString
name|expand
parameter_list|(
specifier|const
name|QString
modifier|&
name|v
parameter_list|,
specifier|const
name|QString
modifier|&
name|file
parameter_list|,
name|int
name|line
parameter_list|)
function_decl|;
name|QStringList
name|expand
argument_list|(
specifier|const
name|QString
operator|&
name|func
argument_list|,
specifier|const
name|QList
operator|<
name|QStringList
operator|>
operator|&
name|args
argument_list|)
decl_stmt|;
name|bool
name|test
parameter_list|(
specifier|const
name|QString
modifier|&
name|v
parameter_list|)
function_decl|;
name|bool
name|test
argument_list|(
specifier|const
name|QString
operator|&
name|func
argument_list|,
specifier|const
name|QList
operator|<
name|QStringList
operator|>
operator|&
name|args
argument_list|)
decl_stmt|;
name|bool
name|isActiveConfig
argument_list|(
specifier|const
name|QString
operator|&
name|x
argument_list|,
name|bool
name|regex
operator|=
name|false
argument_list|,
name|QHash
operator|<
name|QString
argument_list|,
name|QStringList
operator|>
operator|*
name|place
operator|=
name|NULL
argument_list|)
decl_stmt|;
name|bool
name|isSet
parameter_list|(
specifier|const
name|QString
modifier|&
name|v
parameter_list|)
block|{
return|return
name|vars
operator|.
name|contains
argument_list|(
name|v
argument_list|)
return|;
block|}
name|bool
name|isEmpty
parameter_list|(
specifier|const
name|QString
modifier|&
name|v
parameter_list|)
function_decl|;
name|QStringList
modifier|&
name|values
parameter_list|(
specifier|const
name|QString
modifier|&
name|v
parameter_list|)
block|{
return|return
name|vars
index|[
name|v
index|]
return|;
block|}
name|QString
name|first
parameter_list|(
specifier|const
name|QString
modifier|&
name|v
parameter_list|)
function_decl|;
name|int
name|intValue
parameter_list|(
specifier|const
name|QString
modifier|&
name|v
parameter_list|,
name|int
name|defaultValue
init|=
literal|0
parameter_list|)
function_decl|;
name|QHash
operator|<
name|QString
operator|,
name|QStringList
operator|>
operator|&
name|variables
argument_list|()
block|{
return|return
name|vars
return|;
block|}
name|bool
name|isRecursive
argument_list|()
specifier|const
block|{
return|return
name|recursive
return|;
block|}
name|bool
name|isHostBuild
argument_list|()
specifier|const
block|{
return|return
name|host_build
return|;
block|}
name|protected
label|:
name|friend
name|class
name|MakefileGenerator
decl_stmt|;
name|bool
name|read
argument_list|(
specifier|const
name|QString
operator|&
name|file
argument_list|,
name|QHash
operator|<
name|QString
argument_list|,
name|QStringList
operator|>
operator|&
name|place
argument_list|)
decl_stmt|;
name|bool
name|read
argument_list|(
name|QTextStream
operator|&
name|file
argument_list|,
name|QHash
operator|<
name|QString
argument_list|,
name|QStringList
operator|>
operator|&
name|place
argument_list|)
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QMakeProject*
argument_list|)
end_macro
begin_expr_stmt
DECL|function|projectFile
specifier|inline
name|QString
name|QMakeProject
operator|::
name|projectFile
argument_list|()
block|{
if|if
condition|(
name|pfile
operator|==
literal|"-"
condition|)
return|return
name|QString
argument_list|(
literal|"(stdin)"
argument_list|)
return|;
end_expr_stmt
begin_return
return|return
name|pfile
return|;
end_return
begin_expr_stmt
unit|}  inline
DECL|function|first
name|QString
name|QMakeProject
operator|::
name|first
argument_list|(
argument|const QString&v
argument_list|)
block|{
specifier|const
name|QStringList
name|vals
operator|=
name|values
argument_list|(
name|v
argument_list|)
block|;
if|if
condition|(
name|vals
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|QString
argument_list|(
literal|""
argument_list|)
return|;
end_expr_stmt
begin_return
return|return
name|vals
operator|.
name|first
argument_list|()
return|;
end_return
begin_expr_stmt
unit|}  inline
DECL|function|intValue
name|int
name|QMakeProject
operator|::
name|intValue
argument_list|(
argument|const QString&v
argument_list|,
argument|int defaultValue
argument_list|)
block|{
specifier|const
name|QString
name|str
operator|=
name|first
argument_list|(
name|v
argument_list|)
block|;
if|if
condition|(
operator|!
name|str
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|bool
name|ok
decl_stmt|;
name|int
name|i
init|=
name|str
operator|.
name|toInt
argument_list|(
operator|&
name|ok
argument_list|)
decl_stmt|;
if|if
condition|(
name|ok
condition|)
return|return
name|i
return|;
block|}
end_expr_stmt
begin_return
return|return
name|defaultValue
return|;
end_return
begin_endif
unit|}  QT_END_NAMESPACE
endif|#
directive|endif
end_endif
begin_comment
comment|// PROJECT_H
end_comment
end_unit
