begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the qmake application of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"option.h"
end_include
begin_include
include|#
directive|include
file|"cachekeys.h"
end_include
begin_include
include|#
directive|include
file|<qdir.h>
end_include
begin_include
include|#
directive|include
file|<qregexp.h>
end_include
begin_include
include|#
directive|include
file|<qhash.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qsettings.h>
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|<stdarg.h>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
comment|//convenience
DECL|member|application_argv0
specifier|const
name|char
modifier|*
name|Option
operator|::
name|application_argv0
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|prf_ext
name|QString
name|Option
operator|::
name|prf_ext
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|prl_ext
name|QString
name|Option
operator|::
name|prl_ext
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|libtool_ext
name|QString
name|Option
operator|::
name|libtool_ext
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|pkgcfg_ext
name|QString
name|Option
operator|::
name|pkgcfg_ext
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|ui_ext
name|QString
name|Option
operator|::
name|ui_ext
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|h_ext
name|QStringList
name|Option
operator|::
name|h_ext
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|cpp_moc_ext
name|QString
name|Option
operator|::
name|cpp_moc_ext
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|cpp_ext
name|QStringList
name|Option
operator|::
name|cpp_ext
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|c_ext
name|QStringList
name|Option
operator|::
name|c_ext
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|obj_ext
name|QString
name|Option
operator|::
name|obj_ext
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|lex_ext
name|QString
name|Option
operator|::
name|lex_ext
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|yacc_ext
name|QString
name|Option
operator|::
name|yacc_ext
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|pro_ext
name|QString
name|Option
operator|::
name|pro_ext
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|dir_sep
name|QString
name|Option
operator|::
name|dir_sep
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|dirlist_sep
name|QString
name|Option
operator|::
name|dirlist_sep
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|h_moc_mod
name|QString
name|Option
operator|::
name|h_moc_mod
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|yacc_mod
name|QString
name|Option
operator|::
name|yacc_mod
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|lex_mod
name|QString
name|Option
operator|::
name|lex_mod
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|res_ext
name|QString
name|Option
operator|::
name|res_ext
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|field_sep
name|char
name|Option
operator|::
name|field_sep
decl_stmt|;
end_decl_stmt
begin_comment
comment|//mode
end_comment
begin_decl_stmt
DECL|member|qmake_mode
name|Option
operator|::
name|QMAKE_MODE
name|Option
operator|::
name|qmake_mode
init|=
name|Option
operator|::
name|QMAKE_GENERATE_NOTHING
decl_stmt|;
end_decl_stmt
begin_comment
comment|//all modes
end_comment
begin_decl_stmt
DECL|member|qmake_abslocation
name|QString
name|Option
operator|::
name|qmake_abslocation
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|warn_level
name|int
name|Option
operator|::
name|warn_level
init|=
name|WarnLogic
operator||
name|WarnDeprecated
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|debug_level
name|int
name|Option
operator|::
name|debug_level
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|output
name|QFile
name|Option
operator|::
name|output
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|output_dir
name|QString
name|Option
operator|::
name|output_dir
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|recursive
name|bool
name|Option
operator|::
name|recursive
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|before_user_vars
name|QStringList
name|Option
operator|::
name|before_user_vars
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|after_user_vars
name|QStringList
name|Option
operator|::
name|after_user_vars
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|user_template
name|QString
name|Option
operator|::
name|user_template
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|user_template_prefix
name|QString
name|Option
operator|::
name|user_template_prefix
decl_stmt|;
end_decl_stmt
begin_comment
comment|//QMAKE_*_PROPERTY stuff
end_comment
begin_decl_stmt
DECL|member|properties
name|QStringList
name|Option
operator|::
name|prop
operator|::
name|properties
decl_stmt|;
end_decl_stmt
begin_comment
comment|//QMAKE_GENERATE_PROJECT stuff
end_comment
begin_decl_stmt
DECL|member|do_pwd
name|bool
name|Option
operator|::
name|projfile
operator|::
name|do_pwd
init|=
literal|true
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|project_dirs
name|QStringList
name|Option
operator|::
name|projfile
operator|::
name|project_dirs
decl_stmt|;
end_decl_stmt
begin_comment
comment|//QMAKE_GENERATE_MAKEFILE stuff
end_comment
begin_decl_stmt
DECL|member|qmakespec
name|QString
name|Option
operator|::
name|mkfile
operator|::
name|qmakespec
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|xqmakespec
name|QString
name|Option
operator|::
name|mkfile
operator|::
name|xqmakespec
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|cachefile_depth
name|int
name|Option
operator|::
name|mkfile
operator|::
name|cachefile_depth
init|=
operator|-
literal|1
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|do_deps
name|bool
name|Option
operator|::
name|mkfile
operator|::
name|do_deps
init|=
literal|true
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|do_mocs
name|bool
name|Option
operator|::
name|mkfile
operator|::
name|do_mocs
init|=
literal|true
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|do_dep_heuristics
name|bool
name|Option
operator|::
name|mkfile
operator|::
name|do_dep_heuristics
init|=
literal|true
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|do_preprocess
name|bool
name|Option
operator|::
name|mkfile
operator|::
name|do_preprocess
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|do_stub_makefile
name|bool
name|Option
operator|::
name|mkfile
operator|::
name|do_stub_makefile
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|do_cache
name|bool
name|Option
operator|::
name|mkfile
operator|::
name|do_cache
init|=
literal|true
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|source_root
name|QString
name|Option
operator|::
name|mkfile
operator|::
name|source_root
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|build_root
name|QString
name|Option
operator|::
name|mkfile
operator|::
name|build_root
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|cachefile
name|QString
name|Option
operator|::
name|mkfile
operator|::
name|cachefile
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|project_files
name|QStringList
name|Option
operator|::
name|mkfile
operator|::
name|project_files
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|qmakespec_commandline
name|QString
name|Option
operator|::
name|mkfile
operator|::
name|qmakespec_commandline
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|xqmakespec_commandline
name|QString
name|Option
operator|::
name|mkfile
operator|::
name|xqmakespec_commandline
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|default_mode
specifier|static
name|Option
operator|::
name|QMAKE_MODE
name|default_mode
parameter_list|(
name|QString
name|progname
parameter_list|)
block|{
name|int
name|s
init|=
name|progname
operator|.
name|lastIndexOf
argument_list|(
name|QDir
operator|::
name|separator
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|s
operator|!=
operator|-
literal|1
condition|)
name|progname
operator|=
name|progname
operator|.
name|right
argument_list|(
name|progname
operator|.
name|length
argument_list|()
operator|-
operator|(
name|s
operator|+
literal|1
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|progname
operator|==
literal|"qmakegen"
condition|)
return|return
name|Option
operator|::
name|QMAKE_GENERATE_PROJECT
return|;
elseif|else
if|if
condition|(
name|progname
operator|==
literal|"qt-config"
condition|)
return|return
name|Option
operator|::
name|QMAKE_QUERY_PROPERTY
return|;
return|return
name|Option
operator|::
name|QMAKE_GENERATE_MAKEFILE
return|;
block|}
end_function
begin_function
DECL|function|detectProjectFile
specifier|static
name|QString
name|detectProjectFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|path
parameter_list|)
block|{
name|QString
name|ret
decl_stmt|;
name|QDir
name|dir
argument_list|(
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
name|dir
operator|.
name|exists
argument_list|(
name|dir
operator|.
name|dirName
argument_list|()
operator|+
name|Option
operator|::
name|pro_ext
argument_list|)
condition|)
block|{
name|ret
operator|=
name|dir
operator|.
name|filePath
argument_list|(
name|dir
operator|.
name|dirName
argument_list|()
argument_list|)
operator|+
name|Option
operator|::
name|pro_ext
expr_stmt|;
block|}
else|else
block|{
comment|//last try..
name|QStringList
name|profiles
init|=
name|dir
operator|.
name|entryList
argument_list|(
name|QStringList
argument_list|(
literal|"*"
operator|+
name|Option
operator|::
name|pro_ext
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|profiles
operator|.
name|count
argument_list|()
operator|==
literal|1
condition|)
name|ret
operator|=
name|dir
operator|.
name|filePath
argument_list|(
name|profiles
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|cleanSpec
specifier|static
name|QString
name|cleanSpec
parameter_list|(
specifier|const
name|QString
modifier|&
name|spec
parameter_list|)
block|{
name|QString
name|ret
init|=
name|QDir
operator|::
name|cleanPath
argument_list|(
name|spec
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|.
name|contains
argument_list|(
literal|'/'
argument_list|)
condition|)
block|{
specifier|const
name|QFileInfo
name|specDirInfo
argument_list|(
name|ret
argument_list|)
decl_stmt|;
if|if
condition|(
name|specDirInfo
operator|.
name|exists
argument_list|()
operator|&&
name|specDirInfo
operator|.
name|isDir
argument_list|()
condition|)
name|ret
operator|=
name|QDir
operator|::
name|cleanPath
argument_list|(
name|specDirInfo
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
return|return
name|ret
return|;
block|}
end_function
begin_function_decl
name|QString
name|project_builtin_regx
parameter_list|()
function_decl|;
end_function_decl
begin_function
DECL|function|usage
name|bool
name|usage
parameter_list|(
specifier|const
name|char
modifier|*
name|a0
parameter_list|)
block|{
name|fprintf
argument_list|(
name|stdout
argument_list|,
literal|"Usage: %s [mode] [options] [files]\n"
literal|"\n"
literal|"QMake has two modes, one mode for generating project files based on\n"
literal|"some heuristics, and the other for generating makefiles. Normally you\n"
literal|"shouldn't need to specify a mode, as makefile generation is the default\n"
literal|"mode for qmake, but you may use this to test qmake on an existing project\n"
literal|"\n"
literal|"Mode:\n"
literal|"  -project       Put qmake into project file generation mode%s\n"
literal|"                 In this mode qmake interprets files as files to\n"
literal|"                 be built,\n"
literal|"                 defaults to %s\n"
literal|"                 Note: The created .pro file probably will \n"
literal|"                 need to be edited. For example add the QT variable to \n"
literal|"                 specify what modules are required.\n"
literal|"  -makefile      Put qmake into makefile generation mode%s\n"
literal|"                 In this mode qmake interprets files as project files to\n"
literal|"                 be processed, if skipped qmake will try to find a project\n"
literal|"                 file in your current working directory\n"
literal|"\n"
literal|"Warnings Options:\n"
literal|"  -Wnone         Turn off all warnings; specific ones may be re-enabled by\n"
literal|"                 later -W options\n"
literal|"  -Wall          Turn on all warnings\n"
literal|"  -Wparser       Turn on parser warnings\n"
literal|"  -Wlogic        Turn on logic warnings (on by default)\n"
literal|"  -Wdeprecated   Turn on deprecation warnings (on by default)\n"
literal|"\n"
literal|"Options:\n"
literal|"   * You can place any variable assignment in options and it will be     *\n"
literal|"   * processed as if it was in [files]. These assignments will be parsed *\n"
literal|"   * before [files].                                                     *\n"
literal|"  -o file        Write output to file\n"
literal|"  -d             Increase debug level\n"
literal|"  -t templ       Overrides TEMPLATE as templ\n"
literal|"  -tp prefix     Overrides TEMPLATE so that prefix is prefixed into the value\n"
literal|"  -help          This help\n"
literal|"  -v             Version information\n"
literal|"  -after         All variable assignments after this will be\n"
literal|"                 parsed after [files]\n"
literal|"  -norecursive   Don't do a recursive search\n"
literal|"  -recursive     Do a recursive search\n"
literal|"  -set<prop><value> Set persistent property\n"
literal|"  -unset<prop>  Unset persistent property\n"
literal|"  -query<prop>  Query persistent property. Show all if<prop> is empty.\n"
literal|"  -cache file    Use file as cache           [makefile mode only]\n"
literal|"  -spec spec     Use spec as QMAKESPEC       [makefile mode only]\n"
literal|"  -nocache       Don't use a cache file      [makefile mode only]\n"
literal|"  -nodepend      Don't generate dependencies [makefile mode only]\n"
literal|"  -nomoc         Don't generate moc targets  [makefile mode only]\n"
literal|"  -nopwd         Don't look for files in pwd [project mode only]\n"
argument_list|,
name|a0
argument_list|,
name|default_mode
argument_list|(
name|a0
argument_list|)
operator|==
name|Option
operator|::
name|QMAKE_GENERATE_PROJECT
condition|?
literal|" (default)"
else|:
literal|""
argument_list|,
name|project_builtin_regx
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
name|default_mode
argument_list|(
name|a0
argument_list|)
operator|==
name|Option
operator|::
name|QMAKE_GENERATE_MAKEFILE
condition|?
literal|" (default)"
else|:
literal|""
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
end_function
begin_function
name|int
DECL|function|parseCommandLine
name|Option
operator|::
name|parseCommandLine
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
modifier|*
name|argv
parameter_list|,
name|int
name|skip
parameter_list|)
block|{
name|QStringList
name|user_configs
decl_stmt|;
name|bool
name|before
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|x
init|=
name|skip
init|;
name|x
operator|<
name|argc
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
operator|*
name|argv
index|[
name|x
index|]
operator|==
literal|'-'
operator|&&
name|strlen
argument_list|(
name|argv
index|[
name|x
index|]
argument_list|)
operator|>
literal|1
condition|)
block|{
comment|/* options */
name|QString
name|opt
init|=
name|argv
index|[
name|x
index|]
operator|+
literal|1
decl_stmt|;
comment|//first param is a mode, or we default
if|if
condition|(
name|x
operator|==
literal|1
condition|)
block|{
name|bool
name|specified
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|opt
operator|==
literal|"project"
condition|)
block|{
name|Option
operator|::
name|recursive
operator|=
literal|true
expr_stmt|;
name|Option
operator|::
name|qmake_mode
operator|=
name|Option
operator|::
name|QMAKE_GENERATE_PROJECT
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
literal|"prl"
condition|)
block|{
name|Option
operator|::
name|mkfile
operator|::
name|do_deps
operator|=
literal|false
expr_stmt|;
name|Option
operator|::
name|mkfile
operator|::
name|do_mocs
operator|=
literal|false
expr_stmt|;
name|Option
operator|::
name|qmake_mode
operator|=
name|Option
operator|::
name|QMAKE_GENERATE_PRL
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
literal|"set"
condition|)
block|{
name|Option
operator|::
name|qmake_mode
operator|=
name|Option
operator|::
name|QMAKE_SET_PROPERTY
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
literal|"unset"
condition|)
block|{
name|Option
operator|::
name|qmake_mode
operator|=
name|Option
operator|::
name|QMAKE_UNSET_PROPERTY
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
literal|"query"
condition|)
block|{
name|Option
operator|::
name|qmake_mode
operator|=
name|Option
operator|::
name|QMAKE_QUERY_PROPERTY
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
literal|"makefile"
condition|)
block|{
name|Option
operator|::
name|qmake_mode
operator|=
name|Option
operator|::
name|QMAKE_GENERATE_MAKEFILE
expr_stmt|;
block|}
else|else
block|{
name|specified
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|specified
condition|)
continue|continue;
block|}
comment|//all modes
if|if
condition|(
name|opt
operator|==
literal|"o"
operator|||
name|opt
operator|==
literal|"output"
condition|)
block|{
name|Option
operator|::
name|output
operator|.
name|setFileName
argument_list|(
name|argv
index|[
operator|++
name|x
index|]
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
literal|"after"
condition|)
block|{
name|before
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
literal|"t"
operator|||
name|opt
operator|==
literal|"template"
condition|)
block|{
name|Option
operator|::
name|user_template
operator|=
name|argv
index|[
operator|++
name|x
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
literal|"tp"
operator|||
name|opt
operator|==
literal|"template_prefix"
condition|)
block|{
name|Option
operator|::
name|user_template_prefix
operator|=
name|argv
index|[
operator|++
name|x
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
literal|"unix"
condition|)
block|{
name|Option
operator|::
name|dir_sep
operator|=
literal|"/"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
literal|"win32"
condition|)
block|{
name|Option
operator|::
name|dir_sep
operator|=
literal|"\\"
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
literal|"d"
condition|)
block|{
name|Option
operator|::
name|debug_level
operator|++
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
literal|"version"
operator|||
name|opt
operator|==
literal|"v"
operator|||
name|opt
operator|==
literal|"-version"
condition|)
block|{
name|fprintf
argument_list|(
name|stdout
argument_list|,
literal|"QMake version %s\n"
literal|"Using Qt version %s in %s\n"
argument_list|,
name|qmake_version
argument_list|()
argument_list|,
name|QT_VERSION_STR
argument_list|,
name|QLibraryInfo
operator|::
name|location
argument_list|(
name|QLibraryInfo
operator|::
name|LibrariesPath
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QMAKE_OPENSOURCE_VERSION
name|fprintf
argument_list|(
name|stdout
argument_list|,
literal|"QMake is Open Source software from Nokia Corporation and/or its subsidiary(-ies).\n"
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|Option
operator|::
name|QMAKE_CMDLINE_BAIL
return|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
literal|"h"
operator|||
name|opt
operator|==
literal|"help"
condition|)
block|{
return|return
name|Option
operator|::
name|QMAKE_CMDLINE_SHOW_USAGE
return|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
literal|"Wall"
condition|)
block|{
name|Option
operator|::
name|warn_level
operator||=
name|WarnAll
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
literal|"Wparser"
condition|)
block|{
name|Option
operator|::
name|warn_level
operator||=
name|WarnParser
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
literal|"Wlogic"
condition|)
block|{
name|Option
operator|::
name|warn_level
operator||=
name|WarnLogic
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
literal|"Wdeprecated"
condition|)
block|{
name|Option
operator|::
name|warn_level
operator||=
name|WarnDeprecated
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
literal|"Wnone"
condition|)
block|{
name|Option
operator|::
name|warn_level
operator|=
name|WarnNone
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
literal|"r"
operator|||
name|opt
operator|==
literal|"recursive"
condition|)
block|{
name|Option
operator|::
name|recursive
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
literal|"nr"
operator|||
name|opt
operator|==
literal|"norecursive"
condition|)
block|{
name|Option
operator|::
name|recursive
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
literal|"config"
condition|)
block|{
name|user_configs
operator|+=
name|argv
index|[
operator|++
name|x
index|]
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|Option
operator|::
name|qmake_mode
operator|==
name|Option
operator|::
name|QMAKE_GENERATE_MAKEFILE
operator|||
name|Option
operator|::
name|qmake_mode
operator|==
name|Option
operator|::
name|QMAKE_GENERATE_PRL
condition|)
block|{
if|if
condition|(
name|opt
operator|==
literal|"nodepend"
operator|||
name|opt
operator|==
literal|"nodepends"
condition|)
block|{
name|Option
operator|::
name|mkfile
operator|::
name|do_deps
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
literal|"nomoc"
condition|)
block|{
name|Option
operator|::
name|mkfile
operator|::
name|do_mocs
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
literal|"nocache"
condition|)
block|{
name|Option
operator|::
name|mkfile
operator|::
name|do_cache
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
literal|"createstub"
condition|)
block|{
name|Option
operator|::
name|mkfile
operator|::
name|do_stub_makefile
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
literal|"nodependheuristics"
condition|)
block|{
name|Option
operator|::
name|mkfile
operator|::
name|do_dep_heuristics
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
literal|"E"
condition|)
block|{
name|Option
operator|::
name|mkfile
operator|::
name|do_preprocess
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
literal|"cache"
condition|)
block|{
name|Option
operator|::
name|mkfile
operator|::
name|cachefile
operator|=
name|argv
index|[
operator|++
name|x
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
literal|"platform"
operator|||
name|opt
operator|==
literal|"spec"
condition|)
block|{
name|Option
operator|::
name|mkfile
operator|::
name|qmakespec
operator|=
name|cleanSpec
argument_list|(
name|argv
index|[
operator|++
name|x
index|]
argument_list|)
expr_stmt|;
name|Option
operator|::
name|mkfile
operator|::
name|qmakespec_commandline
operator|=
name|argv
index|[
name|x
index|]
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|opt
operator|==
literal|"xplatform"
operator|||
name|opt
operator|==
literal|"xspec"
condition|)
block|{
name|Option
operator|::
name|mkfile
operator|::
name|xqmakespec
operator|=
name|cleanSpec
argument_list|(
name|argv
index|[
operator|++
name|x
index|]
argument_list|)
expr_stmt|;
name|Option
operator|::
name|mkfile
operator|::
name|xqmakespec_commandline
operator|=
name|argv
index|[
name|x
index|]
expr_stmt|;
block|}
else|else
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"***Unknown option -%s\n"
argument_list|,
name|opt
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Option
operator|::
name|QMAKE_CMDLINE_SHOW_USAGE
operator||
name|Option
operator|::
name|QMAKE_CMDLINE_ERROR
return|;
block|}
block|}
elseif|else
if|if
condition|(
name|Option
operator|::
name|qmake_mode
operator|==
name|Option
operator|::
name|QMAKE_GENERATE_PROJECT
condition|)
block|{
if|if
condition|(
name|opt
operator|==
literal|"nopwd"
condition|)
block|{
name|Option
operator|::
name|projfile
operator|::
name|do_pwd
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"***Unknown option -%s\n"
argument_list|,
name|opt
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|Option
operator|::
name|QMAKE_CMDLINE_SHOW_USAGE
operator||
name|Option
operator|::
name|QMAKE_CMDLINE_ERROR
return|;
block|}
block|}
block|}
block|}
else|else
block|{
name|QString
name|arg
init|=
name|argv
index|[
name|x
index|]
decl_stmt|;
if|if
condition|(
name|arg
operator|.
name|indexOf
argument_list|(
literal|'='
argument_list|)
operator|!=
operator|-
literal|1
condition|)
block|{
if|if
condition|(
name|before
condition|)
name|Option
operator|::
name|before_user_vars
operator|.
name|append
argument_list|(
name|arg
argument_list|)
expr_stmt|;
else|else
name|Option
operator|::
name|after_user_vars
operator|.
name|append
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|bool
name|handled
init|=
literal|true
decl_stmt|;
if|if
condition|(
name|Option
operator|::
name|qmake_mode
operator|==
name|Option
operator|::
name|QMAKE_QUERY_PROPERTY
operator|||
name|Option
operator|::
name|qmake_mode
operator|==
name|Option
operator|::
name|QMAKE_SET_PROPERTY
operator|||
name|Option
operator|::
name|qmake_mode
operator|==
name|Option
operator|::
name|QMAKE_UNSET_PROPERTY
condition|)
block|{
name|Option
operator|::
name|prop
operator|::
name|properties
operator|.
name|append
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QFileInfo
name|fi
argument_list|(
name|arg
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|fi
operator|.
name|makeAbsolute
argument_list|()
condition|)
comment|//strange
name|arg
operator|=
name|fi
operator|.
name|filePath
argument_list|()
expr_stmt|;
if|if
condition|(
name|Option
operator|::
name|qmake_mode
operator|==
name|Option
operator|::
name|QMAKE_GENERATE_MAKEFILE
operator|||
name|Option
operator|::
name|qmake_mode
operator|==
name|Option
operator|::
name|QMAKE_GENERATE_PRL
condition|)
block|{
if|if
condition|(
name|fi
operator|.
name|isDir
argument_list|()
condition|)
block|{
name|QString
name|proj
init|=
name|detectProjectFile
argument_list|(
name|arg
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|proj
operator|.
name|isNull
argument_list|()
condition|)
name|arg
operator|=
name|proj
expr_stmt|;
block|}
name|Option
operator|::
name|mkfile
operator|::
name|project_files
operator|.
name|append
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|Option
operator|::
name|qmake_mode
operator|==
name|Option
operator|::
name|QMAKE_GENERATE_PROJECT
condition|)
block|{
name|Option
operator|::
name|projfile
operator|::
name|project_dirs
operator|.
name|append
argument_list|(
name|arg
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|handled
operator|=
literal|false
expr_stmt|;
block|}
block|}
if|if
condition|(
operator|!
name|handled
condition|)
block|{
return|return
name|Option
operator|::
name|QMAKE_CMDLINE_SHOW_USAGE
operator||
name|Option
operator|::
name|QMAKE_CMDLINE_ERROR
return|;
block|}
block|}
block|}
block|}
if|if
condition|(
operator|!
name|user_configs
operator|.
name|isEmpty
argument_list|()
condition|)
name|Option
operator|::
name|before_user_vars
operator|+=
literal|"CONFIG += "
operator|+
name|user_configs
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
expr_stmt|;
if|if
condition|(
name|Option
operator|::
name|mkfile
operator|::
name|xqmakespec
operator|.
name|isEmpty
argument_list|()
condition|)
name|Option
operator|::
name|mkfile
operator|::
name|xqmakespec
operator|=
name|Option
operator|::
name|mkfile
operator|::
name|qmakespec
expr_stmt|;
return|return
name|Option
operator|::
name|QMAKE_CMDLINE_SUCCESS
return|;
block|}
end_function
begin_function
name|int
DECL|function|init
name|Option
operator|::
name|init
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
modifier|*
name|argv
parameter_list|)
block|{
name|Option
operator|::
name|application_argv0
operator|=
literal|0
expr_stmt|;
name|Option
operator|::
name|prf_ext
operator|=
literal|".prf"
expr_stmt|;
name|Option
operator|::
name|pro_ext
operator|=
literal|".pro"
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|Option
operator|::
name|dir_sep
operator|=
literal|"\\"
expr_stmt|;
name|Option
operator|::
name|dirlist_sep
operator|=
literal|";"
expr_stmt|;
else|#
directive|else
name|Option
operator|::
name|dir_sep
operator|=
literal|"/"
expr_stmt|;
name|Option
operator|::
name|dirlist_sep
operator|=
literal|":"
expr_stmt|;
endif|#
directive|endif
name|Option
operator|::
name|field_sep
operator|=
literal|' '
expr_stmt|;
if|if
condition|(
name|argc
operator|&&
name|argv
condition|)
block|{
name|Option
operator|::
name|application_argv0
operator|=
name|argv
index|[
literal|0
index|]
expr_stmt|;
name|QString
name|argv0
init|=
name|argv
index|[
literal|0
index|]
decl_stmt|;
if|if
condition|(
name|Option
operator|::
name|qmake_mode
operator|==
name|Option
operator|::
name|QMAKE_GENERATE_NOTHING
condition|)
name|Option
operator|::
name|qmake_mode
operator|=
name|default_mode
argument_list|(
name|argv0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|argv0
operator|.
name|isEmpty
argument_list|()
operator|&&
operator|!
name|QFileInfo
argument_list|(
name|argv0
argument_list|)
operator|.
name|isRelative
argument_list|()
condition|)
block|{
name|Option
operator|::
name|qmake_abslocation
operator|=
name|argv0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|argv0
operator|.
name|contains
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
ifdef|#
directive|ifdef
name|Q_OS_WIN
operator|||
name|argv0
operator|.
name|contains
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\\'
argument_list|)
argument_list|)
endif|#
directive|endif
condition|)
block|{
comment|//relative PWD
name|Option
operator|::
name|qmake_abslocation
operator|=
name|QDir
operator|::
name|current
argument_list|()
operator|.
name|absoluteFilePath
argument_list|(
name|argv0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|//in the PATH
name|QByteArray
name|pEnv
init|=
name|qgetenv
argument_list|(
literal|"PATH"
argument_list|)
decl_stmt|;
name|QDir
name|currentDir
init|=
name|QDir
operator|::
name|current
argument_list|()
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|QStringList
name|paths
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|pEnv
argument_list|)
operator|.
name|split
argument_list|(
name|QLatin1String
argument_list|(
literal|";"
argument_list|)
argument_list|)
decl_stmt|;
else|#
directive|else
name|QStringList
name|paths
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|pEnv
argument_list|)
operator|.
name|split
argument_list|(
name|QLatin1String
argument_list|(
literal|":"
argument_list|)
argument_list|)
decl_stmt|;
endif|#
directive|endif
for|for
control|(
name|QStringList
operator|::
name|const_iterator
name|p
init|=
name|paths
operator|.
name|constBegin
argument_list|()
init|;
name|p
operator|!=
name|paths
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|p
control|)
block|{
if|if
condition|(
operator|(
operator|*
name|p
operator|)
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
name|QString
name|candidate
init|=
name|currentDir
operator|.
name|absoluteFilePath
argument_list|(
operator|*
name|p
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|argv0
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|candidate
operator|+=
literal|".exe"
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|QFile
operator|::
name|exists
argument_list|(
name|candidate
argument_list|)
condition|)
block|{
name|Option
operator|::
name|qmake_abslocation
operator|=
name|candidate
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
operator|!
name|Option
operator|::
name|qmake_abslocation
operator|.
name|isNull
argument_list|()
condition|)
name|Option
operator|::
name|qmake_abslocation
operator|=
name|QDir
operator|::
name|cleanPath
argument_list|(
name|Option
operator|::
name|qmake_abslocation
argument_list|)
expr_stmt|;
else|else
comment|// This is rather unlikely to ever happen on a modern system ...
name|Option
operator|::
name|qmake_abslocation
operator|=
name|QLibraryInfo
operator|::
name|rawLocation
argument_list|(
name|QLibraryInfo
operator|::
name|HostBinariesPath
argument_list|,
name|QLibraryInfo
operator|::
name|EffectivePaths
argument_list|)
operator|+
ifdef|#
directive|ifdef
name|Q_OS_WIN
literal|"/qmake.exe"
expr_stmt|;
else|#
directive|else
literal|"/qmake"
expr_stmt|;
endif|#
directive|endif
block|}
else|else
block|{
name|Option
operator|::
name|qmake_mode
operator|=
name|Option
operator|::
name|QMAKE_GENERATE_MAKEFILE
expr_stmt|;
block|}
specifier|const
name|QByteArray
name|envflags
init|=
name|qgetenv
argument_list|(
literal|"QMAKEFLAGS"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|envflags
operator|.
name|isNull
argument_list|()
condition|)
block|{
name|int
name|env_argc
init|=
literal|0
decl_stmt|,
name|env_size
init|=
literal|0
decl_stmt|,
name|currlen
init|=
literal|0
decl_stmt|;
name|char
name|quote
init|=
literal|0
decl_stmt|,
modifier|*
modifier|*
name|env_argv
init|=
name|NULL
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|envflags
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
operator|!
name|quote
operator|&&
operator|(
name|envflags
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|'\''
operator|||
name|envflags
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|'"'
operator|)
condition|)
block|{
name|quote
operator|=
name|envflags
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|envflags
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
name|quote
condition|)
block|{
name|quote
operator|=
literal|0
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|quote
operator|&&
name|envflags
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|' '
condition|)
block|{
if|if
condition|(
name|currlen
operator|&&
name|env_argv
operator|&&
name|env_argv
index|[
name|env_argc
index|]
condition|)
block|{
name|env_argv
index|[
name|env_argc
index|]
index|[
name|currlen
index|]
operator|=
literal|'\0'
expr_stmt|;
name|currlen
operator|=
literal|0
expr_stmt|;
name|env_argc
operator|++
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|env_argv
operator|||
name|env_argc
operator|>
name|env_size
condition|)
block|{
name|env_argv
operator|=
operator|(
name|char
operator|*
operator|*
operator|)
name|realloc
argument_list|(
name|env_argv
argument_list|,
sizeof|sizeof
argument_list|(
name|char
operator|*
argument_list|)
operator|*
operator|(
name|env_size
operator|+=
literal|10
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i2
init|=
name|env_argc
init|;
name|i2
operator|<
name|env_size
condition|;
name|i2
operator|++
control|)
name|env_argv
index|[
name|i2
index|]
operator|=
name|NULL
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|env_argv
index|[
name|env_argc
index|]
condition|)
block|{
name|currlen
operator|=
literal|0
expr_stmt|;
name|env_argv
index|[
name|env_argc
index|]
operator|=
operator|(
name|char
operator|*
operator|)
name|malloc
argument_list|(
literal|255
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|currlen
operator|<
literal|255
condition|)
name|env_argv
index|[
name|env_argc
index|]
index|[
name|currlen
operator|++
index|]
operator|=
name|envflags
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|env_argv
condition|)
block|{
if|if
condition|(
name|env_argv
index|[
name|env_argc
index|]
condition|)
block|{
name|env_argv
index|[
name|env_argc
index|]
index|[
name|currlen
index|]
operator|=
literal|'\0'
expr_stmt|;
name|currlen
operator|=
literal|0
expr_stmt|;
name|env_argc
operator|++
expr_stmt|;
block|}
name|parseCommandLine
argument_list|(
name|env_argc
argument_list|,
name|env_argv
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i2
init|=
literal|0
init|;
name|i2
operator|<
name|env_size
condition|;
name|i2
operator|++
control|)
block|{
if|if
condition|(
name|env_argv
index|[
name|i2
index|]
condition|)
name|free
argument_list|(
name|env_argv
index|[
name|i2
index|]
argument_list|)
expr_stmt|;
block|}
name|free
argument_list|(
name|env_argv
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|argc
operator|&&
name|argv
condition|)
block|{
name|int
name|ret
init|=
name|parseCommandLine
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|,
literal|1
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|!=
name|Option
operator|::
name|QMAKE_CMDLINE_SUCCESS
condition|)
block|{
if|if
condition|(
operator|(
name|ret
operator|&
name|Option
operator|::
name|QMAKE_CMDLINE_SHOW_USAGE
operator|)
operator|!=
literal|0
condition|)
name|usage
argument_list|(
name|argv
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
return|return
name|ret
return|;
comment|//return ret == QMAKE_CMDLINE_SHOW_USAGE ? usage(argv[0]) : false;
block|}
block|}
comment|//last chance for defaults
if|if
condition|(
name|Option
operator|::
name|qmake_mode
operator|==
name|Option
operator|::
name|QMAKE_GENERATE_MAKEFILE
operator|||
name|Option
operator|::
name|qmake_mode
operator|==
name|Option
operator|::
name|QMAKE_GENERATE_PRL
condition|)
block|{
if|if
condition|(
name|Option
operator|::
name|mkfile
operator|::
name|xqmakespec
operator|.
name|isEmpty
argument_list|()
condition|)
name|Option
operator|::
name|mkfile
operator|::
name|xqmakespec
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|qgetenv
argument_list|(
literal|"XQMAKESPEC"
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|Option
operator|::
name|mkfile
operator|::
name|qmakespec
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|Option
operator|::
name|mkfile
operator|::
name|qmakespec
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|qgetenv
argument_list|(
literal|"QMAKESPEC"
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|Option
operator|::
name|mkfile
operator|::
name|xqmakespec
operator|.
name|isEmpty
argument_list|()
condition|)
name|Option
operator|::
name|mkfile
operator|::
name|xqmakespec
operator|=
name|Option
operator|::
name|mkfile
operator|::
name|qmakespec
expr_stmt|;
block|}
comment|//try REALLY hard to do it for them, lazy..
if|if
condition|(
name|Option
operator|::
name|mkfile
operator|::
name|project_files
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QString
name|proj
init|=
name|detectProjectFile
argument_list|(
name|qmake_getpwd
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|proj
operator|.
name|isNull
argument_list|()
condition|)
name|Option
operator|::
name|mkfile
operator|::
name|project_files
operator|.
name|append
argument_list|(
name|proj
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_BUILD_QMAKE_LIBRARY
if|if
condition|(
name|Option
operator|::
name|mkfile
operator|::
name|project_files
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|usage
argument_list|(
name|argv
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
return|return
name|Option
operator|::
name|QMAKE_CMDLINE_ERROR
return|;
block|}
endif|#
directive|endif
block|}
block|}
return|return
name|QMAKE_CMDLINE_SUCCESS
return|;
block|}
end_function
begin_function
DECL|function|prepareProject
name|void
name|Option
operator|::
name|prepareProject
parameter_list|(
specifier|const
name|QString
modifier|&
name|pfile
parameter_list|)
block|{
name|QString
name|srcpath
init|=
operator|(
name|pfile
operator|!=
literal|"-"
operator|)
condition|?
name|QDir
operator|::
name|cleanPath
argument_list|(
name|QFileInfo
argument_list|(
name|pfile
argument_list|)
operator|.
name|absolutePath
argument_list|()
argument_list|)
else|:
name|qmake_getpwd
argument_list|()
decl_stmt|;
if|if
condition|(
name|srcpath
operator|!=
name|output_dir
condition|)
block|{
if|if
condition|(
operator|!
name|srcpath
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
condition|)
name|srcpath
operator|+=
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|QString
name|dstpath
init|=
name|output_dir
decl_stmt|;
if|if
condition|(
operator|!
name|dstpath
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
condition|)
name|dstpath
operator|+=
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|int
name|srcLen
init|=
name|srcpath
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|dstLen
init|=
name|dstpath
operator|.
name|length
argument_list|()
decl_stmt|;
name|int
name|lastSl
init|=
operator|-
literal|1
decl_stmt|;
while|while
condition|(
operator|++
name|lastSl
operator|,
name|srcpath
operator|.
name|at
argument_list|(
operator|--
name|srcLen
argument_list|)
operator|==
name|dstpath
operator|.
name|at
argument_list|(
operator|--
name|dstLen
argument_list|)
condition|)
if|if
condition|(
name|srcpath
operator|.
name|at
argument_list|(
name|srcLen
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
condition|)
name|lastSl
operator|=
literal|0
expr_stmt|;
name|mkfile
operator|::
name|source_root
operator|=
name|srcpath
operator|.
name|left
argument_list|(
name|srcLen
operator|+
name|lastSl
argument_list|)
expr_stmt|;
name|mkfile
operator|::
name|build_root
operator|=
name|dstpath
operator|.
name|left
argument_list|(
name|dstLen
operator|+
name|lastSl
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|mkfile
operator|::
name|source_root
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|postProcessProject
name|bool
name|Option
operator|::
name|postProcessProject
parameter_list|(
name|QMakeProject
modifier|*
name|project
parameter_list|)
block|{
name|Option
operator|::
name|cpp_ext
operator|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_EXT_CPP"
argument_list|)
expr_stmt|;
name|Option
operator|::
name|h_ext
operator|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_EXT_H"
argument_list|)
expr_stmt|;
name|Option
operator|::
name|c_ext
operator|=
name|project
operator|->
name|values
argument_list|(
literal|"QMAKE_EXT_C"
argument_list|)
expr_stmt|;
name|Option
operator|::
name|res_ext
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_EXT_RES"
argument_list|)
expr_stmt|;
name|Option
operator|::
name|pkgcfg_ext
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_EXT_PKGCONFIG"
argument_list|)
expr_stmt|;
name|Option
operator|::
name|libtool_ext
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_EXT_LIBTOOL"
argument_list|)
expr_stmt|;
name|Option
operator|::
name|prl_ext
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_EXT_PRL"
argument_list|)
expr_stmt|;
name|Option
operator|::
name|ui_ext
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_EXT_UI"
argument_list|)
expr_stmt|;
name|Option
operator|::
name|cpp_moc_ext
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_EXT_CPP_MOC"
argument_list|)
expr_stmt|;
name|Option
operator|::
name|lex_ext
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_EXT_LEX"
argument_list|)
expr_stmt|;
name|Option
operator|::
name|yacc_ext
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_EXT_YACC"
argument_list|)
expr_stmt|;
name|Option
operator|::
name|obj_ext
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_EXT_OBJ"
argument_list|)
expr_stmt|;
name|Option
operator|::
name|h_moc_mod
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_H_MOD_MOC"
argument_list|)
expr_stmt|;
name|Option
operator|::
name|lex_mod
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_MOD_LEX"
argument_list|)
expr_stmt|;
name|Option
operator|::
name|yacc_mod
operator|=
name|project
operator|->
name|first
argument_list|(
literal|"QMAKE_MOD_YACC"
argument_list|)
expr_stmt|;
if|if
condition|(
name|Option
operator|::
name|output_dir
operator|.
name|startsWith
argument_list|(
name|project
operator|->
name|buildRoot
argument_list|()
argument_list|)
condition|)
name|Option
operator|::
name|mkfile
operator|::
name|cachefile_depth
operator|=
name|Option
operator|::
name|output_dir
operator|.
name|mid
argument_list|(
name|project
operator|->
name|buildRoot
argument_list|()
operator|.
name|length
argument_list|()
argument_list|)
operator|.
name|count
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
end_function
begin_function
name|QString
DECL|function|fixString
name|Option
operator|::
name|fixString
parameter_list|(
name|QString
name|string
parameter_list|,
name|uchar
name|flags
parameter_list|)
block|{
comment|//const QString orig_string = string;
specifier|static
name|QHash
argument_list|<
name|FixStringCacheKey
argument_list|,
name|QString
argument_list|>
modifier|*
name|cache
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|cache
condition|)
block|{
name|cache
operator|=
operator|new
name|QHash
argument_list|<
name|FixStringCacheKey
argument_list|,
name|QString
argument_list|>
expr_stmt|;
name|qmakeAddCacheClear
argument_list|(
name|qmakeDeleteCacheClear
argument_list|<
name|QHash
argument_list|<
name|FixStringCacheKey
argument_list|,
name|QString
argument_list|>
argument_list|>
argument_list|,
operator|(
name|void
operator|*
operator|*
operator|)
operator|&
name|cache
argument_list|)
expr_stmt|;
block|}
name|FixStringCacheKey
name|cacheKey
argument_list|(
name|string
argument_list|,
name|flags
argument_list|)
decl_stmt|;
name|QHash
argument_list|<
name|FixStringCacheKey
argument_list|,
name|QString
argument_list|>
operator|::
name|const_iterator
name|it
init|=
name|cache
operator|->
name|constFind
argument_list|(
name|cacheKey
argument_list|)
decl_stmt|;
if|if
condition|(
name|it
operator|!=
name|cache
operator|->
name|constEnd
argument_list|()
condition|)
block|{
comment|//qDebug()<< "Fix (cached) "<< orig_string<< "->"<< it.value();
return|return
name|it
operator|.
name|value
argument_list|()
return|;
block|}
comment|//fix the environment variables
if|if
condition|(
name|flags
operator|&
name|Option
operator|::
name|FixEnvVars
condition|)
block|{
name|int
name|rep
decl_stmt|;
specifier|static
name|QRegExp
name|reg_var
argument_list|(
literal|"\\$\\(.*\\)"
argument_list|)
decl_stmt|;
name|reg_var
operator|.
name|setMinimal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
while|while
condition|(
operator|(
name|rep
operator|=
name|reg_var
operator|.
name|indexIn
argument_list|(
name|string
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
name|string
operator|.
name|replace
argument_list|(
name|rep
argument_list|,
name|reg_var
operator|.
name|matchedLength
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|qgetenv
argument_list|(
name|string
operator|.
name|mid
argument_list|(
name|rep
operator|+
literal|2
argument_list|,
name|reg_var
operator|.
name|matchedLength
argument_list|()
operator|-
literal|3
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|//canonicalize it (and treat as a path)
if|if
condition|(
name|flags
operator|&
name|Option
operator|::
name|FixPathCanonicalize
condition|)
block|{
if|#
directive|if
literal|0
block|string = QFileInfo(string).canonicalFilePath();
endif|#
directive|endif
name|string
operator|=
name|QDir
operator|::
name|cleanPath
argument_list|(
name|string
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|string
operator|.
name|length
argument_list|()
operator|>
literal|2
operator|&&
name|string
index|[
literal|0
index|]
operator|.
name|isLetter
argument_list|()
operator|&&
name|string
index|[
literal|1
index|]
operator|==
name|QLatin1Char
argument_list|(
literal|':'
argument_list|)
condition|)
name|string
index|[
literal|0
index|]
operator|=
name|string
index|[
literal|0
index|]
operator|.
name|toLower
argument_list|()
expr_stmt|;
name|bool
name|localSep
init|=
operator|(
name|flags
operator|&
name|Option
operator|::
name|FixPathToLocalSeparators
operator|)
operator|!=
literal|0
decl_stmt|;
name|bool
name|targetSep
init|=
operator|(
name|flags
operator|&
name|Option
operator|::
name|FixPathToTargetSeparators
operator|)
operator|!=
literal|0
decl_stmt|;
name|bool
name|normalSep
init|=
operator|(
name|flags
operator|&
name|Option
operator|::
name|FixPathToNormalSeparators
operator|)
operator|!=
literal|0
decl_stmt|;
comment|// either none or only one active flag
name|Q_ASSERT
argument_list|(
name|localSep
operator|+
name|targetSep
operator|+
name|normalSep
operator|<=
literal|1
argument_list|)
expr_stmt|;
comment|//fix separators
if|if
condition|(
name|flags
operator|&
name|Option
operator|::
name|FixPathToNormalSeparators
condition|)
block|{
name|string
operator|=
name|string
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|flags
operator|&
name|Option
operator|::
name|FixPathToLocalSeparators
condition|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN32
argument_list|)
name|string
operator|=
name|string
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
literal|'\\'
argument_list|)
expr_stmt|;
else|#
directive|else
name|string
operator|=
name|string
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
literal|'/'
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
elseif|else
if|if
condition|(
name|flags
operator|&
name|Option
operator|::
name|FixPathToTargetSeparators
condition|)
block|{
name|string
operator|=
name|string
operator|.
name|replace
argument_list|(
literal|'/'
argument_list|,
name|Option
operator|::
name|dir_sep
argument_list|)
operator|.
name|replace
argument_list|(
literal|'\\'
argument_list|,
name|Option
operator|::
name|dir_sep
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|(
name|string
operator|.
name|startsWith
argument_list|(
literal|"\""
argument_list|)
operator|&&
name|string
operator|.
name|endsWith
argument_list|(
literal|"\""
argument_list|)
operator|)
operator|||
operator|(
name|string
operator|.
name|startsWith
argument_list|(
literal|"\'"
argument_list|)
operator|&&
name|string
operator|.
name|endsWith
argument_list|(
literal|"\'"
argument_list|)
operator|)
condition|)
name|string
operator|=
name|string
operator|.
name|mid
argument_list|(
literal|1
argument_list|,
name|string
operator|.
name|length
argument_list|()
operator|-
literal|2
argument_list|)
expr_stmt|;
comment|//cache
comment|//qDebug()<< "Fix"<< orig_string<< "->"<< string;
name|cache
operator|->
name|insert
argument_list|(
name|cacheKey
argument_list|,
name|string
argument_list|)
expr_stmt|;
return|return
name|string
return|;
block|}
end_function
begin_function
DECL|function|qmake_version
specifier|const
name|char
modifier|*
name|qmake_version
parameter_list|()
block|{
specifier|static
name|char
modifier|*
name|ret
init|=
name|NULL
decl_stmt|;
if|if
condition|(
name|ret
condition|)
return|return
name|ret
return|;
name|ret
operator|=
operator|(
name|char
operator|*
operator|)
name|malloc
argument_list|(
literal|15
argument_list|)
expr_stmt|;
name|qmakeAddCacheClear
argument_list|(
name|qmakeFreeCacheClear
argument_list|,
operator|(
name|void
operator|*
operator|*
operator|)
operator|&
name|ret
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|_MSC_VER
argument_list|)
operator|&&
name|_MSC_VER
operator|>=
literal|1400
name|sprintf_s
argument_list|(
name|ret
argument_list|,
literal|15
argument_list|,
literal|"%d.%02d%c"
argument_list|,
name|QMAKE_VERSION_MAJOR
argument_list|,
name|QMAKE_VERSION_MINOR
argument_list|,
literal|'a'
operator|+
name|QMAKE_VERSION_PATCH
argument_list|)
expr_stmt|;
else|#
directive|else
name|sprintf
argument_list|(
name|ret
argument_list|,
literal|"%d.%02d%c"
argument_list|,
name|QMAKE_VERSION_MAJOR
argument_list|,
name|QMAKE_VERSION_MINOR
argument_list|,
literal|'a'
operator|+
name|QMAKE_VERSION_PATCH
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|ret
return|;
block|}
end_function
begin_function
DECL|function|debug_msg_internal
name|void
name|debug_msg_internal
parameter_list|(
name|int
name|level
parameter_list|,
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
block|{
if|if
condition|(
name|Option
operator|::
name|debug_level
operator|<
name|level
condition|)
return|return;
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"DEBUG %d: "
argument_list|,
name|level
argument_list|)
expr_stmt|;
block|{
name|va_list
name|ap
decl_stmt|;
name|va_start
argument_list|(
name|ap
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|vfprintf
argument_list|(
name|stderr
argument_list|,
name|fmt
argument_list|,
name|ap
argument_list|)
expr_stmt|;
name|va_end
argument_list|(
name|ap
argument_list|)
expr_stmt|;
block|}
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|warn_msg
name|void
name|warn_msg
parameter_list|(
name|QMakeWarn
name|type
parameter_list|,
specifier|const
name|char
modifier|*
name|fmt
parameter_list|,
modifier|...
parameter_list|)
block|{
if|if
condition|(
operator|!
operator|(
name|Option
operator|::
name|warn_level
operator|&
name|type
operator|)
condition|)
return|return;
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"WARNING: "
argument_list|)
expr_stmt|;
block|{
name|va_list
name|ap
decl_stmt|;
name|va_start
argument_list|(
name|ap
argument_list|,
name|fmt
argument_list|)
expr_stmt|;
name|vfprintf
argument_list|(
name|stderr
argument_list|,
name|fmt
argument_list|,
name|ap
argument_list|)
expr_stmt|;
name|va_end
argument_list|(
name|ap
argument_list|)
expr_stmt|;
block|}
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"\n"
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|QMakeCacheClearItem
class|class
name|QMakeCacheClearItem
block|{
private|private:
DECL|member|func
name|qmakeCacheClearFunc
name|func
decl_stmt|;
DECL|member|data
name|void
modifier|*
modifier|*
name|data
decl_stmt|;
public|public:
DECL|function|QMakeCacheClearItem
name|QMakeCacheClearItem
parameter_list|(
name|qmakeCacheClearFunc
name|f
parameter_list|,
name|void
modifier|*
modifier|*
name|d
parameter_list|)
member_init_list|:
name|func
argument_list|(
name|f
argument_list|)
member_init_list|,
name|data
argument_list|(
name|d
argument_list|)
block|{ }
DECL|function|~QMakeCacheClearItem
name|~
name|QMakeCacheClearItem
parameter_list|()
block|{
call|(
modifier|*
name|func
call|)
argument_list|(
operator|*
name|data
argument_list|)
expr_stmt|;
operator|*
name|data
operator|=
literal|0
expr_stmt|;
block|}
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|cache_items
specifier|static
name|QList
argument_list|<
name|QMakeCacheClearItem
modifier|*
argument_list|>
name|cache_items
decl_stmt|;
end_decl_stmt
begin_function
name|void
DECL|function|qmakeClearCaches
name|qmakeClearCaches
parameter_list|()
block|{
name|qDeleteAll
argument_list|(
name|cache_items
argument_list|)
expr_stmt|;
name|cache_items
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
name|void
DECL|function|qmakeAddCacheClear
name|qmakeAddCacheClear
parameter_list|(
name|qmakeCacheClearFunc
name|func
parameter_list|,
name|void
modifier|*
modifier|*
name|data
parameter_list|)
block|{
name|cache_items
operator|.
name|append
argument_list|(
operator|new
name|QMakeCacheClearItem
argument_list|(
name|func
argument_list|,
name|data
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qmake_libraryInfoFile
name|QString
name|qmake_libraryInfoFile
parameter_list|()
block|{
if|if
condition|(
operator|!
name|Option
operator|::
name|qmake_abslocation
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|QDir
argument_list|(
name|QFileInfo
argument_list|(
name|Option
operator|::
name|qmake_abslocation
argument_list|)
operator|.
name|absolutePath
argument_list|()
argument_list|)
operator|.
name|filePath
argument_list|(
literal|"qt.conf"
argument_list|)
return|;
return|return
name|QString
argument_list|()
return|;
block|}
end_function
begin_macro
name|QT_END_NAMESPACE
end_macro
end_unit
