begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"report.h"
end_include
begin_include
include|#
directive|include
file|"baselineprotocol.h"
end_include
begin_include
include|#
directive|include
file|"baselineserver.h"
end_include
begin_include
include|#
directive|include
file|<QDir>
end_include
begin_include
include|#
directive|include
file|<QProcess>
end_include
begin_include
include|#
directive|include
file|<QUrl>
end_include
begin_constructor
DECL|function|Report
name|Report
operator|::
name|Report
parameter_list|()
member_init_list|:
name|written
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|numItems
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|numMismatches
argument_list|(
literal|0
argument_list|)
block|{ }
end_constructor
begin_destructor
DECL|function|~Report
name|Report
operator|::
name|~
name|Report
parameter_list|()
block|{
name|end
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|filePath
name|QString
name|Report
operator|::
name|filePath
parameter_list|()
block|{
return|return
name|path
return|;
block|}
end_function
begin_function
DECL|function|init
name|void
name|Report
operator|::
name|init
parameter_list|(
specifier|const
name|BaselineHandler
modifier|*
name|h
parameter_list|,
specifier|const
name|QString
modifier|&
name|r
parameter_list|,
specifier|const
name|PlatformInfo
modifier|&
name|p
parameter_list|)
block|{
name|handler
operator|=
name|h
expr_stmt|;
name|runId
operator|=
name|r
expr_stmt|;
name|plat
operator|=
name|p
expr_stmt|;
name|rootDir
operator|=
name|BaselineServer
operator|::
name|storagePath
argument_list|()
operator|+
name|QLC
argument_list|(
literal|'/'
argument_list|)
expr_stmt|;
name|reportDir
operator|=
name|plat
operator|.
name|value
argument_list|(
name|PI_TestCase
argument_list|)
operator|+
name|QLC
argument_list|(
literal|'/'
argument_list|)
operator|+
operator|(
name|plat
operator|.
name|isAdHocRun
argument_list|()
condition|?
name|QLS
argument_list|(
literal|"reports/adhoc/"
argument_list|)
else|:
name|QLS
argument_list|(
literal|"reports/pulse/"
argument_list|)
operator|)
expr_stmt|;
name|QString
name|dir
init|=
name|rootDir
operator|+
name|reportDir
decl_stmt|;
name|QDir
name|cwd
decl_stmt|;
if|if
condition|(
operator|!
name|cwd
operator|.
name|exists
argument_list|(
name|dir
argument_list|)
condition|)
name|cwd
operator|.
name|mkpath
argument_list|(
name|dir
argument_list|)
expr_stmt|;
name|path
operator|=
name|reportDir
operator|+
name|QLS
argument_list|(
literal|"Report_"
argument_list|)
operator|+
name|runId
operator|+
name|QLS
argument_list|(
literal|".html"
argument_list|)
expr_stmt|;
name|hasOverride
operator|=
operator|!
name|plat
operator|.
name|overrides
argument_list|()
operator|.
name|isEmpty
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addItems
name|void
name|Report
operator|::
name|addItems
parameter_list|(
specifier|const
name|ImageItemList
modifier|&
name|items
parameter_list|)
block|{
if|if
condition|(
name|items
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|numItems
operator|+=
name|items
operator|.
name|size
argument_list|()
expr_stmt|;
name|QString
name|func
init|=
name|items
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|testFunction
decl_stmt|;
if|if
condition|(
operator|!
name|testFunctions
operator|.
name|contains
argument_list|(
name|func
argument_list|)
condition|)
name|testFunctions
operator|.
name|append
argument_list|(
name|func
argument_list|)
expr_stmt|;
name|itemLists
index|[
name|func
index|]
operator|+=
name|items
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addMismatch
name|void
name|Report
operator|::
name|addMismatch
parameter_list|(
specifier|const
name|ImageItem
modifier|&
name|item
parameter_list|)
block|{
if|if
condition|(
operator|!
name|testFunctions
operator|.
name|contains
argument_list|(
name|item
operator|.
name|testFunction
argument_list|)
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Report::addMismatch: unknown testfunction"
operator|<<
name|item
operator|.
name|testFunction
expr_stmt|;
return|return;
block|}
name|bool
name|found
init|=
literal|false
decl_stmt|;
name|ImageItemList
modifier|&
name|list
init|=
name|itemLists
index|[
name|item
operator|.
name|testFunction
index|]
decl_stmt|;
for|for
control|(
name|ImageItemList
operator|::
name|iterator
name|it
init|=
name|list
operator|.
name|begin
argument_list|()
init|;
name|it
operator|!=
name|list
operator|.
name|end
argument_list|()
condition|;
operator|++
name|it
control|)
block|{
if|if
condition|(
name|it
operator|->
name|itemName
operator|==
name|item
operator|.
name|itemName
operator|&&
name|it
operator|->
name|itemChecksum
operator|==
name|item
operator|.
name|itemChecksum
condition|)
block|{
name|it
operator|->
name|status
operator|=
name|ImageItem
operator|::
name|Mismatch
expr_stmt|;
name|found
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
name|found
condition|)
name|numMismatches
operator|++
expr_stmt|;
else|else
name|qWarning
argument_list|()
operator|<<
literal|"Report::addMismatch: unknown item"
operator|<<
name|item
operator|.
name|itemName
operator|<<
literal|"in testfunction"
operator|<<
name|item
operator|.
name|testFunction
expr_stmt|;
block|}
end_function
begin_function
DECL|function|end
name|void
name|Report
operator|::
name|end
parameter_list|()
block|{
if|if
condition|(
name|written
operator|||
operator|!
name|numMismatches
condition|)
return|return;
name|write
argument_list|()
expr_stmt|;
name|written
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|write
name|void
name|Report
operator|::
name|write
parameter_list|()
block|{
name|QFile
name|file
argument_list|(
name|rootDir
operator|+
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Truncate
argument_list|)
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Failed to open report file"
operator|<<
name|file
operator|.
name|fileName
argument_list|()
expr_stmt|;
return|return;
block|}
name|out
operator|.
name|setDevice
argument_list|(
operator|&
name|file
argument_list|)
expr_stmt|;
name|writeHeader
argument_list|()
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|func
decl|,
name|testFunctions
control|)
block|{
name|writeFunctionResults
argument_list|(
name|itemLists
operator|.
name|value
argument_list|(
name|func
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|writeFooter
argument_list|()
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeHeader
name|void
name|Report
operator|::
name|writeHeader
parameter_list|()
block|{
name|QString
name|title
init|=
name|plat
operator|.
name|value
argument_list|(
name|PI_TestCase
argument_list|)
operator|+
name|QLS
argument_list|(
literal|" Qt Baseline Test Report"
argument_list|)
decl_stmt|;
name|out
operator|<<
literal|"<head><title>"
operator|<<
name|title
operator|<<
literal|"</title></head>\n"
operator|<<
literal|"<html><body><h1>"
operator|<<
name|title
operator|<<
literal|"</h1>\n"
operator|<<
literal|"<p>Note: This is a<i>static</i> page, generated at "
operator|<<
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
operator|.
name|toString
argument_list|()
operator|<<
literal|" for the test run with id "
operator|<<
name|runId
operator|<<
literal|"</p>\n"
operator|<<
literal|"<p>Summary:<b><span style=\"color:red\">"
operator|<<
name|numMismatches
operator|<<
literal|" of "
operator|<<
name|numItems
operator|<<
literal|"</b></span> items reported mismatching</p>\n\n"
expr_stmt|;
name|out
operator|<<
literal|"<h3>Testing Client Platform Info:</h3>\n"
operator|<<
literal|"<table>\n"
expr_stmt|;
foreach|foreach
control|(
name|QString
name|key
decl|,
name|plat
operator|.
name|keys
argument_list|()
control|)
name|out
operator|<<
literal|"<tr><td>"
operator|<<
name|key
operator|<<
literal|":</td><td>"
operator|<<
name|plat
operator|.
name|value
argument_list|(
name|key
argument_list|)
operator|<<
literal|"</td></tr>\n"
expr_stmt|;
name|out
operator|<<
literal|"</table>\n\n"
expr_stmt|;
if|if
condition|(
name|hasOverride
condition|)
block|{
name|out
operator|<<
literal|"<span style=\"color:red\"><h4>Note! Platform Override Info:</h4></span>\n"
operator|<<
literal|"<p>The client's output has been compared to baselines created on a different platform. Differences:</p>\n"
operator|<<
literal|"<table>\n"
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|plat
operator|.
name|overrides
argument_list|()
operator|.
name|size
argument_list|()
operator|-
literal|1
condition|;
name|i
operator|+=
literal|2
control|)
name|out
operator|<<
literal|"<tr><td>"
operator|<<
name|plat
operator|.
name|overrides
argument_list|()
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|<<
literal|":</td><td>"
operator|<<
name|plat
operator|.
name|overrides
argument_list|()
operator|.
name|at
argument_list|(
name|i
operator|+
literal|1
argument_list|)
operator|<<
literal|"</td></tr>\n"
expr_stmt|;
name|out
operator|<<
literal|"</table>\n\n"
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|writeFunctionResults
name|void
name|Report
operator|::
name|writeFunctionResults
parameter_list|(
specifier|const
name|ImageItemList
modifier|&
name|list
parameter_list|)
block|{
name|QString
name|testFunction
init|=
name|list
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|testFunction
decl_stmt|;
name|QString
name|pageUrl
init|=
name|BaselineServer
operator|::
name|baseUrl
argument_list|()
operator|+
name|path
decl_stmt|;
name|QString
name|ctx
init|=
name|handler
operator|->
name|pathForItem
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
operator|.
name|section
argument_list|(
name|QLC
argument_list|(
literal|'/'
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|-
literal|2
argument_list|)
decl_stmt|;
name|QString
name|misCtx
init|=
name|handler
operator|->
name|pathForItem
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
operator|.
name|section
argument_list|(
name|QLC
argument_list|(
literal|'/'
argument_list|)
argument_list|,
literal|0
argument_list|,
operator|-
literal|2
argument_list|)
decl_stmt|;
name|out
operator|<<
literal|"\n<p>&nbsp;</p><h3>Test function: "
operator|<<
name|testFunction
operator|<<
literal|"</h3>\n"
expr_stmt|;
if|if
condition|(
operator|!
name|hasOverride
condition|)
block|{
name|out
operator|<<
literal|"<p><a href=\"/cgi-bin/server.cgi?cmd=clearAllBaselines&context="
operator|<<
name|ctx
operator|<<
literal|"&url="
operator|<<
name|pageUrl
operator|<<
literal|"\"><b>Clear all baselines</b></a> for this testfunction (They will be recreated by the next run)</p>\n"
expr_stmt|;
name|out
operator|<<
literal|"<p><a href=\"/cgi-bin/server.cgi?cmd=updateAllBaselines&context="
operator|<<
name|ctx
operator|<<
literal|"&mismatchContext="
operator|<<
name|misCtx
operator|<<
literal|"&url="
operator|<<
name|pageUrl
operator|<<
literal|"\"><b>Let these mismatching images be the new baselines</b></a> for this testfunction</p>\n\n"
expr_stmt|;
block|}
name|out
operator|<<
literal|"<table border=\"2\">\n"
literal|"<tr>\n"
literal|"<th width=123>Item</th>\n"
literal|"<th width=246>Baseline</th>\n"
literal|"<th width=246>Rendered</th>\n"
literal|"<th width=246>Comparison (diffs are<span style=\"color:red\">RED</span>)</th>\n"
literal|"<th width=246>Info/Action</th>\n"
literal|"</tr>\n\n"
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|ImageItem
modifier|&
name|item
decl|,
name|list
control|)
block|{
name|out
operator|<<
literal|"<tr>\n"
expr_stmt|;
name|out
operator|<<
literal|"<td>"
operator|<<
name|item
operator|.
name|itemName
operator|<<
literal|"</td>\n"
expr_stmt|;
name|QString
name|prefix
init|=
name|handler
operator|->
name|pathForItem
argument_list|(
name|item
argument_list|,
literal|true
argument_list|,
literal|false
argument_list|)
decl_stmt|;
name|QString
name|baseline
init|=
name|prefix
operator|+
name|QLS
argument_list|(
name|FileFormat
argument_list|)
decl_stmt|;
name|QString
name|metadata
init|=
name|prefix
operator|+
name|QLS
argument_list|(
name|MetadataFileExt
argument_list|)
decl_stmt|;
if|if
condition|(
name|item
operator|.
name|status
operator|==
name|ImageItem
operator|::
name|Mismatch
condition|)
block|{
name|QString
name|rendered
init|=
name|handler
operator|->
name|pathForItem
argument_list|(
name|item
argument_list|,
literal|false
argument_list|,
literal|false
argument_list|)
operator|+
name|QLS
argument_list|(
name|FileFormat
argument_list|)
decl_stmt|;
name|QString
name|itemFile
init|=
name|prefix
operator|.
name|section
argument_list|(
name|QLC
argument_list|(
literal|'/'
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
decl_stmt|;
name|writeItem
argument_list|(
name|baseline
argument_list|,
name|rendered
argument_list|,
name|item
argument_list|,
name|itemFile
argument_list|,
name|ctx
argument_list|,
name|misCtx
argument_list|,
name|metadata
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|out
operator|<<
literal|"<td align=center><a href=\"/"
operator|<<
name|baseline
operator|<<
literal|"\">image</a><a href=\"/"
operator|<<
name|metadata
operator|<<
literal|"\">info</a></td>\n"
operator|<<
literal|"<td align=center colspan=2><small>n/a</small></td>\n"
operator|<<
literal|"<td align=center>"
expr_stmt|;
switch|switch
condition|(
name|item
operator|.
name|status
condition|)
block|{
case|case
name|ImageItem
operator|::
name|BaselineNotFound
case|:
name|out
operator|<<
literal|"Baseline not found/regenerated"
expr_stmt|;
break|break;
case|case
name|ImageItem
operator|::
name|IgnoreItem
case|:
name|out
operator|<<
literal|"<span style=\"background-color:yellow\">Blacklisted</span> "
expr_stmt|;
if|if
condition|(
operator|!
name|hasOverride
condition|)
block|{
name|out
operator|<<
literal|"<a href=\"/cgi-bin/server.cgi?cmd=whitelist&context="
operator|<<
name|ctx
operator|<<
literal|"&itemId="
operator|<<
name|item
operator|.
name|itemName
operator|<<
literal|"&url="
operator|<<
name|pageUrl
operator|<<
literal|"\">Whitelist this item</a>"
expr_stmt|;
block|}
break|break;
case|case
name|ImageItem
operator|::
name|Ok
case|:
name|out
operator|<<
literal|"<span style=\"color:green\"><small>No mismatch reported</small></span>"
expr_stmt|;
break|break;
default|default:
name|out
operator|<<
literal|"?"
expr_stmt|;
break|break;
block|}
name|out
operator|<<
literal|"</td>\n"
expr_stmt|;
block|}
name|out
operator|<<
literal|"</tr>\n\n"
expr_stmt|;
block|}
name|out
operator|<<
literal|"</table>\n"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeItem
name|void
name|Report
operator|::
name|writeItem
parameter_list|(
specifier|const
name|QString
modifier|&
name|baseline
parameter_list|,
specifier|const
name|QString
modifier|&
name|rendered
parameter_list|,
specifier|const
name|ImageItem
modifier|&
name|item
parameter_list|,
specifier|const
name|QString
modifier|&
name|itemFile
parameter_list|,
specifier|const
name|QString
modifier|&
name|ctx
parameter_list|,
specifier|const
name|QString
modifier|&
name|misCtx
parameter_list|,
specifier|const
name|QString
modifier|&
name|metadata
parameter_list|)
block|{
name|QString
name|compared
init|=
name|generateCompared
argument_list|(
name|baseline
argument_list|,
name|rendered
argument_list|)
decl_stmt|;
name|QString
name|pageUrl
init|=
name|BaselineServer
operator|::
name|baseUrl
argument_list|()
operator|+
name|path
decl_stmt|;
name|QStringList
name|images
init|=
name|QStringList
argument_list|()
operator|<<
name|baseline
operator|<<
name|rendered
operator|<<
name|compared
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|img
decl|,
name|images
control|)
name|out
operator|<<
literal|"<td height=246 align=center><a href=\"/"
operator|<<
name|img
operator|<<
literal|"\"><img src=\"/"
operator|<<
name|generateThumbnail
argument_list|(
name|img
argument_list|)
operator|<<
literal|"\"></a></td>\n"
expr_stmt|;
name|out
operator|<<
literal|"<td align=center>\n"
operator|<<
literal|"<p><span style=\"color:red\">Mismatch reported</span></p>\n"
operator|<<
literal|"<p><a href=\"/"
operator|<<
name|metadata
operator|<<
literal|"\">Baseline Info</a>\n"
expr_stmt|;
if|if
condition|(
operator|!
name|hasOverride
condition|)
block|{
name|out
operator|<<
literal|"<p><a href=\"/cgi-bin/server.cgi?cmd=updateSingleBaseline&context="
operator|<<
name|ctx
operator|<<
literal|"&mismatchContext="
operator|<<
name|misCtx
operator|<<
literal|"&itemFile="
operator|<<
name|itemFile
operator|<<
literal|"&url="
operator|<<
name|pageUrl
operator|<<
literal|"\">Let this be the new baseline</a></p>\n"
operator|<<
literal|"<p><a href=\"/cgi-bin/server.cgi?cmd=blacklist&context="
operator|<<
name|ctx
operator|<<
literal|"&itemId="
operator|<<
name|item
operator|.
name|itemName
operator|<<
literal|"&url="
operator|<<
name|pageUrl
operator|<<
literal|"\">Blacklist this item</a></p>\n"
expr_stmt|;
block|}
name|out
operator|<<
literal|"<p><a href=\"/cgi-bin/server.cgi?cmd=view&baseline="
operator|<<
name|baseline
operator|<<
literal|"&rendered="
operator|<<
name|rendered
operator|<<
literal|"&compared="
operator|<<
name|compared
operator|<<
literal|"&url="
operator|<<
name|pageUrl
operator|<<
literal|"\">Inspect</a></p>\n"
operator|<<
literal|"</td>\n"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeFooter
name|void
name|Report
operator|::
name|writeFooter
parameter_list|()
block|{
name|out
operator|<<
literal|"\n</body></html>\n"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|generateCompared
name|QString
name|Report
operator|::
name|generateCompared
parameter_list|(
specifier|const
name|QString
modifier|&
name|baseline
parameter_list|,
specifier|const
name|QString
modifier|&
name|rendered
parameter_list|,
name|bool
name|fuzzy
parameter_list|)
block|{
name|QString
name|res
init|=
name|rendered
decl_stmt|;
name|QFileInfo
name|fi
argument_list|(
name|res
argument_list|)
decl_stmt|;
name|res
operator|.
name|chop
argument_list|(
name|fi
operator|.
name|suffix
argument_list|()
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|res
operator|+=
name|QLS
argument_list|(
name|fuzzy
condition|?
literal|"_fuzzycompared.png"
else|:
literal|"_compared.png"
argument_list|)
expr_stmt|;
name|QStringList
name|args
decl_stmt|;
if|if
condition|(
name|fuzzy
condition|)
name|args
operator|<<
name|QLS
argument_list|(
literal|"-fuzz"
argument_list|)
operator|<<
name|QLS
argument_list|(
literal|"5%"
argument_list|)
expr_stmt|;
name|args
operator|<<
name|rootDir
operator|+
name|baseline
operator|<<
name|rootDir
operator|+
name|rendered
operator|<<
name|rootDir
operator|+
name|res
expr_stmt|;
name|QProcess
operator|::
name|execute
argument_list|(
name|QLS
argument_list|(
literal|"compare"
argument_list|)
argument_list|,
name|args
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
DECL|function|generateThumbnail
name|QString
name|Report
operator|::
name|generateThumbnail
parameter_list|(
specifier|const
name|QString
modifier|&
name|image
parameter_list|)
block|{
name|QString
name|res
init|=
name|image
decl_stmt|;
name|QFileInfo
name|imgFI
argument_list|(
name|rootDir
operator|+
name|image
argument_list|)
decl_stmt|;
name|res
operator|.
name|chop
argument_list|(
name|imgFI
operator|.
name|suffix
argument_list|()
operator|.
name|length
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|res
operator|+=
name|QLS
argument_list|(
literal|"_thumbnail.jpg"
argument_list|)
expr_stmt|;
name|QFileInfo
name|resFI
argument_list|(
name|rootDir
operator|+
name|res
argument_list|)
decl_stmt|;
if|if
condition|(
name|resFI
operator|.
name|exists
argument_list|()
operator|&&
name|resFI
operator|.
name|lastModified
argument_list|()
operator|>
name|imgFI
operator|.
name|lastModified
argument_list|()
condition|)
return|return
name|res
return|;
name|QStringList
name|args
decl_stmt|;
name|args
operator|<<
name|rootDir
operator|+
name|image
operator|<<
name|QLS
argument_list|(
literal|"-resize"
argument_list|)
operator|<<
name|QLS
argument_list|(
literal|"240x240>"
argument_list|)
operator|<<
name|QLS
argument_list|(
literal|"-quality"
argument_list|)
operator|<<
name|QLS
argument_list|(
literal|"50"
argument_list|)
operator|<<
name|rootDir
operator|+
name|res
expr_stmt|;
name|QProcess
operator|::
name|execute
argument_list|(
name|QLS
argument_list|(
literal|"convert"
argument_list|)
argument_list|,
name|args
argument_list|)
expr_stmt|;
return|return
name|res
return|;
block|}
end_function
begin_function
DECL|function|handleCGIQuery
name|void
name|Report
operator|::
name|handleCGIQuery
parameter_list|(
specifier|const
name|QString
modifier|&
name|query
parameter_list|)
block|{
name|QUrl
name|cgiUrl
argument_list|(
name|QLS
argument_list|(
literal|"http://dummy/cgi-bin/dummy.cgi?"
argument_list|)
operator|+
name|query
argument_list|)
decl_stmt|;
name|QTextStream
name|s
argument_list|(
name|stdout
argument_list|)
decl_stmt|;
name|s
operator|<<
literal|"Content-Type: text/html\r\n\r\n"
operator|<<
literal|"<HTML>"
expr_stmt|;
name|QString
name|command
argument_list|(
name|cgiUrl
operator|.
name|queryItemValue
argument_list|(
literal|"cmd"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|command
operator|==
name|QLS
argument_list|(
literal|"view"
argument_list|)
condition|)
block|{
name|s
operator|<<
name|BaselineHandler
operator|::
name|view
argument_list|(
name|cgiUrl
operator|.
name|queryItemValue
argument_list|(
name|QLS
argument_list|(
literal|"baseline"
argument_list|)
argument_list|)
argument_list|,
name|cgiUrl
operator|.
name|queryItemValue
argument_list|(
name|QLS
argument_list|(
literal|"rendered"
argument_list|)
argument_list|)
argument_list|,
name|cgiUrl
operator|.
name|queryItemValue
argument_list|(
name|QLS
argument_list|(
literal|"compared"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|command
operator|==
name|QLS
argument_list|(
literal|"updateSingleBaseline"
argument_list|)
condition|)
block|{
name|s
operator|<<
name|BaselineHandler
operator|::
name|updateBaselines
argument_list|(
name|cgiUrl
operator|.
name|queryItemValue
argument_list|(
name|QLS
argument_list|(
literal|"context"
argument_list|)
argument_list|)
argument_list|,
name|cgiUrl
operator|.
name|queryItemValue
argument_list|(
name|QLS
argument_list|(
literal|"mismatchContext"
argument_list|)
argument_list|)
argument_list|,
name|cgiUrl
operator|.
name|queryItemValue
argument_list|(
name|QLS
argument_list|(
literal|"itemFile"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|command
operator|==
name|QLS
argument_list|(
literal|"updateAllBaselines"
argument_list|)
condition|)
block|{
name|s
operator|<<
name|BaselineHandler
operator|::
name|updateBaselines
argument_list|(
name|cgiUrl
operator|.
name|queryItemValue
argument_list|(
name|QLS
argument_list|(
literal|"context"
argument_list|)
argument_list|)
argument_list|,
name|cgiUrl
operator|.
name|queryItemValue
argument_list|(
name|QLS
argument_list|(
literal|"mismatchContext"
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|command
operator|==
name|QLS
argument_list|(
literal|"clearAllBaselines"
argument_list|)
condition|)
block|{
name|s
operator|<<
name|BaselineHandler
operator|::
name|clearAllBaselines
argument_list|(
name|cgiUrl
operator|.
name|queryItemValue
argument_list|(
name|QLS
argument_list|(
literal|"context"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|command
operator|==
name|QLS
argument_list|(
literal|"blacklist"
argument_list|)
condition|)
block|{
comment|// blacklist a test
name|s
operator|<<
name|BaselineHandler
operator|::
name|blacklistTest
argument_list|(
name|cgiUrl
operator|.
name|queryItemValue
argument_list|(
name|QLS
argument_list|(
literal|"context"
argument_list|)
argument_list|)
argument_list|,
name|cgiUrl
operator|.
name|queryItemValue
argument_list|(
name|QLS
argument_list|(
literal|"itemId"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|command
operator|==
name|QLS
argument_list|(
literal|"whitelist"
argument_list|)
condition|)
block|{
comment|// whitelist a test
name|s
operator|<<
name|BaselineHandler
operator|::
name|blacklistTest
argument_list|(
name|cgiUrl
operator|.
name|queryItemValue
argument_list|(
name|QLS
argument_list|(
literal|"context"
argument_list|)
argument_list|)
argument_list|,
name|cgiUrl
operator|.
name|queryItemValue
argument_list|(
name|QLS
argument_list|(
literal|"itemId"
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|s
operator|<<
literal|"Unknown query:<br>"
operator|<<
name|query
operator|<<
literal|"<br>"
expr_stmt|;
block|}
name|s
operator|<<
literal|"<p><a href=\""
operator|<<
name|cgiUrl
operator|.
name|queryItemValue
argument_list|(
name|QLS
argument_list|(
literal|"url"
argument_list|)
argument_list|)
operator|<<
literal|"\">Back to report</a>"
expr_stmt|;
name|s
operator|<<
literal|"</HTML>"
expr_stmt|;
block|}
end_function
end_unit
