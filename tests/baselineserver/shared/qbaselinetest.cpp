begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qbaselinetest.h"
end_include
begin_include
include|#
directive|include
file|"baselineprotocol.h"
end_include
begin_namespace
DECL|namespace|QBaselineTest
namespace|namespace
name|QBaselineTest
block|{
DECL|member|proto
name|BaselineProtocol
name|proto
decl_stmt|;
DECL|member|connected
name|bool
name|connected
init|=
literal|false
decl_stmt|;
DECL|member|triedConnecting
name|bool
name|triedConnecting
init|=
literal|false
decl_stmt|;
DECL|member|curFunction
name|QByteArray
name|curFunction
decl_stmt|;
DECL|member|itemList
name|ImageItemList
name|itemList
decl_stmt|;
DECL|member|gotBaselines
name|bool
name|gotBaselines
decl_stmt|;
DECL|function|connect
name|bool
name|connect
parameter_list|(
name|QByteArray
modifier|*
name|msg
parameter_list|,
name|bool
modifier|*
name|error
parameter_list|)
block|{
if|if
condition|(
operator|!
name|triedConnecting
condition|)
block|{
name|triedConnecting
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|proto
operator|.
name|connect
argument_list|(
name|QTest
operator|::
name|testObject
argument_list|()
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
condition|)
block|{
operator|*
name|msg
operator|+=
literal|"Failed to connect to baseline server: "
operator|+
name|proto
operator|.
name|errorMessage
argument_list|()
operator|.
name|toLatin1
argument_list|()
expr_stmt|;
operator|*
name|error
operator|=
literal|true
expr_stmt|;
return|return
literal|false
return|;
block|}
name|connected
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|connected
condition|)
block|{
operator|*
name|msg
operator|=
literal|"Not connected to baseline server."
expr_stmt|;
operator|*
name|error
operator|=
literal|true
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|compareItem
name|bool
name|compareItem
parameter_list|(
specifier|const
name|ImageItem
modifier|&
name|baseline
parameter_list|,
specifier|const
name|QImage
modifier|&
name|img
parameter_list|,
name|QByteArray
modifier|*
name|msg
parameter_list|,
name|bool
modifier|*
name|error
parameter_list|)
block|{
name|ImageItem
name|item
init|=
name|baseline
decl_stmt|;
name|item
operator|.
name|image
operator|=
name|img
expr_stmt|;
name|item
operator|.
name|imageChecksums
operator|.
name|clear
argument_list|()
expr_stmt|;
name|item
operator|.
name|imageChecksums
operator|.
name|prepend
argument_list|(
name|ImageItem
operator|::
name|computeChecksum
argument_list|(
name|img
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|srvMsg
decl_stmt|;
switch|switch
condition|(
name|baseline
operator|.
name|status
condition|)
block|{
case|case
name|ImageItem
operator|::
name|Ok
case|:
break|break;
case|case
name|ImageItem
operator|::
name|IgnoreItem
case|:
name|qDebug
argument_list|()
operator|<<
name|msg
operator|->
name|constData
argument_list|()
operator|<<
literal|"Ignored, blacklisted on server."
expr_stmt|;
return|return
literal|true
return|;
break|break;
case|case
name|ImageItem
operator|::
name|BaselineNotFound
case|:
if|if
condition|(
name|proto
operator|.
name|submitNewBaseline
argument_list|(
name|item
argument_list|,
operator|&
name|srvMsg
argument_list|)
condition|)
name|qDebug
argument_list|()
operator|<<
name|msg
operator|->
name|constData
argument_list|()
operator|<<
literal|"Baseline not found on server. New baseline uploaded."
expr_stmt|;
else|else
name|qDebug
argument_list|()
operator|<<
name|msg
operator|->
name|constData
argument_list|()
operator|<<
literal|"Baseline not found on server. Uploading of new baseline failed:"
operator|<<
name|srvMsg
expr_stmt|;
return|return
literal|true
return|;
break|break;
default|default:
name|qWarning
argument_list|()
operator|<<
literal|"Unexpected reply from baseline server."
expr_stmt|;
return|return
literal|true
return|;
break|break;
block|}
operator|*
name|error
operator|=
literal|false
expr_stmt|;
comment|// The actual comparison of the given image with the baseline:
if|if
condition|(
name|baseline
operator|.
name|imageChecksums
operator|.
name|contains
argument_list|(
name|item
operator|.
name|imageChecksums
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
condition|)
return|return
literal|true
return|;
name|proto
operator|.
name|submitMismatch
argument_list|(
name|item
argument_list|,
operator|&
name|srvMsg
argument_list|)
expr_stmt|;
operator|*
name|msg
operator|+=
literal|"Mismatch. See report:\n   "
operator|+
name|srvMsg
expr_stmt|;
return|return
literal|false
return|;
block|}
DECL|function|checkImage
name|bool
name|checkImage
parameter_list|(
specifier|const
name|QImage
modifier|&
name|img
parameter_list|,
specifier|const
name|char
modifier|*
name|name
parameter_list|,
name|quint16
name|checksum
parameter_list|,
name|QByteArray
modifier|*
name|msg
parameter_list|,
name|bool
modifier|*
name|error
parameter_list|)
block|{
if|if
condition|(
operator|!
name|connected
operator|&&
operator|!
name|connect
argument_list|(
name|msg
argument_list|,
name|error
argument_list|)
condition|)
return|return
literal|true
return|;
name|QByteArray
name|itemName
decl_stmt|;
name|bool
name|hasName
init|=
name|qstrlen
argument_list|(
name|name
argument_list|)
decl_stmt|;
specifier|const
name|char
modifier|*
name|tag
init|=
name|QTest
operator|::
name|currentDataTag
argument_list|()
decl_stmt|;
if|if
condition|(
name|qstrlen
argument_list|(
name|tag
argument_list|)
condition|)
block|{
name|itemName
operator|=
name|tag
expr_stmt|;
if|if
condition|(
name|hasName
condition|)
name|itemName
operator|.
name|append
argument_list|(
literal|'_'
argument_list|)
operator|.
name|append
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|itemName
operator|=
name|hasName
condition|?
name|name
else|:
literal|"default_name"
expr_stmt|;
block|}
operator|*
name|msg
operator|=
literal|"Baseline check of image '"
operator|+
name|itemName
operator|+
literal|"': "
expr_stmt|;
name|ImageItem
name|item
decl_stmt|;
name|item
operator|.
name|itemName
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|itemName
argument_list|)
expr_stmt|;
name|item
operator|.
name|itemChecksum
operator|=
name|checksum
expr_stmt|;
name|item
operator|.
name|testFunction
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
argument_list|)
expr_stmt|;
name|ImageItemList
name|list
decl_stmt|;
name|list
operator|.
name|append
argument_list|(
name|item
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|proto
operator|.
name|requestBaselineChecksums
argument_list|(
name|QLatin1String
argument_list|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
argument_list|)
argument_list|,
operator|&
name|list
argument_list|)
operator|||
name|list
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
operator|*
name|msg
operator|=
literal|"Communication with baseline server failed: "
operator|+
name|proto
operator|.
name|errorMessage
argument_list|()
operator|.
name|toLatin1
argument_list|()
expr_stmt|;
operator|*
name|error
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
name|compareItem
argument_list|(
name|list
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|img
argument_list|,
name|msg
argument_list|,
name|error
argument_list|)
return|;
block|}
DECL|function|newRow
name|QTestData
modifier|&
name|newRow
parameter_list|(
specifier|const
name|char
modifier|*
name|dataTag
parameter_list|,
name|quint16
name|checksum
parameter_list|)
block|{
if|if
condition|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
operator|!=
name|curFunction
condition|)
block|{
name|curFunction
operator|=
name|QTest
operator|::
name|currentTestFunction
argument_list|()
expr_stmt|;
name|itemList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|gotBaselines
operator|=
literal|false
expr_stmt|;
block|}
name|ImageItem
name|item
decl_stmt|;
name|item
operator|.
name|itemName
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|dataTag
argument_list|)
expr_stmt|;
name|item
operator|.
name|itemChecksum
operator|=
name|checksum
expr_stmt|;
name|item
operator|.
name|testFunction
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
argument_list|)
expr_stmt|;
name|itemList
operator|.
name|append
argument_list|(
name|item
argument_list|)
expr_stmt|;
return|return
name|QTest
operator|::
name|newRow
argument_list|(
name|dataTag
argument_list|)
return|;
block|}
DECL|function|testImage
name|bool
name|testImage
parameter_list|(
specifier|const
name|QImage
modifier|&
name|img
parameter_list|,
name|QByteArray
modifier|*
name|msg
parameter_list|,
name|bool
modifier|*
name|error
parameter_list|)
block|{
if|if
condition|(
operator|!
name|connected
operator|&&
operator|!
name|connect
argument_list|(
name|msg
argument_list|,
name|error
argument_list|)
condition|)
return|return
literal|true
return|;
if|if
condition|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
operator|!=
name|curFunction
operator|||
name|itemList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Usage error: QBASELINE_TEST used without corresponding QBaselineTest::newRow()"
expr_stmt|;
return|return
literal|true
return|;
block|}
if|if
condition|(
operator|!
name|gotBaselines
condition|)
block|{
if|if
condition|(
operator|!
name|proto
operator|.
name|requestBaselineChecksums
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
argument_list|)
argument_list|,
operator|&
name|itemList
argument_list|)
operator|||
name|itemList
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
operator|*
name|msg
operator|=
literal|"Communication with baseline server failed: "
operator|+
name|proto
operator|.
name|errorMessage
argument_list|()
operator|.
name|toLatin1
argument_list|()
expr_stmt|;
operator|*
name|error
operator|=
literal|true
expr_stmt|;
return|return
literal|true
return|;
block|}
name|gotBaselines
operator|=
literal|true
expr_stmt|;
block|}
name|QString
name|curTag
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
decl_stmt|;
name|ImageItemList
operator|::
name|const_iterator
name|it
init|=
name|itemList
operator|.
name|constBegin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|itemList
operator|.
name|constEnd
argument_list|()
operator|&&
name|it
operator|->
name|itemName
operator|!=
name|curTag
condition|)
operator|++
name|it
expr_stmt|;
if|if
condition|(
name|it
operator|==
name|itemList
operator|.
name|constEnd
argument_list|()
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"Usage error: QBASELINE_TEST used without corresponding QBaselineTest::newRow() for row"
operator|<<
name|curTag
expr_stmt|;
return|return
literal|true
return|;
block|}
return|return
name|compareItem
argument_list|(
operator|*
name|it
argument_list|,
name|img
argument_list|,
name|msg
argument_list|,
name|error
argument_list|)
return|;
block|}
block|}
end_namespace
end_unit
