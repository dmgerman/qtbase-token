begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"openglwidget.h"
end_include
begin_include
include|#
directive|include
file|<QApplication>
end_include
begin_include
include|#
directive|include
file|<QPushButton>
end_include
begin_include
include|#
directive|include
file|<QMdiArea>
end_include
begin_include
include|#
directive|include
file|<QMdiSubWindow>
end_include
begin_include
include|#
directive|include
file|<QMenu>
end_include
begin_include
include|#
directive|include
file|<QMenuBar>
end_include
begin_include
include|#
directive|include
file|<QMainWindow>
end_include
begin_include
include|#
directive|include
file|<QLCDNumber>
end_include
begin_include
include|#
directive|include
file|<QScrollArea>
end_include
begin_include
include|#
directive|include
file|<QScrollBar>
end_include
begin_include
include|#
directive|include
file|<QTabWidget>
end_include
begin_include
include|#
directive|include
file|<QLabel>
end_include
begin_include
include|#
directive|include
file|<QTimer>
end_include
begin_include
include|#
directive|include
file|<QSurfaceFormat>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<private/qwindow_p.h>
end_include
begin_class
DECL|class|Tools
class|class
name|Tools
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|Tools
name|Tools
parameter_list|(
name|QWidget
modifier|*
name|root
parameter_list|,
name|QWidget
modifier|*
name|widgetToTurn
parameter_list|,
specifier|const
name|QVector
argument_list|<
name|QWidget
modifier|*
argument_list|>
name|glwidgets
parameter_list|)
member_init_list|:
name|m_root
argument_list|(
name|root
argument_list|)
member_init_list|,
name|m_widgetToTurn
argument_list|(
name|widgetToTurn
argument_list|)
member_init_list|,
name|m_glWidgets
argument_list|(
name|glwidgets
argument_list|)
block|{ }
name|void
name|dump
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|turnNative
parameter_list|()
function_decl|;
name|void
name|hideShowAllGL
parameter_list|()
function_decl|;
name|void
name|dumpCompositingStatus
parameter_list|()
function_decl|;
signals|signals:
name|void
name|aboutToShowGLWidgets
parameter_list|()
function_decl|;
private|private:
name|void
name|dumpWidget
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|,
name|int
name|indent
init|=
literal|0
parameter_list|)
function_decl|;
DECL|member|m_root
name|QWidget
modifier|*
name|m_root
decl_stmt|;
DECL|member|m_widgetToTurn
name|QWidget
modifier|*
name|m_widgetToTurn
decl_stmt|;
DECL|member|m_glWidgets
name|QVector
argument_list|<
name|QWidget
modifier|*
argument_list|>
name|m_glWidgets
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|turnNative
name|void
name|Tools
operator|::
name|turnNative
parameter_list|()
block|{
name|qDebug
argument_list|(
literal|"Turning into native"
argument_list|)
expr_stmt|;
name|m_widgetToTurn
operator|->
name|winId
argument_list|()
expr_stmt|;
name|dump
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hideShowAllGL
name|void
name|Tools
operator|::
name|hideShowAllGL
parameter_list|()
block|{
if|if
condition|(
name|m_glWidgets
index|[
literal|0
index|]
operator|->
name|isVisible
argument_list|()
condition|)
block|{
name|qDebug
argument_list|(
literal|"Hiding all render-to-texture widgets"
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|QWidget
modifier|*
name|w
decl|,
name|m_glWidgets
control|)
name|w
operator|->
name|hide
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|qDebug
argument_list|(
literal|"Showing all render-to-texture widgets"
argument_list|)
expr_stmt|;
emit|emit
name|aboutToShowGLWidgets
argument_list|()
emit|;
foreach|foreach
control|(
name|QWidget
modifier|*
name|w
decl|,
name|m_glWidgets
control|)
name|w
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|dump
name|void
name|Tools
operator|::
name|dump
parameter_list|()
block|{
name|qDebug
argument_list|()
operator|<<
literal|"Widget hierarchy"
expr_stmt|;
name|dumpWidget
argument_list|(
name|m_root
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"========"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dumpWidget
name|void
name|Tools
operator|::
name|dumpWidget
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|,
name|int
name|indent
parameter_list|)
block|{
name|QString
name|indentStr
decl_stmt|;
name|indentStr
operator|.
name|fill
argument_list|(
literal|' '
argument_list|,
name|indent
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|.
name|noquote
argument_list|()
operator|<<
name|indentStr
operator|<<
name|w
operator|<<
literal|"winId ="
operator|<<
name|w
operator|->
name|internalWinId
argument_list|()
expr_stmt|;
foreach|foreach
control|(
name|QObject
modifier|*
name|obj
decl|,
name|w
operator|->
name|children
argument_list|()
control|)
block|{
if|if
condition|(
name|QWidget
modifier|*
name|cw
init|=
name|qobject_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|obj
argument_list|)
condition|)
name|dumpWidget
argument_list|(
name|cw
argument_list|,
name|indent
operator|+
literal|4
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|dumpCompositingStatus
name|void
name|Tools
operator|::
name|dumpCompositingStatus
parameter_list|()
block|{
name|QWindow
modifier|*
name|w
init|=
name|m_root
operator|->
name|window
argument_list|()
operator|->
name|windowHandle
argument_list|()
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Compositing status for"
operator|<<
name|w
operator|<<
name|m_root
operator|->
name|window
argument_list|()
operator|<<
literal|"is"
operator|<<
name|QWindowPrivate
operator|::
name|get
argument_list|(
name|w
argument_list|)
operator|->
name|compositing
expr_stmt|;
block|}
end_function
begin_class
DECL|class|TabWidgetResetter
class|class
name|TabWidgetResetter
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|TabWidgetResetter
name|TabWidgetResetter
parameter_list|(
name|QTabWidget
modifier|*
name|tw
parameter_list|)
member_init_list|:
name|m_tw
argument_list|(
name|tw
argument_list|)
block|{ }
public|public
name|slots
public|:
DECL|function|reset
name|void
name|reset
parameter_list|()
block|{
name|m_tw
operator|->
name|setCurrentIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
private|private:
DECL|member|m_tw
name|QTabWidget
modifier|*
name|m_tw
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
name|argv
index|[]
parameter_list|)
block|{
if|if
condition|(
name|argc
operator|>
literal|1
operator|&&
operator|!
name|strcmp
argument_list|(
name|argv
index|[
literal|1
index|]
argument_list|,
literal|"--sharecontext"
argument_list|)
condition|)
block|{
name|qDebug
argument_list|(
literal|"Requesting all contexts to share"
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|setAttribute
argument_list|(
name|Qt
operator|::
name|AA_ShareOpenGLContexts
argument_list|)
expr_stmt|;
block|}
name|QApplication
name|a
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|QSurfaceFormat
name|format
decl_stmt|;
if|if
condition|(
name|QCoreApplication
operator|::
name|arguments
argument_list|()
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"--multisample"
argument_list|)
argument_list|)
condition|)
name|format
operator|.
name|setSamples
argument_list|(
literal|4
argument_list|)
expr_stmt|;
if|if
condition|(
name|QCoreApplication
operator|::
name|arguments
argument_list|()
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"--coreprofile"
argument_list|)
argument_list|)
condition|)
block|{
name|format
operator|.
name|setVersion
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|format
operator|.
name|setProfile
argument_list|(
name|QSurfaceFormat
operator|::
name|CoreProfile
argument_list|)
expr_stmt|;
block|}
name|qDebug
argument_list|()
operator|<<
literal|"Requesting"
operator|<<
name|format
expr_stmt|;
name|QMainWindow
name|wnd
decl_stmt|;
name|wnd
operator|.
name|setObjectName
argument_list|(
literal|"Main Window"
argument_list|)
expr_stmt|;
name|wnd
operator|.
name|resize
argument_list|(
literal|1024
argument_list|,
literal|768
argument_list|)
expr_stmt|;
name|QMdiArea
modifier|*
name|w
init|=
operator|new
name|QMdiArea
decl_stmt|;
name|w
operator|->
name|setObjectName
argument_list|(
literal|"MDI area"
argument_list|)
expr_stmt|;
name|w
operator|->
name|setVerticalScrollBarPolicy
argument_list|(
name|Qt
operator|::
name|ScrollBarAsNeeded
argument_list|)
expr_stmt|;
name|wnd
operator|.
name|setCentralWidget
argument_list|(
name|w
argument_list|)
expr_stmt|;
name|OpenGLWidget
modifier|*
name|glw
init|=
operator|new
name|OpenGLWidget
argument_list|(
literal|33
argument_list|,
name|QVector3D
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
argument_list|)
decl_stmt|;
name|glw
operator|->
name|setObjectName
argument_list|(
literal|"First GL Widget with 33 ms timer"
argument_list|)
expr_stmt|;
name|glw
operator|->
name|setFormat
argument_list|(
name|format
argument_list|)
expr_stmt|;
name|glw
operator|->
name|setMinimumSize
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|QMdiSubWindow
modifier|*
name|sw
init|=
name|w
operator|->
name|addSubWindow
argument_list|(
name|glw
argument_list|)
decl_stmt|;
name|sw
operator|->
name|setObjectName
argument_list|(
literal|"First MDI Sub-Window"
argument_list|)
expr_stmt|;
name|sw
operator|->
name|setWindowTitle
argument_list|(
literal|"33 ms timer"
argument_list|)
expr_stmt|;
name|OpenGLWidget
modifier|*
name|glw2
init|=
operator|new
name|OpenGLWidget
argument_list|(
literal|16
argument_list|)
decl_stmt|;
name|glw2
operator|->
name|setObjectName
argument_list|(
literal|"Second GL Widget with 16 ms timer"
argument_list|)
expr_stmt|;
name|glw2
operator|->
name|setFormat
argument_list|(
name|format
argument_list|)
expr_stmt|;
name|glw2
operator|->
name|setMinimumSize
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|QOpenGLWidget
modifier|*
name|glw22
init|=
operator|new
name|OpenGLWidget
argument_list|(
literal|16
argument_list|)
decl_stmt|;
name|glw22
operator|->
name|setObjectName
argument_list|(
literal|"Second #2 GLWidget"
argument_list|)
expr_stmt|;
name|glw22
operator|->
name|setParent
argument_list|(
name|glw2
argument_list|)
expr_stmt|;
name|glw22
operator|->
name|resize
argument_list|(
literal|40
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|sw
operator|=
name|w
operator|->
name|addSubWindow
argument_list|(
name|glw2
argument_list|)
expr_stmt|;
name|sw
operator|->
name|setObjectName
argument_list|(
literal|"Second MDI Sub-Window"
argument_list|)
expr_stmt|;
name|sw
operator|->
name|setWindowTitle
argument_list|(
literal|"16 ms timer"
argument_list|)
expr_stmt|;
name|OpenGLWidget
modifier|*
name|glw3
init|=
operator|new
name|OpenGLWidget
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// trigger updates continuously, no timer
name|glw3
operator|->
name|setObjectName
argument_list|(
literal|"GL widget in scroll area (possibly native)"
argument_list|)
expr_stmt|;
name|glw3
operator|->
name|setFormat
argument_list|(
name|format
argument_list|)
expr_stmt|;
name|glw3
operator|->
name|setFixedSize
argument_list|(
literal|600
argument_list|,
literal|600
argument_list|)
expr_stmt|;
name|QScrollArea
modifier|*
name|sa
init|=
operator|new
name|QScrollArea
decl_stmt|;
name|sa
operator|->
name|setWidget
argument_list|(
name|glw3
argument_list|)
expr_stmt|;
name|sa
operator|->
name|setMinimumSize
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|sa
operator|->
name|setVerticalScrollBarPolicy
argument_list|(
name|Qt
operator|::
name|ScrollBarAsNeeded
argument_list|)
expr_stmt|;
name|sw
operator|=
name|w
operator|->
name|addSubWindow
argument_list|(
name|sa
argument_list|)
expr_stmt|;
name|sw
operator|->
name|setObjectName
argument_list|(
literal|"MDI Sub-Window for scroll area"
argument_list|)
expr_stmt|;
name|sw
operator|->
name|setWindowTitle
argument_list|(
literal|"Cont. update"
argument_list|)
expr_stmt|;
name|sw
operator|->
name|resize
argument_list|(
literal|300
argument_list|,
literal|300
argument_list|)
expr_stmt|;
name|sa
operator|->
name|verticalScrollBar
argument_list|()
operator|->
name|setValue
argument_list|(
literal|300
argument_list|)
expr_stmt|;
name|QLCDNumber
modifier|*
name|lcd
init|=
operator|new
name|QLCDNumber
decl_stmt|;
name|lcd
operator|->
name|display
argument_list|(
literal|1337
argument_list|)
expr_stmt|;
name|lcd
operator|->
name|setMinimumSize
argument_list|(
literal|300
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|sw
operator|=
name|w
operator|->
name|addSubWindow
argument_list|(
name|lcd
argument_list|)
expr_stmt|;
name|sw
operator|->
name|setObjectName
argument_list|(
literal|"MDI Sub-Window for LCD widget"
argument_list|)
expr_stmt|;
name|sw
operator|->
name|setWindowTitle
argument_list|(
literal|"Ordinary widget"
argument_list|)
expr_stmt|;
name|QTabWidget
modifier|*
name|tw
init|=
operator|new
name|QTabWidget
decl_stmt|;
name|QOpenGLWidget
modifier|*
name|glw4
init|=
operator|new
name|OpenGLWidget
argument_list|(
literal|16
argument_list|,
name|QVector3D
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|glw4
operator|->
name|setObjectName
argument_list|(
literal|"GL widget in tab widget"
argument_list|)
expr_stmt|;
name|tw
operator|->
name|addTab
argument_list|(
name|glw4
argument_list|,
literal|"OpenGL"
argument_list|)
expr_stmt|;
name|QLabel
modifier|*
name|label
init|=
operator|new
name|QLabel
argument_list|(
literal|"Another tab"
argument_list|)
decl_stmt|;
name|tw
operator|->
name|addTab
argument_list|(
name|label
argument_list|,
literal|"Not OpenGL"
argument_list|)
expr_stmt|;
name|tw
operator|->
name|setMinimumSize
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|sw
operator|=
name|w
operator|->
name|addSubWindow
argument_list|(
name|tw
argument_list|)
expr_stmt|;
name|sw
operator|->
name|setObjectName
argument_list|(
literal|"MDI Sub-Window for tab widget"
argument_list|)
expr_stmt|;
name|sw
operator|->
name|setWindowTitle
argument_list|(
literal|"Tabs"
argument_list|)
expr_stmt|;
name|TabWidgetResetter
name|twr
argument_list|(
name|tw
argument_list|)
decl_stmt|;
name|Tools
name|t
argument_list|(
operator|&
name|wnd
argument_list|,
name|glw3
argument_list|,
name|QVector
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|()
operator|<<
name|glw
operator|<<
name|glw2
operator|<<
name|glw3
operator|<<
name|glw4
argument_list|)
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|t
argument_list|,
name|SIGNAL
argument_list|(
name|aboutToShowGLWidgets
argument_list|()
argument_list|)
argument_list|,
operator|&
name|twr
argument_list|,
name|SLOT
argument_list|(
name|reset
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QMenu
modifier|*
name|toolsMenu
init|=
name|wnd
operator|.
name|menuBar
argument_list|()
operator|->
name|addMenu
argument_list|(
literal|"&Tools"
argument_list|)
decl_stmt|;
name|toolsMenu
operator|->
name|addAction
argument_list|(
literal|"&Turn widgets (or some parent) into native"
argument_list|,
operator|&
name|t
argument_list|,
name|SLOT
argument_list|(
name|turnNative
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|toolsMenu
operator|->
name|addAction
argument_list|(
literal|"&Hide/show all OpenGL widgets"
argument_list|,
operator|&
name|t
argument_list|,
name|SLOT
argument_list|(
name|hideShowAllGL
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTimer
name|compStatusDumpTimer
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|compStatusDumpTimer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
operator|&
name|t
argument_list|,
name|SLOT
argument_list|(
name|dumpCompositingStatus
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|compStatusDumpTimer
operator|.
name|start
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|wnd
operator|.
name|show
argument_list|()
expr_stmt|;
if|if
condition|(
name|glw
operator|->
name|isValid
argument_list|()
condition|)
name|qDebug
argument_list|()
operator|<<
literal|"Got"
operator|<<
name|glw
operator|->
name|format
argument_list|()
expr_stmt|;
name|t
operator|.
name|dump
argument_list|()
expr_stmt|;
return|return
name|a
operator|.
name|exec
argument_list|()
return|;
block|}
end_function
begin_include
include|#
directive|include
file|"main.moc"
end_include
end_unit
