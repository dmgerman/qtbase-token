begin_unit
begin_comment
comment|/****************************************************************************  **  ** Copyright (C) 2016 The Qt Company Ltd.  ** Contact: https://www.qt.io/licensing/  **  ** This file is part of the test suite of the Qt Toolkit.  **  ** $QT_BEGIN_LICENSE:GPL-EXCEPT$  ** Commercial License Usage  ** Licensees holding valid commercial Qt licenses may use this file in  ** accordance with the commercial license agreement provided with the  ** Software or, alternatively, in accordance with the terms contained in  ** a written agreement between you and The Qt Company. For licensing terms  ** and conditions see https://www.qt.io/terms-conditions. For further  ** information use the contact form at https://www.qt.io/contact-us.  **  ** GNU General Public License Usage  ** Alternatively, this file may be used under the terms of the GNU  ** General Public License version 3 as published by the Free Software  ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT  ** included in the packaging of this file. Please review the following  ** information to ensure the GNU General Public License requirements will  ** be met: https://www.gnu.org/licenses/gpl-3.0.html.  **  ** $QT_END_LICENSE$  **  ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QMainWindow>
end_include
begin_include
include|#
directive|include
file|<QMenuBar>
end_include
begin_include
include|#
directive|include
file|<QLabel>
end_include
begin_include
include|#
directive|include
file|<QHBoxLayout>
end_include
begin_include
include|#
directive|include
file|<QApplication>
end_include
begin_include
include|#
directive|include
file|<QAction>
end_include
begin_include
include|#
directive|include
file|<QStyle>
end_include
begin_include
include|#
directive|include
file|<QToolBar>
end_include
begin_include
include|#
directive|include
file|<QPushButton>
end_include
begin_include
include|#
directive|include
file|<QButtonGroup>
end_include
begin_include
include|#
directive|include
file|<QLineEdit>
end_include
begin_include
include|#
directive|include
file|<QScrollBar>
end_include
begin_include
include|#
directive|include
file|<QSlider>
end_include
begin_include
include|#
directive|include
file|<QSpinBox>
end_include
begin_include
include|#
directive|include
file|<QTabBar>
end_include
begin_include
include|#
directive|include
file|<QIcon>
end_include
begin_include
include|#
directive|include
file|<QPainter>
end_include
begin_include
include|#
directive|include
file|<QWindow>
end_include
begin_include
include|#
directive|include
file|<QScreen>
end_include
begin_include
include|#
directive|include
file|<QFile>
end_include
begin_include
include|#
directive|include
file|<QMouseEvent>
end_include
begin_include
include|#
directive|include
file|<QTemporaryDir>
end_include
begin_include
include|#
directive|include
file|<QTimer>
end_include
begin_include
include|#
directive|include
file|<QCommandLineParser>
end_include
begin_include
include|#
directive|include
file|<QCommandLineOption>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<private/qhighdpiscaling_p.h>
end_include
begin_include
include|#
directive|include
file|"dragwidget.h"
end_include
begin_class
DECL|class|DemoContainerBase
class|class
name|DemoContainerBase
block|{
public|public:
DECL|function|DemoContainerBase
name|DemoContainerBase
parameter_list|()
member_init_list|:
name|m_widget
argument_list|(
literal|0
argument_list|)
block|{}
DECL|function|~DemoContainerBase
specifier|virtual
name|~
name|DemoContainerBase
parameter_list|()
block|{}
DECL|function|name
name|QString
name|name
parameter_list|()
block|{
return|return
name|option
argument_list|()
operator|.
name|names
argument_list|()
operator|.
name|first
argument_list|()
return|;
block|}
specifier|virtual
name|QCommandLineOption
modifier|&
name|option
parameter_list|()
function_decl|=
literal|0
function_decl|;
specifier|virtual
name|void
name|makeVisible
parameter_list|(
name|bool
name|visible
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
function_decl|=
literal|0
function_decl|;
DECL|function|widget
name|QWidget
modifier|*
name|widget
parameter_list|()
block|{
return|return
name|m_widget
return|;
block|}
protected|protected:
DECL|member|m_widget
name|QWidget
modifier|*
name|m_widget
decl_stmt|;
block|}
class|;
end_class
begin_typedef
DECL|typedef|DemoContainerList
typedef|typedef
name|QList
argument_list|<
name|DemoContainerBase
modifier|*
argument_list|>
name|DemoContainerList
typedef|;
end_typedef
begin_class
template|template
parameter_list|<
name|class
name|T
parameter_list|>
class|class
DECL|class|DemoContainer
name|DemoContainer
super|:
specifier|public
name|DemoContainerBase
block|{
public|public:
DECL|function|DemoContainer
name|DemoContainer
parameter_list|(
specifier|const
name|QString
modifier|&
name|optionName
parameter_list|,
specifier|const
name|QString
modifier|&
name|description
parameter_list|)
member_init_list|:
name|m_option
argument_list|(
name|optionName
argument_list|,
name|description
argument_list|)
block|{     }
DECL|function|~DemoContainer
name|~
name|DemoContainer
parameter_list|()
block|{
operator|delete
name|m_widget
expr_stmt|;
block|}
DECL|function|option
name|QCommandLineOption
modifier|&
name|option
parameter_list|()
block|{
return|return
name|m_option
return|;
block|}
DECL|function|makeVisible
name|void
name|makeVisible
parameter_list|(
name|bool
name|visible
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
block|{
if|if
condition|(
name|visible
operator|&&
operator|!
name|m_widget
condition|)
block|{
name|m_widget
operator|=
operator|new
name|T
expr_stmt|;
name|m_widget
operator|->
name|installEventFilter
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|m_widget
condition|)
name|m_widget
operator|->
name|setVisible
argument_list|(
name|visible
argument_list|)
expr_stmt|;
block|}
private|private:
DECL|member|m_option
name|QCommandLineOption
name|m_option
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|LabelSlider
class|class
name|LabelSlider
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|LabelSlider
name|LabelSlider
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|QGridLayout
modifier|*
name|layout
parameter_list|,
name|int
name|row
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
block|{
name|QLabel
modifier|*
name|textLabel
init|=
operator|new
name|QLabel
argument_list|(
name|text
argument_list|)
decl_stmt|;
name|m_slider
operator|=
operator|new
name|QSlider
argument_list|()
expr_stmt|;
name|m_slider
operator|->
name|setOrientation
argument_list|(
name|Qt
operator|::
name|Horizontal
argument_list|)
expr_stmt|;
name|m_slider
operator|->
name|setMinimum
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|m_slider
operator|->
name|setMaximum
argument_list|(
literal|40
argument_list|)
expr_stmt|;
name|m_slider
operator|->
name|setValue
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|m_slider
operator|->
name|setTracking
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_slider
operator|->
name|setTickInterval
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|m_slider
operator|->
name|setTickPosition
argument_list|(
name|QSlider
operator|::
name|TicksBelow
argument_list|)
expr_stmt|;
name|m_label
operator|=
operator|new
name|QLabel
argument_list|(
literal|"1.0"
argument_list|)
expr_stmt|;
comment|// set up layouts
name|layout
operator|->
name|addWidget
argument_list|(
name|textLabel
argument_list|,
name|row
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|m_slider
argument_list|,
name|row
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|m_label
argument_list|,
name|row
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// handle slider position change
name|connect
argument_list|(
name|m_slider
argument_list|,
operator|&
name|QSlider
operator|::
name|sliderMoved
argument_list|,
name|this
argument_list|,
operator|&
name|LabelSlider
operator|::
name|updateLabel
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_slider
argument_list|,
operator|&
name|QSlider
operator|::
name|valueChanged
argument_list|,
name|this
argument_list|,
operator|&
name|LabelSlider
operator|::
name|valueChanged
argument_list|)
expr_stmt|;
block|}
DECL|function|setValue
name|void
name|setValue
parameter_list|(
name|int
name|scaleFactor
parameter_list|)
block|{
name|m_slider
operator|->
name|setValue
argument_list|(
name|scaleFactor
argument_list|)
expr_stmt|;
name|updateLabel
argument_list|(
name|scaleFactor
argument_list|)
expr_stmt|;
block|}
private|private
name|slots
private|:
DECL|function|updateLabel
name|void
name|updateLabel
parameter_list|(
name|int
name|scaleFactor
parameter_list|)
block|{
comment|// slider value is scale factor times ten;
name|qreal
name|scalefactorF
init|=
name|qreal
argument_list|(
name|scaleFactor
argument_list|)
operator|/
literal|10.0
decl_stmt|;
comment|// update label, add ".0" if needed.
name|QString
name|number
init|=
name|QString
operator|::
name|number
argument_list|(
name|scalefactorF
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|number
operator|.
name|contains
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|)
condition|)
name|number
operator|.
name|append
argument_list|(
literal|".0"
argument_list|)
expr_stmt|;
name|m_label
operator|->
name|setText
argument_list|(
name|number
argument_list|)
expr_stmt|;
block|}
signals|signals:
name|void
name|valueChanged
parameter_list|(
name|int
name|scaleFactor
parameter_list|)
function_decl|;
private|private:
DECL|member|m_slider
name|QSlider
modifier|*
name|m_slider
decl_stmt|;
DECL|member|m_label
name|QLabel
modifier|*
name|m_label
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|getScreenFactorWithoutPixelDensity
specifier|static
name|qreal
name|getScreenFactorWithoutPixelDensity
parameter_list|(
specifier|const
name|QScreen
modifier|*
name|screen
parameter_list|)
block|{
comment|// this is a hack that relies on knowing the internals of QHighDpiScaling
specifier|static
specifier|const
name|char
modifier|*
name|scaleFactorProperty
init|=
literal|"_q_scaleFactor"
decl_stmt|;
name|QVariant
name|screenFactor
init|=
name|screen
operator|->
name|property
argument_list|(
name|scaleFactorProperty
argument_list|)
decl_stmt|;
return|return
name|screenFactor
operator|.
name|isValid
argument_list|()
condition|?
name|screenFactor
operator|.
name|toReal
argument_list|()
else|:
literal|1.0
return|;
block|}
end_function
begin_function
DECL|function|getGlobalScaleFactor
specifier|static
specifier|inline
name|qreal
name|getGlobalScaleFactor
parameter_list|()
block|{
name|QScreen
modifier|*
name|noScreen
init|=
literal|0
decl_stmt|;
return|return
name|QHighDpiScaling
operator|::
name|factor
argument_list|(
name|noScreen
argument_list|)
return|;
block|}
end_function
begin_class
DECL|class|DemoController
class|class
name|DemoController
super|:
specifier|public
name|QWidget
block|{
name|Q_OBJECT
public|public:
name|DemoController
parameter_list|(
name|DemoContainerList
modifier|*
name|demos
parameter_list|,
name|QCommandLineParser
modifier|*
name|parser
parameter_list|)
constructor_decl|;
name|~
name|DemoController
parameter_list|()
destructor_decl|;
protected|protected:
name|bool
name|eventFilter
parameter_list|(
name|QObject
modifier|*
name|object
parameter_list|,
name|QEvent
modifier|*
name|event
parameter_list|)
function_decl|;
DECL|function|closeEvent
name|void
name|closeEvent
parameter_list|(
name|QCloseEvent
modifier|*
parameter_list|)
block|{
name|qApp
operator|->
name|quit
argument_list|()
expr_stmt|;
block|}
private|private
name|slots
private|:
name|void
name|handleButton
parameter_list|(
name|int
name|id
parameter_list|,
name|bool
name|toggled
parameter_list|)
function_decl|;
private|private:
DECL|member|m_demos
name|DemoContainerList
modifier|*
name|m_demos
decl_stmt|;
DECL|member|m_group
name|QButtonGroup
modifier|*
name|m_group
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|DemoController
name|DemoController
operator|::
name|DemoController
parameter_list|(
name|DemoContainerList
modifier|*
name|demos
parameter_list|,
name|QCommandLineParser
modifier|*
name|parser
parameter_list|)
member_init_list|:
name|m_demos
argument_list|(
name|demos
argument_list|)
block|{
name|setWindowTitle
argument_list|(
literal|"screen scale factors"
argument_list|)
expr_stmt|;
name|setObjectName
argument_list|(
literal|"controller"
argument_list|)
expr_stmt|;
comment|// make WindowScaleFactorSetter skip this window
name|QGridLayout
modifier|*
name|layout
init|=
operator|new
name|QGridLayout
decl_stmt|;
name|setLayout
argument_list|(
name|layout
argument_list|)
expr_stmt|;
name|int
name|layoutRow
init|=
literal|0
decl_stmt|;
name|LabelSlider
modifier|*
name|globalScaleSlider
init|=
operator|new
name|LabelSlider
argument_list|(
name|this
argument_list|,
literal|"Global scale factor"
argument_list|,
name|layout
argument_list|,
name|layoutRow
operator|++
argument_list|)
decl_stmt|;
name|globalScaleSlider
operator|->
name|setValue
argument_list|(
name|int
argument_list|(
name|getGlobalScaleFactor
argument_list|()
operator|*
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|globalScaleSlider
argument_list|,
operator|&
name|LabelSlider
operator|::
name|valueChanged
argument_list|,
capture|[]
parameter_list|(
name|int
name|scaleFactor
parameter_list|)
block|{
comment|// slider value is scale factor times ten;
name|qreal
name|scalefactorF
type|=
name|qreal
type|(
name|scaleFactor
decl_stmt|) / 10.0;
name|QHighDpiScaling
operator|::
name|setGlobalFactor
argument_list|(
name|scalefactorF
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
comment|// set up one scale control line per screen
name|QList
argument_list|<
name|QScreen
modifier|*
argument_list|>
name|screens
init|=
name|QGuiApplication
operator|::
name|screens
argument_list|()
decl_stmt|;
foreach|foreach
control|(
name|QScreen
modifier|*
name|screen
decl|,
name|screens
control|)
block|{
comment|// create scale control line
name|QSize
name|screenSize
init|=
name|screen
operator|->
name|geometry
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|QString
name|screenId
init|=
name|screen
operator|->
name|name
argument_list|()
operator|+
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|screenSize
operator|.
name|width
argument_list|()
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|screenSize
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|LabelSlider
modifier|*
name|slider
init|=
operator|new
name|LabelSlider
argument_list|(
name|this
argument_list|,
name|screenId
argument_list|,
name|layout
argument_list|,
name|layoutRow
operator|++
argument_list|)
decl_stmt|;
name|slider
operator|->
name|setValue
argument_list|(
name|getScreenFactorWithoutPixelDensity
argument_list|(
name|screen
argument_list|)
operator|*
literal|10
argument_list|)
expr_stmt|;
comment|// handle slider value change
name|connect
argument_list|(
name|slider
argument_list|,
operator|&
name|LabelSlider
operator|::
name|valueChanged
argument_list|,
capture|[
name|screen
capture|]
parameter_list|(
name|int
name|scaleFactor
parameter_list|)
block|{
comment|// slider value is scale factor times ten;
name|qreal
name|scalefactorF
type|=
name|qreal
type|(
name|scaleFactor
decl_stmt|) / 10.0;
comment|// set scale factor for screen
name|qreal
name|oldFactor
type|=
name|QHighDpiScaling
operator|::
name|factor
type|(
name|screen
decl_stmt|);
name|QHighDpiScaling
operator|::
name|setScreenFactor
argument_list|(
name|screen
argument_list|,
name|scalefactorF
argument_list|)
expr_stmt|;
name|qreal
name|newFactor
type|=
name|QHighDpiScaling
operator|::
name|factor
type|(
name|screen
decl_stmt|);
name|qDebug
argument_list|()
operator|<<
literal|"factor was / is"
operator|<<
name|oldFactor
operator|<<
name|newFactor
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
block|}
name|m_group
operator|=
operator|new
name|QButtonGroup
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|m_group
operator|->
name|setExclusive
argument_list|(
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_demos
operator|->
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|DemoContainerBase
modifier|*
name|demo
init|=
name|m_demos
operator|->
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QPushButton
modifier|*
name|button
init|=
operator|new
name|QPushButton
argument_list|(
name|demo
operator|->
name|name
argument_list|()
argument_list|)
decl_stmt|;
name|button
operator|->
name|setToolTip
argument_list|(
name|demo
operator|->
name|option
argument_list|()
operator|.
name|description
argument_list|()
argument_list|)
expr_stmt|;
name|button
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|button
argument_list|,
name|layoutRow
operator|++
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|m_group
operator|->
name|addButton
argument_list|(
name|button
argument_list|,
name|i
argument_list|)
expr_stmt|;
if|if
condition|(
name|parser
operator|->
name|isSet
argument_list|(
name|demo
operator|->
name|option
argument_list|()
argument_list|)
condition|)
block|{
name|demo
operator|->
name|makeVisible
argument_list|(
literal|true
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|button
operator|->
name|setChecked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
block|}
name|connect
argument_list|(
name|m_group
argument_list|,
name|SIGNAL
argument_list|(
name|buttonToggled
argument_list|(
name|int
argument_list|,
name|bool
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|handleButton
argument_list|(
name|int
argument_list|,
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~DemoController
name|DemoController
operator|::
name|~
name|DemoController
parameter_list|()
block|{
name|qDeleteAll
argument_list|(
operator|*
name|m_demos
argument_list|)
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|eventFilter
name|bool
name|DemoController
operator|::
name|eventFilter
parameter_list|(
name|QObject
modifier|*
name|object
parameter_list|,
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|Close
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|m_demos
operator|->
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|DemoContainerBase
modifier|*
name|demo
init|=
name|m_demos
operator|->
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|demo
operator|->
name|widget
argument_list|()
operator|==
name|object
condition|)
block|{
name|m_group
operator|->
name|button
argument_list|(
name|i
argument_list|)
operator|->
name|setChecked
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|handleButton
name|void
name|DemoController
operator|::
name|handleButton
parameter_list|(
name|int
name|id
parameter_list|,
name|bool
name|toggled
parameter_list|)
block|{
name|m_demos
operator|->
name|at
argument_list|(
name|id
argument_list|)
operator|->
name|makeVisible
argument_list|(
name|toggled
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|PixmapPainter
class|class
name|PixmapPainter
super|:
specifier|public
name|QWidget
block|{
public|public:
name|PixmapPainter
parameter_list|()
constructor_decl|;
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
name|event
parameter_list|)
function_decl|;
DECL|member|pixmap1X
name|QPixmap
name|pixmap1X
decl_stmt|;
DECL|member|pixmap2X
name|QPixmap
name|pixmap2X
decl_stmt|;
DECL|member|pixmapLarge
name|QPixmap
name|pixmapLarge
decl_stmt|;
DECL|member|image1X
name|QImage
name|image1X
decl_stmt|;
DECL|member|image2X
name|QImage
name|image2X
decl_stmt|;
DECL|member|imageLarge
name|QImage
name|imageLarge
decl_stmt|;
DECL|member|qtIcon
name|QIcon
name|qtIcon
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|PixmapPainter
name|PixmapPainter
operator|::
name|PixmapPainter
parameter_list|()
block|{
name|pixmap1X
operator|=
name|QPixmap
argument_list|(
literal|":/qticon32.png"
argument_list|)
expr_stmt|;
name|pixmap2X
operator|=
name|QPixmap
argument_list|(
literal|":/qticon32@2x.png"
argument_list|)
expr_stmt|;
name|pixmapLarge
operator|=
name|QPixmap
argument_list|(
literal|":/qticon64.png"
argument_list|)
expr_stmt|;
name|image1X
operator|=
name|QImage
argument_list|(
literal|":/qticon32.png"
argument_list|)
expr_stmt|;
name|image2X
operator|=
name|QImage
argument_list|(
literal|":/qticon32@2x.png"
argument_list|)
expr_stmt|;
name|imageLarge
operator|=
name|QImage
argument_list|(
literal|":/qticon64.png"
argument_list|)
expr_stmt|;
name|qtIcon
operator|.
name|addFile
argument_list|(
literal|":/qticon32.png"
argument_list|)
expr_stmt|;
name|qtIcon
operator|.
name|addFile
argument_list|(
literal|":/qticon32@2x.png"
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|paintEvent
name|void
name|PixmapPainter
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
name|QPainter
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
name|QRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|size
argument_list|()
argument_list|)
argument_list|,
name|QBrush
argument_list|(
name|Qt
operator|::
name|gray
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|pixmapPointSize
init|=
literal|32
decl_stmt|;
name|int
name|y
init|=
literal|30
decl_stmt|;
name|int
name|dy
init|=
literal|90
decl_stmt|;
name|int
name|x
init|=
literal|10
decl_stmt|;
name|int
name|dx
init|=
literal|40
decl_stmt|;
comment|// draw at point
comment|//          qDebug()<< "paint pixmap"<< pixmap1X.devicePixelRatio();
name|p
operator|.
name|drawPixmap
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|pixmap1X
argument_list|)
expr_stmt|;
name|x
operator|+=
name|dx
expr_stmt|;
name|p
operator|.
name|drawPixmap
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|pixmap2X
argument_list|)
expr_stmt|;
name|x
operator|+=
name|dx
expr_stmt|;
name|p
operator|.
name|drawPixmap
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|pixmapLarge
argument_list|)
expr_stmt|;
name|x
operator|+=
name|dx
operator|*
literal|2
expr_stmt|;
name|p
operator|.
name|drawPixmap
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|qtIcon
operator|.
name|pixmap
argument_list|(
name|QSize
argument_list|(
name|pixmapPointSize
argument_list|,
name|pixmapPointSize
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|+=
name|dx
expr_stmt|;
name|p
operator|.
name|drawImage
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|image1X
argument_list|)
expr_stmt|;
name|x
operator|+=
name|dx
expr_stmt|;
name|p
operator|.
name|drawImage
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|image2X
argument_list|)
expr_stmt|;
name|x
operator|+=
name|dx
expr_stmt|;
name|p
operator|.
name|drawImage
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|imageLarge
argument_list|)
expr_stmt|;
comment|// draw at 32x32 rect
name|y
operator|+=
name|dy
expr_stmt|;
name|x
operator|=
literal|10
expr_stmt|;
name|p
operator|.
name|drawPixmap
argument_list|(
name|QRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|pixmapPointSize
argument_list|,
name|pixmapPointSize
argument_list|)
argument_list|,
name|pixmap1X
argument_list|)
expr_stmt|;
name|x
operator|+=
name|dx
expr_stmt|;
name|p
operator|.
name|drawPixmap
argument_list|(
name|QRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|pixmapPointSize
argument_list|,
name|pixmapPointSize
argument_list|)
argument_list|,
name|pixmap2X
argument_list|)
expr_stmt|;
name|x
operator|+=
name|dx
expr_stmt|;
name|p
operator|.
name|drawPixmap
argument_list|(
name|QRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|pixmapPointSize
argument_list|,
name|pixmapPointSize
argument_list|)
argument_list|,
name|pixmapLarge
argument_list|)
expr_stmt|;
name|x
operator|+=
name|dx
expr_stmt|;
name|p
operator|.
name|drawPixmap
argument_list|(
name|QRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|pixmapPointSize
argument_list|,
name|pixmapPointSize
argument_list|)
argument_list|,
name|qtIcon
operator|.
name|pixmap
argument_list|(
name|QSize
argument_list|(
name|pixmapPointSize
argument_list|,
name|pixmapPointSize
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|+=
name|dx
expr_stmt|;
name|p
operator|.
name|drawImage
argument_list|(
name|QRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|pixmapPointSize
argument_list|,
name|pixmapPointSize
argument_list|)
argument_list|,
name|image1X
argument_list|)
expr_stmt|;
name|x
operator|+=
name|dx
expr_stmt|;
name|p
operator|.
name|drawImage
argument_list|(
name|QRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|pixmapPointSize
argument_list|,
name|pixmapPointSize
argument_list|)
argument_list|,
name|image2X
argument_list|)
expr_stmt|;
name|x
operator|+=
name|dx
expr_stmt|;
name|p
operator|.
name|drawImage
argument_list|(
name|QRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|pixmapPointSize
argument_list|,
name|pixmapPointSize
argument_list|)
argument_list|,
name|imageLarge
argument_list|)
expr_stmt|;
comment|// draw at 64x64 rect
name|y
operator|+=
name|dy
operator|-
literal|50
expr_stmt|;
name|x
operator|=
literal|10
expr_stmt|;
name|p
operator|.
name|drawPixmap
argument_list|(
name|QRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|pixmapPointSize
operator|*
literal|2
argument_list|,
name|pixmapPointSize
operator|*
literal|2
argument_list|)
argument_list|,
name|pixmap1X
argument_list|)
expr_stmt|;
name|x
operator|+=
name|dx
operator|*
literal|2
expr_stmt|;
name|p
operator|.
name|drawPixmap
argument_list|(
name|QRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|pixmapPointSize
operator|*
literal|2
argument_list|,
name|pixmapPointSize
operator|*
literal|2
argument_list|)
argument_list|,
name|pixmap2X
argument_list|)
expr_stmt|;
name|x
operator|+=
name|dx
operator|*
literal|2
expr_stmt|;
name|p
operator|.
name|drawPixmap
argument_list|(
name|QRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|pixmapPointSize
operator|*
literal|2
argument_list|,
name|pixmapPointSize
operator|*
literal|2
argument_list|)
argument_list|,
name|pixmapLarge
argument_list|)
expr_stmt|;
name|x
operator|+=
name|dx
operator|*
literal|2
expr_stmt|;
name|p
operator|.
name|drawPixmap
argument_list|(
name|QRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|pixmapPointSize
operator|*
literal|2
argument_list|,
name|pixmapPointSize
operator|*
literal|2
argument_list|)
argument_list|,
name|qtIcon
operator|.
name|pixmap
argument_list|(
name|QSize
argument_list|(
name|pixmapPointSize
argument_list|,
name|pixmapPointSize
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|x
operator|+=
name|dx
operator|*
literal|2
expr_stmt|;
name|p
operator|.
name|drawImage
argument_list|(
name|QRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|pixmapPointSize
operator|*
literal|2
argument_list|,
name|pixmapPointSize
operator|*
literal|2
argument_list|)
argument_list|,
name|image1X
argument_list|)
expr_stmt|;
name|x
operator|+=
name|dx
operator|*
literal|2
expr_stmt|;
name|p
operator|.
name|drawImage
argument_list|(
name|QRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|pixmapPointSize
operator|*
literal|2
argument_list|,
name|pixmapPointSize
operator|*
literal|2
argument_list|)
argument_list|,
name|image2X
argument_list|)
expr_stmt|;
name|x
operator|+=
name|dx
operator|*
literal|2
expr_stmt|;
name|p
operator|.
name|drawImage
argument_list|(
name|QRect
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|pixmapPointSize
operator|*
literal|2
argument_list|,
name|pixmapPointSize
operator|*
literal|2
argument_list|)
argument_list|,
name|imageLarge
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|Labels
class|class
name|Labels
super|:
specifier|public
name|QWidget
block|{
public|public:
name|Labels
parameter_list|()
constructor_decl|;
DECL|member|pixmap1X
name|QPixmap
name|pixmap1X
decl_stmt|;
DECL|member|pixmap2X
name|QPixmap
name|pixmap2X
decl_stmt|;
DECL|member|pixmapLarge
name|QPixmap
name|pixmapLarge
decl_stmt|;
DECL|member|qtIcon
name|QIcon
name|qtIcon
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|Labels
name|Labels
operator|::
name|Labels
parameter_list|()
block|{
name|pixmap1X
operator|=
name|QPixmap
argument_list|(
literal|":/qticon32.png"
argument_list|)
expr_stmt|;
name|pixmap2X
operator|=
name|QPixmap
argument_list|(
literal|":/qticon32@2x.png"
argument_list|)
expr_stmt|;
name|pixmapLarge
operator|=
name|QPixmap
argument_list|(
literal|":/qticon64.png"
argument_list|)
expr_stmt|;
name|qtIcon
operator|.
name|addFile
argument_list|(
literal|":/qticon32.png"
argument_list|)
expr_stmt|;
name|qtIcon
operator|.
name|addFile
argument_list|(
literal|":/qticon32@2x.png"
argument_list|)
expr_stmt|;
name|setWindowIcon
argument_list|(
name|qtIcon
argument_list|)
expr_stmt|;
name|setWindowTitle
argument_list|(
literal|"Labels"
argument_list|)
expr_stmt|;
name|QLabel
modifier|*
name|label1x
init|=
operator|new
name|QLabel
argument_list|()
decl_stmt|;
name|label1x
operator|->
name|setPixmap
argument_list|(
name|pixmap1X
argument_list|)
expr_stmt|;
name|QLabel
modifier|*
name|label2x
init|=
operator|new
name|QLabel
argument_list|()
decl_stmt|;
name|label2x
operator|->
name|setPixmap
argument_list|(
name|pixmap2X
argument_list|)
expr_stmt|;
name|QLabel
modifier|*
name|labelIcon
init|=
operator|new
name|QLabel
argument_list|()
decl_stmt|;
name|labelIcon
operator|->
name|setPixmap
argument_list|(
name|qtIcon
operator|.
name|pixmap
argument_list|(
name|QSize
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QLabel
modifier|*
name|labelLarge
init|=
operator|new
name|QLabel
argument_list|()
decl_stmt|;
name|labelLarge
operator|->
name|setPixmap
argument_list|(
name|pixmapLarge
argument_list|)
expr_stmt|;
name|QHBoxLayout
modifier|*
name|layout
init|=
operator|new
name|QHBoxLayout
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|label1x
argument_list|)
expr_stmt|;
comment|//expected low-res on high-dpi displays
name|layout
operator|->
name|addWidget
argument_list|(
name|label2x
argument_list|)
expr_stmt|;
comment|//expected high-res on high-dpi displays
name|layout
operator|->
name|addWidget
argument_list|(
name|labelIcon
argument_list|)
expr_stmt|;
comment|//expected high-res on high-dpi displays
name|layout
operator|->
name|addWidget
argument_list|(
name|labelLarge
argument_list|)
expr_stmt|;
comment|// expected large size and low-res
name|setLayout
argument_list|(
name|layout
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_class
DECL|class|MainWindow
class|class
name|MainWindow
super|:
specifier|public
name|QMainWindow
block|{
name|Q_OBJECT
public|public:
name|MainWindow
parameter_list|()
constructor_decl|;
name|QMenu
modifier|*
name|addNewMenu
parameter_list|(
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
name|int
name|itemCount
init|=
literal|5
parameter_list|)
function_decl|;
private|private
name|slots
private|:
name|void
name|maskActionToggled
parameter_list|(
name|bool
name|t
parameter_list|)
function_decl|;
private|private:
DECL|member|qtIcon
name|QIcon
name|qtIcon
decl_stmt|;
DECL|member|qtIcon1x
name|QIcon
name|qtIcon1x
decl_stmt|;
DECL|member|qtIcon2x
name|QIcon
name|qtIcon2x
decl_stmt|;
DECL|member|fileToolBar
name|QToolBar
modifier|*
name|fileToolBar
decl_stmt|;
DECL|member|menuCount
name|int
name|menuCount
decl_stmt|;
DECL|member|m_maskAction
name|QAction
modifier|*
name|m_maskAction
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|MainWindow
name|MainWindow
operator|::
name|MainWindow
parameter_list|()
member_init_list|:
name|menuCount
argument_list|(
literal|0
argument_list|)
block|{
comment|// beware that QIcon auto-loads the @2x versions.
name|qtIcon1x
operator|.
name|addFile
argument_list|(
literal|":/qticon16.png"
argument_list|)
expr_stmt|;
name|qtIcon2x
operator|.
name|addFile
argument_list|(
literal|":/qticon32.png"
argument_list|)
expr_stmt|;
name|setWindowIcon
argument_list|(
name|qtIcon
argument_list|)
expr_stmt|;
name|setWindowTitle
argument_list|(
literal|"MainWindow"
argument_list|)
expr_stmt|;
name|fileToolBar
operator|=
name|addToolBar
argument_list|(
name|tr
argument_list|(
literal|"File"
argument_list|)
argument_list|)
expr_stmt|;
comment|//    fileToolBar->setToolButtonStyle(Qt::ToolButtonTextUnderIcon);
name|fileToolBar
operator|->
name|addAction
argument_list|(
operator|new
name|QAction
argument_list|(
name|qtIcon1x
argument_list|,
name|QString
argument_list|(
literal|"1x"
argument_list|)
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|fileToolBar
operator|->
name|addAction
argument_list|(
operator|new
name|QAction
argument_list|(
name|qtIcon2x
argument_list|,
name|QString
argument_list|(
literal|"2x"
argument_list|)
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|addNewMenu
argument_list|(
literal|"&Edit"
argument_list|)
expr_stmt|;
name|addNewMenu
argument_list|(
literal|"&Build"
argument_list|)
expr_stmt|;
name|addNewMenu
argument_list|(
literal|"&Debug"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QMenu
modifier|*
name|menu
init|=
name|addNewMenu
argument_list|(
literal|"&Transmogrify"
argument_list|,
literal|7
argument_list|)
decl_stmt|;
name|menu
operator|->
name|addSeparator
argument_list|()
expr_stmt|;
name|m_maskAction
operator|=
name|menu
operator|->
name|addAction
argument_list|(
literal|"Mask"
argument_list|)
expr_stmt|;
name|m_maskAction
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_maskAction
argument_list|,
operator|&
name|QAction
operator|::
name|toggled
argument_list|,
name|this
argument_list|,
operator|&
name|MainWindow
operator|::
name|maskActionToggled
argument_list|)
expr_stmt|;
name|fileToolBar
operator|->
name|addAction
argument_list|(
name|m_maskAction
argument_list|)
expr_stmt|;
name|addNewMenu
argument_list|(
literal|"T&ools"
argument_list|)
expr_stmt|;
name|addNewMenu
argument_list|(
literal|"&Help"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|addNewMenu
name|QMenu
modifier|*
name|MainWindow
operator|::
name|addNewMenu
parameter_list|(
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
name|int
name|itemCount
parameter_list|)
block|{
name|QMenu
modifier|*
name|menu
init|=
name|menuBar
argument_list|()
operator|->
name|addMenu
argument_list|(
name|title
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|itemCount
condition|;
name|i
operator|++
control|)
block|{
name|menuCount
operator|++
expr_stmt|;
name|QString
name|s
init|=
literal|"Menu item "
operator|+
name|QString
operator|::
name|number
argument_list|(
name|menuCount
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|3
condition|)
block|{
name|QMenu
modifier|*
name|subMenu
init|=
name|menu
operator|->
name|addMenu
argument_list|(
name|s
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|1
init|;
name|j
operator|<
literal|4
condition|;
name|j
operator|++
control|)
name|subMenu
operator|->
name|addAction
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"SubMenu item %1.%2"
argument_list|)
operator|.
name|arg
argument_list|(
name|menuCount
argument_list|)
operator|.
name|arg
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|menu
operator|->
name|addAction
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|menu
return|;
block|}
end_function
begin_function
DECL|function|maskActionToggled
name|void
name|MainWindow
operator|::
name|maskActionToggled
parameter_list|(
name|bool
name|t
parameter_list|)
block|{
if|if
condition|(
name|t
condition|)
block|{
name|QVector
argument_list|<
name|QPoint
argument_list|>
name|upperLeftTriangle
decl_stmt|;
name|upperLeftTriangle
operator|<<
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|<<
name|QPoint
argument_list|(
name|width
argument_list|()
argument_list|,
literal|0
argument_list|)
operator|<<
name|QPoint
argument_list|(
literal|0
argument_list|,
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|setMask
argument_list|(
name|QRegion
argument_list|(
name|QPolygon
argument_list|(
name|upperLeftTriangle
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|clearMask
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_class
DECL|class|StandardIcons
class|class
name|StandardIcons
super|:
specifier|public
name|QWidget
block|{
public|public:
DECL|function|paintEvent
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
name|int
name|x
init|=
literal|10
decl_stmt|;
name|int
name|y
init|=
literal|10
decl_stmt|;
name|int
name|dx
init|=
literal|50
decl_stmt|;
name|int
name|dy
init|=
literal|50
decl_stmt|;
name|int
name|maxX
init|=
literal|500
decl_stmt|;
for|for
control|(
name|uint
name|iconIndex
init|=
name|QStyle
operator|::
name|SP_TitleBarMenuButton
init|;
name|iconIndex
operator|<
name|QStyle
operator|::
name|SP_MediaVolumeMuted
condition|;
operator|++
name|iconIndex
control|)
block|{
name|QIcon
name|icon
init|=
name|qApp
operator|->
name|style
argument_list|()
operator|->
name|standardIcon
argument_list|(
name|QStyle
operator|::
name|StandardPixmap
argument_list|(
name|iconIndex
argument_list|)
argument_list|)
decl_stmt|;
name|QPainter
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|p
operator|.
name|drawPixmap
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|icon
operator|.
name|pixmap
argument_list|(
name|dx
operator|-
literal|5
argument_list|,
name|dy
operator|-
literal|5
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|x
operator|+
name|dx
operator|>
name|maxX
condition|)
name|y
operator|+=
name|dy
expr_stmt|;
name|x
operator|=
operator|(
operator|(
name|x
operator|+
name|dx
operator|)
operator|%
name|maxX
operator|)
expr_stmt|;
block|}
block|}
block|}
class|;
end_class
begin_class
DECL|class|Caching
class|class
name|Caching
super|:
specifier|public
name|QWidget
block|{
public|public:
DECL|function|paintEvent
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
name|QSize
name|layoutSize
argument_list|(
literal|75
argument_list|,
literal|75
argument_list|)
decl_stmt|;
name|QPainter
name|widgetPainter
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|widgetPainter
operator|.
name|fillRect
argument_list|(
name|QRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|this
operator|->
name|size
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|gray
argument_list|)
expr_stmt|;
block|{
specifier|const
name|qreal
name|devicePixelRatio
init|=
name|this
operator|->
name|windowHandle
argument_list|()
operator|->
name|devicePixelRatio
argument_list|()
decl_stmt|;
name|QPixmap
name|cache
argument_list|(
name|layoutSize
operator|*
name|devicePixelRatio
argument_list|)
decl_stmt|;
name|cache
operator|.
name|setDevicePixelRatio
argument_list|(
name|devicePixelRatio
argument_list|)
expr_stmt|;
name|QPainter
name|cachedPainter
argument_list|(
operator|&
name|cache
argument_list|)
decl_stmt|;
name|cachedPainter
operator|.
name|fillRect
argument_list|(
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|75
argument_list|,
literal|75
argument_list|)
argument_list|,
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
name|cachedPainter
operator|.
name|fillRect
argument_list|(
name|QRect
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|55
argument_list|,
literal|55
argument_list|)
argument_list|,
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|cachedPainter
operator|.
name|drawEllipse
argument_list|(
name|QRect
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|55
argument_list|,
literal|55
argument_list|)
argument_list|)
expr_stmt|;
name|QPainter
name|widgetPainter
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|widgetPainter
operator|.
name|drawPixmap
argument_list|(
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
argument_list|,
name|cache
argument_list|)
expr_stmt|;
block|}
block|{
specifier|const
name|qreal
name|devicePixelRatio
init|=
name|this
operator|->
name|windowHandle
argument_list|()
operator|->
name|devicePixelRatio
argument_list|()
decl_stmt|;
name|QImage
name|cache
init|=
name|QImage
argument_list|(
name|layoutSize
operator|*
name|devicePixelRatio
argument_list|,
name|QImage
operator|::
name|Format_ARGB32_Premultiplied
argument_list|)
decl_stmt|;
name|cache
operator|.
name|setDevicePixelRatio
argument_list|(
name|devicePixelRatio
argument_list|)
expr_stmt|;
name|QPainter
name|cachedPainter
argument_list|(
operator|&
name|cache
argument_list|)
decl_stmt|;
name|cachedPainter
operator|.
name|fillRect
argument_list|(
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|75
argument_list|,
literal|75
argument_list|)
argument_list|,
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
name|cachedPainter
operator|.
name|fillRect
argument_list|(
name|QRect
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|55
argument_list|,
literal|55
argument_list|)
argument_list|,
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|cachedPainter
operator|.
name|drawEllipse
argument_list|(
name|QRect
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|55
argument_list|,
literal|55
argument_list|)
argument_list|)
expr_stmt|;
name|QPainter
name|widgetPainter
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|widgetPainter
operator|.
name|drawImage
argument_list|(
name|QPoint
argument_list|(
literal|95
argument_list|,
literal|10
argument_list|)
argument_list|,
name|cache
argument_list|)
expr_stmt|;
block|}
block|}
block|}
class|;
end_class
begin_class
DECL|class|Style
class|class
name|Style
super|:
specifier|public
name|QWidget
block|{
public|public:
DECL|member|button
name|QPushButton
modifier|*
name|button
decl_stmt|;
DECL|member|lineEdit
name|QLineEdit
modifier|*
name|lineEdit
decl_stmt|;
DECL|member|slider
name|QSlider
modifier|*
name|slider
decl_stmt|;
DECL|member|row1
name|QHBoxLayout
modifier|*
name|row1
decl_stmt|;
DECL|function|Style
name|Style
parameter_list|()
block|{
name|row1
operator|=
operator|new
name|QHBoxLayout
argument_list|()
expr_stmt|;
name|setLayout
argument_list|(
name|row1
argument_list|)
expr_stmt|;
name|button
operator|=
operator|new
name|QPushButton
argument_list|()
expr_stmt|;
name|button
operator|->
name|setText
argument_list|(
literal|"Test Button"
argument_list|)
expr_stmt|;
name|row1
operator|->
name|addWidget
argument_list|(
name|button
argument_list|)
expr_stmt|;
name|lineEdit
operator|=
operator|new
name|QLineEdit
argument_list|()
expr_stmt|;
name|lineEdit
operator|->
name|setText
argument_list|(
literal|"Test Lineedit"
argument_list|)
expr_stmt|;
name|row1
operator|->
name|addWidget
argument_list|(
name|lineEdit
argument_list|)
expr_stmt|;
name|slider
operator|=
operator|new
name|QSlider
argument_list|()
expr_stmt|;
name|row1
operator|->
name|addWidget
argument_list|(
name|slider
argument_list|)
expr_stmt|;
name|row1
operator|->
name|addWidget
argument_list|(
operator|new
name|QSpinBox
argument_list|)
expr_stmt|;
name|row1
operator|->
name|addWidget
argument_list|(
operator|new
name|QScrollBar
argument_list|)
expr_stmt|;
name|QTabBar
modifier|*
name|tab
init|=
operator|new
name|QTabBar
argument_list|()
decl_stmt|;
name|tab
operator|->
name|addTab
argument_list|(
literal|"Foo"
argument_list|)
expr_stmt|;
name|tab
operator|->
name|addTab
argument_list|(
literal|"Bar"
argument_list|)
expr_stmt|;
name|row1
operator|->
name|addWidget
argument_list|(
name|tab
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|Fonts
class|class
name|Fonts
super|:
specifier|public
name|QWidget
block|{
public|public:
DECL|function|paintEvent
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
name|QPainter
name|painter
argument_list|(
name|this
argument_list|)
decl_stmt|;
comment|// Points
name|int
name|y
init|=
literal|10
decl_stmt|;
for|for
control|(
name|int
name|fontSize
init|=
literal|6
init|;
name|fontSize
operator|<
literal|18
condition|;
name|fontSize
operator|+=
literal|2
control|)
block|{
name|QFont
name|font
decl_stmt|;
name|font
operator|.
name|setPointSize
argument_list|(
name|fontSize
argument_list|)
expr_stmt|;
name|QString
name|string
init|=
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"This text is in point size %1"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|fontSize
argument_list|)
decl_stmt|;
name|painter
operator|.
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|y
operator|+=
operator|(
name|painter
operator|.
name|fontMetrics
argument_list|()
operator|.
name|lineSpacing
argument_list|()
operator|)
expr_stmt|;
name|painter
operator|.
name|drawText
argument_list|(
literal|10
argument_list|,
name|y
argument_list|,
name|string
argument_list|)
expr_stmt|;
block|}
comment|// Pixels
name|y
operator|+=
name|painter
operator|.
name|fontMetrics
argument_list|()
operator|.
name|lineSpacing
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|fontSize
init|=
literal|6
init|;
name|fontSize
operator|<
literal|18
condition|;
name|fontSize
operator|+=
literal|2
control|)
block|{
name|QFont
name|font
decl_stmt|;
name|font
operator|.
name|setPixelSize
argument_list|(
name|fontSize
argument_list|)
expr_stmt|;
name|QString
name|string
init|=
name|QString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"This text is in pixel size %1"
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|fontSize
argument_list|)
decl_stmt|;
name|painter
operator|.
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|y
operator|+=
operator|(
name|painter
operator|.
name|fontMetrics
argument_list|()
operator|.
name|lineSpacing
argument_list|()
operator|)
expr_stmt|;
name|painter
operator|.
name|drawText
argument_list|(
literal|10
argument_list|,
name|y
argument_list|,
name|string
argument_list|)
expr_stmt|;
block|}
block|}
block|}
class|;
end_class
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|apiTestdevicePixelRatioGetter
name|void
name|apiTestdevicePixelRatioGetter
parameter_list|()
block|{
if|if
condition|(
literal|0
condition|)
block|{
name|T
modifier|*
name|t
init|=
literal|0
decl_stmt|;
name|t
operator|->
name|devicePixelRatio
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|apiTestdevicePixelRatioSetter
name|void
name|apiTestdevicePixelRatioSetter
parameter_list|()
block|{
if|if
condition|(
literal|0
condition|)
block|{
name|T
modifier|*
name|t
init|=
literal|0
decl_stmt|;
name|t
operator|->
name|setDevicePixelRatio
argument_list|(
literal|2.0
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|apiTest
name|void
name|apiTest
parameter_list|()
block|{
comment|// compile call to devicePixelRatio getter and setter (verify spelling)
name|apiTestdevicePixelRatioGetter
argument_list|<
name|QWindow
argument_list|>
argument_list|()
expr_stmt|;
name|apiTestdevicePixelRatioGetter
argument_list|<
name|QScreen
argument_list|>
argument_list|()
expr_stmt|;
name|apiTestdevicePixelRatioGetter
argument_list|<
name|QGuiApplication
argument_list|>
argument_list|()
expr_stmt|;
name|apiTestdevicePixelRatioGetter
argument_list|<
name|QImage
argument_list|>
argument_list|()
expr_stmt|;
name|apiTestdevicePixelRatioSetter
argument_list|<
name|QImage
argument_list|>
argument_list|()
expr_stmt|;
name|apiTestdevicePixelRatioGetter
argument_list|<
name|QPixmap
argument_list|>
argument_list|()
expr_stmt|;
name|apiTestdevicePixelRatioSetter
argument_list|<
name|QPixmap
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|// Request and draw an icon at different sizes
end_comment
begin_class
DECL|class|IconDrawing
class|class
name|IconDrawing
super|:
specifier|public
name|QWidget
block|{
public|public:
DECL|function|IconDrawing
name|IconDrawing
parameter_list|()
block|{
specifier|const
name|QString
name|tempPath
init|=
name|m_temporaryDir
operator|.
name|path
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|path32
init|=
name|tempPath
operator|+
literal|"/qticon32.png"
decl_stmt|;
specifier|const
name|QString
name|path32_2
init|=
name|tempPath
operator|+
literal|"/qticon32-2.png"
decl_stmt|;
specifier|const
name|QString
name|path32_2x
init|=
name|tempPath
operator|+
literal|"/qticon32@2x.png"
decl_stmt|;
name|QFile
operator|::
name|copy
argument_list|(
literal|":/qticon32.png"
argument_list|,
name|path32_2
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|copy
argument_list|(
literal|":/qticon32.png"
argument_list|,
name|path32
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|copy
argument_list|(
literal|":/qticon32@2x.png"
argument_list|,
name|path32_2x
argument_list|)
expr_stmt|;
name|iconHighDPI
operator|.
name|reset
argument_list|(
operator|new
name|QIcon
argument_list|(
name|path32
argument_list|)
argument_list|)
expr_stmt|;
comment|// will auto-load @2x version.
name|iconNormalDpi
operator|.
name|reset
argument_list|(
operator|new
name|QIcon
argument_list|(
name|path32_2
argument_list|)
argument_list|)
expr_stmt|;
comment|// does not have a 2x version.
block|}
DECL|function|paintEvent
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
name|int
name|x
init|=
literal|10
decl_stmt|;
name|int
name|y
init|=
literal|10
decl_stmt|;
name|int
name|dx
init|=
literal|50
decl_stmt|;
name|int
name|dy
init|=
literal|50
decl_stmt|;
name|int
name|maxX
init|=
literal|600
decl_stmt|;
name|int
name|minSize
init|=
literal|5
decl_stmt|;
name|int
name|maxSize
init|=
literal|64
decl_stmt|;
name|int
name|sizeIncrement
init|=
literal|5
decl_stmt|;
comment|// Disable high-dpi icons
name|QCoreApplication
operator|::
name|setAttribute
argument_list|(
name|Qt
operator|::
name|AA_UseHighDpiPixmaps
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// normal icon
for|for
control|(
name|int
name|size
init|=
name|minSize
init|;
name|size
operator|<
name|maxSize
condition|;
name|size
operator|+=
name|sizeIncrement
control|)
block|{
name|QPainter
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|p
operator|.
name|drawPixmap
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|iconNormalDpi
operator|->
name|pixmap
argument_list|(
name|size
argument_list|,
name|size
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|x
operator|+
name|dx
operator|>
name|maxX
condition|)
name|y
operator|+=
name|dy
expr_stmt|;
name|x
operator|=
operator|(
operator|(
name|x
operator|+
name|dx
operator|)
operator|%
name|maxX
operator|)
expr_stmt|;
block|}
name|x
operator|=
literal|10
expr_stmt|;
name|y
operator|+=
name|dy
expr_stmt|;
comment|// high-dpi icon
for|for
control|(
name|int
name|size
init|=
name|minSize
init|;
name|size
operator|<
name|maxSize
condition|;
name|size
operator|+=
name|sizeIncrement
control|)
block|{
name|QPainter
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|p
operator|.
name|drawPixmap
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|iconHighDPI
operator|->
name|pixmap
argument_list|(
name|size
argument_list|,
name|size
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|x
operator|+
name|dx
operator|>
name|maxX
condition|)
name|y
operator|+=
name|dy
expr_stmt|;
name|x
operator|=
operator|(
operator|(
name|x
operator|+
name|dx
operator|)
operator|%
name|maxX
operator|)
expr_stmt|;
block|}
name|x
operator|=
literal|10
expr_stmt|;
name|y
operator|+=
name|dy
expr_stmt|;
comment|// Enable high-dpi icons
name|QCoreApplication
operator|::
name|setAttribute
argument_list|(
name|Qt
operator|::
name|AA_UseHighDpiPixmaps
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// normal icon
for|for
control|(
name|int
name|size
init|=
name|minSize
init|;
name|size
operator|<
name|maxSize
condition|;
name|size
operator|+=
name|sizeIncrement
control|)
block|{
name|QPainter
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|p
operator|.
name|drawPixmap
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|iconNormalDpi
operator|->
name|pixmap
argument_list|(
name|size
argument_list|,
name|size
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|x
operator|+
name|dx
operator|>
name|maxX
condition|)
name|y
operator|+=
name|dy
expr_stmt|;
name|x
operator|=
operator|(
operator|(
name|x
operator|+
name|dx
operator|)
operator|%
name|maxX
operator|)
expr_stmt|;
block|}
name|x
operator|=
literal|10
expr_stmt|;
name|y
operator|+=
name|dy
expr_stmt|;
comment|// high-dpi icon (draw point)
for|for
control|(
name|int
name|size
init|=
name|minSize
init|;
name|size
operator|<
name|maxSize
condition|;
name|size
operator|+=
name|sizeIncrement
control|)
block|{
name|QPainter
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|p
operator|.
name|drawPixmap
argument_list|(
name|x
argument_list|,
name|y
argument_list|,
name|iconHighDPI
operator|->
name|pixmap
argument_list|(
name|size
argument_list|,
name|size
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|x
operator|+
name|dx
operator|>
name|maxX
condition|)
name|y
operator|+=
name|dy
expr_stmt|;
name|x
operator|=
operator|(
operator|(
name|x
operator|+
name|dx
operator|)
operator|%
name|maxX
operator|)
expr_stmt|;
block|}
name|x
operator|=
literal|10
expr_stmt|;
name|y
operator|+=
name|dy
expr_stmt|;
block|}
private|private:
DECL|member|m_temporaryDir
name|QTemporaryDir
name|m_temporaryDir
decl_stmt|;
DECL|member|iconHighDPI
name|QScopedPointer
argument_list|<
name|QIcon
argument_list|>
name|iconHighDPI
decl_stmt|;
DECL|member|iconNormalDpi
name|QScopedPointer
argument_list|<
name|QIcon
argument_list|>
name|iconNormalDpi
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|// Icons on buttons
end_comment
begin_class
DECL|class|Buttons
class|class
name|Buttons
super|:
specifier|public
name|QWidget
block|{
public|public:
DECL|function|Buttons
name|Buttons
parameter_list|()
block|{
name|QIcon
name|icon
decl_stmt|;
name|icon
operator|.
name|addFile
argument_list|(
literal|":/qticon16@2x.png"
argument_list|)
expr_stmt|;
name|QPushButton
modifier|*
name|button
init|=
operator|new
name|QPushButton
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|button
operator|->
name|setIcon
argument_list|(
name|icon
argument_list|)
expr_stmt|;
name|button
operator|->
name|setText
argument_list|(
literal|"16@2x"
argument_list|)
expr_stmt|;
name|QTabBar
modifier|*
name|tab
init|=
operator|new
name|QTabBar
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|tab
operator|->
name|addTab
argument_list|(
name|QIcon
argument_list|(
literal|":/qticon16.png"
argument_list|)
argument_list|,
literal|"16@1x"
argument_list|)
expr_stmt|;
name|tab
operator|->
name|addTab
argument_list|(
name|QIcon
argument_list|(
literal|":/qticon16@2x.png"
argument_list|)
argument_list|,
literal|"16@2x"
argument_list|)
expr_stmt|;
name|tab
operator|->
name|addTab
argument_list|(
name|QIcon
argument_list|(
literal|":/qticon16.png"
argument_list|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|tab
operator|->
name|addTab
argument_list|(
name|QIcon
argument_list|(
literal|":/qticon16@2x.png"
argument_list|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|tab
operator|->
name|move
argument_list|(
literal|10
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|tab
operator|->
name|show
argument_list|()
expr_stmt|;
name|QToolBar
modifier|*
name|toolBar
init|=
operator|new
name|QToolBar
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|toolBar
operator|->
name|addAction
argument_list|(
name|QIcon
argument_list|(
literal|":/qticon16.png"
argument_list|)
argument_list|,
literal|"16"
argument_list|)
expr_stmt|;
name|toolBar
operator|->
name|addAction
argument_list|(
name|QIcon
argument_list|(
literal|":/qticon16@2x.png"
argument_list|)
argument_list|,
literal|"16@2x"
argument_list|)
expr_stmt|;
name|toolBar
operator|->
name|addAction
argument_list|(
name|QIcon
argument_list|(
literal|":/qticon32.png"
argument_list|)
argument_list|,
literal|"32"
argument_list|)
expr_stmt|;
name|toolBar
operator|->
name|addAction
argument_list|(
name|QIcon
argument_list|(
literal|":/qticon32@2x.png"
argument_list|)
argument_list|,
literal|"32@2x"
argument_list|)
expr_stmt|;
name|toolBar
operator|->
name|move
argument_list|(
literal|10
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|toolBar
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|LinePainter
class|class
name|LinePainter
super|:
specifier|public
name|QWidget
block|{
public|public:
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
name|event
parameter_list|)
function_decl|;
name|void
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
function_decl|;
name|void
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
function_decl|;
name|void
name|mouseMoveEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
function_decl|;
DECL|member|lastMousePoint
name|QPoint
name|lastMousePoint
decl_stmt|;
DECL|member|linePoints
name|QVector
argument_list|<
name|QPoint
argument_list|>
name|linePoints
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|paintEvent
name|void
name|LinePainter
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
name|QPainter
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
name|QRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|size
argument_list|()
argument_list|)
argument_list|,
name|QBrush
argument_list|(
name|Qt
operator|::
name|gray
argument_list|)
argument_list|)
expr_stmt|;
comment|// Default antialiased line
name|p
operator|.
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|Antialiasing
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawLines
argument_list|(
name|linePoints
argument_list|)
expr_stmt|;
comment|// Cosmetic 1 antialiased line
name|QPen
name|pen
decl_stmt|;
name|pen
operator|.
name|setCosmetic
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pen
operator|.
name|setWidth
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPen
argument_list|(
name|pen
argument_list|)
expr_stmt|;
name|p
operator|.
name|translate
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawLines
argument_list|(
name|linePoints
argument_list|)
expr_stmt|;
comment|// Aliased cosmetic 1 line
name|p
operator|.
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|Antialiasing
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|p
operator|.
name|translate
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawLines
argument_list|(
name|linePoints
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mousePressEvent
name|void
name|LinePainter
operator|::
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|lastMousePoint
operator|=
name|event
operator|->
name|pos
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mouseReleaseEvent
name|void
name|LinePainter
operator|::
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
parameter_list|)
block|{
name|lastMousePoint
operator|=
name|QPoint
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mouseMoveEvent
name|void
name|LinePainter
operator|::
name|mouseMoveEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|lastMousePoint
operator|.
name|isNull
argument_list|()
condition|)
return|return;
name|QPoint
name|newMousePoint
init|=
name|event
operator|->
name|pos
argument_list|()
decl_stmt|;
if|if
condition|(
name|lastMousePoint
operator|==
name|newMousePoint
condition|)
return|return;
name|linePoints
operator|.
name|append
argument_list|(
name|lastMousePoint
argument_list|)
expr_stmt|;
name|linePoints
operator|.
name|append
argument_list|(
name|newMousePoint
argument_list|)
expr_stmt|;
name|lastMousePoint
operator|=
name|newMousePoint
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
end_function
begin_class
DECL|class|CursorTester
class|class
name|CursorTester
super|:
specifier|public
name|QWidget
block|{
public|public:
DECL|function|CursorTester
name|CursorTester
parameter_list|()
member_init_list|:
name|moveLabel
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|moving
argument_list|(
literal|false
argument_list|)
block|{     }
DECL|function|getRect
specifier|inline
name|QRect
name|getRect
parameter_list|(
name|int
name|idx
parameter_list|)
specifier|const
block|{
name|int
name|h
init|=
name|height
argument_list|()
operator|/
literal|2
decl_stmt|;
return|return
name|QRect
argument_list|(
literal|10
argument_list|,
literal|10
operator|+
name|h
operator|*
operator|(
name|idx
operator|-
literal|1
operator|)
argument_list|,
name|width
argument_list|()
operator|-
literal|20
argument_list|,
name|h
operator|-
literal|20
argument_list|)
return|;
block|}
DECL|function|paintEvent
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
name|QPainter
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QRect
name|r1
init|=
name|getRect
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|QRect
name|r2
init|=
name|getRect
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
name|r1
argument_list|,
name|QColor
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|,
literal|250
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawText
argument_list|(
name|r1
argument_list|,
literal|"Drag from here to move a window based on QCursor::pos()"
argument_list|)
expr_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
name|r2
argument_list|,
name|QColor
argument_list|(
literal|250
argument_list|,
literal|200
argument_list|,
literal|200
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawText
argument_list|(
name|r2
argument_list|,
literal|"Drag from here to move a window based on mouse event position"
argument_list|)
expr_stmt|;
if|if
condition|(
name|moving
condition|)
block|{
name|p
operator|.
name|setPen
argument_list|(
name|Qt
operator|::
name|darkGray
argument_list|)
expr_stmt|;
name|QFont
name|f
init|=
name|font
argument_list|()
decl_stmt|;
name|f
operator|.
name|setPointSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|p
operator|.
name|setFont
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawEllipse
argument_list|(
name|mousePos
argument_list|,
literal|30
argument_list|,
literal|60
argument_list|)
expr_stmt|;
name|QPoint
name|pt
init|=
name|mousePos
operator|-
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|60
argument_list|)
decl_stmt|;
name|QPoint
name|pt2
init|=
name|pt
operator|-
name|QPoint
argument_list|(
literal|30
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|QPoint
name|offs
argument_list|(
literal|30
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|p
operator|.
name|drawLine
argument_list|(
name|pt
argument_list|,
name|pt2
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawLine
argument_list|(
name|pt2
operator|-
name|offs
argument_list|,
name|pt2
operator|+
name|offs
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawText
argument_list|(
name|pt2
operator|-
name|offs
argument_list|,
literal|"mouse pos"
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPen
argument_list|(
name|QColor
argument_list|(
literal|50
argument_list|,
literal|130
argument_list|,
literal|70
argument_list|)
argument_list|)
expr_stmt|;
name|QPoint
name|cursorPos
init|=
name|mapFromGlobal
argument_list|(
name|QCursor
operator|::
name|pos
argument_list|()
argument_list|)
decl_stmt|;
name|pt
operator|=
name|cursorPos
operator|-
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|pt2
operator|=
name|pt
operator|+
name|QPoint
argument_list|(
literal|60
argument_list|,
operator|-
literal|20
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawEllipse
argument_list|(
name|cursorPos
argument_list|,
literal|60
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawLine
argument_list|(
name|pt
argument_list|,
name|pt2
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawLine
argument_list|(
name|pt2
operator|-
name|offs
argument_list|,
name|pt2
operator|+
name|offs
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawText
argument_list|(
name|pt2
operator|-
name|offs
argument_list|,
literal|"cursor pos"
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|mousePressEvent
name|void
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
name|moving
condition|)
return|return;
name|QRect
name|r1
init|=
name|getRect
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|QRect
name|r2
init|=
name|getRect
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|moving
operator|=
name|r1
operator|.
name|contains
argument_list|(
name|e
operator|->
name|pos
argument_list|()
argument_list|)
operator|||
name|r2
operator|.
name|contains
argument_list|(
name|e
operator|->
name|pos
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|moving
condition|)
return|return;
name|useCursorPos
operator|=
name|r1
operator|.
name|contains
argument_list|(
name|e
operator|->
name|pos
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|moveLabel
condition|)
name|moveLabel
operator|=
operator|new
name|QLabel
argument_list|(
name|this
argument_list|,
name|Qt
operator|::
name|BypassWindowManagerHint
operator||
name|Qt
operator|::
name|FramelessWindowHint
operator||
name|Qt
operator|::
name|Window
argument_list|)
expr_stmt|;
if|if
condition|(
name|useCursorPos
condition|)
name|moveLabel
operator|->
name|setText
argument_list|(
literal|"I'm following QCursor::pos()"
argument_list|)
expr_stmt|;
else|else
name|moveLabel
operator|->
name|setText
argument_list|(
literal|"I'm following QMouseEvent::globalPos()"
argument_list|)
expr_stmt|;
name|moveLabel
operator|->
name|adjustSize
argument_list|()
expr_stmt|;
name|mouseMoveEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|moveLabel
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
DECL|function|mouseReleaseEvent
name|void
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
parameter_list|)
block|{
if|if
condition|(
name|moveLabel
condition|)
name|moveLabel
operator|->
name|hide
argument_list|()
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
name|moving
operator|=
literal|false
expr_stmt|;
block|}
DECL|function|mouseMoveEvent
name|void
name|mouseMoveEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|moving
condition|)
return|return;
name|QPoint
name|pos
init|=
name|useCursorPos
condition|?
name|QCursor
operator|::
name|pos
argument_list|()
else|:
name|e
operator|->
name|globalPos
argument_list|()
decl_stmt|;
name|pos
operator|-=
name|moveLabel
operator|->
name|rect
argument_list|()
operator|.
name|center
argument_list|()
expr_stmt|;
name|moveLabel
operator|->
name|move
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|mousePos
operator|=
name|e
operator|->
name|pos
argument_list|()
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
private|private:
DECL|member|moveLabel
name|QLabel
modifier|*
name|moveLabel
decl_stmt|;
DECL|member|useCursorPos
name|bool
name|useCursorPos
decl_stmt|;
DECL|member|moving
name|bool
name|moving
decl_stmt|;
DECL|member|mousePos
name|QPoint
name|mousePos
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|ScreenDisplayer
class|class
name|ScreenDisplayer
super|:
specifier|public
name|QWidget
block|{
public|public:
DECL|function|ScreenDisplayer
name|ScreenDisplayer
parameter_list|()
member_init_list|:
name|QWidget
argument_list|()
member_init_list|,
name|moveLabel
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|scaleFactor
argument_list|(
literal|1.0
argument_list|)
block|{     }
DECL|function|timerEvent
name|void
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
parameter_list|)
block|{
name|update
argument_list|()
expr_stmt|;
block|}
DECL|function|mousePressEvent
name|void
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
parameter_list|)
block|{
if|if
condition|(
operator|!
name|moveLabel
condition|)
name|moveLabel
operator|=
operator|new
name|QLabel
argument_list|(
name|this
argument_list|,
name|Qt
operator|::
name|BypassWindowManagerHint
operator||
name|Qt
operator|::
name|FramelessWindowHint
operator||
name|Qt
operator|::
name|Window
argument_list|)
expr_stmt|;
name|moveLabel
operator|->
name|setText
argument_list|(
literal|"Hello, Qt this is a label\nwith some text"
argument_list|)
expr_stmt|;
name|moveLabel
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
DECL|function|mouseMoveEvent
name|void
name|mouseMoveEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
operator|!
name|moveLabel
condition|)
return|return;
name|moveLabel
operator|->
name|move
argument_list|(
name|e
operator|->
name|pos
argument_list|()
operator|/
name|scaleFactor
argument_list|)
expr_stmt|;
name|QString
name|str
decl_stmt|;
name|QDebug
name|dbg
argument_list|(
operator|&
name|str
argument_list|)
decl_stmt|;
name|dbg
operator|.
name|setAutoInsertSpaces
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|dbg
operator|<<
name|moveLabel
operator|->
name|geometry
argument_list|()
expr_stmt|;
name|moveLabel
operator|->
name|setText
argument_list|(
name|str
argument_list|)
expr_stmt|;
block|}
DECL|function|mouseReleaseEvent
name|void
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
parameter_list|)
block|{
if|if
condition|(
name|moveLabel
condition|)
name|moveLabel
operator|->
name|hide
argument_list|()
expr_stmt|;
block|}
DECL|function|showEvent
name|void
name|showEvent
parameter_list|(
name|QShowEvent
modifier|*
parameter_list|)
block|{
name|refreshTimer
operator|.
name|start
argument_list|(
literal|300
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|hideEvent
name|void
name|hideEvent
parameter_list|(
name|QHideEvent
modifier|*
parameter_list|)
block|{
name|refreshTimer
operator|.
name|stop
argument_list|()
expr_stmt|;
block|}
DECL|function|paintEvent
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
name|QPainter
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QRectF
name|total
decl_stmt|;
name|QList
argument_list|<
name|QScreen
modifier|*
argument_list|>
name|screens
init|=
name|qApp
operator|->
name|screens
argument_list|()
decl_stmt|;
foreach|foreach
control|(
name|QScreen
modifier|*
name|screen
decl|,
name|screens
control|)
block|{
name|total
operator||=
name|screen
operator|->
name|geometry
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|total
operator|.
name|isEmpty
argument_list|()
condition|)
return|return;
name|scaleFactor
operator|=
name|qMin
argument_list|(
name|width
argument_list|()
operator|/
name|total
operator|.
name|width
argument_list|()
argument_list|,
name|height
argument_list|()
operator|/
name|total
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
name|rect
argument_list|()
argument_list|,
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
name|p
operator|.
name|scale
argument_list|(
name|scaleFactor
argument_list|,
name|scaleFactor
argument_list|)
expr_stmt|;
name|p
operator|.
name|translate
argument_list|(
operator|-
name|total
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPen
argument_list|(
name|QPen
argument_list|(
name|Qt
operator|::
name|white
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setBrush
argument_list|(
name|Qt
operator|::
name|gray
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|QScreen
modifier|*
name|screen
decl|,
name|screens
control|)
block|{
name|p
operator|.
name|drawRect
argument_list|(
name|screen
operator|->
name|geometry
argument_list|()
argument_list|)
expr_stmt|;
name|QFont
name|f
init|=
name|font
argument_list|()
decl_stmt|;
name|f
operator|.
name|setPixelSize
argument_list|(
name|screen
operator|->
name|geometry
argument_list|()
operator|.
name|height
argument_list|()
operator|/
literal|8
argument_list|)
expr_stmt|;
name|p
operator|.
name|setFont
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawText
argument_list|(
name|screen
operator|->
name|geometry
argument_list|()
argument_list|,
name|Qt
operator|::
name|AlignCenter
argument_list|,
name|screen
operator|->
name|name
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|p
operator|.
name|setBrush
argument_list|(
name|QColor
argument_list|(
literal|200
argument_list|,
literal|220
argument_list|,
literal|255
argument_list|,
literal|127
argument_list|)
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|QWidget
modifier|*
name|widget
decl|,
name|QApplication
operator|::
name|topLevelWidgets
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|widget
operator|->
name|isHidden
argument_list|()
condition|)
name|p
operator|.
name|drawRect
argument_list|(
name|widget
operator|->
name|geometry
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QPolygon
name|cursorShape
decl_stmt|;
name|cursorShape
operator|<<
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
operator|<<
name|QPoint
argument_list|(
literal|20
argument_list|,
literal|60
argument_list|)
operator|<<
name|QPoint
argument_list|(
literal|30
argument_list|,
literal|50
argument_list|)
operator|<<
name|QPoint
argument_list|(
literal|60
argument_list|,
literal|80
argument_list|)
operator|<<
name|QPoint
argument_list|(
literal|80
argument_list|,
literal|60
argument_list|)
operator|<<
name|QPoint
argument_list|(
literal|50
argument_list|,
literal|30
argument_list|)
operator|<<
name|QPoint
argument_list|(
literal|60
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|cursorShape
operator|.
name|translate
argument_list|(
name|QCursor
operator|::
name|pos
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawPolygon
argument_list|(
name|cursorShape
argument_list|)
expr_stmt|;
block|}
private|private:
DECL|member|moveLabel
name|QLabel
modifier|*
name|moveLabel
decl_stmt|;
DECL|member|refreshTimer
name|QBasicTimer
name|refreshTimer
decl_stmt|;
DECL|member|scaleFactor
name|qreal
name|scaleFactor
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|PhysicalSizeTest
class|class
name|PhysicalSizeTest
super|:
specifier|public
name|QWidget
block|{
name|Q_OBJECT
public|public:
DECL|function|PhysicalSizeTest
name|PhysicalSizeTest
parameter_list|()
member_init_list|:
name|QWidget
argument_list|()
member_init_list|,
name|m_ignoreResize
argument_list|(
literal|false
argument_list|)
block|{}
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
name|event
parameter_list|)
function_decl|;
DECL|function|resizeEvent
name|void
name|resizeEvent
parameter_list|(
name|QResizeEvent
modifier|*
parameter_list|)
block|{
name|qreal
name|ppi
init|=
name|window
argument_list|()
operator|->
name|windowHandle
argument_list|()
operator|->
name|screen
argument_list|()
operator|->
name|physicalDotsPerInchX
argument_list|()
decl_stmt|;
name|QSizeF
name|s
init|=
name|size
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|m_ignoreResize
condition|)
name|m_physicalSize
operator|=
name|s
operator|/
name|ppi
expr_stmt|;
block|}
DECL|function|event
name|bool
name|event
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|ScreenChangeInternal
condition|)
block|{
comment|// we will get resize events when the scale factor changes
name|m_ignoreResize
operator|=
literal|true
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|100
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|handleScreenChange
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|QWidget
operator|::
name|event
argument_list|(
name|event
argument_list|)
return|;
block|}
public|public
name|slots
public|:
DECL|function|handleScreenChange
name|void
name|handleScreenChange
parameter_list|()
block|{
name|qreal
name|ppi
init|=
name|window
argument_list|()
operator|->
name|windowHandle
argument_list|()
operator|->
name|screen
argument_list|()
operator|->
name|physicalDotsPerInchX
argument_list|()
decl_stmt|;
name|QSizeF
name|newSize
init|=
name|m_physicalSize
operator|*
name|ppi
decl_stmt|;
name|resize
argument_list|(
name|newSize
operator|.
name|toSize
argument_list|()
argument_list|)
expr_stmt|;
name|m_ignoreResize
operator|=
literal|false
expr_stmt|;
block|}
private|private:
DECL|member|m_physicalSize
name|QSizeF
name|m_physicalSize
decl_stmt|;
DECL|member|m_ignoreResize
name|bool
name|m_ignoreResize
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|paintEvent
name|void
name|PhysicalSizeTest
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
name|QPainter
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|p
operator|.
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|Antialiasing
argument_list|)
expr_stmt|;
name|qreal
name|ppi
init|=
name|window
argument_list|()
operator|->
name|windowHandle
argument_list|()
operator|->
name|screen
argument_list|()
operator|->
name|physicalDotsPerInchX
argument_list|()
decl_stmt|;
name|qreal
name|ppmm
init|=
name|ppi
operator|/
literal|25.4
decl_stmt|;
name|qreal
name|h
init|=
literal|15
operator|*
name|ppmm
decl_stmt|;
name|QRectF
name|rulerRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|width
argument_list|()
argument_list|,
name|h
argument_list|)
decl_stmt|;
name|rulerRect
operator|.
name|moveCenter
argument_list|(
name|rect
argument_list|()
operator|.
name|center
argument_list|()
argument_list|)
expr_stmt|;
name|QFont
name|f
init|=
name|font
argument_list|()
decl_stmt|;
name|f
operator|.
name|setPixelSize
argument_list|(
literal|18
argument_list|)
expr_stmt|;
name|p
operator|.
name|setFont
argument_list|(
name|f
argument_list|)
expr_stmt|;
comment|// draw a rectangle in (Qt) pixel coordinates, for comparison
name|QRect
name|pixelRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|300
argument_list|,
literal|50
argument_list|)
decl_stmt|;
name|pixelRect
operator|.
name|moveTopLeft
argument_list|(
name|QPoint
argument_list|(
literal|5
operator|*
name|ppmm
argument_list|,
name|rulerRect
operator|.
name|bottom
argument_list|()
operator|+
literal|5
operator|*
name|ppmm
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
name|pixelRect
argument_list|,
name|QColor
argument_list|(
literal|199
argument_list|,
literal|222
argument_list|,
literal|255
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawText
argument_list|(
name|pixelRect
argument_list|,
literal|"This rectangle is 300x50 pixels"
argument_list|)
expr_stmt|;
name|f
operator|.
name|setPixelSize
argument_list|(
literal|4
operator|*
name|ppmm
argument_list|)
expr_stmt|;
name|p
operator|.
name|setFont
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|QRectF
name|topRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|width
argument_list|()
argument_list|,
name|rulerRect
operator|.
name|top
argument_list|()
argument_list|)
decl_stmt|;
name|p
operator|.
name|drawText
argument_list|(
name|topRect
argument_list|,
name|Qt
operator|::
name|AlignCenter
argument_list|,
literal|"The ruler is drawn in physical units.\nThis window tries to keep its physical size\nwhen moved between screens."
argument_list|)
expr_stmt|;
comment|// draw a ruler in real physical coordinates
name|p
operator|.
name|fillRect
argument_list|(
name|rulerRect
argument_list|,
name|QColor
argument_list|(
literal|255
argument_list|,
literal|222
argument_list|,
literal|111
argument_list|)
argument_list|)
expr_stmt|;
name|QPen
name|linePen
argument_list|(
name|Qt
operator|::
name|black
argument_list|,
literal|0.3
operator|*
name|ppmm
argument_list|)
decl_stmt|;
name|p
operator|.
name|setPen
argument_list|(
name|linePen
argument_list|)
expr_stmt|;
name|f
operator|.
name|setBold
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|p
operator|.
name|setFont
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|qreal
name|vCenter
init|=
name|rulerRect
operator|.
name|center
argument_list|()
operator|.
name|y
argument_list|()
decl_stmt|;
name|p
operator|.
name|drawLine
argument_list|(
literal|0
argument_list|,
name|vCenter
argument_list|,
name|width
argument_list|()
argument_list|,
name|vCenter
argument_list|)
expr_stmt|;
comment|// cm
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
condition|;
control|)
block|{
name|i
operator|++
expr_stmt|;
name|qreal
name|x
init|=
name|i
operator|*
name|ppmm
decl_stmt|;
if|if
condition|(
name|x
operator|>
name|width
argument_list|()
condition|)
break|break;
name|qreal
name|y
init|=
name|rulerRect
operator|.
name|bottom
argument_list|()
decl_stmt|;
name|qreal
name|len
decl_stmt|;
if|if
condition|(
name|i
operator|%
literal|5
condition|)
name|len
operator|=
literal|2
operator|*
name|ppmm
expr_stmt|;
elseif|else
if|if
condition|(
name|i
operator|%
literal|10
condition|)
name|len
operator|=
literal|3
operator|*
name|ppmm
expr_stmt|;
else|else
name|len
operator|=
name|h
operator|/
literal|2
expr_stmt|;
name|p
operator|.
name|drawLine
argument_list|(
name|QPointF
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|,
name|QPointF
argument_list|(
name|x
argument_list|,
name|y
operator|-
name|len
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|10
operator|==
literal|5
condition|)
block|{
name|QRectF
name|textR
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|5
operator|*
name|ppmm
argument_list|,
name|h
operator|/
literal|2
operator|-
literal|2
operator|*
name|ppmm
argument_list|)
decl_stmt|;
name|textR
operator|.
name|moveTopLeft
argument_list|(
name|QPointF
argument_list|(
name|x
argument_list|,
name|vCenter
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|n
init|=
name|i
operator|/
literal|10
operator|+
literal|1
decl_stmt|;
if|if
condition|(
name|n
operator|%
literal|10
operator|==
literal|0
condition|)
name|p
operator|.
name|setPen
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawText
argument_list|(
name|textR
argument_list|,
name|Qt
operator|::
name|AlignCenter
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|n
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPen
argument_list|(
name|linePen
argument_list|)
expr_stmt|;
block|}
block|}
comment|//inches
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
condition|;
control|)
block|{
name|i
operator|++
expr_stmt|;
name|qreal
name|x
init|=
name|i
operator|*
name|ppi
operator|/
literal|16
decl_stmt|;
if|if
condition|(
name|x
operator|>
name|width
argument_list|()
condition|)
break|break;
name|qreal
name|y
init|=
name|rulerRect
operator|.
name|top
argument_list|()
decl_stmt|;
name|qreal
name|d
init|=
name|h
operator|/
literal|10
decl_stmt|;
name|qreal
name|len
decl_stmt|;
if|if
condition|(
name|i
operator|%
literal|2
condition|)
name|len
operator|=
literal|1
operator|*
name|d
expr_stmt|;
elseif|else
if|if
condition|(
name|i
operator|%
literal|4
condition|)
name|len
operator|=
literal|2
operator|*
name|d
expr_stmt|;
elseif|else
if|if
condition|(
name|i
operator|%
literal|8
condition|)
name|len
operator|=
literal|3
operator|*
name|d
expr_stmt|;
elseif|else
if|if
condition|(
name|i
operator|%
literal|16
condition|)
name|len
operator|=
literal|4
operator|*
name|d
expr_stmt|;
else|else
name|len
operator|=
name|h
operator|/
literal|2
expr_stmt|;
name|p
operator|.
name|drawLine
argument_list|(
name|QPointF
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|,
name|QPointF
argument_list|(
name|x
argument_list|,
name|y
operator|+
name|len
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|16
operator|==
literal|12
condition|)
block|{
name|QRectF
name|textR
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0.25
operator|*
name|ppi
argument_list|,
name|h
operator|/
literal|2
operator|-
literal|2
operator|*
name|d
argument_list|)
decl_stmt|;
name|textR
operator|.
name|moveBottomLeft
argument_list|(
name|QPointF
argument_list|(
name|x
argument_list|,
name|vCenter
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawText
argument_list|(
name|textR
argument_list|,
name|Qt
operator|::
name|AlignCenter
argument_list|,
name|QString
operator|::
name|number
argument_list|(
literal|1
operator|+
name|i
operator|/
literal|16
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
modifier|*
name|argv
parameter_list|)
block|{
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|QCoreApplication
operator|::
name|setAttribute
argument_list|(
name|Qt
operator|::
name|AA_UseHighDpiPixmaps
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|setApplicationVersion
argument_list|(
name|QT_VERSION_STR
argument_list|)
expr_stmt|;
name|int
name|argumentCount
init|=
name|QCoreApplication
operator|::
name|arguments
argument_list|()
operator|.
name|count
argument_list|()
decl_stmt|;
name|QCommandLineParser
name|parser
decl_stmt|;
name|parser
operator|.
name|setApplicationDescription
argument_list|(
literal|"High DPI tester. Pass one or more of the options to\n"
literal|"test various high-dpi aspects. \n"
literal|"--interactive is a special option and opens a configuration"
literal|" window."
argument_list|)
expr_stmt|;
name|parser
operator|.
name|addHelpOption
argument_list|()
expr_stmt|;
name|parser
operator|.
name|addVersionOption
argument_list|()
expr_stmt|;
name|QCommandLineOption
name|controllerOption
argument_list|(
literal|"interactive"
argument_list|,
literal|"Show configuration window."
argument_list|)
decl_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|controllerOption
argument_list|)
expr_stmt|;
name|DemoContainerList
name|demoList
decl_stmt|;
name|demoList
operator|<<
operator|new
name|DemoContainer
argument_list|<
name|PixmapPainter
argument_list|>
argument_list|(
literal|"pixmap"
argument_list|,
literal|"Test pixmap painter"
argument_list|)
expr_stmt|;
name|demoList
operator|<<
operator|new
name|DemoContainer
argument_list|<
name|Labels
argument_list|>
argument_list|(
literal|"label"
argument_list|,
literal|"Test Labels"
argument_list|)
expr_stmt|;
name|demoList
operator|<<
operator|new
name|DemoContainer
argument_list|<
name|MainWindow
argument_list|>
argument_list|(
literal|"mainwindow"
argument_list|,
literal|"Test QMainWindow"
argument_list|)
expr_stmt|;
name|demoList
operator|<<
operator|new
name|DemoContainer
argument_list|<
name|StandardIcons
argument_list|>
argument_list|(
literal|"standard-icons"
argument_list|,
literal|"Test standard icons"
argument_list|)
expr_stmt|;
name|demoList
operator|<<
operator|new
name|DemoContainer
argument_list|<
name|Caching
argument_list|>
argument_list|(
literal|"caching"
argument_list|,
literal|"Test caching"
argument_list|)
expr_stmt|;
name|demoList
operator|<<
operator|new
name|DemoContainer
argument_list|<
name|Style
argument_list|>
argument_list|(
literal|"styles"
argument_list|,
literal|"Test style"
argument_list|)
expr_stmt|;
name|demoList
operator|<<
operator|new
name|DemoContainer
argument_list|<
name|Fonts
argument_list|>
argument_list|(
literal|"fonts"
argument_list|,
literal|"Test fonts"
argument_list|)
expr_stmt|;
name|demoList
operator|<<
operator|new
name|DemoContainer
argument_list|<
name|IconDrawing
argument_list|>
argument_list|(
literal|"icondrawing"
argument_list|,
literal|"Test icon drawing"
argument_list|)
expr_stmt|;
name|demoList
operator|<<
operator|new
name|DemoContainer
argument_list|<
name|Buttons
argument_list|>
argument_list|(
literal|"buttons"
argument_list|,
literal|"Test buttons"
argument_list|)
expr_stmt|;
name|demoList
operator|<<
operator|new
name|DemoContainer
argument_list|<
name|LinePainter
argument_list|>
argument_list|(
literal|"linepainter"
argument_list|,
literal|"Test line painting"
argument_list|)
expr_stmt|;
name|demoList
operator|<<
operator|new
name|DemoContainer
argument_list|<
name|DragWidget
argument_list|>
argument_list|(
literal|"draganddrop"
argument_list|,
literal|"Test drag and drop"
argument_list|)
expr_stmt|;
name|demoList
operator|<<
operator|new
name|DemoContainer
argument_list|<
name|CursorTester
argument_list|>
argument_list|(
literal|"cursorpos"
argument_list|,
literal|"Test cursor and window positioning"
argument_list|)
expr_stmt|;
name|demoList
operator|<<
operator|new
name|DemoContainer
argument_list|<
name|ScreenDisplayer
argument_list|>
argument_list|(
literal|"screens"
argument_list|,
literal|"Test screen and window positioning"
argument_list|)
expr_stmt|;
name|demoList
operator|<<
operator|new
name|DemoContainer
argument_list|<
name|PhysicalSizeTest
argument_list|>
argument_list|(
literal|"physicalsize"
argument_list|,
literal|"Test manual highdpi support using physicalDotsPerInch"
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|DemoContainerBase
modifier|*
name|demo
decl|,
name|demoList
control|)
name|parser
operator|.
name|addOption
argument_list|(
name|demo
operator|->
name|option
argument_list|()
argument_list|)
expr_stmt|;
name|parser
operator|.
name|process
argument_list|(
name|app
argument_list|)
expr_stmt|;
comment|//controller takes ownership of all demos
name|DemoController
name|controller
argument_list|(
operator|&
name|demoList
argument_list|,
operator|&
name|parser
argument_list|)
decl_stmt|;
if|if
condition|(
name|parser
operator|.
name|isSet
argument_list|(
name|controllerOption
argument_list|)
operator|||
name|argumentCount
operator|<=
literal|1
condition|)
name|controller
operator|.
name|show
argument_list|()
expr_stmt|;
if|if
condition|(
name|QApplication
operator|::
name|topLevelWidgets
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|parser
operator|.
name|showHelp
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
name|app
operator|.
name|exec
argument_list|()
return|;
block|}
end_function
begin_include
include|#
directive|include
file|"main.moc"
end_include
end_unit
