begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Digia Plc and its Subsidiary(-ies) nor the names **     of its contributors may be used to endorse or promote products derived **     from this software without specific prior written permission. ** ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtGui>
end_include
begin_include
include|#
directive|include
file|<QtWidgets>
end_include
begin_class
DECL|class|GLWindow
class|class
name|GLWindow
super|:
specifier|public
name|QWindow
block|{
public|public:
DECL|function|GLWindow
name|GLWindow
parameter_list|(
name|Qt
operator|::
name|WindowFlags
name|flags
parameter_list|)
member_init_list|:
name|gl
argument_list|(
literal|0
argument_list|)
block|{
name|setFlags
argument_list|(
name|flags
argument_list|)
expr_stmt|;
name|setSurfaceType
argument_list|(
name|OpenGLSurface
argument_list|)
expr_stmt|;
name|QSurfaceFormat
name|format
decl_stmt|;
name|format
operator|.
name|setAlphaBufferSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|format
operator|.
name|setSamples
argument_list|(
literal|16
argument_list|)
expr_stmt|;
name|setFormat
argument_list|(
name|format
argument_list|)
expr_stmt|;
block|}
DECL|function|exposeEvent
name|void
name|exposeEvent
parameter_list|(
name|QExposeEvent
modifier|*
parameter_list|)
block|{
if|if
condition|(
operator|!
name|isExposed
argument_list|()
condition|)
return|return;
if|if
condition|(
operator|!
name|gl
condition|)
block|{
name|gl
operator|=
operator|new
name|QOpenGLContext
argument_list|()
expr_stmt|;
name|gl
operator|->
name|setFormat
argument_list|(
name|requestedFormat
argument_list|()
argument_list|)
expr_stmt|;
name|gl
operator|->
name|create
argument_list|()
expr_stmt|;
block|}
name|gl
operator|->
name|makeCurrent
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|QOpenGLShaderProgram
name|prog
decl_stmt|;
name|prog
operator|.
name|addShaderFromSourceCode
argument_list|(
name|QOpenGLShader
operator|::
name|Vertex
argument_list|,
literal|"attribute highp vec4 a_Pos;"
literal|"attribute lowp vec4 a_Color;"
literal|"varying lowp vec4 v_Color;"
literal|"void main() {"
literal|"    gl_Position = a_Pos;"
literal|"    v_Color = a_Color;"
literal|"}"
argument_list|)
expr_stmt|;
name|prog
operator|.
name|addShaderFromSourceCode
argument_list|(
name|QOpenGLShader
operator|::
name|Fragment
argument_list|,
literal|"varying lowp vec4 v_Color;"
literal|"void main() {"
literal|"    gl_FragColor = v_Color;"
literal|"}"
argument_list|)
expr_stmt|;
name|prog
operator|.
name|bind
argument_list|()
expr_stmt|;
name|glClearColor
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|glClear
argument_list|(
name|GL_COLOR_BUFFER_BIT
argument_list|)
expr_stmt|;
name|glViewport
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|width
argument_list|()
argument_list|,
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|prog
operator|.
name|enableAttributeArray
argument_list|(
literal|"a_Pos"
argument_list|)
expr_stmt|;
name|prog
operator|.
name|enableAttributeArray
argument_list|(
literal|"a_Color"
argument_list|)
expr_stmt|;
name|float
name|coords
index|[]
init|=
block|{
operator|-
literal|0.7f
block|,
literal|0.7f
block|,
literal|0.8f
block|,
literal|0.8f
block|,
operator|-
literal|0.8f
block|,
operator|-
literal|0.8f
block|,
literal|0.7f
block|,
operator|-
literal|0.7f
block|}
decl_stmt|;
name|float
name|colors
index|[]
init|=
block|{
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|1
block|,
literal|1
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|,
literal|0
block|}
decl_stmt|;
name|prog
operator|.
name|setAttributeArray
argument_list|(
literal|"a_Pos"
argument_list|,
name|GL_FLOAT
argument_list|,
name|coords
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|prog
operator|.
name|setAttributeArray
argument_list|(
literal|"a_Color"
argument_list|,
name|GL_FLOAT
argument_list|,
name|colors
argument_list|,
literal|4
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|glDrawArrays
argument_list|(
name|GL_TRIANGLE_STRIP
argument_list|,
literal|0
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|prog
operator|.
name|disableAttributeArray
argument_list|(
literal|"a_Pos"
argument_list|)
expr_stmt|;
name|prog
operator|.
name|disableAttributeArray
argument_list|(
literal|"a_Color"
argument_list|)
expr_stmt|;
name|gl
operator|->
name|swapBuffers
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|mousePressEvent
name|void
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
parameter_list|)
block|{
name|QCoreApplication
operator|::
name|quit
argument_list|()
expr_stmt|;
block|}
private|private:
DECL|member|gl
name|QOpenGLContext
modifier|*
name|gl
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|Widget
class|class
name|Widget
super|:
specifier|public
name|QWidget
block|{
public|public:
DECL|function|Widget
name|Widget
parameter_list|(
name|Qt
operator|::
name|WindowFlags
name|flags
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
literal|0
argument_list|,
name|flags
argument_list|)
block|{
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_TranslucentBackground
argument_list|)
expr_stmt|;
block|}
DECL|function|paintEvent
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
name|QPainter
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|p
operator|.
name|setRenderHint
argument_list|(
name|QPainter
operator|::
name|Antialiasing
argument_list|)
expr_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
name|rect
argument_list|()
argument_list|,
name|QColor
argument_list|(
literal|"steelblue"
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|w
init|=
name|width
argument_list|()
decl_stmt|;
name|int
name|h
init|=
name|height
argument_list|()
decl_stmt|;
name|int
name|w2
init|=
name|width
argument_list|()
operator|/
literal|2
decl_stmt|;
name|int
name|h2
init|=
name|height
argument_list|()
operator|/
literal|2
decl_stmt|;
name|QPainterPath
name|path
decl_stmt|;
name|path
operator|.
name|moveTo
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|path
operator|.
name|cubicTo
argument_list|(
name|w2
argument_list|,
literal|0
argument_list|,
name|w2
argument_list|,
name|h2
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
expr_stmt|;
name|path
operator|.
name|cubicTo
argument_list|(
name|w2
argument_list|,
name|h
argument_list|,
name|w2
argument_list|,
name|h2
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QLinearGradient
name|lg
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|w
argument_list|,
name|h
argument_list|)
decl_stmt|;
name|lg
operator|.
name|setColorAt
argument_list|(
literal|0.0
argument_list|,
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|lg
operator|.
name|setColorAt
argument_list|(
literal|0.5
argument_list|,
name|QColor
argument_list|(
literal|"palegreen"
argument_list|)
argument_list|)
expr_stmt|;
name|lg
operator|.
name|setColorAt
argument_list|(
literal|1.0
argument_list|,
name|Qt
operator|::
name|transparent
argument_list|)
expr_stmt|;
name|p
operator|.
name|setCompositionMode
argument_list|(
name|QPainter
operator|::
name|CompositionMode_Source
argument_list|)
expr_stmt|;
name|p
operator|.
name|fillPath
argument_list|(
name|path
argument_list|,
name|lg
argument_list|)
expr_stmt|;
block|}
DECL|function|mousePressEvent
name|void
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
parameter_list|)
block|{
name|QCoreApplication
operator|::
name|quit
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
modifier|*
name|argv
parameter_list|)
block|{
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
comment|// mask: on/off
comment|// opacity: on/off
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
operator|++
name|i
control|)
block|{
name|bool
name|mask
init|=
name|i
operator|&
literal|0x1
decl_stmt|;
name|bool
name|opacity
init|=
name|i
operator|&
literal|0x2
decl_stmt|;
name|Qt
operator|::
name|WindowFlags
name|flags
init|=
name|Qt
operator|::
name|FramelessWindowHint
decl_stmt|;
name|Widget
modifier|*
name|widget
init|=
operator|new
name|Widget
argument_list|(
name|flags
argument_list|)
decl_stmt|;
name|GLWindow
modifier|*
name|window
init|=
operator|new
name|GLWindow
argument_list|(
name|flags
argument_list|)
decl_stmt|;
name|widget
operator|->
name|setGeometry
argument_list|(
literal|100
operator|+
literal|100
operator|*
name|i
argument_list|,
literal|100
argument_list|,
literal|80
argument_list|,
literal|80
argument_list|)
expr_stmt|;
name|window
operator|->
name|setGeometry
argument_list|(
literal|100
operator|+
literal|100
operator|*
name|i
argument_list|,
literal|200
argument_list|,
literal|80
argument_list|,
literal|80
argument_list|)
expr_stmt|;
if|if
condition|(
name|mask
condition|)
block|{
name|QRegion
name|region
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|80
argument_list|,
literal|80
argument_list|,
name|QRegion
operator|::
name|Ellipse
argument_list|)
decl_stmt|;
name|widget
operator|->
name|setMask
argument_list|(
name|region
argument_list|)
expr_stmt|;
name|window
operator|->
name|setMask
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|opacity
condition|)
block|{
name|widget
operator|->
name|setWindowOpacity
argument_list|(
literal|0.5
argument_list|)
expr_stmt|;
name|window
operator|->
name|setOpacity
argument_list|(
literal|0.5
argument_list|)
expr_stmt|;
block|}
name|widget
operator|->
name|show
argument_list|()
expr_stmt|;
name|window
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
return|return
name|app
operator|.
name|exec
argument_list|()
return|;
block|}
end_function
end_unit
