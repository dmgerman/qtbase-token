begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QAction>
end_include
begin_include
include|#
directive|include
file|<QApplication>
end_include
begin_include
include|#
directive|include
file|<QDesktopWidget>
end_include
begin_include
include|#
directive|include
file|<QGridLayout>
end_include
begin_include
include|#
directive|include
file|<QLabel>
end_include
begin_include
include|#
directive|include
file|<QMainWindow>
end_include
begin_include
include|#
directive|include
file|<QMenu>
end_include
begin_include
include|#
directive|include
file|<QMenuBar>
end_include
begin_include
include|#
directive|include
file|<QSharedPointer>
end_include
begin_include
include|#
directive|include
file|<QToolBar>
end_include
begin_include
include|#
directive|include
file|<QBitmap>
end_include
begin_include
include|#
directive|include
file|<QCursor>
end_include
begin_include
include|#
directive|include
file|<QDrag>
end_include
begin_include
include|#
directive|include
file|<QPainter>
end_include
begin_include
include|#
directive|include
file|<QPixmap>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<QMimeData>
end_include
begin_include
include|#
directive|include
file|<QStringList>
end_include
begin_include
include|#
directive|include
file|<QTextStream>
end_include
begin_if
if|#
directive|if
name|QT_VERSION
operator|>
literal|0x050000
end_if
begin_include
include|#
directive|include
file|<QScreen>
end_include
begin_include
include|#
directive|include
file|<QWindow>
end_include
begin_include
include|#
directive|include
file|<private/qhighdpiscaling_p.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformwindow.h>
end_include
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|Q_NULLPTR
define|#
directive|define
name|Q_NULLPTR
value|0
end_define
begin_define
DECL|macro|Q_DECL_OVERRIDE
define|#
directive|define
name|Q_DECL_OVERRIDE
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WIN
end_ifdef
begin_include
include|#
directive|include
file|<qt_windows.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_include
include|#
directive|include
file|<iterator>
end_include
begin_if
if|#
directive|if
name|QT_VERSION
operator|<
literal|0x050000
end_if
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|d
parameter_list|,
specifier|const
name|QPixmap
modifier|&
name|p
parameter_list|)
block|{
name|d
operator|.
name|nospace
argument_list|()
operator|<<
literal|"QPixmap("
operator|<<
name|p
operator|.
name|size
argument_list|()
operator|<<
literal|')'
expr_stmt|;
return|return
name|d
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Qt 4
end_comment
begin_comment
comment|// High DPI cursor test for testing cursor sizes in multi-screen setups.
end_comment
begin_comment
comment|// It creates one widget per screen with a grid of standard cursors,
end_comment
begin_comment
comment|// pixmap / bitmap cursors and pixmap / bitmap cursors with device pixel ratio 2.
end_comment
begin_comment
comment|// On the left, there is a ruler with 10 DIP marks.
end_comment
begin_comment
comment|// The code is meant to compile with Qt 4 also.
end_comment
begin_function
DECL|function|screenInfo
specifier|static
name|QString
name|screenInfo
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
name|QString
name|result
decl_stmt|;
name|QTextStream
name|str
argument_list|(
operator|&
name|result
argument_list|)
decl_stmt|;
if|#
directive|if
name|QT_VERSION
operator|>
literal|0x050000
name|QScreen
modifier|*
name|screen
init|=
name|Q_NULLPTR
decl_stmt|;
if|if
condition|(
specifier|const
name|QWindow
modifier|*
name|window
init|=
name|w
operator|->
name|windowHandle
argument_list|()
condition|)
name|screen
operator|=
name|window
operator|->
name|screen
argument_list|()
expr_stmt|;
if|if
condition|(
name|screen
condition|)
block|{
name|str
operator|<<
literal|'"'
operator|<<
name|screen
operator|->
name|name
argument_list|()
operator|<<
literal|"\" "
operator|<<
name|screen
operator|->
name|size
argument_list|()
operator|.
name|width
argument_list|()
operator|<<
literal|'x'
operator|<<
name|screen
operator|->
name|size
argument_list|()
operator|.
name|height
argument_list|()
operator|<<
literal|", DPR="
operator|<<
name|screen
operator|->
name|devicePixelRatio
argument_list|()
operator|<<
literal|", "
operator|<<
name|screen
operator|->
name|logicalDotsPerInchX
argument_list|()
operator|<<
literal|"DPI "
expr_stmt|;
if|if
condition|(
name|QHighDpiScaling
operator|::
name|isActive
argument_list|()
condition|)
name|str
operator|<<
literal|", factor="
operator|<<
name|QHighDpiScaling
operator|::
name|factor
argument_list|(
name|screen
argument_list|)
expr_stmt|;
else|else
name|str
operator|<<
literal|", no scaling"
expr_stmt|;
block|}
else|else
block|{
name|str
operator|<<
literal|"<null>"
expr_stmt|;
block|}
else|#
directive|else
name|QDesktopWidget
modifier|*
name|desktop
init|=
name|QApplication
operator|::
name|desktop
argument_list|()
decl_stmt|;
name|int
name|screenNumber
init|=
name|desktop
operator|->
name|screenNumber
argument_list|(
name|w
argument_list|)
decl_stmt|;
name|str
operator|<<
literal|"Screen #"
operator|<<
name|screenNumber
operator|<<
literal|' '
operator|<<
name|desktop
operator|->
name|screenGeometry
argument_list|(
name|screenNumber
argument_list|)
operator|.
name|width
argument_list|()
operator|<<
literal|'x'
operator|<<
name|desktop
operator|->
name|screenGeometry
argument_list|(
name|screenNumber
argument_list|)
operator|.
name|height
argument_list|()
operator|<<
literal|" PD: "
operator|<<
name|w
operator|->
name|logicalDpiX
argument_list|()
operator|<<
literal|"DPI"
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|str
operator|<<
literal|", SM_C_CURSOR: "
operator|<<
name|GetSystemMetrics
argument_list|(
name|SM_CXCURSOR
argument_list|)
operator|<<
literal|'x'
operator|<<
name|GetSystemMetrics
argument_list|(
name|SM_CYCURSOR
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|// Helpers for painting pixmaps and creating cursors
end_comment
begin_function
DECL|function|paintPixmap
specifier|static
name|QPixmap
name|paintPixmap
parameter_list|(
name|int
name|size
parameter_list|,
name|QColor
name|c
parameter_list|)
block|{
name|QPixmap
name|result
argument_list|(
name|size
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|result
operator|.
name|fill
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|QPainter
name|p
argument_list|(
operator|&
name|result
argument_list|)
decl_stmt|;
name|p
operator|.
name|drawRect
argument_list|(
name|QRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|result
operator|.
name|size
argument_list|()
operator|-
name|QSize
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawLine
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|size
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawLine
argument_list|(
literal|0
argument_list|,
name|size
argument_list|,
name|size
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|pixmapCursor
specifier|static
name|QCursor
name|pixmapCursor
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|QCursor
name|result
argument_list|(
name|paintPixmap
argument_list|(
name|size
argument_list|,
name|Qt
operator|::
name|red
argument_list|)
argument_list|,
name|size
operator|/
literal|2
argument_list|,
name|size
operator|/
literal|2
argument_list|)
decl_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|paintBitmaps
specifier|static
name|QPair
argument_list|<
name|QBitmap
argument_list|,
name|QBitmap
argument_list|>
name|paintBitmaps
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|QBitmap
name|bitmap
argument_list|(
name|size
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|bitmap
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|color1
argument_list|)
expr_stmt|;
name|QBitmap
name|mask
argument_list|(
name|size
argument_list|,
name|size
argument_list|)
decl_stmt|;
name|mask
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|color1
argument_list|)
expr_stmt|;
block|{
name|QPainter
name|mp
argument_list|(
operator|&
name|mask
argument_list|)
decl_stmt|;
name|mp
operator|.
name|fillRect
argument_list|(
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|size
operator|/
literal|2
argument_list|,
name|size
operator|/
literal|2
argument_list|)
argument_list|,
name|Qt
operator|::
name|color0
argument_list|)
expr_stmt|;
block|}
return|return
name|QPair
argument_list|<
name|QBitmap
argument_list|,
name|QBitmap
argument_list|>
argument_list|(
name|bitmap
argument_list|,
name|mask
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|bitmapCursor
specifier|static
name|QCursor
name|bitmapCursor
parameter_list|(
name|int
name|size
parameter_list|)
block|{
name|QPair
argument_list|<
name|QBitmap
argument_list|,
name|QBitmap
argument_list|>
name|bitmaps
init|=
name|paintBitmaps
argument_list|(
name|size
argument_list|)
decl_stmt|;
return|return
name|QCursor
argument_list|(
name|bitmaps
operator|.
name|first
argument_list|,
name|bitmaps
operator|.
name|second
argument_list|,
name|size
operator|/
literal|2
argument_list|,
name|size
operator|/
literal|2
argument_list|)
return|;
block|}
end_function
begin_if
if|#
directive|if
name|QT_VERSION
operator|>
literal|0x050000
end_if
begin_function
DECL|function|pixmapCursorDevicePixelRatio
specifier|static
name|QCursor
name|pixmapCursorDevicePixelRatio
parameter_list|(
name|int
name|size
parameter_list|,
name|int
name|dpr
parameter_list|)
block|{
name|QPixmap
name|pixmap
init|=
name|paintPixmap
argument_list|(
name|dpr
operator|*
name|size
argument_list|,
name|Qt
operator|::
name|yellow
argument_list|)
decl_stmt|;
name|pixmap
operator|.
name|setDevicePixelRatio
argument_list|(
name|dpr
argument_list|)
expr_stmt|;
return|return
name|QCursor
argument_list|(
name|pixmap
argument_list|,
name|size
operator|/
literal|2
argument_list|,
name|size
operator|/
literal|2
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|bitmapCursorDevicePixelRatio
specifier|static
name|QCursor
name|bitmapCursorDevicePixelRatio
parameter_list|(
name|int
name|size
parameter_list|,
name|int
name|dpr
parameter_list|)
block|{
name|QPair
argument_list|<
name|QBitmap
argument_list|,
name|QBitmap
argument_list|>
name|bitmaps
init|=
name|paintBitmaps
argument_list|(
name|dpr
operator|*
name|size
argument_list|)
decl_stmt|;
name|bitmaps
operator|.
name|first
operator|.
name|setDevicePixelRatio
argument_list|(
name|dpr
argument_list|)
expr_stmt|;
name|bitmaps
operator|.
name|second
operator|.
name|setDevicePixelRatio
argument_list|(
name|dpr
argument_list|)
expr_stmt|;
return|return
name|QCursor
argument_list|(
name|bitmaps
operator|.
name|first
argument_list|,
name|bitmaps
operator|.
name|second
argument_list|,
name|size
operator|/
literal|2
argument_list|,
name|size
operator|/
literal|2
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Qt 5
end_comment
begin_comment
comment|// A label from which a pixmap can be dragged for testing drag with pixmaps/DPR.
end_comment
begin_class
DECL|class|DraggableLabel
class|class
name|DraggableLabel
super|:
specifier|public
name|QLabel
block|{
public|public:
DECL|function|DraggableLabel
specifier|explicit
name|DraggableLabel
parameter_list|(
specifier|const
name|QPixmap
modifier|&
name|p
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|,
name|QWidget
modifier|*
name|parent
init|=
name|Q_NULLPTR
parameter_list|)
member_init_list|:
name|QLabel
argument_list|(
name|text
argument_list|,
name|parent
argument_list|)
member_init_list|,
name|m_pixmap
argument_list|(
name|p
argument_list|)
block|{
name|setToolTip
argument_list|(
name|QLatin1String
argument_list|(
literal|"Click to drag away the pixmap. Press Shift to set a circular mask."
argument_list|)
argument_list|)
expr_stmt|;
block|}
protected|protected:
DECL|member|Q_DECL_OVERRIDE
name|void
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
name|Q_DECL_OVERRIDE
function_decl|;
private|private:
DECL|member|m_pixmap
specifier|const
name|QPixmap
name|m_pixmap
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|mousePressEvent
name|void
name|DraggableLabel
operator|::
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
parameter_list|)
block|{
name|QMimeData
modifier|*
name|mimeData
init|=
operator|new
name|QMimeData
decl_stmt|;
name|mimeData
operator|->
name|setImageData
argument_list|(
name|qVariantFromValue
argument_list|(
name|m_pixmap
argument_list|)
argument_list|)
expr_stmt|;
name|QDrag
modifier|*
name|drag
init|=
operator|new
name|QDrag
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QPixmap
name|pixmap
init|=
name|m_pixmap
decl_stmt|;
if|if
condition|(
name|QApplication
operator|::
name|keyboardModifiers
argument_list|()
operator|&
name|Qt
operator|::
name|ShiftModifier
condition|)
block|{
name|QBitmap
name|mask
argument_list|(
name|pixmap
operator|.
name|width
argument_list|()
argument_list|,
name|pixmap
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
name|mask
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QPainter
name|painter
argument_list|(
operator|&
name|mask
argument_list|)
decl_stmt|;
name|painter
operator|.
name|setBrush
argument_list|(
name|Qt
operator|::
name|color1
argument_list|)
expr_stmt|;
specifier|const
name|int
name|hx
init|=
name|pixmap
operator|.
name|width
argument_list|()
operator|/
literal|2
decl_stmt|;
specifier|const
name|int
name|hy
init|=
name|pixmap
operator|.
name|width
argument_list|()
operator|/
literal|2
decl_stmt|;
name|painter
operator|.
name|drawEllipse
argument_list|(
name|QPoint
argument_list|(
name|hx
argument_list|,
name|hy
argument_list|)
argument_list|,
name|hx
argument_list|,
name|hy
argument_list|)
expr_stmt|;
name|pixmap
operator|.
name|setMask
argument_list|(
name|mask
argument_list|)
expr_stmt|;
block|}
name|drag
operator|->
name|setMimeData
argument_list|(
name|mimeData
argument_list|)
expr_stmt|;
name|drag
operator|->
name|setPixmap
argument_list|(
name|pixmap
argument_list|)
expr_stmt|;
name|QPoint
name|sizeP
init|=
name|QPoint
argument_list|(
name|m_pixmap
operator|.
name|width
argument_list|()
argument_list|,
name|m_pixmap
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
if|#
directive|if
name|QT_VERSION
operator|>
literal|0x050000
name|sizeP
operator|/=
name|int
argument_list|(
name|m_pixmap
operator|.
name|devicePixelRatio
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Qt 5
name|drag
operator|->
name|setHotSpot
argument_list|(
name|sizeP
operator|/
literal|2
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Dragging:"
operator|<<
name|m_pixmap
expr_stmt|;
name|drag
operator|->
name|exec
argument_list|(
name|Qt
operator|::
name|CopyAction
operator||
name|Qt
operator|::
name|MoveAction
argument_list|,
name|Qt
operator|::
name|CopyAction
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Vertical ruler widget with 10 px marks
end_comment
begin_class
DECL|class|VerticalRuler
class|class
name|VerticalRuler
super|:
specifier|public
name|QWidget
block|{
public|public:
name|VerticalRuler
parameter_list|(
name|QWidget
modifier|*
name|parent
init|=
name|Q_NULLPTR
parameter_list|)
constructor_decl|;
protected|protected:
DECL|member|Q_DECL_OVERRIDE
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
name|Q_DECL_OVERRIDE
function_decl|;
block|}
class|;
end_class
begin_constructor
DECL|function|VerticalRuler
name|VerticalRuler
operator|::
name|VerticalRuler
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
block|{
specifier|const
name|int
name|screenWidth
init|=
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|screenGeometry
argument_list|(
name|this
argument_list|)
operator|.
name|width
argument_list|()
decl_stmt|;
name|setFixedWidth
argument_list|(
name|screenWidth
operator|/
literal|48
argument_list|)
expr_stmt|;
comment|// 1920 pixel monitor ->40
block|}
end_constructor
begin_function
DECL|function|paintEvent
name|void
name|VerticalRuler
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
specifier|const
name|QSize
name|sizeS
argument_list|(
name|size
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QPoint
name|sizeP
argument_list|(
name|sizeS
operator|.
name|width
argument_list|()
argument_list|,
name|sizeS
operator|.
name|height
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QPoint
name|center
init|=
name|sizeP
operator|/
literal|2
decl_stmt|;
name|QPainter
name|painter
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|painter
operator|.
name|fillRect
argument_list|(
name|QRect
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|sizeS
argument_list|)
argument_list|,
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|painter
operator|.
name|drawLine
argument_list|(
name|center
operator|.
name|x
argument_list|()
argument_list|,
literal|0
argument_list|,
name|center
operator|.
name|x
argument_list|()
argument_list|,
name|sizeP
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|sizeP
operator|.
name|y
argument_list|()
condition|;
name|y
operator|+=
literal|10
control|)
name|painter
operator|.
name|drawLine
argument_list|(
name|center
operator|.
name|x
argument_list|()
operator|-
literal|5
argument_list|,
name|y
argument_list|,
name|center
operator|.
name|x
argument_list|()
operator|+
literal|5
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|MainWindow
class|class
name|MainWindow
super|:
specifier|public
name|QMainWindow
block|{
name|Q_OBJECT
public|public:
specifier|explicit
name|MainWindow
parameter_list|(
name|QWidget
modifier|*
name|parent
init|=
name|Q_NULLPTR
parameter_list|)
constructor_decl|;
DECL|function|updateScreenInfo
name|void
name|updateScreenInfo
parameter_list|()
block|{
name|m_screenInfoLabel
operator|->
name|setText
argument_list|(
name|screenInfo
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
public|public
name|slots
public|:
DECL|function|screenChanged
name|void
name|screenChanged
parameter_list|()
block|{
name|updateScreenInfo
argument_list|()
expr_stmt|;
block|}
private|private:
DECL|member|m_screenInfoLabel
name|QLabel
modifier|*
name|m_screenInfoLabel
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|createCursorLabel
specifier|static
name|QLabel
modifier|*
name|createCursorLabel
parameter_list|(
specifier|const
name|QCursor
modifier|&
name|cursor
parameter_list|,
specifier|const
name|QString
modifier|&
name|additionalText
init|=
name|QString
argument_list|()
parameter_list|)
block|{
name|QString
name|labelText
decl_stmt|;
name|QDebug
argument_list|(
operator|&
name|labelText
argument_list|)
operator|.
name|nospace
argument_list|()
operator|<<
name|cursor
operator|.
name|shape
argument_list|()
expr_stmt|;
if|#
directive|if
name|QT_VERSION
operator|>
literal|0x050000
name|labelText
operator|.
name|remove
argument_list|(
literal|0
argument_list|,
name|labelText
operator|.
name|indexOf
argument_list|(
literal|'('
argument_list|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|labelText
operator|.
name|chop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Qt 5
if|if
condition|(
operator|!
name|additionalText
operator|.
name|isEmpty
argument_list|()
condition|)
name|labelText
operator|+=
literal|' '
operator|+
name|additionalText
expr_stmt|;
specifier|const
name|QPixmap
name|cursorPixmap
init|=
name|cursor
operator|.
name|pixmap
argument_list|()
decl_stmt|;
name|QLabel
modifier|*
name|result
init|=
name|Q_NULLPTR
decl_stmt|;
if|if
condition|(
name|cursorPixmap
operator|.
name|size
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|result
operator|=
operator|new
name|QLabel
argument_list|(
name|labelText
argument_list|)
expr_stmt|;
name|result
operator|->
name|setFrameShape
argument_list|(
name|QFrame
operator|::
name|Box
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
operator|new
name|DraggableLabel
argument_list|(
name|cursor
operator|.
name|pixmap
argument_list|()
argument_list|,
name|labelText
argument_list|)
expr_stmt|;
name|result
operator|->
name|setFrameShape
argument_list|(
name|QFrame
operator|::
name|StyledPanel
argument_list|)
expr_stmt|;
block|}
name|result
operator|->
name|setCursor
argument_list|(
name|cursor
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|addToGrid
specifier|static
name|void
name|addToGrid
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|,
name|QGridLayout
modifier|*
name|gridLayout
parameter_list|,
name|int
name|columnCount
parameter_list|,
name|int
modifier|&
name|row
parameter_list|,
name|int
modifier|&
name|col
parameter_list|)
block|{
name|gridLayout
operator|->
name|addWidget
argument_list|(
name|w
argument_list|,
name|row
argument_list|,
name|col
argument_list|)
expr_stmt|;
if|if
condition|(
name|col
operator|>=
name|columnCount
condition|)
block|{
name|col
operator|=
literal|0
expr_stmt|;
name|row
operator|++
expr_stmt|;
block|}
else|else
block|{
name|col
operator|++
expr_stmt|;
block|}
block|}
end_function
begin_constructor
DECL|function|MainWindow
name|MainWindow
operator|::
name|MainWindow
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QMainWindow
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|m_screenInfoLabel
argument_list|(
operator|new
name|QLabel
argument_list|)
block|{
name|QString
name|title
init|=
literal|"Cursors "
decl_stmt|;
if|#
directive|if
name|QT_VERSION
operator|>
literal|0x050000
name|title
operator|+=
literal|'('
operator|+
name|QGuiApplication
operator|::
name|platformName
argument_list|()
operator|+
literal|") "
expr_stmt|;
endif|#
directive|endif
name|title
operator|+=
name|QT_VERSION_STR
expr_stmt|;
name|setWindowTitle
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|QMenu
modifier|*
name|fileMenu
init|=
name|menuBar
argument_list|()
operator|->
name|addMenu
argument_list|(
literal|"File"
argument_list|)
decl_stmt|;
name|QAction
modifier|*
name|quitAction
init|=
name|fileMenu
operator|->
name|addAction
argument_list|(
literal|"Quit"
argument_list|)
decl_stmt|;
name|quitAction
operator|->
name|setShortcut
argument_list|(
name|Qt
operator|::
name|CTRL
operator|+
name|Qt
operator|::
name|Key_Q
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|quitAction
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|qApp
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QToolBar
modifier|*
name|fileToolBar
init|=
name|addToolBar
argument_list|(
literal|"File"
argument_list|)
decl_stmt|;
name|fileToolBar
operator|->
name|addAction
argument_list|(
name|quitAction
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|cw
init|=
operator|new
name|QWidget
decl_stmt|;
name|QHBoxLayout
modifier|*
name|hLayout
init|=
operator|new
name|QHBoxLayout
argument_list|(
name|cw
argument_list|)
decl_stmt|;
name|hLayout
operator|->
name|addWidget
argument_list|(
operator|new
name|VerticalRuler
argument_list|(
name|cw
argument_list|)
argument_list|)
expr_stmt|;
name|QGridLayout
modifier|*
name|gridLayout
init|=
operator|new
name|QGridLayout
decl_stmt|;
name|hLayout
operator|->
name|addLayout
argument_list|(
name|gridLayout
argument_list|)
expr_stmt|;
specifier|const
name|int
name|columnCount
init|=
literal|5
decl_stmt|;
specifier|const
name|int
name|size
init|=
literal|32
decl_stmt|;
name|int
name|row
init|=
literal|0
decl_stmt|;
name|int
name|col
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|Qt
operator|::
name|BitmapCursor
condition|;
operator|++
name|i
control|)
name|addToGrid
argument_list|(
name|createCursorLabel
argument_list|(
name|QCursor
argument_list|(
cast|static_cast
argument_list|<
name|Qt
operator|::
name|CursorShape
argument_list|>
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
argument_list|,
name|gridLayout
argument_list|,
name|columnCount
argument_list|,
name|row
argument_list|,
name|col
argument_list|)
expr_stmt|;
name|addToGrid
argument_list|(
name|createCursorLabel
argument_list|(
name|QCursor
argument_list|(
name|pixmapCursor
argument_list|(
name|size
argument_list|)
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"Plain PX "
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|size
argument_list|)
argument_list|)
argument_list|,
name|gridLayout
argument_list|,
name|columnCount
argument_list|,
name|row
argument_list|,
name|col
argument_list|)
expr_stmt|;
name|addToGrid
argument_list|(
name|createCursorLabel
argument_list|(
name|bitmapCursor
argument_list|(
name|size
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"Plain BM "
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|size
argument_list|)
argument_list|)
argument_list|,
name|gridLayout
argument_list|,
name|columnCount
argument_list|,
name|row
argument_list|,
name|col
argument_list|)
expr_stmt|;
if|#
directive|if
name|QT_VERSION
operator|>
literal|0x050000
name|addToGrid
argument_list|(
name|createCursorLabel
argument_list|(
name|QCursor
argument_list|(
name|pixmapCursorDevicePixelRatio
argument_list|(
name|size
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|,
literal|"PX with DPR 2 "
operator|+
name|QString
operator|::
name|number
argument_list|(
name|size
argument_list|)
argument_list|)
argument_list|,
name|gridLayout
argument_list|,
name|columnCount
argument_list|,
name|row
argument_list|,
name|col
argument_list|)
expr_stmt|;
name|addToGrid
argument_list|(
name|createCursorLabel
argument_list|(
name|QCursor
argument_list|(
name|bitmapCursorDevicePixelRatio
argument_list|(
name|size
argument_list|,
literal|2
argument_list|)
argument_list|)
argument_list|,
literal|"BM with DPR 2 "
operator|+
name|QString
operator|::
name|number
argument_list|(
name|size
argument_list|)
argument_list|)
argument_list|,
name|gridLayout
argument_list|,
name|columnCount
argument_list|,
name|row
argument_list|,
name|col
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Qt 5
name|gridLayout
operator|->
name|addWidget
argument_list|(
name|m_screenInfoLabel
argument_list|,
name|row
operator|+
literal|1
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
name|columnCount
argument_list|)
expr_stmt|;
name|setCentralWidget
argument_list|(
name|cw
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_typedef
DECL|typedef|MainWindowPtr
typedef|typedef
name|QSharedPointer
argument_list|<
name|MainWindow
argument_list|>
name|MainWindowPtr
typedef|;
end_typedef
begin_typedef
DECL|typedef|MainWindowPtrList
typedef|typedef
name|QList
argument_list|<
name|MainWindowPtr
argument_list|>
name|MainWindowPtrList
typedef|;
end_typedef
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
name|argv
index|[]
parameter_list|)
block|{
name|QStringList
name|arguments
decl_stmt|;
name|std
operator|::
name|copy
argument_list|(
name|argv
operator|+
literal|1
argument_list|,
name|argv
operator|+
name|argc
argument_list|,
name|std
operator|::
name|back_inserter
argument_list|(
name|arguments
argument_list|)
argument_list|)
expr_stmt|;
if|#
directive|if
name|QT_VERSION
operator|>
literal|0x050000
if|if
condition|(
name|arguments
operator|.
name|contains
argument_list|(
literal|"-s"
argument_list|)
condition|)
name|QCoreApplication
operator|::
name|setAttribute
argument_list|(
name|Qt
operator|::
name|AA_EnableHighDpiScaling
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|arguments
operator|.
name|contains
argument_list|(
literal|"-n"
argument_list|)
condition|)
name|QCoreApplication
operator|::
name|setAttribute
argument_list|(
name|Qt
operator|::
name|AA_DisableHighDpiScaling
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Qt 5
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|MainWindowPtrList
name|windows
decl_stmt|;
name|QDesktopWidget
modifier|*
name|desktopWidget
init|=
name|app
operator|.
name|desktop
argument_list|()
decl_stmt|;
specifier|const
name|int
name|lastScreen
init|=
name|arguments
operator|.
name|contains
argument_list|(
literal|"-p"
argument_list|)
condition|?
literal|0
comment|// Primary screen only
else|:
name|desktopWidget
operator|->
name|screenCount
argument_list|()
operator|-
literal|1
decl_stmt|;
comment|// All screens
for|for
control|(
name|int
name|s
init|=
name|lastScreen
init|;
name|s
operator|>=
literal|0
condition|;
operator|--
name|s
control|)
block|{
name|MainWindowPtr
name|window
argument_list|(
operator|new
name|MainWindow
argument_list|(
name|desktopWidget
operator|->
name|screen
argument_list|(
name|s
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QPoint
name|pos
init|=
name|desktopWidget
operator|->
name|screenGeometry
argument_list|(
name|s
argument_list|)
operator|.
name|center
argument_list|()
operator|-
name|QPoint
argument_list|(
literal|200
argument_list|,
literal|100
argument_list|)
decl_stmt|;
name|window
operator|->
name|move
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|windows
operator|.
name|append
argument_list|(
name|window
argument_list|)
expr_stmt|;
name|window
operator|->
name|show
argument_list|()
expr_stmt|;
name|window
operator|->
name|updateScreenInfo
argument_list|()
expr_stmt|;
if|#
directive|if
name|QT_VERSION
operator|>
literal|0x050000
name|QObject
operator|::
name|connect
argument_list|(
name|window
operator|->
name|windowHandle
argument_list|()
argument_list|,
operator|&
name|QWindow
operator|::
name|screenChanged
argument_list|,
name|window
operator|.
name|data
argument_list|()
argument_list|,
operator|&
name|MainWindow
operator|::
name|updateScreenInfo
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
return|return
name|app
operator|.
name|exec
argument_list|()
return|;
block|}
end_function
begin_include
include|#
directive|include
file|"main.moc"
end_include
end_unit
