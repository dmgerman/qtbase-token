begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtCore/QThread>
end_include
begin_include
include|#
directive|include
file|<QtCore/QSemaphore>
end_include
begin_include
include|#
directive|include
file|<QtCore/QElapsedTimer>
end_include
begin_include
include|#
directive|include
file|<QtCore/QSharedPointer>
end_include
begin_include
include|#
directive|include
file|<QtCore/QVector>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/QTcpSocket>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/QNetworkReply>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/QNetworkAccessManager>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
end_ifdef
begin_include
include|#
directive|include
file|<private/qnetworkaccessmanager_p.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"minihttpserver.h"
end_include
begin_include
include|#
directive|include
file|"../../auto/network-settings.h"
end_include
begin_include
include|#
directive|include
file|<qplatformdefs.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_UNIX
end_ifdef
begin_include
include|#
directive|include
file|<sys/types.h>
end_include
begin_include
include|#
directive|include
file|<sys/socket.h>
end_include
begin_include
include|#
directive|include
file|<sys/select.h>
end_include
begin_include
include|#
directive|include
file|<netinet/in.h>
end_include
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_include
include|#
directive|include
file|<netdb.h>
end_include
begin_include
include|#
directive|include
file|<signal.h>
end_include
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_include
include|#
directive|include
file|<fcntl.h>
end_include
begin_typedef
DECL|typedef|SOCKET
typedef|typedef
name|int
name|SOCKET
typedef|;
end_typedef
begin_define
DECL|macro|INVALID_SOCKET
define|#
directive|define
name|INVALID_SOCKET
value|-1
end_define
begin_define
DECL|macro|SOCKET_ERROR
define|#
directive|define
name|SOCKET_ERROR
value|-1
end_define
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
end_elif
begin_include
include|#
directive|include
file|<winsock2.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_class
DECL|class|tst_NetworkStressTest
class|class
name|tst_NetworkStressTest
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|enumerator|AttemptCount
enum|enum
block|{
name|AttemptCount
init|=
literal|100
block|}
enum|;
name|tst_NetworkStressTest
parameter_list|()
constructor_decl|;
DECL|member|server
name|MiniHttpServer
name|server
decl_stmt|;
DECL|member|byteCounter
name|qint64
name|byteCounter
decl_stmt|;
DECL|member|manager
name|QNetworkAccessManager
name|manager
decl_stmt|;
DECL|member|intermediateDebug
name|bool
name|intermediateDebug
decl_stmt|;
private|private:
name|void
name|clearManager
parameter_list|()
function_decl|;
public|public
name|slots
public|:
name|void
name|initTestCase_data
parameter_list|()
function_decl|;
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|init
parameter_list|()
function_decl|;
DECL|function|slotReadAll
name|void
name|slotReadAll
parameter_list|()
block|{
name|byteCounter
operator|+=
cast|static_cast
argument_list|<
name|QIODevice
operator|*
argument_list|>
argument_list|(
name|sender
argument_list|()
argument_list|)
operator|->
name|readAll
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
private|private
name|Q_SLOTS
private|:
name|void
name|nativeBlockingConnectDisconnect
parameter_list|()
function_decl|;
name|void
name|nativeNonBlockingConnectDisconnect
parameter_list|()
function_decl|;
name|void
name|blockingConnectDisconnect
parameter_list|()
function_decl|;
name|void
name|blockingPipelined
parameter_list|()
function_decl|;
name|void
name|blockingMultipleRequests
parameter_list|()
function_decl|;
name|void
name|connectDisconnect
parameter_list|()
function_decl|;
name|void
name|parallelConnectDisconnect_data
parameter_list|()
function_decl|;
name|void
name|parallelConnectDisconnect
parameter_list|()
function_decl|;
name|void
name|namGet_data
parameter_list|()
function_decl|;
name|void
name|namGet
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_constructor
DECL|function|tst_NetworkStressTest
name|tst_NetworkStressTest
operator|::
name|tst_NetworkStressTest
parameter_list|()
member_init_list|:
name|intermediateDebug
argument_list|(
name|qgetenv
argument_list|(
literal|"STRESSDEBUG"
argument_list|)
operator|.
name|toInt
argument_list|()
operator|>
literal|0
argument_list|)
block|{
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|WSAData
name|wsadata
decl_stmt|;
comment|// IPv6 requires Winsock v2.0 or better.
name|WSAStartup
argument_list|(
name|MAKEWORD
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|&
name|wsadata
argument_list|)
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
operator|::
name|signal
argument_list|(
name|SIGALRM
argument_list|,
name|SIG_IGN
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_function
DECL|function|initTestCase_data
name|void
name|tst_NetworkStressTest
operator|::
name|initTestCase_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"isLocalhost"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"hostname"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"port"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"localhost"
argument_list|)
operator|<<
literal|true
operator|<<
literal|"localhost"
operator|<<
name|server
operator|.
name|port
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"remote"
argument_list|)
operator|<<
literal|false
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|80
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initTestCase
name|void
name|tst_NetworkStressTest
operator|::
name|initTestCase
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QtNetworkSettings
operator|::
name|verifyTestNetworkSettings
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|init
name|void
name|tst_NetworkStressTest
operator|::
name|init
parameter_list|()
block|{
comment|// clear the internal cache
ifndef|#
directive|ifndef
name|QT_BUILD_INTERNAL
if|if
condition|(
name|strncmp
argument_list|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
argument_list|,
literal|"nam"
argument_list|,
literal|3
argument_list|)
operator|==
literal|0
condition|)
name|QSKIP
argument_list|(
literal|"QNetworkAccessManager tests disabled"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|clearManager
name|void
name|tst_NetworkStressTest
operator|::
name|clearManager
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
name|QNetworkAccessManagerPrivate
operator|::
name|clearCache
argument_list|(
operator|&
name|manager
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setProxy
argument_list|(
name|QNetworkProxy
argument_list|()
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setCache
argument_list|(
literal|0
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|nativeLookup
name|bool
name|nativeLookup
parameter_list|(
specifier|const
name|char
modifier|*
name|hostname
parameter_list|,
name|int
name|port
parameter_list|,
name|QByteArray
modifier|&
name|buf
parameter_list|)
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_GETADDRINFO
argument_list|)
operator|&&
literal|0
name|addrinfo
modifier|*
name|res
init|=
literal|0
decl_stmt|;
name|struct
name|addrinfo
name|hints
decl_stmt|;
name|memset
argument_list|(
operator|&
name|hints
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|hints
argument_list|)
argument_list|)
expr_stmt|;
name|hints
operator|.
name|ai_family
operator|=
name|PF_UNSPEC
expr_stmt|;
name|int
name|result
init|=
name|getaddrinfo
argument_list|(
name|QUrl
operator|::
name|toAce
argument_list|(
name|hostname
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|,
name|QByteArray
operator|::
name|number
argument_list|(
name|port
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|,
operator|&
name|hints
argument_list|,
operator|&
name|res
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
return|return
literal|false
return|;
for|for
control|(
name|addrinfo
modifier|*
name|node
init|=
name|res
init|;
name|node
condition|;
name|node
operator|=
name|node
operator|->
name|ai_next
control|)
block|{
if|if
condition|(
name|node
operator|->
name|ai_family
operator|==
name|AF_INET
condition|)
block|{
name|buf
operator|=
name|QByteArray
argument_list|(
operator|(
name|char
operator|*
operator|)
name|node
operator|->
name|ai_addr
argument_list|,
name|node
operator|->
name|ai_addrlen
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|freeaddrinfo
argument_list|(
name|res
argument_list|)
expr_stmt|;
else|#
directive|else
name|hostent
modifier|*
name|result
init|=
name|gethostbyname
argument_list|(
name|hostname
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|result
operator|||
name|result
operator|->
name|h_addrtype
operator|!=
name|AF_INET
condition|)
return|return
literal|false
return|;
name|struct
name|sockaddr_in
name|s
decl_stmt|;
name|s
operator|.
name|sin_family
operator|=
name|AF_INET
expr_stmt|;
name|s
operator|.
name|sin_port
operator|=
name|htons
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|s
operator|.
name|sin_addr
operator|=
operator|*
operator|(
expr|struct
name|in_addr
operator|*
operator|)
name|result
operator|->
name|h_addr_list
index|[
literal|0
index|]
expr_stmt|;
name|buf
operator|=
name|QByteArray
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|s
argument_list|,
sizeof|sizeof
name|s
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
operator|!
name|buf
operator|.
name|isEmpty
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|nativeSelect
name|bool
name|nativeSelect
parameter_list|(
name|int
name|fd
parameter_list|,
name|int
name|timeout
parameter_list|,
name|bool
name|selectForWrite
parameter_list|)
block|{
if|if
condition|(
name|timeout
operator|<
literal|0
condition|)
return|return
literal|false
return|;
comment|// wait for connected
name|fd_set
name|fds
decl_stmt|,
name|fde
decl_stmt|;
name|FD_ZERO
argument_list|(
operator|&
name|fds
argument_list|)
expr_stmt|;
name|FD_ZERO
argument_list|(
operator|&
name|fde
argument_list|)
expr_stmt|;
name|FD_SET
argument_list|(
name|fd
argument_list|,
operator|&
name|fds
argument_list|)
expr_stmt|;
name|FD_SET
argument_list|(
name|fd
argument_list|,
operator|&
name|fde
argument_list|)
expr_stmt|;
name|int
name|ret
decl_stmt|;
do|do
block|{
name|struct
name|timeval
name|tv
decl_stmt|;
name|tv
operator|.
name|tv_sec
operator|=
name|timeout
operator|/
literal|1000
expr_stmt|;
name|tv
operator|.
name|tv_usec
operator|=
name|timeout
operator|%
literal|1000
expr_stmt|;
if|if
condition|(
name|selectForWrite
condition|)
name|ret
operator|=
operator|::
name|select
argument_list|(
name|fd
operator|+
literal|1
argument_list|,
literal|0
argument_list|,
operator|&
name|fds
argument_list|,
operator|&
name|fde
argument_list|,
operator|&
name|tv
argument_list|)
expr_stmt|;
else|else
name|ret
operator|=
operator|::
name|select
argument_list|(
name|fd
operator|+
literal|1
argument_list|,
operator|&
name|fds
argument_list|,
literal|0
argument_list|,
operator|&
name|fde
argument_list|,
operator|&
name|tv
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|ret
operator|==
operator|-
literal|1
operator|&&
name|errno
operator|==
name|EINTR
condition|)
do|;
return|return
name|ret
operator|!=
literal|0
return|;
block|}
end_function
begin_function
DECL|function|nativeBlockingConnectDisconnect
name|void
name|tst_NetworkStressTest
operator|::
name|nativeBlockingConnectDisconnect
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|QString
argument_list|,
name|hostname
argument_list|)
expr_stmt|;
name|QFETCH_GLOBAL
argument_list|(
name|int
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|qint64
name|totalBytes
init|=
literal|0
decl_stmt|;
name|QElapsedTimer
name|outerTimer
decl_stmt|;
name|outerTimer
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|AttemptCount
condition|;
operator|++
name|i
control|)
block|{
name|QElapsedTimer
name|timeout
decl_stmt|;
name|byteCounter
operator|=
literal|0
expr_stmt|;
name|timeout
operator|.
name|start
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
name|alarm
argument_list|(
literal|10
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// look up the host
name|QByteArray
name|addr
decl_stmt|;
if|if
condition|(
operator|!
name|nativeLookup
argument_list|(
name|QUrl
operator|::
name|toAce
argument_list|(
name|hostname
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|,
name|port
argument_list|,
name|addr
argument_list|)
condition|)
name|QFAIL
argument_list|(
literal|"Lookup failed"
argument_list|)
expr_stmt|;
comment|// connect
name|SOCKET
name|fd
init|=
operator|::
name|socket
argument_list|(
name|AF_INET
argument_list|,
name|SOCK_STREAM
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|fd
operator|!=
name|INVALID_SOCKET
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|::
name|connect
argument_list|(
name|fd
argument_list|,
operator|(
name|sockaddr
operator|*
operator|)
name|addr
operator|.
name|data
argument_list|()
argument_list|,
name|addr
operator|.
name|size
argument_list|()
argument_list|)
operator|!=
name|SOCKET_ERROR
argument_list|)
expr_stmt|;
comment|// send request
block|{
name|QByteArray
name|request
init|=
literal|"GET /qtest/bigfile HTTP/1.1\r\n"
literal|"Connection: close\r\n"
literal|"User-Agent: tst_QTcpSocket_stresstest/1.0\r\n"
literal|"Host: "
operator|+
name|hostname
operator|.
name|toLatin1
argument_list|()
operator|+
literal|"\r\n"
literal|"\r\n"
decl_stmt|;
name|qint64
name|bytesWritten
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|bytesWritten
operator|<
name|request
operator|.
name|size
argument_list|()
condition|)
block|{
name|qint64
name|ret
init|=
operator|::
name|send
argument_list|(
name|fd
argument_list|,
name|request
operator|.
name|constData
argument_list|()
operator|+
name|bytesWritten
argument_list|,
name|request
operator|.
name|size
argument_list|()
operator|-
name|bytesWritten
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|==
operator|-
literal|1
condition|)
block|{
operator|::
name|close
argument_list|(
name|fd
argument_list|)
expr_stmt|;
name|QFAIL
argument_list|(
literal|"Timeout"
argument_list|)
expr_stmt|;
block|}
name|bytesWritten
operator|+=
name|ret
expr_stmt|;
block|}
block|}
comment|// receive reply
name|char
name|buf
index|[
literal|16384
index|]
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|qint64
name|ret
init|=
operator|::
name|recv
argument_list|(
name|fd
argument_list|,
name|buf
argument_list|,
sizeof|sizeof
name|buf
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|==
operator|-
literal|1
condition|)
block|{
operator|::
name|close
argument_list|(
name|fd
argument_list|)
expr_stmt|;
name|QFAIL
argument_list|(
literal|"Timeout"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ret
operator|==
literal|0
condition|)
block|{
break|break;
comment|// EOF
block|}
name|byteCounter
operator|+=
name|ret
expr_stmt|;
block|}
operator|::
name|close
argument_list|(
name|fd
argument_list|)
expr_stmt|;
name|totalBytes
operator|+=
name|byteCounter
expr_stmt|;
if|if
condition|(
name|intermediateDebug
condition|)
block|{
name|double
name|rate
init|=
operator|(
name|byteCounter
operator|*
literal|1.0
operator|/
name|timeout
operator|.
name|elapsed
argument_list|()
operator|)
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
name|i
operator|<<
name|byteCounter
operator|<<
literal|"bytes in"
operator|<<
name|timeout
operator|.
name|elapsed
argument_list|()
operator|<<
literal|"ms:"
operator|<<
operator|(
name|rate
operator|/
literal|1024.0
operator|/
literal|1024
operator|*
literal|1000
operator|)
operator|<<
literal|"MB/s"
expr_stmt|;
block|}
block|}
name|qDebug
argument_list|()
operator|<<
literal|"Average transfer rate was"
operator|<<
operator|(
name|totalBytes
operator|/
literal|1024.0
operator|/
literal|1024
operator|*
literal|1000
operator|/
name|outerTimer
operator|.
name|elapsed
argument_list|()
operator|)
operator|<<
literal|"MB/s"
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
name|alarm
argument_list|(
literal|0
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|nativeNonBlockingConnectDisconnect
name|void
name|tst_NetworkStressTest
operator|::
name|nativeNonBlockingConnectDisconnect
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|QString
argument_list|,
name|hostname
argument_list|)
expr_stmt|;
name|QFETCH_GLOBAL
argument_list|(
name|int
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|qint64
name|totalBytes
init|=
literal|0
decl_stmt|;
name|QElapsedTimer
name|outerTimer
decl_stmt|;
name|outerTimer
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|AttemptCount
condition|;
operator|++
name|i
control|)
block|{
name|QElapsedTimer
name|timeout
decl_stmt|;
name|byteCounter
operator|=
literal|0
expr_stmt|;
name|timeout
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// look up the host
name|QByteArray
name|addr
decl_stmt|;
if|if
condition|(
operator|!
name|nativeLookup
argument_list|(
name|QUrl
operator|::
name|toAce
argument_list|(
name|hostname
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|,
name|port
argument_list|,
name|addr
argument_list|)
condition|)
name|QFAIL
argument_list|(
literal|"Lookup failed"
argument_list|)
expr_stmt|;
name|SOCKET
name|fd
decl_stmt|;
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
name|fd
operator|=
operator|::
name|socket
argument_list|(
name|AF_INET
argument_list|,
name|SOCK_STREAM
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fd
operator|!=
name|INVALID_SOCKET
argument_list|)
expr_stmt|;
comment|// set the socket to non-blocking and start connecting
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_VXWORKS
argument_list|)
name|int
name|flags
init|=
operator|::
name|fcntl
argument_list|(
name|fd
argument_list|,
name|F_GETFL
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|flags
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|::
name|fcntl
argument_list|(
name|fd
argument_list|,
name|F_SETFL
argument_list|,
name|flags
operator||
name|O_NONBLOCK
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
else|#
directive|else
comment|// Q_OS_VXWORKS
name|int
name|onoff
init|=
literal|1
decl_stmt|;
name|QVERIFY
argument_list|(
operator|::
name|ioctl
argument_list|(
name|socketDescriptor
argument_list|,
name|FIONBIO
argument_list|,
operator|&
name|onoff
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Q_OS_VXWORKS
while|while
condition|(
literal|true
condition|)
block|{
if|if
condition|(
operator|::
name|connect
argument_list|(
name|fd
argument_list|,
operator|(
name|sockaddr
operator|*
operator|)
name|addr
operator|.
name|data
argument_list|()
argument_list|,
name|addr
operator|.
name|size
argument_list|()
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|QVERIFY2
argument_list|(
name|errno
operator|==
name|EINPROGRESS
argument_list|,
name|QByteArray
argument_list|(
literal|"Error connecting: "
argument_list|)
operator|.
name|append
argument_list|(
name|strerror
argument_list|(
name|errno
argument_list|)
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|nativeSelect
argument_list|(
name|fd
argument_list|,
literal|10000
operator|-
name|timeout
operator|.
name|elapsed
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|"Timeout"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
break|break;
comment|// connected
block|}
block|}
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|fd
operator|=
operator|::
name|WSASocket
argument_list|(
name|AF_INET
argument_list|,
name|SOCK_STREAM
argument_list|,
literal|0
argument_list|,
name|NULL
argument_list|,
literal|0
argument_list|,
name|WSA_FLAG_OVERLAPPED
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fd
operator|!=
name|INVALID_SOCKET
argument_list|)
expr_stmt|;
comment|// set the socket to non-blocking and start connecting
name|unsigned
name|long
name|buf
init|=
literal|0
decl_stmt|;
name|unsigned
name|long
name|outBuf
decl_stmt|;
name|DWORD
name|sizeWritten
init|=
literal|0
decl_stmt|;
name|QVERIFY
argument_list|(
operator|::
name|WSAIoctl
argument_list|(
name|fd
argument_list|,
name|FIONBIO
argument_list|,
operator|&
name|buf
argument_list|,
expr|sizeof
operator|(
name|unsigned
name|long
operator|)
argument_list|,
operator|&
name|outBuf
argument_list|,
expr|sizeof
operator|(
name|unsigned
name|long
operator|)
argument_list|,
operator|&
name|sizeWritten
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|!=
name|SOCKET_ERROR
argument_list|)
expr_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|int
name|connectResult
init|=
operator|::
name|WSAConnect
argument_list|(
name|fd
argument_list|,
operator|(
name|sockaddr
operator|*
operator|)
name|addr
operator|.
name|data
argument_list|()
argument_list|,
name|addr
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|connectResult
operator|==
literal|0
operator|||
name|WSAGetLastError
argument_list|()
operator|==
name|WSAEISCONN
condition|)
block|{
break|break;
comment|// connected
block|}
else|else
block|{
name|QVERIFY2
argument_list|(
name|WSAGetLastError
argument_list|()
operator|==
name|WSAEINPROGRESS
argument_list|,
literal|"Unexpected error"
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|nativeSelect
argument_list|(
name|fd
argument_list|,
literal|10000
operator|-
name|timeout
operator|.
name|elapsed
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|"Timeout"
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
block|}
comment|// send request
block|{
name|QByteArray
name|request
init|=
literal|"GET /qtest/bigfile HTTP/1.1\r\n"
literal|"Connection: close\r\n"
literal|"User-Agent: tst_QTcpSocket_stresstest/1.0\r\n"
literal|"Host: "
operator|+
name|hostname
operator|.
name|toLatin1
argument_list|()
operator|+
literal|"\r\n"
literal|"\r\n"
decl_stmt|;
name|qint64
name|bytesWritten
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|bytesWritten
operator|<
name|request
operator|.
name|size
argument_list|()
condition|)
block|{
name|qint64
name|ret
init|=
operator|::
name|send
argument_list|(
name|fd
argument_list|,
name|request
operator|.
name|constData
argument_list|()
operator|+
name|bytesWritten
argument_list|,
name|request
operator|.
name|size
argument_list|()
operator|-
name|bytesWritten
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|==
operator|-
literal|1
operator|&&
name|errno
operator|!=
name|EWOULDBLOCK
condition|)
block|{
operator|::
name|close
argument_list|(
name|fd
argument_list|)
expr_stmt|;
name|QFAIL
argument_list|(
name|QByteArray
argument_list|(
literal|"Error writing: "
argument_list|)
operator|.
name|append
argument_list|(
name|strerror
argument_list|(
name|errno
argument_list|)
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ret
operator|==
operator|-
literal|1
condition|)
block|{
comment|// wait for writing
name|QVERIFY2
argument_list|(
name|nativeSelect
argument_list|(
name|fd
argument_list|,
literal|10000
operator|-
name|timeout
operator|.
name|elapsed
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|,
literal|"Timeout"
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|bytesWritten
operator|+=
name|ret
expr_stmt|;
block|}
block|}
comment|// receive reply
name|char
name|buf
index|[
literal|16384
index|]
decl_stmt|;
while|while
condition|(
literal|true
condition|)
block|{
name|qint64
name|ret
init|=
operator|::
name|recv
argument_list|(
name|fd
argument_list|,
name|buf
argument_list|,
sizeof|sizeof
name|buf
argument_list|,
literal|0
argument_list|)
decl_stmt|;
if|if
condition|(
name|ret
operator|==
operator|-
literal|1
operator|&&
name|errno
operator|!=
name|EWOULDBLOCK
condition|)
block|{
operator|::
name|close
argument_list|(
name|fd
argument_list|)
expr_stmt|;
name|QFAIL
argument_list|(
literal|"Timeout"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ret
operator|==
operator|-
literal|1
condition|)
block|{
comment|// wait for reading
name|QVERIFY2
argument_list|(
name|nativeSelect
argument_list|(
name|fd
argument_list|,
literal|10000
operator|-
name|timeout
operator|.
name|elapsed
argument_list|()
argument_list|,
literal|false
argument_list|)
argument_list|,
literal|"Timeout"
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|ret
operator|==
literal|0
condition|)
block|{
break|break;
comment|// EOF
block|}
name|byteCounter
operator|+=
name|ret
expr_stmt|;
block|}
operator|::
name|close
argument_list|(
name|fd
argument_list|)
expr_stmt|;
name|totalBytes
operator|+=
name|byteCounter
expr_stmt|;
if|if
condition|(
name|intermediateDebug
condition|)
block|{
name|double
name|rate
init|=
operator|(
name|byteCounter
operator|*
literal|1.0
operator|/
name|timeout
operator|.
name|elapsed
argument_list|()
operator|)
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
name|i
operator|<<
name|byteCounter
operator|<<
literal|"bytes in"
operator|<<
name|timeout
operator|.
name|elapsed
argument_list|()
operator|<<
literal|"ms:"
operator|<<
operator|(
name|rate
operator|/
literal|1024.0
operator|/
literal|1024
operator|*
literal|1000
operator|)
operator|<<
literal|"MB/s"
expr_stmt|;
block|}
block|}
name|qDebug
argument_list|()
operator|<<
literal|"Average transfer rate was"
operator|<<
operator|(
name|totalBytes
operator|/
literal|1024.0
operator|/
literal|1024
operator|*
literal|1000
operator|/
name|outerTimer
operator|.
name|elapsed
argument_list|()
operator|)
operator|<<
literal|"MB/s"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|blockingConnectDisconnect
name|void
name|tst_NetworkStressTest
operator|::
name|blockingConnectDisconnect
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|QString
argument_list|,
name|hostname
argument_list|)
expr_stmt|;
name|QFETCH_GLOBAL
argument_list|(
name|int
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|qint64
name|totalBytes
init|=
literal|0
decl_stmt|;
name|QElapsedTimer
name|outerTimer
decl_stmt|;
name|outerTimer
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|AttemptCount
condition|;
operator|++
name|i
control|)
block|{
name|QElapsedTimer
name|timeout
decl_stmt|;
name|byteCounter
operator|=
literal|0
expr_stmt|;
name|timeout
operator|.
name|start
argument_list|()
expr_stmt|;
name|QTcpSocket
name|socket
decl_stmt|;
name|socket
operator|.
name|connectToHost
argument_list|(
name|hostname
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|socket
operator|.
name|waitForConnected
argument_list|()
argument_list|,
literal|"Timeout"
argument_list|)
expr_stmt|;
name|socket
operator|.
name|write
argument_list|(
literal|"GET /qtest/bigfile HTTP/1.1\r\n"
literal|"Connection: close\r\n"
literal|"User-Agent: tst_QTcpSocket_stresstest/1.0\r\n"
literal|"Host: "
operator|+
name|hostname
operator|.
name|toLatin1
argument_list|()
operator|+
literal|"\r\n"
literal|"\r\n"
argument_list|)
expr_stmt|;
while|while
condition|(
name|socket
operator|.
name|bytesToWrite
argument_list|()
condition|)
name|QVERIFY2
argument_list|(
name|socket
operator|.
name|waitForBytesWritten
argument_list|()
argument_list|,
literal|"Timeout"
argument_list|)
expr_stmt|;
while|while
condition|(
name|socket
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
operator|&&
operator|!
name|timeout
operator|.
name|hasExpired
argument_list|(
literal|10000
argument_list|)
condition|)
block|{
name|socket
operator|.
name|waitForReadyRead
argument_list|()
expr_stmt|;
name|byteCounter
operator|+=
name|socket
operator|.
name|readAll
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
comment|// discard
block|}
name|totalBytes
operator|+=
name|byteCounter
expr_stmt|;
if|if
condition|(
name|intermediateDebug
condition|)
block|{
name|double
name|rate
init|=
operator|(
name|byteCounter
operator|*
literal|1.0
operator|/
name|timeout
operator|.
name|elapsed
argument_list|()
operator|)
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
name|i
operator|<<
name|byteCounter
operator|<<
literal|"bytes in"
operator|<<
name|timeout
operator|.
name|elapsed
argument_list|()
operator|<<
literal|"ms:"
operator|<<
operator|(
name|rate
operator|/
literal|1024.0
operator|/
literal|1024
operator|*
literal|1000
operator|)
operator|<<
literal|"MB/s"
expr_stmt|;
block|}
block|}
name|qDebug
argument_list|()
operator|<<
literal|"Average transfer rate was"
operator|<<
operator|(
name|totalBytes
operator|/
literal|1024.0
operator|/
literal|1024
operator|*
literal|1000
operator|/
name|outerTimer
operator|.
name|elapsed
argument_list|()
operator|)
operator|<<
literal|"MB/s"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|blockingPipelined
name|void
name|tst_NetworkStressTest
operator|::
name|blockingPipelined
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|QString
argument_list|,
name|hostname
argument_list|)
expr_stmt|;
name|QFETCH_GLOBAL
argument_list|(
name|int
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|qint64
name|totalBytes
init|=
literal|0
decl_stmt|;
name|QElapsedTimer
name|outerTimer
decl_stmt|;
name|outerTimer
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|AttemptCount
operator|/
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|QElapsedTimer
name|timeout
decl_stmt|;
name|byteCounter
operator|=
literal|0
expr_stmt|;
name|timeout
operator|.
name|start
argument_list|()
expr_stmt|;
name|QTcpSocket
name|socket
decl_stmt|;
name|socket
operator|.
name|connectToHost
argument_list|(
name|hostname
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|socket
operator|.
name|waitForConnected
argument_list|()
argument_list|,
literal|"Timeout"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|3
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
name|intermediateDebug
condition|)
name|qDebug
argument_list|(
literal|"Attempt %d%c"
argument_list|,
name|i
argument_list|,
literal|'a'
operator|+
name|j
argument_list|)
expr_stmt|;
name|socket
operator|.
name|write
argument_list|(
literal|"GET /qtest/bigfile HTTP/1.1\r\n"
literal|"Connection: "
operator|+
name|QByteArray
argument_list|(
name|j
operator|==
literal|2
condition|?
literal|"close"
else|:
literal|"keep-alive"
argument_list|)
operator|+
literal|"\r\n"
literal|"User-Agent: tst_QTcpSocket_stresstest/1.0\r\n"
literal|"Host: "
operator|+
name|hostname
operator|.
name|toLatin1
argument_list|()
operator|+
literal|"\r\n"
literal|"\r\n"
argument_list|)
expr_stmt|;
while|while
condition|(
name|socket
operator|.
name|bytesToWrite
argument_list|()
condition|)
name|QVERIFY2
argument_list|(
name|socket
operator|.
name|waitForBytesWritten
argument_list|()
argument_list|,
literal|"Timeout"
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
name|socket
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
operator|&&
operator|!
name|timeout
operator|.
name|hasExpired
argument_list|(
literal|10000
argument_list|)
condition|)
block|{
name|socket
operator|.
name|waitForReadyRead
argument_list|()
expr_stmt|;
name|byteCounter
operator|+=
name|socket
operator|.
name|readAll
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
comment|// discard
block|}
name|totalBytes
operator|+=
name|byteCounter
expr_stmt|;
if|if
condition|(
name|intermediateDebug
condition|)
block|{
name|double
name|rate
init|=
operator|(
name|byteCounter
operator|*
literal|1.0
operator|/
name|timeout
operator|.
name|elapsed
argument_list|()
operator|)
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
name|i
operator|<<
name|byteCounter
operator|<<
literal|"bytes in"
operator|<<
name|timeout
operator|.
name|elapsed
argument_list|()
operator|<<
literal|"ms:"
operator|<<
operator|(
name|rate
operator|/
literal|1024.0
operator|/
literal|1024
operator|*
literal|1000
operator|)
operator|<<
literal|"MB/s"
expr_stmt|;
block|}
block|}
name|qDebug
argument_list|()
operator|<<
literal|"Average transfer rate was"
operator|<<
operator|(
name|totalBytes
operator|/
literal|1024.0
operator|/
literal|1024
operator|*
literal|1000
operator|/
name|outerTimer
operator|.
name|elapsed
argument_list|()
operator|)
operator|<<
literal|"MB/s"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|blockingMultipleRequests
name|void
name|tst_NetworkStressTest
operator|::
name|blockingMultipleRequests
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|QString
argument_list|,
name|hostname
argument_list|)
expr_stmt|;
name|QFETCH_GLOBAL
argument_list|(
name|int
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|qint64
name|totalBytes
init|=
literal|0
decl_stmt|;
name|QElapsedTimer
name|outerTimer
decl_stmt|;
name|outerTimer
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|AttemptCount
operator|/
literal|5
condition|;
operator|++
name|i
control|)
block|{
name|QTcpSocket
name|socket
decl_stmt|;
name|socket
operator|.
name|connectToHost
argument_list|(
name|hostname
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|socket
operator|.
name|waitForConnected
argument_list|()
argument_list|,
literal|"Timeout"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|5
condition|;
operator|++
name|j
control|)
block|{
name|QElapsedTimer
name|timeout
decl_stmt|;
name|byteCounter
operator|=
literal|0
expr_stmt|;
name|timeout
operator|.
name|start
argument_list|()
expr_stmt|;
name|socket
operator|.
name|write
argument_list|(
literal|"GET /qtest/bigfile HTTP/1.1\r\n"
literal|"Connection: keep-alive\r\n"
literal|"User-Agent: tst_QTcpSocket_stresstest/1.0\r\n"
literal|"Host: "
operator|+
name|hostname
operator|.
name|toLatin1
argument_list|()
operator|+
literal|"\r\n"
literal|"\r\n"
argument_list|)
expr_stmt|;
while|while
condition|(
name|socket
operator|.
name|bytesToWrite
argument_list|()
condition|)
name|QVERIFY2
argument_list|(
name|socket
operator|.
name|waitForBytesWritten
argument_list|()
argument_list|,
literal|"Timeout"
argument_list|)
expr_stmt|;
name|qint64
name|bytesRead
init|=
literal|0
decl_stmt|;
name|qint64
name|bytesExpected
init|=
operator|-
literal|1
decl_stmt|;
name|QByteArray
name|buffer
decl_stmt|;
while|while
condition|(
name|socket
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
operator|&&
operator|!
name|timeout
operator|.
name|hasExpired
argument_list|(
literal|10000
argument_list|)
condition|)
block|{
name|socket
operator|.
name|waitForReadyRead
argument_list|()
expr_stmt|;
name|buffer
operator|+=
name|socket
operator|.
name|readAll
argument_list|()
expr_stmt|;
name|byteCounter
operator|+=
name|buffer
operator|.
name|size
argument_list|()
expr_stmt|;
name|int
name|pos
init|=
name|buffer
operator|.
name|indexOf
argument_list|(
literal|"\r\n\r\n"
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|==
operator|-
literal|1
condition|)
continue|continue;
name|bytesRead
operator|=
name|buffer
operator|.
name|length
argument_list|()
operator|-
name|pos
operator|-
literal|4
expr_stmt|;
name|buffer
operator|.
name|truncate
argument_list|(
name|pos
operator|+
literal|2
argument_list|)
expr_stmt|;
name|buffer
operator|=
name|buffer
operator|.
name|toLower
argument_list|()
expr_stmt|;
name|pos
operator|=
name|buffer
operator|.
name|indexOf
argument_list|(
literal|"\r\ncontent-length: "
argument_list|)
expr_stmt|;
if|if
condition|(
name|pos
operator|==
operator|-
literal|1
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"no content-length:"
operator|<<
name|QString
argument_list|(
name|buffer
argument_list|)
expr_stmt|;
break|break;
block|}
name|pos
operator|+=
name|int
argument_list|(
name|strlen
argument_list|(
literal|"\r\ncontent-length: "
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|eol
init|=
name|buffer
operator|.
name|indexOf
argument_list|(
literal|"\r\n"
argument_list|,
name|pos
operator|+
literal|2
argument_list|)
decl_stmt|;
if|if
condition|(
name|eol
operator|==
operator|-
literal|1
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
literal|"invalid header"
expr_stmt|;
break|break;
block|}
name|bytesExpected
operator|=
name|buffer
operator|.
name|mid
argument_list|(
name|pos
argument_list|,
name|eol
operator|-
name|pos
argument_list|)
operator|.
name|toLongLong
argument_list|()
expr_stmt|;
break|break;
block|}
name|QVERIFY
argument_list|(
name|bytesExpected
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
operator|!
name|timeout
operator|.
name|hasExpired
argument_list|(
literal|10000
argument_list|)
argument_list|,
literal|"Timeout"
argument_list|)
expr_stmt|;
while|while
condition|(
name|socket
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
operator|&&
operator|!
name|timeout
operator|.
name|hasExpired
argument_list|(
literal|10000
argument_list|)
operator|&&
name|bytesExpected
operator|>
name|bytesRead
condition|)
block|{
name|socket
operator|.
name|waitForReadyRead
argument_list|()
expr_stmt|;
name|int
name|blocklen
init|=
name|socket
operator|.
name|read
argument_list|(
name|bytesExpected
operator|-
name|bytesRead
argument_list|)
operator|.
name|length
argument_list|()
decl_stmt|;
comment|// discard
name|bytesRead
operator|+=
name|blocklen
expr_stmt|;
name|byteCounter
operator|+=
name|blocklen
expr_stmt|;
block|}
name|QVERIFY2
argument_list|(
operator|!
name|timeout
operator|.
name|hasExpired
argument_list|(
literal|10000
argument_list|)
argument_list|,
literal|"Timeout"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|bytesRead
argument_list|,
name|bytesExpected
argument_list|)
expr_stmt|;
name|totalBytes
operator|+=
name|byteCounter
expr_stmt|;
if|if
condition|(
name|intermediateDebug
condition|)
block|{
name|double
name|rate
init|=
operator|(
name|byteCounter
operator|*
literal|1.0
operator|/
name|timeout
operator|.
name|elapsed
argument_list|()
operator|)
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
name|i
operator|<<
name|byteCounter
operator|<<
literal|"bytes in"
operator|<<
name|timeout
operator|.
name|elapsed
argument_list|()
operator|<<
literal|"ms:"
operator|<<
operator|(
name|rate
operator|/
literal|1024.0
operator|/
literal|1024
operator|*
literal|1000
operator|)
operator|<<
literal|"MB/s"
expr_stmt|;
block|}
block|}
name|socket
operator|.
name|disconnectFromHost
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
block|}
name|qDebug
argument_list|()
operator|<<
literal|"Average transfer rate was"
operator|<<
operator|(
name|totalBytes
operator|/
literal|1024.0
operator|/
literal|1024
operator|*
literal|1000
operator|/
name|outerTimer
operator|.
name|elapsed
argument_list|()
operator|)
operator|<<
literal|"MB/s"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|connectDisconnect
name|void
name|tst_NetworkStressTest
operator|::
name|connectDisconnect
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|QString
argument_list|,
name|hostname
argument_list|)
expr_stmt|;
name|QFETCH_GLOBAL
argument_list|(
name|int
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|qint64
name|totalBytes
init|=
literal|0
decl_stmt|;
name|QElapsedTimer
name|outerTimer
decl_stmt|;
name|outerTimer
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|AttemptCount
condition|;
operator|++
name|i
control|)
block|{
name|QElapsedTimer
name|timeout
decl_stmt|;
name|byteCounter
operator|=
literal|0
expr_stmt|;
name|timeout
operator|.
name|start
argument_list|()
expr_stmt|;
name|QTcpSocket
name|socket
decl_stmt|;
name|socket
operator|.
name|connectToHost
argument_list|(
name|hostname
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|socket
operator|.
name|write
argument_list|(
literal|"GET /qtest/bigfile HTTP/1.1\r\n"
literal|"Connection: close\r\n"
literal|"User-Agent: tst_QTcpSocket_stresstest/1.0\r\n"
literal|"Host: "
operator|+
name|hostname
operator|.
name|toLatin1
argument_list|()
operator|+
literal|"\r\n"
literal|"\r\n"
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|slotReadAll
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|connect
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|disconnected
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|,
literal|"Timeout"
argument_list|)
expr_stmt|;
name|totalBytes
operator|+=
name|byteCounter
expr_stmt|;
if|if
condition|(
name|intermediateDebug
condition|)
block|{
name|double
name|rate
init|=
operator|(
name|byteCounter
operator|*
literal|1.0
operator|/
name|timeout
operator|.
name|elapsed
argument_list|()
operator|)
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
name|i
operator|<<
name|byteCounter
operator|<<
literal|"bytes in"
operator|<<
name|timeout
operator|.
name|elapsed
argument_list|()
operator|<<
literal|"ms:"
operator|<<
operator|(
name|rate
operator|/
literal|1024.0
operator|/
literal|1024
operator|*
literal|1000
operator|)
operator|<<
literal|"MB/s"
expr_stmt|;
block|}
block|}
name|qDebug
argument_list|()
operator|<<
literal|"Average transfer rate was"
operator|<<
operator|(
name|totalBytes
operator|/
literal|1024.0
operator|/
literal|1024
operator|*
literal|1000
operator|/
name|outerTimer
operator|.
name|elapsed
argument_list|()
operator|)
operator|<<
literal|"MB/s"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|parallelConnectDisconnect_data
name|void
name|tst_NetworkStressTest
operator|::
name|parallelConnectDisconnect_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"parallelAttempts"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4"
argument_list|)
operator|<<
literal|4
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5"
argument_list|)
operator|<<
literal|5
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"6"
argument_list|)
operator|<<
literal|6
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"8"
argument_list|)
operator|<<
literal|8
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"10"
argument_list|)
operator|<<
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"25"
argument_list|)
operator|<<
literal|25
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"100"
argument_list|)
operator|<<
literal|100
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"500"
argument_list|)
operator|<<
literal|500
expr_stmt|;
block|}
end_function
begin_function
DECL|function|parallelConnectDisconnect
name|void
name|tst_NetworkStressTest
operator|::
name|parallelConnectDisconnect
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|QString
argument_list|,
name|hostname
argument_list|)
expr_stmt|;
name|QFETCH_GLOBAL
argument_list|(
name|int
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|parallelAttempts
argument_list|)
expr_stmt|;
if|if
condition|(
name|parallelAttempts
operator|>
literal|100
condition|)
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|isLocalhost
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isLocalhost
condition|)
name|QSKIP
argument_list|(
literal|"Localhost-only test"
argument_list|)
expr_stmt|;
block|}
name|qint64
name|totalBytes
init|=
literal|0
decl_stmt|;
name|QElapsedTimer
name|outerTimer
decl_stmt|;
name|outerTimer
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qMax
argument_list|(
literal|2
argument_list|,
name|AttemptCount
operator|/
name|qMax
argument_list|(
literal|2
argument_list|,
name|parallelAttempts
operator|/
literal|4
argument_list|)
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
name|QElapsedTimer
name|timeout
decl_stmt|;
name|byteCounter
operator|=
literal|0
expr_stmt|;
name|timeout
operator|.
name|start
argument_list|()
expr_stmt|;
name|QTcpSocket
modifier|*
name|socket
init|=
operator|new
name|QTcpSocket
index|[
name|parallelAttempts
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|parallelAttempts
condition|;
operator|++
name|j
control|)
block|{
name|socket
index|[
name|j
index|]
operator|.
name|connectToHost
argument_list|(
name|hostname
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|socket
index|[
name|j
index|]
operator|.
name|write
argument_list|(
literal|"GET /qtest/bigfile HTTP/1.1\r\n"
literal|"Connection: close\r\n"
literal|"User-Agent: tst_QTcpSocket_stresstest/1.0\r\n"
literal|"Host: "
operator|+
name|hostname
operator|.
name|toLatin1
argument_list|()
operator|+
literal|"\r\n"
literal|"\r\n"
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|socket
index|[
name|j
index|]
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|slotReadAll
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|connect
argument_list|(
operator|&
name|socket
index|[
name|j
index|]
argument_list|,
name|SIGNAL
argument_list|(
name|disconnected
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
operator|!
name|timeout
operator|.
name|hasExpired
argument_list|(
literal|30000
argument_list|)
condition|)
block|{
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|int
name|done
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|parallelAttempts
condition|;
operator|++
name|j
control|)
name|done
operator|+=
name|socket
index|[
name|j
index|]
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
condition|?
literal|1
else|:
literal|0
expr_stmt|;
if|if
condition|(
name|done
operator|==
name|parallelAttempts
condition|)
break|break;
block|}
operator|delete
index|[]
name|socket
expr_stmt|;
name|QVERIFY2
argument_list|(
operator|!
name|timeout
operator|.
name|hasExpired
argument_list|(
literal|30000
argument_list|)
argument_list|,
literal|"Timeout"
argument_list|)
expr_stmt|;
name|totalBytes
operator|+=
name|byteCounter
expr_stmt|;
if|if
condition|(
name|intermediateDebug
condition|)
block|{
name|double
name|rate
init|=
operator|(
name|byteCounter
operator|*
literal|1.0
operator|/
name|timeout
operator|.
name|elapsed
argument_list|()
operator|)
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
name|i
operator|<<
name|byteCounter
operator|<<
literal|"bytes in"
operator|<<
name|timeout
operator|.
name|elapsed
argument_list|()
operator|<<
literal|"ms:"
operator|<<
operator|(
name|rate
operator|/
literal|1024.0
operator|/
literal|1024
operator|*
literal|1000
operator|)
operator|<<
literal|"MB/s"
expr_stmt|;
block|}
block|}
name|qDebug
argument_list|()
operator|<<
literal|"Average transfer rate was"
operator|<<
operator|(
name|totalBytes
operator|/
literal|1024.0
operator|/
literal|1024
operator|*
literal|1000
operator|/
name|outerTimer
operator|.
name|elapsed
argument_list|()
operator|)
operator|<<
literal|"MB/s"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|namGet_data
name|void
name|tst_NetworkStressTest
operator|::
name|namGet_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"parallelAttempts"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"pipelineAllowed"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
literal|1
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1p"
argument_list|)
operator|<<
literal|1
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
literal|2
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2p"
argument_list|)
operator|<<
literal|2
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4"
argument_list|)
operator|<<
literal|4
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4p"
argument_list|)
operator|<<
literal|4
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5"
argument_list|)
operator|<<
literal|5
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5p"
argument_list|)
operator|<<
literal|5
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"6"
argument_list|)
operator|<<
literal|6
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"6p"
argument_list|)
operator|<<
literal|6
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"8"
argument_list|)
operator|<<
literal|8
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"8p"
argument_list|)
operator|<<
literal|8
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"10"
argument_list|)
operator|<<
literal|10
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"10p"
argument_list|)
operator|<<
literal|10
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"25"
argument_list|)
operator|<<
literal|25
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"25p"
argument_list|)
operator|<<
literal|25
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"100"
argument_list|)
operator|<<
literal|100
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"100p"
argument_list|)
operator|<<
literal|100
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"500"
argument_list|)
operator|<<
literal|500
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"500p"
argument_list|)
operator|<<
literal|500
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|namGet
name|void
name|tst_NetworkStressTest
operator|::
name|namGet
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|QString
argument_list|,
name|hostname
argument_list|)
expr_stmt|;
name|QFETCH_GLOBAL
argument_list|(
name|int
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|parallelAttempts
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|pipelineAllowed
argument_list|)
expr_stmt|;
if|if
condition|(
name|parallelAttempts
operator|>
literal|100
condition|)
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|isLocalhost
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|isLocalhost
condition|)
name|QSKIP
argument_list|(
literal|"Localhost-only test"
argument_list|)
expr_stmt|;
block|}
name|qint64
name|totalBytes
init|=
literal|0
decl_stmt|;
name|QElapsedTimer
name|outerTimer
decl_stmt|;
name|outerTimer
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|qMax
argument_list|(
literal|2
argument_list|,
name|AttemptCount
operator|/
name|qMax
argument_list|(
literal|2
argument_list|,
name|parallelAttempts
operator|/
literal|4
argument_list|)
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
name|QElapsedTimer
name|timeout
decl_stmt|;
name|byteCounter
operator|=
literal|0
expr_stmt|;
name|timeout
operator|.
name|start
argument_list|()
expr_stmt|;
name|QUrl
name|url
decl_stmt|;
name|url
operator|.
name|setScheme
argument_list|(
literal|"http"
argument_list|)
expr_stmt|;
name|url
operator|.
name|setHost
argument_list|(
name|hostname
argument_list|)
expr_stmt|;
name|url
operator|.
name|setPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|url
operator|.
name|setEncodedPath
argument_list|(
literal|"/qtest/bigfile"
argument_list|)
expr_stmt|;
name|QNetworkRequest
name|req
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|req
operator|.
name|setAttribute
argument_list|(
name|QNetworkRequest
operator|::
name|HttpPipeliningAllowedAttribute
argument_list|,
name|pipelineAllowed
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|QSharedPointer
argument_list|<
name|QNetworkReply
argument_list|>
argument_list|>
name|replies
decl_stmt|;
name|replies
operator|.
name|resize
argument_list|(
name|parallelAttempts
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|parallelAttempts
condition|;
operator|++
name|j
control|)
block|{
name|QNetworkReply
modifier|*
name|r
init|=
name|manager
operator|.
name|get
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|r
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|slotReadAll
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|connect
argument_list|(
name|r
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|replies
index|[
name|j
index|]
operator|=
name|QSharedPointer
argument_list|<
name|QNetworkReply
argument_list|>
argument_list|(
name|r
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
operator|!
name|timeout
operator|.
name|hasExpired
argument_list|(
literal|30000
argument_list|)
condition|)
block|{
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|int
name|done
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|parallelAttempts
condition|;
operator|++
name|j
control|)
name|done
operator|+=
name|replies
index|[
name|j
index|]
operator|->
name|isFinished
argument_list|()
condition|?
literal|1
else|:
literal|0
expr_stmt|;
if|if
condition|(
name|done
operator|==
name|parallelAttempts
condition|)
break|break;
block|}
name|replies
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QVERIFY2
argument_list|(
operator|!
name|timeout
operator|.
name|hasExpired
argument_list|(
literal|30000
argument_list|)
argument_list|,
literal|"Timeout"
argument_list|)
expr_stmt|;
name|totalBytes
operator|+=
name|byteCounter
expr_stmt|;
if|if
condition|(
name|intermediateDebug
condition|)
block|{
name|double
name|rate
init|=
operator|(
name|byteCounter
operator|*
literal|1.0
operator|/
name|timeout
operator|.
name|elapsed
argument_list|()
operator|)
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
name|i
operator|<<
name|byteCounter
operator|<<
literal|"bytes in"
operator|<<
name|timeout
operator|.
name|elapsed
argument_list|()
operator|<<
literal|"ms:"
operator|<<
operator|(
name|rate
operator|/
literal|1024.0
operator|/
literal|1024
operator|*
literal|1000
operator|)
operator|<<
literal|"MB/s"
expr_stmt|;
block|}
block|}
name|qDebug
argument_list|()
operator|<<
literal|"Average transfer rate was"
operator|<<
operator|(
name|totalBytes
operator|/
literal|1024.0
operator|/
literal|1024
operator|*
literal|1000
operator|/
name|outerTimer
operator|.
name|elapsed
argument_list|()
operator|)
operator|<<
literal|"MB/s"
expr_stmt|;
block|}
end_function
begin_expr_stmt
DECL|variable|tst_NetworkStressTest
name|QTEST_MAIN
argument_list|(
name|tst_NetworkStressTest
argument_list|)
expr_stmt|;
end_expr_stmt
begin_include
include|#
directive|include
file|"tst_network_stresstest.moc"
end_include
end_unit
