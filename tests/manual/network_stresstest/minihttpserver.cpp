begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"minihttpserver.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/QFile>
end_include
begin_include
include|#
directive|include
file|<QtCore/QSemaphore>
end_include
begin_include
include|#
directive|include
file|<QtCore/QUrl>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/QTcpServer>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/QTcpSocket>
end_include
begin_constructor
DECL|function|MiniHttpServer
name|MiniHttpServer
operator|::
name|MiniHttpServer
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QThread
argument_list|(
name|parent
argument_list|)
block|{
name|readyToGo
operator|=
operator|new
name|QSemaphore
expr_stmt|;
name|start
argument_list|()
expr_stmt|;
name|readyToGo
operator|->
name|acquire
argument_list|()
expr_stmt|;
operator|delete
name|readyToGo
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~MiniHttpServer
name|MiniHttpServer
operator|::
name|~
name|MiniHttpServer
parameter_list|()
block|{
name|quitObject
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
name|wait
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|run
name|void
name|MiniHttpServer
operator|::
name|run
parameter_list|()
block|{
name|server
operator|=
operator|new
name|QTcpServer
expr_stmt|;
name|server
operator|->
name|listen
argument_list|(
name|QHostAddress
operator|::
name|LocalHost
argument_list|)
expr_stmt|;
name|portnum
operator|=
name|server
operator|->
name|serverPort
argument_list|()
expr_stmt|;
name|connect
argument_list|(
name|server
argument_list|,
name|SIGNAL
argument_list|(
name|newConnection
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|handleConnection
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|)
expr_stmt|;
name|quitObject
operator|=
operator|new
name|QObject
expr_stmt|;
name|connect
argument_list|(
name|quitObject
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|)
expr_stmt|;
name|readyToGo
operator|->
name|release
argument_list|()
expr_stmt|;
name|exec
argument_list|()
expr_stmt|;
comment|// cleanup
operator|delete
name|server
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleConnection
name|void
name|MiniHttpServer
operator|::
name|handleConnection
parameter_list|()
block|{
while|while
condition|(
name|server
operator|->
name|hasPendingConnections
argument_list|()
condition|)
block|{
name|QTcpSocket
modifier|*
name|socket
init|=
name|server
operator|->
name|nextPendingConnection
argument_list|()
decl_stmt|;
operator|new
name|MiniHttpServerConnection
argument_list|(
name|socket
argument_list|)
expr_stmt|;
comment|// handles its own lifetime
block|}
block|}
end_function
begin_constructor
DECL|function|MiniHttpServerConnection
name|MiniHttpServerConnection
operator|::
name|MiniHttpServerConnection
parameter_list|(
name|QTcpSocket
modifier|*
name|socket
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|socket
argument_list|)
member_init_list|,
name|socket
argument_list|(
name|socket
argument_list|)
member_init_list|,
name|source
argument_list|(
literal|0
argument_list|)
block|{
name|connect
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|handleReadyRead
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|bytesWritten
argument_list|(
name|qint64
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|handleBytesWritten
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|disconnected
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|handleDisconnected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|timeout
operator|.
name|setInterval
argument_list|(
literal|30000
argument_list|)
expr_stmt|;
name|timeout
operator|.
name|setSingleShot
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|timeout
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|handleTimeout
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|timeout
operator|.
name|start
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|sendError500
name|void
name|MiniHttpServerConnection
operator|::
name|sendError500
parameter_list|()
block|{
specifier|static
specifier|const
name|char
name|body
index|[]
init|=
literal|"HTTP/1.1 500 Server Error\r\n"
literal|"Connection: close\r\n"
literal|"Content-Length: 0\r\n"
literal|"\r\n"
decl_stmt|;
name|socket
operator|->
name|write
argument_list|(
name|body
argument_list|,
name|strlen
argument_list|(
name|body
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|->
name|disconnectFromHost
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendError404
name|void
name|MiniHttpServerConnection
operator|::
name|sendError404
parameter_list|()
block|{
specifier|static
specifier|const
name|char
name|body1
index|[]
init|=
literal|"HTTP/1.1 404 File not found\r\n"
literal|"Content-Length: 0\r\n"
decl_stmt|;
name|socket
operator|->
name|write
argument_list|(
name|body1
argument_list|,
name|strlen
argument_list|(
name|body1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|connectionClose
condition|)
block|{
name|socket
operator|->
name|write
argument_list|(
literal|"Connection: close\r\n\r\n"
argument_list|)
expr_stmt|;
name|socket
operator|->
name|disconnectFromHost
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|socket
operator|->
name|write
argument_list|(
literal|"\r\n"
argument_list|)
expr_stmt|;
name|handlePendingRequest
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|handlePendingRequest
name|void
name|MiniHttpServerConnection
operator|::
name|handlePendingRequest
parameter_list|()
block|{
name|int
name|endOfRequest
init|=
name|buffer
operator|.
name|indexOf
argument_list|(
literal|"\r\n\r\n"
argument_list|)
decl_stmt|;
if|if
condition|(
name|endOfRequest
operator|==
operator|-
literal|1
condition|)
return|return;
comment|// nothing to do
name|QByteArray
name|request
init|=
name|buffer
operator|.
name|left
argument_list|(
name|endOfRequest
argument_list|)
decl_stmt|;
name|buffer
operator|=
name|buffer
operator|.
name|mid
argument_list|(
name|endOfRequest
operator|+
literal|4
argument_list|)
expr_stmt|;
comment|//qDebug("request: %s", request.constData());
if|if
condition|(
operator|!
name|request
operator|.
name|startsWith
argument_list|(
literal|"GET "
argument_list|)
condition|)
block|{
name|sendError500
argument_list|()
expr_stmt|;
return|return;
block|}
name|int
name|eol
init|=
name|request
operator|.
name|indexOf
argument_list|(
literal|"\r\n"
argument_list|)
decl_stmt|;
specifier|static
specifier|const
name|char
name|http11
index|[]
init|=
literal|" HTTP/1.1"
decl_stmt|;
if|if
condition|(
name|memcmp
argument_list|(
name|request
operator|.
name|data
argument_list|()
operator|+
name|eol
operator|-
name|strlen
argument_list|(
name|http11
argument_list|)
argument_list|,
name|http11
argument_list|,
name|strlen
argument_list|(
name|http11
argument_list|)
argument_list|)
operator|!=
literal|0
condition|)
block|{
name|sendError500
argument_list|()
expr_stmt|;
return|return;
block|}
name|QUrl
name|uri
init|=
name|QUrl
operator|::
name|fromEncoded
argument_list|(
name|request
operator|.
name|mid
argument_list|(
literal|4
argument_list|,
name|eol
operator|-
name|int
argument_list|(
name|strlen
argument_list|(
name|http11
argument_list|)
argument_list|)
operator|-
literal|4
argument_list|)
argument_list|)
decl_stmt|;
name|source
operator|.
name|setFileName
argument_list|(
literal|":"
operator|+
name|uri
operator|.
name|path
argument_list|()
argument_list|)
expr_stmt|;
comment|// connection-close?
name|request
operator|=
name|request
operator|.
name|toLower
argument_list|()
expr_stmt|;
name|connectionClose
operator|=
name|request
operator|.
name|contains
argument_list|(
literal|"\r\nconnection: close\r\n"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|source
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|sendError404
argument_list|()
expr_stmt|;
return|return;
block|}
comment|// success
name|timeout
operator|.
name|stop
argument_list|()
expr_stmt|;
specifier|static
specifier|const
name|char
name|body
index|[]
init|=
literal|"HTTP/1.1 200 Ok\r\n"
literal|"Content-Type: text/plain\r\n"
literal|"Content-Length: "
decl_stmt|;
name|socket
operator|->
name|write
argument_list|(
name|body
argument_list|,
name|strlen
argument_list|(
name|body
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|->
name|write
argument_list|(
name|QByteArray
operator|::
name|number
argument_list|(
name|source
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|connectionClose
condition|)
name|socket
operator|->
name|write
argument_list|(
literal|"\r\nConnection: close"
argument_list|)
expr_stmt|;
name|socket
operator|->
name|write
argument_list|(
literal|"\r\n\r\n"
argument_list|)
expr_stmt|;
name|handleBytesWritten
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleReadyRead
name|void
name|MiniHttpServerConnection
operator|::
name|handleReadyRead
parameter_list|()
block|{
name|buffer
operator|+=
name|socket
operator|->
name|readAll
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|source
operator|.
name|isOpen
argument_list|()
condition|)
name|handlePendingRequest
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|handleDisconnected
name|void
name|MiniHttpServerConnection
operator|::
name|handleDisconnected
parameter_list|()
block|{
name|socket
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
comment|// will delete us too
block|}
end_function
begin_function
DECL|function|handleBytesWritten
name|void
name|MiniHttpServerConnection
operator|::
name|handleBytesWritten
parameter_list|()
block|{
name|qint64
name|maxBytes
init|=
name|qMin
argument_list|<
name|qint64
argument_list|>
argument_list|(
literal|128
operator|*
literal|1024
argument_list|,
name|source
operator|.
name|bytesAvailable
argument_list|()
argument_list|)
decl_stmt|;
name|maxBytes
operator|=
name|qMin
argument_list|(
name|maxBytes
argument_list|,
literal|128
operator|*
literal|1024
operator|-
name|socket
operator|->
name|bytesToWrite
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|maxBytes
operator|<
literal|0
condition|)
return|return;
name|socket
operator|->
name|write
argument_list|(
name|source
operator|.
name|read
argument_list|(
name|maxBytes
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|source
operator|.
name|atEnd
argument_list|()
condition|)
block|{
comment|// file ended
name|source
operator|.
name|close
argument_list|()
expr_stmt|;
if|if
condition|(
name|connectionClose
condition|)
block|{
name|socket
operator|->
name|disconnectFromHost
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|timeout
operator|.
name|start
argument_list|()
expr_stmt|;
name|handlePendingRequest
argument_list|()
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|handleTimeout
name|void
name|MiniHttpServerConnection
operator|::
name|handleTimeout
parameter_list|()
block|{
name|socket
operator|->
name|disconnectFromHost
argument_list|()
expr_stmt|;
block|}
end_function
end_unit
