begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"gestures.h"
end_include
begin_include
include|#
directive|include
file|<QTouchEvent>
end_include
begin_decl_stmt
DECL|member|Type
name|Qt
operator|::
name|GestureType
name|ThreeFingerSlideGesture
operator|::
name|Type
init|=
name|Qt
operator|::
name|CustomGesture
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|create
name|QGesture
modifier|*
name|ThreeFingerSlideGestureRecognizer
operator|::
name|create
parameter_list|(
name|QObject
modifier|*
parameter_list|)
block|{
return|return
operator|new
name|ThreeFingerSlideGesture
return|;
block|}
end_function
begin_function
DECL|function|recognize
name|QGestureRecognizer
operator|::
name|Result
name|ThreeFingerSlideGestureRecognizer
operator|::
name|recognize
parameter_list|(
name|QGesture
modifier|*
name|state
parameter_list|,
name|QObject
modifier|*
parameter_list|,
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|ThreeFingerSlideGesture
modifier|*
name|d
init|=
cast|static_cast
argument_list|<
name|ThreeFingerSlideGesture
operator|*
argument_list|>
argument_list|(
name|state
argument_list|)
decl_stmt|;
name|QGestureRecognizer
operator|::
name|Result
name|result
decl_stmt|;
switch|switch
condition|(
name|event
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|TouchBegin
case|:
name|result
operator|=
name|QGestureRecognizer
operator|::
name|MayBeGesture
expr_stmt|;
case|case
name|QEvent
operator|::
name|TouchEnd
case|:
if|if
condition|(
name|d
operator|->
name|gestureFired
condition|)
name|result
operator|=
name|QGestureRecognizer
operator|::
name|FinishGesture
expr_stmt|;
else|else
name|result
operator|=
name|QGestureRecognizer
operator|::
name|CancelGesture
expr_stmt|;
case|case
name|QEvent
operator|::
name|TouchUpdate
case|:
if|if
condition|(
name|d
operator|->
name|state
argument_list|()
operator|!=
name|Qt
operator|::
name|NoGesture
condition|)
block|{
name|QTouchEvent
modifier|*
name|ev
init|=
cast|static_cast
argument_list|<
name|QTouchEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
if|if
condition|(
name|ev
operator|->
name|touchPoints
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|3
condition|)
block|{
name|d
operator|->
name|gestureFired
operator|=
literal|true
expr_stmt|;
name|result
operator|=
name|QGestureRecognizer
operator|::
name|TriggerGesture
expr_stmt|;
block|}
else|else
block|{
name|result
operator|=
name|QGestureRecognizer
operator|::
name|MayBeGesture
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|ev
operator|->
name|touchPoints
argument_list|()
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QTouchEvent
operator|::
name|TouchPoint
modifier|&
name|pt
init|=
name|ev
operator|->
name|touchPoints
argument_list|()
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
specifier|const
name|int
name|distance
init|=
operator|(
name|pt
operator|.
name|pos
argument_list|()
operator|.
name|toPoint
argument_list|()
operator|-
name|pt
operator|.
name|startPos
argument_list|()
operator|.
name|toPoint
argument_list|()
operator|)
operator|.
name|manhattanLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|distance
operator|>
literal|20
condition|)
block|{
name|result
operator|=
name|QGestureRecognizer
operator|::
name|CancelGesture
expr_stmt|;
block|}
block|}
block|}
block|}
else|else
block|{
name|result
operator|=
name|QGestureRecognizer
operator|::
name|CancelGesture
expr_stmt|;
block|}
break|break;
case|case
name|QEvent
operator|::
name|MouseButtonPress
case|:
case|case
name|QEvent
operator|::
name|MouseButtonRelease
case|:
case|case
name|QEvent
operator|::
name|MouseMove
case|:
if|if
condition|(
name|d
operator|->
name|state
argument_list|()
operator|!=
name|Qt
operator|::
name|NoGesture
condition|)
name|result
operator|=
name|QGestureRecognizer
operator|::
name|Ignore
expr_stmt|;
else|else
name|result
operator|=
name|QGestureRecognizer
operator|::
name|CancelGesture
expr_stmt|;
break|break;
default|default:
name|result
operator|=
name|QGestureRecognizer
operator|::
name|Ignore
expr_stmt|;
break|break;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|reset
name|void
name|ThreeFingerSlideGestureRecognizer
operator|::
name|reset
parameter_list|(
name|QGesture
modifier|*
name|state
parameter_list|)
block|{
cast|static_cast
argument_list|<
name|ThreeFingerSlideGesture
operator|*
argument_list|>
argument_list|(
name|state
argument_list|)
operator|->
name|gestureFired
operator|=
literal|false
expr_stmt|;
name|QGestureRecognizer
operator|::
name|reset
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|create
name|QGesture
modifier|*
name|RotateGestureRecognizer
operator|::
name|create
parameter_list|(
name|QObject
modifier|*
parameter_list|)
block|{
return|return
operator|new
name|QGesture
return|;
block|}
end_function
begin_function
DECL|function|recognize
name|QGestureRecognizer
operator|::
name|Result
name|RotateGestureRecognizer
operator|::
name|recognize
parameter_list|(
name|QGesture
modifier|*
parameter_list|,
name|QObject
modifier|*
parameter_list|,
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|event
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|TouchBegin
case|:
case|case
name|QEvent
operator|::
name|TouchEnd
case|:
case|case
name|QEvent
operator|::
name|TouchUpdate
case|:
break|break;
default|default:
break|break;
block|}
return|return
name|QGestureRecognizer
operator|::
name|Ignore
return|;
block|}
end_function
begin_function
DECL|function|reset
name|void
name|RotateGestureRecognizer
operator|::
name|reset
parameter_list|(
name|QGesture
modifier|*
name|state
parameter_list|)
block|{
name|QGestureRecognizer
operator|::
name|reset
argument_list|(
name|state
argument_list|)
expr_stmt|;
block|}
end_function
begin_include
include|#
directive|include
file|"moc_gestures.cpp"
end_include
end_unit
