begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QApplication>
end_include
begin_include
include|#
directive|include
file|<QDialog>
end_include
begin_include
include|#
directive|include
file|<QFontDatabase>
end_include
begin_include
include|#
directive|include
file|<QPainter>
end_include
begin_include
include|#
directive|include
file|<QTime>
end_include
begin_include
include|#
directive|include
file|<QTimer>
end_include
begin_decl_stmt
DECL|variable|lastMeasurementsCount
specifier|static
specifier|const
name|int
name|lastMeasurementsCount
init|=
literal|50
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|FontBlaster
class|class
name|FontBlaster
super|:
specifier|public
name|QWidget
block|{
name|Q_OBJECT
public|public:
DECL|function|FontBlaster
name|FontBlaster
parameter_list|(
name|QWidget
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|m_currentMode
argument_list|(
literal|0
argument_list|)
block|{
name|setFocusPolicy
argument_list|(
name|Qt
operator|::
name|StrongFocus
argument_list|)
expr_stmt|;
block|}
DECL|function|paintEvent
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|QPainter
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m_timer
operator|.
name|isNull
argument_list|()
condition|)
name|m_lastMeasurements
operator|.
name|append
argument_list|(
name|m_timer
operator|.
name|elapsed
argument_list|()
argument_list|)
expr_stmt|;
name|m_timer
operator|.
name|start
argument_list|()
expr_stmt|;
name|p
operator|.
name|save
argument_list|()
expr_stmt|;
name|m_modes
index|[
name|m_currentMode
index|]
operator|.
name|function
argument_list|(
name|p
argument_list|,
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|p
operator|.
name|restore
argument_list|()
expr_stmt|;
specifier|const
name|QFontMetrics
name|fm
init|=
name|p
operator|.
name|fontMetrics
argument_list|()
decl_stmt|;
name|p
operator|.
name|setOpacity
argument_list|(
literal|0.7
argument_list|)
expr_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|width
argument_list|()
argument_list|,
name|fm
operator|.
name|height
argument_list|()
argument_list|,
name|Qt
operator|::
name|gray
argument_list|)
expr_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
name|height
argument_list|()
operator|-
name|fm
operator|.
name|height
argument_list|()
argument_list|,
name|width
argument_list|()
argument_list|,
name|height
argument_list|()
argument_list|,
name|Qt
operator|::
name|gray
argument_list|)
expr_stmt|;
name|p
operator|.
name|setOpacity
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPen
argument_list|(
name|palette
argument_list|()
operator|.
name|color
argument_list|(
name|QPalette
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawText
argument_list|(
literal|2
argument_list|,
name|fm
operator|.
name|ascent
argument_list|()
argument_list|,
name|m_modes
index|[
name|m_currentMode
index|]
operator|.
name|name
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_lastMeasurements
operator|.
name|count
argument_list|()
operator|==
name|lastMeasurementsCount
condition|)
block|{
name|m_lastMeasurements
operator|.
name|removeFirst
argument_list|()
expr_stmt|;
name|int
name|lastMsecsSum
init|=
literal|0
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|int
name|measurement
decl|,
name|m_lastMeasurements
control|)
name|lastMsecsSum
operator|+=
name|measurement
expr_stmt|;
name|p
operator|.
name|drawText
argument_list|(
literal|2
argument_list|,
name|height
argument_list|()
operator|-
name|fm
operator|.
name|descent
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"Fps: "
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
literal|1000
operator|/
operator|(
operator|(
name|qreal
operator|)
name|lastMsecsSum
operator|/
name|lastMeasurementsCount
operator|)
argument_list|,
literal|'f'
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|0
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|repaint
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|/*       Creating all kinds of size/weight/italic combinations, stress testing       the glyph cache.       Also: painting with different opacities, stress testing blitting.     */
DECL|function|paintDifferentFontStyles
specifier|static
name|void
name|paintDifferentFontStyles
parameter_list|(
name|QPainter
modifier|&
name|p
parameter_list|,
specifier|const
name|QSize
modifier|&
name|size
parameter_list|)
block|{
specifier|static
specifier|const
name|QString
name|text
init|=
name|QLatin1String
argument_list|(
literal|"Qt rocks!!!"
argument_list|)
decl_stmt|;
specifier|static
specifier|const
name|int
name|textsPerPaint
init|=
literal|30
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|textsPerPaint
condition|;
name|i
operator|++
control|)
block|{
specifier|const
name|int
name|fontSize
init|=
literal|4
operator|+
operator|(
name|qrand
argument_list|()
operator|%
literal|5
operator|)
decl_stmt|;
specifier|const
name|int
name|fontWeight
init|=
operator|(
name|qrand
argument_list|()
operator|%
literal|2
operator|)
operator|==
literal|1
condition|?
name|QFont
operator|::
name|Normal
else|:
name|QFont
operator|::
name|Bold
decl_stmt|;
specifier|const
name|bool
name|fontItalic
init|=
operator|(
name|qrand
argument_list|()
operator|%
literal|2
operator|)
operator|==
literal|1
decl_stmt|;
specifier|const
name|QFont
name|font
argument_list|(
literal|"Default"
argument_list|,
name|fontSize
argument_list|,
name|fontWeight
argument_list|,
name|fontItalic
argument_list|)
decl_stmt|;
name|p
operator|.
name|setFont
argument_list|(
name|font
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPen
argument_list|(
name|QColor
operator|::
name|fromHsv
argument_list|(
name|qrand
argument_list|()
operator|%
literal|359
argument_list|,
literal|155
operator|+
name|qrand
argument_list|()
operator|%
literal|100
argument_list|,
literal|155
operator|+
name|qrand
argument_list|()
operator|%
literal|100
argument_list|,
literal|100
operator|+
name|qrand
argument_list|()
operator|%
literal|155
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QSize
name|textSize
argument_list|(
name|p
operator|.
name|fontMetrics
argument_list|()
operator|.
name|boundingRect
argument_list|(
name|text
argument_list|)
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QPoint
name|position
argument_list|(
operator|-
name|textSize
operator|.
name|width
argument_list|()
operator|/
literal|2
operator|+
operator|(
name|qrand
argument_list|()
operator|%
name|size
operator|.
name|width
argument_list|()
operator|)
argument_list|,
name|textSize
operator|.
name|height
argument_list|()
operator|/
literal|2
operator|+
operator|(
name|qrand
argument_list|()
operator|%
name|size
operator|.
name|height
argument_list|()
operator|)
argument_list|)
decl_stmt|;
name|p
operator|.
name|drawText
argument_list|(
name|position
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
block|}
comment|/*       Drawing a multiline latin text, stress testing the text layout system.     */
DECL|function|paintLongLatinText
specifier|static
name|void
name|paintLongLatinText
parameter_list|(
name|QPainter
modifier|&
name|p
parameter_list|,
specifier|const
name|QSize
modifier|&
name|size
parameter_list|)
block|{
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|pieces
index|[]
init|=
block|{
literal|"lorem ipsum"
block|,
literal|"dolor sit amet"
block|,
literal|"consectetuer"
block|,
literal|"sed diam nonumy"
block|,
literal|"eos et accusam"
block|,
literal|"sea takimata sanctus"
block|}
decl_stmt|;
specifier|static
specifier|const
name|int
name|piecesCount
init|=
call|(
name|int
call|)
argument_list|(
sizeof|sizeof
name|pieces
operator|/
sizeof|sizeof
name|pieces
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
specifier|static
specifier|const
name|int
name|piecesPerPaint
init|=
literal|30
decl_stmt|;
name|QString
name|text
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|piecesPerPaint
condition|;
operator|++
name|i
control|)
block|{
name|QString
name|piece
init|=
name|QLatin1String
argument_list|(
name|pieces
index|[
name|qrand
argument_list|()
operator|%
name|piecesCount
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|0
operator|||
name|qrand
argument_list|()
operator|%
literal|2
condition|)
block|{
comment|// Make this piece the beginning of a new sentence.
name|piece
index|[
literal|0
index|]
operator|=
name|piece
index|[
literal|0
index|]
operator|.
name|toUpper
argument_list|()
expr_stmt|;
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|piece
operator|.
name|prepend
argument_list|(
name|QLatin1String
argument_list|(
literal|". "
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|piece
operator|.
name|prepend
argument_list|(
name|QLatin1String
argument_list|(
literal|", "
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|text
operator|.
name|append
argument_list|(
name|piece
argument_list|)
expr_stmt|;
block|}
name|text
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawText
argument_list|(
name|QRectF
argument_list|(
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QSizeF
argument_list|(
name|size
argument_list|)
argument_list|)
argument_list|,
name|Qt
operator|::
name|AlignTop
operator||
name|Qt
operator|::
name|AlignAbsolute
operator||
name|Qt
operator|::
name|TextWordWrap
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
comment|/*       Drawing one text with several snippets of different writingSystems, stress       testing the font merging in the font database.     */
DECL|function|paintInternationalText
specifier|static
name|void
name|paintInternationalText
parameter_list|(
name|QPainter
modifier|&
name|p
parameter_list|,
specifier|const
name|QSize
modifier|&
name|size
parameter_list|)
block|{
specifier|static
name|QStringList
name|samples
decl_stmt|;
if|if
condition|(
name|samples
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
foreach|foreach
control|(
specifier|const
name|QFontDatabase
operator|::
name|WritingSystem
name|system
decl|,
name|QFontDatabase
argument_list|()
operator|.
name|writingSystems
argument_list|()
control|)
if|if
condition|(
name|system
operator|!=
name|QFontDatabase
operator|::
name|Ogham
operator|&&
name|system
operator|!=
name|QFontDatabase
operator|::
name|Runic
condition|)
name|samples
operator|.
name|append
argument_list|(
name|QFontDatabase
operator|::
name|writingSystemSample
argument_list|(
name|system
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|static
specifier|const
name|int
name|systemsPerPaint
init|=
literal|65
decl_stmt|;
name|QString
name|text
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|systemsPerPaint
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|i
operator|>
literal|0
condition|)
name|text
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
expr_stmt|;
name|text
operator|.
name|append
argument_list|(
name|samples
operator|.
name|at
argument_list|(
name|qrand
argument_list|()
operator|%
name|samples
operator|.
name|count
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|p
operator|.
name|drawText
argument_list|(
name|QRectF
argument_list|(
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QSizeF
argument_list|(
name|size
argument_list|)
argument_list|)
argument_list|,
name|Qt
operator|::
name|AlignTop
operator||
name|Qt
operator|::
name|AlignAbsolute
operator||
name|Qt
operator|::
name|TextWordWrap
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
protected|protected:
DECL|function|nextMode
name|void
name|nextMode
parameter_list|()
block|{
name|m_currentMode
operator|=
operator|(
name|m_currentMode
operator|+
literal|1
operator|)
operator|%
name|m_modesCount
expr_stmt|;
name|m_lastMeasurements
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|function|keyPressEvent
name|void
name|keyPressEvent
parameter_list|(
name|QKeyEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|nextMode
argument_list|()
expr_stmt|;
block|}
DECL|function|mousePressEvent
name|void
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|nextMode
argument_list|()
expr_stmt|;
block|}
private|private:
DECL|struct|mode
specifier|static
specifier|const
struct|struct
name|mode
block|{
DECL|member|name
name|QString
name|name
decl_stmt|;
DECL|member|function
name|void
function_decl|(
modifier|*
name|function
function_decl|)
parameter_list|(
name|QPainter
modifier|&
parameter_list|,
specifier|const
name|QSize
modifier|&
parameter_list|)
function_decl|;
DECL|member|m_modes
block|}
name|m_modes
index|[]
struct|;
DECL|member|m_modesCount
specifier|static
specifier|const
name|int
name|m_modesCount
decl_stmt|;
DECL|member|m_currentMode
name|int
name|m_currentMode
decl_stmt|;
DECL|member|m_lastMeasurements
name|QList
argument_list|<
name|int
argument_list|>
name|m_lastMeasurements
decl_stmt|;
DECL|member|m_timer
name|QTime
name|m_timer
decl_stmt|;
block|}
class|;
end_class
begin_decl_stmt
DECL|member|m_modes
specifier|const
name|struct
name|FontBlaster
operator|::
name|mode
name|FontBlaster
operator|::
name|m_modes
index|[]
init|=
block|{
block|{
name|QLatin1String
argument_list|(
literal|"Qt rocks!!!"
argument_list|)
block|,
name|FontBlaster
operator|::
name|paintDifferentFontStyles
block|}
block|,
block|{
name|QLatin1String
argument_list|(
literal|"Latin"
argument_list|)
block|,
name|FontBlaster
operator|::
name|paintLongLatinText
block|}
block|,
block|{
name|QLatin1String
argument_list|(
literal|"International"
argument_list|)
block|,
name|FontBlaster
operator|::
name|paintInternationalText
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|m_modesCount
specifier|const
name|int
name|FontBlaster
operator|::
name|m_modesCount
init|=
call|(
name|int
call|)
argument_list|(
sizeof|sizeof
name|m_modes
operator|/
sizeof|sizeof
name|m_modes
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
name|argv
index|[]
parameter_list|)
block|{
name|QApplication
name|a
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|FontBlaster
name|dlg
decl_stmt|;
name|dlg
operator|.
name|show
argument_list|()
expr_stmt|;
return|return
name|a
operator|.
name|exec
argument_list|()
return|;
block|}
end_function
begin_include
include|#
directive|include
file|"main.moc"
end_include
end_unit
