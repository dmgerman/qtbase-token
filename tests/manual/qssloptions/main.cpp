begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:GPL-EXCEPT$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3 as published by the Free Software ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtNetwork/qsslconfiguration.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QtCore/QTextStream>
end_include
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
modifier|*
name|argv
parameter_list|)
block|{
name|QCoreApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
if|if
condition|(
name|argc
operator|<
literal|3
condition|)
block|{
name|QTextStream
name|out
argument_list|(
name|stdout
argument_list|)
decl_stmt|;
name|out
operator|<<
literal|"Usage: "
operator|<<
name|argv
index|[
literal|0
index|]
operator|<<
literal|" host port [options]"
operator|<<
name|endl
expr_stmt|;
name|out
operator|<<
literal|"The options can be one or more of the following:"
operator|<<
name|endl
expr_stmt|;
name|out
operator|<<
literal|"enable_empty_fragments"
operator|<<
name|endl
expr_stmt|;
name|out
operator|<<
literal|"disable_session_tickets"
operator|<<
name|endl
expr_stmt|;
name|out
operator|<<
literal|"disable_compression"
operator|<<
name|endl
expr_stmt|;
name|out
operator|<<
literal|"disable_sni"
operator|<<
name|endl
expr_stmt|;
name|out
operator|<<
literal|"enable_unsafe_reneg"
operator|<<
name|endl
expr_stmt|;
return|return
literal|1
return|;
block|}
name|QString
name|host
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|argv
index|[
literal|1
index|]
argument_list|)
decl_stmt|;
name|int
name|port
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|argv
index|[
literal|2
index|]
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|QSslConfiguration
name|config
init|=
name|QSslConfiguration
operator|::
name|defaultConfiguration
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|3
init|;
name|i
operator|<
name|argc
condition|;
name|i
operator|++
control|)
block|{
name|QString
name|option
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|)
decl_stmt|;
if|if
condition|(
name|option
operator|==
name|QStringLiteral
argument_list|(
literal|"enable_empty_fragments"
argument_list|)
condition|)
name|config
operator|.
name|setSslOption
argument_list|(
name|QSsl
operator|::
name|SslOptionDisableEmptyFragments
argument_list|,
literal|false
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|==
name|QStringLiteral
argument_list|(
literal|"disable_session_tickets"
argument_list|)
condition|)
name|config
operator|.
name|setSslOption
argument_list|(
name|QSsl
operator|::
name|SslOptionDisableSessionTickets
argument_list|,
literal|true
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|==
name|QStringLiteral
argument_list|(
literal|"disable_compression"
argument_list|)
condition|)
name|config
operator|.
name|setSslOption
argument_list|(
name|QSsl
operator|::
name|SslOptionDisableCompression
argument_list|,
literal|true
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|==
name|QStringLiteral
argument_list|(
literal|"disable_sni"
argument_list|)
condition|)
name|config
operator|.
name|setSslOption
argument_list|(
name|QSsl
operator|::
name|SslOptionDisableServerNameIndication
argument_list|,
literal|true
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|option
operator|==
name|QStringLiteral
argument_list|(
literal|"enable_unsafe_reneg"
argument_list|)
condition|)
name|config
operator|.
name|setSslOption
argument_list|(
name|QSsl
operator|::
name|SslOptionDisableLegacyRenegotiation
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
name|QSslConfiguration
operator|::
name|setDefaultConfiguration
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|QSslSocket
name|socket
decl_stmt|;
comment|//socket.setSslConfiguration(config);
name|socket
operator|.
name|connectToHostEncrypted
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|socket
operator|.
name|waitForEncrypted
argument_list|()
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
name|socket
operator|.
name|errorString
argument_list|()
expr_stmt|;
return|return
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
end_unit
