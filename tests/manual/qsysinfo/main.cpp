begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 Intel Corporation. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:GPL-EXCEPT$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3 as published by the Free Software ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QSysInfo>
end_include
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_comment
comment|// I'm lazy
end_comment
begin_define
DECL|macro|CASE_VERSION
define|#
directive|define
name|CASE_VERSION
parameter_list|(
name|v
parameter_list|)
value|case QSysInfo::v:   return QT_STRINGIFY(v)
end_define
begin_function
DECL|function|windowsVersionToString
name|QByteArray
name|windowsVersionToString
parameter_list|(
name|QSysInfo
operator|::
name|WinVersion
name|v
parameter_list|)
block|{
switch|switch
condition|(
name|v
condition|)
block|{
name|CASE_VERSION
argument_list|(
name|WV_None
argument_list|)
expr_stmt|;
name|CASE_VERSION
argument_list|(
name|WV_32s
argument_list|)
expr_stmt|;
name|CASE_VERSION
argument_list|(
name|WV_95
argument_list|)
expr_stmt|;
name|CASE_VERSION
argument_list|(
name|WV_98
argument_list|)
expr_stmt|;
name|CASE_VERSION
argument_list|(
name|WV_Me
argument_list|)
expr_stmt|;
case|case
name|QSysInfo
operator|::
name|WV_DOS_based
case|:
comment|// shouldn't happen
break|break;
name|CASE_VERSION
argument_list|(
name|WV_NT
argument_list|)
expr_stmt|;
name|CASE_VERSION
argument_list|(
name|WV_2000
argument_list|)
expr_stmt|;
name|CASE_VERSION
argument_list|(
name|WV_XP
argument_list|)
expr_stmt|;
name|CASE_VERSION
argument_list|(
name|WV_2003
argument_list|)
expr_stmt|;
name|CASE_VERSION
argument_list|(
name|WV_VISTA
argument_list|)
expr_stmt|;
name|CASE_VERSION
argument_list|(
name|WV_WINDOWS7
argument_list|)
expr_stmt|;
name|CASE_VERSION
argument_list|(
name|WV_WINDOWS8
argument_list|)
expr_stmt|;
name|CASE_VERSION
argument_list|(
name|WV_WINDOWS8_1
argument_list|)
expr_stmt|;
name|CASE_VERSION
argument_list|(
name|WV_WINDOWS10
argument_list|)
expr_stmt|;
case|case
name|QSysInfo
operator|::
name|WV_NT_based
case|:
comment|// shouldn't happen
break|break;
name|CASE_VERSION
argument_list|(
name|WV_CE
argument_list|)
expr_stmt|;
name|CASE_VERSION
argument_list|(
name|WV_CENET
argument_list|)
expr_stmt|;
name|CASE_VERSION
argument_list|(
name|WV_CE_5
argument_list|)
expr_stmt|;
name|CASE_VERSION
argument_list|(
name|WV_CE_6
argument_list|)
expr_stmt|;
case|case
name|QSysInfo
operator|::
name|WV_CE_based
case|:
comment|// shouldn't happen
break|break;
block|}
return|return
literal|"WinVersion(0x"
operator|+
name|QByteArray
operator|::
name|number
argument_list|(
name|v
argument_list|,
literal|16
argument_list|)
operator|+
literal|')'
return|;
block|}
end_function
begin_function
DECL|function|macVersionToString
name|QByteArray
name|macVersionToString
parameter_list|(
name|QSysInfo
operator|::
name|MacVersion
name|v
parameter_list|)
block|{
switch|switch
condition|(
name|v
condition|)
block|{
name|CASE_VERSION
argument_list|(
name|MV_None
argument_list|)
expr_stmt|;
name|CASE_VERSION
argument_list|(
name|MV_Unknown
argument_list|)
expr_stmt|;
name|CASE_VERSION
argument_list|(
name|MV_9
argument_list|)
expr_stmt|;
name|CASE_VERSION
argument_list|(
name|MV_10_0
argument_list|)
expr_stmt|;
name|CASE_VERSION
argument_list|(
name|MV_10_1
argument_list|)
expr_stmt|;
name|CASE_VERSION
argument_list|(
name|MV_10_2
argument_list|)
expr_stmt|;
name|CASE_VERSION
argument_list|(
name|MV_10_3
argument_list|)
expr_stmt|;
name|CASE_VERSION
argument_list|(
name|MV_10_4
argument_list|)
expr_stmt|;
name|CASE_VERSION
argument_list|(
name|MV_10_5
argument_list|)
expr_stmt|;
name|CASE_VERSION
argument_list|(
name|MV_10_6
argument_list|)
expr_stmt|;
name|CASE_VERSION
argument_list|(
name|MV_10_7
argument_list|)
expr_stmt|;
name|CASE_VERSION
argument_list|(
name|MV_10_8
argument_list|)
expr_stmt|;
name|CASE_VERSION
argument_list|(
name|MV_10_9
argument_list|)
expr_stmt|;
name|CASE_VERSION
argument_list|(
name|MV_10_10
argument_list|)
expr_stmt|;
name|CASE_VERSION
argument_list|(
name|MV_IOS_4_3
argument_list|)
expr_stmt|;
name|CASE_VERSION
argument_list|(
name|MV_IOS_5_0
argument_list|)
expr_stmt|;
name|CASE_VERSION
argument_list|(
name|MV_IOS_5_1
argument_list|)
expr_stmt|;
name|CASE_VERSION
argument_list|(
name|MV_IOS_6_0
argument_list|)
expr_stmt|;
name|CASE_VERSION
argument_list|(
name|MV_IOS_6_1
argument_list|)
expr_stmt|;
name|CASE_VERSION
argument_list|(
name|MV_IOS_7_0
argument_list|)
expr_stmt|;
name|CASE_VERSION
argument_list|(
name|MV_IOS_7_1
argument_list|)
expr_stmt|;
name|CASE_VERSION
argument_list|(
name|MV_IOS_8_0
argument_list|)
expr_stmt|;
case|case
name|QSysInfo
operator|::
name|MV_IOS
case|:
comment|// shouldn't happen:
break|break;
block|}
if|if
condition|(
name|v
operator|&
name|QSysInfo
operator|::
name|MV_IOS
condition|)
block|{
name|int
name|major
init|=
operator|(
name|v
operator|>>
literal|4
operator|)
operator|&
literal|0xf
decl_stmt|;
name|int
name|minor
init|=
name|v
operator|&
literal|0xf
decl_stmt|;
return|return
literal|"MacVersion(Q_MV_IOS("
operator|+
name|QByteArray
operator|::
name|number
argument_list|(
name|major
argument_list|)
operator|+
literal|", "
operator|+
name|QByteArray
operator|::
name|number
argument_list|(
name|minor
argument_list|)
operator|+
literal|"))"
return|;
block|}
return|return
literal|"MacVersion(Q_MV_OSX(10, "
operator|+
name|QByteArray
operator|::
name|number
argument_list|(
name|v
operator|-
literal|2
argument_list|)
operator|+
literal|"))"
return|;
block|}
end_function
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
name|argv
index|[]
parameter_list|)
block|{
name|QCoreApplication
name|a
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|printf
argument_list|(
literal|"QSysInfo::WordSize = %d\n"
argument_list|,
name|QSysInfo
operator|::
name|WordSize
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"QSysInfo::ByteOrder = QSysInfo::%sEndian\n"
argument_list|,
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|LittleEndian
condition|?
literal|"Little"
else|:
literal|"Big"
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"QSysInfo::WindowsVersion = QSysInfo::%s\n"
argument_list|,
name|windowsVersionToString
argument_list|(
name|QSysInfo
operator|::
name|WindowsVersion
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"QSysInfo::MacintoshVersion = QSysInfo::%s\n"
argument_list|,
name|macVersionToString
argument_list|(
name|QSysInfo
operator|::
name|MacintoshVersion
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"QSysInfo::buildCpuArchitecture() = %s\n"
argument_list|,
name|qPrintable
argument_list|(
name|QSysInfo
operator|::
name|buildCpuArchitecture
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"QSysInfo::currentCpuArchitecture() = %s\n"
argument_list|,
name|qPrintable
argument_list|(
name|QSysInfo
operator|::
name|currentCpuArchitecture
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"QSysInfo::buildAbi() = %s\n"
argument_list|,
name|qPrintable
argument_list|(
name|QSysInfo
operator|::
name|buildAbi
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"QSysInfo::kernelType() = %s\n"
argument_list|,
name|qPrintable
argument_list|(
name|QSysInfo
operator|::
name|kernelType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"QSysInfo::kernelVersion() = %s\n"
argument_list|,
name|qPrintable
argument_list|(
name|QSysInfo
operator|::
name|kernelVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"QSysInfo::productType() = %s\n"
argument_list|,
name|qPrintable
argument_list|(
name|QSysInfo
operator|::
name|productType
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"QSysInfo::productVersion() = %s\n"
argument_list|,
name|qPrintable
argument_list|(
name|QSysInfo
operator|::
name|productVersion
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"QSysInfo::prettyProductName() = %s\n"
argument_list|,
name|qPrintable
argument_list|(
name|QSysInfo
operator|::
name|prettyProductName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"QSysInfo::machineHostName() = %s\n"
argument_list|,
name|qPrintable
argument_list|(
name|QSysInfo
operator|::
name|machineHostName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
end_unit
