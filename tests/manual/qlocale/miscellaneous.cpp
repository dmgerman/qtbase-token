begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:BSD$ ** You may use this file under the terms of the BSD license as follows: ** ** "Redistribution and use in source and binary forms, with or without ** modification, are permitted provided that the following conditions are ** met: **   * Redistributions of source code must retain the above copyright **     notice, this list of conditions and the following disclaimer. **   * Redistributions in binary form must reproduce the above copyright **     notice, this list of conditions and the following disclaimer in **     the documentation and/or other materials provided with the **     distribution. **   * Neither the name of Nokia Corporation and its Subsidiary(-ies) nor **     the names of its contributors may be used to endorse or promote **     products derived from this software without specific prior written **     permission. ** ** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ** "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT ** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR ** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT ** OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT ** LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, ** DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY ** THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT ** (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE ** OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE." ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"miscellaneous.h"
end_include
begin_constructor
DECL|function|MiscWidget
name|MiscWidget
operator|::
name|MiscWidget
parameter_list|()
block|{
name|QGridLayout
modifier|*
name|l
init|=
operator|new
name|QGridLayout
decl_stmt|;
name|createLineEdit
argument_list|(
literal|"Text to quote:"
argument_list|,
operator|&
name|textToQuoteLabel
argument_list|,
operator|&
name|textToQuote
argument_list|)
expr_stmt|;
name|createLineEdit
argument_list|(
literal|"Standard quotes:"
argument_list|,
operator|&
name|standardQuotedTextLabel
argument_list|,
operator|&
name|standardQuotedText
argument_list|)
expr_stmt|;
name|createLineEdit
argument_list|(
literal|"Alternate quotes:"
argument_list|,
operator|&
name|alternateQuotedTextLabel
argument_list|,
operator|&
name|alternateQuotedText
argument_list|)
expr_stmt|;
name|textToQuote
operator|->
name|setText
argument_list|(
literal|"some text"
argument_list|)
expr_stmt|;
name|createLineEdit
argument_list|(
literal|"Text direction:"
argument_list|,
operator|&
name|textDirectionLabel
argument_list|,
operator|&
name|textDirection
argument_list|)
expr_stmt|;
name|createLineEdit
argument_list|(
literal|"List to separated string:"
argument_list|,
operator|&
name|listToSeparatedStringLabel
argument_list|,
operator|&
name|listToSeparatedStringText
argument_list|)
expr_stmt|;
name|l
operator|->
name|addWidget
argument_list|(
name|textToQuoteLabel
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|l
operator|->
name|addWidget
argument_list|(
name|textToQuote
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|l
operator|->
name|addWidget
argument_list|(
name|standardQuotedTextLabel
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|l
operator|->
name|addWidget
argument_list|(
name|standardQuotedText
argument_list|,
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|l
operator|->
name|addWidget
argument_list|(
name|alternateQuotedTextLabel
argument_list|,
literal|1
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|l
operator|->
name|addWidget
argument_list|(
name|alternateQuotedText
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|l
operator|->
name|addWidget
argument_list|(
name|textDirectionLabel
argument_list|,
literal|2
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|l
operator|->
name|addWidget
argument_list|(
name|textDirection
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|l
operator|->
name|addWidget
argument_list|(
name|listToSeparatedStringLabel
argument_list|,
literal|3
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|l
operator|->
name|addWidget
argument_list|(
name|listToSeparatedStringText
argument_list|,
literal|3
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|textToQuote
argument_list|,
name|SIGNAL
argument_list|(
name|textChanged
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|updateQuotedText
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVBoxLayout
modifier|*
name|v
init|=
operator|new
name|QVBoxLayout
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|v
operator|->
name|addLayout
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|v
operator|->
name|addStretch
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|updateQuotedText
name|void
name|MiscWidget
operator|::
name|updateQuotedText
parameter_list|(
name|QString
name|str
parameter_list|)
block|{
name|standardQuotedText
operator|->
name|setText
argument_list|(
name|locale
argument_list|()
operator|.
name|quoteString
argument_list|(
name|str
argument_list|)
argument_list|)
expr_stmt|;
name|alternateQuotedText
operator|->
name|setText
argument_list|(
name|locale
argument_list|()
operator|.
name|quoteString
argument_list|(
name|str
argument_list|,
name|QLocale
operator|::
name|AlternateQuotation
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|updateListToSeparatedStringText
name|void
name|MiscWidget
operator|::
name|updateListToSeparatedStringText
parameter_list|()
block|{
name|QStringList
name|test
decl_stmt|;
name|test
operator|<<
literal|"aaa"
operator|<<
literal|"bbb"
operator|<<
literal|"ccc"
operator|<<
literal|"ddd"
expr_stmt|;
name|listToSeparatedStringText
operator|->
name|setText
argument_list|(
name|locale
argument_list|()
operator|.
name|createSeparatedList
argument_list|(
name|test
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|localeChanged
name|void
name|MiscWidget
operator|::
name|localeChanged
parameter_list|(
name|QLocale
name|locale
parameter_list|)
block|{
name|setLocale
argument_list|(
name|locale
argument_list|)
expr_stmt|;
name|updateQuotedText
argument_list|(
name|textToQuote
operator|->
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|updateListToSeparatedStringText
argument_list|()
expr_stmt|;
name|textDirection
operator|->
name|setText
argument_list|(
name|locale
operator|.
name|textDirection
argument_list|()
operator|==
name|Qt
operator|::
name|LeftToRight
condition|?
literal|"Left To Right"
else|:
literal|"Right To Left"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|createLineEdit
name|void
name|MiscWidget
operator|::
name|createLineEdit
parameter_list|(
specifier|const
name|QString
modifier|&
name|label
parameter_list|,
name|QLabel
modifier|*
modifier|*
name|labelWidget
parameter_list|,
name|QLineEdit
modifier|*
modifier|*
name|lineEditWidget
parameter_list|)
block|{
name|QLabel
modifier|*
name|lbl
init|=
operator|new
name|QLabel
argument_list|(
name|label
argument_list|)
decl_stmt|;
name|QLineEdit
modifier|*
name|le
init|=
operator|new
name|QLineEdit
decl_stmt|;
name|le
operator|->
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|lbl
operator|->
name|setBuddy
argument_list|(
name|le
argument_list|)
expr_stmt|;
if|if
condition|(
name|labelWidget
condition|)
operator|*
name|labelWidget
operator|=
name|lbl
expr_stmt|;
if|if
condition|(
name|lineEditWidget
condition|)
operator|*
name|lineEditWidget
operator|=
name|le
expr_stmt|;
block|}
end_function
end_unit
