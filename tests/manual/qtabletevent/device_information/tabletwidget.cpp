begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"tabletwidget.h"
end_include
begin_include
include|#
directive|include
file|<QPainter>
end_include
begin_include
include|#
directive|include
file|<QApplication>
end_include
begin_constructor
DECL|function|TabletWidget
name|TabletWidget
operator|::
name|TabletWidget
parameter_list|()
block|{
name|QPalette
name|newPalette
init|=
name|palette
argument_list|()
decl_stmt|;
name|newPalette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Window
argument_list|,
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|newPalette
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|WindowText
argument_list|,
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
name|setPalette
argument_list|(
name|newPalette
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|installEventFilter
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|resetAttributes
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|eventFilter
name|bool
name|TabletWidget
operator|::
name|eventFilter
parameter_list|(
name|QObject
modifier|*
parameter_list|,
name|QEvent
modifier|*
name|ev
parameter_list|)
block|{
switch|switch
condition|(
name|ev
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|TabletEnterProximity
case|:
case|case
name|QEvent
operator|::
name|TabletLeaveProximity
case|:
case|case
name|QEvent
operator|::
name|TabletMove
case|:
case|case
name|QEvent
operator|::
name|TabletPress
case|:
case|case
name|QEvent
operator|::
name|TabletRelease
case|:
block|{
name|QTabletEvent
modifier|*
name|event
init|=
cast|static_cast
argument_list|<
name|QTabletEvent
operator|*
argument_list|>
argument_list|(
name|ev
argument_list|)
decl_stmt|;
name|mType
operator|=
name|event
operator|->
name|type
argument_list|()
expr_stmt|;
name|mPos
operator|=
name|event
operator|->
name|pos
argument_list|()
expr_stmt|;
name|mGPos
operator|=
name|event
operator|->
name|globalPos
argument_list|()
expr_stmt|;
name|mHiResGlobalPos
operator|=
name|event
operator|->
name|hiResGlobalPos
argument_list|()
expr_stmt|;
name|mDev
operator|=
name|event
operator|->
name|device
argument_list|()
expr_stmt|;
name|mPointerType
operator|=
name|event
operator|->
name|pointerType
argument_list|()
expr_stmt|;
name|mUnique
operator|=
name|event
operator|->
name|uniqueId
argument_list|()
expr_stmt|;
name|mXT
operator|=
name|event
operator|->
name|xTilt
argument_list|()
expr_stmt|;
name|mYT
operator|=
name|event
operator|->
name|yTilt
argument_list|()
expr_stmt|;
name|mZ
operator|=
name|event
operator|->
name|z
argument_list|()
expr_stmt|;
name|mPress
operator|=
name|event
operator|->
name|pressure
argument_list|()
expr_stmt|;
name|mTangential
operator|=
name|event
operator|->
name|tangentialPressure
argument_list|()
expr_stmt|;
name|mRot
operator|=
name|event
operator|->
name|rotation
argument_list|()
expr_stmt|;
if|if
condition|(
name|isVisible
argument_list|()
condition|)
name|update
argument_list|()
expr_stmt|;
break|break;
block|}
case|case
name|QEvent
operator|::
name|MouseMove
case|:
block|{
name|resetAttributes
argument_list|()
expr_stmt|;
name|QMouseEvent
modifier|*
name|event
init|=
cast|static_cast
argument_list|<
name|QMouseEvent
operator|*
argument_list|>
argument_list|(
name|ev
argument_list|)
decl_stmt|;
name|mType
operator|=
name|event
operator|->
name|type
argument_list|()
expr_stmt|;
name|mPos
operator|=
name|event
operator|->
name|pos
argument_list|()
expr_stmt|;
name|mGPos
operator|=
name|event
operator|->
name|globalPos
argument_list|()
expr_stmt|;
block|}
default|default:
break|break;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_function
DECL|function|paintEvent
name|void
name|TabletWidget
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
name|event
parameter_list|)
block|{
name|QPainter
name|painter
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QStringList
name|eventInfo
decl_stmt|;
name|QString
name|typeString
argument_list|(
literal|"Event type: "
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|mType
condition|)
block|{
case|case
name|QEvent
operator|::
name|TabletEnterProximity
case|:
name|typeString
operator|+=
literal|"QEvent::TabletEnterProximity"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|TabletLeaveProximity
case|:
name|typeString
operator|+=
literal|"QEvent::TabletLeaveProximity"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|TabletMove
case|:
name|typeString
operator|+=
literal|"QEvent::TabletMove"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|TabletPress
case|:
name|typeString
operator|+=
literal|"QEvent::TabletPress"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|TabletRelease
case|:
name|typeString
operator|+=
literal|"QEvent::TabletRelease"
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|MouseMove
case|:
name|typeString
operator|+=
literal|"QEvent::MouseMove"
expr_stmt|;
break|break;
block|}
name|eventInfo
operator|<<
name|typeString
expr_stmt|;
name|eventInfo
operator|<<
name|QString
argument_list|(
literal|"Global position: %1 %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|mGPos
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|mGPos
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|eventInfo
operator|<<
name|QString
argument_list|(
literal|"Local position: %1 %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|mPos
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|mPos
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|mType
operator|==
name|QEvent
operator|::
name|TabletEnterProximity
operator|||
name|mType
operator|==
name|QEvent
operator|::
name|TabletLeaveProximity
operator|||
name|mType
operator|==
name|QEvent
operator|::
name|TabletMove
operator|||
name|mType
operator|==
name|QEvent
operator|::
name|TabletPress
operator|||
name|mType
operator|==
name|QEvent
operator|::
name|TabletRelease
condition|)
block|{
name|eventInfo
operator|<<
name|QString
argument_list|(
literal|"Hight res global position: %1 %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|mHiResGlobalPos
operator|.
name|x
argument_list|()
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|mHiResGlobalPos
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|pointerType
argument_list|(
literal|"Pointer type: "
argument_list|)
decl_stmt|;
switch|switch
condition|(
name|mPointerType
condition|)
block|{
case|case
name|QTabletEvent
operator|::
name|UnknownPointer
case|:
name|pointerType
operator|+=
literal|"QTabletEvent::UnknownPointer"
expr_stmt|;
break|break;
case|case
name|QTabletEvent
operator|::
name|Pen
case|:
name|pointerType
operator|+=
literal|"QTabletEvent::Pen"
expr_stmt|;
break|break;
case|case
name|QTabletEvent
operator|::
name|Cursor
case|:
name|pointerType
operator|+=
literal|"QTabletEvent::Cursor"
expr_stmt|;
break|break;
case|case
name|QTabletEvent
operator|::
name|Eraser
case|:
name|pointerType
operator|+=
literal|"QTabletEvent::Eraser"
expr_stmt|;
break|break;
block|}
name|eventInfo
operator|<<
name|pointerType
expr_stmt|;
name|QString
name|deviceString
init|=
literal|"Device type: "
decl_stmt|;
switch|switch
condition|(
name|mDev
condition|)
block|{
case|case
name|QTabletEvent
operator|::
name|NoDevice
case|:
name|deviceString
operator|+=
literal|"QTabletEvent::NoDevice"
expr_stmt|;
break|break;
case|case
name|QTabletEvent
operator|::
name|Puck
case|:
name|deviceString
operator|+=
literal|"QTabletEvent::Puck"
expr_stmt|;
break|break;
case|case
name|QTabletEvent
operator|::
name|Stylus
case|:
name|deviceString
operator|+=
literal|"QTabletEvent::Stylus"
expr_stmt|;
break|break;
case|case
name|QTabletEvent
operator|::
name|Airbrush
case|:
name|deviceString
operator|+=
literal|"QTabletEvent::Airbrush"
expr_stmt|;
break|break;
case|case
name|QTabletEvent
operator|::
name|FourDMouse
case|:
name|deviceString
operator|+=
literal|"QTabletEvent::FourDMouse"
expr_stmt|;
break|break;
case|case
name|QTabletEvent
operator|::
name|RotationStylus
case|:
name|deviceString
operator|+=
literal|"QTabletEvent::RotationStylus"
expr_stmt|;
break|break;
block|}
name|eventInfo
operator|<<
name|deviceString
expr_stmt|;
name|eventInfo
operator|<<
name|QString
argument_list|(
literal|"Pressure: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|mPress
argument_list|)
argument_list|)
expr_stmt|;
name|eventInfo
operator|<<
name|QString
argument_list|(
literal|"Tangential pressure: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|mTangential
argument_list|)
argument_list|)
expr_stmt|;
name|eventInfo
operator|<<
name|QString
argument_list|(
literal|"Rotation: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|mRot
argument_list|)
argument_list|)
expr_stmt|;
name|eventInfo
operator|<<
name|QString
argument_list|(
literal|"xTilt: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|mXT
argument_list|)
argument_list|)
expr_stmt|;
name|eventInfo
operator|<<
name|QString
argument_list|(
literal|"yTilt: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|mYT
argument_list|)
argument_list|)
expr_stmt|;
name|eventInfo
operator|<<
name|QString
argument_list|(
literal|"z: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|mZ
argument_list|)
argument_list|)
expr_stmt|;
name|eventInfo
operator|<<
name|QString
argument_list|(
literal|"Unique Id: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|mUnique
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|painter
operator|.
name|drawText
argument_list|(
name|rect
argument_list|()
argument_list|,
name|eventInfo
operator|.
name|join
argument_list|(
literal|"\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tabletEvent
name|void
name|TabletWidget
operator|::
name|tabletEvent
parameter_list|(
name|QTabletEvent
modifier|*
name|event
parameter_list|)
block|{
name|event
operator|->
name|accept
argument_list|()
expr_stmt|;
block|}
end_function
end_unit
