begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the FOO module of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QApplication>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<QMouseEvent>
end_include
begin_include
include|#
directive|include
file|<QTabletEvent>
end_include
begin_include
include|#
directive|include
file|<QWidget>
end_include
begin_class
DECL|class|EventReportWidget
class|class
name|EventReportWidget
super|:
specifier|public
name|QWidget
block|{
public|public:
name|EventReportWidget
parameter_list|()
constructor_decl|;
protected|protected:
DECL|function|mouseDoubleClickEvent
name|void
name|mouseDoubleClickEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|outputMouseEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
DECL|function|mouseMoveEvent
name|void
name|mouseMoveEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|outputMouseEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
DECL|function|mousePressEvent
name|void
name|mousePressEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|outputMouseEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
DECL|function|mouseReleaseEvent
name|void
name|mouseReleaseEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|outputMouseEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
block|}
name|void
name|tabletEvent
parameter_list|(
name|QTabletEvent
modifier|*
parameter_list|)
function_decl|;
private|private:
name|void
name|outputMouseEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
function_decl|;
DECL|member|m_lastIsMouseMove
name|bool
name|m_lastIsMouseMove
decl_stmt|;
DECL|member|m_lastIsTabletMove
name|bool
name|m_lastIsTabletMove
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|EventReportWidget
name|EventReportWidget
operator|::
name|EventReportWidget
parameter_list|()
member_init_list|:
name|m_lastIsMouseMove
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|m_lastIsTabletMove
argument_list|(
literal|false
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|tabletEvent
name|void
name|EventReportWidget
operator|::
name|tabletEvent
parameter_list|(
name|QTabletEvent
modifier|*
name|event
parameter_list|)
block|{
name|QWidget
operator|::
name|tabletEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|QString
name|type
decl_stmt|;
switch|switch
condition|(
name|event
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|TabletEnterProximity
case|:
name|m_lastIsTabletMove
operator|=
literal|false
expr_stmt|;
name|type
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"TabletEnterProximity"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|TabletLeaveProximity
case|:
name|m_lastIsTabletMove
operator|=
literal|false
expr_stmt|;
name|type
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"TabletLeaveProximity"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|TabletMove
case|:
if|if
condition|(
name|m_lastIsTabletMove
condition|)
return|return;
name|m_lastIsTabletMove
operator|=
literal|true
expr_stmt|;
name|type
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"TabletMove"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|TabletPress
case|:
name|m_lastIsTabletMove
operator|=
literal|false
expr_stmt|;
name|type
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"TabletPress"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|TabletRelease
case|:
name|m_lastIsTabletMove
operator|=
literal|false
expr_stmt|;
name|type
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"TabletRelease"
argument_list|)
expr_stmt|;
break|break;
default|default:
name|Q_ASSERT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
name|qDebug
argument_list|()
operator|<<
literal|"Tablet event, type = "
operator|<<
name|type
operator|<<
literal|" position = "
operator|<<
name|event
operator|->
name|pos
argument_list|()
operator|<<
literal|" global position = "
operator|<<
name|event
operator|->
name|globalPos
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|outputMouseEvent
name|void
name|EventReportWidget
operator|::
name|outputMouseEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|QString
name|type
decl_stmt|;
switch|switch
condition|(
name|event
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|MouseButtonDblClick
case|:
name|m_lastIsMouseMove
operator|=
literal|false
expr_stmt|;
name|type
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"MouseButtonDblClick"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|MouseButtonPress
case|:
name|m_lastIsMouseMove
operator|=
literal|false
expr_stmt|;
name|type
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"MouseButtonPress"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|MouseButtonRelease
case|:
name|m_lastIsMouseMove
operator|=
literal|false
expr_stmt|;
name|type
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"MouseButtonRelease"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QEvent
operator|::
name|MouseMove
case|:
if|if
condition|(
name|m_lastIsMouseMove
condition|)
return|return;
comment|// only show one move to keep things readable
name|m_lastIsMouseMove
operator|=
literal|true
expr_stmt|;
name|type
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"MouseMove"
argument_list|)
expr_stmt|;
break|break;
default|default:
name|Q_ASSERT
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
block|}
name|qDebug
argument_list|()
operator|<<
literal|"Mouse event, type = "
operator|<<
name|type
operator|<<
literal|" position = "
operator|<<
name|event
operator|->
name|pos
argument_list|()
operator|<<
literal|" global position = "
operator|<<
name|event
operator|->
name|globalPos
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
name|argv
index|[]
parameter_list|)
block|{
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|EventReportWidget
name|widget
decl_stmt|;
name|widget
operator|.
name|show
argument_list|()
expr_stmt|;
return|return
name|app
operator|.
name|exec
argument_list|()
return|;
block|}
end_function
end_unit
