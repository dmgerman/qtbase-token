begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|LOGWIDGET_H
end_ifndef
begin_define
DECL|macro|LOGWIDGET_H
define|#
directive|define
name|LOGWIDGET_H
end_define
begin_include
include|#
directive|include
file|<QPlainTextEdit>
end_include
begin_comment
comment|// Instantiate as follows: LogFunctionGuard guard(Q_FUNC_INFO)
end_comment
begin_decl_stmt
name|class
name|LogFunctionGuard
block|{
name|Q_DISABLE_COPY
argument_list|(
argument|LogFunctionGuard
argument_list|)
name|public
label|:
name|explicit
name|LogFunctionGuard
parameter_list|(
specifier|const
name|char
modifier|*
name|name
parameter_list|)
function_decl|;
operator|~
name|LogFunctionGuard
argument_list|()
expr_stmt|;
name|private
label|:
specifier|const
name|char
modifier|*
name|m_name
decl_stmt|;
block|}
end_decl_stmt
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_decl_stmt
name|class
name|LogWidget
range|:
name|public
name|QPlainTextEdit
block|{
name|Q_OBJECT
name|public
operator|:
name|explicit
name|LogWidget
argument_list|(
name|QWidget
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
operator|~
name|LogWidget
argument_list|()
block|;
specifier|static
name|LogWidget
operator|*
name|instance
argument_list|()
block|{
return|return
name|m_instance
return|;
block|}
specifier|static
name|QString
name|startupMessage
argument_list|()
block|;
specifier|static
name|void
name|install
argument_list|()
block|;
specifier|static
name|void
name|uninstall
argument_list|()
block|;
specifier|static
name|int
name|indent
argument_list|()
block|{
return|return
name|m_indent
return|;
block|}
specifier|static
name|void
name|setIndent
argument_list|(
argument|int i
argument_list|)
block|{
name|m_indent
operator|=
name|i
block|; }
specifier|static
name|bool
name|lineNumberingEnabled
argument_list|()
block|{
return|return
name|m_lineNumberingEnabled
return|;
block|}
specifier|static
name|void
name|setLineNumberingEnabled
argument_list|(
argument|bool l
argument_list|)
block|{
name|m_lineNumberingEnabled
operator|=
name|l
block|; }
specifier|static
name|bool
name|showMessageType
argument_list|()
block|{
return|return
name|m_showMessageType
return|;
block|}
specifier|static
name|void
name|setShowMessageType
argument_list|(
argument|bool s
argument_list|)
block|{
name|m_showMessageType
operator|=
name|s
block|; }
name|public
name|slots
operator|:
name|void
name|appendText
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
block|;
name|private
operator|:
specifier|static
name|int
name|m_indent
block|;
specifier|static
name|bool
name|m_lineNumberingEnabled
block|;
specifier|static
name|bool
name|m_showMessageType
block|;
specifier|static
name|LogWidget
operator|*
name|m_instance
block|; }
decl_stmt|;
end_decl_stmt
begin_expr_stmt
DECL|function|LogFunctionGuard
specifier|inline
name|LogFunctionGuard
operator|::
name|LogFunctionGuard
argument_list|(
specifier|const
name|char
operator|*
name|name
argument_list|)
operator|:
name|m_name
argument_list|(
argument|name
argument_list|)
block|{
name|qDebug
argument_list|(
literal|">%s"
argument_list|,
name|m_name
argument_list|)
block|;
name|LogWidget
operator|::
name|setIndent
argument_list|(
name|LogWidget
operator|::
name|indent
argument_list|()
operator|+
literal|2
argument_list|)
block|; }
DECL|function|~LogFunctionGuard
specifier|inline
name|LogFunctionGuard
operator|::
operator|~
name|LogFunctionGuard
argument_list|()
block|{
name|LogWidget
operator|::
name|setIndent
argument_list|(
name|LogWidget
operator|::
name|indent
argument_list|()
operator|-
literal|2
argument_list|)
block|;
name|qDebug
argument_list|(
literal|"<%s"
argument_list|,
name|m_name
argument_list|)
block|; }
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// LOGWIDGET_H
end_comment
end_unit
