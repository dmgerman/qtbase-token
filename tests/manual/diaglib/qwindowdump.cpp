begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:GPL-EXCEPT$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3 as published by the Free Software ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qwindowdump.h"
end_include
begin_if
if|#
directive|if
name|QT_VERSION
operator|>
literal|0x050000
end_if
begin_include
include|#
directive|include
file|<QtGui/QGuiApplication>
end_include
begin_include
include|#
directive|include
file|<QtGui/QScreen>
end_include
begin_include
include|#
directive|include
file|<QtGui/QWindow>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformwindow.h>
end_include
begin_if
if|#
directive|if
name|QT_VERSION
operator|>=
literal|0x050600
end_if
begin_include
include|#
directive|include
file|<private/qhighdpiscaling_p.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<QtCore/QMetaObject>
end_include
begin_include
include|#
directive|include
file|<QtCore/QRect>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_include
include|#
directive|include
file|<QtCore/QTextStream>
end_include
begin_namespace
DECL|namespace|QtDiag
namespace|namespace
name|QtDiag
block|{
DECL|function|indentStream
name|void
name|indentStream
parameter_list|(
name|QTextStream
modifier|&
name|s
parameter_list|,
name|int
name|indent
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|indent
condition|;
operator|++
name|i
control|)
name|s
operator|<<
literal|' '
expr_stmt|;
block|}
DECL|function|formatObject
name|void
name|formatObject
parameter_list|(
name|QTextStream
modifier|&
name|str
parameter_list|,
specifier|const
name|QObject
modifier|*
name|o
parameter_list|)
block|{
name|str
operator|<<
name|o
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
expr_stmt|;
specifier|const
name|QString
name|on
init|=
name|o
operator|->
name|objectName
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|on
operator|.
name|isEmpty
argument_list|()
condition|)
name|str
operator|<<
literal|"/\""
operator|<<
name|on
operator|<<
literal|'"'
expr_stmt|;
block|}
DECL|function|formatRect
name|void
name|formatRect
parameter_list|(
name|QTextStream
modifier|&
name|str
parameter_list|,
specifier|const
name|QRect
modifier|&
name|geom
parameter_list|)
block|{
name|str
operator|<<
name|geom
operator|.
name|width
argument_list|()
operator|<<
literal|'x'
operator|<<
name|geom
operator|.
name|height
argument_list|()
operator|<<
name|forcesign
operator|<<
name|geom
operator|.
name|x
argument_list|()
operator|<<
name|geom
operator|.
name|y
argument_list|()
operator|<<
name|noforcesign
expr_stmt|;
block|}
DECL|macro|debugType
define|#
directive|define
name|debugType
parameter_list|(
name|s
parameter_list|,
name|type
parameter_list|,
name|typeConstant
parameter_list|)
define|\
value|if ((type& typeConstant) == typeConstant) \     s<< ' '<< #typeConstant;
DECL|macro|debugFlag
define|#
directive|define
name|debugFlag
parameter_list|(
name|s
parameter_list|,
name|flags
parameter_list|,
name|flagConstant
parameter_list|)
define|\
value|if (flags& flagConstant) \     s<< ' '<< #flagConstant;
DECL|function|formatWindowFlags
name|void
name|formatWindowFlags
parameter_list|(
name|QTextStream
modifier|&
name|str
parameter_list|,
specifier|const
name|Qt
operator|::
name|WindowFlags
name|flags
parameter_list|)
block|{
name|str
operator|<<
name|showbase
operator|<<
name|hex
operator|<<
name|unsigned
argument_list|(
name|flags
argument_list|)
operator|<<
name|dec
operator|<<
name|noshowbase
expr_stmt|;
specifier|const
name|Qt
operator|::
name|WindowFlags
name|windowType
init|=
name|flags
operator|&
name|Qt
operator|::
name|WindowType_Mask
decl_stmt|;
name|debugFlag
argument_list|(
argument|str
argument_list|,
argument|flags
argument_list|,
argument|Qt::Window
argument_list|)
name|debugType
argument_list|(
argument|str
argument_list|,
argument|windowType
argument_list|,
argument|Qt::Dialog
argument_list|)
name|debugType
argument_list|(
argument|str
argument_list|,
argument|windowType
argument_list|,
argument|Qt::Sheet
argument_list|)
name|debugType
argument_list|(
argument|str
argument_list|,
argument|windowType
argument_list|,
argument|Qt::Drawer
argument_list|)
name|debugType
argument_list|(
argument|str
argument_list|,
argument|windowType
argument_list|,
argument|Qt::Popup
argument_list|)
name|debugType
argument_list|(
argument|str
argument_list|,
argument|windowType
argument_list|,
argument|Qt::Tool
argument_list|)
name|debugType
argument_list|(
argument|str
argument_list|,
argument|windowType
argument_list|,
argument|Qt::ToolTip
argument_list|)
name|debugType
argument_list|(
argument|str
argument_list|,
argument|windowType
argument_list|,
argument|Qt::SplashScreen
argument_list|)
name|debugType
argument_list|(
argument|str
argument_list|,
argument|windowType
argument_list|,
argument|Qt::Desktop
argument_list|)
name|debugType
argument_list|(
argument|str
argument_list|,
argument|windowType
argument_list|,
argument|Qt::SubWindow
argument_list|)
if|#
directive|if
name|QT_VERSION
operator|>
literal|0x050000
name|debugType
argument_list|(
argument|str
argument_list|,
argument|windowType
argument_list|,
argument|Qt::ForeignWindow
argument_list|)
name|debugType
argument_list|(
argument|str
argument_list|,
argument|windowType
argument_list|,
argument|Qt::CoverWindow
argument_list|)
endif|#
directive|endif
name|debugFlag
argument_list|(
argument|str
argument_list|,
argument|flags
argument_list|,
argument|Qt::MSWindowsFixedSizeDialogHint
argument_list|)
name|debugFlag
argument_list|(
argument|str
argument_list|,
argument|flags
argument_list|,
argument|Qt::MSWindowsOwnDC
argument_list|)
name|debugFlag
argument_list|(
argument|str
argument_list|,
argument|flags
argument_list|,
argument|Qt::X11BypassWindowManagerHint
argument_list|)
name|debugFlag
argument_list|(
argument|str
argument_list|,
argument|flags
argument_list|,
argument|Qt::FramelessWindowHint
argument_list|)
name|debugFlag
argument_list|(
argument|str
argument_list|,
argument|flags
argument_list|,
argument|Qt::WindowTitleHint
argument_list|)
name|debugFlag
argument_list|(
argument|str
argument_list|,
argument|flags
argument_list|,
argument|Qt::WindowSystemMenuHint
argument_list|)
name|debugFlag
argument_list|(
argument|str
argument_list|,
argument|flags
argument_list|,
argument|Qt::WindowMinimizeButtonHint
argument_list|)
name|debugFlag
argument_list|(
argument|str
argument_list|,
argument|flags
argument_list|,
argument|Qt::WindowMaximizeButtonHint
argument_list|)
name|debugFlag
argument_list|(
argument|str
argument_list|,
argument|flags
argument_list|,
argument|Qt::WindowContextHelpButtonHint
argument_list|)
name|debugFlag
argument_list|(
argument|str
argument_list|,
argument|flags
argument_list|,
argument|Qt::WindowShadeButtonHint
argument_list|)
name|debugFlag
argument_list|(
argument|str
argument_list|,
argument|flags
argument_list|,
argument|Qt::WindowStaysOnTopHint
argument_list|)
name|debugFlag
argument_list|(
argument|str
argument_list|,
argument|flags
argument_list|,
argument|Qt::CustomizeWindowHint
argument_list|)
if|#
directive|if
name|QT_VERSION
operator|>
literal|0x050000
name|debugFlag
argument_list|(
argument|str
argument_list|,
argument|flags
argument_list|,
argument|Qt::WindowTransparentForInput
argument_list|)
name|debugFlag
argument_list|(
argument|str
argument_list|,
argument|flags
argument_list|,
argument|Qt::WindowOverridesSystemGestures
argument_list|)
name|debugFlag
argument_list|(
argument|str
argument_list|,
argument|flags
argument_list|,
argument|Qt::WindowDoesNotAcceptFocus
argument_list|)
name|debugFlag
argument_list|(
argument|str
argument_list|,
argument|flags
argument_list|,
argument|Qt::NoDropShadowWindowHint
argument_list|)
name|debugFlag
argument_list|(
argument|str
argument_list|,
argument|flags
argument_list|,
argument|Qt::WindowFullscreenButtonHint
argument_list|)
endif|#
directive|endif
name|debugFlag
argument_list|(
argument|str
argument_list|,
argument|flags
argument_list|,
argument|Qt::WindowStaysOnBottomHint
argument_list|)
name|debugFlag
argument_list|(
argument|str
argument_list|,
argument|flags
argument_list|,
argument|Qt::MacWindowToolBarButtonHint
argument_list|)
name|debugFlag
argument_list|(
argument|str
argument_list|,
argument|flags
argument_list|,
argument|Qt::BypassGraphicsProxyWidget
argument_list|)
name|debugFlag
argument_list|(
argument|str
argument_list|,
argument|flags
argument_list|,
argument|Qt::WindowOkButtonHint
argument_list|)
name|debugFlag
argument_list|(
argument|str
argument_list|,
argument|flags
argument_list|,
argument|Qt::WindowCancelButtonHint
argument_list|)
block|}
if|#
directive|if
name|QT_VERSION
operator|>
literal|0x050000
DECL|function|formatWindow
name|void
name|formatWindow
parameter_list|(
name|QTextStream
modifier|&
name|str
parameter_list|,
specifier|const
name|QWindow
modifier|*
name|w
parameter_list|,
name|FormatWindowOptions
name|options
parameter_list|)
block|{
specifier|const
name|QPlatformWindow
modifier|*
name|pw
init|=
name|w
operator|->
name|handle
argument_list|()
decl_stmt|;
name|formatObject
argument_list|(
name|str
argument_list|,
name|w
argument_list|)
expr_stmt|;
name|str
operator|<<
literal|' '
operator|<<
operator|(
name|w
operator|->
name|isVisible
argument_list|()
condition|?
literal|"[visible] "
else|:
literal|"[hidden] "
operator|)
expr_stmt|;
if|if
condition|(
specifier|const
name|WId
name|nativeWinId
init|=
name|pw
condition|?
name|pw
operator|->
name|winId
argument_list|()
else|:
name|WId
argument_list|(
literal|0
argument_list|)
condition|)
name|str
operator|<<
literal|"[native: "
operator|<<
name|hex
operator|<<
name|showbase
operator|<<
name|nativeWinId
operator|<<
name|dec
operator|<<
name|noshowbase
operator|<<
literal|"] "
expr_stmt|;
if|if
condition|(
name|w
operator|->
name|isTopLevel
argument_list|()
condition|)
name|str
operator|<<
literal|"[top] "
expr_stmt|;
if|if
condition|(
name|w
operator|->
name|isExposed
argument_list|()
condition|)
name|str
operator|<<
literal|"[exposed] "
expr_stmt|;
if|if
condition|(
name|w
operator|->
name|surfaceClass
argument_list|()
operator|==
name|QWindow
operator|::
name|Offscreen
condition|)
name|str
operator|<<
literal|"[offscreen] "
expr_stmt|;
name|str
operator|<<
literal|"surface="
operator|<<
name|w
operator|->
name|surfaceType
argument_list|()
operator|<<
literal|' '
expr_stmt|;
if|if
condition|(
specifier|const
name|Qt
operator|::
name|WindowState
name|state
init|=
name|w
operator|->
name|windowState
argument_list|()
condition|)
name|str
operator|<<
literal|"windowState="
operator|<<
name|state
operator|<<
literal|' '
expr_stmt|;
name|formatRect
argument_list|(
name|str
argument_list|,
name|w
operator|->
name|geometry
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|w
operator|->
name|isTopLevel
argument_list|()
condition|)
block|{
name|str
operator|<<
literal|" \""
operator|<<
name|w
operator|->
name|screen
argument_list|()
operator|->
name|name
argument_list|()
operator|<<
literal|"\" "
expr_stmt|;
if|#
directive|if
name|QT_VERSION
operator|>=
literal|0x050600
if|if
condition|(
name|QHighDpiScaling
operator|::
name|isActive
argument_list|()
condition|)
name|str
operator|<<
literal|"factor="
operator|<<
name|QHighDpiScaling
operator|::
name|factor
argument_list|(
name|w
argument_list|)
operator|<<
literal|' '
expr_stmt|;
endif|#
directive|endif
block|}
if|if
condition|(
operator|!
operator|(
name|options
operator|&
name|DontPrintWindowFlags
operator|)
condition|)
block|{
name|str
operator|<<
literal|' '
expr_stmt|;
name|formatWindowFlags
argument_list|(
name|str
argument_list|,
name|w
operator|->
name|flags
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|str
operator|<<
literal|'\n'
expr_stmt|;
block|}
DECL|function|dumpWindowRecursion
specifier|static
name|void
name|dumpWindowRecursion
parameter_list|(
name|QTextStream
modifier|&
name|str
parameter_list|,
specifier|const
name|QWindow
modifier|*
name|w
parameter_list|,
name|FormatWindowOptions
name|options
init|=
literal|0
parameter_list|,
name|int
name|depth
init|=
literal|0
parameter_list|)
block|{
name|indentStream
argument_list|(
name|str
argument_list|,
literal|2
operator|*
name|depth
argument_list|)
expr_stmt|;
name|formatWindow
argument_list|(
name|str
argument_list|,
name|w
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QObject
modifier|*
name|co
decl|,
name|w
operator|->
name|children
argument_list|()
control|)
block|{
if|if
condition|(
name|co
operator|->
name|isWindowType
argument_list|()
condition|)
name|dumpWindowRecursion
argument_list|(
name|str
argument_list|,
cast|static_cast
argument_list|<
specifier|const
name|QWindow
operator|*
argument_list|>
argument_list|(
name|co
argument_list|)
argument_list|,
name|options
argument_list|,
name|depth
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
DECL|function|dumpAllWindows
name|void
name|dumpAllWindows
parameter_list|(
name|FormatWindowOptions
name|options
parameter_list|)
block|{
name|QString
name|d
decl_stmt|;
name|QTextStream
name|str
argument_list|(
operator|&
name|d
argument_list|)
decl_stmt|;
name|str
operator|<<
literal|"### QWindows:\n"
expr_stmt|;
foreach|foreach
control|(
name|QWindow
modifier|*
name|w
decl|,
name|QGuiApplication
operator|::
name|topLevelWindows
argument_list|()
control|)
name|dumpWindowRecursion
argument_list|(
name|str
argument_list|,
name|w
argument_list|,
name|options
argument_list|)
expr_stmt|;
if|#
directive|if
name|QT_VERSION
operator|>=
literal|0x050400
name|qDebug
argument_list|()
operator|.
name|noquote
argument_list|()
operator|<<
name|d
expr_stmt|;
else|#
directive|else
name|qDebug
argument_list|()
operator|<<
name|d
expr_stmt|;
endif|#
directive|endif
block|}
else|#
directive|else
comment|// Qt 5
DECL|class|QWindow
class|class
name|QWindow
block|{
block|}
class|;
DECL|function|formatWindow
name|void
name|formatWindow
parameter_list|(
name|QTextStream
modifier|&
parameter_list|,
specifier|const
name|QWindow
modifier|*
parameter_list|,
name|FormatWindowOptions
parameter_list|)
block|{ }
DECL|function|dumpAllWindows
name|void
name|dumpAllWindows
parameter_list|(
name|FormatWindowOptions
name|options
parameter_list|)
block|{ }
endif|#
directive|endif
comment|// Qt 4
block|}
end_namespace
begin_comment
comment|// namespace QtDiag
end_comment
end_unit
