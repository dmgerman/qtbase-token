begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"logwidget.h"
end_include
begin_if
if|#
directive|if
name|QT_VERSION
operator|>=
literal|0x050000
end_if
begin_include
include|#
directive|include
file|<QtCore/qlogging.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/QLibraryInfo>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<QApplication>
end_include
begin_include
include|#
directive|include
file|<QStyle>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_include
include|#
directive|include
file|<QtCore/QVector>
end_include
begin_include
include|#
directive|include
file|<QtCore/QStringList>
end_include
begin_include
include|#
directive|include
file|<iostream>
end_include
begin_decl_stmt
DECL|member|m_instance
name|LogWidget
modifier|*
name|LogWidget
operator|::
name|m_instance
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|m_lineNumberingEnabled
name|bool
name|LogWidget
operator|::
name|m_lineNumberingEnabled
init|=
literal|true
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|m_showMessageType
name|bool
name|LogWidget
operator|::
name|m_showMessageType
init|=
literal|true
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|member|m_indent
name|int
name|LogWidget
operator|::
name|m_indent
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|LogWidget
name|LogWidget
operator|::
name|LogWidget
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QPlainTextEdit
argument_list|(
name|parent
argument_list|)
block|{
name|LogWidget
operator|::
name|m_instance
operator|=
name|this
expr_stmt|;
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~LogWidget
name|LogWidget
operator|::
name|~
name|LogWidget
parameter_list|()
block|{
name|LogWidget
operator|::
name|m_instance
operator|=
literal|0
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|startupMessage
name|QString
name|LogWidget
operator|::
name|startupMessage
parameter_list|()
block|{
name|QString
name|result
decl_stmt|;
if|#
directive|if
name|QT_VERSION
operator|>=
literal|0x050300
name|result
operator|+=
name|QLatin1String
argument_list|(
name|QLibraryInfo
operator|::
name|build
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
name|result
operator|+=
name|QLatin1String
argument_list|(
literal|"Qt "
argument_list|)
operator|+
name|QLatin1String
argument_list|(
name|QT_VERSION_STR
argument_list|)
expr_stmt|;
endif|#
directive|endif
specifier|const
name|QCoreApplication
modifier|*
name|coreApp
init|=
name|QCoreApplication
operator|::
name|instance
argument_list|()
decl_stmt|;
if|#
directive|if
name|QT_VERSION
operator|>=
literal|0x050000
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QGuiApplication
operator|*
argument_list|>
argument_list|(
name|coreApp
argument_list|)
condition|)
block|{
name|result
operator|+=
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|result
operator|+=
name|QGuiApplication
operator|::
name|platformName
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
if|if
condition|(
name|qobject_cast
argument_list|<
specifier|const
name|QApplication
operator|*
argument_list|>
argument_list|(
name|coreApp
argument_list|)
condition|)
block|{
name|result
operator|+=
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
expr_stmt|;
name|result
operator|+=
name|QApplication
operator|::
name|style
argument_list|()
operator|->
name|objectName
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|coreApp
condition|)
block|{
name|QStringList
name|arguments
init|=
name|QCoreApplication
operator|::
name|arguments
argument_list|()
decl_stmt|;
name|arguments
operator|.
name|pop_front
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|arguments
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|result
operator|+=
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
name|result
operator|+=
name|arguments
operator|.
name|join
argument_list|(
name|QLatin1String
argument_list|(
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|messageTypes
specifier|static
specifier|const
name|QVector
argument_list|<
name|QString
argument_list|>
modifier|&
name|messageTypes
parameter_list|()
block|{
specifier|static
name|QVector
argument_list|<
name|QString
argument_list|>
name|result
decl_stmt|;
if|if
condition|(
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|result
operator|<<
name|QLatin1String
argument_list|(
literal|"debug"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"warn"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"critical"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"fatal"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"info"
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|messageHandler
specifier|static
name|void
name|messageHandler
parameter_list|(
name|QtMsgType
name|type
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
specifier|static
name|int
name|n
init|=
literal|0
decl_stmt|;
name|QString
name|message
decl_stmt|;
if|if
condition|(
name|LogWidget
operator|::
name|lineNumberingEnabled
argument_list|()
condition|)
name|message
operator|.
name|append
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"%1 "
argument_list|)
operator|.
name|arg
argument_list|(
name|n
argument_list|,
literal|4
argument_list|,
literal|10
argument_list|,
name|QLatin1Char
argument_list|(
literal|'0'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|LogWidget
operator|::
name|showMessageType
argument_list|()
condition|)
block|{
name|message
operator|.
name|append
argument_list|(
name|messageTypes
argument_list|()
operator|.
name|at
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|ie
init|=
name|LogWidget
operator|::
name|indent
argument_list|()
init|;
name|i
operator|<
name|ie
condition|;
operator|++
name|i
control|)
name|message
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
argument_list|)
expr_stmt|;
name|message
operator|.
name|append
argument_list|(
name|text
argument_list|)
expr_stmt|;
if|if
condition|(
name|LogWidget
modifier|*
name|logWindow
init|=
name|LogWidget
operator|::
name|instance
argument_list|()
condition|)
name|logWindow
operator|->
name|appendText
argument_list|(
name|message
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|std
operator|::
name|wcerr
operator|<<
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|message
operator|.
name|utf16
argument_list|()
argument_list|)
operator|<<
literal|L'
expr|\n'
expr_stmt|;
else|#
directive|else
name|std
operator|::
name|cerr
operator|<<
name|qPrintable
argument_list|(
name|message
argument_list|)
operator|<<
literal|'\n'
expr_stmt|;
endif|#
directive|endif
name|n
operator|++
expr_stmt|;
block|}
end_function
begin_if
if|#
directive|if
name|QT_VERSION
operator|>=
literal|0x050000
end_if
begin_function
DECL|function|qt5MessageHandler
specifier|static
name|void
name|qt5MessageHandler
parameter_list|(
name|QtMsgType
name|type
parameter_list|,
specifier|const
name|QMessageLogContext
modifier|&
parameter_list|,
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|messageHandler
argument_list|(
name|type
argument_list|,
name|text
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|install
name|void
name|LogWidget
operator|::
name|install
parameter_list|()
block|{
name|qInstallMessageHandler
argument_list|(
name|qt5MessageHandler
argument_list|)
expr_stmt|;
name|qInfo
argument_list|(
literal|"%s"
argument_list|,
name|qPrintable
argument_list|(
name|LogWidget
operator|::
name|startupMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|uninstall
name|void
name|LogWidget
operator|::
name|uninstall
parameter_list|()
block|{
name|qInstallMessageHandler
argument_list|(
name|Q_NULLPTR
argument_list|)
expr_stmt|;
block|}
end_function
begin_else
else|#
directive|else
end_else
begin_comment
comment|// Qt 5
end_comment
begin_decl_stmt
DECL|variable|oldHandler
specifier|static
name|QtMsgHandler
name|oldHandler
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|qt4MessageHandler
specifier|static
name|void
name|qt4MessageHandler
parameter_list|(
name|QtMsgType
name|type
parameter_list|,
specifier|const
name|char
modifier|*
name|text
parameter_list|)
block|{
name|messageHandler
argument_list|(
name|type
argument_list|,
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|text
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|install
name|void
name|LogWidget
operator|::
name|install
parameter_list|()
block|{
name|oldHandler
operator|=
name|qInstallMsgHandler
argument_list|(
name|qt4MessageHandler
argument_list|)
expr_stmt|;
name|qDebug
argument_list|(
literal|"%s"
argument_list|,
name|qPrintable
argument_list|(
name|LogWidget
operator|::
name|startupMessage
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|uninstall
name|void
name|LogWidget
operator|::
name|uninstall
parameter_list|()
block|{
name|qInstallMsgHandler
argument_list|(
name|oldHandler
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Qt 4
end_comment
begin_function
DECL|function|appendText
name|void
name|LogWidget
operator|::
name|appendText
parameter_list|(
specifier|const
name|QString
modifier|&
name|message
parameter_list|)
block|{
name|appendPlainText
argument_list|(
name|message
argument_list|)
expr_stmt|;
name|ensureCursorVisible
argument_list|()
expr_stmt|;
block|}
end_function
end_unit
