begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"window.h"
end_include
begin_function
DECL|function|setGeometry
name|void
name|SlowWidget
operator|::
name|setGeometry
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|)
block|{
name|bool
name|reiterate
init|=
literal|false
decl_stmt|;
name|Statistics
modifier|&
name|stats
init|=
operator|*
name|m_stats
decl_stmt|;
if|if
condition|(
name|stats
operator|.
name|relayoutClicked
condition|)
block|{
operator|++
operator|(
name|stats
operator|.
name|setGeometryTracker
index|[
name|this
index|]
operator|)
expr_stmt|;
operator|++
name|stats
operator|.
name|setGeometryCount
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"setGeometryCount:"
operator|<<
name|stats
operator|.
name|setGeometryCount
expr_stmt|;
if|if
condition|(
name|stats
operator|.
name|setGeometryTracker
operator|.
name|count
argument_list|()
operator|==
name|m_window
operator|->
name|m_depthSpinBox
operator|->
name|value
argument_list|()
condition|)
block|{
operator|++
name|stats
operator|.
name|currentBenchmarkIteration
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"currentBenchmarkIteration:"
operator|<<
name|stats
operator|.
name|currentBenchmarkIteration
expr_stmt|;
if|if
condition|(
name|stats
operator|.
name|currentBenchmarkIteration
operator|==
name|m_window
operator|->
name|m_benchmarkIterationsSpinBox
operator|->
name|value
argument_list|()
condition|)
block|{
if|if
condition|(
name|stats
operator|.
name|output
condition|)
name|stats
operator|.
name|output
operator|->
name|setText
argument_list|(
name|tr
argument_list|(
literal|"DONE. Elapsed: %1, setGeometryCount: %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|stats
operator|.
name|time
operator|.
name|elapsed
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|stats
operator|.
name|setGeometryCount
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reiterate
operator|=
literal|true
expr_stmt|;
block|}
name|stats
operator|.
name|setGeometryTracker
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
name|QGraphicsWidget
operator|::
name|setGeometry
argument_list|(
name|rect
argument_list|)
expr_stmt|;
if|if
condition|(
name|reiterate
condition|)
block|{
name|m_window
operator|->
name|doAgain
argument_list|()
expr_stmt|;
comment|//QTimer::singleShot(0, m_window, SLOT(doAgain()));
block|}
block|}
end_function
end_unit
