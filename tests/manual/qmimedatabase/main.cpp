begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:GPL-EXCEPT$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3 as published by the Free Software ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore/QMimeDatabase>
end_include
begin_include
include|#
directive|include
file|<QtCore/QMimeType>
end_include
begin_include
include|#
directive|include
file|<QtCore/QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QtCore/QCommandLineParser>
end_include
begin_include
include|#
directive|include
file|<QtCore/QCommandLineOption>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_include
include|#
directive|include
file|<iostream>
end_include
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_include
include|#
directive|include
file|<iterator>
end_include
begin_function
DECL|function|operator <<
name|std
operator|::
name|wostream
modifier|&
name|operator
name|<<
parameter_list|(
name|std
operator|::
name|wostream
modifier|&
name|str
parameter_list|,
specifier|const
name|QString
modifier|&
name|s
parameter_list|)
block|{
name|str
operator|<<
name|s
operator|.
name|toStdWString
argument_list|()
expr_stmt|;
return|return
name|str
return|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|class
name|T
parameter_list|>
DECL|function|operator <<
name|std
operator|::
name|wostream
modifier|&
name|operator
name|<<
parameter_list|(
name|std
operator|::
name|wostream
modifier|&
name|str
parameter_list|,
specifier|const
name|QList
argument_list|<
name|T
argument_list|>
modifier|&
name|l
parameter_list|)
block|{
name|std
operator|::
name|copy
argument_list|(
name|l
operator|.
name|constBegin
argument_list|()
argument_list|,
name|l
operator|.
name|constEnd
argument_list|()
argument_list|,
name|std
operator|::
name|ostream_iterator
argument_list|<
name|T
argument_list|,
name|wchar_t
argument_list|>
argument_list|(
name|str
argument_list|,
literal|L" "
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|str
return|;
block|}
end_function
begin_function
DECL|function|operator <<
name|std
operator|::
name|wostream
modifier|&
name|operator
name|<<
parameter_list|(
name|std
operator|::
name|wostream
modifier|&
name|str
parameter_list|,
specifier|const
name|QMimeType
modifier|&
name|type
parameter_list|)
block|{
name|str
operator|<<
literal|"Type    : "
operator|<<
name|type
operator|.
name|name
argument_list|()
expr_stmt|;
specifier|const
name|QStringList
name|aliases
init|=
name|type
operator|.
name|aliases
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|aliases
operator|.
name|isEmpty
argument_list|()
condition|)
name|str
operator|<<
literal|" ("
operator|<<
name|aliases
operator|<<
literal|')'
expr_stmt|;
name|str
operator|<<
literal|'\n'
expr_stmt|;
specifier|const
name|QStringList
name|parentMimeTypes
init|=
name|type
operator|.
name|parentMimeTypes
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|parentMimeTypes
operator|.
name|isEmpty
argument_list|()
condition|)
name|str
operator|<<
literal|"Inherits: "
operator|<<
name|parentMimeTypes
operator|<<
literal|'\n'
expr_stmt|;
if|if
condition|(
operator|!
name|type
operator|.
name|comment
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|str
operator|<<
literal|"Comment : "
operator|<<
name|type
operator|.
name|comment
argument_list|()
operator|<<
literal|'\n'
expr_stmt|;
specifier|const
name|QStringList
name|globPatterns
init|=
name|type
operator|.
name|globPatterns
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|globPatterns
operator|.
name|isEmpty
argument_list|()
condition|)
name|str
operator|<<
literal|"Patterns: "
operator|<<
name|globPatterns
operator|<<
literal|'\n'
expr_stmt|;
if|if
condition|(
operator|!
name|type
operator|.
name|preferredSuffix
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|str
operator|<<
literal|"Suffix  : "
operator|<<
name|type
operator|.
name|preferredSuffix
argument_list|()
expr_stmt|;
specifier|const
name|QStringList
name|suffixes
init|=
name|type
operator|.
name|suffixes
argument_list|()
decl_stmt|;
if|if
condition|(
name|suffixes
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
name|str
operator|<<
literal|" ("
operator|<<
name|suffixes
operator|<<
literal|')'
expr_stmt|;
name|str
operator|<<
literal|'\n'
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|type
operator|.
name|iconName
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
name|str
operator|<<
literal|"Icon    : "
operator|<<
name|type
operator|.
name|iconName
argument_list|()
operator|<<
literal|'\n'
expr_stmt|;
return|return
name|str
return|;
block|}
end_function
begin_function
DECL|function|operator <
name|bool
name|operator
name|<
parameter_list|(
specifier|const
name|QMimeType
modifier|&
name|t1
parameter_list|,
specifier|const
name|QMimeType
modifier|&
name|t2
parameter_list|)
block|{
return|return
name|t1
operator|.
name|name
argument_list|()
operator|<
name|t2
operator|.
name|name
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
name|argv
index|[]
parameter_list|)
block|{
name|QCoreApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|QCoreApplication
operator|::
name|setApplicationVersion
argument_list|(
name|QT_VERSION_STR
argument_list|)
expr_stmt|;
name|QCommandLineParser
name|parser
decl_stmt|;
name|parser
operator|.
name|addHelpOption
argument_list|()
expr_stmt|;
name|parser
operator|.
name|addVersionOption
argument_list|()
expr_stmt|;
name|QCommandLineOption
name|matchContentOnlyOption
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"c"
operator|<<
literal|"content"
argument_list|,
literal|"Use only the file content for determining the mimetype."
argument_list|)
decl_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|matchContentOnlyOption
argument_list|)
expr_stmt|;
name|QCommandLineOption
name|matchFileOnlyOption
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"f"
operator|<<
literal|"filename-only"
argument_list|,
literal|"Whether use the file name only for determining the mimetype. Not used if -c is specified."
argument_list|)
decl_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|matchFileOnlyOption
argument_list|)
expr_stmt|;
name|QCommandLineOption
name|dumpAllOption
argument_list|(
literal|"a"
argument_list|,
literal|"Dump all mime types."
argument_list|)
decl_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|dumpAllOption
argument_list|)
expr_stmt|;
name|parser
operator|.
name|addPositionalArgument
argument_list|(
literal|"file"
argument_list|,
literal|"The file(s) to analyze."
argument_list|)
expr_stmt|;
name|parser
operator|.
name|process
argument_list|(
name|app
argument_list|)
expr_stmt|;
name|QMimeDatabase
operator|::
name|MatchMode
name|matchMode
init|=
name|QMimeDatabase
operator|::
name|MatchDefault
decl_stmt|;
if|if
condition|(
name|parser
operator|.
name|isSet
argument_list|(
name|matchContentOnlyOption
argument_list|)
condition|)
name|matchMode
operator|=
name|QMimeDatabase
operator|::
name|MatchContent
expr_stmt|;
elseif|else
if|if
condition|(
name|parser
operator|.
name|isSet
argument_list|(
name|matchFileOnlyOption
argument_list|)
condition|)
name|matchMode
operator|=
name|QMimeDatabase
operator|::
name|MatchExtension
expr_stmt|;
specifier|const
name|bool
name|dumpAll
init|=
name|parser
operator|.
name|isSet
argument_list|(
name|dumpAllOption
argument_list|)
decl_stmt|;
name|QMimeDatabase
name|mimeDatabase
decl_stmt|;
if|if
condition|(
name|dumpAll
condition|)
block|{
name|QList
argument_list|<
name|QMimeType
argument_list|>
name|mimeTypes
init|=
name|mimeDatabase
operator|.
name|allMimeTypes
argument_list|()
decl_stmt|;
name|std
operator|::
name|stable_sort
argument_list|(
name|mimeTypes
operator|.
name|begin
argument_list|()
argument_list|,
name|mimeTypes
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|std
operator|::
name|wcout
operator|<<
name|mimeTypes
operator|.
name|size
argument_list|()
operator|<<
literal|" mime types found.\n\n"
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QMimeType
modifier|&
name|type
decl|,
name|mimeTypes
control|)
name|std
operator|::
name|wcout
operator|<<
name|type
operator|<<
literal|'\n'
expr_stmt|;
block|}
else|else
block|{
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|fileName
decl|,
name|parser
operator|.
name|positionalArguments
argument_list|()
control|)
block|{
name|QMimeType
name|data
init|=
name|mimeDatabase
operator|.
name|mimeTypeForFile
argument_list|(
name|fileName
argument_list|,
name|matchMode
argument_list|)
decl_stmt|;
name|std
operator|::
name|wcout
operator|<<
literal|"File    : "
operator|<<
name|fileName
operator|<<
literal|'\n'
operator|<<
name|data
operator|<<
literal|'\n'
expr_stmt|;
block|}
block|}
return|return
literal|0
return|;
block|}
end_function
end_unit
