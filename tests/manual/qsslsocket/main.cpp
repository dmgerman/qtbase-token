begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 BlackBerry Limited. All rights reserved. ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtNetwork/qsslconfiguration.h>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qsslsocket.h>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SSL
end_ifndef
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QSslConfiguration::NextProtocolNegotiationStatus
argument_list|)
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_class
DECL|class|tst_QSslSocket
class|class
name|tst_QSslSocket
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
ifndef|#
directive|ifndef
name|QT_NO_SSL
private|private
name|slots
private|:
name|void
name|nextProtocolNegotiation_data
parameter_list|()
function_decl|;
name|void
name|nextProtocolNegotiation
parameter_list|()
function_decl|;
endif|#
directive|endif
comment|// QT_NO_SSL
block|}
class|;
end_class
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SSL
end_ifndef
begin_function
DECL|function|nextProtocolNegotiation_data
name|void
name|tst_QSslSocket
operator|::
name|nextProtocolNegotiation_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"setConfiguration"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"host"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QList
argument_list|<
name|QByteArray
argument_list|>
argument_list|>
argument_list|(
literal|"allowedProtocols"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"expectedProtocol"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QSslConfiguration
operator|::
name|NextProtocolNegotiationStatus
argument_list|>
argument_list|(
literal|"expectedStatus"
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QString
argument_list|>
name|hosts
init|=
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
name|QStringLiteral
argument_list|(
literal|"www.google.com"
argument_list|)
operator|<<
name|QStringLiteral
argument_list|(
literal|"www.facebook.com"
argument_list|)
operator|<<
name|QStringLiteral
argument_list|(
literal|"www.twitter.com"
argument_list|)
operator|<<
name|QStringLiteral
argument_list|(
literal|"graph.facebook.com"
argument_list|)
operator|<<
name|QStringLiteral
argument_list|(
literal|"api.twitter.com"
argument_list|)
decl_stmt|;
foreach|foreach
control|(
name|QString
name|host
decl|,
name|hosts
control|)
block|{
name|QByteArray
name|tag
init|=
name|host
operator|.
name|toLocal8Bit
argument_list|()
decl_stmt|;
name|tag
operator|.
name|append
argument_list|(
literal|"-none"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|tag
argument_list|)
operator|<<
literal|false
operator|<<
name|host
operator|<<
name|QList
argument_list|<
name|QByteArray
argument_list|>
argument_list|()
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QSslConfiguration
operator|::
name|NextProtocolNegotiationNone
expr_stmt|;
name|tag
operator|=
name|host
operator|.
name|toLocal8Bit
argument_list|()
expr_stmt|;
name|tag
operator|.
name|append
argument_list|(
literal|"-none-explicit"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|tag
argument_list|)
operator|<<
literal|true
operator|<<
name|host
operator|<<
name|QList
argument_list|<
name|QByteArray
argument_list|>
argument_list|()
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QSslConfiguration
operator|::
name|NextProtocolNegotiationNone
expr_stmt|;
name|tag
operator|=
name|host
operator|.
name|toLocal8Bit
argument_list|()
expr_stmt|;
name|tag
operator|.
name|append
argument_list|(
literal|"-http/1.1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|tag
argument_list|)
operator|<<
literal|true
operator|<<
name|host
operator|<<
operator|(
name|QList
argument_list|<
name|QByteArray
argument_list|>
argument_list|()
operator|<<
name|QSslConfiguration
operator|::
name|NextProtocolHttp1_1
operator|)
operator|<<
name|QByteArray
argument_list|(
name|QSslConfiguration
operator|::
name|NextProtocolHttp1_1
argument_list|)
operator|<<
name|QSslConfiguration
operator|::
name|NextProtocolNegotiationNegotiated
expr_stmt|;
name|tag
operator|=
name|host
operator|.
name|toLocal8Bit
argument_list|()
expr_stmt|;
name|tag
operator|.
name|append
argument_list|(
literal|"-spdy/3"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|tag
argument_list|)
operator|<<
literal|true
operator|<<
name|host
operator|<<
operator|(
name|QList
argument_list|<
name|QByteArray
argument_list|>
argument_list|()
operator|<<
name|QSslConfiguration
operator|::
name|NextProtocolSpdy3_0
operator|)
operator|<<
name|QByteArray
argument_list|(
name|QSslConfiguration
operator|::
name|NextProtocolSpdy3_0
argument_list|)
operator|<<
name|QSslConfiguration
operator|::
name|NextProtocolNegotiationNegotiated
expr_stmt|;
name|tag
operator|=
name|host
operator|.
name|toLocal8Bit
argument_list|()
expr_stmt|;
name|tag
operator|.
name|append
argument_list|(
literal|"-spdy/3-and-http/1.1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|tag
argument_list|)
operator|<<
literal|true
operator|<<
name|host
operator|<<
operator|(
name|QList
argument_list|<
name|QByteArray
argument_list|>
argument_list|()
operator|<<
name|QSslConfiguration
operator|::
name|NextProtocolSpdy3_0
operator|<<
name|QSslConfiguration
operator|::
name|NextProtocolHttp1_1
operator|)
operator|<<
name|QByteArray
argument_list|(
name|QSslConfiguration
operator|::
name|NextProtocolSpdy3_0
argument_list|)
operator|<<
name|QSslConfiguration
operator|::
name|NextProtocolNegotiationNegotiated
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|nextProtocolNegotiation
name|void
name|tst_QSslSocket
operator|::
name|nextProtocolNegotiation
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QSslSocket
operator|::
name|supportsSsl
argument_list|()
condition|)
return|return;
name|QSslSocket
name|socket
decl_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|setConfiguration
argument_list|)
expr_stmt|;
if|if
condition|(
name|setConfiguration
condition|)
block|{
name|QSslConfiguration
name|conf
init|=
name|socket
operator|.
name|sslConfiguration
argument_list|()
decl_stmt|;
name|QFETCH
argument_list|(
name|QList
argument_list|<
name|QByteArray
argument_list|>
argument_list|,
name|allowedProtocols
argument_list|)
expr_stmt|;
name|conf
operator|.
name|setAllowedNextProtocols
argument_list|(
name|allowedProtocols
argument_list|)
expr_stmt|;
name|socket
operator|.
name|setSslConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
block|}
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|socket
operator|.
name|connectToHostEncrypted
argument_list|(
name|host
argument_list|,
literal|443
argument_list|)
expr_stmt|;
name|socket
operator|.
name|ignoreSslErrors
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|.
name|waitForEncrypted
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|expectedProtocol
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|sslConfiguration
argument_list|()
operator|.
name|nextNegotiatedProtocol
argument_list|()
argument_list|,
name|expectedProtocol
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QSslConfiguration
operator|::
name|NextProtocolNegotiationStatus
argument_list|,
name|expectedStatus
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|sslConfiguration
argument_list|()
operator|.
name|nextProtocolNegotiationStatus
argument_list|()
argument_list|,
name|expectedStatus
argument_list|)
expr_stmt|;
name|socket
operator|.
name|disconnectFromHost
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|.
name|waitForDisconnected
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_SSL
end_comment
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QSslSocket
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"main.moc"
end_include
end_unit
