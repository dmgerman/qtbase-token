begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QFileInfo>
end_include
begin_include
include|#
directive|include
file|<QFile>
end_include
begin_include
include|#
directive|include
file|<QDir>
end_include
begin_include
include|#
directive|include
file|<iostream>
end_include
begin_include
include|#
directive|include
file|<string>
end_include
begin_decl_stmt
DECL|variable|usage1
specifier|static
specifier|const
name|char
name|usage1
index|[]
init|=
literal|"\nTests various file functionality in Qt\n\n"
literal|"Usage: "
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|usage2
specifier|static
specifier|const
name|char
name|usage2
index|[]
init|=
literal|" [KEYWORD] [ARGUMENTS]\n\n"
literal|"Keywords: ls  FILES             list file information\n"
literal|"          mv  SOURCE TARGET     rename files using QFile::rename\n"
literal|"          cp  SOURCE TARGET     copy files using QFile::copy\n"
literal|"          rm  FILE              remove file using QFile::remove\n"
literal|"          rmr DIR               remove directory recursively\n"
literal|"                                using QDir::removeRecursively\n"
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|permissions
specifier|static
specifier|inline
name|std
operator|::
name|string
name|permissions
parameter_list|(
name|QFile
operator|::
name|Permissions
name|permissions
parameter_list|)
block|{
name|std
operator|::
name|string
name|result
argument_list|(
literal|10
argument_list|,
literal|'-'
argument_list|)
decl_stmt|;
if|if
condition|(
name|permissions
operator|&
name|QFile
operator|::
name|ReadOwner
condition|)
name|result
index|[
literal|1
index|]
operator|=
literal|'r'
expr_stmt|;
if|if
condition|(
name|permissions
operator|&
name|QFile
operator|::
name|WriteOwner
condition|)
name|result
index|[
literal|2
index|]
operator|=
literal|'w'
expr_stmt|;
if|if
condition|(
name|permissions
operator|&
name|QFile
operator|::
name|ExeOwner
condition|)
name|result
index|[
literal|3
index|]
operator|=
literal|'x'
expr_stmt|;
if|if
condition|(
name|permissions
operator|&
name|QFile
operator|::
name|ReadGroup
condition|)
name|result
index|[
literal|4
index|]
operator|=
literal|'r'
expr_stmt|;
if|if
condition|(
name|permissions
operator|&
name|QFile
operator|::
name|WriteGroup
condition|)
name|result
index|[
literal|5
index|]
operator|=
literal|'w'
expr_stmt|;
if|if
condition|(
name|permissions
operator|&
name|QFile
operator|::
name|ExeGroup
condition|)
name|result
index|[
literal|6
index|]
operator|=
literal|'x'
expr_stmt|;
if|if
condition|(
name|permissions
operator|&
name|QFile
operator|::
name|ReadOther
condition|)
name|result
index|[
literal|7
index|]
operator|=
literal|'r'
expr_stmt|;
if|if
condition|(
name|permissions
operator|&
name|QFile
operator|::
name|WriteOther
condition|)
name|result
index|[
literal|8
index|]
operator|=
literal|'w'
expr_stmt|;
if|if
condition|(
name|permissions
operator|&
name|QFile
operator|::
name|ExeOther
condition|)
name|result
index|[
literal|9
index|]
operator|=
literal|'x'
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|permissions
specifier|static
specifier|inline
name|std
operator|::
name|string
name|permissions
parameter_list|(
specifier|const
name|QFileInfo
modifier|&
name|fi
parameter_list|)
block|{
name|std
operator|::
name|string
name|result
init|=
name|permissions
argument_list|(
name|fi
operator|.
name|permissions
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|fi
operator|.
name|isSymLink
argument_list|()
condition|)
name|result
index|[
literal|0
index|]
operator|=
literal|'l'
expr_stmt|;
elseif|else
if|if
condition|(
name|fi
operator|.
name|isDir
argument_list|()
condition|)
name|result
index|[
literal|0
index|]
operator|=
literal|'d'
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|ls
specifier|static
name|int
name|ls
parameter_list|(
name|int
name|argCount
parameter_list|,
name|char
modifier|*
modifier|*
name|args
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|argCount
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QFileInfo
name|fi
argument_list|(
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|args
index|[
name|i
index|]
argument_list|)
argument_list|)
decl_stmt|;
name|std
operator|::
name|cout
operator|<<
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|fi
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
operator|.
name|toStdString
argument_list|()
operator|<<
literal|' '
operator|<<
name|fi
operator|.
name|size
argument_list|()
operator|<<
literal|' '
operator|<<
name|permissions
argument_list|(
name|fi
argument_list|)
expr_stmt|;
if|if
condition|(
name|fi
operator|.
name|exists
argument_list|()
condition|)
name|std
operator|::
name|cout
operator|<<
literal|" [exists]"
expr_stmt|;
if|if
condition|(
name|fi
operator|.
name|isFile
argument_list|()
condition|)
name|std
operator|::
name|cout
operator|<<
literal|" [file]"
expr_stmt|;
if|if
condition|(
name|fi
operator|.
name|isSymLink
argument_list|()
condition|)
block|{
name|std
operator|::
name|cout
operator|<<
literal|" [symlink to "
operator|<<
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|fi
operator|.
name|symLinkTarget
argument_list|()
argument_list|)
operator|.
name|toStdString
argument_list|()
operator|<<
literal|']'
expr_stmt|;
block|}
if|if
condition|(
name|fi
operator|.
name|isDir
argument_list|()
condition|)
name|std
operator|::
name|cout
operator|<<
literal|" [dir]"
expr_stmt|;
name|std
operator|::
name|cout
operator|<<
name|std
operator|::
name|endl
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|mv
specifier|static
name|int
name|mv
parameter_list|(
specifier|const
name|char
modifier|*
name|sourceFileName
parameter_list|,
specifier|const
name|char
modifier|*
name|targetFileName
parameter_list|)
block|{
name|QFile
name|sourceFile
argument_list|(
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|sourceFileName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sourceFile
operator|.
name|rename
argument_list|(
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|targetFileName
argument_list|)
argument_list|)
condition|)
block|{
name|qWarning
argument_list|()
operator|.
name|nospace
argument_list|()
operator|<<
name|sourceFile
operator|.
name|errorString
argument_list|()
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|cp
specifier|static
name|int
name|cp
parameter_list|(
specifier|const
name|char
modifier|*
name|sourceFileName
parameter_list|,
specifier|const
name|char
modifier|*
name|targetFileName
parameter_list|)
block|{
name|QFile
name|sourceFile
argument_list|(
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|sourceFileName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sourceFile
operator|.
name|copy
argument_list|(
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|targetFileName
argument_list|)
argument_list|)
condition|)
block|{
name|qWarning
argument_list|()
operator|.
name|nospace
argument_list|()
operator|<<
name|sourceFile
operator|.
name|errorString
argument_list|()
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|rm
specifier|static
name|int
name|rm
parameter_list|(
specifier|const
name|char
modifier|*
name|fileName
parameter_list|)
block|{
name|QFile
name|file
argument_list|(
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|fileName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|remove
argument_list|()
condition|)
block|{
name|qWarning
argument_list|()
operator|.
name|nospace
argument_list|()
operator|<<
name|file
operator|.
name|errorString
argument_list|()
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|rmr
specifier|static
name|int
name|rmr
parameter_list|(
specifier|const
name|char
modifier|*
name|dirName
parameter_list|)
block|{
if|#
directive|if
name|QT_VERSION
operator|<
literal|0x050000
name|Q_UNUSED
argument_list|(
argument|dirName
argument_list|)
return|return
literal|1
return|;
else|#
directive|else
name|QDir
name|dir
argument_list|(
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|dirName
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|removeRecursively
argument_list|()
condition|)
block|{
name|qWarning
argument_list|()
operator|.
name|nospace
argument_list|()
operator|<<
literal|"Failed to remove "
operator|<<
name|dir
operator|.
name|absolutePath
argument_list|()
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
return|return
literal|0
return|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
name|argv
index|[]
parameter_list|)
block|{
name|QCoreApplication
name|a
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|Q_UNUSED
argument_list|(
argument|a
argument_list|)
if|if
condition|(
name|argc
operator|>=
literal|3
operator|&&
operator|!
name|qstrcmp
argument_list|(
name|argv
index|[
literal|1
index|]
argument_list|,
literal|"ls"
argument_list|)
condition|)
return|return
name|ls
argument_list|(
name|argc
operator|-
literal|2
argument_list|,
name|argv
operator|+
literal|2
argument_list|)
return|;
if|if
condition|(
name|argc
operator|==
literal|4
operator|&&
operator|!
name|qstrcmp
argument_list|(
name|argv
index|[
literal|1
index|]
argument_list|,
literal|"mv"
argument_list|)
condition|)
return|return
name|mv
argument_list|(
name|argv
index|[
literal|2
index|]
argument_list|,
name|argv
index|[
literal|3
index|]
argument_list|)
return|;
if|if
condition|(
name|argc
operator|==
literal|4
operator|&&
operator|!
name|qstrcmp
argument_list|(
name|argv
index|[
literal|1
index|]
argument_list|,
literal|"cp"
argument_list|)
condition|)
return|return
name|cp
argument_list|(
name|argv
index|[
literal|2
index|]
argument_list|,
name|argv
index|[
literal|3
index|]
argument_list|)
return|;
if|if
condition|(
name|argc
operator|==
literal|3
operator|&&
operator|!
name|qstrcmp
argument_list|(
name|argv
index|[
literal|1
index|]
argument_list|,
literal|"rm"
argument_list|)
condition|)
return|return
name|rm
argument_list|(
name|argv
index|[
literal|2
index|]
argument_list|)
return|;
if|if
condition|(
name|argc
operator|==
literal|3
operator|&&
operator|!
name|qstrcmp
argument_list|(
name|argv
index|[
literal|1
index|]
argument_list|,
literal|"rmr"
argument_list|)
condition|)
return|return
name|rmr
argument_list|(
name|argv
index|[
literal|2
index|]
argument_list|)
return|;
name|std
operator|::
name|cerr
operator|<<
name|usage1
operator|<<
name|argv
index|[
literal|0
index|]
operator|<<
name|usage2
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
end_unit
