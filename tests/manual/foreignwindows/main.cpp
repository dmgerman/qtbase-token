begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtWidgets/QAction>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QApplication>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QDesktopWidget>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QMainWindow>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QMenu>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QMenuBar>
end_include
begin_include
include|#
directive|include
file|<QtWidgets/QToolBar>
end_include
begin_include
include|#
directive|include
file|<QtGui/QScreen>
end_include
begin_include
include|#
directive|include
file|<QtGui/QWindow>
end_include
begin_include
include|#
directive|include
file|<QtCore/QCommandLineOption>
end_include
begin_include
include|#
directive|include
file|<QtCore/QCommandLineParser>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_include
include|#
directive|include
file|<QtCore/QSharedPointer>
end_include
begin_include
include|#
directive|include
file|<QtCore/QStringList>
end_include
begin_include
include|#
directive|include
file|<QtCore/QTextStream>
end_include
begin_include
include|#
directive|include
file|<QtCore/QTimer>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WIN
end_ifdef
begin_include
include|#
directive|include
file|<QtCore/qt_windows.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<eventfilter.h>
end_include
begin_comment
comment|// diaglib
end_comment
begin_include
include|#
directive|include
file|<nativewindowdump.h>
end_include
begin_include
include|#
directive|include
file|<qwidgetdump.h>
end_include
begin_include
include|#
directive|include
file|<qwindowdump.h>
end_include
begin_include
include|#
directive|include
file|<iostream>
end_include
begin_include
include|#
directive|include
file|<algorithm>
end_include
begin_macro
name|QT_USE_NAMESPACE
end_macro
begin_typedef
DECL|typedef|WidgetPtr
typedef|typedef
name|QSharedPointer
argument_list|<
name|QWidget
argument_list|>
name|WidgetPtr
typedef|;
end_typedef
begin_typedef
DECL|typedef|WidgetPtrList
typedef|typedef
name|QList
argument_list|<
name|WidgetPtr
argument_list|>
name|WidgetPtrList
typedef|;
end_typedef
begin_typedef
DECL|typedef|WIdList
typedef|typedef
name|QList
argument_list|<
name|WId
argument_list|>
name|WIdList
typedef|;
end_typedef
begin_comment
comment|// Create some pre-defined Windows controls by class name
end_comment
begin_function
DECL|function|createInternalWindow
specifier|static
name|WId
name|createInternalWindow
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
name|WId
name|result
init|=
literal|0
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
if|if
condition|(
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"BUTTON"
argument_list|)
operator|||
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"COMBOBOX"
argument_list|)
operator|||
name|name
operator|==
name|QLatin1String
argument_list|(
literal|"EDIT"
argument_list|)
operator|||
name|name
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"RICHEDIT"
argument_list|)
argument_list|)
condition|)
block|{
specifier|const
name|HWND
name|hwnd
init|=
name|CreateWindowEx
argument_list|(
literal|0
argument_list|,
cast|reinterpret_cast
argument_list|<
specifier|const
name|wchar_t
operator|*
argument_list|>
argument_list|(
name|name
operator|.
name|utf16
argument_list|()
argument_list|)
argument_list|,
literal|L"NativeCtrl"
argument_list|,
name|WS_OVERLAPPEDWINDOW
argument_list|,
name|CW_USEDEFAULT
argument_list|,
name|CW_USEDEFAULT
argument_list|,
name|CW_USEDEFAULT
argument_list|,
name|CW_USEDEFAULT
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
name|GetModuleHandle
argument_list|(
name|NULL
argument_list|)
argument_list|,
name|NULL
argument_list|)
decl_stmt|;
if|if
condition|(
name|hwnd
condition|)
block|{
name|SetWindowText
argument_list|(
name|hwnd
argument_list|,
literal|L"Demo"
argument_list|)
expr_stmt|;
name|result
operator|=
name|WId
argument_list|(
name|hwnd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qErrnoWarning
argument_list|(
literal|"Cannot create window \"%s\""
argument_list|,
name|qPrintable
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|#
directive|else
comment|// Q_OS_WIN
name|Q_UNUSED
argument_list|(
argument|name
argument_list|)
endif|#
directive|endif
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|// Embed a foreign window using createWindowContainer() providing
end_comment
begin_comment
comment|// menu actions to dump information.
end_comment
begin_class
DECL|class|EmbeddingWindow
class|class
name|EmbeddingWindow
super|:
specifier|public
name|QMainWindow
block|{
name|Q_OBJECT
public|public:
specifier|explicit
name|EmbeddingWindow
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|)
constructor_decl|;
public|public
name|slots
public|:
name|void
name|releaseForeignWindow
parameter_list|()
function_decl|;
private|private:
DECL|member|m_window
name|QWindow
modifier|*
name|m_window
decl_stmt|;
DECL|member|m_releaseAction
name|QAction
modifier|*
name|m_releaseAction
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|EmbeddingWindow
name|EmbeddingWindow
operator|::
name|EmbeddingWindow
parameter_list|(
name|QWindow
modifier|*
name|window
parameter_list|)
member_init_list|:
name|m_window
argument_list|(
name|window
argument_list|)
block|{
specifier|const
name|QString
name|title
init|=
name|QLatin1String
argument_list|(
literal|"Qt "
argument_list|)
operator|+
name|QLatin1String
argument_list|(
name|QT_VERSION_STR
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|" 0x"
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|window
operator|->
name|winId
argument_list|()
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|setWindowTitle
argument_list|(
name|title
argument_list|)
expr_stmt|;
name|setObjectName
argument_list|(
literal|"MainWindow"
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|container
init|=
name|QWidget
operator|::
name|createWindowContainer
argument_list|(
name|window
argument_list|,
name|Q_NULLPTR
argument_list|,
name|Qt
operator|::
name|Widget
argument_list|)
decl_stmt|;
name|container
operator|->
name|setObjectName
argument_list|(
literal|"Container"
argument_list|)
expr_stmt|;
name|setCentralWidget
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|QMenu
modifier|*
name|fileMenu
init|=
name|menuBar
argument_list|()
operator|->
name|addMenu
argument_list|(
literal|"File"
argument_list|)
decl_stmt|;
name|fileMenu
operator|->
name|setObjectName
argument_list|(
literal|"FileMenu"
argument_list|)
expr_stmt|;
name|QToolBar
modifier|*
name|toolbar
init|=
operator|new
name|QToolBar
decl_stmt|;
name|addToolBar
argument_list|(
name|Qt
operator|::
name|TopToolBarArea
argument_list|,
name|toolbar
argument_list|)
expr_stmt|;
comment|// Manipulation
name|QAction
modifier|*
name|action
init|=
name|fileMenu
operator|->
name|addAction
argument_list|(
literal|"Visible"
argument_list|)
decl_stmt|;
name|action
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|action
operator|->
name|setChecked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|action
argument_list|,
operator|&
name|QAction
operator|::
name|toggled
argument_list|,
name|m_window
argument_list|,
operator|&
name|QWindow
operator|::
name|setVisible
argument_list|)
expr_stmt|;
name|toolbar
operator|->
name|addAction
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|m_releaseAction
operator|=
name|fileMenu
operator|->
name|addAction
argument_list|(
literal|"Release"
argument_list|,
name|this
argument_list|,
operator|&
name|EmbeddingWindow
operator|::
name|releaseForeignWindow
argument_list|)
expr_stmt|;
name|toolbar
operator|->
name|addAction
argument_list|(
name|m_releaseAction
argument_list|)
expr_stmt|;
name|fileMenu
operator|->
name|addSeparator
argument_list|()
expr_stmt|;
comment|// Diaglib actions
name|action
operator|=
name|fileMenu
operator|->
name|addAction
argument_list|(
literal|"Dump Widgets"
argument_list|,
name|this
argument_list|,
capture|[]
parameter_list|()
block|{
name|QtDiag
operator|::
name|dumpAllWidgets
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|toolbar
operator|->
name|addAction
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|action
operator|=
name|fileMenu
operator|->
name|addAction
argument_list|(
literal|"Dump Windows"
argument_list|,
name|this
argument_list|,
capture|[]
parameter_list|()
block|{
name|QtDiag
operator|::
name|dumpAllWindows
argument_list|()
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|toolbar
operator|->
name|addAction
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|action
operator|=
name|fileMenu
operator|->
name|addAction
argument_list|(
literal|"Dump Native Windows"
argument_list|,
name|this
argument_list|,
capture|[
name|this
capture|]
parameter_list|()
block|{
name|QtDiag
operator|::
name|dumpNativeWindows
argument_list|(
name|winId
argument_list|()
argument_list|)
expr_stmt|;
block|}
argument_list|)
expr_stmt|;
name|toolbar
operator|->
name|addAction
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|fileMenu
operator|->
name|addSeparator
argument_list|()
expr_stmt|;
name|action
operator|=
name|fileMenu
operator|->
name|addAction
argument_list|(
literal|"Quit"
argument_list|,
name|qApp
argument_list|,
operator|&
name|QCoreApplication
operator|::
name|quit
argument_list|)
expr_stmt|;
name|toolbar
operator|->
name|addAction
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|action
operator|->
name|setShortcut
argument_list|(
name|Qt
operator|::
name|CTRL
operator|+
name|Qt
operator|::
name|Key_Q
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|releaseForeignWindow
name|void
name|EmbeddingWindow
operator|::
name|releaseForeignWindow
parameter_list|()
block|{
if|if
condition|(
name|m_window
condition|)
block|{
name|m_window
operator|->
name|setParent
argument_list|(
name|Q_NULLPTR
argument_list|)
expr_stmt|;
name|m_window
operator|=
name|Q_NULLPTR
expr_stmt|;
name|m_releaseAction
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// Dump information about foreign windows.
end_comment
begin_class
DECL|class|WindowDumper
class|class
name|WindowDumper
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|WindowDumper
specifier|explicit
name|WindowDumper
parameter_list|(
specifier|const
name|QWindowList
modifier|&
name|watchedWindows
parameter_list|)
member_init_list|:
name|m_watchedWindows
argument_list|(
name|watchedWindows
argument_list|)
block|{}
public|public
name|slots
public|:
name|void
name|dump
parameter_list|()
specifier|const
function_decl|;
private|private:
DECL|member|m_watchedWindows
specifier|const
name|QWindowList
name|m_watchedWindows
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|dump
name|void
name|WindowDumper
operator|::
name|dump
parameter_list|()
specifier|const
block|{
specifier|static
name|int
name|n
init|=
literal|0
decl_stmt|;
name|QString
name|s
decl_stmt|;
name|QDebug
name|debug
argument_list|(
operator|&
name|s
argument_list|)
decl_stmt|;
name|debug
operator|.
name|nospace
argument_list|()
expr_stmt|;
name|debug
operator|.
name|setVerbosity
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|debug
operator|<<
literal|'#'
operator|<<
name|n
operator|++
expr_stmt|;
if|if
condition|(
name|m_watchedWindows
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
name|debug
operator|<<
literal|'\n'
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QWindow
modifier|*
name|w
decl|,
name|m_watchedWindows
control|)
block|{
specifier|const
name|QPoint
name|globalPos
init|=
name|w
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|()
argument_list|)
decl_stmt|;
name|debug
operator|<<
literal|"  "
operator|<<
name|w
operator|<<
literal|" pos="
operator|<<
name|globalPos
operator|.
name|x
argument_list|()
operator|<<
literal|','
operator|<<
name|globalPos
operator|.
name|y
argument_list|()
operator|<<
literal|'\n'
expr_stmt|;
block|}
name|std
operator|::
name|cout
operator|<<
name|qPrintable
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|description
specifier|static
name|QString
name|description
parameter_list|(
specifier|const
name|QString
modifier|&
name|appName
parameter_list|)
block|{
name|QString
name|result
decl_stmt|;
name|QTextStream
argument_list|(
operator|&
name|result
argument_list|)
operator|<<
literal|"\nDumps information about foreign windows passed on the command line or\n"
literal|"tests embedding foreign windows into Qt.\n\nUse cases:\n\n"
operator|<<
name|appName
operator|<<
literal|" -a          Dump a list of all native window ids.\n"
operator|<<
name|appName
operator|<<
literal|"<winid>     Dump information on the window.\n"
operator|<<
name|appName
operator|<<
literal|" -c<winid>  Dump information on the window continuously.\n"
operator|<<
name|appName
operator|<<
literal|" -e<winid>  Embed window into a Qt widget.\n"
operator|<<
literal|"\nOn Windows, class names of well known controls (EDIT, BUTTON...) can be\n"
literal|"passed as<winid> along with -e, which will create the control.\n"
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_struct
DECL|struct|EventFilterOption
struct|struct
name|EventFilterOption
block|{
DECL|member|name
specifier|const
name|char
modifier|*
name|name
decl_stmt|;
DECL|member|description
specifier|const
name|char
modifier|*
name|description
decl_stmt|;
DECL|member|categories
name|QtDiag
operator|::
name|EventFilter
operator|::
name|EventCategories
name|categories
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
DECL|variable|eventFilterOptions
name|EventFilterOption
name|eventFilterOptions
index|[]
init|=
block|{
block|{
literal|"mouse-events"
block|,
literal|"Dump mouse events."
block|,
name|QtDiag
operator|::
name|EventFilter
operator|::
name|MouseEvents
block|}
block|,
block|{
literal|"keyboard-events"
block|,
literal|"Dump keyboard events."
block|,
name|QtDiag
operator|::
name|EventFilter
operator|::
name|KeyEvents
block|}
block|,
block|{
literal|"state-events"
block|,
literal|"Dump state/focus change events."
block|,
name|QtDiag
operator|::
name|EventFilter
operator|::
name|StateChangeEvents
operator||
name|QtDiag
operator|::
name|EventFilter
operator|::
name|FocusEvents
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|isOptionSet
specifier|static
specifier|inline
name|bool
name|isOptionSet
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
name|argv
index|[]
parameter_list|,
specifier|const
name|char
modifier|*
name|option
parameter_list|)
block|{
return|return
operator|(
name|argv
operator|+
name|argc
operator|)
operator|!=
name|std
operator|::
name|find_if
argument_list|(
name|argv
operator|+
literal|1
argument_list|,
name|argv
operator|+
name|argc
argument_list|,
capture|[
name|option
capture|]
parameter_list|(
specifier|const
name|char
modifier|*
name|arg
parameter_list|)
block|{
return|return
operator|!
name|qstrcmp
argument_list|(
name|arg
argument_list|,
name|option
argument_list|)
return|;
block|}
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
name|argv
index|[]
parameter_list|)
block|{
comment|// Check for no scaling before QApplication is instantiated.
if|if
condition|(
name|isOptionSet
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|,
literal|"-s"
argument_list|)
condition|)
name|QCoreApplication
operator|::
name|setAttribute
argument_list|(
name|Qt
operator|::
name|AA_DisableHighDpiScaling
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|setApplicationVersion
argument_list|(
name|QLatin1String
argument_list|(
name|QT_VERSION_STR
argument_list|)
argument_list|)
expr_stmt|;
name|QGuiApplication
operator|::
name|setApplicationDisplayName
argument_list|(
literal|"Foreign window tester"
argument_list|)
expr_stmt|;
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|QCommandLineParser
name|parser
decl_stmt|;
name|parser
operator|.
name|setSingleDashWordOptionMode
argument_list|(
name|QCommandLineParser
operator|::
name|ParseAsLongOptions
argument_list|)
expr_stmt|;
name|parser
operator|.
name|setApplicationDescription
argument_list|(
name|description
argument_list|(
name|QCoreApplication
operator|::
name|applicationName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|addHelpOption
argument_list|()
expr_stmt|;
name|parser
operator|.
name|addVersionOption
argument_list|()
expr_stmt|;
name|QCommandLineOption
name|noScalingDummy
argument_list|(
name|QStringLiteral
argument_list|(
literal|"s"
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Disable High DPI scaling."
argument_list|)
argument_list|)
decl_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|noScalingDummy
argument_list|)
expr_stmt|;
name|QCommandLineOption
name|outputAllOption
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QStringLiteral
argument_list|(
literal|"a"
argument_list|)
operator|<<
name|QStringLiteral
argument_list|(
literal|"all"
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Output all native window ids (requires diaglib)."
argument_list|)
argument_list|)
decl_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|outputAllOption
argument_list|)
expr_stmt|;
name|QCommandLineOption
name|continuousOption
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QStringLiteral
argument_list|(
literal|"c"
argument_list|)
operator|<<
name|QStringLiteral
argument_list|(
literal|"continuous"
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Output continuously."
argument_list|)
argument_list|)
decl_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|continuousOption
argument_list|)
expr_stmt|;
name|QCommandLineOption
name|embedOption
argument_list|(
name|QStringList
argument_list|()
operator|<<
name|QStringLiteral
argument_list|(
literal|"e"
argument_list|)
operator|<<
name|QStringLiteral
argument_list|(
literal|"embed"
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Embed a foreign window into a Qt widget."
argument_list|)
argument_list|)
decl_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|embedOption
argument_list|)
expr_stmt|;
specifier|const
name|int
name|eventFilterOptionCount
init|=
name|int
argument_list|(
sizeof|sizeof
argument_list|(
name|eventFilterOptions
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|eventFilterOptions
index|[
literal|0
index|]
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|eventFilterOptionCount
condition|;
operator|++
name|i
control|)
block|{
name|parser
operator|.
name|addOption
argument_list|(
name|QCommandLineOption
argument_list|(
name|QLatin1String
argument_list|(
name|eventFilterOptions
index|[
name|i
index|]
operator|.
name|name
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
name|eventFilterOptions
index|[
name|i
index|]
operator|.
name|description
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|parser
operator|.
name|addPositionalArgument
argument_list|(
name|QStringLiteral
argument_list|(
literal|"[windows]"
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Window IDs."
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|process
argument_list|(
name|QCoreApplication
operator|::
name|arguments
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|parser
operator|.
name|isSet
argument_list|(
name|outputAllOption
argument_list|)
condition|)
block|{
name|QtDiag
operator|::
name|dumpNativeWindows
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
name|QWindowList
name|windows
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|argument
decl|,
name|parser
operator|.
name|positionalArguments
argument_list|()
control|)
block|{
name|bool
name|ok
init|=
literal|true
decl_stmt|;
name|WId
name|wid
init|=
name|createInternalWindow
argument_list|(
name|argument
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|wid
condition|)
name|wid
operator|=
name|argument
operator|.
name|toULongLong
argument_list|(
operator|&
name|ok
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|wid
operator|||
operator|!
name|ok
condition|)
block|{
name|std
operator|::
name|cerr
operator|<<
literal|"Invalid window id: \""
operator|<<
name|qPrintable
argument_list|(
name|argument
argument_list|)
operator|<<
literal|"\"\n"
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|QWindow
modifier|*
name|foreignWindow
init|=
name|QWindow
operator|::
name|fromWinId
argument_list|(
name|wid
argument_list|)
decl_stmt|;
name|foreignWindow
operator|->
name|setObjectName
argument_list|(
literal|"ForeignWindow"
operator|+
name|QString
operator|::
name|number
argument_list|(
name|wid
argument_list|,
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|windows
operator|.
name|append
argument_list|(
name|foreignWindow
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|windows
operator|.
name|isEmpty
argument_list|()
condition|)
name|parser
operator|.
name|showHelp
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|int
name|exitCode
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|parser
operator|.
name|isSet
argument_list|(
name|embedOption
argument_list|)
condition|)
block|{
name|QtDiag
operator|::
name|EventFilter
operator|::
name|EventCategories
name|eventCategories
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|eventFilterOptionCount
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|parser
operator|.
name|isSet
argument_list|(
name|QLatin1String
argument_list|(
name|eventFilterOptions
index|[
name|i
index|]
operator|.
name|name
argument_list|)
argument_list|)
condition|)
name|eventCategories
operator||=
name|eventFilterOptions
index|[
name|i
index|]
operator|.
name|categories
expr_stmt|;
block|}
if|if
condition|(
name|eventCategories
condition|)
name|app
operator|.
name|installEventFilter
argument_list|(
operator|new
name|QtDiag
operator|::
name|EventFilter
argument_list|(
name|eventCategories
argument_list|,
operator|&
name|app
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QRect
name|availableGeometry
init|=
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|availableGeometry
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QPoint
name|pos
init|=
name|availableGeometry
operator|.
name|topLeft
argument_list|()
operator|+
name|QPoint
argument_list|(
name|availableGeometry
operator|.
name|width
argument_list|()
argument_list|,
name|availableGeometry
operator|.
name|height
argument_list|()
argument_list|)
operator|/
literal|3
decl_stmt|;
name|WidgetPtrList
name|mainWindows
decl_stmt|;
foreach|foreach
control|(
name|QWindow
modifier|*
name|window
decl|,
name|windows
control|)
block|{
name|WidgetPtr
name|mainWindow
argument_list|(
operator|new
name|EmbeddingWindow
argument_list|(
name|window
argument_list|)
argument_list|)
decl_stmt|;
name|mainWindow
operator|->
name|move
argument_list|(
name|pos
argument_list|)
expr_stmt|;
name|mainWindow
operator|->
name|resize
argument_list|(
name|availableGeometry
operator|.
name|size
argument_list|()
operator|/
literal|4
argument_list|)
expr_stmt|;
name|mainWindow
operator|->
name|show
argument_list|()
expr_stmt|;
name|pos
operator|+=
name|QPoint
argument_list|(
literal|40
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|mainWindows
operator|.
name|append
argument_list|(
name|mainWindow
argument_list|)
expr_stmt|;
block|}
name|exitCode
operator|=
name|app
operator|.
name|exec
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|parser
operator|.
name|isSet
argument_list|(
name|continuousOption
argument_list|)
condition|)
block|{
name|WindowDumper
name|dumper
argument_list|(
name|windows
argument_list|)
decl_stmt|;
name|dumper
operator|.
name|dump
argument_list|()
expr_stmt|;
name|QTimer
modifier|*
name|timer
init|=
operator|new
name|QTimer
argument_list|(
operator|&
name|dumper
argument_list|)
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|timer
argument_list|,
operator|&
name|QTimer
operator|::
name|timeout
argument_list|,
operator|&
name|dumper
argument_list|,
operator|&
name|WindowDumper
operator|::
name|dump
argument_list|)
expr_stmt|;
name|timer
operator|->
name|start
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|exitCode
operator|=
name|app
operator|.
name|exec
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|WindowDumper
argument_list|(
name|windows
argument_list|)
operator|.
name|dump
argument_list|()
expr_stmt|;
block|}
return|return
name|exitCode
return|;
block|}
end_function
begin_include
include|#
directive|include
file|"main.moc"
end_include
end_unit
