begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 ThorbjÃ¸rn Lund Martsum - tmartsum[at]gmail.com ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|//#define Q_NO_DEBUGMAP_PARENT_TEST
end_comment
begin_comment
comment|// Comment in line above to skip the parent test.
end_comment
begin_include
include|#
directive|include
file|<QtCore/QMap>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_function
DECL|function|noBugErase
name|void
name|noBugErase
parameter_list|()
block|{
name|QMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|a
decl_stmt|,
name|b
decl_stmt|;
name|a
index|[
literal|10
index|]
operator|=
literal|11
expr_stmt|;
name|a
index|[
literal|11
index|]
operator|=
literal|12
expr_stmt|;
name|b
operator|=
name|a
expr_stmt|;
name|b
operator|.
name|erase
argument_list|(
name|b
operator|.
name|begin
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|noBugInsertWithHints
name|void
name|noBugInsertWithHints
parameter_list|()
block|{
name|QMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|a
decl_stmt|;
name|QMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|b
decl_stmt|;
for|for
control|(
name|int
name|u
init|=
literal|100
init|;
name|u
operator|<
literal|10000
condition|;
name|u
operator|+=
literal|20
control|)
name|a
operator|.
name|insert
argument_list|(
name|u
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|b
operator|=
name|a
expr_stmt|;
name|QMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
operator|::
name|const_iterator
name|b_ite
argument_list|(
name|b
operator|.
name|begin
argument_list|()
argument_list|)
decl_stmt|;
comment|// b.begin() ensures correct detach()
operator|++
name|b_ite
expr_stmt|;
name|b
operator|.
name|insert
argument_list|(
name|b_ite
argument_list|,
literal|501
argument_list|,
literal|501
argument_list|)
expr_stmt|;
name|b
operator|.
name|insert
argument_list|(
name|b_ite
argument_list|,
literal|115
argument_list|,
literal|115
argument_list|)
expr_stmt|;
name|QMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|c
decl_stmt|;
name|c
operator|=
name|b
expr_stmt|;
name|c
operator|.
name|setSharable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testInsertWithHintCorruption
name|void
name|testInsertWithHintCorruption
parameter_list|()
block|{
name|qDebug
argument_list|()
operator|<<
literal|"Starting testInsertWithHintCorruption"
expr_stmt|;
name|QMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|a
decl_stmt|;
name|QMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|b
decl_stmt|;
for|for
control|(
name|int
name|u
init|=
literal|100
init|;
name|u
operator|<
literal|10000
condition|;
name|u
operator|+=
literal|20
control|)
name|a
operator|.
name|insert
argument_list|(
name|u
argument_list|,
name|u
argument_list|)
expr_stmt|;
name|b
operator|=
name|a
expr_stmt|;
name|QMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
operator|::
name|const_iterator
name|b_ite
init|=
name|b
operator|.
name|constBegin
argument_list|()
decl_stmt|;
operator|++
name|b_ite
expr_stmt|;
name|b
operator|.
name|insert
argument_list|(
name|b_ite
argument_list|,
literal|501
argument_list|,
literal|501
argument_list|)
expr_stmt|;
name|b
operator|.
name|insert
argument_list|(
name|b_ite
argument_list|,
literal|115
argument_list|,
literal|115
argument_list|)
expr_stmt|;
comment|// insert with wrong hint.
name|QMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|c
decl_stmt|;
name|c
operator|=
name|b
expr_stmt|;
name|c
operator|.
name|setSharable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"End of testInsertWithHintCorruption - failed silently"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testEraseCorruption
name|void
name|testEraseCorruption
parameter_list|()
block|{
name|qDebug
argument_list|()
operator|<<
literal|"Starting testEraseCorruption"
expr_stmt|;
name|QMap
argument_list|<
name|int
argument_list|,
name|int
argument_list|>
name|a
decl_stmt|,
name|b
decl_stmt|;
name|a
index|[
literal|10
index|]
operator|=
literal|11
expr_stmt|;
name|a
index|[
literal|11
index|]
operator|=
literal|12
expr_stmt|;
name|b
operator|=
name|a
expr_stmt|;
name|b
operator|.
name|erase
argument_list|(
name|a
operator|.
name|begin
argument_list|()
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"End of testEraseCorruption - failed silently"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|main
name|int
name|main
parameter_list|()
block|{
name|noBugErase
argument_list|()
expr_stmt|;
name|noBugInsertWithHints
argument_list|()
expr_stmt|;
comment|// testEraseCorruption();
name|testInsertWithHintCorruption
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
end_unit
