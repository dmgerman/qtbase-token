begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:GPL-EXCEPT$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3 as published by the Free Software ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtCore/QThread>
end_include
begin_include
include|#
directive|include
file|<QtCore/QSemaphore>
end_include
begin_include
include|#
directive|include
file|<QtCore/QElapsedTimer>
end_include
begin_include
include|#
directive|include
file|<QtCore/QSharedPointer>
end_include
begin_include
include|#
directive|include
file|<QtCore/QVector>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/QTcpSocket>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/QSslSocket>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/QNetworkReply>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/QNetworkAccessManager>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
end_ifdef
begin_include
include|#
directive|include
file|<private/qnetworkaccessmanager_p.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<qplatformdefs.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_UNIX
end_ifdef
begin_include
include|#
directive|include
file|<sys/types.h>
end_include
begin_include
include|#
directive|include
file|<sys/socket.h>
end_include
begin_include
include|#
directive|include
file|<sys/select.h>
end_include
begin_include
include|#
directive|include
file|<netinet/in.h>
end_include
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_include
include|#
directive|include
file|<netdb.h>
end_include
begin_include
include|#
directive|include
file|<signal.h>
end_include
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_include
include|#
directive|include
file|<fcntl.h>
end_include
begin_typedef
DECL|typedef|SOCKET
typedef|typedef
name|int
name|SOCKET
typedef|;
end_typedef
begin_define
DECL|macro|INVALID_SOCKET
define|#
directive|define
name|INVALID_SOCKET
value|-1
end_define
begin_define
DECL|macro|SOCKET_ERROR
define|#
directive|define
name|SOCKET_ERROR
value|-1
end_define
begin_elif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
end_elif
begin_include
include|#
directive|include
file|<winsock2.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_class
DECL|class|tst_NetworkRemoteStressTest
class|class
name|tst_NetworkRemoteStressTest
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|enumerator|AttemptCount
enum|enum
block|{
name|AttemptCount
init|=
literal|100
block|}
enum|;
name|tst_NetworkRemoteStressTest
parameter_list|()
constructor_decl|;
DECL|member|byteCounter
name|qint64
name|byteCounter
decl_stmt|;
DECL|member|manager
name|QNetworkAccessManager
name|manager
decl_stmt|;
DECL|member|httpUrls
DECL|member|httpsUrls
DECL|member|mixedUrls
name|QVector
argument_list|<
name|QUrl
argument_list|>
name|httpUrls
decl_stmt|,
name|httpsUrls
decl_stmt|,
name|mixedUrls
decl_stmt|;
DECL|member|intermediateDebug
name|bool
name|intermediateDebug
decl_stmt|;
private|private:
name|void
name|clearManager
parameter_list|()
function_decl|;
public|public
name|slots
public|:
name|void
name|initTestCase_data
parameter_list|()
function_decl|;
name|void
name|init
parameter_list|()
function_decl|;
DECL|function|slotReadAll
name|void
name|slotReadAll
parameter_list|()
block|{
name|byteCounter
operator|+=
cast|static_cast
argument_list|<
name|QIODevice
operator|*
argument_list|>
argument_list|(
name|sender
argument_list|()
argument_list|)
operator|->
name|readAll
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
private|private
name|Q_SLOTS
private|:
name|void
name|blockingSequentialRemoteHosts
parameter_list|()
function_decl|;
name|void
name|sequentialRemoteHosts
parameter_list|()
function_decl|;
name|void
name|parallelRemoteHosts_data
parameter_list|()
function_decl|;
name|void
name|parallelRemoteHosts
parameter_list|()
function_decl|;
name|void
name|namRemoteGet_data
parameter_list|()
function_decl|;
name|void
name|namRemoteGet
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_constructor
DECL|function|tst_NetworkRemoteStressTest
name|tst_NetworkRemoteStressTest
operator|::
name|tst_NetworkRemoteStressTest
parameter_list|()
member_init_list|:
name|intermediateDebug
argument_list|(
name|qgetenv
argument_list|(
literal|"STRESSDEBUG"
argument_list|)
operator|.
name|toInt
argument_list|()
operator|>
literal|0
argument_list|)
block|{
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|WSAData
name|wsadata
decl_stmt|;
comment|// IPv6 requires Winsock v2.0 or better.
name|WSAStartup
argument_list|(
name|MAKEWORD
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|&
name|wsadata
argument_list|)
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
operator|::
name|signal
argument_list|(
name|SIGALRM
argument_list|,
name|SIG_IGN
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QFile
name|urlList
argument_list|(
literal|":/url-list.txt"
argument_list|)
decl_stmt|;
if|if
condition|(
name|urlList
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
while|while
condition|(
operator|!
name|urlList
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|QByteArray
name|line
init|=
name|urlList
operator|.
name|readLine
argument_list|()
operator|.
name|trimmed
argument_list|()
decl_stmt|;
name|QUrl
name|url
init|=
name|QUrl
operator|::
name|fromEncoded
argument_list|(
name|line
argument_list|)
decl_stmt|;
if|if
condition|(
name|url
operator|.
name|scheme
argument_list|()
operator|==
literal|"http"
condition|)
block|{
name|httpUrls
operator|<<
name|url
expr_stmt|;
name|mixedUrls
operator|<<
name|url
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|url
operator|.
name|scheme
argument_list|()
operator|==
literal|"https"
condition|)
block|{
name|httpsUrls
operator|<<
name|url
expr_stmt|;
name|mixedUrls
operator|<<
name|url
expr_stmt|;
block|}
block|}
block|}
name|httpUrls
operator|<<
name|httpUrls
expr_stmt|;
name|httpsUrls
operator|<<
name|httpsUrls
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|initTestCase_data
name|void
name|tst_NetworkRemoteStressTest
operator|::
name|initTestCase_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVector
argument_list|<
name|QUrl
argument_list|>
argument_list|>
argument_list|(
literal|"urlList"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"useSslSocket"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-ssl"
argument_list|)
operator|<<
name|httpUrls
operator|<<
literal|false
expr_stmt|;
comment|//    QTest::newRow("no-ssl-in-sslsocket")<< httpUrls<< true;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ssl"
argument_list|)
operator|<<
name|httpsUrls
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mixed"
argument_list|)
operator|<<
name|mixedUrls
operator|<<
literal|false
expr_stmt|;
comment|//    QTest::newRow("mixed-in-sslsocket")<< mixedUrls<< true;
block|}
end_function
begin_function
DECL|function|init
name|void
name|tst_NetworkRemoteStressTest
operator|::
name|init
parameter_list|()
block|{
comment|// clear the internal cache
ifndef|#
directive|ifndef
name|QT_BUILD_INTERNAL
if|if
condition|(
name|strncmp
argument_list|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
argument_list|,
literal|"nam"
argument_list|,
literal|3
argument_list|)
operator|==
literal|0
condition|)
name|QSKIP
argument_list|(
literal|"QNetworkAccessManager tests disabled"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|clearManager
name|void
name|tst_NetworkRemoteStressTest
operator|::
name|clearManager
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
name|QNetworkAccessManagerPrivate
operator|::
name|clearCache
argument_list|(
operator|&
name|manager
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setProxy
argument_list|(
name|QNetworkProxy
argument_list|()
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setCache
argument_list|(
literal|0
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|nativeLookup
name|bool
name|nativeLookup
parameter_list|(
specifier|const
name|char
modifier|*
name|hostname
parameter_list|,
name|int
name|port
parameter_list|,
name|QByteArray
modifier|&
name|buf
parameter_list|)
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_GETADDRINFO
argument_list|)
operator|&&
literal|0
name|addrinfo
modifier|*
name|res
init|=
literal|0
decl_stmt|;
name|struct
name|addrinfo
name|hints
decl_stmt|;
name|memset
argument_list|(
operator|&
name|hints
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|hints
argument_list|)
argument_list|)
expr_stmt|;
name|hints
operator|.
name|ai_family
operator|=
name|PF_UNSPEC
expr_stmt|;
name|int
name|result
init|=
name|getaddrinfo
argument_list|(
name|QUrl
operator|::
name|toAce
argument_list|(
name|hostname
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|,
name|QByteArray
operator|::
name|number
argument_list|(
name|port
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|,
operator|&
name|hints
argument_list|,
operator|&
name|res
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|result
condition|)
return|return
literal|false
return|;
for|for
control|(
name|addrinfo
modifier|*
name|node
init|=
name|res
init|;
name|node
condition|;
name|node
operator|=
name|node
operator|->
name|ai_next
control|)
block|{
if|if
condition|(
name|node
operator|->
name|ai_family
operator|==
name|AF_INET
condition|)
block|{
name|buf
operator|=
name|QByteArray
argument_list|(
operator|(
name|char
operator|*
operator|)
name|node
operator|->
name|ai_addr
argument_list|,
name|node
operator|->
name|ai_addrlen
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|freeaddrinfo
argument_list|(
name|res
argument_list|)
expr_stmt|;
else|#
directive|else
name|hostent
modifier|*
name|result
init|=
name|gethostbyname
argument_list|(
name|hostname
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|result
operator|||
name|result
operator|->
name|h_addrtype
operator|!=
name|AF_INET
condition|)
return|return
literal|false
return|;
name|struct
name|sockaddr_in
name|s
decl_stmt|;
name|s
operator|.
name|sin_family
operator|=
name|AF_INET
expr_stmt|;
name|s
operator|.
name|sin_port
operator|=
name|htons
argument_list|(
name|port
argument_list|)
expr_stmt|;
name|s
operator|.
name|sin_addr
operator|=
operator|*
operator|(
expr|struct
name|in_addr
operator|*
operator|)
name|result
operator|->
name|h_addr_list
index|[
literal|0
index|]
expr_stmt|;
name|buf
operator|=
name|QByteArray
argument_list|(
operator|(
name|char
operator|*
operator|)
operator|&
name|s
argument_list|,
sizeof|sizeof
name|s
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
operator|!
name|buf
operator|.
name|isEmpty
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|nativeSelect
name|bool
name|nativeSelect
parameter_list|(
name|int
name|fd
parameter_list|,
name|int
name|timeout
parameter_list|,
name|bool
name|selectForWrite
parameter_list|)
block|{
if|if
condition|(
name|timeout
operator|<
literal|0
condition|)
return|return
literal|false
return|;
comment|// wait for connected
name|fd_set
name|fds
decl_stmt|,
name|fde
decl_stmt|;
name|FD_ZERO
argument_list|(
operator|&
name|fds
argument_list|)
expr_stmt|;
name|FD_ZERO
argument_list|(
operator|&
name|fde
argument_list|)
expr_stmt|;
name|FD_SET
argument_list|(
name|fd
argument_list|,
operator|&
name|fds
argument_list|)
expr_stmt|;
name|FD_SET
argument_list|(
name|fd
argument_list|,
operator|&
name|fde
argument_list|)
expr_stmt|;
name|int
name|ret
decl_stmt|;
do|do
block|{
name|struct
name|timeval
name|tv
decl_stmt|;
name|tv
operator|.
name|tv_sec
operator|=
name|timeout
operator|/
literal|1000
expr_stmt|;
name|tv
operator|.
name|tv_usec
operator|=
name|timeout
operator|%
literal|1000
expr_stmt|;
if|if
condition|(
name|selectForWrite
condition|)
name|ret
operator|=
operator|::
name|select
argument_list|(
name|fd
operator|+
literal|1
argument_list|,
literal|0
argument_list|,
operator|&
name|fds
argument_list|,
operator|&
name|fde
argument_list|,
operator|&
name|tv
argument_list|)
expr_stmt|;
else|else
name|ret
operator|=
operator|::
name|select
argument_list|(
name|fd
operator|+
literal|1
argument_list|,
operator|&
name|fds
argument_list|,
literal|0
argument_list|,
operator|&
name|fde
argument_list|,
operator|&
name|tv
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|ret
operator|==
operator|-
literal|1
operator|&&
name|errno
operator|==
name|EINTR
condition|)
do|;
return|return
name|ret
operator|!=
literal|0
return|;
block|}
end_function
begin_function
DECL|function|blockingSequentialRemoteHosts
name|void
name|tst_NetworkRemoteStressTest
operator|::
name|blockingSequentialRemoteHosts
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|QVector
argument_list|<
name|QUrl
argument_list|>
argument_list|,
name|urlList
argument_list|)
expr_stmt|;
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|useSslSocket
argument_list|)
expr_stmt|;
name|qint64
name|totalBytes
init|=
literal|0
decl_stmt|;
name|QElapsedTimer
name|outerTimer
decl_stmt|;
name|outerTimer
operator|.
name|start
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_NO_SSL
name|QVERIFY
argument_list|(
operator|!
name|useSslSocket
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_SSL
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|urlList
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QUrl
modifier|&
name|url
init|=
name|urlList
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|bool
name|isHttps
init|=
name|url
operator|.
name|scheme
argument_list|()
operator|==
literal|"https"
decl_stmt|;
name|QElapsedTimer
name|timeout
decl_stmt|;
name|byteCounter
operator|=
literal|0
expr_stmt|;
name|timeout
operator|.
name|start
argument_list|()
expr_stmt|;
name|QSharedPointer
argument_list|<
name|QTcpSocket
argument_list|>
name|socket
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SSL
if|if
condition|(
name|useSslSocket
operator|||
name|isHttps
condition|)
name|socket
operator|=
name|QSharedPointer
argument_list|<
name|QTcpSocket
argument_list|>
argument_list|(
operator|new
name|QSslSocket
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_SSL
if|if
condition|(
name|socket
operator|.
name|isNull
argument_list|()
condition|)
name|socket
operator|=
name|QSharedPointer
argument_list|<
name|QTcpSocket
argument_list|>
argument_list|(
operator|new
name|QTcpSocket
argument_list|)
expr_stmt|;
name|socket
operator|->
name|connectToHost
argument_list|(
name|url
operator|.
name|host
argument_list|()
argument_list|,
name|url
operator|.
name|port
argument_list|(
name|isHttps
condition|?
literal|443
else|:
literal|80
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QByteArray
name|encodedHost
init|=
name|url
operator|.
name|host
argument_list|(
name|QUrl
operator|::
name|FullyEncoded
argument_list|)
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
name|QVERIFY2
argument_list|(
name|socket
operator|->
name|waitForConnected
argument_list|(
literal|10000
argument_list|)
argument_list|,
literal|"Timeout connecting to "
operator|+
name|encodedHost
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SSL
if|if
condition|(
name|isHttps
condition|)
block|{
cast|static_cast
argument_list|<
name|QSslSocket
operator|*
argument_list|>
argument_list|(
name|socket
operator|.
name|data
argument_list|()
argument_list|)
operator|->
name|setProtocol
argument_list|(
name|QSsl
operator|::
name|TlsV1_0
argument_list|)
expr_stmt|;
cast|static_cast
argument_list|<
name|QSslSocket
operator|*
argument_list|>
argument_list|(
name|socket
operator|.
name|data
argument_list|()
argument_list|)
operator|->
name|startClientEncryption
argument_list|()
expr_stmt|;
cast|static_cast
argument_list|<
name|QSslSocket
operator|*
argument_list|>
argument_list|(
name|socket
operator|.
name|data
argument_list|()
argument_list|)
operator|->
name|ignoreSslErrors
argument_list|()
expr_stmt|;
name|QVERIFY2
argument_list|(
cast|static_cast
argument_list|<
name|QSslSocket
operator|*
argument_list|>
argument_list|(
name|socket
operator|.
name|data
argument_list|()
argument_list|)
operator|->
name|waitForEncrypted
argument_list|(
literal|10000
argument_list|)
argument_list|,
literal|"Timeout starting TLS with "
operator|+
name|encodedHost
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// QT_NO_SSL
name|socket
operator|->
name|write
argument_list|(
literal|"GET "
operator|+
name|url
operator|.
name|toEncoded
argument_list|(
name|QUrl
operator|::
name|RemoveScheme
operator||
name|QUrl
operator|::
name|RemoveAuthority
operator||
name|QUrl
operator|::
name|RemoveFragment
argument_list|)
operator|+
literal|" HTTP/1.0\r\n"
literal|"Connection: close\r\n"
literal|"User-Agent: tst_QTcpSocket_stresstest/1.0\r\n"
literal|"Host: "
operator|+
name|encodedHost
operator|+
literal|"\r\n"
literal|"\r\n"
argument_list|)
expr_stmt|;
while|while
condition|(
name|socket
operator|->
name|bytesToWrite
argument_list|()
condition|)
name|QVERIFY2
argument_list|(
name|socket
operator|->
name|waitForBytesWritten
argument_list|(
literal|10000
argument_list|)
argument_list|,
literal|"Timeout writing to "
operator|+
name|encodedHost
argument_list|)
expr_stmt|;
while|while
condition|(
name|socket
operator|->
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
operator|&&
operator|!
name|timeout
operator|.
name|hasExpired
argument_list|(
literal|10000
argument_list|)
condition|)
block|{
name|socket
operator|->
name|waitForReadyRead
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|byteCounter
operator|+=
name|socket
operator|->
name|readAll
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
comment|// discard
block|}
name|QVERIFY2
argument_list|(
operator|!
name|timeout
operator|.
name|hasExpired
argument_list|(
literal|10000
argument_list|)
argument_list|,
literal|"Timeout reading from "
operator|+
name|encodedHost
argument_list|)
expr_stmt|;
name|totalBytes
operator|+=
name|byteCounter
expr_stmt|;
if|if
condition|(
name|intermediateDebug
condition|)
block|{
name|double
name|rate
init|=
operator|(
name|byteCounter
operator|*
literal|1.0
operator|/
name|timeout
operator|.
name|elapsed
argument_list|()
operator|)
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
name|i
operator|<<
name|url
operator|<<
name|byteCounter
operator|<<
literal|"bytes in"
operator|<<
name|timeout
operator|.
name|elapsed
argument_list|()
operator|<<
literal|"ms:"
operator|<<
operator|(
name|rate
operator|/
literal|1024.0
operator|*
literal|1000
operator|)
operator|<<
literal|"kB/s"
expr_stmt|;
block|}
block|}
name|qDebug
argument_list|()
operator|<<
literal|"Average transfer rate was"
operator|<<
operator|(
name|totalBytes
operator|/
literal|1024.0
operator|*
literal|1000
operator|/
name|outerTimer
operator|.
name|elapsed
argument_list|()
operator|)
operator|<<
literal|"kB/s"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sequentialRemoteHosts
name|void
name|tst_NetworkRemoteStressTest
operator|::
name|sequentialRemoteHosts
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|QVector
argument_list|<
name|QUrl
argument_list|>
argument_list|,
name|urlList
argument_list|)
expr_stmt|;
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|useSslSocket
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_NO_SSL
name|QVERIFY
argument_list|(
operator|!
name|useSslSocket
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_SSL
name|qint64
name|totalBytes
init|=
literal|0
decl_stmt|;
name|QElapsedTimer
name|outerTimer
decl_stmt|;
name|outerTimer
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|urlList
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QUrl
modifier|&
name|url
init|=
name|urlList
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|bool
name|isHttps
init|=
name|url
operator|.
name|scheme
argument_list|()
operator|==
literal|"https"
decl_stmt|;
name|QElapsedTimer
name|timeout
decl_stmt|;
name|byteCounter
operator|=
literal|0
expr_stmt|;
name|timeout
operator|.
name|start
argument_list|()
expr_stmt|;
name|QSharedPointer
argument_list|<
name|QTcpSocket
argument_list|>
name|socket
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SSL
if|if
condition|(
name|useSslSocket
operator|||
name|isHttps
condition|)
name|socket
operator|=
name|QSharedPointer
argument_list|<
name|QTcpSocket
argument_list|>
argument_list|(
operator|new
name|QSslSocket
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_SSL
if|if
condition|(
name|socket
operator|.
name|isNull
argument_list|()
condition|)
name|socket
operator|=
name|QSharedPointer
argument_list|<
name|QTcpSocket
argument_list|>
argument_list|(
operator|new
name|QTcpSocket
argument_list|)
expr_stmt|;
if|if
condition|(
name|isHttps
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_SSL
cast|static_cast
argument_list|<
name|QSslSocket
operator|*
argument_list|>
argument_list|(
name|socket
operator|.
name|data
argument_list|()
argument_list|)
operator|->
name|setProtocol
argument_list|(
name|QSsl
operator|::
name|TlsV1_0
argument_list|)
expr_stmt|;
cast|static_cast
argument_list|<
name|QSslSocket
operator|*
argument_list|>
argument_list|(
name|socket
operator|.
name|data
argument_list|()
argument_list|)
operator|->
name|connectToHostEncrypted
argument_list|(
name|url
operator|.
name|host
argument_list|()
argument_list|,
name|url
operator|.
name|port
argument_list|(
literal|443
argument_list|)
argument_list|)
expr_stmt|;
cast|static_cast
argument_list|<
name|QSslSocket
operator|*
argument_list|>
argument_list|(
name|socket
operator|.
name|data
argument_list|()
argument_list|)
operator|->
name|ignoreSslErrors
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_SSL
block|}
else|else
block|{
name|socket
operator|->
name|connectToHost
argument_list|(
name|url
operator|.
name|host
argument_list|()
argument_list|,
name|url
operator|.
name|port
argument_list|(
literal|80
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|const
name|QByteArray
name|encodedHost
init|=
name|url
operator|.
name|host
argument_list|(
name|QUrl
operator|::
name|FullyEncoded
argument_list|)
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
name|socket
operator|->
name|write
argument_list|(
literal|"GET "
operator|+
name|url
operator|.
name|toEncoded
argument_list|(
name|QUrl
operator|::
name|RemoveScheme
operator||
name|QUrl
operator|::
name|RemoveAuthority
operator||
name|QUrl
operator|::
name|RemoveFragment
argument_list|)
operator|+
literal|" HTTP/1.0\r\n"
literal|"Connection: close\r\n"
literal|"User-Agent: tst_QTcpSocket_stresstest/1.0\r\n"
literal|"Host: "
operator|+
name|encodedHost
operator|+
literal|"\r\n"
literal|"\r\n"
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|socket
operator|.
name|data
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|slotReadAll
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|connect
argument_list|(
name|socket
operator|.
name|data
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|disconnected
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|,
literal|"Timeout with "
operator|+
name|encodedHost
operator|+
literal|"; "
operator|+
name|QByteArray
operator|::
name|number
argument_list|(
name|socket
operator|->
name|bytesToWrite
argument_list|()
argument_list|)
operator|+
literal|" bytes to write"
argument_list|)
expr_stmt|;
name|totalBytes
operator|+=
name|byteCounter
expr_stmt|;
if|if
condition|(
name|intermediateDebug
condition|)
block|{
name|double
name|rate
init|=
operator|(
name|byteCounter
operator|*
literal|1.0
operator|/
name|timeout
operator|.
name|elapsed
argument_list|()
operator|)
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
name|i
operator|<<
name|url
operator|<<
name|byteCounter
operator|<<
literal|"bytes in"
operator|<<
name|timeout
operator|.
name|elapsed
argument_list|()
operator|<<
literal|"ms:"
operator|<<
operator|(
name|rate
operator|/
literal|1024.0
operator|*
literal|1000
operator|)
operator|<<
literal|"kB/s"
expr_stmt|;
block|}
block|}
name|qDebug
argument_list|()
operator|<<
literal|"Average transfer rate was"
operator|<<
operator|(
name|totalBytes
operator|/
literal|1024.0
operator|*
literal|1000
operator|/
name|outerTimer
operator|.
name|elapsed
argument_list|()
operator|)
operator|<<
literal|"kB/s"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|parallelRemoteHosts_data
name|void
name|tst_NetworkRemoteStressTest
operator|::
name|parallelRemoteHosts_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"parallelAttempts"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4"
argument_list|)
operator|<<
literal|4
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5"
argument_list|)
operator|<<
literal|5
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"6"
argument_list|)
operator|<<
literal|6
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"8"
argument_list|)
operator|<<
literal|8
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"10"
argument_list|)
operator|<<
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"25"
argument_list|)
operator|<<
literal|25
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"500"
argument_list|)
operator|<<
literal|500
expr_stmt|;
block|}
end_function
begin_function
DECL|function|parallelRemoteHosts
name|void
name|tst_NetworkRemoteStressTest
operator|::
name|parallelRemoteHosts
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|QVector
argument_list|<
name|QUrl
argument_list|>
argument_list|,
name|urlList
argument_list|)
expr_stmt|;
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|useSslSocket
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|parallelAttempts
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_NO_SSL
name|QVERIFY
argument_list|(
operator|!
name|useSslSocket
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_SSL
name|qint64
name|totalBytes
init|=
literal|0
decl_stmt|;
name|QElapsedTimer
name|outerTimer
decl_stmt|;
name|outerTimer
operator|.
name|start
argument_list|()
expr_stmt|;
name|QVector
argument_list|<
name|QUrl
argument_list|>
operator|::
name|ConstIterator
name|it
init|=
name|urlList
operator|.
name|constBegin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|urlList
operator|.
name|constEnd
argument_list|()
condition|)
block|{
name|QElapsedTimer
name|timeout
decl_stmt|;
name|byteCounter
operator|=
literal|0
expr_stmt|;
name|timeout
operator|.
name|start
argument_list|()
expr_stmt|;
name|QVector
argument_list|<
name|QSharedPointer
argument_list|<
name|QTcpSocket
argument_list|>
argument_list|>
name|sockets
decl_stmt|;
name|sockets
operator|.
name|reserve
argument_list|(
name|parallelAttempts
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|parallelAttempts
operator|&&
name|it
operator|!=
name|urlList
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|j
operator|,
operator|++
name|it
control|)
block|{
specifier|const
name|QUrl
modifier|&
name|url
init|=
operator|*
name|it
decl_stmt|;
name|bool
name|isHttps
init|=
name|url
operator|.
name|scheme
argument_list|()
operator|==
literal|"https"
decl_stmt|;
name|QTcpSocket
modifier|*
name|socket
init|=
literal|0
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SSL
if|if
condition|(
name|useSslSocket
operator|||
name|isHttps
condition|)
name|socket
operator|=
operator|new
name|QSslSocket
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_SSL
if|if
condition|(
operator|!
name|socket
condition|)
name|socket
operator|=
operator|new
name|QTcpSocket
expr_stmt|;
if|if
condition|(
name|isHttps
condition|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_SSL
cast|static_cast
argument_list|<
name|QSslSocket
operator|*
argument_list|>
argument_list|(
name|socket
argument_list|)
operator|->
name|setProtocol
argument_list|(
name|QSsl
operator|::
name|TlsV1_0
argument_list|)
expr_stmt|;
cast|static_cast
argument_list|<
name|QSslSocket
operator|*
argument_list|>
argument_list|(
name|socket
argument_list|)
operator|->
name|connectToHostEncrypted
argument_list|(
name|url
operator|.
name|host
argument_list|()
argument_list|,
name|url
operator|.
name|port
argument_list|(
literal|443
argument_list|)
argument_list|)
expr_stmt|;
cast|static_cast
argument_list|<
name|QSslSocket
operator|*
argument_list|>
argument_list|(
name|socket
argument_list|)
operator|->
name|ignoreSslErrors
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_SSL
block|}
else|else
block|{
name|socket
operator|->
name|connectToHost
argument_list|(
name|url
operator|.
name|host
argument_list|()
argument_list|,
name|url
operator|.
name|port
argument_list|(
name|isHttps
condition|?
literal|443
else|:
literal|80
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|const
name|QByteArray
name|encodedHost
init|=
name|url
operator|.
name|host
argument_list|(
name|QUrl
operator|::
name|FullyEncoded
argument_list|)
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
name|socket
operator|->
name|write
argument_list|(
literal|"GET "
operator|+
name|url
operator|.
name|toEncoded
argument_list|(
name|QUrl
operator|::
name|RemoveScheme
operator||
name|QUrl
operator|::
name|RemoveAuthority
operator||
name|QUrl
operator|::
name|RemoveFragment
argument_list|)
operator|+
literal|" HTTP/1.0\r\n"
literal|"Connection: close\r\n"
literal|"User-Agent: tst_QTcpSocket_stresstest/1.0\r\n"
literal|"Host: "
operator|+
name|encodedHost
operator|+
literal|"\r\n"
literal|"\r\n"
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|slotReadAll
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|connect
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|disconnected
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|->
name|setProperty
argument_list|(
literal|"remoteUrl"
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|sockets
operator|.
name|append
argument_list|(
name|QSharedPointer
argument_list|<
name|QTcpSocket
argument_list|>
argument_list|(
name|socket
argument_list|)
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
operator|!
name|timeout
operator|.
name|hasExpired
argument_list|(
literal|10000
argument_list|)
condition|)
block|{
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|int
name|done
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|sockets
operator|.
name|size
argument_list|()
condition|;
operator|++
name|j
control|)
name|done
operator|+=
name|sockets
index|[
name|j
index|]
operator|->
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
condition|?
literal|1
else|:
literal|0
expr_stmt|;
if|if
condition|(
name|done
operator|==
name|sockets
operator|.
name|size
argument_list|()
condition|)
break|break;
block|}
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|sockets
operator|.
name|size
argument_list|()
condition|;
operator|++
name|j
control|)
if|if
condition|(
name|sockets
index|[
name|j
index|]
operator|->
name|state
argument_list|()
operator|!=
name|QAbstractSocket
operator|::
name|UnconnectedState
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"Socket to"
operator|<<
name|sockets
index|[
name|j
index|]
operator|->
name|property
argument_list|(
literal|"remoteUrl"
argument_list|)
operator|.
name|toUrl
argument_list|()
operator|<<
literal|"still open with"
operator|<<
name|sockets
index|[
name|j
index|]
operator|->
name|bytesToWrite
argument_list|()
operator|<<
literal|"bytes to write"
expr_stmt|;
name|QFAIL
argument_list|(
literal|"Timed out"
argument_list|)
expr_stmt|;
block|}
name|totalBytes
operator|+=
name|byteCounter
expr_stmt|;
if|if
condition|(
name|intermediateDebug
condition|)
block|{
name|double
name|rate
init|=
operator|(
name|byteCounter
operator|*
literal|1.0
operator|/
name|timeout
operator|.
name|elapsed
argument_list|()
operator|)
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
name|byteCounter
operator|<<
literal|"bytes in"
operator|<<
name|timeout
operator|.
name|elapsed
argument_list|()
operator|<<
literal|"ms:"
operator|<<
operator|(
name|rate
operator|/
literal|1024.0
operator|*
literal|1000
operator|)
operator|<<
literal|"kB/s"
expr_stmt|;
block|}
block|}
name|qDebug
argument_list|()
operator|<<
literal|"Average transfer rate was"
operator|<<
operator|(
name|totalBytes
operator|/
literal|1024.0
operator|*
literal|1000
operator|/
name|outerTimer
operator|.
name|elapsed
argument_list|()
operator|)
operator|<<
literal|"kB/s"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|namRemoteGet_data
name|void
name|tst_NetworkRemoteStressTest
operator|::
name|namRemoteGet_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"parallelAttempts"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4"
argument_list|)
operator|<<
literal|4
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5"
argument_list|)
operator|<<
literal|5
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"6"
argument_list|)
operator|<<
literal|6
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"8"
argument_list|)
operator|<<
literal|8
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"10"
argument_list|)
operator|<<
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"25"
argument_list|)
operator|<<
literal|25
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"500"
argument_list|)
operator|<<
literal|500
expr_stmt|;
block|}
end_function
begin_function
DECL|function|namRemoteGet
name|void
name|tst_NetworkRemoteStressTest
operator|::
name|namRemoteGet
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|QVector
argument_list|<
name|QUrl
argument_list|>
argument_list|,
name|urlList
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|parallelAttempts
argument_list|)
expr_stmt|;
name|bool
name|pipelineAllowed
init|=
literal|false
decl_stmt|;
comment|// QFETCH(bool, pipelineAllowed);
name|qint64
name|totalBytes
init|=
literal|0
decl_stmt|;
name|QElapsedTimer
name|outerTimer
decl_stmt|;
name|outerTimer
operator|.
name|start
argument_list|()
expr_stmt|;
name|QVector
argument_list|<
name|QUrl
argument_list|>
operator|::
name|ConstIterator
name|it
init|=
name|urlList
operator|.
name|constBegin
argument_list|()
decl_stmt|;
while|while
condition|(
name|it
operator|!=
name|urlList
operator|.
name|constEnd
argument_list|()
condition|)
block|{
name|QElapsedTimer
name|timeout
decl_stmt|;
name|byteCounter
operator|=
literal|0
expr_stmt|;
name|timeout
operator|.
name|start
argument_list|()
expr_stmt|;
name|QNetworkRequest
name|req
decl_stmt|;
name|req
operator|.
name|setAttribute
argument_list|(
name|QNetworkRequest
operator|::
name|HttpPipeliningAllowedAttribute
argument_list|,
name|pipelineAllowed
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|QSharedPointer
argument_list|<
name|QNetworkReply
argument_list|>
argument_list|>
name|replies
decl_stmt|;
name|replies
operator|.
name|reserve
argument_list|(
name|parallelAttempts
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|parallelAttempts
operator|&&
name|it
operator|!=
name|urlList
operator|.
name|constEnd
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
name|req
operator|.
name|setUrl
argument_list|(
operator|*
name|it
operator|++
argument_list|)
expr_stmt|;
name|QNetworkReply
modifier|*
name|r
init|=
name|manager
operator|.
name|get
argument_list|(
name|req
argument_list|)
decl_stmt|;
name|r
operator|->
name|ignoreSslErrors
argument_list|()
expr_stmt|;
name|connect
argument_list|(
name|r
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|slotReadAll
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|connect
argument_list|(
name|r
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|replies
operator|.
name|append
argument_list|(
name|QSharedPointer
argument_list|<
name|QNetworkReply
argument_list|>
argument_list|(
name|r
argument_list|)
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
operator|!
name|timeout
operator|.
name|hasExpired
argument_list|(
literal|30000
argument_list|)
condition|)
block|{
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|30
operator|-
name|timeout
operator|.
name|elapsed
argument_list|()
operator|/
literal|1000
argument_list|)
expr_stmt|;
name|int
name|done
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|replies
operator|.
name|size
argument_list|()
condition|;
operator|++
name|j
control|)
name|done
operator|+=
name|replies
index|[
name|j
index|]
operator|->
name|isFinished
argument_list|()
condition|?
literal|1
else|:
literal|0
expr_stmt|;
if|if
condition|(
name|done
operator|==
name|replies
operator|.
name|size
argument_list|()
condition|)
break|break;
block|}
if|if
condition|(
name|timeout
operator|.
name|hasExpired
argument_list|(
literal|30000
argument_list|)
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|replies
operator|.
name|size
argument_list|()
condition|;
operator|++
name|j
control|)
if|if
condition|(
operator|!
name|replies
index|[
name|j
index|]
operator|->
name|isFinished
argument_list|()
condition|)
name|qDebug
argument_list|()
operator|<<
literal|"Request"
operator|<<
name|replies
index|[
name|j
index|]
operator|->
name|url
argument_list|()
operator|<<
literal|"not finished"
expr_stmt|;
name|QFAIL
argument_list|(
literal|"Timed out"
argument_list|)
expr_stmt|;
block|}
name|replies
operator|.
name|clear
argument_list|()
expr_stmt|;
name|totalBytes
operator|+=
name|byteCounter
expr_stmt|;
if|if
condition|(
name|intermediateDebug
condition|)
block|{
name|double
name|rate
init|=
operator|(
name|byteCounter
operator|*
literal|1.0
operator|/
name|timeout
operator|.
name|elapsed
argument_list|()
operator|)
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
name|byteCounter
operator|<<
literal|"bytes in"
operator|<<
name|timeout
operator|.
name|elapsed
argument_list|()
operator|<<
literal|"ms:"
operator|<<
operator|(
name|rate
operator|/
literal|1024.0
operator|*
literal|1000
operator|)
operator|<<
literal|"kB/s"
expr_stmt|;
block|}
block|}
name|qDebug
argument_list|()
operator|<<
literal|"Average transfer rate was"
operator|<<
operator|(
name|totalBytes
operator|/
literal|1024.0
operator|*
literal|1000
operator|/
name|outerTimer
operator|.
name|elapsed
argument_list|()
operator|)
operator|<<
literal|"kB/s"
expr_stmt|;
block|}
end_function
begin_expr_stmt
DECL|variable|tst_NetworkRemoteStressTest
name|QTEST_MAIN
argument_list|(
name|tst_NetworkRemoteStressTest
argument_list|)
expr_stmt|;
end_expr_stmt
begin_include
include|#
directive|include
file|"tst_network_remote_stresstest.moc"
end_include
end_unit
