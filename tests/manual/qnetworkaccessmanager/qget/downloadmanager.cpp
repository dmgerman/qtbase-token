begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"qget.h"
end_include
begin_include
include|#
directive|include
file|<QAuthenticator>
end_include
begin_include
include|#
directive|include
file|<QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<QSslError>
end_include
begin_constructor
DECL|function|DownloadManager
name|DownloadManager
operator|::
name|DownloadManager
parameter_list|()
member_init_list|:
name|queueMode
argument_list|(
name|Parallel
argument_list|)
block|{
name|connect
argument_list|(
operator|&
name|nam
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|(
name|QNetworkReply
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|finished
argument_list|(
name|QNetworkReply
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|nam
argument_list|,
name|SIGNAL
argument_list|(
name|authenticationRequired
argument_list|(
name|QNetworkReply
operator|*
argument_list|,
name|QAuthenticator
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|authenticationRequired
argument_list|(
name|QNetworkReply
operator|*
argument_list|,
name|QAuthenticator
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|nam
argument_list|,
name|SIGNAL
argument_list|(
name|proxyAuthenticationRequired
argument_list|(
name|QNetworkProxy
argument_list|,
name|QAuthenticator
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|proxyAuthenticationRequired
argument_list|(
name|QNetworkProxy
argument_list|,
name|QAuthenticator
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SSL
name|connect
argument_list|(
operator|&
name|nam
argument_list|,
name|SIGNAL
argument_list|(
name|sslErrors
argument_list|(
name|QNetworkReply
operator|*
argument_list|,
name|QList
argument_list|<
name|QSslError
argument_list|>
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|sslErrors
argument_list|(
name|QNetworkReply
operator|*
argument_list|,
name|QList
argument_list|<
name|QSslError
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_destructor
DECL|function|~DownloadManager
name|DownloadManager
operator|::
name|~
name|DownloadManager
parameter_list|()
block|{  }
end_destructor
begin_function
DECL|function|get
name|void
name|DownloadManager
operator|::
name|get
parameter_list|(
specifier|const
name|QNetworkRequest
modifier|&
name|request
parameter_list|,
specifier|const
name|QString
modifier|&
name|user
parameter_list|,
specifier|const
name|QString
modifier|&
name|password
parameter_list|)
block|{
name|DownloadItem
modifier|*
name|dl
init|=
operator|new
name|DownloadItem
argument_list|(
name|request
argument_list|,
name|user
argument_list|,
name|password
argument_list|,
name|nam
argument_list|)
decl_stmt|;
name|transfers
operator|.
name|append
argument_list|(
name|dl
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|dl
argument_list|,
name|SIGNAL
argument_list|(
name|downloadFinished
argument_list|(
name|TransferItem
operator|*
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|downloadFinished
argument_list|(
name|TransferItem
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|upload
name|void
name|DownloadManager
operator|::
name|upload
parameter_list|(
specifier|const
name|QNetworkRequest
modifier|&
name|request
parameter_list|,
specifier|const
name|QString
modifier|&
name|user
parameter_list|,
specifier|const
name|QString
modifier|&
name|password
parameter_list|,
specifier|const
name|QString
modifier|&
name|filename
parameter_list|,
name|TransferItem
operator|::
name|Method
name|method
parameter_list|)
block|{
name|QScopedPointer
argument_list|<
name|QFile
argument_list|>
name|file
argument_list|(
operator|new
name|QFile
argument_list|(
name|filename
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|->
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"Can't open input file"
operator|<<
name|file
operator|->
name|fileName
argument_list|()
operator|<<
name|file
operator|->
name|errorString
argument_list|()
expr_stmt|;
return|return;
block|}
name|UploadItem
modifier|*
name|ul
init|=
operator|new
name|UploadItem
argument_list|(
name|request
argument_list|,
name|user
argument_list|,
name|password
argument_list|,
name|nam
argument_list|,
name|file
operator|.
name|take
argument_list|()
argument_list|,
name|method
argument_list|)
decl_stmt|;
name|transfers
operator|.
name|append
argument_list|(
name|ul
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|ul
argument_list|,
name|SIGNAL
argument_list|(
name|downloadFinished
argument_list|(
name|TransferItem
operator|*
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|downloadFinished
argument_list|(
name|TransferItem
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|finished
name|void
name|DownloadManager
operator|::
name|finished
parameter_list|(
name|QNetworkReply
modifier|*
parameter_list|)
block|{ }
end_function
begin_function
DECL|function|downloadFinished
name|void
name|DownloadManager
operator|::
name|downloadFinished
parameter_list|(
name|TransferItem
modifier|*
name|item
parameter_list|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"finished "
operator|<<
name|item
operator|->
name|reply
operator|->
name|url
argument_list|()
operator|<<
literal|" with http status: "
operator|<<
name|item
operator|->
name|reply
operator|->
name|attribute
argument_list|(
name|QNetworkRequest
operator|::
name|HttpStatusCodeAttribute
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|item
operator|->
name|reply
operator|->
name|error
argument_list|()
operator|!=
name|QNetworkReply
operator|::
name|NoError
condition|)
name|qDebug
argument_list|()
operator|<<
literal|"and error: "
operator|<<
name|item
operator|->
name|reply
operator|->
name|error
argument_list|()
operator|<<
name|item
operator|->
name|reply
operator|->
name|errorString
argument_list|()
expr_stmt|;
name|transfers
operator|.
name|removeOne
argument_list|(
name|item
argument_list|)
expr_stmt|;
name|item
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
name|checkForAllDone
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|checkForAllDone
name|void
name|DownloadManager
operator|::
name|checkForAllDone
parameter_list|()
block|{
if|if
condition|(
name|transfers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"All Done."
expr_stmt|;
name|QCoreApplication
operator|::
name|quit
argument_list|()
expr_stmt|;
block|}
foreach|foreach
control|(
name|TransferItem
modifier|*
name|item
decl|,
name|transfers
control|)
block|{
if|if
condition|(
operator|!
name|item
operator|->
name|reply
condition|)
block|{
name|item
operator|->
name|start
argument_list|()
expr_stmt|;
comment|//by default multiple downloads are processed in parallel.
comment|//but in serial mode, only start one transfer at a time.
if|if
condition|(
name|queueMode
operator|==
name|Serial
condition|)
break|break;
block|}
block|}
block|}
end_function
begin_function
DECL|function|authenticationRequired
name|void
name|DownloadManager
operator|::
name|authenticationRequired
parameter_list|(
name|QNetworkReply
modifier|*
name|reply
parameter_list|,
name|QAuthenticator
modifier|*
name|auth
parameter_list|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"authenticationRequired"
operator|<<
name|reply
expr_stmt|;
name|TransferItem
modifier|*
name|transfer
init|=
name|findTransfer
argument_list|(
name|reply
argument_list|)
decl_stmt|;
comment|//provide the credentials exactly once, so that it fails if credentials are incorrect.
if|if
condition|(
operator|(
name|transfer
operator|&&
operator|!
name|transfer
operator|->
name|user
operator|.
name|isEmpty
argument_list|()
operator|)
operator|||
operator|!
name|transfer
operator|->
name|password
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|auth
operator|->
name|setUser
argument_list|(
name|transfer
operator|->
name|user
argument_list|)
expr_stmt|;
name|auth
operator|->
name|setPassword
argument_list|(
name|transfer
operator|->
name|password
argument_list|)
expr_stmt|;
name|transfer
operator|->
name|user
operator|.
name|clear
argument_list|()
expr_stmt|;
name|transfer
operator|->
name|password
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|proxyAuthenticationRequired
name|void
name|DownloadManager
operator|::
name|proxyAuthenticationRequired
parameter_list|(
specifier|const
name|QNetworkProxy
modifier|&
parameter_list|,
name|QAuthenticator
modifier|*
name|auth
parameter_list|)
block|{
comment|//provide the credentials exactly once, so that it fails if credentials are incorrect.
if|if
condition|(
operator|!
name|proxyUser
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|proxyPassword
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|auth
operator|->
name|setUser
argument_list|(
name|proxyUser
argument_list|)
expr_stmt|;
name|auth
operator|->
name|setPassword
argument_list|(
name|proxyPassword
argument_list|)
expr_stmt|;
name|proxyUser
operator|.
name|clear
argument_list|()
expr_stmt|;
name|proxyPassword
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SSL
end_ifndef
begin_function
DECL|function|sslErrors
name|void
name|DownloadManager
operator|::
name|sslErrors
parameter_list|(
name|QNetworkReply
modifier|*
name|reply
parameter_list|,
specifier|const
name|QList
argument_list|<
name|QSslError
argument_list|>
modifier|&
name|errors
parameter_list|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"sslErrors"
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QSslError
modifier|&
name|error
decl|,
name|errors
control|)
block|{
name|qDebug
argument_list|()
operator|<<
name|error
operator|.
name|errorString
argument_list|()
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
name|error
operator|.
name|certificate
argument_list|()
operator|.
name|toPem
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|findTransfer
name|TransferItem
modifier|*
name|DownloadManager
operator|::
name|findTransfer
parameter_list|(
name|QNetworkReply
modifier|*
name|reply
parameter_list|)
block|{
foreach|foreach
control|(
name|TransferItem
modifier|*
name|item
decl|,
name|transfers
control|)
block|{
if|if
condition|(
name|item
operator|->
name|reply
operator|==
name|reply
condition|)
return|return
name|item
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|setQueueMode
name|void
name|DownloadManager
operator|::
name|setQueueMode
parameter_list|(
name|QueueMode
name|mode
parameter_list|)
block|{
name|queueMode
operator|=
name|mode
expr_stmt|;
block|}
end_function
end_unit
