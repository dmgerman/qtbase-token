begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Copyright (C) 2014 BlackBerry Limited. All rights reserved. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|// This file contains benchmarks for QNetworkReply functions.
end_comment
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<qtest.h>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qnetworkreply.h>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qnetworkrequest.h>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qnetworkaccessmanager.h>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qsslconfiguration.h>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qhttpmultipart.h>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qauthenticator.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/QJsonDocument>
end_include
begin_include
include|#
directive|include
file|"../../auto/network-settings.h"
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QT_BUILD_INTERNAL
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_SSL
argument_list|)
end_if
begin_include
include|#
directive|include
file|"private/qsslsocket_p.h"
end_include
begin_include
include|#
directive|include
file|<QtNetwork/private/qsslsocket_openssl_p.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|BANDWIDTH_LIMIT_BYTES
define|#
directive|define
name|BANDWIDTH_LIMIT_BYTES
value|(1024*100)
end_define
begin_define
DECL|macro|TIME_ESTIMATION_SECONDS
define|#
directive|define
name|TIME_ESTIMATION_SECONDS
value|(97)
end_define
begin_class
DECL|class|tst_qnetworkreply
class|class
name|tst_qnetworkreply
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|limiting_data
parameter_list|()
function_decl|;
name|void
name|limiting
parameter_list|()
function_decl|;
name|void
name|setSslConfiguration_data
parameter_list|()
function_decl|;
name|void
name|setSslConfiguration
parameter_list|()
function_decl|;
name|void
name|uploadToFacebook
parameter_list|()
function_decl|;
name|void
name|spdy_data
parameter_list|()
function_decl|;
name|void
name|spdy
parameter_list|()
function_decl|;
name|void
name|spdyMultipleRequestsPerHost
parameter_list|()
function_decl|;
name|void
name|proxyAuthentication_data
parameter_list|()
function_decl|;
name|void
name|proxyAuthentication
parameter_list|()
function_decl|;
name|void
name|authentication
parameter_list|()
function_decl|;
name|void
name|npnWithEmptyList
parameter_list|()
function_decl|;
comment|// QTBUG-40714
protected|protected
name|slots
protected|:
name|void
name|spdyReplyFinished
parameter_list|()
function_decl|;
comment|// only used by spdyMultipleRequestsPerHost test
name|void
name|authenticationRequiredSlot
parameter_list|(
name|QNetworkReply
modifier|*
parameter_list|,
name|QAuthenticator
modifier|*
name|authenticator
parameter_list|)
function_decl|;
private|private:
name|QHttpMultiPart
modifier|*
name|createFacebookMultiPart
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|accessToken
parameter_list|)
function_decl|;
DECL|member|m_manager
name|QNetworkAccessManager
name|m_manager
decl_stmt|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|reply
name|QNetworkReply
modifier|*
name|reply
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|HttpReceiver
class|class
name|HttpReceiver
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
DECL|function|finishedSlot
name|void
name|finishedSlot
parameter_list|()
block|{
name|quint64
name|bytesPerSec
init|=
operator|(
name|reply
operator|->
name|header
argument_list|(
name|QNetworkRequest
operator|::
name|ContentLengthHeader
argument_list|)
operator|.
name|toLongLong
argument_list|()
operator|)
operator|/
operator|(
name|stopwatch
operator|.
name|elapsed
argument_list|()
operator|/
literal|1000.0
operator|)
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Finished HTTP(S) request with"
operator|<<
name|bytesPerSec
operator|<<
literal|"bytes/sec"
expr_stmt|;
name|QVERIFY
argument_list|(
name|bytesPerSec
operator|<
name|BANDWIDTH_LIMIT_BYTES
operator|*
literal|1.05
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|bytesPerSec
operator|>
name|BANDWIDTH_LIMIT_BYTES
operator|*
literal|0.95
argument_list|)
expr_stmt|;
name|timer
operator|->
name|stop
argument_list|()
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|exitLoop
argument_list|()
expr_stmt|;
block|}
DECL|function|readyReadSlot
name|void
name|readyReadSlot
parameter_list|()
block|{     }
DECL|function|timeoutSlot
name|void
name|timeoutSlot
parameter_list|()
block|{
name|reply
operator|->
name|read
argument_list|(
name|BANDWIDTH_LIMIT_BYTES
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
DECL|function|startTimer
name|void
name|startTimer
parameter_list|()
block|{
name|stopwatch
operator|.
name|start
argument_list|()
expr_stmt|;
name|timer
operator|=
operator|new
name|QTimer
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|timer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|timeoutSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|timer
operator|->
name|start
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
protected|protected:
DECL|member|timer
name|QTimer
modifier|*
name|timer
decl_stmt|;
DECL|member|stopwatch
name|QTime
name|stopwatch
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|initTestCase
name|void
name|tst_qnetworkreply
operator|::
name|initTestCase
parameter_list|()
block|{
name|qRegisterMetaType
argument_list|<
name|QNetworkReply
operator|*
argument_list|>
argument_list|()
expr_stmt|;
comment|// for QSignalSpy
name|QVERIFY
argument_list|(
name|QtNetworkSettings
operator|::
name|verifyTestNetworkSettings
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|limiting_data
name|void
name|tst_qnetworkreply
operator|::
name|limiting_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QUrl
argument_list|>
argument_list|(
literal|"url"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"HTTP"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"http://"
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|+
literal|"/mediumfile"
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SSL
name|QTest
operator|::
name|newRow
argument_list|(
literal|"HTTP+SSL"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"https://"
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|+
literal|"/mediumfile"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|limiting
name|void
name|tst_qnetworkreply
operator|::
name|limiting
parameter_list|()
block|{
name|HttpReceiver
name|receiver
decl_stmt|;
name|QNetworkAccessManager
name|manager
decl_stmt|;
name|QFETCH
argument_list|(
name|QUrl
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|QNetworkRequest
name|req
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Starting. This will take a while (around"
operator|<<
name|TIME_ESTIMATION_SECONDS
operator|<<
literal|"sec)."
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Please check the actual bandwidth usage with a network monitor, e.g. the KDE"
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"network plasma widget. It should be around"
operator|<<
name|BANDWIDTH_LIMIT_BYTES
operator|<<
literal|"bytes/sec."
expr_stmt|;
name|reply
operator|=
name|manager
operator|.
name|get
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|reply
operator|->
name|ignoreSslErrors
argument_list|()
expr_stmt|;
name|reply
operator|->
name|setReadBufferSize
argument_list|(
name|BANDWIDTH_LIMIT_BYTES
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
operator|&
name|receiver
argument_list|,
name|SLOT
argument_list|(
name|readyReadSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|receiver
argument_list|,
name|SLOT
argument_list|(
name|finishedSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|receiver
operator|.
name|startTimer
argument_list|()
expr_stmt|;
comment|// event loop
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
name|TIME_ESTIMATION_SECONDS
operator|+
literal|20
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setSslConfiguration_data
name|void
name|tst_qnetworkreply
operator|::
name|setSslConfiguration_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QUrl
argument_list|>
argument_list|(
literal|"url"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"works"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"codereview.qt-project.org"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"https://codereview.qt-project.org"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"test-server"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"https://"
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|+
literal|"/"
argument_list|)
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setSslConfiguration
name|void
name|tst_qnetworkreply
operator|::
name|setSslConfiguration
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QT_NO_SSL
name|QSKIP
argument_list|(
literal|"SSL is not enabled."
argument_list|)
expr_stmt|;
else|#
directive|else
name|QFETCH
argument_list|(
name|QUrl
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|QNetworkRequest
name|request
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|QSslConfiguration
name|conf
init|=
name|request
operator|.
name|sslConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setProtocol
argument_list|(
name|QSsl
operator|::
name|TlsV1_0
argument_list|)
expr_stmt|;
comment|// TLS 1.0 will be used anyway, just make sure we change the configuration
name|request
operator|.
name|setSslConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|QNetworkAccessManager
name|manager
decl_stmt|;
name|reply
operator|=
name|manager
operator|.
name|get
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|15
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|works
argument_list|)
expr_stmt|;
name|bool
name|rootCertLoadingAllowed
init|=
name|QSslSocketPrivate
operator|::
name|rootCertOnDemandLoadingSupported
argument_list|()
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_LINUX
argument_list|)
name|QCOMPARE
argument_list|(
name|rootCertLoadingAllowed
argument_list|,
literal|true
argument_list|)
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
name|QCOMPARE
argument_list|(
name|rootCertLoadingAllowed
argument_list|,
literal|false
argument_list|)
expr_stmt|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
argument|rootCertLoadingAllowed
argument_list|)
endif|#
directive|endif
comment|// other platforms: undecided (Windows: depends on the version)
if|if
condition|(
name|works
condition|)
block|{
name|QCOMPARE
argument_list|(
name|reply
operator|->
name|error
argument_list|()
argument_list|,
name|QNetworkReply
operator|::
name|NoError
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|reply
operator|->
name|error
argument_list|()
argument_list|,
name|QNetworkReply
operator|::
name|SslHandshakeFailedError
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
endif|#
directive|endif
comment|// QT_NO_SSL
block|}
end_function
begin_function
DECL|function|createFacebookMultiPart
name|QHttpMultiPart
modifier|*
name|tst_qnetworkreply
operator|::
name|createFacebookMultiPart
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|accessToken
parameter_list|)
block|{
name|QHttpMultiPart
modifier|*
name|multiPart
init|=
operator|new
name|QHttpMultiPart
argument_list|(
name|QHttpMultiPart
operator|::
name|FormDataType
argument_list|)
decl_stmt|;
name|QHttpPart
name|accessTokenPart
decl_stmt|;
name|accessTokenPart
operator|.
name|setHeader
argument_list|(
name|QNetworkRequest
operator|::
name|ContentDispositionHeader
argument_list|,
name|QVariant
argument_list|(
literal|"form-data; name=\"access_token\""
argument_list|)
argument_list|)
expr_stmt|;
name|accessTokenPart
operator|.
name|setBody
argument_list|(
name|accessToken
argument_list|)
expr_stmt|;
name|multiPart
operator|->
name|append
argument_list|(
name|accessTokenPart
argument_list|)
expr_stmt|;
name|QHttpPart
name|batchPart
decl_stmt|;
name|batchPart
operator|.
name|setHeader
argument_list|(
name|QNetworkRequest
operator|::
name|ContentDispositionHeader
argument_list|,
name|QVariant
argument_list|(
literal|"form-data; name=\"batch\""
argument_list|)
argument_list|)
expr_stmt|;
name|batchPart
operator|.
name|setBody
argument_list|(
literal|"["
literal|"   {"
literal|"      \"attached_files\" : \"image1\","
literal|"      \"body\" : \"message=&published=0\","
literal|"      \"method\" : \"POST\","
literal|"      \"relative_url\" : \"me/photos\""
literal|"   },"
literal|"   {"
literal|"      \"attached_files\" : \"image2\","
literal|"      \"body\" : \"message=&published=0\","
literal|"      \"method\" : \"POST\","
literal|"      \"relative_url\" : \"me/photos\""
literal|"   },"
literal|"   {"
literal|"      \"attached_files\" : \"image3\","
literal|"      \"body\" : \"message=&published=0\","
literal|"      \"method\" : \"POST\","
literal|"      \"relative_url\" : \"me/photos\""
literal|"   }"
literal|"]"
argument_list|)
expr_stmt|;
name|multiPart
operator|->
name|append
argument_list|(
name|batchPart
argument_list|)
expr_stmt|;
name|QHttpPart
name|imagePart1
decl_stmt|;
name|imagePart1
operator|.
name|setHeader
argument_list|(
name|QNetworkRequest
operator|::
name|ContentTypeHeader
argument_list|,
name|QVariant
argument_list|(
literal|"image/jpg"
argument_list|)
argument_list|)
expr_stmt|;
name|imagePart1
operator|.
name|setHeader
argument_list|(
name|QNetworkRequest
operator|::
name|ContentDispositionHeader
argument_list|,
name|QVariant
argument_list|(
literal|"form-data; name=\"image1\"; filename=\"image1.jpg\""
argument_list|)
argument_list|)
expr_stmt|;
name|QFile
modifier|*
name|file1
init|=
operator|new
name|QFile
argument_list|(
name|QFINDTESTDATA
argument_list|(
literal|"../../auto/network/access/qnetworkreply/image1.jpg"
argument_list|)
argument_list|)
decl_stmt|;
name|file1
operator|->
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|imagePart1
operator|.
name|setBodyDevice
argument_list|(
name|file1
argument_list|)
expr_stmt|;
name|file1
operator|->
name|setParent
argument_list|(
name|multiPart
argument_list|)
expr_stmt|;
name|multiPart
operator|->
name|append
argument_list|(
name|imagePart1
argument_list|)
expr_stmt|;
name|QHttpPart
name|imagePart2
decl_stmt|;
name|imagePart2
operator|.
name|setHeader
argument_list|(
name|QNetworkRequest
operator|::
name|ContentTypeHeader
argument_list|,
name|QVariant
argument_list|(
literal|"image/jpg"
argument_list|)
argument_list|)
expr_stmt|;
name|imagePart2
operator|.
name|setHeader
argument_list|(
name|QNetworkRequest
operator|::
name|ContentDispositionHeader
argument_list|,
name|QVariant
argument_list|(
literal|"form-data; name=\"image2\"; filename=\"image2.jpg\""
argument_list|)
argument_list|)
expr_stmt|;
name|QFile
modifier|*
name|file2
init|=
operator|new
name|QFile
argument_list|(
name|QFINDTESTDATA
argument_list|(
literal|"../../auto/network/access/qnetworkreply/image2.jpg"
argument_list|)
argument_list|)
decl_stmt|;
name|file2
operator|->
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|imagePart2
operator|.
name|setBodyDevice
argument_list|(
name|file2
argument_list|)
expr_stmt|;
name|file2
operator|->
name|setParent
argument_list|(
name|multiPart
argument_list|)
expr_stmt|;
name|multiPart
operator|->
name|append
argument_list|(
name|imagePart2
argument_list|)
expr_stmt|;
name|QHttpPart
name|imagePart3
decl_stmt|;
name|imagePart3
operator|.
name|setHeader
argument_list|(
name|QNetworkRequest
operator|::
name|ContentTypeHeader
argument_list|,
name|QVariant
argument_list|(
literal|"image/jpg"
argument_list|)
argument_list|)
expr_stmt|;
name|imagePart3
operator|.
name|setHeader
argument_list|(
name|QNetworkRequest
operator|::
name|ContentDispositionHeader
argument_list|,
name|QVariant
argument_list|(
literal|"form-data; name=\"image3\"; filename=\"image3.jpg\""
argument_list|)
argument_list|)
expr_stmt|;
name|QFile
modifier|*
name|file3
init|=
operator|new
name|QFile
argument_list|(
name|QFINDTESTDATA
argument_list|(
literal|"../../auto/network/access/qnetworkreply/image3.jpg"
argument_list|)
argument_list|)
decl_stmt|;
name|file3
operator|->
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|imagePart3
operator|.
name|setBodyDevice
argument_list|(
name|file3
argument_list|)
expr_stmt|;
name|file3
operator|->
name|setParent
argument_list|(
name|multiPart
argument_list|)
expr_stmt|;
name|multiPart
operator|->
name|append
argument_list|(
name|imagePart3
argument_list|)
expr_stmt|;
return|return
name|multiPart
return|;
block|}
end_function
begin_function
DECL|function|uploadToFacebook
name|void
name|tst_qnetworkreply
operator|::
name|uploadToFacebook
parameter_list|()
block|{
name|QByteArray
name|accessToken
init|=
name|qgetenv
argument_list|(
literal|"QT_FACEBOOK_ACCESS_TOKEN"
argument_list|)
decl_stmt|;
if|if
condition|(
name|accessToken
operator|.
name|isEmpty
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"This test requires the QT_FACEBOOK_ACCESS_TOKEN environment variable to be set. "
literal|"Do something like 'export QT_FACEBOOK_ACCESS_TOKEN=MyAccessToken'"
argument_list|)
expr_stmt|;
name|QElapsedTimer
name|timer
decl_stmt|;
name|QNetworkAccessManager
name|manager
decl_stmt|;
name|QNetworkRequest
name|request
argument_list|(
name|QUrl
argument_list|(
literal|"https://graph.facebook.com/me/photos"
argument_list|)
argument_list|)
decl_stmt|;
name|QHttpMultiPart
modifier|*
name|multiPart
init|=
name|createFacebookMultiPart
argument_list|(
name|accessToken
argument_list|)
decl_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
name|QNetworkReply
modifier|*
name|reply
init|=
name|manager
operator|.
name|post
argument_list|(
name|request
argument_list|,
name|multiPart
argument_list|)
decl_stmt|;
name|multiPart
operator|->
name|setParent
argument_list|(
name|reply
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|120
argument_list|)
expr_stmt|;
name|qint64
name|elapsed
init|=
name|timer
operator|.
name|elapsed
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"reply finished after"
operator|<<
name|elapsed
operator|/
literal|1000.0
operator|<<
literal|"seconds"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reply
operator|->
name|error
argument_list|()
argument_list|,
name|QNetworkReply
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QByteArray
name|content
init|=
name|reply
operator|->
name|readAll
argument_list|()
decl_stmt|;
name|QJsonDocument
name|jsonDocument
init|=
name|QJsonDocument
operator|::
name|fromJson
argument_list|(
name|content
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|jsonDocument
operator|.
name|isArray
argument_list|()
argument_list|)
expr_stmt|;
name|QJsonArray
name|uploadStatuses
init|=
name|jsonDocument
operator|.
name|array
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|uploadStatuses
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|a
init|=
literal|0
init|;
name|a
operator|<
name|uploadStatuses
operator|.
name|size
argument_list|()
condition|;
name|a
operator|++
control|)
block|{
name|QJsonValue
name|currentUploadStatus
init|=
name|uploadStatuses
operator|.
name|at
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|currentUploadStatus
operator|.
name|isObject
argument_list|()
argument_list|)
expr_stmt|;
name|QJsonObject
name|statusObject
init|=
name|currentUploadStatus
operator|.
name|toObject
argument_list|()
decl_stmt|;
name|QJsonValue
name|statusCode
init|=
name|statusObject
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"code"
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|statusCode
operator|.
name|toVariant
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
comment|// 200 OK
block|}
block|}
end_function
begin_function
DECL|function|spdy_data
name|void
name|tst_qnetworkreply
operator|::
name|spdy_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"host"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"setAttribute"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"enabled"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"expectedProtocol"
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QString
argument_list|>
name|hosts
init|=
name|QList
argument_list|<
name|QString
argument_list|>
argument_list|()
operator|<<
name|QStringLiteral
argument_list|(
literal|"www.google.com"
argument_list|)
comment|// sends SPDY and 30x redirect
operator|<<
name|QStringLiteral
argument_list|(
literal|"www.google.de"
argument_list|)
comment|// sends SPDY and 200 OK
operator|<<
name|QStringLiteral
argument_list|(
literal|"mail.google.com"
argument_list|)
comment|// sends SPDY and 200 OK
operator|<<
name|QStringLiteral
argument_list|(
literal|"www.youtube.com"
argument_list|)
comment|// sends SPDY and 200 OK
operator|<<
name|QStringLiteral
argument_list|(
literal|"www.dropbox.com"
argument_list|)
comment|// no SPDY, but NPN which selects HTTP
operator|<<
name|QStringLiteral
argument_list|(
literal|"www.facebook.com"
argument_list|)
comment|// sends SPDY and 200 OK
operator|<<
name|QStringLiteral
argument_list|(
literal|"graph.facebook.com"
argument_list|)
comment|// sends SPDY and 200 OK
operator|<<
name|QStringLiteral
argument_list|(
literal|"www.twitter.com"
argument_list|)
comment|// sends SPDY and 30x redirect
operator|<<
name|QStringLiteral
argument_list|(
literal|"twitter.com"
argument_list|)
comment|// sends SPDY and 200 OK
operator|<<
name|QStringLiteral
argument_list|(
literal|"api.twitter.com"
argument_list|)
decl_stmt|;
comment|// sends SPDY and 200 OK
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|host
decl|,
name|hosts
control|)
block|{
name|QByteArray
name|tag
init|=
name|host
operator|.
name|toLocal8Bit
argument_list|()
decl_stmt|;
name|tag
operator|.
name|append
argument_list|(
literal|"-not-used"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|tag
argument_list|)
operator|<<
name|QStringLiteral
argument_list|(
literal|"https://"
argument_list|)
operator|+
name|host
operator|<<
literal|false
operator|<<
literal|false
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|tag
operator|=
name|host
operator|.
name|toLocal8Bit
argument_list|()
expr_stmt|;
name|tag
operator|.
name|append
argument_list|(
literal|"-disabled"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|tag
argument_list|)
operator|<<
name|QStringLiteral
argument_list|(
literal|"https://"
argument_list|)
operator|+
name|host
operator|<<
literal|true
operator|<<
literal|false
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
if|if
condition|(
name|host
operator|!=
name|QStringLiteral
argument_list|(
literal|"api.twitter.com"
argument_list|)
condition|)
block|{
comment|// they don't offer an API over HTTP
name|tag
operator|=
name|host
operator|.
name|toLocal8Bit
argument_list|()
expr_stmt|;
name|tag
operator|.
name|append
argument_list|(
literal|"-no-https-url"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|tag
argument_list|)
operator|<<
name|QStringLiteral
argument_list|(
literal|"http://"
argument_list|)
operator|+
name|host
operator|<<
literal|true
operator|<<
literal|true
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_OPENSSL
name|tag
operator|=
name|host
operator|.
name|toLocal8Bit
argument_list|()
expr_stmt|;
name|tag
operator|.
name|append
argument_list|(
literal|"-enabled"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|tag
argument_list|)
operator|<<
name|QStringLiteral
argument_list|(
literal|"https://"
argument_list|)
operator|+
name|host
operator|<<
literal|true
operator|<<
literal|true
operator|<<
operator|(
name|host
operator|==
name|QStringLiteral
argument_list|(
literal|"www.dropbox.com"
argument_list|)
condition|?
name|QByteArray
argument_list|(
name|QSslConfiguration
operator|::
name|NextProtocolHttp1_1
argument_list|)
else|:
name|QByteArray
argument_list|(
name|QSslConfiguration
operator|::
name|NextProtocolSpdy3_0
argument_list|)
operator|)
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_OPENSSL
block|}
block|}
end_function
begin_function
DECL|function|spdy
name|void
name|tst_qnetworkreply
operator|::
name|spdy
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_BUILD_INTERNAL
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_SSL
argument_list|)
operator|&&
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x1000100fL
operator|&&
operator|!
name|defined
argument_list|(
name|OPENSSL_NO_TLSEXT
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|OPENSSL_NO_NEXTPROTONEG
argument_list|)
name|m_manager
operator|.
name|clearAccessCache
argument_list|()
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|QUrl
name|url
argument_list|(
name|host
argument_list|)
decl_stmt|;
name|QNetworkRequest
name|request
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|setAttribute
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|enabled
argument_list|)
expr_stmt|;
if|if
condition|(
name|setAttribute
condition|)
block|{
name|request
operator|.
name|setAttribute
argument_list|(
name|QNetworkRequest
operator|::
name|SpdyAllowedAttribute
argument_list|,
name|QVariant
argument_list|(
name|enabled
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QNetworkReply
modifier|*
name|reply
init|=
name|m_manager
operator|.
name|get
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QSignalSpy
name|metaDataChangedSpy
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|metaDataChanged
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|readyReadSpy
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|finishedSpy
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|finishedManagerSpy
argument_list|(
operator|&
name|m_manager
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|(
name|QNetworkReply
operator|*
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|15
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|expectedProtocol
argument_list|)
expr_stmt|;
name|bool
name|expectedSpdyUsed
init|=
operator|(
name|expectedProtocol
operator|==
name|QSslConfiguration
operator|::
name|NextProtocolSpdy3_0
operator|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|reply
operator|->
name|attribute
argument_list|(
name|QNetworkRequest
operator|::
name|SpdyWasUsedAttribute
argument_list|)
operator|.
name|toBool
argument_list|()
argument_list|,
name|expectedSpdyUsed
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|metaDataChangedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|finishedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|finishedManagerSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QUrl
name|redirectUrl
init|=
name|reply
operator|->
name|header
argument_list|(
name|QNetworkRequest
operator|::
name|LocationHeader
argument_list|)
operator|.
name|toUrl
argument_list|()
decl_stmt|;
name|QByteArray
name|content
init|=
name|reply
operator|->
name|readAll
argument_list|()
decl_stmt|;
name|int
name|statusCode
init|=
name|reply
operator|->
name|attribute
argument_list|(
name|QNetworkRequest
operator|::
name|HttpStatusCodeAttribute
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|statusCode
operator|>=
literal|200
operator|&&
name|statusCode
operator|<
literal|500
argument_list|)
expr_stmt|;
if|if
condition|(
name|statusCode
operator|==
literal|200
operator|||
name|statusCode
operator|>=
literal|400
condition|)
block|{
name|QVERIFY
argument_list|(
name|readyReadSpy
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|content
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|statusCode
operator|>=
literal|300
operator|&&
name|statusCode
operator|<
literal|400
condition|)
block|{
name|QVERIFY
argument_list|(
operator|!
name|redirectUrl
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QSslConfiguration
operator|::
name|NextProtocolNegotiationStatus
name|expectedStatus
init|=
name|expectedProtocol
operator|.
name|isNull
argument_list|()
condition|?
name|QSslConfiguration
operator|::
name|NextProtocolNegotiationNone
else|:
name|QSslConfiguration
operator|::
name|NextProtocolNegotiationNegotiated
decl_stmt|;
name|QCOMPARE
argument_list|(
name|reply
operator|->
name|sslConfiguration
argument_list|()
operator|.
name|nextProtocolNegotiationStatus
argument_list|()
argument_list|,
name|expectedStatus
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reply
operator|->
name|sslConfiguration
argument_list|()
operator|.
name|nextNegotiatedProtocol
argument_list|()
argument_list|,
name|expectedProtocol
argument_list|)
expr_stmt|;
else|#
directive|else
name|QSKIP
argument_list|(
literal|"Qt built withouth OpenSSL, or the OpenSSL version is too old"
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// defined(QT_BUILD_INTERNAL)&& !defined(QT_NO_SSL) ...
block|}
end_function
begin_function
DECL|function|spdyReplyFinished
name|void
name|tst_qnetworkreply
operator|::
name|spdyReplyFinished
parameter_list|()
block|{
specifier|static
name|int
name|finishedCount
init|=
literal|0
decl_stmt|;
name|finishedCount
operator|++
expr_stmt|;
if|if
condition|(
name|finishedCount
operator|==
literal|12
condition|)
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|exitLoop
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|spdyMultipleRequestsPerHost
name|void
name|tst_qnetworkreply
operator|::
name|spdyMultipleRequestsPerHost
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_BUILD_INTERNAL
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_SSL
argument_list|)
operator|&&
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x1000100fL
operator|&&
operator|!
name|defined
argument_list|(
name|OPENSSL_NO_TLSEXT
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|OPENSSL_NO_NEXTPROTONEG
argument_list|)
name|QList
argument_list|<
name|QNetworkRequest
argument_list|>
name|requests
decl_stmt|;
name|requests
operator|<<
name|QNetworkRequest
argument_list|(
name|QUrl
argument_list|(
literal|"https://www.facebook.com"
argument_list|)
argument_list|)
operator|<<
name|QNetworkRequest
argument_list|(
name|QUrl
argument_list|(
literal|"https://www.facebook.com/images/fb_icon_325x325.png"
argument_list|)
argument_list|)
operator|<<
name|QNetworkRequest
argument_list|(
name|QUrl
argument_list|(
literal|"https://www.google.de"
argument_list|)
argument_list|)
operator|<<
name|QNetworkRequest
argument_list|(
name|QUrl
argument_list|(
literal|"https://www.google.de/preferences?hl=de"
argument_list|)
argument_list|)
operator|<<
name|QNetworkRequest
argument_list|(
name|QUrl
argument_list|(
literal|"https://www.google.de/intl/de/policies/?fg=1"
argument_list|)
argument_list|)
operator|<<
name|QNetworkRequest
argument_list|(
name|QUrl
argument_list|(
literal|"https://www.google.de/intl/de/about.html?fg=1"
argument_list|)
argument_list|)
operator|<<
name|QNetworkRequest
argument_list|(
name|QUrl
argument_list|(
literal|"https://www.google.de/services/?fg=1"
argument_list|)
argument_list|)
operator|<<
name|QNetworkRequest
argument_list|(
name|QUrl
argument_list|(
literal|"https://www.google.de/intl/de/ads/?fg=1"
argument_list|)
argument_list|)
operator|<<
name|QNetworkRequest
argument_list|(
name|QUrl
argument_list|(
literal|"https://i1.ytimg.com/li/tnHdj3df7iM/default.jpg"
argument_list|)
argument_list|)
operator|<<
name|QNetworkRequest
argument_list|(
name|QUrl
argument_list|(
literal|"https://i1.ytimg.com/li/7Dr1BKwqctY/default.jpg"
argument_list|)
argument_list|)
operator|<<
name|QNetworkRequest
argument_list|(
name|QUrl
argument_list|(
literal|"https://i1.ytimg.com/li/hfZhJdhTqX8/default.jpg"
argument_list|)
argument_list|)
operator|<<
name|QNetworkRequest
argument_list|(
name|QUrl
argument_list|(
literal|"https://i1.ytimg.com/vi/14Nprh8163I/hqdefault.jpg"
argument_list|)
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QNetworkReply
modifier|*
argument_list|>
name|replies
decl_stmt|;
name|QList
argument_list|<
name|QSignalSpy
modifier|*
argument_list|>
name|metaDataChangedSpies
decl_stmt|;
name|QList
argument_list|<
name|QSignalSpy
modifier|*
argument_list|>
name|readyReadSpies
decl_stmt|;
name|QList
argument_list|<
name|QSignalSpy
modifier|*
argument_list|>
name|finishedSpies
decl_stmt|;
name|QSignalSpy
name|finishedManagerSpy
argument_list|(
operator|&
name|m_manager
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|(
name|QNetworkReply
operator|*
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
foreach|foreach
control|(
name|QNetworkRequest
name|request
decl|,
name|requests
control|)
block|{
name|request
operator|.
name|setAttribute
argument_list|(
name|QNetworkRequest
operator|::
name|SpdyAllowedAttribute
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QNetworkReply
modifier|*
name|reply
init|=
name|m_manager
operator|.
name|get
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|spdyReplyFinished
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|replies
operator|<<
name|reply
expr_stmt|;
name|QSignalSpy
modifier|*
name|metaDataChangedSpy
init|=
operator|new
name|QSignalSpy
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|metaDataChanged
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|metaDataChangedSpies
operator|<<
name|metaDataChangedSpy
expr_stmt|;
name|QSignalSpy
modifier|*
name|readyReadSpy
init|=
operator|new
name|QSignalSpy
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|readyReadSpies
operator|<<
name|readyReadSpy
expr_stmt|;
name|QSignalSpy
modifier|*
name|finishedSpy
init|=
operator|new
name|QSignalSpy
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|finishedSpies
operator|<<
name|finishedSpy
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|requests
operator|.
name|count
argument_list|()
argument_list|,
name|replies
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|15
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|finishedManagerSpy
operator|.
name|count
argument_list|()
argument_list|,
name|requests
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|a
init|=
literal|0
init|;
name|a
operator|<
name|replies
operator|.
name|count
argument_list|()
condition|;
operator|++
name|a
control|)
block|{
name|QCOMPARE
argument_list|(
name|replies
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|->
name|sslConfiguration
argument_list|()
operator|.
name|nextProtocolNegotiationStatus
argument_list|()
argument_list|,
name|QSslConfiguration
operator|::
name|NextProtocolNegotiationNegotiated
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|replies
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|->
name|sslConfiguration
argument_list|()
operator|.
name|nextNegotiatedProtocol
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
name|QSslConfiguration
operator|::
name|NextProtocolSpdy3_0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|replies
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|->
name|error
argument_list|()
argument_list|,
name|QNetworkReply
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|replies
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|->
name|attribute
argument_list|(
name|QNetworkRequest
operator|::
name|SpdyWasUsedAttribute
argument_list|)
operator|.
name|toBool
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|replies
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|->
name|attribute
argument_list|(
name|QNetworkRequest
operator|::
name|ConnectionEncryptedAttribute
argument_list|)
operator|.
name|toBool
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|replies
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|->
name|attribute
argument_list|(
name|QNetworkRequest
operator|::
name|HttpStatusCodeAttribute
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|QByteArray
name|content
init|=
name|replies
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|->
name|readAll
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|content
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|metaDataChangedSpies
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|->
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|metaDataChangedSpies
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|finishedSpies
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|->
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|finishedSpies
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|readyReadSpies
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|->
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|readyReadSpies
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
name|replies
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
block|}
else|#
directive|else
name|QSKIP
argument_list|(
literal|"Qt built withouth OpenSSL, or the OpenSSL version is too old"
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// defined(QT_BUILD_INTERNAL)&& !defined(QT_NO_SSL) ...
block|}
end_function
begin_function
DECL|function|proxyAuthentication_data
name|void
name|tst_qnetworkreply
operator|::
name|proxyAuthentication_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QUrl
argument_list|>
argument_list|(
literal|"url"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http://www.google.com"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"http://www.google.com"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"https://www.google.com"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"https://www.google.com"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|proxyAuthentication
name|void
name|tst_qnetworkreply
operator|::
name|proxyAuthentication
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QUrl
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|QNetworkRequest
name|request
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|QNetworkAccessManager
name|manager
decl_stmt|;
name|QByteArray
name|proxyHostName
init|=
name|qgetenv
argument_list|(
literal|"QT_PROXY_HOST"
argument_list|)
decl_stmt|;
name|QByteArray
name|proxyPort
init|=
name|qgetenv
argument_list|(
literal|"QT_PROXY_PORT"
argument_list|)
decl_stmt|;
name|QByteArray
name|proxyUser
init|=
name|qgetenv
argument_list|(
literal|"QT_PROXY_USER"
argument_list|)
decl_stmt|;
name|QByteArray
name|proxyPassword
init|=
name|qgetenv
argument_list|(
literal|"QT_PROXY_PASSWORD"
argument_list|)
decl_stmt|;
if|if
condition|(
name|proxyHostName
operator|.
name|isEmpty
argument_list|()
operator|||
name|proxyPort
operator|.
name|isEmpty
argument_list|()
operator|||
name|proxyUser
operator|.
name|isEmpty
argument_list|()
operator|||
name|proxyPassword
operator|.
name|isEmpty
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"This test requires the QT_PROXY_* environment variables to be set. "
literal|"Do something like:\n"
literal|"export QT_PROXY_HOST=myNTLMHost\n"
literal|"export QT_PROXY_PORT=8080\n"
literal|"export QT_PROXY_USER='myDomain\\myUser'\n"
literal|"export QT_PROXY_PASSWORD=myPassword\n"
argument_list|)
expr_stmt|;
name|QNetworkProxy
name|proxy
argument_list|(
name|QNetworkProxy
operator|::
name|HttpProxy
argument_list|)
decl_stmt|;
name|proxy
operator|.
name|setHostName
argument_list|(
name|proxyHostName
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setPort
argument_list|(
name|proxyPort
operator|.
name|toInt
argument_list|()
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setUser
argument_list|(
name|proxyUser
argument_list|)
expr_stmt|;
name|proxy
operator|.
name|setPassword
argument_list|(
name|proxyPassword
argument_list|)
expr_stmt|;
name|manager
operator|.
name|setProxy
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
name|reply
operator|=
name|manager
operator|.
name|get
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|15
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reply
operator|->
name|error
argument_list|()
argument_list|,
name|QNetworkReply
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|int
name|statusCode
init|=
name|reply
operator|->
name|attribute
argument_list|(
name|QNetworkRequest
operator|::
name|HttpStatusCodeAttribute
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|statusCode
operator|>=
literal|200
operator|&&
name|statusCode
operator|<
literal|400
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|authenticationRequiredSlot
name|void
name|tst_qnetworkreply
operator|::
name|authenticationRequiredSlot
parameter_list|(
name|QNetworkReply
modifier|*
parameter_list|,
name|QAuthenticator
modifier|*
name|authenticator
parameter_list|)
block|{
name|QString
name|authUser
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|qgetenv
argument_list|(
literal|"QT_AUTH_USER"
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|authPassword
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|qgetenv
argument_list|(
literal|"QT_AUTH_PASSWORD"
argument_list|)
argument_list|)
decl_stmt|;
name|authenticator
operator|->
name|setUser
argument_list|(
name|authUser
argument_list|)
expr_stmt|;
name|authenticator
operator|->
name|setPassword
argument_list|(
name|authPassword
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|authentication
name|void
name|tst_qnetworkreply
operator|::
name|authentication
parameter_list|()
block|{
name|QByteArray
name|authUrl
init|=
name|qgetenv
argument_list|(
literal|"QT_AUTH_URL"
argument_list|)
decl_stmt|;
if|if
condition|(
name|authUrl
operator|.
name|isEmpty
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"This test requires the QT_AUTH_* environment variables to be set. "
literal|"Do something like:\n"
literal|"export QT_AUTH_URL='http://myUrl.com/myPath'\n"
literal|"export QT_AUTH_USER='myDomain\\myUser'\n"
literal|"export QT_AUTH_PASSWORD=myPassword\n"
argument_list|)
expr_stmt|;
name|QUrl
name|url
argument_list|(
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|authUrl
argument_list|)
argument_list|)
decl_stmt|;
name|QNetworkRequest
name|request
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|QNetworkAccessManager
name|manager
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|manager
argument_list|,
name|SIGNAL
argument_list|(
name|authenticationRequired
argument_list|(
name|QNetworkReply
operator|*
argument_list|,
name|QAuthenticator
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|authenticationRequiredSlot
argument_list|(
name|QNetworkReply
operator|*
argument_list|,
name|QAuthenticator
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|reply
operator|=
name|manager
operator|.
name|get
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|15
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|reply
operator|->
name|error
argument_list|()
operator|==
name|QNetworkReply
operator|::
name|NoError
argument_list|,
name|reply
operator|->
name|errorString
argument_list|()
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|statusCode
init|=
name|reply
operator|->
name|attribute
argument_list|(
name|QNetworkRequest
operator|::
name|HttpStatusCodeAttribute
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|statusCode
operator|>=
literal|200
operator|&&
name|statusCode
operator|<
literal|400
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|npnWithEmptyList
name|void
name|tst_qnetworkreply
operator|::
name|npnWithEmptyList
parameter_list|()
comment|// QTBUG-40714
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_BUILD_INTERNAL
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_SSL
argument_list|)
operator|&&
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x1000100fL
operator|&&
operator|!
name|defined
argument_list|(
name|OPENSSL_NO_TLSEXT
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|OPENSSL_NO_NEXTPROTONEG
argument_list|)
comment|// The server does not send a list of Next Protocols, so we test
comment|// that we continue anyhow and it works
name|m_manager
operator|.
name|clearAccessCache
argument_list|()
expr_stmt|;
name|QUrl
name|url
argument_list|(
name|QStringLiteral
argument_list|(
literal|"https://www.ossifrage.net/"
argument_list|)
argument_list|)
decl_stmt|;
name|QNetworkRequest
name|request
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|QNetworkRequest
operator|::
name|SpdyAllowedAttribute
argument_list|,
name|QVariant
argument_list|(
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|QNetworkReply
modifier|*
name|reply
init|=
name|m_manager
operator|.
name|get
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|15
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|statusCode
init|=
name|reply
operator|->
name|attribute
argument_list|(
name|QNetworkRequest
operator|::
name|HttpStatusCodeAttribute
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|statusCode
operator|==
literal|200
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reply
operator|->
name|sslConfiguration
argument_list|()
operator|.
name|nextProtocolNegotiationStatus
argument_list|()
argument_list|,
name|QSslConfiguration
operator|::
name|NextProtocolNegotiationUnsupported
argument_list|)
expr_stmt|;
else|#
directive|else
name|QSKIP
argument_list|(
literal|"Qt built withouth OpenSSL, or the OpenSSL version is too old"
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// defined(QT_BUILD_INTERNAL)&& !defined(QT_NO_SSL) ...
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_qnetworkreply
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"main.moc"
end_include
end_unit
