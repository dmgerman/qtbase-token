begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|// This file contains benchmarks for QNetworkReply functions.
end_comment
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<qtest.h>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qnetworkreply.h>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qnetworkrequest.h>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qnetworkaccessmanager.h>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qsslconfiguration.h>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qhttpmultipart.h>
end_include
begin_include
include|#
directive|include
file|<QtCore/QJsonDocument>
end_include
begin_include
include|#
directive|include
file|"../../auto/network-settings.h"
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|QT_BUILD_INTERNAL
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_SSL
argument_list|)
end_if
begin_include
include|#
directive|include
file|"private/qsslsocket_p.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_define
DECL|macro|BANDWIDTH_LIMIT_BYTES
define|#
directive|define
name|BANDWIDTH_LIMIT_BYTES
value|(1024*100)
end_define
begin_define
DECL|macro|TIME_ESTIMATION_SECONDS
define|#
directive|define
name|TIME_ESTIMATION_SECONDS
value|(97)
end_define
begin_class
DECL|class|tst_qnetworkreply
class|class
name|tst_qnetworkreply
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|limiting_data
parameter_list|()
function_decl|;
name|void
name|limiting
parameter_list|()
function_decl|;
name|void
name|setSslConfiguration_data
parameter_list|()
function_decl|;
name|void
name|setSslConfiguration
parameter_list|()
function_decl|;
name|void
name|uploadToFacebook
parameter_list|()
function_decl|;
private|private:
name|QHttpMultiPart
modifier|*
name|createFacebookMultiPart
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|accessToken
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|reply
name|QNetworkReply
modifier|*
name|reply
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|HttpReceiver
class|class
name|HttpReceiver
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
DECL|function|finishedSlot
name|void
name|finishedSlot
parameter_list|()
block|{
name|quint64
name|bytesPerSec
init|=
operator|(
name|reply
operator|->
name|header
argument_list|(
name|QNetworkRequest
operator|::
name|ContentLengthHeader
argument_list|)
operator|.
name|toLongLong
argument_list|()
operator|)
operator|/
operator|(
name|stopwatch
operator|.
name|elapsed
argument_list|()
operator|/
literal|1000.0
operator|)
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Finished HTTP(S) request with"
operator|<<
name|bytesPerSec
operator|<<
literal|"bytes/sec"
expr_stmt|;
name|QVERIFY
argument_list|(
name|bytesPerSec
operator|<
name|BANDWIDTH_LIMIT_BYTES
operator|*
literal|1.05
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|bytesPerSec
operator|>
name|BANDWIDTH_LIMIT_BYTES
operator|*
literal|0.95
argument_list|)
expr_stmt|;
name|timer
operator|->
name|stop
argument_list|()
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|exitLoop
argument_list|()
expr_stmt|;
block|}
DECL|function|readyReadSlot
name|void
name|readyReadSlot
parameter_list|()
block|{     }
DECL|function|timeoutSlot
name|void
name|timeoutSlot
parameter_list|()
block|{
name|reply
operator|->
name|read
argument_list|(
name|BANDWIDTH_LIMIT_BYTES
argument_list|)
operator|.
name|size
argument_list|()
expr_stmt|;
block|}
DECL|function|startTimer
name|void
name|startTimer
parameter_list|()
block|{
name|stopwatch
operator|.
name|start
argument_list|()
expr_stmt|;
name|timer
operator|=
operator|new
name|QTimer
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|timer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|timeoutSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|timer
operator|->
name|start
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
block|}
protected|protected:
DECL|member|timer
name|QTimer
modifier|*
name|timer
decl_stmt|;
DECL|member|stopwatch
name|QTime
name|stopwatch
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|initTestCase
name|void
name|tst_qnetworkreply
operator|::
name|initTestCase
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QtNetworkSettings
operator|::
name|verifyTestNetworkSettings
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|limiting_data
name|void
name|tst_qnetworkreply
operator|::
name|limiting_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QUrl
argument_list|>
argument_list|(
literal|"url"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"HTTP"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"http://"
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|+
literal|"/mediumfile"
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SSL
name|QTest
operator|::
name|newRow
argument_list|(
literal|"HTTP+SSL"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"https://"
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|+
literal|"/mediumfile"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|limiting
name|void
name|tst_qnetworkreply
operator|::
name|limiting
parameter_list|()
block|{
name|HttpReceiver
name|receiver
decl_stmt|;
name|QNetworkAccessManager
name|manager
decl_stmt|;
name|QFETCH
argument_list|(
name|QUrl
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|QNetworkRequest
name|req
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Starting. This will take a while (around"
operator|<<
name|TIME_ESTIMATION_SECONDS
operator|<<
literal|"sec)."
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Please check the actual bandwidth usage with a network monitor, e.g. the KDE"
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"network plasma widget. It should be around"
operator|<<
name|BANDWIDTH_LIMIT_BYTES
operator|<<
literal|"bytes/sec."
expr_stmt|;
name|reply
operator|=
name|manager
operator|.
name|get
argument_list|(
name|req
argument_list|)
expr_stmt|;
name|reply
operator|->
name|ignoreSslErrors
argument_list|()
expr_stmt|;
name|reply
operator|->
name|setReadBufferSize
argument_list|(
name|BANDWIDTH_LIMIT_BYTES
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
operator|&
name|receiver
argument_list|,
name|SLOT
argument_list|(
name|readyReadSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|receiver
argument_list|,
name|SLOT
argument_list|(
name|finishedSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|receiver
operator|.
name|startTimer
argument_list|()
expr_stmt|;
comment|// event loop
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
name|TIME_ESTIMATION_SECONDS
operator|+
literal|20
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setSslConfiguration_data
name|void
name|tst_qnetworkreply
operator|::
name|setSslConfiguration_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QUrl
argument_list|>
argument_list|(
literal|"url"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"works"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"codereview.qt-project.org"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"https://codereview.qt-project.org"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"test-server"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"https://"
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|+
literal|"/"
argument_list|)
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setSslConfiguration
name|void
name|tst_qnetworkreply
operator|::
name|setSslConfiguration
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QT_NO_SSL
name|QSKIP
argument_list|(
literal|"SSL is not enabled."
argument_list|)
expr_stmt|;
else|#
directive|else
name|QFETCH
argument_list|(
name|QUrl
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|QNetworkRequest
name|request
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|QSslConfiguration
name|conf
init|=
name|request
operator|.
name|sslConfiguration
argument_list|()
decl_stmt|;
name|conf
operator|.
name|setProtocol
argument_list|(
name|QSsl
operator|::
name|TlsV1_0
argument_list|)
expr_stmt|;
comment|// TLS 1.0 will be used anyway, just make sure we change the configuration
name|request
operator|.
name|setSslConfiguration
argument_list|(
name|conf
argument_list|)
expr_stmt|;
name|QNetworkAccessManager
name|manager
decl_stmt|;
name|reply
operator|=
name|manager
operator|.
name|get
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|15
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|works
argument_list|)
expr_stmt|;
name|bool
name|rootCertLoadingAllowed
init|=
name|QSslSocketPrivate
operator|::
name|rootCertOnDemandLoadingSupported
argument_list|()
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_LINUX
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_BLACKBERRY
argument_list|)
name|QCOMPARE
argument_list|(
name|rootCertLoadingAllowed
argument_list|,
literal|true
argument_list|)
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
name|QCOMPARE
argument_list|(
name|rootCertLoadingAllowed
argument_list|,
literal|false
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// other platforms: undecided (Windows: depends on the version)
if|if
condition|(
name|works
condition|)
block|{
name|QCOMPARE
argument_list|(
name|reply
operator|->
name|error
argument_list|()
argument_list|,
name|QNetworkReply
operator|::
name|NoError
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|reply
operator|->
name|error
argument_list|()
argument_list|,
name|QNetworkReply
operator|::
name|SslHandshakeFailedError
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
endif|#
directive|endif
comment|// QT_NO_SSL
block|}
end_function
begin_function
DECL|function|createFacebookMultiPart
name|QHttpMultiPart
modifier|*
name|tst_qnetworkreply
operator|::
name|createFacebookMultiPart
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|accessToken
parameter_list|)
block|{
name|QHttpMultiPart
modifier|*
name|multiPart
init|=
operator|new
name|QHttpMultiPart
argument_list|(
name|QHttpMultiPart
operator|::
name|FormDataType
argument_list|)
decl_stmt|;
name|QHttpPart
name|accessTokenPart
decl_stmt|;
name|accessTokenPart
operator|.
name|setHeader
argument_list|(
name|QNetworkRequest
operator|::
name|ContentDispositionHeader
argument_list|,
name|QVariant
argument_list|(
literal|"form-data; name=\"access_token\""
argument_list|)
argument_list|)
expr_stmt|;
name|accessTokenPart
operator|.
name|setBody
argument_list|(
name|accessToken
argument_list|)
expr_stmt|;
name|multiPart
operator|->
name|append
argument_list|(
name|accessTokenPart
argument_list|)
expr_stmt|;
name|QHttpPart
name|batchPart
decl_stmt|;
name|batchPart
operator|.
name|setHeader
argument_list|(
name|QNetworkRequest
operator|::
name|ContentDispositionHeader
argument_list|,
name|QVariant
argument_list|(
literal|"form-data; name=\"batch\""
argument_list|)
argument_list|)
expr_stmt|;
name|batchPart
operator|.
name|setBody
argument_list|(
literal|"["
literal|"   {"
literal|"      \"attached_files\" : \"image1\","
literal|"      \"body\" : \"message=&published=0\","
literal|"      \"method\" : \"POST\","
literal|"      \"relative_url\" : \"me/photos\""
literal|"   },"
literal|"   {"
literal|"      \"attached_files\" : \"image2\","
literal|"      \"body\" : \"message=&published=0\","
literal|"      \"method\" : \"POST\","
literal|"      \"relative_url\" : \"me/photos\""
literal|"   },"
literal|"   {"
literal|"      \"attached_files\" : \"image3\","
literal|"      \"body\" : \"message=&published=0\","
literal|"      \"method\" : \"POST\","
literal|"      \"relative_url\" : \"me/photos\""
literal|"   }"
literal|"]"
argument_list|)
expr_stmt|;
name|multiPart
operator|->
name|append
argument_list|(
name|batchPart
argument_list|)
expr_stmt|;
name|QHttpPart
name|imagePart1
decl_stmt|;
name|imagePart1
operator|.
name|setHeader
argument_list|(
name|QNetworkRequest
operator|::
name|ContentTypeHeader
argument_list|,
name|QVariant
argument_list|(
literal|"image/jpg"
argument_list|)
argument_list|)
expr_stmt|;
name|imagePart1
operator|.
name|setHeader
argument_list|(
name|QNetworkRequest
operator|::
name|ContentDispositionHeader
argument_list|,
name|QVariant
argument_list|(
literal|"form-data; name=\"image1\"; filename=\"image1.jpg\""
argument_list|)
argument_list|)
expr_stmt|;
name|QFile
modifier|*
name|file1
init|=
operator|new
name|QFile
argument_list|(
name|QFINDTESTDATA
argument_list|(
literal|"../../auto/network/access/qnetworkreply/image1.jpg"
argument_list|)
argument_list|)
decl_stmt|;
name|file1
operator|->
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|imagePart1
operator|.
name|setBodyDevice
argument_list|(
name|file1
argument_list|)
expr_stmt|;
name|file1
operator|->
name|setParent
argument_list|(
name|multiPart
argument_list|)
expr_stmt|;
name|multiPart
operator|->
name|append
argument_list|(
name|imagePart1
argument_list|)
expr_stmt|;
name|QHttpPart
name|imagePart2
decl_stmt|;
name|imagePart2
operator|.
name|setHeader
argument_list|(
name|QNetworkRequest
operator|::
name|ContentTypeHeader
argument_list|,
name|QVariant
argument_list|(
literal|"image/jpg"
argument_list|)
argument_list|)
expr_stmt|;
name|imagePart2
operator|.
name|setHeader
argument_list|(
name|QNetworkRequest
operator|::
name|ContentDispositionHeader
argument_list|,
name|QVariant
argument_list|(
literal|"form-data; name=\"image2\"; filename=\"image2.jpg\""
argument_list|)
argument_list|)
expr_stmt|;
name|QFile
modifier|*
name|file2
init|=
operator|new
name|QFile
argument_list|(
name|QFINDTESTDATA
argument_list|(
literal|"../../auto/network/access/qnetworkreply/image2.jpg"
argument_list|)
argument_list|)
decl_stmt|;
name|file2
operator|->
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|imagePart2
operator|.
name|setBodyDevice
argument_list|(
name|file2
argument_list|)
expr_stmt|;
name|file2
operator|->
name|setParent
argument_list|(
name|multiPart
argument_list|)
expr_stmt|;
name|multiPart
operator|->
name|append
argument_list|(
name|imagePart2
argument_list|)
expr_stmt|;
name|QHttpPart
name|imagePart3
decl_stmt|;
name|imagePart3
operator|.
name|setHeader
argument_list|(
name|QNetworkRequest
operator|::
name|ContentTypeHeader
argument_list|,
name|QVariant
argument_list|(
literal|"image/jpg"
argument_list|)
argument_list|)
expr_stmt|;
name|imagePart3
operator|.
name|setHeader
argument_list|(
name|QNetworkRequest
operator|::
name|ContentDispositionHeader
argument_list|,
name|QVariant
argument_list|(
literal|"form-data; name=\"image3\"; filename=\"image3.jpg\""
argument_list|)
argument_list|)
expr_stmt|;
name|QFile
modifier|*
name|file3
init|=
operator|new
name|QFile
argument_list|(
name|QFINDTESTDATA
argument_list|(
literal|"../../auto/network/access/qnetworkreply/image3.jpg"
argument_list|)
argument_list|)
decl_stmt|;
name|file3
operator|->
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|imagePart3
operator|.
name|setBodyDevice
argument_list|(
name|file3
argument_list|)
expr_stmt|;
name|file3
operator|->
name|setParent
argument_list|(
name|multiPart
argument_list|)
expr_stmt|;
name|multiPart
operator|->
name|append
argument_list|(
name|imagePart3
argument_list|)
expr_stmt|;
return|return
name|multiPart
return|;
block|}
end_function
begin_function
DECL|function|uploadToFacebook
name|void
name|tst_qnetworkreply
operator|::
name|uploadToFacebook
parameter_list|()
block|{
name|QByteArray
name|accessToken
init|=
name|qgetenv
argument_list|(
literal|"QT_FACEBOOK_ACCESS_TOKEN"
argument_list|)
decl_stmt|;
if|if
condition|(
name|accessToken
operator|.
name|isEmpty
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"This test requires the QT_FACEBOOK_ACCESS_TOKEN environment variable to be set. "
literal|"Do something like 'export QT_FACEBOOK_ACCESS_TOKEN=MyAccessToken'"
argument_list|)
expr_stmt|;
name|QElapsedTimer
name|timer
decl_stmt|;
name|QNetworkAccessManager
name|manager
decl_stmt|;
name|QNetworkRequest
name|request
argument_list|(
name|QUrl
argument_list|(
literal|"https://graph.facebook.com/me/photos"
argument_list|)
argument_list|)
decl_stmt|;
name|QHttpMultiPart
modifier|*
name|multiPart
init|=
name|createFacebookMultiPart
argument_list|(
name|accessToken
argument_list|)
decl_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
name|QNetworkReply
modifier|*
name|reply
init|=
name|manager
operator|.
name|post
argument_list|(
name|request
argument_list|,
name|multiPart
argument_list|)
decl_stmt|;
name|multiPart
operator|->
name|setParent
argument_list|(
name|reply
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|120
argument_list|)
expr_stmt|;
name|qint64
name|elapsed
init|=
name|timer
operator|.
name|elapsed
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"reply finished after"
operator|<<
name|elapsed
operator|/
literal|1000.0
operator|<<
literal|"seconds"
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reply
operator|->
name|error
argument_list|()
argument_list|,
name|QNetworkReply
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QByteArray
name|content
init|=
name|reply
operator|->
name|readAll
argument_list|()
decl_stmt|;
name|QJsonDocument
name|jsonDocument
init|=
name|QJsonDocument
operator|::
name|fromJson
argument_list|(
name|content
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|jsonDocument
operator|.
name|isArray
argument_list|()
argument_list|)
expr_stmt|;
name|QJsonArray
name|uploadStatuses
init|=
name|jsonDocument
operator|.
name|array
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|uploadStatuses
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|a
init|=
literal|0
init|;
name|a
operator|<
name|uploadStatuses
operator|.
name|size
argument_list|()
condition|;
name|a
operator|++
control|)
block|{
name|QJsonValue
name|currentUploadStatus
init|=
name|uploadStatuses
operator|.
name|at
argument_list|(
name|a
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|currentUploadStatus
operator|.
name|isObject
argument_list|()
argument_list|)
expr_stmt|;
name|QJsonObject
name|statusObject
init|=
name|currentUploadStatus
operator|.
name|toObject
argument_list|()
decl_stmt|;
name|QJsonValue
name|statusCode
init|=
name|statusObject
operator|.
name|value
argument_list|(
name|QLatin1String
argument_list|(
literal|"code"
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|statusCode
operator|.
name|toVariant
argument_list|()
operator|.
name|toInt
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
comment|// 200 OK
block|}
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_qnetworkreply
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"main.moc"
end_include
end_unit
