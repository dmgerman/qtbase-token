begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:GPL-EXCEPT$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3 as published by the Free Software ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"utils.h"
end_include
begin_include
include|#
directive|include
file|<QCheckBox>
end_include
begin_include
include|#
directive|include
file|<QVBoxLayout>
end_include
begin_function
DECL|function|createCombo
name|QComboBox
modifier|*
name|createCombo
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|,
specifier|const
name|FlagData
modifier|*
name|d
parameter_list|,
name|size_t
name|size
parameter_list|)
block|{
name|QComboBox
modifier|*
name|c
init|=
operator|new
name|QComboBox
argument_list|(
name|parent
argument_list|)
decl_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
name|c
operator|->
name|addItem
argument_list|(
name|QLatin1String
argument_list|(
name|d
index|[
name|i
index|]
operator|.
name|description
argument_list|)
argument_list|,
name|QVariant
argument_list|(
name|d
index|[
name|i
index|]
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|c
return|;
block|}
end_function
begin_function
DECL|function|populateCombo
name|void
name|populateCombo
parameter_list|(
name|QComboBox
modifier|*
name|combo
parameter_list|,
specifier|const
name|FlagData
modifier|*
name|d
parameter_list|,
name|size_t
name|size
parameter_list|)
block|{
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|size
condition|;
operator|++
name|i
control|)
name|combo
operator|->
name|addItem
argument_list|(
name|QLatin1String
argument_list|(
name|d
index|[
name|i
index|]
operator|.
name|description
argument_list|)
argument_list|,
name|QVariant
argument_list|(
name|d
index|[
name|i
index|]
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setComboBoxValue
name|void
name|setComboBoxValue
parameter_list|(
name|QComboBox
modifier|*
name|c
parameter_list|,
name|int
name|v
parameter_list|)
block|{
name|c
operator|->
name|setCurrentIndex
argument_list|(
name|c
operator|->
name|findData
argument_list|(
name|QVariant
argument_list|(
name|v
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|OptionsControl
name|OptionsControl
operator|::
name|OptionsControl
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QGroupBox
argument_list|(
name|parent
argument_list|)
block|{
name|setLayout
argument_list|(
operator|new
name|QVBoxLayout
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_constructor
DECL|function|OptionsControl
name|OptionsControl
operator|::
name|OptionsControl
parameter_list|(
specifier|const
name|QString
modifier|&
name|title
parameter_list|,
specifier|const
name|FlagData
modifier|*
name|data
parameter_list|,
name|size_t
name|count
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QGroupBox
argument_list|(
name|title
argument_list|,
name|parent
argument_list|)
block|{
name|QVBoxLayout
modifier|*
name|layout
init|=
operator|new
name|QVBoxLayout
argument_list|(
name|this
argument_list|)
decl_stmt|;
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|QCheckBox
modifier|*
name|box
init|=
operator|new
name|QCheckBox
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|data
index|[
name|i
index|]
operator|.
name|description
argument_list|)
argument_list|)
decl_stmt|;
name|m_checkBoxes
operator|.
name|push_back
argument_list|(
name|CheckBoxFlagPair
argument_list|(
name|box
argument_list|,
name|data
index|[
name|i
index|]
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|box
argument_list|)
expr_stmt|;
block|}
block|}
end_constructor
begin_function
DECL|function|populateOptions
name|void
name|OptionsControl
operator|::
name|populateOptions
parameter_list|(
specifier|const
name|FlagData
modifier|*
name|data
parameter_list|,
name|size_t
name|count
parameter_list|)
block|{
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
block|{
name|QCheckBox
modifier|*
name|box
init|=
operator|new
name|QCheckBox
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|data
index|[
name|i
index|]
operator|.
name|description
argument_list|)
argument_list|)
decl_stmt|;
name|m_checkBoxes
operator|.
name|push_back
argument_list|(
name|CheckBoxFlagPair
argument_list|(
name|box
argument_list|,
name|data
index|[
name|i
index|]
operator|.
name|value
argument_list|)
argument_list|)
expr_stmt|;
name|layout
argument_list|()
operator|->
name|addWidget
argument_list|(
name|box
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setValue
name|void
name|OptionsControl
operator|::
name|setValue
parameter_list|(
name|int
name|flags
parameter_list|)
block|{
foreach|foreach
control|(
specifier|const
name|CheckBoxFlagPair
modifier|&
name|cf
decl|,
name|m_checkBoxes
control|)
name|cf
operator|.
name|first
operator|->
name|setChecked
argument_list|(
name|cf
operator|.
name|second
operator|&
name|flags
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|intValue
name|int
name|OptionsControl
operator|::
name|intValue
parameter_list|()
specifier|const
block|{
name|int
name|result
init|=
literal|0
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|CheckBoxFlagPair
modifier|&
name|cf
decl|,
name|m_checkBoxes
control|)
block|{
if|if
condition|(
name|cf
operator|.
name|first
operator|->
name|isChecked
argument_list|()
condition|)
name|result
operator||=
name|cf
operator|.
name|second
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
end_unit
