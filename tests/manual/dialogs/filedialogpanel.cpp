begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"filedialogpanel.h"
end_include
begin_include
include|#
directive|include
file|"utils.h"
end_include
begin_include
include|#
directive|include
file|<QGridLayout>
end_include
begin_include
include|#
directive|include
file|<QVBoxLayout>
end_include
begin_include
include|#
directive|include
file|<QHBoxLayout>
end_include
begin_include
include|#
directive|include
file|<QGridLayout>
end_include
begin_include
include|#
directive|include
file|<QFormLayout>
end_include
begin_include
include|#
directive|include
file|<QSpacerItem>
end_include
begin_include
include|#
directive|include
file|<QGroupBox>
end_include
begin_include
include|#
directive|include
file|<QPushButton>
end_include
begin_include
include|#
directive|include
file|<QCheckBox>
end_include
begin_include
include|#
directive|include
file|<QLineEdit>
end_include
begin_include
include|#
directive|include
file|<QPlainTextEdit>
end_include
begin_include
include|#
directive|include
file|<QLabel>
end_include
begin_include
include|#
directive|include
file|<QMessageBox>
end_include
begin_include
include|#
directive|include
file|<QApplication>
end_include
begin_include
include|#
directive|include
file|<QTimer>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_decl_stmt
DECL|variable|acceptModeComboData
specifier|const
name|FlagData
name|acceptModeComboData
index|[]
init|=
block|{
block|{
literal|"AcceptOpen"
block|,
name|QFileDialog
operator|::
name|AcceptOpen
block|}
block|,
block|{
literal|"AcceptSave"
block|,
name|QFileDialog
operator|::
name|AcceptSave
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|viewModeComboData
specifier|const
name|FlagData
name|viewModeComboData
index|[]
init|=
block|{
block|{
literal|"Detail"
block|,
name|QFileDialog
operator|::
name|Detail
block|}
block|,
block|{
literal|"List"
block|,
name|QFileDialog
operator|::
name|List
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|fileModeComboData
specifier|const
name|FlagData
name|fileModeComboData
index|[]
init|=
block|{
block|{
literal|"AnyFile"
block|,
name|QFileDialog
operator|::
name|AnyFile
block|}
block|,
block|{
literal|"ExistingFile"
block|,
name|QFileDialog
operator|::
name|ExistingFile
block|}
block|,
block|{
literal|"ExistingFiles"
block|,
name|QFileDialog
operator|::
name|ExistingFiles
block|}
block|,
block|{
literal|"Directory"
block|,
name|QFileDialog
operator|::
name|Directory
block|}
block|,
block|{
literal|"DirectoryOnly"
block|,
name|QFileDialog
operator|::
name|DirectoryOnly
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|addButton
specifier|static
specifier|inline
name|QPushButton
modifier|*
name|addButton
parameter_list|(
specifier|const
name|QString
modifier|&
name|description
parameter_list|,
name|QGridLayout
modifier|*
name|layout
parameter_list|,
name|int
modifier|&
name|row
parameter_list|,
name|int
name|column
parameter_list|,
name|QObject
modifier|*
name|receiver
parameter_list|,
specifier|const
name|char
modifier|*
name|slotFunc
parameter_list|)
block|{
name|QPushButton
modifier|*
name|button
init|=
operator|new
name|QPushButton
argument_list|(
name|description
argument_list|)
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|button
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|receiver
argument_list|,
name|slotFunc
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|button
argument_list|,
name|row
operator|++
argument_list|,
name|column
argument_list|)
expr_stmt|;
return|return
name|button
return|;
block|}
end_function
begin_comment
comment|// A line edit for editing the label fields of the dialog, keeping track of whether it has
end_comment
begin_comment
comment|// been modified by the user to avoid applying Qt's default texts to native dialogs.
end_comment
begin_class
DECL|class|LabelLineEdit
class|class
name|LabelLineEdit
super|:
specifier|public
name|QLineEdit
block|{
name|Q_OBJECT
public|public:
DECL|function|LabelLineEdit
specifier|explicit
name|LabelLineEdit
parameter_list|(
name|QFileDialog
operator|::
name|DialogLabel
name|label
parameter_list|,
name|QWidget
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QLineEdit
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|m_label
argument_list|(
name|label
argument_list|)
member_init_list|,
name|m_dirty
argument_list|(
literal|false
argument_list|)
block|{
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|textEdited
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|setDirty
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|restoreDefault
name|void
name|restoreDefault
parameter_list|(
specifier|const
name|QFileDialog
modifier|*
name|d
parameter_list|)
block|{
name|setText
argument_list|(
name|d
operator|->
name|labelText
argument_list|(
name|m_label
argument_list|)
argument_list|)
expr_stmt|;
name|m_dirty
operator|=
literal|false
expr_stmt|;
block|}
DECL|function|apply
name|void
name|apply
parameter_list|(
name|QFileDialog
modifier|*
name|d
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|m_dirty
condition|)
name|d
operator|->
name|setLabelText
argument_list|(
name|m_label
argument_list|,
name|text
argument_list|()
argument_list|)
expr_stmt|;
block|}
private|private
name|slots
private|:
DECL|function|setDirty
name|void
name|setDirty
parameter_list|()
block|{
name|m_dirty
operator|=
literal|true
expr_stmt|;
block|}
private|private:
DECL|member|m_label
specifier|const
name|QFileDialog
operator|::
name|DialogLabel
name|m_label
decl_stmt|;
DECL|member|m_dirty
name|bool
name|m_dirty
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|FileDialogPanel
name|FileDialogPanel
operator|::
name|FileDialogPanel
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|m_showDirsOnly
argument_list|(
operator|new
name|QCheckBox
argument_list|(
name|tr
argument_list|(
literal|"Show dirs only"
argument_list|)
argument_list|)
argument_list|)
member_init_list|,
name|m_readOnly
argument_list|(
operator|new
name|QCheckBox
argument_list|(
name|tr
argument_list|(
literal|"Read only"
argument_list|)
argument_list|)
argument_list|)
member_init_list|,
name|m_confirmOverWrite
argument_list|(
operator|new
name|QCheckBox
argument_list|(
name|tr
argument_list|(
literal|"Confirm overwrite"
argument_list|)
argument_list|)
argument_list|)
member_init_list|,
name|m_nameFilterDetailsVisible
argument_list|(
operator|new
name|QCheckBox
argument_list|(
name|tr
argument_list|(
literal|"Name filter details visible"
argument_list|)
argument_list|)
argument_list|)
member_init_list|,
name|m_resolveSymLinks
argument_list|(
operator|new
name|QCheckBox
argument_list|(
name|tr
argument_list|(
literal|"Resolve symlinks"
argument_list|)
argument_list|)
argument_list|)
member_init_list|,
name|m_native
argument_list|(
operator|new
name|QCheckBox
argument_list|(
name|tr
argument_list|(
literal|"Use native dialog"
argument_list|)
argument_list|)
argument_list|)
member_init_list|,
name|m_customDirIcons
argument_list|(
operator|new
name|QCheckBox
argument_list|(
name|tr
argument_list|(
literal|"Don't use custom directory icons"
argument_list|)
argument_list|)
argument_list|)
member_init_list|,
name|m_acceptMode
argument_list|(
name|createCombo
argument_list|(
name|this
argument_list|,
name|acceptModeComboData
argument_list|,
sizeof|sizeof
argument_list|(
name|acceptModeComboData
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|FlagData
argument_list|)
argument_list|)
argument_list|)
member_init_list|,
name|m_fileMode
argument_list|(
name|createCombo
argument_list|(
name|this
argument_list|,
name|fileModeComboData
argument_list|,
sizeof|sizeof
argument_list|(
name|fileModeComboData
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|FlagData
argument_list|)
argument_list|)
argument_list|)
member_init_list|,
name|m_viewMode
argument_list|(
name|createCombo
argument_list|(
name|this
argument_list|,
name|viewModeComboData
argument_list|,
sizeof|sizeof
argument_list|(
name|viewModeComboData
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|FlagData
argument_list|)
argument_list|)
argument_list|)
member_init_list|,
name|m_allowedSchemes
argument_list|(
operator|new
name|QLineEdit
argument_list|(
name|this
argument_list|)
argument_list|)
member_init_list|,
name|m_defaultSuffix
argument_list|(
operator|new
name|QLineEdit
argument_list|(
name|this
argument_list|)
argument_list|)
member_init_list|,
name|m_directory
argument_list|(
operator|new
name|QLineEdit
argument_list|(
name|this
argument_list|)
argument_list|)
member_init_list|,
name|m_selectedFileName
argument_list|(
operator|new
name|QLineEdit
argument_list|(
name|this
argument_list|)
argument_list|)
member_init_list|,
name|m_useMimeTypeFilters
argument_list|(
operator|new
name|QCheckBox
argument_list|(
name|this
argument_list|)
argument_list|)
member_init_list|,
name|m_nameFilters
argument_list|(
operator|new
name|QPlainTextEdit
argument_list|)
member_init_list|,
name|m_selectedNameFilter
argument_list|(
operator|new
name|QLineEdit
argument_list|(
name|this
argument_list|)
argument_list|)
member_init_list|,
name|m_deleteNonModalDialogButton
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_deleteModalDialogButton
argument_list|(
literal|0
argument_list|)
block|{
comment|// Options
name|QGroupBox
modifier|*
name|optionsGroupBox
init|=
operator|new
name|QGroupBox
argument_list|(
name|tr
argument_list|(
literal|"Options"
argument_list|)
argument_list|)
decl_stmt|;
name|QFormLayout
modifier|*
name|optionsLayout
init|=
operator|new
name|QFormLayout
argument_list|(
name|optionsGroupBox
argument_list|)
decl_stmt|;
name|optionsLayout
operator|->
name|addRow
argument_list|(
name|tr
argument_list|(
literal|"AcceptMode:"
argument_list|)
argument_list|,
name|m_acceptMode
argument_list|)
expr_stmt|;
name|optionsLayout
operator|->
name|addRow
argument_list|(
name|tr
argument_list|(
literal|"FileMode:"
argument_list|)
argument_list|,
name|m_fileMode
argument_list|)
expr_stmt|;
name|optionsLayout
operator|->
name|addRow
argument_list|(
name|tr
argument_list|(
literal|"ViewMode:"
argument_list|)
argument_list|,
name|m_viewMode
argument_list|)
expr_stmt|;
name|optionsLayout
operator|->
name|addRow
argument_list|(
name|tr
argument_list|(
literal|"Allowed Schemes:"
argument_list|)
argument_list|,
name|m_allowedSchemes
argument_list|)
expr_stmt|;
name|optionsLayout
operator|->
name|addRow
argument_list|(
name|m_showDirsOnly
argument_list|)
expr_stmt|;
name|optionsLayout
operator|->
name|addRow
argument_list|(
name|m_native
argument_list|)
expr_stmt|;
name|optionsLayout
operator|->
name|addRow
argument_list|(
name|m_confirmOverWrite
argument_list|)
expr_stmt|;
name|optionsLayout
operator|->
name|addRow
argument_list|(
name|m_nameFilterDetailsVisible
argument_list|)
expr_stmt|;
name|optionsLayout
operator|->
name|addRow
argument_list|(
name|m_resolveSymLinks
argument_list|)
expr_stmt|;
name|optionsLayout
operator|->
name|addRow
argument_list|(
name|m_readOnly
argument_list|)
expr_stmt|;
name|optionsLayout
operator|->
name|addRow
argument_list|(
name|m_customDirIcons
argument_list|)
expr_stmt|;
comment|// Files
name|QGroupBox
modifier|*
name|filesGroupBox
init|=
operator|new
name|QGroupBox
argument_list|(
name|tr
argument_list|(
literal|"Files / Filters"
argument_list|)
argument_list|)
decl_stmt|;
name|filesLayout
operator|=
operator|new
name|QFormLayout
argument_list|(
name|filesGroupBox
argument_list|)
expr_stmt|;
name|filesLayout
operator|->
name|addRow
argument_list|(
name|tr
argument_list|(
literal|"Default Suffix:"
argument_list|)
argument_list|,
name|m_defaultSuffix
argument_list|)
expr_stmt|;
name|filesLayout
operator|->
name|addRow
argument_list|(
name|tr
argument_list|(
literal|"Directory:"
argument_list|)
argument_list|,
name|m_directory
argument_list|)
expr_stmt|;
name|filesLayout
operator|->
name|addRow
argument_list|(
name|tr
argument_list|(
literal|"Selected file:"
argument_list|)
argument_list|,
name|m_selectedFileName
argument_list|)
expr_stmt|;
name|filesLayout
operator|->
name|addRow
argument_list|(
name|tr
argument_list|(
literal|"Use mime type filters:"
argument_list|)
argument_list|,
name|m_useMimeTypeFilters
argument_list|)
expr_stmt|;
name|m_nameFilters
operator|->
name|setMaximumHeight
argument_list|(
literal|80
argument_list|)
expr_stmt|;
name|filesLayout
operator|->
name|addRow
argument_list|(
name|tr
argument_list|(
literal|"Name filters:"
argument_list|)
argument_list|,
name|m_nameFilters
argument_list|)
expr_stmt|;
name|filesLayout
operator|->
name|addRow
argument_list|(
name|tr
argument_list|(
literal|"Selected name filter:"
argument_list|)
argument_list|,
name|m_selectedNameFilter
argument_list|)
expr_stmt|;
comment|// Optional labels
name|QGroupBox
modifier|*
name|labelsGroupBox
init|=
operator|new
name|QGroupBox
argument_list|(
name|tr
argument_list|(
literal|"Labels"
argument_list|)
argument_list|)
decl_stmt|;
name|QFormLayout
modifier|*
name|labelsLayout
init|=
operator|new
name|QFormLayout
argument_list|(
name|labelsGroupBox
argument_list|)
decl_stmt|;
name|m_labelLineEdits
operator|.
name|push_back
argument_list|(
operator|new
name|LabelLineEdit
argument_list|(
name|QFileDialog
operator|::
name|LookIn
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|labelsLayout
operator|->
name|addRow
argument_list|(
name|tr
argument_list|(
literal|"Look in label:"
argument_list|)
argument_list|,
name|m_labelLineEdits
operator|.
name|back
argument_list|()
argument_list|)
expr_stmt|;
name|m_labelLineEdits
operator|.
name|push_back
argument_list|(
operator|new
name|LabelLineEdit
argument_list|(
name|QFileDialog
operator|::
name|FileName
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|labelsLayout
operator|->
name|addRow
argument_list|(
name|tr
argument_list|(
literal|"File name label:"
argument_list|)
argument_list|,
name|m_labelLineEdits
operator|.
name|back
argument_list|()
argument_list|)
expr_stmt|;
name|m_labelLineEdits
operator|.
name|push_back
argument_list|(
operator|new
name|LabelLineEdit
argument_list|(
name|QFileDialog
operator|::
name|FileType
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|labelsLayout
operator|->
name|addRow
argument_list|(
name|tr
argument_list|(
literal|"File type label:"
argument_list|)
argument_list|,
name|m_labelLineEdits
operator|.
name|back
argument_list|()
argument_list|)
expr_stmt|;
name|m_labelLineEdits
operator|.
name|push_back
argument_list|(
operator|new
name|LabelLineEdit
argument_list|(
name|QFileDialog
operator|::
name|Accept
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|labelsLayout
operator|->
name|addRow
argument_list|(
name|tr
argument_list|(
literal|"Accept label:"
argument_list|)
argument_list|,
name|m_labelLineEdits
operator|.
name|back
argument_list|()
argument_list|)
expr_stmt|;
name|m_labelLineEdits
operator|.
name|push_back
argument_list|(
operator|new
name|LabelLineEdit
argument_list|(
name|QFileDialog
operator|::
name|Reject
argument_list|,
name|this
argument_list|)
argument_list|)
expr_stmt|;
name|labelsLayout
operator|->
name|addRow
argument_list|(
name|tr
argument_list|(
literal|"Reject label:"
argument_list|)
argument_list|,
name|m_labelLineEdits
operator|.
name|back
argument_list|()
argument_list|)
expr_stmt|;
comment|// Buttons
name|QGroupBox
modifier|*
name|buttonsGroupBox
init|=
operator|new
name|QGroupBox
argument_list|(
name|tr
argument_list|(
literal|"Show"
argument_list|)
argument_list|)
decl_stmt|;
name|QGridLayout
modifier|*
name|buttonLayout
init|=
operator|new
name|QGridLayout
argument_list|(
name|buttonsGroupBox
argument_list|)
decl_stmt|;
name|int
name|row
init|=
literal|0
decl_stmt|;
name|int
name|column
init|=
literal|0
decl_stmt|;
name|addButton
argument_list|(
name|tr
argument_list|(
literal|"Exec modal"
argument_list|)
argument_list|,
name|buttonLayout
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|execModal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addButton
argument_list|(
name|tr
argument_list|(
literal|"Show modal"
argument_list|)
argument_list|,
name|buttonLayout
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|showModal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|m_deleteModalDialogButton
operator|=
name|addButton
argument_list|(
name|tr
argument_list|(
literal|"Delete modal"
argument_list|)
argument_list|,
name|buttonLayout
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|deleteModalDialog
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addButton
argument_list|(
name|tr
argument_list|(
literal|"Show non-modal"
argument_list|)
argument_list|,
name|buttonLayout
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|showNonModal
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|m_deleteNonModalDialogButton
operator|=
name|addButton
argument_list|(
name|tr
argument_list|(
literal|"Delete non-modal"
argument_list|)
argument_list|,
name|buttonLayout
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|deleteNonModalDialog
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|row
operator|=
literal|0
expr_stmt|;
name|column
operator|++
expr_stmt|;
name|addButton
argument_list|(
name|tr
argument_list|(
literal|"getOpenFileName"
argument_list|)
argument_list|,
name|buttonLayout
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|getOpenFileName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addButton
argument_list|(
name|tr
argument_list|(
literal|"getOpenFileUrl"
argument_list|)
argument_list|,
name|buttonLayout
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|getOpenFileUrl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addButton
argument_list|(
name|tr
argument_list|(
literal|"getOpenFileNames"
argument_list|)
argument_list|,
name|buttonLayout
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|getOpenFileNames
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addButton
argument_list|(
name|tr
argument_list|(
literal|"getOpenFileUrls"
argument_list|)
argument_list|,
name|buttonLayout
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|getOpenFileUrls
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addButton
argument_list|(
name|tr
argument_list|(
literal|"getSaveFileName"
argument_list|)
argument_list|,
name|buttonLayout
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|getSaveFileName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addButton
argument_list|(
name|tr
argument_list|(
literal|"getSaveFileUrl"
argument_list|)
argument_list|,
name|buttonLayout
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|getSaveFileUrl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addButton
argument_list|(
name|tr
argument_list|(
literal|"getExistingDirectory"
argument_list|)
argument_list|,
name|buttonLayout
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|getExistingDirectory
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addButton
argument_list|(
name|tr
argument_list|(
literal|"getExistingDirectoryUrl"
argument_list|)
argument_list|,
name|buttonLayout
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|getExistingDirectoryUrl
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|addButton
argument_list|(
name|tr
argument_list|(
literal|"Restore defaults"
argument_list|)
argument_list|,
name|buttonLayout
argument_list|,
name|row
argument_list|,
name|column
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|restoreDefaults
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Main layout
name|QGridLayout
modifier|*
name|gridLayout
init|=
operator|new
name|QGridLayout
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|gridLayout
operator|->
name|addWidget
argument_list|(
name|optionsGroupBox
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|gridLayout
operator|->
name|addWidget
argument_list|(
name|filesGroupBox
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|gridLayout
operator|->
name|addWidget
argument_list|(
name|labelsGroupBox
argument_list|,
literal|1
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|gridLayout
operator|->
name|addWidget
argument_list|(
name|buttonsGroupBox
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_useMimeTypeFilters
argument_list|,
name|SIGNAL
argument_list|(
name|toggled
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|useMimeTypeFilters
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|enableDeleteModalDialogButton
argument_list|()
expr_stmt|;
name|enableDeleteNonModalDialogButton
argument_list|()
expr_stmt|;
name|restoreDefaults
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|execModal
name|void
name|FileDialogPanel
operator|::
name|execModal
parameter_list|()
block|{
name|QFileDialog
name|dialog
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|applySettings
argument_list|(
operator|&
name|dialog
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|dialog
argument_list|,
name|SIGNAL
argument_list|(
name|accepted
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|accepted
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setWindowTitle
argument_list|(
name|tr
argument_list|(
literal|"Modal File Dialog Qt %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|QLatin1String
argument_list|(
name|QT_VERSION_STR
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|exec
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|showModal
name|void
name|FileDialogPanel
operator|::
name|showModal
parameter_list|()
block|{
if|if
condition|(
name|m_modalDialog
operator|.
name|isNull
argument_list|()
condition|)
block|{
specifier|static
name|int
name|n
init|=
literal|0
decl_stmt|;
name|m_modalDialog
operator|=
operator|new
name|QFileDialog
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|m_modalDialog
operator|->
name|setModal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_modalDialog
operator|.
name|data
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|accepted
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|accepted
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|m_modalDialog
operator|->
name|setWindowTitle
argument_list|(
name|tr
argument_list|(
literal|"Modal File Dialog #%1 Qt %2"
argument_list|)
operator|.
name|arg
argument_list|(
operator|++
name|n
argument_list|)
operator|.
name|arg
argument_list|(
name|QLatin1String
argument_list|(
name|QT_VERSION_STR
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|enableDeleteModalDialogButton
argument_list|()
expr_stmt|;
block|}
name|applySettings
argument_list|(
name|m_modalDialog
argument_list|)
expr_stmt|;
name|m_modalDialog
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|showNonModal
name|void
name|FileDialogPanel
operator|::
name|showNonModal
parameter_list|()
block|{
if|if
condition|(
name|m_nonModalDialog
operator|.
name|isNull
argument_list|()
condition|)
block|{
specifier|static
name|int
name|n
init|=
literal|0
decl_stmt|;
name|m_nonModalDialog
operator|=
operator|new
name|QFileDialog
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_nonModalDialog
operator|.
name|data
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|accepted
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|accepted
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|m_nonModalDialog
operator|->
name|setWindowTitle
argument_list|(
name|tr
argument_list|(
literal|"Non-Modal File Dialog #%1 Qt %2"
argument_list|)
operator|.
name|arg
argument_list|(
operator|++
name|n
argument_list|)
operator|.
name|arg
argument_list|(
name|QLatin1String
argument_list|(
name|QT_VERSION_STR
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|enableDeleteNonModalDialogButton
argument_list|()
expr_stmt|;
block|}
name|applySettings
argument_list|(
name|m_nonModalDialog
argument_list|)
expr_stmt|;
name|m_nonModalDialog
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|deleteNonModalDialog
name|void
name|FileDialogPanel
operator|::
name|deleteNonModalDialog
parameter_list|()
block|{
if|if
condition|(
operator|!
name|m_nonModalDialog
operator|.
name|isNull
argument_list|()
condition|)
operator|delete
name|m_nonModalDialog
expr_stmt|;
name|enableDeleteNonModalDialogButton
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|deleteModalDialog
name|void
name|FileDialogPanel
operator|::
name|deleteModalDialog
parameter_list|()
block|{
if|if
condition|(
operator|!
name|m_modalDialog
operator|.
name|isNull
argument_list|()
condition|)
operator|delete
name|m_modalDialog
expr_stmt|;
name|enableDeleteModalDialogButton
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|enableDeleteNonModalDialogButton
name|void
name|FileDialogPanel
operator|::
name|enableDeleteNonModalDialogButton
parameter_list|()
block|{
name|m_deleteNonModalDialogButton
operator|->
name|setEnabled
argument_list|(
operator|!
name|m_nonModalDialog
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|enableDeleteModalDialogButton
name|void
name|FileDialogPanel
operator|::
name|enableDeleteModalDialogButton
parameter_list|()
block|{
name|m_deleteModalDialogButton
operator|->
name|setEnabled
argument_list|(
operator|!
name|m_modalDialog
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|filterString
name|QString
name|FileDialogPanel
operator|::
name|filterString
parameter_list|()
specifier|const
block|{
return|return
name|m_nameFilters
operator|->
name|toPlainText
argument_list|()
operator|.
name|trimmed
argument_list|()
operator|.
name|replace
argument_list|(
name|QLatin1String
argument_list|(
literal|"\n"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|";;"
argument_list|)
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|currentDirectoryUrl
name|QUrl
name|FileDialogPanel
operator|::
name|currentDirectoryUrl
parameter_list|()
specifier|const
block|{
return|return
name|QUrl
operator|::
name|fromUserInput
argument_list|(
name|m_directory
operator|->
name|text
argument_list|()
operator|.
name|trimmed
argument_list|()
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|options
name|QFileDialog
operator|::
name|Options
name|FileDialogPanel
operator|::
name|options
parameter_list|()
specifier|const
block|{
name|QFileDialog
operator|::
name|Options
name|result
decl_stmt|;
if|if
condition|(
name|m_showDirsOnly
operator|->
name|isChecked
argument_list|()
condition|)
name|result
operator||=
name|QFileDialog
operator|::
name|ShowDirsOnly
expr_stmt|;
if|if
condition|(
operator|!
name|m_nameFilterDetailsVisible
operator|->
name|isChecked
argument_list|()
condition|)
name|result
operator||=
name|QFileDialog
operator|::
name|HideNameFilterDetails
expr_stmt|;
if|if
condition|(
operator|!
name|m_resolveSymLinks
operator|->
name|isChecked
argument_list|()
condition|)
name|result
operator||=
name|QFileDialog
operator|::
name|DontResolveSymlinks
expr_stmt|;
if|if
condition|(
name|m_readOnly
operator|->
name|isChecked
argument_list|()
condition|)
name|result
operator||=
name|QFileDialog
operator|::
name|ReadOnly
expr_stmt|;
if|if
condition|(
operator|!
name|m_confirmOverWrite
operator|->
name|isChecked
argument_list|()
condition|)
name|result
operator||=
name|QFileDialog
operator|::
name|DontConfirmOverwrite
expr_stmt|;
if|if
condition|(
operator|!
name|m_native
operator|->
name|isChecked
argument_list|()
condition|)
name|result
operator||=
name|QFileDialog
operator|::
name|DontUseNativeDialog
expr_stmt|;
if|if
condition|(
operator|!
name|m_customDirIcons
operator|->
name|isChecked
argument_list|()
condition|)
name|result
operator||=
name|QFileDialog
operator|::
name|DontUseCustomDirectoryIcons
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|allowedSchemes
name|QStringList
name|FileDialogPanel
operator|::
name|allowedSchemes
parameter_list|()
specifier|const
block|{
return|return
name|m_allowedSchemes
operator|->
name|text
argument_list|()
operator|.
name|simplified
argument_list|()
operator|.
name|split
argument_list|(
literal|' '
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|getOpenFileNames
name|void
name|FileDialogPanel
operator|::
name|getOpenFileNames
parameter_list|()
block|{
name|QString
name|selectedFilter
init|=
name|m_selectedNameFilter
operator|->
name|text
argument_list|()
operator|.
name|trimmed
argument_list|()
decl_stmt|;
specifier|const
name|QStringList
name|files
init|=
name|QFileDialog
operator|::
name|getOpenFileNames
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"getOpenFileNames Qt %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|QLatin1String
argument_list|(
name|QT_VERSION_STR
argument_list|)
argument_list|)
argument_list|,
name|m_directory
operator|->
name|text
argument_list|()
argument_list|,
name|filterString
argument_list|()
argument_list|,
operator|&
name|selectedFilter
argument_list|,
name|options
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|files
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QString
name|result
decl_stmt|;
name|QDebug
argument_list|(
operator|&
name|result
argument_list|)
operator|.
name|nospace
argument_list|()
operator|<<
literal|"Files: "
operator|<<
name|files
operator|<<
literal|"\nName filter: "
operator|<<
name|selectedFilter
expr_stmt|;
name|QMessageBox
operator|::
name|information
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"getOpenFileNames"
argument_list|)
argument_list|,
name|result
argument_list|,
name|QMessageBox
operator|::
name|Ok
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|getOpenFileUrls
name|void
name|FileDialogPanel
operator|::
name|getOpenFileUrls
parameter_list|()
block|{
if|#
directive|if
name|QT_VERSION
operator|>=
literal|0x050000
name|QString
name|selectedFilter
init|=
name|m_selectedNameFilter
operator|->
name|text
argument_list|()
operator|.
name|trimmed
argument_list|()
decl_stmt|;
specifier|const
name|QList
argument_list|<
name|QUrl
argument_list|>
name|files
init|=
name|QFileDialog
operator|::
name|getOpenFileUrls
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"getOpenFileNames Qt %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|QLatin1String
argument_list|(
name|QT_VERSION_STR
argument_list|)
argument_list|)
argument_list|,
name|currentDirectoryUrl
argument_list|()
argument_list|,
name|filterString
argument_list|()
argument_list|,
operator|&
name|selectedFilter
argument_list|,
name|options
argument_list|()
argument_list|,
name|allowedSchemes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|files
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QString
name|result
decl_stmt|;
name|QDebug
argument_list|(
operator|&
name|result
argument_list|)
operator|.
name|nospace
argument_list|()
operator|<<
literal|"Files: "
operator|<<
name|QUrl
operator|::
name|toStringList
argument_list|(
name|files
argument_list|)
operator|<<
literal|"\nName filter: "
operator|<<
name|selectedFilter
expr_stmt|;
name|QMessageBox
operator|::
name|information
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"getOpenFileNames"
argument_list|)
argument_list|,
name|result
argument_list|,
name|QMessageBox
operator|::
name|Ok
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// Qt 5
block|}
end_function
begin_function
DECL|function|getOpenFileName
name|void
name|FileDialogPanel
operator|::
name|getOpenFileName
parameter_list|()
block|{
name|QString
name|selectedFilter
init|=
name|m_selectedNameFilter
operator|->
name|text
argument_list|()
operator|.
name|trimmed
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|file
init|=
name|QFileDialog
operator|::
name|getOpenFileName
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"getOpenFileName Qt %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|QLatin1String
argument_list|(
name|QT_VERSION_STR
argument_list|)
argument_list|)
argument_list|,
name|m_directory
operator|->
name|text
argument_list|()
argument_list|,
name|filterString
argument_list|()
argument_list|,
operator|&
name|selectedFilter
argument_list|,
name|options
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QString
name|result
decl_stmt|;
name|QDebug
argument_list|(
operator|&
name|result
argument_list|)
operator|.
name|nospace
argument_list|()
operator|<<
literal|"File: "
operator|<<
name|file
operator|<<
literal|"\nName filter: "
operator|<<
name|selectedFilter
expr_stmt|;
name|QMessageBox
operator|::
name|information
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"getOpenFileName"
argument_list|)
argument_list|,
name|result
argument_list|,
name|QMessageBox
operator|::
name|Ok
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|getOpenFileUrl
name|void
name|FileDialogPanel
operator|::
name|getOpenFileUrl
parameter_list|()
block|{
if|#
directive|if
name|QT_VERSION
operator|>=
literal|0x050000
name|QString
name|selectedFilter
init|=
name|m_selectedNameFilter
operator|->
name|text
argument_list|()
operator|.
name|trimmed
argument_list|()
decl_stmt|;
specifier|const
name|QUrl
name|file
init|=
name|QFileDialog
operator|::
name|getOpenFileUrl
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"getOpenFileUrl Qt %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|QLatin1String
argument_list|(
name|QT_VERSION_STR
argument_list|)
argument_list|)
argument_list|,
name|currentDirectoryUrl
argument_list|()
argument_list|,
name|filterString
argument_list|()
argument_list|,
operator|&
name|selectedFilter
argument_list|,
name|options
argument_list|()
argument_list|,
name|allowedSchemes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QString
name|result
decl_stmt|;
name|QDebug
argument_list|(
operator|&
name|result
argument_list|)
operator|.
name|nospace
argument_list|()
operator|<<
literal|"File: "
operator|<<
name|file
operator|.
name|toString
argument_list|()
operator|<<
literal|"\nName filter: "
operator|<<
name|selectedFilter
expr_stmt|;
name|QMessageBox
operator|::
name|information
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"getOpenFileName"
argument_list|)
argument_list|,
name|result
argument_list|,
name|QMessageBox
operator|::
name|Ok
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// Qt 5
block|}
end_function
begin_function
DECL|function|getSaveFileName
name|void
name|FileDialogPanel
operator|::
name|getSaveFileName
parameter_list|()
block|{
name|QString
name|selectedFilter
init|=
name|m_selectedNameFilter
operator|->
name|text
argument_list|()
operator|.
name|trimmed
argument_list|()
decl_stmt|;
specifier|const
name|QString
name|file
init|=
name|QFileDialog
operator|::
name|getSaveFileName
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"getSaveFileName Qt %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|QLatin1String
argument_list|(
name|QT_VERSION_STR
argument_list|)
argument_list|)
argument_list|,
name|m_directory
operator|->
name|text
argument_list|()
argument_list|,
name|filterString
argument_list|()
argument_list|,
operator|&
name|selectedFilter
argument_list|,
name|options
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QString
name|result
decl_stmt|;
name|QDebug
argument_list|(
operator|&
name|result
argument_list|)
operator|.
name|nospace
argument_list|()
operator|<<
literal|"File: "
operator|<<
name|file
operator|<<
literal|"\nName filter: "
operator|<<
name|selectedFilter
expr_stmt|;
name|QMessageBox
operator|::
name|information
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"getSaveFileNames"
argument_list|)
argument_list|,
name|result
argument_list|,
name|QMessageBox
operator|::
name|Ok
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|getSaveFileUrl
name|void
name|FileDialogPanel
operator|::
name|getSaveFileUrl
parameter_list|()
block|{
if|#
directive|if
name|QT_VERSION
operator|>=
literal|0x050000
name|QString
name|selectedFilter
init|=
name|m_selectedNameFilter
operator|->
name|text
argument_list|()
operator|.
name|trimmed
argument_list|()
decl_stmt|;
specifier|const
name|QUrl
name|file
init|=
name|QFileDialog
operator|::
name|getSaveFileUrl
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"getSaveFileName Qt %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|QLatin1String
argument_list|(
name|QT_VERSION_STR
argument_list|)
argument_list|)
argument_list|,
name|currentDirectoryUrl
argument_list|()
argument_list|,
name|filterString
argument_list|()
argument_list|,
operator|&
name|selectedFilter
argument_list|,
name|options
argument_list|()
argument_list|,
name|allowedSchemes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|file
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QString
name|result
decl_stmt|;
name|QDebug
argument_list|(
operator|&
name|result
argument_list|)
operator|.
name|nospace
argument_list|()
operator|<<
literal|"File: "
operator|<<
name|file
operator|.
name|toString
argument_list|()
operator|<<
literal|"\nName filter: "
operator|<<
name|selectedFilter
expr_stmt|;
name|QMessageBox
operator|::
name|information
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"getSaveFileNames"
argument_list|)
argument_list|,
name|result
argument_list|,
name|QMessageBox
operator|::
name|Ok
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// Qt 5
block|}
end_function
begin_function
DECL|function|getExistingDirectory
name|void
name|FileDialogPanel
operator|::
name|getExistingDirectory
parameter_list|()
block|{
specifier|const
name|QString
name|dir
init|=
name|QFileDialog
operator|::
name|getExistingDirectory
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"getExistingDirectory Qt %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|QLatin1String
argument_list|(
name|QT_VERSION_STR
argument_list|)
argument_list|)
argument_list|,
name|m_directory
operator|->
name|text
argument_list|()
argument_list|,
name|options
argument_list|()
operator||
name|QFileDialog
operator|::
name|ShowDirsOnly
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|isEmpty
argument_list|()
condition|)
name|QMessageBox
operator|::
name|information
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"getExistingDirectory"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"Directory: "
argument_list|)
operator|+
name|dir
argument_list|,
name|QMessageBox
operator|::
name|Ok
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|getExistingDirectoryUrl
name|void
name|FileDialogPanel
operator|::
name|getExistingDirectoryUrl
parameter_list|()
block|{
if|#
directive|if
name|QT_VERSION
operator|>=
literal|0x050000
specifier|const
name|QUrl
name|dir
init|=
name|QFileDialog
operator|::
name|getExistingDirectoryUrl
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"getExistingDirectory Qt %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|QLatin1String
argument_list|(
name|QT_VERSION_STR
argument_list|)
argument_list|)
argument_list|,
name|currentDirectoryUrl
argument_list|()
argument_list|,
name|options
argument_list|()
operator||
name|QFileDialog
operator|::
name|ShowDirsOnly
argument_list|,
name|allowedSchemes
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|dir
operator|.
name|isEmpty
argument_list|()
condition|)
name|QMessageBox
operator|::
name|information
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"getExistingDirectory"
argument_list|)
argument_list|,
name|QLatin1String
argument_list|(
literal|"Directory: "
argument_list|)
operator|+
name|dir
operator|.
name|toString
argument_list|()
argument_list|,
name|QMessageBox
operator|::
name|Ok
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Qt 5
block|}
end_function
begin_function
DECL|function|restoreDefaults
name|void
name|FileDialogPanel
operator|::
name|restoreDefaults
parameter_list|()
block|{
name|QFileDialog
name|d
decl_stmt|;
name|setComboBoxValue
argument_list|(
name|m_acceptMode
argument_list|,
name|d
operator|.
name|acceptMode
argument_list|()
argument_list|)
expr_stmt|;
name|setComboBoxValue
argument_list|(
name|m_fileMode
argument_list|,
name|d
operator|.
name|fileMode
argument_list|()
argument_list|)
expr_stmt|;
name|setComboBoxValue
argument_list|(
name|m_viewMode
argument_list|,
name|d
operator|.
name|viewMode
argument_list|()
argument_list|)
expr_stmt|;
name|m_showDirsOnly
operator|->
name|setChecked
argument_list|(
name|d
operator|.
name|testOption
argument_list|(
name|QFileDialog
operator|::
name|ShowDirsOnly
argument_list|)
argument_list|)
expr_stmt|;
name|m_allowedSchemes
operator|->
name|setText
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|m_confirmOverWrite
operator|->
name|setChecked
argument_list|(
name|d
operator|.
name|confirmOverwrite
argument_list|()
argument_list|)
expr_stmt|;
name|m_nameFilterDetailsVisible
operator|->
name|setChecked
argument_list|(
name|d
operator|.
name|isNameFilterDetailsVisible
argument_list|()
argument_list|)
expr_stmt|;
name|m_resolveSymLinks
operator|->
name|setChecked
argument_list|(
name|d
operator|.
name|resolveSymlinks
argument_list|()
argument_list|)
expr_stmt|;
name|m_readOnly
operator|->
name|setChecked
argument_list|(
name|d
operator|.
name|isReadOnly
argument_list|()
argument_list|)
expr_stmt|;
name|m_native
operator|->
name|setChecked
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|m_customDirIcons
operator|->
name|setChecked
argument_list|(
name|d
operator|.
name|testOption
argument_list|(
name|QFileDialog
operator|::
name|DontUseCustomDirectoryIcons
argument_list|)
argument_list|)
expr_stmt|;
name|m_directory
operator|->
name|setText
argument_list|(
name|QDir
operator|::
name|homePath
argument_list|()
argument_list|)
expr_stmt|;
name|m_defaultSuffix
operator|->
name|setText
argument_list|(
name|QLatin1String
argument_list|(
literal|"txt"
argument_list|)
argument_list|)
expr_stmt|;
name|m_useMimeTypeFilters
operator|->
name|setChecked
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|useMimeTypeFilters
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|m_selectedFileName
operator|->
name|setText
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|m_selectedNameFilter
operator|->
name|setText
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|LabelLineEdit
modifier|*
name|l
decl|,
name|m_labelLineEdits
control|)
name|l
operator|->
name|restoreDefault
argument_list|(
operator|&
name|d
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|applySettings
name|void
name|FileDialogPanel
operator|::
name|applySettings
parameter_list|(
name|QFileDialog
modifier|*
name|d
parameter_list|)
specifier|const
block|{
name|d
operator|->
name|setAcceptMode
argument_list|(
name|comboBoxValue
argument_list|<
name|QFileDialog
operator|::
name|AcceptMode
argument_list|>
argument_list|(
name|m_acceptMode
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|setViewMode
argument_list|(
name|comboBoxValue
argument_list|<
name|QFileDialog
operator|::
name|ViewMode
argument_list|>
argument_list|(
name|m_viewMode
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|setFileMode
argument_list|(
name|comboBoxValue
argument_list|<
name|QFileDialog
operator|::
name|FileMode
argument_list|>
argument_list|(
name|m_fileMode
argument_list|)
argument_list|)
expr_stmt|;
name|d
operator|->
name|setOptions
argument_list|(
name|options
argument_list|()
argument_list|)
expr_stmt|;
name|d
operator|->
name|setDefaultSuffix
argument_list|(
name|m_defaultSuffix
operator|->
name|text
argument_list|()
operator|.
name|trimmed
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|directory
init|=
name|m_directory
operator|->
name|text
argument_list|()
operator|.
name|trimmed
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|directory
operator|.
name|isEmpty
argument_list|()
condition|)
name|d
operator|->
name|setDirectory
argument_list|(
name|directory
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|file
init|=
name|m_selectedFileName
operator|->
name|text
argument_list|()
operator|.
name|trimmed
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|isEmpty
argument_list|()
condition|)
name|d
operator|->
name|selectFile
argument_list|(
name|file
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|filter
init|=
name|m_selectedNameFilter
operator|->
name|text
argument_list|()
operator|.
name|trimmed
argument_list|()
decl_stmt|;
specifier|const
name|QStringList
name|filters
init|=
name|m_nameFilters
operator|->
name|toPlainText
argument_list|()
operator|.
name|trimmed
argument_list|()
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
argument_list|,
name|QString
operator|::
name|SkipEmptyParts
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|m_useMimeTypeFilters
operator|->
name|isChecked
argument_list|()
condition|)
block|{
name|d
operator|->
name|setNameFilters
argument_list|(
name|filters
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|filter
operator|.
name|isEmpty
argument_list|()
condition|)
name|d
operator|->
name|selectNameFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|#
directive|if
name|QT_VERSION
operator|>=
literal|0x050000
name|d
operator|->
name|setMimeTypeFilters
argument_list|(
name|filters
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|filter
operator|.
name|isEmpty
argument_list|()
condition|)
name|d
operator|->
name|selectMimeTypeFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Qt 5
block|}
foreach|foreach
control|(
name|LabelLineEdit
modifier|*
name|l
decl|,
name|m_labelLineEdits
control|)
name|l
operator|->
name|apply
argument_list|(
name|d
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|useMimeTypeFilters
name|void
name|FileDialogPanel
operator|::
name|useMimeTypeFilters
parameter_list|(
name|bool
name|b
parameter_list|)
block|{
name|QWidget
modifier|*
name|textEdit
init|=
name|filesLayout
operator|->
name|labelForField
argument_list|(
name|m_nameFilters
argument_list|)
decl_stmt|;
if|if
condition|(
name|QLabel
modifier|*
name|label
init|=
name|qobject_cast
argument_list|<
name|QLabel
operator|*
argument_list|>
argument_list|(
name|textEdit
argument_list|)
condition|)
name|label
operator|->
name|setText
argument_list|(
name|b
condition|?
name|tr
argument_list|(
literal|"Mime type filters:"
argument_list|)
else|:
name|tr
argument_list|(
literal|"Name filters:"
argument_list|)
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|w
init|=
name|filesLayout
operator|->
name|labelForField
argument_list|(
name|m_selectedNameFilter
argument_list|)
decl_stmt|;
if|if
condition|(
name|QLabel
modifier|*
name|label
init|=
name|qobject_cast
argument_list|<
name|QLabel
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
condition|)
name|label
operator|->
name|setText
argument_list|(
name|b
condition|?
name|tr
argument_list|(
literal|"Selected mime type filter:"
argument_list|)
else|:
name|tr
argument_list|(
literal|"Selected name filter:"
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|b
condition|)
name|m_nameFilters
operator|->
name|setPlainText
argument_list|(
name|QLatin1String
argument_list|(
literal|"image/jpeg\nimage/png\ntext/plain\napplication/octet-stream"
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|m_nameFilters
operator|->
name|setPlainText
argument_list|(
name|QLatin1String
argument_list|(
literal|"Any files (*)\nImage files (*.png *.xpm *.jpg)\nText files (*.txt)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|accepted
name|void
name|FileDialogPanel
operator|::
name|accepted
parameter_list|()
block|{
specifier|const
name|QFileDialog
modifier|*
name|d
init|=
name|qobject_cast
argument_list|<
specifier|const
name|QFileDialog
operator|*
argument_list|>
argument_list|(
name|sender
argument_list|()
argument_list|)
decl_stmt|;
name|Q_ASSERT
argument_list|(
name|d
argument_list|)
expr_stmt|;
name|m_result
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QDebug
argument_list|(
operator|&
name|m_result
argument_list|)
operator|.
name|nospace
argument_list|()
operator|<<
literal|"Files: "
operator|<<
name|d
operator|->
name|selectedFiles
argument_list|()
operator|<<
literal|"\nDirectory: "
operator|<<
name|d
operator|->
name|directory
argument_list|()
operator|.
name|absolutePath
argument_list|()
operator|<<
literal|"\nName filter: "
operator|<<
name|d
operator|->
name|selectedNameFilter
argument_list|()
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|0
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|showAcceptedResult
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Avoid problems with the closing (modal) dialog as parent.
block|}
end_function
begin_function
DECL|function|showAcceptedResult
name|void
name|FileDialogPanel
operator|::
name|showAcceptedResult
parameter_list|()
block|{
name|QMessageBox
operator|::
name|information
argument_list|(
name|this
argument_list|,
name|tr
argument_list|(
literal|"File Dialog Accepted"
argument_list|)
argument_list|,
name|m_result
argument_list|,
name|QMessageBox
operator|::
name|Ok
argument_list|)
expr_stmt|;
block|}
end_function
begin_include
include|#
directive|include
file|"filedialogpanel.moc"
end_include
end_unit
