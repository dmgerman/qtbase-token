begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 ThorbjÃ¸rn Lund Martsum - tmartsum[at]gmail.com ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"messageboxpanel.h"
end_include
begin_include
include|#
directive|include
file|<QGroupBox>
end_include
begin_include
include|#
directive|include
file|<QPushButton>
end_include
begin_include
include|#
directive|include
file|<QVBoxLayout>
end_include
begin_include
include|#
directive|include
file|<QHBoxLayout>
end_include
begin_include
include|#
directive|include
file|<QMessageBox>
end_include
begin_include
include|#
directive|include
file|<QPushButton>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<QComboBox>
end_include
begin_include
include|#
directive|include
file|<QLineEdit>
end_include
begin_include
include|#
directive|include
file|<QLabel>
end_include
begin_include
include|#
directive|include
file|<QCheckBox>
end_include
begin_constructor
DECL|function|MessageBoxPanel
name|MessageBoxPanel
operator|::
name|MessageBoxPanel
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|m_iconComboBox
argument_list|(
operator|new
name|QComboBox
argument_list|)
member_init_list|,
name|m_textInMsgBox
argument_list|(
operator|new
name|QLineEdit
argument_list|)
member_init_list|,
name|m_informativeText
argument_list|(
operator|new
name|QLineEdit
argument_list|)
member_init_list|,
name|m_buttonsMask
argument_list|(
operator|new
name|QLineEdit
argument_list|)
member_init_list|,
name|m_btnExec
argument_list|(
operator|new
name|QPushButton
argument_list|)
member_init_list|,
name|m_btnShowApply
argument_list|(
operator|new
name|QPushButton
argument_list|)
member_init_list|,
name|m_resultLabel
argument_list|(
operator|new
name|QLabel
argument_list|)
member_init_list|,
name|m_chkReallocMsgBox
argument_list|(
operator|new
name|QCheckBox
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Reallocate Message Box"
argument_list|)
argument_list|)
argument_list|)
member_init_list|,
name|m_msgbox
argument_list|(
operator|new
name|QMessageBox
argument_list|)
block|{
comment|// --- Options ---
name|QGroupBox
modifier|*
name|optionsGroupBox
init|=
operator|new
name|QGroupBox
argument_list|(
name|tr
argument_list|(
literal|"Options"
argument_list|)
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|QVBoxLayout
modifier|*
name|optionsLayout
init|=
operator|new
name|QVBoxLayout
argument_list|(
name|optionsGroupBox
argument_list|)
decl_stmt|;
comment|// text
name|optionsLayout
operator|->
name|addWidget
argument_list|(
operator|new
name|QLabel
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Message box text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|m_textInMsgBox
operator|->
name|setText
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"This is a simple test with a text that is not long"
argument_list|)
argument_list|)
expr_stmt|;
name|optionsLayout
operator|->
name|addWidget
argument_list|(
name|m_textInMsgBox
argument_list|)
expr_stmt|;
comment|// informative text
name|optionsLayout
operator|->
name|addWidget
argument_list|(
operator|new
name|QLabel
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Informative Text"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|optionsLayout
operator|->
name|addWidget
argument_list|(
name|m_informativeText
argument_list|)
expr_stmt|;
comment|// icon
name|QStringList
name|items
decl_stmt|;
name|items
operator|<<
literal|"NoIcon"
operator|<<
literal|"Information"
operator|<<
literal|"Warning"
operator|<<
literal|"Critical"
operator|<<
literal|"Question"
expr_stmt|;
name|m_iconComboBox
operator|->
name|addItems
argument_list|(
name|items
argument_list|)
expr_stmt|;
name|optionsLayout
operator|->
name|addWidget
argument_list|(
operator|new
name|QLabel
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Message box icon"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|optionsLayout
operator|->
name|addWidget
argument_list|(
name|m_iconComboBox
argument_list|)
expr_stmt|;
comment|// buttons mask
name|optionsLayout
operator|->
name|addWidget
argument_list|(
operator|new
name|QLabel
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Message box button mask (in hex)"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|m_validator
operator|=
operator|new
name|QRegExpValidator
argument_list|(
name|QRegExp
argument_list|(
literal|"0[xX]?[0-9a-fA-F]+"
argument_list|)
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|m_buttonsMask
operator|->
name|setMaxLength
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|m_buttonsMask
operator|->
name|setValidator
argument_list|(
name|m_validator
argument_list|)
expr_stmt|;
name|m_buttonsMask
operator|->
name|setText
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"0x00300400"
argument_list|)
argument_list|)
expr_stmt|;
name|optionsLayout
operator|->
name|addWidget
argument_list|(
name|m_buttonsMask
argument_list|)
expr_stmt|;
comment|// reallocate
name|optionsLayout
operator|->
name|addWidget
argument_list|(
name|m_chkReallocMsgBox
argument_list|)
expr_stmt|;
name|optionsLayout
operator|->
name|addItem
argument_list|(
operator|new
name|QSpacerItem
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
name|QSizePolicy
operator|::
name|Expanding
argument_list|,
name|QSizePolicy
operator|::
name|Expanding
argument_list|)
argument_list|)
expr_stmt|;
comment|// Exec/Show
name|QGroupBox
modifier|*
name|execGroupBox
init|=
operator|new
name|QGroupBox
argument_list|(
name|tr
argument_list|(
literal|"Exec"
argument_list|)
argument_list|)
decl_stmt|;
name|QVBoxLayout
modifier|*
name|execLayout
init|=
operator|new
name|QVBoxLayout
argument_list|(
name|execGroupBox
argument_list|)
decl_stmt|;
name|m_btnExec
operator|->
name|setText
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Exec message box"
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_btnExec
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|doExec
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|execLayout
operator|->
name|addWidget
argument_list|(
name|m_btnExec
argument_list|)
expr_stmt|;
name|m_btnShowApply
operator|->
name|setText
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Show / apply"
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_btnShowApply
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|doShowApply
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|execLayout
operator|->
name|addWidget
argument_list|(
name|m_btnShowApply
argument_list|)
expr_stmt|;
comment|// result label
name|execLayout
operator|->
name|addWidget
argument_list|(
name|m_resultLabel
argument_list|)
expr_stmt|;
name|execLayout
operator|->
name|addItem
argument_list|(
operator|new
name|QSpacerItem
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
name|QSizePolicy
operator|::
name|Expanding
argument_list|,
name|QSizePolicy
operator|::
name|Expanding
argument_list|)
argument_list|)
expr_stmt|;
name|execGroupBox
operator|->
name|setLayout
argument_list|(
name|execLayout
argument_list|)
expr_stmt|;
comment|// Main layout
name|QHBoxLayout
modifier|*
name|mainLayout
init|=
operator|new
name|QHBoxLayout
argument_list|()
decl_stmt|;
name|mainLayout
operator|->
name|addWidget
argument_list|(
name|optionsGroupBox
argument_list|)
expr_stmt|;
name|mainLayout
operator|->
name|addWidget
argument_list|(
name|execGroupBox
argument_list|)
expr_stmt|;
name|setLayout
argument_list|(
name|mainLayout
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|setupMessageBox
name|void
name|MessageBoxPanel
operator|::
name|setupMessageBox
parameter_list|(
name|QMessageBox
modifier|&
name|box
parameter_list|)
block|{
name|m_resultLabel
operator|->
name|setText
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|box
operator|.
name|setText
argument_list|(
name|m_textInMsgBox
operator|->
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|box
operator|.
name|setInformativeText
argument_list|(
name|m_informativeText
operator|->
name|text
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|btnHexText
init|=
name|m_buttonsMask
operator|->
name|text
argument_list|()
decl_stmt|;
name|btnHexText
operator|=
name|btnHexText
operator|.
name|replace
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"0x"
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
expr_stmt|;
name|bool
name|ok
decl_stmt|;
name|QMessageBox
operator|::
name|StandardButtons
name|btns
init|=
operator|(
name|QMessageBox
operator|::
name|StandardButtons
operator|)
name|btnHexText
operator|.
name|toUInt
argument_list|(
operator|&
name|ok
argument_list|,
literal|16
argument_list|)
decl_stmt|;
name|box
operator|.
name|setStandardButtons
argument_list|(
operator|(
name|QMessageBox
operator|::
name|StandardButtons
operator|)
name|btns
argument_list|)
expr_stmt|;
if|if
condition|(
name|box
operator|.
name|standardButtons
argument_list|()
operator|==
operator|(
name|QMessageBox
operator|::
name|StandardButtons
operator|)
literal|0
condition|)
name|box
operator|.
name|setStandardButtons
argument_list|(
name|QMessageBox
operator|::
name|Ok
argument_list|)
expr_stmt|;
comment|// just to have something.
name|box
operator|.
name|setIcon
argument_list|(
operator|(
name|QMessageBox
operator|::
name|Icon
operator|)
name|m_iconComboBox
operator|->
name|currentIndex
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_destructor
DECL|function|~MessageBoxPanel
name|MessageBoxPanel
operator|::
name|~
name|MessageBoxPanel
parameter_list|()
block|{
if|if
condition|(
name|m_msgbox
condition|)
name|m_msgbox
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
block|}
end_destructor
begin_function
DECL|function|doExec
name|void
name|MessageBoxPanel
operator|::
name|doExec
parameter_list|()
block|{
if|if
condition|(
operator|!
name|m_msgbox
operator|||
name|m_chkReallocMsgBox
operator|->
name|isChecked
argument_list|()
condition|)
block|{
if|if
condition|(
name|m_msgbox
condition|)
name|m_msgbox
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
name|m_msgbox
operator|=
operator|new
name|QMessageBox
expr_stmt|;
block|}
name|setupMessageBox
argument_list|(
operator|*
name|m_msgbox
argument_list|)
expr_stmt|;
name|m_msgbox
operator|->
name|setWindowModality
argument_list|(
name|Qt
operator|::
name|NonModal
argument_list|)
expr_stmt|;
name|int
name|res
init|=
name|m_msgbox
operator|->
name|exec
argument_list|()
decl_stmt|;
name|QString
name|sres
decl_stmt|;
name|sres
operator|.
name|setNum
argument_list|(
name|res
argument_list|,
literal|16
argument_list|)
expr_stmt|;
name|m_resultLabel
operator|->
name|setText
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Return value (hex): %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|sres
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|doShowApply
name|void
name|MessageBoxPanel
operator|::
name|doShowApply
parameter_list|()
block|{
if|if
condition|(
operator|!
name|m_msgbox
operator|||
name|m_chkReallocMsgBox
operator|->
name|isChecked
argument_list|()
condition|)
block|{
if|if
condition|(
name|m_msgbox
condition|)
name|m_msgbox
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
name|m_msgbox
operator|=
operator|new
name|QMessageBox
expr_stmt|;
block|}
name|setupMessageBox
argument_list|(
operator|*
name|m_msgbox
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|m_msgbox
operator|->
name|isVisible
argument_list|()
condition|)
block|{
name|m_msgbox
operator|->
name|setWindowModality
argument_list|(
name|Qt
operator|::
name|NonModal
argument_list|)
expr_stmt|;
name|m_msgbox
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
block|}
end_function
end_unit
