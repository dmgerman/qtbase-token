begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QGuiApplication>
end_include
begin_include
include|#
directive|include
file|<QStyleHints>
end_include
begin_include
include|#
directive|include
file|<QLibraryInfo>
end_include
begin_include
include|#
directive|include
file|<private/qguiapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformintegration.h>
end_include
begin_include
include|#
directive|include
file|<qpa/qplatformtheme.h>
end_include
begin_include
include|#
directive|include
file|<QScreen>
end_include
begin_include
include|#
directive|include
file|<QStringList>
end_include
begin_include
include|#
directive|include
file|<QVariant>
end_include
begin_include
include|#
directive|include
file|<QFont>
end_include
begin_include
include|#
directive|include
file|<QSysInfo>
end_include
begin_include
include|#
directive|include
file|<QLibraryInfo>
end_include
begin_include
include|#
directive|include
file|<QStandardPaths>
end_include
begin_include
include|#
directive|include
file|<QDir>
end_include
begin_include
include|#
directive|include
file|<iostream>
end_include
begin_include
include|#
directive|include
file|<string>
end_include
begin_function
DECL|function|operator <<
name|std
operator|::
name|ostream
modifier|&
name|operator
name|<<
parameter_list|(
name|std
operator|::
name|ostream
modifier|&
name|str
parameter_list|,
specifier|const
name|QSize
modifier|&
name|s
parameter_list|)
block|{
name|str
operator|<<
name|s
operator|.
name|width
argument_list|()
operator|<<
literal|'x'
operator|<<
name|s
operator|.
name|height
argument_list|()
expr_stmt|;
return|return
name|str
return|;
block|}
end_function
begin_function
DECL|function|operator <<
name|std
operator|::
name|ostream
modifier|&
name|operator
name|<<
parameter_list|(
name|std
operator|::
name|ostream
modifier|&
name|str
parameter_list|,
specifier|const
name|QSizeF
modifier|&
name|s
parameter_list|)
block|{
name|str
operator|<<
name|s
operator|.
name|width
argument_list|()
operator|<<
literal|'x'
operator|<<
name|s
operator|.
name|height
argument_list|()
expr_stmt|;
return|return
name|str
return|;
block|}
end_function
begin_function
DECL|function|operator <<
name|std
operator|::
name|ostream
modifier|&
name|operator
name|<<
parameter_list|(
name|std
operator|::
name|ostream
modifier|&
name|str
parameter_list|,
specifier|const
name|QRect
modifier|&
name|r
parameter_list|)
block|{
name|str
operator|<<
name|r
operator|.
name|size
argument_list|()
operator|<<
literal|'+'
operator|<<
name|r
operator|.
name|x
argument_list|()
operator|<<
literal|'+'
operator|<<
name|r
operator|.
name|y
argument_list|()
expr_stmt|;
return|return
name|str
return|;
block|}
end_function
begin_function
DECL|function|operator <<
name|std
operator|::
name|ostream
modifier|&
name|operator
name|<<
parameter_list|(
name|std
operator|::
name|ostream
modifier|&
name|str
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|l
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|l
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
condition|)
name|str
operator|<<
literal|','
expr_stmt|;
name|str
operator|<<
name|l
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toStdString
argument_list|()
expr_stmt|;
block|}
return|return
name|str
return|;
block|}
end_function
begin_function
DECL|function|toNativeSeparators
specifier|static
name|QStringList
name|toNativeSeparators
parameter_list|(
name|QStringList
name|in
parameter_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|in
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|in
index|[
name|i
index|]
operator|=
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|in
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|in
return|;
block|}
end_function
begin_define
DECL|macro|DUMP_CAPABILITY
define|#
directive|define
name|DUMP_CAPABILITY
parameter_list|(
name|integration
parameter_list|,
name|capability
parameter_list|)
define|\
value|if (platformIntegration->hasCapability(QPlatformIntegration::capability)) \         std::cout<< ' '<< #capability;
end_define
begin_define
DECL|macro|DUMP_STANDARDPATH
define|#
directive|define
name|DUMP_STANDARDPATH
parameter_list|(
name|location
parameter_list|)
define|\
value|std::cout<< "  "<< #location<< ": \"" \<< QStandardPaths::displayName(QStandardPaths::location).toStdString()<< '"' \<< ' '<< toNativeSeparators(QStandardPaths::standardLocations(QStandardPaths::location))<< '\n';
end_define
begin_define
DECL|macro|DUMP_LIBRARYPATH
define|#
directive|define
name|DUMP_LIBRARYPATH
parameter_list|(
name|loc
parameter_list|)
define|\
value|std::cout<< "  "<< #loc<< ": "<< QDir::toNativeSeparators(QLibraryInfo::location(QLibraryInfo::loc)).toStdString()<< '\n';
end_define
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
modifier|*
name|argv
parameter_list|)
block|{
name|QGuiApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
specifier|const
name|QPlatformIntegration
modifier|*
name|platformIntegration
init|=
name|QGuiApplicationPrivate
operator|::
name|platformIntegration
argument_list|()
decl_stmt|;
name|std
operator|::
name|cout
operator|<<
literal|"Qt "
operator|<<
name|QT_VERSION_STR
operator|<<
literal|" on \""
operator|<<
name|QGuiApplication
operator|::
name|platformName
argument_list|()
operator|.
name|toStdString
argument_list|()
operator|<<
literal|"\" "
operator|<<
name|QSysInfo
operator|::
name|WordSize
operator|<<
literal|" bit/"
operator|<<
operator|(
name|QSysInfo
operator|::
name|ByteOrder
operator|==
name|QSysInfo
operator|::
name|LittleEndian
condition|?
literal|"little endian"
else|:
literal|"big endian"
operator|)
operator|<<
literal|'/'
operator|<<
operator|(
name|QLibraryInfo
operator|::
name|isDebugBuild
argument_list|()
condition|?
literal|"debug"
else|:
literal|"release"
operator|)
operator|<<
literal|'\n'
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|std
operator|::
name|cout
operator|<<
name|std
operator|::
name|hex
operator|<<
literal|"Windows version: 0x"
operator|<<
name|QSysInfo
operator|::
name|windowsVersion
argument_list|()
operator|<<
name|std
operator|::
name|dec
operator|<<
literal|'\n'
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
name|std
operator|::
name|cout
operator|<<
name|std
operator|::
name|hex
operator|<<
literal|"Mac OS version: 0x"
operator|<<
name|QSysInfo
operator|::
name|macVersion
argument_list|()
operator|<<
name|std
operator|::
name|dec
operator|<<
literal|'\n'
expr_stmt|;
endif|#
directive|endif
name|std
operator|::
name|cout
operator|<<
literal|"\nLibrary info:\n"
expr_stmt|;
name|DUMP_LIBRARYPATH
argument_list|(
argument|PrefixPath
argument_list|)
name|DUMP_LIBRARYPATH
argument_list|(
argument|DocumentationPath
argument_list|)
name|DUMP_LIBRARYPATH
argument_list|(
argument|HeadersPath
argument_list|)
name|DUMP_LIBRARYPATH
argument_list|(
argument|LibrariesPath
argument_list|)
name|DUMP_LIBRARYPATH
argument_list|(
argument|LibraryExecutablesPath
argument_list|)
name|DUMP_LIBRARYPATH
argument_list|(
argument|BinariesPath
argument_list|)
name|DUMP_LIBRARYPATH
argument_list|(
argument|PluginsPath
argument_list|)
name|DUMP_LIBRARYPATH
argument_list|(
argument|ImportsPath
argument_list|)
name|DUMP_LIBRARYPATH
argument_list|(
argument|Qml2ImportsPath
argument_list|)
name|DUMP_LIBRARYPATH
argument_list|(
argument|ArchDataPath
argument_list|)
name|DUMP_LIBRARYPATH
argument_list|(
argument|DataPath
argument_list|)
name|DUMP_LIBRARYPATH
argument_list|(
argument|TranslationsPath
argument_list|)
name|DUMP_LIBRARYPATH
argument_list|(
argument|ExamplesPath
argument_list|)
name|DUMP_LIBRARYPATH
argument_list|(
argument|TestsPath
argument_list|)
name|std
operator|::
name|cout
operator|<<
literal|"\nStandard paths:\n"
expr_stmt|;
name|DUMP_STANDARDPATH
argument_list|(
argument|DesktopLocation
argument_list|)
name|DUMP_STANDARDPATH
argument_list|(
argument|DocumentsLocation
argument_list|)
name|DUMP_STANDARDPATH
argument_list|(
argument|FontsLocation
argument_list|)
name|DUMP_STANDARDPATH
argument_list|(
argument|ApplicationsLocation
argument_list|)
name|DUMP_STANDARDPATH
argument_list|(
argument|MusicLocation
argument_list|)
name|DUMP_STANDARDPATH
argument_list|(
argument|MoviesLocation
argument_list|)
name|DUMP_STANDARDPATH
argument_list|(
argument|PicturesLocation
argument_list|)
name|DUMP_STANDARDPATH
argument_list|(
argument|TempLocation
argument_list|)
name|DUMP_STANDARDPATH
argument_list|(
argument|HomeLocation
argument_list|)
name|DUMP_STANDARDPATH
argument_list|(
argument|DataLocation
argument_list|)
name|DUMP_STANDARDPATH
argument_list|(
argument|CacheLocation
argument_list|)
name|DUMP_STANDARDPATH
argument_list|(
argument|GenericDataLocation
argument_list|)
name|DUMP_STANDARDPATH
argument_list|(
argument|RuntimeLocation
argument_list|)
name|DUMP_STANDARDPATH
argument_list|(
argument|ConfigLocation
argument_list|)
name|DUMP_STANDARDPATH
argument_list|(
argument|DownloadLocation
argument_list|)
name|DUMP_STANDARDPATH
argument_list|(
argument|GenericCacheLocation
argument_list|)
name|std
operator|::
name|cout
operator|<<
literal|"\nPlatform capabilities:"
expr_stmt|;
name|DUMP_CAPABILITY
argument_list|(
argument|platformIntegration
argument_list|,
argument|ThreadedPixmaps
argument_list|)
name|DUMP_CAPABILITY
argument_list|(
argument|platformIntegration
argument_list|,
argument|OpenGL
argument_list|)
name|DUMP_CAPABILITY
argument_list|(
argument|platformIntegration
argument_list|,
argument|ThreadedOpenGL
argument_list|)
name|DUMP_CAPABILITY
argument_list|(
argument|platformIntegration
argument_list|,
argument|SharedGraphicsCache
argument_list|)
name|DUMP_CAPABILITY
argument_list|(
argument|platformIntegration
argument_list|,
argument|BufferQueueingOpenGL
argument_list|)
name|DUMP_CAPABILITY
argument_list|(
argument|platformIntegration
argument_list|,
argument|WindowMasks
argument_list|)
name|DUMP_CAPABILITY
argument_list|(
argument|platformIntegration
argument_list|,
argument|MultipleWindows
argument_list|)
name|DUMP_CAPABILITY
argument_list|(
argument|platformIntegration
argument_list|,
argument|ApplicationState
argument_list|)
name|DUMP_CAPABILITY
argument_list|(
argument|platformIntegration
argument_list|,
argument|ForeignWindows
argument_list|)
name|std
operator|::
name|cout
operator|<<
literal|'\n'
expr_stmt|;
specifier|const
name|QStyleHints
modifier|*
name|styleHints
init|=
name|QGuiApplication
operator|::
name|styleHints
argument_list|()
decl_stmt|;
name|std
operator|::
name|cout
operator|<<
literal|"\nStyle hints: mouseDoubleClickInterval="
operator|<<
name|styleHints
operator|->
name|mouseDoubleClickInterval
argument_list|()
operator|<<
literal|" startDragDistance="
operator|<<
name|styleHints
operator|->
name|startDragDistance
argument_list|()
operator|<<
literal|" startDragTime="
operator|<<
name|styleHints
operator|->
name|startDragTime
argument_list|()
operator|<<
literal|" startDragVelocity="
operator|<<
name|styleHints
operator|->
name|startDragVelocity
argument_list|()
operator|<<
literal|" keyboardInputInterval="
operator|<<
name|styleHints
operator|->
name|keyboardInputInterval
argument_list|()
operator|<<
literal|" keyboardAutoRepeatRate="
operator|<<
name|styleHints
operator|->
name|keyboardAutoRepeatRate
argument_list|()
operator|<<
literal|" cursorFlashTime="
operator|<<
name|styleHints
operator|->
name|cursorFlashTime
argument_list|()
operator|<<
literal|" showIsFullScreen="
operator|<<
name|styleHints
operator|->
name|showIsFullScreen
argument_list|()
operator|<<
literal|" passwordMaskDelay="
operator|<<
name|styleHints
operator|->
name|passwordMaskDelay
argument_list|()
operator|<<
literal|" fontSmoothingGamma="
operator|<<
name|styleHints
operator|->
name|fontSmoothingGamma
argument_list|()
operator|<<
literal|" useRtlExtensions="
operator|<<
name|styleHints
operator|->
name|useRtlExtensions
argument_list|()
operator|<<
literal|'\n'
expr_stmt|;
specifier|const
name|QPlatformTheme
modifier|*
name|platformTheme
init|=
name|QGuiApplicationPrivate
operator|::
name|platformTheme
argument_list|()
decl_stmt|;
name|std
operator|::
name|cout
operator|<<
literal|"\nTheme:\n  Styles: "
operator|<<
name|platformTheme
operator|->
name|themeHint
argument_list|(
name|QPlatformTheme
operator|::
name|StyleNames
argument_list|)
operator|.
name|toStringList
argument_list|()
expr_stmt|;
specifier|const
name|QString
name|iconTheme
init|=
name|platformTheme
operator|->
name|themeHint
argument_list|(
name|QPlatformTheme
operator|::
name|SystemIconThemeName
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|iconTheme
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|std
operator|::
name|cout
operator|<<
literal|"\n  Icon theme: "
operator|<<
name|iconTheme
operator|.
name|toStdString
argument_list|()
operator|<<
literal|", "
operator|<<
name|platformTheme
operator|->
name|themeHint
argument_list|(
name|QPlatformTheme
operator|::
name|SystemIconFallbackThemeName
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|toStdString
argument_list|()
operator|<<
literal|" from "
operator|<<
name|platformTheme
operator|->
name|themeHint
argument_list|(
name|QPlatformTheme
operator|::
name|IconThemeSearchPaths
argument_list|)
operator|.
name|toStringList
argument_list|()
operator|<<
literal|'\n'
expr_stmt|;
block|}
if|if
condition|(
specifier|const
name|QFont
modifier|*
name|systemFont
init|=
name|platformTheme
operator|->
name|font
argument_list|()
condition|)
name|std
operator|::
name|cout
operator|<<
literal|"  System font: \""
operator|<<
name|systemFont
operator|->
name|family
argument_list|()
operator|.
name|toStdString
argument_list|()
operator|<<
literal|"\" "
operator|<<
name|systemFont
operator|->
name|pointSize
argument_list|()
operator|<<
literal|'\n'
expr_stmt|;
if|if
condition|(
name|platformTheme
operator|->
name|usePlatformNativeDialog
argument_list|(
name|QPlatformTheme
operator|::
name|FileDialog
argument_list|)
condition|)
name|std
operator|::
name|cout
operator|<<
literal|"  Native file dialog\n"
expr_stmt|;
if|if
condition|(
name|platformTheme
operator|->
name|usePlatformNativeDialog
argument_list|(
name|QPlatformTheme
operator|::
name|ColorDialog
argument_list|)
condition|)
name|std
operator|::
name|cout
operator|<<
literal|"  Native color dialog\n"
expr_stmt|;
if|if
condition|(
name|platformTheme
operator|->
name|usePlatformNativeDialog
argument_list|(
name|QPlatformTheme
operator|::
name|FontDialog
argument_list|)
condition|)
name|std
operator|::
name|cout
operator|<<
literal|"  Native font dialog\n"
expr_stmt|;
specifier|const
name|QList
argument_list|<
name|QScreen
modifier|*
argument_list|>
name|screens
init|=
name|QGuiApplication
operator|::
name|screens
argument_list|()
decl_stmt|;
specifier|const
name|int
name|screenCount
init|=
name|screens
operator|.
name|size
argument_list|()
decl_stmt|;
name|std
operator|::
name|cout
operator|<<
literal|"\nScreens: "
operator|<<
name|screenCount
operator|<<
literal|'\n'
expr_stmt|;
for|for
control|(
name|int
name|s
init|=
literal|0
init|;
name|s
operator|<
name|screenCount
condition|;
operator|++
name|s
control|)
block|{
specifier|const
name|QScreen
modifier|*
name|screen
init|=
name|screens
operator|.
name|at
argument_list|(
name|s
argument_list|)
decl_stmt|;
name|std
operator|::
name|cout
operator|<<
operator|(
name|screen
operator|==
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
condition|?
literal|'*'
else|:
literal|' '
operator|)
operator|<<
literal|'#'
operator|<<
literal|' '
operator|<<
name|s
operator|<<
literal|" \""
operator|<<
name|screen
operator|->
name|name
argument_list|()
operator|.
name|toStdString
argument_list|()
operator|<<
literal|'"'
operator|<<
literal|"\n  Geometry: "
operator|<<
name|screen
operator|->
name|geometry
argument_list|()
operator|<<
literal|" Available: "
operator|<<
name|screen
operator|->
name|availableGeometry
argument_list|()
expr_stmt|;
if|if
condition|(
name|screen
operator|->
name|geometry
argument_list|()
operator|!=
name|screen
operator|->
name|virtualGeometry
argument_list|()
condition|)
name|std
operator|::
name|cout
operator|<<
literal|"\n  Virtual geometry: "
operator|<<
name|screen
operator|->
name|virtualGeometry
argument_list|()
operator|<<
literal|" Available: "
operator|<<
name|screen
operator|->
name|availableVirtualGeometry
argument_list|()
expr_stmt|;
if|if
condition|(
name|screen
operator|->
name|virtualSiblings
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
name|std
operator|::
name|cout
operator|<<
literal|"\n  "
operator|<<
name|screen
operator|->
name|virtualSiblings
argument_list|()
operator|.
name|size
argument_list|()
operator|<<
literal|" virtual siblings"
expr_stmt|;
name|std
operator|::
name|cout
operator|<<
literal|"\n  Physical size: "
operator|<<
name|screen
operator|->
name|physicalSize
argument_list|()
operator|<<
literal|" mm"
operator|<<
literal|"  Refresh: "
operator|<<
name|screen
operator|->
name|refreshRate
argument_list|()
operator|<<
literal|" Hz"
operator|<<
literal|"\n  Physical DPI: "
operator|<<
name|screen
operator|->
name|physicalDotsPerInchX
argument_list|()
operator|<<
literal|','
operator|<<
name|screen
operator|->
name|physicalDotsPerInchY
argument_list|()
operator|<<
literal|" Logical DPI: "
operator|<<
name|screen
operator|->
name|logicalDotsPerInchX
argument_list|()
operator|<<
literal|','
operator|<<
name|screen
operator|->
name|logicalDotsPerInchY
argument_list|()
operator|<<
literal|"\n  DevicePixelRatio: "
operator|<<
name|screen
operator|->
name|devicePixelRatio
argument_list|()
operator|<<
literal|" Primary orientation: "
operator|<<
name|screen
operator|->
name|primaryOrientation
argument_list|()
operator|<<
literal|"\n  Orientation: "
operator|<<
name|screen
operator|->
name|orientation
argument_list|()
operator|<<
literal|" OrientationUpdateMask: "
operator|<<
name|screen
operator|->
name|orientationUpdateMask
argument_list|()
operator|<<
literal|"\n\n"
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
end_function
end_unit
