begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:GPL-EXCEPT$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3 as published by the Free Software ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QApplication>
end_include
begin_include
include|#
directive|include
file|<QVBoxLayout>
end_include
begin_include
include|#
directive|include
file|<QWidget>
end_include
begin_include
include|#
directive|include
file|<QLabel>
end_include
begin_include
include|#
directive|include
file|<QPushButton>
end_include
begin_class
DECL|class|ShortcutTester
class|class
name|ShortcutTester
super|:
specifier|public
name|QWidget
block|{
public|public:
DECL|function|ShortcutTester
name|ShortcutTester
parameter_list|()
block|{
name|setupLayout
argument_list|()
expr_stmt|;
name|setFixedWidth
argument_list|(
literal|200
argument_list|)
expr_stmt|;
block|}
protected|protected:
DECL|function|setupLayout
name|void
name|setupLayout
parameter_list|()
block|{
name|QVBoxLayout
modifier|*
name|layout
init|=
operator|new
name|QVBoxLayout
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QKeySequence
name|sq1
argument_list|(
name|Qt
operator|::
name|AltModifier
operator|+
name|Qt
operator|::
name|ShiftModifier
operator|+
name|Qt
operator|::
name|Key_G
argument_list|)
decl_stmt|;
name|QPushButton
modifier|*
name|b1
init|=
operator|new
name|QPushButton
argument_list|(
name|sq1
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|b1
operator|->
name|setShortcut
argument_list|(
name|sq1
argument_list|)
expr_stmt|;
name|QKeySequence
name|sq2
argument_list|(
name|Qt
operator|::
name|AltModifier
operator|+
name|Qt
operator|::
name|Key_G
argument_list|)
decl_stmt|;
name|QPushButton
modifier|*
name|b2
init|=
operator|new
name|QPushButton
argument_list|(
name|sq2
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|b2
operator|->
name|setShortcut
argument_list|(
name|sq2
argument_list|)
expr_stmt|;
name|QKeySequence
name|sq3
argument_list|(
name|Qt
operator|::
name|ControlModifier
operator|+
name|Qt
operator|::
name|ShiftModifier
operator|+
name|Qt
operator|::
name|Key_R
argument_list|)
decl_stmt|;
name|QPushButton
modifier|*
name|b3
init|=
operator|new
name|QPushButton
argument_list|(
name|sq3
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|b3
operator|->
name|setShortcut
argument_list|(
name|sq3
argument_list|)
expr_stmt|;
name|QKeySequence
name|sq4
argument_list|(
name|Qt
operator|::
name|ControlModifier
operator|+
name|Qt
operator|::
name|Key_R
argument_list|)
decl_stmt|;
name|QPushButton
modifier|*
name|b4
init|=
operator|new
name|QPushButton
argument_list|(
name|sq4
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|b4
operator|->
name|setShortcut
argument_list|(
name|sq4
argument_list|)
expr_stmt|;
name|QKeySequence
name|sq5
argument_list|(
name|Qt
operator|::
name|ControlModifier
operator|+
name|Qt
operator|::
name|Key_Return
argument_list|)
decl_stmt|;
name|QPushButton
modifier|*
name|b5
init|=
operator|new
name|QPushButton
argument_list|(
name|sq5
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|b5
operator|->
name|setShortcut
argument_list|(
name|sq5
argument_list|)
expr_stmt|;
name|QKeySequence
name|sq6
argument_list|(
name|Qt
operator|::
name|ControlModifier
operator|+
name|Qt
operator|::
name|ShiftModifier
operator|+
name|Qt
operator|::
name|AltModifier
operator|+
name|Qt
operator|::
name|Key_R
argument_list|)
decl_stmt|;
name|QPushButton
modifier|*
name|b6
init|=
operator|new
name|QPushButton
argument_list|(
name|sq6
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|b6
operator|->
name|setShortcut
argument_list|(
name|sq6
argument_list|)
expr_stmt|;
name|QKeySequence
name|sq7
argument_list|(
name|Qt
operator|::
name|ShiftModifier
operator|+
name|Qt
operator|::
name|Key_5
argument_list|)
decl_stmt|;
name|QPushButton
modifier|*
name|b7
init|=
operator|new
name|QPushButton
argument_list|(
name|sq7
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|b7
operator|->
name|setShortcut
argument_list|(
name|sq7
argument_list|)
expr_stmt|;
name|QKeySequence
name|sq8
argument_list|(
name|Qt
operator|::
name|ControlModifier
operator|+
name|Qt
operator|::
name|Key_Q
argument_list|)
decl_stmt|;
name|QPushButton
modifier|*
name|b8
init|=
operator|new
name|QPushButton
argument_list|(
name|sq8
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|b8
operator|->
name|setShortcut
argument_list|(
name|sq8
argument_list|)
expr_stmt|;
name|QKeySequence
name|sq9
argument_list|(
name|Qt
operator|::
name|ControlModifier
operator|+
name|Qt
operator|::
name|Key_Plus
argument_list|)
decl_stmt|;
name|QPushButton
modifier|*
name|b9
init|=
operator|new
name|QPushButton
argument_list|(
name|sq9
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|b9
operator|->
name|setShortcut
argument_list|(
name|sq9
argument_list|)
expr_stmt|;
name|QKeySequence
name|sq10
argument_list|(
name|Qt
operator|::
name|ControlModifier
operator|+
name|Qt
operator|::
name|Key_Y
argument_list|)
decl_stmt|;
name|QPushButton
modifier|*
name|b10
init|=
operator|new
name|QPushButton
argument_list|(
name|sq10
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|b10
operator|->
name|setShortcut
argument_list|(
name|sq10
argument_list|)
expr_stmt|;
name|QKeySequence
name|sq11
argument_list|(
name|Qt
operator|::
name|ShiftModifier
operator|+
name|Qt
operator|::
name|Key_Comma
argument_list|)
decl_stmt|;
name|QPushButton
modifier|*
name|b11
init|=
operator|new
name|QPushButton
argument_list|(
name|sq11
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|b11
operator|->
name|setShortcut
argument_list|(
name|sq11
argument_list|)
expr_stmt|;
name|QKeySequence
name|sq12
argument_list|(
name|Qt
operator|::
name|ControlModifier
operator|+
name|Qt
operator|::
name|Key_Slash
argument_list|)
decl_stmt|;
name|QPushButton
modifier|*
name|b12
init|=
operator|new
name|QPushButton
argument_list|(
name|sq12
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|b12
operator|->
name|setShortcut
argument_list|(
name|sq12
argument_list|)
expr_stmt|;
comment|// LATIN SMALL LETTER O WITH STROKE
name|QKeySequence
name|sq13
argument_list|(
name|QString
argument_list|(
name|QChar
argument_list|(
name|ushort
argument_list|(
literal|0xf8
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QPushButton
modifier|*
name|b13
init|=
operator|new
name|QPushButton
argument_list|(
name|sq13
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|b13
operator|->
name|setShortcut
argument_list|(
name|sq13
argument_list|)
expr_stmt|;
comment|// CYRILLIC SMALL LETTER ZHE
name|QKeySequence
name|sq14
argument_list|(
name|QString
argument_list|(
name|QChar
argument_list|(
name|ushort
argument_list|(
literal|0x436
argument_list|)
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QPushButton
modifier|*
name|b14
init|=
operator|new
name|QPushButton
argument_list|(
name|sq14
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|b14
operator|->
name|setShortcut
argument_list|(
name|sq14
argument_list|)
expr_stmt|;
name|QLabel
modifier|*
name|testPurpose
init|=
operator|new
name|QLabel
argument_list|()
decl_stmt|;
name|testPurpose
operator|->
name|setWordWrap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testPurpose
operator|->
name|setSizePolicy
argument_list|(
name|QSizePolicy
operator|::
name|Ignored
argument_list|,
name|QSizePolicy
operator|::
name|Expanding
argument_list|)
expr_stmt|;
name|testPurpose
operator|->
name|setText
argument_list|(
literal|"This test come in handy to verify shortcuts under different"
literal|" keyboard layouts - qwerty, dvorak, non-latin (russian, arabic), etc."
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|testPurpose
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|b1
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|b2
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|b3
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|b4
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|b5
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|b6
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|b7
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|b8
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|b9
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|b10
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|b11
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|b12
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
operator|new
name|QLabel
argument_list|(
literal|"Norwegian layout"
argument_list|)
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|b13
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
operator|new
name|QLabel
argument_list|(
literal|"Russian layout"
argument_list|)
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|b14
argument_list|)
expr_stmt|;
name|setLayout
argument_list|(
name|layout
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
name|argv
index|[]
parameter_list|)
block|{
name|QApplication
name|a
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|ShortcutTester
name|tester
decl_stmt|;
name|tester
operator|.
name|show
argument_list|()
expr_stmt|;
return|return
name|a
operator|.
name|exec
argument_list|()
return|;
block|}
end_function
end_unit
