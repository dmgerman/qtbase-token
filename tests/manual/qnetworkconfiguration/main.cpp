begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Research in Motion. ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<qtest.h>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qnetworkconfiguration.h>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qnetworkconfigmanager.h>
end_include
begin_class
DECL|class|tst_qnetworkconfiguration
class|class
name|tst_qnetworkconfiguration
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|bearerType
parameter_list|()
function_decl|;
name|void
name|bearerTypeFamily
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|bearerType
name|void
name|tst_qnetworkconfiguration
operator|::
name|bearerType
parameter_list|()
block|{
name|QNetworkConfigurationManager
name|m
decl_stmt|;
name|QList
argument_list|<
name|QNetworkConfiguration
argument_list|>
name|allConfs
init|=
name|m
operator|.
name|allConfigurations
argument_list|()
decl_stmt|;
name|QElapsedTimer
name|timer
decl_stmt|;
for|for
control|(
name|int
name|a
init|=
literal|0
init|;
name|a
operator|<
name|allConfs
operator|.
name|count
argument_list|()
condition|;
name|a
operator|++
control|)
block|{
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
name|QNetworkConfiguration
operator|::
name|BearerType
name|type
init|=
name|allConfs
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|.
name|bearerType
argument_list|()
decl_stmt|;
name|qint64
name|elapsed
init|=
name|timer
operator|.
name|elapsed
argument_list|()
decl_stmt|;
name|QString
name|typeString
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QNetworkConfiguration
operator|::
name|BearerUnknown
case|:
name|typeString
operator|=
name|QLatin1String
argument_list|(
literal|"Unknown"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QNetworkConfiguration
operator|::
name|BearerEthernet
case|:
name|typeString
operator|=
name|QLatin1String
argument_list|(
literal|"Ethernet"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QNetworkConfiguration
operator|::
name|BearerWLAN
case|:
name|typeString
operator|=
name|QLatin1String
argument_list|(
literal|"WLAN"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QNetworkConfiguration
operator|::
name|Bearer2G
case|:
name|typeString
operator|=
name|QLatin1String
argument_list|(
literal|"2G"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QNetworkConfiguration
operator|::
name|BearerCDMA2000
case|:
name|typeString
operator|=
name|QLatin1String
argument_list|(
literal|"CDMA2000"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QNetworkConfiguration
operator|::
name|BearerWCDMA
case|:
name|typeString
operator|=
name|QLatin1String
argument_list|(
literal|"WCDMA"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QNetworkConfiguration
operator|::
name|BearerHSPA
case|:
name|typeString
operator|=
name|QLatin1String
argument_list|(
literal|"HSPA"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QNetworkConfiguration
operator|::
name|BearerBluetooth
case|:
name|typeString
operator|=
name|QLatin1String
argument_list|(
literal|"Bluetooth"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QNetworkConfiguration
operator|::
name|BearerWiMAX
case|:
name|typeString
operator|=
name|QLatin1String
argument_list|(
literal|"WiMAX"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QNetworkConfiguration
operator|::
name|BearerEVDO
case|:
name|typeString
operator|=
name|QLatin1String
argument_list|(
literal|"EVDO"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QNetworkConfiguration
operator|::
name|BearerLTE
case|:
name|typeString
operator|=
name|QLatin1String
argument_list|(
literal|"LTE"
argument_list|)
expr_stmt|;
break|break;
default|default:
name|typeString
operator|=
literal|"unknown bearer (?)"
expr_stmt|;
block|}
specifier|const
name|char
modifier|*
name|isDefault
init|=
operator|(
name|allConfs
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|==
name|m
operator|.
name|defaultConfiguration
argument_list|()
operator|)
condition|?
literal|"*DEFAULT*"
else|:
literal|""
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
name|isDefault
operator|<<
literal|"identifier:"
operator|<<
name|allConfs
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|.
name|identifier
argument_list|()
operator|<<
literal|"bearer type name:"
operator|<<
name|allConfs
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|.
name|bearerTypeName
argument_list|()
operator|<<
literal|"bearer type:"
operator|<<
name|type
operator|<<
literal|"("
operator|<<
name|typeString
operator|<<
literal|")"
operator|<<
literal|"elapsed:"
operator|<<
name|elapsed
expr_stmt|;
name|QCOMPARE
argument_list|(
name|allConfs
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|.
name|bearerTypeName
argument_list|()
argument_list|,
name|typeString
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|bearerTypeFamily
name|void
name|tst_qnetworkconfiguration
operator|::
name|bearerTypeFamily
parameter_list|()
block|{
name|QNetworkConfigurationManager
name|m
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QNetworkConfiguration
modifier|&
name|config
decl|,
name|m
operator|.
name|allConfigurations
argument_list|(
name|QNetworkConfiguration
operator|::
name|Active
argument_list|)
control|)
block|{
name|QString
name|family
decl_stmt|;
switch|switch
condition|(
name|config
operator|.
name|bearerTypeFamily
argument_list|()
condition|)
block|{
case|case
name|QNetworkConfiguration
operator|::
name|Bearer3G
case|:
name|family
operator|=
name|QLatin1String
argument_list|(
literal|"Bearer3G"
argument_list|)
expr_stmt|;
break|break;
case|case
name|QNetworkConfiguration
operator|::
name|Bearer4G
case|:
name|family
operator|=
name|QLatin1String
argument_list|(
literal|"Bearer4G"
argument_list|)
expr_stmt|;
break|break;
default|default:
name|family
operator|=
name|config
operator|.
name|bearerTypeName
argument_list|()
expr_stmt|;
block|}
name|qDebug
argument_list|()
operator|<<
name|config
operator|.
name|name
argument_list|()
operator|<<
literal|"has bearer type"
operator|<<
name|config
operator|.
name|bearerTypeName
argument_list|()
operator|<<
literal|"of bearer type family"
operator|<<
name|family
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_qnetworkconfiguration
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"main.moc"
end_include
end_unit
