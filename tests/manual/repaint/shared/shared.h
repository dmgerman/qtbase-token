begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QWidget>
end_include
begin_include
include|#
directive|include
file|<QPainter>
end_include
begin_include
include|#
directive|include
file|<QMouseEvent>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_decl_stmt
name|class
name|StaticWidget
range|:
name|public
name|QWidget
block|{
name|Q_OBJECT
name|public
operator|:
name|int
name|hue
block|;
name|bool
name|pressed
block|;
name|StaticWidget
argument_list|(
name|QWidget
operator|*
name|parent
operator|=
literal|0
argument_list|)
operator|:
name|QWidget
argument_list|(
argument|parent
argument_list|)
block|{
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_StaticContents
argument_list|)
block|;
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_OpaquePaintEvent
argument_list|)
block|;
name|hue
operator|=
literal|200
block|;
name|pressed
operator|=
name|false
block|;     }
comment|// Update 4 rects in a checkerboard pattern, using either
comment|// a QRegion or separate rects (see the useRegion switch)
name|void
name|updatePattern
argument_list|(
argument|QPoint pos
argument_list|)
block|{
specifier|const
name|int
name|rectSize
operator|=
literal|10
block|;
name|QRect
name|rect
argument_list|(
name|pos
operator|.
name|x
argument_list|()
operator|-
name|rectSize
argument_list|,
name|pos
operator|.
name|y
argument_list|()
operator|-
name|rectSize
argument_list|,
name|rectSize
operator|*
literal|2
argument_list|,
name|rectSize
operator|*
literal|2
argument_list|)
block|;
name|QVector
operator|<
name|QRect
operator|>
name|updateRects
block|;
name|updateRects
operator|.
name|append
argument_list|(
name|rect
operator|.
name|translated
argument_list|(
name|rectSize
operator|*
literal|2
argument_list|,
name|rectSize
operator|*
literal|2
argument_list|)
argument_list|)
block|;
name|updateRects
operator|.
name|append
argument_list|(
name|rect
operator|.
name|translated
argument_list|(
name|rectSize
operator|*
literal|2
argument_list|,
operator|-
name|rectSize
operator|*
literal|2
argument_list|)
argument_list|)
block|;
name|updateRects
operator|.
name|append
argument_list|(
name|rect
operator|.
name|translated
argument_list|(
operator|-
name|rectSize
operator|*
literal|2
argument_list|,
name|rectSize
operator|*
literal|2
argument_list|)
argument_list|)
block|;
name|updateRects
operator|.
name|append
argument_list|(
name|rect
operator|.
name|translated
argument_list|(
operator|-
name|rectSize
operator|*
literal|2
argument_list|,
operator|-
name|rectSize
operator|*
literal|2
argument_list|)
argument_list|)
block|;
name|bool
name|useRegion
operator|=
name|false
block|;
if|if
condition|(
name|useRegion
condition|)
block|{
name|QRegion
name|region
decl_stmt|;
name|region
operator|.
name|setRects
argument_list|(
name|updateRects
operator|.
name|data
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|update
argument_list|(
name|region
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|foreach
argument_list|(
argument|QRect rect
argument_list|,
argument|updateRects
argument_list|)
name|update
argument_list|(
name|rect
argument_list|)
expr_stmt|;
block|}
block|}
name|void
name|resizeEvent
argument_list|(
argument|QResizeEvent *
argument_list|)
block|{
comment|//      qDebug()<< "static widget resize from"<< e->oldSize()<< "to"<< e->size();
block|}
name|void
name|mousePressEvent
argument_list|(
argument|QMouseEvent *event
argument_list|)
block|{
comment|//        qDebug()<< "mousePress at"<< event->pos();
name|pressed
operator|=
name|true
block|;
name|updatePattern
argument_list|(
name|event
operator|->
name|pos
argument_list|()
argument_list|)
block|;     }
name|void
name|mouseReleaseEvent
argument_list|(
argument|QMouseEvent *
argument_list|)
block|{
name|pressed
operator|=
name|false
block|;     }
name|void
name|mouseMoveEvent
argument_list|(
argument|QMouseEvent *event
argument_list|)
block|{
if|if
condition|(
name|pressed
condition|)
name|updatePattern
argument_list|(
name|event
operator|->
name|pos
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|void
name|paintEvent
argument_list|(
argument|QPaintEvent *e
argument_list|)
block|{
name|QPainter
name|p
argument_list|(
name|this
argument_list|)
block|;
specifier|static
name|int
name|color
operator|=
literal|200
block|;
name|color
operator|=
operator|(
name|color
operator|+
literal|41
operator|)
operator|%
literal|205
operator|+
literal|50
block|;
comment|//        color = ((color + 45) %150) + 100;
name|qDebug
argument_list|()
operator|<<
literal|"static widget repaint"
operator|<<
name|e
operator|->
name|rect
argument_list|()
block|;
if|if
condition|(
name|pressed
condition|)
name|p
operator|.
name|fillRect
argument_list|(
name|e
operator|->
name|rect
argument_list|()
argument_list|,
name|QColor
operator|::
name|fromHsv
argument_list|(
literal|100
argument_list|,
literal|255
argument_list|,
name|color
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|p
operator|.
name|fillRect
argument_list|(
name|e
operator|->
name|rect
argument_list|()
argument_list|,
name|QColor
operator|::
name|fromHsv
argument_list|(
name|hue
argument_list|,
literal|255
argument_list|,
name|color
argument_list|)
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPen
argument_list|(
name|QPen
argument_list|(
name|QColor
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
argument_list|)
argument_list|)
block|;
for|for
control|(
name|int
name|y
init|=
name|e
operator|->
name|rect
argument_list|()
operator|.
name|top
argument_list|()
init|;
name|y
operator|<=
name|e
operator|->
name|rect
argument_list|()
operator|.
name|bottom
argument_list|()
operator|+
literal|1
condition|;
operator|++
name|y
control|)
block|{
if|if
condition|(
name|y
operator|%
literal|20
operator|==
literal|0
condition|)
name|p
operator|.
name|drawLine
argument_list|(
name|e
operator|->
name|rect
argument_list|()
operator|.
name|left
argument_list|()
argument_list|,
name|y
argument_list|,
name|e
operator|->
name|rect
argument_list|()
operator|.
name|right
argument_list|()
argument_list|,
name|y
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|x
init|=
name|e
operator|->
name|rect
argument_list|()
operator|.
name|left
argument_list|()
init|;
name|x
operator|<=
name|e
operator|->
name|rect
argument_list|()
operator|.
name|right
argument_list|()
operator|+
literal|1
condition|;
operator|++
name|x
control|)
block|{
if|if
condition|(
name|x
operator|%
literal|20
operator|==
literal|0
condition|)
name|p
operator|.
name|drawLine
argument_list|(
name|x
argument_list|,
name|e
operator|->
name|rect
argument_list|()
operator|.
name|top
argument_list|()
argument_list|,
name|x
argument_list|,
name|e
operator|->
name|rect
argument_list|()
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_decl_stmt
unit|};
end_unit
