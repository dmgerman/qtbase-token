begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 ThorbjÃ¸rn Lund Martsum - tmartsum[at]gmail.com ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtWidgets/QtWidgets>
end_include
begin_class
DECL|class|TreeDialog
class|class
name|TreeDialog
super|:
specifier|public
name|QDialog
block|{
name|Q_OBJECT
public|public:
DECL|function|TreeDialog
name|TreeDialog
parameter_list|()
block|{
name|create
argument_list|()
expr_stmt|;
block|}
protected|protected:
DECL|function|create
name|void
name|create
parameter_list|()
block|{
name|resize
argument_list|(
literal|1000
argument_list|,
literal|233
argument_list|)
expr_stmt|;
name|gridLayout
operator|=
operator|new
name|QGridLayout
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|treeWidget
operator|=
operator|new
name|QTreeWidget
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|gridLayout
operator|->
name|addWidget
argument_list|(
name|treeWidget
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|spinPrecision
operator|=
operator|new
name|QSpinBox
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|gridLayout
operator|->
name|addWidget
argument_list|(
name|spinPrecision
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|verticalSpacer
operator|=
operator|new
name|QSpacerItem
argument_list|(
literal|20
argument_list|,
literal|20
argument_list|,
name|QSizePolicy
operator|::
name|Minimum
argument_list|,
name|QSizePolicy
operator|::
name|Expanding
argument_list|)
expr_stmt|;
name|gridLayout
operator|->
name|addItem
argument_list|(
name|verticalSpacer
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QStringList
name|itemInfo
argument_list|(
literal|"Col1"
argument_list|)
decl_stmt|;
name|itemInfo
operator|.
name|append
argument_list|(
literal|"Col2"
argument_list|)
expr_stmt|;
name|itemInfo
operator|.
name|append
argument_list|(
literal|"Col3"
argument_list|)
expr_stmt|;
name|itemInfo
operator|.
name|append
argument_list|(
literal|"Dummy"
argument_list|)
expr_stmt|;
comment|// Developer no. could also have been social security number og some other id.
name|treeWidget
operator|->
name|setHeaderLabels
argument_list|(
name|itemInfo
argument_list|)
expr_stmt|;
name|QStringList
name|sl1
argument_list|(
literal|"This is Root Item"
argument_list|)
decl_stmt|;
name|sl1
operator|.
name|append
argument_list|(
literal|"i"
argument_list|)
expr_stmt|;
name|QTreeWidgetItem
modifier|*
name|rootitem
init|=
operator|new
name|QTreeWidgetItem
argument_list|(
name|treeWidget
argument_list|,
name|sl1
argument_list|)
decl_stmt|;
name|QStringList
name|sl2
argument_list|(
literal|"This is Child1 Item"
argument_list|)
decl_stmt|;
name|sl2
operator|.
name|append
argument_list|(
literal|"WW"
argument_list|)
expr_stmt|;
name|QTreeWidgetItem
modifier|*
name|child1
init|=
operator|new
name|QTreeWidgetItem
argument_list|(
name|rootitem
argument_list|,
name|sl2
argument_list|)
decl_stmt|;
name|QString
name|ii
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"ii"
argument_list|)
decl_stmt|;
name|QStringList
name|is
decl_stmt|;
specifier|const
name|int
name|rowCount
init|=
literal|3000
decl_stmt|;
name|spinPrecision
operator|->
name|setMinimum
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|spinPrecision
operator|->
name|setMaximum
argument_list|(
name|rowCount
operator|+
literal|5
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|u
init|=
literal|0
init|;
name|u
operator|<
name|rowCount
condition|;
operator|++
name|u
control|)
block|{
if|if
condition|(
name|u
operator|%
literal|25
operator|==
literal|0
condition|)
name|ii
operator|+=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"i"
argument_list|)
expr_stmt|;
else|else
name|ii
index|[
name|ii
operator|.
name|length
argument_list|()
operator|-
literal|1
index|]
operator|=
name|QChar
operator|::
name|fromLatin1
argument_list|(
literal|'a'
operator|+
operator|(
name|u
operator|%
literal|25
operator|)
argument_list|)
expr_stmt|;
name|ii
index|[
name|ii
operator|.
name|length
argument_list|()
operator|-
literal|2
index|]
operator|=
name|QChar
operator|::
name|fromLatin1
argument_list|(
literal|'i'
argument_list|)
expr_stmt|;
name|is
operator|.
name|append
argument_list|(
name|ii
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|u
init|=
literal|0
init|;
name|u
operator|<
name|rowCount
operator|-
literal|2
condition|;
operator|++
name|u
control|)
block|{
comment|// -2 since we have rootitem and child1
name|QString
name|col1
decl_stmt|;
name|col1
operator|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"This is child item %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|u
operator|+
literal|2
argument_list|)
expr_stmt|;
name|QStringList
name|sl
argument_list|(
name|col1
argument_list|)
decl_stmt|;
name|sl
operator|.
name|append
argument_list|(
name|is
index|[
name|u
index|]
argument_list|)
expr_stmt|;
name|sl
operator|.
name|append
argument_list|(
name|is
index|[
name|rowCount
operator|-
name|u
operator|-
literal|1
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|u
operator|>
literal|500
condition|)
operator|new
name|QTreeWidgetItem
argument_list|(
name|rootitem
argument_list|,
name|sl
argument_list|)
expr_stmt|;
else|else
operator|new
name|QTreeWidgetItem
argument_list|(
name|child1
argument_list|,
name|sl
argument_list|)
expr_stmt|;
block|}
name|treeWidget
operator|->
name|header
argument_list|()
operator|->
name|setSectionResizeMode
argument_list|(
literal|0
argument_list|,
name|QHeaderView
operator|::
name|ResizeToContents
argument_list|)
expr_stmt|;
name|treeWidget
operator|->
name|header
argument_list|()
operator|->
name|setSectionResizeMode
argument_list|(
literal|1
argument_list|,
name|QHeaderView
operator|::
name|ResizeToContents
argument_list|)
expr_stmt|;
name|treeWidget
operator|->
name|header
argument_list|()
operator|->
name|setSectionResizeMode
argument_list|(
literal|2
argument_list|,
name|QHeaderView
operator|::
name|ResizeToContents
argument_list|)
expr_stmt|;
name|spinPrecision
operator|->
name|setValue
argument_list|(
name|treeWidget
operator|->
name|header
argument_list|()
operator|->
name|resizeContentsPrecision
argument_list|()
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|spinPrecision
argument_list|,
name|SIGNAL
argument_list|(
name|valueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|slotValueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// setupUi
protected|protected
name|slots
protected|:
name|void
name|slotValueChanged
parameter_list|(
name|int
name|newval
parameter_list|)
function_decl|;
protected|protected:
DECL|member|gridLayout
name|QGridLayout
modifier|*
name|gridLayout
decl_stmt|;
DECL|member|treeWidget
name|QTreeWidget
modifier|*
name|treeWidget
decl_stmt|;
DECL|member|spinPrecision
name|QSpinBox
modifier|*
name|spinPrecision
decl_stmt|;
DECL|member|verticalSpacer
name|QSpacerItem
modifier|*
name|verticalSpacer
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|slotValueChanged
name|void
name|TreeDialog
operator|::
name|slotValueChanged
parameter_list|(
name|int
name|newval
parameter_list|)
block|{
name|treeWidget
operator|->
name|header
argument_list|()
operator|->
name|setResizeContentsPrecision
argument_list|(
name|newval
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
name|argv
index|[]
parameter_list|)
block|{
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|TreeDialog
name|d1
decl_stmt|;
name|d1
operator|.
name|show
argument_list|()
expr_stmt|;
name|app
operator|.
name|exec
argument_list|()
expr_stmt|;
block|}
end_function
begin_include
include|#
directive|include
file|"testtree.moc"
end_include
end_unit
