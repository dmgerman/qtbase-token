begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 ThorbjÃ¸rn Lund Martsum - tmartsum[at]gmail.com ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtWidgets>
end_include
begin_class
DECL|class|MyGraphicsItem
class|class
name|MyGraphicsItem
super|:
specifier|public
name|QGraphicsRectItem
block|{
public|public:
DECL|function|MyGraphicsItem
name|MyGraphicsItem
parameter_list|()
member_init_list|:
name|QGraphicsRectItem
argument_list|()
block|{
name|setFlags
argument_list|(
name|QGraphicsItem
operator|::
name|ItemIsSelectable
argument_list|)
expr_stmt|;
block|}
DECL|function|paint
name|void
name|paint
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
specifier|const
name|QStyleOptionGraphicsItem
modifier|*
comment|/* option*/
parameter_list|,
name|QWidget
modifier|*
comment|/*widget*/
parameter_list|)
block|{
if|if
condition|(
name|isSelected
argument_list|()
condition|)
name|painter
operator|->
name|fillRect
argument_list|(
name|rect
argument_list|()
argument_list|,
name|QColor
argument_list|(
literal|255
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|painter
operator|->
name|fillRect
argument_list|(
name|rect
argument_list|()
argument_list|,
name|QColor
argument_list|(
literal|0
argument_list|,
literal|255
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|MyGraphicsView
class|class
name|MyGraphicsView
super|:
specifier|public
name|QGraphicsView
block|{
public|public:
DECL|function|MyGraphicsView
name|MyGraphicsView
parameter_list|()
member_init_list|:
name|QGraphicsView
argument_list|()
block|{
name|setDragMode
argument_list|(
name|QGraphicsView
operator|::
name|RubberBandDrag
argument_list|)
expr_stmt|;
block|}
protected|protected:
DECL|function|mouseMoveEvent
name|void
name|mouseMoveEvent
parameter_list|(
name|QMouseEvent
modifier|*
name|event
parameter_list|)
block|{
name|QGraphicsView
operator|::
name|mouseMoveEvent
argument_list|(
name|event
argument_list|)
expr_stmt|;
name|int
name|rightmostInView
init|=
name|viewport
argument_list|()
operator|->
name|mapToGlobal
argument_list|(
name|viewport
argument_list|()
operator|->
name|geometry
argument_list|()
operator|.
name|topRight
argument_list|()
argument_list|)
operator|.
name|x
argument_list|()
decl_stmt|;
name|int
name|xglobal
init|=
name|event
operator|->
name|globalX
argument_list|()
decl_stmt|;
if|if
condition|(
name|xglobal
operator|>
name|rightmostInView
condition|)
name|horizontalScrollBar
argument_list|()
operator|->
name|setValue
argument_list|(
name|horizontalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
operator|+
literal|10
argument_list|)
expr_stmt|;
name|int
name|bottomPos
init|=
name|viewport
argument_list|()
operator|->
name|mapToGlobal
argument_list|(
name|viewport
argument_list|()
operator|->
name|geometry
argument_list|()
operator|.
name|bottomRight
argument_list|()
argument_list|)
operator|.
name|y
argument_list|()
decl_stmt|;
name|int
name|yglobal
init|=
name|event
operator|->
name|globalY
argument_list|()
decl_stmt|;
if|if
condition|(
name|yglobal
operator|>
name|bottomPos
condition|)
name|verticalScrollBar
argument_list|()
operator|->
name|setValue
argument_list|(
name|verticalScrollBar
argument_list|()
operator|->
name|value
argument_list|()
operator|+
literal|10
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
name|argv
index|[]
parameter_list|)
block|{
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|MyGraphicsView
name|v
decl_stmt|;
name|QGraphicsScene
name|s
argument_list|(
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|5000.0
argument_list|,
literal|5000.0
argument_list|)
decl_stmt|;
name|v
operator|.
name|setScene
argument_list|(
operator|&
name|s
argument_list|)
expr_stmt|;
name|v
operator|.
name|setInteractive
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|v
operator|.
name|setRubberBandSelectionMode
argument_list|(
name|Qt
operator|::
name|IntersectsItemBoundingRect
argument_list|)
expr_stmt|;
name|s
operator|.
name|addRect
argument_list|(
operator|(
name|qreal
operator|)
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|1000.0
argument_list|,
literal|50.0
argument_list|,
name|QPen
argument_list|()
argument_list|,
name|QBrush
argument_list|(
name|QColor
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|255
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|u
init|=
literal|0
init|;
name|u
operator|<
literal|100
condition|;
operator|++
name|u
control|)
for|for
control|(
name|int
name|v
init|=
literal|0
init|;
name|v
operator|<
literal|100
condition|;
operator|++
name|v
control|)
block|{
name|MyGraphicsItem
modifier|*
name|item
init|=
operator|new
name|MyGraphicsItem
argument_list|()
decl_stmt|;
name|item
operator|->
name|setRect
argument_list|(
name|QRectF
argument_list|(
name|v
operator|*
literal|80.0
argument_list|,
name|u
operator|*
literal|80.0
argument_list|,
literal|50.0
argument_list|,
literal|20.0
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|.
name|addItem
argument_list|(
name|item
argument_list|)
expr_stmt|;
block|}
name|v
operator|.
name|show
argument_list|()
expr_stmt|;
name|app
operator|.
name|exec
argument_list|()
expr_stmt|;
return|return
literal|0
return|;
block|}
end_function
end_unit
