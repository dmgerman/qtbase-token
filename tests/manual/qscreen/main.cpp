begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"propertywatcher.h"
end_include
begin_include
include|#
directive|include
file|<QApplication>
end_include
begin_include
include|#
directive|include
file|<QScreen>
end_include
begin_include
include|#
directive|include
file|<QWindow>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<QFormLayout>
end_include
begin_include
include|#
directive|include
file|<QLineEdit>
end_include
begin_decl_stmt
DECL|variable|i
name|int
name|i
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_typedef
DECL|typedef|ScreensHash
typedef|typedef
name|QHash
argument_list|<
name|QScreen
modifier|*
argument_list|,
name|PropertyWatcher
modifier|*
argument_list|>
name|ScreensHash
typedef|;
end_typedef
begin_expr_stmt
name|Q_GLOBAL_STATIC
argument_list|(
name|ScreensHash
argument_list|,
name|props
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function
DECL|function|updateSiblings
name|void
name|updateSiblings
parameter_list|(
name|PropertyWatcher
modifier|*
name|w
parameter_list|)
block|{
name|QLineEdit
modifier|*
name|siblingsField
init|=
name|w
operator|->
name|findChild
argument_list|<
name|QLineEdit
operator|*
argument_list|>
argument_list|(
literal|"siblings"
argument_list|)
decl_stmt|;
name|QScreen
modifier|*
name|screen
init|=
operator|(
name|QScreen
operator|*
operator|)
name|w
operator|->
name|subject
argument_list|()
decl_stmt|;
name|QStringList
name|siblingsList
decl_stmt|;
foreach|foreach
control|(
name|QScreen
modifier|*
name|sibling
decl|,
name|screen
operator|->
name|virtualSiblings
argument_list|()
control|)
name|siblingsList
operator|<<
name|sibling
operator|->
name|name
argument_list|()
expr_stmt|;
name|siblingsField
operator|->
name|setText
argument_list|(
name|siblingsList
operator|.
name|join
argument_list|(
literal|", "
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|screenAdded
name|void
name|screenAdded
parameter_list|(
name|QScreen
modifier|*
name|screen
parameter_list|)
block|{
name|screen
operator|->
name|setOrientationUpdateMask
argument_list|(
operator|(
name|Qt
operator|::
name|ScreenOrientations
operator|)
literal|0x0F
argument_list|)
expr_stmt|;
name|qDebug
argument_list|(
literal|"\nscreenAdded %s siblings %d first %s"
argument_list|,
name|qPrintable
argument_list|(
name|screen
operator|->
name|name
argument_list|()
argument_list|)
argument_list|,
name|screen
operator|->
name|virtualSiblings
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
operator|(
name|screen
operator|->
name|virtualSiblings
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
literal|"none"
else|:
name|qPrintable
argument_list|(
name|screen
operator|->
name|virtualSiblings
argument_list|()
operator|.
name|first
argument_list|()
operator|->
name|name
argument_list|()
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|PropertyWatcher
modifier|*
name|w
init|=
operator|new
name|PropertyWatcher
argument_list|(
name|screen
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|i
operator|++
argument_list|)
argument_list|)
decl_stmt|;
name|QLineEdit
modifier|*
name|siblingsField
init|=
operator|new
name|QLineEdit
argument_list|()
decl_stmt|;
name|siblingsField
operator|->
name|setObjectName
argument_list|(
literal|"siblings"
argument_list|)
expr_stmt|;
name|siblingsField
operator|->
name|setReadOnly
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|w
operator|->
name|layout
argument_list|()
operator|->
name|insertRow
argument_list|(
literal|0
argument_list|,
literal|"virtualSiblings"
argument_list|,
name|siblingsField
argument_list|)
expr_stmt|;
name|updateSiblings
argument_list|(
name|w
argument_list|)
expr_stmt|;
comment|// This doesn't work.  If the multiple screens are part of
comment|// a virtual desktop (i.e. they are virtual siblings), then
comment|// setScreen has no effect, and we need the code below to
comment|// change the window geometry.  If on the other hand the
comment|// screens are really separate, so that windows are not
comment|// portable between them, XCreateWindow needs to have not just
comment|// a different root Window but also a different Display, in order to
comment|// put the window on the other screen.  That would require a
comment|// different QXcbConnection.  So this setScreen call doesn't seem useful.
comment|//w->windowHandle()->setScreen(screen);
comment|// But this works as long as the screens are all virtual siblings
name|w
operator|->
name|show
argument_list|()
expr_stmt|;
name|QRect
name|geom
init|=
name|w
operator|->
name|geometry
argument_list|()
decl_stmt|;
name|geom
operator|.
name|moveCenter
argument_list|(
name|screen
operator|->
name|geometry
argument_list|()
operator|.
name|center
argument_list|()
argument_list|)
expr_stmt|;
name|w
operator|->
name|move
argument_list|(
name|geom
operator|.
name|topLeft
argument_list|()
argument_list|)
expr_stmt|;
name|props
operator|->
name|insert
argument_list|(
name|screen
argument_list|,
name|w
argument_list|)
expr_stmt|;
comment|// workaround for the fact that virtualSiblings is not a property,
comment|// thus there is no change notification:
comment|// allow the user to update the field manually
name|QObject
operator|::
name|connect
argument_list|(
name|w
argument_list|,
operator|&
name|PropertyWatcher
operator|::
name|updatedAllFields
argument_list|,
operator|&
name|updateSiblings
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|screenRemoved
name|void
name|screenRemoved
parameter_list|(
name|QScreen
modifier|*
name|screen
parameter_list|)
block|{
operator|delete
name|props
operator|->
name|take
argument_list|(
name|screen
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
name|argv
index|[]
parameter_list|)
block|{
name|QApplication
name|a
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QScreen
modifier|*
argument_list|>
name|screens
init|=
name|QGuiApplication
operator|::
name|screens
argument_list|()
decl_stmt|;
foreach|foreach
control|(
name|QScreen
modifier|*
name|screen
decl|,
name|screens
control|)
name|screenAdded
argument_list|(
name|screen
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|(
specifier|const
name|QGuiApplication
operator|*
operator|)
name|QGuiApplication
operator|::
name|instance
argument_list|()
argument_list|,
operator|&
name|QGuiApplication
operator|::
name|screenAdded
argument_list|,
operator|&
name|screenAdded
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|(
specifier|const
name|QGuiApplication
operator|*
operator|)
name|QGuiApplication
operator|::
name|instance
argument_list|()
argument_list|,
operator|&
name|QGuiApplication
operator|::
name|screenRemoved
argument_list|,
operator|&
name|screenRemoved
argument_list|)
expr_stmt|;
return|return
name|a
operator|.
name|exec
argument_list|()
return|;
block|}
end_function
end_unit
