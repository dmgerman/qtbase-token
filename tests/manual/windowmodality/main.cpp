begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"ui_dialog.h"
end_include
begin_include
include|#
directive|include
file|"ui_widget.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_include
include|#
directive|include
file|<QtCore/QTimer>
end_include
begin_class
DECL|class|Dialog
class|class
name|Dialog
super|:
specifier|public
name|QDialog
super|,
specifier|public
name|Ui
operator|::
name|Dialog
block|{
name|Q_OBJECT
public|public:
DECL|function|Dialog
name|Dialog
parameter_list|(
name|QWidget
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QDialog
argument_list|(
name|parent
argument_list|)
block|{
name|setupUi
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|dialogFinished
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|accepted
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|dialogAccepted
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|rejected
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|dialogRejected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
private|private
name|slots
private|:
DECL|function|on_modelessButton_clicked
name|void
name|on_modelessButton_clicked
parameter_list|()
block|{
name|newDialog
argument_list|(
name|Qt
operator|::
name|NonModal
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|on_modelessNoParentButton_clicked
name|void
name|on_modelessNoParentButton_clicked
parameter_list|()
block|{
name|newDialog
argument_list|(
name|Qt
operator|::
name|NonModal
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|function|on_windowModalButton_clicked
name|void
name|on_windowModalButton_clicked
parameter_list|()
block|{
name|newDialog
argument_list|(
name|Qt
operator|::
name|WindowModal
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|on_windowModalNoParentButton_clicked
name|void
name|on_windowModalNoParentButton_clicked
parameter_list|()
block|{
name|newDialog
argument_list|(
name|Qt
operator|::
name|WindowModal
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|function|on_windowModalChildButton_clicked
name|void
name|on_windowModalChildButton_clicked
parameter_list|()
block|{
name|newChildWidget
argument_list|(
name|Qt
operator|::
name|WindowModal
argument_list|)
expr_stmt|;
block|}
DECL|function|on_siblingWindowModalButton_clicked
name|void
name|on_siblingWindowModalButton_clicked
parameter_list|()
block|{
name|newDialog
argument_list|(
name|Qt
operator|::
name|WindowModal
argument_list|,
name|parentWidget
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|function|on_applicationModalButton_clicked
name|void
name|on_applicationModalButton_clicked
parameter_list|()
block|{
name|newDialog
argument_list|(
name|Qt
operator|::
name|ApplicationModal
argument_list|,
name|this
argument_list|)
expr_stmt|;
block|}
DECL|function|on_applicationModalNoParentButton_clicked
name|void
name|on_applicationModalNoParentButton_clicked
parameter_list|()
block|{
name|newDialog
argument_list|(
name|Qt
operator|::
name|ApplicationModal
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
DECL|function|on_applicationModalChildButton_clicked
name|void
name|on_applicationModalChildButton_clicked
parameter_list|()
block|{
name|newChildWidget
argument_list|(
name|Qt
operator|::
name|ApplicationModal
argument_list|)
expr_stmt|;
block|}
DECL|function|on_siblingApplicationModalButton_clicked
name|void
name|on_siblingApplicationModalButton_clicked
parameter_list|()
block|{
name|newDialog
argument_list|(
name|Qt
operator|::
name|ApplicationModal
argument_list|,
name|parentWidget
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|function|dialogFinished
name|void
name|dialogFinished
parameter_list|(
name|int
name|result
parameter_list|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"Dialog finished, result"
operator|<<
name|result
expr_stmt|;
block|}
DECL|function|dialogAccepted
name|void
name|dialogAccepted
parameter_list|()
block|{
name|qDebug
argument_list|()
operator|<<
literal|"Dialog accepted"
expr_stmt|;
block|}
DECL|function|dialogRejected
name|void
name|dialogRejected
parameter_list|()
block|{
name|qDebug
argument_list|()
operator|<<
literal|"Dialog rejected"
expr_stmt|;
block|}
private|private:
DECL|function|newDialog
name|void
name|newDialog
parameter_list|(
name|Qt
operator|::
name|WindowModality
name|windowModality
parameter_list|,
name|QWidget
modifier|*
name|parent
parameter_list|)
block|{
name|Dialog
modifier|*
name|dialog
init|=
operator|new
name|Dialog
argument_list|(
name|parent
argument_list|)
decl_stmt|;
name|dialog
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_DeleteOnClose
argument_list|)
expr_stmt|;
name|dialog
operator|->
name|setWindowModality
argument_list|(
name|windowModality
argument_list|)
expr_stmt|;
if|if
condition|(
name|windowModality
operator|==
name|Qt
operator|::
name|ApplicationModal
operator|&&
name|applicationModalUseExecCheckBox
operator|->
name|isChecked
argument_list|()
condition|)
name|dialog
operator|->
name|exec
argument_list|()
expr_stmt|;
else|else
name|dialog
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
DECL|function|newChildWidget
name|void
name|newChildWidget
parameter_list|(
name|Qt
operator|::
name|WindowModality
name|windowModality
parameter_list|)
block|{
name|QWidget
modifier|*
name|w
init|=
operator|new
name|QWidget
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|w
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_DeleteOnClose
argument_list|)
expr_stmt|;
name|w
operator|->
name|setWindowModality
argument_list|(
name|windowModality
argument_list|)
expr_stmt|;
name|w
operator|->
name|setGeometry
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|w
operator|->
name|show
argument_list|()
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|5000
argument_list|,
name|w
argument_list|,
name|SLOT
argument_list|(
name|close
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|event
name|bool
name|event
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|WindowBlocked
condition|)
name|setPalette
argument_list|(
name|Qt
operator|::
name|darkGray
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|WindowUnblocked
condition|)
name|setPalette
argument_list|(
name|QPalette
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|QWidget
operator|::
name|event
argument_list|(
name|event
argument_list|)
return|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|Widget
class|class
name|Widget
super|:
specifier|public
name|QWidget
super|,
specifier|public
name|Ui
operator|::
name|Widget
block|{
name|Q_OBJECT
public|public:
DECL|function|Widget
name|Widget
parameter_list|(
name|QWidget
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
block|{
name|setupUi
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
private|private
name|slots
private|:
DECL|function|on_windowButton_clicked
name|void
name|on_windowButton_clicked
parameter_list|()
block|{
operator|(
operator|new
name|Widget
operator|)
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
DECL|function|on_groupLeaderButton_clicked
name|void
name|on_groupLeaderButton_clicked
parameter_list|()
block|{
name|Widget
modifier|*
name|w
init|=
operator|new
name|Widget
decl_stmt|;
name|w
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_GroupLeader
argument_list|)
expr_stmt|;
name|w
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
DECL|function|on_modelessButton_clicked
name|void
name|on_modelessButton_clicked
parameter_list|()
block|{
name|newDialog
argument_list|(
name|Qt
operator|::
name|NonModal
argument_list|)
expr_stmt|;
block|}
DECL|function|on_modelessNoParentButton_clicked
name|void
name|on_modelessNoParentButton_clicked
parameter_list|()
block|{
name|newDialog
argument_list|(
name|Qt
operator|::
name|NonModal
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|function|on_windowModalButton_clicked
name|void
name|on_windowModalButton_clicked
parameter_list|()
block|{
name|newDialog
argument_list|(
name|Qt
operator|::
name|WindowModal
argument_list|)
expr_stmt|;
block|}
DECL|function|on_windowModalNoParentButton_clicked
name|void
name|on_windowModalNoParentButton_clicked
parameter_list|()
block|{
name|newDialog
argument_list|(
name|Qt
operator|::
name|WindowModal
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|function|on_windowModalChildButton_clicked
name|void
name|on_windowModalChildButton_clicked
parameter_list|()
block|{
name|newChildWidget
argument_list|(
name|Qt
operator|::
name|WindowModal
argument_list|)
expr_stmt|;
block|}
DECL|function|on_applicationModalButton_clicked
name|void
name|on_applicationModalButton_clicked
parameter_list|()
block|{
name|newDialog
argument_list|(
name|Qt
operator|::
name|ApplicationModal
argument_list|)
expr_stmt|;
block|}
DECL|function|on_applicationModalNoParentButton_clicked
name|void
name|on_applicationModalNoParentButton_clicked
parameter_list|()
block|{
name|newDialog
argument_list|(
name|Qt
operator|::
name|ApplicationModal
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|function|on_applicationModalChildButton_clicked
name|void
name|on_applicationModalChildButton_clicked
parameter_list|()
block|{
name|newChildWidget
argument_list|(
name|Qt
operator|::
name|ApplicationModal
argument_list|)
expr_stmt|;
block|}
private|private:
DECL|function|newDialog
name|void
name|newDialog
parameter_list|(
name|Qt
operator|::
name|WindowModality
name|windowModality
parameter_list|,
name|bool
name|withParent
init|=
literal|true
parameter_list|)
block|{
name|Dialog
modifier|*
name|dialog
init|=
operator|new
name|Dialog
argument_list|(
name|withParent
condition|?
name|this
else|:
literal|0
argument_list|)
decl_stmt|;
name|dialog
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_DeleteOnClose
argument_list|)
expr_stmt|;
name|dialog
operator|->
name|setWindowModality
argument_list|(
name|windowModality
argument_list|)
expr_stmt|;
if|if
condition|(
name|windowModality
operator|==
name|Qt
operator|::
name|ApplicationModal
operator|&&
name|applicationModalUseExecCheckBox
operator|->
name|isChecked
argument_list|()
condition|)
name|dialog
operator|->
name|exec
argument_list|()
expr_stmt|;
else|else
name|dialog
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
DECL|function|newChildWidget
name|void
name|newChildWidget
parameter_list|(
name|Qt
operator|::
name|WindowModality
name|windowModality
parameter_list|)
block|{
name|QWidget
modifier|*
name|w
init|=
operator|new
name|QWidget
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|w
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_DeleteOnClose
argument_list|)
expr_stmt|;
name|w
operator|->
name|setWindowModality
argument_list|(
name|windowModality
argument_list|)
expr_stmt|;
name|w
operator|->
name|setGeometry
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|w
operator|->
name|show
argument_list|()
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|5000
argument_list|,
name|w
argument_list|,
name|SLOT
argument_list|(
name|close
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|event
name|bool
name|event
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|WindowBlocked
condition|)
name|setPalette
argument_list|(
name|Qt
operator|::
name|darkGray
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|WindowUnblocked
condition|)
name|setPalette
argument_list|(
name|QPalette
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|QWidget
operator|::
name|event
argument_list|(
name|event
argument_list|)
return|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
modifier|*
name|argv
parameter_list|)
block|{
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|Widget
name|widget
decl_stmt|;
name|widget
operator|.
name|show
argument_list|()
expr_stmt|;
return|return
name|app
operator|.
name|exec
argument_list|()
return|;
block|}
end_function
begin_include
include|#
directive|include
file|"main.moc"
end_include
end_unit
