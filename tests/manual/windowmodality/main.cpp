begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"ui_dialog.h"
end_include
begin_include
include|#
directive|include
file|"ui_widget.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_include
include|#
directive|include
file|<QtCore/QTimer>
end_include
begin_include
include|#
directive|include
file|<QColorDialog>
end_include
begin_include
include|#
directive|include
file|<QFileDialog>
end_include
begin_include
include|#
directive|include
file|<QFontDialog>
end_include
begin_include
include|#
directive|include
file|<QPageSetupDialog>
end_include
begin_include
include|#
directive|include
file|<QPrintDialog>
end_include
begin_enum
DECL|enum|DialogType
enum|enum
name|DialogType
block|{
DECL|enumerator|CustomDialogType
name|CustomDialogType
block|,
DECL|enumerator|ColorDialogType
name|ColorDialogType
block|,
DECL|enumerator|FileDialogType
name|FileDialogType
block|,
DECL|enumerator|FontDialogType
name|FontDialogType
block|,
DECL|enumerator|PageSetupDialogType
name|PageSetupDialogType
block|,
DECL|enumerator|PrintDialogType
name|PrintDialogType
block|}
enum|;
end_enum
begin_class
DECL|class|CustomDialog
class|class
name|CustomDialog
super|:
specifier|public
name|QDialog
super|,
specifier|public
name|Ui
operator|::
name|Dialog
block|{
name|Q_OBJECT
public|public:
DECL|function|CustomDialog
name|CustomDialog
parameter_list|(
name|QWidget
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QDialog
argument_list|(
name|parent
argument_list|)
block|{
name|setupUi
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// hide the "Create new dialogs as siblings of this dialog" button when
comment|// we don't have a parent of our own (they would be parentless anyway)
if|if
condition|(
operator|!
name|parent
condition|)
block|{
name|createSiblingDialogCheckBox
operator|->
name|setChecked
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|createSiblingDialogCheckBox
operator|->
name|setVisible
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
private|private
name|slots
private|:
DECL|function|on_modelessCustomDialogButton_clicked
name|void
name|on_modelessCustomDialogButton_clicked
parameter_list|()
block|{
name|newDialog
argument_list|(
name|CustomDialogType
argument_list|,
name|Qt
operator|::
name|NonModal
argument_list|)
expr_stmt|;
block|}
DECL|function|on_modelessColorDialogButton_clicked
name|void
name|on_modelessColorDialogButton_clicked
parameter_list|()
block|{
name|newDialog
argument_list|(
name|ColorDialogType
argument_list|,
name|Qt
operator|::
name|NonModal
argument_list|)
expr_stmt|;
block|}
DECL|function|on_modelessFontDialogButton_clicked
name|void
name|on_modelessFontDialogButton_clicked
parameter_list|()
block|{
name|newDialog
argument_list|(
name|FontDialogType
argument_list|,
name|Qt
operator|::
name|NonModal
argument_list|)
expr_stmt|;
block|}
DECL|function|on_windowModalCustomDialogButton_clicked
name|void
name|on_windowModalCustomDialogButton_clicked
parameter_list|()
block|{
name|newDialog
argument_list|(
name|CustomDialogType
argument_list|,
name|Qt
operator|::
name|WindowModal
argument_list|)
expr_stmt|;
block|}
DECL|function|on_windowModalColorDialogButton_clicked
name|void
name|on_windowModalColorDialogButton_clicked
parameter_list|()
block|{
name|newDialog
argument_list|(
name|ColorDialogType
argument_list|,
name|Qt
operator|::
name|WindowModal
argument_list|)
expr_stmt|;
block|}
DECL|function|on_windowModalFileDialogButton_clicked
name|void
name|on_windowModalFileDialogButton_clicked
parameter_list|()
block|{
name|newDialog
argument_list|(
name|FileDialogType
argument_list|,
name|Qt
operator|::
name|WindowModal
argument_list|)
expr_stmt|;
block|}
DECL|function|on_windowModalFontDialogButton_clicked
name|void
name|on_windowModalFontDialogButton_clicked
parameter_list|()
block|{
name|newDialog
argument_list|(
name|FontDialogType
argument_list|,
name|Qt
operator|::
name|WindowModal
argument_list|)
expr_stmt|;
block|}
DECL|function|on_windowModalPageSetupDialogButton_clicked
name|void
name|on_windowModalPageSetupDialogButton_clicked
parameter_list|()
block|{
name|newDialog
argument_list|(
name|PageSetupDialogType
argument_list|,
name|Qt
operator|::
name|WindowModal
argument_list|)
expr_stmt|;
block|}
DECL|function|on_windowModalPrintDialogButton_clicked
name|void
name|on_windowModalPrintDialogButton_clicked
parameter_list|()
block|{
name|newDialog
argument_list|(
name|PrintDialogType
argument_list|,
name|Qt
operator|::
name|WindowModal
argument_list|)
expr_stmt|;
block|}
DECL|function|on_applicationModalCustomDialogButton_clicked
name|void
name|on_applicationModalCustomDialogButton_clicked
parameter_list|()
block|{
name|newDialog
argument_list|(
name|CustomDialogType
argument_list|,
name|Qt
operator|::
name|ApplicationModal
argument_list|)
expr_stmt|;
block|}
DECL|function|on_applicationModalColorDialogButton_clicked
name|void
name|on_applicationModalColorDialogButton_clicked
parameter_list|()
block|{
name|newDialog
argument_list|(
name|ColorDialogType
argument_list|,
name|Qt
operator|::
name|ApplicationModal
argument_list|)
expr_stmt|;
block|}
DECL|function|on_applicationModalFileDialogButton_clicked
name|void
name|on_applicationModalFileDialogButton_clicked
parameter_list|()
block|{
name|newDialog
argument_list|(
name|FileDialogType
argument_list|,
name|Qt
operator|::
name|ApplicationModal
argument_list|)
expr_stmt|;
block|}
DECL|function|on_applicationModalFontDialogButton_clicked
name|void
name|on_applicationModalFontDialogButton_clicked
parameter_list|()
block|{
name|newDialog
argument_list|(
name|FontDialogType
argument_list|,
name|Qt
operator|::
name|ApplicationModal
argument_list|)
expr_stmt|;
block|}
DECL|function|on_applicationModalPageSetupDialogButton_clicked
name|void
name|on_applicationModalPageSetupDialogButton_clicked
parameter_list|()
block|{
name|newDialog
argument_list|(
name|PageSetupDialogType
argument_list|,
name|Qt
operator|::
name|ApplicationModal
argument_list|)
expr_stmt|;
block|}
DECL|function|on_applicationModalPrintDialogButton_clicked
name|void
name|on_applicationModalPrintDialogButton_clicked
parameter_list|()
block|{
name|newDialog
argument_list|(
name|PrintDialogType
argument_list|,
name|Qt
operator|::
name|ApplicationModal
argument_list|)
expr_stmt|;
block|}
private|private:
DECL|function|newDialog
name|void
name|newDialog
parameter_list|(
name|DialogType
name|dialogType
parameter_list|,
name|Qt
operator|::
name|WindowModality
name|windowModality
parameter_list|)
block|{
name|QWidget
modifier|*
name|parent
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|useThisAsParentCheckBox
operator|->
name|isChecked
argument_list|()
condition|)
name|parent
operator|=
name|this
expr_stmt|;
elseif|else
if|if
condition|(
name|createSiblingDialogCheckBox
operator|->
name|isChecked
argument_list|()
condition|)
name|parent
operator|=
name|parentWidget
argument_list|()
expr_stmt|;
name|QDialog
modifier|*
name|dialog
decl_stmt|;
switch|switch
condition|(
name|dialogType
condition|)
block|{
case|case
name|CustomDialogType
case|:
name|dialog
operator|=
operator|new
name|CustomDialog
argument_list|(
name|parent
argument_list|)
expr_stmt|;
break|break;
case|case
name|ColorDialogType
case|:
if|if
condition|(
name|windowModality
operator|==
name|Qt
operator|::
name|ApplicationModal
operator|&&
name|applicationModalUseExecCheckBox
operator|->
name|isChecked
argument_list|()
condition|)
block|{
name|QColorDialog
operator|::
name|getColor
argument_list|(
name|Qt
operator|::
name|white
argument_list|,
name|parent
argument_list|)
expr_stmt|;
return|return;
block|}
name|dialog
operator|=
operator|new
name|QColorDialog
argument_list|(
name|parent
argument_list|)
expr_stmt|;
break|break;
case|case
name|FileDialogType
case|:
if|if
condition|(
name|windowModality
operator|==
name|Qt
operator|::
name|ApplicationModal
operator|&&
name|applicationModalUseExecCheckBox
operator|->
name|isChecked
argument_list|()
condition|)
block|{
name|QFileDialog
operator|::
name|getOpenFileName
argument_list|(
name|parent
argument_list|)
expr_stmt|;
return|return;
block|}
name|dialog
operator|=
operator|new
name|QFileDialog
argument_list|(
name|parent
argument_list|)
expr_stmt|;
break|break;
case|case
name|FontDialogType
case|:
if|if
condition|(
name|windowModality
operator|==
name|Qt
operator|::
name|ApplicationModal
operator|&&
name|applicationModalUseExecCheckBox
operator|->
name|isChecked
argument_list|()
condition|)
block|{
name|bool
name|unused
init|=
literal|false
decl_stmt|;
name|QFontDialog
operator|::
name|getFont
argument_list|(
operator|&
name|unused
argument_list|,
name|parent
argument_list|)
expr_stmt|;
return|return;
block|}
name|dialog
operator|=
operator|new
name|QFontDialog
argument_list|(
name|parent
argument_list|)
expr_stmt|;
break|break;
case|case
name|PageSetupDialogType
case|:
name|dialog
operator|=
operator|new
name|QPageSetupDialog
argument_list|(
name|parent
argument_list|)
expr_stmt|;
break|break;
case|case
name|PrintDialogType
case|:
name|dialog
operator|=
operator|new
name|QPrintDialog
argument_list|(
name|parent
argument_list|)
expr_stmt|;
break|break;
block|}
name|dialog
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_DeleteOnClose
argument_list|)
expr_stmt|;
name|dialog
operator|->
name|setWindowModality
argument_list|(
name|windowModality
argument_list|)
expr_stmt|;
if|if
condition|(
name|windowModality
operator|==
name|Qt
operator|::
name|ApplicationModal
operator|&&
name|applicationModalUseExecCheckBox
operator|->
name|isChecked
argument_list|()
condition|)
name|dialog
operator|->
name|exec
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|windowModality
operator|==
name|Qt
operator|::
name|WindowModal
condition|)
name|dialog
operator|->
name|open
argument_list|()
expr_stmt|;
else|else
name|dialog
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
DECL|function|event
name|bool
name|event
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|WindowBlocked
condition|)
name|setPalette
argument_list|(
name|Qt
operator|::
name|darkGray
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|WindowUnblocked
condition|)
name|setPalette
argument_list|(
name|QPalette
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|QWidget
operator|::
name|event
argument_list|(
name|event
argument_list|)
return|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|Widget
class|class
name|Widget
super|:
specifier|public
name|QWidget
super|,
specifier|public
name|Ui
operator|::
name|Widget
block|{
name|Q_OBJECT
public|public:
DECL|function|Widget
name|Widget
parameter_list|(
name|QWidget
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
block|{
name|setupUi
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
private|private
name|slots
private|:
DECL|function|on_windowButton_clicked
name|void
name|on_windowButton_clicked
parameter_list|()
block|{
operator|(
operator|new
name|Widget
operator|)
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
DECL|function|on_groupLeaderButton_clicked
name|void
name|on_groupLeaderButton_clicked
parameter_list|()
block|{
name|Widget
modifier|*
name|w
init|=
operator|new
name|Widget
decl_stmt|;
name|w
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_GroupLeader
argument_list|)
expr_stmt|;
name|w
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
DECL|function|on_modelessCustomDialogButton_clicked
name|void
name|on_modelessCustomDialogButton_clicked
parameter_list|()
block|{
name|newDialog
argument_list|(
name|CustomDialogType
argument_list|,
name|Qt
operator|::
name|NonModal
argument_list|)
expr_stmt|;
block|}
DECL|function|on_modelessColorDialogButton_clicked
name|void
name|on_modelessColorDialogButton_clicked
parameter_list|()
block|{
name|newDialog
argument_list|(
name|ColorDialogType
argument_list|,
name|Qt
operator|::
name|NonModal
argument_list|)
expr_stmt|;
block|}
DECL|function|on_modelessFontDialogButton_clicked
name|void
name|on_modelessFontDialogButton_clicked
parameter_list|()
block|{
name|newDialog
argument_list|(
name|FontDialogType
argument_list|,
name|Qt
operator|::
name|NonModal
argument_list|)
expr_stmt|;
block|}
DECL|function|on_windowModalCustomDialogButton_clicked
name|void
name|on_windowModalCustomDialogButton_clicked
parameter_list|()
block|{
name|newDialog
argument_list|(
name|CustomDialogType
argument_list|,
name|Qt
operator|::
name|WindowModal
argument_list|)
expr_stmt|;
block|}
DECL|function|on_windowModalColorDialogButton_clicked
name|void
name|on_windowModalColorDialogButton_clicked
parameter_list|()
block|{
name|newDialog
argument_list|(
name|ColorDialogType
argument_list|,
name|Qt
operator|::
name|WindowModal
argument_list|)
expr_stmt|;
block|}
DECL|function|on_windowModalFileDialogButton_clicked
name|void
name|on_windowModalFileDialogButton_clicked
parameter_list|()
block|{
name|newDialog
argument_list|(
name|FileDialogType
argument_list|,
name|Qt
operator|::
name|WindowModal
argument_list|)
expr_stmt|;
block|}
DECL|function|on_windowModalFontDialogButton_clicked
name|void
name|on_windowModalFontDialogButton_clicked
parameter_list|()
block|{
name|newDialog
argument_list|(
name|FontDialogType
argument_list|,
name|Qt
operator|::
name|WindowModal
argument_list|)
expr_stmt|;
block|}
DECL|function|on_windowModalPageSetupDialogButton_clicked
name|void
name|on_windowModalPageSetupDialogButton_clicked
parameter_list|()
block|{
name|newDialog
argument_list|(
name|PageSetupDialogType
argument_list|,
name|Qt
operator|::
name|WindowModal
argument_list|)
expr_stmt|;
block|}
DECL|function|on_windowModalPrintDialogButton_clicked
name|void
name|on_windowModalPrintDialogButton_clicked
parameter_list|()
block|{
name|newDialog
argument_list|(
name|PrintDialogType
argument_list|,
name|Qt
operator|::
name|WindowModal
argument_list|)
expr_stmt|;
block|}
DECL|function|on_applicationModalCustomDialogButton_clicked
name|void
name|on_applicationModalCustomDialogButton_clicked
parameter_list|()
block|{
name|newDialog
argument_list|(
name|CustomDialogType
argument_list|,
name|Qt
operator|::
name|ApplicationModal
argument_list|)
expr_stmt|;
block|}
DECL|function|on_applicationModalColorDialogButton_clicked
name|void
name|on_applicationModalColorDialogButton_clicked
parameter_list|()
block|{
name|newDialog
argument_list|(
name|ColorDialogType
argument_list|,
name|Qt
operator|::
name|ApplicationModal
argument_list|)
expr_stmt|;
block|}
DECL|function|on_applicationModalFileDialogButton_clicked
name|void
name|on_applicationModalFileDialogButton_clicked
parameter_list|()
block|{
name|newDialog
argument_list|(
name|FileDialogType
argument_list|,
name|Qt
operator|::
name|ApplicationModal
argument_list|)
expr_stmt|;
block|}
DECL|function|on_applicationModalFontDialogButton_clicked
name|void
name|on_applicationModalFontDialogButton_clicked
parameter_list|()
block|{
name|newDialog
argument_list|(
name|FontDialogType
argument_list|,
name|Qt
operator|::
name|ApplicationModal
argument_list|)
expr_stmt|;
block|}
DECL|function|on_applicationModalPageSetupDialogButton_clicked
name|void
name|on_applicationModalPageSetupDialogButton_clicked
parameter_list|()
block|{
name|newDialog
argument_list|(
name|PageSetupDialogType
argument_list|,
name|Qt
operator|::
name|ApplicationModal
argument_list|)
expr_stmt|;
block|}
DECL|function|on_applicationModalPrintDialogButton_clicked
name|void
name|on_applicationModalPrintDialogButton_clicked
parameter_list|()
block|{
name|newDialog
argument_list|(
name|PrintDialogType
argument_list|,
name|Qt
operator|::
name|ApplicationModal
argument_list|)
expr_stmt|;
block|}
private|private:
DECL|function|newDialog
name|void
name|newDialog
parameter_list|(
name|DialogType
name|dialogType
parameter_list|,
name|Qt
operator|::
name|WindowModality
name|windowModality
parameter_list|)
block|{
name|QWidget
modifier|*
name|parent
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|useThisAsParentCheckBox
operator|->
name|isChecked
argument_list|()
condition|)
name|parent
operator|=
name|this
expr_stmt|;
name|QDialog
modifier|*
name|dialog
decl_stmt|;
switch|switch
condition|(
name|dialogType
condition|)
block|{
case|case
name|CustomDialogType
case|:
name|dialog
operator|=
operator|new
name|CustomDialog
argument_list|(
name|parent
argument_list|)
expr_stmt|;
break|break;
case|case
name|ColorDialogType
case|:
if|if
condition|(
name|windowModality
operator|==
name|Qt
operator|::
name|ApplicationModal
operator|&&
name|applicationModalUseExecCheckBox
operator|->
name|isChecked
argument_list|()
condition|)
block|{
name|QColorDialog
operator|::
name|getColor
argument_list|(
name|Qt
operator|::
name|white
argument_list|,
name|parent
argument_list|)
expr_stmt|;
return|return;
block|}
name|dialog
operator|=
operator|new
name|QColorDialog
argument_list|(
name|parent
argument_list|)
expr_stmt|;
break|break;
case|case
name|FileDialogType
case|:
if|if
condition|(
name|windowModality
operator|==
name|Qt
operator|::
name|ApplicationModal
operator|&&
name|applicationModalUseExecCheckBox
operator|->
name|isChecked
argument_list|()
condition|)
block|{
name|QFileDialog
operator|::
name|getOpenFileName
argument_list|(
name|parent
argument_list|)
expr_stmt|;
return|return;
block|}
name|dialog
operator|=
operator|new
name|QFileDialog
argument_list|(
name|parent
argument_list|)
expr_stmt|;
break|break;
case|case
name|FontDialogType
case|:
if|if
condition|(
name|windowModality
operator|==
name|Qt
operator|::
name|ApplicationModal
operator|&&
name|applicationModalUseExecCheckBox
operator|->
name|isChecked
argument_list|()
condition|)
block|{
name|bool
name|unused
init|=
literal|false
decl_stmt|;
name|QFontDialog
operator|::
name|getFont
argument_list|(
operator|&
name|unused
argument_list|,
name|parent
argument_list|)
expr_stmt|;
return|return;
block|}
name|dialog
operator|=
operator|new
name|QFontDialog
argument_list|(
name|parent
argument_list|)
expr_stmt|;
break|break;
case|case
name|PageSetupDialogType
case|:
name|dialog
operator|=
operator|new
name|QPageSetupDialog
argument_list|(
name|parent
argument_list|)
expr_stmt|;
break|break;
case|case
name|PrintDialogType
case|:
name|dialog
operator|=
operator|new
name|QPrintDialog
argument_list|(
name|parent
argument_list|)
expr_stmt|;
break|break;
block|}
name|dialog
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_DeleteOnClose
argument_list|)
expr_stmt|;
name|dialog
operator|->
name|setWindowModality
argument_list|(
name|windowModality
argument_list|)
expr_stmt|;
if|if
condition|(
name|windowModality
operator|==
name|Qt
operator|::
name|ApplicationModal
operator|&&
name|applicationModalUseExecCheckBox
operator|->
name|isChecked
argument_list|()
condition|)
name|dialog
operator|->
name|exec
argument_list|()
expr_stmt|;
elseif|else
if|if
condition|(
name|windowModality
operator|==
name|Qt
operator|::
name|WindowModal
condition|)
name|dialog
operator|->
name|open
argument_list|()
expr_stmt|;
else|else
name|dialog
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
DECL|function|event
name|bool
name|event
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|WindowBlocked
condition|)
name|setPalette
argument_list|(
name|Qt
operator|::
name|darkGray
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|WindowUnblocked
condition|)
name|setPalette
argument_list|(
name|QPalette
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|QWidget
operator|::
name|event
argument_list|(
name|event
argument_list|)
return|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
modifier|*
name|argv
parameter_list|)
block|{
name|QApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|Widget
name|widget
decl_stmt|;
name|widget
operator|.
name|show
argument_list|()
expr_stmt|;
return|return
name|app
operator|.
name|exec
argument_list|()
return|;
block|}
end_function
begin_include
include|#
directive|include
file|"main.moc"
end_include
end_unit
