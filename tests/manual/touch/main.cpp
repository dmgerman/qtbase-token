begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QApplication>
end_include
begin_include
include|#
directive|include
file|<QLabel>
end_include
begin_include
include|#
directive|include
file|<QMenu>
end_include
begin_include
include|#
directive|include
file|<QMenuBar>
end_include
begin_include
include|#
directive|include
file|<QAction>
end_include
begin_include
include|#
directive|include
file|<QMainWindow>
end_include
begin_include
include|#
directive|include
file|<QSplitter>
end_include
begin_include
include|#
directive|include
file|<QVector>
end_include
begin_include
include|#
directive|include
file|<QCommandLineOption>
end_include
begin_include
include|#
directive|include
file|<QCommandLineParser>
end_include
begin_include
include|#
directive|include
file|<QPlainTextEdit>
end_include
begin_include
include|#
directive|include
file|<QPaintEvent>
end_include
begin_include
include|#
directive|include
file|<QScreen>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<QTextStream>
end_include
begin_typedef
DECL|typedef|EventTypeVector
typedef|typedef
name|QVector
argument_list|<
name|QEvent
operator|::
name|Type
argument_list|>
name|EventTypeVector
typedef|;
end_typedef
begin_class
DECL|class|EventFilter
class|class
name|EventFilter
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|EventFilter
specifier|explicit
name|EventFilter
parameter_list|(
specifier|const
name|EventTypeVector
modifier|&
name|types
parameter_list|,
name|QObject
modifier|*
name|p
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|p
argument_list|)
member_init_list|,
name|m_types
argument_list|(
name|types
argument_list|)
block|{}
DECL|member|Q_DECL_OVERRIDE
name|bool
name|eventFilter
parameter_list|(
name|QObject
modifier|*
parameter_list|,
name|QEvent
modifier|*
parameter_list|)
name|Q_DECL_OVERRIDE
function_decl|;
signals|signals:
name|void
name|eventReceived
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|)
function_decl|;
private|private:
DECL|member|m_types
specifier|const
name|EventTypeVector
name|m_types
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|eventFilter
name|bool
name|EventFilter
operator|::
name|eventFilter
parameter_list|(
name|QObject
modifier|*
name|o
parameter_list|,
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
specifier|static
name|int
name|n
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|m_types
operator|.
name|contains
argument_list|(
name|e
operator|->
name|type
argument_list|()
argument_list|)
condition|)
block|{
name|QString
name|message
decl_stmt|;
name|QDebug
argument_list|(
operator|&
name|message
argument_list|)
operator|<<
literal|'#'
operator|<<
name|n
operator|++
operator|<<
literal|' '
operator|<<
name|o
operator|->
name|objectName
argument_list|()
operator|<<
literal|' '
operator|<<
name|e
expr_stmt|;
emit|emit
name|eventReceived
argument_list|(
name|message
argument_list|)
emit|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_class
DECL|class|TouchTestWidget
class|class
name|TouchTestWidget
super|:
specifier|public
name|QWidget
block|{
public|public:
DECL|function|TouchTestWidget
specifier|explicit
name|TouchTestWidget
parameter_list|(
name|QWidget
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
block|{
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_AcceptTouchEvents
argument_list|)
expr_stmt|;
block|}
name|bool
name|event
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
name|Q_DECL_OVERRIDE
block|{
switch|switch
condition|(
name|event
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|TouchBegin
case|:
case|case
name|QEvent
operator|::
name|TouchUpdate
case|:
case|case
name|QEvent
operator|::
name|TouchEnd
case|:
name|event
operator|->
name|accept
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
default|default:
break|break;
block|}
return|return
name|QWidget
operator|::
name|event
argument_list|(
name|event
argument_list|)
return|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|MainWindow
class|class
name|MainWindow
super|:
specifier|public
name|QMainWindow
block|{
name|Q_OBJECT
public|public:
name|MainWindow
parameter_list|()
constructor_decl|;
DECL|function|touchWidget
name|QWidget
modifier|*
name|touchWidget
parameter_list|()
specifier|const
block|{
return|return
name|m_touchWidget
return|;
block|}
public|public
name|slots
public|:
DECL|function|appendToLog
name|void
name|appendToLog
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|m_logTextEdit
operator|->
name|appendPlainText
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
name|void
name|dumpTouchDevices
parameter_list|()
function_decl|;
private|private:
DECL|member|m_touchWidget
name|QWidget
modifier|*
name|m_touchWidget
decl_stmt|;
DECL|member|m_logTextEdit
name|QPlainTextEdit
modifier|*
name|m_logTextEdit
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|MainWindow
name|MainWindow
operator|::
name|MainWindow
parameter_list|()
member_init_list|:
name|m_touchWidget
argument_list|(
operator|new
name|TouchTestWidget
argument_list|)
member_init_list|,
name|m_logTextEdit
argument_list|(
operator|new
name|QPlainTextEdit
argument_list|)
block|{
name|setWindowTitle
argument_list|(
name|QStringLiteral
argument_list|(
literal|"Touch Event Tester "
argument_list|)
operator|+
name|QT_VERSION_STR
argument_list|)
expr_stmt|;
name|setObjectName
argument_list|(
literal|"MainWin"
argument_list|)
expr_stmt|;
name|QMenu
modifier|*
name|fileMenu
init|=
name|menuBar
argument_list|()
operator|->
name|addMenu
argument_list|(
literal|"File"
argument_list|)
decl_stmt|;
name|QAction
modifier|*
name|da
init|=
name|fileMenu
operator|->
name|addAction
argument_list|(
name|QStringLiteral
argument_list|(
literal|"Dump devices"
argument_list|)
argument_list|)
decl_stmt|;
name|da
operator|->
name|setShortcut
argument_list|(
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|CTRL
operator|+
name|Qt
operator|::
name|Key_D
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|da
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|dumpTouchDevices
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QAction
modifier|*
name|qa
init|=
name|fileMenu
operator|->
name|addAction
argument_list|(
name|QStringLiteral
argument_list|(
literal|"Quit"
argument_list|)
argument_list|)
decl_stmt|;
name|qa
operator|->
name|setShortcut
argument_list|(
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|CTRL
operator|+
name|Qt
operator|::
name|Key_Q
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|qa
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|close
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QSplitter
modifier|*
name|mainSplitter
init|=
operator|new
name|QSplitter
argument_list|(
name|Qt
operator|::
name|Vertical
argument_list|)
decl_stmt|;
name|m_touchWidget
operator|->
name|setObjectName
argument_list|(
name|QStringLiteral
argument_list|(
literal|"TouchWidget"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QSize
name|screenSize
init|=
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
operator|->
name|availableGeometry
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|m_touchWidget
operator|->
name|setMinimumSize
argument_list|(
name|screenSize
operator|/
literal|2
argument_list|)
expr_stmt|;
name|mainSplitter
operator|->
name|addWidget
argument_list|(
name|m_touchWidget
argument_list|)
expr_stmt|;
name|m_logTextEdit
operator|->
name|setObjectName
argument_list|(
name|QStringLiteral
argument_list|(
literal|"LogTextEdit"
argument_list|)
argument_list|)
expr_stmt|;
name|m_logTextEdit
operator|->
name|setMinimumHeight
argument_list|(
name|screenSize
operator|.
name|height
argument_list|()
operator|/
literal|4
argument_list|)
expr_stmt|;
name|mainSplitter
operator|->
name|addWidget
argument_list|(
name|m_logTextEdit
argument_list|)
expr_stmt|;
name|setCentralWidget
argument_list|(
name|mainSplitter
argument_list|)
expr_stmt|;
name|dumpTouchDevices
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|dumpTouchDevices
name|void
name|MainWindow
operator|::
name|dumpTouchDevices
parameter_list|()
block|{
name|QString
name|message
decl_stmt|;
name|QDebug
name|debug
argument_list|(
operator|&
name|message
argument_list|)
decl_stmt|;
specifier|const
name|QList
argument_list|<
specifier|const
name|QTouchDevice
modifier|*
argument_list|>
name|devices
init|=
name|QTouchDevice
operator|::
name|devices
argument_list|()
decl_stmt|;
name|debug
operator|<<
name|devices
operator|.
name|size
argument_list|()
operator|<<
literal|"Device(s):\n"
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|devices
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|debug
operator|<<
literal|"Device #"
operator|<<
name|i
operator|<<
name|devices
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|<<
literal|'\n'
expr_stmt|;
name|appendToLog
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
name|argv
index|[]
parameter_list|)
block|{
name|QApplication
name|a
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|QCommandLineParser
name|parser
decl_stmt|;
name|parser
operator|.
name|setApplicationDescription
argument_list|(
name|QStringLiteral
argument_list|(
literal|"Touch/Mouse tester"
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|addHelpOption
argument_list|()
expr_stmt|;
specifier|const
name|QCommandLineOption
name|mouseMoveOption
argument_list|(
name|QStringLiteral
argument_list|(
literal|"mousemove"
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Log mouse move events"
argument_list|)
argument_list|)
decl_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|mouseMoveOption
argument_list|)
expr_stmt|;
specifier|const
name|QCommandLineOption
name|globalFilterOption
argument_list|(
name|QStringLiteral
argument_list|(
literal|"global"
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Global event filter"
argument_list|)
argument_list|)
decl_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|globalFilterOption
argument_list|)
expr_stmt|;
name|parser
operator|.
name|process
argument_list|(
name|QApplication
operator|::
name|arguments
argument_list|()
argument_list|)
expr_stmt|;
name|MainWindow
name|w
decl_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
specifier|const
name|QSize
name|pos
init|=
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
operator|->
name|availableGeometry
argument_list|()
operator|.
name|size
argument_list|()
operator|-
name|w
operator|.
name|size
argument_list|()
decl_stmt|;
name|w
operator|.
name|move
argument_list|(
name|pos
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|,
name|pos
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
name|EventTypeVector
name|eventTypes
decl_stmt|;
name|eventTypes
operator|<<
name|QEvent
operator|::
name|MouseButtonPress
operator|<<
name|QEvent
operator|::
name|MouseButtonRelease
operator|<<
name|QEvent
operator|::
name|MouseButtonDblClick
operator|<<
name|QEvent
operator|::
name|TouchBegin
operator|<<
name|QEvent
operator|::
name|TouchUpdate
operator|<<
name|QEvent
operator|::
name|TouchEnd
expr_stmt|;
if|if
condition|(
name|parser
operator|.
name|isSet
argument_list|(
name|mouseMoveOption
argument_list|)
condition|)
name|eventTypes
operator|<<
name|QEvent
operator|::
name|MouseMove
expr_stmt|;
name|QObject
modifier|*
name|filterTarget
init|=
name|parser
operator|.
name|isSet
argument_list|(
name|globalFilterOption
argument_list|)
condition|?
cast|static_cast
argument_list|<
name|QObject
operator|*
argument_list|>
argument_list|(
operator|&
name|a
argument_list|)
else|:
cast|static_cast
argument_list|<
name|QObject
operator|*
argument_list|>
argument_list|(
name|w
operator|.
name|touchWidget
argument_list|()
argument_list|)
decl_stmt|;
name|EventFilter
modifier|*
name|filter
init|=
operator|new
name|EventFilter
argument_list|(
name|eventTypes
argument_list|,
name|filterTarget
argument_list|)
decl_stmt|;
name|filterTarget
operator|->
name|installEventFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|filter
argument_list|,
name|SIGNAL
argument_list|(
name|eventReceived
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
operator|&
name|w
argument_list|,
name|SLOT
argument_list|(
name|appendToLog
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|a
operator|.
name|exec
argument_list|()
return|;
block|}
end_function
begin_include
include|#
directive|include
file|"main.moc"
end_include
end_unit
