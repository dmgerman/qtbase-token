begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:GPL-EXCEPT$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3 as published by the Free Software ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QApplication>
end_include
begin_include
include|#
directive|include
file|<QGesture>
end_include
begin_include
include|#
directive|include
file|<QLabel>
end_include
begin_include
include|#
directive|include
file|<QMenu>
end_include
begin_include
include|#
directive|include
file|<QMenuBar>
end_include
begin_include
include|#
directive|include
file|<QAction>
end_include
begin_include
include|#
directive|include
file|<QMainWindow>
end_include
begin_include
include|#
directive|include
file|<QSplitter>
end_include
begin_include
include|#
directive|include
file|<QToolBar>
end_include
begin_include
include|#
directive|include
file|<QVector>
end_include
begin_include
include|#
directive|include
file|<QCommandLineOption>
end_include
begin_include
include|#
directive|include
file|<QCommandLineParser>
end_include
begin_include
include|#
directive|include
file|<QPlainTextEdit>
end_include
begin_include
include|#
directive|include
file|<QPainter>
end_include
begin_include
include|#
directive|include
file|<QPainterPath>
end_include
begin_include
include|#
directive|include
file|<QPaintEvent>
end_include
begin_include
include|#
directive|include
file|<QScreen>
end_include
begin_include
include|#
directive|include
file|<QSharedPointer>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<QTextStream>
end_include
begin_decl_stmt
DECL|variable|optIgnoreTouch
name|bool
name|optIgnoreTouch
init|=
literal|false
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|optGestures
name|QVector
argument_list|<
name|Qt
operator|::
name|GestureType
argument_list|>
name|optGestures
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|drawCircle
specifier|static
specifier|inline
name|void
name|drawCircle
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|center
parameter_list|,
name|qreal
name|radius
parameter_list|,
specifier|const
name|QColor
modifier|&
name|color
parameter_list|,
name|QPainter
modifier|&
name|painter
parameter_list|)
block|{
specifier|const
name|QPen
name|oldPen
init|=
name|painter
operator|.
name|pen
argument_list|()
decl_stmt|;
name|QPen
name|pen
init|=
name|oldPen
decl_stmt|;
name|pen
operator|.
name|setColor
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|painter
operator|.
name|setPen
argument_list|(
name|pen
argument_list|)
expr_stmt|;
name|painter
operator|.
name|drawEllipse
argument_list|(
name|center
argument_list|,
name|radius
argument_list|,
name|radius
argument_list|)
expr_stmt|;
name|painter
operator|.
name|setPen
argument_list|(
name|oldPen
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fillCircle
specifier|static
specifier|inline
name|void
name|fillCircle
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|center
parameter_list|,
name|qreal
name|radius
parameter_list|,
specifier|const
name|QColor
modifier|&
name|color
parameter_list|,
name|QPainter
modifier|&
name|painter
parameter_list|)
block|{
name|QPainterPath
name|painterPath
decl_stmt|;
name|painterPath
operator|.
name|addEllipse
argument_list|(
name|center
argument_list|,
name|radius
argument_list|,
name|radius
argument_list|)
expr_stmt|;
name|painter
operator|.
name|fillPath
argument_list|(
name|painterPath
argument_list|,
name|color
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Draws an arrow assuming a mathematical coordinate system, Y axis pointing
end_comment
begin_comment
comment|// upwards, angle counterclockwise (that is, 45' is pointing up/right).
end_comment
begin_function
DECL|function|drawArrow
specifier|static
name|void
name|drawArrow
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|center
parameter_list|,
name|qreal
name|length
parameter_list|,
name|qreal
name|angleDegrees
parameter_list|,
specifier|const
name|QColor
modifier|&
name|color
parameter_list|,
name|int
name|arrowSize
parameter_list|,
name|QPainter
modifier|&
name|painter
parameter_list|)
block|{
name|painter
operator|.
name|save
argument_list|()
expr_stmt|;
name|painter
operator|.
name|translate
argument_list|(
name|center
argument_list|)
expr_stmt|;
comment|// Transform center to (0,0) rotate and draw arrow pointing right.
name|painter
operator|.
name|rotate
argument_list|(
operator|-
name|angleDegrees
argument_list|)
expr_stmt|;
name|QPen
name|pen
init|=
name|painter
operator|.
name|pen
argument_list|()
decl_stmt|;
name|pen
operator|.
name|setColor
argument_list|(
name|color
argument_list|)
expr_stmt|;
name|pen
operator|.
name|setWidth
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|painter
operator|.
name|setPen
argument_list|(
name|pen
argument_list|)
expr_stmt|;
specifier|const
name|QPointF
name|endPoint
argument_list|(
name|length
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|painter
operator|.
name|drawLine
argument_list|(
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|endPoint
argument_list|)
expr_stmt|;
name|painter
operator|.
name|drawLine
argument_list|(
name|endPoint
argument_list|,
name|endPoint
operator|+
name|QPoint
argument_list|(
operator|-
name|arrowSize
argument_list|,
operator|-
name|arrowSize
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|.
name|drawLine
argument_list|(
name|endPoint
argument_list|,
name|endPoint
operator|+
name|QPoint
argument_list|(
operator|-
name|arrowSize
argument_list|,
name|arrowSize
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|.
name|restore
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|// Hierarchy of classes containing gesture parameters and drawing functionality.
end_comment
begin_class
DECL|class|Gesture
class|class
name|Gesture
block|{
name|Q_DISABLE_COPY
parameter_list|(
name|Gesture
parameter_list|)
specifier|public
private|:
specifier|static
name|Gesture
modifier|*
name|fromQGesture
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|w
parameter_list|,
specifier|const
name|QGesture
modifier|*
name|source
parameter_list|)
function_decl|;
DECL|function|~Gesture
specifier|virtual
name|~
name|Gesture
parameter_list|()
block|{}
specifier|virtual
name|void
name|draw
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|,
name|QPainter
modifier|&
name|painter
parameter_list|)
specifier|const
function_decl|=
literal|0
function_decl|;
protected|protected:
DECL|function|Gesture
specifier|explicit
name|Gesture
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|w
parameter_list|,
specifier|const
name|QGesture
modifier|*
name|source
parameter_list|)
member_init_list|:
name|m_type
argument_list|(
name|source
operator|->
name|gestureType
argument_list|()
argument_list|)
member_init_list|,
name|m_hotSpot
argument_list|(
name|w
operator|->
name|mapFromGlobal
argument_list|(
name|source
operator|->
name|hotSpot
argument_list|()
operator|.
name|toPoint
argument_list|()
argument_list|)
argument_list|)
member_init_list|,
name|m_hasHotSpot
argument_list|(
name|source
operator|->
name|hasHotSpot
argument_list|()
argument_list|)
block|{}
DECL|function|drawHotSpot
name|QPointF
name|drawHotSpot
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|,
name|QPainter
modifier|&
name|painter
parameter_list|)
specifier|const
block|{
specifier|const
name|QPointF
name|h
init|=
name|m_hasHotSpot
condition|?
name|m_hotSpot
else|:
name|rect
operator|.
name|center
argument_list|()
decl_stmt|;
name|painter
operator|.
name|drawEllipse
argument_list|(
name|h
argument_list|,
literal|15
argument_list|,
literal|15
argument_list|)
expr_stmt|;
return|return
name|h
return|;
block|}
private|private:
DECL|member|m_type
name|Qt
operator|::
name|GestureType
name|m_type
decl_stmt|;
DECL|member|m_hotSpot
name|QPointF
name|m_hotSpot
decl_stmt|;
DECL|member|m_hasHotSpot
name|bool
name|m_hasHotSpot
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|PanGesture
class|class
name|PanGesture
super|:
specifier|public
name|Gesture
block|{
public|public:
DECL|function|PanGesture
specifier|explicit
name|PanGesture
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|w
parameter_list|,
specifier|const
name|QPanGesture
modifier|*
name|source
parameter_list|)
member_init_list|:
name|Gesture
argument_list|(
name|w
argument_list|,
name|source
argument_list|)
member_init_list|,
name|m_offset
argument_list|(
name|source
operator|->
name|offset
argument_list|()
argument_list|)
block|{}
name|void
name|draw
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|,
name|QPainter
modifier|&
name|painter
parameter_list|)
specifier|const
name|Q_DECL_OVERRIDE
block|{
specifier|const
name|QPointF
name|hotSpot
init|=
name|drawHotSpot
argument_list|(
name|rect
argument_list|,
name|painter
argument_list|)
decl_stmt|;
name|painter
operator|.
name|drawLine
argument_list|(
name|hotSpot
argument_list|,
name|hotSpot
operator|+
name|m_offset
argument_list|)
expr_stmt|;
block|}
private|private:
DECL|member|m_offset
name|QPointF
name|m_offset
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|SwipeGesture
class|class
name|SwipeGesture
super|:
specifier|public
name|Gesture
block|{
public|public:
DECL|function|SwipeGesture
specifier|explicit
name|SwipeGesture
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|w
parameter_list|,
specifier|const
name|QSwipeGesture
modifier|*
name|source
parameter_list|)
member_init_list|:
name|Gesture
argument_list|(
name|w
argument_list|,
name|source
argument_list|)
member_init_list|,
name|m_horizontal
argument_list|(
name|source
operator|->
name|horizontalDirection
argument_list|()
argument_list|)
member_init_list|,
name|m_vertical
argument_list|(
name|source
operator|->
name|verticalDirection
argument_list|()
argument_list|)
member_init_list|,
name|m_angle
argument_list|(
name|source
operator|->
name|swipeAngle
argument_list|()
argument_list|)
block|{}
DECL|member|Q_DECL_OVERRIDE
name|void
name|draw
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|,
name|QPainter
modifier|&
name|painter
parameter_list|)
specifier|const
name|Q_DECL_OVERRIDE
function_decl|;
private|private:
DECL|member|m_horizontal
name|QSwipeGesture
operator|::
name|SwipeDirection
name|m_horizontal
decl_stmt|;
DECL|member|m_vertical
name|QSwipeGesture
operator|::
name|SwipeDirection
name|m_vertical
decl_stmt|;
DECL|member|m_angle
name|qreal
name|m_angle
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|swipeDirectionAngle
specifier|static
name|qreal
name|swipeDirectionAngle
parameter_list|(
name|QSwipeGesture
operator|::
name|SwipeDirection
name|d
parameter_list|)
block|{
switch|switch
condition|(
name|d
condition|)
block|{
case|case
name|QSwipeGesture
operator|::
name|NoDirection
case|:
case|case
name|QSwipeGesture
operator|::
name|Right
case|:
break|break;
case|case
name|QSwipeGesture
operator|::
name|Left
case|:
return|return
literal|180
return|;
case|case
name|QSwipeGesture
operator|::
name|Up
case|:
return|return
literal|90
return|;
case|case
name|QSwipeGesture
operator|::
name|Down
case|:
return|return
literal|270
return|;
block|}
return|return
literal|0
return|;
block|}
end_function
begin_function
DECL|function|draw
name|void
name|SwipeGesture
operator|::
name|draw
parameter_list|(
specifier|const
name|QRectF
modifier|&
name|rect
parameter_list|,
name|QPainter
modifier|&
name|painter
parameter_list|)
specifier|const
block|{
enum|enum
block|{
name|arrowLength
init|=
literal|50
block|,
name|arrowHeadSize
init|=
literal|10
block|}
enum|;
specifier|const
name|QPointF
name|hotSpot
init|=
name|drawHotSpot
argument_list|(
name|rect
argument_list|,
name|painter
argument_list|)
decl_stmt|;
name|drawArrow
argument_list|(
name|hotSpot
argument_list|,
name|arrowLength
argument_list|,
name|swipeDirectionAngle
argument_list|(
name|m_horizontal
argument_list|)
argument_list|,
name|Qt
operator|::
name|red
argument_list|,
name|arrowHeadSize
argument_list|,
name|painter
argument_list|)
expr_stmt|;
name|drawArrow
argument_list|(
name|hotSpot
argument_list|,
name|arrowLength
argument_list|,
name|swipeDirectionAngle
argument_list|(
name|m_vertical
argument_list|)
argument_list|,
name|Qt
operator|::
name|green
argument_list|,
name|arrowHeadSize
argument_list|,
name|painter
argument_list|)
expr_stmt|;
name|drawArrow
argument_list|(
name|hotSpot
argument_list|,
name|arrowLength
argument_list|,
name|m_angle
argument_list|,
name|Qt
operator|::
name|blue
argument_list|,
name|arrowHeadSize
argument_list|,
name|painter
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fromQGesture
name|Gesture
modifier|*
name|Gesture
operator|::
name|fromQGesture
parameter_list|(
specifier|const
name|QWidget
modifier|*
name|w
parameter_list|,
specifier|const
name|QGesture
modifier|*
name|source
parameter_list|)
block|{
name|Gesture
modifier|*
name|result
init|=
name|Q_NULLPTR
decl_stmt|;
switch|switch
condition|(
name|source
operator|->
name|gestureType
argument_list|()
condition|)
block|{
case|case
name|Qt
operator|::
name|TapGesture
case|:
case|case
name|Qt
operator|::
name|TapAndHoldGesture
case|:
case|case
name|Qt
operator|::
name|PanGesture
case|:
name|result
operator|=
operator|new
name|PanGesture
argument_list|(
name|w
argument_list|,
cast|static_cast
argument_list|<
specifier|const
name|QPanGesture
operator|*
argument_list|>
argument_list|(
name|source
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|PinchGesture
case|:
case|case
name|Qt
operator|::
name|CustomGesture
case|:
case|case
name|Qt
operator|::
name|LastGestureType
case|:
break|break;
case|case
name|Qt
operator|::
name|SwipeGesture
case|:
name|result
operator|=
operator|new
name|SwipeGesture
argument_list|(
name|w
argument_list|,
cast|static_cast
argument_list|<
specifier|const
name|QSwipeGesture
operator|*
argument_list|>
argument_list|(
name|source
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
return|return
name|result
return|;
block|}
end_function
begin_typedef
DECL|typedef|GesturePtr
typedef|typedef
name|QSharedPointer
argument_list|<
name|Gesture
argument_list|>
name|GesturePtr
typedef|;
end_typedef
begin_typedef
DECL|typedef|GesturePtrs
typedef|typedef
name|QVector
argument_list|<
name|GesturePtr
argument_list|>
name|GesturePtrs
typedef|;
end_typedef
begin_typedef
DECL|typedef|EventTypeVector
typedef|typedef
name|QVector
argument_list|<
name|QEvent
operator|::
name|Type
argument_list|>
name|EventTypeVector
typedef|;
end_typedef
begin_class
DECL|class|EventFilter
class|class
name|EventFilter
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|EventFilter
specifier|explicit
name|EventFilter
parameter_list|(
specifier|const
name|EventTypeVector
modifier|&
name|types
parameter_list|,
name|QObject
modifier|*
name|p
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|p
argument_list|)
member_init_list|,
name|m_types
argument_list|(
name|types
argument_list|)
block|{}
DECL|member|Q_DECL_OVERRIDE
name|bool
name|eventFilter
parameter_list|(
name|QObject
modifier|*
parameter_list|,
name|QEvent
modifier|*
parameter_list|)
name|Q_DECL_OVERRIDE
function_decl|;
signals|signals:
name|void
name|eventReceived
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|)
function_decl|;
private|private:
DECL|member|m_types
specifier|const
name|EventTypeVector
name|m_types
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|eventFilter
name|bool
name|EventFilter
operator|::
name|eventFilter
parameter_list|(
name|QObject
modifier|*
name|o
parameter_list|,
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
specifier|static
name|int
name|n
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|m_types
operator|.
name|contains
argument_list|(
name|e
operator|->
name|type
argument_list|()
argument_list|)
condition|)
block|{
name|QString
name|message
decl_stmt|;
name|QDebug
name|debug
argument_list|(
operator|&
name|message
argument_list|)
decl_stmt|;
name|debug
operator|<<
literal|'#'
operator|<<
name|n
operator|++
operator|<<
literal|' '
operator|<<
name|o
operator|->
name|objectName
argument_list|()
operator|<<
literal|' '
expr_stmt|;
switch|switch
condition|(
name|e
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|Gesture
case|:
case|case
name|QEvent
operator|::
name|GestureOverride
case|:
name|debug
operator|<<
cast|static_cast
argument_list|<
specifier|const
name|QGestureEvent
operator|*
argument_list|>
argument_list|(
name|e
argument_list|)
expr_stmt|;
comment|// Special operator
break|break;
default|default:
name|debug
operator|<<
name|e
expr_stmt|;
break|break;
block|}
emit|emit
name|eventReceived
argument_list|(
name|message
argument_list|)
emit|;
block|}
return|return
literal|false
return|;
block|}
end_function
begin_enum
DECL|enum|PointType
enum|enum
name|PointType
block|{
DECL|enumerator|TouchPoint
name|TouchPoint
block|,
DECL|enumerator|MousePress
name|MousePress
block|,
DECL|enumerator|MouseRelease
name|MouseRelease
block|}
enum|;
end_enum
begin_struct
DECL|struct|Point
struct|struct
name|Point
block|{
DECL|function|Point
name|Point
parameter_list|(
specifier|const
name|QPointF
modifier|&
name|p
init|=
name|QPoint
argument_list|()
parameter_list|,
name|PointType
name|t
init|=
name|TouchPoint
parameter_list|,
name|Qt
operator|::
name|MouseEventSource
name|s
init|=
name|Qt
operator|::
name|MouseEventNotSynthesized
parameter_list|)
member_init_list|:
name|pos
argument_list|(
name|p
argument_list|)
member_init_list|,
name|type
argument_list|(
name|t
argument_list|)
member_init_list|,
name|source
argument_list|(
name|s
argument_list|)
block|{}
name|QColor
name|color
parameter_list|()
specifier|const
function_decl|;
DECL|member|pos
name|QPointF
name|pos
decl_stmt|;
DECL|member|type
name|PointType
name|type
decl_stmt|;
DECL|member|source
name|Qt
operator|::
name|MouseEventSource
name|source
decl_stmt|;
block|}
struct|;
end_struct
begin_function
DECL|function|color
name|QColor
name|Point
operator|::
name|color
parameter_list|()
specifier|const
block|{
name|Qt
operator|::
name|GlobalColor
name|globalColor
init|=
name|Qt
operator|::
name|black
decl_stmt|;
if|if
condition|(
name|type
operator|!=
name|TouchPoint
condition|)
block|{
switch|switch
condition|(
name|source
condition|)
block|{
case|case
name|Qt
operator|::
name|MouseEventSynthesizedBySystem
case|:
name|globalColor
operator|=
name|Qt
operator|::
name|red
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|MouseEventSynthesizedByQt
case|:
name|globalColor
operator|=
name|Qt
operator|::
name|blue
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|MouseEventNotSynthesized
case|:
break|break;
block|}
block|}
specifier|const
name|QColor
name|result
argument_list|(
name|globalColor
argument_list|)
decl_stmt|;
return|return
name|type
operator|==
name|MousePress
condition|?
name|result
operator|.
name|lighter
argument_list|()
else|:
name|result
return|;
block|}
end_function
begin_class
DECL|class|TouchTestWidget
class|class
name|TouchTestWidget
super|:
specifier|public
name|QWidget
block|{
name|Q_OBJECT
name|Q_PROPERTY
parameter_list|(
name|bool
name|drawPoints
name|READ
name|drawPoints
name|WRITE
name|setDrawPoints
parameter_list|)
specifier|public
private|:
DECL|function|TouchTestWidget
specifier|explicit
name|TouchTestWidget
parameter_list|(
name|QWidget
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|m_drawPoints
argument_list|(
literal|true
argument_list|)
block|{
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_AcceptTouchEvents
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|Qt
operator|::
name|GestureType
name|t
decl|,
name|optGestures
control|)
name|grabGesture
argument_list|(
name|t
argument_list|)
expr_stmt|;
block|}
DECL|function|drawPoints
name|bool
name|drawPoints
parameter_list|()
specifier|const
block|{
return|return
name|m_drawPoints
return|;
block|}
public|public
name|slots
public|:
name|void
name|clearPoints
parameter_list|()
function_decl|;
name|void
name|setDrawPoints
parameter_list|(
name|bool
name|drawPoints
parameter_list|)
function_decl|;
signals|signals:
name|void
name|logMessage
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|)
function_decl|;
protected|protected:
DECL|member|Q_DECL_OVERRIDE
name|bool
name|event
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
name|Q_DECL_OVERRIDE
function_decl|;
DECL|member|Q_DECL_OVERRIDE
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
name|Q_DECL_OVERRIDE
function_decl|;
private|private:
name|void
name|handleGestureEvent
parameter_list|(
name|QGestureEvent
modifier|*
name|gestureEvent
parameter_list|)
function_decl|;
DECL|member|m_points
name|QVector
argument_list|<
name|Point
argument_list|>
name|m_points
decl_stmt|;
DECL|member|m_gestures
name|GesturePtrs
name|m_gestures
decl_stmt|;
DECL|member|m_drawPoints
name|bool
name|m_drawPoints
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|clearPoints
name|void
name|TouchTestWidget
operator|::
name|clearPoints
parameter_list|()
block|{
if|if
condition|(
operator|!
name|m_points
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|m_gestures
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|m_points
operator|.
name|clear
argument_list|()
expr_stmt|;
name|m_gestures
operator|.
name|clear
argument_list|()
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setDrawPoints
name|void
name|TouchTestWidget
operator|::
name|setDrawPoints
parameter_list|(
name|bool
name|drawPoints
parameter_list|)
block|{
if|if
condition|(
name|m_drawPoints
operator|!=
name|drawPoints
condition|)
block|{
name|clearPoints
argument_list|()
expr_stmt|;
name|m_drawPoints
operator|=
name|drawPoints
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|event
name|bool
name|TouchTestWidget
operator|::
name|event
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
specifier|const
name|QEvent
operator|::
name|Type
name|type
init|=
name|event
operator|->
name|type
argument_list|()
decl_stmt|;
switch|switch
condition|(
name|type
condition|)
block|{
case|case
name|QEvent
operator|::
name|MouseButtonPress
case|:
case|case
name|QEvent
operator|::
name|MouseButtonRelease
case|:
if|if
condition|(
name|m_drawPoints
condition|)
block|{
specifier|const
name|QMouseEvent
modifier|*
name|me
init|=
cast|static_cast
argument_list|<
specifier|const
name|QMouseEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
decl_stmt|;
name|m_points
operator|.
name|append
argument_list|(
name|Point
argument_list|(
name|me
operator|->
name|localPos
argument_list|()
argument_list|,
name|type
operator|==
name|QEvent
operator|::
name|MouseButtonPress
condition|?
name|MousePress
else|:
name|MouseRelease
argument_list|,
name|me
operator|->
name|source
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|QEvent
operator|::
name|TouchBegin
case|:
case|case
name|QEvent
operator|::
name|TouchUpdate
case|:
if|if
condition|(
name|m_drawPoints
condition|)
block|{
foreach|foreach
control|(
specifier|const
name|QTouchEvent
operator|::
name|TouchPoint
modifier|&
name|p
decl|,
cast|static_cast
argument_list|<
specifier|const
name|QTouchEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
operator|->
name|touchPoints
argument_list|()
control|)
name|m_points
operator|.
name|append
argument_list|(
name|Point
argument_list|(
name|p
operator|.
name|pos
argument_list|()
argument_list|,
name|TouchPoint
argument_list|)
argument_list|)
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
case|case
name|QEvent
operator|::
name|TouchEnd
case|:
if|if
condition|(
name|optIgnoreTouch
condition|)
name|event
operator|->
name|ignore
argument_list|()
expr_stmt|;
else|else
name|event
operator|->
name|accept
argument_list|()
expr_stmt|;
return|return
literal|true
return|;
case|case
name|QEvent
operator|::
name|Gesture
case|:
name|handleGestureEvent
argument_list|(
cast|static_cast
argument_list|<
name|QGestureEvent
operator|*
argument_list|>
argument_list|(
name|event
argument_list|)
argument_list|)
expr_stmt|;
break|break;
default|default:
break|break;
block|}
return|return
name|QWidget
operator|::
name|event
argument_list|(
name|event
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|handleGestureEvent
name|void
name|TouchTestWidget
operator|::
name|handleGestureEvent
parameter_list|(
name|QGestureEvent
modifier|*
name|gestureEvent
parameter_list|)
block|{
foreach|foreach
control|(
name|QGesture
modifier|*
name|gesture
decl|,
name|gestureEvent
operator|->
name|gestures
argument_list|()
control|)
block|{
if|if
condition|(
name|optGestures
operator|.
name|contains
argument_list|(
name|gesture
operator|->
name|gestureType
argument_list|()
argument_list|)
condition|)
block|{
switch|switch
condition|(
name|gesture
operator|->
name|state
argument_list|()
condition|)
block|{
case|case
name|Qt
operator|::
name|NoGesture
case|:
break|break;
case|case
name|Qt
operator|::
name|GestureStarted
case|:
case|case
name|Qt
operator|::
name|GestureUpdated
case|:
name|gestureEvent
operator|->
name|accept
argument_list|(
name|gesture
argument_list|)
expr_stmt|;
break|break;
case|case
name|Qt
operator|::
name|GestureFinished
case|:
name|gestureEvent
operator|->
name|accept
argument_list|(
name|gesture
argument_list|)
expr_stmt|;
if|if
condition|(
name|Gesture
modifier|*
name|g
init|=
name|Gesture
operator|::
name|fromQGesture
argument_list|(
name|this
argument_list|,
name|gesture
argument_list|)
condition|)
block|{
name|m_gestures
operator|.
name|append
argument_list|(
name|GesturePtr
argument_list|(
name|g
argument_list|)
argument_list|)
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
break|break;
case|case
name|Qt
operator|::
name|GestureCanceled
case|:
emit|emit
name|logMessage
argument_list|(
name|QLatin1String
argument_list|(
literal|"=== Qt::GestureCanceled ==="
argument_list|)
argument_list|)
emit|;
break|break;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|paintEvent
name|void
name|TouchTestWidget
operator|::
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
comment|// Draw touch points as dots, mouse press as light filled circles, mouse release as circles.
name|QPainter
name|painter
argument_list|(
name|this
argument_list|)
decl_stmt|;
specifier|const
name|QRectF
name|geom
init|=
name|QRectF
argument_list|(
name|QPointF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|QSizeF
argument_list|(
name|size
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|painter
operator|.
name|fillRect
argument_list|(
name|geom
argument_list|,
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|painter
operator|.
name|drawRect
argument_list|(
name|QRectF
argument_list|(
name|geom
operator|.
name|topLeft
argument_list|()
argument_list|,
name|geom
operator|.
name|bottomRight
argument_list|()
operator|-
name|QPointF
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|Point
modifier|&
name|point
decl|,
name|m_points
control|)
block|{
if|if
condition|(
name|geom
operator|.
name|contains
argument_list|(
name|point
operator|.
name|pos
argument_list|)
condition|)
block|{
specifier|const
name|qreal
name|radius
init|=
name|point
operator|.
name|type
operator|==
name|TouchPoint
condition|?
literal|1
else|:
literal|4
decl_stmt|;
if|if
condition|(
name|point
operator|.
name|type
operator|==
name|MouseRelease
condition|)
block|{
name|drawCircle
argument_list|(
name|point
operator|.
name|pos
argument_list|,
name|radius
argument_list|,
name|point
operator|.
name|color
argument_list|()
argument_list|,
name|painter
argument_list|)
expr_stmt|;
block|}
else|else
name|fillCircle
argument_list|(
name|point
operator|.
name|pos
argument_list|,
name|radius
argument_list|,
name|point
operator|.
name|color
argument_list|()
argument_list|,
name|painter
argument_list|)
expr_stmt|;
block|}
block|}
foreach|foreach
control|(
specifier|const
name|GesturePtr
modifier|&
name|gp
decl|,
name|m_gestures
control|)
name|gp
operator|->
name|draw
argument_list|(
name|geom
argument_list|,
name|painter
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|MainWindow
class|class
name|MainWindow
super|:
specifier|public
name|QMainWindow
block|{
name|Q_OBJECT
public|public:
name|MainWindow
parameter_list|()
constructor_decl|;
DECL|function|touchWidget
name|QWidget
modifier|*
name|touchWidget
parameter_list|()
specifier|const
block|{
return|return
name|m_touchWidget
return|;
block|}
public|public
name|slots
public|:
DECL|function|appendToLog
name|void
name|appendToLog
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|m_logTextEdit
operator|->
name|appendPlainText
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
name|void
name|dumpTouchDevices
parameter_list|()
function_decl|;
private|private:
DECL|member|m_touchWidget
name|TouchTestWidget
modifier|*
name|m_touchWidget
decl_stmt|;
DECL|member|m_logTextEdit
name|QPlainTextEdit
modifier|*
name|m_logTextEdit
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|MainWindow
name|MainWindow
operator|::
name|MainWindow
parameter_list|()
member_init_list|:
name|m_touchWidget
argument_list|(
operator|new
name|TouchTestWidget
argument_list|)
member_init_list|,
name|m_logTextEdit
argument_list|(
operator|new
name|QPlainTextEdit
argument_list|)
block|{
name|setWindowTitle
argument_list|(
name|QStringLiteral
argument_list|(
literal|"Touch Event Tester "
argument_list|)
operator|+
name|QT_VERSION_STR
argument_list|)
expr_stmt|;
name|setObjectName
argument_list|(
literal|"MainWin"
argument_list|)
expr_stmt|;
name|QToolBar
modifier|*
name|toolBar
init|=
operator|new
name|QToolBar
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|addToolBar
argument_list|(
name|Qt
operator|::
name|TopToolBarArea
argument_list|,
name|toolBar
argument_list|)
expr_stmt|;
name|QMenu
modifier|*
name|fileMenu
init|=
name|menuBar
argument_list|()
operator|->
name|addMenu
argument_list|(
literal|"File"
argument_list|)
decl_stmt|;
name|QAction
modifier|*
name|dumpDeviceAction
init|=
name|fileMenu
operator|->
name|addAction
argument_list|(
name|QStringLiteral
argument_list|(
literal|"Dump devices"
argument_list|)
argument_list|)
decl_stmt|;
name|dumpDeviceAction
operator|->
name|setShortcut
argument_list|(
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|CTRL
operator|+
name|Qt
operator|::
name|Key_D
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|dumpDeviceAction
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|dumpTouchDevices
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|toolBar
operator|->
name|addAction
argument_list|(
name|dumpDeviceAction
argument_list|)
expr_stmt|;
name|QAction
modifier|*
name|clearLogAction
init|=
name|fileMenu
operator|->
name|addAction
argument_list|(
name|QStringLiteral
argument_list|(
literal|"Clear Log"
argument_list|)
argument_list|)
decl_stmt|;
name|clearLogAction
operator|->
name|setShortcut
argument_list|(
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|CTRL
operator|+
name|Qt
operator|::
name|Key_L
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|clearLogAction
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|m_logTextEdit
argument_list|,
name|SLOT
argument_list|(
name|clear
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|toolBar
operator|->
name|addAction
argument_list|(
name|clearLogAction
argument_list|)
expr_stmt|;
name|QAction
modifier|*
name|toggleDrawPointAction
init|=
name|fileMenu
operator|->
name|addAction
argument_list|(
name|QStringLiteral
argument_list|(
literal|"Draw Points"
argument_list|)
argument_list|)
decl_stmt|;
name|toggleDrawPointAction
operator|->
name|setCheckable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|toggleDrawPointAction
operator|->
name|setChecked
argument_list|(
name|m_touchWidget
operator|->
name|drawPoints
argument_list|()
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|toggleDrawPointAction
argument_list|,
name|SIGNAL
argument_list|(
name|toggled
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|m_touchWidget
argument_list|,
name|SLOT
argument_list|(
name|setDrawPoints
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|toolBar
operator|->
name|addAction
argument_list|(
name|toggleDrawPointAction
argument_list|)
expr_stmt|;
name|QAction
modifier|*
name|clearPointAction
init|=
name|fileMenu
operator|->
name|addAction
argument_list|(
name|QStringLiteral
argument_list|(
literal|"Clear Points"
argument_list|)
argument_list|)
decl_stmt|;
name|clearPointAction
operator|->
name|setShortcut
argument_list|(
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|CTRL
operator|+
name|Qt
operator|::
name|Key_P
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|clearPointAction
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|m_touchWidget
argument_list|,
name|SLOT
argument_list|(
name|clearPoints
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|toolBar
operator|->
name|addAction
argument_list|(
name|clearPointAction
argument_list|)
expr_stmt|;
name|QAction
modifier|*
name|quitAction
init|=
name|fileMenu
operator|->
name|addAction
argument_list|(
name|QStringLiteral
argument_list|(
literal|"Quit"
argument_list|)
argument_list|)
decl_stmt|;
name|quitAction
operator|->
name|setShortcut
argument_list|(
name|QKeySequence
argument_list|(
name|Qt
operator|::
name|CTRL
operator|+
name|Qt
operator|::
name|Key_Q
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|quitAction
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|close
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|toolBar
operator|->
name|addAction
argument_list|(
name|quitAction
argument_list|)
expr_stmt|;
name|QSplitter
modifier|*
name|mainSplitter
init|=
operator|new
name|QSplitter
argument_list|(
name|Qt
operator|::
name|Vertical
argument_list|,
name|this
argument_list|)
decl_stmt|;
name|m_touchWidget
operator|->
name|setObjectName
argument_list|(
name|QStringLiteral
argument_list|(
literal|"TouchWidget"
argument_list|)
argument_list|)
expr_stmt|;
name|mainSplitter
operator|->
name|addWidget
argument_list|(
name|m_touchWidget
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|m_touchWidget
argument_list|,
operator|&
name|TouchTestWidget
operator|::
name|logMessage
argument_list|,
name|this
argument_list|,
operator|&
name|MainWindow
operator|::
name|appendToLog
argument_list|)
expr_stmt|;
name|m_logTextEdit
operator|->
name|setObjectName
argument_list|(
name|QStringLiteral
argument_list|(
literal|"LogTextEdit"
argument_list|)
argument_list|)
expr_stmt|;
name|mainSplitter
operator|->
name|addWidget
argument_list|(
name|m_logTextEdit
argument_list|)
expr_stmt|;
name|setCentralWidget
argument_list|(
name|mainSplitter
argument_list|)
expr_stmt|;
name|dumpTouchDevices
argument_list|()
expr_stmt|;
block|}
end_constructor
begin_function
DECL|function|dumpTouchDevices
name|void
name|MainWindow
operator|::
name|dumpTouchDevices
parameter_list|()
block|{
name|QString
name|message
decl_stmt|;
name|QDebug
name|debug
argument_list|(
operator|&
name|message
argument_list|)
decl_stmt|;
specifier|const
name|QList
argument_list|<
specifier|const
name|QTouchDevice
modifier|*
argument_list|>
name|devices
init|=
name|QTouchDevice
operator|::
name|devices
argument_list|()
decl_stmt|;
name|debug
operator|<<
name|devices
operator|.
name|size
argument_list|()
operator|<<
literal|"Device(s):\n"
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|devices
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|debug
operator|<<
literal|"Device #"
operator|<<
name|i
operator|<<
name|devices
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|<<
literal|'\n'
expr_stmt|;
name|appendToLog
argument_list|(
name|message
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
name|argv
index|[]
parameter_list|)
block|{
name|QApplication
name|a
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|QCommandLineParser
name|parser
decl_stmt|;
name|parser
operator|.
name|setApplicationDescription
argument_list|(
name|QStringLiteral
argument_list|(
literal|"Touch/Mouse tester"
argument_list|)
argument_list|)
expr_stmt|;
name|parser
operator|.
name|addHelpOption
argument_list|()
expr_stmt|;
specifier|const
name|QCommandLineOption
name|mouseMoveOption
argument_list|(
name|QStringLiteral
argument_list|(
literal|"mousemove"
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Log mouse move events"
argument_list|)
argument_list|)
decl_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|mouseMoveOption
argument_list|)
expr_stmt|;
specifier|const
name|QCommandLineOption
name|globalFilterOption
argument_list|(
name|QStringLiteral
argument_list|(
literal|"global"
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Global event filter"
argument_list|)
argument_list|)
decl_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|globalFilterOption
argument_list|)
expr_stmt|;
specifier|const
name|QCommandLineOption
name|ignoreTouchOption
argument_list|(
name|QStringLiteral
argument_list|(
literal|"ignore"
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Ignore touch events (for testing mouse emulation)."
argument_list|)
argument_list|)
decl_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|ignoreTouchOption
argument_list|)
expr_stmt|;
specifier|const
name|QCommandLineOption
name|noTouchLogOption
argument_list|(
name|QStringLiteral
argument_list|(
literal|"notouchlog"
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Do not log touch events (for testing gestures)."
argument_list|)
argument_list|)
decl_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|noTouchLogOption
argument_list|)
expr_stmt|;
specifier|const
name|QCommandLineOption
name|noMouseLogOption
argument_list|(
name|QStringLiteral
argument_list|(
literal|"nomouselog"
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Do not log mouse events (for testing gestures)."
argument_list|)
argument_list|)
decl_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|noMouseLogOption
argument_list|)
expr_stmt|;
specifier|const
name|QCommandLineOption
name|tapGestureOption
argument_list|(
name|QStringLiteral
argument_list|(
literal|"tap"
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Grab tap gesture."
argument_list|)
argument_list|)
decl_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|tapGestureOption
argument_list|)
expr_stmt|;
specifier|const
name|QCommandLineOption
name|tapAndHoldGestureOption
argument_list|(
name|QStringLiteral
argument_list|(
literal|"tap-and-hold"
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Grab tap-and-hold gesture."
argument_list|)
argument_list|)
decl_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|tapAndHoldGestureOption
argument_list|)
expr_stmt|;
specifier|const
name|QCommandLineOption
name|panGestureOption
argument_list|(
name|QStringLiteral
argument_list|(
literal|"pan"
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Grab pan gesture."
argument_list|)
argument_list|)
decl_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|panGestureOption
argument_list|)
expr_stmt|;
specifier|const
name|QCommandLineOption
name|pinchGestureOption
argument_list|(
name|QStringLiteral
argument_list|(
literal|"pinch"
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Grab pinch gesture."
argument_list|)
argument_list|)
decl_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|pinchGestureOption
argument_list|)
expr_stmt|;
specifier|const
name|QCommandLineOption
name|swipeGestureOption
argument_list|(
name|QStringLiteral
argument_list|(
literal|"swipe"
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Grab swipe gesture."
argument_list|)
argument_list|)
decl_stmt|;
name|parser
operator|.
name|addOption
argument_list|(
name|swipeGestureOption
argument_list|)
expr_stmt|;
name|parser
operator|.
name|process
argument_list|(
name|QApplication
operator|::
name|arguments
argument_list|()
argument_list|)
expr_stmt|;
name|optIgnoreTouch
operator|=
name|parser
operator|.
name|isSet
argument_list|(
name|ignoreTouchOption
argument_list|)
expr_stmt|;
if|if
condition|(
name|parser
operator|.
name|isSet
argument_list|(
name|tapGestureOption
argument_list|)
condition|)
name|optGestures
operator|.
name|append
argument_list|(
name|Qt
operator|::
name|TapGesture
argument_list|)
expr_stmt|;
if|if
condition|(
name|parser
operator|.
name|isSet
argument_list|(
name|tapAndHoldGestureOption
argument_list|)
condition|)
name|optGestures
operator|.
name|append
argument_list|(
name|Qt
operator|::
name|TapAndHoldGesture
argument_list|)
expr_stmt|;
if|if
condition|(
name|parser
operator|.
name|isSet
argument_list|(
name|panGestureOption
argument_list|)
condition|)
name|optGestures
operator|.
name|append
argument_list|(
name|Qt
operator|::
name|PanGesture
argument_list|)
expr_stmt|;
if|if
condition|(
name|parser
operator|.
name|isSet
argument_list|(
name|pinchGestureOption
argument_list|)
condition|)
name|optGestures
operator|.
name|append
argument_list|(
name|Qt
operator|::
name|PinchGesture
argument_list|)
expr_stmt|;
if|if
condition|(
name|parser
operator|.
name|isSet
argument_list|(
name|swipeGestureOption
argument_list|)
condition|)
name|optGestures
operator|.
name|append
argument_list|(
name|Qt
operator|::
name|SwipeGesture
argument_list|)
expr_stmt|;
name|MainWindow
name|w
decl_stmt|;
specifier|const
name|QSize
name|screenSize
init|=
name|QGuiApplication
operator|::
name|primaryScreen
argument_list|()
operator|->
name|availableGeometry
argument_list|()
operator|.
name|size
argument_list|()
decl_stmt|;
name|w
operator|.
name|resize
argument_list|(
name|screenSize
operator|/
literal|2
argument_list|)
expr_stmt|;
specifier|const
name|QSize
name|sizeDiff
init|=
name|screenSize
operator|-
name|w
operator|.
name|size
argument_list|()
decl_stmt|;
name|w
operator|.
name|move
argument_list|(
name|sizeDiff
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|,
name|sizeDiff
operator|.
name|height
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
name|EventTypeVector
name|eventTypes
decl_stmt|;
if|if
condition|(
operator|!
name|parser
operator|.
name|isSet
argument_list|(
name|noMouseLogOption
argument_list|)
condition|)
name|eventTypes
operator|<<
name|QEvent
operator|::
name|MouseButtonPress
operator|<<
name|QEvent
operator|::
name|MouseButtonRelease
operator|<<
name|QEvent
operator|::
name|MouseButtonDblClick
expr_stmt|;
if|if
condition|(
name|parser
operator|.
name|isSet
argument_list|(
name|mouseMoveOption
argument_list|)
condition|)
name|eventTypes
operator|<<
name|QEvent
operator|::
name|MouseMove
expr_stmt|;
if|if
condition|(
operator|!
name|parser
operator|.
name|isSet
argument_list|(
name|noTouchLogOption
argument_list|)
condition|)
name|eventTypes
operator|<<
name|QEvent
operator|::
name|TouchBegin
operator|<<
name|QEvent
operator|::
name|TouchUpdate
operator|<<
name|QEvent
operator|::
name|TouchEnd
expr_stmt|;
if|if
condition|(
operator|!
name|optGestures
operator|.
name|isEmpty
argument_list|()
condition|)
name|eventTypes
operator|<<
name|QEvent
operator|::
name|Gesture
operator|<<
name|QEvent
operator|::
name|GestureOverride
expr_stmt|;
name|QObject
modifier|*
name|filterTarget
init|=
name|parser
operator|.
name|isSet
argument_list|(
name|globalFilterOption
argument_list|)
condition|?
cast|static_cast
argument_list|<
name|QObject
operator|*
argument_list|>
argument_list|(
operator|&
name|a
argument_list|)
else|:
cast|static_cast
argument_list|<
name|QObject
operator|*
argument_list|>
argument_list|(
name|w
operator|.
name|touchWidget
argument_list|()
argument_list|)
decl_stmt|;
name|EventFilter
modifier|*
name|filter
init|=
operator|new
name|EventFilter
argument_list|(
name|eventTypes
argument_list|,
name|filterTarget
argument_list|)
decl_stmt|;
name|filterTarget
operator|->
name|installEventFilter
argument_list|(
name|filter
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|filter
argument_list|,
name|SIGNAL
argument_list|(
name|eventReceived
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|,
operator|&
name|w
argument_list|,
name|SLOT
argument_list|(
name|appendToLog
argument_list|(
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|a
operator|.
name|exec
argument_list|()
return|;
block|}
end_function
begin_include
include|#
directive|include
file|"main.moc"
end_include
end_unit
