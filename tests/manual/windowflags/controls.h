begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the examples of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|CONTROLS_H
end_ifndef
begin_define
DECL|macro|CONTROLS_H
define|#
directive|define
name|CONTROLS_H
end_define
begin_include
include|#
directive|include
file|<QGroupBox>
end_include
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
DECL|variable|QCheckBox
name|class
name|QCheckBox
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QRadioButton
name|class
name|QRadioButton
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|QButtonGroup
name|class
name|QButtonGroup
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|QT_END_NAMESPACE
DECL|enumerator|ControlLayoutMargin
name|enum
type|{
name|ControlLayoutMargin
init|=
literal|4
end_decl_stmt
begin_comment
unit|};
comment|// Control for the hint part of Qt::WindowFlags
end_comment
begin_decl_stmt
name|class
name|HintControl
range|:
name|public
name|QGroupBox
block|{
name|Q_OBJECT
name|public
operator|:
name|explicit
name|HintControl
argument_list|(
name|QWidget
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
name|Qt
operator|::
name|WindowFlags
name|hints
argument_list|()
specifier|const
block|;
name|void
name|setHints
argument_list|(
argument|Qt::WindowFlags hints
argument_list|)
block|;
name|signals
operator|:
name|void
name|changed
argument_list|(
name|Qt
operator|::
name|WindowFlags
argument_list|)
block|;
name|private
name|slots
operator|:
name|void
name|slotCheckBoxChanged
argument_list|()
block|;
name|private
operator|:
name|QCheckBox
operator|*
name|msWindowsFixedSizeDialogCheckBox
block|;
name|QCheckBox
operator|*
name|x11BypassWindowManagerCheckBox
block|;
name|QCheckBox
operator|*
name|framelessWindowCheckBox
block|;
name|QCheckBox
operator|*
name|windowTitleCheckBox
block|;
name|QCheckBox
operator|*
name|windowSystemMenuCheckBox
block|;
name|QCheckBox
operator|*
name|windowMinimizeButtonCheckBox
block|;
name|QCheckBox
operator|*
name|windowMaximizeButtonCheckBox
block|;
name|QCheckBox
operator|*
name|windowCloseButtonCheckBox
block|;
name|QCheckBox
operator|*
name|windowContextHelpButtonCheckBox
block|;
name|QCheckBox
operator|*
name|windowShadeButtonCheckBox
block|;
name|QCheckBox
operator|*
name|windowStaysOnTopCheckBox
block|;
name|QCheckBox
operator|*
name|windowStaysOnBottomCheckBox
block|;
name|QCheckBox
operator|*
name|customizeWindowHintCheckBox
block|;
name|QCheckBox
operator|*
name|transparentForInputCheckBox
block|; }
decl_stmt|;
end_decl_stmt
begin_comment
comment|// Control for the Qt::WindowState enum, optional with a "visible" QCheckbox
end_comment
begin_decl_stmt
name|class
name|WindowStateControl
range|:
name|public
name|QWidget
block|{
name|Q_OBJECT
name|public
operator|:
expr|enum
name|Flags
block|{
name|WantVisibleCheckBox
operator|=
literal|0x1
block|,
name|WantMinimizeRadioButton
operator|=
literal|0x2
block|}
block|;
name|explicit
name|WindowStateControl
argument_list|(
argument|unsigned flags
argument_list|,
argument|QWidget *parent=
literal|0
argument_list|)
block|;
name|Qt
operator|::
name|WindowState
name|state
argument_list|()
specifier|const
block|;
name|void
name|setState
argument_list|(
argument|Qt::WindowState s
argument_list|)
block|;
name|bool
name|visibleValue
argument_list|()
specifier|const
block|;
name|void
name|setVisibleValue
argument_list|(
name|bool
argument_list|)
block|;
name|signals
operator|:
name|void
name|changed
argument_list|()
block|;
name|private
operator|:
name|QButtonGroup
operator|*
name|group
block|;
name|QCheckBox
operator|*
name|visibleCheckBox
block|;
name|QRadioButton
operator|*
name|restoreButton
block|;
name|QRadioButton
operator|*
name|minimizeButton
block|;
name|QRadioButton
operator|*
name|maximizeButton
block|;
name|QRadioButton
operator|*
name|fullscreenButton
block|; }
decl_stmt|;
end_decl_stmt
begin_comment
comment|// Control for the Qt::WindowStates flags (normal, maximized, fullscreen exclusively
end_comment
begin_comment
comment|// combined with minimized and optionally, with a "visible" QCheckbox)
end_comment
begin_decl_stmt
name|class
name|WindowStatesControl
range|:
name|public
name|QGroupBox
block|{
name|Q_OBJECT
name|public
operator|:
expr|enum
name|Flags
block|{
name|WantVisibleCheckBox
operator|=
literal|0x1
block|,
name|WantActiveCheckBox
operator|=
literal|0x2
block|}
block|;
name|explicit
name|WindowStatesControl
argument_list|(
argument|unsigned flags
argument_list|,
argument|QWidget *parent=
literal|0
argument_list|)
block|;
name|Qt
operator|::
name|WindowStates
name|states
argument_list|()
specifier|const
block|;
name|void
name|setStates
argument_list|(
argument|Qt::WindowStates s
argument_list|)
block|;
name|bool
name|visibleValue
argument_list|()
specifier|const
block|;
name|void
name|setVisibleValue
argument_list|(
name|bool
argument_list|)
block|;
name|bool
name|activeValue
argument_list|()
specifier|const
block|;
name|void
name|setActiveValue
argument_list|(
argument|bool v
argument_list|)
block|;
name|signals
operator|:
name|void
name|changed
argument_list|()
block|;
name|private
operator|:
name|QCheckBox
operator|*
name|visibleCheckBox
block|;
name|QCheckBox
operator|*
name|activeCheckBox
block|;
name|QCheckBox
operator|*
name|minimizeCheckBox
block|;
name|WindowStateControl
operator|*
name|stateControl
block|; }
decl_stmt|;
end_decl_stmt
begin_comment
comment|// Control for the type part of Qt::WindowFlags
end_comment
begin_decl_stmt
name|class
name|TypeControl
range|:
name|public
name|QGroupBox
block|{
name|Q_OBJECT
name|public
operator|:
name|explicit
name|TypeControl
argument_list|(
name|QWidget
operator|*
name|parent
operator|=
literal|0
argument_list|)
block|;
name|Qt
operator|::
name|WindowFlags
name|type
argument_list|()
specifier|const
block|;
name|void
name|setType
argument_list|(
name|Qt
operator|::
name|WindowFlags
argument_list|)
block|;
name|signals
operator|:
name|void
name|changed
argument_list|(
name|Qt
operator|::
name|WindowFlags
argument_list|)
block|;
name|private
name|slots
operator|:
name|void
name|slotChanged
argument_list|()
block|;
name|private
operator|:
name|QButtonGroup
operator|*
name|group
block|;
name|QRadioButton
operator|*
name|windowRadioButton
block|;
name|QRadioButton
operator|*
name|dialogRadioButton
block|;
name|QRadioButton
operator|*
name|sheetRadioButton
block|;
name|QRadioButton
operator|*
name|drawerRadioButton
block|;
name|QRadioButton
operator|*
name|popupRadioButton
block|;
name|QRadioButton
operator|*
name|toolRadioButton
block|;
name|QRadioButton
operator|*
name|toolTipRadioButton
block|;
name|QRadioButton
operator|*
name|splashScreenRadioButton
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// CONTROLS_H
end_comment
end_unit
