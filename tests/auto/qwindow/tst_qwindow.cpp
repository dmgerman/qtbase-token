begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qwindow.h>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|"../../shared/util.h"
end_include
begin_class
DECL|class|tst_QWindow
class|class
name|tst_QWindow
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|mapGlobal
parameter_list|()
function_decl|;
name|void
name|positioning
parameter_list|()
function_decl|;
name|void
name|isActive
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|mapGlobal
name|void
name|tst_QWindow
operator|::
name|mapGlobal
parameter_list|()
block|{
name|QWindow
name|a
decl_stmt|;
name|QWindow
name|b
argument_list|(
operator|&
name|a
argument_list|)
decl_stmt|;
name|QWindow
name|c
argument_list|(
operator|&
name|b
argument_list|)
decl_stmt|;
name|a
operator|.
name|setGeometry
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|300
argument_list|,
literal|300
argument_list|)
expr_stmt|;
name|b
operator|.
name|setGeometry
argument_list|(
literal|20
argument_list|,
literal|20
argument_list|,
literal|200
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|c
operator|.
name|setGeometry
argument_list|(
literal|40
argument_list|,
literal|40
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
argument_list|)
argument_list|,
name|QPoint
argument_list|(
literal|110
argument_list|,
literal|110
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
argument_list|)
argument_list|,
name|QPoint
argument_list|(
literal|130
argument_list|,
literal|130
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
argument_list|)
argument_list|,
name|QPoint
argument_list|(
literal|170
argument_list|,
literal|170
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|.
name|mapFromGlobal
argument_list|(
name|QPoint
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
argument_list|)
argument_list|,
name|QPoint
argument_list|(
literal|90
argument_list|,
literal|90
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|mapFromGlobal
argument_list|(
name|QPoint
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
argument_list|)
argument_list|,
name|QPoint
argument_list|(
literal|70
argument_list|,
literal|70
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
operator|.
name|mapFromGlobal
argument_list|(
name|QPoint
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
argument_list|)
argument_list|,
name|QPoint
argument_list|(
literal|30
argument_list|,
literal|30
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|Window
class|class
name|Window
super|:
specifier|public
name|QWindow
block|{
public|public:
DECL|function|Window
name|Window
parameter_list|()
block|{
name|reset
argument_list|()
expr_stmt|;
name|setWindowFlags
argument_list|(
name|Qt
operator|::
name|Window
operator||
name|Qt
operator|::
name|WindowTitleHint
operator||
name|Qt
operator|::
name|WindowMinMaxButtonsHint
operator||
name|Qt
operator|::
name|WindowCloseButtonHint
argument_list|)
expr_stmt|;
block|}
DECL|function|reset
name|void
name|reset
parameter_list|()
block|{
name|m_received
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|function|event
name|bool
name|event
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|m_received
index|[
name|event
operator|->
name|type
argument_list|()
index|]
operator|++
expr_stmt|;
return|return
name|QWindow
operator|::
name|event
argument_list|(
name|event
argument_list|)
return|;
block|}
DECL|function|received
name|int
name|received
parameter_list|(
name|QEvent
operator|::
name|Type
name|type
parameter_list|)
block|{
return|return
name|m_received
operator|.
name|value
argument_list|(
name|type
argument_list|,
literal|0
argument_list|)
return|;
block|}
private|private:
DECL|member|m_received
name|QHash
argument_list|<
name|QEvent
operator|::
name|Type
argument_list|,
name|int
argument_list|>
name|m_received
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|positioning
name|void
name|tst_QWindow
operator|::
name|positioning
parameter_list|()
block|{
name|QRect
name|geometry
argument_list|(
literal|80
argument_list|,
literal|80
argument_list|,
literal|40
argument_list|,
literal|40
argument_list|)
decl_stmt|;
name|Window
name|window
decl_stmt|;
name|window
operator|.
name|setGeometry
argument_list|(
name|geometry
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|geometry
argument_list|()
argument_list|,
name|geometry
argument_list|)
expr_stmt|;
name|window
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|Resize
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|Map
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QMargins
name|originalMargins
init|=
name|window
operator|.
name|frameMargins
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|pos
argument_list|()
argument_list|,
name|window
operator|.
name|framePos
argument_list|()
operator|+
name|QPoint
argument_list|(
name|originalMargins
operator|.
name|left
argument_list|()
argument_list|,
name|originalMargins
operator|.
name|top
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|.
name|frameGeometry
argument_list|()
operator|.
name|contains
argument_list|(
name|window
operator|.
name|geometry
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QPoint
name|originalPos
init|=
name|window
operator|.
name|pos
argument_list|()
decl_stmt|;
name|QPoint
name|originalFramePos
init|=
name|window
operator|.
name|framePos
argument_list|()
decl_stmt|;
name|window
operator|.
name|setWindowState
argument_list|(
name|Qt
operator|::
name|WindowFullScreen
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|Resize
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|window
operator|.
name|setWindowState
argument_list|(
name|Qt
operator|::
name|WindowNoState
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|Resize
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|originalPos
argument_list|,
name|window
operator|.
name|pos
argument_list|()
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|originalFramePos
argument_list|,
name|window
operator|.
name|framePos
argument_list|()
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|originalMargins
argument_list|,
name|window
operator|.
name|frameMargins
argument_list|()
argument_list|)
expr_stmt|;
comment|// if our positioning is actually fully respected by the window manager
comment|// test whether it correctly handles frame positioning as well
if|if
condition|(
name|originalPos
operator|==
name|geometry
operator|.
name|topLeft
argument_list|()
operator|&&
operator|(
name|originalMargins
operator|.
name|top
argument_list|()
operator|!=
literal|0
operator|||
name|originalMargins
operator|.
name|left
argument_list|()
operator|!=
literal|0
operator|)
condition|)
block|{
name|QPoint
name|framePos
argument_list|(
literal|40
argument_list|,
literal|40
argument_list|)
decl_stmt|;
name|window
operator|.
name|reset
argument_list|()
expr_stmt|;
name|window
operator|.
name|setFramePos
argument_list|(
name|framePos
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|window
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|Move
argument_list|)
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|framePos
argument_list|,
name|window
operator|.
name|framePos
argument_list|()
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|originalMargins
argument_list|,
name|window
operator|.
name|frameMargins
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|window
operator|.
name|pos
argument_list|()
argument_list|,
name|window
operator|.
name|framePos
argument_list|()
operator|+
name|QPoint
argument_list|(
name|originalMargins
operator|.
name|left
argument_list|()
argument_list|,
name|originalMargins
operator|.
name|top
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// and back to regular positioning
name|window
operator|.
name|reset
argument_list|()
expr_stmt|;
name|window
operator|.
name|setPos
argument_list|(
name|originalPos
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|window
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|Move
argument_list|)
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|originalPos
argument_list|,
name|window
operator|.
name|pos
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|isActive
name|void
name|tst_QWindow
operator|::
name|isActive
parameter_list|()
block|{
name|Window
name|window
decl_stmt|;
name|window
operator|.
name|setGeometry
argument_list|(
literal|80
argument_list|,
literal|80
argument_list|,
literal|40
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|window
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|Map
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|Resize
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|QGuiApplication
operator|::
name|focusWindow
argument_list|()
operator|==
operator|&
name|window
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
name|Window
name|child
decl_stmt|;
name|child
operator|.
name|setParent
argument_list|(
operator|&
name|window
argument_list|)
expr_stmt|;
name|child
operator|.
name|setGeometry
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|20
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|child
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|child
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|Map
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|child
operator|.
name|requestActivateWindow
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|QGuiApplication
operator|::
name|focusWindow
argument_list|()
operator|==
operator|&
name|child
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|child
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
comment|// parent shouldn't receive new map or resize events from child being shown
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|Map
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|Resize
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|FocusIn
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|FocusOut
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|child
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|FocusIn
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// child has focus
name|QVERIFY
argument_list|(
name|window
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
name|Window
name|dialog
decl_stmt|;
name|dialog
operator|.
name|setTransientParent
argument_list|(
operator|&
name|window
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|setGeometry
argument_list|(
literal|110
argument_list|,
literal|110
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|show
argument_list|()
expr_stmt|;
name|dialog
operator|.
name|requestActivateWindow
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|dialog
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|Map
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|dialog
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|Resize
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|QGuiApplication
operator|::
name|focusWindow
argument_list|()
operator|==
operator|&
name|dialog
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|dialog
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
comment|// transient child has focus
name|QVERIFY
argument_list|(
name|window
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
comment|// parent is active
name|QVERIFY
argument_list|(
name|child
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
name|window
operator|.
name|requestActivateWindow
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|QGuiApplication
operator|::
name|focusWindow
argument_list|()
operator|==
operator|&
name|window
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|dialog
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|FocusOut
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|window
operator|.
name|received
argument_list|(
name|QEvent
operator|::
name|FocusIn
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|window
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
comment|// transient parent has focus
name|QVERIFY
argument_list|(
name|dialog
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
comment|// parent has focus
name|QVERIFY
argument_list|(
name|child
operator|.
name|isActive
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_include
include|#
directive|include
file|<tst_qwindow.moc>
end_include
begin_expr_stmt
DECL|variable|tst_QWindow
name|QTEST_MAIN
argument_list|(
name|tst_QWindow
argument_list|)
expr_stmt|;
end_expr_stmt
end_unit
