begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore/QDir>
end_include
begin_include
include|#
directive|include
file|<QtCore/QString>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtCore/QProcess>
end_include
begin_include
include|#
directive|include
file|<QtCore/QByteArray>
end_include
begin_include
include|#
directive|include
file|<QtCore/QLibraryInfo>
end_include
begin_include
include|#
directive|include
file|<QtCore/QTemporaryDir>
end_include
begin_class
DECL|class|tst_uic
class|class
name|tst_uic
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_uic
parameter_list|()
constructor_decl|;
private|private
name|Q_SLOTS
private|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
name|void
name|stdOut
parameter_list|()
function_decl|;
name|void
name|run
parameter_list|()
function_decl|;
name|void
name|run_data
parameter_list|()
specifier|const
function_decl|;
name|void
name|compare
parameter_list|()
function_decl|;
name|void
name|compare_data
parameter_list|()
specifier|const
function_decl|;
private|private:
DECL|member|m_command
specifier|const
name|QString
name|m_command
decl_stmt|;
DECL|member|m_baseline
name|QString
name|m_baseline
decl_stmt|;
DECL|member|m_generated
name|QTemporaryDir
name|m_generated
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|tst_uic
name|tst_uic
operator|::
name|tst_uic
parameter_list|()
member_init_list|:
name|m_command
argument_list|(
name|QLibraryInfo
operator|::
name|location
argument_list|(
name|QLibraryInfo
operator|::
name|BinariesPath
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|"/uic"
argument_list|)
argument_list|)
block|{ }
end_constructor
begin_function
DECL|function|msgProcessStartFailed
specifier|static
name|QByteArray
name|msgProcessStartFailed
parameter_list|(
specifier|const
name|QString
modifier|&
name|command
parameter_list|,
specifier|const
name|QString
modifier|&
name|why
parameter_list|)
block|{
specifier|const
name|QString
name|result
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Could not start %1: %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|command
argument_list|,
name|why
argument_list|)
decl_stmt|;
return|return
name|result
operator|.
name|toLocal8Bit
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|initTestCase
name|void
name|tst_uic
operator|::
name|initTestCase
parameter_list|()
block|{
name|m_baseline
operator|=
name|QFINDTESTDATA
argument_list|(
literal|"baseline"
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
operator|!
name|m_baseline
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|"Could not find 'baseline'."
argument_list|)
expr_stmt|;
name|QProcess
name|process
decl_stmt|;
name|process
operator|.
name|start
argument_list|(
name|m_command
argument_list|,
name|QStringList
argument_list|(
name|QLatin1String
argument_list|(
literal|"-help"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|process
operator|.
name|waitForStarted
argument_list|()
argument_list|,
name|msgProcessStartFailed
argument_list|(
name|m_command
argument_list|,
name|process
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|.
name|waitForFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|exitStatus
argument_list|()
argument_list|,
name|QProcess
operator|::
name|NormalExit
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|exitCode
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Print version
specifier|const
name|QString
name|out
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|process
operator|.
name|readAllStandardError
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\r'
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QStringList
name|outLines
init|=
name|out
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
decl_stmt|;
comment|// Print version
name|QString
name|msg
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"uic test built %1 running in '%2' using: "
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|__DATE__
argument_list|)
argument_list|,
name|QDir
operator|::
name|currentPath
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|outLines
operator|.
name|empty
argument_list|()
condition|)
name|msg
operator|+=
name|outLines
operator|.
name|front
argument_list|()
expr_stmt|;
name|qDebug
argument_list|(
literal|"%s"
argument_list|,
name|qPrintable
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_uic
operator|::
name|cleanupTestCase
parameter_list|()
block|{
specifier|static
specifier|const
name|char
name|envVar
index|[]
init|=
literal|"UIC_KEEP_GENERATED_FILES"
decl_stmt|;
if|if
condition|(
name|qgetenv
argument_list|(
name|envVar
argument_list|)
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qDebug
argument_list|(
literal|"Note: The environment variable '%s' can be set to keep the temporary files for error analysis."
argument_list|,
name|envVar
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|m_generated
operator|.
name|setAutoRemove
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|qDebug
argument_list|(
literal|"Keeping generated files in '%s'"
argument_list|,
name|qPrintable
argument_list|(
name|QDir
operator|::
name|toNativeSeparators
argument_list|(
name|m_generated
operator|.
name|path
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|stdOut
name|void
name|tst_uic
operator|::
name|stdOut
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|QSKIP
argument_list|(
literal|"QTBUG-26730"
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Checks of everything works when using stdout and whether
comment|// the OS file format conventions regarding newlines are met.
name|QDir
name|baseline
argument_list|(
name|m_baseline
argument_list|)
decl_stmt|;
specifier|const
name|QFileInfoList
name|baselineFiles
init|=
name|baseline
operator|.
name|entryInfoList
argument_list|(
name|QStringList
argument_list|(
name|QLatin1String
argument_list|(
literal|"*.ui"
argument_list|)
argument_list|)
argument_list|,
name|QDir
operator|::
name|Files
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|baselineFiles
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QProcess
name|process
decl_stmt|;
name|process
operator|.
name|start
argument_list|(
name|m_command
argument_list|,
name|QStringList
argument_list|(
name|baselineFiles
operator|.
name|front
argument_list|()
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|process
operator|.
name|closeWriteChannel
argument_list|()
expr_stmt|;
name|QVERIFY2
argument_list|(
name|process
operator|.
name|waitForStarted
argument_list|()
argument_list|,
name|msgProcessStartFailed
argument_list|(
name|m_command
argument_list|,
name|process
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|.
name|waitForFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|exitStatus
argument_list|()
argument_list|,
name|QProcess
operator|::
name|NormalExit
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|exitCode
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
specifier|const
name|QByteArray
name|output
init|=
name|process
operator|.
name|readAllStandardOutput
argument_list|()
decl_stmt|;
name|QByteArray
name|expected
init|=
literal|"/********************************************************************************"
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|expected
operator|+=
literal|"\r\n"
expr_stmt|;
else|#
directive|else
name|expected
operator|+=
literal|'\n'
expr_stmt|;
endif|#
directive|endif
name|expected
operator|+=
literal|"** "
expr_stmt|;
name|QVERIFY2
argument_list|(
name|output
operator|.
name|startsWith
argument_list|(
name|expected
argument_list|)
argument_list|,
operator|(
name|QByteArray
argument_list|(
literal|"Got: "
argument_list|)
operator|+
name|output
operator|.
name|toHex
argument_list|()
operator|)
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|run
name|void
name|tst_uic
operator|::
name|run
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|originalFile
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|generatedFile
argument_list|)
expr_stmt|;
name|QProcess
name|process
decl_stmt|;
name|process
operator|.
name|start
argument_list|(
name|m_command
argument_list|,
name|QStringList
argument_list|(
name|originalFile
argument_list|)
operator|<<
name|QString
argument_list|(
name|QLatin1String
argument_list|(
literal|"-o"
argument_list|)
argument_list|)
operator|<<
name|generatedFile
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|process
operator|.
name|waitForStarted
argument_list|()
argument_list|,
name|msgProcessStartFailed
argument_list|(
name|m_command
argument_list|,
name|process
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|.
name|waitForFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|exitStatus
argument_list|()
argument_list|,
name|QProcess
operator|::
name|NormalExit
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|exitCode
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QFileInfo
argument_list|(
name|generatedFile
argument_list|)
operator|.
name|exists
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|run_data
name|void
name|tst_uic
operator|::
name|run_data
parameter_list|()
specifier|const
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"originalFile"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"generatedFile"
argument_list|)
expr_stmt|;
name|QDir
name|generated
argument_list|(
name|m_generated
operator|.
name|path
argument_list|()
argument_list|)
decl_stmt|;
name|QDir
name|baseline
argument_list|(
name|m_baseline
argument_list|)
decl_stmt|;
specifier|const
name|QFileInfoList
name|baselineFiles
init|=
name|baseline
operator|.
name|entryInfoList
argument_list|(
name|QStringList
argument_list|(
literal|"*.ui"
argument_list|)
argument_list|,
name|QDir
operator|::
name|Files
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QFileInfo
modifier|&
name|baselineFile
decl|,
name|baselineFiles
control|)
block|{
specifier|const
name|QString
name|generatedFile
init|=
name|generated
operator|.
name|absolutePath
argument_list|()
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|baselineFile
operator|.
name|fileName
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|".h"
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|baselineFile
operator|.
name|baseName
argument_list|()
argument_list|)
argument_list|)
operator|<<
name|baselineFile
operator|.
name|absoluteFilePath
argument_list|()
operator|<<
name|generatedFile
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|compare
name|void
name|tst_uic
operator|::
name|compare
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|originalFile
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|generatedFile
argument_list|)
expr_stmt|;
name|QFile
name|orgFile
argument_list|(
name|originalFile
argument_list|)
decl_stmt|;
name|QFile
name|genFile
argument_list|(
name|generatedFile
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|orgFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
condition|)
block|{
name|QString
name|err
argument_list|(
name|QLatin1String
argument_list|(
literal|"Could not read file: %1..."
argument_list|)
argument_list|)
decl_stmt|;
name|QFAIL
argument_list|(
name|err
operator|.
name|arg
argument_list|(
name|orgFile
operator|.
name|fileName
argument_list|()
argument_list|)
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|genFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
condition|)
block|{
name|QString
name|err
argument_list|(
name|QLatin1String
argument_list|(
literal|"Could not read file: %1..."
argument_list|)
argument_list|)
decl_stmt|;
name|QFAIL
argument_list|(
name|err
operator|.
name|arg
argument_list|(
name|genFile
operator|.
name|fileName
argument_list|()
argument_list|)
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|originalFile
operator|=
name|orgFile
operator|.
name|readAll
argument_list|()
expr_stmt|;
name|originalFile
operator|.
name|replace
argument_list|(
name|QRegExp
argument_list|(
name|QLatin1String
argument_list|(
literal|"Created:.{0,25}[\\d]{4,4}"
argument_list|)
argument_list|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|originalFile
operator|.
name|replace
argument_list|(
name|QRegExp
argument_list|(
name|QLatin1String
argument_list|(
literal|"by: Qt User Interface Compiler version [.\\d]{5,5}"
argument_list|)
argument_list|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|generatedFile
operator|=
name|genFile
operator|.
name|readAll
argument_list|()
expr_stmt|;
name|generatedFile
operator|.
name|replace
argument_list|(
name|QRegExp
argument_list|(
name|QLatin1String
argument_list|(
literal|"Created:.{0,25}[\\d]{4,4}"
argument_list|)
argument_list|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|generatedFile
operator|.
name|replace
argument_list|(
name|QRegExp
argument_list|(
name|QLatin1String
argument_list|(
literal|"by: Qt User Interface Compiler version [.\\d]{5,5}"
argument_list|)
argument_list|)
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|generatedFile
argument_list|,
name|originalFile
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compare_data
name|void
name|tst_uic
operator|::
name|compare_data
parameter_list|()
specifier|const
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"originalFile"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"generatedFile"
argument_list|)
expr_stmt|;
name|QDir
name|generated
argument_list|(
name|m_generated
operator|.
name|path
argument_list|()
argument_list|)
decl_stmt|;
name|QDir
name|baseline
argument_list|(
name|m_baseline
argument_list|)
decl_stmt|;
specifier|const
name|QFileInfoList
name|baselineFiles
init|=
name|baseline
operator|.
name|entryInfoList
argument_list|(
name|QStringList
argument_list|(
literal|"*.h"
argument_list|)
argument_list|,
name|QDir
operator|::
name|Files
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QFileInfo
modifier|&
name|baselineFile
decl|,
name|baselineFiles
control|)
block|{
specifier|const
name|QString
name|generatedFile
init|=
name|generated
operator|.
name|absolutePath
argument_list|()
operator|+
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|baselineFile
operator|.
name|fileName
argument_list|()
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|baselineFile
operator|.
name|baseName
argument_list|()
argument_list|)
argument_list|)
operator|<<
name|baselineFile
operator|.
name|absoluteFilePath
argument_list|()
operator|<<
name|generatedFile
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_uic
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_uic.moc"
end_include
end_unit
