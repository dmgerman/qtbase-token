begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore/QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QtCore/QByteArray>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDir>
end_include
begin_include
include|#
directive|include
file|<QtCore/QFile>
end_include
begin_include
include|#
directive|include
file|<QtCore/QProcess>
end_include
begin_include
include|#
directive|include
file|<QtCore/QTimer>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_class
DECL|class|tst_rcc
class|class
name|tst_rcc
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|tst_rcc
name|tst_rcc
parameter_list|()
block|{}
private|private
name|slots
private|:
name|void
name|rcc_data
parameter_list|()
function_decl|;
name|void
name|rcc
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|findExpectedFile
name|QString
name|findExpectedFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|base
parameter_list|)
block|{
name|QString
name|expectedrccfile
init|=
name|base
decl_stmt|;
comment|// Must be updated with each minor release.
if|if
condition|(
name|QFileInfo
argument_list|(
name|expectedrccfile
operator|+
name|QLatin1String
argument_list|(
literal|".450"
argument_list|)
argument_list|)
operator|.
name|exists
argument_list|()
condition|)
name|expectedrccfile
operator|+=
name|QLatin1String
argument_list|(
literal|".450"
argument_list|)
expr_stmt|;
return|return
name|expectedrccfile
return|;
block|}
end_function
begin_function
DECL|function|doCompare
specifier|static
name|QString
name|doCompare
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|actual
parameter_list|,
specifier|const
name|QStringList
modifier|&
name|expected
parameter_list|)
block|{
if|if
condition|(
name|actual
operator|.
name|size
argument_list|()
operator|!=
name|expected
operator|.
name|size
argument_list|()
condition|)
block|{
return|return
name|QString
argument_list|(
literal|"Length count different: actual: %1, expected: %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|actual
operator|.
name|size
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|expected
operator|.
name|size
argument_list|()
argument_list|)
return|;
block|}
name|QByteArray
name|ba
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|n
init|=
name|expected
operator|.
name|size
argument_list|()
init|;
name|i
operator|!=
name|n
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|expected
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|startsWith
argument_list|(
literal|"IGNORE:"
argument_list|)
condition|)
continue|continue;
if|if
condition|(
name|expected
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|!=
name|actual
operator|.
name|at
argument_list|(
name|i
argument_list|)
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"LINES"
operator|<<
name|i
operator|<<
literal|"DIFFER"
expr_stmt|;
name|ba
operator|.
name|append
argument_list|(
literal|"\n<<<<<< actual\n"
operator|+
name|actual
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|+
literal|"\n======\n"
operator|+
name|expected
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|+
literal|"\n>>>>>> expected\n"
argument_list|)
expr_stmt|;
block|}
block|}
return|return
name|ba
return|;
block|}
end_function
begin_function
DECL|function|rcc_data
name|void
name|tst_rcc
operator|::
name|rcc_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"directory"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"qrcfile"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"images"
argument_list|)
operator|<<
name|SRCDIR
literal|"data"
operator|<<
literal|"images.qrc"
operator|<<
literal|"images.expected"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rcc
name|void
name|tst_rcc
operator|::
name|rcc
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|directory
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|qrcfile
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expected
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|QDir
operator|::
name|setCurrent
argument_list|(
name|directory
argument_list|)
condition|)
block|{
name|QString
name|message
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Unable to cd from '%1' to '%2'"
argument_list|)
operator|.
name|arg
argument_list|(
name|QDir
operator|::
name|currentPath
argument_list|()
argument_list|,
name|directory
argument_list|)
decl_stmt|;
name|QFAIL
argument_list|(
name|qPrintable
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// If the file expectedoutput.txt exists, compare the
comment|// console output with the content of that file
specifier|const
name|QString
name|expected2
init|=
name|findExpectedFile
argument_list|(
name|expected
argument_list|)
decl_stmt|;
name|QFile
name|expectedFile
argument_list|(
name|expected2
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|expectedFile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"NO EXPECTATIONS? "
operator|<<
name|expected2
expr_stmt|;
return|return;
block|}
comment|// Launch
specifier|const
name|QString
name|command
init|=
name|QLatin1String
argument_list|(
literal|"rcc"
argument_list|)
decl_stmt|;
name|QProcess
name|process
decl_stmt|;
name|process
operator|.
name|start
argument_list|(
name|command
argument_list|,
name|QStringList
argument_list|(
name|qrcfile
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|process
operator|.
name|waitForFinished
argument_list|()
condition|)
block|{
specifier|const
name|QString
name|path
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|qgetenv
argument_list|(
literal|"PATH"
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|message
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"'%1' could not be found when run from '%2'. Path: '%3' "
argument_list|)
operator|.
name|arg
argument_list|(
name|command
argument_list|,
name|QDir
operator|::
name|currentPath
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|QFAIL
argument_list|(
name|qPrintable
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|const
name|QChar
name|cr
init|=
name|QLatin1Char
argument_list|(
literal|'\r'
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|err
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|process
operator|.
name|readAllStandardError
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|(
name|cr
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|out
init|=
name|QString
operator|::
name|fromAscii
argument_list|(
name|process
operator|.
name|readAllStandardOutput
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|(
name|cr
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|err
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"UNEXPECTED STDERR CONTENTS: "
operator|<<
name|err
expr_stmt|;
name|QFAIL
argument_list|(
literal|"UNEXPECTED STDERR CONTENTS"
argument_list|)
expr_stmt|;
block|}
specifier|const
name|QChar
name|nl
init|=
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
decl_stmt|;
specifier|const
name|QStringList
name|actualLines
init|=
name|out
operator|.
name|split
argument_list|(
name|nl
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|expectedFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QStringList
name|expectedLines
init|=
name|QString
operator|::
name|fromAscii
argument_list|(
name|expectedFile
operator|.
name|readAll
argument_list|()
argument_list|)
operator|.
name|split
argument_list|(
name|nl
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|diff
init|=
name|doCompare
argument_list|(
name|actualLines
argument_list|,
name|expectedLines
argument_list|)
decl_stmt|;
if|if
condition|(
name|diff
operator|.
name|size
argument_list|()
condition|)
name|QFAIL
argument_list|(
name|qPrintable
argument_list|(
name|diff
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_APPLESS_MAIN
argument_list|(
argument|tst_rcc
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_rcc.moc"
end_include
end_unit
