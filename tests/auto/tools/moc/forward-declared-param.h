begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Intel Corporation ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:GPL-EXCEPT$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3 as published by the Free Software ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|FORWARD_DECLARED_PARAM_H
end_ifndef
begin_define
DECL|macro|FORWARD_DECLARED_PARAM_H
define|#
directive|define
name|FORWARD_DECLARED_PARAM_H
end_define
begin_include
include|#
directive|include
file|<qobject.h>
end_include
begin_include
include|#
directive|include
file|<qmetatype.h>
end_include
begin_comment
comment|// test support for const refs to forward-declared structs in parameters
end_comment
begin_struct_decl
struct_decl|struct
name|ForwardDeclaredParam
struct_decl|;
end_struct_decl
begin_expr_stmt
DECL|variable|ForwardDeclaredContainer
name|template
operator|<
name|typename
name|T
operator|>
name|class
name|ForwardDeclaredContainer
expr_stmt|;
end_expr_stmt
begin_struct
DECL|struct|FullyDefined
struct|struct
name|FullyDefined
block|{}
struct|;
end_struct
begin_macro
DECL|function|Q_DECLARE_METATYPE
name|Q_DECLARE_METATYPE
argument_list|(
argument|FullyDefined
argument_list|)
end_macro
begin_decl_stmt
name|class
name|ForwardDeclaredParamClass
range|:
name|public
name|QObject
block|{
name|Q_OBJECT
name|public
name|slots
operator|:
name|void
name|slotNaked
argument_list|(
argument|const ForwardDeclaredParam&
argument_list|)
block|{}
name|void
name|slotFDC
argument_list|(
argument|const ForwardDeclaredContainer<ForwardDeclaredParam>&
argument_list|)
block|{}
name|void
name|slotFDC
argument_list|(
argument|const ForwardDeclaredContainer<int>&
argument_list|)
block|{}
name|void
name|slotFDC
argument_list|(
argument|const ForwardDeclaredContainer<QString>&
argument_list|)
block|{}
name|void
name|slotFDC
argument_list|(
argument|const ForwardDeclaredContainer<FullyDefined>&
argument_list|)
block|{}
name|void
name|slotQSet
argument_list|(
argument|const QSet<ForwardDeclaredParam>&
argument_list|)
block|{}
name|void
name|slotQSet
argument_list|(
argument|const QSet<int>&
argument_list|)
block|{}
name|void
name|slotQSet
argument_list|(
argument|const QSet<QString>&
argument_list|)
block|{}
name|void
name|slotQSet
argument_list|(
argument|const QSet<FullyDefined>&
argument_list|)
block|{}
name|signals
operator|:
name|void
name|signalNaked
argument_list|(
specifier|const
name|ForwardDeclaredParam
operator|&
argument_list|)
block|;
name|void
name|signalFDC
argument_list|(
specifier|const
name|ForwardDeclaredContainer
operator|<
name|ForwardDeclaredParam
operator|>
operator|&
argument_list|)
block|;
name|void
name|signalFDC
argument_list|(
specifier|const
name|ForwardDeclaredContainer
operator|<
name|int
operator|>
operator|&
argument_list|)
block|;
name|void
name|signalFDC
argument_list|(
specifier|const
name|ForwardDeclaredContainer
operator|<
name|QString
operator|>
operator|&
argument_list|)
block|;
name|void
name|signalFDC
argument_list|(
specifier|const
name|ForwardDeclaredContainer
operator|<
name|FullyDefined
operator|>
operator|&
argument_list|)
block|;
name|void
name|signalQSet
argument_list|(
specifier|const
name|QSet
operator|<
name|ForwardDeclaredParam
operator|>
operator|&
argument_list|)
block|;
name|void
name|signalQSet
argument_list|(
specifier|const
name|QSet
operator|<
name|int
operator|>
operator|&
argument_list|)
block|;
name|void
name|signalQSet
argument_list|(
specifier|const
name|QSet
operator|<
name|QString
operator|>
operator|&
argument_list|)
block|;
name|void
name|signalQSet
argument_list|(
specifier|const
name|QSet
operator|<
name|FullyDefined
operator|>
operator|&
argument_list|)
block|; }
decl_stmt|;
end_decl_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// FORWARD_DECLARED_PARAM_H
end_comment
end_unit
