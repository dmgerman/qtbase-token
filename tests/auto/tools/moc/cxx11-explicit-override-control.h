begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 KlarÃ¤lvdalens Datakonsult AB, a KDAB Group company, info@kdab.com, author Marc Mutz<marc.mutz@kdab.com> ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|TESTS_AUTO_CORELIB_TOOLS_MOC_CXX11_EXPLICIT_OVERRIDE_CONTROL_H
end_ifndef
begin_define
DECL|macro|TESTS_AUTO_CORELIB_TOOLS_MOC_CXX11_EXPLICIT_OVERRIDE_CONTROL_H
define|#
directive|define
name|TESTS_AUTO_CORELIB_TOOLS_MOC_CXX11_EXPLICIT_OVERRIDE_CONTROL_H
end_define
begin_include
include|#
directive|include
file|<QtCore/QObject>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|Q_MOC_RUN
end_ifndef
begin_comment
comment|// hide from moc
end_comment
begin_define
DECL|macro|override
define|#
directive|define
name|override
end_define
begin_define
DECL|macro|final
define|#
directive|define
name|final
end_define
begin_define
DECL|macro|sealed
define|#
directive|define
name|sealed
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|class
name|ExplicitOverrideControlBase
range|:
name|public
name|QObject
block|{
name|Q_OBJECT
name|public
operator|:
name|explicit
name|ExplicitOverrideControlBase
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
operator|:
name|QObject
argument_list|(
argument|parent
argument_list|)
block|{}
name|private
name|Q_SLOTS
operator|:
name|virtual
name|void
name|pureSlot0
argument_list|()
operator|=
literal|0
block|;
name|virtual
name|void
name|pureSlot1
argument_list|()
operator|=
literal|0
block|;
name|virtual
name|void
name|pureSlot2
argument_list|()
specifier|const
operator|=
literal|0
block|;
name|virtual
name|void
name|pureSlot3
argument_list|()
specifier|const
operator|=
literal|0
block|;
if|#
directive|if
literal|0
comment|// moc doesn't support volatile slots
block|virtual void pureSlot4() volatile = 0;     virtual void pureSlot5() volatile = 0;     virtual void pureSlot6() const volatile = 0;     virtual void pureSlot7() volatile const = 0;     virtual void pureSlot8() const volatile = 0;     virtual void pureSlot9() volatile const = 0;
endif|#
directive|endif
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|ExplicitOverrideControlFinalQt
range|:
name|public
name|ExplicitOverrideControlBase
block|{
name|Q_OBJECT
name|public
operator|:
name|explicit
name|ExplicitOverrideControlFinalQt
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
operator|:
name|ExplicitOverrideControlBase
argument_list|(
argument|parent
argument_list|)
block|{}
name|private
name|Q_SLOTS
operator|:
name|void
name|pureSlot0
argument_list|()
name|Q_DECL_FINAL
block|{}
name|void
name|pureSlot1
argument_list|()
name|Q_DECL_FINAL
block|{}
name|void
name|pureSlot2
argument_list|()
specifier|const
name|Q_DECL_FINAL
block|{}
name|void
name|pureSlot3
argument_list|()
name|Q_DECL_FINAL
specifier|const
block|{}
if|#
directive|if
literal|0
comment|// moc doesn't support volatile slots
block|void pureSlot4() volatile Q_DECL_FINAL {}     void pureSlot5() Q_DECL_FINAL volatile {}     void pureSlot6() const volatile Q_DECL_FINAL {}     void pureSlot7() volatile Q_DECL_FINAL const {}     void pureSlot8() const Q_DECL_FINAL volatile {}     void pureSlot9() Q_DECL_FINAL volatile const {}
endif|#
directive|endif
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|ExplicitOverrideControlFinalCxx11
range|:
name|public
name|ExplicitOverrideControlBase
block|{
name|Q_OBJECT
name|public
operator|:
name|explicit
name|ExplicitOverrideControlFinalCxx11
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
operator|:
name|ExplicitOverrideControlBase
argument_list|(
argument|parent
argument_list|)
block|{}
name|private
name|Q_SLOTS
operator|:
name|void
name|pureSlot0
argument_list|()
name|final
block|{}
name|void
name|pureSlot1
argument_list|()
name|final
block|{}
name|void
name|pureSlot2
argument_list|()
specifier|const
name|final
block|{}
name|void
name|pureSlot3
argument_list|()
name|final
specifier|const
block|{}
if|#
directive|if
literal|0
comment|// moc doesn't support volatile slots
block|void pureSlot4() volatile final {}     void pureSlot5() final volatile {}     void pureSlot6() const volatile final {}     void pureSlot7() volatile final const {}     void pureSlot8() const final volatile {}     void pureSlot9() final volatile const {}
endif|#
directive|endif
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|ExplicitOverrideControlSealed
range|:
name|public
name|ExplicitOverrideControlBase
block|{
name|Q_OBJECT
name|public
operator|:
name|explicit
name|ExplicitOverrideControlSealed
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
operator|:
name|ExplicitOverrideControlBase
argument_list|(
argument|parent
argument_list|)
block|{}
name|private
name|Q_SLOTS
operator|:
name|void
name|pureSlot0
argument_list|()
name|sealed
block|{}
name|void
name|pureSlot1
argument_list|()
name|sealed
block|{}
name|void
name|pureSlot2
argument_list|()
specifier|const
name|sealed
block|{}
name|void
name|pureSlot3
argument_list|()
name|sealed
specifier|const
block|{}
if|#
directive|if
literal|0
comment|// moc doesn't support volatile slots
block|void pureSlot4() volatile sealed {}     void pureSlot5() sealed volatile {}     void pureSlot6() const volatile sealed {}     void pureSlot7() volatile sealed const {}     void pureSlot8() const sealed volatile {}     void pureSlot9() sealed volatile const {}
endif|#
directive|endif
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|ExplicitOverrideControlOverrideQt
range|:
name|public
name|ExplicitOverrideControlBase
block|{
name|Q_OBJECT
name|public
operator|:
name|explicit
name|ExplicitOverrideControlOverrideQt
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
operator|:
name|ExplicitOverrideControlBase
argument_list|(
argument|parent
argument_list|)
block|{}
name|private
name|Q_SLOTS
operator|:
name|void
name|pureSlot0
argument_list|()
name|Q_DECL_OVERRIDE
block|{}
name|void
name|pureSlot1
argument_list|()
name|Q_DECL_OVERRIDE
block|{}
name|void
name|pureSlot2
argument_list|()
specifier|const
name|Q_DECL_OVERRIDE
block|{}
name|void
name|pureSlot3
argument_list|()
name|Q_DECL_OVERRIDE
specifier|const
block|{}
if|#
directive|if
literal|0
comment|// moc doesn't support volatile slots
block|void pureSlot4() volatile Q_DECL_OVERRIDE {}     void pureSlot5() Q_DECL_OVERRIDE volatile {}     void pureSlot6() const volatile Q_DECL_OVERRIDE {}     void pureSlot7() volatile Q_DECL_OVERRIDE const {}     void pureSlot8() const Q_DECL_OVERRIDE volatile {}     void pureSlot9() Q_DECL_OVERRIDE volatile const {}
endif|#
directive|endif
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|ExplicitOverrideControlOverrideCxx11
range|:
name|public
name|ExplicitOverrideControlBase
block|{
name|Q_OBJECT
name|public
operator|:
name|explicit
name|ExplicitOverrideControlOverrideCxx11
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
operator|:
name|ExplicitOverrideControlBase
argument_list|(
argument|parent
argument_list|)
block|{}
name|private
name|Q_SLOTS
operator|:
name|void
name|pureSlot0
argument_list|()
name|override
block|{}
name|void
name|pureSlot1
argument_list|()
name|override
block|{}
name|void
name|pureSlot2
argument_list|()
specifier|const
name|override
block|{}
name|void
name|pureSlot3
argument_list|()
name|override
specifier|const
block|{}
if|#
directive|if
literal|0
comment|// moc doesn't support volatile slots
block|void pureSlot4() volatile override {}     void pureSlot5() override volatile {}     void pureSlot6() const volatile override {}     void pureSlot7() volatile override const {}     void pureSlot8() const override volatile {}     void pureSlot9() override volatile const {}
endif|#
directive|endif
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|ExplicitOverrideControlFinalQtOverrideQt
range|:
name|public
name|ExplicitOverrideControlBase
block|{
name|Q_OBJECT
name|public
operator|:
name|explicit
name|ExplicitOverrideControlFinalQtOverrideQt
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
operator|:
name|ExplicitOverrideControlBase
argument_list|(
argument|parent
argument_list|)
block|{}
name|private
name|Q_SLOTS
operator|:
name|void
name|pureSlot0
argument_list|()
name|Q_DECL_FINAL
name|Q_DECL_OVERRIDE
block|{}
name|void
name|pureSlot1
argument_list|()
name|Q_DECL_OVERRIDE
name|Q_DECL_FINAL
block|{}
name|void
name|pureSlot2
argument_list|()
name|Q_DECL_OVERRIDE
specifier|const
name|Q_DECL_FINAL
block|{}
name|void
name|pureSlot3
argument_list|()
name|Q_DECL_FINAL
specifier|const
name|Q_DECL_OVERRIDE
block|{}
if|#
directive|if
literal|0
comment|// moc doesn't support volatile slots
block|void pureSlot4() volatile Q_DECL_FINAL Q_DECL_OVERRIDE {}     void pureSlot5() Q_DECL_OVERRIDE Q_DECL_FINAL volatile {}     void pureSlot6() Q_DECL_OVERRIDE const volatile Q_DECL_FINAL {}     void pureSlot7() volatile Q_DECL_OVERRIDE Q_DECL_FINAL const {}     void pureSlot8() const Q_DECL_FINAL Q_DECL_OVERRIDE volatile {}     void pureSlot9() Q_DECL_FINAL volatile const Q_DECL_OVERRIDE {}
endif|#
directive|endif
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|ExplicitOverrideControlFinalCxx11OverrideCxx11
range|:
name|public
name|ExplicitOverrideControlBase
block|{
name|Q_OBJECT
name|public
operator|:
name|explicit
name|ExplicitOverrideControlFinalCxx11OverrideCxx11
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
operator|:
name|ExplicitOverrideControlBase
argument_list|(
argument|parent
argument_list|)
block|{}
name|private
name|Q_SLOTS
operator|:
name|void
name|pureSlot0
argument_list|()
name|final
name|override
block|{}
name|void
name|pureSlot1
argument_list|()
name|override
name|final
block|{}
name|void
name|pureSlot2
argument_list|()
name|override
specifier|const
name|final
block|{}
name|void
name|pureSlot3
argument_list|()
name|final
specifier|const
name|override
block|{}
if|#
directive|if
literal|0
comment|// moc doesn't support volatile slots
block|void pureSlot4() volatile final override {}     void pureSlot5() override final volatile {}     void pureSlot6() const volatile final override {}     void pureSlot7() volatile final override const {}     void pureSlot8() const override final volatile {}     void pureSlot9() override final volatile const {}
endif|#
directive|endif
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
name|class
name|ExplicitOverrideControlSealedOverride
range|:
name|public
name|ExplicitOverrideControlBase
block|{
name|Q_OBJECT
name|public
operator|:
name|explicit
name|ExplicitOverrideControlSealedOverride
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
operator|:
name|ExplicitOverrideControlBase
argument_list|(
argument|parent
argument_list|)
block|{}
name|private
name|Q_SLOTS
operator|:
name|void
name|pureSlot0
argument_list|()
name|sealed
name|override
block|{}
name|void
name|pureSlot1
argument_list|()
name|override
name|sealed
block|{}
name|void
name|pureSlot2
argument_list|()
name|override
specifier|const
name|sealed
block|{}
name|void
name|pureSlot3
argument_list|()
name|sealed
specifier|const
name|override
block|{}
if|#
directive|if
literal|0
comment|// moc doesn't support volatile slots
block|void pureSlot4() volatile sealed override {}     void pureSlot5() sealed override volatile {}     void pureSlot6() const override volatile sealed {}     void pureSlot7() volatile sealed override const {}     void pureSlot8() const sealed volatile override {}     void pureSlot9() override sealed volatile const {}
endif|#
directive|endif
block|}
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|Q_MOC_RUN
end_ifndef
begin_undef
DECL|macro|final
undef|#
directive|undef
name|final
end_undef
begin_undef
DECL|macro|sealed
undef|#
directive|undef
name|sealed
end_undef
begin_undef
DECL|macro|override
undef|#
directive|undef
name|override
end_undef
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// TESTS_AUTO_CORELIB_TOOLS_MOC_CXX11_EXPLICIT_OVERRIDE_CONTROL_H
end_comment
end_unit
