begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:GPL-EXCEPT$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3 as published by the Free Software ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|NAMESPACED_FLAGS_H
end_ifndef
begin_define
DECL|macro|NAMESPACED_FLAGS_H
define|#
directive|define
name|NAMESPACED_FLAGS_H
end_define
begin_include
include|#
directive|include
file|<QObject>
end_include
begin_decl_stmt
name|namespace
name|Foo
block|{
name|class
name|Bar
range|:
name|public
name|QObject
block|{
name|Q_OBJECT
name|Q_PROPERTY
argument_list|(
argument|Flags flags READ flags WRITE setFlags
argument_list|)
name|public
operator|:
name|explicit
name|Bar
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
operator|:
name|QObject
argument_list|(
name|parent
argument_list|)
block|,
name|mFlags
argument_list|()
block|{}
expr|enum
name|Flag
block|{
name|Read
operator|=
literal|1
block|,
name|Write
operator|=
literal|2
block|}
block|;
name|Q_DECLARE_FLAGS
argument_list|(
argument|Flags
argument_list|,
argument|Flag
argument_list|)
name|Q_FLAG
argument_list|(
argument|Flags
argument_list|)
name|void
name|setFlags
argument_list|(
argument|Flags f
argument_list|)
block|{
name|mFlags
operator|=
name|f
block|; }
name|Flags
name|flags
argument_list|()
specifier|const
block|{
return|return
name|mFlags
return|;
block|}
name|private
operator|:
name|Flags
name|mFlags
block|;     }
decl_stmt|;
name|class
name|Baz
range|:
name|public
name|QObject
block|{
name|Q_OBJECT
comment|//Q_PROPERTY( Bar::Flags flags READ flags WRITE setFlags ) // triggers assertion
name|Q_PROPERTY
argument_list|(
argument|Foo::Bar::Flags flags READ flags WRITE setFlags
argument_list|)
comment|// fails to compile, or with the same assertion if moc fix is applied
name|Q_PROPERTY
argument_list|(
argument|QList<Foo::Bar::Flags> flagsList READ flagsList WRITE setFlagsList
argument_list|)
name|public
operator|:
name|explicit
name|Baz
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
operator|:
name|QObject
argument_list|(
name|parent
argument_list|)
block|,
name|mFlags
argument_list|()
block|{}
name|void
name|setFlags
argument_list|(
argument|Bar::Flags f
argument_list|)
block|{
name|mFlags
operator|=
name|f
block|; }
name|Bar
operator|::
name|Flags
name|flags
argument_list|()
specifier|const
block|{
return|return
name|mFlags
return|;
block|}
name|void
name|setFlagsList
argument_list|(
argument|const QList<Bar::Flags>&f
argument_list|)
block|{
name|mList
operator|=
name|f
block|; }
name|QList
operator|<
name|Bar
operator|::
name|Flags
operator|>
name|flagsList
argument_list|()
specifier|const
block|{
return|return
name|mList
return|;
block|}
name|private
operator|:
name|Bar
operator|::
name|Flags
name|mFlags
block|;
name|QList
operator|<
name|Bar
operator|::
name|Flags
operator|>
name|mList
block|;     }
decl_stmt|;
block|}
end_decl_stmt
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|Foo::Bar::Flags
argument_list|)
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// NAMESPACED_FLAGS_H
end_comment
end_unit
