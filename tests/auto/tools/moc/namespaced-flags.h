begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QObject>
end_include
begin_decl_stmt
name|namespace
name|Foo
block|{
name|class
name|Bar
range|:
name|public
name|QObject
block|{
name|Q_OBJECT
name|Q_FLAGS
argument_list|(
argument|Flags
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|Flags flags READ flags WRITE setFlags
argument_list|)
name|public
operator|:
name|explicit
name|Bar
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
operator|:
name|QObject
argument_list|(
name|parent
argument_list|)
block|,
name|mFlags
argument_list|()
block|{}
expr|enum
name|Flag
block|{
name|Read
operator|=
literal|1
block|,
name|Write
operator|=
literal|2
block|}
block|;
name|Q_DECLARE_FLAGS
argument_list|(
argument|Flags
argument_list|,
argument|Flag
argument_list|)
name|void
name|setFlags
argument_list|(
argument|Flags f
argument_list|)
block|{
name|mFlags
operator|=
name|f
block|; }
name|Flags
name|flags
argument_list|()
specifier|const
block|{
return|return
name|mFlags
return|;
block|}
name|private
operator|:
name|Flags
name|mFlags
block|;     }
decl_stmt|;
name|class
name|Baz
range|:
name|public
name|QObject
block|{
name|Q_OBJECT
comment|//Q_PROPERTY( Bar::Flags flags READ flags WRITE setFlags ) // triggers assertion
name|Q_PROPERTY
argument_list|(
argument|Foo::Bar::Flags flags READ flags WRITE setFlags
argument_list|)
comment|// fails to compile, or with the same assertion if moc fix is applied
name|Q_PROPERTY
argument_list|(
argument|QList<Foo::Bar::Flags> flagsList READ flagsList WRITE setFlagsList
argument_list|)
name|public
operator|:
name|explicit
name|Baz
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
operator|:
name|QObject
argument_list|(
name|parent
argument_list|)
block|,
name|mFlags
argument_list|()
block|{}
name|void
name|setFlags
argument_list|(
argument|Bar::Flags f
argument_list|)
block|{
name|mFlags
operator|=
name|f
block|; }
name|Bar
operator|::
name|Flags
name|flags
argument_list|()
specifier|const
block|{
return|return
name|mFlags
return|;
block|}
name|void
name|setFlagsList
argument_list|(
argument|const QList<Bar::Flags>&f
argument_list|)
block|{
name|mList
operator|=
name|f
block|; }
name|QList
operator|<
name|Bar
operator|::
name|Flags
operator|>
name|flagsList
argument_list|()
specifier|const
block|{
return|return
name|mList
return|;
block|}
name|private
operator|:
name|Bar
operator|::
name|Flags
name|mFlags
block|;
name|QList
operator|<
name|Bar
operator|::
name|Flags
operator|>
name|mList
block|;     }
decl_stmt|;
block|}
end_decl_stmt
begin_macro
name|Q_DECLARE_OPERATORS_FOR_FLAGS
argument_list|(
argument|Foo::Bar::Flags
argument_list|)
end_macro
end_unit
