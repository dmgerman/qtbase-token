begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Copyright (C) 2013 Olivier Goffart<ogoffart@woboq.com> ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_include
include|#
directive|include
file|<qobject.h>
end_include
begin_include
include|#
directive|include
file|<qmetaobject.h>
end_include
begin_include
include|#
directive|include
file|"using-namespaces.h"
end_include
begin_include
include|#
directive|include
file|"assign-namespace.h"
end_include
begin_include
include|#
directive|include
file|"no-keywords.h"
end_include
begin_include
include|#
directive|include
file|"single_function_keyword.h"
end_include
begin_include
include|#
directive|include
file|"backslash-newlines.h"
end_include
begin_include
include|#
directive|include
file|"slots-with-void-template.h"
end_include
begin_include
include|#
directive|include
file|"pure-virtual-signals.h"
end_include
begin_include
include|#
directive|include
file|"qinvokable.h"
end_include
begin_comment
comment|// msvc and friends crap out on it
end_comment
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_IRIX
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
end_if
begin_define
DECL|macro|SKIP_NEWLINE_TEST
define|#
directive|define
name|SKIP_NEWLINE_TEST
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|SKIP_NEWLINE_TEST
argument_list|)
end_if
begin_include
include|#
directive|include
file|"os9-newlines.h"
end_include
begin_comment
comment|// msvc and friends crap out on this file too,
end_comment
begin_comment
comment|// it seems to contain Mac 9 EOLs, and not windows EOLs.
end_comment
begin_include
include|#
directive|include
file|"win-newlines.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"escapes-in-string-literals.h"
end_include
begin_include
include|#
directive|include
file|"cstyle-enums.h"
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|PARSE_BOOST
argument_list|)
end_if
begin_include
include|#
directive|include
file|"parse-boost.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"cxx11-enums.h"
end_include
begin_include
include|#
directive|include
file|"cxx11-final-classes.h"
end_include
begin_include
include|#
directive|include
file|"cxx11-explicit-override-control.h"
end_include
begin_include
include|#
directive|include
file|"parse-defines.h"
end_include
begin_macro
name|QT_USE_NAMESPACE
end_macro
begin_struct
DECL|struct|QTBUG_31218
template|template
parameter_list|<
name|bool
name|b
parameter_list|>
struct|struct
name|QTBUG_31218
block|{
block|}
struct|;
end_struct
begin_struct
struct|struct
name|QTBUG_31218_Derived
super|:
name|QTBUG_31218
argument_list|<
operator|-
literal|1
operator|<
literal|0
argument_list|>
block|{
block|}
struct|;
end_struct
begin_struct
struct|struct
name|MyStruct
block|{
block|}
struct|;
end_struct
begin_struct
struct|struct
name|MyStruct2
block|{
block|}
struct|;
end_struct
begin_struct
struct|struct
name|SuperClass
block|{
block|}
struct|;
end_struct
begin_comment
comment|// Try to avoid inserting for instance a comment with a quote between the following line and the Q_OBJECT
end_comment
begin_comment
comment|// That will make the test give a false positive.
end_comment
begin_decl_stmt
specifier|const
name|char
modifier|*
name|test_multiple_number_of_escapes
init|=
literal|"\\\""
decl_stmt|;
end_decl_stmt
begin_namespace
namespace|namespace
name|MyNamespace
block|{
class|class
name|TestSuperClass
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
specifier|inline
name|TestSuperClass
parameter_list|()
block|{}
block|}
class|;
block|}
end_namespace
begin_namespace
namespace|namespace
name|String
block|{
typedef|typedef
name|QString
name|Type
typedef|;
block|}
end_namespace
begin_namespace
namespace|namespace
name|Int
block|{
typedef|typedef
name|int
name|Type
typedef|;
block|}
end_namespace
begin_typedef
typedef|typedef
struct|struct
block|{
name|int
name|doNotConfuseMoc
decl_stmt|;
block|}
name|OldStyleCStruct
typedef|;
end_typedef
begin_class
class|class
name|Sender
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|void
name|sendValue
parameter_list|(
specifier|const
name|String
operator|::
name|Type
modifier|&
name|value
parameter_list|)
block|{
emit|emit
name|send
argument_list|(
name|value
argument_list|)
emit|;
block|}
name|void
name|sendValue
parameter_list|(
specifier|const
name|Int
operator|::
name|Type
modifier|&
name|value
parameter_list|)
block|{
emit|emit
name|send
argument_list|(
name|value
argument_list|)
emit|;
block|}
signals|signals:
name|void
name|send
parameter_list|(
specifier|const
name|String
operator|::
name|Type
modifier|&
parameter_list|)
function_decl|;
name|void
name|send
parameter_list|(
specifier|const
name|Int
operator|::
name|Type
modifier|&
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_class
class|class
name|Receiver
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|Receiver
parameter_list|()
member_init_list|:
name|stringCallCount
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|intCallCount
argument_list|(
literal|0
argument_list|)
block|{}
name|int
name|stringCallCount
decl_stmt|;
name|int
name|intCallCount
decl_stmt|;
public|public
name|slots
public|:
name|void
name|receive
parameter_list|(
specifier|const
name|String
operator|::
name|Type
modifier|&
parameter_list|)
block|{
name|stringCallCount
operator|++
expr_stmt|;
block|}
name|void
name|receive
parameter_list|(
specifier|const
name|Int
operator|::
name|Type
modifier|&
parameter_list|)
block|{
name|intCallCount
operator|++
expr_stmt|;
block|}
block|}
class|;
end_class
begin_define
DECL|macro|MACRO_WITH_POSSIBLE_COMPILER_SPECIFIC_ATTRIBUTES
define|#
directive|define
name|MACRO_WITH_POSSIBLE_COMPILER_SPECIFIC_ATTRIBUTES
end_define
begin_define
DECL|macro|DONT_CONFUSE_MOC
define|#
directive|define
name|DONT_CONFUSE_MOC
parameter_list|(
name|klass
parameter_list|)
value|klass
end_define
begin_define
DECL|macro|DONT_CONFUSE_MOC_EVEN_MORE
define|#
directive|define
name|DONT_CONFUSE_MOC_EVEN_MORE
parameter_list|(
name|klass
parameter_list|,
name|dummy
parameter_list|,
name|dummy2
parameter_list|)
value|klass
end_define
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|MyStruct
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|MyStruct*
argument_list|)
end_macro
begin_namespace
namespace|namespace
name|myNS
block|{
struct|struct
name|Points
block|{
name|Points
parameter_list|()
member_init_list|:
name|p1
argument_list|(
literal|0xBEEF
argument_list|)
member_init_list|,
name|p2
argument_list|(
literal|0xBABE
argument_list|)
block|{ }
name|int
name|p1
decl_stmt|,
name|p2
decl_stmt|;
block|}
struct|;
block|}
end_namespace
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|myNS::Points
argument_list|)
end_macro
begin_class
class|class
name|TestClassinfoWithEscapes
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
name|Q_CLASSINFO
argument_list|(
literal|"escaped"
argument_list|,
literal|"\"bar\""
argument_list|)
name|Q_CLASSINFO
argument_list|(
literal|"\"escaped\""
argument_list|,
literal|"foo"
argument_list|)
decl|public
name|slots
range|:
name|void
name|slotWithAReallyLongName
argument_list|(
argument|int
argument_list|)
block|{ }
block|}
class|;
end_class
begin_struct_decl
struct_decl|struct
name|ForwardDeclaredStruct
struct_decl|;
end_struct_decl
begin_struct
struct|struct
name|StructQObject
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|void
name|foo
parameter_list|(
name|struct
name|ForwardDeclaredStruct
modifier|*
parameter_list|)
function_decl|;
block|}
struct|;
end_struct
begin_function
name|void
name|StructQObject
operator|::
name|foo
parameter_list|(
name|struct
name|ForwardDeclaredStruct
modifier|*
parameter_list|)
block|{
struct|struct
name|Inner
block|{
name|bool
name|field
decl_stmt|;
block|}
struct|;
name|struct
name|Inner
name|unusedVariable
decl_stmt|;
block|}
end_function
begin_decl_stmt
name|class
name|TestClass
range|:
specifier|public
name|MyNamespace
operator|::
name|TestSuperClass
decl_stmt|, public
name|DONT_CONFUSE_MOC
argument_list|(
name|MyStruct
argument_list|)
decl_stmt|,                   public
name|DONT_CONFUSE_MOC_EVEN_MORE
argument_list|(
name|MyStruct2
argument_list|,
name|dummy
argument_list|,
name|ignored
argument_list|)
argument_list|{
name|Q_OBJECT
name|Q_CLASSINFO
argument_list|(
literal|"help"
argument_list|,
argument|QT_TR_NOOP(
literal|"Opening this will let you configure something"
argument|)
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|short int shortIntProperty READ shortIntProperty
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|unsigned short int unsignedShortIntProperty READ unsignedShortIntProperty
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|signed short int signedShortIntProperty READ signedShortIntProperty
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|long int longIntProperty READ longIntProperty
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|unsigned long int unsignedLongIntProperty READ unsignedLongIntProperty
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|signed long int signedLongIntProperty READ signedLongIntProperty
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|long double longDoubleProperty READ longDoubleProperty
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|myNS::Points points READ points WRITE setPoints
argument_list|)
name|Q_CLASSINFO
argument_list|(
literal|"Multi"
literal|"line"
argument_list|,
literal|""
literal|"This is a "
literal|"multiline Q_CLASSINFO"
literal|""
argument_list|)
comment|// a really really long string that we have to cut into pieces in the generated stringdata
comment|// table, otherwise msvc craps out
name|Q_CLASSINFO
argument_list|(
literal|"D-Bus Introspection"
argument_list|,
literal|""
literal|"<interface name=\"org.kde.KCookieServer\">\n"
literal|"<method name=\"findCookies\">\n"
literal|"<arg direction=\"in\" type=\"s\" name=\"url\" />\n"
literal|"<arg direction=\"in\" type=\"x\" name=\"windowId\" />\n"
literal|"<arg direction=\"out\" type=\"s\" name=\"cookies\" />\n"
literal|"</method>\n"
literal|"<method name=\"findDomains\">\n"
literal|"<arg direction=\"out\" type=\"as\" name=\"domains\" />\n"
literal|"</method>\n"
literal|"<method name=\"findCookies\">\n"
literal|"<arg direction=\"in\" type=\"ai\" name=\"fields\" />\n"
literal|"<arg direction=\"in\" type=\"s\" name=\"domain\" />\n"
literal|"<arg direction=\"in\" type=\"s\" name=\"fqdn\" />\n"
literal|"<arg direction=\"in\" type=\"s\" name=\"path\" />\n"
literal|"<arg direction=\"in\" type=\"s\" name=\"name\" />\n"
literal|"<arg direction=\"out\" type=\"as\" name=\"cookies\" />\n"
literal|"<annotation value=\"QList&lt;int>\" name=\"com.trolltech.QtDBus.QtTypeName.In0\" />\n"
literal|"</method>\n"
literal|"<method name=\"findDOMCookies\">\n"
literal|"<arg direction=\"in\" type=\"s\" name=\"url\" />\n"
literal|"<arg direction=\"in\" type=\"x\" name=\"windowId\" />\n"
literal|"<arg direction=\"out\" type=\"s\" name=\"cookies\" />\n"
literal|"</method>\n"
literal|"<method name=\"addCookies\">\n"
literal|"<arg direction=\"in\" type=\"s\" name=\"url\" />\n"
literal|"<arg direction=\"in\" type=\"ay\" name=\"cookieHeader\" />\n"
literal|"<arg direction=\"in\" type=\"x\" name=\"windowId\"  />\n"
literal|"</method>\n"
literal|"<method name=\"deleteCookie\">\n"
literal|"<arg direction=\"in\" type=\"s\" name=\"domain\" />\n"
literal|"<arg direction=\"in\" type=\"s\" name=\"fqdn\" />\n"
literal|"<arg direction=\"in\" type=\"s\" name=\"path\" />\n"
literal|"<arg direction=\"in\" type=\"s\" name=\"name\" />\n"
literal|"</method>\n"
literal|"<method name=\"deleteCookiesFromDomain\">\n"
literal|"<arg direction=\"in\" type=\"s\" name=\"domain\" />\n"
literal|"</method>\n"
literal|"<method name=\"deleteSessionCookies\">\n"
literal|"<arg direction=\"in\" type=\"x\" name=\"windowId\" />\n"
literal|"</method>\n"
literal|"<method name=\"deleteSessionCookiesFor\">\n"
literal|"<arg direction=\"in\" type=\"s\" name=\"fqdn\" />\n"
literal|"<arg direction=\"in\" type=\"x\" name=\"windowId\" />\n"
literal|"</method>\n"
literal|"<method name=\"deleteAllCookies\" />\n"
literal|"<method name=\"addDOMCookies\">\n"
literal|"<arg direction=\"in\" type=\"s\" name=\"url\" />\n"
literal|"<arg direction=\"in\" type=\"ay\" name=\"cookieHeader\" />\n"
literal|"<arg direction=\"in\" type=\"x\" name=\"windowId\" />\n"
literal|"</method>\n"
literal|"<method name=\"setDomainAdvice\">\n"
literal|"<arg direction=\"in\" type=\"s\" name=\"url\" />\n"
literal|"<arg direction=\"in\" type=\"s\" name=\"advice\" />\n"
literal|"</method>\n"
literal|"<method name=\"getDomainAdvice\">\n"
literal|"<arg direction=\"in\" type=\"s\" name=\"url\" />\n"
literal|"<arg direction=\"out\" type=\"s\" name=\"advice\" />\n"
literal|"</method>\n"
literal|"<method name=\"reloadPolicy\" />\n"
literal|"<method name=\"shutdown\" />\n"
literal|"</interface>\n"
literal|""
argument_list|)
specifier|public
operator|:
specifier|inline
name|TestClass
argument_list|()
block|{}
specifier|private
name|slots
operator|:
specifier|inline
name|void
name|dummy1
argument_list|()
name|MACRO_WITH_POSSIBLE_COMPILER_SPECIFIC_ATTRIBUTES
block|{}
specifier|inline
name|void
name|dummy2
argument_list|()
name|MACRO_WITH_POSSIBLE_COMPILER_SPECIFIC_ATTRIBUTES
specifier|const
block|{}
specifier|inline
name|void
name|dummy3
argument_list|()
specifier|const
name|MACRO_WITH_POSSIBLE_COMPILER_SPECIFIC_ATTRIBUTES
block|{}
name|void
name|slotWithULongLong
argument_list|(
argument|unsigned long long
argument_list|)
block|{}
name|void
name|slotWithULongLongP
argument_list|(
argument|unsigned long long*
argument_list|)
block|{}
name|void
name|slotWithULong
argument_list|(
argument|unsigned long
argument_list|)
block|{}
name|void
name|slotWithLongLong
argument_list|(
argument|long long
argument_list|)
block|{}
name|void
name|slotWithLong
argument_list|(
argument|long
argument_list|)
block|{}
name|void
name|slotWithColonColonType
argument_list|(
argument|::Int::Type
argument_list|)
block|{}
name|TestClass
operator|&
name|slotWithReferenceReturnType
argument_list|()
block|{
return|return
operator|*
name|this
return|;
block|}
if|#
directive|if
operator|(
literal|0
operator|&&
literal|1
operator|)
operator|||
literal|1
name|void
name|expressionEvaluationShortcut1
argument_list|()
block|{}
endif|#
directive|endif
if|#
directive|if
operator|(
literal|1
operator|||
literal|0
operator|)
operator|&&
literal|0
else|#
directive|else
name|void
name|expressionEvaluationShortcut2
argument_list|()
block|{}
endif|#
directive|endif
specifier|public
name|slots
operator|:
name|void
name|slotWithArray
argument_list|(
argument|const double[
literal|3
argument|]
argument_list|)
block|{}
name|void
name|slotWithNamedArray
argument_list|(
argument|const double namedArray[
literal|3
argument|]
argument_list|)
block|{
name|Q_UNUSED
argument_list|(
name|namedArray
argument_list|)
block|; }
name|void
name|slotWithMultiArray
argument_list|(
argument|const double[
literal|3
argument|][
literal|4
argument|]
argument_list|)
block|{}
name|short
name|int
name|shortIntProperty
argument_list|()
block|{
return|return
literal|0
return|;
block|}
name|unsigned
name|short
name|int
name|unsignedShortIntProperty
argument_list|()
block|{
return|return
literal|0
return|;
block|}
name|signed
name|short
name|int
name|signedShortIntProperty
argument_list|()
block|{
return|return
literal|0
return|;
block|}
name|long
name|int
name|longIntProperty
argument_list|()
block|{
return|return
literal|0
return|;
block|}
name|unsigned
name|long
name|int
name|unsignedLongIntProperty
argument_list|()
block|{
return|return
literal|0
return|;
block|}
name|signed
name|long
name|int
name|signedLongIntProperty
argument_list|()
block|{
return|return
literal|0
return|;
block|}
name|long
name|double
name|longDoubleProperty
argument_list|()
block|{
return|return
literal|0.0
return|;
block|}
name|myNS
operator|::
name|Points
name|points
argument_list|()
block|{
return|return
name|m_points
return|;
block|}
name|void
name|setPoints
argument_list|(
argument|myNS::Points points
argument_list|)
block|{
name|m_points
operator|=
name|points
block|; }
name|signals
operator|:
name|void
name|signalWithArray
argument_list|(
specifier|const
name|double
index|[
literal|3
index|]
argument_list|)
argument_list|;
name|void
name|signalWithNamedArray
argument_list|(
argument|const double namedArray[
literal|3
argument|]
argument_list|)
argument_list|;
name|void
name|signalWithIterator
argument_list|(
name|QList
argument_list|<
name|QUrl
argument_list|>
operator|::
name|iterator
argument_list|)
argument_list|;
name|void
name|signalWithListPointer
argument_list|(
name|QList
argument_list|<
name|QUrl
argument_list|>
operator|*
argument_list|)
argument_list|;
comment|//QTBUG-31002
specifier|private
name|slots
operator|:
comment|// for tst_Moc::preprocessorConditionals
if|#
directive|if
literal|0
expr|void invalidSlot() {}
else|#
directive|else
name|void
name|slotInElse
argument_list|()
block|{}
endif|#
directive|endif
if|#
directive|if
literal|1
name|void
name|slotInIf
argument_list|()
block|{}
else|#
directive|else
name|void
name|invalidSlot
argument_list|()
block|{}
endif|#
directive|endif
if|#
directive|if
literal|0
expr|void invalidSlot() {}
elif|#
directive|elif
literal|0
else|#
directive|else
name|void
name|slotInLastElse
argument_list|()
block|{}
endif|#
directive|endif
if|#
directive|if
literal|0
expr|void invalidSlot() {}
elif|#
directive|elif
literal|1
name|void
name|slotInElif
argument_list|()
block|{}
else|#
directive|else
name|void
name|invalidSlot
argument_list|()
block|{}
endif|#
directive|endif
friend|friend
class_decl|class
name|Receiver
class_decl|;
end_decl_stmt
begin_comment
comment|// task #85783
end_comment
begin_signals
signals|signals:
friend|friend
class_decl|class
name|Sender
class_decl|;
comment|// task #85783
DECL|macro|MACRO_DEFINED
define|#
directive|define
name|MACRO_DEFINED
if|#
directive|if
operator|!
operator|(
name|defined
name|MACRO_UNDEF
operator|||
name|defined
name|MACRO_DEFINED
operator|)
operator|||
literal|1
name|void
name|signalInIf1
parameter_list|()
function_decl|;
else|#
directive|else
name|void
name|doNotExist
parameter_list|()
function_decl|;
endif|#
directive|endif
if|#
directive|if
operator|!
operator|(
operator|!
name|defined
name|MACRO_UNDEF
operator|||
operator|!
name|defined
name|MACRO_DEFINED
operator|)
operator|&&
literal|1
name|void
name|doNotExist
parameter_list|()
function_decl|;
else|#
directive|else
name|void
name|signalInIf2
parameter_list|()
function_decl|;
endif|#
directive|endif
if|#
directive|if
operator|!
operator|(
operator|!
name|defined
argument_list|(
name|MACRO_DEFINED
argument_list|)
operator|||
operator|!
name|defined
argument_list|(
name|MACRO_UNDEF
argument_list|)
operator|)
operator|&&
literal|1
name|void
name|doNotExist
parameter_list|()
function_decl|;
else|#
directive|else
name|void
name|signalInIf3
parameter_list|()
function_decl|;
endif|#
directive|endif
empty|#
comment|//QTBUG-22717
empty|#
comment|/*  */
empty|#
empty|# \
comment|//
end_signals
begin_public
public|public
name|slots
public|:
name|void
specifier|const
name|slotWithSillyConst
parameter_list|()
block|{}
end_public
begin_public
public|public:
name|Q_INVOKABLE
name|void
specifier|const
name|slotWithSillyConst2
parameter_list|()
block|{}
name|Q_INVOKABLE
name|QObject
modifier|&
name|myInvokableReturningRef
parameter_list|()
block|{
return|return
operator|*
name|this
return|;
block|}
name|Q_INVOKABLE
specifier|const
name|QObject
modifier|&
name|myInvokableReturningConstRef
parameter_list|()
specifier|const
block|{
return|return
operator|*
name|this
return|;
block|}
comment|// that one however should be fine
end_public
begin_public
public|public
name|slots
public|:
name|void
name|slotWithVoidStar
parameter_list|(
name|void
modifier|*
parameter_list|)
block|{}
end_public
begin_private
private|private:
name|myNS
operator|::
name|Points
name|m_points
decl_stmt|;
end_private
begin_private
private|private
name|slots
private|:
specifier|inline
specifier|virtual
name|void
name|blub1
parameter_list|()
block|{}
specifier|virtual
specifier|inline
name|void
name|blub2
parameter_list|()
block|{}
end_private
begin_class
unit|};
class|class
name|PropertyTestClass
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
enum|enum
name|TestEnum
block|{
name|One
block|,
name|Two
block|,
name|Three
block|}
enum|;
name|Q_ENUMS
argument_list|(
argument|TestEnum
argument_list|)
block|}
class|;
end_class
begin_class
class|class
name|PropertyUseClass
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
name|Q_PROPERTY
parameter_list|(
name|PropertyTestClass
operator|::
name|TestEnum
name|foo
name|READ
name|foo
parameter_list|)
specifier|public
private|:
specifier|inline
name|PropertyTestClass
operator|::
name|TestEnum
name|foo
parameter_list|()
specifier|const
block|{
return|return
name|PropertyTestClass
operator|::
name|One
return|;
block|}
block|}
class|;
end_class
begin_class
class|class
name|EnumSourceClass
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
enum|enum
name|TestEnum
block|{
name|Value
init|=
literal|37
block|}
enum|;
name|Q_ENUMS
argument_list|(
argument|TestEnum
argument_list|)
block|}
class|;
end_class
begin_class
class|class
name|EnumUserClass
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|Q_ENUMS
argument_list|(
argument|EnumSourceClass::TestEnum
argument_list|)
block|}
class|;
end_class
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_MOC_RUN
argument_list|)
end_if
begin_comment
comment|// Task #119503
end_comment
begin_define
DECL|macro|_TASK_119503
define|#
directive|define
name|_TASK_119503
end_define
begin_if
if|#
directive|if
operator|!
name|_TASK_119503
end_if
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_class
class|class
name|CtorTestClass
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|Q_INVOKABLE
name|CtorTestClass
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
function_decl|;
name|CtorTestClass
parameter_list|(
name|int
name|foo
parameter_list|)
constructor_decl|;
specifier|inline
name|Q_INVOKABLE
name|CtorTestClass
parameter_list|(
specifier|const
name|QString
modifier|&
name|str
parameter_list|)
block|{
name|m_str
operator|=
name|str
expr_stmt|;
block|}
name|QString
name|m_str
decl_stmt|;
protected|protected:
name|CtorTestClass
parameter_list|(
name|int
name|foo
parameter_list|,
name|int
name|bar
parameter_list|,
name|int
name|baz
parameter_list|)
constructor_decl|;
private|private:
name|CtorTestClass
parameter_list|(
name|float
parameter_list|,
name|float
parameter_list|)
block|{}
block|}
class|;
end_class
begin_constructor
name|CtorTestClass
operator|::
name|CtorTestClass
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
block|{}
end_constructor
begin_constructor
name|CtorTestClass
operator|::
name|CtorTestClass
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
name|int
parameter_list|)
block|{}
end_constructor
begin_class_decl
class_decl|class
name|PrivatePropertyTest
class_decl|;
end_class_decl
begin_class
class|class
name|tst_Moc
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
name|Q_PROPERTY
argument_list|(
name|bool
name|user1
name|READ
name|user1
name|USER
literal|true
argument_list|)
name|Q_PROPERTY
argument_list|(
name|bool
name|user2
name|READ
name|user2
name|USER
literal|false
argument_list|)
name|Q_PROPERTY
argument_list|(
name|bool
name|user3
name|READ
name|user3
name|USER
name|userFunction
argument_list|()
argument_list|)
name|Q_PROPERTY
argument_list|(
name|QString
name|member1
name|MEMBER
name|sMember
argument_list|)
name|Q_PROPERTY
argument_list|(
name|QString
name|member2
name|MEMBER
name|sMember
name|READ
name|member2
argument_list|)
name|Q_PROPERTY
argument_list|(
name|QString
name|member3
name|MEMBER
name|sMember
name|WRITE
name|setMember3
argument_list|)
name|Q_PROPERTY
argument_list|(
name|QString
name|member4
name|MEMBER
name|sMember
name|NOTIFY
name|member4Changed
argument_list|)
name|Q_PROPERTY
argument_list|(
name|QString
name|member5
name|MEMBER
name|sMember
name|NOTIFY
name|member5Changed
argument_list|)
name|Q_PROPERTY
argument_list|(
name|QString
name|member6
name|MEMBER
name|sConst
name|CONSTANT
argument_list|)
decl|public
range|:
specifier|inline
name|tst_Moc
argument_list|()
operator|:
name|sConst
argument_list|(
literal|"const"
argument_list|)
block|{}
specifier|private
name|slots
operator|:
name|void
name|initTestCase
argument_list|()
decl_stmt|;
name|void
name|slotWithException
parameter_list|()
throw|throw
argument_list|(
name|MyStruct
argument_list|)
function_decl|;
name|void
name|dontStripNamespaces
parameter_list|()
function_decl|;
name|void
name|oldStyleCasts
parameter_list|()
function_decl|;
name|void
name|warnOnExtraSignalSlotQualifiaction
parameter_list|()
function_decl|;
name|void
name|uLongLong
parameter_list|()
function_decl|;
name|void
name|inputFileNameWithDotsButNoExtension
parameter_list|()
function_decl|;
name|void
name|userProperties
parameter_list|()
function_decl|;
name|void
name|supportConstSignals
parameter_list|()
function_decl|;
name|void
name|task87883
parameter_list|()
function_decl|;
name|void
name|multilineComments
parameter_list|()
function_decl|;
name|void
name|classinfoWithEscapes
parameter_list|()
function_decl|;
name|void
name|trNoopInClassInfo
parameter_list|()
function_decl|;
name|void
name|ppExpressionEvaluation
parameter_list|()
function_decl|;
name|void
name|arrayArguments
parameter_list|()
function_decl|;
name|void
name|preprocessorConditionals
parameter_list|()
function_decl|;
name|void
name|blackslashNewlines
parameter_list|()
function_decl|;
name|void
name|slotWithSillyConst
parameter_list|()
function_decl|;
name|void
name|testExtraData
parameter_list|()
function_decl|;
name|void
name|testExtraDataForEnum
parameter_list|()
function_decl|;
name|void
name|namespaceTypeProperty
parameter_list|()
function_decl|;
name|void
name|slotsWithVoidTemplate
parameter_list|()
function_decl|;
name|void
name|structQObject
parameter_list|()
function_decl|;
name|void
name|namespacedFlags
parameter_list|()
function_decl|;
name|void
name|warnOnMultipleInheritance
parameter_list|()
function_decl|;
name|void
name|ignoreOptionClashes
parameter_list|()
function_decl|;
name|void
name|forgottenQInterface
parameter_list|()
function_decl|;
name|void
name|os9Newline
parameter_list|()
function_decl|;
name|void
name|winNewline
parameter_list|()
function_decl|;
name|void
name|escapesInStringLiterals
parameter_list|()
function_decl|;
name|void
name|frameworkSearchPath
parameter_list|()
function_decl|;
name|void
name|cstyleEnums
parameter_list|()
function_decl|;
name|void
name|defineMacroViaCmdline
parameter_list|()
function_decl|;
name|void
name|invokable
parameter_list|()
function_decl|;
name|void
name|singleFunctionKeywordSignalAndSlot
parameter_list|()
function_decl|;
name|void
name|templateGtGt
parameter_list|()
function_decl|;
name|void
name|qprivateslots
parameter_list|()
function_decl|;
name|void
name|qprivateproperties
parameter_list|()
function_decl|;
name|void
name|inlineSlotsWithThrowDeclaration
parameter_list|()
function_decl|;
name|void
name|warnOnPropertyWithoutREAD
parameter_list|()
function_decl|;
name|void
name|constructors
parameter_list|()
function_decl|;
name|void
name|typenameWithUnsigned
parameter_list|()
function_decl|;
name|void
name|warnOnVirtualSignal
parameter_list|()
function_decl|;
name|void
name|QTBUG5590_dummyProperty
parameter_list|()
function_decl|;
name|void
name|QTBUG12260_defaultTemplate
parameter_list|()
function_decl|;
name|void
name|notifyError
parameter_list|()
function_decl|;
name|void
name|QTBUG17635_invokableAndProperty
parameter_list|()
function_decl|;
name|void
name|revisions
parameter_list|()
function_decl|;
name|void
name|warnings_data
parameter_list|()
function_decl|;
name|void
name|warnings
parameter_list|()
function_decl|;
name|void
name|privateClass
parameter_list|()
function_decl|;
name|void
name|cxx11Enums_data
parameter_list|()
function_decl|;
name|void
name|cxx11Enums
parameter_list|()
function_decl|;
name|void
name|returnRefs
parameter_list|()
function_decl|;
name|void
name|memberProperties_data
parameter_list|()
function_decl|;
name|void
name|memberProperties
parameter_list|()
function_decl|;
name|void
name|memberProperties2
parameter_list|()
function_decl|;
name|void
name|privateSignalConnection
parameter_list|()
function_decl|;
name|void
name|finalClasses_data
parameter_list|()
function_decl|;
name|void
name|finalClasses
parameter_list|()
function_decl|;
name|void
name|explicitOverrideControl_data
parameter_list|()
function_decl|;
name|void
name|explicitOverrideControl
parameter_list|()
function_decl|;
name|void
name|autoPropertyMetaTypeRegistration
parameter_list|()
function_decl|;
name|void
name|autoMethodArgumentMetaTypeRegistration
parameter_list|()
function_decl|;
name|void
name|autoSignalSpyMetaTypeRegistration
parameter_list|()
function_decl|;
name|void
name|parseDefines
parameter_list|()
function_decl|;
name|void
name|preprocessorOnly
parameter_list|()
function_decl|;
name|void
name|unterminatedFunctionMacro
parameter_list|()
function_decl|;
signals|signals:
name|void
name|sigWithUnsignedArg
parameter_list|(
name|unsigned
name|foo
parameter_list|)
function_decl|;
name|void
name|sigWithSignedArg
parameter_list|(
name|signed
name|foo
parameter_list|)
function_decl|;
name|void
name|sigWithConstSignedArg
parameter_list|(
specifier|const
name|signed
name|foo
parameter_list|)
function_decl|;
name|void
name|sigWithVolatileConstSignedArg
parameter_list|(
specifier|volatile
specifier|const
name|signed
name|foo
parameter_list|)
function_decl|;
name|void
name|sigWithCustomType
parameter_list|(
specifier|const
name|MyStruct
parameter_list|)
function_decl|;
name|void
name|constSignal1
parameter_list|()
specifier|const
function_decl|;
name|void
name|constSignal2
parameter_list|(
name|int
name|arg
parameter_list|)
specifier|const
function_decl|;
name|void
name|member4Changed
parameter_list|()
function_decl|;
name|void
name|member5Changed
parameter_list|(
specifier|const
name|QString
modifier|&
name|newVal
parameter_list|)
function_decl|;
private|private:
name|bool
name|user1
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
empty_stmt|;
name|bool
name|user2
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
empty_stmt|;
name|bool
name|user3
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
empty_stmt|;
name|bool
name|userFunction
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
empty_stmt|;
template|template
parameter_list|<
name|class
name|T
parameter_list|>
name|void
name|revisions_T
parameter_list|()
function_decl|;
name|QString
name|member2
parameter_list|()
specifier|const
block|{
return|return
name|sMember
return|;
block|}
name|void
name|setMember3
parameter_list|(
specifier|const
name|QString
modifier|&
name|sVal
parameter_list|)
block|{
name|sMember
operator|=
name|sVal
expr_stmt|;
block|}
private|private:
name|QString
name|m_sourceDirectory
decl_stmt|;
name|QString
name|qtIncludePath
decl_stmt|;
class_decl|class
name|PrivateClass
class_decl|;
name|QString
name|sMember
decl_stmt|;
specifier|const
name|QString
name|sConst
decl_stmt|;
name|PrivatePropertyTest
modifier|*
name|pPPTest
decl_stmt|;
block|}
class|;
end_class
begin_function
name|void
name|tst_Moc
operator|::
name|initTestCase
parameter_list|()
block|{
specifier|const
name|QString
name|testHeader
init|=
name|QFINDTESTDATA
argument_list|(
literal|"backslash-newlines.h"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testHeader
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|m_sourceDirectory
operator|=
name|QFileInfo
argument_list|(
name|testHeader
argument_list|)
operator|.
name|absolutePath
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_PROCESS
argument_list|)
name|QProcess
name|proc
decl_stmt|;
name|proc
operator|.
name|start
argument_list|(
literal|"qmake"
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"-query"
operator|<<
literal|"QT_INSTALL_HEADERS"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proc
operator|.
name|waitForFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proc
operator|.
name|exitCode
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QByteArray
name|output
init|=
name|proc
operator|.
name|readAllStandardOutput
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|output
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proc
operator|.
name|readAllStandardError
argument_list|()
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|qtIncludePath
operator|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|output
argument_list|)
operator|.
name|trimmed
argument_list|()
expr_stmt|;
name|QFileInfo
name|fi
argument_list|(
name|qtIncludePath
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|fi
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fi
operator|.
name|isDir
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|slotWithException
parameter_list|()
throw|throw
argument_list|(
name|MyStruct
argument_list|)
block|{
comment|// be happy
name|QVERIFY
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|dontStripNamespaces
parameter_list|()
block|{
name|Sender
name|sender
decl_stmt|;
name|Receiver
name|receiver
decl_stmt|;
name|connect
argument_list|(
operator|&
name|sender
argument_list|,
name|SIGNAL
argument_list|(
name|send
argument_list|(
specifier|const
name|String
operator|::
name|Type
operator|&
argument_list|)
argument_list|)
argument_list|,
operator|&
name|receiver
argument_list|,
name|SLOT
argument_list|(
name|receive
argument_list|(
specifier|const
name|String
operator|::
name|Type
operator|&
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|sender
argument_list|,
name|SIGNAL
argument_list|(
name|send
argument_list|(
specifier|const
name|Int
operator|::
name|Type
operator|&
argument_list|)
argument_list|)
argument_list|,
operator|&
name|receiver
argument_list|,
name|SLOT
argument_list|(
name|receive
argument_list|(
specifier|const
name|Int
operator|::
name|Type
operator|&
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|sender
operator|.
name|sendValue
argument_list|(
name|String
operator|::
name|Type
argument_list|(
literal|"Hello"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|receiver
operator|.
name|stringCallCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|receiver
operator|.
name|intCallCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|sender
operator|.
name|sendValue
argument_list|(
name|Int
operator|::
name|Type
argument_list|(
literal|42
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|receiver
operator|.
name|stringCallCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|receiver
operator|.
name|intCallCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|oldStyleCasts
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|MOC_CROSS_COMPILED
name|QSKIP
argument_list|(
literal|"Not tested when cross-compiled"
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_LINUX
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_PROCESS
argument_list|)
name|QProcess
name|proc
decl_stmt|;
name|proc
operator|.
name|start
argument_list|(
literal|"moc"
argument_list|,
name|QStringList
argument_list|(
name|m_sourceDirectory
operator|+
name|QStringLiteral
argument_list|(
literal|"/oldstyle-casts.h"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proc
operator|.
name|waitForFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proc
operator|.
name|exitCode
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QByteArray
name|mocOut
init|=
name|proc
operator|.
name|readAllStandardOutput
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|mocOut
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proc
operator|.
name|readAllStandardError
argument_list|()
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|QStringList
name|args
decl_stmt|;
name|args
operator|<<
literal|"-c"
operator|<<
literal|"-x"
operator|<<
literal|"c++"
operator|<<
literal|"-Wold-style-cast"
operator|<<
literal|"-I"
operator|<<
literal|"."
operator|<<
literal|"-I"
operator|<<
name|qtIncludePath
operator|<<
literal|"-o"
operator|<<
literal|"/dev/null"
operator|<<
literal|"-fPIE"
operator|<<
literal|"-"
expr_stmt|;
name|proc
operator|.
name|start
argument_list|(
literal|"gcc"
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proc
operator|.
name|waitForStarted
argument_list|()
argument_list|)
expr_stmt|;
name|proc
operator|.
name|write
argument_list|(
name|mocOut
argument_list|)
expr_stmt|;
name|proc
operator|.
name|closeWriteChannel
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|proc
operator|.
name|waitForFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proc
operator|.
name|exitCode
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|proc
operator|.
name|readAllStandardError
argument_list|()
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
name|QSKIP
argument_list|(
literal|"Only tested on linux/gcc"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|warnOnExtraSignalSlotQualifiaction
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|MOC_CROSS_COMPILED
name|QSKIP
argument_list|(
literal|"Not tested when cross-compiled"
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_LINUX
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_PROCESS
argument_list|)
name|QProcess
name|proc
decl_stmt|;
specifier|const
name|QString
name|header
init|=
name|m_sourceDirectory
operator|+
name|QStringLiteral
argument_list|(
literal|"/extraqualification.h"
argument_list|)
decl_stmt|;
name|proc
operator|.
name|start
argument_list|(
literal|"moc"
argument_list|,
name|QStringList
argument_list|(
name|header
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proc
operator|.
name|waitForFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proc
operator|.
name|exitCode
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QByteArray
name|mocOut
init|=
name|proc
operator|.
name|readAllStandardOutput
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|mocOut
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|mocWarning
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|proc
operator|.
name|readAllStandardError
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|mocWarning
argument_list|,
name|header
operator|+
name|QString
argument_list|(
literal|":53: Warning: Function declaration Test::badFunctionDeclaration contains extra qualification. Ignoring as signal or slot.\n"
argument_list|)
operator|+
name|header
operator|+
name|QString
argument_list|(
literal|":56: Warning: parsemaybe: Function declaration Test::anotherOne contains extra qualification. Ignoring as signal or slot.\n"
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|QSKIP
argument_list|(
literal|"Only tested on linux/gcc"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|uLongLong
parameter_list|()
block|{
name|TestClass
name|tst
decl_stmt|;
specifier|const
name|QMetaObject
modifier|*
name|mobj
init|=
name|tst
operator|.
name|metaObject
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
name|mobj
operator|->
name|indexOfSlot
argument_list|(
literal|"slotWithULong(ulong)"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|idx
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|idx
operator|=
name|mobj
operator|->
name|indexOfSlot
argument_list|(
literal|"slotWithULongLong(unsigned long long)"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|idx
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|idx
operator|=
name|mobj
operator|->
name|indexOfSlot
argument_list|(
literal|"slotWithULongLongP(unsigned long long*)"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|idx
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|idx
operator|=
name|mobj
operator|->
name|indexOfSlot
argument_list|(
literal|"slotWithLong(long)"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|idx
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|idx
operator|=
name|mobj
operator|->
name|indexOfSlot
argument_list|(
literal|"slotWithLongLong(long long)"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|idx
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|inputFileNameWithDotsButNoExtension
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|MOC_CROSS_COMPILED
name|QSKIP
argument_list|(
literal|"Not tested when cross-compiled"
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_LINUX
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_PROCESS
argument_list|)
name|QProcess
name|proc
decl_stmt|;
name|proc
operator|.
name|setWorkingDirectory
argument_list|(
name|m_sourceDirectory
operator|+
name|QStringLiteral
argument_list|(
literal|"/task71021"
argument_list|)
argument_list|)
expr_stmt|;
name|proc
operator|.
name|start
argument_list|(
literal|"moc"
argument_list|,
name|QStringList
argument_list|(
literal|"../Header"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proc
operator|.
name|waitForFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proc
operator|.
name|exitCode
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QByteArray
name|mocOut
init|=
name|proc
operator|.
name|readAllStandardOutput
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|mocOut
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proc
operator|.
name|readAllStandardError
argument_list|()
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|QStringList
name|args
decl_stmt|;
name|args
operator|<<
literal|"-c"
operator|<<
literal|"-x"
operator|<<
literal|"c++"
operator|<<
literal|"-I"
operator|<<
literal|".."
operator|<<
literal|"-I"
operator|<<
name|qtIncludePath
operator|<<
literal|"-o"
operator|<<
literal|"/dev/null"
operator|<<
literal|"-fPIE"
operator|<<
literal|"-"
expr_stmt|;
name|proc
operator|.
name|start
argument_list|(
literal|"gcc"
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proc
operator|.
name|waitForStarted
argument_list|()
argument_list|)
expr_stmt|;
name|proc
operator|.
name|write
argument_list|(
name|mocOut
argument_list|)
expr_stmt|;
name|proc
operator|.
name|closeWriteChannel
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|proc
operator|.
name|waitForFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|proc
operator|.
name|readAllStandardError
argument_list|()
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proc
operator|.
name|exitCode
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
else|#
directive|else
name|QSKIP
argument_list|(
literal|"Only tested on linux/gcc"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|userProperties
parameter_list|()
block|{
specifier|const
name|QMetaObject
modifier|*
name|mobj
init|=
name|metaObject
argument_list|()
decl_stmt|;
name|QMetaProperty
name|property
init|=
name|mobj
operator|->
name|property
argument_list|(
name|mobj
operator|->
name|indexOfProperty
argument_list|(
literal|"user1"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|property
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|property
operator|.
name|isUser
argument_list|()
argument_list|)
expr_stmt|;
name|property
operator|=
name|mobj
operator|->
name|property
argument_list|(
name|mobj
operator|->
name|indexOfProperty
argument_list|(
literal|"user2"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|property
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|property
operator|.
name|isUser
argument_list|()
argument_list|)
expr_stmt|;
name|property
operator|=
name|mobj
operator|->
name|property
argument_list|(
name|mobj
operator|->
name|indexOfProperty
argument_list|(
literal|"user3"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|property
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|property
operator|.
name|isUser
argument_list|(
name|this
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|supportConstSignals
parameter_list|()
block|{
name|QSignalSpy
name|spy1
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|constSignal1
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|spy1
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
emit|emit
name|constSignal1
argument_list|()
emit|;
name|QCOMPARE
argument_list|(
name|spy1
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy2
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|constSignal2
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|spy2
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
emit|emit
name|constSignal2
argument_list|(
literal|42
argument_list|)
emit|;
name|QCOMPARE
argument_list|(
name|spy2
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy2
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|42
argument_list|)
expr_stmt|;
block|}
end_function
begin_include
include|#
directive|include
file|"task87883.h"
end_include
begin_function
name|void
name|tst_Moc
operator|::
name|task87883
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|Task87883
operator|::
name|staticMetaObject
operator|.
name|className
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_include
include|#
directive|include
file|"c-comments.h"
end_include
begin_function
name|void
name|tst_Moc
operator|::
name|multilineComments
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|IfdefedClass
operator|::
name|staticMetaObject
operator|.
name|className
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|classinfoWithEscapes
parameter_list|()
block|{
specifier|const
name|QMetaObject
modifier|*
name|mobj
init|=
operator|&
name|TestClassinfoWithEscapes
operator|::
name|staticMetaObject
decl_stmt|;
name|QCOMPARE
argument_list|(
name|mobj
operator|->
name|methodCount
argument_list|()
operator|-
name|mobj
operator|->
name|methodOffset
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QMetaMethod
name|mm
init|=
name|mobj
operator|->
name|method
argument_list|(
name|mobj
operator|->
name|methodOffset
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|mm
operator|.
name|methodSignature
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"slotWithAReallyLongName(int)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|trNoopInClassInfo
parameter_list|()
block|{
name|TestClass
name|t
decl_stmt|;
specifier|const
name|QMetaObject
modifier|*
name|mobj
init|=
name|t
operator|.
name|metaObject
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|mobj
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mobj
operator|->
name|classInfoCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mobj
operator|->
name|indexOfClassInfo
argument_list|(
literal|"help"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
name|mobj
operator|->
name|classInfo
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|()
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"Opening this will let you configure something"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|ppExpressionEvaluation
parameter_list|()
block|{
name|TestClass
name|tst
decl_stmt|;
specifier|const
name|QMetaObject
modifier|*
name|mobj
init|=
name|tst
operator|.
name|metaObject
argument_list|()
decl_stmt|;
name|int
name|idx
init|=
name|mobj
operator|->
name|indexOfSlot
argument_list|(
literal|"expressionEvaluationShortcut1()"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|idx
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|idx
operator|=
name|mobj
operator|->
name|indexOfSlot
argument_list|(
literal|"expressionEvaluationShortcut2()"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|idx
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|arrayArguments
parameter_list|()
block|{
name|TestClass
name|tst
decl_stmt|;
specifier|const
name|QMetaObject
modifier|*
name|mobj
init|=
name|tst
operator|.
name|metaObject
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|mobj
operator|->
name|indexOfSlot
argument_list|(
literal|"slotWithArray(const double[3])"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mobj
operator|->
name|indexOfSlot
argument_list|(
literal|"slotWithNamedArray(const double[3])"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mobj
operator|->
name|indexOfSlot
argument_list|(
literal|"slotWithMultiArray(const double[3][4])"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mobj
operator|->
name|indexOfSignal
argument_list|(
literal|"signalWithArray(const double[3])"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mobj
operator|->
name|indexOfSignal
argument_list|(
literal|"signalWithNamedArray(const double[3])"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|preprocessorConditionals
parameter_list|()
block|{
name|TestClass
name|tst
decl_stmt|;
specifier|const
name|QMetaObject
modifier|*
name|mobj
init|=
name|tst
operator|.
name|metaObject
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|mobj
operator|->
name|indexOfSlot
argument_list|(
literal|"slotInElse()"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mobj
operator|->
name|indexOfSlot
argument_list|(
literal|"slotInIf()"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mobj
operator|->
name|indexOfSlot
argument_list|(
literal|"slotInLastElse()"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mobj
operator|->
name|indexOfSlot
argument_list|(
literal|"slotInElif()"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mobj
operator|->
name|indexOfSignal
argument_list|(
literal|"signalInIf1()"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mobj
operator|->
name|indexOfSignal
argument_list|(
literal|"signalInIf2()"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mobj
operator|->
name|indexOfSignal
argument_list|(
literal|"signalInIf3()"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mobj
operator|->
name|indexOfSignal
argument_list|(
literal|"doNotExist()"
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|blackslashNewlines
parameter_list|()
block|{
name|BackslashNewlines
name|tst
decl_stmt|;
specifier|const
name|QMetaObject
modifier|*
name|mobj
init|=
name|tst
operator|.
name|metaObject
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|mobj
operator|->
name|indexOfSlot
argument_list|(
literal|"works()"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mobj
operator|->
name|indexOfSlot
argument_list|(
literal|"buggy()"
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|slotWithSillyConst
parameter_list|()
block|{
name|TestClass
name|tst
decl_stmt|;
specifier|const
name|QMetaObject
modifier|*
name|mobj
init|=
name|tst
operator|.
name|metaObject
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|mobj
operator|->
name|indexOfSlot
argument_list|(
literal|"slotWithSillyConst()"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mobj
operator|->
name|indexOfMethod
argument_list|(
literal|"slotWithSillyConst2()"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mobj
operator|->
name|indexOfSlot
argument_list|(
literal|"slotWithVoidStar(void*)"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|testExtraData
parameter_list|()
block|{
specifier|const
name|QMetaObject
modifier|*
name|mobj
init|=
operator|&
name|PropertyTestClass
operator|::
name|staticMetaObject
decl_stmt|;
name|QCOMPARE
argument_list|(
name|mobj
operator|->
name|enumeratorCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QByteArray
argument_list|(
name|mobj
operator|->
name|enumerator
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"TestEnum"
argument_list|)
argument_list|)
expr_stmt|;
name|mobj
operator|=
operator|&
name|PropertyUseClass
operator|::
name|staticMetaObject
expr_stmt|;
specifier|const
name|int
name|idx
init|=
name|mobj
operator|->
name|indexOfProperty
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|idx
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
specifier|const
name|QMetaProperty
name|prop
init|=
name|mobj
operator|->
name|property
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|prop
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|prop
operator|.
name|isEnumType
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QMetaEnum
name|en
init|=
name|prop
operator|.
name|enumerator
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|QByteArray
argument_list|(
name|en
operator|.
name|name
argument_list|()
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"TestEnum"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// QTBUG-20639 - Accept non-local enums for QML signal/slot parameters.
end_comment
begin_function
name|void
name|tst_Moc
operator|::
name|testExtraDataForEnum
parameter_list|()
block|{
specifier|const
name|QMetaObject
modifier|*
name|mobjSource
init|=
operator|&
name|EnumSourceClass
operator|::
name|staticMetaObject
decl_stmt|;
name|QCOMPARE
argument_list|(
name|mobjSource
operator|->
name|enumeratorCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QByteArray
argument_list|(
name|mobjSource
operator|->
name|enumerator
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"TestEnum"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QMetaObject
modifier|*
name|mobjUser
init|=
operator|&
name|EnumUserClass
operator|::
name|staticMetaObject
decl_stmt|;
name|QCOMPARE
argument_list|(
name|mobjUser
operator|->
name|enumeratorCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
specifier|const
name|QMetaObject
modifier|*
modifier|*
name|objects
init|=
name|mobjUser
operator|->
name|d
operator|.
name|relatedMetaObjects
decl_stmt|;
name|QVERIFY
argument_list|(
name|objects
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|objects
index|[
literal|0
index|]
operator|==
name|mobjSource
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|objects
index|[
literal|1
index|]
operator|==
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|namespaceTypeProperty
parameter_list|()
block|{
name|qRegisterMetaType
argument_list|<
name|myNS
operator|::
name|Points
argument_list|>
argument_list|(
literal|"myNS::Points"
argument_list|)
expr_stmt|;
name|TestClass
name|tst
decl_stmt|;
name|QByteArray
name|ba
init|=
name|QByteArray
argument_list|(
literal|"points"
argument_list|)
decl_stmt|;
name|QVariant
name|v
init|=
name|tst
operator|.
name|property
argument_list|(
name|ba
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|v
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|myNS
operator|::
name|Points
name|p
init|=
name|qvariant_cast
argument_list|<
name|myNS
operator|::
name|Points
argument_list|>
argument_list|(
name|v
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|p
operator|.
name|p1
argument_list|,
literal|0xBEEF
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p
operator|.
name|p2
argument_list|,
literal|0xBABE
argument_list|)
expr_stmt|;
name|p
operator|.
name|p1
operator|=
literal|0xCAFE
expr_stmt|;
name|p
operator|.
name|p2
operator|=
literal|0x1EE7
expr_stmt|;
name|QVERIFY
argument_list|(
name|tst
operator|.
name|setProperty
argument_list|(
name|ba
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|p
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|myNS
operator|::
name|Points
name|pp
init|=
name|qvariant_cast
argument_list|<
name|myNS
operator|::
name|Points
argument_list|>
argument_list|(
name|tst
operator|.
name|property
argument_list|(
name|ba
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|p
operator|.
name|p1
argument_list|,
name|pp
operator|.
name|p1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p
operator|.
name|p2
argument_list|,
name|pp
operator|.
name|p2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|slotsWithVoidTemplate
parameter_list|()
block|{
name|SlotsWithVoidTemplateTest
name|test
decl_stmt|;
name|QVERIFY
argument_list|(
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|test
argument_list|,
name|SIGNAL
argument_list|(
name|myVoidSignal
argument_list|(
name|void
argument_list|)
argument_list|)
argument_list|,
operator|&
name|test
argument_list|,
name|SLOT
argument_list|(
name|dummySlot
argument_list|(
name|void
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|test
argument_list|,
name|SIGNAL
argument_list|(
name|mySignal
argument_list|(
specifier|const
name|TestTemplate
argument_list|<
name|void
argument_list|>
operator|&
argument_list|)
argument_list|)
argument_list|,
operator|&
name|test
argument_list|,
name|SLOT
argument_list|(
name|anotherSlot
argument_list|(
specifier|const
name|TestTemplate
argument_list|<
name|void
argument_list|>
operator|&
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|test
argument_list|,
name|SIGNAL
argument_list|(
name|myVoidSignal2
argument_list|()
argument_list|)
argument_list|,
operator|&
name|test
argument_list|,
name|SLOT
argument_list|(
name|dummySlot2
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|structQObject
parameter_list|()
block|{
name|StructQObject
name|o
decl_stmt|;
name|QCOMPARE
argument_list|(
name|QByteArray
argument_list|(
name|o
operator|.
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"StructQObject"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_include
include|#
directive|include
file|"namespaced-flags.h"
end_include
begin_expr_stmt
name|Q_DECLARE_METATYPE
argument_list|(
name|QList
argument_list|<
name|Foo
operator|::
name|Bar
operator|::
name|Flags
argument_list|>
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function
name|void
name|tst_Moc
operator|::
name|namespacedFlags
parameter_list|()
block|{
name|Foo
operator|::
name|Baz
name|baz
decl_stmt|;
name|Foo
operator|::
name|Bar
name|bar
decl_stmt|;
name|bar
operator|.
name|setFlags
argument_list|(
name|Foo
operator|::
name|Bar
operator|::
name|Read
operator||
name|Foo
operator|::
name|Bar
operator|::
name|Write
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|baz
operator|.
name|flags
argument_list|()
operator|!=
name|bar
operator|.
name|flags
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QVariant
name|v
init|=
name|bar
operator|.
name|property
argument_list|(
literal|"flags"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|v
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|baz
operator|.
name|setProperty
argument_list|(
literal|"flags"
argument_list|,
name|v
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|baz
operator|.
name|flags
argument_list|()
operator|==
name|bar
operator|.
name|flags
argument_list|()
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|Foo
operator|::
name|Bar
operator|::
name|Flags
argument_list|>
name|l
decl_stmt|;
name|l
operator|<<
name|baz
operator|.
name|flags
argument_list|()
expr_stmt|;
name|QVariant
name|v2
init|=
name|baz
operator|.
name|setProperty
argument_list|(
literal|"flagsList"
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|l
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|l
argument_list|,
name|baz
operator|.
name|flagsList
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l
argument_list|,
name|qvariant_cast
argument_list|<
name|QList
argument_list|<
name|Foo
operator|::
name|Bar
operator|::
name|Flags
argument_list|>
argument_list|>
argument_list|(
name|baz
operator|.
name|property
argument_list|(
literal|"flagsList"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|warnOnMultipleInheritance
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|MOC_CROSS_COMPILED
name|QSKIP
argument_list|(
literal|"Not tested when cross-compiled"
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_LINUX
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_PROCESS
argument_list|)
name|QProcess
name|proc
decl_stmt|;
name|QStringList
name|args
decl_stmt|;
specifier|const
name|QString
name|header
init|=
name|m_sourceDirectory
operator|+
name|QStringLiteral
argument_list|(
literal|"/warn-on-multiple-qobject-subclasses.h"
argument_list|)
decl_stmt|;
name|args
operator|<<
literal|"-I"
operator|<<
name|qtIncludePath
operator|+
literal|"/QtGui"
operator|<<
name|header
expr_stmt|;
name|proc
operator|.
name|start
argument_list|(
literal|"moc"
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proc
operator|.
name|waitForFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proc
operator|.
name|exitCode
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QByteArray
name|mocOut
init|=
name|proc
operator|.
name|readAllStandardOutput
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|mocOut
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|mocWarning
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|proc
operator|.
name|readAllStandardError
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|mocWarning
argument_list|,
name|header
operator|+
name|QString
argument_list|(
literal|":53: Warning: Class Bar inherits from two QObject subclasses QWindow and Foo. This is not supported!\n"
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|QSKIP
argument_list|(
literal|"Only tested on linux/gcc"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|ignoreOptionClashes
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|MOC_CROSS_COMPILED
name|QSKIP
argument_list|(
literal|"Not tested when cross-compiled"
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_LINUX
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_PROCESS
argument_list|)
name|QProcess
name|proc
decl_stmt|;
name|QStringList
name|args
decl_stmt|;
specifier|const
name|QString
name|header
init|=
name|m_sourceDirectory
operator|+
name|QStringLiteral
argument_list|(
literal|"/interface-from-include.h"
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|includeDir
init|=
name|m_sourceDirectory
operator|+
literal|"/Test.framework/Headers"
decl_stmt|;
comment|// given --ignore-option-clashes, -pthread should be ignored, but the -I path should not be.
name|args
operator|<<
literal|"--ignore-option-clashes"
operator|<<
literal|"-pthread"
operator|<<
literal|"-I"
operator|<<
name|includeDir
operator|<<
literal|"-fno-builtin"
operator|<<
name|header
expr_stmt|;
name|proc
operator|.
name|start
argument_list|(
literal|"moc"
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|bool
name|finished
init|=
name|proc
operator|.
name|waitForFinished
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|finished
condition|)
name|qWarning
argument_list|(
literal|"waitForFinished failed. QProcess error: %d"
argument_list|,
operator|(
name|int
operator|)
name|proc
operator|.
name|error
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|finished
argument_list|)
expr_stmt|;
if|if
condition|(
name|proc
operator|.
name|exitCode
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
name|proc
operator|.
name|readAllStandardError
argument_list|()
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|proc
operator|.
name|exitCode
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proc
operator|.
name|readAllStandardError
argument_list|()
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|QByteArray
name|mocOut
init|=
name|proc
operator|.
name|readAllStandardOutput
argument_list|()
decl_stmt|;
comment|// If -pthread wasn't ignored, it was parsed as a prefix of "thread/", which breaks compilation.
name|QStringList
name|gccArgs
decl_stmt|;
name|gccArgs
operator|<<
literal|"-c"
operator|<<
literal|"-x"
operator|<<
literal|"c++"
operator|<<
literal|"-I"
operator|<<
literal|".."
operator|<<
literal|"-I"
operator|<<
name|qtIncludePath
operator|<<
literal|"-I"
operator|<<
name|includeDir
operator|<<
literal|"-o"
operator|<<
literal|"/dev/null"
operator|<<
literal|"-fPIE"
operator|<<
literal|"-"
expr_stmt|;
name|proc
operator|.
name|start
argument_list|(
literal|"gcc"
argument_list|,
name|gccArgs
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proc
operator|.
name|waitForStarted
argument_list|()
argument_list|)
expr_stmt|;
name|proc
operator|.
name|write
argument_list|(
name|mocOut
argument_list|)
expr_stmt|;
name|proc
operator|.
name|closeWriteChannel
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|proc
operator|.
name|waitForFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|proc
operator|.
name|readAllStandardError
argument_list|()
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
name|QSKIP
argument_list|(
literal|"Only tested on linux/gcc"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|forgottenQInterface
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|MOC_CROSS_COMPILED
name|QSKIP
argument_list|(
literal|"Not tested when cross-compiled"
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_LINUX
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_PROCESS
argument_list|)
name|QProcess
name|proc
decl_stmt|;
name|QStringList
name|args
decl_stmt|;
specifier|const
name|QString
name|header
init|=
name|m_sourceDirectory
operator|+
name|QStringLiteral
argument_list|(
literal|"/forgotten-qinterface.h"
argument_list|)
decl_stmt|;
name|args
operator|<<
literal|"-I"
operator|<<
name|qtIncludePath
operator|+
literal|"/QtCore"
operator|<<
name|header
expr_stmt|;
name|proc
operator|.
name|start
argument_list|(
literal|"moc"
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proc
operator|.
name|waitForFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proc
operator|.
name|exitCode
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QByteArray
name|mocOut
init|=
name|proc
operator|.
name|readAllStandardOutput
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|mocOut
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|mocWarning
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|proc
operator|.
name|readAllStandardError
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|mocWarning
argument_list|,
name|header
operator|+
name|QString
argument_list|(
literal|":55: Warning: Class Test implements the interface MyInterface but does not list it in Q_INTERFACES. qobject_cast to MyInterface will not work!\n"
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|QSKIP
argument_list|(
literal|"Only tested on linux/gcc"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|os9Newline
parameter_list|()
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|SKIP_NEWLINE_TEST
argument_list|)
specifier|const
name|QMetaObject
modifier|&
name|mo
init|=
name|Os9Newlines
operator|::
name|staticMetaObject
decl_stmt|;
name|QVERIFY
argument_list|(
name|mo
operator|.
name|indexOfSlot
argument_list|(
literal|"testSlot()"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QFile
name|f
argument_list|(
name|m_sourceDirectory
operator|+
name|QStringLiteral
argument_list|(
literal|"/os9-newlines.h"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
comment|// no QIODevice::Text!
name|QByteArray
name|data
init|=
name|f
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|data
operator|.
name|contains
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|data
operator|.
name|contains
argument_list|(
literal|'\r'
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|winNewline
parameter_list|()
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|SKIP_NEWLINE_TEST
argument_list|)
specifier|const
name|QMetaObject
modifier|&
name|mo
init|=
name|WinNewlines
operator|::
name|staticMetaObject
decl_stmt|;
name|QVERIFY
argument_list|(
name|mo
operator|.
name|indexOfSlot
argument_list|(
literal|"testSlot()"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QFile
name|f
argument_list|(
name|m_sourceDirectory
operator|+
name|QStringLiteral
argument_list|(
literal|"/win-newlines.h"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
comment|// no QIODevice::Text!
name|QByteArray
name|data
init|=
name|f
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|f
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|data
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
name|QLatin1Char
argument_list|(
literal|'\r'
argument_list|)
condition|)
block|{
name|QVERIFY
argument_list|(
name|i
operator|<
name|data
operator|.
name|count
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
name|QVERIFY
argument_list|(
name|data
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|==
literal|'\n'
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|data
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|!=
literal|'\n'
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
block|}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|escapesInStringLiterals
parameter_list|()
block|{
specifier|const
name|QMetaObject
modifier|&
name|mo
init|=
name|StringLiterals
operator|::
name|staticMetaObject
decl_stmt|;
name|QCOMPARE
argument_list|(
name|mo
operator|.
name|classInfoCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|int
name|idx
init|=
name|mo
operator|.
name|indexOfClassInfo
argument_list|(
literal|"Test"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|idx
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QMetaClassInfo
name|info
init|=
name|mo
operator|.
name|classInfo
argument_list|(
name|idx
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|QByteArray
argument_list|(
name|info
operator|.
name|value
argument_list|()
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\x53"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|idx
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|idx
operator|=
name|mo
operator|.
name|indexOfClassInfo
argument_list|(
literal|"Test2"
argument_list|)
expr_stmt|;
name|info
operator|=
name|mo
operator|.
name|classInfo
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QByteArray
argument_list|(
name|info
operator|.
name|value
argument_list|()
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\123"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|idx
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|idx
operator|=
name|mo
operator|.
name|indexOfClassInfo
argument_list|(
literal|"Test3"
argument_list|)
expr_stmt|;
name|info
operator|=
name|mo
operator|.
name|classInfo
argument_list|(
name|idx
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QByteArray
argument_list|(
name|info
operator|.
name|value
argument_list|()
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\nb"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|frameworkSearchPath
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|MOC_CROSS_COMPILED
name|QSKIP
argument_list|(
literal|"Not tested when cross-compiled"
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_PROCESS
argument_list|)
name|QStringList
name|args
decl_stmt|;
name|args
operator|<<
literal|"-F"
operator|<<
name|m_sourceDirectory
operator|+
name|QStringLiteral
argument_list|(
literal|"/."
argument_list|)
operator|<<
name|m_sourceDirectory
operator|+
name|QStringLiteral
argument_list|(
literal|"/interface-from-framework.h"
argument_list|)
expr_stmt|;
name|QProcess
name|proc
decl_stmt|;
name|proc
operator|.
name|start
argument_list|(
literal|"moc"
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|bool
name|finished
init|=
name|proc
operator|.
name|waitForFinished
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|finished
condition|)
name|qWarning
argument_list|(
literal|"waitForFinished failed. QProcess error: %d"
argument_list|,
operator|(
name|int
operator|)
name|proc
operator|.
name|error
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|finished
argument_list|)
expr_stmt|;
if|if
condition|(
name|proc
operator|.
name|exitCode
argument_list|()
operator|!=
literal|0
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
name|proc
operator|.
name|readAllStandardError
argument_list|()
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|proc
operator|.
name|exitCode
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proc
operator|.
name|readAllStandardError
argument_list|()
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
name|QSKIP
argument_list|(
literal|"Only tested/relevant on unixy platforms"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|cstyleEnums
parameter_list|()
block|{
specifier|const
name|QMetaObject
modifier|&
name|obj
init|=
name|CStyleEnums
operator|::
name|staticMetaObject
decl_stmt|;
name|QCOMPARE
argument_list|(
name|obj
operator|.
name|enumeratorCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QMetaEnum
name|metaEnum
init|=
name|obj
operator|.
name|enumerator
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|metaEnum
operator|.
name|name
argument_list|()
argument_list|,
literal|"Baz"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|metaEnum
operator|.
name|keyCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|metaEnum
operator|.
name|key
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"Foo"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|metaEnum
operator|.
name|key
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|"Bar"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|templateGtGt
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|MOC_CROSS_COMPILED
name|QSKIP
argument_list|(
literal|"Not tested when cross-compiled"
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_LINUX
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_PROCESS
argument_list|)
name|QProcess
name|proc
decl_stmt|;
name|proc
operator|.
name|start
argument_list|(
literal|"moc"
argument_list|,
name|QStringList
argument_list|(
name|m_sourceDirectory
operator|+
name|QStringLiteral
argument_list|(
literal|"/template-gtgt.h"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proc
operator|.
name|waitForFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proc
operator|.
name|exitCode
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QByteArray
name|mocOut
init|=
name|proc
operator|.
name|readAllStandardOutput
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|mocOut
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|mocWarning
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|proc
operator|.
name|readAllStandardError
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|mocWarning
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
name|QSKIP
argument_list|(
literal|"Only tested on linux/gcc"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|defineMacroViaCmdline
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_LINUX
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_PROCESS
argument_list|)
name|QProcess
name|proc
decl_stmt|;
name|QStringList
name|args
decl_stmt|;
name|args
operator|<<
literal|"-DFOO"
expr_stmt|;
name|args
operator|<<
name|m_sourceDirectory
operator|+
name|QStringLiteral
argument_list|(
literal|"/macro-on-cmdline.h"
argument_list|)
expr_stmt|;
name|proc
operator|.
name|start
argument_list|(
literal|"moc"
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proc
operator|.
name|waitForFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proc
operator|.
name|exitCode
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proc
operator|.
name|readAllStandardError
argument_list|()
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|QByteArray
name|mocOut
init|=
name|proc
operator|.
name|readAllStandardOutput
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|mocOut
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
name|QSKIP
argument_list|(
literal|"Only tested on linux/gcc"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|invokable
parameter_list|()
block|{
block|{
specifier|const
name|QMetaObject
modifier|&
name|mobj
init|=
name|InvokableBeforeReturnType
operator|::
name|staticMetaObject
decl_stmt|;
name|QCOMPARE
argument_list|(
name|mobj
operator|.
name|methodCount
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mobj
operator|.
name|method
argument_list|(
literal|5
argument_list|)
operator|.
name|methodSignature
argument_list|()
operator|==
name|QByteArray
argument_list|(
literal|"foo()"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
specifier|const
name|QMetaObject
modifier|&
name|mobj
init|=
name|InvokableBeforeInline
operator|::
name|staticMetaObject
decl_stmt|;
name|QCOMPARE
argument_list|(
name|mobj
operator|.
name|methodCount
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mobj
operator|.
name|method
argument_list|(
literal|5
argument_list|)
operator|.
name|methodSignature
argument_list|()
operator|==
name|QByteArray
argument_list|(
literal|"foo()"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mobj
operator|.
name|method
argument_list|(
literal|6
argument_list|)
operator|.
name|methodSignature
argument_list|()
operator|==
name|QByteArray
argument_list|(
literal|"bar()"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|singleFunctionKeywordSignalAndSlot
parameter_list|()
block|{
block|{
specifier|const
name|QMetaObject
modifier|&
name|mobj
init|=
name|SingleFunctionKeywordBeforeReturnType
operator|::
name|staticMetaObject
decl_stmt|;
name|QCOMPARE
argument_list|(
name|mobj
operator|.
name|methodCount
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mobj
operator|.
name|method
argument_list|(
literal|5
argument_list|)
operator|.
name|methodSignature
argument_list|()
operator|==
name|QByteArray
argument_list|(
literal|"mySignal()"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mobj
operator|.
name|method
argument_list|(
literal|6
argument_list|)
operator|.
name|methodSignature
argument_list|()
operator|==
name|QByteArray
argument_list|(
literal|"mySlot()"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
specifier|const
name|QMetaObject
modifier|&
name|mobj
init|=
name|SingleFunctionKeywordBeforeInline
operator|::
name|staticMetaObject
decl_stmt|;
name|QCOMPARE
argument_list|(
name|mobj
operator|.
name|methodCount
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mobj
operator|.
name|method
argument_list|(
literal|5
argument_list|)
operator|.
name|methodSignature
argument_list|()
operator|==
name|QByteArray
argument_list|(
literal|"mySignal()"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mobj
operator|.
name|method
argument_list|(
literal|6
argument_list|)
operator|.
name|methodSignature
argument_list|()
operator|==
name|QByteArray
argument_list|(
literal|"mySlot()"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
specifier|const
name|QMetaObject
modifier|&
name|mobj
init|=
name|SingleFunctionKeywordAfterInline
operator|::
name|staticMetaObject
decl_stmt|;
name|QCOMPARE
argument_list|(
name|mobj
operator|.
name|methodCount
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mobj
operator|.
name|method
argument_list|(
literal|5
argument_list|)
operator|.
name|methodSignature
argument_list|()
operator|==
name|QByteArray
argument_list|(
literal|"mySignal()"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mobj
operator|.
name|method
argument_list|(
literal|6
argument_list|)
operator|.
name|methodSignature
argument_list|()
operator|==
name|QByteArray
argument_list|(
literal|"mySlot()"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_include
include|#
directive|include
file|"qprivateslots.h"
end_include
begin_function
name|void
name|tst_Moc
operator|::
name|qprivateslots
parameter_list|()
block|{
name|TestQPrivateSlots
name|tst
decl_stmt|;
specifier|const
name|QMetaObject
modifier|*
name|mobj
init|=
name|tst
operator|.
name|metaObject
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|mobj
operator|->
name|indexOfSlot
argument_list|(
literal|"_q_privateslot()"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mobj
operator|->
name|indexOfMethod
argument_list|(
literal|"method1()"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|//tast204730
block|}
end_function
begin_class
class|class
name|PrivatePropertyTest
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
name|Q_PROPERTY
argument_list|(
name|int
name|foo
name|READ
name|foo
name|WRITE
name|setFoo
argument_list|)
name|Q_PRIVATE_PROPERTY
argument_list|(
name|d
argument_list|,
name|int
name|bar
name|READ
name|bar
name|WRITE
name|setBar
argument_list|)
name|Q_PRIVATE_PROPERTY
argument_list|(
name|PrivatePropertyTest
operator|::
name|d
argument_list|,
name|int
name|plop
name|READ
name|plop
name|WRITE
name|setPlop
argument_list|)
name|Q_PRIVATE_PROPERTY
argument_list|(
name|PrivatePropertyTest
operator|::
name|d_func
argument_list|()
argument_list|,
name|int
name|baz
name|READ
name|baz
name|WRITE
name|setBaz
argument_list|)
name|Q_PRIVATE_PROPERTY
argument_list|(
name|PrivatePropertyTest
operator|::
name|d
argument_list|,
name|QString
name|blub
name|MEMBER
name|mBlub
argument_list|)
name|Q_PRIVATE_PROPERTY
argument_list|(
name|PrivatePropertyTest
operator|::
name|d
argument_list|,
name|QString
name|blub2
name|MEMBER
name|mBlub
name|READ
name|blub
argument_list|)
name|Q_PRIVATE_PROPERTY
argument_list|(
name|PrivatePropertyTest
operator|::
name|d
argument_list|,
name|QString
name|blub3
name|MEMBER
name|mBlub
name|WRITE
name|setBlub
argument_list|)
name|Q_PRIVATE_PROPERTY
argument_list|(
name|PrivatePropertyTest
operator|::
name|d
argument_list|,
name|QString
name|blub4
name|MEMBER
name|mBlub
name|NOTIFY
name|blub4Changed
argument_list|)
name|Q_PRIVATE_PROPERTY
argument_list|(
name|PrivatePropertyTest
operator|::
name|d
argument_list|,
name|QString
name|blub5
name|MEMBER
name|mBlub
name|NOTIFY
name|blub5Changed
argument_list|)
name|Q_PRIVATE_PROPERTY
argument_list|(
name|PrivatePropertyTest
operator|::
name|d
argument_list|,
name|QString
name|blub6
name|MEMBER
name|mConst
name|CONSTANT
argument_list|)
name|class
name|MyDPointer
argument_list|{
specifier|public
operator|:
name|MyDPointer
argument_list|()
operator|:
name|mConst
argument_list|(
literal|"const"
argument_list|)
argument_list|,
name|mBar
argument_list|(
literal|0
argument_list|)
argument_list|,
name|mPlop
argument_list|(
literal|0
argument_list|)
block|{}
name|int
name|bar
argument_list|()
block|{
return|return
name|mBar
return|;
block|}
name|void
name|setBar
argument_list|(
argument|int value
argument_list|)
block|{
name|mBar
operator|=
name|value
block|; }
name|int
name|plop
argument_list|()
block|{
return|return
name|mPlop
return|;
block|}
name|void
name|setPlop
argument_list|(
argument|int value
argument_list|)
block|{
name|mPlop
operator|=
name|value
block|; }
name|int
name|baz
argument_list|()
block|{
return|return
name|mBaz
return|;
block|}
name|void
name|setBaz
argument_list|(
argument|int value
argument_list|)
block|{
name|mBaz
operator|=
name|value
block|; }
name|QString
name|blub
argument_list|()
specifier|const
block|{
return|return
name|mBlub
return|;
block|}
name|void
name|setBlub
argument_list|(
argument|const QString&value
argument_list|)
block|{
name|mBlub
operator|=
name|value
block|; }
name|QString
name|mBlub
argument_list|;
specifier|const
name|QString
name|mConst
argument_list|;
specifier|private
operator|:
name|int
name|mBar
argument_list|;
name|int
name|mPlop
argument_list|;
name|int
name|mBaz
argument_list|;     }
decl_stmt|;
public|public:
name|PrivatePropertyTest
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|mFoo
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|d
argument_list|(
operator|new
name|MyDPointer
argument_list|)
block|{}
name|int
name|foo
parameter_list|()
block|{
return|return
name|mFoo
return|;
block|}
name|void
name|setFoo
parameter_list|(
name|int
name|value
parameter_list|)
block|{
name|mFoo
operator|=
name|value
expr_stmt|;
block|}
name|MyDPointer
modifier|*
name|d_func
parameter_list|()
block|{
return|return
name|d
return|;
block|}
signals|signals:
name|void
name|blub4Changed
parameter_list|()
function_decl|;
name|void
name|blub5Changed
parameter_list|(
specifier|const
name|QString
modifier|&
name|newBlub
parameter_list|)
function_decl|;
private|private:
name|int
name|mFoo
decl_stmt|;
name|MyDPointer
modifier|*
name|d
decl_stmt|;
block|}
class|;
end_class
begin_function
name|void
name|tst_Moc
operator|::
name|qprivateproperties
parameter_list|()
block|{
name|PrivatePropertyTest
name|test
decl_stmt|;
name|test
operator|.
name|setProperty
argument_list|(
literal|"foo"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|test
operator|.
name|property
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|test
operator|.
name|setProperty
argument_list|(
literal|"bar"
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|test
operator|.
name|property
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|test
operator|.
name|setProperty
argument_list|(
literal|"plop"
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|test
operator|.
name|property
argument_list|(
literal|"plop"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|test
operator|.
name|setProperty
argument_list|(
literal|"baz"
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|test
operator|.
name|property
argument_list|(
literal|"baz"
argument_list|)
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_include
include|#
directive|include
file|"task189996.h"
end_include
begin_function
name|void
name|InlineSlotsWithThrowDeclaration
operator|::
name|c
parameter_list|()
throw|throw
argument_list|()
block|{}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|inlineSlotsWithThrowDeclaration
parameter_list|()
block|{
name|InlineSlotsWithThrowDeclaration
name|tst
decl_stmt|;
specifier|const
name|QMetaObject
modifier|*
name|mobj
init|=
name|tst
operator|.
name|metaObject
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|mobj
operator|->
name|indexOfSlot
argument_list|(
literal|"a()"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mobj
operator|->
name|indexOfSlot
argument_list|(
literal|"b()"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mobj
operator|->
name|indexOfSlot
argument_list|(
literal|"c()"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mobj
operator|->
name|indexOfSlot
argument_list|(
literal|"d()"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mobj
operator|->
name|indexOfSlot
argument_list|(
literal|"e()"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|warnOnPropertyWithoutREAD
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|MOC_CROSS_COMPILED
name|QSKIP
argument_list|(
literal|"Not tested when cross-compiled"
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_LINUX
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_PROCESS
argument_list|)
name|QProcess
name|proc
decl_stmt|;
specifier|const
name|QString
name|header
init|=
name|m_sourceDirectory
operator|+
name|QStringLiteral
argument_list|(
literal|"/warn-on-property-without-read.h"
argument_list|)
decl_stmt|;
name|proc
operator|.
name|start
argument_list|(
literal|"moc"
argument_list|,
name|QStringList
argument_list|(
name|header
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proc
operator|.
name|waitForFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proc
operator|.
name|exitCode
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QByteArray
name|mocOut
init|=
name|proc
operator|.
name|readAllStandardOutput
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|mocOut
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|mocWarning
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|proc
operator|.
name|readAllStandardError
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|mocWarning
argument_list|,
name|header
operator|+
name|QString
argument_list|(
literal|":46: Warning: Property declaration foo has no READ accessor function or associated MEMBER variable. The property will be invalid.\n"
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|QSKIP
argument_list|(
literal|"Only tested on linux/gcc"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|constructors
parameter_list|()
block|{
specifier|const
name|QMetaObject
modifier|*
name|mo
init|=
operator|&
name|CtorTestClass
operator|::
name|staticMetaObject
decl_stmt|;
name|QCOMPARE
argument_list|(
name|mo
operator|->
name|constructorCount
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|{
name|QMetaMethod
name|mm
init|=
name|mo
operator|->
name|constructor
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|mm
operator|.
name|access
argument_list|()
argument_list|,
name|QMetaMethod
operator|::
name|Public
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mm
operator|.
name|methodType
argument_list|()
argument_list|,
name|QMetaMethod
operator|::
name|Constructor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mm
operator|.
name|methodSignature
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"CtorTestClass(QObject*)"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mm
operator|.
name|typeName
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|paramNames
init|=
name|mm
operator|.
name|parameterNames
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|paramNames
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|paramNames
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"parent"
argument_list|)
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|paramTypes
init|=
name|mm
operator|.
name|parameterTypes
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|paramTypes
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|paramTypes
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"QObject*"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|{
name|QMetaMethod
name|mm
init|=
name|mo
operator|->
name|constructor
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|mm
operator|.
name|access
argument_list|()
argument_list|,
name|QMetaMethod
operator|::
name|Public
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mm
operator|.
name|methodType
argument_list|()
argument_list|,
name|QMetaMethod
operator|::
name|Constructor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mm
operator|.
name|methodSignature
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"CtorTestClass()"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mm
operator|.
name|typeName
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mm
operator|.
name|parameterNames
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mm
operator|.
name|parameterTypes
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|{
name|QMetaMethod
name|mm
init|=
name|mo
operator|->
name|constructor
argument_list|(
literal|2
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|mm
operator|.
name|access
argument_list|()
argument_list|,
name|QMetaMethod
operator|::
name|Public
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mm
operator|.
name|methodType
argument_list|()
argument_list|,
name|QMetaMethod
operator|::
name|Constructor
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mm
operator|.
name|methodSignature
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"CtorTestClass(QString)"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mm
operator|.
name|typeName
argument_list|()
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|paramNames
init|=
name|mm
operator|.
name|parameterNames
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|paramNames
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|paramNames
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"str"
argument_list|)
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|paramTypes
init|=
name|mm
operator|.
name|parameterTypes
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|paramTypes
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|paramTypes
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"QString"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|mo
operator|->
name|indexOfConstructor
argument_list|(
literal|"CtorTestClass(QObject*)"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mo
operator|->
name|indexOfConstructor
argument_list|(
literal|"CtorTestClass()"
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mo
operator|->
name|indexOfConstructor
argument_list|(
literal|"CtorTestClass(QString)"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mo
operator|->
name|indexOfConstructor
argument_list|(
literal|"CtorTestClass2(QObject*)"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mo
operator|->
name|indexOfConstructor
argument_list|(
literal|"CtorTestClass(float,float)"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QObject
modifier|*
name|o1
init|=
name|mo
operator|->
name|newInstance
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|o1
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|o1
operator|->
name|parent
argument_list|()
argument_list|,
operator|(
name|QObject
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qobject_cast
argument_list|<
name|CtorTestClass
operator|*
argument_list|>
argument_list|(
name|o1
argument_list|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QObject
modifier|*
name|o2
init|=
name|mo
operator|->
name|newInstance
argument_list|(
name|Q_ARG
argument_list|(
name|QObject
operator|*
argument_list|,
name|o1
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|o2
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|o2
operator|->
name|parent
argument_list|()
argument_list|,
name|o1
argument_list|)
expr_stmt|;
name|QString
name|str
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"hello"
argument_list|)
decl_stmt|;
name|QObject
modifier|*
name|o3
init|=
name|mo
operator|->
name|newInstance
argument_list|(
name|Q_ARG
argument_list|(
name|QString
argument_list|,
name|str
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|o3
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qobject_cast
argument_list|<
name|CtorTestClass
operator|*
argument_list|>
argument_list|(
name|o3
argument_list|)
operator|->
name|m_str
argument_list|,
name|str
argument_list|)
expr_stmt|;
block|{
comment|//explicit constructor
name|QObject
modifier|*
name|o
init|=
name|QObject
operator|::
name|staticMetaObject
operator|.
name|newInstance
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|o
argument_list|)
expr_stmt|;
operator|delete
name|o
expr_stmt|;
block|}
block|}
end_function
begin_include
include|#
directive|include
file|"task234909.h"
end_include
begin_include
include|#
directive|include
file|"task240368.h"
end_include
begin_function
name|void
name|tst_Moc
operator|::
name|typenameWithUnsigned
parameter_list|()
block|{
name|TypenameWithUnsigned
name|tst
decl_stmt|;
specifier|const
name|QMetaObject
modifier|*
name|mobj
init|=
name|tst
operator|.
name|metaObject
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|mobj
operator|->
name|indexOfSlot
argument_list|(
literal|"a(uint)"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mobj
operator|->
name|indexOfSlot
argument_list|(
literal|"b(uint)"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mobj
operator|->
name|indexOfSlot
argument_list|(
literal|"c(uint*)"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mobj
operator|->
name|indexOfSlot
argument_list|(
literal|"d(uint*)"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mobj
operator|->
name|indexOfSlot
argument_list|(
literal|"e(uint&)"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mobj
operator|->
name|indexOfSlot
argument_list|(
literal|"f(uint&)"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mobj
operator|->
name|indexOfSlot
argument_list|(
literal|"g(unsigned1)"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mobj
operator|->
name|indexOfSlot
argument_list|(
literal|"h(unsigned1)"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mobj
operator|->
name|indexOfSlot
argument_list|(
literal|"i(uint,unsigned1)"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mobj
operator|->
name|indexOfSlot
argument_list|(
literal|"j(unsigned1,uint)"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mobj
operator|->
name|indexOfSlot
argument_list|(
literal|"k(unsignedQImage)"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mobj
operator|->
name|indexOfSlot
argument_list|(
literal|"l(unsignedQImage)"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|warnOnVirtualSignal
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|MOC_CROSS_COMPILED
name|QSKIP
argument_list|(
literal|"Not tested when cross-compiled"
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_LINUX
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_PROCESS
argument_list|)
name|QProcess
name|proc
decl_stmt|;
specifier|const
name|QString
name|header
init|=
name|m_sourceDirectory
operator|+
name|QStringLiteral
argument_list|(
literal|"/pure-virtual-signals.h"
argument_list|)
decl_stmt|;
name|proc
operator|.
name|start
argument_list|(
literal|"moc"
argument_list|,
name|QStringList
argument_list|(
name|header
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proc
operator|.
name|waitForFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proc
operator|.
name|exitCode
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QByteArray
name|mocOut
init|=
name|proc
operator|.
name|readAllStandardOutput
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|mocOut
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|mocWarning
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|proc
operator|.
name|readAllStandardError
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|mocWarning
argument_list|,
name|header
operator|+
name|QString
argument_list|(
literal|":48: Warning: Signals cannot be declared virtual\n"
argument_list|)
operator|+
name|header
operator|+
name|QString
argument_list|(
literal|":50: Warning: Signals cannot be declared virtual\n"
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|QSKIP
argument_list|(
literal|"Only tested on linux/gcc"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_class
class|class
name|QTBUG5590_DummyObject
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
name|Q_PROPERTY
argument_list|(
name|bool
name|dummy
argument_list|)
block|}
class|;
end_class
begin_class
class|class
name|QTBUG5590_PropertyObject
super|:
specifier|public
name|QTBUG5590_DummyObject
block|{
name|Q_OBJECT
name|Q_PROPERTY
argument_list|(
name|int
name|value
name|READ
name|value
name|WRITE
name|setValue
argument_list|)
name|Q_PROPERTY
argument_list|(
name|int
name|value2
name|READ
name|value2
name|WRITE
name|setValue2
argument_list|)
decl|public
range|:
name|QTBUG5590_PropertyObject
argument_list|()
operator|:
name|m_value
argument_list|(
literal|85
argument_list|)
decl_stmt|,
name|m_value2
argument_list|(
literal|40
argument_list|)
argument_list|{ }
name|int
name|value
argument_list|()
decl|const
argument_list|{ return
name|m_value
argument_list|; }
name|void
name|setValue
argument_list|(
name|int
name|value
argument_list|)
argument_list|{
name|m_value
operator|=
name|value
argument_list|; }
name|int
name|value2
argument_list|()
decl|const
argument_list|{ return
name|m_value2
argument_list|; }
name|void
name|setValue2
argument_list|(
name|int
name|value
argument_list|)
argument_list|{
name|m_value2
operator|=
name|value
argument_list|; }
decl|private
range|:
name|int
name|m_value
decl_stmt|,
name|m_value2
decl_stmt|;
block|}
class|;
end_class
begin_function
name|void
name|tst_Moc
operator|::
name|QTBUG5590_dummyProperty
parameter_list|()
block|{
name|QTBUG5590_PropertyObject
name|o
decl_stmt|;
name|QCOMPARE
argument_list|(
name|o
operator|.
name|property
argument_list|(
literal|"value"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|85
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|o
operator|.
name|property
argument_list|(
literal|"value2"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|40
argument_list|)
expr_stmt|;
name|o
operator|.
name|setProperty
argument_list|(
literal|"value"
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|o
operator|.
name|value
argument_list|()
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|o
operator|.
name|setProperty
argument_list|(
literal|"value2"
argument_list|,
literal|82
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|o
operator|.
name|value2
argument_list|()
argument_list|,
literal|82
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
class|class
name|QTBUG7421_ReturnConstTemplate
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
specifier|const
name|QList
argument_list|<
name|int
argument_list|>
name|returnConstTemplate1
parameter_list|()
block|{
return|return
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
return|;
block|}
name|QList
argument_list|<
name|int
argument_list|>
specifier|const
name|returnConstTemplate2
parameter_list|()
block|{
return|return
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
return|;
block|}
specifier|const
name|int
name|returnConstInt
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
specifier|const
name|QString
name|returnConstString
parameter_list|(
specifier|const
name|QString
name|s
parameter_list|)
block|{
return|return
name|s
return|;
block|}
name|QString
specifier|const
name|returnConstString2
parameter_list|(
name|QString
specifier|const
name|s
parameter_list|)
block|{
return|return
name|s
return|;
block|}
block|}
class|;
end_class
begin_class
class|class
name|QTBUG9354_constInName
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
name|void
name|slotChooseScientificConst0
parameter_list|(
name|struct
name|science_constant
specifier|const
modifier|&
parameter_list|)
block|{}
empty_stmt|;
name|void
name|foo
parameter_list|(
name|struct
name|science_const
specifier|const
modifier|&
parameter_list|)
block|{}
empty_stmt|;
name|void
name|foo
parameter_list|(
name|struct
name|constconst
specifier|const
modifier|&
parameter_list|)
block|{}
empty_stmt|;
name|void
name|foo
parameter_list|(
name|struct
name|constconst
modifier|*
parameter_list|)
block|{}
empty_stmt|;
name|void
name|foo
parameter_list|(
name|struct
name|const_
modifier|*
parameter_list|)
block|{}
empty_stmt|;
block|}
class|;
end_class
begin_class
template|template
parameter_list|<
name|typename
name|T1
parameter_list|,
name|typename
name|T2
parameter_list|>
class|class
name|TestTemplate2
block|{
block|}
class|;
end_class
begin_class
class|class
name|QTBUG11647_constInTemplateParameter
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
name|void
name|testSlot
parameter_list|(
name|TestTemplate2
argument_list|<
specifier|const
name|int
argument_list|,
specifier|const
name|short
modifier|*
argument_list|>
parameter_list|)
block|{}
name|void
name|testSlot2
parameter_list|(
name|TestTemplate2
argument_list|<
name|int
argument_list|,
name|short
specifier|const
operator|*
specifier|const
argument_list|>
parameter_list|)
block|{}
name|void
name|testSlot3
parameter_list|(
name|TestTemplate2
argument_list|<
name|TestTemplate2
argument_list|<
specifier|const
name|int
argument_list|,
specifier|const
name|short
modifier|*
argument_list|>
specifier|const
operator|*
argument_list|,
name|TestTemplate2
argument_list|<
name|TestTemplate2
argument_list|<
name|void
argument_list|,
name|int
argument_list|>
argument_list|,
name|unsigned
name|char
modifier|*
argument_list|>
argument_list|>
parameter_list|)
block|{}
signals|signals:
name|void
name|testSignal
parameter_list|(
name|TestTemplate2
argument_list|<
specifier|const
name|int
argument_list|,
specifier|const
name|short
modifier|*
argument_list|>
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_class
class|class
name|QTBUG12260_defaultTemplate_Object
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
if|#
directive|if
operator|!
operator|(
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
operator|&&
name|__GNUC__
operator|==
literal|4
operator|&&
name|__GNUC_MINOR__
operator|<=
literal|3
operator|)
operator|||
name|defined
argument_list|(
name|Q_MOC_RUN
argument_list|)
name|void
name|doSomething
parameter_list|(
name|QHash
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|values
init|=
name|QHash
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
argument_list|()
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|values
argument_list|)
expr_stmt|;
block|}
else|#
directive|else
comment|// we want to test the previous function, but gcc< 4.4 seemed to have a bug similar to the one moc has.
typedef|typedef
name|QHash
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|WorkaroundGCCBug
typedef|;
name|void
name|doSomething
parameter_list|(
name|QHash
argument_list|<
name|QString
argument_list|,
name|QVariant
argument_list|>
name|values
init|=
name|WorkaroundGCCBug
argument_list|()
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|values
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|void
name|doAnotherThing
parameter_list|(
name|bool
name|a
init|=
operator|(
literal|1
operator|<
literal|3
operator|)
parameter_list|,
name|bool
name|b
init|=
operator|(
literal|1
operator|>
literal|4
operator|)
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|b
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
name|void
name|tst_Moc
operator|::
name|QTBUG12260_defaultTemplate
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QTBUG12260_defaultTemplate_Object
operator|::
name|staticMetaObject
operator|.
name|indexOfSlot
argument_list|(
literal|"doSomething(QHash<QString,QVariant>)"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTBUG12260_defaultTemplate_Object
operator|::
name|staticMetaObject
operator|.
name|indexOfSlot
argument_list|(
literal|"doAnotherThing(bool,bool)"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|notifyError
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|MOC_CROSS_COMPILED
name|QSKIP
argument_list|(
literal|"Not tested when cross-compiled"
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_LINUX
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_PROCESS
argument_list|)
name|QProcess
name|proc
decl_stmt|;
specifier|const
name|QString
name|header
init|=
name|m_sourceDirectory
operator|+
name|QStringLiteral
argument_list|(
literal|"/error-on-wrong-notify.h"
argument_list|)
decl_stmt|;
name|proc
operator|.
name|start
argument_list|(
literal|"moc"
argument_list|,
name|QStringList
argument_list|(
name|header
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proc
operator|.
name|waitForFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proc
operator|.
name|exitCode
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proc
operator|.
name|exitStatus
argument_list|()
argument_list|,
name|QProcess
operator|::
name|NormalExit
argument_list|)
expr_stmt|;
name|QByteArray
name|mocOut
init|=
name|proc
operator|.
name|readAllStandardOutput
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|mocOut
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|mocError
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|proc
operator|.
name|readAllStandardError
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|mocError
argument_list|,
name|header
operator|+
name|QString
argument_list|(
literal|":52: Error: NOTIFY signal 'fooChanged' of property 'foo' does not exist in class ClassWithWrongNOTIFY.\n"
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|QSKIP
argument_list|(
literal|"Only tested on linux/gcc"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_class
class|class
name|QTBUG_17635_InvokableAndProperty
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|Q_PROPERTY
argument_list|(
argument|int numberOfEggs READ numberOfEggs
argument_list|)
name|Q_PROPERTY
argument_list|(
argument|int numberOfChickens READ numberOfChickens
argument_list|)
name|Q_INVOKABLE
name|QString
name|getEgg
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|index
argument_list|)
expr_stmt|;
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Egg"
argument_list|)
return|;
block|}
name|Q_INVOKABLE
name|QString
name|getChicken
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
name|index
argument_list|)
expr_stmt|;
return|return
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Chicken"
argument_list|)
return|;
block|}
name|int
name|numberOfEggs
parameter_list|()
block|{
return|return
literal|2
return|;
block|}
name|int
name|numberOfChickens
parameter_list|()
block|{
return|return
literal|4
return|;
block|}
block|}
class|;
end_class
begin_function
name|void
name|tst_Moc
operator|::
name|QTBUG17635_invokableAndProperty
parameter_list|()
block|{
comment|//Moc used to fail parsing Q_INVOKABLE if they were dirrectly following a Q_PROPERTY;
name|QTBUG_17635_InvokableAndProperty
name|mc
decl_stmt|;
name|QString
name|val
decl_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|mc
argument_list|,
literal|"getEgg"
argument_list|,
name|Q_RETURN_ARG
argument_list|(
name|QString
argument_list|,
name|val
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|int
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|val
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Egg"
argument_list|)
argument_list|)
expr_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|mc
argument_list|,
literal|"getChicken"
argument_list|,
name|Q_RETURN_ARG
argument_list|(
name|QString
argument_list|,
name|val
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|int
argument_list|,
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|val
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Chicken"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mc
operator|.
name|metaObject
argument_list|()
operator|->
name|indexOfProperty
argument_list|(
literal|"numberOfEggs"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mc
operator|.
name|metaObject
argument_list|()
operator|->
name|indexOfProperty
argument_list|(
literal|"numberOfChickens"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// If changed, update VersionTestNotify below
end_comment
begin_class
class|class
name|VersionTest
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
name|Q_PROPERTY
argument_list|(
name|int
name|prop1
name|READ
name|foo
argument_list|)
name|Q_PROPERTY
argument_list|(
name|int
name|prop2
name|READ
name|foo
name|REVISION
literal|2
argument_list|)
name|Q_ENUMS
argument_list|(
name|TestEnum
argument_list|)
decl_stmt|;
public|public:
name|int
name|foo
parameter_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
name|Q_INVOKABLE
name|void
name|method1
parameter_list|()
block|{}
name|Q_INVOKABLE
name|Q_REVISION
argument_list|(
literal|4
argument_list|)
name|void
name|method2
argument_list|()
argument_list|{}
decl|enum
name|TestEnum
argument_list|{
name|One
argument_list|,
name|Two
argument_list|}
decl_stmt|;
public|public
name|slots
public|:
name|void
name|slot1
parameter_list|()
block|{}
name|Q_REVISION
argument_list|(
literal|3
argument_list|)
name|void
name|slot2
parameter_list|()
block|{}
signals|signals:
name|void
name|signal1
parameter_list|()
function_decl|;
name|Q_REVISION
argument_list|(
literal|5
argument_list|)
name|void
name|signal2
parameter_list|()
function_decl|;
specifier|public
name|slots
name|Q_REVISION
argument_list|(
literal|6
argument_list|)
range|:
name|void
name|slot3
argument_list|()
block|{}
name|void
name|slot4
argument_list|()
block|{}
name|signals
name|Q_REVISION
argument_list|(
literal|7
argument_list|)
operator|:
name|void
name|signal3
argument_list|()
decl_stmt|;
name|void
name|signal4
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_comment
comment|// If changed, update VersionTest above
end_comment
begin_class
class|class
name|VersionTestNotify
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
name|Q_PROPERTY
argument_list|(
name|int
name|prop1
name|READ
name|foo
name|NOTIFY
name|fooChanged
argument_list|)
name|Q_PROPERTY
argument_list|(
name|int
name|prop2
name|READ
name|foo
name|REVISION
literal|2
argument_list|)
name|Q_ENUMS
argument_list|(
name|TestEnum
argument_list|)
decl_stmt|;
public|public:
name|int
name|foo
parameter_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
name|Q_INVOKABLE
name|void
name|method1
parameter_list|()
block|{}
name|Q_INVOKABLE
name|Q_REVISION
argument_list|(
literal|4
argument_list|)
name|void
name|method2
argument_list|()
argument_list|{}
decl|enum
name|TestEnum
argument_list|{
name|One
argument_list|,
name|Two
argument_list|}
decl_stmt|;
public|public
name|slots
public|:
name|void
name|slot1
parameter_list|()
block|{}
name|Q_REVISION
argument_list|(
literal|3
argument_list|)
name|void
name|slot2
parameter_list|()
block|{}
signals|signals:
name|void
name|fooChanged
parameter_list|()
function_decl|;
name|void
name|signal1
parameter_list|()
function_decl|;
name|Q_REVISION
argument_list|(
literal|5
argument_list|)
name|void
name|signal2
parameter_list|()
function_decl|;
specifier|public
name|slots
name|Q_REVISION
argument_list|(
literal|6
argument_list|)
range|:
name|void
name|slot3
argument_list|()
block|{}
name|void
name|slot4
argument_list|()
block|{}
name|signals
name|Q_REVISION
argument_list|(
literal|7
argument_list|)
operator|:
name|void
name|signal3
argument_list|()
decl_stmt|;
name|void
name|signal4
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
template|template
parameter_list|<
name|class
name|T
parameter_list|>
name|void
name|tst_Moc
operator|::
name|revisions_T
parameter_list|()
block|{
name|int
name|idx
init|=
name|T
operator|::
name|staticMetaObject
operator|.
name|indexOfProperty
argument_list|(
literal|"prop1"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|T
operator|::
name|staticMetaObject
operator|.
name|property
argument_list|(
name|idx
argument_list|)
operator|.
name|revision
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|idx
operator|=
name|T
operator|::
name|staticMetaObject
operator|.
name|indexOfProperty
argument_list|(
literal|"prop2"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|T
operator|::
name|staticMetaObject
operator|.
name|property
argument_list|(
name|idx
argument_list|)
operator|.
name|revision
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|idx
operator|=
name|T
operator|::
name|staticMetaObject
operator|.
name|indexOfMethod
argument_list|(
literal|"method1()"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|T
operator|::
name|staticMetaObject
operator|.
name|method
argument_list|(
name|idx
argument_list|)
operator|.
name|revision
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|idx
operator|=
name|T
operator|::
name|staticMetaObject
operator|.
name|indexOfMethod
argument_list|(
literal|"method2()"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|T
operator|::
name|staticMetaObject
operator|.
name|method
argument_list|(
name|idx
argument_list|)
operator|.
name|revision
argument_list|()
operator|==
literal|4
argument_list|)
expr_stmt|;
name|idx
operator|=
name|T
operator|::
name|staticMetaObject
operator|.
name|indexOfSlot
argument_list|(
literal|"slot1()"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|T
operator|::
name|staticMetaObject
operator|.
name|method
argument_list|(
name|idx
argument_list|)
operator|.
name|revision
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|idx
operator|=
name|T
operator|::
name|staticMetaObject
operator|.
name|indexOfSlot
argument_list|(
literal|"slot2()"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|T
operator|::
name|staticMetaObject
operator|.
name|method
argument_list|(
name|idx
argument_list|)
operator|.
name|revision
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|idx
operator|=
name|T
operator|::
name|staticMetaObject
operator|.
name|indexOfSlot
argument_list|(
literal|"slot3()"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|T
operator|::
name|staticMetaObject
operator|.
name|method
argument_list|(
name|idx
argument_list|)
operator|.
name|revision
argument_list|()
operator|==
literal|6
argument_list|)
expr_stmt|;
name|idx
operator|=
name|T
operator|::
name|staticMetaObject
operator|.
name|indexOfSlot
argument_list|(
literal|"slot4()"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|T
operator|::
name|staticMetaObject
operator|.
name|method
argument_list|(
name|idx
argument_list|)
operator|.
name|revision
argument_list|()
operator|==
literal|6
argument_list|)
expr_stmt|;
name|idx
operator|=
name|T
operator|::
name|staticMetaObject
operator|.
name|indexOfSignal
argument_list|(
literal|"signal1()"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|T
operator|::
name|staticMetaObject
operator|.
name|method
argument_list|(
name|idx
argument_list|)
operator|.
name|revision
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|idx
operator|=
name|T
operator|::
name|staticMetaObject
operator|.
name|indexOfSignal
argument_list|(
literal|"signal2()"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|T
operator|::
name|staticMetaObject
operator|.
name|method
argument_list|(
name|idx
argument_list|)
operator|.
name|revision
argument_list|()
operator|==
literal|5
argument_list|)
expr_stmt|;
name|idx
operator|=
name|T
operator|::
name|staticMetaObject
operator|.
name|indexOfSignal
argument_list|(
literal|"signal3()"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|T
operator|::
name|staticMetaObject
operator|.
name|method
argument_list|(
name|idx
argument_list|)
operator|.
name|revision
argument_list|()
operator|==
literal|7
argument_list|)
expr_stmt|;
name|idx
operator|=
name|T
operator|::
name|staticMetaObject
operator|.
name|indexOfSignal
argument_list|(
literal|"signal4()"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|T
operator|::
name|staticMetaObject
operator|.
name|method
argument_list|(
name|idx
argument_list|)
operator|.
name|revision
argument_list|()
operator|==
literal|7
argument_list|)
expr_stmt|;
name|idx
operator|=
name|T
operator|::
name|staticMetaObject
operator|.
name|indexOfEnumerator
argument_list|(
literal|"TestEnum"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|T
operator|::
name|staticMetaObject
operator|.
name|enumerator
argument_list|(
name|idx
argument_list|)
operator|.
name|keyCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|T
operator|::
name|staticMetaObject
operator|.
name|enumerator
argument_list|(
name|idx
argument_list|)
operator|.
name|key
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|"One"
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// test using both class that has properties with and without NOTIFY signals
end_comment
begin_function
name|void
name|tst_Moc
operator|::
name|revisions
parameter_list|()
block|{
name|revisions_T
argument_list|<
name|VersionTest
argument_list|>
argument_list|()
expr_stmt|;
name|revisions_T
argument_list|<
name|VersionTestNotify
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|warnings_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"input"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"args"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"exitCode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expectedStdOut"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expectedStdErr"
argument_list|)
expr_stmt|;
comment|// empty input should result in "no relevant classes" note
name|QTest
operator|::
name|newRow
argument_list|(
literal|"No relevant classes"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|" "
argument_list|)
operator|<<
name|QStringList
argument_list|()
operator|<<
literal|0
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"standard input:0: Note: No relevant classes found. No output generated."
argument_list|)
expr_stmt|;
comment|// passing "-nn" should suppress "no relevant classes" note
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-nn"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|" "
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"-nn"
operator|)
operator|<<
literal|0
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
comment|// passing "-nw" should also suppress "no relevant classes" note
name|QTest
operator|::
name|newRow
argument_list|(
literal|"-nw"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|" "
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"-nw"
operator|)
operator|<<
literal|0
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
comment|// This should output a warning
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Invalid property warning"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"class X : public QObject { Q_OBJECT Q_PROPERTY(int x) };"
argument_list|)
operator|<<
name|QStringList
argument_list|()
operator|<<
literal|0
operator|<<
name|QString
argument_list|(
literal|"IGNORE_ALL_STDOUT"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"standard input:1: Warning: Property declaration x has no READ accessor function or associated MEMBER variable. The property will be invalid."
argument_list|)
expr_stmt|;
comment|// Passing "-nn" should NOT suppress the warning
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Invalid property warning with -nn"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"class X : public QObject { Q_OBJECT Q_PROPERTY(int x) };"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"-nn"
operator|)
operator|<<
literal|0
operator|<<
name|QString
argument_list|(
literal|"IGNORE_ALL_STDOUT"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"standard input:1: Warning: Property declaration x has no READ accessor function or associated MEMBER variable. The property will be invalid."
argument_list|)
expr_stmt|;
comment|// Passing "-nw" should suppress the warning
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Invalid property warning with -nw"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"class X : public QObject { Q_OBJECT Q_PROPERTY(int x) };"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"-nw"
operator|)
operator|<<
literal|0
operator|<<
name|QString
argument_list|(
literal|"IGNORE_ALL_STDOUT"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
comment|// This should output an error
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Does not inherit QObject"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"class X { Q_OBJECT };"
argument_list|)
operator|<<
name|QStringList
argument_list|()
operator|<<
literal|1
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"standard input:1: Error: Class contains Q_OBJECT macro but does not inherit from QObject"
argument_list|)
expr_stmt|;
comment|// "-nn" should not suppress the error
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Does not inherit QObject with -nn"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"class X { Q_OBJECT };"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"-nn"
operator|)
operator|<<
literal|1
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"standard input:1: Error: Class contains Q_OBJECT macro but does not inherit from QObject"
argument_list|)
expr_stmt|;
comment|// "-nw" should not suppress the error
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Does not inherit QObject with -nw"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"class X { Q_OBJECT };"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"-nw"
operator|)
operator|<<
literal|1
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|(
literal|"standard input:1: Error: Class contains Q_OBJECT macro but does not inherit from QObject"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|warnings
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|MOC_CROSS_COMPILED
name|QSKIP
argument_list|(
literal|"Not tested when cross-compiled"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expectedStdOut
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expectedStdErr
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_CC_MSVC
comment|// for some reasons, moc compiled with MSVC uses a different output format
name|QRegExp
name|lineNumberRe
argument_list|(
literal|":(\\d+):"
argument_list|)
decl_stmt|;
name|lineNumberRe
operator|.
name|setMinimal
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|expectedStdErr
operator|.
name|replace
argument_list|(
name|lineNumberRe
argument_list|,
literal|"(\\1):"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QProcess
name|proc
decl_stmt|;
name|QProcessEnvironment
name|env
init|=
name|QProcessEnvironment
operator|::
name|systemEnvironment
argument_list|()
decl_stmt|;
name|env
operator|.
name|insert
argument_list|(
literal|"QT_MESSAGE_PATTERN"
argument_list|,
literal|"no qDebug or qWarning please"
argument_list|)
expr_stmt|;
name|proc
operator|.
name|setProcessEnvironment
argument_list|(
name|env
argument_list|)
expr_stmt|;
name|proc
operator|.
name|start
argument_list|(
literal|"moc"
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proc
operator|.
name|waitForStarted
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proc
operator|.
name|write
argument_list|(
name|input
argument_list|)
argument_list|,
name|qint64
argument_list|(
name|input
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|proc
operator|.
name|closeWriteChannel
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|proc
operator|.
name|waitForFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proc
operator|.
name|exitCode
argument_list|()
argument_list|,
name|exitCode
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proc
operator|.
name|exitStatus
argument_list|()
argument_list|,
name|QProcess
operator|::
name|NormalExit
argument_list|)
expr_stmt|;
comment|// magic value "IGNORE_ALL_STDOUT" ignores stdout
if|if
condition|(
name|expectedStdOut
operator|!=
literal|"IGNORE_ALL_STDOUT"
condition|)
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|proc
operator|.
name|readAllStandardOutput
argument_list|()
argument_list|)
operator|.
name|trimmed
argument_list|()
argument_list|,
name|expectedStdOut
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|proc
operator|.
name|readAllStandardError
argument_list|()
argument_list|)
operator|.
name|trimmed
argument_list|()
argument_list|,
name|expectedStdErr
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
class|class
name|tst_Moc
operator|::
name|PrivateClass
super|:
specifier|public
name|QObject
block|{
name|Q_PROPERTY
parameter_list|(
name|int
name|someProperty
name|READ
name|someSlot
name|WRITE
name|someSlot2
parameter_list|)
name|Q_OBJECT
name|Q_SIGNALS
decl_stmt|:     void someSignal(
block|)
class|;
end_class
begin_public
public|public
name|Q_SLOTS
public|:
name|int
name|someSlot
parameter_list|()
block|{
return|return
literal|1
return|;
block|}
name|void
name|someSlot2
parameter_list|(
name|int
parameter_list|)
block|{}
end_public
begin_public
public|public:
name|Q_INVOKABLE
name|PrivateClass
parameter_list|()
block|{}
end_public
begin_function
unit|};
name|void
name|tst_Moc
operator|::
name|privateClass
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|PrivateClass
operator|::
name|staticMetaObject
operator|.
name|indexOfConstructor
argument_list|(
literal|"PrivateClass()"
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|PrivateClass
operator|::
name|staticMetaObject
operator|.
name|indexOfSignal
argument_list|(
literal|"someSignal()"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|cxx11Enums_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"enumName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|char
argument_list|>
argument_list|(
literal|"prefix"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"EnumClass"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"EnumClass"
argument_list|)
operator|<<
literal|'A'
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"TypedEnum"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"TypedEnum"
argument_list|)
operator|<<
literal|'B'
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"TypedEnumClass"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"TypedEnumClass"
argument_list|)
operator|<<
literal|'C'
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"NormalEnum"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"NormalEnum"
argument_list|)
operator|<<
literal|'D'
expr_stmt|;
block|}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|cxx11Enums
parameter_list|()
block|{
specifier|const
name|QMetaObject
modifier|*
name|meta
init|=
operator|&
name|CXX11Enums
operator|::
name|staticMetaObject
decl_stmt|;
name|QCOMPARE
argument_list|(
name|meta
operator|->
name|enumeratorOffset
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|enumName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|char
argument_list|,
name|prefix
argument_list|)
expr_stmt|;
name|int
name|idx
decl_stmt|;
name|idx
operator|=
name|meta
operator|->
name|indexOfEnumerator
argument_list|(
name|enumName
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|idx
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|meta
operator|->
name|enumerator
argument_list|(
name|idx
argument_list|)
operator|.
name|enclosingMetaObject
argument_list|()
argument_list|,
name|meta
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|meta
operator|->
name|enumerator
argument_list|(
name|idx
argument_list|)
operator|.
name|isValid
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|meta
operator|->
name|enumerator
argument_list|(
name|idx
argument_list|)
operator|.
name|keyCount
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|meta
operator|->
name|enumerator
argument_list|(
name|idx
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
name|enumName
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|QByteArray
name|v
init|=
name|prefix
operator|+
name|QByteArray
operator|::
name|number
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|meta
operator|->
name|enumerator
argument_list|(
name|idx
argument_list|)
operator|.
name|keyToValue
argument_list|(
name|v
argument_list|)
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|meta
operator|->
name|enumerator
argument_list|(
name|idx
argument_list|)
operator|.
name|valueToKey
argument_list|(
name|i
argument_list|)
argument_list|,
name|v
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|returnRefs
parameter_list|()
block|{
name|TestClass
name|tst
decl_stmt|;
specifier|const
name|QMetaObject
modifier|*
name|mobj
init|=
name|tst
operator|.
name|metaObject
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|mobj
operator|->
name|indexOfMethod
argument_list|(
literal|"myInvokableReturningRef()"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mobj
operator|->
name|indexOfMethod
argument_list|(
literal|"myInvokableReturningConstRef()"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// Those two functions are copied from the qscriptextqobject test in qtscript
comment|// they used to cause miscompilation of the moc generated file.
block|}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|memberProperties_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"object"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"property"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"signal"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"writeValue"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"expectedWriteResult"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expectedReadResult"
argument_list|)
expr_stmt|;
name|pPPTest
operator|=
operator|new
name|PrivatePropertyTest
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"MEMBER property"
argument_list|)
operator|<<
literal|0
operator|<<
literal|"member1"
operator|<<
literal|""
operator|<<
literal|"abc"
operator|<<
literal|true
operator|<<
literal|"abc"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"MEMBER property with READ function"
argument_list|)
operator|<<
literal|0
operator|<<
literal|"member2"
operator|<<
literal|""
operator|<<
literal|"def"
operator|<<
literal|true
operator|<<
literal|"def"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"MEMBER property with WRITE function"
argument_list|)
operator|<<
literal|0
operator|<<
literal|"member3"
operator|<<
literal|""
operator|<<
literal|"ghi"
operator|<<
literal|true
operator|<<
literal|"ghi"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"MEMBER property with NOTIFY"
argument_list|)
operator|<<
literal|0
operator|<<
literal|"member4"
operator|<<
literal|"member4Changed()"
operator|<<
literal|"lmn"
operator|<<
literal|true
operator|<<
literal|"lmn"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"MEMBER property with NOTIFY(value)"
argument_list|)
operator|<<
literal|0
operator|<<
literal|"member5"
operator|<<
literal|"member5Changed(const QString&)"
operator|<<
literal|"opq"
operator|<<
literal|true
operator|<<
literal|"opq"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"MEMBER property with CONSTANT"
argument_list|)
operator|<<
literal|0
operator|<<
literal|"member6"
operator|<<
literal|""
operator|<<
literal|"test"
operator|<<
literal|false
operator|<<
literal|"const"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"private MEMBER property"
argument_list|)
operator|<<
literal|1
operator|<<
literal|"blub"
operator|<<
literal|""
operator|<<
literal|"abc"
operator|<<
literal|true
operator|<<
literal|"abc"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"private MEMBER property with READ function"
argument_list|)
operator|<<
literal|1
operator|<<
literal|"blub2"
operator|<<
literal|""
operator|<<
literal|"def"
operator|<<
literal|true
operator|<<
literal|"def"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"private MEMBER property with WRITE function"
argument_list|)
operator|<<
literal|1
operator|<<
literal|"blub3"
operator|<<
literal|""
operator|<<
literal|"ghi"
operator|<<
literal|true
operator|<<
literal|"ghi"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"private MEMBER property with NOTIFY"
argument_list|)
operator|<<
literal|1
operator|<<
literal|"blub4"
operator|<<
literal|"blub4Changed()"
operator|<<
literal|"jkl"
operator|<<
literal|true
operator|<<
literal|"jkl"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"private MEMBER property with NOTIFY(value)"
argument_list|)
operator|<<
literal|1
operator|<<
literal|"blub5"
operator|<<
literal|"blub5Changed(const QString&)"
operator|<<
literal|"mno"
operator|<<
literal|true
operator|<<
literal|"mno"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"private MEMBER property with CONSTANT"
argument_list|)
operator|<<
literal|1
operator|<<
literal|"blub6"
operator|<<
literal|""
operator|<<
literal|"test"
operator|<<
literal|false
operator|<<
literal|"const"
expr_stmt|;
block|}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|memberProperties
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|object
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|property
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|signal
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|writeValue
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|expectedWriteResult
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expectedReadResult
argument_list|)
expr_stmt|;
name|QObject
modifier|*
name|pObj
init|=
operator|(
name|object
operator|==
literal|0
operator|)
condition|?
name|this
else|:
cast|static_cast
argument_list|<
name|QObject
operator|*
argument_list|>
argument_list|(
name|pPPTest
argument_list|)
decl_stmt|;
name|QString
name|sSignalDeclaration
decl_stmt|;
if|if
condition|(
operator|!
name|signal
operator|.
name|isEmpty
argument_list|()
condition|)
name|sSignalDeclaration
operator|=
name|QString
argument_list|(
name|SIGNAL
argument_list|(
operator|%
literal|1
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|signal
argument_list|)
expr_stmt|;
else|else
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QSignalSpy: Not a valid signal, use the SIGNAL macro"
argument_list|)
expr_stmt|;
name|QSignalSpy
name|notifySpy
argument_list|(
name|pObj
argument_list|,
name|sSignalDeclaration
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
name|int
name|index
init|=
name|pObj
operator|->
name|metaObject
argument_list|()
operator|->
name|indexOfProperty
argument_list|(
name|property
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|index
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QMetaProperty
name|prop
init|=
name|pObj
operator|->
name|metaObject
argument_list|()
operator|->
name|property
argument_list|(
name|index
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|prop
operator|.
name|write
argument_list|(
name|pObj
argument_list|,
name|writeValue
argument_list|)
argument_list|,
name|expectedWriteResult
argument_list|)
expr_stmt|;
name|QVariant
name|readValue
init|=
name|prop
operator|.
name|read
argument_list|(
name|pObj
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|readValue
operator|.
name|toString
argument_list|()
argument_list|,
name|expectedReadResult
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|signal
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QCOMPARE
argument_list|(
name|notifySpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|prop
operator|.
name|notifySignal
argument_list|()
operator|.
name|parameterNames
argument_list|()
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|QList
argument_list|<
name|QVariant
argument_list|>
name|arguments
init|=
name|notifySpy
operator|.
name|takeFirst
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|arguments
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|arguments
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|expectedReadResult
argument_list|)
expr_stmt|;
block|}
name|notifySpy
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// a second write with the same value should not cause the signal to be emitted again
name|QCOMPARE
argument_list|(
name|prop
operator|.
name|write
argument_list|(
name|pObj
argument_list|,
name|writeValue
argument_list|)
argument_list|,
name|expectedWriteResult
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|notifySpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|//this used to fail to compile
end_comment
begin_class
class|class
name|ClassWithOneMember
super|:
specifier|public
name|QObject
block|{
name|Q_PROPERTY
parameter_list|(
name|int
name|member
name|MEMBER
name|member
parameter_list|)
name|Q_OBJECT
specifier|public
private|:
name|int
name|member
decl_stmt|;
block|}
class|;
end_class
begin_function
name|void
name|tst_Moc
operator|::
name|memberProperties2
parameter_list|()
block|{
name|ClassWithOneMember
name|o
decl_stmt|;
name|o
operator|.
name|member
operator|=
literal|442
expr_stmt|;
name|QCOMPARE
argument_list|(
name|o
operator|.
name|property
argument_list|(
literal|"member"
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|442
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|o
operator|.
name|setProperty
argument_list|(
literal|"member"
argument_list|,
literal|6666
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|o
operator|.
name|member
argument_list|,
literal|6666
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
class|class
name|SignalConnectionTester
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|SignalConnectionTester
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|testPassed
argument_list|(
literal|false
argument_list|)
block|{      }
public|public
name|Q_SLOTS
public|:
name|void
name|testSlot
parameter_list|()
block|{
name|testPassed
operator|=
literal|true
expr_stmt|;
block|}
name|void
name|testSlotWith1Arg
parameter_list|(
name|int
name|i
parameter_list|)
block|{
name|testPassed
operator|=
name|i
operator|==
literal|42
expr_stmt|;
block|}
name|void
name|testSlotWith2Args
parameter_list|(
name|int
name|i
parameter_list|,
specifier|const
name|QString
modifier|&
name|s
parameter_list|)
block|{
name|testPassed
operator|=
name|i
operator|==
literal|42
operator|&&
name|s
operator|==
literal|"Hello"
expr_stmt|;
block|}
public|public:
name|bool
name|testPassed
decl_stmt|;
block|}
class|;
end_class
begin_class
class|class
name|ClassWithPrivateSignals
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|ClassWithPrivateSignals
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
block|{      }
name|void
name|emitPrivateSignals
parameter_list|()
block|{
emit|emit
name|privateSignal1
argument_list|(
name|QPrivateSignal
argument_list|()
argument_list|)
emit|;
emit|emit
name|privateSignalWith1Arg
argument_list|(
literal|42
argument_list|,
name|QPrivateSignal
argument_list|()
argument_list|)
emit|;
emit|emit
name|privateSignalWith2Args
argument_list|(
literal|42
argument_list|,
literal|"Hello"
argument_list|,
name|QPrivateSignal
argument_list|()
argument_list|)
emit|;
emit|emit
name|privateOverloadedSignal
argument_list|(
name|QPrivateSignal
argument_list|()
argument_list|)
emit|;
emit|emit
name|privateOverloadedSignal
argument_list|(
literal|42
argument_list|,
name|QPrivateSignal
argument_list|()
argument_list|)
emit|;
emit|emit
name|overloadedMaybePrivate
argument_list|()
emit|;
emit|emit
name|overloadedMaybePrivate
argument_list|(
literal|42
argument_list|,
name|QPrivateSignal
argument_list|()
argument_list|)
emit|;
block|}
name|Q_SIGNALS
label|:
name|void
name|privateSignal1
parameter_list|(
name|QPrivateSignal
parameter_list|)
function_decl|;
name|void
name|privateSignalWith1Arg
parameter_list|(
name|int
name|arg1
parameter_list|,
name|QPrivateSignal
parameter_list|)
function_decl|;
name|void
name|privateSignalWith2Args
parameter_list|(
name|int
name|arg1
parameter_list|,
specifier|const
name|QString
modifier|&
name|arg2
parameter_list|,
name|QPrivateSignal
parameter_list|)
function_decl|;
name|void
name|privateOverloadedSignal
parameter_list|(
name|QPrivateSignal
parameter_list|)
function_decl|;
name|void
name|privateOverloadedSignal
parameter_list|(
name|int
parameter_list|,
name|QPrivateSignal
parameter_list|)
function_decl|;
name|void
name|overloadedMaybePrivate
parameter_list|()
function_decl|;
name|void
name|overloadedMaybePrivate
parameter_list|(
name|int
parameter_list|,
name|QPrivateSignal
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_class
class|class
name|SubClassFromPrivateSignals
super|:
specifier|public
name|ClassWithPrivateSignals
block|{
name|Q_OBJECT
public|public:
name|SubClassFromPrivateSignals
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|ClassWithPrivateSignals
argument_list|(
name|parent
argument_list|)
block|{      }
name|void
name|emitProtectedSignals
parameter_list|()
block|{
comment|// Compile test: All of this intentionally does not compile:
comment|//         emit privateSignal1();
comment|//         emit privateSignalWith1Arg(42);
comment|//         emit privateSignalWith2Args(42, "Hello");
comment|//
comment|//         emit privateSignal1(QPrivateSignal());
comment|//         emit privateSignalWith1Arg(42, QPrivateSignal());
comment|//         emit privateSignalWith2Args(42, "Hello", QPrivateSignal());
comment|//
comment|//         emit privateSignal1(ClassWithPrivateSignals::QPrivateSignal());
comment|//         emit privateSignalWith1Arg(42, ClassWithPrivateSignals::QPrivateSignal());
comment|//         emit privateSignalWith2Args(42, "Hello", ClassWithPrivateSignals::QPrivateSignal());
comment|//         emit privateOverloadedSignal();
comment|//         emit privateOverloadedSignal(42);
comment|//         emit overloadedMaybePrivate();
comment|//         emit overloadedMaybePrivate(42);
block|}
block|}
class|;
end_class
begin_function
name|void
name|tst_Moc
operator|::
name|privateSignalConnection
parameter_list|()
block|{
comment|// Function pointer connects. Matching signals and slots
block|{
name|ClassWithPrivateSignals
name|classWithPrivateSignals
decl_stmt|;
name|SignalConnectionTester
name|tester
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|classWithPrivateSignals
argument_list|,
operator|&
name|ClassWithPrivateSignals
operator|::
name|privateSignal1
argument_list|,
operator|&
name|tester
argument_list|,
operator|&
name|SignalConnectionTester
operator|::
name|testSlot
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
name|classWithPrivateSignals
operator|.
name|emitPrivateSignals
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
name|tester
operator|.
name|testPassed
operator|=
literal|false
expr_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|classWithPrivateSignals
argument_list|,
literal|"privateSignal1"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
block|}
block|{
name|SubClassFromPrivateSignals
name|subClassFromPrivateSignals
decl_stmt|;
name|SignalConnectionTester
name|tester
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|subClassFromPrivateSignals
argument_list|,
operator|&
name|ClassWithPrivateSignals
operator|::
name|privateSignal1
argument_list|,
operator|&
name|tester
argument_list|,
operator|&
name|SignalConnectionTester
operator|::
name|testSlot
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
name|subClassFromPrivateSignals
operator|.
name|emitPrivateSignals
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
name|tester
operator|.
name|testPassed
operator|=
literal|false
expr_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|subClassFromPrivateSignals
argument_list|,
literal|"privateSignal1"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
block|}
block|{
name|ClassWithPrivateSignals
name|classWithPrivateSignals
decl_stmt|;
name|SignalConnectionTester
name|tester
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|classWithPrivateSignals
argument_list|,
operator|&
name|ClassWithPrivateSignals
operator|::
name|privateSignalWith1Arg
argument_list|,
operator|&
name|tester
argument_list|,
operator|&
name|SignalConnectionTester
operator|::
name|testSlotWith1Arg
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
name|classWithPrivateSignals
operator|.
name|emitPrivateSignals
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
name|tester
operator|.
name|testPassed
operator|=
literal|false
expr_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|classWithPrivateSignals
argument_list|,
literal|"privateSignalWith1Arg"
argument_list|,
name|Q_ARG
argument_list|(
name|int
argument_list|,
literal|42
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
block|}
block|{
name|SubClassFromPrivateSignals
name|subClassFromPrivateSignals
decl_stmt|;
name|SignalConnectionTester
name|tester
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|subClassFromPrivateSignals
argument_list|,
operator|&
name|ClassWithPrivateSignals
operator|::
name|privateSignalWith1Arg
argument_list|,
operator|&
name|tester
argument_list|,
operator|&
name|SignalConnectionTester
operator|::
name|testSlotWith1Arg
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
name|subClassFromPrivateSignals
operator|.
name|emitPrivateSignals
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
name|tester
operator|.
name|testPassed
operator|=
literal|false
expr_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|subClassFromPrivateSignals
argument_list|,
literal|"privateSignalWith1Arg"
argument_list|,
name|Q_ARG
argument_list|(
name|int
argument_list|,
literal|42
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
block|}
block|{
name|ClassWithPrivateSignals
name|classWithPrivateSignals
decl_stmt|;
name|SignalConnectionTester
name|tester
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|classWithPrivateSignals
argument_list|,
operator|&
name|ClassWithPrivateSignals
operator|::
name|privateSignalWith2Args
argument_list|,
operator|&
name|tester
argument_list|,
operator|&
name|SignalConnectionTester
operator|::
name|testSlotWith2Args
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
name|classWithPrivateSignals
operator|.
name|emitPrivateSignals
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
name|tester
operator|.
name|testPassed
operator|=
literal|false
expr_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|classWithPrivateSignals
argument_list|,
literal|"privateSignalWith2Args"
argument_list|,
name|Q_ARG
argument_list|(
name|int
argument_list|,
literal|42
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|QString
argument_list|,
literal|"Hello"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
block|}
block|{
name|SubClassFromPrivateSignals
name|subClassFromPrivateSignals
decl_stmt|;
name|SignalConnectionTester
name|tester
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|subClassFromPrivateSignals
argument_list|,
operator|&
name|ClassWithPrivateSignals
operator|::
name|privateSignalWith2Args
argument_list|,
operator|&
name|tester
argument_list|,
operator|&
name|SignalConnectionTester
operator|::
name|testSlotWith2Args
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
name|subClassFromPrivateSignals
operator|.
name|emitPrivateSignals
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
name|tester
operator|.
name|testPassed
operator|=
literal|false
expr_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|subClassFromPrivateSignals
argument_list|,
literal|"privateSignalWith2Args"
argument_list|,
name|Q_ARG
argument_list|(
name|int
argument_list|,
literal|42
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|QString
argument_list|,
literal|"Hello"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
block|}
comment|// String based connects. Matching signals and slots
block|{
name|ClassWithPrivateSignals
name|classWithPrivateSignals
decl_stmt|;
name|SignalConnectionTester
name|tester
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|classWithPrivateSignals
argument_list|,
name|SIGNAL
argument_list|(
name|privateSignal1
argument_list|()
argument_list|)
argument_list|,
operator|&
name|tester
argument_list|,
name|SLOT
argument_list|(
name|testSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
name|classWithPrivateSignals
operator|.
name|emitPrivateSignals
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
block|}
block|{
name|SubClassFromPrivateSignals
name|subClassFromPrivateSignals
decl_stmt|;
name|SignalConnectionTester
name|tester
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|subClassFromPrivateSignals
argument_list|,
name|SIGNAL
argument_list|(
name|privateSignal1
argument_list|()
argument_list|)
argument_list|,
operator|&
name|tester
argument_list|,
name|SLOT
argument_list|(
name|testSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
name|subClassFromPrivateSignals
operator|.
name|emitPrivateSignals
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
block|}
block|{
name|ClassWithPrivateSignals
name|classWithPrivateSignals
decl_stmt|;
name|SignalConnectionTester
name|tester
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|classWithPrivateSignals
argument_list|,
name|SIGNAL
argument_list|(
name|privateSignalWith1Arg
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
operator|&
name|tester
argument_list|,
name|SLOT
argument_list|(
name|testSlotWith1Arg
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
name|classWithPrivateSignals
operator|.
name|emitPrivateSignals
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
block|}
block|{
name|SubClassFromPrivateSignals
name|subClassFromPrivateSignals
decl_stmt|;
name|SignalConnectionTester
name|tester
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|subClassFromPrivateSignals
argument_list|,
name|SIGNAL
argument_list|(
name|privateSignalWith1Arg
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
operator|&
name|tester
argument_list|,
name|SLOT
argument_list|(
name|testSlotWith1Arg
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
name|subClassFromPrivateSignals
operator|.
name|emitPrivateSignals
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
block|}
block|{
name|ClassWithPrivateSignals
name|classWithPrivateSignals
decl_stmt|;
name|SignalConnectionTester
name|tester
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|classWithPrivateSignals
argument_list|,
name|SIGNAL
argument_list|(
name|privateSignalWith2Args
argument_list|(
name|int
argument_list|,
name|QString
argument_list|)
argument_list|)
argument_list|,
operator|&
name|tester
argument_list|,
name|SLOT
argument_list|(
name|testSlotWith2Args
argument_list|(
name|int
argument_list|,
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
name|classWithPrivateSignals
operator|.
name|emitPrivateSignals
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
block|}
block|{
name|SubClassFromPrivateSignals
name|subClassFromPrivateSignals
decl_stmt|;
name|SignalConnectionTester
name|tester
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|subClassFromPrivateSignals
argument_list|,
name|SIGNAL
argument_list|(
name|privateSignalWith2Args
argument_list|(
name|int
argument_list|,
name|QString
argument_list|)
argument_list|)
argument_list|,
operator|&
name|tester
argument_list|,
name|SLOT
argument_list|(
name|testSlotWith2Args
argument_list|(
name|int
argument_list|,
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
name|subClassFromPrivateSignals
operator|.
name|emitPrivateSignals
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
block|}
comment|// Function pointer connects. Decayed slot arguments
block|{
name|ClassWithPrivateSignals
name|classWithPrivateSignals
decl_stmt|;
name|SignalConnectionTester
name|tester
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|classWithPrivateSignals
argument_list|,
operator|&
name|ClassWithPrivateSignals
operator|::
name|privateSignalWith1Arg
argument_list|,
operator|&
name|tester
argument_list|,
operator|&
name|SignalConnectionTester
operator|::
name|testSlot
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
name|classWithPrivateSignals
operator|.
name|emitPrivateSignals
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
block|}
block|{
name|SubClassFromPrivateSignals
name|subClassFromPrivateSignals
decl_stmt|;
name|SignalConnectionTester
name|tester
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|subClassFromPrivateSignals
argument_list|,
operator|&
name|ClassWithPrivateSignals
operator|::
name|privateSignalWith1Arg
argument_list|,
operator|&
name|tester
argument_list|,
operator|&
name|SignalConnectionTester
operator|::
name|testSlot
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
name|subClassFromPrivateSignals
operator|.
name|emitPrivateSignals
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
block|}
block|{
name|ClassWithPrivateSignals
name|classWithPrivateSignals
decl_stmt|;
name|SignalConnectionTester
name|tester
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|classWithPrivateSignals
argument_list|,
operator|&
name|ClassWithPrivateSignals
operator|::
name|privateSignalWith1Arg
argument_list|,
operator|&
name|tester
argument_list|,
operator|&
name|SignalConnectionTester
operator|::
name|testSlotWith1Arg
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
name|classWithPrivateSignals
operator|.
name|emitPrivateSignals
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
block|}
block|{
name|SubClassFromPrivateSignals
name|subClassFromPrivateSignals
decl_stmt|;
name|SignalConnectionTester
name|tester
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|subClassFromPrivateSignals
argument_list|,
operator|&
name|ClassWithPrivateSignals
operator|::
name|privateSignalWith1Arg
argument_list|,
operator|&
name|tester
argument_list|,
operator|&
name|SignalConnectionTester
operator|::
name|testSlotWith1Arg
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
name|subClassFromPrivateSignals
operator|.
name|emitPrivateSignals
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
block|}
block|{
name|ClassWithPrivateSignals
name|classWithPrivateSignals
decl_stmt|;
name|SignalConnectionTester
name|tester
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|classWithPrivateSignals
argument_list|,
operator|&
name|ClassWithPrivateSignals
operator|::
name|privateSignalWith1Arg
argument_list|,
operator|&
name|tester
argument_list|,
operator|&
name|SignalConnectionTester
operator|::
name|testSlot
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
name|classWithPrivateSignals
operator|.
name|emitPrivateSignals
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
block|}
block|{
name|SubClassFromPrivateSignals
name|subClassFromPrivateSignals
decl_stmt|;
name|SignalConnectionTester
name|tester
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|subClassFromPrivateSignals
argument_list|,
operator|&
name|ClassWithPrivateSignals
operator|::
name|privateSignalWith1Arg
argument_list|,
operator|&
name|tester
argument_list|,
operator|&
name|SignalConnectionTester
operator|::
name|testSlot
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
name|subClassFromPrivateSignals
operator|.
name|emitPrivateSignals
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
block|}
comment|// String based connects. Decayed slot arguments
block|{
name|ClassWithPrivateSignals
name|classWithPrivateSignals
decl_stmt|;
name|SignalConnectionTester
name|tester
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|classWithPrivateSignals
argument_list|,
name|SIGNAL
argument_list|(
name|privateSignalWith1Arg
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
operator|&
name|tester
argument_list|,
name|SLOT
argument_list|(
name|testSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
name|classWithPrivateSignals
operator|.
name|emitPrivateSignals
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
block|}
block|{
name|SubClassFromPrivateSignals
name|subClassFromPrivateSignals
decl_stmt|;
name|SignalConnectionTester
name|tester
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|subClassFromPrivateSignals
argument_list|,
name|SIGNAL
argument_list|(
name|privateSignalWith1Arg
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
operator|&
name|tester
argument_list|,
name|SLOT
argument_list|(
name|testSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
name|subClassFromPrivateSignals
operator|.
name|emitPrivateSignals
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
block|}
block|{
name|ClassWithPrivateSignals
name|classWithPrivateSignals
decl_stmt|;
name|SignalConnectionTester
name|tester
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|classWithPrivateSignals
argument_list|,
name|SIGNAL
argument_list|(
name|privateSignalWith2Args
argument_list|(
name|int
argument_list|,
name|QString
argument_list|)
argument_list|)
argument_list|,
operator|&
name|tester
argument_list|,
name|SLOT
argument_list|(
name|testSlotWith1Arg
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
name|classWithPrivateSignals
operator|.
name|emitPrivateSignals
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
block|}
block|{
name|SubClassFromPrivateSignals
name|subClassFromPrivateSignals
decl_stmt|;
name|SignalConnectionTester
name|tester
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|subClassFromPrivateSignals
argument_list|,
name|SIGNAL
argument_list|(
name|privateSignalWith2Args
argument_list|(
name|int
argument_list|,
name|QString
argument_list|)
argument_list|)
argument_list|,
operator|&
name|tester
argument_list|,
name|SLOT
argument_list|(
name|testSlotWith1Arg
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
name|subClassFromPrivateSignals
operator|.
name|emitPrivateSignals
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
block|}
block|{
name|ClassWithPrivateSignals
name|classWithPrivateSignals
decl_stmt|;
name|SignalConnectionTester
name|tester
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|classWithPrivateSignals
argument_list|,
name|SIGNAL
argument_list|(
name|privateSignalWith2Args
argument_list|(
name|int
argument_list|,
name|QString
argument_list|)
argument_list|)
argument_list|,
operator|&
name|tester
argument_list|,
name|SLOT
argument_list|(
name|testSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
name|classWithPrivateSignals
operator|.
name|emitPrivateSignals
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
block|}
block|{
name|SubClassFromPrivateSignals
name|subClassFromPrivateSignals
decl_stmt|;
name|SignalConnectionTester
name|tester
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|subClassFromPrivateSignals
argument_list|,
name|SIGNAL
argument_list|(
name|privateSignalWith2Args
argument_list|(
name|int
argument_list|,
name|QString
argument_list|)
argument_list|)
argument_list|,
operator|&
name|tester
argument_list|,
name|SLOT
argument_list|(
name|testSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
name|subClassFromPrivateSignals
operator|.
name|emitPrivateSignals
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
block|}
comment|// Overloaded private signals
block|{
name|ClassWithPrivateSignals
name|classWithPrivateSignals
decl_stmt|;
name|SignalConnectionTester
name|tester
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|classWithPrivateSignals
argument_list|,
name|SIGNAL
argument_list|(
name|privateOverloadedSignal
argument_list|()
argument_list|)
argument_list|,
operator|&
name|tester
argument_list|,
name|SLOT
argument_list|(
name|testSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
name|classWithPrivateSignals
operator|.
name|emitPrivateSignals
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
block|}
block|{
name|ClassWithPrivateSignals
name|classWithPrivateSignals
decl_stmt|;
name|SignalConnectionTester
name|tester
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|classWithPrivateSignals
argument_list|,
name|SIGNAL
argument_list|(
name|privateOverloadedSignal
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
operator|&
name|tester
argument_list|,
name|SLOT
argument_list|(
name|testSlotWith1Arg
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
name|classWithPrivateSignals
operator|.
name|emitPrivateSignals
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
block|}
comment|// We can't use function pointer connections to private signals which are overloaded because we would have to cast in this case to:
comment|//   static_cast<void (ClassWithPrivateSignals::*)(int, ClassWithPrivateSignals::QPrivateSignal)>(&ClassWithPrivateSignals::privateOverloadedSignal)
comment|// Which doesn't work as ClassWithPrivateSignals::QPrivateSignal is private.
comment|// Overload with either private or not private signals
block|{
name|ClassWithPrivateSignals
name|classWithPrivateSignals
decl_stmt|;
name|SignalConnectionTester
name|tester
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|classWithPrivateSignals
argument_list|,
name|SIGNAL
argument_list|(
name|overloadedMaybePrivate
argument_list|()
argument_list|)
argument_list|,
operator|&
name|tester
argument_list|,
name|SLOT
argument_list|(
name|testSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
name|classWithPrivateSignals
operator|.
name|emitPrivateSignals
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
block|}
block|{
name|ClassWithPrivateSignals
name|classWithPrivateSignals
decl_stmt|;
name|SignalConnectionTester
name|tester
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|classWithPrivateSignals
argument_list|,
name|SIGNAL
argument_list|(
name|privateOverloadedSignal
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
operator|&
name|tester
argument_list|,
name|SLOT
argument_list|(
name|testSlotWith1Arg
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
name|classWithPrivateSignals
operator|.
name|emitPrivateSignals
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
block|}
block|{
name|ClassWithPrivateSignals
name|classWithPrivateSignals
decl_stmt|;
name|SignalConnectionTester
name|tester
decl_stmt|;
name|QObject
operator|::
name|connect
operator|(
operator|&
name|classWithPrivateSignals
operator|,
expr|static_cast
operator|<
name|void
argument_list|(
name|ClassWithPrivateSignals
operator|::
modifier|*
argument_list|)
argument_list|()
operator|>
operator|(
operator|&
name|ClassWithPrivateSignals
operator|::
name|overloadedMaybePrivate
operator|)
operator|,
operator|&
name|tester
operator|,
operator|&
name|SignalConnectionTester
operator|::
name|testSlot
operator|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
name|classWithPrivateSignals
operator|.
name|emitPrivateSignals
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|tester
operator|.
name|testPassed
argument_list|)
expr_stmt|;
block|}
comment|// We can't use function pointer connections to private signals which are overloaded because we would have to cast in this case to:
comment|//   static_cast<void (ClassWithPrivateSignals::*)(int, ClassWithPrivateSignals::QPrivateSignal)>(&ClassWithPrivateSignals::overloadedMaybePrivate)
comment|// Which doesn't work as ClassWithPrivateSignals::QPrivateSignal is private.
block|}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|finalClasses_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"className"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"FinalTestClassQt"
argument_list|)
operator|<<
name|FinalTestClassQt
operator|::
name|staticMetaObject
operator|.
name|className
argument_list|()
operator|<<
literal|"FinalTestClassQt"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ExportedFinalTestClassQt"
argument_list|)
operator|<<
name|ExportedFinalTestClassQt
operator|::
name|staticMetaObject
operator|.
name|className
argument_list|()
operator|<<
literal|"ExportedFinalTestClassQt"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ExportedFinalTestClassQtX"
argument_list|)
operator|<<
name|ExportedFinalTestClassQtX
operator|::
name|staticMetaObject
operator|.
name|className
argument_list|()
operator|<<
literal|"ExportedFinalTestClassQtX"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"FinalTestClassCpp11"
argument_list|)
operator|<<
name|FinalTestClassCpp11
operator|::
name|staticMetaObject
operator|.
name|className
argument_list|()
operator|<<
literal|"FinalTestClassCpp11"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ExportedFinalTestClassCpp11"
argument_list|)
operator|<<
name|ExportedFinalTestClassCpp11
operator|::
name|staticMetaObject
operator|.
name|className
argument_list|()
operator|<<
literal|"ExportedFinalTestClassCpp11"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ExportedFinalTestClassCpp11X"
argument_list|)
operator|<<
name|ExportedFinalTestClassCpp11X
operator|::
name|staticMetaObject
operator|.
name|className
argument_list|()
operator|<<
literal|"ExportedFinalTestClassCpp11X"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"SealedTestClass"
argument_list|)
operator|<<
name|SealedTestClass
operator|::
name|staticMetaObject
operator|.
name|className
argument_list|()
operator|<<
literal|"SealedTestClass"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ExportedSealedTestClass"
argument_list|)
operator|<<
name|ExportedSealedTestClass
operator|::
name|staticMetaObject
operator|.
name|className
argument_list|()
operator|<<
literal|"ExportedSealedTestClass"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ExportedSealedTestClassX"
argument_list|)
operator|<<
name|ExportedSealedTestClassX
operator|::
name|staticMetaObject
operator|.
name|className
argument_list|()
operator|<<
literal|"ExportedSealedTestClassX"
expr_stmt|;
block|}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|finalClasses
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|className
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|className
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
name|Q_DECLARE_METATYPE
argument_list|(
specifier|const
name|QMetaObject
operator|*
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function
name|void
name|tst_Moc
operator|::
name|explicitOverrideControl_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
specifier|const
name|QMetaObject
operator|*
argument_list|>
argument_list|(
literal|"mo"
argument_list|)
expr_stmt|;
DECL|macro|ADD
define|#
directive|define
name|ADD
parameter_list|(
name|x
parameter_list|)
value|QTest::newRow(#x)<<&x::staticMetaObject
name|ADD
argument_list|(
name|ExplicitOverrideControlFinalQt
argument_list|)
expr_stmt|;
name|ADD
argument_list|(
name|ExplicitOverrideControlFinalCxx11
argument_list|)
expr_stmt|;
name|ADD
argument_list|(
name|ExplicitOverrideControlSealed
argument_list|)
expr_stmt|;
name|ADD
argument_list|(
name|ExplicitOverrideControlOverrideQt
argument_list|)
expr_stmt|;
name|ADD
argument_list|(
name|ExplicitOverrideControlOverrideCxx11
argument_list|)
expr_stmt|;
name|ADD
argument_list|(
name|ExplicitOverrideControlFinalQtOverrideQt
argument_list|)
expr_stmt|;
name|ADD
argument_list|(
name|ExplicitOverrideControlFinalCxx11OverrideCxx11
argument_list|)
expr_stmt|;
name|ADD
argument_list|(
name|ExplicitOverrideControlSealedOverride
argument_list|)
expr_stmt|;
DECL|macro|ADD
undef|#
directive|undef
name|ADD
block|}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|explicitOverrideControl
parameter_list|()
block|{
name|QFETCH
argument_list|(
specifier|const
name|QMetaObject
operator|*
argument_list|,
name|mo
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mo
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mo
operator|->
name|indexOfMethod
argument_list|(
literal|"pureSlot0()"
argument_list|)
argument_list|,
name|mo
operator|->
name|methodOffset
argument_list|()
operator|+
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mo
operator|->
name|indexOfMethod
argument_list|(
literal|"pureSlot1()"
argument_list|)
argument_list|,
name|mo
operator|->
name|methodOffset
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mo
operator|->
name|indexOfMethod
argument_list|(
literal|"pureSlot2()"
argument_list|)
argument_list|,
name|mo
operator|->
name|methodOffset
argument_list|()
operator|+
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|mo
operator|->
name|indexOfMethod
argument_list|(
literal|"pureSlot3()"
argument_list|)
argument_list|,
name|mo
operator|->
name|methodOffset
argument_list|()
operator|+
literal|3
argument_list|)
expr_stmt|;
if|#
directive|if
literal|0
comment|// moc doesn't support volatile slots
block|QCOMPARE(mo->indexOfMethod("pureSlot4()"), mo->methodOffset() + 4);     QCOMPARE(mo->indexOfMethod("pureSlot5()"), mo->methodOffset() + 5);     QCOMPARE(mo->indexOfMethod("pureSlot6()"), mo->methodOffset() + 6);     QCOMPARE(mo->indexOfMethod("pureSlot7()"), mo->methodOffset() + 7);     QCOMPARE(mo->indexOfMethod("pureSlot8()"), mo->methodOffset() + 8);     QCOMPARE(mo->indexOfMethod("pureSlot9()"), mo->methodOffset() + 9);
endif|#
directive|endif
block|}
end_function
begin_class
class|class
name|CustomQObject
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
name|Q_ENUMS
parameter_list|(
name|Number
parameter_list|)
specifier|public
private|:
enum|enum
name|Number
block|{
name|Zero
block|,
name|One
block|,
name|Two
block|}
enum|;
specifier|explicit
name|CustomQObject
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
block|{     }
block|}
class|;
end_class
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|CustomQObject::Number
argument_list|)
end_macro
begin_typedef
typedef|typedef
name|CustomQObject
modifier|*
name|CustomQObjectStar
typedef|;
end_typedef
begin_expr_stmt
name|Q_DECLARE_METATYPE
argument_list|(
name|CustomQObjectStar
argument_list|)
expr_stmt|;
end_expr_stmt
begin_namespace
namespace|namespace
name|SomeNamespace
block|{
class|class
name|NamespacedQObject
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
specifier|explicit
name|NamespacedQObject
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
block|{      }
block|}
class|;
struct|struct
name|NamespacedNonQObject
block|{
block|}
struct|;
block|}
end_namespace
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|SomeNamespace::NamespacedNonQObject
argument_list|)
end_macro
begin_comment
comment|// Need different types for the invokable method tests because otherwise the registration
end_comment
begin_comment
comment|// done in the property test would interfere.
end_comment
begin_class
class|class
name|CustomQObject2
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
name|Q_ENUMS
parameter_list|(
name|Number
parameter_list|)
specifier|public
private|:
enum|enum
name|Number
block|{
name|Zero
block|,
name|One
block|,
name|Two
block|}
enum|;
specifier|explicit
name|CustomQObject2
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
block|{     }
block|}
class|;
end_class
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|CustomQObject2::Number
argument_list|)
end_macro
begin_typedef
typedef|typedef
name|CustomQObject2
modifier|*
name|CustomQObject2Star
typedef|;
end_typedef
begin_expr_stmt
name|Q_DECLARE_METATYPE
argument_list|(
name|CustomQObject2Star
argument_list|)
expr_stmt|;
end_expr_stmt
begin_namespace
namespace|namespace
name|SomeNamespace2
block|{
class|class
name|NamespacedQObject2
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
specifier|explicit
name|NamespacedQObject2
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
block|{      }
block|}
class|;
struct|struct
name|NamespacedNonQObject2
block|{
block|}
struct|;
block|}
end_namespace
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|SomeNamespace2::NamespacedNonQObject2
argument_list|)
end_macro
begin_struct
struct|struct
name|CustomObject3
block|{
block|}
struct|;
end_struct
begin_struct
struct|struct
name|CustomObject4
block|{
block|}
struct|;
end_struct
begin_struct
struct|struct
name|CustomObject5
block|{
block|}
struct|;
end_struct
begin_struct
struct|struct
name|CustomObject6
block|{
block|}
struct|;
end_struct
begin_struct
struct|struct
name|CustomObject7
block|{
block|}
struct|;
end_struct
begin_struct
struct|struct
name|CustomObject8
block|{
block|}
struct|;
end_struct
begin_struct
struct|struct
name|CustomObject9
block|{
block|}
struct|;
end_struct
begin_struct
struct|struct
name|CustomObject10
block|{
block|}
struct|;
end_struct
begin_struct
struct|struct
name|CustomObject11
block|{
block|}
struct|;
end_struct
begin_struct
struct|struct
name|CustomObject12
block|{
block|}
struct|;
end_struct
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|CustomObject3
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|CustomObject4
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|CustomObject5
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|CustomObject6
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|CustomObject7
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|CustomObject8
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|CustomObject9
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|CustomObject10
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|CustomObject11
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|CustomObject12
argument_list|)
end_macro
begin_class
class|class
name|AutoRegistrationObject
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
name|Q_PROPERTY
argument_list|(
name|QObject
operator|*
name|object
name|READ
name|object
name|CONSTANT
argument_list|)
name|Q_PROPERTY
argument_list|(
name|CustomQObject
operator|*
name|customObject
name|READ
name|customObject
name|CONSTANT
argument_list|)
name|Q_PROPERTY
argument_list|(
name|QSharedPointer
argument_list|<
name|CustomQObject
argument_list|>
name|customObjectP
name|READ
name|customObjectP
name|CONSTANT
argument_list|)
name|Q_PROPERTY
argument_list|(
name|QWeakPointer
argument_list|<
name|CustomQObject
argument_list|>
name|customObjectWP
name|READ
name|customObjectWP
name|CONSTANT
argument_list|)
name|Q_PROPERTY
argument_list|(
name|QPointer
argument_list|<
name|CustomQObject
argument_list|>
name|customObjectTP
name|READ
name|customObjectTP
name|CONSTANT
argument_list|)
name|Q_PROPERTY
argument_list|(
name|QList
argument_list|<
name|int
argument_list|>
name|listInt
name|READ
name|listInt
name|CONSTANT
argument_list|)
name|Q_PROPERTY
argument_list|(
name|QVector
argument_list|<
name|QVariant
argument_list|>
name|vectorVariant
name|READ
name|vectorVariant
name|CONSTANT
argument_list|)
name|Q_PROPERTY
argument_list|(
name|QList
argument_list|<
name|CustomQObject
operator|*
argument_list|>
name|listObject
name|READ
name|listObject
name|CONSTANT
argument_list|)
name|Q_PROPERTY
argument_list|(
name|QVector
argument_list|<
name|QList
argument_list|<
name|int
argument_list|>
argument_list|>
name|vectorListInt
name|READ
name|vectorListInt
name|CONSTANT
argument_list|)
name|Q_PROPERTY
argument_list|(
name|QVector
argument_list|<
name|QList
argument_list|<
name|CustomQObject
operator|*
argument_list|>
argument_list|>
name|vectorListObject
name|READ
name|vectorListObject
name|CONSTANT
argument_list|)
name|Q_PROPERTY
argument_list|(
name|CustomQObject
operator|::
name|Number
name|enumValue
name|READ
name|enumValue
name|CONSTANT
argument_list|)
name|Q_PROPERTY
argument_list|(
name|CustomQObjectStar
name|customObjectTypedef
name|READ
name|customObjectTypedef
name|CONSTANT
argument_list|)
name|Q_PROPERTY
argument_list|(
name|SomeNamespace
operator|::
name|NamespacedQObject
operator|*
name|customObjectNamespaced
name|READ
name|customObjectNamespaced
name|CONSTANT
argument_list|)
name|Q_PROPERTY
argument_list|(
name|SomeNamespace
operator|::
name|NamespacedNonQObject
name|customNonQObjectNamespaced
name|READ
name|customNonQObjectNamespaced
name|CONSTANT
argument_list|)
decl|public
range|:
name|AutoRegistrationObject
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
operator|:
name|QObject
argument_list|(
argument|parent
argument_list|)
block|{     }
name|QObject
operator|*
name|object
argument_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
name|QSharedPointer
argument_list|<
name|CustomQObject
argument_list|>
name|customObjectP
parameter_list|()
specifier|const
block|{
return|return
name|QSharedPointer
argument_list|<
name|CustomQObject
argument_list|>
argument_list|()
return|;
block|}
name|QWeakPointer
argument_list|<
name|CustomQObject
argument_list|>
name|customObjectWP
parameter_list|()
specifier|const
block|{
return|return
name|QWeakPointer
argument_list|<
name|CustomQObject
argument_list|>
argument_list|()
return|;
block|}
name|QPointer
argument_list|<
name|CustomQObject
argument_list|>
name|customObjectTP
parameter_list|()
specifier|const
block|{
return|return
name|QPointer
argument_list|<
name|CustomQObject
argument_list|>
argument_list|()
return|;
block|}
name|CustomQObject
modifier|*
name|customObject
parameter_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
name|QList
argument_list|<
name|int
argument_list|>
name|listInt
parameter_list|()
specifier|const
block|{
return|return
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
return|;
block|}
name|QVector
argument_list|<
name|QVariant
argument_list|>
name|vectorVariant
parameter_list|()
specifier|const
block|{
return|return
name|QVector
argument_list|<
name|QVariant
argument_list|>
argument_list|()
return|;
block|}
name|QList
argument_list|<
name|CustomQObject
modifier|*
argument_list|>
name|listObject
parameter_list|()
specifier|const
block|{
return|return
name|QList
argument_list|<
name|CustomQObject
operator|*
argument_list|>
argument_list|()
return|;
block|}
name|QVector
argument_list|<
name|QList
argument_list|<
name|int
argument_list|>
argument_list|>
name|vectorListInt
parameter_list|()
specifier|const
block|{
return|return
name|QVector
argument_list|<
name|QList
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|()
return|;
block|}
name|QVector
argument_list|<
name|QList
argument_list|<
name|CustomQObject
modifier|*
argument_list|>
argument_list|>
name|vectorListObject
parameter_list|()
specifier|const
block|{
return|return
name|QVector
argument_list|<
name|QList
argument_list|<
name|CustomQObject
operator|*
argument_list|>
argument_list|>
argument_list|()
return|;
block|}
name|CustomQObject
operator|::
name|Number
name|enumValue
parameter_list|()
specifier|const
block|{
return|return
name|CustomQObject
operator|::
name|Zero
return|;
block|}
name|CustomQObjectStar
name|customObjectTypedef
parameter_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
name|SomeNamespace
operator|::
name|NamespacedQObject
modifier|*
name|customObjectNamespaced
parameter_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
name|SomeNamespace
operator|::
name|NamespacedNonQObject
name|customNonQObjectNamespaced
parameter_list|()
specifier|const
block|{
return|return
name|SomeNamespace
operator|::
name|NamespacedNonQObject
argument_list|()
return|;
block|}
public|public
name|slots
public|:
name|void
name|objectSlot
parameter_list|(
name|QObject
modifier|*
parameter_list|)
block|{}
name|void
name|customObjectSlot
parameter_list|(
name|CustomQObject2
modifier|*
parameter_list|)
block|{}
name|void
name|sharedPointerSlot
parameter_list|(
name|QSharedPointer
argument_list|<
name|CustomQObject2
argument_list|>
parameter_list|)
block|{}
name|void
name|weakPointerSlot
parameter_list|(
name|QWeakPointer
argument_list|<
name|CustomQObject2
argument_list|>
parameter_list|)
block|{}
name|void
name|trackingPointerSlot
parameter_list|(
name|QPointer
argument_list|<
name|CustomQObject2
argument_list|>
parameter_list|)
block|{}
name|void
name|listIntSlot
parameter_list|(
name|QList
argument_list|<
name|int
argument_list|>
parameter_list|)
block|{}
name|void
name|vectorVariantSlot
parameter_list|(
name|QVector
argument_list|<
name|QVariant
argument_list|>
parameter_list|)
block|{}
name|void
name|listCustomObjectSlot
parameter_list|(
name|QList
argument_list|<
name|CustomQObject2
modifier|*
argument_list|>
parameter_list|)
block|{}
name|void
name|vectorListIntSlot
parameter_list|(
name|QVector
argument_list|<
name|QList
argument_list|<
name|int
argument_list|>
argument_list|>
parameter_list|)
block|{}
name|void
name|vectorListCustomObjectSlot
parameter_list|(
name|QVector
argument_list|<
name|QList
argument_list|<
name|CustomQObject2
modifier|*
argument_list|>
argument_list|>
parameter_list|)
block|{}
name|void
name|enumSlot
parameter_list|(
name|CustomQObject2
operator|::
name|Number
parameter_list|)
block|{}
name|void
name|typedefSlot
parameter_list|(
name|CustomQObject2Star
parameter_list|)
block|{}
name|void
name|namespacedQObjectSlot
parameter_list|(
name|SomeNamespace2
operator|::
name|NamespacedQObject2
modifier|*
parameter_list|)
block|{}
name|void
name|namespacedNonQObjectSlot
parameter_list|(
name|SomeNamespace2
operator|::
name|NamespacedNonQObject2
parameter_list|)
block|{}
name|void
name|bu1
parameter_list|(
name|int
parameter_list|,
name|CustomObject3
parameter_list|)
block|{}
name|void
name|bu2
parameter_list|(
name|CustomObject4
parameter_list|,
name|int
parameter_list|)
block|{}
name|void
name|bu3
parameter_list|(
name|CustomObject5
parameter_list|,
name|CustomObject6
parameter_list|)
block|{}
name|void
name|bu4
parameter_list|(
name|CustomObject7
parameter_list|,
name|int
parameter_list|,
name|CustomObject8
parameter_list|)
block|{}
name|void
name|bu5
parameter_list|(
name|int
parameter_list|,
name|CustomObject9
parameter_list|,
name|CustomObject10
parameter_list|)
block|{}
name|void
name|bu6
parameter_list|(
name|int
parameter_list|,
name|CustomObject11
parameter_list|,
name|int
parameter_list|)
block|{}
comment|// these can't be registered, but they should at least compile
name|void
name|ref1
parameter_list|(
name|int
modifier|&
parameter_list|)
block|{}
name|void
name|ref2
parameter_list|(
name|QList
argument_list|<
name|int
argument_list|>
modifier|&
parameter_list|)
block|{}
name|void
name|ref3
parameter_list|(
name|CustomQObject2
modifier|&
parameter_list|)
block|{}
name|void
name|ref4
parameter_list|(
name|QSharedPointer
argument_list|<
name|CustomQObject2
argument_list|>
modifier|&
parameter_list|)
block|{}
signals|signals:
name|void
name|someSignal
parameter_list|(
name|CustomObject12
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_function
name|void
name|tst_Moc
operator|::
name|autoPropertyMetaTypeRegistration
parameter_list|()
block|{
name|AutoRegistrationObject
name|aro
decl_stmt|;
specifier|static
specifier|const
name|int
name|numPropertiesUnderTest
init|=
literal|15
decl_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
name|propertyMetaTypeIds
decl_stmt|;
name|propertyMetaTypeIds
operator|.
name|reserve
argument_list|(
name|numPropertiesUnderTest
argument_list|)
expr_stmt|;
specifier|const
name|QMetaObject
modifier|*
name|metaObject
init|=
name|aro
operator|.
name|metaObject
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|metaObject
operator|->
name|propertyCount
argument_list|()
argument_list|,
name|numPropertiesUnderTest
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|metaObject
operator|->
name|propertyCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QMetaProperty
name|prop
init|=
name|metaObject
operator|->
name|property
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|propertyMetaTypeIds
operator|.
name|append
argument_list|(
name|prop
operator|.
name|userType
argument_list|()
argument_list|)
expr_stmt|;
name|QVariant
name|var
init|=
name|prop
operator|.
name|read
argument_list|(
operator|&
name|aro
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|var
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Verify that QMetaProperty::userType gave us what we expected.
name|QVector
argument_list|<
name|int
argument_list|>
name|expectedMetaTypeIds
init|=
name|QVector
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
name|QMetaType
operator|::
name|QString
comment|// QObject::userType
operator|<<
name|QMetaType
operator|::
name|QObjectStar
comment|// AutoRegistrationObject::object
operator|<<
name|qMetaTypeId
argument_list|<
name|CustomQObject
operator|*
argument_list|>
argument_list|()
comment|// etc.
operator|<<
name|qMetaTypeId
argument_list|<
name|QSharedPointer
argument_list|<
name|CustomQObject
argument_list|>
argument_list|>
argument_list|()
operator|<<
name|qMetaTypeId
argument_list|<
name|QWeakPointer
argument_list|<
name|CustomQObject
argument_list|>
argument_list|>
argument_list|()
operator|<<
name|qMetaTypeId
argument_list|<
name|QPointer
argument_list|<
name|CustomQObject
argument_list|>
argument_list|>
argument_list|()
operator|<<
name|qMetaTypeId
argument_list|<
name|QList
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|()
operator|<<
name|qMetaTypeId
argument_list|<
name|QVector
argument_list|<
name|QVariant
argument_list|>
argument_list|>
argument_list|()
operator|<<
name|qMetaTypeId
argument_list|<
name|QList
argument_list|<
name|CustomQObject
operator|*
argument_list|>
argument_list|>
argument_list|()
operator|<<
name|qMetaTypeId
argument_list|<
name|QVector
argument_list|<
name|QList
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|>
argument_list|()
operator|<<
name|qMetaTypeId
argument_list|<
name|QVector
argument_list|<
name|QList
argument_list|<
name|CustomQObject
operator|*
argument_list|>
argument_list|>
argument_list|>
argument_list|()
operator|<<
name|qMetaTypeId
argument_list|<
name|CustomQObject
operator|::
name|Number
argument_list|>
argument_list|()
operator|<<
name|qMetaTypeId
argument_list|<
name|CustomQObjectStar
argument_list|>
argument_list|()
operator|<<
name|qMetaTypeId
argument_list|<
name|SomeNamespace
operator|::
name|NamespacedQObject
operator|*
argument_list|>
argument_list|()
operator|<<
name|qMetaTypeId
argument_list|<
name|SomeNamespace
operator|::
name|NamespacedNonQObject
argument_list|>
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|propertyMetaTypeIds
argument_list|,
name|expectedMetaTypeIds
argument_list|)
expr_stmt|;
block|}
end_function
begin_struct
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
struct|struct
name|DefaultConstructor
block|{
specifier|static
specifier|inline
name|T
name|construct
parameter_list|()
block|{
return|return
name|T
argument_list|()
return|;
block|}
block|}
struct|;
end_struct
begin_struct
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
struct|struct
name|DefaultConstructor
argument_list|<
name|T
modifier|*
argument_list|>
block|{
specifier|static
specifier|inline
name|T
modifier|*
name|construct
parameter_list|()
block|{
return|return
literal|0
return|;
block|}
block|}
struct|;
end_struct
begin_function
name|void
name|tst_Moc
operator|::
name|autoMethodArgumentMetaTypeRegistration
parameter_list|()
block|{
name|AutoRegistrationObject
name|aro
decl_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
name|methodArgMetaTypeIds
decl_stmt|;
specifier|const
name|QMetaObject
modifier|*
name|metaObject
init|=
name|aro
operator|.
name|metaObject
argument_list|()
decl_stmt|;
name|int
name|i
init|=
name|metaObject
operator|->
name|methodOffset
argument_list|()
decl_stmt|;
comment|// Start after QObject built-in slots;
while|while
condition|(
name|i
operator|<
name|metaObject
operator|->
name|methodCount
argument_list|()
condition|)
block|{
comment|// Skip over signals so we start at the first slot.
specifier|const
name|QMetaMethod
name|method
init|=
name|metaObject
operator|->
name|method
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|method
operator|.
name|methodType
argument_list|()
operator|==
name|QMetaMethod
operator|::
name|Signal
condition|)
operator|++
name|i
expr_stmt|;
else|else
break|break;
block|}
DECL|macro|TYPE_LOOP
define|#
directive|define
name|TYPE_LOOP
parameter_list|(
name|TYPE
parameter_list|)
define|\
value|{ \         const QMetaMethod method = metaObject->method(i); \         for (int j = 0; j< method.parameterCount(); ++j) \             methodArgMetaTypeIds.append(method.parameterType(j)); \         QVERIFY(method.invoke(&aro, Q_ARG(TYPE, DefaultConstructor<TYPE>::construct()))); \         ++i; \     }
DECL|macro|FOR_EACH_SLOT_ARG_TYPE
define|#
directive|define
name|FOR_EACH_SLOT_ARG_TYPE
parameter_list|(
name|F
parameter_list|)
define|\
value|F(QObject*) \     F(CustomQObject2*) \     F(QSharedPointer<CustomQObject2>) \     F(QWeakPointer<CustomQObject2>) \     F(QPointer<CustomQObject2>) \     F(QList<int>) \     F(QVector<QVariant>) \     F(QList<CustomQObject2*>) \     F(QVector<QList<int>>) \     F(QVector<QList<CustomQObject2*>>) \     F(CustomQObject2::Number) \     F(CustomQObject2Star) \     F(SomeNamespace2::NamespacedQObject2*) \     F(SomeNamespace2::NamespacedNonQObject2)
comment|// Note: mulit-arg slots are tested below.
name|FOR_EACH_SLOT_ARG_TYPE
argument_list|(
argument|TYPE_LOOP
argument_list|)
DECL|macro|TYPE_LOOP
undef|#
directive|undef
name|TYPE_LOOP
DECL|macro|FOR_EACH_SLOT_ARG_TYPE
undef|#
directive|undef
name|FOR_EACH_SLOT_ARG_TYPE
name|QVector
argument_list|<
name|int
argument_list|>
name|expectedMetaTypeIds
init|=
name|QVector
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
name|QMetaType
operator|::
name|QObjectStar
operator|<<
name|qMetaTypeId
argument_list|<
name|CustomQObject2
operator|*
argument_list|>
argument_list|()
operator|<<
name|qMetaTypeId
argument_list|<
name|QSharedPointer
argument_list|<
name|CustomQObject2
argument_list|>
argument_list|>
argument_list|()
operator|<<
name|qMetaTypeId
argument_list|<
name|QWeakPointer
argument_list|<
name|CustomQObject2
argument_list|>
argument_list|>
argument_list|()
operator|<<
name|qMetaTypeId
argument_list|<
name|QPointer
argument_list|<
name|CustomQObject2
argument_list|>
argument_list|>
argument_list|()
operator|<<
name|qMetaTypeId
argument_list|<
name|QList
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|()
operator|<<
name|qMetaTypeId
argument_list|<
name|QVector
argument_list|<
name|QVariant
argument_list|>
argument_list|>
argument_list|()
operator|<<
name|qMetaTypeId
argument_list|<
name|QList
argument_list|<
name|CustomQObject2
operator|*
argument_list|>
argument_list|>
argument_list|()
operator|<<
name|qMetaTypeId
argument_list|<
name|QVector
argument_list|<
name|QList
argument_list|<
name|int
argument_list|>
argument_list|>
argument_list|>
argument_list|()
operator|<<
name|qMetaTypeId
argument_list|<
name|QVector
argument_list|<
name|QList
argument_list|<
name|CustomQObject2
operator|*
argument_list|>
argument_list|>
argument_list|>
argument_list|()
operator|<<
name|qMetaTypeId
argument_list|<
name|CustomQObject2
operator|::
name|Number
argument_list|>
argument_list|()
operator|<<
name|qMetaTypeId
argument_list|<
name|CustomQObject2Star
argument_list|>
argument_list|()
operator|<<
name|qMetaTypeId
argument_list|<
name|SomeNamespace2
operator|::
name|NamespacedQObject2
operator|*
argument_list|>
argument_list|()
operator|<<
name|qMetaTypeId
argument_list|<
name|SomeNamespace2
operator|::
name|NamespacedNonQObject2
argument_list|>
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|methodArgMetaTypeIds
argument_list|,
name|expectedMetaTypeIds
argument_list|)
expr_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
name|methodMultiArgMetaTypeIds
decl_stmt|;
block|{
specifier|const
name|QMetaMethod
name|method
init|=
name|metaObject
operator|->
name|method
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|method
operator|.
name|name
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"bu1"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|method
operator|.
name|parameterCount
argument_list|()
condition|;
operator|++
name|j
control|)
name|methodMultiArgMetaTypeIds
operator|.
name|append
argument_list|(
name|method
operator|.
name|parameterType
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|method
operator|.
name|invoke
argument_list|(
operator|&
name|aro
argument_list|,
name|Q_ARG
argument_list|(
name|int
argument_list|,
literal|42
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|CustomObject3
argument_list|,
name|CustomObject3
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
block|{
specifier|const
name|QMetaMethod
name|method
init|=
name|metaObject
operator|->
name|method
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|method
operator|.
name|name
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"bu2"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|method
operator|.
name|parameterCount
argument_list|()
condition|;
operator|++
name|j
control|)
name|methodMultiArgMetaTypeIds
operator|.
name|append
argument_list|(
name|method
operator|.
name|parameterType
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|method
operator|.
name|invoke
argument_list|(
operator|&
name|aro
argument_list|,
name|Q_ARG
argument_list|(
name|CustomObject4
argument_list|,
name|CustomObject4
argument_list|()
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|int
argument_list|,
literal|42
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
block|{
specifier|const
name|QMetaMethod
name|method
init|=
name|metaObject
operator|->
name|method
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|method
operator|.
name|name
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"bu3"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|method
operator|.
name|parameterCount
argument_list|()
condition|;
operator|++
name|j
control|)
name|methodMultiArgMetaTypeIds
operator|.
name|append
argument_list|(
name|method
operator|.
name|parameterType
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|method
operator|.
name|invoke
argument_list|(
operator|&
name|aro
argument_list|,
name|Q_ARG
argument_list|(
name|CustomObject5
argument_list|,
name|CustomObject5
argument_list|()
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|CustomObject6
argument_list|,
name|CustomObject6
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
block|{
specifier|const
name|QMetaMethod
name|method
init|=
name|metaObject
operator|->
name|method
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|method
operator|.
name|name
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"bu4"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|method
operator|.
name|parameterCount
argument_list|()
condition|;
operator|++
name|j
control|)
name|methodMultiArgMetaTypeIds
operator|.
name|append
argument_list|(
name|method
operator|.
name|parameterType
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|method
operator|.
name|invoke
argument_list|(
operator|&
name|aro
argument_list|,
name|Q_ARG
argument_list|(
name|CustomObject7
argument_list|,
name|CustomObject7
argument_list|()
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|int
argument_list|,
literal|42
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|CustomObject8
argument_list|,
name|CustomObject8
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
block|{
specifier|const
name|QMetaMethod
name|method
init|=
name|metaObject
operator|->
name|method
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|method
operator|.
name|name
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"bu5"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|method
operator|.
name|parameterCount
argument_list|()
condition|;
operator|++
name|j
control|)
name|methodMultiArgMetaTypeIds
operator|.
name|append
argument_list|(
name|method
operator|.
name|parameterType
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|method
operator|.
name|invoke
argument_list|(
operator|&
name|aro
argument_list|,
name|Q_ARG
argument_list|(
name|int
argument_list|,
literal|42
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|CustomObject9
argument_list|,
name|CustomObject9
argument_list|()
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|CustomObject10
argument_list|,
name|CustomObject10
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
block|{
specifier|const
name|QMetaMethod
name|method
init|=
name|metaObject
operator|->
name|method
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|method
operator|.
name|name
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"bu6"
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|method
operator|.
name|parameterCount
argument_list|()
condition|;
operator|++
name|j
control|)
name|methodMultiArgMetaTypeIds
operator|.
name|append
argument_list|(
name|method
operator|.
name|parameterType
argument_list|(
name|j
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|method
operator|.
name|invoke
argument_list|(
operator|&
name|aro
argument_list|,
name|Q_ARG
argument_list|(
name|int
argument_list|,
literal|42
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|CustomObject11
argument_list|,
name|CustomObject11
argument_list|()
argument_list|)
argument_list|,
name|Q_ARG
argument_list|(
name|int
argument_list|,
literal|42
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
name|QVector
argument_list|<
name|int
argument_list|>
name|expectedMultiMetaTypeIds
init|=
name|QVector
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
name|QMetaType
operator|::
name|Int
operator|<<
name|qMetaTypeId
argument_list|<
name|CustomObject3
argument_list|>
argument_list|()
operator|<<
name|qMetaTypeId
argument_list|<
name|CustomObject4
argument_list|>
argument_list|()
operator|<<
name|QMetaType
operator|::
name|Int
operator|<<
name|qMetaTypeId
argument_list|<
name|CustomObject5
argument_list|>
argument_list|()
operator|<<
name|qMetaTypeId
argument_list|<
name|CustomObject6
argument_list|>
argument_list|()
operator|<<
name|qMetaTypeId
argument_list|<
name|CustomObject7
argument_list|>
argument_list|()
operator|<<
name|QMetaType
operator|::
name|Int
operator|<<
name|qMetaTypeId
argument_list|<
name|CustomObject8
argument_list|>
argument_list|()
operator|<<
name|QMetaType
operator|::
name|Int
operator|<<
name|qMetaTypeId
argument_list|<
name|CustomObject9
argument_list|>
argument_list|()
operator|<<
name|qMetaTypeId
argument_list|<
name|CustomObject10
argument_list|>
argument_list|()
operator|<<
name|QMetaType
operator|::
name|Int
operator|<<
name|qMetaTypeId
argument_list|<
name|CustomObject11
argument_list|>
argument_list|()
operator|<<
name|QMetaType
operator|::
name|Int
decl_stmt|;
name|QCOMPARE
argument_list|(
name|methodMultiArgMetaTypeIds
argument_list|,
name|expectedMultiMetaTypeIds
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|autoSignalSpyMetaTypeRegistration
parameter_list|()
block|{
name|AutoRegistrationObject
name|aro
decl_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
name|methodArgMetaTypeIds
decl_stmt|;
specifier|const
name|QMetaObject
modifier|*
name|metaObject
init|=
name|aro
operator|.
name|metaObject
argument_list|()
decl_stmt|;
name|int
name|i
init|=
name|metaObject
operator|->
name|indexOfSignal
argument_list|(
name|QMetaObject
operator|::
name|normalizedSignature
argument_list|(
literal|"someSignal(CustomObject12)"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QMetaType
operator|::
name|type
argument_list|(
literal|"CustomObject12"
argument_list|)
argument_list|,
operator|(
name|int
operator|)
name|QMetaType
operator|::
name|UnknownType
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
operator|&
name|aro
argument_list|,
name|SIGNAL
argument_list|(
name|someSignal
argument_list|(
name|CustomObject12
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|QMetaType
operator|::
name|type
argument_list|(
literal|"CustomObject12"
argument_list|)
operator|!=
name|QMetaType
operator|::
name|UnknownType
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QMetaType
operator|::
name|type
argument_list|(
literal|"CustomObject12"
argument_list|)
argument_list|,
name|qMetaTypeId
argument_list|<
name|CustomObject12
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|parseDefines
parameter_list|()
block|{
specifier|const
name|QMetaObject
modifier|*
name|mo
init|=
operator|&
name|PD_NAMESPACE
operator|::
name|PD_CLASSNAME
operator|::
name|staticMetaObject
decl_stmt|;
name|QCOMPARE
argument_list|(
name|mo
operator|->
name|className
argument_list|()
argument_list|,
name|PD_SCOPED_STRING
argument_list|(
name|PD_NAMESPACE
argument_list|,
name|PD_CLASSNAME
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mo
operator|->
name|indexOfSlot
argument_list|(
literal|"voidFunction()"
argument_list|)
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|int
name|index
init|=
name|mo
operator|->
name|indexOfSlot
argument_list|(
literal|"stringMethod()"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|index
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mo
operator|->
name|method
argument_list|(
name|index
argument_list|)
operator|.
name|returnType
argument_list|()
operator|==
name|QMetaType
operator|::
name|QString
argument_list|)
expr_stmt|;
name|index
operator|=
name|mo
operator|->
name|indexOfSlot
argument_list|(
literal|"combined1()"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|index
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|index
operator|=
name|mo
operator|->
name|indexOfSlot
argument_list|(
literal|"combined2()"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|index
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|index
operator|=
name|mo
operator|->
name|indexOfSlot
argument_list|(
literal|"combined3()"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|index
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|index
operator|=
name|mo
operator|->
name|indexOfSlot
argument_list|(
literal|"combined4(int,int)"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|index
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|index
operator|=
name|mo
operator|->
name|indexOfSlot
argument_list|(
literal|"combined5()"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|index
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|index
operator|=
name|mo
operator|->
name|indexOfSlot
argument_list|(
literal|"combined6()"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|index
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|index
operator|=
name|mo
operator|->
name|indexOfSlot
argument_list|(
literal|"vararg1()"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|index
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|index
operator|=
name|mo
operator|->
name|indexOfSlot
argument_list|(
literal|"vararg2(int)"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|index
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|index
operator|=
name|mo
operator|->
name|indexOfSlot
argument_list|(
literal|"vararg3(int,int)"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|index
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|index
operator|=
name|mo
operator|->
name|indexOfSlot
argument_list|(
literal|"vararg4()"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|index
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|index
operator|=
name|mo
operator|->
name|indexOfSlot
argument_list|(
literal|"vararg5(int)"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|index
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|index
operator|=
name|mo
operator|->
name|indexOfSlot
argument_list|(
literal|"vararg6(int,int)"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|index
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|index
operator|=
name|mo
operator|->
name|indexOfSlot
argument_list|(
literal|"INNERFUNCTION(int)"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|index
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|index
operator|=
name|mo
operator|->
name|indexOfSlot
argument_list|(
literal|"inner_expanded(int)"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|index
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|index
operator|=
name|mo
operator|->
name|indexOfSlot
argument_list|(
literal|"expanded_method(int)"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|index
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|index
operator|=
name|mo
operator|->
name|indexOfSlot
argument_list|(
literal|"conditionSlot()"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|index
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|int
name|count
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|mo
operator|->
name|classInfoCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QMetaClassInfo
name|mci
init|=
name|mo
operator|->
name|classInfo
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|qstrcmp
argument_list|(
name|mci
operator|.
name|name
argument_list|()
argument_list|,
literal|"TestString"
argument_list|)
condition|)
block|{
operator|++
name|count
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|qstrcmp
argument_list|(
name|mci
operator|.
name|value
argument_list|()
argument_list|,
literal|"PD_CLASSNAME"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|qstrcmp
argument_list|(
name|mci
operator|.
name|name
argument_list|()
argument_list|,
literal|"TestString2"
argument_list|)
condition|)
block|{
operator|++
name|count
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|qstrcmp
argument_list|(
name|mci
operator|.
name|value
argument_list|()
argument_list|,
literal|"ParseDefine"
argument_list|)
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|qstrcmp
argument_list|(
name|mci
operator|.
name|name
argument_list|()
argument_list|,
literal|"TestString3"
argument_list|)
condition|)
block|{
operator|++
name|count
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|qstrcmp
argument_list|(
name|mci
operator|.
name|value
argument_list|()
argument_list|,
literal|"TestValue"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|QVERIFY
argument_list|(
name|count
operator|==
literal|3
argument_list|)
expr_stmt|;
name|index
operator|=
name|mo
operator|->
name|indexOfSlot
argument_list|(
literal|"PD_DEFINE_ITSELF_SUFFIX(int)"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|index
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|preprocessorOnly
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|MOC_CROSS_COMPILED
name|QSKIP
argument_list|(
literal|"Not tested when cross-compiled"
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_LINUX
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_PROCESS
argument_list|)
name|QProcess
name|proc
decl_stmt|;
name|proc
operator|.
name|start
argument_list|(
literal|"moc"
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"-E"
operator|<<
name|m_sourceDirectory
operator|+
name|QStringLiteral
argument_list|(
literal|"/pp-dollar-signs.h"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proc
operator|.
name|waitForFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proc
operator|.
name|exitCode
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QByteArray
name|mocOut
init|=
name|proc
operator|.
name|readAllStandardOutput
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|mocOut
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proc
operator|.
name|readAllStandardError
argument_list|()
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|mocOut
operator|.
name|contains
argument_list|(
literal|"$$ = parser->createFoo()"
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|QSKIP
argument_list|(
literal|"Only tested on linux/gcc"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
name|void
name|tst_Moc
operator|::
name|unterminatedFunctionMacro
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|MOC_CROSS_COMPILED
name|QSKIP
argument_list|(
literal|"Not tested when cross-compiled"
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_LINUX
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_PROCESS
argument_list|)
name|QProcess
name|proc
decl_stmt|;
name|proc
operator|.
name|start
argument_list|(
literal|"moc"
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"-E"
operator|<<
name|m_sourceDirectory
operator|+
name|QStringLiteral
argument_list|(
literal|"/unterminated-function-macro.h"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proc
operator|.
name|waitForFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proc
operator|.
name|exitCode
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proc
operator|.
name|readAllStandardOutput
argument_list|()
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|QByteArray
name|errorOutput
init|=
name|proc
operator|.
name|readAllStandardError
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|errorOutput
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|errorOutput
operator|.
name|contains
argument_list|(
literal|"missing ')' in macro usage"
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|QSKIP
argument_list|(
literal|"Only tested on linux/gcc"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_Moc
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_moc.moc"
end_include
end_unit
