begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Intel Corporation. ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtCore/QProcess>
end_include
begin_include
include|#
directive|include
file|<QtCore/QRegularExpression>
end_include
begin_comment
comment|// We just need the DBUS_TYPE_* constants, so use our own copy
end_comment
begin_include
include|#
directive|include
file|"../../../../src/dbus/dbus_minimal_p.h"
end_include
begin_class
DECL|class|tst_qdbusxml2cpp
class|class
name|tst_qdbusxml2cpp
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
DECL|enumerator|Interface
DECL|enumerator|Adaptor
name|enum
type|{
name|Interface
decl_stmt|,
name|Adaptor
block|}
class|;
end_class
begin_private
private|private
name|slots
private|:
name|void
name|initTestCase_data
parameter_list|()
function_decl|;
name|void
name|process_data
parameter_list|()
function_decl|;
name|void
name|process
parameter_list|()
function_decl|;
end_private
begin_struct
DECL|struct|BasicTypeList
unit|};
struct|struct
name|BasicTypeList
block|{
DECL|member|dbusType
name|char
name|dbusType
index|[
literal|3
index|]
decl_stmt|;
DECL|member|cppType
name|char
name|cppType
index|[
literal|24
index|]
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
DECL|variable|basicTypeList
specifier|static
specifier|const
name|BasicTypeList
name|basicTypeList
index|[]
init|=
block|{
block|{
name|DBUS_TYPE_BOOLEAN_AS_STRING
block|,
literal|"bool"
block|}
block|,
block|{
name|DBUS_TYPE_BYTE_AS_STRING
block|,
literal|"uchar"
block|}
block|,
block|{
name|DBUS_TYPE_INT16_AS_STRING
block|,
literal|"short"
block|}
block|,
block|{
name|DBUS_TYPE_UINT16_AS_STRING
block|,
literal|"ushort"
block|}
block|,
block|{
name|DBUS_TYPE_INT32_AS_STRING
block|,
literal|"int"
block|}
block|,
block|{
name|DBUS_TYPE_UINT32_AS_STRING
block|,
literal|"uint"
block|}
block|,
block|{
name|DBUS_TYPE_INT64_AS_STRING
block|,
literal|"qlonglong"
block|}
block|,
block|{
name|DBUS_TYPE_UINT64_AS_STRING
block|,
literal|"qulonglong"
block|}
block|,
block|{
name|DBUS_TYPE_DOUBLE_AS_STRING
block|,
literal|"double"
block|}
block|,
block|{
name|DBUS_TYPE_STRING_AS_STRING
block|,
literal|"QString"
block|}
block|,
block|{
name|DBUS_TYPE_OBJECT_PATH_AS_STRING
block|,
literal|"QDBusObjectPath"
block|}
block|,
block|{
name|DBUS_TYPE_SIGNATURE_AS_STRING
block|,
literal|"QDBusSignature"
block|}
block|,
ifdef|#
directive|ifdef
name|DBUS_TYPE_UNIX_FD_AS_STRING
block|{
name|DBUS_TYPE_UNIX_FD_AS_STRING
block|,
literal|"QDBusUnixFileDescriptor"
block|}
block|,
endif|#
directive|endif
block|{
name|DBUS_TYPE_VARIANT_AS_STRING
block|,
literal|"QDBusVariant"
block|}
block|,
block|{
name|DBUS_TYPE_ARRAY_AS_STRING
name|DBUS_TYPE_BYTE_AS_STRING
block|,
literal|"QByteArray"
block|}
block|,
block|{
name|DBUS_TYPE_ARRAY_AS_STRING
name|DBUS_TYPE_STRING_AS_STRING
block|,
literal|"QStringList"
block|}
block|,
block|{
name|DBUS_TYPE_ARRAY_AS_STRING
name|DBUS_TYPE_VARIANT_AS_STRING
block|,
literal|"QVariantList"
block|}
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|basicTypeCount
specifier|static
specifier|const
name|int
name|basicTypeCount
init|=
sizeof|sizeof
argument_list|(
name|basicTypeList
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|basicTypeList
index|[
literal|0
index|]
argument_list|)
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|stripHeader
specifier|static
name|QString
name|stripHeader
parameter_list|(
name|QString
name|output
parameter_list|)
block|{
specifier|static
name|QRegularExpression
name|header
argument_list|(
literal|"^.*?(?=\\Rclass)"
argument_list|,
name|QRegularExpression
operator|::
name|DotMatchesEverythingOption
argument_list|)
decl_stmt|;
return|return
name|output
operator|.
name|remove
argument_list|(
name|header
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|initTestCase_data
name|void
name|tst_qdbusxml2cpp
operator|::
name|initTestCase_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"outputMode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"commandLineArg"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"interface"
argument_list|)
operator|<<
name|int
argument_list|(
name|Interface
argument_list|)
operator|<<
literal|"-p"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"adaptor"
argument_list|)
operator|<<
name|int
argument_list|(
name|Adaptor
argument_list|)
operator|<<
literal|"-a"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|process_data
name|void
name|tst_qdbusxml2cpp
operator|::
name|process_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"xmlSnippet"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QRegularExpression
argument_list|>
argument_list|(
literal|"interfaceSearch"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QRegularExpression
argument_list|>
argument_list|(
literal|"adaptorSearch"
argument_list|)
expr_stmt|;
comment|// -- class info --
name|QTest
operator|::
name|newRow
argument_list|(
literal|"classinfo"
argument_list|)
operator|<<
literal|""
operator|<<
name|QRegularExpression
argument_list|(
literal|"staticInterfaceName\\(\\)\\s+"
literal|"{ return \"local\\.name\\.is\\.not\\.important\"\\; }"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"Q_CLASSINFO\\(\"D-Bus Interface\", \"local\\.name\\.is\\.not\\.important\"\\)"
argument_list|)
expr_stmt|;
comment|// -- properties --
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|basicTypeCount
condition|;
operator|++
name|i
control|)
block|{
name|QRegularExpression
name|rx
argument_list|(
name|QString
argument_list|(
literal|"\\bQ_PROPERTY\\(%1 PropertyIsPresent "
literal|"READ propertyIsPresent WRITE setPropertyIsPresent\\b"
argument_list|)
operator|.
name|arg
argument_list|(
name|basicTypeList
index|[
name|i
index|]
operator|.
name|cppType
argument_list|)
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QByteArray
argument_list|(
literal|"property-"
argument_list|)
operator|+
name|basicTypeList
index|[
name|i
index|]
operator|.
name|dbusType
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<property type=\"%1\" name=\"PropertyIsPresent\" access=\"readwrite\" />"
argument_list|)
operator|.
name|arg
argument_list|(
name|basicTypeList
index|[
name|i
index|]
operator|.
name|dbusType
argument_list|)
operator|<<
name|rx
operator|<<
name|rx
expr_stmt|;
block|}
name|QTest
operator|::
name|newRow
argument_list|(
literal|"property-readonly-multi"
argument_list|)
operator|<<
literal|"<property type=\"i\" name=\"Value\" access=\"read\"></property>"
operator|<<
name|QRegularExpression
argument_list|(
literal|"\\bQ_PROPERTY\\(int Value READ value(?! WRITE)"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"\\bQ_PROPERTY\\(int Value READ value(?! WRITE)"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"property-readonly"
argument_list|)
operator|<<
literal|"<property type=\"i\" name=\"Value\" access=\"read\" />"
operator|<<
name|QRegularExpression
argument_list|(
literal|"\\bQ_PROPERTY\\(int Value READ value(?! WRITE)"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"\\bQ_PROPERTY\\(int Value READ value(?! WRITE)"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"property-writeonly"
argument_list|)
operator|<<
literal|"<property type=\"i\" name=\"Value\" access=\"write\" />"
operator|<<
name|QRegularExpression
argument_list|(
literal|"\\bQ_PROPERTY\\(int Value WRITE setValue\\b"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"\\bQ_PROPERTY\\(int Value WRITE setValue\\b"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"property-getter-setter"
argument_list|)
operator|<<
literal|"<property type=\"b\" name=\"Enabled\" access=\"readwrite\">"
literal|"<annotation name=\"org.qtproject.QtDBus.PropertyGetter\" value=\"wasEnabled\" />"
literal|"<annotation name=\"org.qtproject.QtDBus.PropertySetter\" value=\"setEnabledFlag\" />"
literal|"</property>"
operator|<<
name|QRegularExpression
argument_list|(
literal|"\\bQ_PROPERTY\\(bool Enabled READ wasEnabled WRITE setEnabledFlag\\b.*"
literal|"\\bbool wasEnabled\\(\\) const.*"
comment|// no semi-colon
literal|"\\bvoid setEnabledFlag\\(bool"
argument_list|,
name|QRegularExpression
operator|::
name|DotMatchesEverythingOption
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"\\bQ_PROPERTY\\(bool Enabled READ wasEnabled WRITE setEnabledFlag\\b.*"
literal|"\\bbool wasEnabled\\(\\) const;.*"
comment|// has semi-colon
literal|"\\bvoid setEnabledFlag\\(bool"
argument_list|,
name|QRegularExpression
operator|::
name|DotMatchesEverythingOption
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"property-complex"
argument_list|)
operator|<<
literal|"<property type=\"(ii)\" name=\"Position\" access=\"readwrite\">"
literal|"<annotation name=\"org.qtproject.QtDBus.QtTypeName\" value=\"Point\"/>"
literal|"</property>"
operator|<<
name|QRegularExpression
argument_list|(
literal|"\\bQ_PROPERTY\\(Point Position READ position WRITE setPosition\\b"
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"\\bQ_PROPERTY\\(Point Position READ position WRITE setPosition\\b"
argument_list|)
expr_stmt|;
comment|// -- methods --
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|basicTypeCount
condition|;
operator|++
name|i
control|)
block|{
name|QTest
operator|::
name|newRow
argument_list|(
name|QByteArray
argument_list|(
literal|"method-"
argument_list|)
operator|+
name|basicTypeList
index|[
name|i
index|]
operator|.
name|dbusType
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<method name=\"Method\">"
literal|"<arg type=\"%1\" direction=\"out\"/>"
literal|"<arg type=\"%1\" direction=\"in\"/>"
literal|"</method>"
argument_list|)
operator|.
name|arg
argument_list|(
name|basicTypeList
index|[
name|i
index|]
operator|.
name|dbusType
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
name|QString
argument_list|(
literal|"Q_SLOTS:.*\\bQDBusPendingReply<%1> Method\\((const )?%1 "
argument_list|)
operator|.
name|arg
argument_list|(
name|basicTypeList
index|[
name|i
index|]
operator|.
name|cppType
argument_list|)
argument_list|,
name|QRegularExpression
operator|::
name|DotMatchesEverythingOption
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
name|QString
argument_list|(
literal|"Q_SLOTS:.*\\b%1 Method\\((const )?%1 "
argument_list|)
operator|.
name|arg
argument_list|(
name|basicTypeList
index|[
name|i
index|]
operator|.
name|cppType
argument_list|)
argument_list|,
name|QRegularExpression
operator|::
name|DotMatchesEverythingOption
argument_list|)
expr_stmt|;
block|}
name|QTest
operator|::
name|newRow
argument_list|(
literal|"method-name"
argument_list|)
operator|<<
literal|"<method name=\"Method\">"
literal|"<arg type=\"s\" direction=\"in\"/>"
literal|"<annotation name=\"org.qtproject.QtDBus.MethodName\" value=\"MethodRenamed\" />"
literal|"</method>"
operator|<<
name|QRegularExpression
argument_list|(
literal|"Q_SLOTS:.*QDBusPendingReply<> MethodRenamed\\(const QString&\\w*"
argument_list|,
name|QRegularExpression
operator|::
name|DotMatchesEverythingOption
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"Q_SLOTS:.*void MethodRenamed\\(const QString&\\w*"
argument_list|,
name|QRegularExpression
operator|::
name|DotMatchesEverythingOption
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"method-complex"
argument_list|)
operator|<<
literal|"<method name=\"Method\">"
literal|"<arg type=\"(dd)\" direction=\"in\"/>"
literal|"<arg type=\"(ii)\" direction=\"out\"/>"
literal|"<annotation name=\"org.qtproject.QtDBus.QtTypeName.Out0\" value=\"Point\"/>"
literal|"<annotation name=\"org.qtproject.QtDBus.QtTypeName.In0\" value=\"PointF\"/>"
literal|"</method>"
operator|<<
name|QRegularExpression
argument_list|(
literal|"Q_SLOTS:.*\\bQDBusPendingReply<Point> Method\\(PointF "
argument_list|,
name|QRegularExpression
operator|::
name|DotMatchesEverythingOption
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"Q_SLOTS:.*\\bPoint Method\\(PointF "
argument_list|,
name|QRegularExpression
operator|::
name|DotMatchesEverythingOption
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"method-ss"
argument_list|)
operator|<<
literal|"<method name=\"Method\">"
literal|"<arg type=\"s\" direction=\"in\"/>"
literal|"<arg type=\"s\" direction=\"in\"/>"
literal|"<arg type=\"s\" direction=\"out\"/>"
literal|"<arg type=\"s\" direction=\"out\"/>"
literal|"</method>"
operator|<<
name|QRegularExpression
argument_list|(
literal|"Q_SLOTS:.*QDBusPendingReply<QString, QString> Method\\(const QString&\\w*, const QString&"
argument_list|,
name|QRegularExpression
operator|::
name|DotMatchesEverythingOption
argument_list|)
operator|<<
name|QRegularExpression
argument_list|(
literal|"Q_SLOTS:.*QString Method\\(const QString&\\w*, const QString&\\w*, QString&"
argument_list|,
name|QRegularExpression
operator|::
name|DotMatchesEverythingOption
argument_list|)
expr_stmt|;
comment|// -- signals --
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|basicTypeCount
condition|;
operator|++
name|i
control|)
block|{
name|QRegularExpression
name|rx
argument_list|(
name|QString
argument_list|(
literal|"Q_SIGNALS:.*\\bvoid Signal\\((const )?%1\\b"
argument_list|)
operator|.
name|arg
argument_list|(
name|basicTypeList
index|[
name|i
index|]
operator|.
name|cppType
argument_list|)
argument_list|,
name|QRegularExpression
operator|::
name|DotMatchesEverythingOption
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QByteArray
argument_list|(
literal|"signal-"
argument_list|)
operator|+
name|basicTypeList
index|[
name|i
index|]
operator|.
name|dbusType
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"<signal name=\"Signal\">"
literal|"<arg type=\"%1\"/>"
literal|"</signal>"
argument_list|)
operator|.
name|arg
argument_list|(
name|basicTypeList
index|[
name|i
index|]
operator|.
name|dbusType
argument_list|)
operator|<<
name|rx
operator|<<
name|rx
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|process
name|void
name|tst_qdbusxml2cpp
operator|::
name|process
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|xmlSnippet
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QRegularExpression
argument_list|,
name|interfaceSearch
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QRegularExpression
argument_list|,
name|adaptorSearch
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|interfaceSearch
operator|.
name|isValid
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|interfaceSearch
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|adaptorSearch
operator|.
name|isValid
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|adaptorSearch
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// test both interface and adaptor generation
name|QFETCH_GLOBAL
argument_list|(
name|int
argument_list|,
name|outputMode
argument_list|)
expr_stmt|;
name|QFETCH_GLOBAL
argument_list|(
name|QString
argument_list|,
name|commandLineArg
argument_list|)
expr_stmt|;
comment|// Run the tool
specifier|const
name|QString
name|binpath
init|=
name|QLibraryInfo
operator|::
name|location
argument_list|(
name|QLibraryInfo
operator|::
name|BinariesPath
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|command
init|=
name|binpath
operator|+
name|QLatin1String
argument_list|(
literal|"/qdbusxml2cpp"
argument_list|)
decl_stmt|;
name|QProcess
name|process
decl_stmt|;
name|process
operator|.
name|start
argument_list|(
name|command
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|commandLineArg
operator|<<
literal|"-"
operator|<<
literal|"-N"
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|process
operator|.
name|waitForStarted
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|process
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// feed it our XML data
specifier|static
specifier|const
name|char
name|xmlHeader
index|[]
init|=
literal|"<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n"
name|DBUS_INTROSPECT_1_0_XML_DOCTYPE_DECL_NODE
comment|// \n is included
literal|"<node>\n"
literal|"<interface name=\"local.name.is.not.important\">\n"
literal|"<!-- begin data -->\n"
decl_stmt|;
specifier|static
specifier|const
name|char
name|xmlFooter
index|[]
init|=
literal|"\n"
literal|"<!-- end data -->\n"
literal|"</interface>\n"
literal|"</node>\n"
decl_stmt|;
name|process
operator|.
name|write
argument_list|(
name|xmlHeader
argument_list|,
name|int
argument_list|(
sizeof|sizeof
name|xmlHeader
argument_list|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|process
operator|.
name|write
argument_list|(
name|xmlSnippet
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
name|process
operator|.
name|write
argument_list|(
name|xmlFooter
argument_list|,
name|int
argument_list|(
sizeof|sizeof
name|xmlFooter
argument_list|)
operator|-
literal|1
argument_list|)
expr_stmt|;
while|while
condition|(
name|process
operator|.
name|bytesToWrite
argument_list|()
condition|)
name|QVERIFY2
argument_list|(
name|process
operator|.
name|waitForBytesWritten
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|process
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//    fprintf(stderr, "%s%s%s", xmlHeader, xmlSnippet.toLatin1().constData(), xmlFooter);
name|process
operator|.
name|closeWriteChannel
argument_list|()
expr_stmt|;
name|QVERIFY2
argument_list|(
name|process
operator|.
name|waitForFinished
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|process
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|errOutput
init|=
name|process
operator|.
name|readAllStandardError
argument_list|()
decl_stmt|;
name|QVERIFY2
argument_list|(
name|errOutput
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|errOutput
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|process
operator|.
name|exitCode
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QByteArray
name|fullOutput
init|=
name|process
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|QString
name|output
init|=
name|stripHeader
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|fullOutput
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
operator|!
name|output
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|fullOutput
argument_list|)
expr_stmt|;
if|if
condition|(
name|outputMode
operator|==
name|Interface
condition|)
name|QVERIFY2
argument_list|(
name|output
operator|.
name|count
argument_list|(
name|interfaceSearch
argument_list|)
operator|==
literal|1
argument_list|,
name|qPrintable
argument_list|(
name|interfaceSearch
operator|.
name|pattern
argument_list|()
operator|+
literal|"\nin\n"
operator|+
name|output
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|QVERIFY2
argument_list|(
name|output
operator|.
name|count
argument_list|(
name|adaptorSearch
argument_list|)
operator|==
literal|1
argument_list|,
name|qPrintable
argument_list|(
name|adaptorSearch
operator|.
name|pattern
argument_list|()
operator|+
literal|"\nin\n"
operator|+
name|output
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_qdbusxml2cpp
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qdbusxml2cpp.moc"
end_include
end_unit
