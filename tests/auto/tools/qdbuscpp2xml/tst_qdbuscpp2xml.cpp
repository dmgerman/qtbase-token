begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 KlarÃ¤lvdalens Datakonsult AB, a KDAB Group company, info@kdab.com, author Stephen Kelly<stephen.kelly@kdab.com> ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|"test1.h"
end_include
begin_include
include|#
directive|include
file|<QtDBus/QDBusConnection>
end_include
begin_comment
comment|// in qdbusxmlgenerator.cpp
end_comment
begin_function_decl
name|QT_BEGIN_NAMESPACE
specifier|extern
name|Q_DBUS_EXPORT
name|QString
name|qDBusGenerateMetaObjectXml
parameter_list|(
name|QString
name|interface
parameter_list|,
specifier|const
name|QMetaObject
modifier|*
name|mo
parameter_list|,
specifier|const
name|QMetaObject
modifier|*
name|base
parameter_list|,
name|int
name|flags
parameter_list|)
function_decl|;
end_function_decl
begin_function
name|QT_END_NAMESPACE
DECL|function|addXmlHeader
specifier|static
name|QString
name|addXmlHeader
parameter_list|(
specifier|const
name|QString
modifier|&
name|input
parameter_list|)
block|{
return|return
literal|"<!DOCTYPE node PUBLIC \"-//freedesktop//DTD D-BUS Object Introspection 1.0//EN\" \"http://www.freedesktop.org/standards/dbus/1.0/introspect.dtd\">\n<node>"
operator|+
operator|(
name|input
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
argument_list|()
else|:
name|QString
argument_list|(
literal|"\n  "
operator|+
name|input
operator|.
name|trimmed
argument_list|()
argument_list|)
operator|)
operator|+
literal|"\n</node>\n"
return|;
block|}
end_function
begin_class
DECL|class|tst_qdbuscpp2xml
class|class
name|tst_qdbuscpp2xml
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|qdbuscpp2xml_data
parameter_list|()
function_decl|;
name|void
name|qdbuscpp2xml
parameter_list|()
function_decl|;
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
private|private:
DECL|member|m_tests
name|QHash
argument_list|<
name|QString
argument_list|,
name|QObject
modifier|*
argument_list|>
name|m_tests
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|initTestCase
name|void
name|tst_qdbuscpp2xml
operator|::
name|initTestCase
parameter_list|()
block|{
name|m_tests
operator|.
name|insert
argument_list|(
literal|"test1"
argument_list|,
operator|new
name|Test1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_qdbuscpp2xml
operator|::
name|cleanupTestCase
parameter_list|()
block|{
name|qDeleteAll
argument_list|(
name|m_tests
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qdbuscpp2xml_data
name|void
name|tst_qdbuscpp2xml
operator|::
name|qdbuscpp2xml_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"inputfile"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"flags"
argument_list|)
expr_stmt|;
name|QBitArray
name|doneFlags
argument_list|(
name|QDBusConnection
operator|::
name|ExportAllContents
operator|+
literal|1
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|flag
init|=
literal|0x10
init|;
name|flag
operator|<
name|QDBusConnection
operator|::
name|ExportScriptableContents
condition|;
name|flag
operator|+=
literal|0x10
control|)
block|{
name|QTest
operator|::
name|newRow
argument_list|(
literal|"xmlgenerator-"
operator|+
name|QByteArray
operator|::
name|number
argument_list|(
name|flag
argument_list|)
argument_list|)
operator|<<
literal|"test1"
operator|<<
name|flag
expr_stmt|;
name|doneFlags
operator|.
name|setBit
argument_list|(
name|flag
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|mask
init|=
name|QDBusConnection
operator|::
name|ExportAllSlots
init|;
name|mask
operator|<=
name|QDBusConnection
operator|::
name|ExportAllContents
condition|;
name|mask
operator|+=
literal|0x110
control|)
block|{
name|int
name|flags
init|=
name|flag
operator||
name|mask
decl_stmt|;
if|if
condition|(
name|doneFlags
operator|.
name|testBit
argument_list|(
name|flags
argument_list|)
condition|)
continue|continue;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"xmlgenerator-"
operator|+
name|QByteArray
operator|::
name|number
argument_list|(
name|flags
argument_list|)
argument_list|)
operator|<<
literal|"test1"
operator|<<
name|flags
expr_stmt|;
name|doneFlags
operator|.
name|setBit
argument_list|(
name|flags
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|qdbuscpp2xml
name|void
name|tst_qdbuscpp2xml
operator|::
name|qdbuscpp2xml
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|inputfile
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|flags
argument_list|)
expr_stmt|;
comment|// qdbuscpp2xml considers these equivalent
if|if
condition|(
name|flags
operator|&
name|QDBusConnection
operator|::
name|ExportScriptableSlots
condition|)
name|flags
operator||=
name|QDBusConnection
operator|::
name|ExportScriptableInvokables
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|QDBusConnection
operator|::
name|ExportNonScriptableSlots
condition|)
name|flags
operator||=
name|QDBusConnection
operator|::
name|ExportNonScriptableInvokables
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|QDBusConnection
operator|::
name|ExportScriptableInvokables
condition|)
name|flags
operator||=
name|QDBusConnection
operator|::
name|ExportScriptableSlots
expr_stmt|;
if|if
condition|(
name|flags
operator|&
name|QDBusConnection
operator|::
name|ExportNonScriptableInvokables
condition|)
name|flags
operator||=
name|QDBusConnection
operator|::
name|ExportNonScriptableSlots
expr_stmt|;
name|QStringList
name|options
decl_stmt|;
if|if
condition|(
name|flags
operator|&
name|QDBusConnection
operator|::
name|ExportScriptableProperties
condition|)
block|{
if|if
condition|(
name|flags
operator|&
name|QDBusConnection
operator|::
name|ExportNonScriptableProperties
condition|)
name|options
operator|<<
literal|"-P"
expr_stmt|;
else|else
name|options
operator|<<
literal|"-p"
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
name|QDBusConnection
operator|::
name|ExportScriptableSignals
condition|)
block|{
if|if
condition|(
name|flags
operator|&
name|QDBusConnection
operator|::
name|ExportNonScriptableSignals
condition|)
name|options
operator|<<
literal|"-S"
expr_stmt|;
else|else
name|options
operator|<<
literal|"-s"
expr_stmt|;
block|}
if|if
condition|(
name|flags
operator|&
name|QDBusConnection
operator|::
name|ExportScriptableSlots
condition|)
block|{
if|if
condition|(
name|flags
operator|&
name|QDBusConnection
operator|::
name|ExportNonScriptableSlots
condition|)
name|options
operator|<<
literal|"-M"
expr_stmt|;
else|else
name|options
operator|<<
literal|"-m"
expr_stmt|;
block|}
comment|// Launch
specifier|const
name|QString
name|command
init|=
name|QLatin1String
argument_list|(
literal|"qdbuscpp2xml"
argument_list|)
decl_stmt|;
name|QProcess
name|process
decl_stmt|;
name|process
operator|.
name|start
argument_list|(
name|command
argument_list|,
name|QStringList
argument_list|()
operator|<<
name|options
operator|<<
operator|(
name|QFINDTESTDATA
argument_list|(
name|inputfile
operator|+
name|QStringLiteral
argument_list|(
literal|".h"
argument_list|)
argument_list|)
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|process
operator|.
name|waitForFinished
argument_list|()
condition|)
block|{
specifier|const
name|QString
name|path
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|qgetenv
argument_list|(
literal|"PATH"
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|message
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"'%1' could not be found when run from '%2'. Path: '%3' "
argument_list|)
operator|.
name|arg
argument_list|(
name|command
argument_list|,
name|QDir
operator|::
name|currentPath
argument_list|()
argument_list|,
name|path
argument_list|)
decl_stmt|;
name|QFAIL
argument_list|(
name|qPrintable
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
block|}
specifier|const
name|QChar
name|cr
init|=
name|QLatin1Char
argument_list|(
literal|'\r'
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|err
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|process
operator|.
name|readAllStandardError
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|(
name|cr
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|out
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|process
operator|.
name|readAllStandardOutput
argument_list|()
argument_list|)
operator|.
name|remove
argument_list|(
name|cr
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|err
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"UNEXPECTED STDERR CONTENTS: "
operator|<<
name|err
expr_stmt|;
name|QFAIL
argument_list|(
literal|"UNEXPECTED STDERR CONTENTS"
argument_list|)
expr_stmt|;
block|}
specifier|const
name|QChar
name|nl
init|=
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
decl_stmt|;
specifier|const
name|QStringList
name|actualLines
init|=
name|out
operator|.
name|split
argument_list|(
name|nl
argument_list|)
decl_stmt|;
name|QObject
modifier|*
name|testObject
init|=
name|m_tests
operator|.
name|value
argument_list|(
name|inputfile
argument_list|)
decl_stmt|;
if|if
condition|(
name|flags
operator|==
literal|0
condition|)
name|flags
operator|=
name|QDBusConnection
operator|::
name|ExportScriptableContents
operator||
name|QDBusConnection
operator|::
name|ExportNonScriptableContents
expr_stmt|;
name|QString
name|expected
init|=
name|qDBusGenerateMetaObjectXml
argument_list|(
name|QString
argument_list|()
argument_list|,
name|testObject
operator|->
name|metaObject
argument_list|()
argument_list|,
operator|&
name|QObject
operator|::
name|staticMetaObject
argument_list|,
name|flags
argument_list|)
decl_stmt|;
name|expected
operator|=
name|addXmlHeader
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|out
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_APPLESS_MAIN
argument_list|(
argument|tst_qdbuscpp2xml
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qdbuscpp2xml.moc"
end_include
end_unit
