begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<ioutils.h>
end_include
begin_include
include|#
directive|include
file|<proitems.h>
end_include
begin_include
include|#
directive|include
file|<QObject>
end_include
begin_using
using|using
namespace|namespace
name|QMakeInternal
namespace|;
end_using
begin_class
DECL|class|tst_qmakelib
class|class
name|tst_qmakelib
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|tst_qmakelib
name|tst_qmakelib
parameter_list|()
block|{}
DECL|function|~tst_qmakelib
specifier|virtual
name|~
name|tst_qmakelib
parameter_list|()
block|{}
private|private
name|slots
private|:
name|void
name|quoteArgUnix_data
parameter_list|()
function_decl|;
name|void
name|quoteArgUnix
parameter_list|()
function_decl|;
name|void
name|quoteArgWin_data
parameter_list|()
function_decl|;
name|void
name|quoteArgWin
parameter_list|()
function_decl|;
name|void
name|pathUtils
parameter_list|()
function_decl|;
name|void
name|proStringList
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|proStringList
name|void
name|tst_qmakelib
operator|::
name|proStringList
parameter_list|()
block|{
name|ProStringList
name|sl1
decl_stmt|;
name|sl1
operator|<<
name|ProString
argument_list|(
literal|"qt"
argument_list|)
operator|<<
name|ProString
argument_list|(
name|QLatin1String
argument_list|(
literal|"is"
argument_list|)
argument_list|)
operator|<<
name|ProString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"uncool"
argument_list|)
argument_list|)
operator|.
name|mid
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sl1
operator|.
name|toQStringList
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"qt"
operator|<<
literal|"is"
operator|<<
literal|"cool"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sl1
operator|.
name|join
argument_list|(
name|QStringLiteral
argument_list|(
literal|"~~"
argument_list|)
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"qt~~is~~cool"
argument_list|)
argument_list|)
expr_stmt|;
name|ProStringList
name|sl2
decl_stmt|;
name|sl2
operator|<<
name|ProString
argument_list|(
literal|"mostly"
argument_list|)
operator|<<
name|ProString
argument_list|(
literal|"..."
argument_list|)
operator|<<
name|ProString
argument_list|(
literal|"is"
argument_list|)
operator|<<
name|ProString
argument_list|(
literal|"..."
argument_list|)
expr_stmt|;
name|sl1
operator|.
name|insertUnique
argument_list|(
name|sl2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sl1
operator|.
name|toQStringList
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"qt"
operator|<<
literal|"is"
operator|<<
literal|"cool"
operator|<<
literal|"mostly"
operator|<<
literal|"..."
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sl1
operator|.
name|contains
argument_list|(
literal|"cool"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|sl1
operator|.
name|contains
argument_list|(
literal|"COOL"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sl1
operator|.
name|contains
argument_list|(
literal|"COOL"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|quoteArgUnix_data
name|void
name|tst_qmakelib
operator|::
name|quoteArgUnix_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"in"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"out"
argument_list|)
expr_stmt|;
specifier|static
specifier|const
struct|struct
block|{
specifier|const
name|char
modifier|*
specifier|const
name|in
decl_stmt|;
specifier|const
name|char
modifier|*
specifier|const
name|out
decl_stmt|;
block|}
name|vals
index|[]
init|=
block|{
block|{
literal|""
block|,
literal|"''"
block|}
block|,
block|{
literal|"hallo"
block|,
literal|"hallo"
block|}
block|,
block|{
literal|"hallo du"
block|,
literal|"'hallo du'"
block|}
block|,
block|{
literal|"ha'llo"
block|,
literal|"'ha'\\''llo'"
block|}
block|,     }
struct|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|<
sizeof|sizeof
argument_list|(
name|vals
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|vals
index|[
literal|0
index|]
argument_list|)
condition|;
name|i
operator|++
control|)
name|QTest
operator|::
name|newRow
argument_list|(
name|vals
index|[
name|i
index|]
operator|.
name|in
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
name|vals
index|[
name|i
index|]
operator|.
name|in
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
name|vals
index|[
name|i
index|]
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|quoteArgUnix
name|void
name|tst_qmakelib
operator|::
name|quoteArgUnix
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|IoUtils
operator|::
name|shellQuoteUnix
argument_list|(
name|in
argument_list|)
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|quoteArgWin_data
name|void
name|tst_qmakelib
operator|::
name|quoteArgWin_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"in"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"out"
argument_list|)
expr_stmt|;
specifier|static
specifier|const
struct|struct
block|{
specifier|const
name|char
modifier|*
specifier|const
name|in
decl_stmt|;
specifier|const
name|char
modifier|*
specifier|const
name|out
decl_stmt|;
block|}
name|vals
index|[]
init|=
block|{
block|{
literal|""
block|,
literal|"\"\""
block|}
block|,
block|{
literal|"hallo"
block|,
literal|"hallo"
block|}
block|,
block|{
literal|"hallo du"
block|,
literal|"\"hallo du\""
block|}
block|,
block|{
literal|"hallo\\"
block|,
literal|"hallo\\"
block|}
block|,
block|{
literal|"hallo du\\"
block|,
literal|"\"hallo du\\\\\""
block|}
block|,
block|{
literal|"ha\"llo"
block|,
literal|"\"ha\\\"llo^\""
block|}
block|,
block|{
literal|"ha\\\"llo"
block|,
literal|"\"ha\\\\\\\"llo^\""
block|}
block|,     }
struct|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|<
sizeof|sizeof
argument_list|(
name|vals
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|vals
index|[
literal|0
index|]
argument_list|)
condition|;
name|i
operator|++
control|)
name|QTest
operator|::
name|newRow
argument_list|(
name|vals
index|[
name|i
index|]
operator|.
name|in
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
name|vals
index|[
name|i
index|]
operator|.
name|in
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
name|vals
index|[
name|i
index|]
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|quoteArgWin
name|void
name|tst_qmakelib
operator|::
name|quoteArgWin
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|IoUtils
operator|::
name|shellQuoteWin
argument_list|(
name|in
argument_list|)
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|pathUtils
name|void
name|tst_qmakelib
operator|::
name|pathUtils
parameter_list|()
block|{
name|QString
name|afp
init|=
name|QCoreApplication
operator|::
name|applicationFilePath
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|IoUtils
operator|::
name|exists
argument_list|(
name|afp
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|IoUtils
operator|::
name|exists
argument_list|(
name|afp
operator|+
literal|"-tehfail"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|IoUtils
operator|::
name|fileType
argument_list|(
name|afp
argument_list|)
argument_list|,
name|IoUtils
operator|::
name|FileIsRegular
argument_list|)
expr_stmt|;
name|QString
name|adp
init|=
name|QCoreApplication
operator|::
name|applicationDirPath
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|IoUtils
operator|::
name|fileType
argument_list|(
name|adp
argument_list|)
argument_list|,
name|IoUtils
operator|::
name|FileIsDir
argument_list|)
expr_stmt|;
name|QString
name|fn0
init|=
literal|"file/path"
decl_stmt|;
name|QVERIFY
argument_list|(
name|IoUtils
operator|::
name|isRelativePath
argument_list|(
name|fn0
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|fn1
init|=
literal|"/a/unix/file/path"
decl_stmt|;
name|QVERIFY
argument_list|(
name|IoUtils
operator|::
name|isAbsolutePath
argument_list|(
name|fn1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|IoUtils
operator|::
name|pathName
argument_list|(
name|fn1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QStringLiteral
argument_list|(
literal|"/a/unix/file/"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|IoUtils
operator|::
name|fileName
argument_list|(
name|fn1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QStringLiteral
argument_list|(
literal|"path"
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|QString
name|fn0a
init|=
literal|"c:file/path"
decl_stmt|;
name|QVERIFY
argument_list|(
name|IoUtils
operator|::
name|isRelativePath
argument_list|(
name|fn0a
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|fn1a
init|=
literal|"c:\\file\\path"
decl_stmt|;
name|QVERIFY
argument_list|(
name|IoUtils
operator|::
name|isAbsolutePath
argument_list|(
name|fn1a
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QString
name|fnbase
init|=
literal|"/another/dir"
decl_stmt|;
name|QCOMPARE
argument_list|(
name|IoUtils
operator|::
name|resolvePath
argument_list|(
name|fnbase
argument_list|,
name|fn0
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"/another/dir/file/path"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|IoUtils
operator|::
name|resolvePath
argument_list|(
name|fnbase
argument_list|,
name|fn1
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"/a/unix/file/path"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_qmakelib
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qmakelib.moc"
end_include
end_unit
