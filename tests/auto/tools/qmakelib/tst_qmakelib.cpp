begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:GPL-EXCEPT$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3 as published by the Free Software ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"tst_qmakelib.h"
end_include
begin_include
include|#
directive|include
file|<ioutils.h>
end_include
begin_using
using|using
namespace|namespace
name|QMakeInternal
namespace|;
end_using
begin_function
DECL|function|initTestCase
name|void
name|tst_qmakelib
operator|::
name|initTestCase
parameter_list|()
block|{
name|m_indir
operator|=
name|QFINDTESTDATA
argument_list|(
literal|"testdata"
argument_list|)
expr_stmt|;
name|m_outdir
operator|=
name|m_indir
operator|+
name|QLatin1String
argument_list|(
literal|"_build"
argument_list|)
expr_stmt|;
name|m_env
operator|.
name|insert
argument_list|(
name|QStringLiteral
argument_list|(
literal|"E1"
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"env var"
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|m_env
operator|.
name|insert
argument_list|(
name|QStringLiteral
argument_list|(
literal|"COMSPEC"
argument_list|)
argument_list|,
name|qgetenv
argument_list|(
literal|"COMSPEC"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|m_prop
operator|.
name|insert
argument_list|(
name|ProKey
argument_list|(
literal|"P1"
argument_list|)
argument_list|,
name|ProString
argument_list|(
literal|"prop val"
argument_list|)
argument_list|)
expr_stmt|;
name|m_prop
operator|.
name|insert
argument_list|(
name|ProKey
argument_list|(
literal|"QT_HOST_DATA/get"
argument_list|)
argument_list|,
name|ProString
argument_list|(
name|m_indir
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|m_indir
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QDir
argument_list|(
name|m_outdir
argument_list|)
operator|.
name|removeRecursively
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QDir
argument_list|()
operator|.
name|mkpath
argument_list|(
name|m_outdir
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_qmakelib
operator|::
name|cleanupTestCase
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QDir
argument_list|(
name|m_outdir
argument_list|)
operator|.
name|removeRecursively
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|proString
name|void
name|tst_qmakelib
operator|::
name|proString
parameter_list|()
block|{
name|QString
name|qs1
argument_list|(
name|QStringLiteral
argument_list|(
literal|"this is a string"
argument_list|)
argument_list|)
decl_stmt|;
name|ProString
name|s1
argument_list|(
name|qs1
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|s1
operator|.
name|toQString
argument_list|()
argument_list|,
name|QStringLiteral
argument_list|(
literal|"this is a string"
argument_list|)
argument_list|)
expr_stmt|;
name|ProString
name|s2
argument_list|(
name|qs1
argument_list|,
literal|5
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|s2
operator|.
name|toQString
argument_list|()
argument_list|,
name|QStringLiteral
argument_list|(
literal|"is a str"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s2
operator|.
name|hash
argument_list|()
argument_list|,
literal|0x80000000
argument_list|)
expr_stmt|;
name|qHash
argument_list|(
name|s2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s2
operator|.
name|hash
argument_list|()
argument_list|,
literal|90404018U
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s2
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
operator|.
name|toQString
argument_list|()
argument_list|,
name|QStringLiteral
argument_list|(
literal|"is a str"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s2
operator|.
name|mid
argument_list|(
literal|1
argument_list|,
literal|5
argument_list|)
operator|.
name|toQString
argument_list|()
argument_list|,
name|QStringLiteral
argument_list|(
literal|"s a s"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s2
operator|.
name|mid
argument_list|(
literal|10
argument_list|,
literal|3
argument_list|)
operator|.
name|toQString
argument_list|()
argument_list|,
name|QStringLiteral
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|qs2
argument_list|(
name|QStringLiteral
argument_list|(
literal|"   spacy  string   "
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ProString
argument_list|(
name|qs2
argument_list|,
literal|3
argument_list|,
literal|13
argument_list|)
operator|.
name|trimmed
argument_list|()
operator|.
name|toQString
argument_list|()
argument_list|,
name|QStringLiteral
argument_list|(
literal|"spacy  string"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ProString
argument_list|(
name|qs2
argument_list|,
literal|1
argument_list|,
literal|17
argument_list|)
operator|.
name|trimmed
argument_list|()
operator|.
name|toQString
argument_list|()
argument_list|,
name|QStringLiteral
argument_list|(
literal|"spacy  string"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s2
operator|.
name|toQStringRef
argument_list|()
operator|.
name|string
argument_list|()
operator|->
name|isSharedWith
argument_list|(
name|qs1
argument_list|)
argument_list|)
expr_stmt|;
name|s2
operator|.
name|prepend
argument_list|(
name|ProString
argument_list|(
literal|"there "
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s2
operator|.
name|toQString
argument_list|()
argument_list|,
name|QStringLiteral
argument_list|(
literal|"there is a str"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|s2
operator|.
name|toQStringRef
argument_list|()
operator|.
name|string
argument_list|()
operator|->
name|isSharedWith
argument_list|(
name|qs1
argument_list|)
argument_list|)
expr_stmt|;
name|ProString
name|s3
argument_list|(
literal|"this is a longish string with bells and whistles"
argument_list|)
decl_stmt|;
name|s3
operator|=
name|s3
operator|.
name|mid
argument_list|(
literal|18
argument_list|,
literal|17
argument_list|)
expr_stmt|;
comment|// Prepend to detached string with lots of spare space in it.
name|s3
operator|.
name|prepend
argument_list|(
name|ProString
argument_list|(
literal|"another "
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s3
operator|.
name|toQString
argument_list|()
argument_list|,
name|QStringLiteral
argument_list|(
literal|"another string with bells"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Note: The string still has plenty of spare space.
name|s3
operator|.
name|append
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s3
operator|.
name|toQString
argument_list|()
argument_list|,
name|QStringLiteral
argument_list|(
literal|"another string with bells."
argument_list|)
argument_list|)
expr_stmt|;
name|s3
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|" eh?"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s3
operator|.
name|toQString
argument_list|()
argument_list|,
name|QStringLiteral
argument_list|(
literal|"another string with bells. eh?"
argument_list|)
argument_list|)
expr_stmt|;
name|s3
operator|.
name|append
argument_list|(
name|ProString
argument_list|(
literal|" yeah!"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s3
operator|.
name|toQString
argument_list|()
argument_list|,
name|QStringLiteral
argument_list|(
literal|"another string with bells. eh? yeah!"
argument_list|)
argument_list|)
expr_stmt|;
name|bool
name|pending
init|=
literal|false
decl_stmt|;
comment|// Not in string, but joining => add space
name|s3
operator|.
name|append
argument_list|(
name|ProString
argument_list|(
literal|"..."
argument_list|)
argument_list|,
operator|&
name|pending
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s3
operator|.
name|toQString
argument_list|()
argument_list|,
name|QStringLiteral
argument_list|(
literal|"another string with bells. eh? yeah! ..."
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|pending
argument_list|)
expr_stmt|;
name|ProStringList
name|sl1
decl_stmt|;
name|sl1
operator|<<
name|ProString
argument_list|(
literal|""
argument_list|)
operator|<<
name|ProString
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|ProString
argument_list|(
literal|"barbaz"
argument_list|)
expr_stmt|;
name|ProString
name|s4a
argument_list|(
literal|"hallo"
argument_list|)
decl_stmt|;
name|s4a
operator|.
name|append
argument_list|(
name|sl1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s4a
operator|.
name|toQString
argument_list|()
argument_list|,
name|QStringLiteral
argument_list|(
literal|"hallo foo barbaz"
argument_list|)
argument_list|)
expr_stmt|;
name|ProString
name|s4b
argument_list|(
literal|"hallo"
argument_list|)
decl_stmt|;
name|pending
operator|=
literal|false
expr_stmt|;
name|s4b
operator|.
name|append
argument_list|(
name|sl1
argument_list|,
operator|&
name|pending
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s4b
operator|.
name|toQString
argument_list|()
argument_list|,
name|QStringLiteral
argument_list|(
literal|"hallo  foo barbaz"
argument_list|)
argument_list|)
expr_stmt|;
name|ProString
name|s4c
decl_stmt|;
name|pending
operator|=
literal|false
expr_stmt|;
name|s4c
operator|.
name|append
argument_list|(
name|sl1
argument_list|,
operator|&
name|pending
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s4c
operator|.
name|toQString
argument_list|()
argument_list|,
name|QStringLiteral
argument_list|(
literal|" foo barbaz"
argument_list|)
argument_list|)
expr_stmt|;
comment|// bizarreness
name|ProString
name|s4d
argument_list|(
literal|"hallo"
argument_list|)
decl_stmt|;
name|pending
operator|=
literal|false
expr_stmt|;
name|s4d
operator|.
name|append
argument_list|(
name|sl1
argument_list|,
operator|&
name|pending
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s4d
operator|.
name|toQString
argument_list|()
argument_list|,
name|QStringLiteral
argument_list|(
literal|"hallo foo barbaz"
argument_list|)
argument_list|)
expr_stmt|;
name|ProString
name|s4e
decl_stmt|;
name|pending
operator|=
literal|false
expr_stmt|;
name|s4e
operator|.
name|append
argument_list|(
name|sl1
argument_list|,
operator|&
name|pending
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s4e
operator|.
name|toQString
argument_list|()
argument_list|,
name|QStringLiteral
argument_list|(
literal|"foo barbaz"
argument_list|)
argument_list|)
expr_stmt|;
name|ProStringList
name|sl2
decl_stmt|;
name|sl2
operator|<<
name|ProString
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|ProString
name|s5
decl_stmt|;
name|s5
operator|.
name|append
argument_list|(
name|sl2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s5
operator|.
name|toQString
argument_list|()
argument_list|,
name|QStringLiteral
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|s5
operator|.
name|toQStringRef
argument_list|()
operator|.
name|string
argument_list|()
operator|->
name|isSharedWith
argument_list|(
operator|*
name|sl2
operator|.
name|first
argument_list|()
operator|.
name|toQStringRef
argument_list|()
operator|.
name|string
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ProString
argument_list|(
literal|"one"
argument_list|)
operator|+
name|ProString
argument_list|(
literal|" more"
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"one more"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|proStringList
name|void
name|tst_qmakelib
operator|::
name|proStringList
parameter_list|()
block|{
name|ProStringList
name|sl1
decl_stmt|;
name|sl1
operator|<<
name|ProString
argument_list|(
literal|"qt"
argument_list|)
operator|<<
name|ProString
argument_list|(
name|QLatin1String
argument_list|(
literal|"is"
argument_list|)
argument_list|)
operator|<<
name|ProString
argument_list|(
name|QStringLiteral
argument_list|(
literal|"uncool"
argument_list|)
argument_list|)
operator|.
name|mid
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sl1
operator|.
name|toQStringList
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"qt"
operator|<<
literal|"is"
operator|<<
literal|"cool"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sl1
operator|.
name|join
argument_list|(
name|QStringLiteral
argument_list|(
literal|"~~"
argument_list|)
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"qt~~is~~cool"
argument_list|)
argument_list|)
expr_stmt|;
name|ProStringList
name|sl2
decl_stmt|;
name|sl2
operator|<<
name|ProString
argument_list|(
literal|"mostly"
argument_list|)
operator|<<
name|ProString
argument_list|(
literal|"..."
argument_list|)
operator|<<
name|ProString
argument_list|(
literal|"is"
argument_list|)
operator|<<
name|ProString
argument_list|(
literal|"..."
argument_list|)
expr_stmt|;
name|sl1
operator|.
name|insertUnique
argument_list|(
name|sl2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sl1
operator|.
name|toQStringList
argument_list|()
argument_list|,
name|QStringList
argument_list|()
operator|<<
literal|"qt"
operator|<<
literal|"is"
operator|<<
literal|"cool"
operator|<<
literal|"mostly"
operator|<<
literal|"..."
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sl1
operator|.
name|contains
argument_list|(
literal|"cool"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|sl1
operator|.
name|contains
argument_list|(
literal|"COOL"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sl1
operator|.
name|contains
argument_list|(
literal|"COOL"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|quoteArgUnix_data
name|void
name|tst_qmakelib
operator|::
name|quoteArgUnix_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"in"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"out"
argument_list|)
expr_stmt|;
specifier|static
specifier|const
struct|struct
block|{
specifier|const
name|char
modifier|*
specifier|const
name|in
decl_stmt|;
specifier|const
name|char
modifier|*
specifier|const
name|out
decl_stmt|;
block|}
name|vals
index|[]
init|=
block|{
block|{
literal|""
block|,
literal|"''"
block|}
block|,
block|{
literal|"hallo"
block|,
literal|"hallo"
block|}
block|,
block|{
literal|"hallo du"
block|,
literal|"'hallo du'"
block|}
block|,
block|{
literal|"ha'llo"
block|,
literal|"'ha'\\''llo'"
block|}
block|,     }
struct|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|<
sizeof|sizeof
argument_list|(
name|vals
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|vals
index|[
literal|0
index|]
argument_list|)
condition|;
name|i
operator|++
control|)
name|QTest
operator|::
name|newRow
argument_list|(
name|vals
index|[
name|i
index|]
operator|.
name|in
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
name|vals
index|[
name|i
index|]
operator|.
name|in
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
name|vals
index|[
name|i
index|]
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|quoteArgUnix
name|void
name|tst_qmakelib
operator|::
name|quoteArgUnix
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|IoUtils
operator|::
name|shellQuoteUnix
argument_list|(
name|in
argument_list|)
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|quoteArgWin_data
name|void
name|tst_qmakelib
operator|::
name|quoteArgWin_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"in"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"out"
argument_list|)
expr_stmt|;
specifier|static
specifier|const
struct|struct
block|{
specifier|const
name|char
modifier|*
specifier|const
name|in
decl_stmt|;
specifier|const
name|char
modifier|*
specifier|const
name|out
decl_stmt|;
block|}
name|vals
index|[]
init|=
block|{
block|{
literal|""
block|,
literal|"\"\""
block|}
block|,
block|{
literal|"hallo"
block|,
literal|"hallo"
block|}
block|,
block|{
literal|"hallo du"
block|,
literal|"\"hallo du\""
block|}
block|,
block|{
literal|"hallo\\"
block|,
literal|"hallo\\"
block|}
block|,
block|{
literal|"hallo du\\"
block|,
literal|"\"hallo du\\\\\""
block|}
block|,
block|{
literal|"ha\"llo"
block|,
literal|"\"ha\\\"llo^\""
block|}
block|,
block|{
literal|"ha\\\"llo"
block|,
literal|"\"ha\\\\\\\"llo^\""
block|}
block|,     }
struct|;
for|for
control|(
name|unsigned
name|i
init|=
literal|0
init|;
name|i
operator|<
sizeof|sizeof
argument_list|(
name|vals
argument_list|)
operator|/
sizeof|sizeof
argument_list|(
name|vals
index|[
literal|0
index|]
argument_list|)
condition|;
name|i
operator|++
control|)
name|QTest
operator|::
name|newRow
argument_list|(
name|vals
index|[
name|i
index|]
operator|.
name|in
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
name|vals
index|[
name|i
index|]
operator|.
name|in
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
name|vals
index|[
name|i
index|]
operator|.
name|out
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|quoteArgWin
name|void
name|tst_qmakelib
operator|::
name|quoteArgWin
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|in
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|out
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|IoUtils
operator|::
name|shellQuoteWin
argument_list|(
name|in
argument_list|)
argument_list|,
name|out
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|pathUtils
name|void
name|tst_qmakelib
operator|::
name|pathUtils
parameter_list|()
block|{
name|QString
name|afp
init|=
name|QCoreApplication
operator|::
name|applicationFilePath
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|IoUtils
operator|::
name|exists
argument_list|(
name|afp
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|IoUtils
operator|::
name|exists
argument_list|(
name|afp
operator|+
literal|"-tehfail"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|IoUtils
operator|::
name|fileType
argument_list|(
name|afp
argument_list|)
argument_list|,
name|IoUtils
operator|::
name|FileIsRegular
argument_list|)
expr_stmt|;
name|QString
name|adp
init|=
name|QCoreApplication
operator|::
name|applicationDirPath
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|IoUtils
operator|::
name|fileType
argument_list|(
name|adp
argument_list|)
argument_list|,
name|IoUtils
operator|::
name|FileIsDir
argument_list|)
expr_stmt|;
name|QString
name|fn0
init|=
literal|"file/path"
decl_stmt|;
name|QVERIFY
argument_list|(
name|IoUtils
operator|::
name|isRelativePath
argument_list|(
name|fn0
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|fn1
init|=
literal|"/a/unix/file/path"
decl_stmt|;
name|QVERIFY
argument_list|(
name|IoUtils
operator|::
name|isAbsolutePath
argument_list|(
name|fn1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|IoUtils
operator|::
name|pathName
argument_list|(
name|fn1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QStringLiteral
argument_list|(
literal|"/a/unix/file/"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|IoUtils
operator|::
name|fileName
argument_list|(
name|fn1
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QStringLiteral
argument_list|(
literal|"path"
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|QString
name|fn0a
init|=
literal|"c:file/path"
decl_stmt|;
name|QVERIFY
argument_list|(
name|IoUtils
operator|::
name|isRelativePath
argument_list|(
name|fn0a
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|fn1a
init|=
literal|"c:\\file\\path"
decl_stmt|;
name|QVERIFY
argument_list|(
name|IoUtils
operator|::
name|isAbsolutePath
argument_list|(
name|fn1a
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QString
name|fnbase
init|=
literal|"/another/dir"
decl_stmt|;
name|QCOMPARE
argument_list|(
name|IoUtils
operator|::
name|resolvePath
argument_list|(
name|fnbase
argument_list|,
name|fn0
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"/another/dir/file/path"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|IoUtils
operator|::
name|resolvePath
argument_list|(
name|fnbase
argument_list|,
name|fn1
argument_list|)
argument_list|,
name|QStringLiteral
argument_list|(
literal|"/a/unix/file/path"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|print
name|void
name|QMakeTestHandler
operator|::
name|print
parameter_list|(
specifier|const
name|QString
modifier|&
name|fileName
parameter_list|,
name|int
name|lineNo
parameter_list|,
name|int
name|type
parameter_list|,
specifier|const
name|QString
modifier|&
name|msg
parameter_list|)
block|{
name|QString
name|pfx
init|=
operator|(
operator|(
name|type
operator|&
name|QMakeParserHandler
operator|::
name|CategoryMask
operator|)
operator|==
name|QMakeParserHandler
operator|::
name|WarningMessage
operator|)
condition|?
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"WARNING: "
argument_list|)
else|:
name|QString
argument_list|()
decl_stmt|;
if|if
condition|(
name|lineNo
condition|)
name|doPrint
argument_list|(
name|QStringLiteral
argument_list|(
literal|"%1%2:%3: %4"
argument_list|)
operator|.
name|arg
argument_list|(
name|pfx
argument_list|,
name|fileName
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|lineNo
argument_list|)
argument_list|,
name|msg
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|doPrint
argument_list|(
name|QStringLiteral
argument_list|(
literal|"%1%2"
argument_list|)
operator|.
name|arg
argument_list|(
name|pfx
argument_list|,
name|msg
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|doPrint
name|void
name|QMakeTestHandler
operator|::
name|doPrint
parameter_list|(
specifier|const
name|QString
modifier|&
name|msg
parameter_list|)
block|{
if|if
condition|(
operator|!
name|expected
operator|.
name|isEmpty
argument_list|()
operator|&&
name|expected
operator|.
name|first
argument_list|()
operator|==
name|msg
condition|)
block|{
name|expected
operator|.
name|removeAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|qWarning
argument_list|(
literal|"%s"
argument_list|,
name|qPrintable
argument_list|(
name|msg
argument_list|)
argument_list|)
expr_stmt|;
name|printed
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_qmakelib
argument_list|)
end_macro
end_unit
