begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|"testcompiler.h"
end_include
begin_include
include|#
directive|include
file|<QObject>
end_include
begin_include
include|#
directive|include
file|<QStandardPaths>
end_include
begin_include
include|#
directive|include
file|<QDir>
end_include
begin_class
DECL|class|tst_qmake
class|class
name|tst_qmake
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_qmake
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_qmake
parameter_list|()
destructor_decl|;
public|public
name|slots
public|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|simple_app
parameter_list|()
function_decl|;
name|void
name|simple_app_shadowbuild
parameter_list|()
function_decl|;
name|void
name|simple_app_shadowbuild2
parameter_list|()
function_decl|;
name|void
name|simple_lib
parameter_list|()
function_decl|;
name|void
name|simple_dll
parameter_list|()
function_decl|;
name|void
name|subdirs
parameter_list|()
function_decl|;
name|void
name|subdir_via_pro_file_extra_target
parameter_list|()
function_decl|;
name|void
name|functions
parameter_list|()
function_decl|;
name|void
name|operators
parameter_list|()
function_decl|;
name|void
name|variables
parameter_list|()
function_decl|;
name|void
name|func_export
parameter_list|()
function_decl|;
name|void
name|func_variables
parameter_list|()
function_decl|;
name|void
name|comments
parameter_list|()
function_decl|;
name|void
name|duplicateLibraryEntries
parameter_list|()
function_decl|;
name|void
name|export_across_file_boundaries
parameter_list|()
function_decl|;
name|void
name|include_dir
parameter_list|()
function_decl|;
name|void
name|include_pwd
parameter_list|()
function_decl|;
name|void
name|install_files
parameter_list|()
function_decl|;
name|void
name|install_depends
parameter_list|()
function_decl|;
name|void
name|quotedfilenames
parameter_list|()
function_decl|;
name|void
name|prompt
parameter_list|()
function_decl|;
name|void
name|one_space
parameter_list|()
function_decl|;
name|void
name|findMocs
parameter_list|()
function_decl|;
name|void
name|findDeps
parameter_list|()
function_decl|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
name|void
name|bundle_spaces
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|includefunction
parameter_list|()
function_decl|;
name|void
name|substitutes
parameter_list|()
function_decl|;
name|void
name|project
parameter_list|()
function_decl|;
name|void
name|proFileCache
parameter_list|()
function_decl|;
private|private:
DECL|member|test_compiler
name|TestCompiler
name|test_compiler
decl_stmt|;
DECL|member|base_path
name|QString
name|base_path
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|tst_qmake
name|tst_qmake
operator|::
name|tst_qmake
parameter_list|()
block|{ }
end_constructor
begin_destructor
DECL|function|~tst_qmake
name|tst_qmake
operator|::
name|~
name|tst_qmake
parameter_list|()
block|{  }
end_destructor
begin_function
DECL|function|initTestCase
name|void
name|tst_qmake
operator|::
name|initTestCase
parameter_list|()
block|{
name|QString
name|binpath
init|=
name|QLibraryInfo
operator|::
name|location
argument_list|(
name|QLibraryInfo
operator|::
name|BinariesPath
argument_list|)
decl_stmt|;
name|QString
name|cmd
init|=
name|QString
argument_list|(
literal|"%1/qmake"
argument_list|)
operator|.
name|arg
argument_list|(
name|binpath
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_CC_MSVC
specifier|const
name|QString
name|jom
init|=
name|QStandardPaths
operator|::
name|findExecutable
argument_list|(
name|QLatin1String
argument_list|(
literal|"jom.exe"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|jom
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|test_compiler
operator|.
name|setBaseCommands
argument_list|(
name|QLatin1String
argument_list|(
literal|"nmake"
argument_list|)
argument_list|,
name|cmd
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|test_compiler
operator|.
name|setBaseCommands
argument_list|(
name|jom
argument_list|,
name|cmd
argument_list|)
expr_stmt|;
block|}
elif|#
directive|elif
name|defined
argument_list|(
name|Q_CC_MINGW
argument_list|)
name|test_compiler
operator|.
name|setBaseCommands
argument_list|(
literal|"mingw32-make"
argument_list|,
name|cmd
argument_list|)
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
name|test_compiler
operator|.
name|setBaseCommands
argument_list|(
literal|"mmmake"
argument_list|,
name|cmd
argument_list|)
expr_stmt|;
else|#
directive|else
name|test_compiler
operator|.
name|setBaseCommands
argument_list|(
literal|"make"
argument_list|,
name|cmd
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|//Detect the location of the testdata
name|QString
name|subProgram
init|=
name|QLatin1String
argument_list|(
literal|"testdata/simple_app/main.cpp"
argument_list|)
decl_stmt|;
name|base_path
operator|=
name|QFINDTESTDATA
argument_list|(
name|subProgram
argument_list|)
expr_stmt|;
if|if
condition|(
name|base_path
operator|.
name|lastIndexOf
argument_list|(
name|subProgram
argument_list|)
operator|>
literal|0
condition|)
name|base_path
operator|=
name|base_path
operator|.
name|left
argument_list|(
name|base_path
operator|.
name|lastIndexOf
argument_list|(
name|subProgram
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|base_path
operator|=
name|QCoreApplication
operator|::
name|applicationDirPath
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_qmake
operator|::
name|cleanupTestCase
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_qmake
operator|::
name|cleanup
parameter_list|()
block|{
name|test_compiler
operator|.
name|resetArguments
argument_list|()
expr_stmt|;
name|test_compiler
operator|.
name|resetEnvironment
argument_list|()
expr_stmt|;
name|test_compiler
operator|.
name|clearCommandOutput
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|simple_app
name|void
name|tst_qmake
operator|::
name|simple_app
parameter_list|()
block|{
name|QString
name|workDir
init|=
name|base_path
operator|+
literal|"/testdata/simple_app"
decl_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|qmake
argument_list|(
name|workDir
argument_list|,
literal|"simple_app"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|make
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|exists
argument_list|(
name|workDir
argument_list|,
literal|"simple_app"
argument_list|,
name|Exe
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|makeClean
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|exists
argument_list|(
name|workDir
argument_list|,
literal|"simple_app"
argument_list|,
name|Exe
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Should still exist after a make clean
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|makeDistClean
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|test_compiler
operator|.
name|exists
argument_list|(
name|workDir
argument_list|,
literal|"simple_app"
argument_list|,
name|Exe
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Should not exist after a make distclean
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|removeMakefile
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|simple_app_shadowbuild
name|void
name|tst_qmake
operator|::
name|simple_app_shadowbuild
parameter_list|()
block|{
name|QString
name|workDir
init|=
name|base_path
operator|+
literal|"/testdata/simple_app"
decl_stmt|;
name|QString
name|buildDir
init|=
name|base_path
operator|+
literal|"/testdata/simple_app_build"
decl_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|qmake
argument_list|(
name|workDir
argument_list|,
literal|"simple_app"
argument_list|,
name|buildDir
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|make
argument_list|(
name|buildDir
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|exists
argument_list|(
name|buildDir
argument_list|,
literal|"simple_app"
argument_list|,
name|Exe
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|makeClean
argument_list|(
name|buildDir
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|exists
argument_list|(
name|buildDir
argument_list|,
literal|"simple_app"
argument_list|,
name|Exe
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Should still exist after a make clean
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|makeDistClean
argument_list|(
name|buildDir
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|test_compiler
operator|.
name|exists
argument_list|(
name|buildDir
argument_list|,
literal|"simple_app"
argument_list|,
name|Exe
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Should not exist after a make distclean
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|removeMakefile
argument_list|(
name|buildDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|simple_app_shadowbuild2
name|void
name|tst_qmake
operator|::
name|simple_app_shadowbuild2
parameter_list|()
block|{
name|QString
name|workDir
init|=
name|base_path
operator|+
literal|"/testdata/simple_app"
decl_stmt|;
name|QString
name|buildDir
init|=
name|base_path
operator|+
literal|"/testdata/simple_app/build"
decl_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|qmake
argument_list|(
name|workDir
argument_list|,
literal|"simple_app"
argument_list|,
name|buildDir
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|make
argument_list|(
name|buildDir
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|exists
argument_list|(
name|buildDir
argument_list|,
literal|"simple_app"
argument_list|,
name|Exe
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|makeClean
argument_list|(
name|buildDir
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|exists
argument_list|(
name|buildDir
argument_list|,
literal|"simple_app"
argument_list|,
name|Exe
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Should still exist after a make clean
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|makeDistClean
argument_list|(
name|buildDir
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|test_compiler
operator|.
name|exists
argument_list|(
name|buildDir
argument_list|,
literal|"simple_app"
argument_list|,
name|Exe
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Should not exist after a make distclean
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|removeMakefile
argument_list|(
name|buildDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|simple_dll
name|void
name|tst_qmake
operator|::
name|simple_dll
parameter_list|()
block|{
name|QString
name|workDir
init|=
name|base_path
operator|+
literal|"/testdata/simple_dll"
decl_stmt|;
name|QDir
name|D
decl_stmt|;
name|D
operator|.
name|remove
argument_list|(
name|workDir
operator|+
literal|"/Makefile"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|qmake
argument_list|(
name|workDir
argument_list|,
literal|"simple_dll"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|make
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|exists
argument_list|(
name|workDir
argument_list|,
literal|"simple_dll"
argument_list|,
name|Dll
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|makeClean
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|exists
argument_list|(
name|workDir
argument_list|,
literal|"simple_dll"
argument_list|,
name|Dll
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Should still exist after a make clean
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|makeDistClean
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|test_compiler
operator|.
name|exists
argument_list|(
name|workDir
argument_list|,
literal|"simple_dll"
argument_list|,
name|Dll
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Should not exist after a make distclean
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|removeMakefile
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|simple_lib
name|void
name|tst_qmake
operator|::
name|simple_lib
parameter_list|()
block|{
name|QString
name|workDir
init|=
name|base_path
operator|+
literal|"/testdata/simple_lib"
decl_stmt|;
name|QDir
name|D
decl_stmt|;
name|D
operator|.
name|remove
argument_list|(
name|workDir
operator|+
literal|"/Makefile"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|qmake
argument_list|(
name|workDir
argument_list|,
literal|"simple_lib"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|make
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|exists
argument_list|(
name|workDir
argument_list|,
literal|"simple_lib"
argument_list|,
name|Lib
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|makeClean
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|exists
argument_list|(
name|workDir
argument_list|,
literal|"simple_lib"
argument_list|,
name|Lib
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Should still exist after a make clean
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|makeDistClean
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|test_compiler
operator|.
name|exists
argument_list|(
name|workDir
argument_list|,
literal|"simple_lib"
argument_list|,
name|Lib
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Should not exist after a make distclean
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|removeMakefile
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|subdirs
name|void
name|tst_qmake
operator|::
name|subdirs
parameter_list|()
block|{
name|QString
name|workDir
init|=
name|base_path
operator|+
literal|"/testdata/subdirs"
decl_stmt|;
name|QDir
name|D
decl_stmt|;
name|D
operator|.
name|remove
argument_list|(
name|workDir
operator|+
literal|"/simple_app/Makefile"
argument_list|)
expr_stmt|;
name|D
operator|.
name|remove
argument_list|(
name|workDir
operator|+
literal|"/simple_dll/Makefile"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|qmake
argument_list|(
name|workDir
argument_list|,
literal|"subdirs"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|make
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|exists
argument_list|(
name|workDir
operator|+
literal|"/simple_app"
argument_list|,
literal|"simple_app"
argument_list|,
name|Exe
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|exists
argument_list|(
name|workDir
operator|+
literal|"/simple_dll"
argument_list|,
literal|"simple_dll"
argument_list|,
name|Dll
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|makeClean
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
comment|// Should still exist after a make clean
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|exists
argument_list|(
name|workDir
operator|+
literal|"/simple_app"
argument_list|,
literal|"simple_app"
argument_list|,
name|Exe
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|exists
argument_list|(
name|workDir
operator|+
literal|"/simple_dll"
argument_list|,
literal|"simple_dll"
argument_list|,
name|Dll
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Since subdirs templates do not have a make dist clean, we should clean up ourselves
comment|// properly
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|makeDistClean
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|removeMakefile
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|subdir_via_pro_file_extra_target
name|void
name|tst_qmake
operator|::
name|subdir_via_pro_file_extra_target
parameter_list|()
block|{
name|QString
name|workDir
init|=
name|base_path
operator|+
literal|"/testdata/subdir_via_pro_file_extra_target"
decl_stmt|;
name|QDir
name|D
decl_stmt|;
name|D
operator|.
name|remove
argument_list|(
name|workDir
operator|+
literal|"/Makefile"
argument_list|)
expr_stmt|;
name|D
operator|.
name|remove
argument_list|(
name|workDir
operator|+
literal|"/Makefile.subdir"
argument_list|)
expr_stmt|;
name|D
operator|.
name|remove
argument_list|(
name|workDir
operator|+
literal|"/simple/Makefile"
argument_list|)
expr_stmt|;
name|D
operator|.
name|remove
argument_list|(
name|workDir
operator|+
literal|"/simple/Makefile.subdir"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|qmake
argument_list|(
name|workDir
argument_list|,
literal|"subdir_via_pro_file_extra_target"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|make
argument_list|(
name|workDir
argument_list|,
literal|"extratarget"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|functions
name|void
name|tst_qmake
operator|::
name|functions
parameter_list|()
block|{
name|QString
name|workDir
init|=
name|base_path
operator|+
literal|"/testdata/functions"
decl_stmt|;
name|QString
name|buildDir
init|=
name|base_path
operator|+
literal|"/testdata/functions_build"
decl_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|qmake
argument_list|(
name|workDir
argument_list|,
literal|"functions"
argument_list|,
name|buildDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|operators
name|void
name|tst_qmake
operator|::
name|operators
parameter_list|()
block|{
name|QString
name|workDir
init|=
name|base_path
operator|+
literal|"/testdata/operators"
decl_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|qmake
argument_list|(
name|workDir
argument_list|,
literal|"operators"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|variables
name|void
name|tst_qmake
operator|::
name|variables
parameter_list|()
block|{
name|QString
name|workDir
init|=
name|base_path
operator|+
literal|"/testdata/variables"
decl_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|qmake
argument_list|(
name|workDir
argument_list|,
literal|"variables"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|func_export
name|void
name|tst_qmake
operator|::
name|func_export
parameter_list|()
block|{
name|QString
name|workDir
init|=
name|base_path
operator|+
literal|"/testdata/func_export"
decl_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|qmake
argument_list|(
name|workDir
argument_list|,
literal|"func_export"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|func_variables
name|void
name|tst_qmake
operator|::
name|func_variables
parameter_list|()
block|{
name|QString
name|workDir
init|=
name|base_path
operator|+
literal|"/testdata/func_variables"
decl_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|qmake
argument_list|(
name|workDir
argument_list|,
literal|"func_variables"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|comments
name|void
name|tst_qmake
operator|::
name|comments
parameter_list|()
block|{
name|QString
name|workDir
init|=
name|base_path
operator|+
literal|"/testdata/comments"
decl_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|qmake
argument_list|(
name|workDir
argument_list|,
literal|"comments"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|duplicateLibraryEntries
name|void
name|tst_qmake
operator|::
name|duplicateLibraryEntries
parameter_list|()
block|{
name|QVERIFY
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|/* TODO: this test does not work as the problem it tests doesn't happen     until after the parsing of the pro-file and thus has to be tested     by parsing the Makefile. This is not doable with the current     testcompiler framework and has as such been put on hold.      QString workDir = base_path + "/testdata/duplicateLibraryEntries";     QVERIFY(test_compiler.qmake(workDir, "duplicateLibraryEntries")); */
block|}
end_function
begin_function
DECL|function|export_across_file_boundaries
name|void
name|tst_qmake
operator|::
name|export_across_file_boundaries
parameter_list|()
block|{
comment|// This relies on features so we need to set the QMAKEFEATURES environment variable
name|test_compiler
operator|.
name|addToEnvironment
argument_list|(
literal|"QMAKEFEATURES=."
argument_list|)
expr_stmt|;
name|QString
name|workDir
init|=
name|base_path
operator|+
literal|"/testdata/export_across_file_boundaries"
decl_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|qmake
argument_list|(
name|workDir
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|include_dir
name|void
name|tst_qmake
operator|::
name|include_dir
parameter_list|()
block|{
name|QString
name|workDir
init|=
name|base_path
operator|+
literal|"/testdata/include_dir"
decl_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|qmake
argument_list|(
name|workDir
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|make
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|exists
argument_list|(
name|workDir
argument_list|,
literal|"foo"
argument_list|,
name|Exe
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|makeDistClean
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|buildDir
init|=
name|base_path
operator|+
literal|"/testdata/include_dir_build"
decl_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|qmake
argument_list|(
name|workDir
argument_list|,
literal|"foo"
argument_list|,
name|buildDir
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|make
argument_list|(
name|buildDir
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|exists
argument_list|(
name|buildDir
argument_list|,
literal|"foo"
argument_list|,
name|Exe
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|makeDistClean
argument_list|(
name|buildDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|include_pwd
name|void
name|tst_qmake
operator|::
name|include_pwd
parameter_list|()
block|{
name|QString
name|workDir
init|=
name|base_path
operator|+
literal|"/testdata/include_pwd"
decl_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|qmake
argument_list|(
name|workDir
argument_list|,
literal|"include_pwd"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|make
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|makeDistClean
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|install_files
name|void
name|tst_qmake
operator|::
name|install_files
parameter_list|()
block|{
name|QString
name|workDir
init|=
name|base_path
operator|+
literal|"/testdata/shadow_files"
decl_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|qmake
argument_list|(
name|workDir
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|make
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|exists
argument_list|(
name|workDir
argument_list|,
literal|"foo"
argument_list|,
name|Exe
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|make
argument_list|(
name|workDir
argument_list|,
literal|"install"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|exists
argument_list|(
name|workDir
operator|+
literal|"/dist"
argument_list|,
literal|"foo"
argument_list|,
name|Exe
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|exists
argument_list|(
name|workDir
operator|+
literal|"/dist"
argument_list|,
literal|"test.txt"
argument_list|,
name|Plain
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|make
argument_list|(
name|workDir
argument_list|,
literal|"uninstall"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|makeDistClean
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|buildDir
init|=
name|base_path
operator|+
literal|"/testdata/shadow_files_build"
decl_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|qmake
argument_list|(
name|workDir
argument_list|,
literal|"foo"
argument_list|,
name|buildDir
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|make
argument_list|(
name|buildDir
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|exists
argument_list|(
name|buildDir
argument_list|,
literal|"foo"
argument_list|,
name|Exe
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|make
argument_list|(
name|buildDir
argument_list|,
literal|"install"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|exists
argument_list|(
name|workDir
operator|+
literal|"/dist"
argument_list|,
literal|"foo"
argument_list|,
name|Exe
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|exists
argument_list|(
name|workDir
operator|+
literal|"/dist"
argument_list|,
literal|"test.txt"
argument_list|,
name|Plain
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|exists
argument_list|(
name|workDir
operator|+
literal|"/dist"
argument_list|,
literal|"foo.bar"
argument_list|,
name|Plain
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|make
argument_list|(
name|buildDir
argument_list|,
literal|"uninstall"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|makeDistClean
argument_list|(
name|buildDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|install_depends
name|void
name|tst_qmake
operator|::
name|install_depends
parameter_list|()
block|{
name|QString
name|workDir
init|=
name|base_path
operator|+
literal|"/testdata/install_depends"
decl_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|qmake
argument_list|(
name|workDir
argument_list|,
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|make
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|exists
argument_list|(
name|workDir
argument_list|,
literal|"foo"
argument_list|,
name|Exe
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|make
argument_list|(
name|workDir
argument_list|,
literal|"install"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|exists
argument_list|(
name|workDir
operator|+
literal|"/dist"
argument_list|,
literal|"foo"
argument_list|,
name|Exe
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|exists
argument_list|(
name|workDir
operator|+
literal|"/dist"
argument_list|,
literal|"test1"
argument_list|,
name|Plain
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|exists
argument_list|(
name|workDir
operator|+
literal|"/dist"
argument_list|,
literal|"test2"
argument_list|,
name|Plain
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|make
argument_list|(
name|workDir
argument_list|,
literal|"uninstall"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|makeDistClean
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|quotedfilenames
name|void
name|tst_qmake
operator|::
name|quotedfilenames
parameter_list|()
block|{
name|QString
name|workDir
init|=
name|base_path
operator|+
literal|"/testdata/quotedfilenames"
decl_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|qmake
argument_list|(
name|workDir
argument_list|,
literal|"quotedfilenames"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|makeClean
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|make
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|exists
argument_list|(
name|workDir
argument_list|,
literal|"quotedfilenames"
argument_list|,
name|Exe
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|prompt
name|void
name|tst_qmake
operator|::
name|prompt
parameter_list|()
block|{
if|#
directive|if
literal|0
block|QProcess qmake;     qmake.setReadChannelMode(QProcess::MergedChannels);     qmake.setWorkingDirectory(QLatin1String("testdata/prompt"));     qmake.start(QLatin1String("qmake CONFIG-=debug_and_release CONFIG-=debug CONFIG+=release"),                 QIODevice::Text | QIODevice::ReadWrite);     QVERIFY(qmake.waitForStarted(20000));     QByteArray read = qmake.readAll();     qDebug()<< read;     QCOMPARE(read, QByteArray("Project PROMPT: Prompteroo? "));     qmake.write("promptetiprompt\n");     QVERIFY(qmake.waitForFinished(20000));
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|one_space
name|void
name|tst_qmake
operator|::
name|one_space
parameter_list|()
block|{
name|QString
name|workDir
init|=
name|base_path
operator|+
literal|"/testdata/one_space"
decl_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|qmake
argument_list|(
name|workDir
argument_list|,
literal|"one_space"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|make
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|exists
argument_list|(
name|workDir
argument_list|,
literal|"one space"
argument_list|,
name|Exe
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|makeClean
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|exists
argument_list|(
name|workDir
argument_list|,
literal|"one space"
argument_list|,
name|Exe
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Should still exist after a make clean
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|makeDistClean
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|test_compiler
operator|.
name|exists
argument_list|(
name|workDir
argument_list|,
literal|"one space"
argument_list|,
name|Exe
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Should not exist after a make distclean
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|removeMakefile
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|findMocs
name|void
name|tst_qmake
operator|::
name|findMocs
parameter_list|()
block|{
name|QString
name|workDir
init|=
name|base_path
operator|+
literal|"/testdata/findMocs"
decl_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|qmake
argument_list|(
name|workDir
argument_list|,
literal|"findMocs"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|make
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|exists
argument_list|(
name|workDir
argument_list|,
literal|"findMocs"
argument_list|,
name|Exe
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|makeClean
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|exists
argument_list|(
name|workDir
argument_list|,
literal|"findMocs"
argument_list|,
name|Exe
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|makeDistClean
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|test_compiler
operator|.
name|exists
argument_list|(
name|workDir
argument_list|,
literal|"findMocs"
argument_list|,
name|Exe
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|removeMakefile
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|findDeps
name|void
name|tst_qmake
operator|::
name|findDeps
parameter_list|()
block|{
name|QString
name|workDir
init|=
name|base_path
operator|+
literal|"/testdata/findDeps"
decl_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|qmake
argument_list|(
name|workDir
argument_list|,
literal|"findDeps"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|make
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|exists
argument_list|(
name|workDir
argument_list|,
literal|"findDeps"
argument_list|,
name|Exe
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|makeClean
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|exists
argument_list|(
name|workDir
argument_list|,
literal|"findDeps"
argument_list|,
name|Exe
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|makeDistClean
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|test_compiler
operator|.
name|exists
argument_list|(
name|workDir
argument_list|,
literal|"findDeps"
argument_list|,
name|Exe
argument_list|,
literal|"1.0.0"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|removeMakefile
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_struct
DECL|struct|TempFile
struct|struct
name|TempFile
super|:
name|QFile
block|{
DECL|function|TempFile
name|TempFile
parameter_list|(
name|QString
name|filename
parameter_list|)
member_init_list|:
name|QFile
argument_list|(
name|filename
argument_list|)
block|{     }
DECL|function|~TempFile
name|~
name|TempFile
parameter_list|()
block|{
if|if
condition|(
name|this
operator|->
name|exists
argument_list|()
condition|)
name|this
operator|->
name|remove
argument_list|()
expr_stmt|;
block|}
block|}
struct|;
end_struct
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_MAC
argument_list|)
end_if
begin_function
DECL|function|bundle_spaces
name|void
name|tst_qmake
operator|::
name|bundle_spaces
parameter_list|()
block|{
name|QString
name|workDir
init|=
name|base_path
operator|+
literal|"/testdata/bundle-spaces"
decl_stmt|;
comment|// We set up alternate arguments here, to make sure we're testing Mac
comment|// Bundles and since this might be the wrong output we rely on dry-running
comment|// make (-n).
name|test_compiler
operator|.
name|setArguments
argument_list|(
literal|"-n"
argument_list|,
literal|"-spec macx-clang"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|qmake
argument_list|(
name|workDir
argument_list|,
literal|"bundle-spaces"
argument_list|)
argument_list|)
expr_stmt|;
name|TempFile
name|non_existing_file
argument_list|(
name|workDir
operator|+
literal|"/non-existing file"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|non_existing_file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// Make fails: no rule to make "non-existing file"
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|make
argument_list|(
name|workDir
argument_list|,
name|QString
argument_list|()
argument_list|,
literal|true
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|non_existing_file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|non_existing_file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
comment|// Aha!
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|make
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
comment|// Cleanup
name|QVERIFY
argument_list|(
name|non_existing_file
operator|.
name|remove
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|non_existing_file
operator|.
name|exists
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|removeMakefile
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// defined(Q_OS_MAC)
end_comment
begin_function
DECL|function|includefunction
name|void
name|tst_qmake
operator|::
name|includefunction
parameter_list|()
block|{
name|QString
name|workDir
init|=
name|base_path
operator|+
literal|"/testdata/include_function"
decl_stmt|;
name|QRegExp
name|warningMsg
argument_list|(
literal|"Include file .* not found"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|qmake
argument_list|(
name|workDir
argument_list|,
literal|"include_existing_file"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|test_compiler
operator|.
name|commandOutput
argument_list|()
operator|.
name|contains
argument_list|(
name|warningMsg
argument_list|)
argument_list|)
expr_stmt|;
comment|// test include()  usage on a missing file
name|test_compiler
operator|.
name|clearCommandOutput
argument_list|()
expr_stmt|;
name|workDir
operator|=
name|base_path
operator|+
literal|"/testdata/include_function"
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|qmake
argument_list|(
name|workDir
argument_list|,
literal|"include_missing_file"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|commandOutput
argument_list|()
operator|.
name|contains
argument_list|(
name|warningMsg
argument_list|)
argument_list|)
expr_stmt|;
comment|// test include() usage on a missing file when all function parameters are used
name|test_compiler
operator|.
name|clearCommandOutput
argument_list|()
expr_stmt|;
name|workDir
operator|=
name|base_path
operator|+
literal|"/testdata/include_function"
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|qmake
argument_list|(
name|workDir
argument_list|,
literal|"include_missing_file2"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|commandOutput
argument_list|()
operator|.
name|contains
argument_list|(
name|warningMsg
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|substitutes
name|void
name|tst_qmake
operator|::
name|substitutes
parameter_list|()
block|{
name|QString
name|workDir
init|=
name|base_path
operator|+
literal|"/testdata/substitutes"
decl_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|qmake
argument_list|(
name|workDir
argument_list|,
literal|"test"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|exists
argument_list|(
name|workDir
argument_list|,
literal|"test"
argument_list|,
name|Plain
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|exists
argument_list|(
name|workDir
argument_list|,
literal|"sub/test2"
argument_list|,
name|Plain
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|exists
argument_list|(
name|workDir
argument_list|,
literal|"sub/indirect_test.txt"
argument_list|,
name|Plain
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|makeDistClean
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|buildDir
init|=
name|base_path
operator|+
literal|"/testdata/substitutes_build"
decl_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|qmake
argument_list|(
name|workDir
argument_list|,
literal|"test"
argument_list|,
name|buildDir
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|exists
argument_list|(
name|buildDir
argument_list|,
literal|"test"
argument_list|,
name|Plain
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|exists
argument_list|(
name|buildDir
argument_list|,
literal|"sub/test2"
argument_list|,
name|Plain
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|exists
argument_list|(
name|buildDir
argument_list|,
literal|"sub/indirect_test.txt"
argument_list|,
name|Plain
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QFile
name|copySource
argument_list|(
name|workDir
operator|+
literal|"/copy.txt"
argument_list|)
decl_stmt|;
name|QFile
name|copyDestination
argument_list|(
name|buildDir
operator|+
literal|"/copy_test.txt"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|copySource
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|copyDestination
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|copySource
operator|.
name|readAll
argument_list|()
argument_list|,
name|copyDestination
operator|.
name|readAll
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|makeDistClean
argument_list|(
name|buildDir
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|project
name|void
name|tst_qmake
operator|::
name|project
parameter_list|()
block|{
name|QString
name|workDir
init|=
name|base_path
operator|+
literal|"/testdata/project"
decl_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|qmakeProject
argument_list|(
name|workDir
argument_list|,
literal|"project"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|exists
argument_list|(
name|workDir
argument_list|,
literal|"project.pro"
argument_list|,
name|Plain
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|qmake
argument_list|(
name|workDir
argument_list|,
literal|"project"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|exists
argument_list|(
name|workDir
argument_list|,
literal|"Makefile"
argument_list|,
name|Plain
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|make
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|exists
argument_list|(
name|workDir
argument_list|,
literal|"project"
argument_list|,
name|Exe
argument_list|,
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|makeDistClean
argument_list|(
name|workDir
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|removeProject
argument_list|(
name|workDir
argument_list|,
literal|"project"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|proFileCache
name|void
name|tst_qmake
operator|::
name|proFileCache
parameter_list|()
block|{
name|QString
name|workDir
init|=
name|base_path
operator|+
literal|"/testdata/pro_file_cache"
decl_stmt|;
name|QVERIFY
argument_list|(
name|test_compiler
operator|.
name|qmake
argument_list|(
name|workDir
argument_list|,
literal|"pro_file_cache"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_qmake
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qmake.moc"
end_include
end_unit
