begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qgl.h>
end_include
begin_include
include|#
directive|include
file|<qglpixelbuffer.h>
end_include
begin_include
include|#
directive|include
file|<qglframebufferobject.h>
end_include
begin_include
include|#
directive|include
file|<qglcolormap.h>
end_include
begin_include
include|#
directive|include
file|<qpaintengine.h>
end_include
begin_include
include|#
directive|include
file|<QGraphicsView>
end_include
begin_include
include|#
directive|include
file|<QGraphicsProxyWidget>
end_include
begin_include
include|#
directive|include
file|<QVBoxLayout>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
end_ifdef
begin_include
include|#
directive|include
file|<qplatformpixmap_qpa.h>
end_include
begin_include
include|#
directive|include
file|<QtOpenGL/private/qgl_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qimage_p.h>
end_include
begin_include
include|#
directive|include
file|<QtGui/private/qimagepixmapcleanuphooks_p.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//TESTED_CLASS=
end_comment
begin_comment
comment|//TESTED_FILES=
end_comment
begin_class
DECL|class|tst_QGL
class|class
name|tst_QGL
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QGL
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_QGL
parameter_list|()
destructor_decl|;
private|private
name|slots
private|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|getSetCheck
parameter_list|()
function_decl|;
name|void
name|openGLVersionCheck
parameter_list|()
function_decl|;
name|void
name|graphicsViewClipping
parameter_list|()
function_decl|;
name|void
name|partialGLWidgetUpdates_data
parameter_list|()
function_decl|;
name|void
name|partialGLWidgetUpdates
parameter_list|()
function_decl|;
name|void
name|glWidgetWithAlpha
parameter_list|()
function_decl|;
name|void
name|glWidgetRendering
parameter_list|()
function_decl|;
name|void
name|glFBOSimpleRendering
parameter_list|()
function_decl|;
name|void
name|glFBORendering
parameter_list|()
function_decl|;
name|void
name|multipleFBOInterleavedRendering
parameter_list|()
function_decl|;
name|void
name|glFBOUseInGLWidget
parameter_list|()
function_decl|;
name|void
name|glPBufferRendering
parameter_list|()
function_decl|;
name|void
name|glWidgetReparent
parameter_list|()
function_decl|;
name|void
name|glWidgetRenderPixmap
parameter_list|()
function_decl|;
name|void
name|colormap
parameter_list|()
function_decl|;
name|void
name|fboFormat
parameter_list|()
function_decl|;
name|void
name|testDontCrashOnDanglingResources
parameter_list|()
function_decl|;
name|void
name|replaceClipping
parameter_list|()
function_decl|;
name|void
name|clipTest
parameter_list|()
function_decl|;
name|void
name|destroyFBOAfterContext
parameter_list|()
function_decl|;
name|void
name|shareRegister
parameter_list|()
function_decl|;
name|void
name|qglContextDefaultBindTexture
parameter_list|()
function_decl|;
name|void
name|textureCleanup
parameter_list|()
function_decl|;
name|void
name|threadImages
parameter_list|()
function_decl|;
name|void
name|nullRectCrash
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_constructor
DECL|function|tst_QGL
name|tst_QGL
operator|::
name|tst_QGL
parameter_list|()
block|{ }
end_constructor
begin_destructor
DECL|function|~tst_QGL
name|tst_QGL
operator|::
name|~
name|tst_QGL
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|initTestCase
name|void
name|tst_QGL
operator|::
name|initTestCase
parameter_list|()
block|{
name|QGLWidget
name|glWidget
decl_stmt|;
if|if
condition|(
operator|!
name|glWidget
operator|.
name|isValid
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"QGL is not supported on the test system"
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|MyGLContext
class|class
name|MyGLContext
super|:
specifier|public
name|QGLContext
block|{
public|public:
DECL|function|MyGLContext
name|MyGLContext
parameter_list|(
specifier|const
name|QGLFormat
modifier|&
name|format
parameter_list|)
member_init_list|:
name|QGLContext
argument_list|(
name|format
argument_list|)
block|{}
DECL|function|windowCreated
name|bool
name|windowCreated
parameter_list|()
specifier|const
block|{
return|return
name|QGLContext
operator|::
name|windowCreated
argument_list|()
return|;
block|}
DECL|function|setWindowCreated
name|void
name|setWindowCreated
parameter_list|(
name|bool
name|on
parameter_list|)
block|{
name|QGLContext
operator|::
name|setWindowCreated
argument_list|(
name|on
argument_list|)
expr_stmt|;
block|}
DECL|function|initialized
name|bool
name|initialized
parameter_list|()
specifier|const
block|{
return|return
name|QGLContext
operator|::
name|initialized
argument_list|()
return|;
block|}
DECL|function|setInitialized
name|void
name|setInitialized
parameter_list|(
name|bool
name|on
parameter_list|)
block|{
name|QGLContext
operator|::
name|setInitialized
argument_list|(
name|on
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|MyGLWidget
class|class
name|MyGLWidget
super|:
specifier|public
name|QGLWidget
block|{
public|public:
DECL|function|MyGLWidget
name|MyGLWidget
parameter_list|()
member_init_list|:
name|QGLWidget
argument_list|()
block|{}
DECL|function|autoBufferSwap
name|bool
name|autoBufferSwap
parameter_list|()
specifier|const
block|{
return|return
name|QGLWidget
operator|::
name|autoBufferSwap
argument_list|()
return|;
block|}
DECL|function|setAutoBufferSwap
name|void
name|setAutoBufferSwap
parameter_list|(
name|bool
name|on
parameter_list|)
block|{
name|QGLWidget
operator|::
name|setAutoBufferSwap
argument_list|(
name|on
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|appDefaultDepth
specifier|static
name|int
name|appDefaultDepth
parameter_list|()
block|{
specifier|static
name|int
name|depth
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|depth
operator|==
literal|0
condition|)
block|{
name|QPixmap
name|pm
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|depth
operator|=
name|pm
operator|.
name|depth
argument_list|()
expr_stmt|;
block|}
return|return
name|depth
return|;
block|}
end_function
begin_comment
comment|// Using INT_MIN and INT_MAX will cause failures on systems
end_comment
begin_comment
comment|// where "int" is 64-bit, so use the explicit values instead.
end_comment
begin_define
DECL|macro|TEST_INT_MIN
define|#
directive|define
name|TEST_INT_MIN
value|(-2147483647 - 1)
end_define
begin_define
DECL|macro|TEST_INT_MAX
define|#
directive|define
name|TEST_INT_MAX
value|2147483647
end_define
begin_comment
comment|// Testing get/set functions
end_comment
begin_function
DECL|function|getSetCheck
name|void
name|tst_QGL
operator|::
name|getSetCheck
parameter_list|()
block|{
name|QGLFormat
name|obj1
decl_stmt|;
comment|// int QGLFormat::depthBufferSize()
comment|// void QGLFormat::setDepthBufferSize(int)
name|QCOMPARE
argument_list|(
operator|-
literal|1
argument_list|,
name|obj1
operator|.
name|depthBufferSize
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setDepthBufferSize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0
argument_list|,
name|obj1
operator|.
name|depthBufferSize
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QGLFormat::setDepthBufferSize: Cannot set negative depth buffer size -2147483648"
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setDepthBufferSize
argument_list|(
name|TEST_INT_MIN
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0
argument_list|,
name|obj1
operator|.
name|depthBufferSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Makes no sense with a negative buffer size
name|obj1
operator|.
name|setDepthBufferSize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QGLFormat::setDepthBufferSize: Cannot set negative depth buffer size -1"
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setDepthBufferSize
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|3
argument_list|,
name|obj1
operator|.
name|depthBufferSize
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setDepthBufferSize
argument_list|(
name|TEST_INT_MAX
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|TEST_INT_MAX
argument_list|,
name|obj1
operator|.
name|depthBufferSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// int QGLFormat::accumBufferSize()
comment|// void QGLFormat::setAccumBufferSize(int)
name|QCOMPARE
argument_list|(
operator|-
literal|1
argument_list|,
name|obj1
operator|.
name|accumBufferSize
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setAccumBufferSize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0
argument_list|,
name|obj1
operator|.
name|accumBufferSize
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QGLFormat::setAccumBufferSize: Cannot set negative accumulate buffer size -2147483648"
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setAccumBufferSize
argument_list|(
name|TEST_INT_MIN
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0
argument_list|,
name|obj1
operator|.
name|accumBufferSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Makes no sense with a negative buffer size
name|obj1
operator|.
name|setAccumBufferSize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QGLFormat::setAccumBufferSize: Cannot set negative accumulate buffer size -1"
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setAccumBufferSize
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|3
argument_list|,
name|obj1
operator|.
name|accumBufferSize
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setAccumBufferSize
argument_list|(
name|TEST_INT_MAX
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|TEST_INT_MAX
argument_list|,
name|obj1
operator|.
name|accumBufferSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// int QGLFormat::redBufferSize()
comment|// void QGLFormat::setRedBufferSize(int)
name|QCOMPARE
argument_list|(
operator|-
literal|1
argument_list|,
name|obj1
operator|.
name|redBufferSize
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setRedBufferSize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0
argument_list|,
name|obj1
operator|.
name|redBufferSize
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QGLFormat::setRedBufferSize: Cannot set negative red buffer size -2147483648"
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setRedBufferSize
argument_list|(
name|TEST_INT_MIN
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0
argument_list|,
name|obj1
operator|.
name|redBufferSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Makes no sense with a negative buffer size
name|obj1
operator|.
name|setRedBufferSize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QGLFormat::setRedBufferSize: Cannot set negative red buffer size -1"
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setRedBufferSize
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|3
argument_list|,
name|obj1
operator|.
name|redBufferSize
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setRedBufferSize
argument_list|(
name|TEST_INT_MAX
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|TEST_INT_MAX
argument_list|,
name|obj1
operator|.
name|redBufferSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// int QGLFormat::greenBufferSize()
comment|// void QGLFormat::setGreenBufferSize(int)
name|QCOMPARE
argument_list|(
operator|-
literal|1
argument_list|,
name|obj1
operator|.
name|greenBufferSize
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setGreenBufferSize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0
argument_list|,
name|obj1
operator|.
name|greenBufferSize
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QGLFormat::setGreenBufferSize: Cannot set negative green buffer size -2147483648"
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setGreenBufferSize
argument_list|(
name|TEST_INT_MIN
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0
argument_list|,
name|obj1
operator|.
name|greenBufferSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Makes no sense with a negative buffer size
name|obj1
operator|.
name|setGreenBufferSize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QGLFormat::setGreenBufferSize: Cannot set negative green buffer size -1"
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setGreenBufferSize
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|3
argument_list|,
name|obj1
operator|.
name|greenBufferSize
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setGreenBufferSize
argument_list|(
name|TEST_INT_MAX
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|TEST_INT_MAX
argument_list|,
name|obj1
operator|.
name|greenBufferSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// int QGLFormat::blueBufferSize()
comment|// void QGLFormat::setBlueBufferSize(int)
name|QCOMPARE
argument_list|(
operator|-
literal|1
argument_list|,
name|obj1
operator|.
name|blueBufferSize
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setBlueBufferSize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0
argument_list|,
name|obj1
operator|.
name|blueBufferSize
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QGLFormat::setBlueBufferSize: Cannot set negative blue buffer size -2147483648"
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setBlueBufferSize
argument_list|(
name|TEST_INT_MIN
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0
argument_list|,
name|obj1
operator|.
name|blueBufferSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Makes no sense with a negative buffer size
name|obj1
operator|.
name|setBlueBufferSize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QGLFormat::setBlueBufferSize: Cannot set negative blue buffer size -1"
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setBlueBufferSize
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|3
argument_list|,
name|obj1
operator|.
name|blueBufferSize
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setBlueBufferSize
argument_list|(
name|TEST_INT_MAX
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|TEST_INT_MAX
argument_list|,
name|obj1
operator|.
name|blueBufferSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// int QGLFormat::alphaBufferSize()
comment|// void QGLFormat::setAlphaBufferSize(int)
name|QCOMPARE
argument_list|(
operator|-
literal|1
argument_list|,
name|obj1
operator|.
name|alphaBufferSize
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|false
argument_list|,
name|obj1
operator|.
name|alpha
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|AlphaChannel
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|NoAlphaChannel
argument_list|)
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setAlphaBufferSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|true
argument_list|,
name|obj1
operator|.
name|alpha
argument_list|()
argument_list|)
expr_stmt|;
comment|// setAlphaBufferSize() enables alpha.
name|QCOMPARE
argument_list|(
literal|1
argument_list|,
name|obj1
operator|.
name|alphaBufferSize
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QGLFormat::setAlphaBufferSize: Cannot set negative alpha buffer size -2147483648"
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setAlphaBufferSize
argument_list|(
name|TEST_INT_MIN
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|1
argument_list|,
name|obj1
operator|.
name|alphaBufferSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Makes no sense with a negative buffer size
name|obj1
operator|.
name|setAlphaBufferSize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QGLFormat::setAlphaBufferSize: Cannot set negative alpha buffer size -1"
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setAlphaBufferSize
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|3
argument_list|,
name|obj1
operator|.
name|alphaBufferSize
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setAlphaBufferSize
argument_list|(
name|TEST_INT_MAX
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|TEST_INT_MAX
argument_list|,
name|obj1
operator|.
name|alphaBufferSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// int QGLFormat::stencilBufferSize()
comment|// void QGLFormat::setStencilBufferSize(int)
name|QCOMPARE
argument_list|(
operator|-
literal|1
argument_list|,
name|obj1
operator|.
name|stencilBufferSize
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setStencilBufferSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|1
argument_list|,
name|obj1
operator|.
name|stencilBufferSize
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QGLFormat::setStencilBufferSize: Cannot set negative stencil buffer size -2147483648"
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setStencilBufferSize
argument_list|(
name|TEST_INT_MIN
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|1
argument_list|,
name|obj1
operator|.
name|stencilBufferSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// Makes no sense with a negative buffer size
name|obj1
operator|.
name|setStencilBufferSize
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QGLFormat::setStencilBufferSize: Cannot set negative stencil buffer size -1"
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setStencilBufferSize
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|3
argument_list|,
name|obj1
operator|.
name|stencilBufferSize
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setStencilBufferSize
argument_list|(
name|TEST_INT_MAX
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|TEST_INT_MAX
argument_list|,
name|obj1
operator|.
name|stencilBufferSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// bool QGLFormat::sampleBuffers()
comment|// void QGLFormat::setSampleBuffers(bool)
name|QCOMPARE
argument_list|(
literal|false
argument_list|,
name|obj1
operator|.
name|sampleBuffers
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|SampleBuffers
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|NoSampleBuffers
argument_list|)
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setSampleBuffers
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|false
argument_list|,
name|obj1
operator|.
name|sampleBuffers
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|NoSampleBuffers
argument_list|)
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setSampleBuffers
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|true
argument_list|,
name|obj1
operator|.
name|sampleBuffers
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|SampleBuffers
argument_list|)
argument_list|)
expr_stmt|;
comment|// int QGLFormat::samples()
comment|// void QGLFormat::setSamples(int)
name|QCOMPARE
argument_list|(
operator|-
literal|1
argument_list|,
name|obj1
operator|.
name|samples
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setSamples
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0
argument_list|,
name|obj1
operator|.
name|samples
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QGLFormat::setSamples: Cannot have negative number of samples per pixel -2147483648"
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setSamples
argument_list|(
name|TEST_INT_MIN
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0
argument_list|,
name|obj1
operator|.
name|samples
argument_list|()
argument_list|)
expr_stmt|;
comment|// Makes no sense with a negative sample size
name|obj1
operator|.
name|setSamples
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QGLFormat::setSamples: Cannot have negative number of samples per pixel -1"
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setSamples
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|3
argument_list|,
name|obj1
operator|.
name|samples
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setSamples
argument_list|(
name|TEST_INT_MAX
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|TEST_INT_MAX
argument_list|,
name|obj1
operator|.
name|samples
argument_list|()
argument_list|)
expr_stmt|;
comment|// int QGLFormat::swapInterval()
comment|// void QGLFormat::setSwapInterval(int)
name|QCOMPARE
argument_list|(
operator|-
literal|1
argument_list|,
name|obj1
operator|.
name|swapInterval
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setSwapInterval
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0
argument_list|,
name|obj1
operator|.
name|swapInterval
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setSwapInterval
argument_list|(
name|TEST_INT_MIN
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|TEST_INT_MIN
argument_list|,
name|obj1
operator|.
name|swapInterval
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setSwapInterval
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|-
literal|1
argument_list|,
name|obj1
operator|.
name|swapInterval
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setSwapInterval
argument_list|(
name|TEST_INT_MAX
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|TEST_INT_MAX
argument_list|,
name|obj1
operator|.
name|swapInterval
argument_list|()
argument_list|)
expr_stmt|;
comment|// bool QGLFormat::doubleBuffer()
comment|// void QGLFormat::setDoubleBuffer(bool)
name|QCOMPARE
argument_list|(
literal|true
argument_list|,
name|obj1
operator|.
name|doubleBuffer
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|DoubleBuffer
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|SingleBuffer
argument_list|)
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setDoubleBuffer
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|false
argument_list|,
name|obj1
operator|.
name|doubleBuffer
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|DoubleBuffer
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|SingleBuffer
argument_list|)
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setDoubleBuffer
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|true
argument_list|,
name|obj1
operator|.
name|doubleBuffer
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|DoubleBuffer
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|SingleBuffer
argument_list|)
argument_list|)
expr_stmt|;
comment|// bool QGLFormat::depth()
comment|// void QGLFormat::setDepth(bool)
name|QCOMPARE
argument_list|(
literal|true
argument_list|,
name|obj1
operator|.
name|depth
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|DepthBuffer
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|NoDepthBuffer
argument_list|)
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setDepth
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|false
argument_list|,
name|obj1
operator|.
name|depth
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|DepthBuffer
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|NoDepthBuffer
argument_list|)
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setDepth
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|true
argument_list|,
name|obj1
operator|.
name|depth
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|DepthBuffer
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|NoDepthBuffer
argument_list|)
argument_list|)
expr_stmt|;
comment|// bool QGLFormat::rgba()
comment|// void QGLFormat::setRgba(bool)
name|QCOMPARE
argument_list|(
literal|true
argument_list|,
name|obj1
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|Rgba
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|ColorIndex
argument_list|)
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setRgba
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|false
argument_list|,
name|obj1
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|Rgba
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|ColorIndex
argument_list|)
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setRgba
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|true
argument_list|,
name|obj1
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|Rgba
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|ColorIndex
argument_list|)
argument_list|)
expr_stmt|;
comment|// bool QGLFormat::alpha()
comment|// void QGLFormat::setAlpha(bool)
name|QVERIFY
argument_list|(
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|AlphaChannel
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|NoAlphaChannel
argument_list|)
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setAlpha
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|false
argument_list|,
name|obj1
operator|.
name|alpha
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|AlphaChannel
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|NoAlphaChannel
argument_list|)
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setAlpha
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|true
argument_list|,
name|obj1
operator|.
name|alpha
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|AlphaChannel
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|NoAlphaChannel
argument_list|)
argument_list|)
expr_stmt|;
comment|// bool QGLFormat::accum()
comment|// void QGLFormat::setAccum(bool)
name|obj1
operator|.
name|setAccumBufferSize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|false
argument_list|,
name|obj1
operator|.
name|accum
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|AccumBuffer
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|NoAccumBuffer
argument_list|)
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setAccum
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|false
argument_list|,
name|obj1
operator|.
name|accum
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|AccumBuffer
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|NoAccumBuffer
argument_list|)
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setAccum
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|true
argument_list|,
name|obj1
operator|.
name|accum
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|AccumBuffer
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|NoAccumBuffer
argument_list|)
argument_list|)
expr_stmt|;
comment|// bool QGLFormat::stencil()
comment|// void QGLFormat::setStencil(bool)
name|QCOMPARE
argument_list|(
literal|true
argument_list|,
name|obj1
operator|.
name|stencil
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|StencilBuffer
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|NoStencilBuffer
argument_list|)
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setStencil
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|false
argument_list|,
name|obj1
operator|.
name|stencil
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|StencilBuffer
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|NoStencilBuffer
argument_list|)
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setStencil
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|true
argument_list|,
name|obj1
operator|.
name|stencil
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|StencilBuffer
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|NoStencilBuffer
argument_list|)
argument_list|)
expr_stmt|;
comment|// bool QGLFormat::stereo()
comment|// void QGLFormat::setStereo(bool)
name|QCOMPARE
argument_list|(
literal|false
argument_list|,
name|obj1
operator|.
name|stereo
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|StereoBuffers
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|NoStereoBuffers
argument_list|)
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setStereo
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|false
argument_list|,
name|obj1
operator|.
name|stereo
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|StereoBuffers
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|NoStereoBuffers
argument_list|)
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setStereo
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|true
argument_list|,
name|obj1
operator|.
name|stereo
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|StereoBuffers
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|NoStereoBuffers
argument_list|)
argument_list|)
expr_stmt|;
comment|// bool QGLFormat::directRendering()
comment|// void QGLFormat::setDirectRendering(bool)
name|QCOMPARE
argument_list|(
literal|true
argument_list|,
name|obj1
operator|.
name|directRendering
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|DirectRendering
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|IndirectRendering
argument_list|)
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setDirectRendering
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|false
argument_list|,
name|obj1
operator|.
name|directRendering
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|DirectRendering
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|IndirectRendering
argument_list|)
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setDirectRendering
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|true
argument_list|,
name|obj1
operator|.
name|directRendering
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|DirectRendering
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|IndirectRendering
argument_list|)
argument_list|)
expr_stmt|;
comment|// bool QGLFormat::overlay()
comment|// void QGLFormat::setOverlay(bool)
name|QCOMPARE
argument_list|(
literal|false
argument_list|,
name|obj1
operator|.
name|hasOverlay
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|HasOverlay
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|NoOverlay
argument_list|)
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setOverlay
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|false
argument_list|,
name|obj1
operator|.
name|hasOverlay
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|HasOverlay
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|NoOverlay
argument_list|)
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setOverlay
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|true
argument_list|,
name|obj1
operator|.
name|hasOverlay
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|HasOverlay
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|obj1
operator|.
name|testOption
argument_list|(
name|QGL
operator|::
name|NoOverlay
argument_list|)
argument_list|)
expr_stmt|;
comment|// int QGLFormat::plane()
comment|// void QGLFormat::setPlane(int)
name|QCOMPARE
argument_list|(
literal|0
argument_list|,
name|obj1
operator|.
name|plane
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setPlane
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0
argument_list|,
name|obj1
operator|.
name|plane
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setPlane
argument_list|(
name|TEST_INT_MIN
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|TEST_INT_MIN
argument_list|,
name|obj1
operator|.
name|plane
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setPlane
argument_list|(
name|TEST_INT_MAX
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|TEST_INT_MAX
argument_list|,
name|obj1
operator|.
name|plane
argument_list|()
argument_list|)
expr_stmt|;
comment|// int QGLFormat::major/minorVersion()
comment|// void QGLFormat::setVersion(int, int)
name|QCOMPARE
argument_list|(
name|obj1
operator|.
name|majorVersion
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|obj1
operator|.
name|minorVersion
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setVersion
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|obj1
operator|.
name|majorVersion
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|obj1
operator|.
name|minorVersion
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QGLFormat::setVersion: Cannot set zero or negative version number 0.1"
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setVersion
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|obj1
operator|.
name|majorVersion
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|obj1
operator|.
name|minorVersion
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QGLFormat::setVersion: Cannot set zero or negative version number 3.-1"
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setVersion
argument_list|(
literal|3
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|obj1
operator|.
name|majorVersion
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|obj1
operator|.
name|minorVersion
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setVersion
argument_list|(
name|TEST_INT_MAX
argument_list|,
name|TEST_INT_MAX
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|obj1
operator|.
name|majorVersion
argument_list|()
argument_list|,
name|TEST_INT_MAX
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|obj1
operator|.
name|minorVersion
argument_list|()
argument_list|,
name|TEST_INT_MAX
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// operator== and operator!= for QGLFormat
name|QGLFormat
name|format1
decl_stmt|;
name|QGLFormat
name|format2
decl_stmt|;
name|QVERIFY
argument_list|(
name|format1
operator|==
name|format2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|format1
operator|!=
name|format2
operator|)
argument_list|)
expr_stmt|;
name|format1
operator|.
name|setDoubleBuffer
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|format1
operator|==
name|format2
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|format1
operator|!=
name|format2
argument_list|)
expr_stmt|;
name|format2
operator|.
name|setDoubleBuffer
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|format1
operator|==
name|format2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|format1
operator|!=
name|format2
operator|)
argument_list|)
expr_stmt|;
name|format1
operator|.
name|setDepthBufferSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|format1
operator|==
name|format2
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|format1
operator|!=
name|format2
argument_list|)
expr_stmt|;
name|format2
operator|.
name|setDepthBufferSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|format1
operator|==
name|format2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|format1
operator|!=
name|format2
operator|)
argument_list|)
expr_stmt|;
name|format1
operator|.
name|setAccumBufferSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|format1
operator|==
name|format2
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|format1
operator|!=
name|format2
argument_list|)
expr_stmt|;
name|format2
operator|.
name|setAccumBufferSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|format1
operator|==
name|format2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|format1
operator|!=
name|format2
operator|)
argument_list|)
expr_stmt|;
name|format1
operator|.
name|setRedBufferSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|format1
operator|==
name|format2
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|format1
operator|!=
name|format2
argument_list|)
expr_stmt|;
name|format2
operator|.
name|setRedBufferSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|format1
operator|==
name|format2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|format1
operator|!=
name|format2
operator|)
argument_list|)
expr_stmt|;
name|format1
operator|.
name|setGreenBufferSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|format1
operator|==
name|format2
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|format1
operator|!=
name|format2
argument_list|)
expr_stmt|;
name|format2
operator|.
name|setGreenBufferSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|format1
operator|==
name|format2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|format1
operator|!=
name|format2
operator|)
argument_list|)
expr_stmt|;
name|format1
operator|.
name|setBlueBufferSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|format1
operator|==
name|format2
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|format1
operator|!=
name|format2
argument_list|)
expr_stmt|;
name|format2
operator|.
name|setBlueBufferSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|format1
operator|==
name|format2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|format1
operator|!=
name|format2
operator|)
argument_list|)
expr_stmt|;
name|format1
operator|.
name|setAlphaBufferSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|format1
operator|==
name|format2
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|format1
operator|!=
name|format2
argument_list|)
expr_stmt|;
name|format2
operator|.
name|setAlphaBufferSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|format1
operator|==
name|format2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|format1
operator|!=
name|format2
operator|)
argument_list|)
expr_stmt|;
name|format1
operator|.
name|setStencilBufferSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|format1
operator|==
name|format2
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|format1
operator|!=
name|format2
argument_list|)
expr_stmt|;
name|format2
operator|.
name|setStencilBufferSize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|format1
operator|==
name|format2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|format1
operator|!=
name|format2
operator|)
argument_list|)
expr_stmt|;
name|format1
operator|.
name|setSamples
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|format1
operator|==
name|format2
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|format1
operator|!=
name|format2
argument_list|)
expr_stmt|;
name|format2
operator|.
name|setSamples
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|format1
operator|==
name|format2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|format1
operator|!=
name|format2
operator|)
argument_list|)
expr_stmt|;
name|format1
operator|.
name|setSwapInterval
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|format1
operator|==
name|format2
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|format1
operator|!=
name|format2
argument_list|)
expr_stmt|;
name|format2
operator|.
name|setSwapInterval
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|format1
operator|==
name|format2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|format1
operator|!=
name|format2
operator|)
argument_list|)
expr_stmt|;
name|format1
operator|.
name|setPlane
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|format1
operator|==
name|format2
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|format1
operator|!=
name|format2
argument_list|)
expr_stmt|;
name|format2
operator|.
name|setPlane
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|format1
operator|==
name|format2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|format1
operator|!=
name|format2
operator|)
argument_list|)
expr_stmt|;
name|format1
operator|.
name|setVersion
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|format1
operator|==
name|format2
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|format1
operator|!=
name|format2
argument_list|)
expr_stmt|;
name|format2
operator|.
name|setVersion
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|format1
operator|==
name|format2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|format1
operator|!=
name|format2
operator|)
argument_list|)
expr_stmt|;
name|format1
operator|.
name|setProfile
argument_list|(
name|QGLFormat
operator|::
name|CoreProfile
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|format1
operator|==
name|format2
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|format1
operator|!=
name|format2
argument_list|)
expr_stmt|;
name|format2
operator|.
name|setProfile
argument_list|(
name|QGLFormat
operator|::
name|CoreProfile
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|format1
operator|==
name|format2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|format1
operator|!=
name|format2
operator|)
argument_list|)
expr_stmt|;
name|format1
operator|.
name|setOption
argument_list|(
name|QGL
operator|::
name|NoDeprecatedFunctions
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|format1
operator|==
name|format2
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|format1
operator|!=
name|format2
argument_list|)
expr_stmt|;
name|format2
operator|.
name|setOption
argument_list|(
name|QGL
operator|::
name|NoDeprecatedFunctions
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|format1
operator|==
name|format2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|format1
operator|!=
name|format2
operator|)
argument_list|)
expr_stmt|;
comment|// Copy constructor and assignment for QGLFormat.
name|QGLFormat
name|format3
argument_list|(
name|format1
argument_list|)
decl_stmt|;
name|QGLFormat
name|format4
decl_stmt|;
name|QVERIFY
argument_list|(
name|format1
operator|==
name|format3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|format1
operator|!=
name|format4
argument_list|)
expr_stmt|;
name|format4
operator|=
name|format1
expr_stmt|;
name|QVERIFY
argument_list|(
name|format1
operator|==
name|format4
argument_list|)
expr_stmt|;
comment|// Check that modifying a copy doesn't affect the original.
name|format3
operator|.
name|setRedBufferSize
argument_list|(
literal|16
argument_list|)
expr_stmt|;
name|format4
operator|.
name|setPlane
argument_list|(
literal|16
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|format1
operator|.
name|redBufferSize
argument_list|()
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|format1
operator|.
name|plane
argument_list|()
argument_list|,
literal|8
argument_list|)
expr_stmt|;
comment|// Check the QGLFormat constructor that takes an option list.
name|QGLFormat
name|format5
argument_list|(
name|QGL
operator|::
name|DepthBuffer
operator||
name|QGL
operator|::
name|StereoBuffers
operator||
name|QGL
operator|::
name|ColorIndex
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|format5
operator|.
name|depth
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|format5
operator|.
name|stereo
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|format5
operator|.
name|doubleBuffer
argument_list|()
argument_list|)
expr_stmt|;
comment|// From defaultFormat()
name|QVERIFY
argument_list|(
operator|!
name|format5
operator|.
name|hasOverlay
argument_list|()
argument_list|)
expr_stmt|;
comment|// From defaultFormat()
name|QVERIFY
argument_list|(
operator|!
name|format5
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|format5
operator|.
name|plane
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// The default format should be the same as QGLFormat().
name|QVERIFY
argument_list|(
name|QGLFormat
operator|::
name|defaultFormat
argument_list|()
operator|==
name|QGLFormat
argument_list|()
argument_list|)
expr_stmt|;
comment|// Modify the default format and check that it was changed.
name|QGLFormat
operator|::
name|setDefaultFormat
argument_list|(
name|format1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QGLFormat
operator|::
name|defaultFormat
argument_list|()
operator|==
name|format1
argument_list|)
expr_stmt|;
comment|// Restore the default format.
name|QGLFormat
operator|::
name|setDefaultFormat
argument_list|(
name|QGLFormat
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QGLFormat
operator|::
name|defaultFormat
argument_list|()
operator|==
name|QGLFormat
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check the default overlay format's expected values.
name|QGLFormat
name|overlay
argument_list|(
name|QGLFormat
operator|::
name|defaultOverlayFormat
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|overlay
operator|.
name|depthBufferSize
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|overlay
operator|.
name|accumBufferSize
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|overlay
operator|.
name|redBufferSize
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|overlay
operator|.
name|greenBufferSize
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|overlay
operator|.
name|blueBufferSize
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|overlay
operator|.
name|alphaBufferSize
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|overlay
operator|.
name|samples
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|overlay
operator|.
name|swapInterval
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|overlay
operator|.
name|plane
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|overlay
operator|.
name|sampleBuffers
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|overlay
operator|.
name|doubleBuffer
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|overlay
operator|.
name|depth
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|overlay
operator|.
name|rgba
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|overlay
operator|.
name|alpha
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|overlay
operator|.
name|accum
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|overlay
operator|.
name|stencil
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|overlay
operator|.
name|stereo
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|overlay
operator|.
name|directRendering
argument_list|()
argument_list|)
expr_stmt|;
comment|// Only option that should be on.
name|QVERIFY
argument_list|(
operator|!
name|overlay
operator|.
name|hasOverlay
argument_list|()
argument_list|)
expr_stmt|;
comment|// Overlay doesn't need an overlay!
comment|// Modify the default overlay format and check that it was changed.
name|QGLFormat
operator|::
name|setDefaultOverlayFormat
argument_list|(
name|format1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QGLFormat
operator|::
name|defaultOverlayFormat
argument_list|()
operator|==
name|format1
argument_list|)
expr_stmt|;
comment|// Restore the default overlay format.
name|QGLFormat
operator|::
name|setDefaultOverlayFormat
argument_list|(
name|overlay
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QGLFormat
operator|::
name|defaultOverlayFormat
argument_list|()
operator|==
name|overlay
argument_list|)
expr_stmt|;
name|MyGLContext
name|obj2
argument_list|(
name|obj1
argument_list|)
decl_stmt|;
comment|// bool QGLContext::windowCreated()
comment|// void QGLContext::setWindowCreated(bool)
name|obj2
operator|.
name|setWindowCreated
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|false
argument_list|,
name|obj2
operator|.
name|windowCreated
argument_list|()
argument_list|)
expr_stmt|;
name|obj2
operator|.
name|setWindowCreated
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|true
argument_list|,
name|obj2
operator|.
name|windowCreated
argument_list|()
argument_list|)
expr_stmt|;
comment|// bool QGLContext::initialized()
comment|// void QGLContext::setInitialized(bool)
name|obj2
operator|.
name|setInitialized
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|false
argument_list|,
name|obj2
operator|.
name|initialized
argument_list|()
argument_list|)
expr_stmt|;
name|obj2
operator|.
name|setInitialized
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|true
argument_list|,
name|obj2
operator|.
name|initialized
argument_list|()
argument_list|)
expr_stmt|;
name|MyGLWidget
name|obj3
decl_stmt|;
comment|// bool QGLWidget::autoBufferSwap()
comment|// void QGLWidget::setAutoBufferSwap(bool)
name|obj3
operator|.
name|setAutoBufferSwap
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|false
argument_list|,
name|obj3
operator|.
name|autoBufferSwap
argument_list|()
argument_list|)
expr_stmt|;
name|obj3
operator|.
name|setAutoBufferSwap
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|true
argument_list|,
name|obj3
operator|.
name|autoBufferSwap
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
end_ifdef
begin_function_decl
name|QT_BEGIN_NAMESPACE
specifier|extern
name|QGLFormat
operator|::
name|OpenGLVersionFlags
name|qOpenGLVersionFlagsFromString
parameter_list|(
specifier|const
name|QString
modifier|&
name|versionString
parameter_list|)
function_decl|;
end_function_decl
begin_function
name|QT_END_NAMESPACE
endif|#
directive|endif
DECL|function|openGLVersionCheck
name|void
name|tst_QGL
operator|::
name|openGLVersionCheck
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
name|QString
name|versionString
decl_stmt|;
name|QGLFormat
operator|::
name|OpenGLVersionFlags
name|expectedFlag
decl_stmt|;
name|QGLFormat
operator|::
name|OpenGLVersionFlags
name|versionFlag
decl_stmt|;
name|versionString
operator|=
literal|"1.1 Irix 6.5"
expr_stmt|;
name|expectedFlag
operator|=
name|QGLFormat
operator|::
name|OpenGL_Version_1_1
expr_stmt|;
name|versionFlag
operator|=
name|qOpenGLVersionFlagsFromString
argument_list|(
name|versionString
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|versionFlag
argument_list|,
name|expectedFlag
argument_list|)
expr_stmt|;
name|versionString
operator|=
literal|"1.2 Microsoft"
expr_stmt|;
name|expectedFlag
operator|=
name|QGLFormat
operator|::
name|OpenGL_Version_1_2
operator||
name|QGLFormat
operator|::
name|OpenGL_Version_1_1
expr_stmt|;
name|versionFlag
operator|=
name|qOpenGLVersionFlagsFromString
argument_list|(
name|versionString
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|versionFlag
argument_list|,
name|expectedFlag
argument_list|)
expr_stmt|;
name|versionString
operator|=
literal|"1.2.1"
expr_stmt|;
name|expectedFlag
operator|=
name|QGLFormat
operator|::
name|OpenGL_Version_1_2
operator||
name|QGLFormat
operator|::
name|OpenGL_Version_1_1
expr_stmt|;
name|versionFlag
operator|=
name|qOpenGLVersionFlagsFromString
argument_list|(
name|versionString
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|versionFlag
argument_list|,
name|expectedFlag
argument_list|)
expr_stmt|;
name|versionString
operator|=
literal|"1.3 NVIDIA"
expr_stmt|;
name|expectedFlag
operator|=
name|QGLFormat
operator|::
name|OpenGL_Version_1_3
operator||
name|QGLFormat
operator|::
name|OpenGL_Version_1_2
operator||
name|QGLFormat
operator|::
name|OpenGL_Version_1_1
expr_stmt|;
name|versionFlag
operator|=
name|qOpenGLVersionFlagsFromString
argument_list|(
name|versionString
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|versionFlag
argument_list|,
name|expectedFlag
argument_list|)
expr_stmt|;
name|versionString
operator|=
literal|"1.4"
expr_stmt|;
name|expectedFlag
operator|=
name|QGLFormat
operator|::
name|OpenGL_Version_1_4
operator||
name|QGLFormat
operator|::
name|OpenGL_Version_1_3
operator||
name|QGLFormat
operator|::
name|OpenGL_Version_1_2
operator||
name|QGLFormat
operator|::
name|OpenGL_Version_1_1
expr_stmt|;
name|versionFlag
operator|=
name|qOpenGLVersionFlagsFromString
argument_list|(
name|versionString
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|versionFlag
argument_list|,
name|expectedFlag
argument_list|)
expr_stmt|;
name|versionString
operator|=
literal|"1.5 NVIDIA"
expr_stmt|;
name|expectedFlag
operator|=
name|QGLFormat
operator|::
name|OpenGL_Version_1_5
operator||
name|QGLFormat
operator|::
name|OpenGL_Version_1_4
operator||
name|QGLFormat
operator|::
name|OpenGL_Version_1_3
operator||
name|QGLFormat
operator|::
name|OpenGL_Version_1_2
operator||
name|QGLFormat
operator|::
name|OpenGL_Version_1_1
expr_stmt|;
name|versionFlag
operator|=
name|qOpenGLVersionFlagsFromString
argument_list|(
name|versionString
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|versionFlag
argument_list|,
name|expectedFlag
argument_list|)
expr_stmt|;
name|versionString
operator|=
literal|"2.0.2 NVIDIA 87.62"
expr_stmt|;
name|expectedFlag
operator|=
name|QGLFormat
operator|::
name|OpenGL_Version_2_0
operator||
name|QGLFormat
operator|::
name|OpenGL_Version_1_5
operator||
name|QGLFormat
operator|::
name|OpenGL_Version_1_4
operator||
name|QGLFormat
operator|::
name|OpenGL_Version_1_3
operator||
name|QGLFormat
operator|::
name|OpenGL_Version_1_2
operator||
name|QGLFormat
operator|::
name|OpenGL_Version_1_1
expr_stmt|;
name|versionFlag
operator|=
name|qOpenGLVersionFlagsFromString
argument_list|(
name|versionString
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|versionFlag
argument_list|,
name|expectedFlag
argument_list|)
expr_stmt|;
name|versionString
operator|=
literal|"2.1 NVIDIA"
expr_stmt|;
name|expectedFlag
operator|=
name|QGLFormat
operator|::
name|OpenGL_Version_2_1
operator||
name|QGLFormat
operator|::
name|OpenGL_Version_2_0
operator||
name|QGLFormat
operator|::
name|OpenGL_Version_1_5
operator||
name|QGLFormat
operator|::
name|OpenGL_Version_1_4
operator||
name|QGLFormat
operator|::
name|OpenGL_Version_1_3
operator||
name|QGLFormat
operator|::
name|OpenGL_Version_1_2
operator||
name|QGLFormat
operator|::
name|OpenGL_Version_1_1
expr_stmt|;
name|versionFlag
operator|=
name|qOpenGLVersionFlagsFromString
argument_list|(
name|versionString
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|versionFlag
argument_list|,
name|expectedFlag
argument_list|)
expr_stmt|;
name|versionString
operator|=
literal|"2.1"
expr_stmt|;
name|expectedFlag
operator|=
name|QGLFormat
operator|::
name|OpenGL_Version_2_1
operator||
name|QGLFormat
operator|::
name|OpenGL_Version_2_0
operator||
name|QGLFormat
operator|::
name|OpenGL_Version_1_5
operator||
name|QGLFormat
operator|::
name|OpenGL_Version_1_4
operator||
name|QGLFormat
operator|::
name|OpenGL_Version_1_3
operator||
name|QGLFormat
operator|::
name|OpenGL_Version_1_2
operator||
name|QGLFormat
operator|::
name|OpenGL_Version_1_1
expr_stmt|;
name|versionFlag
operator|=
name|qOpenGLVersionFlagsFromString
argument_list|(
name|versionString
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|versionFlag
argument_list|,
name|expectedFlag
argument_list|)
expr_stmt|;
name|versionString
operator|=
literal|"OpenGL ES-CM 1.0 ATI"
expr_stmt|;
name|expectedFlag
operator|=
name|QGLFormat
operator|::
name|OpenGL_ES_Common_Version_1_0
operator||
name|QGLFormat
operator|::
name|OpenGL_ES_CommonLite_Version_1_0
expr_stmt|;
name|versionFlag
operator|=
name|qOpenGLVersionFlagsFromString
argument_list|(
name|versionString
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|versionFlag
argument_list|,
name|expectedFlag
argument_list|)
expr_stmt|;
name|versionString
operator|=
literal|"OpenGL ES-CL 1.0 ATI"
expr_stmt|;
name|expectedFlag
operator|=
name|QGLFormat
operator|::
name|OpenGL_ES_CommonLite_Version_1_0
expr_stmt|;
name|versionFlag
operator|=
name|qOpenGLVersionFlagsFromString
argument_list|(
name|versionString
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|versionFlag
argument_list|,
name|expectedFlag
argument_list|)
expr_stmt|;
name|versionString
operator|=
literal|"OpenGL ES-CM 1.1 ATI"
expr_stmt|;
name|expectedFlag
operator|=
name|QGLFormat
operator|::
name|OpenGL_ES_Common_Version_1_1
operator||
name|QGLFormat
operator|::
name|OpenGL_ES_CommonLite_Version_1_1
operator||
name|QGLFormat
operator|::
name|OpenGL_ES_Common_Version_1_0
operator||
name|QGLFormat
operator|::
name|OpenGL_ES_CommonLite_Version_1_0
expr_stmt|;
name|versionFlag
operator|=
name|qOpenGLVersionFlagsFromString
argument_list|(
name|versionString
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|versionFlag
argument_list|,
name|expectedFlag
argument_list|)
expr_stmt|;
name|versionString
operator|=
literal|"OpenGL ES-CL 1.1 ATI"
expr_stmt|;
name|expectedFlag
operator|=
name|QGLFormat
operator|::
name|OpenGL_ES_CommonLite_Version_1_1
operator||
name|QGLFormat
operator|::
name|OpenGL_ES_CommonLite_Version_1_0
expr_stmt|;
name|versionFlag
operator|=
name|qOpenGLVersionFlagsFromString
argument_list|(
name|versionString
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|versionFlag
argument_list|,
name|expectedFlag
argument_list|)
expr_stmt|;
name|versionString
operator|=
literal|"OpenGL ES 2.0 ATI"
expr_stmt|;
name|expectedFlag
operator|=
name|QGLFormat
operator|::
name|OpenGL_ES_Version_2_0
expr_stmt|;
name|versionFlag
operator|=
name|qOpenGLVersionFlagsFromString
argument_list|(
name|versionString
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|versionFlag
argument_list|,
name|expectedFlag
argument_list|)
expr_stmt|;
name|versionString
operator|=
literal|"3.0"
expr_stmt|;
name|expectedFlag
operator|=
name|QGLFormat
operator|::
name|OpenGL_Version_3_0
operator||
name|QGLFormat
operator|::
name|OpenGL_Version_2_1
operator||
name|QGLFormat
operator|::
name|OpenGL_Version_2_0
operator||
name|QGLFormat
operator|::
name|OpenGL_Version_1_5
operator||
name|QGLFormat
operator|::
name|OpenGL_Version_1_4
operator||
name|QGLFormat
operator|::
name|OpenGL_Version_1_3
operator||
name|QGLFormat
operator|::
name|OpenGL_Version_1_2
operator||
name|QGLFormat
operator|::
name|OpenGL_Version_1_1
expr_stmt|;
name|versionFlag
operator|=
name|qOpenGLVersionFlagsFromString
argument_list|(
name|versionString
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|versionFlag
argument_list|,
name|expectedFlag
argument_list|)
expr_stmt|;
name|QGLWidget
name|glWidget
decl_stmt|;
name|glWidget
operator|.
name|show
argument_list|()
expr_stmt|;
name|glWidget
operator|.
name|makeCurrent
argument_list|()
expr_stmt|;
comment|// This is unfortunately the only test we can make on the actual openGLVersionFlags()
comment|// However, the complicated parts are in openGLVersionFlags(const QString&versionString)
comment|// tested above
if|#
directive|if
name|defined
argument_list|(
name|QT_OPENGL_ES_1
argument_list|)
name|QVERIFY
argument_list|(
name|QGLFormat
operator|::
name|openGLVersionFlags
argument_list|()
operator|&
name|QGLFormat
operator|::
name|OpenGL_ES_Common_Version_1_0
argument_list|)
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|QT_OPENGL_ES_2
argument_list|)
name|QVERIFY
argument_list|(
name|QGLFormat
operator|::
name|openGLVersionFlags
argument_list|()
operator|&
name|QGLFormat
operator|::
name|OpenGL_ES_Version_2_0
argument_list|)
expr_stmt|;
else|#
directive|else
name|QVERIFY
argument_list|(
name|QGLFormat
operator|::
name|openGLVersionFlags
argument_list|()
operator|&
name|QGLFormat
operator|::
name|OpenGL_Version_1_1
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|//defined(QT_OPENGL_ES_1)
endif|#
directive|endif
comment|//QT_BUILD_INTERNAL
block|}
end_function
begin_function
DECL|function|fuzzyComparePixels
specifier|static
name|bool
name|fuzzyComparePixels
parameter_list|(
specifier|const
name|QRgb
name|testPixel
parameter_list|,
specifier|const
name|QRgb
name|refPixel
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|line
parameter_list|,
name|int
name|x
init|=
operator|-
literal|1
parameter_list|,
name|int
name|y
init|=
operator|-
literal|1
parameter_list|)
block|{
specifier|static
name|int
name|maxFuzz
init|=
literal|1
decl_stmt|;
specifier|static
name|bool
name|maxFuzzSet
init|=
literal|false
decl_stmt|;
comment|// On 16 bpp systems, we need to allow for more fuzz:
if|if
condition|(
operator|!
name|maxFuzzSet
condition|)
block|{
name|maxFuzzSet
operator|=
literal|true
expr_stmt|;
if|if
condition|(
name|appDefaultDepth
argument_list|()
operator|<
literal|24
condition|)
name|maxFuzz
operator|=
literal|32
expr_stmt|;
block|}
name|int
name|redFuzz
init|=
name|qAbs
argument_list|(
name|qRed
argument_list|(
name|testPixel
argument_list|)
operator|-
name|qRed
argument_list|(
name|refPixel
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|greenFuzz
init|=
name|qAbs
argument_list|(
name|qGreen
argument_list|(
name|testPixel
argument_list|)
operator|-
name|qGreen
argument_list|(
name|refPixel
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|blueFuzz
init|=
name|qAbs
argument_list|(
name|qBlue
argument_list|(
name|testPixel
argument_list|)
operator|-
name|qBlue
argument_list|(
name|refPixel
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|alphaFuzz
init|=
name|qAbs
argument_list|(
name|qAlpha
argument_list|(
name|testPixel
argument_list|)
operator|-
name|qAlpha
argument_list|(
name|refPixel
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|refPixel
operator|!=
literal|0
operator|&&
name|testPixel
operator|==
literal|0
condition|)
block|{
name|QString
name|msg
decl_stmt|;
if|if
condition|(
name|x
operator|>=
literal|0
condition|)
block|{
name|msg
operator|=
name|QString
argument_list|(
literal|"Test pixel [%1, %2] is null (black) when it should be (%3,%4,%5,%6)"
argument_list|)
operator|.
name|arg
argument_list|(
name|x
argument_list|)
operator|.
name|arg
argument_list|(
name|y
argument_list|)
operator|.
name|arg
argument_list|(
name|qRed
argument_list|(
name|refPixel
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|qGreen
argument_list|(
name|refPixel
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|qBlue
argument_list|(
name|refPixel
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|qAlpha
argument_list|(
name|refPixel
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|msg
operator|=
name|QString
argument_list|(
literal|"Test pixel is null (black) when it should be (%2,%3,%4,%5)"
argument_list|)
operator|.
name|arg
argument_list|(
name|qRed
argument_list|(
name|refPixel
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|qGreen
argument_list|(
name|refPixel
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|qBlue
argument_list|(
name|refPixel
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|qAlpha
argument_list|(
name|refPixel
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QTest
operator|::
name|qFail
argument_list|(
name|msg
operator|.
name|toLatin1
argument_list|()
argument_list|,
name|file
argument_list|,
name|line
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
if|if
condition|(
name|redFuzz
operator|>
name|maxFuzz
operator|||
name|greenFuzz
operator|>
name|maxFuzz
operator|||
name|blueFuzz
operator|>
name|maxFuzz
operator|||
name|alphaFuzz
operator|>
name|maxFuzz
condition|)
block|{
name|QString
name|msg
decl_stmt|;
if|if
condition|(
name|x
operator|>=
literal|0
condition|)
name|msg
operator|=
name|QString
argument_list|(
literal|"Pixel [%1,%2]: "
argument_list|)
operator|.
name|arg
argument_list|(
name|x
argument_list|)
operator|.
name|arg
argument_list|(
name|y
argument_list|)
expr_stmt|;
else|else
name|msg
operator|=
name|QString
argument_list|(
literal|"Pixel "
argument_list|)
expr_stmt|;
name|msg
operator|+=
name|QString
argument_list|(
literal|"Max fuzz (%1) exceeded: (%2,%3,%4,%5) vs (%6,%7,%8,%9)"
argument_list|)
operator|.
name|arg
argument_list|(
name|maxFuzz
argument_list|)
operator|.
name|arg
argument_list|(
name|qRed
argument_list|(
name|testPixel
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|qGreen
argument_list|(
name|testPixel
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|qBlue
argument_list|(
name|testPixel
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|qAlpha
argument_list|(
name|testPixel
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|qRed
argument_list|(
name|refPixel
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|qGreen
argument_list|(
name|refPixel
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|qBlue
argument_list|(
name|refPixel
argument_list|)
argument_list|)
operator|.
name|arg
argument_list|(
name|qAlpha
argument_list|(
name|refPixel
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qFail
argument_list|(
name|msg
operator|.
name|toLatin1
argument_list|()
argument_list|,
name|file
argument_list|,
name|line
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|fuzzyCompareImages
specifier|static
name|void
name|fuzzyCompareImages
parameter_list|(
specifier|const
name|QImage
modifier|&
name|testImage
parameter_list|,
specifier|const
name|QImage
modifier|&
name|referenceImage
parameter_list|,
specifier|const
name|char
modifier|*
name|file
parameter_list|,
name|int
name|line
parameter_list|)
block|{
name|QCOMPARE
argument_list|(
name|testImage
operator|.
name|width
argument_list|()
argument_list|,
name|referenceImage
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testImage
operator|.
name|height
argument_list|()
argument_list|,
name|referenceImage
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|y
init|=
literal|0
init|;
name|y
operator|<
name|testImage
operator|.
name|height
argument_list|()
condition|;
name|y
operator|++
control|)
block|{
for|for
control|(
name|int
name|x
init|=
literal|0
init|;
name|x
operator|<
name|testImage
operator|.
name|width
argument_list|()
condition|;
name|x
operator|++
control|)
block|{
if|if
condition|(
operator|!
name|fuzzyComparePixels
argument_list|(
name|testImage
operator|.
name|pixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|,
name|referenceImage
operator|.
name|pixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|,
name|file
argument_list|,
name|line
argument_list|,
name|x
argument_list|,
name|y
argument_list|)
condition|)
block|{
comment|// Might as well save the images for easier debugging:
name|referenceImage
operator|.
name|save
argument_list|(
literal|"referenceImage.png"
argument_list|)
expr_stmt|;
name|testImage
operator|.
name|save
argument_list|(
literal|"testImage.png"
argument_list|)
expr_stmt|;
return|return;
block|}
block|}
block|}
block|}
end_function
begin_define
DECL|macro|QFUZZY_COMPARE_IMAGES
define|#
directive|define
name|QFUZZY_COMPARE_IMAGES
parameter_list|(
name|A
parameter_list|,
name|B
parameter_list|)
define|\
value|fuzzyCompareImages(A, B, __FILE__, __LINE__)
end_define
begin_define
DECL|macro|QFUZZY_COMPARE_PIXELS
define|#
directive|define
name|QFUZZY_COMPARE_PIXELS
parameter_list|(
name|A
parameter_list|,
name|B
parameter_list|)
define|\
value|fuzzyComparePixels(A, B, __FILE__, __LINE__)
end_define
begin_class
DECL|class|UnclippedWidget
class|class
name|UnclippedWidget
super|:
specifier|public
name|QWidget
block|{
public|public:
DECL|function|paintEvent
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
name|QPainter
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
name|rect
argument_list|()
operator|.
name|adjusted
argument_list|(
operator|-
literal|1000
argument_list|,
operator|-
literal|1000
argument_list|,
literal|1000
argument_list|,
literal|1000
argument_list|)
argument_list|,
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|graphicsViewClipping
name|void
name|tst_QGL
operator|::
name|graphicsViewClipping
parameter_list|()
block|{
specifier|const
name|int
name|size
init|=
literal|64
decl_stmt|;
name|UnclippedWidget
modifier|*
name|widget
init|=
operator|new
name|UnclippedWidget
decl_stmt|;
name|widget
operator|->
name|setFixedSize
argument_list|(
name|size
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|QGraphicsScene
name|scene
decl_stmt|;
name|scene
operator|.
name|addWidget
argument_list|(
name|widget
argument_list|)
operator|->
name|setPos
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QGraphicsView
name|view
argument_list|(
operator|&
name|scene
argument_list|)
decl_stmt|;
name|view
operator|.
name|setBackgroundBrush
argument_list|(
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_QWS
name|view
operator|.
name|setWindowFlags
argument_list|(
name|Qt
operator|::
name|FramelessWindowHint
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|view
operator|.
name|resize
argument_list|(
literal|2
operator|*
name|size
argument_list|,
literal|2
operator|*
name|size
argument_list|)
expr_stmt|;
name|QGLWidget
modifier|*
name|viewport
init|=
operator|new
name|QGLWidget
decl_stmt|;
name|view
operator|.
name|setViewport
argument_list|(
name|viewport
argument_list|)
expr_stmt|;
name|view
operator|.
name|show
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|viewport
operator|->
name|isValid
argument_list|()
condition|)
return|return;
name|scene
operator|.
name|setSceneRect
argument_list|(
name|view
operator|.
name|viewport
argument_list|()
operator|->
name|rect
argument_list|()
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_X11
name|qt_x11_wait_for_window_manager
argument_list|(
operator|&
name|view
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|qWait
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|QImage
name|image
init|=
name|viewport
operator|->
name|grabFrameBuffer
argument_list|()
decl_stmt|;
name|QImage
name|expected
init|=
name|image
decl_stmt|;
name|QPainter
name|p
argument_list|(
operator|&
name|expected
argument_list|)
decl_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
name|expected
operator|.
name|rect
argument_list|()
argument_list|,
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
name|QRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|size
argument_list|,
name|size
argument_list|)
argument_list|,
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
name|QFUZZY_COMPARE_IMAGES
argument_list|(
name|image
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|partialGLWidgetUpdates_data
name|void
name|tst_QGL
operator|::
name|partialGLWidgetUpdates_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"doubleBufferedContext"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"autoFillBackground"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"supportsPartialUpdates"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Double buffered context"
argument_list|)
operator|<<
literal|true
operator|<<
literal|true
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Double buffered context without auto-fill background"
argument_list|)
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Single buffered context"
argument_list|)
operator|<<
literal|false
operator|<<
literal|true
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Single buffered context without auto-fill background"
argument_list|)
operator|<<
literal|false
operator|<<
literal|false
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|partialGLWidgetUpdates
name|void
name|tst_QGL
operator|::
name|partialGLWidgetUpdates
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|doubleBufferedContext
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|autoFillBackground
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|supportsPartialUpdates
argument_list|)
expr_stmt|;
class|class
name|MyGLWidget
super|:
specifier|public
name|QGLWidget
block|{
public|public:
name|QRegion
name|paintEventRegion
decl_stmt|;
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
name|e
parameter_list|)
block|{
name|paintEventRegion
operator|=
name|e
operator|->
name|region
argument_list|()
expr_stmt|;
block|}
block|}
class|;
name|QGLFormat
name|format
init|=
name|QGLFormat
operator|::
name|defaultFormat
argument_list|()
decl_stmt|;
name|format
operator|.
name|setDoubleBuffer
argument_list|(
name|doubleBufferedContext
argument_list|)
expr_stmt|;
name|QGLFormat
operator|::
name|setDefaultFormat
argument_list|(
name|format
argument_list|)
expr_stmt|;
name|MyGLWidget
name|widget
decl_stmt|;
name|widget
operator|.
name|setFixedSize
argument_list|(
literal|150
argument_list|,
literal|150
argument_list|)
expr_stmt|;
name|widget
operator|.
name|setAutoFillBackground
argument_list|(
name|autoFillBackground
argument_list|)
expr_stmt|;
name|widget
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|200
argument_list|)
expr_stmt|;
if|if
condition|(
name|widget
operator|.
name|format
argument_list|()
operator|.
name|doubleBuffer
argument_list|()
operator|!=
name|doubleBufferedContext
condition|)
name|QSKIP
argument_list|(
literal|"Platform does not support requested format"
argument_list|)
expr_stmt|;
name|widget
operator|.
name|paintEventRegion
operator|=
name|QRegion
argument_list|()
expr_stmt|;
name|widget
operator|.
name|repaint
argument_list|(
literal|50
argument_list|,
literal|50
argument_list|,
literal|50
argument_list|,
literal|50
argument_list|)
expr_stmt|;
if|if
condition|(
name|supportsPartialUpdates
condition|)
name|QCOMPARE
argument_list|(
name|widget
operator|.
name|paintEventRegion
argument_list|,
name|QRegion
argument_list|(
literal|50
argument_list|,
literal|50
argument_list|,
literal|50
argument_list|,
literal|50
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|QCOMPARE
argument_list|(
name|widget
operator|.
name|paintEventRegion
argument_list|,
name|QRegion
argument_list|(
name|widget
operator|.
name|rect
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// This tests that rendering to a QGLPBuffer using QPainter works.
end_comment
begin_function
DECL|function|glPBufferRendering
name|void
name|tst_QGL
operator|::
name|glPBufferRendering
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QGLPixelBuffer
operator|::
name|hasOpenGLPbuffers
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"QGLPixelBuffer not supported on this platform"
argument_list|)
expr_stmt|;
name|QGLPixelBuffer
modifier|*
name|pbuf
init|=
operator|new
name|QGLPixelBuffer
argument_list|(
literal|128
argument_list|,
literal|128
argument_list|)
decl_stmt|;
name|QPainter
name|p
decl_stmt|;
name|bool
name|begun
init|=
name|p
operator|.
name|begin
argument_list|(
name|pbuf
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|begun
argument_list|)
expr_stmt|;
name|QPaintEngine
operator|::
name|Type
name|engineType
init|=
name|p
operator|.
name|paintEngine
argument_list|()
operator|->
name|type
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|engineType
operator|==
name|QPaintEngine
operator|::
name|OpenGL
operator|||
name|engineType
operator|==
name|QPaintEngine
operator|::
name|OpenGL2
argument_list|)
expr_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|128
argument_list|,
literal|128
argument_list|,
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|,
literal|64
argument_list|,
literal|64
argument_list|,
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
name|QImage
name|fb
init|=
name|pbuf
operator|->
name|toImage
argument_list|()
decl_stmt|;
operator|delete
name|pbuf
expr_stmt|;
name|QImage
name|reference
argument_list|(
literal|128
argument_list|,
literal|128
argument_list|,
name|fb
operator|.
name|format
argument_list|()
argument_list|)
decl_stmt|;
name|p
operator|.
name|begin
argument_list|(
operator|&
name|reference
argument_list|)
expr_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|128
argument_list|,
literal|128
argument_list|,
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|,
literal|64
argument_list|,
literal|64
argument_list|,
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
name|QFUZZY_COMPARE_IMAGES
argument_list|(
name|fb
argument_list|,
name|reference
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|glWidgetWithAlpha
name|void
name|tst_QGL
operator|::
name|glWidgetWithAlpha
parameter_list|()
block|{
name|QGLWidget
modifier|*
name|w
init|=
operator|new
name|QGLWidget
argument_list|(
name|QGLFormat
argument_list|(
name|QGL
operator|::
name|AlphaChannel
argument_list|)
argument_list|)
decl_stmt|;
name|w
operator|->
name|show
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_X11
name|qt_x11_wait_for_window_manager
argument_list|(
name|w
argument_list|)
expr_stmt|;
endif|#
directive|endif
operator|delete
name|w
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_opengl_draw_test_pattern
name|void
name|qt_opengl_draw_test_pattern
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|,
name|int
name|width
parameter_list|,
name|int
name|height
parameter_list|)
block|{
name|QPainterPath
name|intersectingPath
decl_stmt|;
name|intersectingPath
operator|.
name|moveTo
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|intersectingPath
operator|.
name|lineTo
argument_list|(
literal|100
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|intersectingPath
operator|.
name|lineTo
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|intersectingPath
operator|.
name|lineTo
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|intersectingPath
operator|.
name|closeSubpath
argument_list|()
expr_stmt|;
name|QPainterPath
name|trianglePath
decl_stmt|;
name|trianglePath
operator|.
name|moveTo
argument_list|(
literal|50
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|trianglePath
operator|.
name|lineTo
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|trianglePath
operator|.
name|lineTo
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|trianglePath
operator|.
name|closeSubpath
argument_list|()
expr_stmt|;
name|painter
operator|->
name|setTransform
argument_list|(
name|QTransform
argument_list|()
argument_list|)
expr_stmt|;
comment|// reset xform
name|painter
operator|->
name|fillRect
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|width
operator|+
literal|2
argument_list|,
name|height
operator|+
literal|2
argument_list|,
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
comment|// Background
name|painter
operator|->
name|translate
argument_list|(
literal|14
argument_list|,
literal|14
argument_list|)
expr_stmt|;
name|painter
operator|->
name|fillPath
argument_list|(
name|intersectingPath
argument_list|,
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
comment|// Test stencil buffer works
name|painter
operator|->
name|translate
argument_list|(
literal|128
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setClipPath
argument_list|(
name|trianglePath
argument_list|)
expr_stmt|;
comment|// Test depth buffer works
name|painter
operator|->
name|setTransform
argument_list|(
name|QTransform
argument_list|()
argument_list|)
expr_stmt|;
comment|// reset xform ready for fill
name|painter
operator|->
name|fillRect
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|width
operator|+
literal|2
argument_list|,
name|height
operator|+
literal|2
argument_list|,
name|Qt
operator|::
name|green
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qt_opengl_check_test_pattern
name|void
name|qt_opengl_check_test_pattern
parameter_list|(
specifier|const
name|QImage
modifier|&
name|img
parameter_list|)
block|{
comment|// As we're doing more than trivial painting, we can't just compare to
comment|// an image rendered with raster. Instead, we sample at well-defined
comment|// test-points:
name|QFUZZY_COMPARE_PIXELS
argument_list|(
name|img
operator|.
name|pixel
argument_list|(
literal|39
argument_list|,
literal|64
argument_list|)
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
name|QFUZZY_COMPARE_PIXELS
argument_list|(
name|img
operator|.
name|pixel
argument_list|(
literal|89
argument_list|,
literal|64
argument_list|)
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
name|QFUZZY_COMPARE_PIXELS
argument_list|(
name|img
operator|.
name|pixel
argument_list|(
literal|64
argument_list|,
literal|39
argument_list|)
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
name|QFUZZY_COMPARE_PIXELS
argument_list|(
name|img
operator|.
name|pixel
argument_list|(
literal|64
argument_list|,
literal|89
argument_list|)
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
name|QFUZZY_COMPARE_PIXELS
argument_list|(
name|img
operator|.
name|pixel
argument_list|(
literal|167
argument_list|,
literal|39
argument_list|)
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
name|QFUZZY_COMPARE_PIXELS
argument_list|(
name|img
operator|.
name|pixel
argument_list|(
literal|217
argument_list|,
literal|39
argument_list|)
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
name|QFUZZY_COMPARE_PIXELS
argument_list|(
name|img
operator|.
name|pixel
argument_list|(
literal|192
argument_list|,
literal|64
argument_list|)
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|green
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|GLWidget
class|class
name|GLWidget
super|:
specifier|public
name|QGLWidget
block|{
public|public:
DECL|function|GLWidget
name|GLWidget
parameter_list|(
name|QWidget
modifier|*
name|p
init|=
literal|0
parameter_list|)
member_init_list|:
name|QGLWidget
argument_list|(
name|p
argument_list|)
member_init_list|,
name|beginOk
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|engineType
argument_list|(
name|QPaintEngine
operator|::
name|MaxUser
argument_list|)
block|{}
DECL|member|beginOk
name|bool
name|beginOk
decl_stmt|;
DECL|member|engineType
name|QPaintEngine
operator|::
name|Type
name|engineType
decl_stmt|;
DECL|function|paintGL
name|void
name|paintGL
parameter_list|()
block|{
name|QPainter
name|p
decl_stmt|;
name|beginOk
operator|=
name|p
operator|.
name|begin
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|QPaintEngine
modifier|*
name|pe
init|=
name|p
operator|.
name|paintEngine
argument_list|()
decl_stmt|;
name|engineType
operator|=
name|pe
operator|->
name|type
argument_list|()
expr_stmt|;
name|qt_opengl_draw_test_pattern
argument_list|(
operator|&
name|p
argument_list|,
name|width
argument_list|()
argument_list|,
name|height
argument_list|()
argument_list|)
expr_stmt|;
comment|// No p.end() or swap buffers, should be done automatically
block|}
block|}
class|;
end_class
begin_function
DECL|function|glWidgetRendering
name|void
name|tst_QGL
operator|::
name|glWidgetRendering
parameter_list|()
block|{
name|GLWidget
name|w
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_QWS
name|w
operator|.
name|setWindowFlags
argument_list|(
name|Qt
operator|::
name|FramelessWindowHint
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|w
operator|.
name|resize
argument_list|(
literal|256
argument_list|,
literal|128
argument_list|)
expr_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_X11
name|qt_x11_wait_for_window_manager
argument_list|(
operator|&
name|w
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|qWait
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|w
operator|.
name|beginOk
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|w
operator|.
name|engineType
operator|==
name|QPaintEngine
operator|::
name|OpenGL
operator|||
name|w
operator|.
name|engineType
operator|==
name|QPaintEngine
operator|::
name|OpenGL2
argument_list|)
expr_stmt|;
name|QImage
name|fb
init|=
name|w
operator|.
name|grabFrameBuffer
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|qt_opengl_check_test_pattern
argument_list|(
name|fb
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|glFBOSimpleRendering
name|void
name|tst_QGL
operator|::
name|glFBOSimpleRendering
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QGLFramebufferObject
operator|::
name|hasOpenGLFramebufferObjects
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"QGLFramebufferObject not supported on this platform"
argument_list|)
expr_stmt|;
name|QGLWidget
name|glw
decl_stmt|;
name|glw
operator|.
name|makeCurrent
argument_list|()
expr_stmt|;
comment|// No multisample with combined depth/stencil attachment:
name|QGLFramebufferObjectFormat
name|fboFormat
decl_stmt|;
name|fboFormat
operator|.
name|setAttachment
argument_list|(
name|QGLFramebufferObject
operator|::
name|NoAttachment
argument_list|)
expr_stmt|;
name|QGLFramebufferObject
modifier|*
name|fbo
init|=
operator|new
name|QGLFramebufferObject
argument_list|(
literal|200
argument_list|,
literal|100
argument_list|,
name|fboFormat
argument_list|)
decl_stmt|;
name|fbo
operator|->
name|bind
argument_list|()
expr_stmt|;
name|glClearColor
argument_list|(
literal|1.0
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|1.0
argument_list|)
expr_stmt|;
name|glClear
argument_list|(
name|GL_COLOR_BUFFER_BIT
argument_list|)
expr_stmt|;
name|glFinish
argument_list|()
expr_stmt|;
name|QImage
name|fb
init|=
name|fbo
operator|->
name|toImage
argument_list|()
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|QImage
name|reference
argument_list|(
name|fb
operator|.
name|size
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|reference
operator|.
name|fill
argument_list|(
literal|0xffff0000
argument_list|)
expr_stmt|;
name|QFUZZY_COMPARE_IMAGES
argument_list|(
name|fb
argument_list|,
name|reference
argument_list|)
expr_stmt|;
operator|delete
name|fbo
expr_stmt|;
block|}
end_function
begin_comment
comment|// NOTE: This tests that CombinedDepthStencil attachment works by assuming the
end_comment
begin_comment
comment|//       GL2 engine is being used and is implemented the same way as it was when
end_comment
begin_comment
comment|//       this autotest was written. If this is not the case, there may be some
end_comment
begin_comment
comment|//       false-positives: I.e. The test passes when either the depth or stencil
end_comment
begin_comment
comment|//       buffer is actually missing. But that's probably ok anyway.
end_comment
begin_function
DECL|function|glFBORendering
name|void
name|tst_QGL
operator|::
name|glFBORendering
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QGLFramebufferObject
operator|::
name|hasOpenGLFramebufferObjects
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"QGLFramebufferObject not supported on this platform"
argument_list|)
expr_stmt|;
name|QGLWidget
name|glw
decl_stmt|;
name|glw
operator|.
name|makeCurrent
argument_list|()
expr_stmt|;
comment|// No multisample with combined depth/stencil attachment:
name|QGLFramebufferObjectFormat
name|fboFormat
decl_stmt|;
name|fboFormat
operator|.
name|setAttachment
argument_list|(
name|QGLFramebufferObject
operator|::
name|CombinedDepthStencil
argument_list|)
expr_stmt|;
comment|// Don't complicate things by using NPOT:
name|QGLFramebufferObject
modifier|*
name|fbo
init|=
operator|new
name|QGLFramebufferObject
argument_list|(
literal|256
argument_list|,
literal|128
argument_list|,
name|fboFormat
argument_list|)
decl_stmt|;
if|if
condition|(
name|fbo
operator|->
name|attachment
argument_list|()
operator|!=
name|QGLFramebufferObject
operator|::
name|CombinedDepthStencil
condition|)
block|{
operator|delete
name|fbo
expr_stmt|;
name|QSKIP
argument_list|(
literal|"FBOs missing combined depth~stencil support"
argument_list|)
expr_stmt|;
block|}
name|QPainter
name|fboPainter
decl_stmt|;
name|bool
name|painterBegun
init|=
name|fboPainter
operator|.
name|begin
argument_list|(
name|fbo
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|painterBegun
argument_list|)
expr_stmt|;
name|qt_opengl_draw_test_pattern
argument_list|(
operator|&
name|fboPainter
argument_list|,
name|fbo
operator|->
name|width
argument_list|()
argument_list|,
name|fbo
operator|->
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|fboPainter
operator|.
name|end
argument_list|()
expr_stmt|;
name|QImage
name|fb
init|=
name|fbo
operator|->
name|toImage
argument_list|()
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
operator|delete
name|fbo
expr_stmt|;
name|qt_opengl_check_test_pattern
argument_list|(
name|fb
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Tests multiple QPainters active on different FBOs at the same time, with
end_comment
begin_comment
comment|// interleaving painting. Performance-wise, this is sub-optimal, but it still
end_comment
begin_comment
comment|// has to work flawlessly
end_comment
begin_function
DECL|function|multipleFBOInterleavedRendering
name|void
name|tst_QGL
operator|::
name|multipleFBOInterleavedRendering
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QGLFramebufferObject
operator|::
name|hasOpenGLFramebufferObjects
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"QGLFramebufferObject not supported on this platform"
argument_list|)
expr_stmt|;
name|QGLWidget
name|glw
decl_stmt|;
name|glw
operator|.
name|makeCurrent
argument_list|()
expr_stmt|;
comment|// No multisample with combined depth/stencil attachment:
name|QGLFramebufferObjectFormat
name|fboFormat
decl_stmt|;
name|fboFormat
operator|.
name|setAttachment
argument_list|(
name|QGLFramebufferObject
operator|::
name|CombinedDepthStencil
argument_list|)
expr_stmt|;
name|QGLFramebufferObject
modifier|*
name|fbo1
init|=
operator|new
name|QGLFramebufferObject
argument_list|(
literal|256
argument_list|,
literal|128
argument_list|,
name|fboFormat
argument_list|)
decl_stmt|;
name|QGLFramebufferObject
modifier|*
name|fbo2
init|=
operator|new
name|QGLFramebufferObject
argument_list|(
literal|256
argument_list|,
literal|128
argument_list|,
name|fboFormat
argument_list|)
decl_stmt|;
name|QGLFramebufferObject
modifier|*
name|fbo3
init|=
operator|new
name|QGLFramebufferObject
argument_list|(
literal|256
argument_list|,
literal|128
argument_list|,
name|fboFormat
argument_list|)
decl_stmt|;
if|if
condition|(
operator|(
name|fbo1
operator|->
name|attachment
argument_list|()
operator|!=
name|QGLFramebufferObject
operator|::
name|CombinedDepthStencil
operator|)
operator|||
operator|(
name|fbo2
operator|->
name|attachment
argument_list|()
operator|!=
name|QGLFramebufferObject
operator|::
name|CombinedDepthStencil
operator|)
operator|||
operator|(
name|fbo3
operator|->
name|attachment
argument_list|()
operator|!=
name|QGLFramebufferObject
operator|::
name|CombinedDepthStencil
operator|)
condition|)
block|{
operator|delete
name|fbo1
expr_stmt|;
operator|delete
name|fbo2
expr_stmt|;
operator|delete
name|fbo3
expr_stmt|;
name|QSKIP
argument_list|(
literal|"FBOs missing combined depth~stencil support"
argument_list|)
expr_stmt|;
block|}
name|QPainter
name|fbo1Painter
decl_stmt|;
name|QPainter
name|fbo2Painter
decl_stmt|;
name|QPainter
name|fbo3Painter
decl_stmt|;
name|QVERIFY
argument_list|(
name|fbo1Painter
operator|.
name|begin
argument_list|(
name|fbo1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fbo2Painter
operator|.
name|begin
argument_list|(
name|fbo2
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fbo3Painter
operator|.
name|begin
argument_list|(
name|fbo3
argument_list|)
argument_list|)
expr_stmt|;
comment|// Confirm we're using the GL2 engine, as interleaved rendering isn't supported
comment|// on the GL1 engine:
if|if
condition|(
name|fbo1Painter
operator|.
name|paintEngine
argument_list|()
operator|->
name|type
argument_list|()
operator|!=
name|QPaintEngine
operator|::
name|OpenGL2
condition|)
name|QSKIP
argument_list|(
literal|"Interleaved GL rendering requires OpenGL 2.0 or higher"
argument_list|)
expr_stmt|;
name|QPainterPath
name|intersectingPath
decl_stmt|;
name|intersectingPath
operator|.
name|moveTo
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|intersectingPath
operator|.
name|lineTo
argument_list|(
literal|100
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|intersectingPath
operator|.
name|lineTo
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|intersectingPath
operator|.
name|lineTo
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|intersectingPath
operator|.
name|closeSubpath
argument_list|()
expr_stmt|;
name|QPainterPath
name|trianglePath
decl_stmt|;
name|trianglePath
operator|.
name|moveTo
argument_list|(
literal|50
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|trianglePath
operator|.
name|lineTo
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|trianglePath
operator|.
name|lineTo
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|trianglePath
operator|.
name|closeSubpath
argument_list|()
expr_stmt|;
name|fbo1Painter
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|fbo1
operator|->
name|width
argument_list|()
argument_list|,
name|fbo1
operator|->
name|height
argument_list|()
argument_list|,
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
comment|// Background
name|fbo2Painter
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|fbo2
operator|->
name|width
argument_list|()
argument_list|,
name|fbo2
operator|->
name|height
argument_list|()
argument_list|,
name|Qt
operator|::
name|green
argument_list|)
expr_stmt|;
comment|// Background
name|fbo3Painter
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|fbo3
operator|->
name|width
argument_list|()
argument_list|,
name|fbo3
operator|->
name|height
argument_list|()
argument_list|,
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
comment|// Background
name|fbo1Painter
operator|.
name|translate
argument_list|(
literal|14
argument_list|,
literal|14
argument_list|)
expr_stmt|;
name|fbo2Painter
operator|.
name|translate
argument_list|(
literal|14
argument_list|,
literal|14
argument_list|)
expr_stmt|;
name|fbo3Painter
operator|.
name|translate
argument_list|(
literal|14
argument_list|,
literal|14
argument_list|)
expr_stmt|;
name|fbo1Painter
operator|.
name|fillPath
argument_list|(
name|intersectingPath
argument_list|,
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
comment|// Test stencil buffer works
name|fbo2Painter
operator|.
name|fillPath
argument_list|(
name|intersectingPath
argument_list|,
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
comment|// Test stencil buffer works
name|fbo3Painter
operator|.
name|fillPath
argument_list|(
name|intersectingPath
argument_list|,
name|Qt
operator|::
name|green
argument_list|)
expr_stmt|;
comment|// Test stencil buffer works
name|fbo1Painter
operator|.
name|translate
argument_list|(
literal|128
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fbo2Painter
operator|.
name|translate
argument_list|(
literal|128
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fbo3Painter
operator|.
name|translate
argument_list|(
literal|128
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|fbo1Painter
operator|.
name|setClipPath
argument_list|(
name|trianglePath
argument_list|)
expr_stmt|;
name|fbo2Painter
operator|.
name|setClipPath
argument_list|(
name|trianglePath
argument_list|)
expr_stmt|;
name|fbo3Painter
operator|.
name|setClipPath
argument_list|(
name|trianglePath
argument_list|)
expr_stmt|;
name|fbo1Painter
operator|.
name|setTransform
argument_list|(
name|QTransform
argument_list|()
argument_list|)
expr_stmt|;
comment|// reset xform
name|fbo2Painter
operator|.
name|setTransform
argument_list|(
name|QTransform
argument_list|()
argument_list|)
expr_stmt|;
comment|// reset xform
name|fbo3Painter
operator|.
name|setTransform
argument_list|(
name|QTransform
argument_list|()
argument_list|)
expr_stmt|;
comment|// reset xform
name|fbo1Painter
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|fbo1
operator|->
name|width
argument_list|()
argument_list|,
name|fbo1
operator|->
name|height
argument_list|()
argument_list|,
name|Qt
operator|::
name|green
argument_list|)
expr_stmt|;
name|fbo2Painter
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|fbo2
operator|->
name|width
argument_list|()
argument_list|,
name|fbo2
operator|->
name|height
argument_list|()
argument_list|,
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
name|fbo3Painter
operator|.
name|fillRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|fbo3
operator|->
name|width
argument_list|()
argument_list|,
name|fbo3
operator|->
name|height
argument_list|()
argument_list|,
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|fbo1Painter
operator|.
name|end
argument_list|()
expr_stmt|;
name|fbo2Painter
operator|.
name|end
argument_list|()
expr_stmt|;
name|fbo3Painter
operator|.
name|end
argument_list|()
expr_stmt|;
name|QImage
name|fb1
init|=
name|fbo1
operator|->
name|toImage
argument_list|()
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|QImage
name|fb2
init|=
name|fbo2
operator|->
name|toImage
argument_list|()
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|QImage
name|fb3
init|=
name|fbo3
operator|->
name|toImage
argument_list|()
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
operator|delete
name|fbo1
expr_stmt|;
operator|delete
name|fbo2
expr_stmt|;
operator|delete
name|fbo3
expr_stmt|;
comment|// As we're doing more than trivial painting, we can't just compare to
comment|// an image rendered with raster. Instead, we sample at well-defined
comment|// test-points:
name|QFUZZY_COMPARE_PIXELS
argument_list|(
name|fb1
operator|.
name|pixel
argument_list|(
literal|39
argument_list|,
literal|64
argument_list|)
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
name|QFUZZY_COMPARE_PIXELS
argument_list|(
name|fb1
operator|.
name|pixel
argument_list|(
literal|89
argument_list|,
literal|64
argument_list|)
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
name|QFUZZY_COMPARE_PIXELS
argument_list|(
name|fb1
operator|.
name|pixel
argument_list|(
literal|64
argument_list|,
literal|39
argument_list|)
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
name|QFUZZY_COMPARE_PIXELS
argument_list|(
name|fb1
operator|.
name|pixel
argument_list|(
literal|64
argument_list|,
literal|89
argument_list|)
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
name|QFUZZY_COMPARE_PIXELS
argument_list|(
name|fb1
operator|.
name|pixel
argument_list|(
literal|167
argument_list|,
literal|39
argument_list|)
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
name|QFUZZY_COMPARE_PIXELS
argument_list|(
name|fb1
operator|.
name|pixel
argument_list|(
literal|217
argument_list|,
literal|39
argument_list|)
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
name|QFUZZY_COMPARE_PIXELS
argument_list|(
name|fb1
operator|.
name|pixel
argument_list|(
literal|192
argument_list|,
literal|64
argument_list|)
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|green
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
name|QFUZZY_COMPARE_PIXELS
argument_list|(
name|fb2
operator|.
name|pixel
argument_list|(
literal|39
argument_list|,
literal|64
argument_list|)
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|green
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
name|QFUZZY_COMPARE_PIXELS
argument_list|(
name|fb2
operator|.
name|pixel
argument_list|(
literal|89
argument_list|,
literal|64
argument_list|)
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|green
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
name|QFUZZY_COMPARE_PIXELS
argument_list|(
name|fb2
operator|.
name|pixel
argument_list|(
literal|64
argument_list|,
literal|39
argument_list|)
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
name|QFUZZY_COMPARE_PIXELS
argument_list|(
name|fb2
operator|.
name|pixel
argument_list|(
literal|64
argument_list|,
literal|89
argument_list|)
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
name|QFUZZY_COMPARE_PIXELS
argument_list|(
name|fb2
operator|.
name|pixel
argument_list|(
literal|167
argument_list|,
literal|39
argument_list|)
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|green
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
name|QFUZZY_COMPARE_PIXELS
argument_list|(
name|fb2
operator|.
name|pixel
argument_list|(
literal|217
argument_list|,
literal|39
argument_list|)
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|green
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
name|QFUZZY_COMPARE_PIXELS
argument_list|(
name|fb2
operator|.
name|pixel
argument_list|(
literal|192
argument_list|,
literal|64
argument_list|)
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
name|QFUZZY_COMPARE_PIXELS
argument_list|(
name|fb3
operator|.
name|pixel
argument_list|(
literal|39
argument_list|,
literal|64
argument_list|)
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
name|QFUZZY_COMPARE_PIXELS
argument_list|(
name|fb3
operator|.
name|pixel
argument_list|(
literal|89
argument_list|,
literal|64
argument_list|)
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
name|QFUZZY_COMPARE_PIXELS
argument_list|(
name|fb3
operator|.
name|pixel
argument_list|(
literal|64
argument_list|,
literal|39
argument_list|)
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|green
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
name|QFUZZY_COMPARE_PIXELS
argument_list|(
name|fb3
operator|.
name|pixel
argument_list|(
literal|64
argument_list|,
literal|89
argument_list|)
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|green
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
name|QFUZZY_COMPARE_PIXELS
argument_list|(
name|fb3
operator|.
name|pixel
argument_list|(
literal|167
argument_list|,
literal|39
argument_list|)
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
name|QFUZZY_COMPARE_PIXELS
argument_list|(
name|fb3
operator|.
name|pixel
argument_list|(
literal|217
argument_list|,
literal|39
argument_list|)
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
name|QFUZZY_COMPARE_PIXELS
argument_list|(
name|fb3
operator|.
name|pixel
argument_list|(
literal|192
argument_list|,
literal|64
argument_list|)
argument_list|,
name|QColor
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
operator|.
name|rgb
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|FBOUseInGLWidget
class|class
name|FBOUseInGLWidget
super|:
specifier|public
name|QGLWidget
block|{
public|public:
DECL|member|widgetPainterBeginOk
name|bool
name|widgetPainterBeginOk
decl_stmt|;
DECL|member|fboPainterBeginOk
name|bool
name|fboPainterBeginOk
decl_stmt|;
DECL|member|fboImage
name|QImage
name|fboImage
decl_stmt|;
protected|protected:
DECL|function|paintEvent
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
name|QPainter
name|widgetPainter
decl_stmt|;
name|widgetPainterBeginOk
operator|=
name|widgetPainter
operator|.
name|begin
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|QGLFramebufferObjectFormat
name|fboFormat
decl_stmt|;
name|fboFormat
operator|.
name|setAttachment
argument_list|(
name|QGLFramebufferObject
operator|::
name|NoAttachment
argument_list|)
expr_stmt|;
name|QGLFramebufferObject
modifier|*
name|fbo
init|=
operator|new
name|QGLFramebufferObject
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|,
name|fboFormat
argument_list|)
decl_stmt|;
name|QPainter
name|fboPainter
decl_stmt|;
name|fboPainterBeginOk
operator|=
name|fboPainter
operator|.
name|begin
argument_list|(
name|fbo
argument_list|)
expr_stmt|;
name|fboPainter
operator|.
name|fillRect
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
literal|130
argument_list|,
literal|130
argument_list|,
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|fboPainter
operator|.
name|end
argument_list|()
expr_stmt|;
name|fboImage
operator|=
name|fbo
operator|->
name|toImage
argument_list|()
expr_stmt|;
name|widgetPainter
operator|.
name|fillRect
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|width
argument_list|()
operator|+
literal|2
argument_list|,
name|width
argument_list|()
operator|+
literal|2
argument_list|,
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
operator|delete
name|fbo
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|glFBOUseInGLWidget
name|void
name|tst_QGL
operator|::
name|glFBOUseInGLWidget
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QGLFramebufferObject
operator|::
name|hasOpenGLFramebufferObjects
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"QGLFramebufferObject not supported on this platform"
argument_list|)
expr_stmt|;
name|FBOUseInGLWidget
name|w
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_QWS
name|w
operator|.
name|setWindowFlags
argument_list|(
name|Qt
operator|::
name|FramelessWindowHint
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|w
operator|.
name|resize
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_X11
name|qt_x11_wait_for_window_manager
argument_list|(
operator|&
name|w
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|qWait
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|w
operator|.
name|widgetPainterBeginOk
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|w
operator|.
name|fboPainterBeginOk
argument_list|)
expr_stmt|;
name|QImage
name|widgetFB
init|=
name|w
operator|.
name|grabFrameBuffer
argument_list|(
literal|false
argument_list|)
decl_stmt|;
name|QImage
name|widgetReference
argument_list|(
name|widgetFB
operator|.
name|size
argument_list|()
argument_list|,
name|widgetFB
operator|.
name|format
argument_list|()
argument_list|)
decl_stmt|;
name|widgetReference
operator|.
name|fill
argument_list|(
literal|0xff0000ff
argument_list|)
expr_stmt|;
name|QFUZZY_COMPARE_IMAGES
argument_list|(
name|widgetFB
argument_list|,
name|widgetReference
argument_list|)
expr_stmt|;
name|QImage
name|fboReference
argument_list|(
name|w
operator|.
name|fboImage
operator|.
name|size
argument_list|()
argument_list|,
name|w
operator|.
name|fboImage
operator|.
name|format
argument_list|()
argument_list|)
decl_stmt|;
name|fboReference
operator|.
name|fill
argument_list|(
literal|0xffff0000
argument_list|)
expr_stmt|;
name|QFUZZY_COMPARE_IMAGES
argument_list|(
name|w
operator|.
name|fboImage
argument_list|,
name|fboReference
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|glWidgetReparent
name|void
name|tst_QGL
operator|::
name|glWidgetReparent
parameter_list|()
block|{
comment|// Try it as a top-level first:
name|GLWidget
modifier|*
name|widget
init|=
operator|new
name|GLWidget
decl_stmt|;
name|widget
operator|->
name|setGeometry
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|200
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|widget
operator|->
name|show
argument_list|()
expr_stmt|;
name|QWidget
name|grandParentWidget
decl_stmt|;
name|grandParentWidget
operator|.
name|setPalette
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
name|QVBoxLayout
name|grandParentLayout
argument_list|(
operator|&
name|grandParentWidget
argument_list|)
decl_stmt|;
name|QWidget
name|parentWidget
argument_list|(
operator|&
name|grandParentWidget
argument_list|)
decl_stmt|;
name|grandParentLayout
operator|.
name|addWidget
argument_list|(
operator|&
name|parentWidget
argument_list|)
expr_stmt|;
name|parentWidget
operator|.
name|setPalette
argument_list|(
name|Qt
operator|::
name|green
argument_list|)
expr_stmt|;
name|parentWidget
operator|.
name|setAutoFillBackground
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVBoxLayout
name|parentLayout
argument_list|(
operator|&
name|parentWidget
argument_list|)
decl_stmt|;
name|grandParentWidget
operator|.
name|setGeometry
argument_list|(
literal|0
argument_list|,
literal|100
argument_list|,
literal|200
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|grandParentWidget
operator|.
name|show
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_X11
name|qt_x11_wait_for_window_manager
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|qt_x11_wait_for_window_manager
argument_list|(
operator|&
name|parentWidget
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|qWait
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|parentWidget
operator|.
name|children
argument_list|()
operator|.
name|count
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// The layout
comment|// Now both widgets should be created& shown, time to re-parent:
name|parentLayout
operator|.
name|addWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_X11
name|qt_x11_wait_for_window_manager
argument_list|(
operator|&
name|parentWidget
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|qWait
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|parentWidget
operator|.
name|children
argument_list|()
operator|.
name|count
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
comment|// Layout& glwidget
name|QVERIFY
argument_list|(
name|parentWidget
operator|.
name|children
argument_list|()
operator|.
name|contains
argument_list|(
name|widget
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|widget
operator|->
name|height
argument_list|()
operator|>
literal|30
argument_list|)
expr_stmt|;
operator|delete
name|widget
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_X11
name|qt_x11_wait_for_window_manager
argument_list|(
operator|&
name|parentWidget
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|qWait
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|parentWidget
operator|.
name|children
argument_list|()
operator|.
name|count
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// The layout
comment|// Now do pretty much the same thing, but don't show the
comment|// widget first:
name|widget
operator|=
operator|new
name|GLWidget
expr_stmt|;
name|parentLayout
operator|.
name|addWidget
argument_list|(
name|widget
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_X11
name|qt_x11_wait_for_window_manager
argument_list|(
operator|&
name|parentWidget
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|qWait
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|parentWidget
operator|.
name|children
argument_list|()
operator|.
name|count
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
comment|// Layout& glwidget
name|QVERIFY
argument_list|(
name|parentWidget
operator|.
name|children
argument_list|()
operator|.
name|contains
argument_list|(
name|widget
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|widget
operator|->
name|height
argument_list|()
operator|>
literal|30
argument_list|)
expr_stmt|;
operator|delete
name|widget
expr_stmt|;
block|}
end_function
begin_class
DECL|class|RenderPixmapWidget
class|class
name|RenderPixmapWidget
super|:
specifier|public
name|QGLWidget
block|{
protected|protected:
DECL|function|initializeGL
name|void
name|initializeGL
parameter_list|()
block|{
comment|// Set some gl state:
name|glClearColor
argument_list|(
literal|1.0
argument_list|,
literal|0.0
argument_list|,
literal|0.0
argument_list|,
literal|1.0
argument_list|)
expr_stmt|;
block|}
DECL|function|paintGL
name|void
name|paintGL
parameter_list|()
block|{
name|glClear
argument_list|(
name|GL_COLOR_BUFFER_BIT
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|glWidgetRenderPixmap
name|void
name|tst_QGL
operator|::
name|glWidgetRenderPixmap
parameter_list|()
block|{
name|RenderPixmapWidget
modifier|*
name|w
init|=
operator|new
name|RenderPixmapWidget
decl_stmt|;
name|QPixmap
name|pm
init|=
name|w
operator|->
name|renderPixmap
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|,
literal|false
argument_list|)
decl_stmt|;
operator|delete
name|w
expr_stmt|;
name|QImage
name|fb
init|=
name|pm
operator|.
name|toImage
argument_list|()
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|QImage
name|reference
argument_list|(
name|fb
operator|.
name|size
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|reference
operator|.
name|fill
argument_list|(
literal|0xffff0000
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QGL_EGL
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_WS_X11
argument_list|)
name|QSKIP
argument_list|(
literal|"renderPixmap() not yet supported under EGL on your platform"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QFUZZY_COMPARE_IMAGES
argument_list|(
name|fb
argument_list|,
name|reference
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|ColormapExtended
class|class
name|ColormapExtended
super|:
specifier|public
name|QGLColormap
block|{
public|public:
DECL|function|ColormapExtended
name|ColormapExtended
parameter_list|()
block|{}
DECL|function|handle
name|Qt
operator|::
name|HANDLE
name|handle
parameter_list|()
block|{
return|return
name|QGLColormap
operator|::
name|handle
argument_list|()
return|;
block|}
DECL|function|setHandle
name|void
name|setHandle
parameter_list|(
name|Qt
operator|::
name|HANDLE
name|handle
parameter_list|)
block|{
name|QGLColormap
operator|::
name|setHandle
argument_list|(
name|handle
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|colormap
name|void
name|tst_QGL
operator|::
name|colormap
parameter_list|()
block|{
comment|// Check the properties of the default empty colormap.
name|QGLColormap
name|cmap1
decl_stmt|;
name|QVERIFY
argument_list|(
name|cmap1
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cmap1
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cmap1
operator|.
name|entryRgb
argument_list|(
literal|0
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cmap1
operator|.
name|entryRgb
argument_list|(
operator|-
literal|1
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cmap1
operator|.
name|entryRgb
argument_list|(
literal|100
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cmap1
operator|.
name|entryColor
argument_list|(
literal|0
argument_list|)
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cmap1
operator|.
name|entryColor
argument_list|(
operator|-
literal|1
argument_list|)
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cmap1
operator|.
name|entryColor
argument_list|(
literal|100
argument_list|)
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cmap1
operator|.
name|find
argument_list|(
name|qRgb
argument_list|(
literal|255
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cmap1
operator|.
name|findNearest
argument_list|(
name|qRgb
argument_list|(
literal|255
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// Set an entry and re-test.
name|cmap1
operator|.
name|setEntry
argument_list|(
literal|56
argument_list|,
name|qRgb
argument_list|(
literal|255
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// The colormap is still considered "empty" even though it
comment|// has entries in it now.  The isEmpty() method is used to
comment|// detect when the colormap is in use by a GL widget,
comment|// not to detect when it is empty!
name|QVERIFY
argument_list|(
name|cmap1
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cmap1
operator|.
name|size
argument_list|()
argument_list|,
literal|256
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cmap1
operator|.
name|entryRgb
argument_list|(
literal|0
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cmap1
operator|.
name|entryColor
argument_list|(
literal|0
argument_list|)
operator|==
name|QColor
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|255
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cmap1
operator|.
name|entryRgb
argument_list|(
literal|56
argument_list|)
operator|==
name|qRgb
argument_list|(
literal|255
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cmap1
operator|.
name|entryColor
argument_list|(
literal|56
argument_list|)
operator|==
name|QColor
argument_list|(
literal|255
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|255
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cmap1
operator|.
name|find
argument_list|(
name|qRgb
argument_list|(
literal|255
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
literal|56
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cmap1
operator|.
name|findNearest
argument_list|(
name|qRgb
argument_list|(
literal|255
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
literal|56
argument_list|)
expr_stmt|;
comment|// Set some more entries.
specifier|static
name|QRgb
specifier|const
name|colors
index|[]
init|=
block|{
name|qRgb
argument_list|(
literal|255
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
block|,
name|qRgb
argument_list|(
literal|0
argument_list|,
literal|255
argument_list|,
literal|0
argument_list|)
block|,
name|qRgb
argument_list|(
literal|255
argument_list|,
literal|255
argument_list|,
literal|255
argument_list|)
block|,
name|qRgb
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|255
argument_list|)
block|,
name|qRgb
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
block|}
decl_stmt|;
name|cmap1
operator|.
name|setEntry
argument_list|(
literal|57
argument_list|,
name|QColor
argument_list|(
literal|0
argument_list|,
literal|255
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|cmap1
operator|.
name|setEntries
argument_list|(
literal|3
argument_list|,
name|colors
operator|+
literal|2
argument_list|,
literal|58
argument_list|)
expr_stmt|;
name|cmap1
operator|.
name|setEntries
argument_list|(
literal|5
argument_list|,
name|colors
argument_list|,
literal|251
argument_list|)
expr_stmt|;
name|int
name|idx
decl_stmt|;
for|for
control|(
name|idx
operator|=
literal|0
init|;
name|idx
operator|<
literal|5
condition|;
operator|++
name|idx
control|)
block|{
name|QVERIFY
argument_list|(
name|cmap1
operator|.
name|entryRgb
argument_list|(
literal|56
operator|+
name|idx
argument_list|)
operator|==
name|colors
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cmap1
operator|.
name|entryColor
argument_list|(
literal|56
operator|+
name|idx
argument_list|)
operator|==
name|QColor
argument_list|(
name|colors
index|[
name|idx
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cmap1
operator|.
name|entryRgb
argument_list|(
literal|251
operator|+
name|idx
argument_list|)
operator|==
name|colors
index|[
name|idx
index|]
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cmap1
operator|.
name|entryColor
argument_list|(
literal|251
operator|+
name|idx
argument_list|)
operator|==
name|QColor
argument_list|(
name|colors
index|[
name|idx
index|]
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|cmap1
operator|.
name|size
argument_list|()
argument_list|,
literal|256
argument_list|)
expr_stmt|;
comment|// Perform color lookups.
name|QCOMPARE
argument_list|(
name|cmap1
operator|.
name|find
argument_list|(
name|qRgb
argument_list|(
literal|255
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
literal|56
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cmap1
operator|.
name|find
argument_list|(
name|qRgb
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
literal|60
argument_list|)
expr_stmt|;
comment|// Actually finds 0, 0, 0, 255.
name|QCOMPARE
argument_list|(
name|cmap1
operator|.
name|find
argument_list|(
name|qRgba
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cmap1
operator|.
name|find
argument_list|(
name|qRgb
argument_list|(
literal|0
argument_list|,
literal|255
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
literal|57
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cmap1
operator|.
name|find
argument_list|(
name|qRgb
argument_list|(
literal|255
argument_list|,
literal|255
argument_list|,
literal|255
argument_list|)
argument_list|)
argument_list|,
literal|58
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cmap1
operator|.
name|find
argument_list|(
name|qRgb
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|255
argument_list|)
argument_list|)
argument_list|,
literal|59
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cmap1
operator|.
name|find
argument_list|(
name|qRgb
argument_list|(
literal|140
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cmap1
operator|.
name|find
argument_list|(
name|qRgb
argument_list|(
literal|0
argument_list|,
literal|140
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cmap1
operator|.
name|find
argument_list|(
name|qRgb
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|140
argument_list|)
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cmap1
operator|.
name|find
argument_list|(
name|qRgb
argument_list|(
literal|64
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cmap1
operator|.
name|find
argument_list|(
name|qRgb
argument_list|(
literal|0
argument_list|,
literal|64
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cmap1
operator|.
name|find
argument_list|(
name|qRgb
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|64
argument_list|)
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cmap1
operator|.
name|findNearest
argument_list|(
name|qRgb
argument_list|(
literal|255
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
literal|56
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cmap1
operator|.
name|findNearest
argument_list|(
name|qRgb
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
literal|60
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cmap1
operator|.
name|findNearest
argument_list|(
name|qRgba
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cmap1
operator|.
name|findNearest
argument_list|(
name|qRgb
argument_list|(
literal|0
argument_list|,
literal|255
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
literal|57
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cmap1
operator|.
name|findNearest
argument_list|(
name|qRgb
argument_list|(
literal|255
argument_list|,
literal|255
argument_list|,
literal|255
argument_list|)
argument_list|)
argument_list|,
literal|58
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cmap1
operator|.
name|findNearest
argument_list|(
name|qRgb
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|255
argument_list|)
argument_list|)
argument_list|,
literal|59
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cmap1
operator|.
name|findNearest
argument_list|(
name|qRgb
argument_list|(
literal|140
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
literal|56
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cmap1
operator|.
name|findNearest
argument_list|(
name|qRgb
argument_list|(
literal|0
argument_list|,
literal|140
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
literal|57
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cmap1
operator|.
name|findNearest
argument_list|(
name|qRgb
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|140
argument_list|)
argument_list|)
argument_list|,
literal|59
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cmap1
operator|.
name|findNearest
argument_list|(
name|qRgb
argument_list|(
literal|64
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cmap1
operator|.
name|findNearest
argument_list|(
name|qRgb
argument_list|(
literal|0
argument_list|,
literal|64
argument_list|,
literal|0
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cmap1
operator|.
name|findNearest
argument_list|(
name|qRgb
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|64
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Make some copies of the colormap and check that they are the same.
name|QGLColormap
name|cmap2
argument_list|(
name|cmap1
argument_list|)
decl_stmt|;
name|QGLColormap
name|cmap3
decl_stmt|;
name|cmap3
operator|=
name|cmap1
expr_stmt|;
name|QVERIFY
argument_list|(
name|cmap2
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cmap3
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cmap2
operator|.
name|size
argument_list|()
argument_list|,
literal|256
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cmap3
operator|.
name|size
argument_list|()
argument_list|,
literal|256
argument_list|)
expr_stmt|;
for|for
control|(
name|idx
operator|=
literal|0
init|;
name|idx
operator|<
literal|256
condition|;
operator|++
name|idx
control|)
block|{
name|QCOMPARE
argument_list|(
name|cmap1
operator|.
name|entryRgb
argument_list|(
name|idx
argument_list|)
argument_list|,
name|cmap2
operator|.
name|entryRgb
argument_list|(
name|idx
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cmap1
operator|.
name|entryRgb
argument_list|(
name|idx
argument_list|)
argument_list|,
name|cmap3
operator|.
name|entryRgb
argument_list|(
name|idx
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Modify an entry in one of the copies and recheck the original.
name|cmap2
operator|.
name|setEntry
argument_list|(
literal|45
argument_list|,
name|qRgb
argument_list|(
literal|255
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|idx
operator|=
literal|0
init|;
name|idx
operator|<
literal|256
condition|;
operator|++
name|idx
control|)
block|{
if|if
condition|(
name|idx
operator|!=
literal|45
condition|)
name|QCOMPARE
argument_list|(
name|cmap1
operator|.
name|entryRgb
argument_list|(
name|idx
argument_list|)
argument_list|,
name|cmap2
operator|.
name|entryRgb
argument_list|(
name|idx
argument_list|)
argument_list|)
expr_stmt|;
else|else
name|QCOMPARE
argument_list|(
name|cmap2
operator|.
name|entryRgb
argument_list|(
literal|45
argument_list|)
argument_list|,
name|qRgb
argument_list|(
literal|255
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cmap1
operator|.
name|entryRgb
argument_list|(
name|idx
argument_list|)
argument_list|,
name|cmap3
operator|.
name|entryRgb
argument_list|(
name|idx
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Check that setting the handle will cause isEmpty() to work right.
name|ColormapExtended
name|cmap4
decl_stmt|;
name|cmap4
operator|.
name|setEntry
argument_list|(
literal|56
argument_list|,
name|qRgb
argument_list|(
literal|255
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cmap4
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cmap4
operator|.
name|size
argument_list|()
argument_list|,
literal|256
argument_list|)
expr_stmt|;
name|cmap4
operator|.
name|setHandle
argument_list|(
name|Qt
operator|::
name|HANDLE
argument_list|(
literal|42
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cmap4
operator|.
name|handle
argument_list|()
operator|==
name|Qt
operator|::
name|HANDLE
argument_list|(
literal|42
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cmap4
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cmap4
operator|.
name|size
argument_list|()
argument_list|,
literal|256
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_OPENGL_ES
end_ifndef
begin_define
DECL|macro|DEFAULT_FORMAT
define|#
directive|define
name|DEFAULT_FORMAT
value|GL_RGBA8
end_define
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|DEFAULT_FORMAT
define|#
directive|define
name|DEFAULT_FORMAT
value|GL_RGBA
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_TEXTURE_3D
end_ifndef
begin_define
DECL|macro|GL_TEXTURE_3D
define|#
directive|define
name|GL_TEXTURE_3D
value|0x806F
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|GL_RGB16
end_ifndef
begin_define
DECL|macro|GL_RGB16
define|#
directive|define
name|GL_RGB16
value|0x8054
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|fboFormat
name|void
name|tst_QGL
operator|::
name|fboFormat
parameter_list|()
block|{
comment|// Check the initial conditions.
name|QGLFramebufferObjectFormat
name|format1
decl_stmt|;
name|QCOMPARE
argument_list|(
name|format1
operator|.
name|samples
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|format1
operator|.
name|attachment
argument_list|()
operator|==
name|QGLFramebufferObject
operator|::
name|NoAttachment
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|format1
operator|.
name|textureTarget
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|GL_TEXTURE_2D
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|format1
operator|.
name|internalTextureFormat
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|DEFAULT_FORMAT
argument_list|)
argument_list|)
expr_stmt|;
comment|// Modify the values and re-check.
name|format1
operator|.
name|setSamples
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|format1
operator|.
name|setAttachment
argument_list|(
name|QGLFramebufferObject
operator|::
name|CombinedDepthStencil
argument_list|)
expr_stmt|;
name|format1
operator|.
name|setTextureTarget
argument_list|(
name|GL_TEXTURE_3D
argument_list|)
expr_stmt|;
name|format1
operator|.
name|setInternalTextureFormat
argument_list|(
name|GL_RGB16
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|format1
operator|.
name|samples
argument_list|()
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|format1
operator|.
name|attachment
argument_list|()
operator|==
name|QGLFramebufferObject
operator|::
name|CombinedDepthStencil
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|format1
operator|.
name|textureTarget
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|GL_TEXTURE_3D
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|format1
operator|.
name|internalTextureFormat
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|GL_RGB16
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make copies and check that they are the same.
name|QGLFramebufferObjectFormat
name|format2
argument_list|(
name|format1
argument_list|)
decl_stmt|;
name|QGLFramebufferObjectFormat
name|format3
decl_stmt|;
name|QCOMPARE
argument_list|(
name|format2
operator|.
name|samples
argument_list|()
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|format2
operator|.
name|attachment
argument_list|()
operator|==
name|QGLFramebufferObject
operator|::
name|CombinedDepthStencil
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|format2
operator|.
name|textureTarget
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|GL_TEXTURE_3D
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|format2
operator|.
name|internalTextureFormat
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|GL_RGB16
argument_list|)
argument_list|)
expr_stmt|;
name|format3
operator|=
name|format1
expr_stmt|;
name|QCOMPARE
argument_list|(
name|format3
operator|.
name|samples
argument_list|()
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|format3
operator|.
name|attachment
argument_list|()
operator|==
name|QGLFramebufferObject
operator|::
name|CombinedDepthStencil
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|format3
operator|.
name|textureTarget
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|GL_TEXTURE_3D
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|format3
operator|.
name|internalTextureFormat
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|GL_RGB16
argument_list|)
argument_list|)
expr_stmt|;
comment|// Modify the copies and check that the original is unchanged.
name|format2
operator|.
name|setSamples
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|format3
operator|.
name|setTextureTarget
argument_list|(
name|GL_TEXTURE_2D
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|format1
operator|.
name|samples
argument_list|()
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|format1
operator|.
name|attachment
argument_list|()
operator|==
name|QGLFramebufferObject
operator|::
name|CombinedDepthStencil
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|format1
operator|.
name|textureTarget
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|GL_TEXTURE_3D
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|format1
operator|.
name|internalTextureFormat
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|GL_RGB16
argument_list|)
argument_list|)
expr_stmt|;
comment|// operator== and operator!= for QGLFramebufferObjectFormat.
name|QGLFramebufferObjectFormat
name|format1c
decl_stmt|;
name|QGLFramebufferObjectFormat
name|format2c
decl_stmt|;
name|QVERIFY
argument_list|(
name|format1c
operator|==
name|format2c
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|format1c
operator|!=
name|format2c
operator|)
argument_list|)
expr_stmt|;
name|format1c
operator|.
name|setSamples
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|format1c
operator|==
name|format2c
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|format1c
operator|!=
name|format2c
argument_list|)
expr_stmt|;
name|format2c
operator|.
name|setSamples
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|format1c
operator|==
name|format2c
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|format1c
operator|!=
name|format2c
operator|)
argument_list|)
expr_stmt|;
name|format1c
operator|.
name|setAttachment
argument_list|(
name|QGLFramebufferObject
operator|::
name|CombinedDepthStencil
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|format1c
operator|==
name|format2c
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|format1c
operator|!=
name|format2c
argument_list|)
expr_stmt|;
name|format2c
operator|.
name|setAttachment
argument_list|(
name|QGLFramebufferObject
operator|::
name|CombinedDepthStencil
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|format1c
operator|==
name|format2c
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|format1c
operator|!=
name|format2c
operator|)
argument_list|)
expr_stmt|;
name|format1c
operator|.
name|setTextureTarget
argument_list|(
name|GL_TEXTURE_3D
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|format1c
operator|==
name|format2c
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|format1c
operator|!=
name|format2c
argument_list|)
expr_stmt|;
name|format2c
operator|.
name|setTextureTarget
argument_list|(
name|GL_TEXTURE_3D
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|format1c
operator|==
name|format2c
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|format1c
operator|!=
name|format2c
operator|)
argument_list|)
expr_stmt|;
name|format1c
operator|.
name|setInternalTextureFormat
argument_list|(
name|GL_RGB16
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|format1c
operator|==
name|format2c
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|format1c
operator|!=
name|format2c
argument_list|)
expr_stmt|;
name|format2c
operator|.
name|setInternalTextureFormat
argument_list|(
name|GL_RGB16
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|format1c
operator|==
name|format2c
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|format1c
operator|!=
name|format2c
operator|)
argument_list|)
expr_stmt|;
name|QGLFramebufferObjectFormat
name|format3c
argument_list|(
name|format1c
argument_list|)
decl_stmt|;
name|QGLFramebufferObjectFormat
name|format4c
decl_stmt|;
name|QVERIFY
argument_list|(
name|format1c
operator|==
name|format3c
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|format1c
operator|!=
name|format3c
operator|)
argument_list|)
expr_stmt|;
name|format3c
operator|.
name|setInternalTextureFormat
argument_list|(
name|DEFAULT_FORMAT
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|format1c
operator|==
name|format3c
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|format1c
operator|!=
name|format3c
argument_list|)
expr_stmt|;
name|format4c
operator|=
name|format1c
expr_stmt|;
name|QVERIFY
argument_list|(
name|format1c
operator|==
name|format4c
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|format1c
operator|!=
name|format4c
operator|)
argument_list|)
expr_stmt|;
name|format4c
operator|.
name|setInternalTextureFormat
argument_list|(
name|DEFAULT_FORMAT
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|format1c
operator|==
name|format4c
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|format1c
operator|!=
name|format4c
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testDontCrashOnDanglingResources
name|void
name|tst_QGL
operator|::
name|testDontCrashOnDanglingResources
parameter_list|()
block|{
comment|// We have a number of Q_GLOBAL_STATICS inside the QtOpenGL
comment|// library. This test is verify that we don't crash as a result of
comment|// them calling into libgl on application shutdown.
name|QWidget
modifier|*
name|widget
init|=
operator|new
name|UnclippedWidget
argument_list|()
decl_stmt|;
name|widget
operator|->
name|show
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|widget
operator|->
name|hide
argument_list|()
expr_stmt|;
block|}
end_function
begin_class
DECL|class|ReplaceClippingGLWidget
class|class
name|ReplaceClippingGLWidget
super|:
specifier|public
name|QGLWidget
block|{
public|public:
DECL|function|paint
name|void
name|paint
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|)
block|{
name|painter
operator|->
name|fillRect
argument_list|(
name|rect
argument_list|()
argument_list|,
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|QPainterPath
name|path
decl_stmt|;
name|path
operator|.
name|addRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|path
operator|.
name|addRect
argument_list|(
literal|50
argument_list|,
literal|50
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setClipRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|150
argument_list|,
literal|150
argument_list|)
expr_stmt|;
name|painter
operator|->
name|fillPath
argument_list|(
name|path
argument_list|,
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|painter
operator|->
name|translate
argument_list|(
literal|150
argument_list|,
literal|150
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setClipRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|150
argument_list|,
literal|150
argument_list|)
expr_stmt|;
name|painter
operator|->
name|fillPath
argument_list|(
name|path
argument_list|,
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
block|}
protected|protected:
DECL|function|paintEvent
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
comment|// clear the stencil with junk
name|glStencilMask
argument_list|(
literal|0xFFFF
argument_list|)
expr_stmt|;
name|glClearStencil
argument_list|(
literal|0xFFFF
argument_list|)
expr_stmt|;
name|glDisable
argument_list|(
name|GL_STENCIL_TEST
argument_list|)
expr_stmt|;
name|glDisable
argument_list|(
name|GL_SCISSOR_TEST
argument_list|)
expr_stmt|;
name|glClear
argument_list|(
name|GL_STENCIL_BUFFER_BIT
argument_list|)
expr_stmt|;
name|QPainter
name|painter
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|paint
argument_list|(
operator|&
name|painter
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|replaceClipping
name|void
name|tst_QGL
operator|::
name|replaceClipping
parameter_list|()
block|{
name|ReplaceClippingGLWidget
name|glw
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_QWS
name|glw
operator|.
name|setWindowFlags
argument_list|(
name|Qt
operator|::
name|FramelessWindowHint
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|glw
operator|.
name|resize
argument_list|(
literal|300
argument_list|,
literal|300
argument_list|)
expr_stmt|;
name|glw
operator|.
name|show
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_X11
name|qt_x11_wait_for_window_manager
argument_list|(
operator|&
name|glw
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|qWait
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|QImage
name|reference
argument_list|(
literal|300
argument_list|,
literal|300
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|QPainter
name|referencePainter
argument_list|(
operator|&
name|reference
argument_list|)
decl_stmt|;
name|glw
operator|.
name|paint
argument_list|(
operator|&
name|referencePainter
argument_list|)
expr_stmt|;
name|referencePainter
operator|.
name|end
argument_list|()
expr_stmt|;
specifier|const
name|QImage
name|widgetFB
init|=
name|glw
operator|.
name|grabFrameBuffer
argument_list|(
literal|false
argument_list|)
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
comment|// Sample pixels in a grid pattern which avoids false failures due to
comment|// off-by-one pixel errors on some buggy GL implementations
for|for
control|(
name|int
name|x
init|=
literal|25
init|;
name|x
operator|<
name|reference
operator|.
name|width
argument_list|()
condition|;
name|x
operator|+=
literal|50
control|)
block|{
for|for
control|(
name|int
name|y
init|=
literal|25
init|;
name|y
operator|<
name|reference
operator|.
name|width
argument_list|()
condition|;
name|y
operator|+=
literal|50
control|)
block|{
name|QFUZZY_COMPARE_PIXELS
argument_list|(
name|widgetFB
operator|.
name|pixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|,
name|reference
operator|.
name|pixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_class
DECL|class|ClipTestGLWidget
class|class
name|ClipTestGLWidget
super|:
specifier|public
name|QGLWidget
block|{
public|public:
DECL|function|paint
name|void
name|paint
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|)
block|{
name|painter
operator|->
name|fillRect
argument_list|(
operator|-
literal|1
argument_list|,
operator|-
literal|1
argument_list|,
name|width
argument_list|()
operator|+
literal|2
argument_list|,
name|height
argument_list|()
operator|+
literal|2
argument_list|,
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setClipRect
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
name|width
argument_list|()
operator|-
literal|20
argument_list|,
name|height
argument_list|()
operator|-
literal|20
argument_list|)
expr_stmt|;
name|painter
operator|->
name|fillRect
argument_list|(
name|rect
argument_list|()
argument_list|,
name|Qt
operator|::
name|cyan
argument_list|)
expr_stmt|;
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|painter
operator|->
name|setClipRect
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|,
name|Qt
operator|::
name|IntersectClip
argument_list|)
expr_stmt|;
name|painter
operator|->
name|fillRect
argument_list|(
name|rect
argument_list|()
argument_list|,
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|painter
operator|->
name|setClipRect
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|50
argument_list|,
literal|50
argument_list|,
name|Qt
operator|::
name|IntersectClip
argument_list|)
expr_stmt|;
name|painter
operator|->
name|fillRect
argument_list|(
name|rect
argument_list|()
argument_list|,
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
name|painter
operator|->
name|fillRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|40
argument_list|,
literal|40
argument_list|,
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|painter
operator|->
name|setClipRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|35
argument_list|,
literal|35
argument_list|,
name|Qt
operator|::
name|IntersectClip
argument_list|)
expr_stmt|;
name|painter
operator|->
name|fillRect
argument_list|(
name|rect
argument_list|()
argument_list|,
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
name|painter
operator|->
name|fillRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|,
name|Qt
operator|::
name|magenta
argument_list|)
expr_stmt|;
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
name|painter
operator|->
name|setClipRect
argument_list|(
literal|60
argument_list|,
literal|10
argument_list|,
literal|50
argument_list|,
literal|50
argument_list|,
name|Qt
operator|::
name|ReplaceClip
argument_list|)
expr_stmt|;
name|painter
operator|->
name|fillRect
argument_list|(
name|rect
argument_list|()
argument_list|,
name|Qt
operator|::
name|green
argument_list|)
expr_stmt|;
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
name|painter
operator|->
name|translate
argument_list|(
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
block|{
name|QPainterPath
name|path
decl_stmt|;
name|path
operator|.
name|addRect
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|path
operator|.
name|addRect
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setClipPath
argument_list|(
name|path
argument_list|,
name|Qt
operator|::
name|IntersectClip
argument_list|)
expr_stmt|;
block|}
name|painter
operator|->
name|fillRect
argument_list|(
name|rect
argument_list|()
argument_list|,
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
block|{
name|QPainterPath
name|path
decl_stmt|;
name|path
operator|.
name|addRect
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|50
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|path
operator|.
name|addRect
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setClipPath
argument_list|(
name|path
argument_list|,
name|Qt
operator|::
name|IntersectClip
argument_list|)
expr_stmt|;
block|}
name|painter
operator|->
name|fillRect
argument_list|(
name|rect
argument_list|()
argument_list|,
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
name|painter
operator|->
name|fillRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|40
argument_list|,
literal|40
argument_list|,
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
block|{
name|QPainterPath
name|path
decl_stmt|;
name|path
operator|.
name|addRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|35
argument_list|,
literal|35
argument_list|)
expr_stmt|;
name|path
operator|.
name|addRect
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setClipPath
argument_list|(
name|path
argument_list|,
name|Qt
operator|::
name|IntersectClip
argument_list|)
expr_stmt|;
block|}
name|painter
operator|->
name|fillRect
argument_list|(
name|rect
argument_list|()
argument_list|,
name|Qt
operator|::
name|black
argument_list|)
expr_stmt|;
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
name|painter
operator|->
name|fillRect
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|30
argument_list|,
literal|30
argument_list|,
name|Qt
operator|::
name|magenta
argument_list|)
expr_stmt|;
name|painter
operator|->
name|save
argument_list|()
expr_stmt|;
block|{
name|QPainterPath
name|path
decl_stmt|;
name|path
operator|.
name|addRect
argument_list|(
literal|60
argument_list|,
literal|10
argument_list|,
literal|50
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|path
operator|.
name|addRect
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|painter
operator|->
name|setClipPath
argument_list|(
name|path
argument_list|,
name|Qt
operator|::
name|ReplaceClip
argument_list|)
expr_stmt|;
block|}
name|painter
operator|->
name|fillRect
argument_list|(
name|rect
argument_list|()
argument_list|,
name|Qt
operator|::
name|green
argument_list|)
expr_stmt|;
name|painter
operator|->
name|restore
argument_list|()
expr_stmt|;
block|}
protected|protected:
DECL|function|paintEvent
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
name|QPainter
name|painter
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|paint
argument_list|(
operator|&
name|painter
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|clipTest
name|void
name|tst_QGL
operator|::
name|clipTest
parameter_list|()
block|{
name|ClipTestGLWidget
name|glw
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_QWS
name|glw
operator|.
name|setWindowFlags
argument_list|(
name|Qt
operator|::
name|FramelessWindowHint
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|glw
operator|.
name|resize
argument_list|(
literal|220
argument_list|,
literal|220
argument_list|)
expr_stmt|;
name|glw
operator|.
name|show
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_X11
name|qt_x11_wait_for_window_manager
argument_list|(
operator|&
name|glw
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|qWait
argument_list|(
literal|200
argument_list|)
expr_stmt|;
name|QImage
name|reference
argument_list|(
name|glw
operator|.
name|size
argument_list|()
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|QPainter
name|referencePainter
argument_list|(
operator|&
name|reference
argument_list|)
decl_stmt|;
name|glw
operator|.
name|paint
argument_list|(
operator|&
name|referencePainter
argument_list|)
expr_stmt|;
name|referencePainter
operator|.
name|end
argument_list|()
expr_stmt|;
specifier|const
name|QImage
name|widgetFB
init|=
name|glw
operator|.
name|grabFrameBuffer
argument_list|(
literal|false
argument_list|)
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
comment|// Sample pixels in a grid pattern which avoids false failures due to
comment|// off-by-one pixel errors on some buggy GL implementations
for|for
control|(
name|int
name|x
init|=
literal|2
init|;
name|x
operator|<
name|reference
operator|.
name|width
argument_list|()
condition|;
name|x
operator|+=
literal|5
control|)
block|{
for|for
control|(
name|int
name|y
init|=
literal|2
init|;
name|y
operator|<
name|reference
operator|.
name|height
argument_list|()
condition|;
name|y
operator|+=
literal|5
control|)
block|{
name|QFUZZY_COMPARE_PIXELS
argument_list|(
name|widgetFB
operator|.
name|pixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|,
name|reference
operator|.
name|pixel
argument_list|(
name|x
argument_list|,
name|y
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|destroyFBOAfterContext
name|void
name|tst_QGL
operator|::
name|destroyFBOAfterContext
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QGLFramebufferObject
operator|::
name|hasOpenGLFramebufferObjects
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"QGLFramebufferObject not supported on this platform"
argument_list|)
expr_stmt|;
name|QGLWidget
modifier|*
name|glw
init|=
operator|new
name|QGLWidget
argument_list|()
decl_stmt|;
name|glw
operator|->
name|makeCurrent
argument_list|()
expr_stmt|;
comment|// No multisample with combined depth/stencil attachment:
name|QGLFramebufferObjectFormat
name|fboFormat
decl_stmt|;
name|fboFormat
operator|.
name|setAttachment
argument_list|(
name|QGLFramebufferObject
operator|::
name|CombinedDepthStencil
argument_list|)
expr_stmt|;
comment|// Don't complicate things by using NPOT:
name|QGLFramebufferObject
modifier|*
name|fbo
init|=
operator|new
name|QGLFramebufferObject
argument_list|(
literal|256
argument_list|,
literal|128
argument_list|,
name|fboFormat
argument_list|)
decl_stmt|;
comment|// The handle should be valid until the context is destroyed.
name|QVERIFY
argument_list|(
name|fbo
operator|->
name|handle
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fbo
operator|->
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|glw
expr_stmt|;
comment|// The handle should now be zero.
name|QVERIFY
argument_list|(
name|fbo
operator|->
name|handle
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|fbo
operator|->
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|fbo
expr_stmt|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
end_ifdef
begin_class
DECL|class|tst_QGLResource
class|class
name|tst_QGLResource
block|{
public|public:
DECL|function|tst_QGLResource
name|tst_QGLResource
parameter_list|(
specifier|const
name|QGLContext
modifier|*
init|=
literal|0
parameter_list|)
block|{}
DECL|function|~tst_QGLResource
name|~
name|tst_QGLResource
parameter_list|()
block|{
operator|++
name|deletions
expr_stmt|;
block|}
DECL|member|deletions
specifier|static
name|int
name|deletions
decl_stmt|;
block|}
class|;
end_class
begin_decl_stmt
DECL|member|deletions
name|int
name|tst_QGLResource
operator|::
name|deletions
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_ifdef
ifdef|#
directive|ifdef
name|TODO
end_ifdef
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|QOpenGLContextGroupResource<tst_QGLResource>
argument_list|,
argument|qt_shared_test
argument_list|)
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//TODO
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|shareRegister
name|void
name|tst_QGL
operator|::
name|shareRegister
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|TODO
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
comment|// Create a context.
name|QGLWidget
modifier|*
name|glw1
init|=
operator|new
name|QGLWidget
argument_list|()
decl_stmt|;
name|glw1
operator|->
name|makeCurrent
argument_list|()
expr_stmt|;
comment|// Nothing should be sharing with glw1's context yet.
name|QVERIFY
argument_list|(
operator|!
name|glw1
operator|->
name|isSharing
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create a guard for the first context.
name|QOpenGLSharedResourceGuard
name|guard
argument_list|(
name|glw1
operator|->
name|context
argument_list|()
operator|->
name|contextHandle
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|guard
operator|.
name|id
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|guard
operator|.
name|setId
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|guard
operator|.
name|id
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
comment|// Request a tst_QGLResource object for the first context.
name|tst_QGLResource
modifier|*
name|res1
init|=
name|qt_shared_test
argument_list|()
operator|->
name|value
argument_list|(
name|glw1
operator|->
name|context
argument_list|()
operator|->
name|contextHandle
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|res1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qt_shared_test
argument_list|()
operator|->
name|value
argument_list|(
name|glw1
operator|->
name|context
argument_list|()
operator|->
name|contextHandle
argument_list|()
argument_list|)
operator|==
name|res1
argument_list|)
expr_stmt|;
comment|// Create another context that shares with the first.
name|QVERIFY
argument_list|(
operator|!
name|glw1
operator|->
name|isSharing
argument_list|()
argument_list|)
expr_stmt|;
name|QGLWidget
modifier|*
name|glw2
init|=
operator|new
name|QGLWidget
argument_list|(
literal|0
argument_list|,
name|glw1
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|glw2
operator|->
name|isSharing
argument_list|()
condition|)
block|{
operator|delete
name|glw2
expr_stmt|;
operator|delete
name|glw1
expr_stmt|;
name|QSKIP
argument_list|(
literal|"Context sharing is not supported"
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|glw1
operator|->
name|isSharing
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|glw1
operator|->
name|context
argument_list|()
operator|!=
name|glw2
operator|->
name|context
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check that the first context's resource is also on the second.
name|QVERIFY
argument_list|(
name|qt_shared_test
argument_list|()
operator|->
name|value
argument_list|(
name|glw1
operator|->
name|context
argument_list|()
argument_list|)
operator|==
name|res1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qt_shared_test
argument_list|()
operator|->
name|value
argument_list|(
name|glw2
operator|->
name|context
argument_list|()
argument_list|)
operator|==
name|res1
argument_list|)
expr_stmt|;
comment|// Guard should still be the same.
name|QVERIFY
argument_list|(
name|guard
operator|.
name|context
argument_list|()
operator|==
name|glw1
operator|->
name|context
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|guard
operator|.
name|id
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
comment|// Check the sharing relationships.
name|QVERIFY
argument_list|(
name|QGLContext
operator|::
name|areSharing
argument_list|(
name|glw1
operator|->
name|context
argument_list|()
argument_list|,
name|glw1
operator|->
name|context
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QGLContext
operator|::
name|areSharing
argument_list|(
name|glw2
operator|->
name|context
argument_list|()
argument_list|,
name|glw2
operator|->
name|context
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QGLContext
operator|::
name|areSharing
argument_list|(
name|glw1
operator|->
name|context
argument_list|()
argument_list|,
name|glw2
operator|->
name|context
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QGLContext
operator|::
name|areSharing
argument_list|(
name|glw2
operator|->
name|context
argument_list|()
argument_list|,
name|glw1
operator|->
name|context
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QGLContext
operator|::
name|areSharing
argument_list|(
literal|0
argument_list|,
name|glw2
operator|->
name|context
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QGLContext
operator|::
name|areSharing
argument_list|(
name|glw1
operator|->
name|context
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QGLContext
operator|::
name|areSharing
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Create a third context, not sharing with the others.
name|QGLWidget
modifier|*
name|glw3
init|=
operator|new
name|QGLWidget
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|glw3
operator|->
name|isSharing
argument_list|()
argument_list|)
expr_stmt|;
comment|// Create a guard on the standalone context.
name|QGLSharedResourceGuard
name|guard3
argument_list|(
name|glw3
operator|->
name|context
argument_list|()
argument_list|)
decl_stmt|;
name|guard3
operator|.
name|setId
argument_list|(
literal|5
argument_list|)
expr_stmt|;
comment|// Request a resource to the third context.
name|tst_QGLResource
modifier|*
name|res3
init|=
name|qt_shared_test
argument_list|()
operator|->
name|value
argument_list|(
name|glw3
operator|->
name|context
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|res3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qt_shared_test
argument_list|()
operator|->
name|value
argument_list|(
name|glw1
operator|->
name|context
argument_list|()
argument_list|)
operator|==
name|res1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qt_shared_test
argument_list|()
operator|->
name|value
argument_list|(
name|glw2
operator|->
name|context
argument_list|()
argument_list|)
operator|==
name|res1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qt_shared_test
argument_list|()
operator|->
name|value
argument_list|(
name|glw3
operator|->
name|context
argument_list|()
argument_list|)
operator|==
name|res3
argument_list|)
expr_stmt|;
comment|// Check the sharing relationships again.
name|QVERIFY
argument_list|(
name|QGLContext
operator|::
name|areSharing
argument_list|(
name|glw1
operator|->
name|context
argument_list|()
argument_list|,
name|glw1
operator|->
name|context
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QGLContext
operator|::
name|areSharing
argument_list|(
name|glw2
operator|->
name|context
argument_list|()
argument_list|,
name|glw2
operator|->
name|context
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QGLContext
operator|::
name|areSharing
argument_list|(
name|glw1
operator|->
name|context
argument_list|()
argument_list|,
name|glw2
operator|->
name|context
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QGLContext
operator|::
name|areSharing
argument_list|(
name|glw2
operator|->
name|context
argument_list|()
argument_list|,
name|glw1
operator|->
name|context
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QGLContext
operator|::
name|areSharing
argument_list|(
name|glw1
operator|->
name|context
argument_list|()
argument_list|,
name|glw3
operator|->
name|context
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QGLContext
operator|::
name|areSharing
argument_list|(
name|glw2
operator|->
name|context
argument_list|()
argument_list|,
name|glw3
operator|->
name|context
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QGLContext
operator|::
name|areSharing
argument_list|(
name|glw3
operator|->
name|context
argument_list|()
argument_list|,
name|glw1
operator|->
name|context
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QGLContext
operator|::
name|areSharing
argument_list|(
name|glw3
operator|->
name|context
argument_list|()
argument_list|,
name|glw2
operator|->
name|context
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QGLContext
operator|::
name|areSharing
argument_list|(
name|glw3
operator|->
name|context
argument_list|()
argument_list|,
name|glw3
operator|->
name|context
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QGLContext
operator|::
name|areSharing
argument_list|(
literal|0
argument_list|,
name|glw2
operator|->
name|context
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QGLContext
operator|::
name|areSharing
argument_list|(
name|glw1
operator|->
name|context
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QGLContext
operator|::
name|areSharing
argument_list|(
literal|0
argument_list|,
name|glw3
operator|->
name|context
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QGLContext
operator|::
name|areSharing
argument_list|(
name|glw3
operator|->
name|context
argument_list|()
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QGLContext
operator|::
name|areSharing
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// Shared guard should still be the same.
name|QVERIFY
argument_list|(
name|guard
operator|.
name|context
argument_list|()
operator|==
name|glw1
operator|->
name|context
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|guard
operator|.
name|id
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
comment|// Delete the first context.
operator|delete
name|glw1
expr_stmt|;
comment|// The second context should no longer register as sharing.
name|QVERIFY
argument_list|(
operator|!
name|glw2
operator|->
name|isSharing
argument_list|()
argument_list|)
expr_stmt|;
comment|// The first context's resource should transfer to the second context.
name|QCOMPARE
argument_list|(
name|tst_QGLResource
operator|::
name|deletions
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qt_shared_test
argument_list|()
operator|->
name|value
argument_list|(
name|glw2
operator|->
name|context
argument_list|()
argument_list|)
operator|==
name|res1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qt_shared_test
argument_list|()
operator|->
name|value
argument_list|(
name|glw3
operator|->
name|context
argument_list|()
argument_list|)
operator|==
name|res3
argument_list|)
expr_stmt|;
comment|// Shared guard should now be the second context, with the id the same.
name|QVERIFY
argument_list|(
name|guard
operator|.
name|context
argument_list|()
operator|==
name|glw2
operator|->
name|context
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|guard
operator|.
name|id
argument_list|()
operator|==
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|guard3
operator|.
name|context
argument_list|()
operator|==
name|glw3
operator|->
name|context
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|guard3
operator|.
name|id
argument_list|()
operator|==
literal|5
argument_list|)
expr_stmt|;
comment|// Clean up and check that the resources are properly deleted.
operator|delete
name|glw2
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tst_QGLResource
operator|::
name|deletions
argument_list|,
literal|1
argument_list|)
expr_stmt|;
operator|delete
name|glw3
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tst_QGLResource
operator|::
name|deletions
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// Guards should now be null and the id zero.
name|QVERIFY
argument_list|(
name|guard
operator|.
name|context
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|guard
operator|.
name|id
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|guard3
operator|.
name|context
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|guard3
operator|.
name|id
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
endif|#
directive|endif
endif|#
directive|endif
comment|//TODO
block|}
end_function
begin_comment
comment|// Tests QGLContext::bindTexture with default options
end_comment
begin_function
DECL|function|qglContextDefaultBindTexture
name|void
name|tst_QGL
operator|::
name|qglContextDefaultBindTexture
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
name|QGLWidget
name|w
decl_stmt|;
name|w
operator|.
name|makeCurrent
argument_list|()
expr_stmt|;
name|QGLContext
modifier|*
name|ctx
init|=
cast|const_cast
argument_list|<
name|QGLContext
operator|*
argument_list|>
argument_list|(
name|w
operator|.
name|context
argument_list|()
argument_list|)
decl_stmt|;
name|QImage
modifier|*
name|boundImage
init|=
operator|new
name|QImage
argument_list|(
literal|256
argument_list|,
literal|256
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|boundImage
operator|->
name|fill
argument_list|(
literal|0xFFFFFFFF
argument_list|)
expr_stmt|;
name|QPixmap
modifier|*
name|boundPixmap
init|=
operator|new
name|QPixmap
argument_list|(
literal|256
argument_list|,
literal|256
argument_list|)
decl_stmt|;
name|boundPixmap
operator|->
name|fill
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|int
name|startCacheItemCount
init|=
name|QGLTextureCache
operator|::
name|instance
argument_list|()
operator|->
name|size
argument_list|()
decl_stmt|;
name|GLuint
name|boundImageTextureId
init|=
name|ctx
operator|->
name|bindTexture
argument_list|(
operator|*
name|boundImage
argument_list|)
decl_stmt|;
name|GLuint
name|boundPixmapTextureId
init|=
name|ctx
operator|->
name|bindTexture
argument_list|(
operator|*
name|boundPixmap
argument_list|)
decl_stmt|;
comment|// Make sure the image& pixmap have been added to the cache:
name|QCOMPARE
argument_list|(
name|QGLTextureCache
operator|::
name|instance
argument_list|()
operator|->
name|size
argument_list|()
argument_list|,
name|startCacheItemCount
operator|+
literal|2
argument_list|)
expr_stmt|;
comment|// Make sure the image& pixmap have the is_cached flag set:
name|QVERIFY
argument_list|(
name|QImagePixmapCleanupHooks
operator|::
name|isImageCached
argument_list|(
operator|*
name|boundImage
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QImagePixmapCleanupHooks
operator|::
name|isPixmapCached
argument_list|(
operator|*
name|boundPixmap
argument_list|)
argument_list|)
expr_stmt|;
comment|// Make sure the texture IDs returned are valid:
name|QCOMPARE
argument_list|(
operator|(
name|bool
operator|)
name|glIsTexture
argument_list|(
name|boundImageTextureId
argument_list|)
argument_list|,
name|GL_TRUE
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|bool
operator|)
name|glIsTexture
argument_list|(
name|boundPixmapTextureId
argument_list|)
argument_list|,
name|GL_TRUE
argument_list|)
expr_stmt|;
comment|// Make sure the textures are still valid after we delete the image/pixmap:
comment|// Also check that although the textures are left intact, the cache entries are removed:
operator|delete
name|boundImage
expr_stmt|;
name|boundImage
operator|=
literal|0
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|bool
operator|)
name|glIsTexture
argument_list|(
name|boundImageTextureId
argument_list|)
argument_list|,
name|GL_TRUE
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGLTextureCache
operator|::
name|instance
argument_list|()
operator|->
name|size
argument_list|()
argument_list|,
name|startCacheItemCount
operator|+
literal|1
argument_list|)
expr_stmt|;
operator|delete
name|boundPixmap
expr_stmt|;
name|boundPixmap
operator|=
literal|0
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|bool
operator|)
name|glIsTexture
argument_list|(
name|boundPixmapTextureId
argument_list|)
argument_list|,
name|GL_TRUE
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGLTextureCache
operator|::
name|instance
argument_list|()
operator|->
name|size
argument_list|()
argument_list|,
name|startCacheItemCount
argument_list|)
expr_stmt|;
comment|// Finally, make sure QGLContext::deleteTexture deletes the texture IDs:
name|ctx
operator|->
name|deleteTexture
argument_list|(
name|boundImageTextureId
argument_list|)
expr_stmt|;
name|ctx
operator|->
name|deleteTexture
argument_list|(
name|boundPixmapTextureId
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|bool
operator|)
name|glIsTexture
argument_list|(
name|boundImageTextureId
argument_list|)
argument_list|,
name|GL_FALSE
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|bool
operator|)
name|glIsTexture
argument_list|(
name|boundPixmapTextureId
argument_list|)
argument_list|,
name|GL_FALSE
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|textureCleanup
name|void
name|tst_QGL
operator|::
name|textureCleanup
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
name|QGLWidget
name|w
decl_stmt|;
name|w
operator|.
name|resize
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
name|w
operator|.
name|makeCurrent
argument_list|()
expr_stmt|;
comment|// Test pixmaps which have been loaded via QPixmapCache are removed from the texture cache
comment|// when the pixmap cache is cleared
block|{
name|int
name|startCacheItemCount
init|=
name|QGLTextureCache
operator|::
name|instance
argument_list|()
operator|->
name|size
argument_list|()
decl_stmt|;
name|QPainter
name|p
argument_list|(
operator|&
name|w
argument_list|)
decl_stmt|;
name|QPixmap
name|boundPixmap
argument_list|(
literal|":designer.png"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|QGLTextureCache
operator|::
name|instance
argument_list|()
operator|->
name|size
argument_list|()
argument_list|,
name|startCacheItemCount
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawPixmap
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|boundPixmap
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGLTextureCache
operator|::
name|instance
argument_list|()
operator|->
name|size
argument_list|()
argument_list|,
name|startCacheItemCount
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// Need to call end for the GL2 paint engine to release references to pixmap if using tfp
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGLTextureCache
operator|::
name|instance
argument_list|()
operator|->
name|size
argument_list|()
argument_list|,
name|startCacheItemCount
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// Check that the texture doesn't get removed from the cache when the pixmap is cleared
comment|// as it should still be in the cache:
name|boundPixmap
operator|=
name|QPixmap
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGLTextureCache
operator|::
name|instance
argument_list|()
operator|->
name|size
argument_list|()
argument_list|,
name|startCacheItemCount
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QPixmapCache
operator|::
name|clear
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGLTextureCache
operator|::
name|instance
argument_list|()
operator|->
name|size
argument_list|()
argument_list|,
name|startCacheItemCount
argument_list|)
expr_stmt|;
block|}
comment|// Test pixmaps which have been loaded via QPixmapCache are removed from the texture cache
comment|// when they are explicitly removed from the pixmap cache
block|{
name|int
name|startCacheItemCount
init|=
name|QGLTextureCache
operator|::
name|instance
argument_list|()
operator|->
name|size
argument_list|()
decl_stmt|;
name|QPainter
name|p
argument_list|(
operator|&
name|w
argument_list|)
decl_stmt|;
name|QPixmap
name|boundPixmap
argument_list|(
literal|128
argument_list|,
literal|128
argument_list|)
decl_stmt|;
name|QString
name|cacheKey
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"myPixmap"
argument_list|)
decl_stmt|;
name|QPixmapCache
operator|::
name|insert
argument_list|(
name|cacheKey
argument_list|,
name|boundPixmap
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGLTextureCache
operator|::
name|instance
argument_list|()
operator|->
name|size
argument_list|()
argument_list|,
name|startCacheItemCount
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawPixmap
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|boundPixmap
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGLTextureCache
operator|::
name|instance
argument_list|()
operator|->
name|size
argument_list|()
argument_list|,
name|startCacheItemCount
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// Need to call end for the GL2 paint engine to release references to pixmap if using tfp
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGLTextureCache
operator|::
name|instance
argument_list|()
operator|->
name|size
argument_list|()
argument_list|,
name|startCacheItemCount
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// Check that the texture doesn't get removed from the cache when the pixmap is cleared
comment|// as it should still be in the cache:
name|boundPixmap
operator|=
name|QPixmap
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGLTextureCache
operator|::
name|instance
argument_list|()
operator|->
name|size
argument_list|()
argument_list|,
name|startCacheItemCount
operator|+
literal|1
argument_list|)
expr_stmt|;
comment|// Finally, we check that the texture cache entry is removed when we remove the
comment|// pixmap cache entry, which should hold the last reference:
name|QPixmapCache
operator|::
name|remove
argument_list|(
name|cacheKey
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGLTextureCache
operator|::
name|instance
argument_list|()
operator|->
name|size
argument_list|()
argument_list|,
name|startCacheItemCount
argument_list|)
expr_stmt|;
block|}
comment|// Check images& pixmaps are removed from the cache when they are deleted
block|{
name|int
name|startCacheItemCount
init|=
name|QGLTextureCache
operator|::
name|instance
argument_list|()
operator|->
name|size
argument_list|()
decl_stmt|;
name|QPainter
name|p
argument_list|(
operator|&
name|w
argument_list|)
decl_stmt|;
name|QImage
modifier|*
name|boundImage
init|=
operator|new
name|QImage
argument_list|(
literal|256
argument_list|,
literal|256
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|boundImage
operator|->
name|fill
argument_list|(
literal|0xFFFFFFFF
argument_list|)
expr_stmt|;
name|QPixmap
modifier|*
name|boundPixmap
init|=
operator|new
name|QPixmap
argument_list|(
literal|256
argument_list|,
literal|256
argument_list|)
decl_stmt|;
name|boundPixmap
operator|->
name|fill
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGLTextureCache
operator|::
name|instance
argument_list|()
operator|->
name|size
argument_list|()
argument_list|,
name|startCacheItemCount
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawImage
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|*
name|boundImage
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGLTextureCache
operator|::
name|instance
argument_list|()
operator|->
name|size
argument_list|()
argument_list|,
name|startCacheItemCount
operator|+
literal|1
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawPixmap
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|*
name|boundPixmap
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGLTextureCache
operator|::
name|instance
argument_list|()
operator|->
name|size
argument_list|()
argument_list|,
name|startCacheItemCount
operator|+
literal|2
argument_list|)
expr_stmt|;
comment|// Need to call end for the GL2 paint engine to release references to pixmap if using tfp
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGLTextureCache
operator|::
name|instance
argument_list|()
operator|->
name|size
argument_list|()
argument_list|,
name|startCacheItemCount
operator|+
literal|2
argument_list|)
expr_stmt|;
operator|delete
name|boundImage
expr_stmt|;
name|boundImage
operator|=
literal|0
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGLTextureCache
operator|::
name|instance
argument_list|()
operator|->
name|size
argument_list|()
argument_list|,
name|startCacheItemCount
operator|+
literal|1
argument_list|)
expr_stmt|;
operator|delete
name|boundPixmap
expr_stmt|;
name|boundPixmap
operator|=
literal|0
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGLTextureCache
operator|::
name|instance
argument_list|()
operator|->
name|size
argument_list|()
argument_list|,
name|startCacheItemCount
argument_list|)
expr_stmt|;
block|}
comment|// Check images& pixmaps are removed from the cache when they are assigned to
block|{
name|int
name|startCacheItemCount
init|=
name|QGLTextureCache
operator|::
name|instance
argument_list|()
operator|->
name|size
argument_list|()
decl_stmt|;
name|QPainter
name|p
argument_list|(
operator|&
name|w
argument_list|)
decl_stmt|;
name|QImage
name|boundImage
argument_list|(
literal|256
argument_list|,
literal|256
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|boundImage
operator|.
name|fill
argument_list|(
literal|0xFFFFFFFF
argument_list|)
expr_stmt|;
name|QPixmap
name|boundPixmap
argument_list|(
literal|256
argument_list|,
literal|256
argument_list|)
decl_stmt|;
name|boundPixmap
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGLTextureCache
operator|::
name|instance
argument_list|()
operator|->
name|size
argument_list|()
argument_list|,
name|startCacheItemCount
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawImage
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|boundImage
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGLTextureCache
operator|::
name|instance
argument_list|()
operator|->
name|size
argument_list|()
argument_list|,
name|startCacheItemCount
operator|+
literal|1
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawPixmap
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|boundPixmap
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGLTextureCache
operator|::
name|instance
argument_list|()
operator|->
name|size
argument_list|()
argument_list|,
name|startCacheItemCount
operator|+
literal|2
argument_list|)
expr_stmt|;
comment|// Need to call end for the GL2 paint engine to release references to pixmap if using tfp
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGLTextureCache
operator|::
name|instance
argument_list|()
operator|->
name|size
argument_list|()
argument_list|,
name|startCacheItemCount
operator|+
literal|2
argument_list|)
expr_stmt|;
name|boundImage
operator|=
name|QImage
argument_list|(
literal|64
argument_list|,
literal|64
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGLTextureCache
operator|::
name|instance
argument_list|()
operator|->
name|size
argument_list|()
argument_list|,
name|startCacheItemCount
operator|+
literal|1
argument_list|)
expr_stmt|;
name|boundPixmap
operator|=
name|QPixmap
argument_list|(
literal|64
argument_list|,
literal|64
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGLTextureCache
operator|::
name|instance
argument_list|()
operator|->
name|size
argument_list|()
argument_list|,
name|startCacheItemCount
argument_list|)
expr_stmt|;
block|}
comment|// Check images& pixmaps are removed from the cache when they are modified (detached)
block|{
name|int
name|startCacheItemCount
init|=
name|QGLTextureCache
operator|::
name|instance
argument_list|()
operator|->
name|size
argument_list|()
decl_stmt|;
name|QPainter
name|p
argument_list|(
operator|&
name|w
argument_list|)
decl_stmt|;
name|QImage
name|boundImage
argument_list|(
literal|256
argument_list|,
literal|256
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|boundImage
operator|.
name|fill
argument_list|(
literal|0xFFFFFFFF
argument_list|)
expr_stmt|;
name|QPixmap
name|boundPixmap
argument_list|(
literal|256
argument_list|,
literal|256
argument_list|)
decl_stmt|;
name|boundPixmap
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGLTextureCache
operator|::
name|instance
argument_list|()
operator|->
name|size
argument_list|()
argument_list|,
name|startCacheItemCount
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawImage
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|boundImage
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGLTextureCache
operator|::
name|instance
argument_list|()
operator|->
name|size
argument_list|()
argument_list|,
name|startCacheItemCount
operator|+
literal|1
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawPixmap
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|boundPixmap
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGLTextureCache
operator|::
name|instance
argument_list|()
operator|->
name|size
argument_list|()
argument_list|,
name|startCacheItemCount
operator|+
literal|2
argument_list|)
expr_stmt|;
comment|// Need to call end for the GL2 paint engine to release references to pixmap if using tfp
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGLTextureCache
operator|::
name|instance
argument_list|()
operator|->
name|size
argument_list|()
argument_list|,
name|startCacheItemCount
operator|+
literal|2
argument_list|)
expr_stmt|;
name|boundImage
operator|.
name|fill
argument_list|(
literal|0x00000000
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGLTextureCache
operator|::
name|instance
argument_list|()
operator|->
name|size
argument_list|()
argument_list|,
name|startCacheItemCount
operator|+
literal|1
argument_list|)
expr_stmt|;
name|boundPixmap
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGLTextureCache
operator|::
name|instance
argument_list|()
operator|->
name|size
argument_list|()
argument_list|,
name|startCacheItemCount
argument_list|)
expr_stmt|;
block|}
comment|// Check that images/pixmaps aren't removed from the cache if a shallow copy has been made
name|QImage
name|copyOfImage
decl_stmt|;
name|QPixmap
name|copyOfPixmap
decl_stmt|;
name|int
name|startCacheItemCount
init|=
name|QGLTextureCache
operator|::
name|instance
argument_list|()
operator|->
name|size
argument_list|()
decl_stmt|;
block|{
name|QPainter
name|p
argument_list|(
operator|&
name|w
argument_list|)
decl_stmt|;
name|QImage
name|boundImage
argument_list|(
literal|256
argument_list|,
literal|256
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|boundImage
operator|.
name|fill
argument_list|(
literal|0xFFFFFFFF
argument_list|)
expr_stmt|;
name|QPixmap
name|boundPixmap
argument_list|(
literal|256
argument_list|,
literal|256
argument_list|)
decl_stmt|;
name|boundPixmap
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGLTextureCache
operator|::
name|instance
argument_list|()
operator|->
name|size
argument_list|()
argument_list|,
name|startCacheItemCount
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawImage
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|boundImage
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGLTextureCache
operator|::
name|instance
argument_list|()
operator|->
name|size
argument_list|()
argument_list|,
name|startCacheItemCount
operator|+
literal|1
argument_list|)
expr_stmt|;
name|p
operator|.
name|drawPixmap
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|boundPixmap
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGLTextureCache
operator|::
name|instance
argument_list|()
operator|->
name|size
argument_list|()
argument_list|,
name|startCacheItemCount
operator|+
literal|2
argument_list|)
expr_stmt|;
comment|// Need to call end for the GL2 paint engine to release references to pixmap if using tfp
name|p
operator|.
name|end
argument_list|()
expr_stmt|;
name|copyOfImage
operator|=
name|boundImage
expr_stmt|;
name|copyOfPixmap
operator|=
name|boundPixmap
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGLTextureCache
operator|::
name|instance
argument_list|()
operator|->
name|size
argument_list|()
argument_list|,
name|startCacheItemCount
operator|+
literal|2
argument_list|)
expr_stmt|;
block|}
comment|// boundImage& boundPixmap would have been deleted when they went out of scope
name|QCOMPARE
argument_list|(
name|QGLTextureCache
operator|::
name|instance
argument_list|()
operator|->
name|size
argument_list|()
argument_list|,
name|startCacheItemCount
operator|+
literal|2
argument_list|)
expr_stmt|;
name|copyOfImage
operator|=
name|QImage
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGLTextureCache
operator|::
name|instance
argument_list|()
operator|->
name|size
argument_list|()
argument_list|,
name|startCacheItemCount
operator|+
literal|1
argument_list|)
expr_stmt|;
name|copyOfPixmap
operator|=
name|QPixmap
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QGLTextureCache
operator|::
name|instance
argument_list|()
operator|->
name|size
argument_list|()
argument_list|,
name|startCacheItemCount
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_namespace
DECL|namespace|ThreadImages
namespace|namespace
name|ThreadImages
block|{
DECL|class|Producer
class|class
name|Producer
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|Producer
name|Producer
parameter_list|()
block|{
name|startTimer
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|QThread
modifier|*
name|thread
init|=
operator|new
name|QThread
decl_stmt|;
name|thread
operator|->
name|start
argument_list|()
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|()
argument_list|)
argument_list|,
name|thread
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|moveToThread
argument_list|(
name|thread
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|thread
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
name|thread
argument_list|,
name|SLOT
argument_list|(
name|deleteLater
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
signals|signals:
name|void
name|imageReady
parameter_list|(
specifier|const
name|QImage
modifier|&
name|image
parameter_list|)
function_decl|;
protected|protected:
DECL|function|timerEvent
name|void
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
parameter_list|)
block|{
name|QImage
name|image
argument_list|(
literal|256
argument_list|,
literal|256
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|QLinearGradient
name|g
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|256
argument_list|)
decl_stmt|;
name|g
operator|.
name|setColorAt
argument_list|(
literal|0
argument_list|,
name|QColor
argument_list|(
literal|255
argument_list|,
literal|180
argument_list|,
literal|180
argument_list|)
argument_list|)
expr_stmt|;
name|g
operator|.
name|setColorAt
argument_list|(
literal|1
argument_list|,
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|g
operator|.
name|setSpread
argument_list|(
name|QGradient
operator|::
name|ReflectSpread
argument_list|)
expr_stmt|;
name|QBrush
name|brush
argument_list|(
name|g
argument_list|)
decl_stmt|;
name|brush
operator|.
name|setTransform
argument_list|(
name|QTransform
operator|::
name|fromTranslate
argument_list|(
literal|0
argument_list|,
name|delta
argument_list|)
argument_list|)
expr_stmt|;
name|delta
operator|+=
literal|10
expr_stmt|;
name|QPainter
name|p
argument_list|(
operator|&
name|image
argument_list|)
decl_stmt|;
name|p
operator|.
name|fillRect
argument_list|(
name|image
operator|.
name|rect
argument_list|()
argument_list|,
name|brush
argument_list|)
expr_stmt|;
if|if
condition|(
name|images
operator|.
name|size
argument_list|()
operator|>
literal|10
condition|)
name|images
operator|.
name|removeFirst
argument_list|()
expr_stmt|;
name|images
operator|.
name|append
argument_list|(
name|image
argument_list|)
expr_stmt|;
emit|emit
name|imageReady
argument_list|(
name|image
argument_list|)
emit|;
block|}
private|private:
DECL|member|images
name|QList
argument_list|<
name|QImage
argument_list|>
name|images
decl_stmt|;
DECL|member|delta
name|int
name|delta
decl_stmt|;
block|}
class|;
DECL|class|DisplayWidget
class|class
name|DisplayWidget
super|:
specifier|public
name|QGLWidget
block|{
name|Q_OBJECT
public|public:
DECL|function|DisplayWidget
name|DisplayWidget
parameter_list|(
name|QWidget
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QGLWidget
argument_list|(
name|parent
argument_list|)
block|{}
DECL|function|paintEvent
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
parameter_list|)
block|{
name|QPainter
name|p
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|p
operator|.
name|drawImage
argument_list|(
name|rect
argument_list|()
argument_list|,
name|m_image
argument_list|)
expr_stmt|;
block|}
public|public
name|slots
public|:
DECL|function|setImage
name|void
name|setImage
parameter_list|(
specifier|const
name|QImage
modifier|&
name|image
parameter_list|)
block|{
name|m_image
operator|=
name|image
expr_stmt|;
name|update
argument_list|()
expr_stmt|;
block|}
private|private:
DECL|member|m_image
name|QImage
name|m_image
decl_stmt|;
block|}
class|;
DECL|class|Widget
class|class
name|Widget
super|:
specifier|public
name|QWidget
block|{
name|Q_OBJECT
public|public:
DECL|function|Widget
name|Widget
parameter_list|()
member_init_list|:
name|iterations
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|display
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|producer
argument_list|(
operator|new
name|Producer
argument_list|)
block|{
name|startTimer
argument_list|(
literal|400
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|()
argument_list|)
argument_list|,
name|producer
argument_list|,
name|SLOT
argument_list|(
name|deleteLater
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|member|iterations
name|int
name|iterations
decl_stmt|;
protected|protected:
DECL|function|timerEvent
name|void
name|timerEvent
parameter_list|(
name|QTimerEvent
modifier|*
parameter_list|)
block|{
operator|++
name|iterations
expr_stmt|;
operator|delete
name|display
expr_stmt|;
name|display
operator|=
operator|new
name|DisplayWidget
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|producer
argument_list|,
name|SIGNAL
argument_list|(
name|imageReady
argument_list|(
specifier|const
name|QImage
operator|&
argument_list|)
argument_list|)
argument_list|,
name|display
argument_list|,
name|SLOT
argument_list|(
name|setImage
argument_list|(
specifier|const
name|QImage
operator|&
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|display
operator|->
name|setGeometry
argument_list|(
name|rect
argument_list|()
argument_list|)
expr_stmt|;
name|display
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
private|private:
DECL|member|display
name|DisplayWidget
modifier|*
name|display
decl_stmt|;
DECL|member|producer
name|Producer
modifier|*
name|producer
decl_stmt|;
block|}
class|;
block|}
end_namespace
begin_function
DECL|function|threadImages
name|void
name|tst_QGL
operator|::
name|threadImages
parameter_list|()
block|{
name|ThreadImages
operator|::
name|Widget
modifier|*
name|widget
init|=
operator|new
name|ThreadImages
operator|::
name|Widget
decl_stmt|;
name|widget
operator|->
name|show
argument_list|()
expr_stmt|;
while|while
condition|(
name|widget
operator|->
name|iterations
operator|<=
literal|5
condition|)
block|{
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
block|}
operator|delete
name|widget
expr_stmt|;
block|}
end_function
begin_function
DECL|function|nullRectCrash
name|void
name|tst_QGL
operator|::
name|nullRectCrash
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QGLFramebufferObject
operator|::
name|hasOpenGLFramebufferObjects
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"QGLFramebufferObject not supported on this platform"
argument_list|)
expr_stmt|;
name|QGLWidget
name|glw
decl_stmt|;
name|glw
operator|.
name|makeCurrent
argument_list|()
expr_stmt|;
name|QGLFramebufferObjectFormat
name|fboFormat
decl_stmt|;
name|fboFormat
operator|.
name|setAttachment
argument_list|(
name|QGLFramebufferObject
operator|::
name|CombinedDepthStencil
argument_list|)
expr_stmt|;
name|QGLFramebufferObject
modifier|*
name|fbo
init|=
operator|new
name|QGLFramebufferObject
argument_list|(
literal|128
argument_list|,
literal|128
argument_list|,
name|fboFormat
argument_list|)
decl_stmt|;
name|QPainter
name|fboPainter
argument_list|(
name|fbo
argument_list|)
decl_stmt|;
name|fboPainter
operator|.
name|setPen
argument_list|(
name|QPen
argument_list|(
name|QColor
argument_list|(
literal|255
argument_list|,
literal|127
argument_list|,
literal|127
argument_list|,
literal|127
argument_list|)
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|fboPainter
operator|.
name|setBrush
argument_list|(
name|QColor
argument_list|(
literal|127
argument_list|,
literal|255
argument_list|,
literal|127
argument_list|,
literal|127
argument_list|)
argument_list|)
expr_stmt|;
name|fboPainter
operator|.
name|drawRect
argument_list|(
name|QRectF
argument_list|()
argument_list|)
expr_stmt|;
name|fboPainter
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QGL
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qgl.moc"
end_include
end_unit
