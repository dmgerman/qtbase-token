begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QBuffer>
end_include
begin_include
include|#
directive|include
file|<QByteArray>
end_include
begin_comment
comment|//TESTED_CLASS=
end_comment
begin_comment
comment|//TESTED_FILES=
end_comment
begin_class
DECL|class|tst_QBuffer
class|class
name|tst_QBuffer
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QBuffer
parameter_list|()
constructor_decl|;
private|private
name|slots
private|:
name|void
name|getSetCheck
parameter_list|()
function_decl|;
name|void
name|readBlock
parameter_list|()
function_decl|;
name|void
name|readBlockPastEnd
parameter_list|()
function_decl|;
name|void
name|writeBlock_data
parameter_list|()
function_decl|;
name|void
name|writeBlock
parameter_list|()
function_decl|;
name|void
name|seek
parameter_list|()
function_decl|;
name|void
name|seekTest_data
parameter_list|()
function_decl|;
name|void
name|seekTest
parameter_list|()
function_decl|;
name|void
name|read_rawdata
parameter_list|()
function_decl|;
name|void
name|isSequential
parameter_list|()
function_decl|;
name|void
name|signalTest_data
parameter_list|()
function_decl|;
name|void
name|signalTest
parameter_list|()
function_decl|;
name|void
name|isClosedAfterClose
parameter_list|()
function_decl|;
name|void
name|readLine_data
parameter_list|()
function_decl|;
name|void
name|readLine
parameter_list|()
function_decl|;
name|void
name|canReadLine_data
parameter_list|()
function_decl|;
name|void
name|canReadLine
parameter_list|()
function_decl|;
name|void
name|atEnd
parameter_list|()
function_decl|;
name|void
name|readLineBoundaries
parameter_list|()
function_decl|;
name|void
name|writeAfterQByteArrayResize
parameter_list|()
function_decl|;
name|void
name|read_null
parameter_list|()
function_decl|;
protected|protected
name|slots
protected|:
name|void
name|readyReadSlot
parameter_list|()
function_decl|;
name|void
name|bytesWrittenSlot
parameter_list|(
name|qint64
name|written
parameter_list|)
function_decl|;
private|private:
DECL|member|totalBytesWritten
name|qint64
name|totalBytesWritten
decl_stmt|;
DECL|member|gotReadyRead
name|bool
name|gotReadyRead
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|// Testing get/set functions
end_comment
begin_function
DECL|function|getSetCheck
name|void
name|tst_QBuffer
operator|::
name|getSetCheck
parameter_list|()
block|{
name|QBuffer
name|obj1
decl_stmt|;
comment|// const QByteArray& QBuffer::data()
comment|// void QBuffer::setData(const QByteArray&)
name|QByteArray
name|var1
argument_list|(
literal|"Bogus data"
argument_list|)
decl_stmt|;
name|obj1
operator|.
name|setData
argument_list|(
name|var1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|var1
argument_list|,
name|obj1
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setData
argument_list|(
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QByteArray
argument_list|()
argument_list|,
name|obj1
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|tst_QBuffer
name|tst_QBuffer
operator|::
name|tst_QBuffer
parameter_list|()
block|{ }
end_constructor
begin_comment
comment|// some status() tests, too
end_comment
begin_function
DECL|function|readBlock
name|void
name|tst_QBuffer
operator|::
name|readBlock
parameter_list|()
block|{
comment|//    QTest::ignoreMessage(QtWarningMsg, "QIODevice::read: File not open");
comment|//    QTest::ignoreMessage(QtWarningMsg, "QIODevice::read: Read operation not permitted");
specifier|const
name|int
name|arraySize
init|=
literal|10
decl_stmt|;
name|char
name|a
index|[
name|arraySize
index|]
decl_stmt|;
name|QBuffer
name|b
decl_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|read
argument_list|(
name|a
argument_list|,
name|arraySize
argument_list|)
argument_list|,
operator|(
name|qint64
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// not opened
name|QVERIFY
argument_list|(
name|b
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
name|QByteArray
name|ba
decl_stmt|;
name|ba
operator|.
name|resize
argument_list|(
name|arraySize
argument_list|)
expr_stmt|;
name|b
operator|.
name|setBuffer
argument_list|(
operator|&
name|ba
argument_list|)
expr_stmt|;
name|b
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QIODevice::read: WriteOnly device"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|read
argument_list|(
name|a
argument_list|,
name|arraySize
argument_list|)
argument_list|,
operator|(
name|qint64
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// no read access
name|b
operator|.
name|close
argument_list|()
expr_stmt|;
name|b
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|read
argument_list|(
name|a
argument_list|,
name|arraySize
argument_list|)
argument_list|,
operator|(
name|qint64
operator|)
name|arraySize
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|b
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
comment|// up to 3.0.x reading beyond the end was an error while ok
comment|// this has been made consistent with other QIODevice sub classes in 3.1
name|QCOMPARE
argument_list|(
name|b
operator|.
name|read
argument_list|(
name|a
argument_list|,
literal|1
argument_list|)
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|b
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
comment|// read in two chunks
name|b
operator|.
name|close
argument_list|()
expr_stmt|;
name|b
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|read
argument_list|(
name|a
argument_list|,
name|arraySize
operator|/
literal|2
argument_list|)
argument_list|,
operator|(
name|qint64
operator|)
name|arraySize
operator|/
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|b
operator|.
name|read
argument_list|(
name|a
operator|+
name|arraySize
operator|/
literal|2
argument_list|,
name|arraySize
operator|-
name|arraySize
operator|/
literal|2
argument_list|)
argument_list|,
call|(
name|qint64
call|)
argument_list|(
name|arraySize
operator|-
name|arraySize
operator|/
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|b
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readBlockPastEnd
name|void
name|tst_QBuffer
operator|::
name|readBlockPastEnd
parameter_list|()
block|{
name|QByteArray
name|arr
argument_list|(
literal|4096
operator|+
literal|3616
argument_list|,
literal|'d'
argument_list|)
decl_stmt|;
name|QBuffer
name|buf
argument_list|(
operator|&
name|arr
argument_list|)
decl_stmt|;
name|buf
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|char
name|dummy
index|[
literal|4096
index|]
decl_stmt|;
name|buf
operator|.
name|read
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|buf
operator|.
name|read
argument_list|(
name|dummy
argument_list|,
literal|4096
argument_list|)
argument_list|,
name|qint64
argument_list|(
literal|4096
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|buf
operator|.
name|read
argument_list|(
name|dummy
argument_list|,
literal|4096
argument_list|)
argument_list|,
name|qint64
argument_list|(
literal|3615
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|buf
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeBlock_data
name|void
name|tst_QBuffer
operator|::
name|writeBlock_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"str"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"small_bytearray"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Test"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"large_bytearray"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"The QBuffer class is an I/O device that operates on a QByteArray.\n"
literal|"QBuffer is used to read and write to a memory buffer. It is normally "
literal|"used with a QTextStream or a QDataStream. QBuffer has an associated "
literal|"QByteArray which holds the buffer data. The size() of the buffer is "
literal|"automatically adjusted as data is written.\n"
literal|"The constructor QBuffer(QByteArray) creates a QBuffer using an existing "
literal|"byte array. The byte array can also be set with setBuffer(). Writing to "
literal|"the QBuffer will modify the original byte array because QByteArray is "
literal|"explicitly shared.\n"
literal|"Use open() to open the buffer before use and to set the mode (read-only, "
literal|"write-only, etc.). close() closes the buffer. The buffer must be closed "
literal|"before reopening or calling setBuffer().\n"
literal|"A common way to use QBuffer is through QDataStream or QTextStream, which "
literal|"have constructors that take a QBuffer parameter. For convenience, there "
literal|"are also QDataStream and QTextStream constructors that take a QByteArray "
literal|"parameter. These constructors create and open an internal QBuffer.\n"
literal|"Note that QTextStream can also operate on a QString (a Unicode string); a "
literal|"QBuffer cannot.\n"
literal|"You can also use QBuffer directly through the standard QIODevice functions "
literal|"readBlock(), writeBlock() readLine(), at(), getch(), putch() and ungetch().\n"
literal|"See also QFile, QDataStream, QTextStream, QByteArray, Shared Classes, Collection "
literal|"Classes and Input/Output and Networking.\n\n"
literal|"The QBuffer class is an I/O device that operates on a QByteArray.\n"
literal|"QBuffer is used to read and write to a memory buffer. It is normally "
literal|"used with a QTextStream or a QDataStream. QBuffer has an associated "
literal|"QByteArray which holds the buffer data. The size() of the buffer is "
literal|"automatically adjusted as data is written.\n"
literal|"The constructor QBuffer(QByteArray) creates a QBuffer using an existing "
literal|"byte array. The byte array can also be set with setBuffer(). Writing to "
literal|"the QBuffer will modify the original byte array because QByteArray is "
literal|"explicitly shared.\n"
literal|"Use open() to open the buffer before use and to set the mode (read-only, "
literal|"write-only, etc.). close() closes the buffer. The buffer must be closed "
literal|"before reopening or calling setBuffer().\n"
literal|"A common way to use QBuffer is through QDataStream or QTextStream, which "
literal|"have constructors that take a QBuffer parameter. For convenience, there "
literal|"are also QDataStream and QTextStream constructors that take a QByteArray "
literal|"parameter. These constructors create and open an internal QBuffer.\n"
literal|"Note that QTextStream can also operate on a QString (a Unicode string); a "
literal|"QBuffer cannot.\n"
literal|"You can also use QBuffer directly through the standard QIODevice functions "
literal|"readBlock(), writeBlock() readLine(), at(), getch(), putch() and ungetch().\n"
literal|"See also QFile, QDataStream, QTextStream, QByteArray, Shared Classes, Collection "
literal|"Classes and Input/Output and Networking.\n\n"
literal|"The QBuffer class is an I/O device that operates on a QByteArray.\n"
literal|"QBuffer is used to read and write to a memory buffer. It is normally "
literal|"used with a QTextStream or a QDataStream. QBuffer has an associated "
literal|"QByteArray which holds the buffer data. The size() of the buffer is "
literal|"automatically adjusted as data is written.\n"
literal|"The constructor QBuffer(QByteArray) creates a QBuffer using an existing "
literal|"byte array. The byte array can also be set with setBuffer(). Writing to "
literal|"the QBuffer will modify the original byte array because QByteArray is "
literal|"explicitly shared.\n"
literal|"Use open() to open the buffer before use and to set the mode (read-only, "
literal|"write-only, etc.). close() closes the buffer. The buffer must be closed "
literal|"before reopening or calling setBuffer().\n"
literal|"A common way to use QBuffer is through QDataStream or QTextStream, which "
literal|"have constructors that take a QBuffer parameter. For convenience, there "
literal|"are also QDataStream and QTextStream constructors that take a QByteArray "
literal|"parameter. These constructors create and open an internal QBuffer.\n"
literal|"Note that QTextStream can also operate on a QString (a Unicode string); a "
literal|"QBuffer cannot.\n"
literal|"You can also use QBuffer directly through the standard QIODevice functions "
literal|"readBlock(), writeBlock() readLine(), at(), getch(), putch() and ungetch().\n"
literal|"See also QFile, QDataStream, QTextStream, QByteArray, Shared Classes, Collection "
literal|"Classes and Input/Output and Networking."
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeBlock
name|void
name|tst_QBuffer
operator|::
name|writeBlock
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|str
argument_list|)
expr_stmt|;
name|QByteArray
name|ba
decl_stmt|;
name|QBuffer
name|buf
argument_list|(
operator|&
name|ba
argument_list|)
decl_stmt|;
name|buf
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
expr_stmt|;
name|QByteArray
name|data
init|=
name|str
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|buf
operator|.
name|write
argument_list|(
name|data
operator|.
name|constData
argument_list|()
argument_list|,
name|data
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|qint64
argument_list|(
name|data
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|buf
operator|.
name|data
argument_list|()
argument_list|,
name|str
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|seek
name|void
name|tst_QBuffer
operator|::
name|seek
parameter_list|()
block|{
name|QBuffer
name|buffer
decl_stmt|;
name|buffer
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|buffer
operator|.
name|size
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|buffer
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|qint64
name|pos
init|=
literal|10
decl_stmt|;
name|QVERIFY
argument_list|(
name|buffer
operator|.
name|seek
argument_list|(
name|pos
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|buffer
operator|.
name|size
argument_list|()
argument_list|,
name|pos
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|seekTest_data
name|void
name|tst_QBuffer
operator|::
name|seekTest_data
parameter_list|()
block|{
name|writeBlock_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_define
DECL|macro|DO_VALID_SEEK
define|#
directive|define
name|DO_VALID_SEEK
parameter_list|(
name|position
parameter_list|)
value|{                                            \     char c;                                                                  \     QVERIFY(buf.seek(qint64(position)));                                      \     QCOMPARE(buf.pos(), qint64(position));                                    \     QVERIFY(buf.getChar(&c));                                                 \     QCOMPARE(QChar(c), str.at(qint64(position)));                             \ }
end_define
begin_define
DECL|macro|DO_INVALID_SEEK
define|#
directive|define
name|DO_INVALID_SEEK
parameter_list|(
name|position
parameter_list|)
value|{                                          \     qint64 prev_pos = buf.pos();                                             \     QVERIFY(!buf.seek(qint64(position)));                                     \     QCOMPARE(buf.pos(), prev_pos);
comment|/* position should not be changed */
value|\ }
end_define
begin_function
DECL|function|seekTest
name|void
name|tst_QBuffer
operator|::
name|seekTest
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|str
argument_list|)
expr_stmt|;
name|QByteArray
name|ba
decl_stmt|;
name|QBuffer
name|buf
argument_list|(
operator|&
name|ba
argument_list|)
decl_stmt|;
if|#
directive|if
literal|0
block|QCOMPARE(buf.pos(), qint64(-1));
endif|#
directive|endif
name|buf
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|buf
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|data
init|=
name|str
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|buf
operator|.
name|write
argument_list|(
name|data
operator|.
name|constData
argument_list|()
argument_list|,
name|data
operator|.
name|size
argument_list|()
argument_list|)
argument_list|,
name|qint64
argument_list|(
name|data
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QBuffer::seek: Invalid pos: -1"
argument_list|)
expr_stmt|;
name|DO_INVALID_SEEK
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|DO_VALID_SEEK
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|DO_VALID_SEEK
argument_list|(
name|str
operator|.
name|size
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|buf
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
name|DO_VALID_SEEK
argument_list|(
name|str
operator|.
name|size
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
comment|// Special case: valid to seek one position past the buffer.
comment|// Its then legal to write, but not read.
block|{
name|char
name|c
init|=
literal|'a'
decl_stmt|;
name|QVERIFY
argument_list|(
name|buf
operator|.
name|seek
argument_list|(
name|qint64
argument_list|(
name|str
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|buf
operator|.
name|read
argument_list|(
operator|&
name|c
argument_list|,
name|qint64
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|buf
operator|.
name|write
argument_list|(
operator|&
name|c
argument_list|,
name|qint64
argument_list|(
literal|1
argument_list|)
argument_list|)
argument_list|,
name|qint64
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// Special case 2: seeking to an arbitrary position beyond the buffer auto-expands it
comment|// (see Task 184730)
block|{
name|char
name|c
decl_stmt|;
specifier|const
name|int
name|offset
init|=
literal|1
decl_stmt|;
comment|// any positive integer will do
specifier|const
name|qint64
name|pos
init|=
name|buf
operator|.
name|size
argument_list|()
operator|+
name|offset
decl_stmt|;
name|QVERIFY
argument_list|(
name|buf
operator|.
name|seek
argument_list|(
name|pos
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|buf
operator|.
name|pos
argument_list|()
argument_list|,
name|pos
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|buf
operator|.
name|getChar
argument_list|(
operator|&
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|buf
operator|.
name|seek
argument_list|(
name|pos
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|buf
operator|.
name|getChar
argument_list|(
operator|&
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
argument_list|,
name|buf
operator|.
name|data
argument_list|()
operator|.
name|at
argument_list|(
name|pos
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|buf
operator|.
name|seek
argument_list|(
name|pos
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|buf
operator|.
name|putChar
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|read_rawdata
name|void
name|tst_QBuffer
operator|::
name|read_rawdata
parameter_list|()
block|{
specifier|static
specifier|const
name|unsigned
name|char
name|mydata
index|[]
init|=
block|{
literal|0x01
block|,
literal|0x00
block|,
literal|0x03
block|,
literal|0x84
block|,
literal|0x78
block|,
literal|0x9c
block|,
literal|0x3b
block|,
literal|0x76
block|,
literal|0xec
block|,
literal|0x18
block|,
literal|0xc3
block|,
literal|0x31
block|,
literal|0x0a
block|,
literal|0xf1
block|,
literal|0xcc
block|,
literal|0x99
block|,
literal|0x6d
block|,
literal|0x5b
block|}
decl_stmt|;
name|QByteArray
name|data
init|=
name|QByteArray
operator|::
name|fromRawData
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|mydata
argument_list|,
sizeof|sizeof
argument_list|(
name|mydata
argument_list|)
argument_list|)
decl_stmt|;
name|QBuffer
name|buffer
argument_list|(
operator|&
name|data
argument_list|)
decl_stmt|;
name|buffer
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QDataStream
name|in
argument_list|(
operator|&
name|buffer
argument_list|)
decl_stmt|;
name|quint8
name|ch
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
operator|(
name|int
operator|)
sizeof|sizeof
argument_list|(
name|mydata
argument_list|)
condition|;
operator|++
name|i
control|)
block|{
name|QVERIFY
argument_list|(
operator|!
name|buffer
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
name|in
operator|>>
name|ch
expr_stmt|;
name|QVERIFY
argument_list|(
name|ch
operator|==
operator|(
name|quint8
operator|)
name|mydata
index|[
name|i
index|]
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|buffer
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isSequential
name|void
name|tst_QBuffer
operator|::
name|isSequential
parameter_list|()
block|{
name|QBuffer
name|buf
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|buf
operator|.
name|isSequential
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|signalTest_data
name|void
name|tst_QBuffer
operator|::
name|signalTest_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"sample"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"11"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"size 100"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|100
argument_list|,
literal|'1'
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|signalTest
name|void
name|tst_QBuffer
operator|::
name|signalTest
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|sample
argument_list|)
expr_stmt|;
name|totalBytesWritten
operator|=
literal|0
expr_stmt|;
name|QBuffer
name|buf
decl_stmt|;
name|buf
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|buf
operator|.
name|buffer
argument_list|()
operator|.
name|resize
argument_list|(
name|sample
operator|.
name|size
argument_list|()
operator|*
literal|10
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|buf
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|readyReadSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|buf
argument_list|,
name|SIGNAL
argument_list|(
name|bytesWritten
argument_list|(
name|qint64
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|bytesWrittenSlot
argument_list|(
name|qint64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
name|gotReadyRead
operator|=
literal|false
expr_stmt|;
name|QCOMPARE
argument_list|(
name|buf
operator|.
name|write
argument_list|(
name|sample
argument_list|)
argument_list|,
name|qint64
argument_list|(
name|sample
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|sample
operator|.
name|size
argument_list|()
operator|>
literal|0
condition|)
block|{
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|5
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
name|QFAIL
argument_list|(
literal|"Timed out when waiting for readyRead()"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|totalBytesWritten
argument_list|,
name|qint64
argument_list|(
name|sample
operator|.
name|size
argument_list|()
operator|*
operator|(
name|i
operator|+
literal|1
operator|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|gotReadyRead
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|totalBytesWritten
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|gotReadyRead
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|readyReadSlot
name|void
name|tst_QBuffer
operator|::
name|readyReadSlot
parameter_list|()
block|{
name|gotReadyRead
operator|=
literal|true
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|exitLoop
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|bytesWrittenSlot
name|void
name|tst_QBuffer
operator|::
name|bytesWrittenSlot
parameter_list|(
name|qint64
name|written
parameter_list|)
block|{
name|totalBytesWritten
operator|+=
name|written
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isClosedAfterClose
name|void
name|tst_QBuffer
operator|::
name|isClosedAfterClose
parameter_list|()
block|{
name|QBuffer
name|buffer
decl_stmt|;
name|buffer
operator|.
name|open
argument_list|(
name|QBuffer
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|buffer
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|buffer
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readLine_data
name|void
name|tst_QBuffer
operator|::
name|readLine_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"src"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"maxlen"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"line1\nline2\n"
argument_list|)
operator|<<
literal|1024
operator|<<
name|QByteArray
argument_list|(
literal|"line1\n"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"hi there"
argument_list|)
operator|<<
literal|1024
operator|<<
name|QByteArray
argument_list|(
literal|"hi there"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"l\n"
argument_list|)
operator|<<
literal|3
operator|<<
name|QByteArray
argument_list|(
literal|"l\n"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"l\n"
argument_list|)
operator|<<
literal|2
operator|<<
name|QByteArray
argument_list|(
literal|"l"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readLine
name|void
name|tst_QBuffer
operator|::
name|readLine
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|src
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|maxlen
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QBuffer
name|buf
decl_stmt|;
name|buf
operator|.
name|setBuffer
argument_list|(
operator|&
name|src
argument_list|)
expr_stmt|;
name|char
modifier|*
name|result
init|=
operator|new
name|char
index|[
name|maxlen
operator|+
literal|1
index|]
decl_stmt|;
name|result
index|[
name|maxlen
index|]
operator|=
literal|'\0'
expr_stmt|;
name|QVERIFY
argument_list|(
name|buf
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|qint64
name|bytes_read
init|=
name|buf
operator|.
name|readLine
argument_list|(
name|result
argument_list|,
name|maxlen
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|bytes_read
argument_list|,
name|qint64
argument_list|(
name|expected
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QByteArray
argument_list|(
name|result
argument_list|)
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|buf
operator|.
name|close
argument_list|()
expr_stmt|;
operator|delete
index|[]
name|result
expr_stmt|;
block|}
end_function
begin_function
DECL|function|canReadLine_data
name|void
name|tst_QBuffer
operator|::
name|canReadLine_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"src"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"no newline"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"two \n lines\n"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"\n"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|canReadLine
name|void
name|tst_QBuffer
operator|::
name|canReadLine
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|src
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QBuffer
name|buf
decl_stmt|;
name|buf
operator|.
name|setBuffer
argument_list|(
operator|&
name|src
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|buf
operator|.
name|canReadLine
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|buf
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|buf
operator|.
name|canReadLine
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|atEnd
name|void
name|tst_QBuffer
operator|::
name|atEnd
parameter_list|()
block|{
name|QBuffer
name|buffer
decl_stmt|;
name|buffer
operator|.
name|open
argument_list|(
name|QBuffer
operator|::
name|Append
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|write
argument_list|(
literal|"heisann"
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|close
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|open
argument_list|(
name|QBuffer
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|seek
argument_list|(
name|buffer
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|char
name|c
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|buffer
operator|.
name|getChar
argument_list|(
operator|&
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|buffer
operator|.
name|read
argument_list|(
operator|&
name|c
argument_list|,
literal|1
argument_list|)
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readLineBoundaries
name|void
name|tst_QBuffer
operator|::
name|readLineBoundaries
parameter_list|()
block|{
name|QByteArray
name|line
init|=
literal|"This is a line\n"
decl_stmt|;
name|QBuffer
name|buffer
decl_stmt|;
name|buffer
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
expr_stmt|;
while|while
condition|(
name|buffer
operator|.
name|size
argument_list|()
operator|<
literal|16384
condition|)
name|buffer
operator|.
name|write
argument_list|(
name|line
argument_list|)
expr_stmt|;
comment|/*     buffer.seek(0);     QFile out1("out1.txt");     out1.open(QFile::WriteOnly);     out1.write(buffer.readAll());     out1.close(); */
name|buffer
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|char
name|c
decl_stmt|;
name|buffer
operator|.
name|getChar
argument_list|(
operator|&
name|c
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|ungetChar
argument_list|(
name|c
argument_list|)
expr_stmt|;
name|QFile
name|out2
argument_list|(
literal|"out2.txt"
argument_list|)
decl_stmt|;
name|out2
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|buffer
operator|.
name|atEnd
argument_list|()
condition|)
name|out2
operator|.
name|write
argument_list|(
name|buffer
operator|.
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|out2
operator|.
name|close
argument_list|()
expr_stmt|;
name|out2
operator|.
name|remove
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeAfterQByteArrayResize
name|void
name|tst_QBuffer
operator|::
name|writeAfterQByteArrayResize
parameter_list|()
block|{
name|QBuffer
name|buffer
decl_stmt|;
name|QVERIFY
argument_list|(
name|buffer
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|write
argument_list|(
name|QByteArray
argument_list|()
operator|.
name|fill
argument_list|(
literal|'a'
argument_list|,
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|buffer
operator|.
name|buffer
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
comment|// resize the QByteArray behind QBuffer's back
name|buffer
operator|.
name|buffer
argument_list|()
operator|.
name|clear
argument_list|()
expr_stmt|;
name|buffer
operator|.
name|seek
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|buffer
operator|.
name|buffer
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|buffer
operator|.
name|write
argument_list|(
name|QByteArray
argument_list|()
operator|.
name|fill
argument_list|(
literal|'b'
argument_list|,
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|buffer
operator|.
name|buffer
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|read_null
name|void
name|tst_QBuffer
operator|::
name|read_null
parameter_list|()
block|{
name|QByteArray
name|buffer
decl_stmt|;
name|buffer
operator|.
name|resize
argument_list|(
literal|32000
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|buffer
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|buffer
index|[
name|i
index|]
operator|=
name|char
argument_list|(
name|i
operator|&
literal|0xff
argument_list|)
expr_stmt|;
name|QBuffer
name|in
argument_list|(
operator|&
name|buffer
argument_list|)
decl_stmt|;
name|in
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QByteArray
name|chunk
decl_stmt|;
name|chunk
operator|.
name|resize
argument_list|(
literal|16380
argument_list|)
expr_stmt|;
name|in
operator|.
name|read
argument_list|(
name|chunk
operator|.
name|data
argument_list|()
argument_list|,
literal|16380
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|chunk
argument_list|,
name|buffer
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
name|chunk
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|in
operator|.
name|read
argument_list|(
name|chunk
operator|.
name|data
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|chunk
operator|.
name|resize
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|in
operator|.
name|read
argument_list|(
name|chunk
operator|.
name|data
argument_list|()
argument_list|,
name|chunk
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|chunk
argument_list|,
name|buffer
operator|.
name|mid
argument_list|(
literal|16380
argument_list|,
name|chunk
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QBuffer
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qbuffer.moc"
end_include
end_unit
