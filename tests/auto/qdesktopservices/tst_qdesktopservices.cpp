begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QStandardItemModel>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qdesktopservices.h>
end_include
begin_comment
comment|//#define RUN_MANUAL_TESTS
end_comment
begin_comment
comment|//TESTED_CLASS=
end_comment
begin_comment
comment|//TESTED_FILES=
end_comment
begin_class
DECL|class|tst_qdesktopservices
class|class
name|tst_qdesktopservices
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_qdesktopservices
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_qdesktopservices
parameter_list|()
destructor_decl|;
private|private
name|slots
private|:
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
name|void
name|openUrl
parameter_list|()
function_decl|;
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
comment|// These test are manual ones, you need to check from  device that
comment|// correct system application is started with correct content
comment|// When you want to run these test, uncomment //#define RUN_MANUAL_TESTS
name|void
name|openHttpUrl_data
parameter_list|()
function_decl|;
name|void
name|openHttpUrl
parameter_list|()
function_decl|;
name|void
name|openMailtoUrl_data
parameter_list|()
function_decl|;
name|void
name|openMailtoUrl
parameter_list|()
function_decl|;
name|void
name|openFileUrl_data
parameter_list|()
function_decl|;
name|void
name|openFileUrl
parameter_list|()
function_decl|;
name|void
name|openMultipleFileUrls
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|handlers
parameter_list|()
function_decl|;
name|void
name|storageLocation_data
parameter_list|()
function_decl|;
name|void
name|storageLocation
parameter_list|()
function_decl|;
name|void
name|storageLocationDoesNotEndWithSlash_data
parameter_list|()
function_decl|;
name|void
name|storageLocationDoesNotEndWithSlash
parameter_list|()
function_decl|;
protected|protected:
block|}
class|;
end_class
begin_constructor
DECL|function|tst_qdesktopservices
name|tst_qdesktopservices
operator|::
name|tst_qdesktopservices
parameter_list|()
block|{
name|QCoreApplication
operator|::
name|setOrganizationName
argument_list|(
literal|"Nokia"
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|setApplicationName
argument_list|(
literal|"tst_qdesktopservices"
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~tst_qdesktopservices
name|tst_qdesktopservices
operator|::
name|~
name|tst_qdesktopservices
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|init
name|void
name|tst_qdesktopservices
operator|::
name|init
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_qdesktopservices
operator|::
name|cleanup
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|openUrl
name|void
name|tst_qdesktopservices
operator|::
name|openUrl
parameter_list|()
block|{
comment|// At the bare minimum check that they return false for invalid url's
name|QCOMPARE
argument_list|(
name|QDesktopServices
operator|::
name|openUrl
argument_list|(
name|QUrl
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
comment|// this test is only valid on windows on other systems it might mean open a new document in the application handling .file
name|QCOMPARE
argument_list|(
name|QDesktopServices
operator|::
name|openUrl
argument_list|(
name|QUrl
argument_list|(
literal|"file://invalid.file"
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
end_ifdef
begin_function
DECL|function|openHttpUrl_data
name|void
name|tst_qdesktopservices
operator|::
name|openHttpUrl_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QUrl
argument_list|>
argument_list|(
literal|"url"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BasicWithHttp"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"http://www.google.fi"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BasicWithoutHttp"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"www.nokia.fi"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BasicWithUserAndPw"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"http://s60prereleases:oslofjord@pepper.troll.no/s60prereleases/patches/"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"URL with space"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"http://www.manataka.org/Contents Page.html"
argument_list|)
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|openHttpUrl
name|void
name|tst_qdesktopservices
operator|::
name|openHttpUrl
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|RUN_MANUAL_TESTS
name|QSKIP
argument_list|(
literal|"Test disabled -- only for manual purposes"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QFETCH
argument_list|(
name|QUrl
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QDesktopServices
operator|::
name|openUrl
argument_list|(
name|url
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|30000
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|openMailtoUrl_data
name|void
name|tst_qdesktopservices
operator|::
name|openMailtoUrl_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QUrl
argument_list|>
argument_list|(
literal|"url"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
comment|// http://en.wikipedia.org/wiki/E-mail_address
comment|// RFC Valid e-mail addresses
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Wiki valid email 1"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"mailto:abc@example.com"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Wiki valid email 2"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"mailto:Abc@example.com"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Wiki valid email 3"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"mailto:aBC@example.com"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Wiki valid email 4"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"mailto:abc.123@example.com"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Wiki valid email 5"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"mailto:1234567890@example.com"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Wiki valid email 6"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"mailto:_______@example.com"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Wiki valid email 7"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"mailto:abc+mailbox/department=shipping@example.com"
argument_list|)
operator|<<
literal|true
expr_stmt|;
comment|// S60 email client considers the next URL invalid, even ity should be valid
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Wiki valid email 8"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"mailto:!#$%&'*+-/=?^_`.{|}~@example.com"
argument_list|)
operator|<<
literal|true
expr_stmt|;
comment|// all of these characters are allowed
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Wiki valid email 9"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"mailto:\"abc@def\"@example.com"
argument_list|)
operator|<<
literal|true
expr_stmt|;
comment|// anything goes inside quotation marks
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Wiki valid email 10"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"mailto:\"Fred \\\"quota\\\" Bloggs\"@example.com"
argument_list|)
operator|<<
literal|true
expr_stmt|;
comment|// however, quotes need escaping
comment|// RFC invalid e-mail addresses
comment|// These return true even though they are invalid, but check that user is notified about invalid URL in mail application
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Wiki invalid email 1"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"mailto:Abc.example.com"
argument_list|)
operator|<<
literal|true
expr_stmt|;
comment|// character @ is missing
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Wiki invalid email 2"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"mailto:Abc.@example.com"
argument_list|)
operator|<<
literal|true
expr_stmt|;
comment|// character dot(.) is last in local part
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Wiki invalid email 3"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"mailto:Abc..123@example.com"
argument_list|)
operator|<<
literal|true
expr_stmt|;
comment|// character dot(.) is double
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Wiki invalid email 4"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"mailto:A@b@c@example.com"
argument_list|)
operator|<<
literal|true
expr_stmt|;
comment|// only one @ is allowed outside quotations marks
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Wiki invalid email 5"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"mailto:()[]\\;:,<>@example.com"
argument_list|)
operator|<<
literal|true
expr_stmt|;
comment|// none of the characters before the @ is allowed outside quotation marks
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Basic"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"mailto:test@nokia.com"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BasicSeveralAddr"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"mailto:test@nokia.com,test2@nokia.com,test3@nokia.com"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BasicAndSubject"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"mailto:test@nokia.com?subject=hello nokia"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BasicAndTo"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"mailto:test@nokia.com?to=test2@nokia.com"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BasicAndCc"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"mailto:test@nokia.com?cc=mycc@address.com"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BasicAndBcc"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"mailto:test@nokia.com?bcc=mybcc@address.com"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BasicAndBody"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"mailto:test@nokia.com?body=Test email message body"
argument_list|)
operator|<<
literal|true
expr_stmt|;
comment|// RFC examples, these are actually invalid because there is not host defined
comment|// Check that user is notified about invalid URL in mail application
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RFC2368 Example 1"
argument_list|)
operator|<<
name|QUrl
operator|::
name|fromEncoded
argument_list|(
literal|"mailto:addr1%2C%20addr2"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RFC2368 Example 2"
argument_list|)
operator|<<
name|QUrl
operator|::
name|fromEncoded
argument_list|(
literal|"mailto:?to=addr1%2C%20addr2"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RFC2368 Example 3"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"mailto:addr1?to=addr2"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RFC2368 Example 4"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"mailto:joe@example.com?cc=bob@example.com&body=hello"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RFC2368 Example 5"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"mailto:?to=joe@example.com&cc=bob@example.com&body=hello"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RFC2368 Example 6"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"mailto:foobar@example.com?In-Reply-To=%3c3469A91.D10AF4C@example.com"
argument_list|)
operator|<<
literal|true
expr_stmt|;
comment|// OpaqueData
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RFC2368 Example 7"
argument_list|)
operator|<<
name|QUrl
operator|::
name|fromEncoded
argument_list|(
literal|"mailto:infobot@example.com?body=send%20current-issue%0D%0Asend%20index"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RFC2368 Example 8"
argument_list|)
operator|<<
name|QUrl
operator|::
name|fromEncoded
argument_list|(
literal|"mailto:infobot@example.com?body=send%20current-issue"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RFC2368 Example 9"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"mailto:infobot@example.com?subject=current-issue"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RFC2368 Example 10"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"mailto:chris@example.com"
argument_list|)
operator|<<
literal|true
expr_stmt|;
comment|//QTest::newRow("RFC2368 Example 11 - illegal chars")<< QUrl("mailto:joe@example.com?cc=bob@example.com?body=hello")<< false;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RFC2368 Example 12"
argument_list|)
operator|<<
name|QUrl
operator|::
name|fromEncoded
argument_list|(
literal|"mailto:gorby%25kremvax@example.com"
argument_list|)
operator|<<
literal|true
expr_stmt|;
comment|// encoded reserved chars '%'
name|QTest
operator|::
name|newRow
argument_list|(
literal|"RFC2368 Example 13"
argument_list|)
operator|<<
name|QUrl
operator|::
name|fromEncoded
argument_list|(
literal|"mailto:unlikely%3Faddress@example.com?blat=foop"
argument_list|)
operator|<<
literal|true
expr_stmt|;
comment|// encoded reserved chars  `?'
block|}
end_function
begin_function
DECL|function|openMailtoUrl
name|void
name|tst_qdesktopservices
operator|::
name|openMailtoUrl
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|RUN_MANUAL_TESTS
name|QSKIP
argument_list|(
literal|"Test disabled -- only for manual purposes"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QFETCH
argument_list|(
name|QUrl
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QDesktopServices
operator|::
name|openUrl
argument_list|(
name|url
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|openFileUrl_data
name|void
name|tst_qdesktopservices
operator|::
name|openFileUrl_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QUrl
argument_list|>
argument_list|(
literal|"url"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
comment|// Text files
name|QTest
operator|::
name|newRow
argument_list|(
literal|"DOS text file"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"file:///c:/data/others/dosfile.txt"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"No EOF text file"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"file:///c:/data/others/noendofline.txt"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"text file"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"file:///c:/data/others/testfile.txt"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"text file with space"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"file:///c:/data/others/test file.txt"
argument_list|)
operator|<<
literal|true
expr_stmt|;
comment|// Images
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BMP image"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"file:///c:/data/images/image.bmp"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"GIF image"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"file:///c:/data/images/image.gif"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"JPG image"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"file:///c:/data/images/image.jpg"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"PNG image"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"file:///c:/data/images/image.png"
argument_list|)
operator|<<
literal|true
expr_stmt|;
comment|// Audio
name|QTest
operator|::
name|newRow
argument_list|(
literal|"MP4 audio"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"file:///c:/data/sounds/aac-only.mp4"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3GP audio"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"file:///c:/data/sounds/audio_3gpp.3gp"
argument_list|)
operator|<<
literal|true
expr_stmt|;
comment|// Video
name|QTest
operator|::
name|newRow
argument_list|(
literal|"MP4 video"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"file:///c:/data/videos/vid-mpeg4-22k.mp4"
argument_list|)
operator|<<
literal|true
expr_stmt|;
comment|// Installs
name|QTest
operator|::
name|newRow
argument_list|(
literal|"SISX"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"file:///c:/data/installs/ErrRd.sisx"
argument_list|)
operator|<<
literal|true
expr_stmt|;
comment|// Errors
name|QTest
operator|::
name|newRow
argument_list|(
literal|"File does not exist"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"file:///c:/thisfileneverexists.txt"
argument_list|)
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|openFileUrl
name|void
name|tst_qdesktopservices
operator|::
name|openFileUrl
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|RUN_MANUAL_TESTS
name|QSKIP
argument_list|(
literal|"Test disabled -- only for manual purposes"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QFETCH
argument_list|(
name|QUrl
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QDesktopServices
operator|::
name|openUrl
argument_list|(
name|url
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|openMultipleFileUrls
name|void
name|tst_qdesktopservices
operator|::
name|openMultipleFileUrls
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|RUN_MANUAL_TESTS
name|QSKIP
argument_list|(
literal|"Test disabled -- only for manual purposes"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|QDesktopServices
operator|::
name|openUrl
argument_list|(
name|QUrl
argument_list|(
literal|"file:///c:/data/images/image.bmp"
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QDesktopServices
operator|::
name|openUrl
argument_list|(
name|QUrl
argument_list|(
literal|"file:///c:/data/images/image.png"
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QDesktopServices
operator|::
name|openUrl
argument_list|(
name|QUrl
argument_list|(
literal|"file:///c:/data/others/noendofline.txt"
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QDesktopServices
operator|::
name|openUrl
argument_list|(
name|QUrl
argument_list|(
literal|"file:///c:/data/installs/ErrRd.sisx"
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_class
DECL|class|MyUrlHandler
class|class
name|MyUrlHandler
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|member|lastHandledUrl
name|QUrl
name|lastHandledUrl
decl_stmt|;
public|public
name|slots
public|:
DECL|function|handle
specifier|inline
name|void
name|handle
parameter_list|(
specifier|const
name|QUrl
modifier|&
name|url
parameter_list|)
block|{
name|lastHandledUrl
operator|=
name|url
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|handlers
name|void
name|tst_qdesktopservices
operator|::
name|handlers
parameter_list|()
block|{
name|MyUrlHandler
name|fooHandler
decl_stmt|;
name|MyUrlHandler
name|barHandler
decl_stmt|;
name|QDesktopServices
operator|::
name|setUrlHandler
argument_list|(
name|QString
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
operator|&
name|fooHandler
argument_list|,
literal|"handle"
argument_list|)
expr_stmt|;
name|QDesktopServices
operator|::
name|setUrlHandler
argument_list|(
name|QString
argument_list|(
literal|"bar"
argument_list|)
argument_list|,
operator|&
name|barHandler
argument_list|,
literal|"handle"
argument_list|)
expr_stmt|;
name|QUrl
name|fooUrl
argument_list|(
literal|"foo://blub/meh"
argument_list|)
decl_stmt|;
name|QUrl
name|barUrl
argument_list|(
literal|"bar://hmm/hmmmm"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|QDesktopServices
operator|::
name|openUrl
argument_list|(
name|fooUrl
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QDesktopServices
operator|::
name|openUrl
argument_list|(
name|barUrl
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fooHandler
operator|.
name|lastHandledUrl
operator|.
name|toString
argument_list|()
argument_list|,
name|fooUrl
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|barHandler
operator|.
name|lastHandledUrl
operator|.
name|toString
argument_list|()
argument_list|,
name|barUrl
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QDesktopServices::StandardLocation
argument_list|)
end_macro
begin_function
DECL|function|storageLocation_data
name|void
name|tst_qdesktopservices
operator|::
name|storageLocation_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QDesktopServices
operator|::
name|StandardLocation
argument_list|>
argument_list|(
literal|"location"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"DesktopLocation"
argument_list|)
operator|<<
name|QDesktopServices
operator|::
name|DesktopLocation
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"DocumentsLocation"
argument_list|)
operator|<<
name|QDesktopServices
operator|::
name|DocumentsLocation
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"FontsLocation"
argument_list|)
operator|<<
name|QDesktopServices
operator|::
name|FontsLocation
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ApplicationsLocation"
argument_list|)
operator|<<
name|QDesktopServices
operator|::
name|ApplicationsLocation
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"MusicLocation"
argument_list|)
operator|<<
name|QDesktopServices
operator|::
name|MusicLocation
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"MoviesLocation"
argument_list|)
operator|<<
name|QDesktopServices
operator|::
name|MoviesLocation
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"PicturesLocation"
argument_list|)
operator|<<
name|QDesktopServices
operator|::
name|PicturesLocation
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"TempLocation"
argument_list|)
operator|<<
name|QDesktopServices
operator|::
name|TempLocation
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"HomeLocation"
argument_list|)
operator|<<
name|QDesktopServices
operator|::
name|HomeLocation
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"DataLocation"
argument_list|)
operator|<<
name|QDesktopServices
operator|::
name|DataLocation
expr_stmt|;
block|}
end_function
begin_function
DECL|function|storageLocation
name|void
name|tst_qdesktopservices
operator|::
name|storageLocation
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QDesktopServices
operator|::
name|StandardLocation
argument_list|,
name|location
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
name|QString
name|storageLocation
init|=
name|QDesktopServices
operator|::
name|storageLocation
argument_list|(
name|location
argument_list|)
decl_stmt|;
name|QString
name|displayName
init|=
name|QDesktopServices
operator|::
name|displayName
argument_list|(
name|location
argument_list|)
decl_stmt|;
comment|//qDebug( "displayName: %s",  displayName );
name|storageLocation
operator|=
name|storageLocation
operator|.
name|toLower
argument_list|()
expr_stmt|;
name|displayName
operator|=
name|displayName
operator|.
name|toLower
argument_list|()
expr_stmt|;
name|QString
name|drive
init|=
name|QDir
operator|::
name|currentPath
argument_list|()
operator|.
name|left
argument_list|(
literal|2
argument_list|)
operator|.
name|toLower
argument_list|()
decl_stmt|;
if|if
condition|(
name|drive
operator|==
literal|"z:"
condition|)
name|drive
operator|=
literal|"c:"
expr_stmt|;
switch|switch
condition|(
name|location
condition|)
block|{
case|case
name|QDesktopServices
operator|::
name|DesktopLocation
case|:
name|QCOMPARE
argument_list|(
name|storageLocation
argument_list|,
name|drive
operator|+
name|QString
argument_list|(
literal|"/data"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QDesktopServices
operator|::
name|DocumentsLocation
case|:
name|QCOMPARE
argument_list|(
name|storageLocation
argument_list|,
name|drive
operator|+
name|QString
argument_list|(
literal|"/data"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QDesktopServices
operator|::
name|FontsLocation
case|:
comment|// Currently point always to ROM
name|QCOMPARE
argument_list|(
name|storageLocation
argument_list|,
name|QString
argument_list|(
literal|"z:/resource/fonts"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QDesktopServices
operator|::
name|ApplicationsLocation
case|:
ifdef|#
directive|ifdef
name|Q_CC_NOKIAX86
name|QCOMPARE
argument_list|(
name|storageLocation
argument_list|,
name|QString
argument_list|(
literal|"z:/sys/bin"
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|QCOMPARE
argument_list|(
name|storageLocation
argument_list|,
name|drive
operator|+
name|QString
argument_list|(
literal|"/sys/bin"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
break|break;
case|case
name|QDesktopServices
operator|::
name|MusicLocation
case|:
name|QCOMPARE
argument_list|(
name|storageLocation
argument_list|,
name|drive
operator|+
name|QString
argument_list|(
literal|"/data/sounds"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QDesktopServices
operator|::
name|MoviesLocation
case|:
name|QCOMPARE
argument_list|(
name|storageLocation
argument_list|,
name|drive
operator|+
name|QString
argument_list|(
literal|"/data/videos"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QDesktopServices
operator|::
name|PicturesLocation
case|:
name|QCOMPARE
argument_list|(
name|storageLocation
argument_list|,
name|drive
operator|+
name|QString
argument_list|(
literal|"/data/images"
argument_list|)
argument_list|)
expr_stmt|;
break|break;
case|case
name|QDesktopServices
operator|::
name|TempLocation
case|:
name|QCOMPARE
argument_list|(
name|storageLocation
argument_list|,
name|QDir
operator|::
name|tempPath
argument_list|()
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QDesktopServices
operator|::
name|HomeLocation
case|:
name|QCOMPARE
argument_list|(
name|storageLocation
argument_list|,
name|QDir
operator|::
name|homePath
argument_list|()
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QDesktopServices
operator|::
name|DataLocation
case|:
comment|// Just check the folder not the drive
name|QCOMPARE
argument_list|(
name|storageLocation
operator|.
name|mid
argument_list|(
literal|2
argument_list|)
argument_list|,
name|QDir
operator|::
name|currentPath
argument_list|()
operator|.
name|mid
argument_list|(
literal|2
argument_list|)
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
break|break;
default|default:
name|QCOMPARE
argument_list|(
name|storageLocation
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
break|break;
block|}
else|#
directive|else
name|QDesktopServices
operator|::
name|storageLocation
argument_list|(
name|location
argument_list|)
expr_stmt|;
name|QDesktopServices
operator|::
name|displayName
argument_list|(
name|location
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|storageLocationDoesNotEndWithSlash_data
name|void
name|tst_qdesktopservices
operator|::
name|storageLocationDoesNotEndWithSlash_data
parameter_list|()
block|{
name|storageLocation_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|storageLocationDoesNotEndWithSlash
name|void
name|tst_qdesktopservices
operator|::
name|storageLocationDoesNotEndWithSlash
parameter_list|()
block|{
comment|// Currently all desktop locations return their storage location
comment|// with "Unix-style" paths (i.e. they use a slash, not backslash).
name|QFETCH
argument_list|(
name|QDesktopServices
operator|::
name|StandardLocation
argument_list|,
name|location
argument_list|)
expr_stmt|;
name|QString
name|loc
init|=
name|QDesktopServices
operator|::
name|storageLocation
argument_list|(
name|location
argument_list|)
decl_stmt|;
if|if
condition|(
name|loc
operator|.
name|size
argument_list|()
operator|>
literal|1
condition|)
comment|// workaround for unlikely case of locations that return '/'
name|QCOMPARE
argument_list|(
name|loc
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_qdesktopservices
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qdesktopservices.moc"
end_include
end_unit
