begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|"qcombobox.h"
end_include
begin_include
include|#
directive|include
file|<private/qcombobox_p.h>
end_include
begin_include
include|#
directive|include
file|<qfontcombobox.h>
end_include
begin_include
include|#
directive|include
file|<qdesktopwidget.h>
end_include
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<qpushbutton.h>
end_include
begin_include
include|#
directive|include
file|<qdialog.h>
end_include
begin_include
include|#
directive|include
file|<qevent.h>
end_include
begin_include
include|#
directive|include
file|<qlineedit.h>
end_include
begin_include
include|#
directive|include
file|<qlistview.h>
end_include
begin_include
include|#
directive|include
file|<qheaderview.h>
end_include
begin_include
include|#
directive|include
file|<qlistwidget.h>
end_include
begin_include
include|#
directive|include
file|<qtreewidget.h>
end_include
begin_include
include|#
directive|include
file|<qtablewidget.h>
end_include
begin_include
include|#
directive|include
file|<qscrollbar.h>
end_include
begin_include
include|#
directive|include
file|<qboxlayout.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_MAC
end_ifdef
begin_include
include|#
directive|include
file|<qmacstyle_mac.h>
end_include
begin_elif
elif|#
directive|elif
name|defined
name|Q_WS_X11
end_elif
begin_include
include|#
directive|include
file|<private/qt_x11_p.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<qstandarditemmodel.h>
end_include
begin_include
include|#
directive|include
file|<qstringlistmodel.h>
end_include
begin_include
include|#
directive|include
file|<qcombobox.h>
end_include
begin_include
include|#
directive|include
file|<qpushbutton.h>
end_include
begin_include
include|#
directive|include
file|<qdialog.h>
end_include
begin_include
include|#
directive|include
file|<qstringlist.h>
end_include
begin_include
include|#
directive|include
file|<qvalidator.h>
end_include
begin_include
include|#
directive|include
file|<qcompleter.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_STYLE_CLEANLOOKS
end_ifndef
begin_include
include|#
directive|include
file|<qcleanlooksstyle.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<qabstractitemview.h>
end_include
begin_include
include|#
directive|include
file|"../../shared/util.h"
end_include
begin_include
include|#
directive|include
file|<qstyleditemdelegate.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_STYLE_WINDOWS
end_ifndef
begin_include
include|#
directive|include
file|<qwindowsstyle.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//TESTED_CLASS=
end_comment
begin_comment
comment|//TESTED_FILES=
end_comment
begin_class
DECL|class|tst_QComboBox
class|class
name|tst_QComboBox
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QComboBox
parameter_list|()
constructor_decl|;
name|~
name|tst_QComboBox
parameter_list|()
destructor_decl|;
public|public
name|slots
public|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|getSetCheck
parameter_list|()
function_decl|;
name|void
name|ensureReturnIsIgnored
parameter_list|()
function_decl|;
name|void
name|setEditable
parameter_list|()
function_decl|;
name|void
name|setPalette
parameter_list|()
function_decl|;
name|void
name|sizeAdjustPolicy
parameter_list|()
function_decl|;
name|void
name|clear
parameter_list|()
function_decl|;
name|void
name|insertPolicy_data
parameter_list|()
function_decl|;
name|void
name|insertPolicy
parameter_list|()
function_decl|;
name|void
name|virtualAutocompletion
parameter_list|()
function_decl|;
name|void
name|autoCompletionCaseSensitivity
parameter_list|()
function_decl|;
name|void
name|hide
parameter_list|()
function_decl|;
name|void
name|currentIndex_data
parameter_list|()
function_decl|;
name|void
name|currentIndex
parameter_list|()
function_decl|;
name|void
name|insertItems_data
parameter_list|()
function_decl|;
name|void
name|insertItems
parameter_list|()
function_decl|;
name|void
name|insertItem_data
parameter_list|()
function_decl|;
name|void
name|insertItem
parameter_list|()
function_decl|;
name|void
name|insertOnCurrentIndex
parameter_list|()
function_decl|;
name|void
name|textpixmapdata_data
parameter_list|()
function_decl|;
name|void
name|textpixmapdata
parameter_list|()
function_decl|;
name|void
name|editTextChanged
parameter_list|()
function_decl|;
name|void
name|setModel
parameter_list|()
function_decl|;
name|void
name|modelDeleted
parameter_list|()
function_decl|;
name|void
name|setMaxCount
parameter_list|()
function_decl|;
name|void
name|setCurrentIndex
parameter_list|()
function_decl|;
name|void
name|convenienceViews
parameter_list|()
function_decl|;
name|void
name|findText_data
parameter_list|()
function_decl|;
name|void
name|findText
parameter_list|()
function_decl|;
name|void
name|flaggedItems_data
parameter_list|()
function_decl|;
name|void
name|flaggedItems
parameter_list|()
function_decl|;
name|void
name|pixmapIcon
parameter_list|()
function_decl|;
name|void
name|mouseWheel_data
parameter_list|()
function_decl|;
name|void
name|mouseWheel
parameter_list|()
function_decl|;
name|void
name|layoutDirection
parameter_list|()
function_decl|;
name|void
name|itemListPosition
parameter_list|()
function_decl|;
name|void
name|separatorItem_data
parameter_list|()
function_decl|;
name|void
name|separatorItem
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_STYLE_CLEANLOOKS
name|void
name|task190351_layout
parameter_list|()
function_decl|;
name|void
name|task191329_size
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|task166349_setEditableOnReturn
parameter_list|()
function_decl|;
name|void
name|task190205_setModelAdjustToContents
parameter_list|()
function_decl|;
name|void
name|task248169_popupWithMinimalSize
parameter_list|()
function_decl|;
name|void
name|task247863_keyBoardSelection
parameter_list|()
function_decl|;
name|void
name|task220195_keyBoardSelection2
parameter_list|()
function_decl|;
name|void
name|setModelColumn
parameter_list|()
function_decl|;
name|void
name|noScrollbar_data
parameter_list|()
function_decl|;
name|void
name|noScrollbar
parameter_list|()
function_decl|;
name|void
name|setItemDelegate
parameter_list|()
function_decl|;
name|void
name|task253944_itemDelegateIsReset
parameter_list|()
function_decl|;
name|void
name|subControlRectsWithOffset_data
parameter_list|()
function_decl|;
name|void
name|subControlRectsWithOffset
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_STYLE_WINDOWS
name|void
name|task260974_menuItemRectangleForComboBoxPopup
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|removeItem
parameter_list|()
function_decl|;
name|void
name|resetModel
parameter_list|()
function_decl|;
name|void
name|keyBoardNavigationWithMouse
parameter_list|()
function_decl|;
name|void
name|task_QTBUG_1071_changingFocusEmitsActivated
parameter_list|()
function_decl|;
name|void
name|maxVisibleItems
parameter_list|()
function_decl|;
name|void
name|task_QTBUG_10491_currentIndexAndModelColumn
parameter_list|()
function_decl|;
protected|protected
name|slots
protected|:
name|void
name|onEditTextChanged
parameter_list|(
specifier|const
name|QString
modifier|&
name|newString
parameter_list|)
function_decl|;
private|private:
DECL|member|testWidget
name|QComboBox
modifier|*
name|testWidget
decl_stmt|;
DECL|member|parent
name|QWidget
modifier|*
name|parent
decl_stmt|;
DECL|member|ok
name|QPushButton
modifier|*
name|ok
decl_stmt|;
DECL|member|editTextCount
name|int
name|editTextCount
decl_stmt|;
DECL|member|editText
name|QString
name|editText
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|MyAbstractItemDelegate
class|class
name|MyAbstractItemDelegate
super|:
specifier|public
name|QAbstractItemDelegate
block|{
public|public:
DECL|function|MyAbstractItemDelegate
name|MyAbstractItemDelegate
parameter_list|()
member_init_list|:
name|QAbstractItemDelegate
argument_list|()
block|{}
empty_stmt|;
DECL|function|paint
name|void
name|paint
parameter_list|(
name|QPainter
modifier|*
parameter_list|,
specifier|const
name|QStyleOptionViewItem
modifier|&
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
parameter_list|)
specifier|const
block|{}
DECL|function|sizeHint
name|QSize
name|sizeHint
parameter_list|(
specifier|const
name|QStyleOptionViewItem
modifier|&
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
parameter_list|)
specifier|const
block|{
return|return
name|QSize
argument_list|()
return|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|MyAbstractItemModel
class|class
name|MyAbstractItemModel
super|:
specifier|public
name|QAbstractItemModel
block|{
public|public:
DECL|function|MyAbstractItemModel
name|MyAbstractItemModel
parameter_list|()
member_init_list|:
name|QAbstractItemModel
argument_list|()
block|{}
empty_stmt|;
DECL|function|index
name|QModelIndex
name|index
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
parameter_list|)
specifier|const
block|{
return|return
name|QModelIndex
argument_list|()
return|;
block|}
DECL|function|parent
name|QModelIndex
name|parent
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
parameter_list|)
specifier|const
block|{
return|return
name|QModelIndex
argument_list|()
return|;
block|}
DECL|function|rowCount
name|int
name|rowCount
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
parameter_list|)
specifier|const
block|{
return|return
literal|0
return|;
block|}
DECL|function|columnCount
name|int
name|columnCount
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
parameter_list|)
specifier|const
block|{
return|return
literal|0
return|;
block|}
DECL|function|hasChildren
name|bool
name|hasChildren
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
parameter_list|)
specifier|const
block|{
return|return
literal|false
return|;
block|}
DECL|function|data
name|QVariant
name|data
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
parameter_list|,
name|int
parameter_list|)
specifier|const
block|{
return|return
name|QVariant
argument_list|()
return|;
block|}
DECL|function|setData
name|bool
name|setData
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
parameter_list|,
specifier|const
name|QVariant
modifier|&
parameter_list|,
name|int
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
DECL|function|insertRows
name|bool
name|insertRows
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
DECL|function|insertColumns
name|bool
name|insertColumns
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
DECL|function|setPersistent
name|void
name|setPersistent
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
parameter_list|)
block|{}
DECL|function|removeRows
name|bool
name|removeRows
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
DECL|function|removeColumns
name|bool
name|removeColumns
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
specifier|const
name|QModelIndex
modifier|&
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
DECL|function|reset
name|void
name|reset
parameter_list|()
block|{}
block|}
class|;
end_class
begin_class
DECL|class|MyAbstractItemView
class|class
name|MyAbstractItemView
super|:
specifier|public
name|QAbstractItemView
block|{
public|public:
DECL|function|MyAbstractItemView
name|MyAbstractItemView
parameter_list|()
member_init_list|:
name|QAbstractItemView
argument_list|()
block|{}
DECL|function|visualRect
name|QRect
name|visualRect
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
parameter_list|)
specifier|const
block|{
return|return
name|QRect
argument_list|()
return|;
block|}
DECL|function|scrollTo
name|void
name|scrollTo
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
parameter_list|,
name|ScrollHint
parameter_list|)
block|{}
DECL|function|indexAt
name|QModelIndex
name|indexAt
parameter_list|(
specifier|const
name|QPoint
modifier|&
parameter_list|)
specifier|const
block|{
return|return
name|QModelIndex
argument_list|()
return|;
block|}
protected|protected:
DECL|function|moveCursor
name|QModelIndex
name|moveCursor
parameter_list|(
name|CursorAction
parameter_list|,
name|Qt
operator|::
name|KeyboardModifiers
parameter_list|)
block|{
return|return
name|QModelIndex
argument_list|()
return|;
block|}
DECL|function|horizontalOffset
name|int
name|horizontalOffset
parameter_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
DECL|function|verticalOffset
name|int
name|verticalOffset
parameter_list|()
specifier|const
block|{
return|return
literal|0
return|;
block|}
DECL|function|isIndexHidden
name|bool
name|isIndexHidden
parameter_list|(
specifier|const
name|QModelIndex
modifier|&
parameter_list|)
specifier|const
block|{
return|return
literal|false
return|;
block|}
DECL|function|setSelection
name|void
name|setSelection
parameter_list|(
specifier|const
name|QRect
modifier|&
parameter_list|,
name|QItemSelectionModel
operator|::
name|SelectionFlags
parameter_list|)
block|{}
DECL|function|visualRegionForSelection
name|QRegion
name|visualRegionForSelection
parameter_list|(
specifier|const
name|QItemSelection
modifier|&
parameter_list|)
specifier|const
block|{
return|return
name|QRegion
argument_list|()
return|;
block|}
block|}
class|;
end_class
begin_comment
comment|// Testing get/set functions
end_comment
begin_function
DECL|function|getSetCheck
name|void
name|tst_QComboBox
operator|::
name|getSetCheck
parameter_list|()
block|{
name|QComboBox
name|obj1
decl_stmt|;
comment|// int QComboBox::maxVisibleItems()
comment|// void QComboBox::setMaxVisibleItems(int)
name|obj1
operator|.
name|setMaxVisibleItems
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|100
argument_list|,
name|obj1
operator|.
name|maxVisibleItems
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setMaxVisibleItems
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|obj1
operator|.
name|maxVisibleItems
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QComboBox::setMaxVisibleItems: "
literal|"Invalid max visible items (-2147483648) must be>= 0"
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setMaxVisibleItems
argument_list|(
name|INT_MIN
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|obj1
operator|.
name|maxVisibleItems
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Cannot be set to something negative => old value
name|obj1
operator|.
name|setMaxVisibleItems
argument_list|(
name|INT_MAX
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|INT_MAX
argument_list|,
name|obj1
operator|.
name|maxVisibleItems
argument_list|()
argument_list|)
expr_stmt|;
comment|// int QComboBox::maxCount()
comment|// void QComboBox::setMaxCount(int)
name|obj1
operator|.
name|setMaxCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0
argument_list|,
name|obj1
operator|.
name|maxCount
argument_list|()
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_DEBUG
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QComboBox::setMaxCount: Invalid count (-2147483648) must be>= 0"
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setMaxCount
argument_list|(
name|INT_MIN
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0
argument_list|,
name|obj1
operator|.
name|maxCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// Setting a value below 0 makes no sense, and shouldn't be allowed
endif|#
directive|endif
name|obj1
operator|.
name|setMaxCount
argument_list|(
name|INT_MAX
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|INT_MAX
argument_list|,
name|obj1
operator|.
name|maxCount
argument_list|()
argument_list|)
expr_stmt|;
comment|// bool QComboBox::autoCompletion()
comment|// void QComboBox::setAutoCompletion(bool)
name|obj1
operator|.
name|setAutoCompletion
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|false
argument_list|,
name|obj1
operator|.
name|autoCompletion
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setAutoCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|true
argument_list|,
name|obj1
operator|.
name|autoCompletion
argument_list|()
argument_list|)
expr_stmt|;
comment|// bool QComboBox::duplicatesEnabled()
comment|// void QComboBox::setDuplicatesEnabled(bool)
name|obj1
operator|.
name|setDuplicatesEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|false
argument_list|,
name|obj1
operator|.
name|duplicatesEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setDuplicatesEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|true
argument_list|,
name|obj1
operator|.
name|duplicatesEnabled
argument_list|()
argument_list|)
expr_stmt|;
comment|// InsertPolicy QComboBox::insertPolicy()
comment|// void QComboBox::setInsertPolicy(InsertPolicy)
name|obj1
operator|.
name|setInsertPolicy
argument_list|(
name|QComboBox
operator|::
name|InsertPolicy
argument_list|(
name|QComboBox
operator|::
name|NoInsert
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QComboBox
operator|::
name|InsertPolicy
argument_list|(
name|QComboBox
operator|::
name|NoInsert
argument_list|)
argument_list|,
name|obj1
operator|.
name|insertPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setInsertPolicy
argument_list|(
name|QComboBox
operator|::
name|InsertPolicy
argument_list|(
name|QComboBox
operator|::
name|InsertAtTop
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QComboBox
operator|::
name|InsertPolicy
argument_list|(
name|QComboBox
operator|::
name|InsertAtTop
argument_list|)
argument_list|,
name|obj1
operator|.
name|insertPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setInsertPolicy
argument_list|(
name|QComboBox
operator|::
name|InsertPolicy
argument_list|(
name|QComboBox
operator|::
name|InsertAtCurrent
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QComboBox
operator|::
name|InsertPolicy
argument_list|(
name|QComboBox
operator|::
name|InsertAtCurrent
argument_list|)
argument_list|,
name|obj1
operator|.
name|insertPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setInsertPolicy
argument_list|(
name|QComboBox
operator|::
name|InsertPolicy
argument_list|(
name|QComboBox
operator|::
name|InsertAtBottom
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QComboBox
operator|::
name|InsertPolicy
argument_list|(
name|QComboBox
operator|::
name|InsertAtBottom
argument_list|)
argument_list|,
name|obj1
operator|.
name|insertPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setInsertPolicy
argument_list|(
name|QComboBox
operator|::
name|InsertPolicy
argument_list|(
name|QComboBox
operator|::
name|InsertAfterCurrent
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QComboBox
operator|::
name|InsertPolicy
argument_list|(
name|QComboBox
operator|::
name|InsertAfterCurrent
argument_list|)
argument_list|,
name|obj1
operator|.
name|insertPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setInsertPolicy
argument_list|(
name|QComboBox
operator|::
name|InsertPolicy
argument_list|(
name|QComboBox
operator|::
name|InsertBeforeCurrent
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QComboBox
operator|::
name|InsertPolicy
argument_list|(
name|QComboBox
operator|::
name|InsertBeforeCurrent
argument_list|)
argument_list|,
name|obj1
operator|.
name|insertPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setInsertPolicy
argument_list|(
name|QComboBox
operator|::
name|InsertPolicy
argument_list|(
name|QComboBox
operator|::
name|InsertAlphabetically
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QComboBox
operator|::
name|InsertPolicy
argument_list|(
name|QComboBox
operator|::
name|InsertAlphabetically
argument_list|)
argument_list|,
name|obj1
operator|.
name|insertPolicy
argument_list|()
argument_list|)
expr_stmt|;
comment|// SizeAdjustPolicy QComboBox::sizeAdjustPolicy()
comment|// void QComboBox::setSizeAdjustPolicy(SizeAdjustPolicy)
name|obj1
operator|.
name|setSizeAdjustPolicy
argument_list|(
name|QComboBox
operator|::
name|SizeAdjustPolicy
argument_list|(
name|QComboBox
operator|::
name|AdjustToContents
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QComboBox
operator|::
name|SizeAdjustPolicy
argument_list|(
name|QComboBox
operator|::
name|AdjustToContents
argument_list|)
argument_list|,
name|obj1
operator|.
name|sizeAdjustPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setSizeAdjustPolicy
argument_list|(
name|QComboBox
operator|::
name|SizeAdjustPolicy
argument_list|(
name|QComboBox
operator|::
name|AdjustToContentsOnFirstShow
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QComboBox
operator|::
name|SizeAdjustPolicy
argument_list|(
name|QComboBox
operator|::
name|AdjustToContentsOnFirstShow
argument_list|)
argument_list|,
name|obj1
operator|.
name|sizeAdjustPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setSizeAdjustPolicy
argument_list|(
name|QComboBox
operator|::
name|SizeAdjustPolicy
argument_list|(
name|QComboBox
operator|::
name|AdjustToMinimumContentsLength
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QComboBox
operator|::
name|SizeAdjustPolicy
argument_list|(
name|QComboBox
operator|::
name|AdjustToMinimumContentsLength
argument_list|)
argument_list|,
name|obj1
operator|.
name|sizeAdjustPolicy
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setSizeAdjustPolicy
argument_list|(
name|QComboBox
operator|::
name|SizeAdjustPolicy
argument_list|(
name|QComboBox
operator|::
name|AdjustToMinimumContentsLengthWithIcon
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QComboBox
operator|::
name|SizeAdjustPolicy
argument_list|(
name|QComboBox
operator|::
name|AdjustToMinimumContentsLengthWithIcon
argument_list|)
argument_list|,
name|obj1
operator|.
name|sizeAdjustPolicy
argument_list|()
argument_list|)
expr_stmt|;
comment|// int QComboBox::minimumContentsLength()
comment|// void QComboBox::setMinimumContentsLength(int)
name|obj1
operator|.
name|setMinimumContentsLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0
argument_list|,
name|obj1
operator|.
name|minimumContentsLength
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setMinimumContentsLength
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|100
argument_list|,
name|obj1
operator|.
name|minimumContentsLength
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setMinimumContentsLength
argument_list|(
name|INT_MIN
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|100
argument_list|,
name|obj1
operator|.
name|minimumContentsLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// Cannot be set to something negative => old value
name|obj1
operator|.
name|setMinimumContentsLength
argument_list|(
name|INT_MAX
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|INT_MAX
argument_list|,
name|obj1
operator|.
name|minimumContentsLength
argument_list|()
argument_list|)
expr_stmt|;
comment|// QLineEdit * QComboBox::lineEdit()
comment|// void QComboBox::setLineEdit(QLineEdit *)
name|QLineEdit
modifier|*
name|var8
init|=
operator|new
name|QLineEdit
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|obj1
operator|.
name|setLineEdit
argument_list|(
name|var8
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|var8
argument_list|,
name|obj1
operator|.
name|lineEdit
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QComboBox::setLineEdit: cannot set a 0 line edit"
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setLineEdit
argument_list|(
operator|(
name|QLineEdit
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|var8
argument_list|,
name|obj1
operator|.
name|lineEdit
argument_list|()
argument_list|)
expr_stmt|;
comment|// delete var8; // No delete, since QComboBox takes ownership
comment|// const QValidator * QComboBox::validator()
comment|// void QComboBox::setValidator(const QValidator *)
name|QIntValidator
modifier|*
name|var9
init|=
operator|new
name|QIntValidator
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|obj1
operator|.
name|setValidator
argument_list|(
name|var9
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|obj1
operator|.
name|validator
argument_list|()
argument_list|,
operator|(
specifier|const
name|QValidator
operator|*
operator|)
name|var9
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setValidator
argument_list|(
operator|(
name|QValidator
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|obj1
operator|.
name|validator
argument_list|()
argument_list|,
operator|(
specifier|const
name|QValidator
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|var9
expr_stmt|;
comment|// QAbstractItemDelegate * QComboBox::itemDelegate()
comment|// void QComboBox::setItemDelegate(QAbstractItemDelegate *)
name|MyAbstractItemDelegate
modifier|*
name|var10
init|=
operator|new
name|MyAbstractItemDelegate
decl_stmt|;
name|obj1
operator|.
name|setItemDelegate
argument_list|(
name|var10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|obj1
operator|.
name|itemDelegate
argument_list|()
argument_list|,
operator|(
name|QAbstractItemDelegate
operator|*
operator|)
name|var10
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QComboBox::setItemDelegate: cannot set a 0 delegate"
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setItemDelegate
argument_list|(
operator|(
name|QAbstractItemDelegate
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|obj1
operator|.
name|itemDelegate
argument_list|()
argument_list|,
operator|(
name|QAbstractItemDelegate
operator|*
operator|)
name|var10
argument_list|)
expr_stmt|;
comment|// delete var10; // No delete, since QComboBox takes ownership
comment|// QAbstractItemModel * QComboBox::model()
comment|// void QComboBox::setModel(QAbstractItemModel *)
name|MyAbstractItemModel
modifier|*
name|var11
init|=
operator|new
name|MyAbstractItemModel
decl_stmt|;
name|obj1
operator|.
name|setModel
argument_list|(
name|var11
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|obj1
operator|.
name|model
argument_list|()
argument_list|,
operator|(
name|QAbstractItemModel
operator|*
operator|)
name|var11
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QComboBox::setModel: cannot set a 0 model"
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setModel
argument_list|(
operator|(
name|QAbstractItemModel
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|obj1
operator|.
name|model
argument_list|()
argument_list|,
operator|(
name|QAbstractItemModel
operator|*
operator|)
name|var11
argument_list|)
expr_stmt|;
operator|delete
name|var11
expr_stmt|;
name|obj1
operator|.
name|model
argument_list|()
expr_stmt|;
comment|// int QComboBox::modelColumn()
comment|// void QComboBox::setModelColumn(int)
name|obj1
operator|.
name|setModelColumn
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0
argument_list|,
name|obj1
operator|.
name|modelColumn
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setModelColumn
argument_list|(
name|INT_MIN
argument_list|)
expr_stmt|;
comment|//    QCOMPARE(0, obj1.modelColumn()); // Cannot be set to something negative => column 0
name|obj1
operator|.
name|setModelColumn
argument_list|(
name|INT_MAX
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|INT_MAX
argument_list|,
name|obj1
operator|.
name|modelColumn
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setModelColumn
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// back to normal
comment|// QAbstractItemView * QComboBox::view()
comment|// void QComboBox::setView(QAbstractItemView *)
name|MyAbstractItemView
modifier|*
name|var13
init|=
operator|new
name|MyAbstractItemView
decl_stmt|;
name|obj1
operator|.
name|setView
argument_list|(
name|var13
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|obj1
operator|.
name|view
argument_list|()
argument_list|,
operator|(
name|QAbstractItemView
operator|*
operator|)
name|var13
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QComboBox::setView: cannot set a 0 view"
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setView
argument_list|(
operator|(
name|QAbstractItemView
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|obj1
operator|.
name|view
argument_list|()
argument_list|,
operator|(
name|QAbstractItemView
operator|*
operator|)
name|var13
argument_list|)
expr_stmt|;
operator|delete
name|var13
expr_stmt|;
comment|// int QComboBox::currentIndex()
comment|// void QComboBox::setCurrentIndex(int)
name|obj1
operator|.
name|setEditable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setCurrentIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|-
literal|1
argument_list|,
name|obj1
operator|.
name|currentIndex
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setCurrentIndex
argument_list|(
name|INT_MIN
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|-
literal|1
argument_list|,
name|obj1
operator|.
name|currentIndex
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setCurrentIndex
argument_list|(
name|INT_MAX
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|-
literal|1
argument_list|,
name|obj1
operator|.
name|currentIndex
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|addItems
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"1"
operator|<<
literal|"2"
operator|<<
literal|"3"
operator|<<
literal|"4"
operator|<<
literal|"5"
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setCurrentIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0
argument_list|,
name|obj1
operator|.
name|currentIndex
argument_list|()
argument_list|)
expr_stmt|;
comment|// Valid
name|obj1
operator|.
name|setCurrentIndex
argument_list|(
name|INT_MIN
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|-
literal|1
argument_list|,
name|obj1
operator|.
name|currentIndex
argument_list|()
argument_list|)
expr_stmt|;
comment|// Invalid => -1
name|obj1
operator|.
name|setCurrentIndex
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|4
argument_list|,
name|obj1
operator|.
name|currentIndex
argument_list|()
argument_list|)
expr_stmt|;
comment|// Valid
name|obj1
operator|.
name|setCurrentIndex
argument_list|(
name|INT_MAX
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|-
literal|1
argument_list|,
name|obj1
operator|.
name|currentIndex
argument_list|()
argument_list|)
expr_stmt|;
comment|// Invalid => -1
block|}
end_function
begin_typedef
DECL|typedef|VariantList
typedef|typedef
name|QList
argument_list|<
name|QVariant
argument_list|>
name|VariantList
typedef|;
end_typedef
begin_typedef
DECL|typedef|IconList
typedef|typedef
name|QList
argument_list|<
name|QIcon
argument_list|>
name|IconList
typedef|;
end_typedef
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|VariantList
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|IconList
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QComboBox::InsertPolicy
argument_list|)
end_macro
begin_constructor
DECL|function|tst_QComboBox
name|tst_QComboBox
operator|::
name|tst_QComboBox
parameter_list|()
block|{
name|qRegisterMetaType
argument_list|<
name|QModelIndex
argument_list|>
argument_list|(
literal|"QModelIndex"
argument_list|)
expr_stmt|;
name|parent
operator|=
literal|0
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~tst_QComboBox
name|tst_QComboBox
operator|::
name|~
name|tst_QComboBox
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|initTestCase
name|void
name|tst_QComboBox
operator|::
name|initTestCase
parameter_list|()
block|{
comment|// Create the test class
name|parent
operator|=
operator|new
name|QWidget
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|Window
argument_list|)
expr_stmt|;
name|parent
operator|->
name|setObjectName
argument_list|(
literal|"parent"
argument_list|)
expr_stmt|;
name|parent
operator|->
name|resize
argument_list|(
literal|400
argument_list|,
literal|400
argument_list|)
expr_stmt|;
name|testWidget
operator|=
operator|new
name|QComboBox
argument_list|(
name|parent
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setObjectName
argument_list|(
literal|"testObject"
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setGeometry
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|100
argument_list|,
literal|100
argument_list|)
expr_stmt|;
name|editTextCount
operator|=
literal|0
expr_stmt|;
name|editText
operator|.
name|clear
argument_list|()
expr_stmt|;
name|connect
argument_list|(
name|testWidget
argument_list|,
name|SIGNAL
argument_list|(
name|editTextChanged
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|onEditTextChanged
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|parent
operator|->
name|show
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_QComboBox
operator|::
name|cleanupTestCase
parameter_list|()
block|{
operator|delete
name|parent
expr_stmt|;
name|parent
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|init
name|void
name|tst_QComboBox
operator|::
name|init
parameter_list|()
block|{
comment|// all tests starts with a clean non-editable combobox
name|testWidget
operator|->
name|setEditable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|clear
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WINCE
comment|//disable magic for WindowsCE
name|qApp
operator|->
name|setAutoMaximizeThreshold
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QComboBox
operator|::
name|cleanup
parameter_list|()
block|{
comment|//nothing
block|}
end_function
begin_function
DECL|function|setEditable
name|void
name|tst_QComboBox
operator|::
name|setEditable
parameter_list|()
block|{
comment|// make sure we have no lineedit
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|lineEdit
argument_list|()
argument_list|)
expr_stmt|;
comment|// test setEditable(true)
name|testWidget
operator|->
name|setEditable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|lineEdit
argument_list|()
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|addItem
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|lineEdit
argument_list|()
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
comment|// test setEditable(false)
name|QLineEdit
modifier|*
name|lineEdit
init|=
name|testWidget
operator|->
name|lineEdit
argument_list|()
decl_stmt|;
comment|// line edit is visible when combobox is editable
name|QVERIFY
argument_list|(
name|lineEdit
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setEditable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|lineEdit
argument_list|()
argument_list|)
expr_stmt|;
comment|// line edit should have been explicitly hidden when editable was turned off
name|QVERIFY
argument_list|(
operator|!
name|lineEdit
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setPalette
name|void
name|tst_QComboBox
operator|::
name|setPalette
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_WS_MAC
if|if
condition|(
name|qobject_cast
argument_list|<
name|QMacStyle
operator|*
argument_list|>
argument_list|(
name|testWidget
operator|->
name|style
argument_list|()
argument_list|)
condition|)
block|{
name|QSKIP
argument_list|(
literal|"This test doesn't make sense for pixmap-based styles"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|QPalette
name|pal
init|=
name|testWidget
operator|->
name|palette
argument_list|()
decl_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Base
argument_list|,
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setPalette
argument_list|(
name|pal
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setEditable
argument_list|(
operator|!
name|testWidget
operator|->
name|isEditable
argument_list|()
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Base
argument_list|,
name|Qt
operator|::
name|blue
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setPalette
argument_list|(
name|pal
argument_list|)
expr_stmt|;
specifier|const
name|QObjectList
name|comboChildren
init|=
name|testWidget
operator|->
name|children
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|comboChildren
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QObject
modifier|*
name|o
init|=
name|comboChildren
operator|.
name|at
argument_list|(
name|i
argument_list|)
decl_stmt|;
if|if
condition|(
name|o
operator|->
name|isWidgetType
argument_list|()
condition|)
block|{
name|QVERIFY
argument_list|(
operator|(
operator|(
name|QWidget
operator|*
operator|)
name|o
operator|)
operator|->
name|palette
argument_list|()
operator|==
name|pal
argument_list|)
expr_stmt|;
block|}
block|}
name|testWidget
operator|->
name|setEditable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Base
argument_list|,
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
comment|//Setting it on the lineedit should be separate form the combo
name|testWidget
operator|->
name|lineEdit
argument_list|()
operator|->
name|setPalette
argument_list|(
name|pal
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|palette
argument_list|()
operator|!=
name|pal
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|lineEdit
argument_list|()
operator|->
name|palette
argument_list|()
operator|==
name|pal
argument_list|)
expr_stmt|;
name|pal
operator|.
name|setColor
argument_list|(
name|QPalette
operator|::
name|Base
argument_list|,
name|Qt
operator|::
name|green
argument_list|)
expr_stmt|;
comment|//Setting it on the combo directly should override lineedit
name|testWidget
operator|->
name|setPalette
argument_list|(
name|pal
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|palette
argument_list|()
operator|==
name|pal
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|lineEdit
argument_list|()
operator|->
name|palette
argument_list|()
operator|==
name|pal
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sizeAdjustPolicy
name|void
name|tst_QComboBox
operator|::
name|sizeAdjustPolicy
parameter_list|()
block|{
comment|// test that adding new items will not change the sizehint for AdjustToContentsOnFirstShow
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|sizeAdjustPolicy
argument_list|()
operator|==
name|QComboBox
operator|::
name|AdjustToContentsOnFirstShow
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QSize
name|firstShow
init|=
name|testWidget
operator|->
name|sizeHint
argument_list|()
decl_stmt|;
name|testWidget
operator|->
name|addItem
argument_list|(
literal|"normal item"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|sizeHint
argument_list|()
argument_list|,
name|firstShow
argument_list|)
expr_stmt|;
comment|// check that with minimumContentsLength/AdjustToMinimumContentsLength sizehint changes
name|testWidget
operator|->
name|setMinimumContentsLength
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|sizeHint
argument_list|()
argument_list|,
name|firstShow
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setSizeAdjustPolicy
argument_list|(
name|QComboBox
operator|::
name|AdjustToMinimumContentsLength
argument_list|)
expr_stmt|;
name|QSize
name|minimumContentsLength
init|=
name|testWidget
operator|->
name|sizeHint
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|minimumContentsLength
operator|.
name|width
argument_list|()
operator|>
name|firstShow
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setMinimumContentsLength
argument_list|(
literal|60
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|minimumContentsLength
operator|.
name|width
argument_list|()
operator|<
name|testWidget
operator|->
name|sizeHint
argument_list|()
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
comment|// check that with minimumContentsLength/AdjustToMinimumContentsLengthWithIcon sizehint changes
name|testWidget
operator|->
name|setSizeAdjustPolicy
argument_list|(
name|QComboBox
operator|::
name|AdjustToMinimumContentsLengthWithIcon
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setMinimumContentsLength
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|minimumContentsLength
operator|=
name|testWidget
operator|->
name|sizeHint
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|minimumContentsLength
operator|.
name|width
argument_list|()
operator|>
name|firstShow
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setMinimumContentsLength
argument_list|(
literal|60
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|minimumContentsLength
operator|.
name|width
argument_list|()
operator|<
name|testWidget
operator|->
name|sizeHint
argument_list|()
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|minimumContentsLength
operator|=
name|testWidget
operator|->
name|sizeHint
argument_list|()
expr_stmt|;
name|testWidget
operator|->
name|setIconSize
argument_list|(
name|QSize
argument_list|(
literal|128
argument_list|,
literal|128
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|minimumContentsLength
operator|.
name|width
argument_list|()
operator|<
name|testWidget
operator|->
name|sizeHint
argument_list|()
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
comment|// check AdjustToContents changes with content
name|testWidget
operator|->
name|setSizeAdjustPolicy
argument_list|(
name|QComboBox
operator|::
name|AdjustToContents
argument_list|)
expr_stmt|;
name|QSize
name|content
init|=
name|testWidget
operator|->
name|sizeHint
argument_list|()
decl_stmt|;
name|testWidget
operator|->
name|addItem
argument_list|(
literal|"small"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|sizeHint
argument_list|()
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|addItem
argument_list|(
literal|"looooooooooooooooooooooong item"
argument_list|)
expr_stmt|;
comment|// minimumContentsLength()> sizeof("looooooooooooooooooooooong item"), so the sizeHint()
comment|// stays the same
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|sizeHint
argument_list|()
argument_list|,
name|content
argument_list|)
expr_stmt|;
comment|// over 60 characters (cf. setMinimumContentsLength() call above)
name|testWidget
operator|->
name|addItem
argument_list|(
literal|"loooooooooooooooooooooooooooooooooooooooooooooo"
literal|"ooooooooooooooooooooooooooooooooooooooooooooooo"
literal|"ooooooooooooooooooooooooooooong item"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|sizeHint
argument_list|()
operator|.
name|width
argument_list|()
operator|>
name|content
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
comment|// check AdjustToContents also shrinks when item changes
name|content
operator|=
name|testWidget
operator|->
name|sizeHint
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testWidget
operator|->
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|testWidget
operator|->
name|setItemText
argument_list|(
name|i
argument_list|,
literal|"XXXXXXXXXX"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|sizeHint
argument_list|()
operator|.
name|width
argument_list|()
operator|<
name|content
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
comment|// check AdjustToContents shrinks when items are removed
name|content
operator|=
name|testWidget
operator|->
name|sizeHint
argument_list|()
expr_stmt|;
while|while
condition|(
name|testWidget
operator|->
name|count
argument_list|()
condition|)
name|testWidget
operator|->
name|removeItem
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|sizeHint
argument_list|()
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setMinimumContentsLength
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|sizeHint
argument_list|()
operator|.
name|width
argument_list|()
operator|<
name|content
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|clear
name|void
name|tst_QComboBox
operator|::
name|clear
parameter_list|()
block|{
comment|// first non editable combobox
name|testWidget
operator|->
name|addItem
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|addItem
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|currentIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|clear
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|currentIndex
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|currentText
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// then editable combobox
name|testWidget
operator|->
name|clear
argument_list|()
expr_stmt|;
name|testWidget
operator|->
name|setEditable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|addItem
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|addItem
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|currentIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|lineEdit
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|lineEdit
argument_list|()
operator|->
name|text
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|clear
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|currentIndex
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|currentText
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|lineEdit
argument_list|()
operator|->
name|text
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insertPolicy_data
name|void
name|tst_QComboBox
operator|::
name|insertPolicy_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"initialEntries"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QComboBox
operator|::
name|InsertPolicy
argument_list|>
argument_list|(
literal|"insertPolicy"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"currentIndex"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"userInput"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
comment|/* Each insertPolicy should test at least:        no initial entries        one initial entry        five initial entries, current is first item        five initial entries, current is third item        five initial entries, current is last item     */
comment|/* QComboBox::NoInsert - the string will not be inserted into the combobox.        QComboBox::InsertAtTop - insert the string as the first item in the combobox.        QComboBox::InsertAtCurrent - replace the previously selected item with the string the user has entered.        QComboBox::InsertAtBottom - insert the string as the last item in the combobox.        QComboBox::InsertAfterCurrent - insert the string after the previously selected item.        QComboBox::InsertBeforeCurrent - insert the string before the previously selected item.        QComboBox::InsertAlphabetically - insert the string at the alphabetic position.     */
name|QStringList
name|initial
decl_stmt|;
name|QStringList
name|oneEntry
argument_list|(
literal|"One"
argument_list|)
decl_stmt|;
name|QStringList
name|fiveEntries
decl_stmt|;
name|fiveEntries
operator|<<
literal|"One"
operator|<<
literal|"Two"
operator|<<
literal|"Three"
operator|<<
literal|"Four"
operator|<<
literal|"Five"
expr_stmt|;
name|QString
name|input
argument_list|(
literal|"insert"
argument_list|)
decl_stmt|;
block|{
name|QTest
operator|::
name|newRow
argument_list|(
literal|"NoInsert-NoInitial"
argument_list|)
operator|<<
name|initial
operator|<<
name|QComboBox
operator|::
name|NoInsert
operator|<<
literal|0
operator|<<
name|input
operator|<<
name|initial
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"NoInsert-OneInitial"
argument_list|)
operator|<<
name|oneEntry
operator|<<
name|QComboBox
operator|::
name|NoInsert
operator|<<
literal|0
operator|<<
name|input
operator|<<
name|oneEntry
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"NoInsert-FiveInitial-FirstCurrent"
argument_list|)
operator|<<
name|fiveEntries
operator|<<
name|QComboBox
operator|::
name|NoInsert
operator|<<
literal|0
operator|<<
name|input
operator|<<
name|fiveEntries
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"NoInsert-FiveInitial-ThirdCurrent"
argument_list|)
operator|<<
name|fiveEntries
operator|<<
name|QComboBox
operator|::
name|NoInsert
operator|<<
literal|2
operator|<<
name|input
operator|<<
name|fiveEntries
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"NoInsert-FiveInitial-LastCurrent"
argument_list|)
operator|<<
name|fiveEntries
operator|<<
name|QComboBox
operator|::
name|NoInsert
operator|<<
literal|4
operator|<<
name|input
operator|<<
name|fiveEntries
expr_stmt|;
block|}
block|{
name|QStringList
name|initialAtTop
argument_list|(
literal|"insert"
argument_list|)
decl_stmt|;
name|QStringList
name|oneAtTop
decl_stmt|;
name|oneAtTop
operator|<<
literal|"insert"
operator|<<
literal|"One"
expr_stmt|;
name|QStringList
name|fiveAtTop
decl_stmt|;
name|fiveAtTop
operator|<<
literal|"insert"
operator|<<
literal|"One"
operator|<<
literal|"Two"
operator|<<
literal|"Three"
operator|<<
literal|"Four"
operator|<<
literal|"Five"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"AtTop-NoInitial"
argument_list|)
operator|<<
name|initial
operator|<<
name|QComboBox
operator|::
name|InsertAtTop
operator|<<
literal|0
operator|<<
name|input
operator|<<
name|initialAtTop
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"AtTop-OneInitial"
argument_list|)
operator|<<
name|oneEntry
operator|<<
name|QComboBox
operator|::
name|InsertAtTop
operator|<<
literal|0
operator|<<
name|input
operator|<<
name|oneAtTop
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"AtTop-FiveInitial-FirstCurrent"
argument_list|)
operator|<<
name|fiveEntries
operator|<<
name|QComboBox
operator|::
name|InsertAtTop
operator|<<
literal|0
operator|<<
name|input
operator|<<
name|fiveAtTop
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"AtTop-FiveInitial-ThirdCurrent"
argument_list|)
operator|<<
name|fiveEntries
operator|<<
name|QComboBox
operator|::
name|InsertAtTop
operator|<<
literal|2
operator|<<
name|input
operator|<<
name|fiveAtTop
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"AtTop-FiveInitial-LastCurrent"
argument_list|)
operator|<<
name|fiveEntries
operator|<<
name|QComboBox
operator|::
name|InsertAtTop
operator|<<
literal|4
operator|<<
name|input
operator|<<
name|fiveAtTop
expr_stmt|;
block|}
block|{
name|QStringList
name|initialAtCurrent
argument_list|(
literal|"insert"
argument_list|)
decl_stmt|;
name|QStringList
name|oneAtCurrent
argument_list|(
literal|"insert"
argument_list|)
decl_stmt|;
name|QStringList
name|fiveAtCurrentFirst
decl_stmt|;
name|fiveAtCurrentFirst
operator|<<
literal|"insert"
operator|<<
literal|"Two"
operator|<<
literal|"Three"
operator|<<
literal|"Four"
operator|<<
literal|"Five"
expr_stmt|;
name|QStringList
name|fiveAtCurrentThird
decl_stmt|;
name|fiveAtCurrentThird
operator|<<
literal|"One"
operator|<<
literal|"Two"
operator|<<
literal|"insert"
operator|<<
literal|"Four"
operator|<<
literal|"Five"
expr_stmt|;
name|QStringList
name|fiveAtCurrentLast
decl_stmt|;
name|fiveAtCurrentLast
operator|<<
literal|"One"
operator|<<
literal|"Two"
operator|<<
literal|"Three"
operator|<<
literal|"Four"
operator|<<
literal|"insert"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"AtCurrent-NoInitial"
argument_list|)
operator|<<
name|initial
operator|<<
name|QComboBox
operator|::
name|InsertAtCurrent
operator|<<
literal|0
operator|<<
name|input
operator|<<
name|initialAtCurrent
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"AtCurrent-OneInitial"
argument_list|)
operator|<<
name|oneEntry
operator|<<
name|QComboBox
operator|::
name|InsertAtCurrent
operator|<<
literal|0
operator|<<
name|input
operator|<<
name|oneAtCurrent
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"AtCurrent-FiveInitial-FirstCurrent"
argument_list|)
operator|<<
name|fiveEntries
operator|<<
name|QComboBox
operator|::
name|InsertAtCurrent
operator|<<
literal|0
operator|<<
name|input
operator|<<
name|fiveAtCurrentFirst
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"AtCurrent-FiveInitial-ThirdCurrent"
argument_list|)
operator|<<
name|fiveEntries
operator|<<
name|QComboBox
operator|::
name|InsertAtCurrent
operator|<<
literal|2
operator|<<
name|input
operator|<<
name|fiveAtCurrentThird
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"AtCurrent-FiveInitial-LastCurrent"
argument_list|)
operator|<<
name|fiveEntries
operator|<<
name|QComboBox
operator|::
name|InsertAtCurrent
operator|<<
literal|4
operator|<<
name|input
operator|<<
name|fiveAtCurrentLast
expr_stmt|;
block|}
block|{
name|QStringList
name|initialAtBottom
argument_list|(
literal|"insert"
argument_list|)
decl_stmt|;
name|QStringList
name|oneAtBottom
decl_stmt|;
name|oneAtBottom
operator|<<
literal|"One"
operator|<<
literal|"insert"
expr_stmt|;
name|QStringList
name|fiveAtBottom
decl_stmt|;
name|fiveAtBottom
operator|<<
literal|"One"
operator|<<
literal|"Two"
operator|<<
literal|"Three"
operator|<<
literal|"Four"
operator|<<
literal|"Five"
operator|<<
literal|"insert"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"AtBottom-NoInitial"
argument_list|)
operator|<<
name|initial
operator|<<
name|QComboBox
operator|::
name|InsertAtBottom
operator|<<
literal|0
operator|<<
name|input
operator|<<
name|initialAtBottom
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"AtBottom-OneInitial"
argument_list|)
operator|<<
name|oneEntry
operator|<<
name|QComboBox
operator|::
name|InsertAtBottom
operator|<<
literal|0
operator|<<
name|input
operator|<<
name|oneAtBottom
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"AtBottom-FiveInitial-FirstCurrent"
argument_list|)
operator|<<
name|fiveEntries
operator|<<
name|QComboBox
operator|::
name|InsertAtBottom
operator|<<
literal|0
operator|<<
name|input
operator|<<
name|fiveAtBottom
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"AtBottom-FiveInitial-ThirdCurrent"
argument_list|)
operator|<<
name|fiveEntries
operator|<<
name|QComboBox
operator|::
name|InsertAtBottom
operator|<<
literal|2
operator|<<
name|input
operator|<<
name|fiveAtBottom
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"AtBottom-FiveInitial-LastCurrent"
argument_list|)
operator|<<
name|fiveEntries
operator|<<
name|QComboBox
operator|::
name|InsertAtBottom
operator|<<
literal|4
operator|<<
name|input
operator|<<
name|fiveAtBottom
expr_stmt|;
block|}
block|{
name|QStringList
name|initialAfterCurrent
argument_list|(
literal|"insert"
argument_list|)
decl_stmt|;
name|QStringList
name|oneAfterCurrent
decl_stmt|;
name|oneAfterCurrent
operator|<<
literal|"One"
operator|<<
literal|"insert"
expr_stmt|;
name|QStringList
name|fiveAfterCurrentFirst
decl_stmt|;
name|fiveAfterCurrentFirst
operator|<<
literal|"One"
operator|<<
literal|"insert"
operator|<<
literal|"Two"
operator|<<
literal|"Three"
operator|<<
literal|"Four"
operator|<<
literal|"Five"
expr_stmt|;
name|QStringList
name|fiveAfterCurrentThird
decl_stmt|;
name|fiveAfterCurrentThird
operator|<<
literal|"One"
operator|<<
literal|"Two"
operator|<<
literal|"Three"
operator|<<
literal|"insert"
operator|<<
literal|"Four"
operator|<<
literal|"Five"
expr_stmt|;
name|QStringList
name|fiveAfterCurrentLast
decl_stmt|;
name|fiveAfterCurrentLast
operator|<<
literal|"One"
operator|<<
literal|"Two"
operator|<<
literal|"Three"
operator|<<
literal|"Four"
operator|<<
literal|"Five"
operator|<<
literal|"insert"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"AfterCurrent-NoInitial"
argument_list|)
operator|<<
name|initial
operator|<<
name|QComboBox
operator|::
name|InsertAfterCurrent
operator|<<
literal|0
operator|<<
name|input
operator|<<
name|initialAfterCurrent
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"AfterCurrent-OneInitial"
argument_list|)
operator|<<
name|oneEntry
operator|<<
name|QComboBox
operator|::
name|InsertAfterCurrent
operator|<<
literal|0
operator|<<
name|input
operator|<<
name|oneAfterCurrent
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"AfterCurrent-FiveInitial-FirstCurrent"
argument_list|)
operator|<<
name|fiveEntries
operator|<<
name|QComboBox
operator|::
name|InsertAfterCurrent
operator|<<
literal|0
operator|<<
name|input
operator|<<
name|fiveAfterCurrentFirst
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"AfterCurrent-FiveInitial-ThirdCurrent"
argument_list|)
operator|<<
name|fiveEntries
operator|<<
name|QComboBox
operator|::
name|InsertAfterCurrent
operator|<<
literal|2
operator|<<
name|input
operator|<<
name|fiveAfterCurrentThird
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"AfterCurrent-FiveInitial-LastCurrent"
argument_list|)
operator|<<
name|fiveEntries
operator|<<
name|QComboBox
operator|::
name|InsertAfterCurrent
operator|<<
literal|4
operator|<<
name|input
operator|<<
name|fiveAfterCurrentLast
expr_stmt|;
block|}
block|{
name|QStringList
name|initialBeforeCurrent
argument_list|(
literal|"insert"
argument_list|)
decl_stmt|;
name|QStringList
name|oneBeforeCurrent
decl_stmt|;
name|oneBeforeCurrent
operator|<<
literal|"insert"
operator|<<
literal|"One"
expr_stmt|;
name|QStringList
name|fiveBeforeCurrentFirst
decl_stmt|;
name|fiveBeforeCurrentFirst
operator|<<
literal|"insert"
operator|<<
literal|"One"
operator|<<
literal|"Two"
operator|<<
literal|"Three"
operator|<<
literal|"Four"
operator|<<
literal|"Five"
expr_stmt|;
name|QStringList
name|fiveBeforeCurrentThird
decl_stmt|;
name|fiveBeforeCurrentThird
operator|<<
literal|"One"
operator|<<
literal|"Two"
operator|<<
literal|"insert"
operator|<<
literal|"Three"
operator|<<
literal|"Four"
operator|<<
literal|"Five"
expr_stmt|;
name|QStringList
name|fiveBeforeCurrentLast
decl_stmt|;
name|fiveBeforeCurrentLast
operator|<<
literal|"One"
operator|<<
literal|"Two"
operator|<<
literal|"Three"
operator|<<
literal|"Four"
operator|<<
literal|"insert"
operator|<<
literal|"Five"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BeforeCurrent-NoInitial"
argument_list|)
operator|<<
name|initial
operator|<<
name|QComboBox
operator|::
name|InsertBeforeCurrent
operator|<<
literal|0
operator|<<
name|input
operator|<<
name|initialBeforeCurrent
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BeforeCurrent-OneInitial"
argument_list|)
operator|<<
name|oneEntry
operator|<<
name|QComboBox
operator|::
name|InsertBeforeCurrent
operator|<<
literal|0
operator|<<
name|input
operator|<<
name|oneBeforeCurrent
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BeforeCurrent-FiveInitial-FirstCurrent"
argument_list|)
operator|<<
name|fiveEntries
operator|<<
name|QComboBox
operator|::
name|InsertBeforeCurrent
operator|<<
literal|0
operator|<<
name|input
operator|<<
name|fiveBeforeCurrentFirst
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BeforeCurrent-FiveInitial-ThirdCurrent"
argument_list|)
operator|<<
name|fiveEntries
operator|<<
name|QComboBox
operator|::
name|InsertBeforeCurrent
operator|<<
literal|2
operator|<<
name|input
operator|<<
name|fiveBeforeCurrentThird
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"BeforeCurrent-FiveInitial-LastCurrent"
argument_list|)
operator|<<
name|fiveEntries
operator|<<
name|QComboBox
operator|::
name|InsertBeforeCurrent
operator|<<
literal|4
operator|<<
name|input
operator|<<
name|fiveBeforeCurrentLast
expr_stmt|;
block|}
block|{
name|oneEntry
operator|.
name|clear
argument_list|()
expr_stmt|;
name|oneEntry
operator|<<
literal|"foobar"
expr_stmt|;
name|fiveEntries
operator|.
name|clear
argument_list|()
expr_stmt|;
name|fiveEntries
operator|<<
literal|"bar"
operator|<<
literal|"foo"
operator|<<
literal|"initial"
operator|<<
literal|"Item"
operator|<<
literal|"stamp"
expr_stmt|;
name|QStringList
name|initialAlphabetically
argument_list|(
literal|"insert"
argument_list|)
decl_stmt|;
name|QStringList
name|oneAlphabetically
decl_stmt|;
name|oneAlphabetically
operator|<<
literal|"foobar"
operator|<<
literal|"insert"
expr_stmt|;
name|QStringList
name|fiveAlphabetically
decl_stmt|;
name|fiveAlphabetically
operator|<<
literal|"bar"
operator|<<
literal|"foo"
operator|<<
literal|"initial"
operator|<<
literal|"insert"
operator|<<
literal|"Item"
operator|<<
literal|"stamp"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Alphabetically-NoInitial"
argument_list|)
operator|<<
name|initial
operator|<<
name|QComboBox
operator|::
name|InsertAlphabetically
operator|<<
literal|0
operator|<<
name|input
operator|<<
name|initialAlphabetically
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Alphabetically-OneInitial"
argument_list|)
operator|<<
name|oneEntry
operator|<<
name|QComboBox
operator|::
name|InsertAlphabetically
operator|<<
literal|0
operator|<<
name|input
operator|<<
name|oneAlphabetically
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Alphabetically-FiveInitial-FirstCurrent"
argument_list|)
operator|<<
name|fiveEntries
operator|<<
name|QComboBox
operator|::
name|InsertAlphabetically
operator|<<
literal|0
operator|<<
name|input
operator|<<
name|fiveAlphabetically
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Alphabetically-FiveInitial-ThirdCurrent"
argument_list|)
operator|<<
name|fiveEntries
operator|<<
name|QComboBox
operator|::
name|InsertAlphabetically
operator|<<
literal|2
operator|<<
name|input
operator|<<
name|fiveAlphabetically
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Alphabetically-FiveInitial-LastCurrent"
argument_list|)
operator|<<
name|fiveEntries
operator|<<
name|QComboBox
operator|::
name|InsertAlphabetically
operator|<<
literal|4
operator|<<
name|input
operator|<<
name|fiveAlphabetically
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|insertPolicy
name|void
name|tst_QComboBox
operator|::
name|insertPolicy
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|initialEntries
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QComboBox
operator|::
name|InsertPolicy
argument_list|,
name|insertPolicy
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|currentIndex
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|userInput
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|clear
argument_list|()
expr_stmt|;
name|testWidget
operator|->
name|setInsertPolicy
argument_list|(
name|insertPolicy
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|addItems
argument_list|(
name|initialEntries
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setEditable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|initialEntries
operator|.
name|count
argument_list|()
operator|>
literal|0
condition|)
name|testWidget
operator|->
name|setCurrentIndex
argument_list|(
name|currentIndex
argument_list|)
expr_stmt|;
comment|// clear
name|QTest
operator|::
name|mouseDClick
argument_list|(
name|testWidget
operator|->
name|lineEdit
argument_list|()
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
operator|->
name|lineEdit
argument_list|()
argument_list|,
name|Qt
operator|::
name|Key_Delete
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClicks
argument_list|(
name|testWidget
operator|->
name|lineEdit
argument_list|()
argument_list|,
name|userInput
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
operator|->
name|lineEdit
argument_list|()
argument_list|,
name|Qt
operator|::
name|Key_Return
argument_list|)
expr_stmt|;
comment|// First check that there is the right number of entries, or
comment|// we may unwittingly pass
name|QVERIFY
argument_list|(
operator|(
name|int
operator|)
name|result
operator|.
name|count
argument_list|()
operator|==
name|testWidget
operator|->
name|count
argument_list|()
argument_list|)
expr_stmt|;
comment|// No need to compare if there are no strings to compare
if|if
condition|(
name|result
operator|.
name|count
argument_list|()
operator|>
literal|0
condition|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testWidget
operator|->
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|itemText
argument_list|(
name|i
argument_list|)
argument_list|,
name|result
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|// Apps running with valgrind are not fast enough.
end_comment
begin_function
DECL|function|virtualAutocompletion
name|void
name|tst_QComboBox
operator|::
name|virtualAutocompletion
parameter_list|()
block|{
name|testWidget
operator|->
name|clear
argument_list|()
expr_stmt|;
name|testWidget
operator|->
name|setAutoCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|addItem
argument_list|(
literal|"Foo"
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|addItem
argument_list|(
literal|"Bar"
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|addItem
argument_list|(
literal|"Boat"
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|addItem
argument_list|(
literal|"Boost"
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|clearEditText
argument_list|()
expr_stmt|;
comment|// We need to set the keyboard input interval to a higher value
comment|// as the processEvent() call takes too much time, so it restarts
comment|// the keyboard search then
if|#
directive|if
name|defined
argument_list|(
name|QT_ARCH_ARM
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_ARCH_MIPS
argument_list|)
name|int
name|oldInterval
init|=
name|QApplication
operator|::
name|keyboardInputInterval
argument_list|()
decl_stmt|;
name|QApplication
operator|::
name|setKeyboardInputInterval
argument_list|(
literal|1500
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// NOTE:
comment|// Cannot use keyClick for this test, as it simulates keyclicks too well
comment|// The virtual keyboards we're trying to catch here, do not perform that
comment|// well, and send a keypress& keyrelease right after each other.
comment|// This provokes the actual error, as there's no events in between to do
comment|// the text completion.
name|QKeyEvent
name|kp1
argument_list|(
name|QEvent
operator|::
name|KeyPress
argument_list|,
name|Qt
operator|::
name|Key_B
argument_list|,
literal|0
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|QKeyEvent
name|kr1
argument_list|(
name|QEvent
operator|::
name|KeyRelease
argument_list|,
name|Qt
operator|::
name|Key_B
argument_list|,
literal|0
argument_list|,
literal|"b"
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|testWidget
argument_list|,
operator|&
name|kp1
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|testWidget
argument_list|,
operator|&
name|kr1
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
comment|// Process events to trigger autocompletion
name|QTRY_VERIFY
argument_list|(
name|testWidget
operator|->
name|currentIndex
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QKeyEvent
name|kp2
argument_list|(
name|QEvent
operator|::
name|KeyPress
argument_list|,
name|Qt
operator|::
name|Key_O
argument_list|,
literal|0
argument_list|,
literal|"o"
argument_list|)
decl_stmt|;
name|QKeyEvent
name|kr2
argument_list|(
name|QEvent
operator|::
name|KeyRelease
argument_list|,
name|Qt
operator|::
name|Key_O
argument_list|,
literal|0
argument_list|,
literal|"o"
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|testWidget
argument_list|,
operator|&
name|kp2
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|testWidget
argument_list|,
operator|&
name|kr2
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
comment|// Process events to trigger autocompletion
name|QTRY_COMPARE
argument_list|(
name|testWidget
operator|->
name|currentIndex
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|testWidget
argument_list|,
operator|&
name|kp2
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
name|testWidget
argument_list|,
operator|&
name|kr2
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
comment|// Process events to trigger autocompletion
name|QTRY_COMPARE
argument_list|(
name|testWidget
operator|->
name|currentIndex
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QT_ARCH_ARM
argument_list|)
operator|||
name|defined
argument_list|(
name|QT_ARCH_MIPS
argument_list|)
name|QApplication
operator|::
name|setKeyboardInputInterval
argument_list|(
name|oldInterval
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|autoCompletionCaseSensitivity
name|void
name|tst_QComboBox
operator|::
name|autoCompletionCaseSensitivity
parameter_list|()
block|{
comment|//we have put the focus because the completer
comment|//is only used when the widget actually has the focus
name|testWidget
operator|->
name|setFocus
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|setActiveWindow
argument_list|(
name|testWidget
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|qApp
operator|->
name|focusWidget
argument_list|()
argument_list|,
operator|(
name|QWidget
operator|*
operator|)
name|testWidget
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|clear
argument_list|()
expr_stmt|;
name|testWidget
operator|->
name|setAutoCompletion
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|addItem
argument_list|(
literal|"Cow"
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|addItem
argument_list|(
literal|"irrelevant1"
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|addItem
argument_list|(
literal|"aww"
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|addItem
argument_list|(
literal|"A*"
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|addItem
argument_list|(
literal|"irrelevant2"
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|addItem
argument_list|(
literal|"aBCDEF"
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|addItem
argument_list|(
literal|"irrelevant3"
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|addItem
argument_list|(
literal|"abcdef"
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|addItem
argument_list|(
literal|"abCdef"
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setEditable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
comment|// case insensitive
name|testWidget
operator|->
name|clearEditText
argument_list|()
expr_stmt|;
name|QSignalSpy
name|spyReturn
argument_list|(
name|testWidget
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|testWidget
operator|->
name|setAutoCompletionCaseSensitivity
argument_list|(
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|autoCompletionCaseSensitivity
argument_list|()
operator|==
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
operator|->
name|lineEdit
argument_list|()
argument_list|,
name|Qt
operator|::
name|Key_A
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|currentText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"aww"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyReturn
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
operator|->
name|lineEdit
argument_list|()
argument_list|,
name|Qt
operator|::
name|Key_B
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
comment|// autocompletions preserve userkey-case from 4.2
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|currentText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"abCDEF"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyReturn
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
operator|->
name|lineEdit
argument_list|()
argument_list|,
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|currentText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"aBCDEF"
argument_list|)
argument_list|)
expr_stmt|;
comment|// case restored to item's case
name|QCOMPARE
argument_list|(
name|spyReturn
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|clearEditText
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
operator|->
name|lineEdit
argument_list|()
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|currentText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"cow"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
operator|->
name|lineEdit
argument_list|()
argument_list|,
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|currentText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Cow"
argument_list|)
argument_list|)
expr_stmt|;
comment|// case restored to item's case
name|testWidget
operator|->
name|clearEditText
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
operator|->
name|lineEdit
argument_list|()
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
operator|->
name|lineEdit
argument_list|()
argument_list|,
literal|'*'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|currentText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"a*"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
operator|->
name|lineEdit
argument_list|()
argument_list|,
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|currentText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"A*"
argument_list|)
argument_list|)
expr_stmt|;
comment|// case sensitive
name|testWidget
operator|->
name|clearEditText
argument_list|()
expr_stmt|;
name|testWidget
operator|->
name|setAutoCompletionCaseSensitivity
argument_list|(
name|Qt
operator|::
name|CaseSensitive
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|autoCompletionCaseSensitivity
argument_list|()
operator|==
name|Qt
operator|::
name|CaseSensitive
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
operator|->
name|lineEdit
argument_list|()
argument_list|,
name|Qt
operator|::
name|Key_A
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|currentText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"aww"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
operator|->
name|lineEdit
argument_list|()
argument_list|,
name|Qt
operator|::
name|Key_B
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|currentText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"abcdef"
argument_list|)
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setCurrentIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// to reset the completion's "start"
name|testWidget
operator|->
name|clearEditText
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
operator|->
name|lineEdit
argument_list|()
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
operator|->
name|lineEdit
argument_list|()
argument_list|,
literal|'b'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|currentText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"abcdef"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
operator|->
name|lineEdit
argument_list|()
argument_list|,
literal|'C'
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|currentText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"abCdef"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
operator|->
name|lineEdit
argument_list|()
argument_list|,
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|currentText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"abCdef"
argument_list|)
argument_list|)
expr_stmt|;
comment|// case restored to item's case
name|testWidget
operator|->
name|clearEditText
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
operator|->
name|lineEdit
argument_list|()
argument_list|,
literal|'c'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|currentText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
operator|->
name|lineEdit
argument_list|()
argument_list|,
name|Qt
operator|::
name|Key_Backspace
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
operator|->
name|lineEdit
argument_list|()
argument_list|,
literal|'C'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|currentText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Cow"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
operator|->
name|lineEdit
argument_list|()
argument_list|,
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|currentText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Cow"
argument_list|)
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|clearEditText
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
operator|->
name|lineEdit
argument_list|()
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
operator|->
name|lineEdit
argument_list|()
argument_list|,
literal|'*'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|currentText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"a*"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
operator|->
name|lineEdit
argument_list|()
argument_list|,
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|currentText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"a*"
argument_list|)
argument_list|)
expr_stmt|;
comment|// A* not matched
block|}
end_function
begin_function
DECL|function|hide
name|void
name|tst_QComboBox
operator|::
name|hide
parameter_list|()
block|{
name|testWidget
operator|->
name|addItem
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|showPopup
argument_list|()
expr_stmt|;
comment|//allow combobox effect to complete
name|QTRY_VERIFY
argument_list|(
name|testWidget
operator|->
name|view
argument_list|()
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|testWidget
operator|->
name|view
argument_list|()
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|hidePopup
argument_list|()
expr_stmt|;
comment|//allow combobox effect to complete
name|QTRY_VERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|view
argument_list|()
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|hide
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|testWidget
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|currentIndex_data
name|void
name|tst_QComboBox
operator|::
name|currentIndex_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"initialItems"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"setCurrentIndex"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"removeIndex"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"insertIndex"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"insertText"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedCurrentIndex"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"expectedCurrentText"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedSignalCount"
argument_list|)
expr_stmt|;
name|QStringList
name|initialItems
decl_stmt|;
name|int
name|setCurrentIndex
decl_stmt|;
name|int
name|removeIndex
decl_stmt|;
name|int
name|insertIndex
decl_stmt|;
name|QString
name|insertText
decl_stmt|;
name|int
name|expectedCurrentIndex
decl_stmt|;
name|QString
name|expectedCurrentText
decl_stmt|;
name|int
name|expectedSignalCount
decl_stmt|;
block|{
name|initialItems
operator|.
name|clear
argument_list|()
expr_stmt|;
name|initialItems
operator|<<
literal|"foo"
operator|<<
literal|"bar"
expr_stmt|;
name|setCurrentIndex
operator|=
operator|-
literal|2
expr_stmt|;
name|removeIndex
operator|=
operator|-
literal|1
expr_stmt|;
name|insertIndex
operator|=
operator|-
literal|1
expr_stmt|;
name|insertText
operator|=
literal|""
expr_stmt|;
name|expectedCurrentIndex
operator|=
literal|0
expr_stmt|;
name|expectedCurrentText
operator|=
literal|"foo"
expr_stmt|;
name|expectedSignalCount
operator|=
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"first added item is set to current if there is no current"
argument_list|)
operator|<<
name|initialItems
operator|<<
name|setCurrentIndex
operator|<<
name|removeIndex
operator|<<
name|insertIndex
operator|<<
name|insertText
operator|<<
name|expectedCurrentIndex
operator|<<
name|expectedCurrentText
operator|<<
name|expectedSignalCount
expr_stmt|;
block|}
block|{
name|initialItems
operator|.
name|clear
argument_list|()
expr_stmt|;
name|initialItems
operator|<<
literal|"foo"
operator|<<
literal|"bar"
expr_stmt|;
name|setCurrentIndex
operator|=
literal|1
expr_stmt|;
name|removeIndex
operator|=
operator|-
literal|1
expr_stmt|;
name|insertIndex
operator|=
operator|-
literal|1
expr_stmt|;
name|insertText
operator|=
literal|""
expr_stmt|;
name|expectedCurrentIndex
operator|=
literal|1
expr_stmt|;
name|expectedCurrentText
operator|=
literal|"bar"
expr_stmt|;
name|expectedSignalCount
operator|=
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"check that setting the index works"
argument_list|)
operator|<<
name|initialItems
operator|<<
name|setCurrentIndex
operator|<<
name|removeIndex
operator|<<
name|insertIndex
operator|<<
name|insertText
operator|<<
name|expectedCurrentIndex
operator|<<
name|expectedCurrentText
operator|<<
name|expectedSignalCount
expr_stmt|;
block|}
block|{
name|initialItems
operator|.
name|clear
argument_list|()
expr_stmt|;
name|initialItems
operator|<<
literal|"foo"
operator|<<
literal|"bar"
expr_stmt|;
name|setCurrentIndex
operator|=
operator|-
literal|1
expr_stmt|;
comment|// will invalidate the currentIndex
name|removeIndex
operator|=
operator|-
literal|1
expr_stmt|;
name|insertIndex
operator|=
operator|-
literal|1
expr_stmt|;
name|insertText
operator|=
literal|""
expr_stmt|;
name|expectedCurrentIndex
operator|=
operator|-
literal|1
expr_stmt|;
name|expectedCurrentText
operator|=
literal|""
expr_stmt|;
name|expectedSignalCount
operator|=
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"check that isetting the index to -1 works"
argument_list|)
operator|<<
name|initialItems
operator|<<
name|setCurrentIndex
operator|<<
name|removeIndex
operator|<<
name|insertIndex
operator|<<
name|insertText
operator|<<
name|expectedCurrentIndex
operator|<<
name|expectedCurrentText
operator|<<
name|expectedSignalCount
expr_stmt|;
block|}
block|{
name|initialItems
operator|.
name|clear
argument_list|()
expr_stmt|;
name|initialItems
operator|<<
literal|"foo"
expr_stmt|;
name|setCurrentIndex
operator|=
literal|0
expr_stmt|;
name|removeIndex
operator|=
literal|0
expr_stmt|;
name|insertIndex
operator|=
operator|-
literal|1
expr_stmt|;
name|insertText
operator|=
literal|""
expr_stmt|;
name|expectedCurrentIndex
operator|=
operator|-
literal|1
expr_stmt|;
name|expectedCurrentText
operator|=
literal|""
expr_stmt|;
name|expectedSignalCount
operator|=
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"check that current index is invalid when removing the only item"
argument_list|)
operator|<<
name|initialItems
operator|<<
name|setCurrentIndex
operator|<<
name|removeIndex
operator|<<
name|insertIndex
operator|<<
name|insertText
operator|<<
name|expectedCurrentIndex
operator|<<
name|expectedCurrentText
operator|<<
name|expectedSignalCount
expr_stmt|;
block|}
block|{
name|initialItems
operator|.
name|clear
argument_list|()
expr_stmt|;
name|initialItems
operator|<<
literal|"foo"
operator|<<
literal|"bar"
expr_stmt|;
name|setCurrentIndex
operator|=
literal|1
expr_stmt|;
name|removeIndex
operator|=
literal|0
expr_stmt|;
name|insertIndex
operator|=
operator|-
literal|1
expr_stmt|;
name|insertText
operator|=
literal|""
expr_stmt|;
name|expectedCurrentIndex
operator|=
literal|0
expr_stmt|;
name|expectedCurrentText
operator|=
literal|"bar"
expr_stmt|;
name|expectedSignalCount
operator|=
literal|3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"check that the current index follows the item when removing an item above"
argument_list|)
operator|<<
name|initialItems
operator|<<
name|setCurrentIndex
operator|<<
name|removeIndex
operator|<<
name|insertIndex
operator|<<
name|insertText
operator|<<
name|expectedCurrentIndex
operator|<<
name|expectedCurrentText
operator|<<
name|expectedSignalCount
expr_stmt|;
block|}
block|{
name|initialItems
operator|.
name|clear
argument_list|()
expr_stmt|;
name|initialItems
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"baz"
expr_stmt|;
name|setCurrentIndex
operator|=
literal|1
expr_stmt|;
name|removeIndex
operator|=
literal|1
expr_stmt|;
name|insertIndex
operator|=
operator|-
literal|1
expr_stmt|;
name|insertText
operator|=
literal|""
expr_stmt|;
name|expectedCurrentIndex
operator|=
literal|1
expr_stmt|;
name|expectedCurrentText
operator|=
literal|"baz"
expr_stmt|;
name|expectedSignalCount
operator|=
literal|3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"check that the current index uses the next item if current is removed"
argument_list|)
operator|<<
name|initialItems
operator|<<
name|setCurrentIndex
operator|<<
name|removeIndex
operator|<<
name|insertIndex
operator|<<
name|insertText
operator|<<
name|expectedCurrentIndex
operator|<<
name|expectedCurrentText
operator|<<
name|expectedSignalCount
expr_stmt|;
block|}
block|{
name|initialItems
operator|.
name|clear
argument_list|()
expr_stmt|;
name|initialItems
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"baz"
expr_stmt|;
name|setCurrentIndex
operator|=
literal|2
expr_stmt|;
name|removeIndex
operator|=
literal|2
expr_stmt|;
name|insertIndex
operator|=
operator|-
literal|1
expr_stmt|;
name|insertText
operator|=
literal|""
expr_stmt|;
name|expectedCurrentIndex
operator|=
literal|1
expr_stmt|;
name|expectedCurrentText
operator|=
literal|"bar"
expr_stmt|;
name|expectedSignalCount
operator|=
literal|3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"check that the current index is moved to the one before if current is removed"
argument_list|)
operator|<<
name|initialItems
operator|<<
name|setCurrentIndex
operator|<<
name|removeIndex
operator|<<
name|insertIndex
operator|<<
name|insertText
operator|<<
name|expectedCurrentIndex
operator|<<
name|expectedCurrentText
operator|<<
name|expectedSignalCount
expr_stmt|;
block|}
block|{
name|initialItems
operator|.
name|clear
argument_list|()
expr_stmt|;
name|initialItems
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"baz"
expr_stmt|;
name|setCurrentIndex
operator|=
literal|1
expr_stmt|;
name|removeIndex
operator|=
literal|2
expr_stmt|;
name|insertIndex
operator|=
operator|-
literal|1
expr_stmt|;
name|insertText
operator|=
literal|""
expr_stmt|;
name|expectedCurrentIndex
operator|=
literal|1
expr_stmt|;
name|expectedCurrentText
operator|=
literal|"bar"
expr_stmt|;
name|expectedSignalCount
operator|=
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"check that the current index is unchanged if you remove an item after"
argument_list|)
operator|<<
name|initialItems
operator|<<
name|setCurrentIndex
operator|<<
name|removeIndex
operator|<<
name|insertIndex
operator|<<
name|insertText
operator|<<
name|expectedCurrentIndex
operator|<<
name|expectedCurrentText
operator|<<
name|expectedSignalCount
expr_stmt|;
block|}
block|{
name|initialItems
operator|.
name|clear
argument_list|()
expr_stmt|;
name|initialItems
operator|<<
literal|"foo"
operator|<<
literal|"bar"
expr_stmt|;
name|setCurrentIndex
operator|=
literal|1
expr_stmt|;
name|removeIndex
operator|=
operator|-
literal|1
expr_stmt|;
name|insertIndex
operator|=
literal|0
expr_stmt|;
name|insertText
operator|=
literal|"baz"
expr_stmt|;
name|expectedCurrentIndex
operator|=
literal|2
expr_stmt|;
name|expectedCurrentText
operator|=
literal|"bar"
expr_stmt|;
name|expectedSignalCount
operator|=
literal|3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"check that the current index follows the item if you insert before current"
argument_list|)
operator|<<
name|initialItems
operator|<<
name|setCurrentIndex
operator|<<
name|removeIndex
operator|<<
name|insertIndex
operator|<<
name|insertText
operator|<<
name|expectedCurrentIndex
operator|<<
name|expectedCurrentText
operator|<<
name|expectedSignalCount
expr_stmt|;
block|}
block|{
name|initialItems
operator|.
name|clear
argument_list|()
expr_stmt|;
name|initialItems
operator|<<
literal|"foo"
expr_stmt|;
name|setCurrentIndex
operator|=
literal|0
expr_stmt|;
name|removeIndex
operator|=
operator|-
literal|1
expr_stmt|;
name|insertIndex
operator|=
literal|0
expr_stmt|;
name|insertText
operator|=
literal|"bar"
expr_stmt|;
name|expectedCurrentIndex
operator|=
literal|1
expr_stmt|;
name|expectedCurrentText
operator|=
literal|"foo"
expr_stmt|;
name|expectedSignalCount
operator|=
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"check that the current index follows the item if you insert on the current"
argument_list|)
operator|<<
name|initialItems
operator|<<
name|setCurrentIndex
operator|<<
name|removeIndex
operator|<<
name|insertIndex
operator|<<
name|insertText
operator|<<
name|expectedCurrentIndex
operator|<<
name|expectedCurrentText
operator|<<
name|expectedSignalCount
expr_stmt|;
block|}
block|{
name|initialItems
operator|.
name|clear
argument_list|()
expr_stmt|;
name|initialItems
operator|<<
literal|"foo"
expr_stmt|;
name|setCurrentIndex
operator|=
literal|0
expr_stmt|;
name|removeIndex
operator|=
operator|-
literal|1
expr_stmt|;
name|insertIndex
operator|=
literal|1
expr_stmt|;
name|insertText
operator|=
literal|"bar"
expr_stmt|;
name|expectedCurrentIndex
operator|=
literal|0
expr_stmt|;
name|expectedCurrentText
operator|=
literal|"foo"
expr_stmt|;
name|expectedSignalCount
operator|=
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"check that the current index stays the same if you insert after the current"
argument_list|)
operator|<<
name|initialItems
operator|<<
name|setCurrentIndex
operator|<<
name|removeIndex
operator|<<
name|insertIndex
operator|<<
name|insertText
operator|<<
name|expectedCurrentIndex
operator|<<
name|expectedCurrentText
operator|<<
name|expectedSignalCount
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|currentIndex
name|void
name|tst_QComboBox
operator|::
name|currentIndex
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|initialItems
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|setCurrentIndex
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|removeIndex
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|insertIndex
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|insertText
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expectedCurrentIndex
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|expectedCurrentText
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expectedSignalCount
argument_list|)
expr_stmt|;
comment|// test both editable/non-editable combobox
for|for
control|(
name|int
name|edit
init|=
literal|0
init|;
name|edit
operator|<
literal|2
condition|;
operator|++
name|edit
control|)
block|{
name|testWidget
operator|->
name|clear
argument_list|()
expr_stmt|;
name|testWidget
operator|->
name|setEditable
argument_list|(
name|edit
condition|?
literal|true
else|:
literal|false
argument_list|)
expr_stmt|;
if|if
condition|(
name|edit
condition|)
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|lineEdit
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify it is empty, has no current index and no current text
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|currentIndex
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testWidget
operator|->
name|currentText
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// spy on currentIndexChanged
name|QSignalSpy
name|indexChangedInt
argument_list|(
name|testWidget
argument_list|,
name|SIGNAL
argument_list|(
name|currentIndexChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|indexChangedString
argument_list|(
name|testWidget
argument_list|,
name|SIGNAL
argument_list|(
name|currentIndexChanged
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// stuff items into it
foreach|foreach
control|(
name|QString
name|text
decl|,
name|initialItems
control|)
block|{
name|testWidget
operator|->
name|addItem
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|count
argument_list|()
argument_list|,
name|initialItems
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
comment|// set current index, remove and/or insert
if|if
condition|(
name|setCurrentIndex
operator|>=
operator|-
literal|1
condition|)
block|{
name|testWidget
operator|->
name|setCurrentIndex
argument_list|(
name|setCurrentIndex
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|currentIndex
argument_list|()
argument_list|,
name|setCurrentIndex
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|removeIndex
operator|>=
literal|0
condition|)
name|testWidget
operator|->
name|removeItem
argument_list|(
name|removeIndex
argument_list|)
expr_stmt|;
if|if
condition|(
name|insertIndex
operator|>=
literal|0
condition|)
name|testWidget
operator|->
name|insertItem
argument_list|(
name|insertIndex
argument_list|,
name|insertText
argument_list|)
expr_stmt|;
comment|// compare with expected index and text
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|currentIndex
argument_list|()
argument_list|,
name|expectedCurrentIndex
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|currentText
argument_list|()
argument_list|,
name|expectedCurrentText
argument_list|)
expr_stmt|;
comment|// check that signal count is correct
name|QCOMPARE
argument_list|(
name|indexChangedInt
operator|.
name|count
argument_list|()
argument_list|,
name|expectedSignalCount
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|indexChangedString
operator|.
name|count
argument_list|()
argument_list|,
name|expectedSignalCount
argument_list|)
expr_stmt|;
comment|// compare with last sent signal values
if|if
condition|(
name|indexChangedInt
operator|.
name|count
argument_list|()
condition|)
name|QCOMPARE
argument_list|(
name|indexChangedInt
operator|.
name|at
argument_list|(
name|indexChangedInt
operator|.
name|count
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
name|testWidget
operator|->
name|currentIndex
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexChangedString
operator|.
name|count
argument_list|()
condition|)
name|QCOMPARE
argument_list|(
name|indexChangedString
operator|.
name|at
argument_list|(
name|indexChangedString
operator|.
name|count
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|testWidget
operator|->
name|currentText
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|edit
condition|)
block|{
name|testWidget
operator|->
name|setCurrentIndex
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setInsertPolicy
argument_list|(
name|QComboBox
operator|::
name|InsertAtBottom
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
literal|'b'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|currentText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"ab"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|currentIndex
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|int
name|numItems
init|=
name|testWidget
operator|->
name|count
argument_list|()
decl_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
name|Qt
operator|::
name|Key_Return
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|count
argument_list|()
argument_list|,
name|numItems
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|currentIndex
argument_list|()
argument_list|,
name|numItems
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setCurrentIndex
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
literal|'a'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
name|testWidget
argument_list|,
literal|'b'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|currentIndex
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|insertItems_data
name|void
name|tst_QComboBox
operator|::
name|insertItems_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"initialItems"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"insertedItems"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"insertIndex"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedIndex"
argument_list|)
expr_stmt|;
name|QStringList
name|initialItems
decl_stmt|;
name|QStringList
name|insertedItems
decl_stmt|;
name|initialItems
operator|<<
literal|"foo"
operator|<<
literal|"bar"
expr_stmt|;
name|insertedItems
operator|<<
literal|"mongo"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"prepend"
argument_list|)
operator|<<
name|initialItems
operator|<<
name|insertedItems
operator|<<
literal|0
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"prepend with negative value"
argument_list|)
operator|<<
name|initialItems
operator|<<
name|insertedItems
operator|<<
operator|-
literal|1
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append"
argument_list|)
operator|<<
name|initialItems
operator|<<
name|insertedItems
operator|<<
name|initialItems
operator|.
name|count
argument_list|()
operator|<<
name|initialItems
operator|.
name|count
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append with too high value"
argument_list|)
operator|<<
name|initialItems
operator|<<
name|insertedItems
operator|<<
literal|999
operator|<<
name|initialItems
operator|.
name|count
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert"
argument_list|)
operator|<<
name|initialItems
operator|<<
name|insertedItems
operator|<<
literal|1
operator|<<
literal|1
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insertItems
name|void
name|tst_QComboBox
operator|::
name|insertItems
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|initialItems
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|insertedItems
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|insertIndex
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expectedIndex
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|insertItems
argument_list|(
literal|0
argument_list|,
name|initialItems
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|count
argument_list|()
argument_list|,
name|initialItems
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|insertItems
argument_list|(
name|insertIndex
argument_list|,
name|insertedItems
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|count
argument_list|()
argument_list|,
name|initialItems
operator|.
name|count
argument_list|()
operator|+
name|insertedItems
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|insertedItems
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|itemText
argument_list|(
name|expectedIndex
operator|+
name|i
argument_list|)
argument_list|,
name|insertedItems
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insertItem_data
name|void
name|tst_QComboBox
operator|::
name|insertItem_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"initialItems"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"insertIndex"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"itemLabel"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedIndex"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"editable"
argument_list|)
expr_stmt|;
name|QStringList
name|initialItems
decl_stmt|;
name|initialItems
operator|<<
literal|"foo"
operator|<<
literal|"bar"
expr_stmt|;
for|for
control|(
name|int
name|e
init|=
literal|0
init|;
name|e
operator|<
literal|2
condition|;
name|e
operator|++
control|)
block|{
name|bool
name|editable
init|=
operator|(
name|e
operator|==
literal|0
operator|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Insert less then 0"
argument_list|)
operator|<<
name|initialItems
operator|<<
operator|-
literal|1
operator|<<
literal|"inserted"
operator|<<
literal|0
operator|<<
name|editable
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Insert at 0"
argument_list|)
operator|<<
name|initialItems
operator|<<
literal|0
operator|<<
literal|"inserted"
operator|<<
literal|0
operator|<<
name|editable
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Insert beyond count"
argument_list|)
operator|<<
name|initialItems
operator|<<
literal|3
operator|<<
literal|"inserted"
operator|<<
literal|2
operator|<<
name|editable
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Insert at count"
argument_list|)
operator|<<
name|initialItems
operator|<<
literal|2
operator|<<
literal|"inserted"
operator|<<
literal|2
operator|<<
name|editable
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Insert in the middle"
argument_list|)
operator|<<
name|initialItems
operator|<<
literal|1
operator|<<
literal|"inserted"
operator|<<
literal|1
operator|<<
name|editable
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|insertItem
name|void
name|tst_QComboBox
operator|::
name|insertItem
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|initialItems
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|insertIndex
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|itemLabel
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expectedIndex
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|editable
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|insertItems
argument_list|(
literal|0
argument_list|,
name|initialItems
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|count
argument_list|()
argument_list|,
name|initialItems
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setEditable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|editable
condition|)
name|testWidget
operator|->
name|setEditText
argument_list|(
literal|"FOO"
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|insertItem
argument_list|(
name|insertIndex
argument_list|,
name|itemLabel
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|count
argument_list|()
argument_list|,
name|initialItems
operator|.
name|count
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|itemText
argument_list|(
name|expectedIndex
argument_list|)
argument_list|,
name|itemLabel
argument_list|)
expr_stmt|;
if|if
condition|(
name|editable
condition|)
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|currentText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"FOO"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|insertOnCurrentIndex
name|void
name|tst_QComboBox
operator|::
name|insertOnCurrentIndex
parameter_list|()
block|{
name|testWidget
operator|->
name|setEditable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|addItem
argument_list|(
literal|"first item"
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setCurrentIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|insertItem
argument_list|(
literal|0
argument_list|,
literal|"second item"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|lineEdit
argument_list|()
operator|->
name|text
argument_list|()
argument_list|,
name|QString
operator|::
name|fromAscii
argument_list|(
literal|"first item"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|textpixmapdata_data
name|void
name|tst_QComboBox
operator|::
name|textpixmapdata_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"text"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|IconList
argument_list|>
argument_list|(
literal|"icons"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|VariantList
argument_list|>
argument_list|(
literal|"variant"
argument_list|)
expr_stmt|;
name|QStringList
name|text
decl_stmt|;
name|IconList
name|icon
decl_stmt|;
name|VariantList
name|variant
decl_stmt|;
block|{
name|text
operator|.
name|clear
argument_list|()
expr_stmt|;
name|icon
operator|.
name|clear
argument_list|()
expr_stmt|;
name|variant
operator|.
name|clear
argument_list|()
expr_stmt|;
name|text
operator|<<
literal|"foo"
operator|<<
literal|"bar"
expr_stmt|;
name|icon
operator|<<
name|QIcon
argument_list|()
operator|<<
name|QIcon
argument_list|()
expr_stmt|;
name|variant
operator|<<
name|QVariant
argument_list|()
operator|<<
name|QVariant
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"just text"
argument_list|)
operator|<<
name|text
operator|<<
name|icon
operator|<<
name|variant
expr_stmt|;
block|}
block|{
name|text
operator|.
name|clear
argument_list|()
expr_stmt|;
name|icon
operator|.
name|clear
argument_list|()
expr_stmt|;
name|variant
operator|.
name|clear
argument_list|()
expr_stmt|;
name|text
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|icon
operator|<<
name|QIcon
argument_list|(
name|QPixmap
argument_list|(
literal|"qtlogo.png"
argument_list|)
argument_list|)
operator|<<
name|QIcon
argument_list|(
name|QPixmap
argument_list|(
literal|"qtlogoinverted.png"
argument_list|)
argument_list|)
expr_stmt|;
name|variant
operator|<<
name|QVariant
argument_list|()
operator|<<
name|QVariant
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"just icons"
argument_list|)
operator|<<
name|text
operator|<<
name|icon
operator|<<
name|variant
expr_stmt|;
block|}
block|{
name|text
operator|.
name|clear
argument_list|()
expr_stmt|;
name|icon
operator|.
name|clear
argument_list|()
expr_stmt|;
name|variant
operator|.
name|clear
argument_list|()
expr_stmt|;
name|text
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|icon
operator|<<
name|QIcon
argument_list|()
operator|<<
name|QIcon
argument_list|()
expr_stmt|;
name|variant
operator|<<
literal|12
operator|<<
literal|"bingo"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"just user data"
argument_list|)
operator|<<
name|text
operator|<<
name|icon
operator|<<
name|variant
expr_stmt|;
block|}
block|{
name|text
operator|.
name|clear
argument_list|()
expr_stmt|;
name|icon
operator|.
name|clear
argument_list|()
expr_stmt|;
name|variant
operator|.
name|clear
argument_list|()
expr_stmt|;
name|text
operator|<<
literal|"foo"
operator|<<
literal|"bar"
expr_stmt|;
name|icon
operator|<<
name|QIcon
argument_list|(
name|QPixmap
argument_list|(
literal|"qtlogo.png"
argument_list|)
argument_list|)
operator|<<
name|QIcon
argument_list|(
name|QPixmap
argument_list|(
literal|"qtlogoinverted.png"
argument_list|)
argument_list|)
expr_stmt|;
name|variant
operator|<<
literal|12
operator|<<
literal|"bingo"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"text, icons and user data"
argument_list|)
operator|<<
name|text
operator|<<
name|icon
operator|<<
name|variant
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|textpixmapdata
name|void
name|tst_QComboBox
operator|::
name|textpixmapdata
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|text
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|IconList
argument_list|,
name|icons
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|VariantList
argument_list|,
name|variant
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|text
operator|.
name|count
argument_list|()
operator|==
name|icons
operator|.
name|count
argument_list|()
operator|&&
name|text
operator|.
name|count
argument_list|()
operator|==
name|variant
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|text
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|testWidget
operator|->
name|insertItem
argument_list|(
name|i
argument_list|,
name|text
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setItemIcon
argument_list|(
name|i
argument_list|,
name|icons
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setItemData
argument_list|(
name|i
argument_list|,
name|variant
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|Qt
operator|::
name|UserRole
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|count
argument_list|()
argument_list|,
name|text
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|text
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QIcon
name|icon
init|=
name|testWidget
operator|->
name|itemIcon
argument_list|(
name|i
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|icon
operator|.
name|serialNumber
argument_list|()
operator|==
name|icons
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|serialNumber
argument_list|()
argument_list|)
expr_stmt|;
name|QPixmap
name|original
init|=
name|icons
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|pixmap
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|QPixmap
name|pixmap
init|=
name|icon
operator|.
name|pixmap
argument_list|(
literal|1024
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|pixmap
operator|.
name|toImage
argument_list|()
operator|==
name|original
operator|.
name|toImage
argument_list|()
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|text
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|itemText
argument_list|(
name|i
argument_list|)
argument_list|,
name|text
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
comment|// ### we should test icons/pixmap as well, but I need to fix the api mismatch first
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|itemData
argument_list|(
name|i
argument_list|,
name|Qt
operator|::
name|UserRole
argument_list|)
argument_list|,
name|variant
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setCurrentIndex
name|void
name|tst_QComboBox
operator|::
name|setCurrentIndex
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|addItem
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|addItem
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|currentIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setCurrentIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|currentText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setCurrentIndex
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|currentText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setCurrentIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|currentText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|editTextChanged
name|void
name|tst_QComboBox
operator|::
name|editTextChanged
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|addItem
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|addItem
argument_list|(
literal|"bar"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// first we test non editable
name|testWidget
operator|->
name|setEditable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|isEditable
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// no signal should be sent when current is set to the same
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|currentIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|editTextCount
operator|=
literal|0
expr_stmt|;
name|editText
operator|.
name|clear
argument_list|()
expr_stmt|;
name|testWidget
operator|->
name|setCurrentIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|currentIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|editTextCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|editText
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// no signal should be sent when changing to other index because we are not editable
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|currentIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|editTextCount
operator|=
literal|0
expr_stmt|;
name|editText
operator|.
name|clear
argument_list|()
expr_stmt|;
name|testWidget
operator|->
name|setCurrentIndex
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|currentIndex
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|editTextCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|editText
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// now set to editable and reset current index
name|testWidget
operator|->
name|setEditable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|isEditable
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|setCurrentIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|// no signal should be sent when current is set to the same
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|currentIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|editTextCount
operator|=
literal|0
expr_stmt|;
name|editText
operator|.
name|clear
argument_list|()
expr_stmt|;
name|testWidget
operator|->
name|setCurrentIndex
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|currentIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|editTextCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|editText
operator|.
name|isEmpty
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// signal should be sent when changing to other index
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|currentIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|editTextCount
operator|=
literal|0
expr_stmt|;
name|editText
operator|.
name|clear
argument_list|()
expr_stmt|;
name|testWidget
operator|->
name|setCurrentIndex
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|currentIndex
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|editTextCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|editText
argument_list|,
name|QString
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
comment|// insert some keys and notice they are all signaled
name|editTextCount
operator|=
literal|0
expr_stmt|;
name|editText
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|keyClicks
argument_list|(
name|testWidget
argument_list|,
literal|"bingo"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|editTextCount
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|editText
argument_list|,
name|QString
argument_list|(
literal|"barbingo"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|onEditTextChanged
name|void
name|tst_QComboBox
operator|::
name|onEditTextChanged
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|editTextCount
operator|++
expr_stmt|;
name|editText
operator|=
name|text
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setModel
name|void
name|tst_QComboBox
operator|::
name|setModel
parameter_list|()
block|{
name|QComboBox
name|box
decl_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|currentIndex
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|box
operator|.
name|addItems
argument_list|(
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|currentIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|box
operator|.
name|setCurrentIndex
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|currentIndex
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// check that currentIndex is set to invalid
name|QAbstractItemModel
modifier|*
name|oldModel
init|=
name|box
operator|.
name|model
argument_list|()
decl_stmt|;
name|box
operator|.
name|setModel
argument_list|(
operator|new
name|QStandardItemModel
argument_list|(
operator|&
name|box
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|currentIndex
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|box
operator|.
name|model
argument_list|()
operator|!=
name|oldModel
argument_list|)
expr_stmt|;
comment|// check that currentIndex is set to first item
name|oldModel
operator|=
name|box
operator|.
name|model
argument_list|()
expr_stmt|;
name|box
operator|.
name|setModel
argument_list|(
operator|new
name|QStandardItemModel
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
operator|&
name|box
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|currentIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|box
operator|.
name|model
argument_list|()
operator|!=
name|oldModel
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|modelDeleted
name|void
name|tst_QComboBox
operator|::
name|modelDeleted
parameter_list|()
block|{
name|QComboBox
name|box
decl_stmt|;
name|QStandardItemModel
modifier|*
name|model
init|=
operator|new
name|QStandardItemModel
decl_stmt|;
name|box
operator|.
name|setModel
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|model
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
name|QAbstractItemModel
operator|*
argument_list|>
argument_list|(
name|model
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|model
expr_stmt|;
name|QVERIFY
argument_list|(
name|box
operator|.
name|model
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|findText
argument_list|(
literal|"bubu"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
operator|delete
name|box
operator|.
name|model
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|box
operator|.
name|model
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|box
operator|.
name|model
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|box
operator|.
name|model
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setMaxCount
name|void
name|tst_QComboBox
operator|::
name|setMaxCount
parameter_list|()
block|{
name|QStringList
name|items
decl_stmt|;
name|items
operator|<<
literal|"1"
operator|<<
literal|"2"
operator|<<
literal|"3"
operator|<<
literal|"4"
operator|<<
literal|"5"
expr_stmt|;
name|QComboBox
name|box
decl_stmt|;
name|box
operator|.
name|addItems
argument_list|(
name|items
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|count
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|box
operator|.
name|setMaxCount
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|count
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|itemText
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|itemText
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|itemText
argument_list|(
literal|2
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|itemText
argument_list|(
literal|3
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
comment|// appending should do nothing
name|box
operator|.
name|addItem
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|count
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|findText
argument_list|(
literal|"foo"
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// inserting one item at top should remove the last
name|box
operator|.
name|insertItem
argument_list|(
literal|0
argument_list|,
literal|"0"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|count
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|itemText
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|itemText
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|itemText
argument_list|(
literal|2
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|itemText
argument_list|(
literal|3
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
comment|// insert 5 items in a box with maxCount 4
name|box
operator|.
name|insertItems
argument_list|(
literal|0
argument_list|,
name|items
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|count
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|itemText
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|itemText
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|itemText
argument_list|(
literal|2
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|itemText
argument_list|(
literal|3
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
comment|// insert 5 items at pos 2. Make sure only two get inserted
name|QSignalSpy
name|spy
argument_list|(
name|box
operator|.
name|model
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|rowsInserted
argument_list|(
name|QModelIndex
argument_list|,
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|box
operator|.
name|insertItems
argument_list|(
literal|2
argument_list|,
name|items
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|count
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|itemText
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|itemText
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|itemText
argument_list|(
literal|2
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|itemText
argument_list|(
literal|3
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|.
name|insertItems
argument_list|(
literal|0
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|count
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|box
operator|.
name|setMaxCount
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|box
operator|.
name|addItem
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|box
operator|.
name|addItems
argument_list|(
name|items
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|convenienceViews
name|void
name|tst_QComboBox
operator|::
name|convenienceViews
parameter_list|()
block|{
comment|// QListWidget
name|QComboBox
name|listCombo
decl_stmt|;
name|QListWidget
modifier|*
name|list
init|=
operator|new
name|QListWidget
argument_list|()
decl_stmt|;
name|listCombo
operator|.
name|setModel
argument_list|(
name|list
operator|->
name|model
argument_list|()
argument_list|)
expr_stmt|;
name|listCombo
operator|.
name|setView
argument_list|(
name|list
argument_list|)
expr_stmt|;
comment|// add items
name|list
operator|->
name|addItem
argument_list|(
literal|"list0"
argument_list|)
expr_stmt|;
name|listCombo
operator|.
name|addItem
argument_list|(
literal|"list1"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|listCombo
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|listCombo
operator|.
name|itemText
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"list0"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|listCombo
operator|.
name|itemText
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"list1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// QTreeWidget
name|QComboBox
name|treeCombo
decl_stmt|;
name|QTreeWidget
modifier|*
name|tree
init|=
operator|new
name|QTreeWidget
argument_list|()
decl_stmt|;
name|tree
operator|->
name|setColumnCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|tree
operator|->
name|header
argument_list|()
operator|->
name|hide
argument_list|()
expr_stmt|;
name|treeCombo
operator|.
name|setModel
argument_list|(
name|tree
operator|->
name|model
argument_list|()
argument_list|)
expr_stmt|;
name|treeCombo
operator|.
name|setView
argument_list|(
name|tree
argument_list|)
expr_stmt|;
comment|// add items
name|tree
operator|->
name|addTopLevelItem
argument_list|(
operator|new
name|QTreeWidgetItem
argument_list|(
name|QStringList
argument_list|(
literal|"tree0"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|treeCombo
operator|.
name|addItem
argument_list|(
literal|"tree1"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|treeCombo
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|treeCombo
operator|.
name|itemText
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"tree0"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|treeCombo
operator|.
name|itemText
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"tree1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// QTableWidget
name|QComboBox
name|tableCombo
decl_stmt|;
name|QTableWidget
modifier|*
name|table
init|=
operator|new
name|QTableWidget
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
decl_stmt|;
name|table
operator|->
name|verticalHeader
argument_list|()
operator|->
name|hide
argument_list|()
expr_stmt|;
name|table
operator|->
name|horizontalHeader
argument_list|()
operator|->
name|hide
argument_list|()
expr_stmt|;
name|tableCombo
operator|.
name|setModel
argument_list|(
name|table
operator|->
name|model
argument_list|()
argument_list|)
expr_stmt|;
name|tableCombo
operator|.
name|setView
argument_list|(
name|table
argument_list|)
expr_stmt|;
comment|// add items
name|table
operator|->
name|setRowCount
argument_list|(
name|table
operator|->
name|rowCount
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|table
operator|->
name|setItem
argument_list|(
literal|0
argument_list|,
name|table
operator|->
name|rowCount
argument_list|()
operator|-
literal|1
argument_list|,
operator|new
name|QTableWidgetItem
argument_list|(
literal|"table0"
argument_list|)
argument_list|)
expr_stmt|;
name|tableCombo
operator|.
name|addItem
argument_list|(
literal|"table1"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tableCombo
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tableCombo
operator|.
name|itemText
argument_list|(
literal|0
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"table0"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tableCombo
operator|.
name|itemText
argument_list|(
literal|1
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"table1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|ReturnClass
class|class
name|ReturnClass
super|:
specifier|public
name|QWidget
block|{
name|Q_OBJECT
public|public:
DECL|function|ReturnClass
name|ReturnClass
parameter_list|(
name|QWidget
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QWidget
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|received
argument_list|(
literal|false
argument_list|)
block|{
name|QComboBox
modifier|*
name|box
init|=
operator|new
name|QComboBox
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|box
operator|->
name|setEditable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|edit
operator|=
name|box
operator|->
name|lineEdit
argument_list|()
expr_stmt|;
name|box
operator|->
name|setGeometry
argument_list|(
name|rect
argument_list|()
argument_list|)
expr_stmt|;
block|}
DECL|function|keyPressEvent
name|void
name|keyPressEvent
parameter_list|(
name|QKeyEvent
modifier|*
name|e
parameter_list|)
block|{
name|received
operator|=
operator|(
name|e
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Return
operator|||
name|e
operator|->
name|key
argument_list|()
operator|==
name|Qt
operator|::
name|Key_Enter
operator|)
expr_stmt|;
block|}
DECL|member|edit
name|QLineEdit
modifier|*
name|edit
decl_stmt|;
DECL|member|received
name|bool
name|received
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|ensureReturnIsIgnored
name|void
name|tst_QComboBox
operator|::
name|ensureReturnIsIgnored
parameter_list|()
block|{
name|ReturnClass
name|r
decl_stmt|;
name|r
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|r
operator|.
name|edit
argument_list|,
name|Qt
operator|::
name|Key_Return
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|r
operator|.
name|received
argument_list|)
expr_stmt|;
name|r
operator|.
name|received
operator|=
literal|false
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|r
operator|.
name|edit
argument_list|,
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|r
operator|.
name|received
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|findText_data
name|void
name|tst_QComboBox
operator|::
name|findText_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"items"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"matchflags"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"search"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QStringList
name|list
decl_stmt|;
name|list
operator|<<
literal|"One"
operator|<<
literal|"Two"
operator|<<
literal|"Three"
operator|<<
literal|"Four"
operator|<<
literal|"Five"
operator|<<
literal|"Six"
operator|<<
literal|"one"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"CaseSensitive_1"
argument_list|)
operator|<<
name|list
operator|<<
call|(
name|int
call|)
argument_list|(
name|Qt
operator|::
name|MatchExactly
operator||
name|Qt
operator|::
name|MatchCaseSensitive
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Two"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"CaseSensitive_2"
argument_list|)
operator|<<
name|list
operator|<<
call|(
name|int
call|)
argument_list|(
name|Qt
operator|::
name|MatchExactly
operator||
name|Qt
operator|::
name|MatchCaseSensitive
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"two"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"CaseSensitive_3"
argument_list|)
operator|<<
name|list
operator|<<
call|(
name|int
call|)
argument_list|(
name|Qt
operator|::
name|MatchExactly
operator||
name|Qt
operator|::
name|MatchCaseSensitive
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"One"
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"CaseSensitive_4"
argument_list|)
operator|<<
name|list
operator|<<
call|(
name|int
call|)
argument_list|(
name|Qt
operator|::
name|MatchExactly
operator||
name|Qt
operator|::
name|MatchCaseSensitive
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"one"
argument_list|)
operator|<<
literal|6
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"CaseInsensitive_1"
argument_list|)
operator|<<
name|list
operator|<<
call|(
name|int
call|)
argument_list|(
name|Qt
operator|::
name|MatchExactly
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"Two"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"CaseInsensitive_2"
argument_list|)
operator|<<
name|list
operator|<<
call|(
name|int
call|)
argument_list|(
name|Qt
operator|::
name|MatchExactly
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"two"
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"CaseInsensitive_3"
argument_list|)
operator|<<
name|list
operator|<<
call|(
name|int
call|)
argument_list|(
name|Qt
operator|::
name|MatchExactly
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"One"
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"CaseInsensitive_4"
argument_list|)
operator|<<
name|list
operator|<<
call|(
name|int
call|)
argument_list|(
name|Qt
operator|::
name|MatchExactly
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"one"
argument_list|)
operator|<<
literal|6
expr_stmt|;
block|}
end_function
begin_function
DECL|function|findText
name|void
name|tst_QComboBox
operator|::
name|findText
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|items
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|matchflags
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|search
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|testWidget
operator|->
name|clear
argument_list|()
expr_stmt|;
name|testWidget
operator|->
name|addItems
argument_list|(
name|items
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testWidget
operator|->
name|findText
argument_list|(
name|search
argument_list|,
operator|(
name|Qt
operator|::
name|MatchFlags
operator|)
name|matchflags
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_typedef
DECL|typedef|IntList
typedef|typedef
name|QList
argument_list|<
name|int
argument_list|>
name|IntList
typedef|;
end_typedef
begin_typedef
DECL|typedef|KeyList
typedef|typedef
name|QList
argument_list|<
name|Qt
operator|::
name|Key
argument_list|>
name|KeyList
typedef|;
end_typedef
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|IntList
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|KeyList
argument_list|)
end_macro
begin_function
DECL|function|flaggedItems_data
name|void
name|tst_QComboBox
operator|::
name|flaggedItems_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"itemList"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|IntList
argument_list|>
argument_list|(
literal|"deselectFlagList"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|IntList
argument_list|>
argument_list|(
literal|"disableFlagList"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|KeyList
argument_list|>
argument_list|(
literal|"keyMovementList"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"editable"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedIndex"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|editable
init|=
literal|0
init|;
name|editable
operator|<
literal|2
condition|;
name|editable
operator|++
control|)
block|{
name|QString
name|testCase
init|=
name|editable
condition|?
literal|"editable:"
else|:
literal|"non-editable:"
decl_stmt|;
name|QStringList
name|itemList
decl_stmt|;
name|itemList
operator|<<
literal|"One"
operator|<<
literal|"Two"
operator|<<
literal|"Three"
operator|<<
literal|"Four"
operator|<<
literal|"Five"
operator|<<
literal|"Six"
operator|<<
literal|"Seven"
operator|<<
literal|"Eight"
expr_stmt|;
name|IntList
name|deselectFlagList
decl_stmt|;
name|IntList
name|disableFlagList
decl_stmt|;
name|KeyList
name|keyMovementList
decl_stmt|;
name|keyMovementList
operator|<<
name|Qt
operator|::
name|Key_Down
operator|<<
name|Qt
operator|::
name|Key_Down
operator|<<
name|Qt
operator|::
name|Key_Down
operator|<<
name|Qt
operator|::
name|Key_Down
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|testCase
operator|.
name|toAscii
argument_list|()
operator|+
literal|"normal"
argument_list|)
operator|<<
name|itemList
operator|<<
name|deselectFlagList
operator|<<
name|disableFlagList
operator|<<
name|keyMovementList
operator|<<
name|bool
argument_list|(
name|editable
argument_list|)
operator|<<
literal|4
expr_stmt|;
name|deselectFlagList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|disableFlagList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|deselectFlagList
operator|<<
literal|1
operator|<<
literal|3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|testCase
operator|.
name|toAscii
argument_list|()
operator|+
literal|"non-selectable"
argument_list|)
operator|<<
name|itemList
operator|<<
name|deselectFlagList
operator|<<
name|disableFlagList
operator|<<
name|keyMovementList
operator|<<
name|bool
argument_list|(
name|editable
argument_list|)
operator|<<
literal|4
expr_stmt|;
name|deselectFlagList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|disableFlagList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|disableFlagList
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|testCase
operator|.
name|toAscii
argument_list|()
operator|+
literal|"disabled"
argument_list|)
operator|<<
name|itemList
operator|<<
name|deselectFlagList
operator|<<
name|disableFlagList
operator|<<
name|keyMovementList
operator|<<
name|bool
argument_list|(
name|editable
argument_list|)
operator|<<
literal|5
expr_stmt|;
name|deselectFlagList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|disableFlagList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|deselectFlagList
operator|<<
literal|1
operator|<<
literal|3
expr_stmt|;
name|disableFlagList
operator|<<
literal|2
operator|<<
literal|3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|testCase
operator|.
name|toAscii
argument_list|()
operator|+
literal|"mixed"
argument_list|)
operator|<<
name|itemList
operator|<<
name|deselectFlagList
operator|<<
name|disableFlagList
operator|<<
name|keyMovementList
operator|<<
name|bool
argument_list|(
name|editable
argument_list|)
operator|<<
literal|6
expr_stmt|;
name|deselectFlagList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|disableFlagList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|disableFlagList
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|3
operator|<<
literal|4
operator|<<
literal|5
operator|<<
literal|6
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|testCase
operator|.
name|toAscii
argument_list|()
operator|+
literal|"nearly-empty"
argument_list|)
operator|<<
name|itemList
operator|<<
name|deselectFlagList
operator|<<
name|disableFlagList
operator|<<
name|keyMovementList
operator|<<
name|bool
argument_list|(
name|editable
argument_list|)
operator|<<
literal|7
expr_stmt|;
name|deselectFlagList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|disableFlagList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|disableFlagList
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|3
operator|<<
literal|5
operator|<<
literal|6
operator|<<
literal|7
expr_stmt|;
name|keyMovementList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|testCase
operator|.
name|toAscii
argument_list|()
operator|+
literal|"only one enabled"
argument_list|)
operator|<<
name|itemList
operator|<<
name|deselectFlagList
operator|<<
name|disableFlagList
operator|<<
name|keyMovementList
operator|<<
name|bool
argument_list|(
name|editable
argument_list|)
operator|<<
literal|4
expr_stmt|;
if|if
condition|(
operator|!
name|editable
condition|)
block|{
name|deselectFlagList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|disableFlagList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|keyMovementList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|disableFlagList
operator|<<
literal|0
operator|<<
literal|2
operator|<<
literal|3
expr_stmt|;
name|keyMovementList
operator|<<
name|Qt
operator|::
name|Key_Down
operator|<<
name|Qt
operator|::
name|Key_Home
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|testCase
operator|.
name|toAscii
argument_list|()
operator|+
literal|"home-disabled"
argument_list|)
operator|<<
name|itemList
operator|<<
name|deselectFlagList
operator|<<
name|disableFlagList
operator|<<
name|keyMovementList
operator|<<
name|bool
argument_list|(
name|editable
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|keyMovementList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|keyMovementList
operator|<<
name|Qt
operator|::
name|Key_End
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|testCase
operator|.
name|toAscii
argument_list|()
operator|+
literal|"end-key"
argument_list|)
operator|<<
name|itemList
operator|<<
name|deselectFlagList
operator|<<
name|disableFlagList
operator|<<
name|keyMovementList
operator|<<
name|bool
argument_list|(
name|editable
argument_list|)
operator|<<
literal|7
expr_stmt|;
name|disableFlagList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|disableFlagList
operator|<<
literal|1
expr_stmt|;
name|keyMovementList
operator|<<
name|Qt
operator|::
name|Key_T
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|testCase
operator|.
name|toAscii
argument_list|()
operator|+
literal|"keyboard-search"
argument_list|)
operator|<<
name|itemList
operator|<<
name|deselectFlagList
operator|<<
name|disableFlagList
operator|<<
name|keyMovementList
operator|<<
name|bool
argument_list|(
name|editable
argument_list|)
operator|<<
literal|2
expr_stmt|;
name|itemList
operator|<<
literal|"nine"
operator|<<
literal|"ten"
expr_stmt|;
name|keyMovementList
operator|<<
name|Qt
operator|::
name|Key_T
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|testCase
operator|.
name|toAscii
argument_list|()
operator|+
literal|"search same start letter"
argument_list|)
operator|<<
name|itemList
operator|<<
name|deselectFlagList
operator|<<
name|disableFlagList
operator|<<
name|keyMovementList
operator|<<
name|bool
argument_list|(
name|editable
argument_list|)
operator|<<
literal|9
expr_stmt|;
name|keyMovementList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|keyMovementList
operator|<<
name|Qt
operator|::
name|Key_T
operator|<<
name|Qt
operator|::
name|Key_H
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|testCase
operator|.
name|toAscii
argument_list|()
operator|+
literal|"keyboard search item"
argument_list|)
operator|<<
name|itemList
operator|<<
name|deselectFlagList
operator|<<
name|disableFlagList
operator|<<
name|keyMovementList
operator|<<
name|bool
argument_list|(
name|editable
argument_list|)
operator|<<
literal|2
expr_stmt|;
name|disableFlagList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|disableFlagList
operator|<<
literal|1
operator|<<
literal|3
operator|<<
literal|5
operator|<<
literal|7
operator|<<
literal|9
expr_stmt|;
name|keyMovementList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|keyMovementList
operator|<<
name|Qt
operator|::
name|Key_End
operator|<<
name|Qt
operator|::
name|Key_Up
operator|<<
name|Qt
operator|::
name|Key_Up
operator|<<
name|Qt
operator|::
name|Key_PageDown
operator|<<
name|Qt
operator|::
name|Key_PageUp
operator|<<
name|Qt
operator|::
name|Key_PageUp
operator|<<
name|Qt
operator|::
name|Key_Down
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|testCase
operator|.
name|toAscii
argument_list|()
operator|+
literal|"all key combinations"
argument_list|)
operator|<<
name|itemList
operator|<<
name|deselectFlagList
operator|<<
name|disableFlagList
operator|<<
name|keyMovementList
operator|<<
name|bool
argument_list|(
name|editable
argument_list|)
operator|<<
literal|4
expr_stmt|;
block|}
else|else
block|{
name|deselectFlagList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|disableFlagList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|disableFlagList
operator|<<
literal|1
expr_stmt|;
name|keyMovementList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|keyMovementList
operator|<<
name|Qt
operator|::
name|Key_T
operator|<<
name|Qt
operator|::
name|Key_Enter
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|testCase
operator|.
name|toAscii
argument_list|()
operator|+
literal|"disabled"
argument_list|)
operator|<<
name|itemList
operator|<<
name|deselectFlagList
operator|<<
name|disableFlagList
operator|<<
name|keyMovementList
operator|<<
name|bool
argument_list|(
name|editable
argument_list|)
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|testCase
operator|.
name|toAscii
argument_list|()
operator|+
literal|"broken autocompletion"
argument_list|)
operator|<<
name|itemList
operator|<<
name|deselectFlagList
operator|<<
name|disableFlagList
operator|<<
name|keyMovementList
operator|<<
name|bool
argument_list|(
name|editable
argument_list|)
operator|<<
literal|2
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|flaggedItems
name|void
name|tst_QComboBox
operator|::
name|flaggedItems
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|itemList
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|IntList
argument_list|,
name|deselectFlagList
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|IntList
argument_list|,
name|disableFlagList
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|KeyList
argument_list|,
name|keyMovementList
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|editable
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expectedIndex
argument_list|)
expr_stmt|;
name|QComboBox
name|comboBox
decl_stmt|;
name|QListWidget
name|listWidget
decl_stmt|;
name|listWidget
operator|.
name|addItems
argument_list|(
name|itemList
argument_list|)
expr_stmt|;
name|comboBox
operator|.
name|setEditable
argument_list|(
name|editable
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|int
name|index
decl|,
name|deselectFlagList
control|)
name|listWidget
operator|.
name|item
argument_list|(
name|index
argument_list|)
operator|->
name|setFlags
argument_list|(
name|listWidget
operator|.
name|item
argument_list|(
name|index
argument_list|)
operator|->
name|flags
argument_list|()
operator|&
operator|~
name|Qt
operator|::
name|ItemIsSelectable
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|int
name|index
decl|,
name|disableFlagList
control|)
name|listWidget
operator|.
name|item
argument_list|(
name|index
argument_list|)
operator|->
name|setFlags
argument_list|(
name|listWidget
operator|.
name|item
argument_list|(
name|index
argument_list|)
operator|->
name|flags
argument_list|()
operator|&
operator|~
name|Qt
operator|::
name|ItemIsEnabled
argument_list|)
expr_stmt|;
name|comboBox
operator|.
name|setModel
argument_list|(
name|listWidget
operator|.
name|model
argument_list|()
argument_list|)
expr_stmt|;
name|comboBox
operator|.
name|setView
argument_list|(
operator|&
name|listWidget
argument_list|)
expr_stmt|;
name|comboBox
operator|.
name|show
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|setActiveWindow
argument_list|(
operator|&
name|comboBox
argument_list|)
expr_stmt|;
name|comboBox
operator|.
name|activateWindow
argument_list|()
expr_stmt|;
name|comboBox
operator|.
name|setFocus
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|comboBox
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|comboBox
operator|.
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|editable
condition|)
name|comboBox
operator|.
name|lineEdit
argument_list|()
operator|->
name|selectAll
argument_list|()
expr_stmt|;
name|QSignalSpy
name|indexChangedInt
argument_list|(
operator|&
name|comboBox
argument_list|,
name|SIGNAL
argument_list|(
name|currentIndexChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|keyMovementList
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|Qt
operator|::
name|Key
name|key
init|=
name|keyMovementList
index|[
name|i
index|]
decl_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
operator|&
name|comboBox
argument_list|,
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|indexChangedInt
operator|.
name|count
argument_list|()
operator|!=
name|i
operator|+
literal|1
condition|)
block|{
name|QTest
operator|::
name|qWait
argument_list|(
literal|400
argument_list|)
expr_stmt|;
block|}
block|}
name|QCOMPARE
argument_list|(
name|comboBox
operator|.
name|currentIndex
argument_list|()
argument_list|,
name|expectedIndex
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|pixmapIcon
name|void
name|tst_QComboBox
operator|::
name|pixmapIcon
parameter_list|()
block|{
name|QComboBox
name|box
decl_stmt|;
name|QStandardItemModel
modifier|*
name|model
init|=
operator|new
name|QStandardItemModel
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
operator|&
name|box
argument_list|)
decl_stmt|;
name|QPixmap
name|pix
argument_list|(
literal|10
argument_list|,
literal|10
argument_list|)
decl_stmt|;
name|pix
operator|.
name|fill
argument_list|(
name|Qt
operator|::
name|red
argument_list|)
expr_stmt|;
name|model
operator|->
name|setData
argument_list|(
name|model
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|"Element 1"
argument_list|)
expr_stmt|;
name|model
operator|->
name|setData
argument_list|(
name|model
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|pix
argument_list|,
name|Qt
operator|::
name|DecorationRole
argument_list|)
expr_stmt|;
name|QIcon
name|icon
argument_list|(
name|pix
argument_list|)
decl_stmt|;
name|model
operator|->
name|setData
argument_list|(
name|model
operator|->
name|index
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
literal|"Element 2"
argument_list|)
expr_stmt|;
name|model
operator|->
name|setData
argument_list|(
name|model
operator|->
name|index
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|)
argument_list|,
name|icon
argument_list|,
name|Qt
operator|::
name|DecorationRole
argument_list|)
expr_stmt|;
name|box
operator|.
name|setModel
argument_list|(
name|model
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|itemIcon
argument_list|(
literal|0
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|itemIcon
argument_list|(
literal|1
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// defined to be 120 by the wheel mouse vendors according to the docs
end_comment
begin_define
DECL|macro|WHEEL_DELTA
define|#
directive|define
name|WHEEL_DELTA
value|120
end_define
begin_function
DECL|function|mouseWheel_data
name|void
name|tst_QComboBox
operator|::
name|mouseWheel_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|IntList
argument_list|>
argument_list|(
literal|"disabledItems"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"startIndex"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"wheelDirection"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedIndex"
argument_list|)
expr_stmt|;
name|IntList
name|disabled
decl_stmt|;
name|disabled
operator|<<
literal|0
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|4
expr_stmt|;
name|int
name|start
init|=
literal|3
decl_stmt|;
name|int
name|wheel
init|=
literal|1
decl_stmt|;
name|int
name|expected
init|=
literal|3
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"upper locked"
argument_list|)
operator|<<
name|disabled
operator|<<
name|start
operator|<<
name|wheel
operator|<<
name|expected
expr_stmt|;
name|wheel
operator|=
operator|-
literal|1
expr_stmt|;
name|expected
operator|=
literal|5
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"jump over"
argument_list|)
operator|<<
name|disabled
operator|<<
name|start
operator|<<
name|wheel
operator|<<
name|expected
expr_stmt|;
name|disabled
operator|.
name|clear
argument_list|()
expr_stmt|;
name|disabled
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|3
operator|<<
literal|4
operator|<<
literal|5
operator|<<
literal|6
operator|<<
literal|7
operator|<<
literal|8
operator|<<
literal|9
expr_stmt|;
name|start
operator|=
literal|0
expr_stmt|;
name|wheel
operator|=
operator|-
literal|1
expr_stmt|;
name|expected
operator|=
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"single Item enabled"
argument_list|)
operator|<<
name|disabled
operator|<<
name|start
operator|<<
name|wheel
operator|<<
name|expected
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mouseWheel
name|void
name|tst_QComboBox
operator|::
name|mouseWheel
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|IntList
argument_list|,
name|disabledItems
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|startIndex
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|wheelDirection
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expectedIndex
argument_list|)
expr_stmt|;
name|QCoreApplication
modifier|*
name|applicationInstance
init|=
name|QCoreApplication
operator|::
name|instance
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|applicationInstance
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QComboBox
name|box
decl_stmt|;
name|QStringList
name|list
decl_stmt|;
name|list
operator|<<
literal|"one"
operator|<<
literal|"two"
operator|<<
literal|"three"
operator|<<
literal|"four"
operator|<<
literal|"five"
operator|<<
literal|"six"
operator|<<
literal|"seven"
operator|<<
literal|"eight"
operator|<<
literal|"nine"
operator|<<
literal|"ten"
expr_stmt|;
name|QListWidget
name|listWidget
decl_stmt|;
name|listWidget
operator|.
name|addItems
argument_list|(
name|list
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|int
name|index
decl|,
name|disabledItems
control|)
name|listWidget
operator|.
name|item
argument_list|(
name|index
argument_list|)
operator|->
name|setFlags
argument_list|(
name|listWidget
operator|.
name|item
argument_list|(
name|index
argument_list|)
operator|->
name|flags
argument_list|()
operator|&
operator|~
name|Qt
operator|::
name|ItemIsEnabled
argument_list|)
expr_stmt|;
name|box
operator|.
name|setModel
argument_list|(
name|listWidget
operator|.
name|model
argument_list|()
argument_list|)
expr_stmt|;
name|box
operator|.
name|setView
argument_list|(
operator|&
name|listWidget
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
operator|++
name|i
control|)
block|{
name|box
operator|.
name|setEditable
argument_list|(
name|i
operator|==
literal|0
condition|?
literal|false
else|:
literal|true
argument_list|)
expr_stmt|;
name|box
operator|.
name|setCurrentIndex
argument_list|(
name|startIndex
argument_list|)
expr_stmt|;
name|QWheelEvent
name|event
init|=
name|QWheelEvent
argument_list|(
name|box
operator|.
name|rect
argument_list|()
operator|.
name|bottomRight
argument_list|()
argument_list|,
name|WHEEL_DELTA
operator|*
name|wheelDirection
argument_list|,
name|Qt
operator|::
name|NoButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|applicationInstance
operator|->
name|sendEvent
argument_list|(
operator|&
name|box
argument_list|,
operator|&
name|event
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|currentIndex
argument_list|()
argument_list|,
name|expectedIndex
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|layoutDirection
name|void
name|tst_QComboBox
operator|::
name|layoutDirection
parameter_list|()
block|{
name|QComboBox
name|box
decl_stmt|;
name|Qt
operator|::
name|LayoutDirection
name|dir
decl_stmt|;
name|QLineEdit
modifier|*
name|lineEdit
decl_stmt|;
comment|// RTL
name|box
operator|.
name|setLayoutDirection
argument_list|(
name|Qt
operator|::
name|RightToLeft
argument_list|)
expr_stmt|;
name|QStyleOptionComboBox
name|opt
decl_stmt|;
name|opt
operator|.
name|direction
operator|=
name|Qt
operator|::
name|RightToLeft
expr_stmt|;
name|dir
operator|=
operator|(
name|Qt
operator|::
name|LayoutDirection
operator|)
name|box
operator|.
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ComboBox_LayoutDirection
argument_list|,
operator|&
name|opt
argument_list|,
operator|&
name|box
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|view
argument_list|()
operator|->
name|layoutDirection
argument_list|()
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|box
operator|.
name|setEditable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|lineEdit
argument_list|()
operator|->
name|layoutDirection
argument_list|()
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|lineEdit
operator|=
operator|new
name|QLineEdit
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lineEdit
operator|->
name|layoutDirection
argument_list|()
argument_list|,
name|qApp
operator|->
name|layoutDirection
argument_list|()
argument_list|)
expr_stmt|;
name|box
operator|.
name|setLineEdit
argument_list|(
name|lineEdit
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lineEdit
operator|->
name|layoutDirection
argument_list|()
argument_list|,
name|dir
argument_list|)
expr_stmt|;
comment|// LTR
name|box
operator|.
name|setLayoutDirection
argument_list|(
name|Qt
operator|::
name|LeftToRight
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|setLayoutDirection
argument_list|(
name|Qt
operator|::
name|RightToLeft
argument_list|)
expr_stmt|;
name|opt
operator|.
name|direction
operator|=
name|Qt
operator|::
name|LeftToRight
expr_stmt|;
name|dir
operator|=
operator|(
name|Qt
operator|::
name|LayoutDirection
operator|)
name|box
operator|.
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ComboBox_LayoutDirection
argument_list|,
operator|&
name|opt
argument_list|,
operator|&
name|box
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|view
argument_list|()
operator|->
name|layoutDirection
argument_list|()
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|box
operator|.
name|setEditable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|lineEdit
argument_list|()
operator|->
name|layoutDirection
argument_list|()
argument_list|,
name|dir
argument_list|)
expr_stmt|;
name|lineEdit
operator|=
operator|new
name|QLineEdit
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lineEdit
operator|->
name|layoutDirection
argument_list|()
argument_list|,
name|qApp
operator|->
name|layoutDirection
argument_list|()
argument_list|)
expr_stmt|;
name|box
operator|.
name|setLineEdit
argument_list|(
name|lineEdit
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lineEdit
operator|->
name|layoutDirection
argument_list|()
argument_list|,
name|dir
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|itemListPosition
name|void
name|tst_QComboBox
operator|::
name|itemListPosition
parameter_list|()
block|{
comment|//tests that the list is not out of the screen boundaries
comment|//put the QApplication layout back
name|QApplication
operator|::
name|setLayoutDirection
argument_list|(
name|Qt
operator|::
name|LeftToRight
argument_list|)
expr_stmt|;
comment|//we test QFontComboBox because it has the specific behaviour to set a fixed size
comment|//to the list view
name|QWidget
name|topLevel
decl_stmt|;
name|QFontComboBox
name|combo
argument_list|(
operator|&
name|topLevel
argument_list|)
decl_stmt|;
comment|//the code to get the avaialbe screen space is copied from QComboBox code
specifier|const
name|int
name|scrNumber
init|=
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|screenNumber
argument_list|(
operator|&
name|combo
argument_list|)
decl_stmt|;
name|QRect
name|screen
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_WIN
name|screen
operator|=
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|screenGeometry
argument_list|(
name|scrNumber
argument_list|)
expr_stmt|;
elif|#
directive|elif
name|defined
name|Q_WS_X11
if|if
condition|(
name|X11
operator|->
name|desktopEnvironment
operator|==
name|DE_KDE
condition|)
name|screen
operator|=
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|screenGeometry
argument_list|(
name|scrNumber
argument_list|)
expr_stmt|;
else|else
name|screen
operator|=
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|availableGeometry
argument_list|(
name|scrNumber
argument_list|)
expr_stmt|;
else|#
directive|else
name|screen
operator|=
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|availableGeometry
argument_list|(
name|scrNumber
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|combo
operator|.
name|move
argument_list|(
name|screen
operator|.
name|width
argument_list|()
operator|-
name|combo
operator|.
name|sizeHint
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//puts the combo to the top-right corner
name|topLevel
operator|.
name|show
argument_list|()
expr_stmt|;
comment|//wait because the window manager can move the window if there is a right panel
name|QTRY_VERIFY
argument_list|(
name|combo
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|combo
operator|.
name|showPopup
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|combo
operator|.
name|view
argument_list|()
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|combo
operator|.
name|view
argument_list|()
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_WS_S60
argument_list|)
comment|// Assuming that QtS60 style is used, here. But other ones would certainly also fail
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"QtS60Style does not yet position the combobox popup correctly"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|combo
operator|.
name|view
argument_list|()
operator|->
name|window
argument_list|()
operator|->
name|x
argument_list|()
operator|+
name|combo
operator|.
name|view
argument_list|()
operator|->
name|window
argument_list|()
operator|->
name|width
argument_list|()
operator|<=
name|screen
operator|.
name|x
argument_list|()
operator|+
name|screen
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|separatorItem_data
name|void
name|tst_QComboBox
operator|::
name|separatorItem_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"items"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|IntList
argument_list|>
argument_list|(
literal|"separators"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"test"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"one"
operator|<<
literal|"two"
operator|<<
literal|"three"
operator|<<
literal|"other..."
operator|)
operator|<<
operator|(
name|IntList
argument_list|()
operator|<<
literal|4
operator|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|separatorItem
name|void
name|tst_QComboBox
operator|::
name|separatorItem
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|items
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|IntList
argument_list|,
name|separators
argument_list|)
expr_stmt|;
name|QComboBox
name|box
decl_stmt|;
name|box
operator|.
name|addItems
argument_list|(
name|items
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|int
name|index
decl|,
name|separators
control|)
name|box
operator|.
name|insertSeparator
argument_list|(
name|index
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|count
argument_list|()
argument_list|,
operator|(
name|items
operator|.
name|count
argument_list|()
operator|+
name|separators
operator|.
name|count
argument_list|()
operator|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|,
name|s
init|=
literal|0
init|;
name|i
operator|<
name|box
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|i
operator|==
name|separators
operator|.
name|at
argument_list|(
name|s
argument_list|)
condition|)
block|{
name|QCOMPARE
argument_list|(
name|box
operator|.
name|itemText
argument_list|(
name|i
argument_list|)
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|s
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|box
operator|.
name|itemText
argument_list|(
name|i
argument_list|)
argument_list|,
name|items
operator|.
name|at
argument_list|(
name|i
operator|-
name|s
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|// This test requires the Cleanlooks style
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_STYLE_CLEANLOOKS
end_ifndef
begin_function
DECL|function|task190351_layout
name|void
name|tst_QComboBox
operator|::
name|task190351_layout
parameter_list|()
block|{
specifier|const
name|QString
name|oldStyle
init|=
name|QApplication
operator|::
name|style
argument_list|()
operator|->
name|objectName
argument_list|()
decl_stmt|;
name|QApplication
operator|::
name|setStyle
argument_list|(
operator|new
name|QCleanlooksStyle
argument_list|)
expr_stmt|;
name|QComboBox
name|listCombo
decl_stmt|;
name|QListWidget
modifier|*
name|list
init|=
operator|new
name|QListWidget
argument_list|()
decl_stmt|;
name|listCombo
operator|.
name|setModel
argument_list|(
name|list
operator|->
name|model
argument_list|()
argument_list|)
expr_stmt|;
name|listCombo
operator|.
name|setView
argument_list|(
name|list
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|150
condition|;
name|i
operator|++
control|)
name|list
operator|->
name|addItem
argument_list|(
name|QLatin1String
argument_list|(
literal|"list"
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|listCombo
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowShown
argument_list|(
operator|&
name|listCombo
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|listCombo
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|listCombo
operator|.
name|setCurrentIndex
argument_list|(
literal|70
argument_list|)
expr_stmt|;
name|listCombo
operator|.
name|showPopup
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|listCombo
operator|.
name|view
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowShown
argument_list|(
name|listCombo
operator|.
name|view
argument_list|()
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|listCombo
operator|.
name|view
argument_list|()
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
name|QFrame
modifier|*
name|container
init|=
name|qFindChild
argument_list|<
name|QComboBoxPrivateContainer
operator|*
argument_list|>
argument_list|(
operator|&
name|listCombo
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
cast|static_cast
argument_list|<
name|QAbstractItemView
operator|*
argument_list|>
argument_list|(
name|list
argument_list|)
argument_list|,
name|qFindChild
argument_list|<
name|QAbstractItemView
operator|*
argument_list|>
argument_list|(
name|container
argument_list|)
argument_list|)
expr_stmt|;
name|QWidget
modifier|*
name|top
init|=
name|qFindChild
argument_list|<
name|QComboBoxPrivateScroller
operator|*
argument_list|>
argument_list|(
name|container
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|top
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|top
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|top
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
name|top
operator|->
name|height
argument_list|()
argument_list|)
argument_list|)
operator|.
name|y
argument_list|()
argument_list|,
name|list
operator|->
name|mapToGlobal
argument_list|(
name|QPoint
argument_list|()
argument_list|)
operator|.
name|y
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QApplication
operator|::
name|setStyle
argument_list|(
name|oldStyle
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_class
DECL|class|task166349_ComboBox
class|class
name|task166349_ComboBox
super|:
specifier|public
name|QComboBox
block|{
name|Q_OBJECT
public|public:
DECL|function|task166349_ComboBox
name|task166349_ComboBox
parameter_list|(
name|QWidget
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QComboBox
argument_list|(
name|parent
argument_list|)
block|{
name|QStringList
name|list
decl_stmt|;
name|list
operator|<<
literal|"one"
operator|<<
literal|"two"
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|currentIndexChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|onCurrentIndexChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|addItems
argument_list|(
name|list
argument_list|)
expr_stmt|;
block|}
public|public
name|slots
public|:
DECL|function|onCurrentIndexChanged
name|void
name|onCurrentIndexChanged
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|setEditable
argument_list|(
name|index
operator|%
literal|2
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|task166349_setEditableOnReturn
name|void
name|tst_QComboBox
operator|::
name|task166349_setEditableOnReturn
parameter_list|()
block|{
name|task166349_ComboBox
name|comboBox
decl_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
operator|&
name|comboBox
argument_list|,
name|Qt
operator|::
name|Key_Down
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
operator|&
name|comboBox
argument_list|,
name|Qt
operator|::
name|Key_1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
operator|&
name|comboBox
argument_list|,
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QLatin1String
argument_list|(
literal|"two1"
argument_list|)
argument_list|,
name|comboBox
operator|.
name|itemText
argument_list|(
name|comboBox
operator|.
name|count
argument_list|()
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// This test requires the Cleanlooks style.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_STYLE_CLEANLOOKS
end_ifndef
begin_function
DECL|function|task191329_size
name|void
name|tst_QComboBox
operator|::
name|task191329_size
parameter_list|()
block|{
specifier|const
name|QString
name|oldStyle
init|=
name|QApplication
operator|::
name|style
argument_list|()
operator|->
name|objectName
argument_list|()
decl_stmt|;
name|QApplication
operator|::
name|setStyle
argument_list|(
operator|new
name|QCleanlooksStyle
argument_list|)
expr_stmt|;
name|QComboBox
name|tableCombo
decl_stmt|;
name|int
name|rows
decl_stmt|;
if|if
condition|(
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|screenGeometry
argument_list|()
operator|.
name|height
argument_list|()
operator|<
literal|480
condition|)
name|rows
operator|=
literal|8
expr_stmt|;
else|else
name|rows
operator|=
literal|15
expr_stmt|;
name|QStandardItemModel
name|model
argument_list|(
name|rows
argument_list|,
literal|2
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|row
init|=
literal|0
init|;
name|row
operator|<
name|model
operator|.
name|rowCount
argument_list|()
condition|;
operator|++
name|row
control|)
block|{
for|for
control|(
name|int
name|column
init|=
literal|0
init|;
name|column
operator|<
name|model
operator|.
name|columnCount
argument_list|()
condition|;
operator|++
name|column
control|)
block|{
name|QStandardItem
modifier|*
name|item
init|=
operator|new
name|QStandardItem
argument_list|(
name|QString
argument_list|(
literal|"row %0, column %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|row
argument_list|)
operator|.
name|arg
argument_list|(
name|column
argument_list|)
argument_list|)
decl_stmt|;
name|model
operator|.
name|setItem
argument_list|(
name|row
argument_list|,
name|column
argument_list|,
name|item
argument_list|)
expr_stmt|;
block|}
block|}
name|QTableView
modifier|*
name|table
init|=
operator|new
name|QTableView
argument_list|()
decl_stmt|;
name|table
operator|->
name|verticalHeader
argument_list|()
operator|->
name|hide
argument_list|()
expr_stmt|;
name|table
operator|->
name|horizontalHeader
argument_list|()
operator|->
name|hide
argument_list|()
expr_stmt|;
name|tableCombo
operator|.
name|setView
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|tableCombo
operator|.
name|setModel
argument_list|(
operator|&
name|model
argument_list|)
expr_stmt|;
name|tableCombo
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|tableCombo
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|tableCombo
operator|.
name|showPopup
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|tableCombo
operator|.
name|view
argument_list|()
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|tableCombo
operator|.
name|view
argument_list|()
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
name|QFrame
modifier|*
name|container
init|=
name|qFindChild
argument_list|<
name|QComboBoxPrivateContainer
operator|*
argument_list|>
argument_list|(
operator|&
name|tableCombo
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
cast|static_cast
argument_list|<
name|QAbstractItemView
operator|*
argument_list|>
argument_list|(
name|table
argument_list|)
argument_list|,
name|qFindChild
argument_list|<
name|QAbstractItemView
operator|*
argument_list|>
argument_list|(
name|container
argument_list|)
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|QWidget
modifier|*
name|button
decl|,
name|qFindChildren
argument_list|<
name|QComboBoxPrivateScroller
operator|*
argument_list|>
argument_list|(
name|container
argument_list|)
control|)
block|{
comment|//the popup should be large enough to contains everithing so the top and left button are hidden
name|QVERIFY
argument_list|(
operator|!
name|button
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|QApplication
operator|::
name|setStyle
argument_list|(
name|oldStyle
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|task190205_setModelAdjustToContents
name|void
name|tst_QComboBox
operator|::
name|task190205_setModelAdjustToContents
parameter_list|()
block|{
name|QStringList
name|initialContent
decl_stmt|;
name|QStringList
name|finalContent
decl_stmt|;
name|initialContent
operator|<<
literal|"foo"
operator|<<
literal|"bar"
expr_stmt|;
name|finalContent
operator|<<
literal|"bar"
operator|<<
literal|"foooooooobar"
expr_stmt|;
name|QComboBox
name|box
decl_stmt|;
name|box
operator|.
name|setSizeAdjustPolicy
argument_list|(
name|QComboBox
operator|::
name|AdjustToContents
argument_list|)
expr_stmt|;
name|box
operator|.
name|addItems
argument_list|(
name|initialContent
argument_list|)
expr_stmt|;
name|box
operator|.
name|show
argument_list|()
expr_stmt|;
comment|//wait needed in order to get the combo initial size
name|QTRY_VERIFY
argument_list|(
name|box
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|box
operator|.
name|setModel
argument_list|(
operator|new
name|QStringListModel
argument_list|(
name|finalContent
argument_list|)
argument_list|)
expr_stmt|;
name|QComboBox
name|correctBox
decl_stmt|;
name|correctBox
operator|.
name|addItems
argument_list|(
name|finalContent
argument_list|)
expr_stmt|;
name|correctBox
operator|.
name|show
argument_list|()
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_X11
name|qt_x11_wait_for_window_manager
argument_list|(
operator|&
name|box
argument_list|)
expr_stmt|;
name|qt_x11_wait_for_window_manager
argument_list|(
operator|&
name|correctBox
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// box should be resized to the same size as correctBox
name|QTRY_COMPARE
argument_list|(
name|box
operator|.
name|size
argument_list|()
argument_list|,
name|correctBox
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|task248169_popupWithMinimalSize
name|void
name|tst_QComboBox
operator|::
name|task248169_popupWithMinimalSize
parameter_list|()
block|{
name|QStringList
name|initialContent
decl_stmt|;
name|initialContent
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"foobar"
expr_stmt|;
name|QComboBox
name|comboBox
decl_stmt|;
name|comboBox
operator|.
name|addItems
argument_list|(
name|initialContent
argument_list|)
expr_stmt|;
name|QDesktopWidget
name|desktop
decl_stmt|;
name|QRect
name|desktopSize
init|=
name|desktop
operator|.
name|availableGeometry
argument_list|()
decl_stmt|;
name|comboBox
operator|.
name|view
argument_list|()
operator|->
name|setMinimumWidth
argument_list|(
name|desktopSize
operator|.
name|width
argument_list|()
operator|/
literal|2
argument_list|)
expr_stmt|;
name|comboBox
operator|.
name|setGeometry
argument_list|(
name|desktopSize
operator|.
name|width
argument_list|()
operator|-
operator|(
name|desktopSize
operator|.
name|width
argument_list|()
operator|/
literal|4
operator|)
argument_list|,
operator|(
name|desktopSize
operator|.
name|width
argument_list|()
operator|/
literal|4
operator|)
argument_list|,
operator|(
name|desktopSize
operator|.
name|width
argument_list|()
operator|/
literal|2
operator|)
argument_list|,
operator|(
name|desktopSize
operator|.
name|width
argument_list|()
operator|/
literal|4
operator|)
argument_list|)
expr_stmt|;
name|comboBox
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowShown
argument_list|(
operator|&
name|comboBox
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|comboBox
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|comboBox
operator|.
name|showPopup
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|comboBox
operator|.
name|view
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowShown
argument_list|(
name|comboBox
operator|.
name|view
argument_list|()
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|comboBox
operator|.
name|view
argument_list|()
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
name|QFrame
modifier|*
name|container
init|=
name|qFindChild
argument_list|<
name|QComboBoxPrivateContainer
operator|*
argument_list|>
argument_list|(
operator|&
name|comboBox
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|container
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|desktop
operator|.
name|screenGeometry
argument_list|(
name|container
argument_list|)
operator|.
name|contains
argument_list|(
name|container
operator|->
name|geometry
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|task247863_keyBoardSelection
name|void
name|tst_QComboBox
operator|::
name|task247863_keyBoardSelection
parameter_list|()
block|{
name|QComboBox
name|combo
decl_stmt|;
name|combo
operator|.
name|setEditable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|combo
operator|.
name|addItem
argument_list|(
name|QLatin1String
argument_list|(
literal|"111"
argument_list|)
argument_list|)
expr_stmt|;
name|combo
operator|.
name|addItem
argument_list|(
name|QLatin1String
argument_list|(
literal|"222"
argument_list|)
argument_list|)
expr_stmt|;
name|combo
operator|.
name|show
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|setActiveWindow
argument_list|(
operator|&
name|combo
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|QApplication
operator|::
name|activeWindow
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
operator|&
name|combo
argument_list|)
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
operator|&
name|combo
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|qApp
operator|->
name|setEffectEnabled
argument_list|(
name|Qt
operator|::
name|UI_AnimateCombo
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
operator|&
name|combo
argument_list|,
name|Qt
operator|::
name|Key_Space
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|setEffectEnabled
argument_list|(
name|Qt
operator|::
name|UI_AnimateCombo
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|Key_Down
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|combo
operator|.
name|currentText
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"222"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|task220195_keyBoardSelection2
name|void
name|tst_QComboBox
operator|::
name|task220195_keyBoardSelection2
parameter_list|()
block|{
name|QComboBox
name|combo
decl_stmt|;
name|combo
operator|.
name|setEditable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|combo
operator|.
name|addItem
argument_list|(
name|QLatin1String
argument_list|(
literal|"foo1"
argument_list|)
argument_list|)
expr_stmt|;
name|combo
operator|.
name|addItem
argument_list|(
name|QLatin1String
argument_list|(
literal|"foo2"
argument_list|)
argument_list|)
expr_stmt|;
name|combo
operator|.
name|addItem
argument_list|(
name|QLatin1String
argument_list|(
literal|"foo3"
argument_list|)
argument_list|)
expr_stmt|;
name|combo
operator|.
name|show
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|setActiveWindow
argument_list|(
operator|&
name|combo
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|QApplication
operator|::
name|activeWindow
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
operator|&
name|combo
argument_list|)
argument_list|)
expr_stmt|;
name|combo
operator|.
name|setCurrentIndex
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|combo
operator|.
name|currentText
argument_list|()
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
operator|&
name|combo
argument_list|,
literal|'f'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|combo
operator|.
name|currentText
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"foo1"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
name|QApplication
operator|::
name|keyboardInputInterval
argument_list|()
operator|+
literal|30
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
operator|&
name|combo
argument_list|,
literal|'f'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|combo
operator|.
name|currentText
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"foo2"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
name|QApplication
operator|::
name|keyboardInputInterval
argument_list|()
operator|+
literal|30
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
operator|&
name|combo
argument_list|,
literal|'f'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|combo
operator|.
name|currentText
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"foo3"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
name|QApplication
operator|::
name|keyboardInputInterval
argument_list|()
operator|+
literal|30
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
operator|&
name|combo
argument_list|,
literal|'f'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|combo
operator|.
name|currentText
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"foo1"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
name|QApplication
operator|::
name|keyboardInputInterval
argument_list|()
operator|+
literal|30
argument_list|)
expr_stmt|;
name|combo
operator|.
name|setCurrentIndex
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|combo
operator|.
name|currentText
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"foo2"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
operator|&
name|combo
argument_list|,
literal|'f'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|combo
operator|.
name|currentText
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"foo3"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setModelColumn
name|void
name|tst_QComboBox
operator|::
name|setModelColumn
parameter_list|()
block|{
name|QStandardItemModel
name|model
argument_list|(
literal|5
argument_list|,
literal|3
argument_list|)
decl_stmt|;
name|model
operator|.
name|setItem
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
operator|new
name|QStandardItem
argument_list|(
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setItem
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
operator|new
name|QStandardItem
argument_list|(
literal|"1"
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setItem
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
operator|new
name|QStandardItem
argument_list|(
literal|"2"
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setItem
argument_list|(
literal|3
argument_list|,
literal|0
argument_list|,
operator|new
name|QStandardItem
argument_list|(
literal|"3"
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setItem
argument_list|(
literal|4
argument_list|,
literal|0
argument_list|,
operator|new
name|QStandardItem
argument_list|(
literal|"4"
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setItem
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|,
operator|new
name|QStandardItem
argument_list|(
literal|"zero"
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setItem
argument_list|(
literal|1
argument_list|,
literal|1
argument_list|,
operator|new
name|QStandardItem
argument_list|(
literal|"un"
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setItem
argument_list|(
literal|2
argument_list|,
literal|1
argument_list|,
operator|new
name|QStandardItem
argument_list|(
literal|"deux"
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setItem
argument_list|(
literal|3
argument_list|,
literal|1
argument_list|,
operator|new
name|QStandardItem
argument_list|(
literal|"trois"
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setItem
argument_list|(
literal|4
argument_list|,
literal|1
argument_list|,
operator|new
name|QStandardItem
argument_list|(
literal|"quatre"
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setItem
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|,
operator|new
name|QStandardItem
argument_list|(
literal|"a"
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setItem
argument_list|(
literal|1
argument_list|,
literal|2
argument_list|,
operator|new
name|QStandardItem
argument_list|(
literal|"b"
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setItem
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|,
operator|new
name|QStandardItem
argument_list|(
literal|"c"
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setItem
argument_list|(
literal|3
argument_list|,
literal|2
argument_list|,
operator|new
name|QStandardItem
argument_list|(
literal|"d"
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setItem
argument_list|(
literal|4
argument_list|,
literal|2
argument_list|,
operator|new
name|QStandardItem
argument_list|(
literal|"e"
argument_list|)
argument_list|)
expr_stmt|;
name|QComboBox
name|box
decl_stmt|;
name|box
operator|.
name|setModel
argument_list|(
operator|&
name|model
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|currentText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|box
operator|.
name|setModelColumn
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|box
operator|.
name|currentText
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"zero"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|noScrollbar_data
name|void
name|tst_QComboBox
operator|::
name|noScrollbar_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"stylesheet"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"normal"
argument_list|)
operator|<<
name|QString
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"border"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"QAbstractItemView { border: 12px solid blue;}"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"margin"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"QAbstractItemView { margin: 12px 15px 13px 10px; }"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"padding"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"QAbstractItemView { padding: 12px 15px 13px 10px;}"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"everything"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"QAbstractItemView {  border: 12px  solid blue; "
literal|" padding: 12px 15px 13px 10px; margin: 12px 15px 13px 10px;  }"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"everything and more"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"QAbstractItemView {  border: 1px 3px 5px 1px solid blue; "
literal|" padding: 2px 5px 3px 1px; margin: 2px 5px 3px 1px;  } "
literal|" QAbstractItemView::item {  border: 2px solid green; "
literal|"                      padding: 1px 1px 2px 2px; margin: 1px; } "
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|noScrollbar
name|void
name|tst_QComboBox
operator|::
name|noScrollbar
parameter_list|()
block|{
name|QStringList
name|initialContent
decl_stmt|;
name|initialContent
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"foobar"
operator|<<
literal|"moo"
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|stylesheet
argument_list|)
expr_stmt|;
name|QString
name|oldCss
init|=
name|qApp
operator|->
name|styleSheet
argument_list|()
decl_stmt|;
name|qApp
operator|->
name|setStyleSheet
argument_list|(
name|stylesheet
argument_list|)
expr_stmt|;
block|{
name|QWidget
name|topLevel
decl_stmt|;
name|QComboBox
name|comboBox
argument_list|(
operator|&
name|topLevel
argument_list|)
decl_stmt|;
name|comboBox
operator|.
name|addItems
argument_list|(
name|initialContent
argument_list|)
expr_stmt|;
name|topLevel
operator|.
name|show
argument_list|()
expr_stmt|;
name|comboBox
operator|.
name|resize
argument_list|(
literal|200
argument_list|,
name|comboBox
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|comboBox
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|comboBox
operator|.
name|showPopup
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|comboBox
operator|.
name|view
argument_list|()
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|comboBox
operator|.
name|view
argument_list|()
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|comboBox
operator|.
name|view
argument_list|()
operator|->
name|horizontalScrollBar
argument_list|()
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|comboBox
operator|.
name|view
argument_list|()
operator|->
name|verticalScrollBar
argument_list|()
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|QTableWidget
modifier|*
name|table
init|=
operator|new
name|QTableWidget
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|QComboBox
name|comboBox
decl_stmt|;
name|comboBox
operator|.
name|setModel
argument_list|(
name|table
operator|->
name|model
argument_list|()
argument_list|)
expr_stmt|;
name|comboBox
operator|.
name|setView
argument_list|(
name|table
argument_list|)
expr_stmt|;
name|comboBox
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|comboBox
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|comboBox
operator|.
name|resize
argument_list|(
literal|200
argument_list|,
name|comboBox
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|comboBox
operator|.
name|showPopup
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|comboBox
operator|.
name|view
argument_list|()
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|comboBox
operator|.
name|view
argument_list|()
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|comboBox
operator|.
name|view
argument_list|()
operator|->
name|horizontalScrollBar
argument_list|()
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|comboBox
operator|.
name|view
argument_list|()
operator|->
name|verticalScrollBar
argument_list|()
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|qApp
operator|->
name|setStyleSheet
argument_list|(
name|oldCss
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setItemDelegate
name|void
name|tst_QComboBox
operator|::
name|setItemDelegate
parameter_list|()
block|{
name|QComboBox
name|comboBox
decl_stmt|;
name|QStyledItemDelegate
modifier|*
name|itemDelegate
init|=
operator|new
name|QStyledItemDelegate
decl_stmt|;
name|comboBox
operator|.
name|setItemDelegate
argument_list|(
name|itemDelegate
argument_list|)
expr_stmt|;
comment|// the cast is a workaround for the XLC and Metrowerks compilers
name|QCOMPARE
argument_list|(
cast|static_cast
argument_list|<
name|QStyledItemDelegate
operator|*
argument_list|>
argument_list|(
name|comboBox
operator|.
name|itemDelegate
argument_list|()
argument_list|)
argument_list|,
name|itemDelegate
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|task253944_itemDelegateIsReset
name|void
name|tst_QComboBox
operator|::
name|task253944_itemDelegateIsReset
parameter_list|()
block|{
name|QComboBox
name|comboBox
decl_stmt|;
name|QStyledItemDelegate
modifier|*
name|itemDelegate
init|=
operator|new
name|QStyledItemDelegate
decl_stmt|;
name|comboBox
operator|.
name|setItemDelegate
argument_list|(
name|itemDelegate
argument_list|)
expr_stmt|;
comment|// the casts are workarounds for the XLC and Metrowerks compilers
name|comboBox
operator|.
name|setEditable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
cast|static_cast
argument_list|<
name|QStyledItemDelegate
operator|*
argument_list|>
argument_list|(
name|comboBox
operator|.
name|itemDelegate
argument_list|()
argument_list|)
argument_list|,
name|itemDelegate
argument_list|)
expr_stmt|;
name|comboBox
operator|.
name|setStyleSheet
argument_list|(
literal|"QComboBox { border: 1px solid gray; }"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
cast|static_cast
argument_list|<
name|QStyledItemDelegate
operator|*
argument_list|>
argument_list|(
name|comboBox
operator|.
name|itemDelegate
argument_list|()
argument_list|)
argument_list|,
name|itemDelegate
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|subControlRectsWithOffset_data
name|void
name|tst_QComboBox
operator|::
name|subControlRectsWithOffset_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"editable"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"editable = true"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"editable = false"
argument_list|)
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|subControlRectsWithOffset
name|void
name|tst_QComboBox
operator|::
name|subControlRectsWithOffset
parameter_list|()
block|{
comment|// The sub control rect relative position should not depends
comment|// on the position of the combobox
class|class
name|FriendlyCombo
super|:
specifier|public
name|QComboBox
block|{
public|public:
name|void
name|styleOption
parameter_list|(
name|QStyleOptionComboBox
modifier|*
name|optCombo
parameter_list|)
block|{
name|initStyleOption
argument_list|(
name|optCombo
argument_list|)
expr_stmt|;
block|}
block|}
name|combo
class|;
name|QStyleOptionComboBox
name|optCombo
decl_stmt|;
name|combo
operator|.
name|styleOption
argument_list|(
operator|&
name|optCombo
argument_list|)
expr_stmt|;
specifier|const
name|QRect
name|rectAtOrigin
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
literal|80
argument_list|,
literal|30
argument_list|)
decl_stmt|;
specifier|const
name|QPoint
name|offset
argument_list|(
literal|25
argument_list|,
literal|50
argument_list|)
decl_stmt|;
specifier|const
name|QRect
name|rectWithOffset
init|=
name|rectAtOrigin
operator|.
name|translated
argument_list|(
name|offset
argument_list|)
decl_stmt|;
name|QStyle
modifier|*
name|style
init|=
name|combo
operator|.
name|style
argument_list|()
decl_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|editable
argument_list|)
expr_stmt|;
name|optCombo
operator|.
name|editable
operator|=
name|editable
expr_stmt|;
name|optCombo
operator|.
name|rect
operator|=
name|rectAtOrigin
expr_stmt|;
name|QRect
name|editFieldRect
init|=
name|style
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_ComboBox
argument_list|,
operator|&
name|optCombo
argument_list|,
name|QStyle
operator|::
name|SC_ComboBoxEditField
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QRect
name|arrowRect
init|=
name|style
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_ComboBox
argument_list|,
operator|&
name|optCombo
argument_list|,
name|QStyle
operator|::
name|SC_ComboBoxArrow
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QRect
name|listboxRect
init|=
name|style
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_ComboBox
argument_list|,
operator|&
name|optCombo
argument_list|,
name|QStyle
operator|::
name|SC_ComboBoxListBoxPopup
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|optCombo
operator|.
name|rect
operator|=
name|rectWithOffset
expr_stmt|;
name|QRect
name|editFieldRectWithOffset
init|=
name|style
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_ComboBox
argument_list|,
operator|&
name|optCombo
argument_list|,
name|QStyle
operator|::
name|SC_ComboBoxEditField
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QRect
name|arrowRectWithOffset
init|=
name|style
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_ComboBox
argument_list|,
operator|&
name|optCombo
argument_list|,
name|QStyle
operator|::
name|SC_ComboBoxArrow
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QRect
name|listboxRectWithOffset
init|=
name|style
operator|->
name|subControlRect
argument_list|(
name|QStyle
operator|::
name|CC_ComboBox
argument_list|,
operator|&
name|optCombo
argument_list|,
name|QStyle
operator|::
name|SC_ComboBoxListBoxPopup
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|editFieldRect
argument_list|,
name|editFieldRectWithOffset
operator|.
name|translated
argument_list|(
operator|-
name|offset
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|arrowRect
argument_list|,
name|arrowRectWithOffset
operator|.
name|translated
argument_list|(
operator|-
name|offset
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|listboxRect
argument_list|,
name|listboxRectWithOffset
operator|.
name|translated
argument_list|(
operator|-
name|offset
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// This test depends on Windows style.
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_STYLE_WINDOWS
end_ifndef
begin_function
DECL|function|task260974_menuItemRectangleForComboBoxPopup
name|void
name|tst_QComboBox
operator|::
name|task260974_menuItemRectangleForComboBoxPopup
parameter_list|()
block|{
class|class
name|TestStyle
super|:
specifier|public
name|QWindowsStyle
block|{
public|public:
name|int
name|styleHint
parameter_list|(
name|StyleHint
name|hint
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
parameter_list|,
name|QStyleHintReturn
modifier|*
name|ret
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|hint
operator|==
name|SH_ComboBox_Popup
condition|)
return|return
literal|1
return|;
else|else
return|return
name|QCommonStyle
operator|::
name|styleHint
argument_list|(
name|hint
argument_list|,
name|option
argument_list|,
name|widget
argument_list|,
name|ret
argument_list|)
return|;
block|}
name|void
name|drawControl
parameter_list|(
name|ControlElement
name|element
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|option
parameter_list|,
name|QPainter
modifier|*
parameter_list|,
specifier|const
name|QWidget
modifier|*
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|element
operator|==
name|CE_MenuItem
condition|)
name|discoveredRect
operator|=
name|option
operator|->
name|rect
expr_stmt|;
block|}
specifier|mutable
name|QRect
name|discoveredRect
decl_stmt|;
block|}
name|style
class|;
block|{
name|QComboBox
name|comboBox
decl_stmt|;
name|comboBox
operator|.
name|setStyle
argument_list|(
operator|&
name|style
argument_list|)
expr_stmt|;
name|comboBox
operator|.
name|addItem
argument_list|(
literal|"Item 1"
argument_list|)
expr_stmt|;
name|comboBox
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|comboBox
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|comboBox
operator|.
name|showPopup
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|comboBox
operator|.
name|view
argument_list|()
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|comboBox
operator|.
name|view
argument_list|()
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|style
operator|.
name|discoveredRect
operator|.
name|width
argument_list|()
operator|<=
name|comboBox
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|removeItem
name|void
name|tst_QComboBox
operator|::
name|removeItem
parameter_list|()
block|{
name|QComboBox
name|cb
decl_stmt|;
name|cb
operator|.
name|removeItem
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|cb
operator|.
name|removeItem
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|cb
operator|.
name|removeItem
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cb
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|cb
operator|.
name|addItem
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|removeItem
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cb
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cb
operator|.
name|removeItem
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cb
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|cb
operator|.
name|removeItem
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cb
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resetModel
name|void
name|tst_QComboBox
operator|::
name|resetModel
parameter_list|()
block|{
class|class
name|StringListModel
super|:
specifier|public
name|QStringListModel
block|{
public|public:
name|StringListModel
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|list
parameter_list|)
member_init_list|:
name|QStringListModel
argument_list|(
name|list
argument_list|)
block|{         }
name|void
name|reset
parameter_list|()
block|{
name|QStringListModel
operator|::
name|reset
argument_list|()
expr_stmt|;
block|}
block|}
class|;
name|QComboBox
name|cb
decl_stmt|;
name|StringListModel
name|model
argument_list|(
name|QStringList
argument_list|()
operator|<<
literal|"1"
operator|<<
literal|"2"
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spy
argument_list|(
operator|&
name|cb
argument_list|,
name|SIGNAL
argument_list|(
name|currentIndexChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cb
operator|.
name|currentIndex
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|//no selection
name|cb
operator|.
name|setModel
argument_list|(
operator|&
name|model
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cb
operator|.
name|currentIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//first item selected
name|model
operator|.
name|reset
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cb
operator|.
name|currentIndex
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|//no selection
block|}
end_function
begin_function
DECL|function|keyBoardNavigationWithMouse
name|void
name|tst_QComboBox
operator|::
name|keyBoardNavigationWithMouse
parameter_list|()
block|{
name|QComboBox
name|combo
decl_stmt|;
name|combo
operator|.
name|setEditable
argument_list|(
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|80
condition|;
name|i
operator|++
control|)
name|combo
operator|.
name|addItem
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|combo
operator|.
name|show
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|setActiveWindow
argument_list|(
operator|&
name|combo
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowShown
argument_list|(
operator|&
name|combo
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|QApplication
operator|::
name|activeWindow
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
operator|&
name|combo
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|combo
operator|.
name|currentText
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
name|combo
operator|.
name|setFocus
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|combo
operator|.
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|testWidget
operator|->
name|lineEdit
argument_list|()
argument_list|,
name|Qt
operator|::
name|Key_Space
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|combo
operator|.
name|view
argument_list|()
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|combo
operator|.
name|view
argument_list|()
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|130
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|combo
operator|.
name|currentText
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// When calling cursor function, Windows CE responds with: This function is not supported on this system.
ifndef|#
directive|ifndef
name|Q_OS_WINCE
comment|// Force cursor movement to prevent QCursor::setPos() from returning prematurely on QPA:
specifier|const
name|QPoint
name|target
argument_list|(
name|combo
operator|.
name|view
argument_list|()
operator|->
name|mapToGlobal
argument_list|(
name|combo
operator|.
name|view
argument_list|()
operator|->
name|rect
argument_list|()
operator|.
name|center
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QCursor
operator|::
name|setPos
argument_list|(
name|QPoint
argument_list|(
name|target
operator|.
name|x
argument_list|()
operator|+
literal|1
argument_list|,
name|target
operator|.
name|y
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCursor
operator|::
name|setPos
argument_list|(
name|target
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|200
argument_list|)
expr_stmt|;
DECL|macro|GET_SELECTION
define|#
directive|define
name|GET_SELECTION
parameter_list|(
name|SEL
parameter_list|)
define|\
value|QCOMPARE(combo.view()->selectionModel()->selection().count(), 1); \     QCOMPARE(combo.view()->selectionModel()->selection().indexes().count(), 1); \     SEL = combo.view()->selectionModel()->selection().indexes().first().row()
name|int
name|selection
decl_stmt|;
name|GET_SELECTION
argument_list|(
name|selection
argument_list|)
expr_stmt|;
comment|//since we moved the mouse is in the middle it should even be around 5;
name|QVERIFY
argument_list|(
name|selection
operator|>
literal|3
argument_list|)
expr_stmt|;
specifier|static
specifier|const
name|int
name|final
init|=
literal|40
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
name|selection
operator|+
literal|1
init|;
name|i
operator|<=
name|final
condition|;
name|i
operator|++
control|)
block|{
name|QTest
operator|::
name|keyClick
argument_list|(
name|combo
operator|.
name|view
argument_list|()
argument_list|,
name|Qt
operator|::
name|Key_Down
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|GET_SELECTION
argument_list|(
name|selection
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|selection
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|QTest
operator|::
name|keyClick
argument_list|(
name|combo
operator|.
name|view
argument_list|()
argument_list|,
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|combo
operator|.
name|currentText
argument_list|()
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|final
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|task_QTBUG_1071_changingFocusEmitsActivated
name|void
name|tst_QComboBox
operator|::
name|task_QTBUG_1071_changingFocusEmitsActivated
parameter_list|()
block|{
name|QWidget
name|w
decl_stmt|;
name|QVBoxLayout
name|layout
argument_list|(
operator|&
name|w
argument_list|)
decl_stmt|;
name|QComboBox
name|cb
decl_stmt|;
name|cb
operator|.
name|setEditable
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
operator|&
name|cb
argument_list|,
name|SIGNAL
argument_list|(
name|activated
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|cb
operator|.
name|addItem
argument_list|(
literal|"0"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|addItem
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|cb
operator|.
name|addItem
argument_list|(
literal|"2"
argument_list|)
expr_stmt|;
name|QLineEdit
name|edit
decl_stmt|;
name|layout
operator|.
name|addWidget
argument_list|(
operator|&
name|cb
argument_list|)
expr_stmt|;
name|layout
operator|.
name|addWidget
argument_list|(
operator|&
name|edit
argument_list|)
expr_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|setActiveWindow
argument_list|(
operator|&
name|w
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowShown
argument_list|(
operator|&
name|w
argument_list|)
expr_stmt|;
name|cb
operator|.
name|clearEditText
argument_list|()
expr_stmt|;
name|cb
operator|.
name|setFocus
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|cb
operator|.
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|'1'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|edit
operator|.
name|setFocus
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|edit
operator|.
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|maxVisibleItems
name|void
name|tst_QComboBox
operator|::
name|maxVisibleItems
parameter_list|()
block|{
name|QComboBox
name|comboBox
decl_stmt|;
name|QCOMPARE
argument_list|(
name|comboBox
operator|.
name|maxVisibleItems
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|//default value.
name|QStringList
name|content
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|50
condition|;
name|i
operator|++
control|)
name|content
operator|+=
name|QString
operator|::
name|number
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|comboBox
operator|.
name|addItems
argument_list|(
name|content
argument_list|)
expr_stmt|;
name|comboBox
operator|.
name|show
argument_list|()
expr_stmt|;
name|comboBox
operator|.
name|resize
argument_list|(
literal|200
argument_list|,
name|comboBox
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|comboBox
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|comboBox
operator|.
name|setMaxVisibleItems
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|comboBox
operator|.
name|maxVisibleItems
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|comboBox
operator|.
name|showPopup
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|comboBox
operator|.
name|view
argument_list|()
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|comboBox
operator|.
name|view
argument_list|()
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QAbstractItemView
modifier|*
name|v
init|=
name|comboBox
operator|.
name|view
argument_list|()
decl_stmt|;
name|int
name|itemHeight
init|=
name|v
operator|->
name|visualRect
argument_list|(
name|v
operator|->
name|model
argument_list|()
operator|->
name|index
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
operator|.
name|height
argument_list|()
decl_stmt|;
name|QListView
modifier|*
name|lv
init|=
name|qobject_cast
argument_list|<
name|QListView
operator|*
argument_list|>
argument_list|(
name|v
argument_list|)
decl_stmt|;
if|if
condition|(
name|lv
condition|)
name|itemHeight
operator|+=
name|lv
operator|->
name|spacing
argument_list|()
expr_stmt|;
name|QStyleOptionComboBox
name|opt
decl_stmt|;
name|opt
operator|.
name|initFrom
argument_list|(
operator|&
name|comboBox
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|comboBox
operator|.
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_ComboBox_Popup
argument_list|,
operator|&
name|opt
argument_list|)
condition|)
name|QCOMPARE
argument_list|(
name|v
operator|->
name|viewport
argument_list|()
operator|->
name|height
argument_list|()
argument_list|,
name|itemHeight
operator|*
name|comboBox
operator|.
name|maxVisibleItems
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|task_QTBUG_10491_currentIndexAndModelColumn
name|void
name|tst_QComboBox
operator|::
name|task_QTBUG_10491_currentIndexAndModelColumn
parameter_list|()
block|{
name|QComboBox
name|comboBox
decl_stmt|;
name|QStandardItemModel
name|model
argument_list|(
literal|4
argument_list|,
literal|4
argument_list|,
operator|&
name|comboBox
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|4
condition|;
name|i
operator|++
control|)
block|{
name|model
operator|.
name|setItem
argument_list|(
name|i
argument_list|,
literal|0
argument_list|,
operator|new
name|QStandardItem
argument_list|(
name|QString
argument_list|(
literal|"Employee Nr %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setItem
argument_list|(
name|i
argument_list|,
literal|1
argument_list|,
operator|new
name|QStandardItem
argument_list|(
name|QString
argument_list|(
literal|"Street Nr %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setItem
argument_list|(
name|i
argument_list|,
literal|2
argument_list|,
operator|new
name|QStandardItem
argument_list|(
name|QString
argument_list|(
literal|"Town Nr %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|model
operator|.
name|setItem
argument_list|(
name|i
argument_list|,
literal|3
argument_list|,
operator|new
name|QStandardItem
argument_list|(
name|QString
argument_list|(
literal|"Phone Nr %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|comboBox
operator|.
name|setModel
argument_list|(
operator|&
name|model
argument_list|)
expr_stmt|;
name|comboBox
operator|.
name|setModelColumn
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QComboBoxPrivate
modifier|*
name|d
init|=
cast|static_cast
argument_list|<
name|QComboBoxPrivate
operator|*
argument_list|>
argument_list|(
name|QComboBoxPrivate
operator|::
name|get
argument_list|(
operator|&
name|comboBox
argument_list|)
argument_list|)
decl_stmt|;
name|d
operator|->
name|setCurrentIndex
argument_list|(
name|model
operator|.
name|index
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QModelIndex
argument_list|(
name|d
operator|->
name|currentIndex
argument_list|)
argument_list|,
name|model
operator|.
name|index
argument_list|(
literal|2
argument_list|,
name|comboBox
operator|.
name|modelColumn
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QComboBox
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qcombobox.moc"
end_include
end_unit
