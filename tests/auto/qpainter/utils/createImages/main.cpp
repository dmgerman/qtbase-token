begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<qpixmap.h>
end_include
begin_include
include|#
directive|include
file|<qpainter.h>
end_include
begin_include
include|#
directive|include
file|<qbitmap.h>
end_include
begin_function
DECL|function|baseColor
specifier|static
name|QColor
name|baseColor
parameter_list|(
name|int
name|k
parameter_list|,
name|int
name|intensity
parameter_list|)
block|{
name|int
name|r
init|=
operator|(
name|k
operator|&
literal|1
operator|)
operator|*
name|intensity
decl_stmt|;
name|int
name|g
init|=
operator|(
operator|(
name|k
operator|>>
literal|1
operator|)
operator|&
literal|1
operator|)
operator|*
name|intensity
decl_stmt|;
name|int
name|b
init|=
operator|(
operator|(
name|k
operator|>>
literal|2
operator|)
operator|&
literal|1
operator|)
operator|*
name|intensity
decl_stmt|;
return|return
name|QColor
argument_list|(
name|r
argument_list|,
name|g
argument_list|,
name|b
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|createDestPixmap
specifier|static
name|QPixmap
name|createDestPixmap
parameter_list|()
block|{
specifier|const
name|int
name|colorbands
init|=
literal|3
decl_stmt|;
specifier|const
name|int
name|intensities
init|=
literal|4
decl_stmt|;
name|QPixmap
name|pm
argument_list|(
literal|32
argument_list|,
name|colorbands
operator|*
name|intensities
operator|*
literal|4
argument_list|)
decl_stmt|;
name|QPainter
name|painter
decl_stmt|;
name|painter
operator|.
name|begin
argument_list|(
operator|&
name|pm
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|colorbands
condition|;
name|i
operator|++
control|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|intensities
condition|;
name|j
operator|++
control|)
block|{
name|int
name|intensity
init|=
literal|255
operator|*
operator|(
name|j
operator|+
literal|1
operator|)
operator|/
name|intensities
decl_stmt|;
comment|// 25%, 50%, 75% and 100%
for|for
control|(
name|int
name|k
init|=
literal|0
init|;
name|k
operator|<
literal|8
condition|;
name|k
operator|++
control|)
block|{
name|QColor
name|col
init|=
name|baseColor
argument_list|(
name|k
argument_list|,
name|intensity
argument_list|)
decl_stmt|;
name|painter
operator|.
name|setPen
argument_list|(
name|QPen
argument_list|(
name|col
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|.
name|setBrush
argument_list|(
name|col
argument_list|)
expr_stmt|;
name|painter
operator|.
name|drawRect
argument_list|(
name|k
operator|*
literal|4
argument_list|,
name|j
operator|*
literal|4
operator|+
name|i
operator|*
name|intensities
operator|*
literal|4
argument_list|,
literal|4
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
block|}
block|}
name|painter
operator|.
name|end
argument_list|()
expr_stmt|;
return|return
name|pm
return|;
block|}
end_function
begin_function
DECL|function|createDestBitmap
specifier|static
name|QBitmap
name|createDestBitmap
parameter_list|()
block|{
comment|// create a bitmap that looks like:
comment|// (0 is color0 and 1 is color1)
comment|//  00001111
comment|//  00001111
comment|//  00001111
comment|//  00001111
comment|//  00001111
comment|//  00001111
comment|//  00001111
comment|//  00001111
name|QBitmap
name|bm
argument_list|(
literal|8
argument_list|,
literal|8
argument_list|)
decl_stmt|;
name|QPainter
name|painter
decl_stmt|;
name|painter
operator|.
name|begin
argument_list|(
operator|&
name|bm
argument_list|)
expr_stmt|;
name|painter
operator|.
name|setPen
argument_list|(
name|QPen
argument_list|(
name|Qt
operator|::
name|color0
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|.
name|drawLine
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|,
literal|2
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|painter
operator|.
name|setPen
argument_list|(
name|QPen
argument_list|(
name|Qt
operator|::
name|color1
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|.
name|drawLine
argument_list|(
literal|6
argument_list|,
literal|0
argument_list|,
literal|6
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|painter
operator|.
name|end
argument_list|()
expr_stmt|;
return|return
name|bm
return|;
block|}
end_function
begin_function
DECL|function|createSrcBitmap
specifier|static
name|QBitmap
name|createSrcBitmap
parameter_list|(
name|int
name|size
parameter_list|,
name|int
name|border
parameter_list|)
block|{
comment|// create the source bitmap that looks like
comment|// (for size=4 and border=2):
comment|//
comment|//
comment|//    1111
comment|//    1111
comment|//    0000
comment|//    0000
comment|//
comment|//
comment|// If \a border is 0, the bitmap does not have a mask, otherwise the inner
comment|// part is masked.
comment|// \a size specifies the size of the inner (i.e. masked) part. It should be
comment|// a multiple of 2.
name|int
name|size2
init|=
name|size
operator|/
literal|2
decl_stmt|;
name|int
name|totalSize
init|=
literal|2
operator|*
operator|(
name|size2
operator|+
name|border
operator|)
decl_stmt|;
name|QBitmap
name|bm
argument_list|(
name|totalSize
argument_list|,
name|totalSize
argument_list|)
decl_stmt|;
name|QPainter
name|painter
decl_stmt|;
name|painter
operator|.
name|begin
argument_list|(
operator|&
name|bm
argument_list|)
expr_stmt|;
name|painter
operator|.
name|setPen
argument_list|(
name|QPen
argument_list|(
name|Qt
operator|::
name|color0
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|.
name|setBrush
argument_list|(
name|Qt
operator|::
name|color0
argument_list|)
expr_stmt|;
name|painter
operator|.
name|drawRect
argument_list|(
name|border
argument_list|,
name|size2
operator|+
name|border
argument_list|,
name|size
argument_list|,
name|size2
argument_list|)
expr_stmt|;
name|painter
operator|.
name|setPen
argument_list|(
name|QPen
argument_list|(
name|Qt
operator|::
name|color1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|.
name|setBrush
argument_list|(
name|Qt
operator|::
name|color1
argument_list|)
expr_stmt|;
name|painter
operator|.
name|drawRect
argument_list|(
name|border
argument_list|,
name|border
argument_list|,
name|size
argument_list|,
name|size2
argument_list|)
expr_stmt|;
name|painter
operator|.
name|end
argument_list|()
expr_stmt|;
if|if
condition|(
name|border
operator|>
literal|0
condition|)
block|{
name|QBitmap
name|mask
argument_list|(
name|totalSize
argument_list|,
name|totalSize
argument_list|,
name|TRUE
argument_list|)
decl_stmt|;
name|QPainter
name|painter
decl_stmt|;
name|painter
operator|.
name|begin
argument_list|(
operator|&
name|mask
argument_list|)
expr_stmt|;
name|painter
operator|.
name|setPen
argument_list|(
name|QPen
argument_list|(
name|Qt
operator|::
name|color1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|.
name|setBrush
argument_list|(
name|Qt
operator|::
name|color1
argument_list|)
expr_stmt|;
name|painter
operator|.
name|drawRect
argument_list|(
name|border
argument_list|,
name|border
argument_list|,
name|size
argument_list|,
name|size
argument_list|)
expr_stmt|;
name|painter
operator|.
name|end
argument_list|()
expr_stmt|;
name|bm
operator|.
name|setMask
argument_list|(
name|mask
argument_list|)
expr_stmt|;
block|}
return|return
name|bm
return|;
block|}
end_function
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
modifier|*
name|argv
parameter_list|)
block|{
name|QApplication
name|a
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
comment|// input for tst_QPainter::drawLine_rop_bitmap()
block|{
name|QBitmap
name|dst
init|=
name|createDestBitmap
argument_list|()
decl_stmt|;
name|dst
operator|.
name|save
argument_list|(
literal|"../../drawLine_rop_bitmap/dst.xbm"
argument_list|,
literal|"XBM"
argument_list|)
expr_stmt|;
block|}
comment|// input for tst_QPainter::drawPixmap_rop_bitmap()
block|{
name|QBitmap
name|dst
init|=
name|createDestBitmap
argument_list|()
decl_stmt|;
name|QBitmap
name|src1
init|=
name|createSrcBitmap
argument_list|(
literal|4
argument_list|,
literal|2
argument_list|)
decl_stmt|;
name|QBitmap
name|src2
init|=
name|createSrcBitmap
argument_list|(
literal|4
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|dst
operator|.
name|save
argument_list|(
literal|"../../drawPixmap_rop_bitmap/dst.xbm"
argument_list|,
literal|"XBM"
argument_list|)
expr_stmt|;
name|src1
operator|.
name|save
argument_list|(
literal|"../../drawPixmap_rop_bitmap/src1.xbm"
argument_list|,
literal|"XBM"
argument_list|)
expr_stmt|;
name|src1
operator|.
name|mask
argument_list|()
operator|->
name|save
argument_list|(
literal|"../../drawPixmap_rop_bitmap/src1-mask.xbm"
argument_list|,
literal|"XBM"
argument_list|)
expr_stmt|;
name|src2
operator|.
name|save
argument_list|(
literal|"../../drawPixmap_rop_bitmap/src2.xbm"
argument_list|,
literal|"XBM"
argument_list|)
expr_stmt|;
block|}
comment|// input for tst_QPainter::drawPixmap_rop()
block|{
name|QPixmap
name|dst1
init|=
name|createDestPixmap
argument_list|()
decl_stmt|;
name|QPixmap
name|dst2
init|=
name|createDestPixmap
argument_list|()
decl_stmt|;
name|dst2
operator|.
name|resize
argument_list|(
literal|32
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|QBitmap
name|src1
init|=
name|createSrcBitmap
argument_list|(
literal|32
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QBitmap
name|src_tmp
init|=
name|createSrcBitmap
argument_list|(
literal|32
argument_list|,
literal|0
argument_list|)
operator|.
name|xForm
argument_list|(
name|QWMatrix
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|src_tmp
operator|.
name|resize
argument_list|(
literal|32
argument_list|,
literal|48
argument_list|)
expr_stmt|;
name|QBitmap
name|src2
init|=
name|src_tmp
operator|.
name|xForm
argument_list|(
name|QWMatrix
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|QBitmap
name|mask
argument_list|(
literal|32
argument_list|,
literal|48
argument_list|,
name|TRUE
argument_list|)
decl_stmt|;
block|{
name|QPainter
name|painter
decl_stmt|;
name|painter
operator|.
name|begin
argument_list|(
operator|&
name|mask
argument_list|)
expr_stmt|;
name|painter
operator|.
name|setPen
argument_list|(
name|QPen
argument_list|(
name|Qt
operator|::
name|color1
argument_list|,
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|.
name|setBrush
argument_list|(
name|Qt
operator|::
name|color1
argument_list|)
expr_stmt|;
name|painter
operator|.
name|drawRect
argument_list|(
literal|0
argument_list|,
literal|16
argument_list|,
literal|32
argument_list|,
literal|32
argument_list|)
expr_stmt|;
name|painter
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
name|src2
operator|.
name|setMask
argument_list|(
name|mask
argument_list|)
expr_stmt|;
name|QBitmap
name|src3
init|=
name|createSrcBitmap
argument_list|(
literal|32
argument_list|,
literal|0
argument_list|)
operator|.
name|xForm
argument_list|(
name|QWMatrix
argument_list|(
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
operator|-
literal|1
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|dst1
operator|.
name|save
argument_list|(
literal|"../../drawPixmap_rop/dst1.png"
argument_list|,
literal|"PNG"
argument_list|)
expr_stmt|;
name|dst2
operator|.
name|save
argument_list|(
literal|"../../drawPixmap_rop/dst2.png"
argument_list|,
literal|"PNG"
argument_list|)
expr_stmt|;
name|src1
operator|.
name|save
argument_list|(
literal|"../../drawPixmap_rop/src1.xbm"
argument_list|,
literal|"XBM"
argument_list|)
expr_stmt|;
name|src2
operator|.
name|save
argument_list|(
literal|"../../drawPixmap_rop/src2.xbm"
argument_list|,
literal|"XBM"
argument_list|)
expr_stmt|;
name|src2
operator|.
name|mask
argument_list|()
operator|->
name|save
argument_list|(
literal|"../../drawPixmap_rop/src2-mask.xbm"
argument_list|,
literal|"XBM"
argument_list|)
expr_stmt|;
name|src3
operator|.
name|save
argument_list|(
literal|"../../drawPixmap_rop/src3.xbm"
argument_list|,
literal|"XBM"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
end_unit
