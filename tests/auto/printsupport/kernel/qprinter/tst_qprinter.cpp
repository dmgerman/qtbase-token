begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qprinter.h>
end_include
begin_include
include|#
directive|include
file|<qpagesetupdialog.h>
end_include
begin_include
include|#
directive|include
file|<qpainter.h>
end_include
begin_include
include|#
directive|include
file|<qprintdialog.h>
end_include
begin_include
include|#
directive|include
file|<qprintpreviewdialog.h>
end_include
begin_include
include|#
directive|include
file|<qprintpreviewwidget.h>
end_include
begin_include
include|#
directive|include
file|<qprinterinfo.h>
end_include
begin_include
include|#
directive|include
file|<qvariant.h>
end_include
begin_include
include|#
directive|include
file|<qpainter.h>
end_include
begin_include
include|#
directive|include
file|<qprintengine.h>
end_include
begin_include
include|#
directive|include
file|<qpagelayout.h>
end_include
begin_include
include|#
directive|include
file|<math.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_WIN
end_ifdef
begin_include
include|#
directive|include
file|<windows.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|QT_FORWARD_DECLARE_CLASS
argument_list|(
argument|QPrinter
argument_list|)
end_macro
begin_comment
comment|// Helper class to make sure temp files are cleaned up after test complete
end_comment
begin_class
DECL|class|TempFileCleanup
class|class
name|TempFileCleanup
block|{
public|public:
DECL|function|TempFileCleanup
name|TempFileCleanup
parameter_list|(
specifier|const
name|QString
modifier|&
name|file
parameter_list|)
member_init_list|:
name|m_file
argument_list|(
name|file
argument_list|)
block|{     }
DECL|function|~TempFileCleanup
name|~
name|TempFileCleanup
parameter_list|()
block|{
name|QFile
operator|::
name|remove
argument_list|(
name|m_file
argument_list|)
expr_stmt|;
block|}
private|private:
DECL|member|m_file
name|QString
name|m_file
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|tst_QPrinter
class|class
name|tst_QPrinter
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
ifdef|#
directive|ifdef
name|QT_NO_PRINTER
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
else|#
directive|else
private|private
name|slots
private|:
name|void
name|testPageRectAndPaperRect
parameter_list|()
function_decl|;
name|void
name|testPageRectAndPaperRect_data
parameter_list|()
function_decl|;
name|void
name|testSetOptions
parameter_list|()
function_decl|;
name|void
name|testMargins_data
parameter_list|()
function_decl|;
name|void
name|testMargins
parameter_list|()
function_decl|;
name|void
name|testPageSetupDialog
parameter_list|()
function_decl|;
name|void
name|testPrintPreviewDialog
parameter_list|()
function_decl|;
name|void
name|testMulitpleSets_data
parameter_list|()
function_decl|;
name|void
name|testMulitpleSets
parameter_list|()
function_decl|;
name|void
name|testPageMargins_data
parameter_list|()
function_decl|;
name|void
name|testPageMargins
parameter_list|()
function_decl|;
name|void
name|outputFormatFromSuffix
parameter_list|()
function_decl|;
name|void
name|errorReporting
parameter_list|()
function_decl|;
name|void
name|testCustomPageSizes
parameter_list|()
function_decl|;
name|void
name|customPaperSizeAndMargins_data
parameter_list|()
function_decl|;
name|void
name|customPaperSizeAndMargins
parameter_list|()
function_decl|;
name|void
name|customPaperNameSettingBySize
parameter_list|()
function_decl|;
name|void
name|customPaperNameSettingByName
parameter_list|()
function_decl|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_COMPLETER
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_FILEDIALOG
argument_list|)
name|void
name|printDialogCompleter
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|testCurrentPage
parameter_list|()
function_decl|;
name|void
name|taskQTBUG4497_reusePrinterOnDifferentFiles
parameter_list|()
function_decl|;
name|void
name|testPdfTitle
parameter_list|()
function_decl|;
comment|// Test QPrintEngine keys and their QPrinter setters/getters
name|void
name|testMultipleKeys
parameter_list|()
function_decl|;
name|void
name|collateCopies
parameter_list|()
function_decl|;
name|void
name|colorMode
parameter_list|()
function_decl|;
name|void
name|copyCount
parameter_list|()
function_decl|;
name|void
name|creator
parameter_list|()
function_decl|;
name|void
name|docName
parameter_list|()
function_decl|;
name|void
name|doubleSidedPrinting
parameter_list|()
function_decl|;
name|void
name|duplex
parameter_list|()
function_decl|;
name|void
name|fontEmbedding
parameter_list|()
function_decl|;
name|void
name|fullPage
parameter_list|()
function_decl|;
name|void
name|orientation
parameter_list|()
function_decl|;
name|void
name|outputFileName
parameter_list|()
function_decl|;
name|void
name|pageOrder
parameter_list|()
function_decl|;
name|void
name|pageSize
parameter_list|()
function_decl|;
name|void
name|paperSize
parameter_list|()
function_decl|;
name|void
name|paperSource
parameter_list|()
function_decl|;
name|void
name|printerName
parameter_list|()
function_decl|;
name|void
name|printerSelectionOption
parameter_list|()
function_decl|;
name|void
name|printProgram
parameter_list|()
function_decl|;
name|void
name|printRange
parameter_list|()
function_decl|;
name|void
name|resolution
parameter_list|()
function_decl|;
name|void
name|supportedPaperSources
parameter_list|()
function_decl|;
name|void
name|supportedResolutions
parameter_list|()
function_decl|;
name|void
name|windowsPageSize
parameter_list|()
function_decl|;
comment|// Test QPrinter setters/getters for non-QPrintEngine options
name|void
name|outputFormat
parameter_list|()
function_decl|;
name|void
name|fromToPage
parameter_list|()
function_decl|;
name|void
name|testPageMetrics_data
parameter_list|()
function_decl|;
name|void
name|testPageMetrics
parameter_list|()
function_decl|;
endif|#
directive|endif
block|}
class|;
end_class
begin_ifdef
ifdef|#
directive|ifdef
name|QT_NO_PRINTER
end_ifdef
begin_function
DECL|function|initTestCase
name|void
name|tst_QPrinter
operator|::
name|initTestCase
parameter_list|()
block|{
name|QSKIP
argument_list|(
literal|"This test requires printing support"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_QPrinter
operator|::
name|cleanupTestCase
parameter_list|()
block|{
name|QSKIP
argument_list|(
literal|"This test requires printing support"
argument_list|)
expr_stmt|;
block|}
end_function
begin_else
else|#
directive|else
end_else
begin_define
DECL|macro|MYCOMPARE
define|#
directive|define
name|MYCOMPARE
parameter_list|(
name|a
parameter_list|,
name|b
parameter_list|)
value|QCOMPARE(QVariant((int)a), QVariant((int)b))
end_define
begin_function
DECL|function|testPageSetupDialog
name|void
name|tst_QPrinter
operator|::
name|testPageSetupDialog
parameter_list|()
block|{
comment|// Make sure this doesn't crash at least
block|{
name|QPrinter
name|printer
decl_stmt|;
name|QPageSetupDialog
name|dialog
argument_list|(
operator|&
name|printer
argument_list|)
decl_stmt|;
block|}
block|}
end_function
begin_comment
comment|// A preview dialog showing 4 pages for testPrintPreviewDialog().
end_comment
begin_class
DECL|class|MyPreviewDialog
class|class
name|MyPreviewDialog
super|:
specifier|public
name|QPrintPreviewDialog
block|{
name|Q_OBJECT
public|public:
DECL|function|MyPreviewDialog
name|MyPreviewDialog
parameter_list|(
name|QPrinter
modifier|*
name|p
parameter_list|)
member_init_list|:
name|QPrintPreviewDialog
argument_list|(
name|p
argument_list|)
block|{
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|paintRequested
argument_list|(
name|QPrinter
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|slotPaintRequested
argument_list|(
name|QPrinter
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
public|public
name|slots
public|:
name|void
name|slotPaintRequested
parameter_list|(
name|QPrinter
modifier|*
name|p
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|slotPaintRequested
name|void
name|MyPreviewDialog
operator|::
name|slotPaintRequested
parameter_list|(
name|QPrinter
modifier|*
name|p
parameter_list|)
block|{
enum|enum
block|{
name|pageCount
init|=
literal|4
block|}
enum|;
name|QPainter
name|painter
decl_stmt|;
name|painter
operator|.
name|begin
argument_list|(
name|p
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|pageCount
condition|;
operator|++
name|i
control|)
block|{
specifier|const
name|QRect
name|f
init|=
name|p
operator|->
name|pageRect
argument_list|(
name|QPrinter
operator|::
name|DevicePixel
argument_list|)
operator|.
name|toRect
argument_list|()
decl_stmt|;
name|painter
operator|.
name|fillRect
argument_list|(
name|f
argument_list|,
name|Qt
operator|::
name|white
argument_list|)
expr_stmt|;
name|painter
operator|.
name|drawText
argument_list|(
name|f
operator|.
name|center
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Page %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|!=
name|pageCount
operator|-
literal|1
condition|)
name|p
operator|->
name|newPage
argument_list|()
expr_stmt|;
block|}
name|painter
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testPrintPreviewDialog
name|void
name|tst_QPrinter
operator|::
name|testPrintPreviewDialog
parameter_list|()
block|{
comment|// QTBUG-14517: Showing the dialog with Qt::WindowMaximized caused it to switch to
comment|// page 2 due to the scrollbar logic (besides testing for crashes).
name|QPrinter
name|printer
decl_stmt|;
name|MyPreviewDialog
name|dialog
argument_list|(
operator|&
name|printer
argument_list|)
decl_stmt|;
name|dialog
operator|.
name|setWindowState
argument_list|(
name|Qt
operator|::
name|WindowMaximized
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|show
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|QTest
operator|::
name|qWaitForWindowExposed
argument_list|(
operator|&
name|dialog
argument_list|)
argument_list|)
expr_stmt|;
name|QPrintPreviewWidget
modifier|*
name|widget
init|=
name|dialog
operator|.
name|findChild
argument_list|<
name|QPrintPreviewWidget
operator|*
argument_list|>
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|widget
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|widget
operator|->
name|currentPage
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testPageRectAndPaperRect_data
name|void
name|tst_QPrinter
operator|::
name|testPageRectAndPaperRect_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"orientation"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"withPainter"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"resolution"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"doPaperRect"
argument_list|)
expr_stmt|;
comment|// paperrect
name|QTest
operator|::
name|newRow
argument_list|(
literal|"paperRect0"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|Portrait
argument_list|)
operator|<<
literal|true
operator|<<
literal|300
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"paperRect1"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|Portrait
argument_list|)
operator|<<
literal|false
operator|<<
literal|300
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"paperRect2"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|Landscape
argument_list|)
operator|<<
literal|true
operator|<<
literal|300
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"paperRect3"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|Landscape
argument_list|)
operator|<<
literal|false
operator|<<
literal|300
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"paperRect4"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|Portrait
argument_list|)
operator|<<
literal|true
operator|<<
literal|600
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"paperRect5"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|Portrait
argument_list|)
operator|<<
literal|false
operator|<<
literal|600
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"paperRect6"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|Landscape
argument_list|)
operator|<<
literal|true
operator|<<
literal|600
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"paperRect7"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|Landscape
argument_list|)
operator|<<
literal|false
operator|<<
literal|600
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"paperRect8"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|Portrait
argument_list|)
operator|<<
literal|true
operator|<<
literal|1200
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"paperRect9"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|Portrait
argument_list|)
operator|<<
literal|false
operator|<<
literal|1200
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"paperRect10"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|Landscape
argument_list|)
operator|<<
literal|true
operator|<<
literal|1200
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"paperRect11"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|Landscape
argument_list|)
operator|<<
literal|false
operator|<<
literal|1200
operator|<<
literal|true
expr_stmt|;
comment|// page rect
name|QTest
operator|::
name|newRow
argument_list|(
literal|"pageRect0"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|Portrait
argument_list|)
operator|<<
literal|true
operator|<<
literal|300
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"pageRect1"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|Portrait
argument_list|)
operator|<<
literal|false
operator|<<
literal|300
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"pageRect2"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|Landscape
argument_list|)
operator|<<
literal|true
operator|<<
literal|300
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"pageRect3"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|Landscape
argument_list|)
operator|<<
literal|false
operator|<<
literal|300
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"pageRect4"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|Portrait
argument_list|)
operator|<<
literal|true
operator|<<
literal|600
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"pageRect5"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|Portrait
argument_list|)
operator|<<
literal|false
operator|<<
literal|600
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"pageRect6"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|Landscape
argument_list|)
operator|<<
literal|true
operator|<<
literal|600
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"pageRect7"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|Landscape
argument_list|)
operator|<<
literal|false
operator|<<
literal|600
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"pageRect8"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|Portrait
argument_list|)
operator|<<
literal|true
operator|<<
literal|1200
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"pageRect9"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|Portrait
argument_list|)
operator|<<
literal|false
operator|<<
literal|1200
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"pageRect10"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|Landscape
argument_list|)
operator|<<
literal|true
operator|<<
literal|1200
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"pageRect11"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|Landscape
argument_list|)
operator|<<
literal|false
operator|<<
literal|1200
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testPageRectAndPaperRect
name|void
name|tst_QPrinter
operator|::
name|testPageRectAndPaperRect
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|withPainter
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|orientation
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|resolution
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|doPaperRect
argument_list|)
expr_stmt|;
name|QPainter
modifier|*
name|painter
init|=
literal|0
decl_stmt|;
name|QPrinter
name|printer
argument_list|(
name|QPrinter
operator|::
name|HighResolution
argument_list|)
decl_stmt|;
name|printer
operator|.
name|setOrientation
argument_list|(
name|QPrinter
operator|::
name|Orientation
argument_list|(
name|orientation
argument_list|)
argument_list|)
expr_stmt|;
name|printer
operator|.
name|setOutputFileName
argument_list|(
literal|"silly"
argument_list|)
expr_stmt|;
name|TempFileCleanup
name|tmpFile
argument_list|(
literal|"silly"
argument_list|)
decl_stmt|;
name|QRect
name|pageRect
init|=
name|doPaperRect
condition|?
name|printer
operator|.
name|paperRect
argument_list|()
else|:
name|printer
operator|.
name|pageRect
argument_list|()
decl_stmt|;
name|float
name|inchesX
init|=
name|float
argument_list|(
name|pageRect
operator|.
name|width
argument_list|()
argument_list|)
operator|/
name|float
argument_list|(
name|printer
operator|.
name|resolution
argument_list|()
argument_list|)
decl_stmt|;
name|float
name|inchesY
init|=
name|float
argument_list|(
name|pageRect
operator|.
name|height
argument_list|()
argument_list|)
operator|/
name|float
argument_list|(
name|printer
operator|.
name|resolution
argument_list|()
argument_list|)
decl_stmt|;
name|printer
operator|.
name|setResolution
argument_list|(
name|resolution
argument_list|)
expr_stmt|;
if|if
condition|(
name|withPainter
condition|)
name|painter
operator|=
operator|new
name|QPainter
argument_list|(
operator|&
name|printer
argument_list|)
expr_stmt|;
name|QRect
name|otherRect
init|=
name|doPaperRect
condition|?
name|printer
operator|.
name|paperRect
argument_list|()
else|:
name|printer
operator|.
name|pageRect
argument_list|()
decl_stmt|;
name|float
name|otherInchesX
init|=
name|float
argument_list|(
name|otherRect
operator|.
name|width
argument_list|()
argument_list|)
operator|/
name|float
argument_list|(
name|printer
operator|.
name|resolution
argument_list|()
argument_list|)
decl_stmt|;
name|float
name|otherInchesY
init|=
name|float
argument_list|(
name|otherRect
operator|.
name|height
argument_list|()
argument_list|)
operator|/
name|float
argument_list|(
name|printer
operator|.
name|resolution
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|painter
operator|!=
literal|0
condition|)
operator|delete
name|painter
expr_stmt|;
name|QVERIFY
argument_list|(
name|qAbs
argument_list|(
name|otherInchesX
operator|-
name|inchesX
argument_list|)
operator|<
literal|0.01
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qAbs
argument_list|(
name|otherInchesY
operator|-
name|inchesY
argument_list|)
operator|<
literal|0.01
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|printer
operator|.
name|orientation
argument_list|()
operator|==
name|QPrinter
operator|::
name|Portrait
operator|||
name|pageRect
operator|.
name|width
argument_list|()
operator|>
name|pageRect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|printer
operator|.
name|orientation
argument_list|()
operator|!=
name|QPrinter
operator|::
name|Portrait
operator|||
name|pageRect
operator|.
name|width
argument_list|()
operator|<
name|pageRect
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testSetOptions
name|void
name|tst_QPrinter
operator|::
name|testSetOptions
parameter_list|()
block|{
name|QPrinter
name|prn
decl_stmt|;
name|QPrintDialog
name|dlg
argument_list|(
operator|&
name|prn
argument_list|)
decl_stmt|;
comment|// Verify default values
name|MYCOMPARE
argument_list|(
name|dlg
operator|.
name|isOptionEnabled
argument_list|(
name|QAbstractPrintDialog
operator|::
name|PrintToFile
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MYCOMPARE
argument_list|(
name|dlg
operator|.
name|isOptionEnabled
argument_list|(
name|QAbstractPrintDialog
operator|::
name|PrintSelection
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|MYCOMPARE
argument_list|(
name|dlg
operator|.
name|isOptionEnabled
argument_list|(
name|QAbstractPrintDialog
operator|::
name|PrintPageRange
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dlg
operator|.
name|setEnabledOptions
argument_list|(
name|QAbstractPrintDialog
operator|::
name|PrintPageRange
argument_list|)
expr_stmt|;
name|MYCOMPARE
argument_list|(
name|dlg
operator|.
name|isOptionEnabled
argument_list|(
name|QAbstractPrintDialog
operator|::
name|PrintToFile
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|MYCOMPARE
argument_list|(
name|dlg
operator|.
name|isOptionEnabled
argument_list|(
name|QAbstractPrintDialog
operator|::
name|PrintSelection
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|MYCOMPARE
argument_list|(
name|dlg
operator|.
name|isOptionEnabled
argument_list|(
name|QAbstractPrintDialog
operator|::
name|PrintPageRange
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dlg
operator|.
name|setEnabledOptions
argument_list|(
operator|(
name|QAbstractPrintDialog
operator|::
name|PrintDialogOptions
argument_list|(
name|QAbstractPrintDialog
operator|::
name|PrintSelection
operator||
name|QAbstractPrintDialog
operator|::
name|PrintPageRange
argument_list|)
operator|)
argument_list|)
expr_stmt|;
name|MYCOMPARE
argument_list|(
name|dlg
operator|.
name|isOptionEnabled
argument_list|(
name|QAbstractPrintDialog
operator|::
name|PrintToFile
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|MYCOMPARE
argument_list|(
name|dlg
operator|.
name|isOptionEnabled
argument_list|(
name|QAbstractPrintDialog
operator|::
name|PrintSelection
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MYCOMPARE
argument_list|(
name|dlg
operator|.
name|isOptionEnabled
argument_list|(
name|QAbstractPrintDialog
operator|::
name|PrintPageRange
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|dlg
operator|.
name|setEnabledOptions
argument_list|(
name|QAbstractPrintDialog
operator|::
name|PrintSelection
argument_list|)
expr_stmt|;
name|MYCOMPARE
argument_list|(
name|dlg
operator|.
name|isOptionEnabled
argument_list|(
name|QAbstractPrintDialog
operator|::
name|PrintToFile
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|MYCOMPARE
argument_list|(
name|dlg
operator|.
name|isOptionEnabled
argument_list|(
name|QAbstractPrintDialog
operator|::
name|PrintSelection
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|MYCOMPARE
argument_list|(
name|dlg
operator|.
name|isOptionEnabled
argument_list|(
name|QAbstractPrintDialog
operator|::
name|PrintPageRange
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testMargins_data
name|void
name|tst_QPrinter
operator|::
name|testMargins_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"orientation"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"fullpage"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"pagesize"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"width"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"height"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"withPainter"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data0"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|Portrait
argument_list|)
operator|<<
literal|true
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|A4
argument_list|)
operator|<<
literal|210
operator|<<
literal|297
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|Landscape
argument_list|)
operator|<<
literal|true
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|A4
argument_list|)
operator|<<
literal|297
operator|<<
literal|210
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|Landscape
argument_list|)
operator|<<
literal|false
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|A4
argument_list|)
operator|<<
literal|297
operator|<<
literal|210
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data3"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|Portrait
argument_list|)
operator|<<
literal|false
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|A4
argument_list|)
operator|<<
literal|210
operator|<<
literal|297
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data4"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|Portrait
argument_list|)
operator|<<
literal|true
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|A4
argument_list|)
operator|<<
literal|210
operator|<<
literal|297
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data5"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|Landscape
argument_list|)
operator|<<
literal|true
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|A4
argument_list|)
operator|<<
literal|297
operator|<<
literal|210
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data6"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|Landscape
argument_list|)
operator|<<
literal|false
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|A4
argument_list|)
operator|<<
literal|297
operator|<<
literal|210
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data7"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|Portrait
argument_list|)
operator|<<
literal|false
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|A4
argument_list|)
operator|<<
literal|210
operator|<<
literal|297
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testMargins
name|void
name|tst_QPrinter
operator|::
name|testMargins
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|withPainter
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|orientation
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|pagesize
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|width
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|height
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|fullpage
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|width
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|height
argument_list|)
expr_stmt|;
name|QPrinter
name|printer
decl_stmt|;
name|QPainter
modifier|*
name|painter
init|=
literal|0
decl_stmt|;
name|printer
operator|.
name|setOutputFileName
argument_list|(
literal|"silly"
argument_list|)
expr_stmt|;
name|printer
operator|.
name|setOrientation
argument_list|(
operator|(
name|QPrinter
operator|::
name|Orientation
operator|)
name|orientation
argument_list|)
expr_stmt|;
name|printer
operator|.
name|setFullPage
argument_list|(
name|fullpage
argument_list|)
expr_stmt|;
name|printer
operator|.
name|setPageSize
argument_list|(
operator|(
name|QPrinter
operator|::
name|PageSize
operator|)
name|pagesize
argument_list|)
expr_stmt|;
if|if
condition|(
name|withPainter
condition|)
name|painter
operator|=
operator|new
name|QPainter
argument_list|(
operator|&
name|printer
argument_list|)
expr_stmt|;
if|if
condition|(
name|painter
condition|)
operator|delete
name|painter
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
literal|"silly"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testMulitpleSets_data
name|void
name|tst_QPrinter
operator|::
name|testMulitpleSets_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"resolution"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"pageSize"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"widthMMAfter"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"heightMMAfter"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"lowRes"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|ScreenResolution
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|A4
argument_list|)
operator|<<
literal|210
operator|<<
literal|297
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"lowResLetter"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|ScreenResolution
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|Letter
argument_list|)
operator|<<
literal|216
operator|<<
literal|279
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"lowResA5"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|ScreenResolution
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|A5
argument_list|)
operator|<<
literal|148
operator|<<
literal|210
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"midRes"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|PrinterResolution
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|A4
argument_list|)
operator|<<
literal|210
operator|<<
literal|297
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"midResLetter"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|PrinterResolution
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|Letter
argument_list|)
operator|<<
literal|216
operator|<<
literal|279
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"midResA5"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|PrinterResolution
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|A5
argument_list|)
operator|<<
literal|148
operator|<<
literal|210
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"highRes"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|HighResolution
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|A4
argument_list|)
operator|<<
literal|210
operator|<<
literal|297
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"highResLetter"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|HighResolution
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|Letter
argument_list|)
operator|<<
literal|216
operator|<<
literal|279
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"highResA5"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|HighResolution
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|A5
argument_list|)
operator|<<
literal|148
operator|<<
literal|210
expr_stmt|;
block|}
end_function
begin_function
DECL|function|computePageValue
specifier|static
name|void
name|computePageValue
parameter_list|(
specifier|const
name|QPrinter
modifier|&
name|printer
parameter_list|,
name|int
modifier|&
name|retWidth
parameter_list|,
name|int
modifier|&
name|retHeight
parameter_list|)
block|{
specifier|const
name|double
name|Inch2MM
init|=
literal|25.4
decl_stmt|;
name|double
name|width
init|=
name|double
argument_list|(
name|printer
operator|.
name|paperRect
argument_list|()
operator|.
name|width
argument_list|()
argument_list|)
operator|/
name|printer
operator|.
name|logicalDpiX
argument_list|()
operator|*
name|Inch2MM
decl_stmt|;
name|double
name|height
init|=
name|double
argument_list|(
name|printer
operator|.
name|paperRect
argument_list|()
operator|.
name|height
argument_list|()
argument_list|)
operator|/
name|printer
operator|.
name|logicalDpiY
argument_list|()
operator|*
name|Inch2MM
decl_stmt|;
name|retWidth
operator|=
name|qRound
argument_list|(
name|width
argument_list|)
expr_stmt|;
name|retHeight
operator|=
name|qRound
argument_list|(
name|height
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testMulitpleSets
name|void
name|tst_QPrinter
operator|::
name|testMulitpleSets
parameter_list|()
block|{
comment|// A very simple test, but Mac needs to have its format "validated" if the format is changed
comment|// This takes care of that.
name|QFETCH
argument_list|(
name|int
argument_list|,
name|resolution
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|pageSize
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|widthMMAfter
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|heightMMAfter
argument_list|)
expr_stmt|;
name|QPrinter
operator|::
name|PrinterMode
name|mode
init|=
name|QPrinter
operator|::
name|PrinterMode
argument_list|(
name|resolution
argument_list|)
decl_stmt|;
name|QPrinter
operator|::
name|PageSize
name|printerPageSize
init|=
name|QPrinter
operator|::
name|PageSize
argument_list|(
name|pageSize
argument_list|)
decl_stmt|;
name|QPrinter
name|printer
argument_list|(
name|mode
argument_list|)
decl_stmt|;
name|printer
operator|.
name|setFullPage
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|int
name|paperWidth
decl_stmt|,
name|paperHeight
decl_stmt|;
comment|//const int Tolerance = 2;
name|computePageValue
argument_list|(
name|printer
argument_list|,
name|paperWidth
argument_list|,
name|paperHeight
argument_list|)
expr_stmt|;
name|printer
operator|.
name|setPageSize
argument_list|(
name|printerPageSize
argument_list|)
expr_stmt|;
if|if
condition|(
name|printer
operator|.
name|pageSize
argument_list|()
operator|!=
name|printerPageSize
condition|)
block|{
name|QSKIP
argument_list|(
literal|"Current page size is not supported on this printer"
argument_list|)
expr_stmt|;
return|return;
block|}
name|QVERIFY
argument_list|(
name|qAbs
argument_list|(
name|printer
operator|.
name|widthMM
argument_list|()
operator|-
name|widthMMAfter
argument_list|)
operator|<=
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qAbs
argument_list|(
name|printer
operator|.
name|heightMM
argument_list|()
operator|-
name|heightMMAfter
argument_list|)
operator|<=
literal|2
argument_list|)
expr_stmt|;
name|computePageValue
argument_list|(
name|printer
argument_list|,
name|paperWidth
argument_list|,
name|paperHeight
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qAbs
argument_list|(
name|paperWidth
operator|-
name|widthMMAfter
argument_list|)
operator|<=
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qAbs
argument_list|(
name|paperHeight
operator|-
name|heightMMAfter
argument_list|)
operator|<=
literal|2
argument_list|)
expr_stmt|;
comment|// Set it again and see if it still works.
name|printer
operator|.
name|setPageSize
argument_list|(
name|printerPageSize
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qAbs
argument_list|(
name|printer
operator|.
name|widthMM
argument_list|()
operator|-
name|widthMMAfter
argument_list|)
operator|<=
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qAbs
argument_list|(
name|printer
operator|.
name|heightMM
argument_list|()
operator|-
name|heightMMAfter
argument_list|)
operator|<=
literal|2
argument_list|)
expr_stmt|;
name|printer
operator|.
name|setOrientation
argument_list|(
name|QPrinter
operator|::
name|Landscape
argument_list|)
expr_stmt|;
name|computePageValue
argument_list|(
name|printer
argument_list|,
name|paperWidth
argument_list|,
name|paperHeight
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qAbs
argument_list|(
name|paperWidth
operator|-
name|heightMMAfter
argument_list|)
operator|<=
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qAbs
argument_list|(
name|paperHeight
operator|-
name|widthMMAfter
argument_list|)
operator|<=
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|outputFormatFromSuffix
name|void
name|tst_QPrinter
operator|::
name|outputFormatFromSuffix
parameter_list|()
block|{
if|if
condition|(
name|QPrinterInfo
operator|::
name|availablePrinters
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
name|QSKIP
argument_list|(
literal|"No printers available."
argument_list|)
expr_stmt|;
name|QPrinter
name|p
decl_stmt|;
name|QCOMPARE
argument_list|(
name|p
operator|.
name|outputFormat
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|NativeFormat
argument_list|)
expr_stmt|;
name|p
operator|.
name|setOutputFileName
argument_list|(
literal|"test.pdf"
argument_list|)
expr_stmt|;
name|TempFileCleanup
name|tmpFile
argument_list|(
literal|"test.pdf"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|p
operator|.
name|outputFormat
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|p
operator|.
name|setOutputFileName
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p
operator|.
name|outputFormat
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|NativeFormat
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testPageMargins_data
name|void
name|tst_QPrinter
operator|::
name|testPageMargins_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|qreal
argument_list|>
argument_list|(
literal|"left"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|qreal
argument_list|>
argument_list|(
literal|"top"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|qreal
argument_list|>
argument_list|(
literal|"right"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|qreal
argument_list|>
argument_list|(
literal|"bottom"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"unit"
argument_list|)
expr_stmt|;
comment|// Use custom margins that will exceed most printers minimum allowed
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data0"
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|25.5
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|26.5
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|27.5
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|28.5
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|QPrinter
operator|::
name|Millimeter
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|55.5
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|56.5
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|57.5
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|58.5
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|QPrinter
operator|::
name|Point
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|5.5
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|6.5
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|7.5
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|8.5
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|QPrinter
operator|::
name|Inch
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data3"
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|5.5
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|6.5
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|7.5
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|8.5
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|QPrinter
operator|::
name|Pica
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data4"
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|55.5
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|56.5
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|57.5
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|58.5
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|QPrinter
operator|::
name|Didot
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data5"
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|5.5
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|6.5
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|7.5
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|8.5
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|int
argument_list|>
argument_list|(
name|QPrinter
operator|::
name|Cicero
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testPageMargins
name|void
name|tst_QPrinter
operator|::
name|testPageMargins
parameter_list|()
block|{
name|QPrinter
name|obj1
decl_stmt|;
name|QFETCH
argument_list|(
name|qreal
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|qreal
argument_list|,
name|top
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|qreal
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|qreal
argument_list|,
name|bottom
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|unit
argument_list|)
expr_stmt|;
name|QPageLayout
name|layout
init|=
name|QPageLayout
argument_list|(
name|QPageSize
argument_list|(
name|QPageSize
operator|::
name|A0
argument_list|)
argument_list|,
name|QPageLayout
operator|::
name|Portrait
argument_list|,
name|QMarginsF
argument_list|(
name|left
argument_list|,
name|top
argument_list|,
name|right
argument_list|,
name|bottom
argument_list|)
argument_list|,
name|QPageLayout
operator|::
name|Unit
argument_list|(
name|unit
argument_list|)
argument_list|)
decl_stmt|;
name|qreal
name|nLeft
decl_stmt|,
name|nTop
decl_stmt|,
name|nRight
decl_stmt|,
name|nBottom
decl_stmt|;
name|obj1
operator|.
name|setPageMargins
argument_list|(
name|left
argument_list|,
name|top
argument_list|,
name|right
argument_list|,
name|bottom
argument_list|,
name|QPrinter
operator|::
name|Unit
argument_list|(
name|unit
argument_list|)
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|getPageMargins
argument_list|(
operator|&
name|nLeft
argument_list|,
operator|&
name|nTop
argument_list|,
operator|&
name|nRight
argument_list|,
operator|&
name|nBottom
argument_list|,
name|QPrinter
operator|::
name|Millimeter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nLeft
argument_list|,
name|layout
operator|.
name|margins
argument_list|(
name|QPageLayout
operator|::
name|Millimeter
argument_list|)
operator|.
name|left
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nRight
argument_list|,
name|layout
operator|.
name|margins
argument_list|(
name|QPageLayout
operator|::
name|Millimeter
argument_list|)
operator|.
name|right
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nTop
argument_list|,
name|layout
operator|.
name|margins
argument_list|(
name|QPageLayout
operator|::
name|Millimeter
argument_list|)
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nBottom
argument_list|,
name|layout
operator|.
name|margins
argument_list|(
name|QPageLayout
operator|::
name|Millimeter
argument_list|)
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|getPageMargins
argument_list|(
operator|&
name|nLeft
argument_list|,
operator|&
name|nTop
argument_list|,
operator|&
name|nRight
argument_list|,
operator|&
name|nBottom
argument_list|,
name|QPrinter
operator|::
name|Point
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nLeft
argument_list|,
name|layout
operator|.
name|margins
argument_list|(
name|QPageLayout
operator|::
name|Point
argument_list|)
operator|.
name|left
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nRight
argument_list|,
name|layout
operator|.
name|margins
argument_list|(
name|QPageLayout
operator|::
name|Point
argument_list|)
operator|.
name|right
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nTop
argument_list|,
name|layout
operator|.
name|margins
argument_list|(
name|QPageLayout
operator|::
name|Point
argument_list|)
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nBottom
argument_list|,
name|layout
operator|.
name|margins
argument_list|(
name|QPageLayout
operator|::
name|Point
argument_list|)
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|getPageMargins
argument_list|(
operator|&
name|nLeft
argument_list|,
operator|&
name|nTop
argument_list|,
operator|&
name|nRight
argument_list|,
operator|&
name|nBottom
argument_list|,
name|QPrinter
operator|::
name|Inch
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nLeft
argument_list|,
name|layout
operator|.
name|margins
argument_list|(
name|QPageLayout
operator|::
name|Inch
argument_list|)
operator|.
name|left
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nRight
argument_list|,
name|layout
operator|.
name|margins
argument_list|(
name|QPageLayout
operator|::
name|Inch
argument_list|)
operator|.
name|right
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nTop
argument_list|,
name|layout
operator|.
name|margins
argument_list|(
name|QPageLayout
operator|::
name|Inch
argument_list|)
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nBottom
argument_list|,
name|layout
operator|.
name|margins
argument_list|(
name|QPageLayout
operator|::
name|Inch
argument_list|)
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|getPageMargins
argument_list|(
operator|&
name|nLeft
argument_list|,
operator|&
name|nTop
argument_list|,
operator|&
name|nRight
argument_list|,
operator|&
name|nBottom
argument_list|,
name|QPrinter
operator|::
name|Pica
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nLeft
argument_list|,
name|layout
operator|.
name|margins
argument_list|(
name|QPageLayout
operator|::
name|Pica
argument_list|)
operator|.
name|left
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nRight
argument_list|,
name|layout
operator|.
name|margins
argument_list|(
name|QPageLayout
operator|::
name|Pica
argument_list|)
operator|.
name|right
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nTop
argument_list|,
name|layout
operator|.
name|margins
argument_list|(
name|QPageLayout
operator|::
name|Pica
argument_list|)
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nBottom
argument_list|,
name|layout
operator|.
name|margins
argument_list|(
name|QPageLayout
operator|::
name|Pica
argument_list|)
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|getPageMargins
argument_list|(
operator|&
name|nLeft
argument_list|,
operator|&
name|nTop
argument_list|,
operator|&
name|nRight
argument_list|,
operator|&
name|nBottom
argument_list|,
name|QPrinter
operator|::
name|Didot
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nLeft
argument_list|,
name|layout
operator|.
name|margins
argument_list|(
name|QPageLayout
operator|::
name|Didot
argument_list|)
operator|.
name|left
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nRight
argument_list|,
name|layout
operator|.
name|margins
argument_list|(
name|QPageLayout
operator|::
name|Didot
argument_list|)
operator|.
name|right
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nTop
argument_list|,
name|layout
operator|.
name|margins
argument_list|(
name|QPageLayout
operator|::
name|Didot
argument_list|)
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nBottom
argument_list|,
name|layout
operator|.
name|margins
argument_list|(
name|QPageLayout
operator|::
name|Didot
argument_list|)
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|getPageMargins
argument_list|(
operator|&
name|nLeft
argument_list|,
operator|&
name|nTop
argument_list|,
operator|&
name|nRight
argument_list|,
operator|&
name|nBottom
argument_list|,
name|QPrinter
operator|::
name|Cicero
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nLeft
argument_list|,
name|layout
operator|.
name|margins
argument_list|(
name|QPageLayout
operator|::
name|Cicero
argument_list|)
operator|.
name|left
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nRight
argument_list|,
name|layout
operator|.
name|margins
argument_list|(
name|QPageLayout
operator|::
name|Cicero
argument_list|)
operator|.
name|right
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nTop
argument_list|,
name|layout
operator|.
name|margins
argument_list|(
name|QPageLayout
operator|::
name|Cicero
argument_list|)
operator|.
name|top
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nBottom
argument_list|,
name|layout
operator|.
name|margins
argument_list|(
name|QPageLayout
operator|::
name|Cicero
argument_list|)
operator|.
name|bottom
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|errorReporting
name|void
name|tst_QPrinter
operator|::
name|errorReporting
parameter_list|()
block|{
name|QPrinter
name|p
decl_stmt|;
name|p
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|p
operator|.
name|isValid
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QPainter
name|painter
decl_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WIN
comment|// not sure how to choose a never-writable file on windows.  But its QFile behavior anyway, so lets rely on it failing elsewhere
name|p
operator|.
name|setOutputFileName
argument_list|(
literal|"/foobar/nonwritable.pdf"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|painter
operator|.
name|begin
argument_list|(
operator|&
name|p
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// it should check the output file is writable
endif|#
directive|endif
name|p
operator|.
name|setOutputFileName
argument_list|(
literal|"test.pdf"
argument_list|)
expr_stmt|;
name|TempFileCleanup
name|tmpFile
argument_list|(
literal|"test.pdf"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|painter
operator|.
name|begin
argument_list|(
operator|&
name|p
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// it should check the output
name|QCOMPARE
argument_list|(
name|p
operator|.
name|isValid
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|painter
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testCustomPageSizes
name|void
name|tst_QPrinter
operator|::
name|testCustomPageSizes
parameter_list|()
block|{
name|QPrinter
name|p
decl_stmt|;
name|QSizeF
name|customSize
argument_list|(
literal|7.0
argument_list|,
literal|11.0
argument_list|)
decl_stmt|;
name|p
operator|.
name|setPaperSize
argument_list|(
name|customSize
argument_list|,
name|QPrinter
operator|::
name|Inch
argument_list|)
expr_stmt|;
name|QSizeF
name|paperSize
init|=
name|p
operator|.
name|paperSize
argument_list|(
name|QPrinter
operator|::
name|Inch
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|paperSize
operator|.
name|width
argument_list|()
argument_list|,
name|customSize
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|paperSize
operator|.
name|height
argument_list|()
argument_list|,
name|customSize
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|QPrinter
name|p2
argument_list|(
name|QPrinter
operator|::
name|HighResolution
argument_list|)
decl_stmt|;
name|p2
operator|.
name|setPaperSize
argument_list|(
name|customSize
argument_list|,
name|QPrinter
operator|::
name|Inch
argument_list|)
expr_stmt|;
name|paperSize
operator|=
name|p
operator|.
name|paperSize
argument_list|(
name|QPrinter
operator|::
name|Inch
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|paperSize
operator|.
name|width
argument_list|()
argument_list|,
name|customSize
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|paperSize
operator|.
name|height
argument_list|()
argument_list|,
name|customSize
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QSizeF
name|sizeInPixels
init|=
name|p
operator|.
name|paperSize
argument_list|(
name|QPrinter
operator|::
name|DevicePixel
argument_list|)
decl_stmt|;
name|QPrinter
name|p3
decl_stmt|;
name|p3
operator|.
name|setPaperSize
argument_list|(
name|sizeInPixels
argument_list|,
name|QPrinter
operator|::
name|DevicePixel
argument_list|)
expr_stmt|;
name|paperSize
operator|=
name|p3
operator|.
name|paperSize
argument_list|(
name|QPrinter
operator|::
name|Inch
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|paperSize
operator|.
name|width
argument_list|()
argument_list|,
name|customSize
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|paperSize
operator|.
name|height
argument_list|()
argument_list|,
name|customSize
operator|.
name|height
argument_list|()
argument_list|)
expr_stmt|;
name|QPageSize
name|pageSize
init|=
name|p3
operator|.
name|pageLayout
argument_list|()
operator|.
name|pageSize
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|pageSize
operator|.
name|key
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Custom.504x792"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pageSize
operator|.
name|name
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Custom (504pt x 792pt)"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|customPaperSizeAndMargins_data
name|void
name|tst_QPrinter
operator|::
name|customPaperSizeAndMargins_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"pdf"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"before"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|qreal
argument_list|>
argument_list|(
literal|"left"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|qreal
argument_list|>
argument_list|(
literal|"top"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|qreal
argument_list|>
argument_list|(
literal|"right"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|qreal
argument_list|>
argument_list|(
literal|"bottom"
argument_list|)
expr_stmt|;
comment|// Use custom margins that will exceed most printers minimum allowed
name|QTest
operator|::
name|newRow
argument_list|(
literal|"beforeNoPDF"
argument_list|)
operator|<<
literal|false
operator|<<
literal|true
operator|<<
name|qreal
argument_list|(
literal|30
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|30
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|30
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"beforePDF"
argument_list|)
operator|<<
literal|true
operator|<<
literal|true
operator|<<
name|qreal
argument_list|(
literal|30
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|30
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|30
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"afterNoPDF"
argument_list|)
operator|<<
literal|false
operator|<<
literal|false
operator|<<
name|qreal
argument_list|(
literal|30
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|30
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|30
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"afterAfterPDF"
argument_list|)
operator|<<
literal|true
operator|<<
literal|false
operator|<<
name|qreal
argument_list|(
literal|30
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|30
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|30
argument_list|)
operator|<<
name|qreal
argument_list|(
literal|30
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|customPaperSizeAndMargins
name|void
name|tst_QPrinter
operator|::
name|customPaperSizeAndMargins
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|pdf
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|before
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|qreal
argument_list|,
name|left
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|qreal
argument_list|,
name|top
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|qreal
argument_list|,
name|right
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|qreal
argument_list|,
name|bottom
argument_list|)
expr_stmt|;
name|qreal
name|tolerance
init|=
literal|0.05
decl_stmt|;
name|qreal
name|getLeft
init|=
literal|0
decl_stmt|;
name|qreal
name|getRight
init|=
literal|0
decl_stmt|;
name|qreal
name|getTop
init|=
literal|0
decl_stmt|;
name|qreal
name|getBottom
init|=
literal|0
decl_stmt|;
comment|// Use a custom page size that most printers should support, A4 is 210x297
comment|// TODO Use print device api when available
name|QSizeF
name|customSize
argument_list|(
literal|200.0
argument_list|,
literal|300.0
argument_list|)
decl_stmt|;
name|QPrinter
name|p
decl_stmt|;
if|if
condition|(
name|pdf
condition|)
name|p
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
if|if
condition|(
name|before
condition|)
name|p
operator|.
name|setPageMargins
argument_list|(
name|left
argument_list|,
name|top
argument_list|,
name|right
argument_list|,
name|bottom
argument_list|,
name|QPrinter
operator|::
name|Millimeter
argument_list|)
expr_stmt|;
name|p
operator|.
name|setPaperSize
argument_list|(
name|customSize
argument_list|,
name|QPrinter
operator|::
name|Millimeter
argument_list|)
expr_stmt|;
name|p
operator|.
name|getPageMargins
argument_list|(
operator|&
name|getLeft
argument_list|,
operator|&
name|getTop
argument_list|,
operator|&
name|getRight
argument_list|,
operator|&
name|getBottom
argument_list|,
name|QPrinter
operator|::
name|Millimeter
argument_list|)
expr_stmt|;
if|if
condition|(
name|before
condition|)
block|{
name|QVERIFY
argument_list|(
name|fabs
argument_list|(
name|left
operator|-
name|getLeft
argument_list|)
operator|<
name|tolerance
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fabs
argument_list|(
name|left
operator|-
name|getTop
argument_list|)
operator|<
name|tolerance
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fabs
argument_list|(
name|left
operator|-
name|getRight
argument_list|)
operator|<
name|tolerance
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fabs
argument_list|(
name|left
operator|-
name|getBottom
argument_list|)
operator|<
name|tolerance
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|p
operator|.
name|setPageMargins
argument_list|(
name|left
argument_list|,
name|top
argument_list|,
name|right
argument_list|,
name|bottom
argument_list|,
name|QPrinter
operator|::
name|Millimeter
argument_list|)
expr_stmt|;
name|p
operator|.
name|getPageMargins
argument_list|(
operator|&
name|getLeft
argument_list|,
operator|&
name|getTop
argument_list|,
operator|&
name|getRight
argument_list|,
operator|&
name|getBottom
argument_list|,
name|QPrinter
operator|::
name|Millimeter
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fabs
argument_list|(
name|left
operator|-
name|getLeft
argument_list|)
operator|<
name|tolerance
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fabs
argument_list|(
name|left
operator|-
name|getTop
argument_list|)
operator|<
name|tolerance
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fabs
argument_list|(
name|left
operator|-
name|getRight
argument_list|)
operator|<
name|tolerance
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|fabs
argument_list|(
name|left
operator|-
name|getBottom
argument_list|)
operator|<
name|tolerance
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_COMPLETER
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_FILEDIALOG
argument_list|)
end_if
begin_function
DECL|function|printDialogCompleter
name|void
name|tst_QPrinter
operator|::
name|printDialogCompleter
parameter_list|()
block|{
name|QPrintDialog
name|dialog
decl_stmt|;
name|dialog
operator|.
name|printer
argument_list|()
operator|->
name|setOutputFileName
argument_list|(
literal|"file.pdf"
argument_list|)
expr_stmt|;
name|TempFileCleanup
name|tmpFile
argument_list|(
literal|"file.pdf"
argument_list|)
decl_stmt|;
name|dialog
operator|.
name|setEnabledOptions
argument_list|(
name|QAbstractPrintDialog
operator|::
name|PrintToFile
argument_list|)
expr_stmt|;
name|dialog
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
operator|&
name|dialog
argument_list|,
name|Qt
operator|::
name|Key_Tab
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
operator|&
name|dialog
argument_list|,
literal|'P'
argument_list|)
expr_stmt|;
comment|// The test passes if it doesn't crash.
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|printPage
specifier|static
name|void
name|printPage
parameter_list|(
name|QPainter
modifier|*
name|painter
parameter_list|)
block|{
name|painter
operator|->
name|setPen
argument_list|(
name|QPen
argument_list|(
name|Qt
operator|::
name|black
argument_list|,
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|->
name|drawRect
argument_list|(
literal|50
argument_list|,
literal|60
argument_list|,
literal|70
argument_list|,
literal|80
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|taskQTBUG4497_reusePrinterOnDifferentFiles
name|void
name|tst_QPrinter
operator|::
name|taskQTBUG4497_reusePrinterOnDifferentFiles
parameter_list|()
block|{
name|TempFileCleanup
name|tmpFile1
argument_list|(
literal|"out1.pdf"
argument_list|)
decl_stmt|;
name|TempFileCleanup
name|tmpFile2
argument_list|(
literal|"out2.pdf"
argument_list|)
decl_stmt|;
name|QPrinter
name|printer
decl_stmt|;
block|{
name|printer
operator|.
name|setOutputFileName
argument_list|(
literal|"out1.pdf"
argument_list|)
expr_stmt|;
name|QPainter
name|painter
argument_list|(
operator|&
name|printer
argument_list|)
decl_stmt|;
name|printPage
argument_list|(
operator|&
name|painter
argument_list|)
expr_stmt|;
block|}
block|{
name|printer
operator|.
name|setOutputFileName
argument_list|(
literal|"out2.pdf"
argument_list|)
expr_stmt|;
name|QPainter
name|painter
argument_list|(
operator|&
name|printer
argument_list|)
decl_stmt|;
name|printPage
argument_list|(
operator|&
name|painter
argument_list|)
expr_stmt|;
block|}
name|QFile
name|file1
argument_list|(
literal|"out1.pdf"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file1
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QFile
name|file2
argument_list|(
literal|"out2.pdf"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file2
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|file1
operator|.
name|atEnd
argument_list|()
operator|&&
operator|!
name|file2
operator|.
name|atEnd
argument_list|()
condition|)
block|{
name|QByteArray
name|file1Line
init|=
name|file1
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|QByteArray
name|file2Line
init|=
name|file2
operator|.
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|file1Line
operator|.
name|startsWith
argument_list|(
literal|"%%CreationDate"
argument_list|)
condition|)
name|QCOMPARE
argument_list|(
name|file1Line
argument_list|,
name|file2Line
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|file1
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file2
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testCurrentPage
name|void
name|tst_QPrinter
operator|::
name|testCurrentPage
parameter_list|()
block|{
name|QPrinter
name|printer
decl_stmt|;
name|printer
operator|.
name|setFromTo
argument_list|(
literal|1
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// Test set print range
name|printer
operator|.
name|setPrintRange
argument_list|(
name|QPrinter
operator|::
name|CurrentPage
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|printRange
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|CurrentPage
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|fromPage
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|toPage
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QPrintDialog
name|dialog
argument_list|(
operator|&
name|printer
argument_list|)
decl_stmt|;
comment|// Test default Current Page option to off
name|QCOMPARE
argument_list|(
name|dialog
operator|.
name|isOptionEnabled
argument_list|(
name|QPrintDialog
operator|::
name|PrintCurrentPage
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Test enable Current Page option
name|dialog
operator|.
name|setOption
argument_list|(
name|QPrintDialog
operator|::
name|PrintCurrentPage
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dialog
operator|.
name|isOptionEnabled
argument_list|(
name|QPrintDialog
operator|::
name|PrintCurrentPage
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testPdfTitle
name|void
name|tst_QPrinter
operator|::
name|testPdfTitle
parameter_list|()
block|{
comment|// Check the document name is represented correctly in produced pdf
block|{
name|QPainter
name|painter
decl_stmt|;
name|QPrinter
name|printer
decl_stmt|;
comment|// This string is just the UTF-8 encoding of the string: \()f&oslash; hiragana o
specifier|const
name|unsigned
name|char
name|titleBuf
index|[]
init|=
block|{
literal|0x5c
block|,
literal|0x28
block|,
literal|0x29
block|,
literal|0x66
block|,
literal|0xc3
block|,
literal|0xb8
block|,
literal|0xe3
block|,
literal|0x81
block|,
literal|0x8a
block|,
literal|0x00
block|}
decl_stmt|;
specifier|const
name|char
modifier|*
name|title
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|titleBuf
argument_list|)
decl_stmt|;
name|printer
operator|.
name|setOutputFileName
argument_list|(
literal|"file.pdf"
argument_list|)
expr_stmt|;
name|printer
operator|.
name|setDocName
argument_list|(
name|QString
operator|::
name|fromUtf8
argument_list|(
name|title
argument_list|)
argument_list|)
expr_stmt|;
name|painter
operator|.
name|begin
argument_list|(
operator|&
name|printer
argument_list|)
expr_stmt|;
name|painter
operator|.
name|end
argument_list|()
expr_stmt|;
block|}
name|TempFileCleanup
name|tmpFile
argument_list|(
literal|"file.pdf"
argument_list|)
decl_stmt|;
name|QFile
name|file
argument_list|(
literal|"file.pdf"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
comment|// The we expect the title to appear in the PDF as:
comment|// ASCII('\title (') UTF16(\\\(\)f&oslash; hiragana o) ASCII(')').
comment|// which has the following binary representation
specifier|const
name|unsigned
name|char
name|expectedBuf
index|[]
init|=
block|{
literal|0x2f
block|,
literal|0x54
block|,
literal|0x69
block|,
literal|0x74
block|,
literal|0x6c
block|,
literal|0x65
block|,
literal|0x20
block|,
literal|0x28
block|,
literal|0xfe
block|,
literal|0xff
block|,
literal|0x00
block|,
literal|0x5c
block|,
literal|0x5c
block|,
literal|0x00
block|,
literal|0x5c
block|,
literal|0x28
block|,
literal|0x00
block|,
literal|0x5c
block|,
literal|0x29
block|,
literal|0x00
block|,
literal|0x66
block|,
literal|0x00
block|,
literal|0xf8
block|,
literal|0x30
block|,
literal|0x4a
block|,
literal|0x29
block|}
decl_stmt|;
specifier|const
name|char
modifier|*
name|expected
init|=
cast|reinterpret_cast
argument_list|<
specifier|const
name|char
operator|*
argument_list|>
argument_list|(
name|expectedBuf
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|readAll
argument_list|()
operator|.
name|contains
argument_list|(
name|QByteArray
argument_list|(
name|expected
argument_list|,
literal|26
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|customPaperNameSettingBySize
name|void
name|tst_QPrinter
operator|::
name|customPaperNameSettingBySize
parameter_list|()
block|{
name|QPrinter
name|printer
argument_list|(
name|QPrinter
operator|::
name|HighResolution
argument_list|)
decl_stmt|;
name|QPrinterInfo
name|info
argument_list|(
name|printer
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QPageSize
argument_list|>
name|sizes
init|=
name|info
operator|.
name|supportedPageSizes
argument_list|()
decl_stmt|;
if|if
condition|(
name|sizes
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
name|QSKIP
argument_list|(
literal|"No printers installed on this machine"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sizes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|printer
operator|.
name|setPaperSize
argument_list|(
name|sizes
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|size
argument_list|(
name|QPageSize
operator|::
name|Millimeter
argument_list|)
argument_list|,
name|QPrinter
operator|::
name|Millimeter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sizes
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|size
argument_list|(
name|QPageSize
operator|::
name|Millimeter
argument_list|)
argument_list|,
name|printer
operator|.
name|paperSize
argument_list|(
name|QPrinter
operator|::
name|Millimeter
argument_list|)
argument_list|)
expr_stmt|;
comment|// Some printers have the same size under different names which can cause a problem for the test
comment|// So we look at all the other sizes to see if one also matches as we don't know which order they are in
name|QSizeF
name|paperSize
init|=
name|sizes
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|size
argument_list|(
name|QPageSize
operator|::
name|Millimeter
argument_list|)
decl_stmt|;
name|QString
name|paperName
init|=
name|printer
operator|.
name|paperName
argument_list|()
decl_stmt|;
name|bool
name|paperNameFound
init|=
operator|(
name|sizes
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|name
argument_list|()
operator|==
name|paperName
operator|)
decl_stmt|;
if|if
condition|(
operator|!
name|paperNameFound
condition|)
block|{
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|sizes
operator|.
name|size
argument_list|()
condition|;
operator|++
name|j
control|)
block|{
if|if
condition|(
name|j
operator|!=
name|i
operator|&&
name|sizes
operator|.
name|at
argument_list|(
name|j
argument_list|)
operator|.
name|size
argument_list|(
name|QPageSize
operator|::
name|Millimeter
argument_list|)
operator|==
name|paperSize
operator|&&
name|sizes
operator|.
name|at
argument_list|(
name|j
argument_list|)
operator|.
name|name
argument_list|()
operator|==
name|paperName
condition|)
block|{
name|paperNameFound
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
comment|// Fail with the original values
if|if
condition|(
operator|!
name|paperNameFound
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"supportedPageSizes() = "
operator|<<
name|sizes
expr_stmt|;
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"Paper Name mismatch: please report this failure at bugreports.qt.io"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sizes
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
name|printer
operator|.
name|paperName
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Check setting a custom size after setting a standard one works
name|QSizeF
name|customSize
argument_list|(
literal|200
argument_list|,
literal|300
argument_list|)
decl_stmt|;
name|printer
operator|.
name|setPaperSize
argument_list|(
name|customSize
argument_list|,
name|QPrinter
operator|::
name|Millimeter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|paperSize
argument_list|(
name|QPrinter
operator|::
name|Millimeter
argument_list|)
argument_list|,
name|customSize
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|paperSize
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|Custom
argument_list|)
expr_stmt|;
comment|// Finally check setting a standard size after a custom one works
name|printer
operator|.
name|setPaperSize
argument_list|(
name|sizes
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|(
name|QPageSize
operator|::
name|Millimeter
argument_list|)
argument_list|,
name|QPrinter
operator|::
name|Millimeter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|paperName
argument_list|()
argument_list|,
name|sizes
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|paperSize
argument_list|(
name|QPrinter
operator|::
name|Millimeter
argument_list|)
argument_list|,
name|sizes
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|size
argument_list|(
name|QPageSize
operator|::
name|Millimeter
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|customPaperNameSettingByName
name|void
name|tst_QPrinter
operator|::
name|customPaperNameSettingByName
parameter_list|()
block|{
name|QPrinter
name|printer
argument_list|(
name|QPrinter
operator|::
name|HighResolution
argument_list|)
decl_stmt|;
name|QPrinterInfo
name|info
argument_list|(
name|printer
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QPageSize
argument_list|>
name|sizes
init|=
name|info
operator|.
name|supportedPageSizes
argument_list|()
decl_stmt|;
if|if
condition|(
name|sizes
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
name|QSKIP
argument_list|(
literal|"No printers installed on this machine"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|sizes
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|printer
operator|.
name|setPaperName
argument_list|(
name|sizes
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|name
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sizes
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|name
argument_list|()
argument_list|,
name|printer
operator|.
name|paperName
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sizes
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|size
argument_list|(
name|QPageSize
operator|::
name|Millimeter
argument_list|)
argument_list|,
name|printer
operator|.
name|paperSize
argument_list|(
name|QPrinter
operator|::
name|Millimeter
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// Test QPrintEngine keys and their QPrinter setters/getters
end_comment
begin_function
DECL|function|testMultipleKeys
name|void
name|tst_QPrinter
operator|::
name|testMultipleKeys
parameter_list|()
block|{
comment|// Tests multiple keys preservation, note are only ones that are consistent across all engines
name|QPrinter
name|native
decl_stmt|;
if|if
condition|(
name|native
operator|.
name|outputFormat
argument_list|()
operator|==
name|QPrinter
operator|::
name|NativeFormat
condition|)
block|{
comment|// Check default values
name|QCOMPARE
argument_list|(
name|native
operator|.
name|fullPage
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|orientation
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|Portrait
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|copyCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|collateCopies
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|printRange
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|AllPages
argument_list|)
expr_stmt|;
comment|// Change values
name|native
operator|.
name|setFullPage
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|native
operator|.
name|setOrientation
argument_list|(
name|QPrinter
operator|::
name|Landscape
argument_list|)
expr_stmt|;
name|native
operator|.
name|setCopyCount
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|native
operator|.
name|setCollateCopies
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|native
operator|.
name|setPrintRange
argument_list|(
name|QPrinter
operator|::
name|CurrentPage
argument_list|)
expr_stmt|;
comment|// Check changed values
name|QCOMPARE
argument_list|(
name|native
operator|.
name|fullPage
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|orientation
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|Landscape
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|copyCount
argument_list|()
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|collateCopies
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|printRange
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|CurrentPage
argument_list|)
expr_stmt|;
comment|// Test value preservation
name|native
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|fullPage
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|orientation
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|Landscape
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|copyCount
argument_list|()
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|collateCopies
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|printRange
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|CurrentPage
argument_list|)
expr_stmt|;
comment|// Change values
name|native
operator|.
name|setFullPage
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|native
operator|.
name|setOrientation
argument_list|(
name|QPrinter
operator|::
name|Portrait
argument_list|)
expr_stmt|;
name|native
operator|.
name|setCopyCount
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|native
operator|.
name|setCollateCopies
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|native
operator|.
name|setPrintRange
argument_list|(
name|QPrinter
operator|::
name|PageRange
argument_list|)
expr_stmt|;
comment|// Check changed values
name|QCOMPARE
argument_list|(
name|native
operator|.
name|fullPage
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|orientation
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|Portrait
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|copyCount
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|collateCopies
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|printRange
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|PageRange
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"No printers installed, cannot test NativeFormat, please install printers to test"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|collateCopies
name|void
name|tst_QPrinter
operator|::
name|collateCopies
parameter_list|()
block|{
comment|// collateCopies() / setCollateCopies() / PPK_ColorMode
comment|// PdfFormat: Supported, default true
comment|// NativeFormat, Cups: Supported, default true
comment|// NativeFormat, Win: Supported, default true
comment|// NativeFormat, Mac: Supported, default true
name|QPrinter
name|pdf
decl_stmt|;
name|pdf
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|collateCopies
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|pdf
operator|.
name|setCollateCopies
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|collateCopies
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QPrinter
name|native
decl_stmt|;
if|if
condition|(
name|native
operator|.
name|outputFormat
argument_list|()
operator|==
name|QPrinter
operator|::
name|NativeFormat
condition|)
block|{
comment|// Test default
name|QCOMPARE
argument_list|(
name|native
operator|.
name|collateCopies
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Test set/get
name|bool
name|expected
init|=
literal|false
decl_stmt|;
name|native
operator|.
name|setCollateCopies
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|collateCopies
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
comment|// Test value preservation
name|native
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|collateCopies
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|native
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|NativeFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|collateCopies
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"No printers installed, cannot test NativeFormat, please install printers to test"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|colorMode
name|void
name|tst_QPrinter
operator|::
name|colorMode
parameter_list|()
block|{
comment|// colorMode() / setColorMode() / PPK_ColorMode
comment|// PdfFormat: Supported, default QPrinter::Color
comment|// NativeFormat, Cups: Supported, default QPrinter::Color
comment|// NativeFormat, Win: Supported if valid DevMode, otherwise QPrinter::Color
comment|// NativeFormat, Mac: Unsupported, always QPrinter::Color
name|QPrinter
name|pdf
decl_stmt|;
name|pdf
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|colorMode
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|Color
argument_list|)
expr_stmt|;
name|pdf
operator|.
name|setColorMode
argument_list|(
name|QPrinter
operator|::
name|GrayScale
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|colorMode
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|GrayScale
argument_list|)
expr_stmt|;
name|QPrinter
name|native
decl_stmt|;
if|if
condition|(
name|native
operator|.
name|outputFormat
argument_list|()
operator|==
name|QPrinter
operator|::
name|NativeFormat
condition|)
block|{
comment|// Test default
comment|// TODO Printer specific, need QPrinterInfo::colorMode()
comment|//QCOMPARE(native.colorMode(), QPrinter::Color);
comment|// Test set/get
name|QPrinter
operator|::
name|ColorMode
name|expected
init|=
name|QPrinter
operator|::
name|GrayScale
decl_stmt|;
name|native
operator|.
name|setColorMode
argument_list|(
name|expected
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|expected
operator|=
name|QPrinter
operator|::
name|Color
expr_stmt|;
endif|#
directive|endif
comment|// Q_OS_MAC
name|QCOMPARE
argument_list|(
name|native
operator|.
name|colorMode
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
comment|// Test value preservation
name|native
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|colorMode
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|native
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|NativeFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|colorMode
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"No printers installed, cannot test NativeFormat, please install printers to test"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|copyCount
name|void
name|tst_QPrinter
operator|::
name|copyCount
parameter_list|()
block|{
comment|// copyCount() / setCopyCount() / PPK_CopyCount
comment|// numCopies() / setNumCopies() / PPK_NumberOfCopies
comment|// actualNumCopies() / supportsMultipleCopies()
comment|// PdfFormat: Supported, multiple copies unsupported, default 1
comment|// NativeFormat, Cups: Supported, multiple copies supported, default 1
comment|// NativeFormat, Win: Supported, multiple copies supported, default 1
comment|// NativeFormat, Mac: Supported, multiple copies supported, default 1
name|QPrinter
name|pdf
decl_stmt|;
name|pdf
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|supportsMultipleCopies
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|copyCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|numCopies
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|actualNumCopies
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|pdf
operator|.
name|setCopyCount
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|copyCount
argument_list|()
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|numCopies
argument_list|()
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|actualNumCopies
argument_list|()
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|pdf
operator|.
name|setNumCopies
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|copyCount
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|numCopies
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|actualNumCopies
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QPrinter
name|native
decl_stmt|;
if|if
condition|(
name|native
operator|.
name|outputFormat
argument_list|()
operator|==
name|QPrinter
operator|::
name|NativeFormat
condition|)
block|{
comment|// Test default
name|QCOMPARE
argument_list|(
name|native
operator|.
name|supportsMultipleCopies
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|copyCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|numCopies
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|actualNumCopies
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Test set/get
name|native
operator|.
name|setCopyCount
argument_list|(
literal|9
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|copyCount
argument_list|()
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|numCopies
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|actualNumCopies
argument_list|()
argument_list|,
literal|9
argument_list|)
expr_stmt|;
name|native
operator|.
name|setNumCopies
argument_list|(
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|copyCount
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|numCopies
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|actualNumCopies
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
comment|// Test value preservation
name|native
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|copyCount
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|numCopies
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|actualNumCopies
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|native
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|NativeFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|copyCount
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|numCopies
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|actualNumCopies
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"No printers installed, cannot test NativeFormat, please install printers to test"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|creator
name|void
name|tst_QPrinter
operator|::
name|creator
parameter_list|()
block|{
comment|// creator() / setCreator() / PPK_Creator
comment|// PdfFormat: Supported, default QString()
comment|// NativeFormat, Cups: Supported, default QString()
comment|// NativeFormat, Win: Supported, default QString()
comment|// NativeFormat, Mac: Supported, default QString()
name|QPrinter
name|pdf
decl_stmt|;
name|pdf
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|creator
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|pdf
operator|.
name|setCreator
argument_list|(
name|QStringLiteral
argument_list|(
literal|"Test Creator"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|creator
argument_list|()
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Test Creator"
argument_list|)
argument_list|)
expr_stmt|;
name|QPrinter
name|native
decl_stmt|;
if|if
condition|(
name|native
operator|.
name|outputFormat
argument_list|()
operator|==
name|QPrinter
operator|::
name|NativeFormat
condition|)
block|{
comment|// Test default
name|QCOMPARE
argument_list|(
name|native
operator|.
name|creator
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test set/get
name|QString
name|expected
init|=
name|QStringLiteral
argument_list|(
literal|"Test Creator"
argument_list|)
decl_stmt|;
name|native
operator|.
name|setCreator
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|creator
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
comment|// Test value preservation
name|native
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|creator
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|native
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|NativeFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|creator
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"No printers installed, cannot test NativeFormat, please install printers to test"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|docName
name|void
name|tst_QPrinter
operator|::
name|docName
parameter_list|()
block|{
comment|// docName() / setDocName() / PPK_DocumentName
comment|// PdfFormat: Supported, default QString()
comment|// NativeFormat, Cups: Supported, default QString()
comment|// NativeFormat, Win: Supported, default QString()
comment|// NativeFormat, Mac: Supported, default QString()
name|QPrinter
name|pdf
decl_stmt|;
name|pdf
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|docName
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|pdf
operator|.
name|setDocName
argument_list|(
name|QStringLiteral
argument_list|(
literal|"Test Name"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|docName
argument_list|()
argument_list|,
name|QStringLiteral
argument_list|(
literal|"Test Name"
argument_list|)
argument_list|)
expr_stmt|;
name|QPrinter
name|native
decl_stmt|;
if|if
condition|(
name|native
operator|.
name|outputFormat
argument_list|()
operator|==
name|QPrinter
operator|::
name|NativeFormat
condition|)
block|{
comment|// Test default
name|QCOMPARE
argument_list|(
name|native
operator|.
name|docName
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test set/get
name|QString
name|expected
init|=
name|QStringLiteral
argument_list|(
literal|"Test Name"
argument_list|)
decl_stmt|;
name|native
operator|.
name|setDocName
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|docName
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
comment|// Test value preservation
name|native
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|docName
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|native
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|NativeFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|docName
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"No printers installed, cannot test NativeFormat, please install printers to test"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|duplex
name|void
name|tst_QPrinter
operator|::
name|duplex
parameter_list|()
block|{
comment|// duplex()) / setDuplex() / PPK_Duplex
comment|// PdfFormat: Supported, default QPrinter::DuplexNone
comment|// NativeFormat, Cups: Supported, default to printer default
comment|// NativeFormat, Win: Supported, default to printer default
comment|// NativeFormat, Mac: Supported, default to printer default
name|QPrinter
name|pdf
decl_stmt|;
name|pdf
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|duplex
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|DuplexNone
argument_list|)
expr_stmt|;
name|pdf
operator|.
name|setDuplex
argument_list|(
name|QPrinter
operator|::
name|DuplexAuto
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|duplex
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|DuplexAuto
argument_list|)
expr_stmt|;
name|QPrinter
name|native
decl_stmt|;
if|if
condition|(
name|native
operator|.
name|outputFormat
argument_list|()
operator|==
name|QPrinter
operator|::
name|NativeFormat
condition|)
block|{
comment|// Test default
name|QPrinterInfo
name|printerInfo
init|=
name|QPrinterInfo
operator|::
name|defaultPrinter
argument_list|()
decl_stmt|;
name|QPrinter
operator|::
name|DuplexMode
name|expected
init|=
name|printerInfo
operator|.
name|defaultDuplexMode
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|duplex
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
comment|// Test set/get (skipping Auto as that will return something different)
foreach|foreach
control|(
name|QPrinter
operator|::
name|DuplexMode
name|mode
decl|,
name|printerInfo
operator|.
name|supportedDuplexModes
argument_list|()
control|)
block|{
if|if
condition|(
name|mode
operator|!=
name|expected
operator|&&
name|mode
operator|!=
name|QPrinter
operator|::
name|DuplexAuto
condition|)
block|{
name|expected
operator|=
name|mode
expr_stmt|;
break|break;
block|}
block|}
name|native
operator|.
name|setDuplex
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|duplex
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
comment|// Test value preservation
name|native
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|duplex
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|native
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|NativeFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|duplex
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
comment|// Test setting invalid option
if|if
condition|(
operator|!
name|printerInfo
operator|.
name|supportedDuplexModes
argument_list|()
operator|.
name|contains
argument_list|(
name|QPrinter
operator|::
name|DuplexLongSide
argument_list|)
condition|)
block|{
name|native
operator|.
name|setDuplex
argument_list|(
name|QPrinter
operator|::
name|DuplexLongSide
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|duplex
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"No printers installed, cannot test NativeFormat, please install printers to test"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|doubleSidedPrinting
name|void
name|tst_QPrinter
operator|::
name|doubleSidedPrinting
parameter_list|()
block|{
comment|// PdfFormat: Supported, default false
comment|// NativeFormat, Cups: Supported, default to printer default
comment|// NativeFormat, Win: Supported, default to printer default
comment|// NativeFormat, Mac: Supported, default to printer default
name|QPrinter
name|pdf
decl_stmt|;
name|pdf
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|doubleSidedPrinting
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|pdf
operator|.
name|setDoubleSidedPrinting
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|doubleSidedPrinting
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QPrinter
name|native
decl_stmt|;
if|if
condition|(
name|native
operator|.
name|outputFormat
argument_list|()
operator|==
name|QPrinter
operator|::
name|NativeFormat
condition|)
block|{
comment|// Test default
name|QPrinterInfo
name|printerInfo
argument_list|(
name|native
argument_list|)
decl_stmt|;
name|bool
name|expected
init|=
operator|(
name|printerInfo
operator|.
name|defaultDuplexMode
argument_list|()
operator|!=
name|QPrinter
operator|::
name|DuplexNone
operator|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|doubleSidedPrinting
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
comment|// Test set/get, changing the expected value if possible
name|expected
operator|=
name|expected
condition|?
literal|false
else|:
operator|(
name|printerInfo
operator|.
name|supportedDuplexModes
argument_list|()
operator|.
name|count
argument_list|()
operator|>
literal|1
operator|)
expr_stmt|;
name|native
operator|.
name|setDoubleSidedPrinting
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|doubleSidedPrinting
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
comment|// Test value preservation
name|native
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|doubleSidedPrinting
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|native
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|NativeFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|doubleSidedPrinting
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"No printers installed, cannot test NativeFormat, please install printers to test"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|fontEmbedding
name|void
name|tst_QPrinter
operator|::
name|fontEmbedding
parameter_list|()
block|{
comment|// fontEmbeddingEnabled() / setFontEmbeddingEnabled() / PPK_FontEmbedding
comment|// PdfFormat: Supported, default true
comment|// NativeFormat: Supported, default true
name|QPrinter
name|pdf
decl_stmt|;
name|pdf
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|fontEmbeddingEnabled
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|pdf
operator|.
name|setFontEmbeddingEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|fontEmbeddingEnabled
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QPrinter
name|native
decl_stmt|;
if|if
condition|(
name|native
operator|.
name|outputFormat
argument_list|()
operator|==
name|QPrinter
operator|::
name|NativeFormat
condition|)
block|{
comment|// Test default
name|QCOMPARE
argument_list|(
name|native
operator|.
name|fontEmbeddingEnabled
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Test set/get
name|native
operator|.
name|setFontEmbeddingEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|fontEmbeddingEnabled
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Test value preservation
name|native
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|fontEmbeddingEnabled
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|native
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|NativeFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|fontEmbeddingEnabled
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"No printers installed, cannot test NativeFormat, please install printers to test"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|fullPage
name|void
name|tst_QPrinter
operator|::
name|fullPage
parameter_list|()
block|{
comment|// fullPage() / setFullPage() / PPK_FullPage
comment|// PdfFormat: Supported, default false
comment|// NativeFormat, Cups: Supported, default false
comment|// NativeFormat, Win: Supported, default false
comment|// NativeFormat, Mac: Supported, default false
name|QPrinter
name|pdf
decl_stmt|;
name|pdf
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|fullPage
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|pdf
operator|.
name|setFullPage
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|fullPage
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|pdf
operator|.
name|setFullPage
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|fullPage
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QPrinter
name|native
decl_stmt|;
if|if
condition|(
name|native
operator|.
name|outputFormat
argument_list|()
operator|==
name|QPrinter
operator|::
name|NativeFormat
condition|)
block|{
comment|// Test default
name|QCOMPARE
argument_list|(
name|native
operator|.
name|fullPage
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// Test set/get
name|bool
name|expected
init|=
literal|true
decl_stmt|;
name|native
operator|.
name|setFullPage
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|fullPage
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
comment|// Test value preservation
name|native
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|fullPage
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|native
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|NativeFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|fullPage
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
comment|// Test set/get
name|expected
operator|=
literal|false
expr_stmt|;
name|native
operator|.
name|setFullPage
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|fullPage
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
comment|// Test value preservation
name|native
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|fullPage
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|native
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|NativeFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|fullPage
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"No printers installed, cannot test NativeFormat, please install printers to test"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|orientation
name|void
name|tst_QPrinter
operator|::
name|orientation
parameter_list|()
block|{
comment|// orientation() / setOrientation() / PPK_Orientation
comment|// PdfFormat: Supported, default QPrinter::Portrait
comment|// NativeFormat, Cups: Supported, default QPrinter::Portrait
comment|// NativeFormat, Win: Supported, default QPrinter::Portrait
comment|// NativeFormat, Mac: Supported, default QPrinter::Portrait
name|QPrinter
name|pdf
decl_stmt|;
name|pdf
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|orientation
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|Portrait
argument_list|)
expr_stmt|;
name|pdf
operator|.
name|setOrientation
argument_list|(
name|QPrinter
operator|::
name|Landscape
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|orientation
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|Landscape
argument_list|)
expr_stmt|;
name|QPrinter
name|native
decl_stmt|;
if|if
condition|(
name|native
operator|.
name|outputFormat
argument_list|()
operator|==
name|QPrinter
operator|::
name|NativeFormat
condition|)
block|{
comment|// Test default
comment|// TODO Printer specific, need QPrinterInfo::orientation()
comment|//QCOMPARE(native.orientation(), QPrinter::Portrait);
comment|// Test set/get
name|QPrinter
operator|::
name|Orientation
name|expected
init|=
name|QPrinter
operator|::
name|Landscape
decl_stmt|;
name|native
operator|.
name|setOrientation
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|orientation
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
comment|// Test value preservation
name|native
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|orientation
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|native
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|NativeFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|orientation
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
comment|// Test set/get
name|expected
operator|=
name|QPrinter
operator|::
name|Portrait
expr_stmt|;
name|native
operator|.
name|setOrientation
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|orientation
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
comment|// Test value preservation
name|native
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|orientation
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|native
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|NativeFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|orientation
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"No printers installed, cannot test NativeFormat, please install printers to test"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|outputFileName
name|void
name|tst_QPrinter
operator|::
name|outputFileName
parameter_list|()
block|{
comment|// outputFileName() / setOutputFileName() / PPK_OutputFileName
comment|// PdfFormat: Supported, default QString()
comment|// NativeFormat, Cups: Supported, default QString()
comment|// NativeFormat, Win: Supported, default QString()
comment|// NativeFormat, Mac: Supported, default QString()
name|QPrinter
name|pdf
decl_stmt|;
name|pdf
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|outputFileName
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|pdf
operator|.
name|setOutputFileName
argument_list|(
name|QStringLiteral
argument_list|(
literal|"Test File"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|outputFileName
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Test File"
argument_list|)
argument_list|)
expr_stmt|;
name|QPrinter
name|native
decl_stmt|;
if|if
condition|(
name|native
operator|.
name|outputFormat
argument_list|()
operator|==
name|QPrinter
operator|::
name|NativeFormat
condition|)
block|{
comment|// Test default
name|QCOMPARE
argument_list|(
name|native
operator|.
name|outputFileName
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test set/get
name|QString
name|expected
init|=
name|QStringLiteral
argument_list|(
literal|"Test File"
argument_list|)
decl_stmt|;
name|native
operator|.
name|setOutputFileName
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|outputFileName
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
comment|// Test value preservation
name|native
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|outputFileName
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|native
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|NativeFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|outputFileName
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"No printers installed, cannot test NativeFormat, please install printers to test"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|pageOrder
name|void
name|tst_QPrinter
operator|::
name|pageOrder
parameter_list|()
block|{
comment|// pageOrder() / setPageOrder() / PPK_PageOrder
comment|// PdfFormat: Supported, default QPrinter::FirstPageFirst
comment|// NativeFormat, Cups: Supported, default QPrinter::FirstPageFirst
comment|// NativeFormat, Win: Unsupported, always QPrinter::FirstPageFirst
comment|// NativeFormat, Mac: Unsupported, always QPrinter::FirstPageFirst
name|QPrinter
name|pdf
decl_stmt|;
name|pdf
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|pageOrder
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|FirstPageFirst
argument_list|)
expr_stmt|;
name|pdf
operator|.
name|setPageOrder
argument_list|(
name|QPrinter
operator|::
name|LastPageFirst
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|pageOrder
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|LastPageFirst
argument_list|)
expr_stmt|;
name|QPrinter
name|native
decl_stmt|;
if|if
condition|(
name|native
operator|.
name|outputFormat
argument_list|()
operator|==
name|QPrinter
operator|::
name|NativeFormat
condition|)
block|{
comment|// Test default
name|QCOMPARE
argument_list|(
name|native
operator|.
name|pageOrder
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|FirstPageFirst
argument_list|)
expr_stmt|;
comment|// Test set/get
name|QPrinter
operator|::
name|PageOrder
name|expected
init|=
name|QPrinter
operator|::
name|LastPageFirst
decl_stmt|;
name|native
operator|.
name|setPageOrder
argument_list|(
name|expected
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
name|Q_OS_MAC
operator|||
name|defined
name|Q_OS_WIN
name|expected
operator|=
name|QPrinter
operator|::
name|FirstPageFirst
expr_stmt|;
endif|#
directive|endif
comment|// Q_OS_MAC || Q_OS_WIN
name|QCOMPARE
argument_list|(
name|native
operator|.
name|pageOrder
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
comment|// Test value preservation
name|native
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|pageOrder
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|native
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|NativeFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|pageOrder
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"No printers installed, cannot test NativeFormat, please install printers to test"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|pageSize
name|void
name|tst_QPrinter
operator|::
name|pageSize
parameter_list|()
block|{
comment|// Note PPK_PaperSize == PPK_PageSize
comment|// pageSize() / setPageSize() / PPK_PageSize
comment|// PdfFormat: Supported, defaults to QPrinter::A4
comment|// NativeFormat, Cups: Supported, defaults to printer default
comment|// NativeFormat, Win: Supported, defaults to printer default
comment|// NativeFormat, Mac: Supported, must be supported size, defaults to printer default
name|QPrinter
name|pdf
decl_stmt|;
name|pdf
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|pageSize
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|A4
argument_list|)
expr_stmt|;
name|pdf
operator|.
name|setPageSize
argument_list|(
name|QPrinter
operator|::
name|A1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|pageSize
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|A1
argument_list|)
expr_stmt|;
name|QPrinter
name|native
decl_stmt|;
if|if
condition|(
name|native
operator|.
name|outputFormat
argument_list|()
operator|==
name|QPrinter
operator|::
name|NativeFormat
condition|)
block|{
comment|// Test default
comment|// TODO Printer specific, need QPrinterInfo::paperSize()
comment|//QCOMPARE(native.pageSize(), QPrinter::A4);
comment|// Test set/get
name|QPrinter
operator|::
name|PaperSize
name|expected
init|=
name|QPrinter
operator|::
name|A4
decl_stmt|;
name|QPrinterInfo
name|info
init|=
name|QPrinterInfo
operator|::
name|printerInfo
argument_list|(
name|native
operator|.
name|printerName
argument_list|()
argument_list|)
decl_stmt|;
foreach|foreach
control|(
name|QPrinter
operator|::
name|PaperSize
name|supported
decl|,
name|info
operator|.
name|supportedPaperSizes
argument_list|()
control|)
block|{
if|if
condition|(
name|supported
operator|!=
name|QPrinter
operator|::
name|Custom
operator|&&
name|supported
operator|!=
name|native
operator|.
name|paperSize
argument_list|()
condition|)
block|{
name|expected
operator|=
name|supported
expr_stmt|;
break|break;
block|}
block|}
name|native
operator|.
name|setPageSize
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|pageSize
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
comment|// Test value preservation
name|native
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|pageSize
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|native
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|NativeFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|pageSize
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"No printers installed, cannot test NativeFormat, please install printers to test"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|paperSize
name|void
name|tst_QPrinter
operator|::
name|paperSize
parameter_list|()
block|{
comment|// PPK_PaperSize == PPK_PageSize
comment|// paperSize() / setPaperSize() / PPK_PaperSize
comment|// pageSize() / setPageSize() / PPK_PageSize
comment|// PdfFormat: Supported, defaults to QPrinter::A4
comment|// NativeFormat, Cups: Supported, defaults to printer default
comment|// NativeFormat, Win: Supported, defaults to printer default
comment|// NativeFormat, Mac: Supported, must be supported size, defaults to printer default
name|QPrinter
name|pdf
decl_stmt|;
name|pdf
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|paperSize
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|A4
argument_list|)
expr_stmt|;
name|pdf
operator|.
name|setPaperSize
argument_list|(
name|QPrinter
operator|::
name|A1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|paperSize
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|A1
argument_list|)
expr_stmt|;
name|QPrinter
name|native
decl_stmt|;
if|if
condition|(
name|native
operator|.
name|outputFormat
argument_list|()
operator|==
name|QPrinter
operator|::
name|NativeFormat
condition|)
block|{
comment|// Test default
comment|// TODO Printer specific, need QPrinterInfo::paperSize()
comment|//QCOMPARE(native.paperSize(), QPrinter::A4);
comment|// Test set/get
name|QPrinter
operator|::
name|PaperSize
name|expected
init|=
name|QPrinter
operator|::
name|A4
decl_stmt|;
name|QPrinterInfo
name|info
init|=
name|QPrinterInfo
operator|::
name|printerInfo
argument_list|(
name|native
operator|.
name|printerName
argument_list|()
argument_list|)
decl_stmt|;
foreach|foreach
control|(
name|QPrinter
operator|::
name|PaperSize
name|supported
decl|,
name|info
operator|.
name|supportedPaperSizes
argument_list|()
control|)
block|{
if|if
condition|(
name|supported
operator|!=
name|QPrinter
operator|::
name|Custom
operator|&&
name|supported
operator|!=
name|native
operator|.
name|paperSize
argument_list|()
condition|)
block|{
name|expected
operator|=
name|supported
expr_stmt|;
break|break;
block|}
block|}
name|native
operator|.
name|setPaperSize
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|paperSize
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
comment|// Test value preservation
name|native
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|paperSize
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|native
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|NativeFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|paperSize
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"No printers installed, cannot test NativeFormat, please install printers to test"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|paperSource
name|void
name|tst_QPrinter
operator|::
name|paperSource
parameter_list|()
block|{
comment|// paperSource() / setPaperSource() / PPK_PaperSource
comment|// PdfFormat: Supported, defaults to QPrinter::Auto
comment|// NativeFormat, Cups: Supported, defaults to QPrinter::Auto
comment|// NativeFormat, Win: Supported if valid DevMode and in supportedPaperSources(), otherwise QPrinter::Auto
comment|// NativeFormat, Mac: Unsupported, always QPrinter::Auto
name|QPrinter
name|pdf
decl_stmt|;
name|pdf
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|paperSource
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|Auto
argument_list|)
expr_stmt|;
name|pdf
operator|.
name|setPaperSource
argument_list|(
name|QPrinter
operator|::
name|Lower
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|paperSource
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|Lower
argument_list|)
expr_stmt|;
name|QPrinter
name|native
decl_stmt|;
if|if
condition|(
name|native
operator|.
name|outputFormat
argument_list|()
operator|==
name|QPrinter
operator|::
name|NativeFormat
condition|)
block|{
comment|// Test default
comment|// TODO Printer specific, need QPrinterInfo::paperSource()
comment|//QCOMPARE(native.paperSource(), QPrinter::Auto);
comment|// Test set/get
name|QPrinter
operator|::
name|PaperSource
name|expected
init|=
name|QPrinter
operator|::
name|Manual
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|expected
operator|=
name|QPrinter
operator|::
name|Auto
expr_stmt|;
foreach|foreach
control|(
name|QPrinter
operator|::
name|PaperSource
name|supported
decl|,
name|native
operator|.
name|supportedPaperSources
argument_list|()
control|)
block|{
if|if
condition|(
name|supported
operator|!=
name|QPrinter
operator|::
name|Auto
condition|)
block|{
name|expected
operator|=
name|supported
expr_stmt|;
break|break;
block|}
block|}
endif|#
directive|endif
comment|// Q_OS_WIN
name|native
operator|.
name|setPaperSource
argument_list|(
name|expected
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|expected
operator|=
name|QPrinter
operator|::
name|Auto
expr_stmt|;
endif|#
directive|endif
comment|// Q_OS_MAC
name|QCOMPARE
argument_list|(
name|native
operator|.
name|paperSource
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
comment|// Test value preservation
name|native
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|paperSource
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|native
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|NativeFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|paperSource
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"No printers installed, cannot test NativeFormat, please install printers to test"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|printProgram
name|void
name|tst_QPrinter
operator|::
name|printProgram
parameter_list|()
block|{
comment|// printProgram() / setPrintProgram() / PPK_PrintProgram
comment|// PdfFormat: Supported, default QString()
comment|// NativeFormat, Cups: Supported, default QString()
comment|// NativeFormat, Win: Unsupported, always QString()
comment|// NativeFormat, Mac: Unsupported, always QString()
name|QPrinter
name|pdf
decl_stmt|;
name|pdf
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|printProgram
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|pdf
operator|.
name|setPrintProgram
argument_list|(
name|QStringLiteral
argument_list|(
literal|"/usr/bin/lpr"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|printProgram
argument_list|()
argument_list|,
name|QStringLiteral
argument_list|(
literal|"/usr/bin/lpr"
argument_list|)
argument_list|)
expr_stmt|;
name|QPrinter
name|native
decl_stmt|;
if|if
condition|(
name|native
operator|.
name|outputFormat
argument_list|()
operator|==
name|QPrinter
operator|::
name|NativeFormat
condition|)
block|{
comment|// Test default
name|QCOMPARE
argument_list|(
name|native
operator|.
name|printProgram
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test set/get
name|QString
name|expected
init|=
name|QStringLiteral
argument_list|(
literal|"/usr/bin/lpr"
argument_list|)
decl_stmt|;
name|native
operator|.
name|setPrintProgram
argument_list|(
name|expected
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
name|Q_OS_MAC
operator|||
name|defined
name|Q_OS_WIN
name|expected
operator|.
name|clear
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|// Q_OS_MAC || Q_OS_WIN
name|QCOMPARE
argument_list|(
name|native
operator|.
name|printProgram
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
comment|// Test value preservation
name|native
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|printProgram
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|native
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|NativeFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|printProgram
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"No printers installed, cannot test NativeFormat, please install printers to test"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|printRange
name|void
name|tst_QPrinter
operator|::
name|printRange
parameter_list|()
block|{
comment|// printRange() / setPrintRange() / PPK_PrintRange
comment|// PdfFormat: Supported, default QPrinter::AllPages
comment|// NativeFormat, Cups: Supported, default QPrinter::AllPages
comment|// NativeFormat, Win: Supported, default QPrinter::AllPages
comment|// NativeFormat, Mac: Supported, default QPrinter::AllPages
name|QPrinter
name|pdf
decl_stmt|;
name|pdf
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|printRange
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|AllPages
argument_list|)
expr_stmt|;
name|pdf
operator|.
name|setPrintRange
argument_list|(
name|QPrinter
operator|::
name|CurrentPage
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|printRange
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|CurrentPage
argument_list|)
expr_stmt|;
name|QPrinter
name|native
decl_stmt|;
if|if
condition|(
name|native
operator|.
name|outputFormat
argument_list|()
operator|==
name|QPrinter
operator|::
name|NativeFormat
condition|)
block|{
comment|// Test default
name|QCOMPARE
argument_list|(
name|native
operator|.
name|printRange
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|AllPages
argument_list|)
expr_stmt|;
comment|// Test set/get
name|QPrinter
operator|::
name|PrintRange
name|expected
init|=
name|QPrinter
operator|::
name|PageRange
decl_stmt|;
name|native
operator|.
name|setPrintRange
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|printRange
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
comment|// Test value preservation
name|native
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|printRange
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|native
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|NativeFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|printRange
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"No printers installed, cannot test NativeFormat, please install printers to test"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|printerName
name|void
name|tst_QPrinter
operator|::
name|printerName
parameter_list|()
block|{
comment|// printerName() / setPrinterName() / PPK_PrinterName
comment|// PdfFormat: Supported, default QString
comment|// NativeFormat, Cups: Supported, default printer
comment|// NativeFormat, Win: Supported, default printer
comment|// NativeFormat, Mac: Supported, default printer
name|QPrinter
name|pdf
decl_stmt|;
name|pdf
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|printerName
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|QPrinterInfo
operator|::
name|availablePrinters
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|pdf
operator|.
name|setPrinterName
argument_list|(
name|QStringLiteral
argument_list|(
literal|"Test Printer"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|printerName
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|outputFormat
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|pdf
operator|.
name|setPrinterName
argument_list|(
name|QPrinterInfo
operator|::
name|defaultPrinter
argument_list|()
operator|.
name|printerName
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|printerName
argument_list|()
argument_list|,
name|QPrinterInfo
operator|::
name|defaultPrinter
argument_list|()
operator|.
name|printerName
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|outputFormat
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|NativeFormat
argument_list|)
expr_stmt|;
block|}
name|QPrinter
name|native
decl_stmt|;
if|if
condition|(
name|native
operator|.
name|outputFormat
argument_list|()
operator|==
name|QPrinter
operator|::
name|NativeFormat
condition|)
block|{
comment|// Test default
name|QCOMPARE
argument_list|(
name|native
operator|.
name|printerName
argument_list|()
argument_list|,
name|QPrinterInfo
operator|::
name|defaultPrinter
argument_list|()
operator|.
name|printerName
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test set/get
name|QString
name|expected
init|=
name|QPrinterInfo
operator|::
name|defaultPrinter
argument_list|()
operator|.
name|printerName
argument_list|()
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QPrinterInfo
modifier|&
name|available
decl|,
name|QPrinterInfo
operator|::
name|availablePrinters
argument_list|()
control|)
block|{
if|if
condition|(
name|available
operator|.
name|printerName
argument_list|()
operator|!=
name|expected
condition|)
block|{
name|expected
operator|=
name|available
operator|.
name|printerName
argument_list|()
expr_stmt|;
break|break;
block|}
block|}
name|native
operator|.
name|setPrinterName
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|printerName
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
comment|// Test value preservation
name|native
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|printerName
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|native
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|NativeFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|printerName
argument_list|()
argument_list|,
name|QPrinterInfo
operator|::
name|defaultPrinter
argument_list|()
operator|.
name|printerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"No printers installed, cannot test NativeFormat, please install printers to test"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|printerSelectionOption
name|void
name|tst_QPrinter
operator|::
name|printerSelectionOption
parameter_list|()
block|{
comment|// printerSelectionOption() / setPrinterSelectionOption() / PPK_SelectionOption
comment|// PdfFormat: Supported
comment|// NativeFormat, Cups: Supported
comment|// NativeFormat, Win: Unsupported, always QString()
comment|// NativeFormat, Mac: Unsupported, always QString()
name|QPrinter
name|pdf
decl_stmt|;
name|pdf
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|printerSelectionOption
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|pdf
operator|.
name|setPrinterSelectionOption
argument_list|(
name|QStringLiteral
argument_list|(
literal|"Optional option"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|printerSelectionOption
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Optional option"
argument_list|)
argument_list|)
expr_stmt|;
name|QPrinter
name|native
decl_stmt|;
if|if
condition|(
name|native
operator|.
name|outputFormat
argument_list|()
operator|==
name|QPrinter
operator|::
name|NativeFormat
condition|)
block|{
comment|// Test default
name|QCOMPARE
argument_list|(
name|native
operator|.
name|printerSelectionOption
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test set/get
name|QString
name|expected
init|=
name|QStringLiteral
argument_list|(
literal|"Optional option"
argument_list|)
decl_stmt|;
name|native
operator|.
name|setPrinterSelectionOption
argument_list|(
name|expected
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
name|Q_OS_MAC
operator|||
name|defined
name|Q_OS_WIN
name|expected
operator|.
name|clear
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|// Q_OS_MAC || Q_OS_WIN
name|QCOMPARE
argument_list|(
name|native
operator|.
name|printerSelectionOption
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
comment|// Test value preservation
name|native
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|printerSelectionOption
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|native
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|NativeFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|printerSelectionOption
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"No printers installed, cannot test NativeFormat, please install printers to test"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|resolution
name|void
name|tst_QPrinter
operator|::
name|resolution
parameter_list|()
block|{
comment|// resolution() / setResolution() / PPK_Resolution
comment|// PdfFormat: Supported, can be any number, but only 72 returned by supportedResolutions()
comment|// NativeFormat, Cups: Supported, can be any number, but only 72 returned by supportedResolutions()
comment|// NativeFormat, Win: Supported, can be any number, but supportedResolutions() returns valid list
comment|// NativeFormat, Mac: Supported, but can only be value returned by supportedResolutions()
name|QPrinter
name|pdfScreen
argument_list|(
name|QPrinter
operator|::
name|ScreenResolution
argument_list|)
decl_stmt|;
name|pdfScreen
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdfScreen
operator|.
name|resolution
argument_list|()
argument_list|,
literal|96
argument_list|)
expr_stmt|;
name|pdfScreen
operator|.
name|setResolution
argument_list|(
literal|333
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdfScreen
operator|.
name|resolution
argument_list|()
argument_list|,
literal|333
argument_list|)
expr_stmt|;
name|QPrinter
name|pdfPrinter
argument_list|(
name|QPrinter
operator|::
name|PrinterResolution
argument_list|)
decl_stmt|;
name|pdfPrinter
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdfPrinter
operator|.
name|resolution
argument_list|()
argument_list|,
literal|72
argument_list|)
expr_stmt|;
name|pdfPrinter
operator|.
name|setResolution
argument_list|(
literal|333
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdfPrinter
operator|.
name|resolution
argument_list|()
argument_list|,
literal|333
argument_list|)
expr_stmt|;
name|QPrinter
name|pdfHigh
argument_list|(
name|QPrinter
operator|::
name|HighResolution
argument_list|)
decl_stmt|;
name|pdfHigh
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdfHigh
operator|.
name|resolution
argument_list|()
argument_list|,
literal|1200
argument_list|)
expr_stmt|;
name|pdfHigh
operator|.
name|setResolution
argument_list|(
literal|333
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdfHigh
operator|.
name|resolution
argument_list|()
argument_list|,
literal|333
argument_list|)
expr_stmt|;
name|QPrinter
name|native
argument_list|(
name|QPrinter
operator|::
name|HighResolution
argument_list|)
decl_stmt|;
if|if
condition|(
name|native
operator|.
name|outputFormat
argument_list|()
operator|==
name|QPrinter
operator|::
name|NativeFormat
condition|)
block|{
comment|// Test default
comment|// TODO Printer specific, need QPrinterInfo::resolution()
comment|//QCOMPARE(native.resolution(), 300);
comment|// Test set/get
name|int
name|expected
init|=
literal|333
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
comment|// QMacPrintEngine chooses the closest supported resolution.
specifier|const
name|QList
argument_list|<
name|int
argument_list|>
name|all_supported
init|=
name|native
operator|.
name|supportedResolutions
argument_list|()
decl_stmt|;
foreach|foreach
control|(
name|int
name|supported
decl|,
name|all_supported
control|)
block|{
comment|// Test setting a supported resolution
name|int
name|requested
init|=
name|supported
decl_stmt|;
name|native
operator|.
name|setResolution
argument_list|(
name|requested
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|resolution
argument_list|()
argument_list|,
name|requested
argument_list|)
expr_stmt|;
comment|// Test setting an unsupported resolution
do|do
block|{
name|requested
operator|+=
literal|5
expr_stmt|;
block|}
do|while
condition|(
name|all_supported
operator|.
name|contains
argument_list|(
name|requested
argument_list|)
condition|)
do|;
name|native
operator|.
name|setResolution
argument_list|(
name|requested
argument_list|)
expr_stmt|;
name|int
name|result
init|=
name|native
operator|.
name|resolution
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|all_supported
operator|.
name|contains
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qAbs
argument_list|(
name|result
operator|-
name|requested
argument_list|)
operator|<=
name|qAbs
argument_list|(
name|supported
operator|-
name|requested
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|expected
operator|=
name|native
operator|.
name|resolution
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|// Q_OS_MAC
name|native
operator|.
name|setResolution
argument_list|(
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|resolution
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
comment|// Test value preservation
name|native
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|resolution
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|native
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|NativeFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|resolution
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"No printers installed, cannot test NativeFormat, please install printers to test"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|supportedPaperSources
name|void
name|tst_QPrinter
operator|::
name|supportedPaperSources
parameter_list|()
block|{
comment|// supportedPaperSources() / PPK_PaperSources
comment|// PdfFormat: ifdef'd out TODO remove ifdef
comment|// NativeFormat, Cups: ifdef'd out TODO remove ifdef
comment|// NativeFormat, Win: Supported, defaults to printer default
comment|// NativeFormat, Mac: ifdef'd out TODO remove ifdef
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|QPrinter
name|native
decl_stmt|;
if|if
condition|(
name|native
operator|.
name|outputFormat
argument_list|()
operator|==
name|QPrinter
operator|::
name|NativeFormat
condition|)
block|{
name|native
operator|.
name|supportedPaperSources
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"No printers installed, cannot test NativeFormat, please install printers to test"
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
comment|// Q_OS_WIN
block|}
end_function
begin_function
DECL|function|supportedResolutions
name|void
name|tst_QPrinter
operator|::
name|supportedResolutions
parameter_list|()
block|{
comment|// supportedResolutions() / PPK_SupportedResolutions
comment|// PdfFormat: Supported, only returns 72
comment|// NativeFormat, Cups: Supported, only returns 72
comment|// NativeFormat, Win: Supported, defaults to printer list
comment|// NativeFormat, Mac: Supported, defaults to printer list
name|QList
argument_list|<
name|int
argument_list|>
name|expected
decl_stmt|;
name|QPrinter
name|pdf
decl_stmt|;
name|pdf
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|expected
operator|<<
literal|72
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|supportedResolutions
argument_list|()
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QPrinter
name|native
decl_stmt|;
if|if
condition|(
name|native
operator|.
name|outputFormat
argument_list|()
operator|==
name|QPrinter
operator|::
name|NativeFormat
condition|)
block|{
name|native
operator|.
name|supportedResolutions
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"No printers installed, cannot test NativeFormat, please install printers to test"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|windowsPageSize
name|void
name|tst_QPrinter
operator|::
name|windowsPageSize
parameter_list|()
block|{
comment|// winPageSize() / setWinPageSize() / PPK_WindowsPageSize
comment|// PdfFormat: Supported, defaults to printer default
comment|// NativeFormat, Cups: Supported, defaults to printer default
comment|// NativeFormat, Win: Supported, defaults to printer default
comment|// NativeFormat, Mac: Supported, defaults to printer default
name|QPrinter
name|pdf
decl_stmt|;
name|pdf
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|winPageSize
argument_list|()
argument_list|,
literal|9
argument_list|)
expr_stmt|;
comment|// DMPAPER_A4
name|pdf
operator|.
name|setWinPageSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// DMPAPER_LETTER
name|QCOMPARE
argument_list|(
name|pdf
operator|.
name|winPageSize
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QPrinter
name|native
decl_stmt|;
if|if
condition|(
name|native
operator|.
name|outputFormat
argument_list|()
operator|==
name|QPrinter
operator|::
name|NativeFormat
condition|)
block|{
comment|// Test set/get
name|native
operator|.
name|setPaperSize
argument_list|(
name|QPrinter
operator|::
name|A4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|pageSize
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|A4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|winPageSize
argument_list|()
argument_list|,
literal|9
argument_list|)
expr_stmt|;
comment|// DMPAPER_A4
name|native
operator|.
name|setPaperSize
argument_list|(
name|QPrinter
operator|::
name|Letter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|pageSize
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|Letter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|winPageSize
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// DMPAPER_LETTER
name|native
operator|.
name|setWinPageSize
argument_list|(
literal|9
argument_list|)
expr_stmt|;
comment|// DMPAPER_A4
name|QCOMPARE
argument_list|(
name|native
operator|.
name|pageSize
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|A4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|winPageSize
argument_list|()
argument_list|,
literal|9
argument_list|)
expr_stmt|;
comment|// DMPAPER_A4
name|native
operator|.
name|setWinPageSize
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// DMPAPER_LETTER
name|QCOMPARE
argument_list|(
name|native
operator|.
name|pageSize
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|Letter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|winPageSize
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// DMPAPER_LETTER
comment|// Test value preservation
name|native
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|pageSize
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|Letter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|winPageSize
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// DMPAPER_LETTER
name|native
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|NativeFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|pageSize
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|Letter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|native
operator|.
name|winPageSize
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// DMPAPER_LETTER
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"No printers installed, cannot test NativeFormat, please install printers to test"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// Test QPrinter setters/getters for non-QPrintEngine options
end_comment
begin_function
DECL|function|outputFormat
name|void
name|tst_QPrinter
operator|::
name|outputFormat
parameter_list|()
block|{
name|QPrinter
name|printer
decl_stmt|;
if|if
condition|(
name|QPrinterInfo
operator|::
name|availablePrinters
argument_list|()
operator|.
name|size
argument_list|()
operator|==
literal|0
condition|)
block|{
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|outputFormat
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|printerName
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|outputFormat
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|NativeFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|printerName
argument_list|()
argument_list|,
name|QPrinterInfo
operator|::
name|defaultPrinter
argument_list|()
operator|.
name|printerName
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|printer
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|outputFormat
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|printerName
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fromToPage
name|void
name|tst_QPrinter
operator|::
name|fromToPage
parameter_list|()
block|{
name|QPrinter
name|printer
decl_stmt|;
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|fromPage
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|toPage
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|printer
operator|.
name|setFromTo
argument_list|(
literal|3
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|fromPage
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|toPage
argument_list|()
argument_list|,
literal|7
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testPageMetrics_data
name|void
name|tst_QPrinter
operator|::
name|testPageMetrics_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"outputFormat"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"pageSize"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|qreal
argument_list|>
argument_list|(
literal|"widthMMf"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|qreal
argument_list|>
argument_list|(
literal|"heightMMf"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"setMargins"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|qreal
argument_list|>
argument_list|(
literal|"leftMMf"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|qreal
argument_list|>
argument_list|(
literal|"rightMMf"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|qreal
argument_list|>
argument_list|(
literal|"topMMf"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|qreal
argument_list|>
argument_list|(
literal|"bottomMMf"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"PDF A4"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|A4
argument_list|)
operator|<<
literal|210.0
operator|<<
literal|297.0
operator|<<
literal|false
operator|<<
literal|0.0
operator|<<
literal|0.0
operator|<<
literal|0.0
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"PDF A4 Margins"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|A4
argument_list|)
operator|<<
literal|210.0
operator|<<
literal|297.0
operator|<<
literal|true
operator|<<
literal|20.0
operator|<<
literal|30.0
operator|<<
literal|40.0
operator|<<
literal|50.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Native A4"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|NativeFormat
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|A4
argument_list|)
operator|<<
literal|210.0
operator|<<
literal|297.0
operator|<<
literal|false
operator|<<
literal|0.0
operator|<<
literal|0.0
operator|<<
literal|0.0
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Native A4 Margins"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|NativeFormat
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|A4
argument_list|)
operator|<<
literal|210.0
operator|<<
literal|297.0
operator|<<
literal|true
operator|<<
literal|20.0
operator|<<
literal|30.0
operator|<<
literal|40.0
operator|<<
literal|50.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"PDF Portrait"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
literal|200.0
operator|<<
literal|300.0
operator|<<
literal|false
operator|<<
literal|0.0
operator|<<
literal|0.0
operator|<<
literal|0.0
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"PDF Portrait Margins"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
literal|200.0
operator|<<
literal|300.0
operator|<<
literal|true
operator|<<
literal|20.0
operator|<<
literal|30.0
operator|<<
literal|40.0
operator|<<
literal|50.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"PDF Landscape"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
literal|300.0
operator|<<
literal|200.0
operator|<<
literal|false
operator|<<
literal|0.0
operator|<<
literal|0.0
operator|<<
literal|0.0
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"PDF Landscape Margins"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|PdfFormat
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
literal|300.0
operator|<<
literal|200.0
operator|<<
literal|true
operator|<<
literal|20.0
operator|<<
literal|30.0
operator|<<
literal|40.0
operator|<<
literal|50.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Native Portrait"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|NativeFormat
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
literal|200.0
operator|<<
literal|300.0
operator|<<
literal|false
operator|<<
literal|0.0
operator|<<
literal|0.0
operator|<<
literal|0.0
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Native Portrait Margins"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|NativeFormat
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
literal|200.0
operator|<<
literal|300.0
operator|<<
literal|true
operator|<<
literal|20.0
operator|<<
literal|30.0
operator|<<
literal|40.0
operator|<<
literal|50.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Native Landscape"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|NativeFormat
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
literal|300.0
operator|<<
literal|200.0
operator|<<
literal|false
operator|<<
literal|0.0
operator|<<
literal|0.0
operator|<<
literal|0.0
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Native Landscape Margins"
argument_list|)
operator|<<
name|int
argument_list|(
name|QPrinter
operator|::
name|NativeFormat
argument_list|)
operator|<<
operator|-
literal|1
operator|<<
literal|300.0
operator|<<
literal|200.0
operator|<<
literal|true
operator|<<
literal|20.0
operator|<<
literal|30.0
operator|<<
literal|40.0
operator|<<
literal|50.0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testPageMetrics
name|void
name|tst_QPrinter
operator|::
name|testPageMetrics
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|outputFormat
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|pageSize
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|qreal
argument_list|,
name|widthMMf
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|qreal
argument_list|,
name|heightMMf
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|setMargins
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|qreal
argument_list|,
name|leftMMf
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|qreal
argument_list|,
name|rightMMf
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|qreal
argument_list|,
name|topMMf
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|qreal
argument_list|,
name|bottomMMf
argument_list|)
expr_stmt|;
name|QSizeF
name|sizeMMf
init|=
name|QSizeF
argument_list|(
name|widthMMf
argument_list|,
name|heightMMf
argument_list|)
decl_stmt|;
name|QPrinter
name|printer
decl_stmt|;
name|printer
operator|.
name|setOutputFormat
argument_list|(
name|QPrinter
operator|::
name|OutputFormat
argument_list|(
name|outputFormat
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|printer
operator|.
name|outputFormat
argument_list|()
operator|!=
name|QPrinter
operator|::
name|OutputFormat
argument_list|(
name|outputFormat
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"Please install a native printer to run this test"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|outputFormat
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|OutputFormat
argument_list|(
name|outputFormat
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|orientation
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|Portrait
argument_list|)
expr_stmt|;
if|if
condition|(
name|setMargins
condition|)
block|{
comment|// Setup the given margins
name|QPrinter
operator|::
name|Margins
name|margins
decl_stmt|;
name|margins
operator|.
name|left
operator|=
name|leftMMf
expr_stmt|;
name|margins
operator|.
name|right
operator|=
name|rightMMf
expr_stmt|;
name|margins
operator|.
name|top
operator|=
name|topMMf
expr_stmt|;
name|margins
operator|.
name|bottom
operator|=
name|bottomMMf
expr_stmt|;
name|printer
operator|.
name|setMargins
argument_list|(
name|margins
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|margins
argument_list|()
operator|.
name|left
argument_list|,
name|leftMMf
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|margins
argument_list|()
operator|.
name|right
argument_list|,
name|rightMMf
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|margins
argument_list|()
operator|.
name|top
argument_list|,
name|topMMf
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|margins
argument_list|()
operator|.
name|bottom
argument_list|,
name|bottomMMf
argument_list|)
expr_stmt|;
block|}
comment|// Set the given size, in Portrait mode
if|if
condition|(
name|pageSize
operator|<
literal|0
condition|)
block|{
name|printer
operator|.
name|setPageSizeMM
argument_list|(
name|sizeMMf
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|pageSize
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|Custom
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|printer
operator|.
name|setPageSize
argument_list|(
name|QPrinter
operator|::
name|PageSize
argument_list|(
name|pageSize
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|pageSize
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|PageSize
argument_list|(
name|pageSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|orientation
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|Portrait
argument_list|)
expr_stmt|;
if|if
condition|(
name|setMargins
condition|)
block|{
comment|// Check margins unchanged from page size change
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|margins
argument_list|()
operator|.
name|left
argument_list|,
name|leftMMf
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|margins
argument_list|()
operator|.
name|right
argument_list|,
name|rightMMf
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|margins
argument_list|()
operator|.
name|top
argument_list|,
name|topMMf
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|margins
argument_list|()
operator|.
name|bottom
argument_list|,
name|bottomMMf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Fetch the default margins for the printer and page size
comment|// TODO Check against margins from print device when api added
name|leftMMf
operator|=
name|printer
operator|.
name|margins
argument_list|()
operator|.
name|left
expr_stmt|;
name|rightMMf
operator|=
name|printer
operator|.
name|margins
argument_list|()
operator|.
name|right
expr_stmt|;
name|topMMf
operator|=
name|printer
operator|.
name|margins
argument_list|()
operator|.
name|top
expr_stmt|;
name|bottomMMf
operator|=
name|printer
operator|.
name|margins
argument_list|()
operator|.
name|bottom
expr_stmt|;
block|}
comment|// QPagedPaintDevice::pageSizeMM() always returns Portrait
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|pageSizeMM
argument_list|()
argument_list|,
name|sizeMMf
argument_list|)
expr_stmt|;
comment|// QPrinter::paperSize() always returns set orientation
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|paperSize
argument_list|(
name|QPrinter
operator|::
name|Millimeter
argument_list|)
argument_list|,
name|sizeMMf
argument_list|)
expr_stmt|;
comment|// QPagedPaintDevice::widthMM() and heightMM() are paint metrics and always return set orientation
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|widthMM
argument_list|()
argument_list|,
name|qRound
argument_list|(
name|widthMMf
operator|-
name|leftMMf
operator|-
name|rightMMf
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|heightMM
argument_list|()
argument_list|,
name|qRound
argument_list|(
name|heightMMf
operator|-
name|topMMf
operator|-
name|bottomMMf
argument_list|)
argument_list|)
expr_stmt|;
comment|// QPrinter::paperRect() always returns set orientation
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|paperRect
argument_list|(
name|QPrinter
operator|::
name|Millimeter
argument_list|)
argument_list|,
name|QRectF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|widthMMf
argument_list|,
name|heightMMf
argument_list|)
argument_list|)
expr_stmt|;
comment|// QPrinter::pageRect() always returns set orientation
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|pageRect
argument_list|(
name|QPrinter
operator|::
name|Millimeter
argument_list|)
argument_list|,
name|QRectF
argument_list|(
name|leftMMf
argument_list|,
name|topMMf
argument_list|,
name|widthMMf
operator|-
name|leftMMf
operator|-
name|rightMMf
argument_list|,
name|heightMMf
operator|-
name|topMMf
operator|-
name|bottomMMf
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now switch to Landscape mode, size should be unchanged, but rect and metrics should change
name|printer
operator|.
name|setOrientation
argument_list|(
name|QPrinter
operator|::
name|Landscape
argument_list|)
expr_stmt|;
if|if
condition|(
name|pageSize
operator|<
literal|0
condition|)
block|{
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|pageSize
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|Custom
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|pageSize
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|PageSize
argument_list|(
name|pageSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|orientation
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|Landscape
argument_list|)
expr_stmt|;
if|if
condition|(
name|setMargins
condition|)
block|{
comment|// Check margins unchanged from page size change
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|margins
argument_list|()
operator|.
name|left
argument_list|,
name|leftMMf
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|margins
argument_list|()
operator|.
name|right
argument_list|,
name|rightMMf
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|margins
argument_list|()
operator|.
name|top
argument_list|,
name|topMMf
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|margins
argument_list|()
operator|.
name|bottom
argument_list|,
name|bottomMMf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Fetch the default margins for the printer and page size
comment|// TODO Check against margins from print device when api added
name|leftMMf
operator|=
name|printer
operator|.
name|margins
argument_list|()
operator|.
name|left
expr_stmt|;
name|rightMMf
operator|=
name|printer
operator|.
name|margins
argument_list|()
operator|.
name|right
expr_stmt|;
name|topMMf
operator|=
name|printer
operator|.
name|margins
argument_list|()
operator|.
name|top
expr_stmt|;
name|bottomMMf
operator|=
name|printer
operator|.
name|margins
argument_list|()
operator|.
name|bottom
expr_stmt|;
block|}
comment|// QPagedPaintDevice::pageSizeMM() always returns Portrait
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|pageSizeMM
argument_list|()
argument_list|,
name|sizeMMf
argument_list|)
expr_stmt|;
comment|// QPrinter::paperSize() always returns set orientation
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|paperSize
argument_list|(
name|QPrinter
operator|::
name|Millimeter
argument_list|)
argument_list|,
name|sizeMMf
operator|.
name|transposed
argument_list|()
argument_list|)
expr_stmt|;
comment|// QPagedPaintDevice::widthMM() and heightMM() are paint metrics and always return set orientation
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|widthMM
argument_list|()
argument_list|,
name|qRound
argument_list|(
name|heightMMf
operator|-
name|leftMMf
operator|-
name|rightMMf
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|heightMM
argument_list|()
argument_list|,
name|qRound
argument_list|(
name|widthMMf
operator|-
name|topMMf
operator|-
name|bottomMMf
argument_list|)
argument_list|)
expr_stmt|;
comment|// QPrinter::paperRect() always returns set orientation
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|paperRect
argument_list|(
name|QPrinter
operator|::
name|Millimeter
argument_list|)
argument_list|,
name|QRectF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|heightMMf
argument_list|,
name|widthMMf
argument_list|)
argument_list|)
expr_stmt|;
comment|// QPrinter::pageRect() always returns set orientation
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|pageRect
argument_list|(
name|QPrinter
operator|::
name|Millimeter
argument_list|)
argument_list|,
name|QRectF
argument_list|(
name|leftMMf
argument_list|,
name|topMMf
argument_list|,
name|heightMMf
operator|-
name|leftMMf
operator|-
name|rightMMf
argument_list|,
name|widthMMf
operator|-
name|topMMf
operator|-
name|bottomMMf
argument_list|)
argument_list|)
expr_stmt|;
comment|// Now while in Landscape mode, set the size again, results should be the same
if|if
condition|(
name|pageSize
operator|<
literal|0
condition|)
block|{
name|printer
operator|.
name|setPageSizeMM
argument_list|(
name|sizeMMf
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|pageSize
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|Custom
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|printer
operator|.
name|setPageSize
argument_list|(
name|QPrinter
operator|::
name|PageSize
argument_list|(
name|pageSize
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|pageSize
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|PageSize
argument_list|(
name|pageSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|orientation
argument_list|()
argument_list|,
name|QPrinter
operator|::
name|Landscape
argument_list|)
expr_stmt|;
if|if
condition|(
name|setMargins
condition|)
block|{
comment|// Check margins unchanged from page size change
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|margins
argument_list|()
operator|.
name|left
argument_list|,
name|leftMMf
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|margins
argument_list|()
operator|.
name|right
argument_list|,
name|rightMMf
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|margins
argument_list|()
operator|.
name|top
argument_list|,
name|topMMf
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|margins
argument_list|()
operator|.
name|bottom
argument_list|,
name|bottomMMf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// Fetch the default margins for the printer and page size
comment|// TODO Check against margins from print device when api added
name|leftMMf
operator|=
name|printer
operator|.
name|margins
argument_list|()
operator|.
name|left
expr_stmt|;
name|rightMMf
operator|=
name|printer
operator|.
name|margins
argument_list|()
operator|.
name|right
expr_stmt|;
name|topMMf
operator|=
name|printer
operator|.
name|margins
argument_list|()
operator|.
name|top
expr_stmt|;
name|bottomMMf
operator|=
name|printer
operator|.
name|margins
argument_list|()
operator|.
name|bottom
expr_stmt|;
block|}
comment|// QPagedPaintDevice::pageSizeMM() always returns Portrait
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|pageSizeMM
argument_list|()
argument_list|,
name|sizeMMf
argument_list|)
expr_stmt|;
comment|// QPrinter::paperSize() always returns set orientation
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|paperSize
argument_list|(
name|QPrinter
operator|::
name|Millimeter
argument_list|)
argument_list|,
name|sizeMMf
operator|.
name|transposed
argument_list|()
argument_list|)
expr_stmt|;
comment|// QPagedPaintDevice::widthMM() and heightMM() are paint metrics and always return set orientation
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|widthMM
argument_list|()
argument_list|,
name|qRound
argument_list|(
name|heightMMf
operator|-
name|leftMMf
operator|-
name|rightMMf
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|heightMM
argument_list|()
argument_list|,
name|qRound
argument_list|(
name|widthMMf
operator|-
name|topMMf
operator|-
name|bottomMMf
argument_list|)
argument_list|)
expr_stmt|;
comment|// QPrinter::paperRect() always returns set orientation
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|paperRect
argument_list|(
name|QPrinter
operator|::
name|Millimeter
argument_list|)
argument_list|,
name|QRectF
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|,
name|heightMMf
argument_list|,
name|widthMMf
argument_list|)
argument_list|)
expr_stmt|;
comment|// QPrinter::pageRect() always returns set orientation
name|QCOMPARE
argument_list|(
name|printer
operator|.
name|pageRect
argument_list|(
name|QPrinter
operator|::
name|Millimeter
argument_list|)
argument_list|,
name|QRectF
argument_list|(
name|leftMMf
argument_list|,
name|topMMf
argument_list|,
name|heightMMf
operator|-
name|leftMMf
operator|-
name|rightMMf
argument_list|,
name|widthMMf
operator|-
name|topMMf
operator|-
name|bottomMMf
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_PRINTER
end_comment
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QPrinter
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qprinter.moc"
end_include
end_unit
