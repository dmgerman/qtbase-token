begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtGlobal>
end_include
begin_include
include|#
directive|include
file|<QtAlgorithms>
end_include
begin_include
include|#
directive|include
file|<QtPrintSupport/qprinterinfo.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_UNIX
end_ifdef
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_include
include|#
directive|include
file|<sys/types.h>
end_include
begin_include
include|#
directive|include
file|<sys/wait.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_class
DECL|class|tst_QPrinterInfo
class|class
name|tst_QPrinterInfo
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
ifdef|#
directive|ifdef
name|QT_NO_PRINTER
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
else|#
directive|else
private|private
name|slots
private|:
ifndef|#
directive|ifndef
name|Q_OS_WIN32
name|void
name|testForDefaultPrinter
parameter_list|()
function_decl|;
name|void
name|testForPrinters
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|testForPaperSizes
parameter_list|()
function_decl|;
name|void
name|testConstructors
parameter_list|()
function_decl|;
name|void
name|testAssignment
parameter_list|()
function_decl|;
name|void
name|namedPrinter
parameter_list|()
function_decl|;
private|private:
name|QString
name|getDefaultPrinterFromSystem
parameter_list|()
function_decl|;
name|QStringList
name|getPrintersFromSystem
parameter_list|()
function_decl|;
ifdef|#
directive|ifdef
name|Q_OS_UNIX
name|QString
name|getOutputFromCommand
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|command
parameter_list|)
function_decl|;
endif|#
directive|endif
comment|// Q_OS_UNIX
endif|#
directive|endif
block|}
class|;
end_class
begin_ifdef
ifdef|#
directive|ifdef
name|QT_NO_PRINTER
end_ifdef
begin_function
DECL|function|initTestCase
name|void
name|tst_QPrinterInfo
operator|::
name|initTestCase
parameter_list|()
block|{
name|QSKIP
argument_list|(
literal|"This test requires printing support"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_QPrinterInfo
operator|::
name|cleanupTestCase
parameter_list|()
block|{
name|QSKIP
argument_list|(
literal|"This test requires printing support"
argument_list|)
expr_stmt|;
block|}
end_function
begin_else
else|#
directive|else
end_else
begin_function
DECL|function|getDefaultPrinterFromSystem
name|QString
name|tst_QPrinterInfo
operator|::
name|getDefaultPrinterFromSystem
parameter_list|()
block|{
name|QString
name|printer
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN32
comment|// TODO "cscript c:\windows\system32\prnmngr.vbs -g"
endif|#
directive|endif
comment|// Q_OS_WIN32
ifdef|#
directive|ifdef
name|Q_OS_UNIX
name|QStringList
name|command
decl_stmt|;
name|command
operator|<<
literal|"lpstat"
operator|<<
literal|"-d"
expr_stmt|;
name|QString
name|output
init|=
name|getOutputFromCommand
argument_list|(
name|command
argument_list|)
decl_stmt|;
name|QRegExp
name|noDefaultReg
argument_list|(
literal|"[^:]*no .*default"
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
name|noDefaultReg
operator|.
name|indexIn
argument_list|(
name|output
argument_list|)
decl_stmt|;
if|if
condition|(
name|pos
operator|>=
literal|0
condition|)
block|{
return|return
name|QString
argument_list|()
return|;
block|}
name|QRegExp
name|defaultReg
argument_list|(
literal|"default.*: *([a-zA-Z0-9_-]+)"
argument_list|)
decl_stmt|;
name|defaultReg
operator|.
name|indexIn
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|printer
operator|=
name|defaultReg
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Q_OS_UNIX
return|return
name|printer
return|;
block|}
end_function
begin_function
DECL|function|getPrintersFromSystem
name|QStringList
name|tst_QPrinterInfo
operator|::
name|getPrintersFromSystem
parameter_list|()
block|{
name|QStringList
name|ans
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN32
comment|// TODO "cscript c:\windows\system32\prnmngr.vbs -l"
endif|#
directive|endif
comment|// Q_OS_WIN32
ifdef|#
directive|ifdef
name|Q_OS_UNIX
name|QStringList
name|command
decl_stmt|;
name|command
operator|<<
literal|"lpstat"
operator|<<
literal|"-p"
expr_stmt|;
name|QString
name|output
init|=
name|getOutputFromCommand
argument_list|(
name|command
argument_list|)
decl_stmt|;
name|QStringList
name|list
init|=
name|output
operator|.
name|split
argument_list|(
name|QChar
operator|::
name|fromLatin1
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
decl_stmt|;
name|QRegExp
name|reg
argument_list|(
literal|"^[Pp]rinter ([.a-zA-Z0-9-_@]+)"
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|c
control|)
block|{
if|if
condition|(
name|reg
operator|.
name|indexIn
argument_list|(
name|list
index|[
name|c
index|]
argument_list|)
operator|>=
literal|0
condition|)
block|{
name|QString
name|printer
init|=
name|reg
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
decl_stmt|;
name|ans
operator|<<
name|printer
expr_stmt|;
block|}
block|}
endif|#
directive|endif
comment|// Q_OS_UNIX
return|return
name|ans
return|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_UNIX
end_ifdef
begin_comment
comment|// This function does roughly the same as the `command substitution` in
end_comment
begin_comment
comment|// the shell.
end_comment
begin_function
DECL|function|getOutputFromCommand
name|QString
name|tst_QPrinterInfo
operator|::
name|getOutputFromCommand
parameter_list|(
specifier|const
name|QStringList
modifier|&
name|command
parameter_list|)
block|{
comment|// The command execution does nothing on non-unix systems.
name|int
name|pid
decl_stmt|;
name|int
name|status
init|=
literal|0
decl_stmt|;
name|int
name|pipePtr
index|[
literal|2
index|]
decl_stmt|;
comment|// Create a pipe that is shared between parent and child process.
if|if
condition|(
name|pipe
argument_list|(
name|pipePtr
argument_list|)
operator|<
literal|0
condition|)
block|{
return|return
name|QString
argument_list|()
return|;
block|}
name|pid
operator|=
name|fork
argument_list|()
expr_stmt|;
if|if
condition|(
name|pid
operator|<
literal|0
condition|)
block|{
name|close
argument_list|(
name|pipePtr
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|close
argument_list|(
name|pipePtr
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
return|return
name|QString
argument_list|()
return|;
block|}
elseif|else
if|if
condition|(
name|pid
operator|==
literal|0
condition|)
block|{
comment|// In child.
comment|// Close the reading end.
name|close
argument_list|(
name|pipePtr
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
comment|// Redirect stdout to the pipe.
if|if
condition|(
name|dup2
argument_list|(
name|pipePtr
index|[
literal|1
index|]
argument_list|,
literal|1
argument_list|)
operator|<
literal|0
condition|)
block|{
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
name|char
modifier|*
modifier|*
name|argv
init|=
operator|new
name|char
operator|*
index|[
name|command
operator|.
name|size
argument_list|()
operator|+
literal|1
index|]
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|command
operator|.
name|size
argument_list|()
condition|;
operator|++
name|c
control|)
block|{
name|argv
index|[
name|c
index|]
operator|=
operator|new
name|char
index|[
name|command
index|[
name|c
index|]
operator|.
name|size
argument_list|()
operator|+
literal|1
index|]
expr_stmt|;
name|strcpy
argument_list|(
name|argv
index|[
name|c
index|]
argument_list|,
name|command
index|[
name|c
index|]
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|argv
index|[
name|command
operator|.
name|size
argument_list|()
index|]
operator|=
name|NULL
expr_stmt|;
name|execvp
argument_list|(
name|argv
index|[
literal|0
index|]
argument_list|,
name|argv
argument_list|)
expr_stmt|;
comment|// Shouldn't get here, but it's possible if command is not found.
name|close
argument_list|(
name|pipePtr
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|close
argument_list|(
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|command
operator|.
name|size
argument_list|()
condition|;
operator|++
name|c
control|)
block|{
operator|delete
index|[]
name|argv
index|[
name|c
index|]
expr_stmt|;
block|}
operator|delete
index|[]
name|argv
expr_stmt|;
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// In parent.
comment|// Close the writing end.
name|close
argument_list|(
name|pipePtr
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|QFile
name|pipeRead
decl_stmt|;
if|if
condition|(
operator|!
name|pipeRead
operator|.
name|open
argument_list|(
name|pipePtr
index|[
literal|0
index|]
argument_list|,
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|close
argument_list|(
name|pipePtr
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
return|return
name|QString
argument_list|()
return|;
block|}
name|QByteArray
name|array
decl_stmt|;
name|array
operator|=
name|pipeRead
operator|.
name|readAll
argument_list|()
expr_stmt|;
name|pipeRead
operator|.
name|close
argument_list|()
expr_stmt|;
name|close
argument_list|(
name|pipePtr
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|wait
argument_list|(
operator|&
name|status
argument_list|)
expr_stmt|;
return|return
name|QString
argument_list|(
name|array
argument_list|)
return|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Windows test support not yet implemented
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WIN32
end_ifndef
begin_function
DECL|function|testForDefaultPrinter
name|void
name|tst_QPrinterInfo
operator|::
name|testForDefaultPrinter
parameter_list|()
block|{
name|QString
name|testPrinter
init|=
name|getDefaultPrinterFromSystem
argument_list|()
decl_stmt|;
name|QString
name|defaultPrinter
init|=
name|QPrinterInfo
operator|::
name|defaultPrinter
argument_list|()
operator|.
name|printerName
argument_list|()
decl_stmt|;
name|QString
name|availablePrinter
decl_stmt|;
name|int
name|availablePrinterDefaults
init|=
literal|0
decl_stmt|;
name|QList
argument_list|<
name|QPrinterInfo
argument_list|>
name|list
init|=
name|QPrinterInfo
operator|::
name|availablePrinters
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<
name|list
operator|.
name|size
argument_list|()
condition|;
operator|++
name|c
control|)
block|{
if|if
condition|(
name|list
index|[
name|c
index|]
operator|.
name|isDefault
argument_list|()
condition|)
block|{
name|availablePrinter
operator|=
name|list
operator|.
name|at
argument_list|(
name|c
argument_list|)
operator|.
name|printerName
argument_list|()
expr_stmt|;
operator|++
name|availablePrinterDefaults
expr_stmt|;
block|}
block|}
name|qDebug
argument_list|()
operator|<<
literal|"Test believes Default Printer                              = "
operator|<<
name|testPrinter
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"QPrinterInfo::defaultPrinter() believes Default Printer    = "
operator|<<
name|defaultPrinter
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"QPrinterInfo::availablePrinters() believes Default Printer = "
operator|<<
name|availablePrinter
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testPrinter
argument_list|,
name|defaultPrinter
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|testPrinter
argument_list|,
name|availablePrinter
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|availablePrinter
operator|.
name|isEmpty
argument_list|()
condition|)
name|QCOMPARE
argument_list|(
name|availablePrinterDefaults
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Windows test support not yet implemented
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WIN32
end_ifndef
begin_function
DECL|function|testForPrinters
name|void
name|tst_QPrinterInfo
operator|::
name|testForPrinters
parameter_list|()
block|{
name|QStringList
name|testPrinters
init|=
name|getPrintersFromSystem
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QPrinterInfo
argument_list|>
name|printers
init|=
name|QPrinterInfo
operator|::
name|availablePrinters
argument_list|()
decl_stmt|;
name|QStringList
name|qtPrinters
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|printers
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|qtPrinters
operator|.
name|append
argument_list|(
name|printers
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|printerName
argument_list|()
argument_list|)
expr_stmt|;
name|qSort
argument_list|(
name|testPrinters
argument_list|)
expr_stmt|;
name|qSort
argument_list|(
name|qtPrinters
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Test believes Available Printers                              = "
operator|<<
name|testPrinters
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"QPrinterInfo::availablePrinters() believes Available Printers = "
operator|<<
name|qtPrinters
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qtPrinters
operator|.
name|size
argument_list|()
argument_list|,
name|testPrinters
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|testPrinters
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|QCOMPARE
argument_list|(
name|qtPrinters
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|testPrinters
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|testForPaperSizes
name|void
name|tst_QPrinterInfo
operator|::
name|testForPaperSizes
parameter_list|()
block|{
comment|// TODO Old PaperSize test dependent on physical printer installed, new generic test required
comment|// In the meantime just exercise the code path and print-out for inspection.
name|QList
argument_list|<
name|QPrinterInfo
argument_list|>
name|printers
init|=
name|QPrinterInfo
operator|::
name|availablePrinters
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|printers
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|qDebug
argument_list|()
operator|<<
literal|"Printer: "
operator|<<
name|printers
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|printerName
argument_list|()
operator|<<
literal|" Paper Sizes: "
operator|<<
name|printers
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|supportedPaperSizes
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testConstructors
name|void
name|tst_QPrinterInfo
operator|::
name|testConstructors
parameter_list|()
block|{
name|QPrinterInfo
name|null
decl_stmt|;
name|QCOMPARE
argument_list|(
name|null
operator|.
name|printerName
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|null
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QPrinterInfo
name|null2
argument_list|(
name|null
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|null2
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QPrinterInfo
argument_list|>
name|printers
init|=
name|QPrinterInfo
operator|::
name|availablePrinters
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|printers
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QPrinterInfo
name|copy1
argument_list|(
name|printers
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|copy1
operator|.
name|printerName
argument_list|()
argument_list|,
name|printers
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|printerName
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|copy1
operator|.
name|isNull
argument_list|()
argument_list|,
name|printers
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|copy1
operator|.
name|isDefault
argument_list|()
argument_list|,
name|printers
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|isDefault
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|copy1
operator|.
name|supportedPaperSizes
argument_list|()
argument_list|,
name|printers
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|supportedPaperSizes
argument_list|()
argument_list|)
expr_stmt|;
name|QPrinter
name|printer
argument_list|(
name|printers
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
decl_stmt|;
name|QPrinterInfo
name|copy2
argument_list|(
name|printer
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|copy2
operator|.
name|printerName
argument_list|()
argument_list|,
name|printers
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|printerName
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|copy2
operator|.
name|isNull
argument_list|()
argument_list|,
name|printers
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|copy2
operator|.
name|isDefault
argument_list|()
argument_list|,
name|printers
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|isDefault
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|copy2
operator|.
name|supportedPaperSizes
argument_list|()
argument_list|,
name|printers
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|supportedPaperSizes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|testAssignment
name|void
name|tst_QPrinterInfo
operator|::
name|testAssignment
parameter_list|()
block|{
name|QPrinterInfo
name|null
decl_stmt|;
name|QVERIFY
argument_list|(
name|null
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QPrinterInfo
name|null2
decl_stmt|;
name|null2
operator|=
name|null
expr_stmt|;
name|QVERIFY
argument_list|(
name|null2
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QPrinterInfo
argument_list|>
name|printers
init|=
name|QPrinterInfo
operator|::
name|availablePrinters
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|printers
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QPrinterInfo
name|copy
decl_stmt|;
name|copy
operator|=
name|printers
operator|.
name|at
argument_list|(
name|i
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|copy
operator|.
name|printerName
argument_list|()
argument_list|,
name|printers
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|printerName
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|copy
operator|.
name|isNull
argument_list|()
argument_list|,
name|printers
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|copy
operator|.
name|isDefault
argument_list|()
argument_list|,
name|printers
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|isDefault
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|copy
operator|.
name|description
argument_list|()
argument_list|,
name|printers
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|description
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|copy
operator|.
name|location
argument_list|()
argument_list|,
name|printers
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|location
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|copy
operator|.
name|makeAndModel
argument_list|()
argument_list|,
name|printers
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|makeAndModel
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|copy
operator|.
name|supportedPaperSizes
argument_list|()
argument_list|,
name|printers
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|supportedPaperSizes
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|namedPrinter
name|void
name|tst_QPrinterInfo
operator|::
name|namedPrinter
parameter_list|()
block|{
name|QList
argument_list|<
name|QPrinterInfo
argument_list|>
name|printers
init|=
name|QPrinterInfo
operator|::
name|availablePrinters
argument_list|()
decl_stmt|;
name|QStringList
name|printerNames
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QPrinterInfo
modifier|&
name|pi
decl|,
name|printers
control|)
block|{
name|QPrinterInfo
name|pi2
init|=
name|QPrinterInfo
operator|::
name|printerInfo
argument_list|(
name|pi
operator|.
name|printerName
argument_list|()
argument_list|)
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Printer: "
operator|<<
name|pi2
operator|.
name|printerName
argument_list|()
operator|<<
literal|" : "
operator|<<
name|pi2
operator|.
name|description
argument_list|()
operator|<<
literal|" : "
operator|<<
name|pi2
operator|.
name|location
argument_list|()
operator|<<
literal|" : "
operator|<<
name|pi2
operator|.
name|makeAndModel
argument_list|()
operator|<<
literal|" : "
operator|<<
name|pi2
operator|.
name|isNull
argument_list|()
operator|<<
literal|" : "
operator|<<
name|pi2
operator|.
name|isDefault
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pi2
operator|.
name|printerName
argument_list|()
argument_list|,
name|pi
operator|.
name|printerName
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pi2
operator|.
name|description
argument_list|()
argument_list|,
name|pi
operator|.
name|description
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pi2
operator|.
name|location
argument_list|()
argument_list|,
name|pi
operator|.
name|location
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pi2
operator|.
name|makeAndModel
argument_list|()
argument_list|,
name|pi
operator|.
name|makeAndModel
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pi2
operator|.
name|supportedPaperSizes
argument_list|()
argument_list|,
name|pi
operator|.
name|supportedPaperSizes
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pi2
operator|.
name|isNull
argument_list|()
argument_list|,
name|pi
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pi2
operator|.
name|isDefault
argument_list|()
argument_list|,
name|pi
operator|.
name|isDefault
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_PRINTER
end_comment
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QPrinterInfo
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qprinterinfo.moc"
end_include
end_unit
