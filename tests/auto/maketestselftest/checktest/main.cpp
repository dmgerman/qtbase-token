begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QDir>
end_include
begin_include
include|#
directive|include
file|<QFile>
end_include
begin_include
include|#
directive|include
file|<QFileInfo>
end_include
begin_include
include|#
directive|include
file|<QStringList>
end_include
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_function
DECL|function|fail
name|void
name|fail
parameter_list|(
name|QString
specifier|const
modifier|&
name|message
parameter_list|)
block|{
name|printf
argument_list|(
literal|"CHECKTEST FAIL: %s\n"
argument_list|,
name|qPrintable
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|pass
name|void
name|pass
parameter_list|(
name|QString
specifier|const
modifier|&
name|message
parameter_list|)
block|{
name|printf
argument_list|(
literal|"CHECKTEST PASS: %s\n"
argument_list|,
name|qPrintable
argument_list|(
name|message
argument_list|)
argument_list|)
expr_stmt|;
name|exit
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
modifier|*
name|argv
parameter_list|)
block|{
name|QCoreApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|QStringList
name|args
init|=
name|app
operator|.
name|arguments
argument_list|()
decl_stmt|;
name|args
operator|.
name|removeFirst
argument_list|()
expr_stmt|;
comment|// ourself
name|QString
name|args_quoted
init|=
name|QString
argument_list|(
literal|"'%1'"
argument_list|)
operator|.
name|arg
argument_list|(
name|args
operator|.
name|join
argument_list|(
literal|"','"
argument_list|)
argument_list|)
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_QWS
block|{
comment|// for QWS we expect tests to be run as the QWS server
name|QString
name|qws
init|=
name|args
operator|.
name|takeLast
argument_list|()
decl_stmt|;
if|if
condition|(
name|qws
operator|!=
literal|"-qws"
condition|)
block|{
name|fail
argument_list|(
name|QString
argument_list|(
literal|"Expected test to be run with `-qws', but it wasn't; args: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|args_quoted
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
endif|#
directive|endif
if|if
condition|(
name|args
operator|.
name|count
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|fail
argument_list|(
name|QString
argument_list|(
literal|"These arguments are not what I expected: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|args_quoted
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QString
name|test
init|=
name|args
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QFileInfo
name|testfile
argument_list|(
name|test
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|testfile
operator|.
name|exists
argument_list|()
condition|)
block|{
name|fail
argument_list|(
name|QString
argument_list|(
literal|"File %1 does not exist (my working directory is: %2, my args are: %3)"
argument_list|)
operator|.
name|arg
argument_list|(
name|test
argument_list|)
operator|.
name|arg
argument_list|(
name|QDir
operator|::
name|currentPath
argument_list|()
argument_list|)
operator|.
name|arg
argument_list|(
name|args_quoted
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|pass
argument_list|(
name|args_quoted
argument_list|)
expr_stmt|;
block|}
end_function
end_unit
