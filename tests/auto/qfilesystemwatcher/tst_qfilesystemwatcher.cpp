begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QFileSystemWatcher>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_LINUX
end_ifdef
begin_ifdef
ifdef|#
directive|ifdef
name|QT_NO_INOTIFY
end_ifdef
begin_include
include|#
directive|include
file|<linux/version.h>
end_include
begin_else
else|#
directive|else
end_else
begin_include
include|#
directive|include
file|<sys/inotify.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//TESTED_CLASS=
end_comment
begin_comment
comment|//TESTED_FILES=
end_comment
begin_class
DECL|class|tst_QFileSystemWatcher
class|class
name|tst_QFileSystemWatcher
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QFileSystemWatcher
parameter_list|()
constructor_decl|;
private|private
name|slots
private|:
name|void
name|basicTest_data
parameter_list|()
function_decl|;
name|void
name|basicTest
parameter_list|()
function_decl|;
DECL|function|watchDirectory_data
name|void
name|watchDirectory_data
parameter_list|()
block|{
name|basicTest_data
argument_list|()
expr_stmt|;
block|}
name|void
name|watchDirectory
parameter_list|()
function_decl|;
name|void
name|addPath
parameter_list|()
function_decl|;
name|void
name|removePath
parameter_list|()
function_decl|;
name|void
name|addPaths
parameter_list|()
function_decl|;
name|void
name|removePaths
parameter_list|()
function_decl|;
DECL|function|watchFileAndItsDirectory_data
name|void
name|watchFileAndItsDirectory_data
parameter_list|()
block|{
name|basicTest_data
argument_list|()
expr_stmt|;
block|}
name|void
name|watchFileAndItsDirectory
parameter_list|()
function_decl|;
name|void
name|nonExistingFile
parameter_list|()
function_decl|;
name|void
name|removeFileAndUnWatch
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
name|void
name|QTBUG15255_deadlock
parameter_list|()
function_decl|;
private|private:
DECL|member|do_force_engines
name|QStringList
name|do_force_engines
decl_stmt|;
DECL|member|do_force_native
name|bool
name|do_force_native
decl_stmt|;
block|}
class|;
end_class
begin_constructor
DECL|function|tst_QFileSystemWatcher
name|tst_QFileSystemWatcher
operator|::
name|tst_QFileSystemWatcher
parameter_list|()
member_init_list|:
name|do_force_native
argument_list|(
literal|false
argument_list|)
block|{
ifdef|#
directive|ifdef
name|Q_OS_LINUX
comment|// the inotify implementation in the kernel is known to be buggy in certain versions of the linux kernel
name|do_force_engines
operator|<<
literal|"native"
expr_stmt|;
name|do_force_engines
operator|<<
literal|"dnotify"
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_NO_INOTIFY
if|if
condition|(
name|LINUX_VERSION_CODE
operator|>=
name|KERNEL_VERSION
argument_list|(
literal|2
argument_list|,
literal|6
argument_list|,
literal|13
argument_list|)
condition|)
name|do_force_engines
operator|<<
literal|"inotify"
expr_stmt|;
else|#
directive|else
if|if
condition|(
name|inotify_init
argument_list|()
operator|!=
operator|-
literal|1
condition|)
name|do_force_engines
operator|<<
literal|"inotify"
expr_stmt|;
endif|#
directive|endif
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_DARWIN
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_FREEBSD
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
comment|// we have native engines for win32, macosx and freebsd
name|do_force_engines
operator|<<
literal|"native"
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_function
DECL|function|basicTest_data
name|void
name|tst_QFileSystemWatcher
operator|::
name|basicTest_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"backend"
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|QString
name|engine
decl|,
name|do_force_engines
control|)
name|QTest
operator|::
name|newRow
argument_list|(
name|engine
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
operator|<<
name|engine
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"poller"
argument_list|)
operator|<<
literal|"poller"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|basicTest
name|void
name|tst_QFileSystemWatcher
operator|::
name|basicTest
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|backend
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Testing"
operator|<<
name|backend
operator|<<
literal|"engine"
expr_stmt|;
comment|// create test file
name|QFile
name|testFile
argument_list|(
literal|"testfile.txt"
argument_list|)
decl_stmt|;
name|testFile
operator|.
name|setPermissions
argument_list|(
name|QFile
operator|::
name|ReadOwner
operator||
name|QFile
operator|::
name|WriteOwner
argument_list|)
expr_stmt|;
name|testFile
operator|.
name|remove
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|testFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Truncate
argument_list|)
argument_list|)
expr_stmt|;
name|testFile
operator|.
name|write
argument_list|(
name|QByteArray
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
name|testFile
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// set some file permissions
name|testFile
operator|.
name|setPermissions
argument_list|(
name|QFile
operator|::
name|ReadOwner
operator||
name|QFile
operator|::
name|WriteOwner
argument_list|)
expr_stmt|;
comment|// create watcher, forcing it to use a specific backend
name|QFileSystemWatcher
name|watcher
decl_stmt|;
name|watcher
operator|.
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"_qt_autotest_force_engine_"
argument_list|)
operator|+
name|backend
argument_list|)
expr_stmt|;
name|watcher
operator|.
name|removePath
argument_list|(
name|testFile
operator|.
name|fileName
argument_list|()
argument_list|)
expr_stmt|;
name|watcher
operator|.
name|addPath
argument_list|(
name|testFile
operator|.
name|fileName
argument_list|()
argument_list|)
expr_stmt|;
name|QSignalSpy
name|changedSpy
argument_list|(
operator|&
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|fileChanged
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QEventLoop
name|eventLoop
decl_stmt|;
name|QTimer
name|timer
decl_stmt|;
name|connect
argument_list|(
operator|&
name|timer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
operator|&
name|eventLoop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// modify the file, should get a signal from the watcher
comment|// resolution of the modification time is system dependent, but it's at most 1 second when using
comment|// the polling engine. I've heard rumors that FAT32 has a 2 second resolution. So, we have to
comment|// wait a bit before we can modify the file (hrmph)...
ifndef|#
directive|ifndef
name|Q_OS_WINCE
name|QTest
operator|::
name|qWait
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
else|#
directive|else
comment|// WinCE is always a little bit slower. Give it a little bit more time
name|QTest
operator|::
name|qWait
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|testFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Append
argument_list|)
expr_stmt|;
name|testFile
operator|.
name|write
argument_list|(
name|QByteArray
argument_list|(
literal|"world"
argument_list|)
argument_list|)
expr_stmt|;
name|testFile
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// qDebug()<< "waiting max 5 seconds for notification for file modification to trigger(1)";
name|timer
operator|.
name|start
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|changedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|changedSpy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QString
name|fileName
init|=
name|changedSpy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|fileName
argument_list|,
name|testFile
operator|.
name|fileName
argument_list|()
argument_list|)
expr_stmt|;
name|changedSpy
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// remove the watch and modify the file, should not get a signal from the watcher
name|watcher
operator|.
name|removePath
argument_list|(
name|testFile
operator|.
name|fileName
argument_list|()
argument_list|)
expr_stmt|;
name|testFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Truncate
argument_list|)
expr_stmt|;
name|testFile
operator|.
name|write
argument_list|(
name|QByteArray
argument_list|(
literal|"hello universe!"
argument_list|)
argument_list|)
expr_stmt|;
name|testFile
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// qDebug()<< "waiting max 5 seconds for notification for file modification to trigger (2)";
name|timer
operator|.
name|start
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|changedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// readd the file watch with a relative path
name|watcher
operator|.
name|addPath
argument_list|(
name|testFile
operator|.
name|fileName
argument_list|()
operator|.
name|prepend
argument_list|(
literal|"./"
argument_list|)
argument_list|)
expr_stmt|;
name|testFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Truncate
argument_list|)
expr_stmt|;
name|testFile
operator|.
name|write
argument_list|(
name|QByteArray
argument_list|(
literal|"hello multiverse!"
argument_list|)
argument_list|)
expr_stmt|;
name|testFile
operator|.
name|close
argument_list|()
expr_stmt|;
name|timer
operator|.
name|start
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|changedSpy
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|watcher
operator|.
name|removePath
argument_list|(
name|testFile
operator|.
name|fileName
argument_list|()
operator|.
name|prepend
argument_list|(
literal|"./"
argument_list|)
argument_list|)
expr_stmt|;
name|changedSpy
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// readd the file watch
name|watcher
operator|.
name|addPath
argument_list|(
name|testFile
operator|.
name|fileName
argument_list|()
argument_list|)
expr_stmt|;
comment|// change the permissions, should get a signal from the watcher
name|testFile
operator|.
name|setPermissions
argument_list|(
name|QFile
operator|::
name|ReadOwner
argument_list|)
expr_stmt|;
comment|// qDebug()<< "waiting max 5 seconds for notification for file permission modification to trigger(1)";
name|timer
operator|.
name|start
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|changedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|changedSpy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fileName
operator|=
name|changedSpy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fileName
argument_list|,
name|testFile
operator|.
name|fileName
argument_list|()
argument_list|)
expr_stmt|;
name|changedSpy
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// remove the watch and modify file permissions, should not get a signal from the watcher
name|watcher
operator|.
name|removePath
argument_list|(
name|testFile
operator|.
name|fileName
argument_list|()
argument_list|)
expr_stmt|;
name|testFile
operator|.
name|setPermissions
argument_list|(
name|QFile
operator|::
name|ReadOwner
operator||
name|QFile
operator|::
name|WriteOwner
operator||
name|QFile
operator|::
name|ExeOther
argument_list|)
expr_stmt|;
comment|// qDebug()<< "waiting max 5 seconds for notification for file modification to trigger (2)";
name|timer
operator|.
name|start
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|changedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// readd the file watch
name|watcher
operator|.
name|addPath
argument_list|(
name|testFile
operator|.
name|fileName
argument_list|()
argument_list|)
expr_stmt|;
comment|// remove the file, should get a signal from the watcher
name|QVERIFY
argument_list|(
name|testFile
operator|.
name|remove
argument_list|()
argument_list|)
expr_stmt|;
comment|// qDebug()<< "waiting max 5 seconds for notification for file removal to trigger";
name|timer
operator|.
name|start
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|changedSpy
operator|.
name|count
argument_list|()
operator|==
literal|1
operator|||
name|changedSpy
operator|.
name|count
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
comment|// removing a file on some filesystems seems to deliver 2 notifications
name|QCOMPARE
argument_list|(
name|changedSpy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fileName
operator|=
name|changedSpy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fileName
argument_list|,
name|testFile
operator|.
name|fileName
argument_list|()
argument_list|)
expr_stmt|;
name|changedSpy
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// recreate the file, we should not get any notification
name|QVERIFY
argument_list|(
name|testFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Truncate
argument_list|)
argument_list|)
expr_stmt|;
name|testFile
operator|.
name|write
argument_list|(
name|QByteArray
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
name|testFile
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// qDebug()<< "waiting max 5 seconds for notification for file recreation to trigger";
name|timer
operator|.
name|start
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|changedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testFile
operator|.
name|remove
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|watchDirectory
name|void
name|tst_QFileSystemWatcher
operator|::
name|watchDirectory
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|backend
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Testing"
operator|<<
name|backend
operator|<<
literal|"engine"
expr_stmt|;
name|QDir
argument_list|()
operator|.
name|mkdir
argument_list|(
literal|"testDir"
argument_list|)
expr_stmt|;
name|QDir
name|testDir
argument_list|(
literal|"testDir"
argument_list|)
decl_stmt|;
name|QString
name|testFileName
init|=
name|testDir
operator|.
name|filePath
argument_list|(
literal|"testFile.txt"
argument_list|)
decl_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|testFileName
argument_list|)
expr_stmt|;
name|QFileSystemWatcher
name|watcher
decl_stmt|;
name|watcher
operator|.
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"_qt_autotest_force_engine_"
argument_list|)
operator|+
name|backend
argument_list|)
expr_stmt|;
name|watcher
operator|.
name|addPath
argument_list|(
name|testDir
operator|.
name|dirName
argument_list|()
argument_list|)
expr_stmt|;
name|QSignalSpy
name|changedSpy
argument_list|(
operator|&
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|directoryChanged
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QEventLoop
name|eventLoop
decl_stmt|;
name|QTimer
name|timer
decl_stmt|;
name|connect
argument_list|(
operator|&
name|timer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
operator|&
name|eventLoop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// resolution of the modification time is system dependent, but it's at most 1 second when using
comment|// the polling engine. From what I know, FAT32 has a 2 second resolution. So we have to
comment|// wait before modifying the directory...
name|QTest
operator|::
name|qWait
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|QFile
name|testFile
argument_list|(
name|testFileName
argument_list|)
decl_stmt|;
name|QString
name|fileName
decl_stmt|;
comment|// remove the watch, should not get notification of a new file
name|watcher
operator|.
name|removePath
argument_list|(
name|testDir
operator|.
name|dirName
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Truncate
argument_list|)
argument_list|)
expr_stmt|;
name|testFile
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// qDebug()<< "waiting max 5 seconds for notification for file recreationg to trigger";
name|timer
operator|.
name|start
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|changedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|watcher
operator|.
name|addPath
argument_list|(
name|testDir
operator|.
name|dirName
argument_list|()
argument_list|)
expr_stmt|;
comment|// remove the file again, should get a signal from the watcher
name|QVERIFY
argument_list|(
name|testFile
operator|.
name|remove
argument_list|()
argument_list|)
expr_stmt|;
name|timer
operator|.
name|start
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
comment|// remove the directory, should get a signal from the watcher
name|QVERIFY
argument_list|(
name|QDir
argument_list|()
operator|.
name|rmdir
argument_list|(
literal|"testDir"
argument_list|)
argument_list|)
expr_stmt|;
comment|// qDebug()<< "waiting max 5 seconds for notification for directory removal to trigger";
name|timer
operator|.
name|start
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|QEXPECT_FAIL
argument_list|(
literal|"poller"
argument_list|,
literal|"Directory does not get updated on file removal(See #137910)"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|changedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|changedSpy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|changedSpy
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fileName
operator|=
name|changedSpy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fileName
argument_list|,
name|testDir
operator|.
name|dirName
argument_list|()
argument_list|)
expr_stmt|;
name|fileName
operator|=
name|changedSpy
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fileName
argument_list|,
name|testDir
operator|.
name|dirName
argument_list|()
argument_list|)
expr_stmt|;
name|changedSpy
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// recreate the file, we should not get any notification
if|if
condition|(
operator|!
name|QDir
argument_list|()
operator|.
name|mkdir
argument_list|(
literal|"testDir"
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"Failed to recreate directory, skipping final test."
argument_list|,
name|SkipSingle
argument_list|)
expr_stmt|;
comment|// qDebug()<< "waiting max 5 seconds for notification for dir recreation to trigger";
name|timer
operator|.
name|start
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|changedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QDir
argument_list|()
operator|.
name|rmdir
argument_list|(
literal|"testDir"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addPath
name|void
name|tst_QFileSystemWatcher
operator|::
name|addPath
parameter_list|()
block|{
name|QFileSystemWatcher
name|watcher
decl_stmt|;
name|QString
name|home
init|=
name|QDir
operator|::
name|homePath
argument_list|()
decl_stmt|;
name|watcher
operator|.
name|addPath
argument_list|(
name|home
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|watcher
operator|.
name|directories
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|watcher
operator|.
name|directories
argument_list|()
operator|.
name|first
argument_list|()
argument_list|,
name|home
argument_list|)
expr_stmt|;
name|watcher
operator|.
name|addPath
argument_list|(
name|home
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|watcher
operator|.
name|directories
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// With empty string
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QFileSystemWatcher::addPath: path is empty"
argument_list|)
expr_stmt|;
name|watcher
operator|.
name|addPath
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removePath
name|void
name|tst_QFileSystemWatcher
operator|::
name|removePath
parameter_list|()
block|{
name|QFileSystemWatcher
name|watcher
decl_stmt|;
name|QString
name|home
init|=
name|QDir
operator|::
name|homePath
argument_list|()
decl_stmt|;
name|watcher
operator|.
name|addPath
argument_list|(
name|home
argument_list|)
expr_stmt|;
name|watcher
operator|.
name|removePath
argument_list|(
name|home
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|watcher
operator|.
name|directories
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|watcher
operator|.
name|removePath
argument_list|(
name|home
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|watcher
operator|.
name|directories
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// With empty string
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QFileSystemWatcher::removePath: path is empty"
argument_list|)
expr_stmt|;
name|watcher
operator|.
name|removePath
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addPaths
name|void
name|tst_QFileSystemWatcher
operator|::
name|addPaths
parameter_list|()
block|{
name|QFileSystemWatcher
name|watcher
decl_stmt|;
name|QStringList
name|paths
decl_stmt|;
name|paths
operator|<<
name|QDir
operator|::
name|homePath
argument_list|()
operator|<<
name|QDir
operator|::
name|currentPath
argument_list|()
expr_stmt|;
name|watcher
operator|.
name|addPaths
argument_list|(
name|paths
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|watcher
operator|.
name|directories
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// With empty list
name|paths
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QFileSystemWatcher::addPaths: list is empty"
argument_list|)
expr_stmt|;
name|watcher
operator|.
name|addPaths
argument_list|(
name|paths
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removePaths
name|void
name|tst_QFileSystemWatcher
operator|::
name|removePaths
parameter_list|()
block|{
name|QFileSystemWatcher
name|watcher
decl_stmt|;
name|QStringList
name|paths
decl_stmt|;
name|paths
operator|<<
name|QDir
operator|::
name|homePath
argument_list|()
operator|<<
name|QDir
operator|::
name|currentPath
argument_list|()
expr_stmt|;
name|watcher
operator|.
name|addPaths
argument_list|(
name|paths
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|watcher
operator|.
name|directories
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|watcher
operator|.
name|removePaths
argument_list|(
name|paths
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|watcher
operator|.
name|directories
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|//With empty list
name|paths
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QFileSystemWatcher::removePaths: list is empty"
argument_list|)
expr_stmt|;
name|watcher
operator|.
name|removePaths
argument_list|(
name|paths
argument_list|)
expr_stmt|;
block|}
end_function
begin_if
if|#
directive|if
literal|0
end_if
begin_endif
unit|class SignalTest : public QObject {     Q_OBJECT     public slots:         void fileSlot(const QString&file) { qDebug()<< "file "<< file;}         void dirSlot(const QString&dir) { qDebug()<< "dir"<< dir;} };
endif|#
directive|endif
end_endif
begin_function
DECL|function|watchFileAndItsDirectory
name|void
name|tst_QFileSystemWatcher
operator|::
name|watchFileAndItsDirectory
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|backend
argument_list|)
expr_stmt|;
name|QDir
argument_list|()
operator|.
name|mkdir
argument_list|(
literal|"testDir"
argument_list|)
expr_stmt|;
name|QDir
name|testDir
argument_list|(
literal|"testDir"
argument_list|)
decl_stmt|;
name|QString
name|testFileName
init|=
name|testDir
operator|.
name|filePath
argument_list|(
literal|"testFile.txt"
argument_list|)
decl_stmt|;
name|QString
name|secondFileName
init|=
name|testDir
operator|.
name|filePath
argument_list|(
literal|"testFile2.txt"
argument_list|)
decl_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|secondFileName
argument_list|)
expr_stmt|;
name|QFile
name|testFile
argument_list|(
name|testFileName
argument_list|)
decl_stmt|;
name|testFile
operator|.
name|setPermissions
argument_list|(
name|QFile
operator|::
name|ReadOwner
operator||
name|QFile
operator|::
name|WriteOwner
argument_list|)
expr_stmt|;
name|testFile
operator|.
name|remove
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|testFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Truncate
argument_list|)
argument_list|)
expr_stmt|;
name|testFile
operator|.
name|write
argument_list|(
name|QByteArray
argument_list|(
literal|"hello"
argument_list|)
argument_list|)
expr_stmt|;
name|testFile
operator|.
name|close
argument_list|()
expr_stmt|;
name|QFileSystemWatcher
name|watcher
decl_stmt|;
name|watcher
operator|.
name|setObjectName
argument_list|(
name|QLatin1String
argument_list|(
literal|"_qt_autotest_force_engine_"
argument_list|)
operator|+
name|backend
argument_list|)
expr_stmt|;
name|watcher
operator|.
name|addPath
argument_list|(
name|testDir
operator|.
name|dirName
argument_list|()
argument_list|)
expr_stmt|;
name|watcher
operator|.
name|addPath
argument_list|(
name|testFileName
argument_list|)
expr_stmt|;
comment|/*     SignalTest signalTest;     QObject::connect(&watcher, SIGNAL(fileChanged(const QString&)),&signalTest, SLOT(fileSlot(const QString&)));     QObject::connect(&watcher, SIGNAL(directoryChanged(const QString&)),&signalTest, SLOT(dirSlot(const QString&)));     */
name|QSignalSpy
name|fileChangedSpy
argument_list|(
operator|&
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|fileChanged
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|dirChangedSpy
argument_list|(
operator|&
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|directoryChanged
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QEventLoop
name|eventLoop
decl_stmt|;
name|QTimer
name|timer
decl_stmt|;
name|connect
argument_list|(
operator|&
name|timer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
operator|&
name|eventLoop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// resolution of the modification time is system dependent, but it's at most 1 second when using
comment|// the polling engine. From what I know, FAT32 has a 2 second resolution. So we have to
comment|// wait before modifying the directory...
name|QTest
operator|::
name|qWait
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Truncate
argument_list|)
argument_list|)
expr_stmt|;
name|testFile
operator|.
name|write
argument_list|(
name|QByteArray
argument_list|(
literal|"hello again"
argument_list|)
argument_list|)
expr_stmt|;
name|testFile
operator|.
name|close
argument_list|()
expr_stmt|;
name|timer
operator|.
name|start
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|fileChangedSpy
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|//according to Qt 4 documentation:
comment|//void QFileSystemWatcher::directoryChanged ( const QString& path )   [signal]
comment|//This signal is emitted when the directory at a specified path, is modified
comment|//(e.g., when a file is added, -->modified<-- or deleted) or removed from disk.
comment|//Note that if there are several changes during a short period of time, some
comment|//of the changes might not emit this signal. However, the last change in the
comment|//sequence of changes will always generate this signal.
comment|//Symbian behaves as documented (and can't be filtered), but the other platforms don't
comment|//so test should not assert this
name|QVERIFY
argument_list|(
name|dirChangedSpy
operator|.
name|count
argument_list|()
operator|<
literal|2
argument_list|)
expr_stmt|;
if|if
condition|(
name|backend
operator|==
literal|"dnotify"
condition|)
name|QSKIP
argument_list|(
literal|"dnotify is broken, skipping the rest of the test."
argument_list|,
name|SkipSingle
argument_list|)
expr_stmt|;
name|fileChangedSpy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|dirChangedSpy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QFile
name|secondFile
argument_list|(
name|secondFileName
argument_list|)
decl_stmt|;
name|secondFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
operator||
name|QIODevice
operator|::
name|Truncate
argument_list|)
expr_stmt|;
name|secondFile
operator|.
name|write
argument_list|(
literal|"Foo"
argument_list|)
expr_stmt|;
name|secondFile
operator|.
name|close
argument_list|()
expr_stmt|;
name|timer
operator|.
name|start
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fileChangedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|QEXPECT_FAIL
argument_list|(
literal|"poller"
argument_list|,
literal|"Directory does not get updated on file removal(See #137910)"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|dirChangedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|dirChangedSpy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|testFileName
argument_list|)
expr_stmt|;
name|timer
operator|.
name|start
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|fileChangedSpy
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|dirChangedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|fileChangedSpy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|dirChangedSpy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|watcher
operator|.
name|removePath
argument_list|(
name|testFileName
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|secondFileName
argument_list|)
expr_stmt|;
name|timer
operator|.
name|start
argument_list|(
literal|3000
argument_list|)
expr_stmt|;
name|eventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fileChangedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// polling watcher has generated separate events for content and time change
comment|// on Symbian emulator, so allow possibility of 2 events
name|QVERIFY
argument_list|(
name|dirChangedSpy
operator|.
name|count
argument_list|()
operator|==
literal|1
operator|||
name|dirChangedSpy
operator|.
name|count
argument_list|()
operator|==
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QDir
argument_list|()
operator|.
name|rmdir
argument_list|(
literal|"testDir"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QFileSystemWatcher
operator|::
name|cleanup
parameter_list|()
block|{
name|QDir
name|testDir
argument_list|(
literal|"testDir"
argument_list|)
decl_stmt|;
name|QString
name|testFileName
init|=
name|testDir
operator|.
name|filePath
argument_list|(
literal|"testFile.txt"
argument_list|)
decl_stmt|;
name|QString
name|secondFileName
init|=
name|testDir
operator|.
name|filePath
argument_list|(
literal|"testFile2.txt"
argument_list|)
decl_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|testFileName
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|secondFileName
argument_list|)
expr_stmt|;
name|QDir
argument_list|()
operator|.
name|rmdir
argument_list|(
literal|"testDir"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|nonExistingFile
name|void
name|tst_QFileSystemWatcher
operator|::
name|nonExistingFile
parameter_list|()
block|{
comment|// Don't crash...
name|QFileSystemWatcher
name|watcher
decl_stmt|;
name|watcher
operator|.
name|addPath
argument_list|(
literal|"file_that_does_not_exist.txt"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeFileAndUnWatch
name|void
name|tst_QFileSystemWatcher
operator|::
name|removeFileAndUnWatch
parameter_list|()
block|{
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|filename
init|=
literal|"foo.txt"
decl_stmt|;
name|QFileSystemWatcher
name|watcher
decl_stmt|;
block|{
name|QFile
name|testFile
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|testFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|testFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|watcher
operator|.
name|addPath
argument_list|(
name|filename
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|filename
argument_list|)
expr_stmt|;
name|watcher
operator|.
name|removePath
argument_list|(
name|filename
argument_list|)
expr_stmt|;
block|{
name|QFile
name|testFile
argument_list|(
name|filename
argument_list|)
decl_stmt|;
name|testFile
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|testFile
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
name|watcher
operator|.
name|addPath
argument_list|(
name|filename
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|SomeSingleton
class|class
name|SomeSingleton
super|:
specifier|public
name|QObject
block|{
public|public:
DECL|function|SomeSingleton
name|SomeSingleton
parameter_list|()
member_init_list|:
name|mFsWatcher
argument_list|(
operator|new
name|QFileSystemWatcher
argument_list|(
name|this
argument_list|)
argument_list|)
block|{
name|mFsWatcher
operator|->
name|addPath
argument_list|(
name|QLatin1String
argument_list|(
literal|"/usr/lib"
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|bla
name|void
name|bla
parameter_list|()
specifier|const
block|{}
DECL|member|mFsWatcher
name|QFileSystemWatcher
modifier|*
name|mFsWatcher
decl_stmt|;
block|}
class|;
end_class
begin_macro
name|Q_GLOBAL_STATIC
argument_list|(
argument|SomeSingleton
argument_list|,
argument|someSingleton
argument_list|)
end_macro
begin_function
DECL|function|QTBUG15255_deadlock
name|void
name|tst_QFileSystemWatcher
operator|::
name|QTBUG15255_deadlock
parameter_list|()
block|{
name|someSingleton
argument_list|()
operator|->
name|bla
argument_list|()
expr_stmt|;
comment|//the test must still finish
name|QTest
operator|::
name|qWait
argument_list|(
literal|30
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QFileSystemWatcher
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qfilesystemwatcher.moc"
end_include
end_unit
