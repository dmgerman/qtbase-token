begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qapplication.h>
end_include
begin_include
include|#
directive|include
file|<QPushButton>
end_include
begin_include
include|#
directive|include
file|<QMainWindow>
end_include
begin_include
include|#
directive|include
file|<QMenuBar>
end_include
begin_include
include|#
directive|include
file|<QToolBar>
end_include
begin_include
include|#
directive|include
file|<QToolButton>
end_include
begin_include
include|#
directive|include
file|<QStatusBar>
end_include
begin_include
include|#
directive|include
file|<QListWidget>
end_include
begin_include
include|#
directive|include
file|<QWidgetAction>
end_include
begin_include
include|#
directive|include
file|<QDesktopWidget>
end_include
begin_include
include|#
directive|include
file|<qdialog.h>
end_include
begin_include
include|#
directive|include
file|<qmenu.h>
end_include
begin_include
include|#
directive|include
file|<qstyle.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|"../../shared/util.h"
end_include
begin_comment
comment|//TESTED_CLASS=
end_comment
begin_comment
comment|//TESTED_FILES=
end_comment
begin_class
DECL|class|tst_QMenu
class|class
name|tst_QMenu
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QMenu
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_QMenu
parameter_list|()
destructor_decl|;
public|public
name|slots
public|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|getSetCheck
parameter_list|()
function_decl|;
name|void
name|addActionsAndClear
parameter_list|()
function_decl|;
name|void
name|keyboardNavigation_data
parameter_list|()
function_decl|;
name|void
name|keyboardNavigation
parameter_list|()
function_decl|;
name|void
name|focus
parameter_list|()
function_decl|;
name|void
name|overrideMenuAction
parameter_list|()
function_decl|;
name|void
name|statusTip
parameter_list|()
function_decl|;
name|void
name|widgetActionFocus
parameter_list|()
function_decl|;
name|void
name|mouseActivation
parameter_list|()
function_decl|;
name|void
name|tearOff
parameter_list|()
function_decl|;
name|void
name|layoutDirection
parameter_list|()
function_decl|;
name|void
name|task208001_stylesheet
parameter_list|()
function_decl|;
name|void
name|activeSubMenuPosition
parameter_list|()
function_decl|;
name|void
name|task242454_sizeHint
parameter_list|()
function_decl|;
name|void
name|task176201_clear
parameter_list|()
function_decl|;
name|void
name|task250673_activeMultiColumnSubMenuPosition
parameter_list|()
function_decl|;
name|void
name|task256918_setFont
parameter_list|()
function_decl|;
name|void
name|menuSizeHint
parameter_list|()
function_decl|;
name|void
name|task258920_mouseBorder
parameter_list|()
function_decl|;
name|void
name|setFixedWidth
parameter_list|()
function_decl|;
name|void
name|deleteActionInTriggered
parameter_list|()
function_decl|;
name|void
name|pushButtonPopulateOnAboutToShow
parameter_list|()
function_decl|;
name|void
name|QTBUG7907_submenus_autoselect
parameter_list|()
function_decl|;
name|void
name|QTBUG7411_submenus_activate
parameter_list|()
function_decl|;
name|void
name|QTBUG_10735_crashWithDialog
parameter_list|()
function_decl|;
protected|protected
name|slots
protected|:
name|void
name|onActivated
parameter_list|(
name|QAction
modifier|*
parameter_list|)
function_decl|;
name|void
name|onHighlighted
parameter_list|(
name|QAction
modifier|*
parameter_list|)
function_decl|;
name|void
name|onStatusMessageChanged
parameter_list|(
specifier|const
name|QString
modifier|&
parameter_list|)
function_decl|;
name|void
name|onStatusTipTimer
parameter_list|()
function_decl|;
DECL|function|deleteAction
name|void
name|deleteAction
parameter_list|(
name|QAction
modifier|*
name|a
parameter_list|)
block|{
operator|delete
name|a
expr_stmt|;
block|}
name|void
name|populateMenu
parameter_list|()
function_decl|;
private|private:
name|void
name|createActions
parameter_list|()
function_decl|;
DECL|member|menus
DECL|member|lastMenu
name|QMenu
modifier|*
name|menus
index|[
literal|2
index|]
decl_stmt|,
modifier|*
name|lastMenu
decl_stmt|;
DECL|enumerator|num_builtins
enum|enum
block|{
name|num_builtins
init|=
literal|10
block|}
enum|;
DECL|member|activated
DECL|member|highlighted
DECL|member|builtins
name|QAction
modifier|*
name|activated
decl_stmt|,
modifier|*
name|highlighted
decl_stmt|,
modifier|*
name|builtins
index|[
name|num_builtins
index|]
decl_stmt|;
DECL|member|statustip
name|QString
name|statustip
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|// Testing get/set functions
end_comment
begin_function
DECL|function|getSetCheck
name|void
name|tst_QMenu
operator|::
name|getSetCheck
parameter_list|()
block|{
name|QMenu
name|obj1
decl_stmt|;
comment|// QAction * QMenu::defaultAction()
comment|// void QMenu::setDefaultAction(QAction *)
name|QAction
modifier|*
name|var1
init|=
operator|new
name|QAction
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|obj1
operator|.
name|setDefaultAction
argument_list|(
name|var1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|var1
argument_list|,
name|obj1
operator|.
name|defaultAction
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setDefaultAction
argument_list|(
operator|(
name|QAction
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|QAction
operator|*
operator|)
literal|0
argument_list|,
name|obj1
operator|.
name|defaultAction
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|var1
expr_stmt|;
comment|// QAction * QMenu::activeAction()
comment|// void QMenu::setActiveAction(QAction *)
name|QAction
modifier|*
name|var2
init|=
operator|new
name|QAction
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|obj1
operator|.
name|setActiveAction
argument_list|(
name|var2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|var2
argument_list|,
name|obj1
operator|.
name|activeAction
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setActiveAction
argument_list|(
operator|(
name|QAction
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|QAction
operator|*
operator|)
literal|0
argument_list|,
name|obj1
operator|.
name|activeAction
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|var2
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|tst_QMenu
name|tst_QMenu
operator|::
name|tst_QMenu
parameter_list|()
block|{
name|QApplication
operator|::
name|setEffectEnabled
argument_list|(
name|Qt
operator|::
name|UI_AnimateMenu
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~tst_QMenu
name|tst_QMenu
operator|::
name|~
name|tst_QMenu
parameter_list|()
block|{  }
end_destructor
begin_function
name|void
DECL|function|initTestCase
name|tst_QMenu
operator|::
name|initTestCase
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num_builtins
condition|;
name|i
operator|++
control|)
name|builtins
index|[
name|i
index|]
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|menus
index|[
name|i
index|]
operator|=
operator|new
name|QMenu
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|menus
index|[
name|i
index|]
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|(
name|QAction
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|onActivated
argument_list|(
name|QAction
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|menus
index|[
name|i
index|]
argument_list|,
name|SIGNAL
argument_list|(
name|hovered
argument_list|(
name|QAction
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|onHighlighted
argument_list|(
name|QAction
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
name|void
DECL|function|cleanupTestCase
name|tst_QMenu
operator|::
name|cleanupTestCase
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
name|menus
index|[
name|i
index|]
operator|->
name|clear
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|num_builtins
condition|;
name|i
operator|++
control|)
block|{
name|bool
name|menuAction
init|=
literal|false
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
literal|2
condition|;
operator|++
name|j
control|)
if|if
condition|(
name|menus
index|[
name|j
index|]
operator|->
name|menuAction
argument_list|()
operator|==
name|builtins
index|[
name|i
index|]
condition|)
name|menuAction
operator|=
literal|true
expr_stmt|;
if|if
condition|(
operator|!
name|menuAction
condition|)
operator|delete
name|builtins
index|[
name|i
index|]
expr_stmt|;
block|}
operator|delete
name|menus
index|[
literal|0
index|]
expr_stmt|;
operator|delete
name|menus
index|[
literal|1
index|]
expr_stmt|;
block|}
end_function
begin_function
name|void
DECL|function|init
name|tst_QMenu
operator|::
name|init
parameter_list|()
block|{
name|activated
operator|=
name|highlighted
operator|=
literal|0
expr_stmt|;
name|lastMenu
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
name|void
DECL|function|cleanup
name|tst_QMenu
operator|::
name|cleanup
parameter_list|()
block|{ }
end_function
begin_function
name|void
DECL|function|createActions
name|tst_QMenu
operator|::
name|createActions
parameter_list|()
block|{
if|if
condition|(
operator|!
name|builtins
index|[
literal|0
index|]
condition|)
name|builtins
index|[
literal|0
index|]
operator|=
operator|new
name|QAction
argument_list|(
literal|"New"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|menus
index|[
literal|0
index|]
operator|->
name|addAction
argument_list|(
name|builtins
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|builtins
index|[
literal|1
index|]
condition|)
block|{
name|builtins
index|[
literal|1
index|]
operator|=
operator|new
name|QAction
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|builtins
index|[
literal|1
index|]
operator|->
name|setSeparator
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|menus
index|[
literal|0
index|]
operator|->
name|addAction
argument_list|(
name|builtins
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|builtins
index|[
literal|2
index|]
condition|)
block|{
name|builtins
index|[
literal|2
index|]
operator|=
name|menus
index|[
literal|1
index|]
operator|->
name|menuAction
argument_list|()
expr_stmt|;
name|builtins
index|[
literal|2
index|]
operator|->
name|setText
argument_list|(
literal|"&Open.."
argument_list|)
expr_stmt|;
name|builtins
index|[
literal|8
index|]
operator|=
operator|new
name|QAction
argument_list|(
literal|"Close"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|menus
index|[
literal|1
index|]
operator|->
name|addAction
argument_list|(
name|builtins
index|[
literal|8
index|]
argument_list|)
expr_stmt|;
name|builtins
index|[
literal|9
index|]
operator|=
operator|new
name|QAction
argument_list|(
literal|"Quit"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|menus
index|[
literal|1
index|]
operator|->
name|addAction
argument_list|(
name|builtins
index|[
literal|9
index|]
argument_list|)
expr_stmt|;
block|}
name|menus
index|[
literal|0
index|]
operator|->
name|addAction
argument_list|(
name|builtins
index|[
literal|2
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|builtins
index|[
literal|3
index|]
condition|)
name|builtins
index|[
literal|3
index|]
operator|=
operator|new
name|QAction
argument_list|(
literal|"Open&as.."
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|menus
index|[
literal|0
index|]
operator|->
name|addAction
argument_list|(
name|builtins
index|[
literal|3
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|builtins
index|[
literal|4
index|]
condition|)
block|{
name|builtins
index|[
literal|4
index|]
operator|=
operator|new
name|QAction
argument_list|(
literal|"Save"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|builtins
index|[
literal|4
index|]
operator|->
name|setEnabled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|menus
index|[
literal|0
index|]
operator|->
name|addAction
argument_list|(
name|builtins
index|[
literal|4
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|builtins
index|[
literal|5
index|]
condition|)
name|builtins
index|[
literal|5
index|]
operator|=
operator|new
name|QAction
argument_list|(
literal|"Sa&ve as.."
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|menus
index|[
literal|0
index|]
operator|->
name|addAction
argument_list|(
name|builtins
index|[
literal|5
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|builtins
index|[
literal|6
index|]
condition|)
block|{
name|builtins
index|[
literal|6
index|]
operator|=
operator|new
name|QAction
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|builtins
index|[
literal|6
index|]
operator|->
name|setSeparator
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
name|menus
index|[
literal|0
index|]
operator|->
name|addAction
argument_list|(
name|builtins
index|[
literal|6
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|builtins
index|[
literal|7
index|]
condition|)
name|builtins
index|[
literal|7
index|]
operator|=
operator|new
name|QAction
argument_list|(
literal|"Prin&t"
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|menus
index|[
literal|0
index|]
operator|->
name|addAction
argument_list|(
name|builtins
index|[
literal|7
index|]
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
DECL|function|onHighlighted
name|tst_QMenu
operator|::
name|onHighlighted
parameter_list|(
name|QAction
modifier|*
name|action
parameter_list|)
block|{
name|highlighted
operator|=
name|action
expr_stmt|;
name|lastMenu
operator|=
name|qobject_cast
argument_list|<
name|QMenu
operator|*
argument_list|>
argument_list|(
name|sender
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
DECL|function|onActivated
name|tst_QMenu
operator|::
name|onActivated
parameter_list|(
name|QAction
modifier|*
name|action
parameter_list|)
block|{
name|activated
operator|=
name|action
expr_stmt|;
name|lastMenu
operator|=
name|qobject_cast
argument_list|<
name|QMenu
operator|*
argument_list|>
argument_list|(
name|sender
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|onStatusMessageChanged
name|void
name|tst_QMenu
operator|::
name|onStatusMessageChanged
parameter_list|(
specifier|const
name|QString
modifier|&
name|s
parameter_list|)
block|{
name|statustip
operator|=
name|s
expr_stmt|;
block|}
end_function
begin_function
DECL|function|populateMenu
name|void
name|tst_QMenu
operator|::
name|populateMenu
parameter_list|()
block|{
comment|//just adds 3 dummy actions and a separator.
name|lastMenu
operator|->
name|addAction
argument_list|(
literal|"Foo"
argument_list|)
expr_stmt|;
name|lastMenu
operator|->
name|addAction
argument_list|(
literal|"Bar"
argument_list|)
expr_stmt|;
name|lastMenu
operator|->
name|addAction
argument_list|(
literal|"FooBar"
argument_list|)
expr_stmt|;
name|lastMenu
operator|->
name|addSeparator
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|//actual tests
end_comment
begin_function
name|void
DECL|function|addActionsAndClear
name|tst_QMenu
operator|::
name|addActionsAndClear
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QT_SOFTKEYS_ENABLED
comment|// Softkeys add extra "Select" and "Back" actions to menu by default.
comment|// Two first actions will be Select and Back when softkeys are enabled
name|int
name|numSoftkeyActions
init|=
literal|2
decl_stmt|;
else|#
directive|else
name|int
name|numSoftkeyActions
init|=
literal|0
decl_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|menus
index|[
literal|0
index|]
operator|->
name|actions
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|0
operator|+
name|numSoftkeyActions
argument_list|)
expr_stmt|;
name|createActions
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menus
index|[
literal|0
index|]
operator|->
name|actions
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|8
operator|+
name|numSoftkeyActions
argument_list|)
expr_stmt|;
name|menus
index|[
literal|0
index|]
operator|->
name|clear
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menus
index|[
literal|0
index|]
operator|->
name|actions
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mouseActivation
name|void
name|tst_QMenu
operator|::
name|mouseActivation
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_WINCE_WM
name|QSKIP
argument_list|(
literal|"We have a separate mouseActivation test for Windows mobile."
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QWidget
name|topLevel
decl_stmt|;
name|QMenu
name|menu
argument_list|(
operator|&
name|topLevel
argument_list|)
decl_stmt|;
name|topLevel
operator|.
name|show
argument_list|()
expr_stmt|;
name|menu
operator|.
name|addAction
argument_list|(
literal|"Menu Action"
argument_list|)
expr_stmt|;
name|menu
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|mouseClick
argument_list|(
operator|&
name|menu
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|0
argument_list|,
name|menu
operator|.
name|rect
argument_list|()
operator|.
name|center
argument_list|()
argument_list|,
literal|300
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|menu
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
comment|//context menus can always be accessed with right click except on windows
name|menu
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|mouseClick
argument_list|(
operator|&
name|menu
argument_list|,
name|Qt
operator|::
name|RightButton
argument_list|,
literal|0
argument_list|,
name|menu
operator|.
name|rect
argument_list|()
operator|.
name|center
argument_list|()
argument_list|,
literal|300
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|menu
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
comment|//on windows normal mainwindow menus Can only be accessed with left mouse button
name|QMenuBar
name|menubar
decl_stmt|;
name|QMenu
name|submenu
argument_list|(
literal|"Menu"
argument_list|)
decl_stmt|;
name|submenu
operator|.
name|addAction
argument_list|(
literal|"action"
argument_list|)
expr_stmt|;
name|QAction
modifier|*
name|action
init|=
name|menubar
operator|.
name|addMenu
argument_list|(
operator|&
name|submenu
argument_list|)
decl_stmt|;
name|menubar
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|mouseClick
argument_list|(
operator|&
name|menubar
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|0
argument_list|,
name|menubar
operator|.
name|actionGeometry
argument_list|(
name|action
argument_list|)
operator|.
name|center
argument_list|()
argument_list|,
literal|300
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|submenu
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|mouseClick
argument_list|(
operator|&
name|submenu
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|0
argument_list|,
name|QPoint
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|,
literal|300
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|submenu
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|mouseClick
argument_list|(
operator|&
name|menubar
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|0
argument_list|,
name|menubar
operator|.
name|actionGeometry
argument_list|(
name|action
argument_list|)
operator|.
name|center
argument_list|()
argument_list|,
literal|300
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|submenu
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|mouseClick
argument_list|(
operator|&
name|submenu
argument_list|,
name|Qt
operator|::
name|RightButton
argument_list|,
literal|0
argument_list|,
name|QPoint
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|,
literal|300
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|submenu
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
name|void
DECL|function|keyboardNavigation_data
name|tst_QMenu
operator|::
name|keyboardNavigation_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"key"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expected_action"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expected_menu"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"init"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"expected_activated"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"expected_highlighted"
argument_list|)
expr_stmt|;
comment|//test up and down (order is important here)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data0"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Key_Down
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Key_Down
argument_list|)
operator|<<
literal|2
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|false
operator|<<
literal|true
expr_stmt|;
comment|//skips the separator
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Key_Down
argument_list|)
operator|<<
literal|3
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|false
operator|<<
literal|true
expr_stmt|;
if|if
condition|(
name|QApplication
operator|::
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_Menu_AllowActiveAndDisabled
argument_list|)
condition|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data3_noMac"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Key_Down
argument_list|)
operator|<<
literal|4
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|false
operator|<<
literal|true
expr_stmt|;
else|else
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data3_Mac"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Key_Down
argument_list|)
operator|<<
literal|5
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|false
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data4"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Key_Up
argument_list|)
operator|<<
literal|3
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|false
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data5"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Key_Up
argument_list|)
operator|<<
literal|2
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|false
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data6"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Key_Right
argument_list|)
operator|<<
literal|8
operator|<<
literal|1
operator|<<
literal|false
operator|<<
literal|false
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data7"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Key_Down
argument_list|)
operator|<<
literal|9
operator|<<
literal|1
operator|<<
literal|false
operator|<<
literal|false
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data8"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Key_Escape
argument_list|)
operator|<<
literal|2
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|false
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data9"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Key_Down
argument_list|)
operator|<<
literal|3
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|false
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data10"
argument_list|)
operator|<<
name|int
argument_list|(
name|Qt
operator|::
name|Key_Return
argument_list|)
operator|<<
literal|3
operator|<<
literal|0
operator|<<
literal|false
operator|<<
literal|true
operator|<<
literal|false
expr_stmt|;
comment|//test shortcuts
if|#
directive|if
literal|0
block|QTest::newRow("shortcut0")<< (Qt::ALT | Qt::Key_A)<< 2<< 0<< true<< true<< false;
endif|#
directive|endif
block|}
end_function
begin_function
name|void
DECL|function|keyboardNavigation
name|tst_QMenu
operator|::
name|keyboardNavigation
parameter_list|()
block|{
name|DEPENDS_ON
argument_list|(
literal|"addActionsAndClear"
argument_list|)
expr_stmt|;
comment|//if add/clear fails...
name|QFETCH
argument_list|(
name|int
argument_list|,
name|key
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expected_action
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expected_menu
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|init
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|expected_activated
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|expected_highlighted
argument_list|)
expr_stmt|;
if|if
condition|(
name|init
condition|)
block|{
name|lastMenu
operator|=
name|menus
index|[
literal|0
index|]
expr_stmt|;
name|lastMenu
operator|->
name|clear
argument_list|()
expr_stmt|;
name|createActions
argument_list|()
expr_stmt|;
name|lastMenu
operator|->
name|popup
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QTest
operator|::
name|keyClick
argument_list|(
name|lastMenu
argument_list|,
operator|(
name|Qt
operator|::
name|Key
operator|)
name|key
argument_list|)
expr_stmt|;
if|if
condition|(
name|expected_activated
condition|)
block|{
name|QCOMPARE
argument_list|(
name|activated
argument_list|,
name|builtins
index|[
name|expected_action
index|]
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menus
index|[
name|expected_menu
index|]
operator|->
name|activeAction
argument_list|()
argument_list|,
operator|(
name|QAction
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|menus
index|[
name|expected_menu
index|]
operator|->
name|activeAction
argument_list|()
argument_list|,
name|builtins
index|[
name|expected_action
index|]
argument_list|)
expr_stmt|;
if|if
condition|(
name|expected_highlighted
condition|)
name|QCOMPARE
argument_list|(
name|menus
index|[
name|expected_menu
index|]
operator|->
name|activeAction
argument_list|()
argument_list|,
name|highlighted
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|Q_WS_MAC
end_ifdef
begin_decl_stmt
name|QT_BEGIN_NAMESPACE
specifier|extern
name|bool
name|qt_tab_all_widgets
decl_stmt|;
end_decl_stmt
begin_comment
comment|// qapplication_mac.cpp
end_comment
begin_function
name|QT_END_NAMESPACE
endif|#
directive|endif
DECL|function|focus
name|void
name|tst_QMenu
operator|::
name|focus
parameter_list|()
block|{
name|QMenu
name|menu
decl_stmt|;
name|menu
operator|.
name|addAction
argument_list|(
literal|"One"
argument_list|)
expr_stmt|;
name|menu
operator|.
name|addAction
argument_list|(
literal|"Two"
argument_list|)
expr_stmt|;
name|menu
operator|.
name|addAction
argument_list|(
literal|"Three"
argument_list|)
expr_stmt|;
name|bool
name|fullKeyboardControl
init|=
literal|true
decl_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_MAC
name|fullKeyboardControl
operator|=
name|qt_tab_all_widgets
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|fullKeyboardControl
condition|)
name|QSKIP
argument_list|(
literal|"Computer is currently set up to NOT tab to all widgets,"
literal|" this test assumes you can tab to all widgets"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
name|QWidget
name|window
decl_stmt|;
name|QPushButton
name|button
argument_list|(
literal|"Push me"
argument_list|,
operator|&
name|window
argument_list|)
decl_stmt|;
name|window
operator|.
name|show
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|setActiveWindow
argument_list|(
operator|&
name|window
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|button
operator|.
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QApplication
operator|::
name|focusWidget
argument_list|()
argument_list|,
operator|(
name|QWidget
operator|*
operator|)
operator|&
name|button
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QApplication
operator|::
name|activeWindow
argument_list|()
argument_list|,
operator|&
name|window
argument_list|)
expr_stmt|;
name|menu
operator|.
name|show
argument_list|()
expr_stmt|;
if|#
directive|if
literal|0
block|QVERIFY(!button.hasFocus());     QCOMPARE(QApplication::focusWidget(),&menu);     QCOMPARE(QApplication::activeWindow(),&window);
else|#
directive|else
name|QVERIFY
argument_list|(
name|button
operator|.
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QApplication
operator|::
name|focusWidget
argument_list|()
argument_list|,
operator|(
name|QWidget
operator|*
operator|)
operator|&
name|button
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QApplication
operator|::
name|activeWindow
argument_list|()
argument_list|,
operator|&
name|window
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|menu
operator|.
name|hide
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|button
operator|.
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QApplication
operator|::
name|focusWidget
argument_list|()
argument_list|,
operator|(
name|QWidget
operator|*
operator|)
operator|&
name|button
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QApplication
operator|::
name|activeWindow
argument_list|()
argument_list|,
operator|&
name|window
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|overrideMenuAction
name|void
name|tst_QMenu
operator|::
name|overrideMenuAction
parameter_list|()
block|{
comment|//test the override menu action by first creating an action to which we set its menu
name|QMainWindow
name|w
decl_stmt|;
name|QAction
modifier|*
name|aFileMenu
init|=
operator|new
name|QAction
argument_list|(
literal|"&File"
argument_list|,
operator|&
name|w
argument_list|)
decl_stmt|;
name|w
operator|.
name|menuBar
argument_list|()
operator|->
name|addAction
argument_list|(
name|aFileMenu
argument_list|)
expr_stmt|;
name|QMenu
modifier|*
name|m
init|=
operator|new
name|QMenu
argument_list|(
operator|&
name|w
argument_list|)
decl_stmt|;
name|QAction
modifier|*
name|menuaction
init|=
name|m
operator|->
name|menuAction
argument_list|()
decl_stmt|;
name|connect
argument_list|(
name|m
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|(
name|QAction
operator|*
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|onActivated
argument_list|(
name|QAction
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|aFileMenu
operator|->
name|setMenu
argument_list|(
name|m
argument_list|)
expr_stmt|;
comment|//this sets the override menu action for the QMenu
name|QCOMPARE
argument_list|(
name|m
operator|->
name|menuAction
argument_list|()
argument_list|,
name|aFileMenu
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_MAC
name|QSKIP
argument_list|(
literal|"On Mac, we need to create native key events to test menu action activation"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QSKIP
argument_list|(
literal|"On Windows CE, we need to create native key events to test menu action activation"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QAction
modifier|*
name|aQuit
init|=
operator|new
name|QAction
argument_list|(
literal|"Quit"
argument_list|,
operator|&
name|w
argument_list|)
decl_stmt|;
name|aQuit
operator|->
name|setShortcut
argument_list|(
name|QKeySequence
argument_list|(
literal|"Ctrl+X"
argument_list|)
argument_list|)
expr_stmt|;
name|m
operator|->
name|addAction
argument_list|(
name|aQuit
argument_list|)
expr_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowShown
argument_list|(
operator|&
name|w
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|setActiveWindow
argument_list|(
operator|&
name|w
argument_list|)
expr_stmt|;
name|w
operator|.
name|setFocus
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|w
operator|.
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
comment|//test of the action inside the menu
name|QTest
operator|::
name|keyClick
argument_list|(
operator|&
name|w
argument_list|,
name|Qt
operator|::
name|Key_X
argument_list|,
name|Qt
operator|::
name|ControlModifier
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|activated
argument_list|,
name|aQuit
argument_list|)
expr_stmt|;
comment|//test if the menu still pops out
name|QTest
operator|::
name|keyClick
argument_list|(
operator|&
name|w
argument_list|,
name|Qt
operator|::
name|Key_F
argument_list|,
name|Qt
operator|::
name|AltModifier
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|m
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|aFileMenu
expr_stmt|;
comment|//after the deletion of the override menu action,
comment|//the menu should have its default menu action back
name|QCOMPARE
argument_list|(
name|m
operator|->
name|menuAction
argument_list|()
argument_list|,
name|menuaction
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|statusTip
name|void
name|tst_QMenu
operator|::
name|statusTip
parameter_list|()
block|{
comment|//check that the statustip of actions inserted into the menu are displayed
name|QMainWindow
name|w
decl_stmt|;
name|connect
argument_list|(
name|w
operator|.
name|statusBar
argument_list|()
argument_list|,
name|SIGNAL
argument_list|(
name|messageChanged
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|onStatusMessageChanged
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
empty_stmt|;
comment|//creates the status bar
name|QToolBar
name|tb
decl_stmt|;
name|QAction
name|a
argument_list|(
literal|"main action"
argument_list|,
operator|&
name|tb
argument_list|)
decl_stmt|;
name|a
operator|.
name|setStatusTip
argument_list|(
literal|"main action"
argument_list|)
expr_stmt|;
name|QMenu
name|m
argument_list|(
operator|&
name|tb
argument_list|)
decl_stmt|;
name|QAction
name|subact
argument_list|(
literal|"sub action"
argument_list|,
operator|&
name|m
argument_list|)
decl_stmt|;
name|subact
operator|.
name|setStatusTip
argument_list|(
literal|"sub action"
argument_list|)
expr_stmt|;
name|m
operator|.
name|addAction
argument_list|(
operator|&
name|subact
argument_list|)
expr_stmt|;
name|a
operator|.
name|setMenu
argument_list|(
operator|&
name|m
argument_list|)
expr_stmt|;
name|tb
operator|.
name|addAction
argument_list|(
operator|&
name|a
argument_list|)
expr_stmt|;
name|w
operator|.
name|addToolBar
argument_list|(
operator|&
name|tb
argument_list|)
expr_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowShown
argument_list|(
operator|&
name|w
argument_list|)
expr_stmt|;
name|QRect
name|rect1
init|=
name|tb
operator|.
name|actionGeometry
argument_list|(
operator|&
name|a
argument_list|)
decl_stmt|;
name|QToolButton
modifier|*
name|btn
init|=
name|qobject_cast
argument_list|<
name|QToolButton
operator|*
argument_list|>
argument_list|(
name|tb
operator|.
name|childAt
argument_list|(
name|rect1
operator|.
name|center
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|btn
operator|!=
name|NULL
argument_list|)
expr_stmt|;
comment|//because showMenu calls QMenu::exec, we need to use a singleshot
comment|//to continue the test
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|200
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|onStatusTipTimer
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|btn
operator|->
name|showMenu
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|statustip
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//2nd part of the test
end_comment
begin_function
DECL|function|onStatusTipTimer
name|void
name|tst_QMenu
operator|::
name|onStatusTipTimer
parameter_list|()
block|{
name|QMenu
modifier|*
name|menu
init|=
name|qobject_cast
argument_list|<
name|QMenu
operator|*
argument_list|>
argument_list|(
name|QApplication
operator|::
name|activePopupWidget
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|menu
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|menu
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|menu
argument_list|,
name|Qt
operator|::
name|Key_Down
argument_list|)
expr_stmt|;
comment|//we store the statustip to press escape in any case
comment|//otherwise, if the test fails it blocks (never gets out of QMenu::exec
specifier|const
name|QString
name|st
init|=
name|statustip
decl_stmt|;
name|menu
operator|->
name|close
argument_list|()
expr_stmt|;
comment|//goes out of the menu
name|QCOMPARE
argument_list|(
name|st
argument_list|,
name|QString
argument_list|(
literal|"sub action"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|menu
operator|->
name|isVisible
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|widgetActionFocus
name|void
name|tst_QMenu
operator|::
name|widgetActionFocus
parameter_list|()
block|{
comment|//test if the focus is correctly handled with a QWidgetAction
name|QMenu
name|m
decl_stmt|;
name|QListWidget
modifier|*
name|l
init|=
operator|new
name|QListWidget
argument_list|(
operator|&
name|m
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|1
init|;
name|i
operator|<
literal|3
condition|;
name|i
operator|++
control|)
name|l
operator|->
name|addItem
argument_list|(
name|QString
argument_list|(
literal|"item%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QWidgetAction
modifier|*
name|wa
init|=
operator|new
name|QWidgetAction
argument_list|(
operator|&
name|m
argument_list|)
decl_stmt|;
name|wa
operator|->
name|setDefaultWidget
argument_list|(
name|l
argument_list|)
expr_stmt|;
name|m
operator|.
name|addAction
argument_list|(
name|wa
argument_list|)
expr_stmt|;
name|m
operator|.
name|setActiveAction
argument_list|(
name|wa
argument_list|)
expr_stmt|;
name|l
operator|->
name|setFocus
argument_list|()
expr_stmt|;
comment|//to ensure it has primarily the focus
name|QAction
modifier|*
name|menuitem1
init|=
name|m
operator|.
name|addAction
argument_list|(
literal|"menuitem1"
argument_list|)
decl_stmt|;
name|QAction
modifier|*
name|menuitem2
init|=
name|m
operator|.
name|addAction
argument_list|(
literal|"menuitem2"
argument_list|)
decl_stmt|;
name|m
operator|.
name|popup
argument_list|(
name|QPoint
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|l
operator|->
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|l
operator|->
name|currentItem
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|->
name|currentItem
argument_list|()
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"item1"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|QApplication
operator|::
name|focusWidget
argument_list|()
argument_list|,
name|Qt
operator|::
name|Key_Down
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|l
operator|->
name|currentItem
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|l
operator|->
name|currentItem
argument_list|()
operator|->
name|text
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"item2"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|QApplication
operator|::
name|focusWidget
argument_list|()
argument_list|,
name|Qt
operator|::
name|Key_Down
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m
operator|.
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|m
operator|.
name|activeAction
argument_list|()
argument_list|,
name|menuitem1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|QApplication
operator|::
name|focusWidget
argument_list|()
argument_list|,
name|Qt
operator|::
name|Key_Down
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m
operator|.
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|m
operator|.
name|activeAction
argument_list|()
argument_list|,
name|menuitem2
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|QApplication
operator|::
name|focusWidget
argument_list|()
argument_list|,
name|Qt
operator|::
name|Key_Up
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|m
operator|.
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|m
operator|.
name|activeAction
argument_list|()
argument_list|,
name|menuitem1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|QApplication
operator|::
name|focusWidget
argument_list|()
argument_list|,
name|Qt
operator|::
name|Key_Up
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|l
operator|->
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|m
operator|.
name|activeAction
argument_list|()
argument_list|,
operator|(
name|QAction
operator|*
operator|)
name|wa
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tearOff
name|void
name|tst_QMenu
operator|::
name|tearOff
parameter_list|()
block|{
name|QWidget
name|widget
decl_stmt|;
name|QMenu
modifier|*
name|menu
init|=
operator|new
name|QMenu
argument_list|(
operator|&
name|widget
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|menu
operator|->
name|isTearOffEnabled
argument_list|()
argument_list|)
expr_stmt|;
comment|//default value
name|menu
operator|->
name|setTearOffEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addAction
argument_list|(
literal|"aaa"
argument_list|)
expr_stmt|;
name|menu
operator|->
name|addAction
argument_list|(
literal|"bbb"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|menu
operator|->
name|isTearOffEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|widget
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowShown
argument_list|(
operator|&
name|widget
argument_list|)
expr_stmt|;
name|widget
operator|.
name|activateWindow
argument_list|()
expr_stmt|;
name|menu
operator|->
name|popup
argument_list|(
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|menu
operator|->
name|isTearOffMenuVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|mouseClick
argument_list|(
name|menu
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|0
argument_list|,
name|QPoint
argument_list|(
literal|3
argument_list|,
literal|3
argument_list|)
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|menu
operator|->
name|isTearOffMenuVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QPointer
argument_list|<
name|QMenu
argument_list|>
name|torn
init|=
literal|0
decl_stmt|;
foreach|foreach
control|(
name|QWidget
modifier|*
name|w
decl|,
name|QApplication
operator|::
name|allWidgets
argument_list|()
control|)
block|{
if|if
condition|(
name|w
operator|->
name|inherits
argument_list|(
literal|"QTornOffMenu"
argument_list|)
condition|)
block|{
name|torn
operator|=
cast|static_cast
argument_list|<
name|QMenu
operator|*
argument_list|>
argument_list|(
name|w
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
name|QVERIFY
argument_list|(
name|torn
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|torn
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|menu
operator|->
name|hideTearOffMenu
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|menu
operator|->
name|isTearOffMenuVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|torn
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|layoutDirection
name|void
name|tst_QMenu
operator|::
name|layoutDirection
parameter_list|()
block|{
name|QMainWindow
name|win
decl_stmt|;
name|win
operator|.
name|setLayoutDirection
argument_list|(
name|Qt
operator|::
name|RightToLeft
argument_list|)
expr_stmt|;
name|QMenu
name|menu
argument_list|(
operator|&
name|win
argument_list|)
decl_stmt|;
name|menu
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowShown
argument_list|(
operator|&
name|menu
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menu
operator|.
name|layoutDirection
argument_list|()
argument_list|,
name|Qt
operator|::
name|RightToLeft
argument_list|)
expr_stmt|;
name|menu
operator|.
name|close
argument_list|()
expr_stmt|;
name|menu
operator|.
name|setParent
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|menu
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowShown
argument_list|(
operator|&
name|menu
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menu
operator|.
name|layoutDirection
argument_list|()
argument_list|,
name|QApplication
operator|::
name|layoutDirection
argument_list|()
argument_list|)
expr_stmt|;
name|menu
operator|.
name|close
argument_list|()
expr_stmt|;
comment|//now the menubar
name|QAction
modifier|*
name|action
init|=
name|win
operator|.
name|menuBar
argument_list|()
operator|->
name|addMenu
argument_list|(
operator|&
name|menu
argument_list|)
decl_stmt|;
name|win
operator|.
name|menuBar
argument_list|()
operator|->
name|setActiveAction
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowShown
argument_list|(
operator|&
name|menu
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menu
operator|.
name|layoutDirection
argument_list|()
argument_list|,
name|Qt
operator|::
name|RightToLeft
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|task208001_stylesheet
name|void
name|tst_QMenu
operator|::
name|task208001_stylesheet
parameter_list|()
block|{
comment|//test if it crash
name|QMainWindow
decl|main
decl_stmt|;
expr|main
operator|.
name|setStyleSheet
argument_list|(
literal|"QMenu [title =\"File\"] { color: red;}"
argument_list|)
expr_stmt|;
expr|main
operator|.
name|menuBar
argument_list|()
operator|->
name|addMenu
argument_list|(
literal|"File"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|activeSubMenuPosition
name|void
name|tst_QMenu
operator|::
name|activeSubMenuPosition
parameter_list|()
block|{
name|QPushButton
name|lab
argument_list|(
literal|"subMenuPosition test"
argument_list|)
decl_stmt|;
name|QMenu
modifier|*
name|sub
init|=
operator|new
name|QMenu
argument_list|(
literal|"Submenu"
argument_list|,
operator|&
name|lab
argument_list|)
decl_stmt|;
name|sub
operator|->
name|addAction
argument_list|(
literal|"Sub-Item1"
argument_list|)
expr_stmt|;
name|QAction
modifier|*
name|subAction
init|=
name|sub
operator|->
name|addAction
argument_list|(
literal|"Sub-Item2"
argument_list|)
decl_stmt|;
name|QMenu
modifier|*
decl|main
init|=
operator|new
name|QMenu
argument_list|(
literal|"Menu-Title"
argument_list|,
operator|&
name|lab
argument_list|)
decl_stmt|;
operator|(
name|void
operator|)
expr|main
operator|->
name|addAction
argument_list|(
literal|"Item 1"
argument_list|)
expr_stmt|;
name|QAction
modifier|*
name|menuAction
init|=
expr|main
operator|->
name|addMenu
argument_list|(
name|sub
argument_list|)
decl_stmt|;
operator|(
name|void
operator|)
expr|main
operator|->
name|addAction
argument_list|(
literal|"Item 3"
argument_list|)
expr_stmt|;
operator|(
name|void
operator|)
expr|main
operator|->
name|addAction
argument_list|(
literal|"Item 4"
argument_list|)
expr_stmt|;
expr|main
operator|->
name|setActiveAction
argument_list|(
name|menuAction
argument_list|)
expr_stmt|;
name|sub
operator|->
name|setActiveAction
argument_list|(
name|subAction
argument_list|)
expr_stmt|;
expr|main
operator|->
name|popup
argument_list|(
name|QPoint
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
expr|main
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
expr|main
operator|->
name|activeAction
argument_list|()
argument_list|,
name|menuAction
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sub
operator|->
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sub
operator|->
name|pos
argument_list|()
operator|!=
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// well, it's enough to check the pos is not (0,0) but it's more safe
comment|// to check that submenu is to the right of the main menu too.
ifdef|#
directive|ifdef
name|Q_OS_WINCE_WM
name|QSKIP
argument_list|(
literal|"Not true for Windows Mobile Soft Keys"
argument_list|,
name|SkipSingle
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|sub
operator|->
name|pos
argument_list|()
operator|.
name|x
argument_list|()
operator|>
expr|main
operator|->
name|pos
argument_list|()
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sub
operator|->
name|activeAction
argument_list|()
argument_list|,
name|subAction
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|task242454_sizeHint
name|void
name|tst_QMenu
operator|::
name|task242454_sizeHint
parameter_list|()
block|{
name|QMenu
name|menu
decl_stmt|;
name|QString
name|s
init|=
name|QLatin1String
argument_list|(
literal|"foo\nfoo\nfoo\nfoo"
argument_list|)
decl_stmt|;
name|menu
operator|.
name|addAction
argument_list|(
name|s
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|menu
operator|.
name|sizeHint
argument_list|()
operator|.
name|width
argument_list|()
operator|>
name|menu
operator|.
name|fontMetrics
argument_list|()
operator|.
name|boundingRect
argument_list|(
name|QRect
argument_list|()
argument_list|,
name|Qt
operator|::
name|TextSingleLine
argument_list|,
name|s
argument_list|)
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|Menu
class|class
name|Menu
super|:
specifier|public
name|QMenu
block|{
name|Q_OBJECT
public|public
name|slots
public|:
DECL|function|clear
name|void
name|clear
parameter_list|()
block|{
name|QMenu
operator|::
name|clear
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|task176201_clear
name|void
name|tst_QMenu
operator|::
name|task176201_clear
parameter_list|()
block|{
comment|//this test used to crash
name|Menu
name|menu
decl_stmt|;
name|QAction
modifier|*
name|action
init|=
name|menu
operator|.
name|addAction
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|menu
operator|.
name|connect
argument_list|(
name|action
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|clear
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|menu
operator|.
name|popup
argument_list|(
name|QPoint
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|mouseClick
argument_list|(
operator|&
name|menu
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
literal|0
argument_list|,
name|menu
operator|.
name|rect
argument_list|()
operator|.
name|center
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|task250673_activeMultiColumnSubMenuPosition
name|void
name|tst_QMenu
operator|::
name|task250673_activeMultiColumnSubMenuPosition
parameter_list|()
block|{
class|class
name|MyMenu
super|:
specifier|public
name|QMenu
block|{
public|public:
name|int
name|columnCount
parameter_list|()
specifier|const
block|{
return|return
name|QMenu
operator|::
name|columnCount
argument_list|()
return|;
block|}
block|}
class|;
name|QMenu
name|sub
decl_stmt|;
if|if
condition|(
name|sub
operator|.
name|style
argument_list|()
operator|->
name|styleHint
argument_list|(
name|QStyle
operator|::
name|SH_Menu_Scrollable
argument_list|,
literal|0
argument_list|,
operator|&
name|sub
argument_list|)
condition|)
block|{
comment|//the style prevents the menus from getting columns
name|QSKIP
argument_list|(
literal|"the style doesn't support multiple columns, it makes the menu scrollable"
argument_list|,
name|SkipSingle
argument_list|)
expr_stmt|;
block|}
name|sub
operator|.
name|addAction
argument_list|(
literal|"Sub-Item1"
argument_list|)
expr_stmt|;
name|QAction
modifier|*
name|subAction
init|=
name|sub
operator|.
name|addAction
argument_list|(
literal|"Sub-Item2"
argument_list|)
decl_stmt|;
name|MyMenu
decl|main
decl_stmt|;
expr|main
operator|.
name|addAction
argument_list|(
literal|"Item 1"
argument_list|)
expr_stmt|;
name|QAction
modifier|*
name|menuAction
init|=
expr|main
operator|.
name|addMenu
argument_list|(
operator|&
name|sub
argument_list|)
decl_stmt|;
expr|main
operator|.
name|popup
argument_list|(
name|QPoint
argument_list|(
literal|200
argument_list|,
literal|200
argument_list|)
argument_list|)
expr_stmt|;
name|uint
name|i
init|=
literal|2
decl_stmt|;
while|while
condition|(
expr|main
operator|.
name|columnCount
argument_list|()
operator|<
literal|2
condition|)
block|{
expr|main
operator|.
name|addAction
argument_list|(
name|QString
argument_list|(
literal|"Item %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|<
literal|1000
argument_list|)
expr_stmt|;
block|}
expr|main
operator|.
name|setActiveAction
argument_list|(
name|menuAction
argument_list|)
expr_stmt|;
name|sub
operator|.
name|setActiveAction
argument_list|(
name|subAction
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
expr|main
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
expr|main
operator|.
name|activeAction
argument_list|()
argument_list|,
name|menuAction
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sub
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sub
operator|.
name|pos
argument_list|()
operator|.
name|x
argument_list|()
operator|>
expr|main
operator|.
name|pos
argument_list|()
operator|.
name|x
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|int
name|subMenuOffset
init|=
expr|main
operator|.
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_SubMenuOverlap
argument_list|,
literal|0
argument_list|,
operator|&
expr|main
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|sub
operator|.
name|geometry
argument_list|()
operator|.
name|left
argument_list|()
operator|-
name|subMenuOffset
operator|+
literal|5
operator|)
operator|<
expr|main
operator|.
name|geometry
argument_list|()
operator|.
name|right
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|task256918_setFont
name|void
name|tst_QMenu
operator|::
name|task256918_setFont
parameter_list|()
block|{
name|QMenu
name|menu
decl_stmt|;
name|QAction
modifier|*
name|action
init|=
name|menu
operator|.
name|addAction
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|QFont
name|f
decl_stmt|;
name|f
operator|.
name|setPointSize
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|action
operator|->
name|setFont
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|menu
operator|.
name|show
argument_list|()
expr_stmt|;
comment|//ensures that the actiongeometry are calculated
name|QVERIFY
argument_list|(
name|menu
operator|.
name|actionGeometry
argument_list|(
name|action
argument_list|)
operator|.
name|height
argument_list|()
operator|>
name|f
operator|.
name|pointSize
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|menuSizeHint
name|void
name|tst_QMenu
operator|::
name|menuSizeHint
parameter_list|()
block|{
name|QMenu
name|menu
decl_stmt|;
comment|//this is a list of arbitrary strings so that we check the geometry
name|QStringList
name|list
init|=
name|QStringList
argument_list|()
operator|<<
literal|"trer"
operator|<<
literal|"ezrfgtgvqd"
operator|<<
literal|"sdgzgzerzerzer"
operator|<<
literal|"eerzertz"
operator|<<
literal|"er"
decl_stmt|;
foreach|foreach
control|(
name|QString
name|str
decl|,
name|list
control|)
name|menu
operator|.
name|addAction
argument_list|(
name|str
argument_list|)
expr_stmt|;
name|int
name|left
decl_stmt|,
name|top
decl_stmt|,
name|right
decl_stmt|,
name|bottom
decl_stmt|;
name|menu
operator|.
name|getContentsMargins
argument_list|(
operator|&
name|left
argument_list|,
operator|&
name|top
argument_list|,
operator|&
name|right
argument_list|,
operator|&
name|bottom
argument_list|)
expr_stmt|;
specifier|const
name|int
name|panelWidth
init|=
name|menu
operator|.
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuPanelWidth
argument_list|,
literal|0
argument_list|,
operator|&
name|menu
argument_list|)
decl_stmt|;
specifier|const
name|int
name|hmargin
init|=
name|menu
operator|.
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuHMargin
argument_list|,
literal|0
argument_list|,
operator|&
name|menu
argument_list|)
decl_stmt|,
name|vmargin
init|=
name|menu
operator|.
name|style
argument_list|()
operator|->
name|pixelMetric
argument_list|(
name|QStyle
operator|::
name|PM_MenuVMargin
argument_list|,
literal|0
argument_list|,
operator|&
name|menu
argument_list|)
decl_stmt|;
name|int
name|maxWidth
init|=
literal|0
decl_stmt|;
name|QRect
name|result
decl_stmt|;
foreach|foreach
control|(
name|QAction
modifier|*
name|action
decl|,
name|menu
operator|.
name|actions
argument_list|()
control|)
block|{
ifdef|#
directive|ifdef
name|QT_SOFTKEYS_ENABLED
comment|// Softkey actions are not widgets and have no geometry.
if|if
condition|(
name|menu
operator|.
name|actionGeometry
argument_list|(
name|action
argument_list|)
operator|.
name|topLeft
argument_list|()
operator|==
name|QPoint
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
condition|)
continue|continue;
endif|#
directive|endif
name|maxWidth
operator|=
name|qMax
argument_list|(
name|maxWidth
argument_list|,
name|menu
operator|.
name|actionGeometry
argument_list|(
name|action
argument_list|)
operator|.
name|width
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator||=
name|menu
operator|.
name|actionGeometry
argument_list|(
name|action
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
operator|.
name|x
argument_list|()
argument_list|,
name|left
operator|+
name|hmargin
operator|+
name|panelWidth
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
operator|.
name|y
argument_list|()
argument_list|,
name|top
operator|+
name|vmargin
operator|+
name|panelWidth
argument_list|)
expr_stmt|;
block|}
name|QStyleOption
name|opt
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|opt
operator|.
name|rect
operator|=
name|menu
operator|.
name|rect
argument_list|()
expr_stmt|;
name|opt
operator|.
name|state
operator|=
name|QStyle
operator|::
name|State_None
expr_stmt|;
name|QSize
name|resSize
init|=
name|QSize
argument_list|(
name|result
operator|.
name|x
argument_list|()
argument_list|,
name|result
operator|.
name|y
argument_list|()
argument_list|)
operator|+
name|result
operator|.
name|size
argument_list|()
operator|+
name|QSize
argument_list|(
name|hmargin
operator|+
name|right
operator|+
name|panelWidth
argument_list|,
name|vmargin
operator|+
name|top
operator|+
name|panelWidth
argument_list|)
decl_stmt|;
name|resSize
operator|=
name|menu
operator|.
name|style
argument_list|()
operator|->
name|sizeFromContents
argument_list|(
name|QStyle
operator|::
name|CT_Menu
argument_list|,
operator|&
name|opt
argument_list|,
name|resSize
operator|.
name|expandedTo
argument_list|(
name|QApplication
operator|::
name|globalStrut
argument_list|()
argument_list|)
argument_list|,
operator|&
name|menu
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|resSize
argument_list|,
name|menu
operator|.
name|sizeHint
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|Menu258920
class|class
name|Menu258920
super|:
specifier|public
name|QMenu
block|{
name|Q_OBJECT
public|public
name|slots
public|:
DECL|function|paintEvent
name|void
name|paintEvent
parameter_list|(
name|QPaintEvent
modifier|*
name|e
parameter_list|)
block|{
name|QMenu
operator|::
name|paintEvent
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|painted
operator|=
literal|true
expr_stmt|;
block|}
public|public:
DECL|member|painted
name|bool
name|painted
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|task258920_mouseBorder
name|void
name|tst_QMenu
operator|::
name|task258920_mouseBorder
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_WINCE_WM
name|QSKIP
argument_list|(
literal|"Mouse move related signals for Windows Mobile unavailable"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_WS_QPA
name|QSKIP
argument_list|(
literal|"QTBUG-20753 QCursor::setPos() / QTest::mouseMove() doesn't work on qpa"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|Menu258920
name|menu
decl_stmt|;
comment|// For styles which inherit from QWindowsStyle, styleHint(QStyle::SH_Menu_MouseTracking) is true.
name|menu
operator|.
name|setMouseTracking
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QAction
modifier|*
name|action
init|=
name|menu
operator|.
name|addAction
argument_list|(
literal|"test"
argument_list|)
decl_stmt|;
name|menu
operator|.
name|popup
argument_list|(
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|availableGeometry
argument_list|()
operator|.
name|center
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowShown
argument_list|(
operator|&
name|menu
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QRect
name|actionRect
init|=
name|menu
operator|.
name|actionGeometry
argument_list|(
name|action
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|mouseMove
argument_list|(
operator|&
name|menu
argument_list|,
name|actionRect
operator|.
name|center
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|mouseMove
argument_list|(
operator|&
name|menu
argument_list|,
name|actionRect
operator|.
name|center
argument_list|()
operator|+
name|QPoint
argument_list|(
literal|10
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|action
argument_list|,
name|menu
operator|.
name|activeAction
argument_list|()
argument_list|)
expr_stmt|;
name|menu
operator|.
name|painted
operator|=
literal|false
expr_stmt|;
name|QTest
operator|::
name|mouseMove
argument_list|(
operator|&
name|menu
argument_list|,
name|QPoint
argument_list|(
name|actionRect
operator|.
name|center
argument_list|()
operator|.
name|x
argument_list|()
argument_list|,
name|actionRect
operator|.
name|bottom
argument_list|()
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
cast|static_cast
argument_list|<
name|QAction
operator|*
argument_list|>
argument_list|(
literal|0
argument_list|)
argument_list|,
name|menu
operator|.
name|activeAction
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|menu
operator|.
name|painted
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setFixedWidth
name|void
name|tst_QMenu
operator|::
name|setFixedWidth
parameter_list|()
block|{
name|QMenu
name|menu
decl_stmt|;
name|menu
operator|.
name|addAction
argument_list|(
literal|"action"
argument_list|)
expr_stmt|;
name|menu
operator|.
name|setFixedWidth
argument_list|(
literal|300
argument_list|)
expr_stmt|;
comment|//the sizehint should reflect the minimumwidth because the action will try to
comment|//get as much space as possible
name|QCOMPARE
argument_list|(
name|menu
operator|.
name|sizeHint
argument_list|()
operator|.
name|width
argument_list|()
argument_list|,
name|menu
operator|.
name|minimumWidth
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|deleteActionInTriggered
name|void
name|tst_QMenu
operator|::
name|deleteActionInTriggered
parameter_list|()
block|{
comment|// should not crash
name|QMenu
name|m
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|m
argument_list|,
name|SIGNAL
argument_list|(
name|triggered
argument_list|(
name|QAction
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|deleteAction
argument_list|(
name|QAction
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QWeakPointer
argument_list|<
name|QAction
argument_list|>
name|a
init|=
name|m
operator|.
name|addAction
argument_list|(
literal|"action"
argument_list|)
decl_stmt|;
name|a
operator|.
name|data
argument_list|()
operator|->
name|trigger
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|a
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|pushButtonPopulateOnAboutToShow
name|void
name|tst_QMenu
operator|::
name|pushButtonPopulateOnAboutToShow
parameter_list|()
block|{
name|QPushButton
name|b
argument_list|(
literal|"Test PushButton"
argument_list|)
decl_stmt|;
name|b
operator|.
name|setWindowFlags
argument_list|(
name|Qt
operator|::
name|FramelessWindowHint
operator||
name|Qt
operator|::
name|X11BypassWindowManagerHint
argument_list|)
expr_stmt|;
name|lastMenu
operator|=
operator|new
name|QMenu
expr_stmt|;
name|b
operator|.
name|setMenu
argument_list|(
name|lastMenu
argument_list|)
expr_stmt|;
specifier|const
name|int
name|scrNumber
init|=
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|screenNumber
argument_list|(
operator|&
name|b
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|lastMenu
argument_list|,
name|SIGNAL
argument_list|(
name|aboutToShow
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|populateMenu
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|show
argument_list|()
expr_stmt|;
specifier|const
name|QRect
name|screen
init|=
name|QApplication
operator|::
name|desktop
argument_list|()
operator|->
name|screenGeometry
argument_list|(
name|scrNumber
argument_list|)
decl_stmt|;
name|QRect
name|desiredGeometry
init|=
name|b
operator|.
name|geometry
argument_list|()
decl_stmt|;
name|desiredGeometry
operator|.
name|moveTopLeft
argument_list|(
name|QPoint
argument_list|(
literal|10
argument_list|,
name|screen
operator|.
name|bottom
argument_list|()
operator|-
name|b
operator|.
name|height
argument_list|()
operator|-
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|b
operator|.
name|setGeometry
argument_list|(
name|desiredGeometry
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowShown
argument_list|(
operator|&
name|b
argument_list|)
expr_stmt|;
if|if
condition|(
name|b
operator|.
name|geometry
argument_list|()
operator|!=
name|desiredGeometry
condition|)
block|{
comment|// We are trying to put the button very close to the edge of the screen,
comment|// explicitly to test behavior when the popup menu goes off the screen.
comment|// However a modern window manager is quite likely to reject this requested geometry
comment|// (kwin in kde4 does, for example, since the button would probably appear behind
comment|// or partially behind the taskbar).
comment|// Your best bet is to run this test _without_ a WM.
name|QSKIP
argument_list|(
literal|"Your window manager won't allow a window against the bottom of the screen"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|300
argument_list|,
name|lastMenu
argument_list|,
name|SLOT
argument_list|(
name|hide
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|mouseClick
argument_list|(
operator|&
name|b
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|,
name|b
operator|.
name|rect
argument_list|()
operator|.
name|center
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|lastMenu
operator|->
name|geometry
argument_list|()
operator|.
name|intersects
argument_list|(
name|b
operator|.
name|geometry
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// note: we're assuming that, if we previously got the desired geometry, we'll get it here too
name|b
operator|.
name|move
argument_list|(
literal|10
argument_list|,
name|screen
operator|.
name|bottom
argument_list|()
operator|-
name|lastMenu
operator|->
name|height
argument_list|()
operator|-
literal|5
argument_list|)
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|300
argument_list|,
name|lastMenu
argument_list|,
name|SLOT
argument_list|(
name|hide
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|mouseClick
argument_list|(
operator|&
name|b
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|,
name|b
operator|.
name|rect
argument_list|()
operator|.
name|center
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|lastMenu
operator|->
name|geometry
argument_list|()
operator|.
name|intersects
argument_list|(
name|b
operator|.
name|geometry
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|QTBUG7907_submenus_autoselect
name|void
name|tst_QMenu
operator|::
name|QTBUG7907_submenus_autoselect
parameter_list|()
block|{
name|QMenu
name|menu
argument_list|(
literal|"Test Menu"
argument_list|)
decl_stmt|;
name|QMenu
name|set1
argument_list|(
literal|"Setting1"
argument_list|)
decl_stmt|;
name|QMenu
name|set2
argument_list|(
literal|"Setting2"
argument_list|)
decl_stmt|;
name|QMenu
name|subset
argument_list|(
literal|"Subsetting"
argument_list|)
decl_stmt|;
name|subset
operator|.
name|addAction
argument_list|(
literal|"Values"
argument_list|)
expr_stmt|;
name|set1
operator|.
name|addMenu
argument_list|(
operator|&
name|subset
argument_list|)
expr_stmt|;
name|menu
operator|.
name|addMenu
argument_list|(
operator|&
name|set1
argument_list|)
expr_stmt|;
name|menu
operator|.
name|addMenu
argument_list|(
operator|&
name|set2
argument_list|)
expr_stmt|;
name|menu
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowShown
argument_list|(
operator|&
name|menu
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|mouseClick
argument_list|(
operator|&
name|menu
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|,
name|QPoint
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|subset
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|QTBUG7411_submenus_activate
name|void
name|tst_QMenu
operator|::
name|QTBUG7411_submenus_activate
parameter_list|()
block|{
name|QMenu
name|menu
argument_list|(
literal|"Test Menu"
argument_list|)
decl_stmt|;
name|QAction
modifier|*
name|act
init|=
name|menu
operator|.
name|addAction
argument_list|(
literal|"foo"
argument_list|)
decl_stmt|;
name|QMenu
name|sub1
argument_list|(
literal|"&sub1"
argument_list|)
decl_stmt|;
name|sub1
operator|.
name|addAction
argument_list|(
literal|"foo"
argument_list|)
expr_stmt|;
name|sub1
operator|.
name|setTitle
argument_list|(
literal|"&sub1"
argument_list|)
expr_stmt|;
name|QAction
modifier|*
name|act1
init|=
name|menu
operator|.
name|addMenu
argument_list|(
operator|&
name|sub1
argument_list|)
decl_stmt|;
name|menu
operator|.
name|show
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowShown
argument_list|(
operator|&
name|menu
argument_list|)
expr_stmt|;
name|menu
operator|.
name|setActiveAction
argument_list|(
name|act
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
operator|&
name|menu
argument_list|,
name|Qt
operator|::
name|Key_Down
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|menu
operator|.
name|activeAction
argument_list|()
argument_list|,
name|act1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|sub1
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyPress
argument_list|(
operator|&
name|menu
argument_list|,
name|Qt
operator|::
name|Key_S
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|sub1
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|MyMenu
class|class
name|MyMenu
super|:
specifier|public
name|QMenu
block|{
name|Q_OBJECT
public|public:
DECL|function|MyMenu
name|MyMenu
parameter_list|()
member_init_list|:
name|m_currentIndex
argument_list|(
literal|0
argument_list|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
operator|++
name|i
control|)
name|dialogActions
index|[
name|i
index|]
operator|=
name|addAction
argument_list|(
name|QString
argument_list|(
literal|"dialog %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
argument_list|,
name|dialogs
operator|+
name|i
argument_list|,
name|SLOT
argument_list|(
name|exec
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|activateAction
name|void
name|activateAction
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|m_currentIndex
operator|=
name|index
expr_stmt|;
name|popup
argument_list|(
name|QPoint
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowShown
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|setActiveAction
argument_list|(
name|dialogActions
index|[
name|index
index|]
argument_list|)
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|500
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|checkVisibility
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|keyClick
argument_list|(
name|this
argument_list|,
name|Qt
operator|::
name|Key_Enter
argument_list|)
expr_stmt|;
comment|//activation
block|}
public|public
name|slots
public|:
DECL|function|activateLastAction
name|void
name|activateLastAction
parameter_list|()
block|{
name|activateAction
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|function|checkVisibility
name|void
name|checkVisibility
parameter_list|()
block|{
name|QTRY_VERIFY
argument_list|(
name|dialogs
index|[
name|m_currentIndex
index|]
operator|.
name|isVisible
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_currentIndex
operator|==
literal|1
condition|)
block|{
name|QApplication
operator|::
name|closeAllWindows
argument_list|()
expr_stmt|;
comment|//this is the end of the test
block|}
block|}
private|private:
DECL|member|dialogActions
name|QAction
modifier|*
name|dialogActions
index|[
literal|2
index|]
decl_stmt|;
DECL|member|dialogs
name|QDialog
name|dialogs
index|[
literal|2
index|]
decl_stmt|;
DECL|member|m_currentIndex
name|int
name|m_currentIndex
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|QTBUG_10735_crashWithDialog
name|void
name|tst_QMenu
operator|::
name|QTBUG_10735_crashWithDialog
parameter_list|()
block|{
name|MyMenu
name|menu
decl_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|1000
argument_list|,
operator|&
name|menu
argument_list|,
name|SLOT
argument_list|(
name|activateLastAction
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|menu
operator|.
name|activateAction
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QMenu
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qmenu.moc"
end_include
end_unit
