begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtGui/QtGui>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<stddef.h>
end_include
begin_include
include|#
directive|include
file|<exception>
end_include
begin_expr_stmt
name|QT_USE_NAMESPACE
comment|// this test only works with
comment|//   * GLIBC
comment|//   * MSVC - only debug builds (we need the crtdbg.h helpers)
comment|//   * SYMBIAN
if|#
directive|if
operator|(
name|defined
argument_list|(
name|QT_NO_EXCEPTIONS
argument_list|)
operator|||
operator|(
operator|!
name|defined
argument_list|(
name|__GLIBC__
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_CC_MSVC
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
operator|)
operator|)
operator|&&
operator|!
name|defined
argument_list|(
name|Q_MOC_RUN
argument_list|)
name|QTEST_NOOP_MAIN
else|#
directive|else
include|#
directive|include
file|"oomsimulator.h"
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_SYMBIAN
argument_list|)
include|#
directive|include
file|"3rdparty/memcheck.h"
endif|#
directive|endif
name|class
name|tst_ExceptionSafety_Objects
operator|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
specifier|public
name|slots
operator|:
name|void
name|initTestCase
argument_list|()
block|;
name|void
name|cleanupTestCase
argument_list|()
block|;
specifier|private
name|slots
operator|:
name|void
name|objects_data
argument_list|()
block|;
name|void
name|objects
argument_list|()
block|;
name|void
name|widgets_data
argument_list|()
block|;
name|void
name|widgets
argument_list|()
block|;
name|void
name|vector_data
argument_list|()
block|;
name|void
name|vector
argument_list|()
block|;
name|void
name|list_data
argument_list|()
block|;
name|void
name|list
argument_list|()
block|;
name|void
name|linkedList_data
argument_list|()
block|;
name|void
name|linkedList
argument_list|()
block|;
specifier|private
operator|:
specifier|static
name|QtMsgHandler
name|testMessageHandler
block|;
specifier|static
name|void
name|safeMessageHandler
argument_list|(
name|QtMsgType
argument_list|,
specifier|const
name|char
operator|*
argument_list|)
block|; }
expr_stmt|;
end_expr_stmt
begin_comment
comment|// helper structs to create an arbitrary widget
end_comment
begin_struct
struct|struct
name|AbstractTester
block|{
specifier|virtual
name|void
name|operator
name|()
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
function_decl|=
literal|0
function_decl|;
block|}
struct|;
end_struct
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|AbstractTester *
argument_list|)
end_macro
begin_typedef
typedef|typedef
name|void
function_decl|(
modifier|*
name|TestFunction
function_decl|)
parameter_list|(
name|QObject
modifier|*
parameter_list|)
function_decl|;
end_typedef
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|TestFunction
argument_list|)
end_macro
begin_struct
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
struct|struct
name|ObjectCreator
super|:
specifier|public
name|AbstractTester
block|{
name|void
name|operator
name|()
parameter_list|(
name|QObject
modifier|*
parameter_list|)
block|{
name|QScopedPointer
argument_list|<
name|T
argument_list|>
name|ptr
argument_list|(
operator|new
name|T
argument_list|)
decl_stmt|;
block|}
block|}
struct|;
end_struct
begin_struct
struct|struct
name|BitArrayCreator
super|:
specifier|public
name|AbstractTester
block|{
name|void
name|operator
name|()
parameter_list|(
name|QObject
modifier|*
parameter_list|)
block|{
name|QScopedPointer
argument_list|<
name|QBitArray
argument_list|>
name|bitArray
argument_list|(
operator|new
name|QBitArray
argument_list|(
literal|100
argument_list|,
literal|true
argument_list|)
argument_list|)
decl_stmt|;
block|}
block|}
struct|;
end_struct
begin_struct
struct|struct
name|ByteArrayMatcherCreator
super|:
specifier|public
name|AbstractTester
block|{
name|void
name|operator
name|()
parameter_list|(
name|QObject
modifier|*
parameter_list|)
block|{
name|QScopedPointer
argument_list|<
name|QByteArrayMatcher
argument_list|>
name|ptr
argument_list|(
operator|new
name|QByteArrayMatcher
argument_list|(
literal|"ralf test"
argument_list|,
literal|8
argument_list|)
argument_list|)
decl_stmt|;
block|}
block|}
struct|;
end_struct
begin_struct
struct|struct
name|CryptographicHashCreator
super|:
specifier|public
name|AbstractTester
block|{
name|void
name|operator
name|()
parameter_list|(
name|QObject
modifier|*
parameter_list|)
block|{
name|QScopedPointer
argument_list|<
name|QCryptographicHash
argument_list|>
name|ptr
argument_list|(
operator|new
name|QCryptographicHash
argument_list|(
name|QCryptographicHash
operator|::
name|Sha1
argument_list|)
argument_list|)
decl_stmt|;
name|ptr
operator|->
name|addData
argument_list|(
literal|"ralf test"
argument_list|,
literal|8
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
end_struct
begin_struct
struct|struct
name|DataStreamCreator
super|:
specifier|public
name|AbstractTester
block|{
name|void
name|operator
name|()
parameter_list|(
name|QObject
modifier|*
parameter_list|)
block|{
name|QScopedPointer
argument_list|<
name|QByteArray
argument_list|>
name|arr
argument_list|(
operator|new
name|QByteArray
argument_list|(
literal|"hallo, test"
argument_list|)
argument_list|)
decl_stmt|;
name|QScopedPointer
argument_list|<
name|QDataStream
argument_list|>
name|ptr
argument_list|(
operator|new
name|QDataStream
argument_list|(
name|arr
operator|.
name|data
argument_list|()
argument_list|,
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
argument_list|)
decl_stmt|;
name|ptr
operator|->
name|writeBytes
argument_list|(
literal|"ralf test"
argument_list|,
literal|8
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
end_struct
begin_struct
struct|struct
name|DirCreator
super|:
specifier|public
name|AbstractTester
block|{
name|void
name|operator
name|()
parameter_list|(
name|QObject
modifier|*
parameter_list|)
block|{
name|QDir
operator|::
name|cleanPath
argument_list|(
literal|"../////././"
argument_list|)
expr_stmt|;
name|QScopedPointer
argument_list|<
name|QDir
argument_list|>
name|ptr
argument_list|(
operator|new
name|QDir
argument_list|(
literal|"."
argument_list|)
argument_list|)
decl_stmt|;
while|while
condition|(
name|ptr
operator|->
name|cdUp
argument_list|()
condition|)
empty_stmt|;
comment|// just going up
name|ptr
operator|->
name|count
argument_list|()
expr_stmt|;
name|ptr
operator|->
name|exists
argument_list|(
name|ptr
operator|->
name|path
argument_list|()
argument_list|)
expr_stmt|;
name|QStringList
name|filters
decl_stmt|;
name|filters
operator|<<
literal|"*.cpp"
operator|<<
literal|"*.cxx"
operator|<<
literal|"*.cc"
expr_stmt|;
name|ptr
operator|->
name|setNameFilters
argument_list|(
name|filters
argument_list|)
expr_stmt|;
block|}
block|}
struct|;
end_struct
begin_function
name|void
name|tst_ExceptionSafety_Objects
operator|::
name|objects_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|AbstractTester
operator|*
argument_list|>
argument_list|(
literal|"objectCreator"
argument_list|)
expr_stmt|;
define|#
directive|define
name|NEWROW
parameter_list|(
name|T
parameter_list|)
value|QTest::newRow(#T)<< static_cast<AbstractTester *>(new ObjectCreator<T>)
name|NEWROW
argument_list|(
name|QObject
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QBuffer
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QFile
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QFSFileEngine
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QProcess
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QSettings
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QThread
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QThreadPool
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QTranslator
argument_list|)
expr_stmt|;
define|#
directive|define
name|NEWROW2
parameter_list|(
name|T
parameter_list|,
name|CREATOR
parameter_list|)
value|QTest::newRow(#T)<< static_cast<AbstractTester *>(new CREATOR)
name|NEWROW2
argument_list|(
name|QBitArray
argument_list|,
name|BitArrayCreator
argument_list|)
expr_stmt|;
name|NEWROW2
argument_list|(
name|QByteArrayMatcher
argument_list|,
name|ByteArrayMatcherCreator
argument_list|)
expr_stmt|;
name|NEWROW2
argument_list|(
name|QCryptographicHash
argument_list|,
name|CryptographicHashCreator
argument_list|)
expr_stmt|;
name|NEWROW2
argument_list|(
name|QDataStream
argument_list|,
name|DataStreamCreator
argument_list|)
expr_stmt|;
name|NEWROW2
argument_list|(
name|QDir
argument_list|,
name|DirCreator
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// create and destructs an object, and lets each and every allocation
end_comment
begin_comment
comment|// during construction and destruction fail.
end_comment
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
specifier|static
name|void
name|doOOMTest
parameter_list|(
name|T
modifier|&
name|testFunc
parameter_list|,
name|QObject
modifier|*
name|parent
parameter_list|,
name|int
name|start
init|=
literal|0
parameter_list|)
block|{
name|int
name|currentOOMIndex
init|=
name|start
decl_stmt|;
name|bool
name|caught
init|=
literal|false
decl_stmt|;
name|bool
name|done
init|=
literal|false
decl_stmt|;
name|AllocFailer
name|allocFailer
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|int
name|allocCountBefore
init|=
name|allocFailer
operator|.
name|currentAllocIndex
argument_list|()
decl_stmt|;
do|do
block|{
name|allocFailer
operator|.
name|reactivateAt
argument_list|(
operator|++
name|currentOOMIndex
argument_list|)
expr_stmt|;
name|caught
operator|=
literal|false
expr_stmt|;
try|try
block|{
name|testFunc
argument_list|(
name|parent
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|const
name|std
operator|::
name|bad_alloc
modifier|&
parameter_list|)
block|{
name|caught
operator|=
literal|true
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|const
name|std
operator|::
name|exception
modifier|&
name|ex
parameter_list|)
block|{
if|if
condition|(
name|strcmp
argument_list|(
name|ex
operator|.
name|what
argument_list|()
argument_list|,
literal|"autotest swallow"
argument_list|)
operator|!=
literal|0
condition|)
throw|throw;
name|caught
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|caught
condition|)
block|{
name|void
modifier|*
name|buf
init|=
name|malloc
argument_list|(
literal|42
argument_list|)
decl_stmt|;
if|if
condition|(
name|buf
condition|)
block|{
comment|// we got memory here - oom test is over.
name|free
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|done
operator|=
literal|true
expr_stmt|;
block|}
block|}
comment|// if we get a FAIL, stop executing now
if|if
condition|(
name|QTest
operator|::
name|currentTestFailed
argument_list|()
condition|)
name|done
operator|=
literal|true
expr_stmt|;
comment|//#define REALLY_VERBOSE
ifdef|#
directive|ifdef
name|REALLY_VERBOSE
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|" OOM Index: %d\n"
argument_list|,
name|currentOOMIndex
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
do|while
condition|(
name|caught
operator|||
operator|!
name|done
condition|)
do|;
name|allocFailer
operator|.
name|deactivate
argument_list|()
expr_stmt|;
comment|//#define VERBOSE
ifdef|#
directive|ifdef
name|VERBOSE
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"OOM Test done, checked allocs: %d (range %d - %d)\n"
argument_list|,
name|currentOOMIndex
argument_list|,
name|allocCountBefore
argument_list|,
name|allocFailer
operator|.
name|currentAllocIndex
argument_list|()
argument_list|)
expr_stmt|;
else|#
directive|else
name|Q_UNUSED
argument_list|(
name|allocCountBefore
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_decl_stmt
specifier|static
name|int
name|alloc1Failed
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|int
name|alloc2Failed
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|int
name|alloc3Failed
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|int
name|alloc4Failed
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|int
name|malloc1Failed
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
specifier|static
name|int
name|malloc2Failed
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_comment
comment|// Tests that new, new[] and malloc() fail at least once during OOM testing.
end_comment
begin_class
class|class
name|SelfTestObject
super|:
specifier|public
name|QObject
block|{
public|public:
name|SelfTestObject
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
block|{
try|try
block|{
operator|delete
operator|new
name|int
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|const
name|std
operator|::
name|bad_alloc
modifier|&
parameter_list|)
block|{
operator|++
name|alloc1Failed
expr_stmt|;
throw|throw;
block|}
try|try
block|{
operator|delete
index|[]
operator|new
name|double
index|[
literal|5
index|]
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|const
name|std
operator|::
name|bad_alloc
modifier|&
parameter_list|)
block|{
operator|++
name|alloc2Failed
expr_stmt|;
throw|throw ;
block|}
name|void
modifier|*
name|buf
init|=
name|malloc
argument_list|(
literal|42
argument_list|)
decl_stmt|;
if|if
condition|(
name|buf
condition|)
name|free
argument_list|(
name|buf
argument_list|)
expr_stmt|;
else|else
operator|++
name|malloc1Failed
expr_stmt|;
block|}
name|~
name|SelfTestObject
parameter_list|()
block|{
try|try
block|{
operator|delete
operator|new
name|int
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|const
name|std
operator|::
name|bad_alloc
modifier|&
parameter_list|)
block|{
operator|++
name|alloc3Failed
expr_stmt|;
block|}
try|try
block|{
operator|delete
index|[]
operator|new
name|double
index|[
literal|5
index|]
expr_stmt|;
block|}
catch|catch
parameter_list|(
specifier|const
name|std
operator|::
name|bad_alloc
modifier|&
parameter_list|)
block|{
operator|++
name|alloc4Failed
expr_stmt|;
block|}
name|void
modifier|*
name|buf
init|=
name|malloc
argument_list|(
literal|42
argument_list|)
decl_stmt|;
if|if
condition|(
name|buf
condition|)
name|free
argument_list|(
name|buf
argument_list|)
expr_stmt|;
else|else
operator|++
name|malloc2Failed
operator|=
literal|true
expr_stmt|;
block|}
block|}
class|;
end_class
begin_decl_stmt
name|QtMsgHandler
name|tst_ExceptionSafety_Objects
operator|::
name|testMessageHandler
decl_stmt|;
end_decl_stmt
begin_function
name|void
name|tst_ExceptionSafety_Objects
operator|::
name|safeMessageHandler
parameter_list|(
name|QtMsgType
name|type
parameter_list|,
specifier|const
name|char
modifier|*
name|msg
parameter_list|)
block|{
comment|// this temporarily suspends OOM testing while handling a message
name|int
name|currentIndex
init|=
name|mallocFailIndex
decl_stmt|;
name|AllocFailer
name|allocFailer
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|allocFailer
operator|.
name|deactivate
argument_list|()
expr_stmt|;
call|(
modifier|*
name|testMessageHandler
call|)
argument_list|(
name|type
argument_list|,
name|msg
argument_list|)
expr_stmt|;
name|allocFailer
operator|.
name|reactivateAt
argument_list|(
name|currentIndex
argument_list|)
expr_stmt|;
block|}
end_function
begin_typedef
typedef|typedef
name|void
function_decl|(
modifier|*
name|PVF
function_decl|)
parameter_list|()
function_decl|;
end_typedef
begin_decl_stmt
name|PVF
name|defaultTerminate
decl_stmt|;
end_decl_stmt
begin_function
name|void
name|debugTerminate
parameter_list|()
block|{
comment|// you can detect uncaught exceptions with a breakpoint in here
call|(
modifier|*
name|defaultTerminate
call|)
argument_list|()
expr_stmt|;
block|}
end_function
begin_decl_stmt
name|PVF
name|defaultUnexpected
decl_stmt|;
end_decl_stmt
begin_function
name|void
name|debugUnexpected
parameter_list|()
block|{
comment|// you can detect unexpected exceptions with a breakpoint in here
call|(
modifier|*
name|defaultUnexpected
call|)
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
name|void
name|tst_ExceptionSafety_Objects
operator|::
name|initTestCase
parameter_list|()
block|{
comment|// set handlers for bad exception cases, you might want to step in and breakpoint the default handlers too
name|defaultTerminate
operator|=
name|std
operator|::
name|set_terminate
argument_list|(
operator|&
name|debugTerminate
argument_list|)
expr_stmt|;
name|defaultUnexpected
operator|=
name|std
operator|::
name|set_unexpected
argument_list|(
operator|&
name|debugUnexpected
argument_list|)
expr_stmt|;
name|testMessageHandler
operator|=
name|qInstallMsgHandler
argument_list|(
name|safeMessageHandler
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|AllocFailer
operator|::
name|initialize
argument_list|()
argument_list|)
expr_stmt|;
comment|// sanity check whether OOM simulation works
name|AllocFailer
name|allocFailer
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// malloc fail index is 0 -> this malloc should fail.
name|void
modifier|*
name|buf
init|=
name|malloc
argument_list|(
literal|42
argument_list|)
decl_stmt|;
name|allocFailer
operator|.
name|deactivate
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|buf
argument_list|)
expr_stmt|;
comment|// malloc fail index is 1 - second malloc should fail.
name|allocFailer
operator|.
name|reactivateAt
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|buf
operator|=
name|malloc
argument_list|(
literal|42
argument_list|)
expr_stmt|;
name|void
modifier|*
name|buf2
init|=
name|malloc
argument_list|(
literal|42
argument_list|)
decl_stmt|;
name|allocFailer
operator|.
name|deactivate
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|free
argument_list|(
name|buf
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|buf2
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
comment|// temporary workaround for INC138398
name|std
operator|::
name|new_handler
name|nh_func
init|=
name|std
operator|::
name|set_new_handler
argument_list|(
literal|0
argument_list|)
decl_stmt|;
operator|(
name|void
operator|)
name|std
operator|::
name|set_new_handler
argument_list|(
name|nh_func
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|ObjectCreator
argument_list|<
name|SelfTestObject
argument_list|>
modifier|*
name|selfTest
init|=
operator|new
name|ObjectCreator
argument_list|<
name|SelfTestObject
argument_list|>
decl_stmt|;
name|doOOMTest
argument_list|(
operator|*
name|selfTest
argument_list|,
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|selfTest
expr_stmt|;
name|QCOMPARE
argument_list|(
name|alloc1Failed
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|alloc2Failed
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|alloc3Failed
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|alloc4Failed
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|malloc1Failed
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|malloc2Failed
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
name|tst_ExceptionSafety_Objects
operator|::
name|cleanupTestCase
parameter_list|()
block|{
name|qInstallMsgHandler
argument_list|(
name|testMessageHandler
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
name|tst_ExceptionSafety_Objects
operator|::
name|objects
parameter_list|()
block|{
name|QLatin1String
name|tag
init|=
name|QLatin1String
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"QFile"
argument_list|)
operator|||
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"QProcess"
argument_list|)
operator|||
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"QSettings"
argument_list|)
operator|||
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"QThread"
argument_list|)
operator|||
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"QThreadPool"
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"This type of object is not currently strongly exception safe"
argument_list|,
name|SkipSingle
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|AbstractTester
operator|*
argument_list|,
name|objectCreator
argument_list|)
expr_stmt|;
name|doOOMTest
argument_list|(
operator|*
name|objectCreator
argument_list|,
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|objectCreator
expr_stmt|;
block|}
end_function
begin_struct
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
struct|struct
name|WidgetCreator
super|:
specifier|public
name|AbstractTester
block|{
name|void
name|operator
name|()
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|parent
operator|||
name|parent
operator|->
name|isWidgetType
argument_list|()
argument_list|)
expr_stmt|;
name|QScopedPointer
argument_list|<
name|T
argument_list|>
name|ptr
argument_list|(
name|parent
condition|?
operator|new
name|T
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|parent
argument_list|)
argument_list|)
else|:
operator|new
name|T
argument_list|)
decl_stmt|;
block|}
block|}
struct|;
end_struct
begin_comment
comment|// QSizeGrip doesn't have a default constructor - always pass parent (even though it might be 0)
end_comment
begin_struct
template|template
parameter_list|<>
struct|struct
name|WidgetCreator
argument_list|<
name|QSizeGrip
argument_list|>
super|:
specifier|public
name|AbstractTester
block|{
name|void
name|operator
name|()
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|parent
operator|||
name|parent
operator|->
name|isWidgetType
argument_list|()
argument_list|)
expr_stmt|;
name|QScopedPointer
argument_list|<
name|QSizeGrip
argument_list|>
name|ptr
argument_list|(
operator|new
name|QSizeGrip
argument_list|(
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
name|parent
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
block|}
block|}
struct|;
end_struct
begin_comment
comment|// QDesktopWidget doesn't need a parent.
end_comment
begin_struct
template|template
parameter_list|<>
struct|struct
name|WidgetCreator
argument_list|<
name|QDesktopWidget
argument_list|>
super|:
specifier|public
name|AbstractTester
block|{
name|void
name|operator
name|()
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
block|{
name|Q_ASSERT
argument_list|(
operator|!
name|parent
operator|||
name|parent
operator|->
name|isWidgetType
argument_list|()
argument_list|)
expr_stmt|;
name|QScopedPointer
argument_list|<
name|QDesktopWidget
argument_list|>
name|ptr
argument_list|(
operator|new
name|QDesktopWidget
argument_list|()
argument_list|)
decl_stmt|;
block|}
block|}
struct|;
end_struct
begin_function
name|void
name|tst_ExceptionSafety_Objects
operator|::
name|widgets_data
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
comment|// Initialise the S60 rasteriser, which crashes if started while out of memory
name|QImage
name|image
argument_list|(
literal|20
argument_list|,
literal|20
argument_list|,
name|QImage
operator|::
name|Format_RGB32
argument_list|)
decl_stmt|;
name|QPainter
name|p
argument_list|(
operator|&
name|image
argument_list|)
decl_stmt|;
name|p
operator|.
name|drawText
argument_list|(
literal|0
argument_list|,
literal|15
argument_list|,
literal|"foo"
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|addColumn
argument_list|<
name|AbstractTester
operator|*
argument_list|>
argument_list|(
literal|"widgetCreator"
argument_list|)
expr_stmt|;
undef|#
directive|undef
name|NEWROW
define|#
directive|define
name|NEWROW
parameter_list|(
name|T
parameter_list|)
value|QTest::newRow(#T)<< static_cast<AbstractTester *>(new WidgetCreator<T>)
name|NEWROW
argument_list|(
name|QWidget
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QButtonGroup
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QCheckBox
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QColumnView
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QComboBox
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QCommandLinkButton
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QDateEdit
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QDateTimeEdit
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QDesktopWidget
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QDial
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QDoubleSpinBox
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QFocusFrame
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QFontComboBox
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QFrame
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QGroupBox
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QLabel
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QLCDNumber
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QLineEdit
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QListView
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QListWidget
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QMainWindow
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QMenu
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QMenuBar
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QPlainTextEdit
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QProgressBar
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QPushButton
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QRadioButton
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QScrollArea
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QScrollBar
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QSizeGrip
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QSlider
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QSpinBox
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QSplitter
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QStackedWidget
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QStatusBar
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QTabBar
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QTableView
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QTableWidget
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QTabWidget
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QTextBrowser
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QTextEdit
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QTimeEdit
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QToolBar
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QToolBox
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QToolButton
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QTreeView
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QTreeWidget
argument_list|)
expr_stmt|;
name|NEWROW
argument_list|(
name|QWorkspace
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
name|tst_ExceptionSafety_Objects
operator|::
name|widgets
parameter_list|()
block|{
name|QLatin1String
name|tag
init|=
name|QLatin1String
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"QColumnView"
argument_list|)
operator|||
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"QComboBox"
argument_list|)
operator|||
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"QCommandLinkButton"
argument_list|)
operator|||
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"QDateEdit"
argument_list|)
operator|||
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"QDateTimeEdit"
argument_list|)
operator|||
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"QDesktopWidget"
argument_list|)
operator|||
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"QDoubleSpinBox"
argument_list|)
operator|||
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"QFontComboBox"
argument_list|)
operator|||
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"QGroupBox"
argument_list|)
operator|||
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"QLineEdit"
argument_list|)
operator|||
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"QListView"
argument_list|)
operator|||
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"QListWidget"
argument_list|)
operator|||
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"QMainWindow"
argument_list|)
operator|||
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"QMenu"
argument_list|)
operator|||
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"QMenuBar"
argument_list|)
operator|||
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"QPlainTextEdit"
argument_list|)
operator|||
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"QProgressBar"
argument_list|)
operator|||
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"QPushButton"
argument_list|)
operator|||
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"QScrollArea"
argument_list|)
operator|||
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"QSpinBox"
argument_list|)
operator|||
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"QStackedWidget"
argument_list|)
operator|||
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"QStatusBar"
argument_list|)
operator|||
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"QTableView"
argument_list|)
operator|||
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"QTableWidget"
argument_list|)
operator|||
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"QTabWidget"
argument_list|)
operator|||
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"QTextBrowser"
argument_list|)
operator|||
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"QTextEdit"
argument_list|)
operator|||
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"QTimeEdit"
argument_list|)
operator|||
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"QToolBar"
argument_list|)
operator|||
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"QToolBox"
argument_list|)
operator|||
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"QTreeView"
argument_list|)
operator|||
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"QTreeWidget"
argument_list|)
operator|||
name|tag
operator|==
name|QLatin1String
argument_list|(
literal|"QWorkspace"
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"This type of widget is not currently strongly exception safe"
argument_list|,
name|SkipSingle
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|AbstractTester
operator|*
argument_list|,
name|widgetCreator
argument_list|)
expr_stmt|;
name|doOOMTest
argument_list|(
operator|*
name|widgetCreator
argument_list|,
literal|0
argument_list|,
literal|00000
argument_list|)
expr_stmt|;
name|QWidget
name|parent
decl_stmt|;
name|doOOMTest
argument_list|(
operator|*
name|widgetCreator
argument_list|,
operator|&
name|parent
argument_list|,
literal|00000
argument_list|)
expr_stmt|;
operator|delete
name|widgetCreator
expr_stmt|;
comment|// if the test reaches here without crashing, we passed :)
name|QVERIFY
argument_list|(
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_struct
struct|struct
name|Integer
block|{
name|Integer
parameter_list|(
name|int
name|value
init|=
literal|42
parameter_list|)
member_init_list|:
name|ptr
argument_list|(
operator|new
name|int
argument_list|(
name|value
argument_list|)
argument_list|)
block|{
operator|++
name|instanceCount
expr_stmt|;
block|}
name|Integer
parameter_list|(
specifier|const
name|Integer
modifier|&
name|other
parameter_list|)
member_init_list|:
name|ptr
argument_list|(
operator|new
name|int
argument_list|(
operator|*
name|other
operator|.
name|ptr
argument_list|)
argument_list|)
block|{
operator|++
name|instanceCount
expr_stmt|;
block|}
name|Integer
modifier|&
name|operator
name|=
parameter_list|(
specifier|const
name|Integer
modifier|&
name|other
parameter_list|)
block|{
name|int
modifier|*
name|newPtr
init|=
operator|new
name|int
argument_list|(
operator|*
name|other
operator|.
name|ptr
argument_list|)
decl_stmt|;
operator|delete
name|ptr
expr_stmt|;
name|ptr
operator|=
name|newPtr
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|~
name|Integer
parameter_list|()
block|{
operator|--
name|instanceCount
expr_stmt|;
operator|delete
name|ptr
expr_stmt|;
block|}
name|int
name|value
parameter_list|()
specifier|const
block|{
return|return
operator|*
name|ptr
return|;
block|}
name|int
modifier|*
name|ptr
decl_stmt|;
specifier|static
name|int
name|instanceCount
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
name|int
name|Integer
operator|::
name|instanceCount
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_struct
struct|struct
name|IntegerMoveable
block|{
name|IntegerMoveable
parameter_list|(
name|int
name|value
init|=
literal|42
parameter_list|)
member_init_list|:
name|val
argument_list|(
name|value
argument_list|)
block|{
operator|delete
operator|new
name|int
expr_stmt|;
operator|++
name|instanceCount
expr_stmt|;
block|}
name|IntegerMoveable
parameter_list|(
specifier|const
name|IntegerMoveable
modifier|&
name|other
parameter_list|)
member_init_list|:
name|val
argument_list|(
name|other
operator|.
name|val
argument_list|)
block|{
operator|delete
operator|new
name|int
expr_stmt|;
operator|++
name|instanceCount
expr_stmt|;
block|}
name|IntegerMoveable
modifier|&
name|operator
name|=
parameter_list|(
specifier|const
name|IntegerMoveable
modifier|&
name|other
parameter_list|)
block|{
operator|delete
operator|new
name|int
expr_stmt|;
name|val
operator|=
name|other
operator|.
name|val
expr_stmt|;
return|return
operator|*
name|this
return|;
block|}
name|~
name|IntegerMoveable
parameter_list|()
block|{
operator|--
name|instanceCount
expr_stmt|;
block|}
name|int
name|value
parameter_list|()
specifier|const
block|{
return|return
name|val
return|;
block|}
name|int
name|val
decl_stmt|;
specifier|static
name|int
name|instanceCount
decl_stmt|;
block|}
struct|;
end_struct
begin_decl_stmt
name|int
name|IntegerMoveable
operator|::
name|instanceCount
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function_decl
name|QT_BEGIN_NAMESPACE
name|Q_DECLARE_TYPEINFO
parameter_list|(
name|IntegerMoveable
parameter_list|,
name|Q_MOVABLE_TYPE
parameter_list|)
function_decl|;
end_function_decl
begin_function
name|QT_END_NAMESPACE
specifier|template
type|<
typename|typename
name|T
operator|,
template|template
parameter_list|<
name|typename
parameter_list|>
name|class
name|Container
function|>
name|void
name|containerInsertTest
parameter_list|(
name|QObject
modifier|*
parameter_list|)
block|{
name|Container
argument_list|<
name|T
argument_list|>
name|container
decl_stmt|;
comment|// insert an item in an empty container
try|try
block|{
name|container
operator|.
name|insert
argument_list|(
name|container
operator|.
name|begin
argument_list|()
argument_list|,
literal|41
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
modifier|...
parameter_list|)
block|{
name|QVERIFY
argument_list|(
name|container
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|T
operator|::
name|instanceCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return;
block|}
name|QCOMPARE
argument_list|(
name|container
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|T
operator|::
name|instanceCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// insert an item before another item
try|try
block|{
name|container
operator|.
name|insert
argument_list|(
name|container
operator|.
name|begin
argument_list|()
argument_list|,
literal|42
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
modifier|...
parameter_list|)
block|{
name|QCOMPARE
argument_list|(
name|container
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|container
operator|.
name|first
argument_list|()
operator|.
name|value
argument_list|()
argument_list|,
literal|41
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|T
operator|::
name|instanceCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return;
block|}
name|QCOMPARE
argument_list|(
name|T
operator|::
name|instanceCount
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// insert an item in between
try|try
block|{
name|container
operator|.
name|insert
argument_list|(
name|container
operator|.
name|begin
argument_list|()
operator|+
literal|1
argument_list|,
literal|43
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
modifier|...
parameter_list|)
block|{
name|QCOMPARE
argument_list|(
name|container
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|container
operator|.
name|first
argument_list|()
operator|.
name|value
argument_list|()
argument_list|,
literal|41
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|container
operator|.
name|begin
argument_list|()
operator|+
literal|1
operator|)
operator|->
name|value
argument_list|()
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|T
operator|::
name|instanceCount
argument_list|,
literal|2
argument_list|)
expr_stmt|;
return|return;
block|}
name|QCOMPARE
argument_list|(
name|T
operator|::
name|instanceCount
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|,
template|template
parameter_list|<
name|typename
parameter_list|>
name|class
name|Container
parameter_list|>
name|void
name|containerAppendTest
parameter_list|(
name|QObject
modifier|*
parameter_list|)
block|{
name|Container
argument_list|<
name|T
argument_list|>
name|container
decl_stmt|;
comment|// append to an empty container
try|try
block|{
name|container
operator|.
name|append
argument_list|(
literal|42
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
modifier|...
parameter_list|)
block|{
name|QCOMPARE
argument_list|(
name|container
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|T
operator|::
name|instanceCount
argument_list|,
literal|0
argument_list|)
expr_stmt|;
return|return;
block|}
comment|// append to a container with one item
try|try
block|{
name|container
operator|.
name|append
argument_list|(
literal|43
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
modifier|...
parameter_list|)
block|{
name|QCOMPARE
argument_list|(
name|container
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|container
operator|.
name|first
argument_list|()
operator|.
name|value
argument_list|()
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|T
operator|::
name|instanceCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
return|return;
block|}
name|Container
argument_list|<
name|T
argument_list|>
name|container2
decl_stmt|;
try|try
block|{
name|container2
operator|.
name|append
argument_list|(
literal|44
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
modifier|...
parameter_list|)
block|{
comment|// don't care
return|return;
block|}
name|QCOMPARE
argument_list|(
name|T
operator|::
name|instanceCount
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// append another container with one item
try|try
block|{
name|container
operator|+=
name|container2
expr_stmt|;
block|}
catch|catch
parameter_list|(
modifier|...
parameter_list|)
block|{
name|QCOMPARE
argument_list|(
name|container
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|container
operator|.
name|first
argument_list|()
operator|.
name|value
argument_list|()
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|container
operator|.
name|begin
argument_list|()
operator|+
literal|1
operator|)
operator|->
name|value
argument_list|()
argument_list|,
literal|43
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|T
operator|::
name|instanceCount
argument_list|,
literal|3
argument_list|)
expr_stmt|;
return|return;
block|}
name|QCOMPARE
argument_list|(
name|T
operator|::
name|instanceCount
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|,
template|template
parameter_list|<
name|typename
parameter_list|>
name|class
name|Container
parameter_list|>
name|void
name|containerEraseTest
parameter_list|(
name|QObject
modifier|*
parameter_list|)
block|{
name|Container
argument_list|<
name|T
argument_list|>
name|container
decl_stmt|;
try|try
block|{
name|container
operator|.
name|append
argument_list|(
literal|42
argument_list|)
expr_stmt|;
name|container
operator|.
name|append
argument_list|(
literal|43
argument_list|)
expr_stmt|;
name|container
operator|.
name|append
argument_list|(
literal|44
argument_list|)
expr_stmt|;
name|container
operator|.
name|append
argument_list|(
literal|45
argument_list|)
expr_stmt|;
name|container
operator|.
name|append
argument_list|(
literal|46
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
modifier|...
parameter_list|)
block|{
comment|// don't care
return|return;
block|}
comment|// sanity checks
name|QCOMPARE
argument_list|(
name|container
operator|.
name|size
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|T
operator|::
name|instanceCount
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// delete the first one
try|try
block|{
name|container
operator|.
name|erase
argument_list|(
name|container
operator|.
name|begin
argument_list|()
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
modifier|...
parameter_list|)
block|{
name|QCOMPARE
argument_list|(
name|container
operator|.
name|size
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|container
operator|.
name|first
argument_list|()
operator|.
name|value
argument_list|()
argument_list|,
literal|42
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|T
operator|::
name|instanceCount
argument_list|,
literal|5
argument_list|)
expr_stmt|;
return|return;
block|}
name|QCOMPARE
argument_list|(
name|container
operator|.
name|size
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|container
operator|.
name|first
argument_list|()
operator|.
name|value
argument_list|()
argument_list|,
literal|43
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|T
operator|::
name|instanceCount
argument_list|,
literal|4
argument_list|)
expr_stmt|;
comment|// delete the last one
try|try
block|{
name|container
operator|.
name|erase
argument_list|(
name|container
operator|.
name|end
argument_list|()
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
modifier|...
parameter_list|)
block|{
name|QCOMPARE
argument_list|(
name|container
operator|.
name|size
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|T
operator|::
name|instanceCount
argument_list|,
literal|4
argument_list|)
expr_stmt|;
return|return;
block|}
name|QCOMPARE
argument_list|(
name|container
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|container
operator|.
name|first
argument_list|()
operator|.
name|value
argument_list|()
argument_list|,
literal|43
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|container
operator|.
name|begin
argument_list|()
operator|+
literal|1
operator|)
operator|->
name|value
argument_list|()
argument_list|,
literal|44
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|container
operator|.
name|begin
argument_list|()
operator|+
literal|2
operator|)
operator|->
name|value
argument_list|()
argument_list|,
literal|45
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|T
operator|::
name|instanceCount
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// delete the middle one
try|try
block|{
name|container
operator|.
name|erase
argument_list|(
name|container
operator|.
name|begin
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
block|}
catch|catch
parameter_list|(
modifier|...
parameter_list|)
block|{
name|QCOMPARE
argument_list|(
name|container
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|container
operator|.
name|first
argument_list|()
operator|.
name|value
argument_list|()
argument_list|,
literal|43
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|container
operator|.
name|begin
argument_list|()
operator|+
literal|1
operator|)
operator|->
name|value
argument_list|()
argument_list|,
literal|44
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|container
operator|.
name|begin
argument_list|()
operator|+
literal|2
operator|)
operator|->
name|value
argument_list|()
argument_list|,
literal|45
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|T
operator|::
name|instanceCount
argument_list|,
literal|3
argument_list|)
expr_stmt|;
return|return;
block|}
name|QCOMPARE
argument_list|(
name|container
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|container
operator|.
name|first
argument_list|()
operator|.
name|value
argument_list|()
argument_list|,
literal|43
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|container
operator|.
name|begin
argument_list|()
operator|+
literal|1
operator|)
operator|->
name|value
argument_list|()
argument_list|,
literal|45
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|T
operator|::
name|instanceCount
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
name|class
name|Container
parameter_list|>
specifier|static
name|void
name|containerData
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|TestFunction
argument_list|>
argument_list|(
literal|"testFunction"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert static"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|TestFunction
argument_list|>
argument_list|(
name|containerInsertTest
argument_list|<
name|Integer
argument_list|,
name|Container
argument_list|>
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append static"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|TestFunction
argument_list|>
argument_list|(
name|containerAppendTest
argument_list|<
name|Integer
argument_list|,
name|Container
argument_list|>
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"erase static"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|TestFunction
argument_list|>
argument_list|(
name|containerEraseTest
argument_list|<
name|Integer
argument_list|,
name|Container
argument_list|>
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"insert moveable"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|TestFunction
argument_list|>
argument_list|(
name|containerInsertTest
argument_list|<
name|IntegerMoveable
argument_list|,
name|Container
argument_list|>
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append moveable"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|TestFunction
argument_list|>
argument_list|(
name|containerAppendTest
argument_list|<
name|IntegerMoveable
argument_list|,
name|Container
argument_list|>
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"erase moveable"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|TestFunction
argument_list|>
argument_list|(
name|containerEraseTest
argument_list|<
name|IntegerMoveable
argument_list|,
name|Container
argument_list|>
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
name|tst_ExceptionSafety_Objects
operator|::
name|vector_data
parameter_list|()
block|{
name|containerData
argument_list|<
name|QVector
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
name|void
name|tst_ExceptionSafety_Objects
operator|::
name|vector
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|TestFunction
argument_list|,
name|testFunction
argument_list|)
expr_stmt|;
if|if
condition|(
name|QLatin1String
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
operator|==
name|QLatin1String
argument_list|(
literal|"insert static"
argument_list|)
operator|||
name|QLatin1String
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|)
operator|==
name|QLatin1String
argument_list|(
literal|"insert moveable"
argument_list|)
condition|)
name|QSKIP
argument_list|(
literal|"QVector::insert is currently not strongly exception safe"
argument_list|,
name|SkipSingle
argument_list|)
expr_stmt|;
name|doOOMTest
argument_list|(
name|testFunction
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
name|tst_ExceptionSafety_Objects
operator|::
name|list_data
parameter_list|()
block|{
name|containerData
argument_list|<
name|QList
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
name|void
name|tst_ExceptionSafety_Objects
operator|::
name|list
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|TestFunction
argument_list|,
name|testFunction
argument_list|)
expr_stmt|;
name|doOOMTest
argument_list|(
name|testFunction
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
name|void
name|tst_ExceptionSafety_Objects
operator|::
name|linkedList_data
parameter_list|()
block|{
name|containerData
argument_list|<
name|QLinkedList
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
name|void
name|tst_ExceptionSafety_Objects
operator|::
name|linkedList
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|TestFunction
argument_list|,
name|testFunction
argument_list|)
expr_stmt|;
name|doOOMTest
argument_list|(
name|testFunction
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_ExceptionSafety_Objects
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_exceptionsafety_objects.moc"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_EXCEPTIONS
end_comment
end_unit
