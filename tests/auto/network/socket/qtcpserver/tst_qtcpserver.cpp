begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qglobal.h>
end_include
begin_comment
comment|// To prevent windows system header files from re-defining min/max
end_comment
begin_define
DECL|macro|NOMINMAX
define|#
directive|define
name|NOMINMAX
value|1
end_define
begin_if
if|#
directive|if
name|defined
argument_list|(
name|_WIN32
argument_list|)
end_if
begin_include
include|#
directive|include
file|<winsock2.h>
end_include
begin_else
else|#
directive|else
end_else
begin_include
include|#
directive|include
file|<sys/types.h>
end_include
begin_include
include|#
directive|include
file|<sys/socket.h>
end_include
begin_define
DECL|macro|SOCKET
define|#
directive|define
name|SOCKET
value|int
end_define
begin_define
DECL|macro|INVALID_SOCKET
define|#
directive|define
name|INVALID_SOCKET
value|-1
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WIN
end_ifndef
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_include
include|#
directive|include
file|<sys/ioctl.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<qtcpsocket.h>
end_include
begin_include
include|#
directive|include
file|<qtcpserver.h>
end_include
begin_include
include|#
directive|include
file|<qhostaddress.h>
end_include
begin_include
include|#
directive|include
file|<qprocess.h>
end_include
begin_include
include|#
directive|include
file|<qstringlist.h>
end_include
begin_include
include|#
directive|include
file|<qplatformdefs.h>
end_include
begin_include
include|#
directive|include
file|<qhostinfo.h>
end_include
begin_include
include|#
directive|include
file|<QNetworkProxy>
end_include
begin_include
include|#
directive|include
file|<QNetworkSession>
end_include
begin_include
include|#
directive|include
file|<QNetworkConfiguration>
end_include
begin_include
include|#
directive|include
file|<QNetworkConfigurationManager>
end_include
begin_include
include|#
directive|include
file|"../../../network-settings.h"
end_include
begin_class
DECL|class|tst_QTcpServer
class|class
name|tst_QTcpServer
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QTcpServer
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_QTcpServer
parameter_list|()
destructor_decl|;
public|public
name|slots
public|:
name|void
name|initTestCase_data
parameter_list|()
function_decl|;
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|getSetCheck
parameter_list|()
function_decl|;
name|void
name|constructing
parameter_list|()
function_decl|;
name|void
name|clientServerLoop
parameter_list|()
function_decl|;
name|void
name|ipv6Server
parameter_list|()
function_decl|;
name|void
name|dualStack_data
parameter_list|()
function_decl|;
name|void
name|dualStack
parameter_list|()
function_decl|;
name|void
name|ipv6ServerMapped
parameter_list|()
function_decl|;
name|void
name|crashTests
parameter_list|()
function_decl|;
name|void
name|maxPendingConnections
parameter_list|()
function_decl|;
name|void
name|listenError
parameter_list|()
function_decl|;
name|void
name|waitForConnectionTest
parameter_list|()
function_decl|;
name|void
name|setSocketDescriptor
parameter_list|()
function_decl|;
name|void
name|listenWhileListening
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_PROCESS
name|void
name|addressReusable
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|setNewSocketDescriptorBlocking
parameter_list|()
function_decl|;
name|void
name|invalidProxy_data
parameter_list|()
function_decl|;
name|void
name|invalidProxy
parameter_list|()
function_decl|;
name|void
name|proxyFactory_data
parameter_list|()
function_decl|;
name|void
name|proxyFactory
parameter_list|()
function_decl|;
name|void
name|qtbug14268_peek
parameter_list|()
function_decl|;
name|void
name|serverAddress_data
parameter_list|()
function_decl|;
name|void
name|serverAddress
parameter_list|()
function_decl|;
DECL|function|qtbug6305_data
name|void
name|qtbug6305_data
parameter_list|()
block|{
name|serverAddress_data
argument_list|()
expr_stmt|;
block|}
name|void
name|qtbug6305
parameter_list|()
function_decl|;
name|void
name|linkLocal
parameter_list|()
function_decl|;
name|void
name|eagainBlockingAccept
parameter_list|()
function_decl|;
private|private:
ifndef|#
directive|ifndef
name|QT_NO_BEARERMANAGEMENT
DECL|member|networkSession
name|QNetworkSession
modifier|*
name|networkSession
decl_stmt|;
endif|#
directive|endif
DECL|member|crashingServerDir
name|QString
name|crashingServerDir
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|// Testing get/set functions
end_comment
begin_function
DECL|function|getSetCheck
name|void
name|tst_QTcpServer
operator|::
name|getSetCheck
parameter_list|()
block|{
name|QTcpServer
name|obj1
decl_stmt|;
comment|// int QTcpServer::maxPendingConnections()
comment|// void QTcpServer::setMaxPendingConnections(int)
name|obj1
operator|.
name|setMaxPendingConnections
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0
argument_list|,
name|obj1
operator|.
name|maxPendingConnections
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setMaxPendingConnections
argument_list|(
name|INT_MIN
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|INT_MIN
argument_list|,
name|obj1
operator|.
name|maxPendingConnections
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setMaxPendingConnections
argument_list|(
name|INT_MAX
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|INT_MAX
argument_list|,
name|obj1
operator|.
name|maxPendingConnections
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|tst_QTcpServer
name|tst_QTcpServer
operator|::
name|tst_QTcpServer
parameter_list|()
block|{ }
end_constructor
begin_destructor
DECL|function|~tst_QTcpServer
name|tst_QTcpServer
operator|::
name|~
name|tst_QTcpServer
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|initTestCase_data
name|void
name|tst_QTcpServer
operator|::
name|initTestCase_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"setProxy"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"proxyType"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"WithoutProxy"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"WithSocks5Proxy"
argument_list|)
operator|<<
literal|true
operator|<<
name|int
argument_list|(
name|QNetworkProxy
operator|::
name|Socks5Proxy
argument_list|)
expr_stmt|;
name|crashingServerDir
operator|=
name|QFINDTESTDATA
argument_list|(
literal|"crashingServer"
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
operator|!
name|crashingServerDir
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Couldn't find crashingServer dir starting from %1."
argument_list|)
operator|.
name|arg
argument_list|(
name|QDir
operator|::
name|currentPath
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initTestCase
name|void
name|tst_QTcpServer
operator|::
name|initTestCase
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QtNetworkSettings
operator|::
name|verifyTestNetworkSettings
argument_list|()
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_BEARERMANAGEMENT
name|QNetworkConfigurationManager
name|man
decl_stmt|;
name|networkSession
operator|=
operator|new
name|QNetworkSession
argument_list|(
name|man
operator|.
name|defaultConfiguration
argument_list|()
argument_list|,
name|this
argument_list|)
expr_stmt|;
name|networkSession
operator|->
name|open
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|networkSession
operator|->
name|waitForOpened
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|init
name|void
name|tst_QTcpServer
operator|::
name|init
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
block|{
name|QFETCH_GLOBAL
argument_list|(
name|int
argument_list|,
name|proxyType
argument_list|)
expr_stmt|;
if|if
condition|(
name|proxyType
operator|==
name|QNetworkProxy
operator|::
name|Socks5Proxy
condition|)
block|{
name|QNetworkProxy
operator|::
name|setApplicationProxy
argument_list|(
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|Socks5Proxy
argument_list|,
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|1080
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QTcpServer
operator|::
name|cleanup
parameter_list|()
block|{
name|QNetworkProxy
operator|::
name|setApplicationProxy
argument_list|(
name|QNetworkProxy
operator|::
name|DefaultProxy
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|constructing
name|void
name|tst_QTcpServer
operator|::
name|constructing
parameter_list|()
block|{
name|QTcpServer
name|socket
decl_stmt|;
comment|// Check the initial state of the QTcpSocket.
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|isListening
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|socket
operator|.
name|serverPort
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|serverAddress
argument_list|()
argument_list|,
name|QHostAddress
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|maxPendingConnections
argument_list|()
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|hasPendingConnections
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|socketDescriptor
argument_list|()
argument_list|,
operator|(
name|qintptr
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|serverError
argument_list|()
argument_list|,
name|QAbstractSocket
operator|::
name|UnknownSocketError
argument_list|)
expr_stmt|;
comment|// Check the state of the socket layer?
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|clientServerLoop
name|void
name|tst_QTcpServer
operator|::
name|clientServerLoop
parameter_list|()
block|{
name|QTcpServer
name|server
decl_stmt|;
name|QSignalSpy
name|spy
argument_list|(
operator|&
name|server
argument_list|,
name|SIGNAL
argument_list|(
name|newConnection
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|server
operator|.
name|isListening
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|server
operator|.
name|hasPendingConnections
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|listen
argument_list|(
name|QHostAddress
operator|::
name|Any
argument_list|,
literal|11423
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|isListening
argument_list|()
argument_list|)
expr_stmt|;
name|QTcpSocket
name|client
decl_stmt|;
name|QHostAddress
name|serverAddress
init|=
name|QHostAddress
operator|::
name|LocalHost
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|server
operator|.
name|serverAddress
argument_list|()
operator|==
name|QHostAddress
operator|::
name|Any
operator|)
operator|&&
operator|!
operator|(
name|server
operator|.
name|serverAddress
argument_list|()
operator|==
name|QHostAddress
operator|::
name|AnyIPv6
operator|)
operator|&&
operator|!
operator|(
name|server
operator|.
name|serverAddress
argument_list|()
operator|==
name|QHostAddress
operator|::
name|AnyIPv4
operator|)
condition|)
name|serverAddress
operator|=
name|server
operator|.
name|serverAddress
argument_list|()
expr_stmt|;
name|client
operator|.
name|connectToHost
argument_list|(
name|serverAddress
argument_list|,
name|server
operator|.
name|serverPort
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|client
operator|.
name|waitForConnected
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|waitForNewConnection
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|hasPendingConnections
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTcpSocket
modifier|*
name|serverSocket
init|=
name|server
operator|.
name|nextPendingConnection
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|serverSocket
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|serverSocket
operator|->
name|write
argument_list|(
literal|"Greetings, client!\n"
argument_list|,
literal|19
argument_list|)
operator|==
literal|19
argument_list|)
expr_stmt|;
name|serverSocket
operator|->
name|flush
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|client
operator|.
name|waitForReadyRead
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|arr
init|=
name|client
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|arr
operator|.
name|constData
argument_list|()
argument_list|,
literal|"Greetings, client!\n"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|client
operator|.
name|write
argument_list|(
literal|"Well, hello to you!\n"
argument_list|,
literal|20
argument_list|)
operator|==
literal|20
argument_list|)
expr_stmt|;
name|client
operator|.
name|flush
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|serverSocket
operator|->
name|waitForReadyRead
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|arr
operator|=
name|serverSocket
operator|->
name|readAll
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|arr
operator|.
name|constData
argument_list|()
argument_list|,
literal|"Well, hello to you!\n"
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|ipv6Server
name|void
name|tst_QTcpServer
operator|::
name|ipv6Server
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QtNetworkSettings
operator|::
name|hasIPv6
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"system doesn't support ipv6!"
argument_list|)
expr_stmt|;
comment|//### need to enter the event loop for the server to get the connection ?? ( windows)
name|QTcpServer
name|server
decl_stmt|;
if|if
condition|(
operator|!
name|server
operator|.
name|listen
argument_list|(
name|QHostAddress
operator|::
name|LocalHostIPv6
argument_list|,
literal|8944
argument_list|)
condition|)
block|{
name|QVERIFY
argument_list|(
name|server
operator|.
name|serverError
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnsupportedSocketOperationError
argument_list|)
expr_stmt|;
return|return;
block|}
name|QVERIFY
argument_list|(
name|server
operator|.
name|serverPort
argument_list|()
operator|==
literal|8944
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|serverAddress
argument_list|()
operator|==
name|QHostAddress
operator|::
name|LocalHostIPv6
argument_list|)
expr_stmt|;
name|QTcpSocket
name|client
decl_stmt|;
name|client
operator|.
name|connectToHost
argument_list|(
literal|"::1"
argument_list|,
literal|8944
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|client
operator|.
name|waitForConnected
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|waitForNewConnection
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|hasPendingConnections
argument_list|()
argument_list|)
expr_stmt|;
name|QTcpSocket
modifier|*
name|serverSocket
init|=
literal|0
decl_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|serverSocket
operator|=
name|server
operator|.
name|nextPendingConnection
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|serverSocket
operator|->
name|close
argument_list|()
expr_stmt|;
operator|delete
name|serverSocket
expr_stmt|;
block|}
end_function
begin_expr_stmt
DECL|variable|QHostAddress
name|Q_DECLARE_METATYPE
argument_list|(
name|QHostAddress
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function
DECL|function|dualStack_data
name|void
name|tst_QTcpServer
operator|::
name|dualStack_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QHostAddress
argument_list|>
argument_list|(
literal|"bindAddress"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"v4ok"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"v6ok"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"any"
argument_list|)
operator|<<
name|QHostAddress
argument_list|(
name|QHostAddress
operator|::
name|Any
argument_list|)
operator|<<
literal|true
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"anyIPv4"
argument_list|)
operator|<<
name|QHostAddress
argument_list|(
name|QHostAddress
operator|::
name|AnyIPv4
argument_list|)
operator|<<
literal|true
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"anyIPv6"
argument_list|)
operator|<<
name|QHostAddress
argument_list|(
name|QHostAddress
operator|::
name|AnyIPv6
argument_list|)
operator|<<
literal|false
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dualStack
name|void
name|tst_QTcpServer
operator|::
name|dualStack
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
name|QSKIP
argument_list|(
literal|"test server proxy doesn't support ipv6"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|QtNetworkSettings
operator|::
name|hasIPv6
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"system doesn't support ipv6!"
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QHostAddress
argument_list|,
name|bindAddress
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|v4ok
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|v6ok
argument_list|)
expr_stmt|;
name|QTcpServer
name|server
decl_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|listen
argument_list|(
name|bindAddress
argument_list|)
argument_list|)
expr_stmt|;
name|QTcpSocket
name|v4client
decl_stmt|;
name|v4client
operator|.
name|connectToHost
argument_list|(
name|QHostAddress
operator|::
name|LocalHost
argument_list|,
name|server
operator|.
name|serverPort
argument_list|()
argument_list|)
expr_stmt|;
name|QTcpSocket
name|v6client
decl_stmt|;
name|v6client
operator|.
name|connectToHost
argument_list|(
name|QHostAddress
operator|::
name|LocalHostIPv6
argument_list|,
name|server
operator|.
name|serverPort
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v4client
operator|.
name|waitForConnected
argument_list|(
literal|5000
argument_list|)
argument_list|,
name|v4ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v6client
operator|.
name|waitForConnected
argument_list|(
literal|5000
argument_list|)
argument_list|,
name|v6ok
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|ipv6ServerMapped
name|void
name|tst_QTcpServer
operator|::
name|ipv6ServerMapped
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
return|return;
name|QTcpServer
name|server
decl_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|listen
argument_list|(
name|QHostAddress
operator|::
name|LocalHost
argument_list|)
argument_list|)
expr_stmt|;
comment|// let's try the normal case
name|QTcpSocket
name|client1
decl_stmt|;
name|client1
operator|.
name|connectToHost
argument_list|(
literal|"127.0.0.1"
argument_list|,
name|server
operator|.
name|serverPort
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|waitForNewConnection
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|server
operator|.
name|nextPendingConnection
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|QtNetworkSettings
operator|::
name|hasIPv6
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"system doesn't support ipv6!"
argument_list|)
expr_stmt|;
comment|// let's try the mapped one in the nice format
name|QTcpSocket
name|client2
decl_stmt|;
name|client2
operator|.
name|connectToHost
argument_list|(
literal|"::ffff:127.0.0.1"
argument_list|,
name|server
operator|.
name|serverPort
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|waitForNewConnection
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|server
operator|.
name|nextPendingConnection
argument_list|()
expr_stmt|;
comment|// let's try the mapped in hex format
name|QTcpSocket
name|client3
decl_stmt|;
name|client3
operator|.
name|connectToHost
argument_list|(
literal|"::ffff:7F00:0001"
argument_list|,
name|server
operator|.
name|serverPort
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|waitForNewConnection
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|server
operator|.
name|nextPendingConnection
argument_list|()
expr_stmt|;
comment|// However connecting to the v6 localhost should not work
name|QTcpSocket
name|client4
decl_stmt|;
name|client4
operator|.
name|connectToHost
argument_list|(
literal|"::1"
argument_list|,
name|server
operator|.
name|serverPort
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|server
operator|.
name|waitForNewConnection
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|crashTests
name|void
name|tst_QTcpServer
operator|::
name|crashTests
parameter_list|()
block|{
name|QTcpServer
name|server
decl_stmt|;
name|server
operator|.
name|close
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|listen
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|maxPendingConnections
name|void
name|tst_QTcpServer
operator|::
name|maxPendingConnections
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
block|{
name|QFETCH_GLOBAL
argument_list|(
name|int
argument_list|,
name|proxyType
argument_list|)
expr_stmt|;
if|if
condition|(
name|proxyType
operator|==
name|QNetworkProxy
operator|::
name|Socks5Proxy
condition|)
name|QSKIP
argument_list|(
literal|"With socks5 only 1 connection is allowed ever"
argument_list|)
expr_stmt|;
block|}
comment|//### sees to fail sometimes ... a timing issue with the test on windows
name|QTcpServer
name|server
decl_stmt|;
name|server
operator|.
name|setMaxPendingConnections
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QTcpSocket
name|socket1
decl_stmt|;
name|QTcpSocket
name|socket2
decl_stmt|;
name|QTcpSocket
name|socket3
decl_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|listen
argument_list|()
argument_list|)
expr_stmt|;
name|socket1
operator|.
name|connectToHost
argument_list|(
name|QHostAddress
operator|::
name|LocalHost
argument_list|,
name|server
operator|.
name|serverPort
argument_list|()
argument_list|)
expr_stmt|;
name|socket2
operator|.
name|connectToHost
argument_list|(
name|QHostAddress
operator|::
name|LocalHost
argument_list|,
name|server
operator|.
name|serverPort
argument_list|()
argument_list|)
expr_stmt|;
name|socket3
operator|.
name|connectToHost
argument_list|(
name|QHostAddress
operator|::
name|LocalHost
argument_list|,
name|server
operator|.
name|serverPort
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|waitForNewConnection
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|hasPendingConnections
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|nextPendingConnection
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|hasPendingConnections
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|nextPendingConnection
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|server
operator|.
name|hasPendingConnections
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|server
operator|.
name|nextPendingConnection
argument_list|()
argument_list|,
operator|(
name|QTcpSocket
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|waitForNewConnection
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|hasPendingConnections
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|nextPendingConnection
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|listenError
name|void
name|tst_QTcpServer
operator|::
name|listenError
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
block|{
name|QFETCH_GLOBAL
argument_list|(
name|int
argument_list|,
name|proxyType
argument_list|)
expr_stmt|;
if|if
condition|(
name|proxyType
operator|==
name|QNetworkProxy
operator|::
name|Socks5Proxy
condition|)
name|QSKIP
argument_list|(
literal|"With socks5 we can not make hard requirements on the address or port"
argument_list|)
expr_stmt|;
block|}
name|QTcpServer
name|server
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|server
operator|.
name|listen
argument_list|(
name|QHostAddress
argument_list|(
literal|"1.2.3.4"
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|server
operator|.
name|serverError
argument_list|()
argument_list|,
name|QAbstractSocket
operator|::
name|SocketAddressNotAvailableError
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|server
operator|.
name|errorString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
literal|"The address is not available"
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|ThreadConnector
class|class
name|ThreadConnector
super|:
specifier|public
name|QThread
block|{
public|public:
DECL|function|ThreadConnector
name|ThreadConnector
parameter_list|(
specifier|const
name|QHostAddress
modifier|&
name|host
parameter_list|,
name|quint16
name|port
parameter_list|)
member_init_list|:
name|host
argument_list|(
name|host
argument_list|)
member_init_list|,
name|port
argument_list|(
name|port
argument_list|)
block|{ }
DECL|function|~ThreadConnector
name|~
name|ThreadConnector
parameter_list|()
block|{
name|wait
argument_list|()
expr_stmt|;
block|}
protected|protected:
DECL|function|run
name|void
name|run
parameter_list|()
block|{
name|sleep
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QTcpSocket
name|socket
decl_stmt|;
name|socket
operator|.
name|connectToHost
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|QEventLoop
name|loop
decl_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|5000
argument_list|,
operator|&
name|loop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|loop
operator|.
name|exec
argument_list|()
expr_stmt|;
block|}
private|private:
DECL|member|host
name|QHostAddress
name|host
decl_stmt|;
DECL|member|port
name|quint16
name|port
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|waitForConnectionTest
name|void
name|tst_QTcpServer
operator|::
name|waitForConnectionTest
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
block|{
name|QFETCH_GLOBAL
argument_list|(
name|int
argument_list|,
name|proxyType
argument_list|)
expr_stmt|;
if|if
condition|(
name|proxyType
operator|==
name|QNetworkProxy
operator|::
name|Socks5Proxy
condition|)
name|QSKIP
argument_list|(
literal|"Localhost servers don't work well with SOCKS5"
argument_list|)
expr_stmt|;
block|}
name|QTcpSocket
name|findLocalIpSocket
decl_stmt|;
name|findLocalIpSocket
operator|.
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|143
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|findLocalIpSocket
operator|.
name|waitForConnected
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QTcpServer
name|server
decl_stmt|;
name|bool
name|timeout
init|=
literal|false
decl_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|listen
argument_list|(
name|findLocalIpSocket
operator|.
name|localAddress
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|server
operator|.
name|waitForNewConnection
argument_list|(
literal|1000
argument_list|,
operator|&
name|timeout
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|server
operator|.
name|serverError
argument_list|()
argument_list|,
name|QAbstractSocket
operator|::
name|SocketTimeoutError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|timeout
argument_list|)
expr_stmt|;
name|ThreadConnector
name|connector
argument_list|(
name|findLocalIpSocket
operator|.
name|localAddress
argument_list|()
argument_list|,
name|server
operator|.
name|serverPort
argument_list|()
argument_list|)
decl_stmt|;
name|connector
operator|.
name|start
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QVERIFY
argument_list|(
name|server
operator|.
name|waitForNewConnection
argument_list|(
literal|9000
argument_list|,
operator|&
name|timeout
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|QVERIFY
argument_list|(
name|server
operator|.
name|waitForNewConnection
argument_list|(
literal|3000
argument_list|,
operator|&
name|timeout
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
operator|!
name|timeout
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|setSocketDescriptor
name|void
name|tst_QTcpServer
operator|::
name|setSocketDescriptor
parameter_list|()
block|{
name|QTcpServer
name|server
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|server
operator|.
name|setSocketDescriptor
argument_list|(
literal|42
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|server
operator|.
name|serverError
argument_list|()
argument_list|,
name|QAbstractSocket
operator|::
name|UnsupportedSocketOperationError
argument_list|)
expr_stmt|;
comment|//adopting Open C sockets is not supported, neither is adopting externally created RSocket
ifdef|#
directive|ifdef
name|Q_OS_WIN
comment|// ensure winsock is started
name|WSADATA
name|wsaData
decl_stmt|;
name|QVERIFY
argument_list|(
name|WSAStartup
argument_list|(
name|MAKEWORD
argument_list|(
literal|2
argument_list|,
literal|0
argument_list|)
argument_list|,
operator|&
name|wsaData
argument_list|)
operator|==
name|NO_ERROR
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|SOCKET
name|sock
init|=
operator|::
name|socket
argument_list|(
name|AF_INET
argument_list|,
name|SOCK_STREAM
argument_list|,
name|IPPROTO_TCP
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|sock
operator|!=
name|INVALID_SOCKET
argument_list|)
expr_stmt|;
name|sockaddr_in
name|sin
decl_stmt|;
name|memset
argument_list|(
operator|&
name|sin
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|sockaddr_in
argument_list|)
argument_list|)
expr_stmt|;
name|sin
operator|.
name|sin_family
operator|=
name|AF_INET
expr_stmt|;
name|sin
operator|.
name|sin_port
operator|=
literal|0
expr_stmt|;
name|sin
operator|.
name|sin_addr
operator|.
name|s_addr
operator|=
literal|0x00000000
expr_stmt|;
name|QVERIFY
argument_list|(
operator|::
name|bind
argument_list|(
name|sock
argument_list|,
operator|(
name|sockaddr
operator|*
operator|)
operator|&
name|sin
argument_list|,
sizeof|sizeof
argument_list|(
name|sockaddr_in
argument_list|)
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|::
name|listen
argument_list|(
name|sock
argument_list|,
literal|10
argument_list|)
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|setSocketDescriptor
argument_list|(
name|sock
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
name|WSACleanup
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|listenWhileListening
name|void
name|tst_QTcpServer
operator|::
name|listenWhileListening
parameter_list|()
block|{
name|QTcpServer
name|server
decl_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|listen
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QTcpServer::listen() called when already listening"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|server
operator|.
name|listen
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_class
DECL|class|SeverWithBlockingSockets
class|class
name|SeverWithBlockingSockets
super|:
specifier|public
name|QTcpServer
block|{
public|public:
DECL|function|SeverWithBlockingSockets
name|SeverWithBlockingSockets
parameter_list|()
member_init_list|:
name|ok
argument_list|(
literal|false
argument_list|)
block|{ }
DECL|member|ok
name|bool
name|ok
decl_stmt|;
protected|protected:
DECL|function|incomingConnection
name|void
name|incomingConnection
parameter_list|(
name|qintptr
name|socketDescriptor
parameter_list|)
block|{
comment|// how a user woulddo it (qabstractsocketengine is not public)
name|unsigned
name|long
name|arg
init|=
literal|0
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|ok
operator|=
operator|::
name|ioctlsocket
argument_list|(
name|socketDescriptor
argument_list|,
name|FIONBIO
argument_list|,
operator|&
name|arg
argument_list|)
operator|==
literal|0
expr_stmt|;
operator|::
name|closesocket
argument_list|(
name|socketDescriptor
argument_list|)
expr_stmt|;
else|#
directive|else
name|ok
operator|=
operator|::
name|ioctl
argument_list|(
name|socketDescriptor
argument_list|,
name|FIONBIO
argument_list|,
operator|&
name|arg
argument_list|)
operator|==
literal|0
expr_stmt|;
operator|::
name|close
argument_list|(
name|socketDescriptor
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
block|}
class|;
end_class
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_PROCESS
end_ifndef
begin_function
DECL|function|addressReusable
name|void
name|tst_QTcpServer
operator|::
name|addressReusable
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
block|{
name|QFETCH_GLOBAL
argument_list|(
name|int
argument_list|,
name|proxyType
argument_list|)
expr_stmt|;
if|if
condition|(
name|proxyType
operator|==
name|QNetworkProxy
operator|::
name|Socks5Proxy
condition|)
name|QSKIP
argument_list|(
literal|"With socks5 this test does not make senans at the momment"
argument_list|)
expr_stmt|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QString
name|signalName
init|=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/test_signal.txt"
argument_list|)
decl_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|signalName
argument_list|)
expr_stmt|;
comment|// The crashingServer process will crash once it gets a connection.
name|QProcess
name|process
decl_stmt|;
name|QString
name|processExe
init|=
name|crashingServerDir
operator|+
literal|"/crashingServer"
decl_stmt|;
name|process
operator|.
name|start
argument_list|(
name|processExe
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|process
operator|.
name|waitForStarted
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Could not start %1: %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|processExe
argument_list|,
name|process
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|waitCount
init|=
literal|5
decl_stmt|;
while|while
condition|(
name|waitCount
operator|--
operator|&&
operator|!
name|QFile
operator|::
name|exists
argument_list|(
name|signalName
argument_list|)
condition|)
name|QTest
operator|::
name|qWait
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|exists
argument_list|(
name|signalName
argument_list|)
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
name|signalName
argument_list|)
expr_stmt|;
else|#
directive|else
comment|// The crashingServer process will crash once it gets a connection.
name|QProcess
name|process
decl_stmt|;
name|QString
name|processExe
init|=
name|crashingServerDir
operator|+
literal|"/crashingServer"
decl_stmt|;
name|process
operator|.
name|start
argument_list|(
name|processExe
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|process
operator|.
name|waitForStarted
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Could not start %1: %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|processExe
argument_list|,
name|process
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|.
name|waitForReadyRead
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QTcpSocket
name|socket
decl_stmt|;
name|socket
operator|.
name|connectToHost
argument_list|(
name|QHostAddress
operator|::
name|LocalHost
argument_list|,
literal|49199
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|.
name|waitForConnected
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|process
operator|.
name|waitForFinished
argument_list|(
literal|30000
argument_list|)
argument_list|)
expr_stmt|;
comment|// Give the system some time.
name|QTest
operator|::
name|qSleep
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QTcpServer
name|server
decl_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|listen
argument_list|(
name|QHostAddress
operator|::
name|LocalHost
argument_list|,
literal|49199
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|setNewSocketDescriptorBlocking
name|void
name|tst_QTcpServer
operator|::
name|setNewSocketDescriptorBlocking
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
block|{
name|QFETCH_GLOBAL
argument_list|(
name|int
argument_list|,
name|proxyType
argument_list|)
expr_stmt|;
if|if
condition|(
name|proxyType
operator|==
name|QNetworkProxy
operator|::
name|Socks5Proxy
condition|)
name|QSKIP
argument_list|(
literal|"With socks5 we can not make the socket descripter blocking"
argument_list|)
expr_stmt|;
block|}
name|SeverWithBlockingSockets
name|server
decl_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|listen
argument_list|()
argument_list|)
expr_stmt|;
name|QTcpSocket
name|socket
decl_stmt|;
name|socket
operator|.
name|connectToHost
argument_list|(
name|QHostAddress
operator|::
name|LocalHost
argument_list|,
name|server
operator|.
name|serverPort
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|waitForNewConnection
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|ok
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|invalidProxy_data
name|void
name|tst_QTcpServer
operator|::
name|invalidProxy_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"type"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"host"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"port"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedError"
argument_list|)
expr_stmt|;
name|QString
name|fluke
init|=
name|QHostInfo
operator|::
name|fromName
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|)
operator|.
name|addresses
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ftp-proxy"
argument_list|)
operator|<<
name|int
argument_list|(
name|QNetworkProxy
operator|::
name|FtpCachingProxy
argument_list|)
operator|<<
name|fluke
operator|<<
literal|143
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|UnsupportedSocketOperationError
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http-proxy"
argument_list|)
operator|<<
name|int
argument_list|(
name|QNetworkProxy
operator|::
name|HttpProxy
argument_list|)
operator|<<
name|fluke
operator|<<
literal|3128
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|UnsupportedSocketOperationError
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-such-host"
argument_list|)
operator|<<
name|int
argument_list|(
name|QNetworkProxy
operator|::
name|Socks5Proxy
argument_list|)
operator|<<
literal|"this-host-will-never-exist.troll.no"
operator|<<
literal|1080
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|ProxyNotFoundError
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"socks5-on-http"
argument_list|)
operator|<<
name|int
argument_list|(
name|QNetworkProxy
operator|::
name|Socks5Proxy
argument_list|)
operator|<<
name|fluke
operator|<<
literal|3128
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|SocketTimeoutError
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|invalidProxy
name|void
name|tst_QTcpServer
operator|::
name|invalidProxy
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
return|return;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|QNetworkProxy
operator|::
name|ProxyType
name|proxyType
init|=
name|QNetworkProxy
operator|::
name|ProxyType
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|QNetworkProxy
name|proxy
argument_list|(
name|proxyType
argument_list|,
name|host
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|QTcpServer
name|server
decl_stmt|;
name|server
operator|.
name|setProxy
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
name|bool
name|listenResult
init|=
name|server
operator|.
name|listen
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|listenResult
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|server
operator|.
name|errorString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// note: the following test is not a hard failure.
comment|// Sometimes, error codes change for the better
name|QTEST
argument_list|(
name|int
argument_list|(
name|server
operator|.
name|serverError
argument_list|()
argument_list|)
argument_list|,
literal|"expectedError"
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// copied from tst_qnetworkreply.cpp
end_comment
begin_class
DECL|class|MyProxyFactory
class|class
name|MyProxyFactory
super|:
specifier|public
name|QNetworkProxyFactory
block|{
public|public:
DECL|member|callCount
name|int
name|callCount
decl_stmt|;
DECL|member|toReturn
name|QList
argument_list|<
name|QNetworkProxy
argument_list|>
name|toReturn
decl_stmt|;
DECL|member|lastQuery
name|QNetworkProxyQuery
name|lastQuery
decl_stmt|;
DECL|function|MyProxyFactory
specifier|inline
name|MyProxyFactory
parameter_list|()
block|{
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|function|clear
specifier|inline
name|void
name|clear
parameter_list|()
block|{
name|callCount
operator|=
literal|0
expr_stmt|;
name|toReturn
operator|=
name|QList
argument_list|<
name|QNetworkProxy
argument_list|>
argument_list|()
operator|<<
name|QNetworkProxy
operator|::
name|DefaultProxy
expr_stmt|;
name|lastQuery
operator|=
name|QNetworkProxyQuery
argument_list|()
expr_stmt|;
block|}
DECL|function|queryProxy
specifier|virtual
name|QList
argument_list|<
name|QNetworkProxy
argument_list|>
name|queryProxy
parameter_list|(
specifier|const
name|QNetworkProxyQuery
modifier|&
name|query
parameter_list|)
block|{
name|lastQuery
operator|=
name|query
expr_stmt|;
operator|++
name|callCount
expr_stmt|;
return|return
name|toReturn
return|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|proxyFactory_data
name|void
name|tst_QTcpServer
operator|::
name|proxyFactory_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QList
argument_list|<
name|QNetworkProxy
argument_list|>
argument_list|>
argument_list|(
literal|"proxyList"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QNetworkProxy
argument_list|>
argument_list|(
literal|"proxyUsed"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"fails"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedError"
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QNetworkProxy
argument_list|>
name|proxyList
decl_stmt|;
comment|// tests that do get to listen
name|proxyList
operator|<<
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|Socks5Proxy
argument_list|,
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|1080
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"socks5"
argument_list|)
operator|<<
name|proxyList
operator|<<
name|proxyList
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|<<
literal|false
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|UnknownSocketError
argument_list|)
expr_stmt|;
name|proxyList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|proxyList
operator|<<
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|HttpCachingProxy
argument_list|,
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|3128
argument_list|)
operator|<<
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|Socks5Proxy
argument_list|,
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|1080
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"cachinghttp+socks5"
argument_list|)
operator|<<
name|proxyList
operator|<<
name|proxyList
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|<<
literal|false
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|UnknownSocketError
argument_list|)
expr_stmt|;
name|proxyList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|proxyList
operator|<<
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|FtpCachingProxy
argument_list|,
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|2121
argument_list|)
operator|<<
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|HttpCachingProxy
argument_list|,
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|3128
argument_list|)
operator|<<
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|Socks5Proxy
argument_list|,
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|1080
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ftp+cachinghttp+socks5"
argument_list|)
operator|<<
name|proxyList
operator|<<
name|proxyList
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|<<
literal|false
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|UnknownSocketError
argument_list|)
expr_stmt|;
comment|// tests that fail to listen
name|proxyList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|proxyList
operator|<<
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|HttpProxy
argument_list|,
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|3128
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http"
argument_list|)
operator|<<
name|proxyList
operator|<<
name|proxyList
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|<<
literal|true
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|UnsupportedSocketOperationError
argument_list|)
expr_stmt|;
name|proxyList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|proxyList
operator|<<
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|HttpCachingProxy
argument_list|,
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|3128
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"cachinghttp"
argument_list|)
operator|<<
name|proxyList
operator|<<
name|QNetworkProxy
argument_list|()
operator|<<
literal|true
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|UnsupportedSocketOperationError
argument_list|)
expr_stmt|;
name|proxyList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|proxyList
operator|<<
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|FtpCachingProxy
argument_list|,
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|2121
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ftp"
argument_list|)
operator|<<
name|proxyList
operator|<<
name|QNetworkProxy
argument_list|()
operator|<<
literal|true
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|UnsupportedSocketOperationError
argument_list|)
expr_stmt|;
name|proxyList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|proxyList
operator|<<
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|FtpCachingProxy
argument_list|,
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|2121
argument_list|)
operator|<<
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|HttpCachingProxy
argument_list|,
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|3128
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ftp+cachinghttp"
argument_list|)
operator|<<
name|proxyList
operator|<<
name|QNetworkProxy
argument_list|()
operator|<<
literal|true
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|UnsupportedSocketOperationError
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|proxyFactory
name|void
name|tst_QTcpServer
operator|::
name|proxyFactory
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
return|return;
name|QFETCH
argument_list|(
name|QList
argument_list|<
name|QNetworkProxy
argument_list|>
argument_list|,
name|proxyList
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QNetworkProxy
argument_list|,
name|proxyUsed
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|fails
argument_list|)
expr_stmt|;
name|MyProxyFactory
modifier|*
name|factory
init|=
operator|new
name|MyProxyFactory
decl_stmt|;
name|factory
operator|->
name|toReturn
operator|=
name|proxyList
expr_stmt|;
name|QNetworkProxyFactory
operator|::
name|setApplicationProxyFactory
argument_list|(
name|factory
argument_list|)
expr_stmt|;
name|QTcpServer
name|server
decl_stmt|;
name|bool
name|listenResult
init|=
name|server
operator|.
name|listen
argument_list|()
decl_stmt|;
comment|// Verify that the factory was called properly
name|QCOMPARE
argument_list|(
name|factory
operator|->
name|callCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|factory
operator|->
name|lastQuery
argument_list|,
name|QNetworkProxyQuery
argument_list|(
literal|0
argument_list|,
name|QString
argument_list|()
argument_list|,
name|QNetworkProxyQuery
operator|::
name|TcpServer
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|listenResult
argument_list|,
operator|!
name|fails
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|server
operator|.
name|errorString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|,
operator|!
name|fails
argument_list|)
expr_stmt|;
comment|// note: the following test is not a hard failure.
comment|// Sometimes, error codes change for the better
name|QTEST
argument_list|(
name|int
argument_list|(
name|server
operator|.
name|serverError
argument_list|()
argument_list|)
argument_list|,
literal|"expectedError"
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|Qtbug14268Helper
class|class
name|Qtbug14268Helper
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|member|lastDataPeeked
name|QByteArray
name|lastDataPeeked
decl_stmt|;
public|public
name|slots
public|:
DECL|function|newConnection
name|void
name|newConnection
parameter_list|()
block|{
name|QTcpServer
modifier|*
name|server
init|=
cast|static_cast
argument_list|<
name|QTcpServer
operator|*
argument_list|>
argument_list|(
name|sender
argument_list|()
argument_list|)
decl_stmt|;
name|QTcpSocket
modifier|*
name|s
init|=
name|server
operator|->
name|nextPendingConnection
argument_list|()
decl_stmt|;
name|connect
argument_list|(
name|s
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|onServerReadyRead
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|onServerReadyRead
name|void
name|onServerReadyRead
parameter_list|()
block|{
name|QTcpSocket
modifier|*
name|clientSocket
init|=
cast|static_cast
argument_list|<
name|QTcpSocket
operator|*
argument_list|>
argument_list|(
name|sender
argument_list|()
argument_list|)
decl_stmt|;
name|lastDataPeeked
operator|=
name|clientSocket
operator|->
name|peek
argument_list|(
literal|128
operator|*
literal|1024
argument_list|)
operator|.
name|toHex
argument_list|()
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|exitLoop
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_comment
comment|// there is a similar test inside tst_qtcpsocket that uses the waitFor* functions instead
end_comment
begin_function
DECL|function|qtbug14268_peek
name|void
name|tst_QTcpServer
operator|::
name|qtbug14268_peek
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
return|return;
name|QTcpServer
name|server
decl_stmt|;
name|server
operator|.
name|listen
argument_list|()
expr_stmt|;
name|Qtbug14268Helper
name|helper
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|server
argument_list|,
name|SIGNAL
argument_list|(
name|newConnection
argument_list|()
argument_list|)
argument_list|,
operator|&
name|helper
argument_list|,
name|SLOT
argument_list|(
name|newConnection
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTcpSocket
name|client
decl_stmt|;
name|client
operator|.
name|connectToHost
argument_list|(
name|QHostAddress
operator|::
name|LocalHost
argument_list|,
name|server
operator|.
name|serverPort
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|client
operator|.
name|waitForConnected
argument_list|(
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|write
argument_list|(
literal|"abc\n"
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|helper
operator|.
name|lastDataPeeked
operator|==
name|QByteArray
argument_list|(
literal|"6162630a"
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|write
argument_list|(
literal|"def\n"
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|helper
operator|.
name|lastDataPeeked
operator|==
name|QByteArray
argument_list|(
literal|"6162630a6465660a"
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|write
argument_list|(
literal|"ghi\n"
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|helper
operator|.
name|lastDataPeeked
operator|==
name|QByteArray
argument_list|(
literal|"6162630a6465660a6768690a"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|serverAddress_data
name|void
name|tst_QTcpServer
operator|::
name|serverAddress_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QHostAddress
argument_list|>
argument_list|(
literal|"listenAddress"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QHostAddress
argument_list|>
argument_list|(
literal|"serverAddress"
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
if|if
condition|(
name|QSysInfo
operator|::
name|windowsVersion
argument_list|()
operator|<
name|QSysInfo
operator|::
name|WV_6_0
condition|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Any"
argument_list|)
operator|<<
name|QHostAddress
argument_list|(
name|QHostAddress
operator|::
name|Any
argument_list|)
operator|<<
name|QHostAddress
argument_list|(
name|QHostAddress
operator|::
name|AnyIPv4
argument_list|)
expr_stmt|;
comment|//windows XP doesn't support dual stack sockets
elseif|else
endif|#
directive|endif
if|if
condition|(
name|QtNetworkSettings
operator|::
name|hasIPv6
argument_list|()
condition|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Any"
argument_list|)
operator|<<
name|QHostAddress
argument_list|(
name|QHostAddress
operator|::
name|Any
argument_list|)
operator|<<
name|QHostAddress
argument_list|(
name|QHostAddress
operator|::
name|Any
argument_list|)
expr_stmt|;
else|else
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Any"
argument_list|)
operator|<<
name|QHostAddress
argument_list|(
name|QHostAddress
operator|::
name|Any
argument_list|)
operator|<<
name|QHostAddress
argument_list|(
name|QHostAddress
operator|::
name|AnyIPv4
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"AnyIPv4"
argument_list|)
operator|<<
name|QHostAddress
argument_list|(
name|QHostAddress
operator|::
name|AnyIPv4
argument_list|)
operator|<<
name|QHostAddress
argument_list|(
name|QHostAddress
operator|::
name|AnyIPv4
argument_list|)
expr_stmt|;
if|if
condition|(
name|QtNetworkSettings
operator|::
name|hasIPv6
argument_list|()
condition|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"AnyIPv6"
argument_list|)
operator|<<
name|QHostAddress
argument_list|(
name|QHostAddress
operator|::
name|AnyIPv6
argument_list|)
operator|<<
name|QHostAddress
argument_list|(
name|QHostAddress
operator|::
name|AnyIPv6
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QHostAddress
modifier|&
name|addr
decl|,
name|QNetworkInterface
operator|::
name|allAddresses
argument_list|()
control|)
block|{
if|if
condition|(
name|addr
operator|.
name|isInSubnet
argument_list|(
name|QHostAddress
operator|::
name|parseSubnet
argument_list|(
literal|"fe80::/10"
argument_list|)
argument_list|)
operator|||
name|addr
operator|.
name|isInSubnet
argument_list|(
name|QHostAddress
operator|::
name|parseSubnet
argument_list|(
literal|"169.254/16"
argument_list|)
argument_list|)
condition|)
continue|continue;
comment|//cannot bind on link local addresses
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|addr
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
operator|<<
name|addr
operator|<<
name|addr
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|serverAddress
name|void
name|tst_QTcpServer
operator|::
name|serverAddress
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
return|return;
name|QFETCH
argument_list|(
name|QHostAddress
argument_list|,
name|listenAddress
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QHostAddress
argument_list|,
name|serverAddress
argument_list|)
expr_stmt|;
name|QTcpServer
name|server
decl_stmt|;
comment|// TODO: why does this QSKIP?
if|if
condition|(
operator|!
name|server
operator|.
name|listen
argument_list|(
name|listenAddress
argument_list|)
condition|)
name|QSKIP
argument_list|(
name|qPrintable
argument_list|(
name|server
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|server
operator|.
name|serverAddress
argument_list|()
argument_list|,
name|serverAddress
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// on OS X, calling listen() multiple times would succeed each time, which is
end_comment
begin_comment
comment|// most definitely not wanted.
end_comment
begin_function
DECL|function|qtbug6305
name|void
name|tst_QTcpServer
operator|::
name|qtbug6305
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
return|return;
name|QFETCH
argument_list|(
name|QHostAddress
argument_list|,
name|listenAddress
argument_list|)
expr_stmt|;
name|QTcpServer
name|server
decl_stmt|;
name|QVERIFY2
argument_list|(
name|server
operator|.
name|listen
argument_list|(
name|listenAddress
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|server
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTcpServer
name|server2
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|server2
operator|.
name|listen
argument_list|(
name|listenAddress
argument_list|,
name|server
operator|.
name|serverPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// second listen should fail
block|}
end_function
begin_function
DECL|function|linkLocal
name|void
name|tst_QTcpServer
operator|::
name|linkLocal
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
return|return;
name|QList
argument_list|<
name|QHostAddress
argument_list|>
name|addresses
decl_stmt|;
name|QSet
argument_list|<
name|QString
argument_list|>
name|scopes
decl_stmt|;
name|QHostAddress
name|localMaskv4
argument_list|(
literal|"169.254.0.0"
argument_list|)
decl_stmt|;
name|QHostAddress
name|localMaskv6
argument_list|(
literal|"fe80::"
argument_list|)
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QNetworkInterface
modifier|&
name|iface
decl|,
name|QNetworkInterface
operator|::
name|allInterfaces
argument_list|()
control|)
block|{
comment|//Windows preallocates link local addresses to interfaces that are down.
comment|//These may or may not work depending on network driver (they do not work for the Bluetooth PAN driver)
if|if
condition|(
name|iface
operator|.
name|flags
argument_list|()
operator|&
name|QNetworkInterface
operator|::
name|IsUp
condition|)
block|{
comment|// Do not connect to the Teredo Tunneling interface on Windows Xp.
if|if
condition|(
name|iface
operator|.
name|humanReadableName
argument_list|()
operator|==
name|QString
argument_list|(
literal|"Teredo Tunneling Pseudo-Interface"
argument_list|)
condition|)
continue|continue;
foreach|foreach
control|(
name|QNetworkAddressEntry
name|addressEntry
decl|,
name|iface
operator|.
name|addressEntries
argument_list|()
control|)
block|{
name|QHostAddress
name|addr
init|=
name|addressEntry
operator|.
name|ip
argument_list|()
decl_stmt|;
if|if
condition|(
name|addr
operator|.
name|isInSubnet
argument_list|(
name|localMaskv4
argument_list|,
literal|16
argument_list|)
condition|)
block|{
name|addresses
operator|<<
name|addr
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
name|addr
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|!
name|addr
operator|.
name|scopeId
argument_list|()
operator|.
name|isEmpty
argument_list|()
operator|&&
name|addr
operator|.
name|isInSubnet
argument_list|(
name|localMaskv6
argument_list|,
literal|64
argument_list|)
condition|)
block|{
name|scopes
operator|<<
name|addr
operator|.
name|scopeId
argument_list|()
expr_stmt|;
name|addresses
operator|<<
name|addr
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
name|addr
expr_stmt|;
block|}
block|}
block|}
block|}
if|if
condition|(
name|addresses
operator|.
name|isEmpty
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"no link local addresses"
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QTcpServer
modifier|*
argument_list|>
name|servers
decl_stmt|;
name|quint16
name|port
init|=
literal|0
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QHostAddress
modifier|&
name|addr
decl|,
name|addresses
control|)
block|{
name|QTcpServer
modifier|*
name|server
init|=
operator|new
name|QTcpServer
decl_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|->
name|listen
argument_list|(
name|addr
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
name|port
operator|=
name|server
operator|->
name|serverPort
argument_list|()
expr_stmt|;
comment|//listen to same port on different interfaces
name|servers
operator|<<
name|server
expr_stmt|;
block|}
name|QList
argument_list|<
name|QTcpSocket
modifier|*
argument_list|>
name|clients
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QHostAddress
modifier|&
name|addr
decl|,
name|addresses
control|)
block|{
comment|//unbound socket
name|QTcpSocket
modifier|*
name|socket
init|=
operator|new
name|QTcpSocket
decl_stmt|;
name|socket
operator|->
name|connectToHost
argument_list|(
name|addr
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForConnected
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|clients
operator|<<
name|socket
expr_stmt|;
comment|//bound socket
name|socket
operator|=
operator|new
name|QTcpSocket
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|bind
argument_list|(
name|addr
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|->
name|connectToHost
argument_list|(
name|addr
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForConnected
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|clients
operator|<<
name|socket
expr_stmt|;
block|}
comment|//each server should have two connections
foreach|foreach
control|(
name|QTcpServer
modifier|*
name|server
decl|,
name|servers
control|)
block|{
name|QTcpSocket
modifier|*
name|remote
decl_stmt|;
comment|//qDebug()<< "checking for connections"<< server->serverAddress()<< ":"<< server->serverPort();
name|QVERIFY
argument_list|(
name|server
operator|->
name|waitForNewConnection
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|remote
operator|=
name|server
operator|->
name|nextPendingConnection
argument_list|()
argument_list|)
expr_stmt|;
name|remote
operator|->
name|close
argument_list|()
expr_stmt|;
operator|delete
name|remote
expr_stmt|;
if|if
condition|(
operator|!
name|server
operator|->
name|hasPendingConnections
argument_list|()
condition|)
name|QVERIFY
argument_list|(
name|server
operator|->
name|waitForNewConnection
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|remote
operator|=
name|server
operator|->
name|nextPendingConnection
argument_list|()
argument_list|)
expr_stmt|;
name|remote
operator|->
name|close
argument_list|()
expr_stmt|;
operator|delete
name|remote
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|server
operator|->
name|hasPendingConnections
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|//Connecting to the same address with different scope should normally fail
comment|//However it will pass if there are two interfaces connected to the same physical network,
comment|//e.g. connected via wired and wireless interfaces, or two wired NICs.
comment|//which is a reasonably common case.
comment|//So this is not auto tested.
name|qDeleteAll
argument_list|(
name|clients
argument_list|)
expr_stmt|;
name|qDeleteAll
argument_list|(
name|servers
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|eagainBlockingAccept
name|void
name|tst_QTcpServer
operator|::
name|eagainBlockingAccept
parameter_list|()
block|{
name|QTcpServer
name|server
decl_stmt|;
name|server
operator|.
name|listen
argument_list|(
name|QHostAddress
operator|::
name|LocalHost
argument_list|,
literal|7896
argument_list|)
expr_stmt|;
comment|// Receiving a new connection causes TemporaryError, but shouldn't pause accepting.
name|QTcpSocket
name|s
decl_stmt|;
name|s
operator|.
name|connectToHost
argument_list|(
name|QHostAddress
operator|::
name|LocalHost
argument_list|,
literal|7896
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
operator|&
name|server
argument_list|,
name|SIGNAL
argument_list|(
name|newConnection
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QTRY_COMPARE_WITH_TIMEOUT
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// To test try again, should connect just fine.
name|s
operator|.
name|connectToHost
argument_list|(
name|QHostAddress
operator|::
name|LocalHost
argument_list|,
literal|7896
argument_list|)
expr_stmt|;
name|QTRY_COMPARE_WITH_TIMEOUT
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|,
literal|500
argument_list|)
expr_stmt|;
name|s
operator|.
name|close
argument_list|()
expr_stmt|;
name|server
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QTcpServer
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qtcpserver.moc"
end_include
end_unit
