begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qtextstream.h>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qlocalsocket.h>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qlocalserver.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_UNIX
end_ifdef
begin_include
include|#
directive|include
file|<sys/types.h>
end_include
begin_include
include|#
directive|include
file|<sys/socket.h>
end_include
begin_include
include|#
directive|include
file|<sys/un.h>
end_include
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_comment
comment|// for unlink()
end_comment
begin_endif
endif|#
directive|endif
end_endif
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QLocalSocket::LocalSocketError
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QLocalSocket::LocalSocketState
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QLocalServer::SocketOption
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QFile::Permissions
argument_list|)
end_macro
begin_class
DECL|class|tst_QLocalSocket
class|class
name|tst_QLocalSocket
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|Q_SLOTS
public|:
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
comment|// basics
name|void
name|server_basic
parameter_list|()
function_decl|;
name|void
name|server_connectionsCount
parameter_list|()
function_decl|;
name|void
name|socket_basic
parameter_list|()
function_decl|;
name|void
name|listen_data
parameter_list|()
function_decl|;
name|void
name|listen
parameter_list|()
function_decl|;
name|void
name|listenAndConnect_data
parameter_list|()
function_decl|;
name|void
name|listenAndConnect
parameter_list|()
function_decl|;
name|void
name|connectWithOpen
parameter_list|()
function_decl|;
name|void
name|connectWithOldOpen
parameter_list|()
function_decl|;
name|void
name|sendData_data
parameter_list|()
function_decl|;
name|void
name|sendData
parameter_list|()
function_decl|;
name|void
name|readBufferOverflow
parameter_list|()
function_decl|;
name|void
name|fullPath
parameter_list|()
function_decl|;
name|void
name|hitMaximumConnections_data
parameter_list|()
function_decl|;
name|void
name|hitMaximumConnections
parameter_list|()
function_decl|;
name|void
name|setSocketDescriptor
parameter_list|()
function_decl|;
name|void
name|threadedConnection_data
parameter_list|()
function_decl|;
name|void
name|threadedConnection
parameter_list|()
function_decl|;
name|void
name|processConnection_data
parameter_list|()
function_decl|;
name|void
name|processConnection
parameter_list|()
function_decl|;
name|void
name|longPath
parameter_list|()
function_decl|;
name|void
name|waitForDisconnect
parameter_list|()
function_decl|;
name|void
name|waitForDisconnectByServer
parameter_list|()
function_decl|;
name|void
name|removeServer
parameter_list|()
function_decl|;
name|void
name|recycleServer
parameter_list|()
function_decl|;
name|void
name|recycleClientSocket
parameter_list|()
function_decl|;
name|void
name|multiConnect
parameter_list|()
function_decl|;
name|void
name|writeOnlySocket
parameter_list|()
function_decl|;
name|void
name|writeToClientAndDisconnect_data
parameter_list|()
function_decl|;
name|void
name|writeToClientAndDisconnect
parameter_list|()
function_decl|;
name|void
name|debug
parameter_list|()
function_decl|;
name|void
name|bytesWrittenSignal
parameter_list|()
function_decl|;
name|void
name|syncDisconnectNotify
parameter_list|()
function_decl|;
name|void
name|asyncDisconnectNotify
parameter_list|()
function_decl|;
name|void
name|verifySocketOptions
parameter_list|()
function_decl|;
name|void
name|verifySocketOptions_data
parameter_list|()
function_decl|;
name|void
name|verifyListenWithDescriptor
parameter_list|()
function_decl|;
name|void
name|verifyListenWithDescriptor_data
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|init
name|void
name|tst_QLocalSocket
operator|::
name|init
parameter_list|()
block|{
name|qRegisterMetaType
argument_list|<
name|QLocalSocket
operator|::
name|LocalSocketState
argument_list|>
argument_list|(
literal|"QLocalSocket::LocalSocketState"
argument_list|)
expr_stmt|;
name|qRegisterMetaType
argument_list|<
name|QLocalSocket
operator|::
name|LocalSocketError
argument_list|>
argument_list|(
literal|"QLocalSocket::LocalSocketError"
argument_list|)
expr_stmt|;
name|qRegisterMetaType
argument_list|<
name|QLocalServer
operator|::
name|SocketOption
argument_list|>
argument_list|(
literal|"QLocalServer::SocketOption"
argument_list|)
expr_stmt|;
name|qRegisterMetaType
argument_list|<
name|QFile
operator|::
name|Permissions
argument_list|>
argument_list|(
literal|"QFile::Permissions"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QLocalSocket
operator|::
name|cleanup
parameter_list|()
block|{ }
end_function
begin_class
DECL|class|LocalServer
class|class
name|LocalServer
super|:
specifier|public
name|QLocalServer
block|{
name|Q_OBJECT
public|public:
DECL|function|LocalServer
name|LocalServer
parameter_list|()
member_init_list|:
name|QLocalServer
argument_list|()
block|{
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|newConnection
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|slotNewConnection
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|listen
name|bool
name|listen
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
name|removeServer
argument_list|(
name|name
argument_list|)
expr_stmt|;
return|return
name|QLocalServer
operator|::
name|listen
argument_list|(
name|name
argument_list|)
return|;
block|}
DECL|member|hits
name|QList
argument_list|<
name|int
argument_list|>
name|hits
decl_stmt|;
protected|protected:
DECL|function|incomingConnection
name|void
name|incomingConnection
parameter_list|(
name|quintptr
name|socketDescriptor
parameter_list|)
block|{
name|hits
operator|.
name|append
argument_list|(
name|socketDescriptor
argument_list|)
expr_stmt|;
name|QLocalServer
operator|::
name|incomingConnection
argument_list|(
name|socketDescriptor
argument_list|)
expr_stmt|;
block|}
private|private
name|slots
private|:
DECL|function|slotNewConnection
name|void
name|slotNewConnection
parameter_list|()
block|{
name|QVERIFY
argument_list|(
operator|!
name|hits
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|hasPendingConnections
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|LocalSocket
class|class
name|LocalSocket
super|:
specifier|public
name|QLocalSocket
block|{
name|Q_OBJECT
public|public:
DECL|function|LocalSocket
name|LocalSocket
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QLocalSocket
argument_list|(
name|parent
argument_list|)
block|{
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|connected
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|slotConnected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|disconnected
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|slotDisconnected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|error
argument_list|(
name|QLocalSocket
operator|::
name|LocalSocketError
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|slotError
argument_list|(
name|QLocalSocket
operator|::
name|LocalSocketError
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|stateChanged
argument_list|(
name|QLocalSocket
operator|::
name|LocalSocketState
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|slotStateChanged
argument_list|(
name|QLocalSocket
operator|::
name|LocalSocketState
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|slotReadyRead
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
private|private
name|slots
private|:
DECL|function|slotConnected
name|void
name|slotConnected
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
name|state
argument_list|()
argument_list|,
name|QLocalSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
block|}
DECL|function|slotDisconnected
name|void
name|slotDisconnected
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
name|state
argument_list|()
argument_list|,
name|QLocalSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
block|}
DECL|function|slotError
name|void
name|slotError
parameter_list|(
name|QLocalSocket
operator|::
name|LocalSocketError
name|newError
parameter_list|)
block|{
name|QVERIFY
argument_list|(
name|errorString
argument_list|()
operator|!=
literal|"Unknown error"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|error
argument_list|()
argument_list|,
name|newError
argument_list|)
expr_stmt|;
block|}
DECL|function|slotStateChanged
name|void
name|slotStateChanged
parameter_list|(
name|QLocalSocket
operator|::
name|LocalSocketState
name|newState
parameter_list|)
block|{
name|QCOMPARE
argument_list|(
name|state
argument_list|()
argument_list|,
name|newState
argument_list|)
expr_stmt|;
block|}
DECL|function|slotReadyRead
name|void
name|slotReadyRead
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|bytesAvailable
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_comment
comment|// basic test make sure no segfaults and check default values
end_comment
begin_function
DECL|function|server_basic
name|void
name|tst_QLocalSocket
operator|::
name|server_basic
parameter_list|()
block|{
name|LocalServer
name|server
decl_stmt|;
name|QSignalSpy
name|spyNewConnection
argument_list|(
operator|&
name|server
argument_list|,
name|SIGNAL
argument_list|(
name|newConnection
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|server
operator|.
name|close
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|server
operator|.
name|errorString
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|server
operator|.
name|hasPendingConnections
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|server
operator|.
name|isListening
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|server
operator|.
name|maxPendingConnections
argument_list|()
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|server
operator|.
name|nextPendingConnection
argument_list|()
argument_list|,
operator|(
name|QLocalSocket
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|server
operator|.
name|serverName
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|server
operator|.
name|fullServerName
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|server
operator|.
name|serverError
argument_list|()
argument_list|,
name|QAbstractSocket
operator|::
name|UnknownSocketError
argument_list|)
expr_stmt|;
name|server
operator|.
name|setMaxPendingConnections
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|bool
name|timedOut
init|=
literal|true
decl_stmt|;
name|QCOMPARE
argument_list|(
name|server
operator|.
name|waitForNewConnection
argument_list|(
literal|3000
argument_list|,
operator|&
name|timedOut
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|timedOut
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|server
operator|.
name|listen
argument_list|(
name|QString
argument_list|()
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|server
operator|.
name|hits
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyNewConnection
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|server_connectionsCount
name|void
name|tst_QLocalSocket
operator|::
name|server_connectionsCount
parameter_list|()
block|{
name|LocalServer
name|server
decl_stmt|;
name|server
operator|.
name|setMaxPendingConnections
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|server
operator|.
name|maxPendingConnections
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// basic test make sure no segfaults and check default values
end_comment
begin_function
DECL|function|socket_basic
name|void
name|tst_QLocalSocket
operator|::
name|socket_basic
parameter_list|()
block|{
name|LocalSocket
name|socket
decl_stmt|;
name|QSignalSpy
name|spyConnected
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|connected
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spyDisconnected
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|disconnected
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spyError
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|error
argument_list|(
name|QLocalSocket
operator|::
name|LocalSocketError
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spyStateChanged
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|stateChanged
argument_list|(
name|QLocalSocket
operator|::
name|LocalSocketState
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spyReadyRead
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|serverName
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|fullServerName
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|socket
operator|.
name|abort
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|bytesAvailable
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|bytesToWrite
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|canReadLine
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
name|socket
operator|.
name|disconnectFromServer
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QLocalSocket
operator|::
name|UnknownSocketError
argument_list|,
name|socket
operator|.
name|error
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|.
name|errorString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|flush
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|isValid
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|readBufferSize
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|socket
operator|.
name|setReadBufferSize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
comment|//QCOMPARE(socket.socketDescriptor(), (qintptr)-1);
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|state
argument_list|()
argument_list|,
name|QLocalSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|waitForConnected
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QLocalSocket::waitForDisconnected() is not allowed in UnconnectedState"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|waitForDisconnected
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|waitForReadyRead
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyConnected
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyDisconnected
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyError
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyStateChanged
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyReadyRead
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|listen_data
name|void
name|tst_QLocalSocket
operator|::
name|listen_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"canListen"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"close"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|false
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"tst_localsocket"
argument_list|)
operator|<<
literal|"tst_localsocket"
operator|<<
literal|true
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"tst_localsocket"
argument_list|)
operator|<<
literal|"tst_localsocket"
operator|<<
literal|true
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_comment
comment|// start a server that listens, but don't connect a socket, make sure everything is in order
end_comment
begin_function
DECL|function|listen
name|void
name|tst_QLocalSocket
operator|::
name|listen
parameter_list|()
block|{
name|LocalServer
name|server
decl_stmt|;
name|QSignalSpy
name|spyNewConnection
argument_list|(
operator|&
name|server
argument_list|,
name|SIGNAL
argument_list|(
name|newConnection
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|canListen
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|close
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
operator|(
name|server
operator|.
name|listen
argument_list|(
name|name
argument_list|)
operator|==
name|canListen
operator|)
argument_list|,
name|server
operator|.
name|errorString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
comment|// test listening
name|QCOMPARE
argument_list|(
name|server
operator|.
name|serverName
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|fullServerName
argument_list|()
operator|.
name|contains
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|server
operator|.
name|isListening
argument_list|()
argument_list|,
name|canListen
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|server
operator|.
name|hasPendingConnections
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|server
operator|.
name|nextPendingConnection
argument_list|()
argument_list|,
operator|(
name|QLocalSocket
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|server
operator|.
name|hits
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyNewConnection
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|canListen
condition|)
block|{
name|QVERIFY
argument_list|(
name|server
operator|.
name|errorString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|server
operator|.
name|serverError
argument_list|()
argument_list|,
name|QAbstractSocket
operator|::
name|UnknownSocketError
argument_list|)
expr_stmt|;
comment|// already isListening
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QLocalServer::listen() called when already listening"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|server
operator|.
name|listen
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
operator|!
name|server
operator|.
name|errorString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|server
operator|.
name|serverError
argument_list|()
argument_list|,
name|QAbstractSocket
operator|::
name|HostNotFoundError
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|server
operator|.
name|maxPendingConnections
argument_list|()
argument_list|,
literal|30
argument_list|)
expr_stmt|;
name|bool
name|timedOut
init|=
literal|false
decl_stmt|;
name|QCOMPARE
argument_list|(
name|server
operator|.
name|waitForNewConnection
argument_list|(
literal|3000
argument_list|,
operator|&
name|timedOut
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|timedOut
argument_list|,
name|canListen
argument_list|)
expr_stmt|;
if|if
condition|(
name|close
condition|)
name|server
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|listenAndConnect_data
name|void
name|tst_QLocalSocket
operator|::
name|listenAndConnect_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"canListen"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"connections"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
name|int
name|connections
init|=
name|i
decl_stmt|;
if|if
condition|(
name|i
operator|==
literal|2
condition|)
name|connections
operator|=
literal|5
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"null %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|false
operator|<<
name|connections
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"tst_localsocket %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
literal|"tst_localsocket"
operator|<<
literal|true
operator|<<
name|connections
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|listenAndConnect
name|void
name|tst_QLocalSocket
operator|::
name|listenAndConnect
parameter_list|()
block|{
name|LocalServer
name|server
decl_stmt|;
name|QSignalSpy
name|spyNewConnection
argument_list|(
operator|&
name|server
argument_list|,
name|SIGNAL
argument_list|(
name|newConnection
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|canListen
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|server
operator|.
name|listen
argument_list|(
name|name
argument_list|)
argument_list|,
name|canListen
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|server
operator|.
name|serverError
argument_list|()
argument_list|,
name|canListen
condition|?
name|QAbstractSocket
operator|::
name|UnknownSocketError
else|:
name|QAbstractSocket
operator|::
name|HostNotFoundError
argument_list|)
expr_stmt|;
comment|// test creating connection(s)
name|QFETCH
argument_list|(
name|int
argument_list|,
name|connections
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QLocalSocket
modifier|*
argument_list|>
name|sockets
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|connections
condition|;
operator|++
name|i
control|)
block|{
name|LocalSocket
modifier|*
name|socket
init|=
operator|new
name|LocalSocket
decl_stmt|;
name|QSignalSpy
name|spyConnected
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|connected
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spyDisconnected
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|disconnected
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spyError
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|error
argument_list|(
name|QLocalSocket
operator|::
name|LocalSocketError
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spyStateChanged
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|stateChanged
argument_list|(
name|QLocalSocket
operator|::
name|LocalSocketState
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spyReadyRead
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|socket
operator|->
name|connectToServer
argument_list|(
name|name
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QT_LOCALSOCKET_TCP
argument_list|)
name|QTest
operator|::
name|qWait
argument_list|(
literal|250
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|serverName
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|fullServerName
argument_list|()
operator|.
name|contains
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|sockets
operator|.
name|append
argument_list|(
name|socket
argument_list|)
expr_stmt|;
if|if
condition|(
name|canListen
condition|)
block|{
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForConnected
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|errorString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Unknown error"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|error
argument_list|()
argument_list|,
name|QLocalSocket
operator|::
name|UnknownSocketError
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|state
argument_list|()
argument_list|,
name|QLocalSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
comment|//QVERIFY(socket->socketDescriptor() != -1);
name|QCOMPARE
argument_list|(
name|spyError
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|->
name|errorString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|error
argument_list|()
operator|!=
name|QLocalSocket
operator|::
name|UnknownSocketError
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|state
argument_list|()
argument_list|,
name|QLocalSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
comment|//QCOMPARE(socket->socketDescriptor(), -1);
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|QLocalSocket
operator|::
name|LocalSocketError
argument_list|>
argument_list|(
name|spyError
operator|.
name|first
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|QLocalSocket
operator|::
name|ServerNotFoundError
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|bytesAvailable
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|bytesToWrite
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|canReadLine
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|flush
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|isValid
argument_list|()
argument_list|,
name|canListen
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|readBufferSize
argument_list|()
argument_list|,
operator|(
name|qint64
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|waitForConnected
argument_list|(
literal|0
argument_list|)
argument_list|,
name|canListen
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|waitForReadyRead
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|spyConnected
operator|.
name|count
argument_list|()
argument_list|,
name|canListen
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyDisconnected
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// error signals
name|QVERIFY
argument_list|(
name|spyError
operator|.
name|count
argument_list|()
operator|>=
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|canListen
condition|)
block|{
if|if
condition|(
name|spyError
operator|.
name|count
argument_list|()
operator|>
literal|0
condition|)
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|QLocalSocket
operator|::
name|LocalSocketError
argument_list|>
argument_list|(
name|spyError
operator|.
name|first
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|QLocalSocket
operator|::
name|SocketTimeoutError
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|QLocalSocket
operator|::
name|LocalSocketError
argument_list|>
argument_list|(
name|spyError
operator|.
name|first
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|QLocalSocket
operator|::
name|ServerNotFoundError
argument_list|)
expr_stmt|;
block|}
comment|// Check first and last state
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|QLocalSocket
operator|::
name|LocalSocketState
argument_list|>
argument_list|(
name|spyStateChanged
operator|.
name|first
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|QLocalSocket
operator|::
name|ConnectingState
argument_list|)
expr_stmt|;
if|if
condition|(
name|canListen
condition|)
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|QLocalSocket
operator|::
name|LocalSocketState
argument_list|>
argument_list|(
name|spyStateChanged
operator|.
name|last
argument_list|()
index|[
literal|0
index|]
argument_list|)
argument_list|,
name|QLocalSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyStateChanged
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyReadyRead
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|bool
name|timedOut
init|=
literal|true
decl_stmt|;
name|QCOMPARE
argument_list|(
name|server
operator|.
name|waitForNewConnection
argument_list|(
literal|3000
argument_list|,
operator|&
name|timedOut
argument_list|)
argument_list|,
name|canListen
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|timedOut
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|server
operator|.
name|hasPendingConnections
argument_list|()
argument_list|,
name|canListen
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|server
operator|.
name|isListening
argument_list|()
argument_list|,
name|canListen
argument_list|)
expr_stmt|;
comment|// NOTE: socket disconnecting is not tested here
comment|// server checks post connection
if|if
condition|(
name|canListen
condition|)
block|{
name|QCOMPARE
argument_list|(
name|server
operator|.
name|serverName
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|fullServerName
argument_list|()
operator|.
name|contains
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|nextPendingConnection
argument_list|()
operator|!=
operator|(
name|QLocalSocket
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|server
operator|.
name|hits
operator|.
name|count
argument_list|()
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyNewConnection
operator|.
name|count
argument_list|()
argument_list|,
name|i
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|errorString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|server
operator|.
name|serverError
argument_list|()
argument_list|,
name|QAbstractSocket
operator|::
name|UnknownSocketError
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|server
operator|.
name|serverName
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|fullServerName
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|server
operator|.
name|nextPendingConnection
argument_list|()
argument_list|,
operator|(
name|QLocalSocket
operator|*
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyNewConnection
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|server
operator|.
name|hits
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|server
operator|.
name|errorString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|server
operator|.
name|serverError
argument_list|()
argument_list|,
name|QAbstractSocket
operator|::
name|HostNotFoundError
argument_list|)
expr_stmt|;
block|}
block|}
name|qDeleteAll
argument_list|(
name|sockets
operator|.
name|begin
argument_list|()
argument_list|,
name|sockets
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|server
operator|.
name|close
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|server
operator|.
name|hits
operator|.
name|count
argument_list|()
argument_list|,
operator|(
name|canListen
condition|?
name|connections
else|:
literal|0
operator|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyNewConnection
operator|.
name|count
argument_list|()
argument_list|,
operator|(
name|canListen
condition|?
name|connections
else|:
literal|0
operator|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|connectWithOpen
name|void
name|tst_QLocalSocket
operator|::
name|connectWithOpen
parameter_list|()
block|{
name|LocalServer
name|server
decl_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|listen
argument_list|(
literal|"tst_qlocalsocket"
argument_list|)
argument_list|)
expr_stmt|;
name|LocalSocket
name|socket
decl_stmt|;
name|socket
operator|.
name|setServerName
argument_list|(
literal|"tst_qlocalsocket"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|.
name|open
argument_list|()
argument_list|)
expr_stmt|;
name|bool
name|timedOut
init|=
literal|true
decl_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|waitForNewConnection
argument_list|(
literal|3000
argument_list|,
operator|&
name|timedOut
argument_list|)
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QT_LOCALSOCKET_TCP
argument_list|)
name|QTest
operator|::
name|qWait
argument_list|(
literal|250
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
operator|!
name|timedOut
argument_list|)
expr_stmt|;
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
name|server
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|connectWithOldOpen
name|void
name|tst_QLocalSocket
operator|::
name|connectWithOldOpen
parameter_list|()
block|{
class|class
name|OverriddenOpen
super|:
specifier|public
name|LocalSocket
block|{
public|public:
specifier|virtual
name|bool
name|open
parameter_list|(
name|OpenMode
name|mode
parameter_list|)
name|Q_DECL_OVERRIDE
block|{
return|return
name|QIODevice
operator|::
name|open
argument_list|(
name|mode
argument_list|)
return|;
block|}
block|}
class|;
name|LocalServer
name|server
decl_stmt|;
name|QCOMPARE
argument_list|(
name|server
operator|.
name|listen
argument_list|(
literal|"tst_qlocalsocket"
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|OverriddenOpen
name|socket
decl_stmt|;
name|socket
operator|.
name|connectToServer
argument_list|(
literal|"tst_qlocalsocket"
argument_list|)
expr_stmt|;
name|bool
name|timedOut
init|=
literal|true
decl_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|waitForNewConnection
argument_list|(
literal|3000
argument_list|,
operator|&
name|timedOut
argument_list|)
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QT_LOCALSOCKET_TCP
argument_list|)
name|QTest
operator|::
name|qWait
argument_list|(
literal|250
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
operator|!
name|timedOut
argument_list|)
expr_stmt|;
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
name|server
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendData_data
name|void
name|tst_QLocalSocket
operator|::
name|sendData_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"canListen"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"tst_localsocket"
argument_list|)
operator|<<
literal|"tst_localsocket"
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendData
name|void
name|tst_QLocalSocket
operator|::
name|sendData
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|canListen
argument_list|)
expr_stmt|;
name|LocalServer
name|server
decl_stmt|;
name|QSignalSpy
name|spy
argument_list|(
operator|&
name|server
argument_list|,
name|SIGNAL
argument_list|(
name|newConnection
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|server
operator|.
name|listen
argument_list|(
name|name
argument_list|)
argument_list|,
name|canListen
argument_list|)
expr_stmt|;
name|LocalSocket
name|socket
decl_stmt|;
name|QSignalSpy
name|spyConnected
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|connected
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spyDisconnected
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|disconnected
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spyError
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|error
argument_list|(
name|QLocalSocket
operator|::
name|LocalSocketError
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spyStateChanged
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|stateChanged
argument_list|(
name|QLocalSocket
operator|::
name|LocalSocketState
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spyReadyRead
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// test creating a connection
name|socket
operator|.
name|connectToServer
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|bool
name|timedOut
init|=
literal|true
decl_stmt|;
name|int
name|expectedReadyReadSignals
init|=
literal|0
decl_stmt|;
name|QCOMPARE
argument_list|(
name|server
operator|.
name|waitForNewConnection
argument_list|(
literal|3000
argument_list|,
operator|&
name|timedOut
argument_list|)
argument_list|,
name|canListen
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QT_LOCALSOCKET_TCP
argument_list|)
name|QTest
operator|::
name|qWait
argument_list|(
literal|250
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
operator|!
name|timedOut
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyConnected
operator|.
name|count
argument_list|()
argument_list|,
name|canListen
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|state
argument_list|()
argument_list|,
name|canListen
condition|?
name|QLocalSocket
operator|::
name|ConnectedState
else|:
name|QLocalSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
comment|// test sending/receiving data
if|if
condition|(
name|server
operator|.
name|hasPendingConnections
argument_list|()
condition|)
block|{
name|QString
name|testLine
init|=
literal|"test"
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|50000
condition|;
operator|++
name|i
control|)
name|testLine
operator|+=
literal|"a"
expr_stmt|;
name|QLocalSocket
modifier|*
name|serverSocket
init|=
name|server
operator|.
name|nextPendingConnection
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|serverSocket
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|serverSocket
operator|->
name|state
argument_list|()
argument_list|,
name|QLocalSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
name|QTextStream
name|out
argument_list|(
name|serverSocket
argument_list|)
decl_stmt|;
name|QTextStream
name|in
argument_list|(
operator|&
name|socket
argument_list|)
decl_stmt|;
name|out
operator|<<
name|testLine
operator|<<
name|endl
expr_stmt|;
name|bool
name|wrote
init|=
name|serverSocket
operator|->
name|waitForBytesWritten
argument_list|(
literal|3000
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|socket
operator|.
name|canReadLine
argument_list|()
condition|)
block|{
name|expectedReadyReadSignals
operator|=
literal|1
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|.
name|waitForReadyRead
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|socket
operator|.
name|bytesAvailable
argument_list|()
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|bytesToWrite
argument_list|()
argument_list|,
operator|(
name|qint64
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|flush
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|isValid
argument_list|()
argument_list|,
name|canListen
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|readBufferSize
argument_list|()
argument_list|,
operator|(
name|qint64
operator|)
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyReadyRead
operator|.
name|count
argument_list|()
argument_list|,
name|expectedReadyReadSignals
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testLine
operator|.
name|startsWith
argument_list|(
name|in
operator|.
name|readLine
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|wrote
operator|||
name|serverSocket
operator|->
name|waitForBytesWritten
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|serverSocket
operator|->
name|errorString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Unknown error"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|errorString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Unknown error"
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|socket
operator|.
name|disconnectFromServer
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyConnected
operator|.
name|count
argument_list|()
argument_list|,
name|canListen
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyDisconnected
operator|.
name|count
argument_list|()
argument_list|,
name|canListen
condition|?
literal|1
else|:
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyError
operator|.
name|count
argument_list|()
argument_list|,
name|canListen
condition|?
literal|0
else|:
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyStateChanged
operator|.
name|count
argument_list|()
argument_list|,
name|canListen
condition|?
literal|4
else|:
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyReadyRead
operator|.
name|count
argument_list|()
argument_list|,
name|canListen
condition|?
name|expectedReadyReadSignals
else|:
literal|0
argument_list|)
expr_stmt|;
name|server
operator|.
name|close
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|server
operator|.
name|hits
operator|.
name|count
argument_list|()
argument_list|,
operator|(
name|canListen
condition|?
literal|1
else|:
literal|0
operator|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
operator|(
name|canListen
condition|?
literal|1
else|:
literal|0
operator|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readBufferOverflow
name|void
name|tst_QLocalSocket
operator|::
name|readBufferOverflow
parameter_list|()
block|{
specifier|const
name|int
name|readBufferSize
init|=
literal|128
decl_stmt|;
specifier|const
name|int
name|dataBufferSize
init|=
name|readBufferSize
operator|*
literal|2
decl_stmt|;
specifier|const
name|QString
name|serverName
init|=
name|QLatin1String
argument_list|(
literal|"myPreciousTestServer"
argument_list|)
decl_stmt|;
name|LocalServer
name|server
decl_stmt|;
name|server
operator|.
name|listen
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|isListening
argument_list|()
argument_list|)
expr_stmt|;
name|LocalSocket
name|client
decl_stmt|;
name|client
operator|.
name|setReadBufferSize
argument_list|(
name|readBufferSize
argument_list|)
expr_stmt|;
name|client
operator|.
name|connectToServer
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
name|bool
name|timedOut
init|=
literal|true
decl_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|waitForNewConnection
argument_list|(
literal|3000
argument_list|,
operator|&
name|timedOut
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|timedOut
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|client
operator|.
name|state
argument_list|()
argument_list|,
name|QLocalSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|hasPendingConnections
argument_list|()
argument_list|)
expr_stmt|;
name|QLocalSocket
modifier|*
name|serverSocket
init|=
name|server
operator|.
name|nextPendingConnection
argument_list|()
decl_stmt|;
name|char
name|buffer
index|[
name|dataBufferSize
index|]
decl_stmt|;
name|memset
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
name|dataBufferSize
argument_list|)
expr_stmt|;
name|serverSocket
operator|->
name|write
argument_list|(
name|buffer
argument_list|,
name|dataBufferSize
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WIN
comment|// The data is not immediately sent, but buffered.
comment|// On Windows, the flushing is done by an asynchronous write operation.
comment|// However, this operation will never complete as long as the data is not
comment|// read by the other end, so the call below always times out.
comment|// On Unix, the flushing is synchronous and thus needs to be done before
comment|// attempting to read the data in the same thread. Buffering by the OS
comment|// prevents the deadlock seen on Windows.
name|serverSocket
operator|->
name|waitForBytesWritten
argument_list|()
expr_stmt|;
endif|#
directive|endif
comment|// wait until the first 128 bytes are ready to read
name|QVERIFY
argument_list|(
name|client
operator|.
name|waitForReadyRead
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|client
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
name|readBufferSize
argument_list|)
argument_list|,
name|qint64
argument_list|(
name|readBufferSize
argument_list|)
argument_list|)
expr_stmt|;
comment|// wait until the second 128 bytes are ready to read
name|QVERIFY
argument_list|(
name|client
operator|.
name|waitForReadyRead
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|client
operator|.
name|read
argument_list|(
name|buffer
argument_list|,
name|readBufferSize
argument_list|)
argument_list|,
name|qint64
argument_list|(
name|readBufferSize
argument_list|)
argument_list|)
expr_stmt|;
comment|// no more bytes available
name|QCOMPARE
argument_list|(
name|client
operator|.
name|bytesAvailable
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// QLocalSocket/Server can take a name or path, check that it works as expected
end_comment
begin_function
DECL|function|fullPath
name|void
name|tst_QLocalSocket
operator|::
name|fullPath
parameter_list|()
block|{
name|QLocalServer
name|server
decl_stmt|;
name|QString
name|name
init|=
literal|"qlocalsocket_pathtest"
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|QT_LOCALSOCKET_TCP
argument_list|)
name|QString
name|path
init|=
literal|"QLocalServer"
decl_stmt|;
elif|#
directive|elif
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
name|QString
name|path
init|=
literal|"\\\\.\\pipe\\"
decl_stmt|;
else|#
directive|else
name|QString
name|path
init|=
literal|"/tmp"
decl_stmt|;
endif|#
directive|endif
name|QString
name|serverName
init|=
name|path
operator|+
literal|'/'
operator|+
name|name
decl_stmt|;
name|QVERIFY2
argument_list|(
name|server
operator|.
name|listen
argument_list|(
name|serverName
argument_list|)
argument_list|,
name|server
operator|.
name|errorString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|server
operator|.
name|serverName
argument_list|()
argument_list|,
name|serverName
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|server
operator|.
name|fullServerName
argument_list|()
argument_list|,
name|serverName
argument_list|)
expr_stmt|;
name|LocalSocket
name|socket
decl_stmt|;
name|socket
operator|.
name|connectToServer
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|serverName
argument_list|()
argument_list|,
name|serverName
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|fullServerName
argument_list|()
argument_list|,
name|serverName
argument_list|)
expr_stmt|;
name|socket
operator|.
name|disconnectFromServer
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_LOCALSOCKET_TCP
name|QTest
operator|::
name|qWait
argument_list|(
literal|250
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|serverName
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|fullServerName
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hitMaximumConnections_data
name|void
name|tst_QLocalSocket
operator|::
name|hitMaximumConnections_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"max"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"none"
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"3"
argument_list|)
operator|<<
literal|3
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hitMaximumConnections
name|void
name|tst_QLocalSocket
operator|::
name|hitMaximumConnections
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|max
argument_list|)
expr_stmt|;
name|LocalServer
name|server
decl_stmt|;
name|QString
name|name
init|=
literal|"tst_localsocket"
decl_stmt|;
name|server
operator|.
name|setMaxPendingConnections
argument_list|(
name|max
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|server
operator|.
name|listen
argument_list|(
name|name
argument_list|)
argument_list|,
name|server
operator|.
name|errorString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|connections
init|=
name|server
operator|.
name|maxPendingConnections
argument_list|()
operator|+
literal|1
decl_stmt|;
name|QList
argument_list|<
name|QLocalSocket
modifier|*
argument_list|>
name|sockets
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|connections
condition|;
operator|++
name|i
control|)
block|{
name|LocalSocket
modifier|*
name|socket
init|=
operator|new
name|LocalSocket
decl_stmt|;
name|sockets
operator|.
name|append
argument_list|(
name|socket
argument_list|)
expr_stmt|;
name|socket
operator|->
name|connectToServer
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
name|bool
name|timedOut
init|=
literal|true
decl_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|waitForNewConnection
argument_list|(
literal|3000
argument_list|,
operator|&
name|timedOut
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|timedOut
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|hits
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|qDeleteAll
argument_list|(
name|sockets
operator|.
name|begin
argument_list|()
argument_list|,
name|sockets
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// check that state and mode are kept
end_comment
begin_function
DECL|function|setSocketDescriptor
name|void
name|tst_QLocalSocket
operator|::
name|setSocketDescriptor
parameter_list|()
block|{
name|LocalSocket
name|socket
decl_stmt|;
name|qintptr
name|minusOne
init|=
operator|-
literal|1
decl_stmt|;
name|socket
operator|.
name|setSocketDescriptor
argument_list|(
name|minusOne
argument_list|,
name|QLocalSocket
operator|::
name|ConnectingState
argument_list|,
name|QIODevice
operator|::
name|Append
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|socketDescriptor
argument_list|()
argument_list|,
name|minusOne
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|state
argument_list|()
argument_list|,
name|QLocalSocket
operator|::
name|ConnectingState
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|socket
operator|.
name|openMode
argument_list|()
operator|&
name|QIODevice
operator|::
name|Append
operator|)
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|Client
class|class
name|Client
super|:
specifier|public
name|QThread
block|{
public|public:
DECL|function|run
name|void
name|run
parameter_list|()
block|{
name|QString
name|testLine
init|=
literal|"test"
decl_stmt|;
name|LocalSocket
name|socket
decl_stmt|;
name|QSignalSpy
name|spyReadyRead
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|socket
operator|.
name|connectToServer
argument_list|(
literal|"qlocalsocket_threadtest"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|.
name|waitForConnected
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
comment|// We should *not* have this signal yet!
name|QCOMPARE
argument_list|(
name|spyReadyRead
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|socket
operator|.
name|waitForReadyRead
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spyReadyRead
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTextStream
name|in
argument_list|(
operator|&
name|socket
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|in
operator|.
name|readLine
argument_list|()
argument_list|,
name|testLine
argument_list|)
expr_stmt|;
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|Server
class|class
name|Server
super|:
specifier|public
name|QThread
block|{
public|public:
DECL|member|clients
name|int
name|clients
decl_stmt|;
DECL|member|mutex
name|QMutex
name|mutex
decl_stmt|;
DECL|member|wc
name|QWaitCondition
name|wc
decl_stmt|;
DECL|function|run
name|void
name|run
parameter_list|()
block|{
name|QString
name|testLine
init|=
literal|"test"
decl_stmt|;
name|LocalServer
name|server
decl_stmt|;
name|server
operator|.
name|setMaxPendingConnections
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|server
operator|.
name|listen
argument_list|(
literal|"qlocalsocket_threadtest"
argument_list|)
argument_list|,
name|server
operator|.
name|errorString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|wc
operator|.
name|wakeAll
argument_list|()
expr_stmt|;
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|int
name|done
init|=
name|clients
decl_stmt|;
while|while
condition|(
name|done
operator|>
literal|0
condition|)
block|{
name|bool
name|timedOut
init|=
literal|true
decl_stmt|;
name|QVERIFY2
argument_list|(
name|server
operator|.
name|waitForNewConnection
argument_list|(
literal|7000
argument_list|,
operator|&
name|timedOut
argument_list|)
argument_list|,
operator|(
name|QByteArrayLiteral
argument_list|(
literal|"done="
argument_list|)
operator|+
name|QByteArray
operator|::
name|number
argument_list|(
name|done
argument_list|)
operator|+
name|QByteArrayLiteral
argument_list|(
literal|", timedOut="
argument_list|)
operator|+
operator|(
name|timedOut
condition|?
literal|"true"
else|:
literal|"false"
operator|)
operator|)
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|timedOut
argument_list|)
expr_stmt|;
name|QLocalSocket
modifier|*
name|serverSocket
init|=
name|server
operator|.
name|nextPendingConnection
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|serverSocket
argument_list|)
expr_stmt|;
name|QTextStream
name|out
argument_list|(
name|serverSocket
argument_list|)
decl_stmt|;
name|out
operator|<<
name|testLine
operator|<<
name|endl
expr_stmt|;
name|QCOMPARE
argument_list|(
name|serverSocket
operator|->
name|state
argument_list|()
argument_list|,
name|QLocalSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|serverSocket
operator|->
name|waitForBytesWritten
argument_list|()
argument_list|,
name|serverSocket
operator|->
name|errorString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|serverSocket
operator|->
name|errorString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Unknown error"
argument_list|)
argument_list|)
expr_stmt|;
operator|--
name|done
expr_stmt|;
operator|delete
name|serverSocket
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|server
operator|.
name|hits
operator|.
name|count
argument_list|()
argument_list|,
name|clients
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|threadedConnection_data
name|void
name|tst_QLocalSocket
operator|::
name|threadedConnection_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"threads"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1 client"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2 clients"
argument_list|)
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5 clients"
argument_list|)
operator|<<
literal|5
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WINCE
name|QTest
operator|::
name|newRow
argument_list|(
literal|"10 clients"
argument_list|)
operator|<<
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"20 clients"
argument_list|)
operator|<<
literal|20
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|threadedConnection
name|void
name|tst_QLocalSocket
operator|::
name|threadedConnection
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|threads
argument_list|)
expr_stmt|;
name|Server
name|server
decl_stmt|;
name|server
operator|.
name|clients
operator|=
name|threads
expr_stmt|;
name|server
operator|.
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|server
operator|.
name|wc
operator|.
name|wait
argument_list|(
operator|&
name|server
operator|.
name|mutex
argument_list|)
expr_stmt|;
name|server
operator|.
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|QList
argument_list|<
name|Client
modifier|*
argument_list|>
name|clients
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threads
condition|;
operator|++
name|i
control|)
block|{
name|clients
operator|.
name|append
argument_list|(
operator|new
name|Client
argument_list|()
argument_list|)
expr_stmt|;
name|clients
operator|.
name|last
argument_list|()
operator|->
name|start
argument_list|()
expr_stmt|;
block|}
name|server
operator|.
name|wait
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|clients
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QVERIFY
argument_list|(
name|clients
operator|.
name|first
argument_list|()
operator|->
name|wait
argument_list|(
literal|3000
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|clients
operator|.
name|takeFirst
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|processConnection_data
name|void
name|tst_QLocalSocket
operator|::
name|processConnection_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"processes"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1 client"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2 clients"
argument_list|)
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5 clients"
argument_list|)
operator|<<
literal|5
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"30 clients"
argument_list|)
operator|<<
literal|30
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_PROCESS
end_ifndef
begin_class
DECL|class|ProcessOutputDumper
class|class
name|ProcessOutputDumper
block|{
public|public:
DECL|function|ProcessOutputDumper
name|ProcessOutputDumper
parameter_list|(
name|QProcess
modifier|*
name|p
init|=
literal|0
parameter_list|)
member_init_list|:
name|process
argument_list|(
name|p
argument_list|)
block|{}
DECL|function|~ProcessOutputDumper
name|~
name|ProcessOutputDumper
parameter_list|()
block|{
if|if
condition|(
name|process
condition|)
name|fputs
argument_list|(
name|process
operator|->
name|readAll
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
name|stdout
argument_list|)
expr_stmt|;
block|}
DECL|function|clear
name|void
name|clear
parameter_list|()
block|{
name|process
operator|=
literal|0
expr_stmt|;
block|}
private|private:
DECL|member|process
name|QProcess
modifier|*
name|process
decl_stmt|;
block|}
class|;
end_class
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/*!     Create external processes that produce and consume.  */
end_comment
begin_function
DECL|function|processConnection
name|void
name|tst_QLocalSocket
operator|::
name|processConnection
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QT_NO_PROCESS
name|QSKIP
argument_list|(
literal|"No qprocess support"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
else|#
directive|else
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|QSKIP
argument_list|(
literal|"The processConnection test is unstable on Mac. See QTBUG-39986."
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|Q_OS_WIN
specifier|const
name|QString
name|exeSuffix
init|=
name|QStringLiteral
argument_list|(
literal|".exe"
argument_list|)
decl_stmt|;
else|#
directive|else
specifier|const
name|QString
name|exeSuffix
decl_stmt|;
endif|#
directive|endif
specifier|const
name|QString
name|socketProcess
init|=
name|QFINDTESTDATA
argument_list|(
name|QStringLiteral
argument_list|(
literal|"socketprocess/socketprocess"
argument_list|)
operator|+
name|exeSuffix
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|QFile
operator|::
name|exists
argument_list|(
name|socketProcess
argument_list|)
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|processes
argument_list|)
expr_stmt|;
name|QStringList
name|serverArguments
init|=
name|QStringList
argument_list|()
operator|<<
literal|"--server"
operator|<<
name|QString
operator|::
name|number
argument_list|(
name|processes
argument_list|)
decl_stmt|;
name|QProcess
name|producer
decl_stmt|;
name|ProcessOutputDumper
name|producerOutputDumper
argument_list|(
operator|&
name|producer
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QProcess
modifier|*
argument_list|>
name|consumers
decl_stmt|;
name|producer
operator|.
name|start
argument_list|(
name|socketProcess
argument_list|,
name|serverArguments
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|producer
operator|.
name|waitForStarted
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|producer
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|processes
condition|;
operator|++
name|i
control|)
block|{
name|QStringList
name|arguments
init|=
name|QStringList
argument_list|()
operator|<<
literal|"--client"
decl_stmt|;
name|QProcess
modifier|*
name|p
init|=
operator|new
name|QProcess
decl_stmt|;
name|consumers
operator|.
name|append
argument_list|(
name|p
argument_list|)
expr_stmt|;
name|p
operator|->
name|start
argument_list|(
name|socketProcess
argument_list|,
name|arguments
argument_list|)
expr_stmt|;
block|}
while|while
condition|(
operator|!
name|consumers
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QProcess
modifier|*
name|consumer
init|=
name|consumers
operator|.
name|takeFirst
argument_list|()
decl_stmt|;
name|ProcessOutputDumper
name|consumerOutputDumper
argument_list|(
name|consumer
argument_list|)
decl_stmt|;
name|consumer
operator|->
name|waitForFinished
argument_list|(
literal|20000
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|consumer
operator|->
name|exitStatus
argument_list|()
argument_list|,
name|QProcess
operator|::
name|NormalExit
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|consumer
operator|->
name|exitCode
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|consumerOutputDumper
operator|.
name|clear
argument_list|()
expr_stmt|;
name|consumer
operator|->
name|terminate
argument_list|()
expr_stmt|;
operator|delete
name|consumer
expr_stmt|;
block|}
name|producer
operator|.
name|waitForFinished
argument_list|(
literal|15000
argument_list|)
expr_stmt|;
name|producerOutputDumper
operator|.
name|clear
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|longPath
name|void
name|tst_QLocalSocket
operator|::
name|longPath
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|Q_OS_WIN
name|QString
name|name
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|256
condition|;
operator|++
name|i
control|)
name|name
operator|+=
literal|'a'
expr_stmt|;
name|LocalServer
name|server
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|server
operator|.
name|listen
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|LocalSocket
name|socket
decl_stmt|;
name|socket
operator|.
name|connectToServer
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|state
argument_list|()
argument_list|,
name|QLocalSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|waitForDisconnect
name|void
name|tst_QLocalSocket
operator|::
name|waitForDisconnect
parameter_list|()
block|{
name|QString
name|name
init|=
literal|"tst_localsocket"
decl_stmt|;
name|LocalServer
name|server
decl_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|listen
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|LocalSocket
name|socket
decl_stmt|;
name|socket
operator|.
name|connectToServer
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|.
name|waitForConnected
argument_list|(
literal|3000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|waitForNewConnection
argument_list|(
literal|3000
argument_list|)
argument_list|)
expr_stmt|;
name|QLocalSocket
modifier|*
name|serverSocket
init|=
name|server
operator|.
name|nextPendingConnection
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|serverSocket
argument_list|)
expr_stmt|;
name|socket
operator|.
name|disconnectFromServer
argument_list|()
expr_stmt|;
name|QTime
name|timer
decl_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|serverSocket
operator|->
name|waitForDisconnected
argument_list|(
literal|3000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|timer
operator|.
name|elapsed
argument_list|()
operator|<
literal|2000
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|waitForDisconnectByServer
name|void
name|tst_QLocalSocket
operator|::
name|waitForDisconnectByServer
parameter_list|()
block|{
name|QString
name|name
init|=
literal|"tst_localsocket"
decl_stmt|;
name|LocalServer
name|server
decl_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|listen
argument_list|(
name|name
argument_list|)
argument_list|)
expr_stmt|;
name|LocalSocket
name|socket
decl_stmt|;
name|QSignalSpy
name|spy
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|disconnected
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|spy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|socket
operator|.
name|connectToServer
argument_list|(
name|name
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|.
name|waitForConnected
argument_list|(
literal|3000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|waitForNewConnection
argument_list|(
literal|3000
argument_list|)
argument_list|)
expr_stmt|;
name|QLocalSocket
modifier|*
name|serverSocket
init|=
name|server
operator|.
name|nextPendingConnection
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|serverSocket
argument_list|)
expr_stmt|;
name|serverSocket
operator|->
name|close
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|serverSocket
operator|->
name|state
argument_list|()
argument_list|,
name|QLocalSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|.
name|waitForDisconnected
argument_list|(
literal|3000
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeServer
name|void
name|tst_QLocalSocket
operator|::
name|removeServer
parameter_list|()
block|{
comment|// this is a hostile takeover, but recovering from a crash results in the same
name|QLocalServer
name|server
decl_stmt|,
name|server2
decl_stmt|;
name|QVERIFY
argument_list|(
name|QLocalServer
operator|::
name|removeServer
argument_list|(
literal|"cleanuptest"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|listen
argument_list|(
literal|"cleanuptest"
argument_list|)
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|Q_OS_WIN
comment|// on Windows, there can be several sockets listening on the same pipe
comment|// on Unix, there can only be one socket instance
name|QVERIFY
argument_list|(
operator|!
name|server2
operator|.
name|listen
argument_list|(
literal|"cleanuptest"
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|QLocalServer
operator|::
name|removeServer
argument_list|(
literal|"cleanuptest"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server2
operator|.
name|listen
argument_list|(
literal|"cleanuptest"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|recycleServer
name|void
name|tst_QLocalSocket
operator|::
name|recycleServer
parameter_list|()
block|{
name|QLocalServer
name|server
decl_stmt|;
name|QLocalSocket
name|client
decl_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|listen
argument_list|(
literal|"recycletest1"
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|connectToServer
argument_list|(
literal|"recycletest1"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|client
operator|.
name|waitForConnected
argument_list|(
literal|201
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|waitForNewConnection
argument_list|(
literal|201
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|nextPendingConnection
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|server
operator|.
name|close
argument_list|()
expr_stmt|;
name|client
operator|.
name|disconnectFromServer
argument_list|()
expr_stmt|;
name|qApp
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|listen
argument_list|(
literal|"recycletest2"
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|connectToServer
argument_list|(
literal|"recycletest2"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|client
operator|.
name|waitForConnected
argument_list|(
literal|202
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|waitForNewConnection
argument_list|(
literal|202
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|nextPendingConnection
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|recycleClientSocket
name|void
name|tst_QLocalSocket
operator|::
name|recycleClientSocket
parameter_list|()
block|{
specifier|const
name|QByteArrayList
name|lines
init|=
name|QByteArrayList
argument_list|()
operator|<<
literal|"Have you heard of that new band"
operator|<<
literal|"\"1023 Megabytes\"?"
operator|<<
literal|"They haven't made it to a gig yet."
decl_stmt|;
name|QLocalServer
name|server
decl_stmt|;
specifier|const
name|QString
name|serverName
init|=
name|QStringLiteral
argument_list|(
literal|"recycleClientSocket"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|listen
argument_list|(
name|serverName
argument_list|)
argument_list|)
expr_stmt|;
name|QLocalSocket
name|client
decl_stmt|;
name|QSignalSpy
name|clientReadyReadSpy
argument_list|(
operator|&
name|client
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|clientErrorSpy
argument_list|(
operator|&
name|client
argument_list|,
name|SIGNAL
argument_list|(
name|error
argument_list|(
name|QLocalSocket
operator|::
name|LocalSocketError
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lines
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|client
operator|.
name|abort
argument_list|()
expr_stmt|;
name|clientReadyReadSpy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|client
operator|.
name|connectToServer
argument_list|(
name|serverName
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|client
operator|.
name|waitForConnected
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|waitForNewConnection
argument_list|()
argument_list|)
expr_stmt|;
name|QLocalSocket
modifier|*
name|serverSocket
init|=
name|server
operator|.
name|nextPendingConnection
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|serverSocket
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|serverSocket
argument_list|,
operator|&
name|QLocalSocket
operator|::
name|disconnected
argument_list|,
operator|&
name|QLocalSocket
operator|::
name|deleteLater
argument_list|)
expr_stmt|;
name|serverSocket
operator|->
name|write
argument_list|(
name|lines
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|serverSocket
operator|->
name|flush
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|clientReadyReadSpy
operator|.
name|wait
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|client
operator|.
name|readAll
argument_list|()
argument_list|,
name|lines
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|clientErrorSpy
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|multiConnect
name|void
name|tst_QLocalSocket
operator|::
name|multiConnect
parameter_list|()
block|{
name|QLocalServer
name|server
decl_stmt|;
name|QLocalSocket
name|client1
decl_stmt|;
name|QLocalSocket
name|client2
decl_stmt|;
name|QLocalSocket
name|client3
decl_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|listen
argument_list|(
literal|"multiconnect"
argument_list|)
argument_list|)
expr_stmt|;
name|client1
operator|.
name|connectToServer
argument_list|(
literal|"multiconnect"
argument_list|)
expr_stmt|;
name|client2
operator|.
name|connectToServer
argument_list|(
literal|"multiconnect"
argument_list|)
expr_stmt|;
name|client3
operator|.
name|connectToServer
argument_list|(
literal|"multiconnect"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|client1
operator|.
name|waitForConnected
argument_list|(
literal|201
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|client2
operator|.
name|waitForConnected
argument_list|(
literal|202
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|client3
operator|.
name|waitForConnected
argument_list|(
literal|203
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|waitForNewConnection
argument_list|(
literal|201
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|nextPendingConnection
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|waitForNewConnection
argument_list|(
literal|202
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|nextPendingConnection
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|waitForNewConnection
argument_list|(
literal|203
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|nextPendingConnection
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeOnlySocket
name|void
name|tst_QLocalSocket
operator|::
name|writeOnlySocket
parameter_list|()
block|{
name|QLocalServer
name|server
decl_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|listen
argument_list|(
literal|"writeOnlySocket"
argument_list|)
argument_list|)
expr_stmt|;
name|QLocalSocket
name|client
decl_stmt|;
name|client
operator|.
name|connectToServer
argument_list|(
literal|"writeOnlySocket"
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|client
operator|.
name|waitForConnected
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|waitForNewConnection
argument_list|(
literal|200
argument_list|)
argument_list|)
expr_stmt|;
name|QLocalSocket
modifier|*
name|serverSocket
init|=
name|server
operator|.
name|nextPendingConnection
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|serverSocket
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|client
operator|.
name|bytesAvailable
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|client
operator|.
name|state
argument_list|()
argument_list|,
name|QLocalSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeToClientAndDisconnect_data
name|void
name|tst_QLocalSocket
operator|::
name|writeToClientAndDisconnect_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"chunks"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"one chunk"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"several chunks"
argument_list|)
operator|<<
literal|20
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeToClientAndDisconnect
name|void
name|tst_QLocalSocket
operator|::
name|writeToClientAndDisconnect
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|chunks
argument_list|)
expr_stmt|;
name|QLocalServer
name|server
decl_stmt|;
name|QLocalSocket
name|client
decl_stmt|;
name|QSignalSpy
name|readChannelFinishedSpy
argument_list|(
operator|&
name|client
argument_list|,
name|SIGNAL
argument_list|(
name|readChannelFinished
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|listen
argument_list|(
literal|"writeAndDisconnectServer"
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|connectToServer
argument_list|(
literal|"writeAndDisconnectServer"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|client
operator|.
name|waitForConnected
argument_list|(
literal|200
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|waitForNewConnection
argument_list|(
literal|200
argument_list|)
argument_list|)
expr_stmt|;
name|QLocalSocket
modifier|*
name|clientSocket
init|=
name|server
operator|.
name|nextPendingConnection
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|clientSocket
argument_list|)
expr_stmt|;
name|char
name|buffer
index|[
literal|100
index|]
decl_stmt|;
name|memset
argument_list|(
name|buffer
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|buffer
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|chunks
condition|;
operator|++
name|i
control|)
name|QCOMPARE
argument_list|(
name|clientSocket
operator|->
name|write
argument_list|(
name|buffer
argument_list|,
sizeof|sizeof
argument_list|(
name|buffer
argument_list|)
argument_list|)
argument_list|,
name|qint64
argument_list|(
sizeof|sizeof
argument_list|(
name|buffer
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|clientSocket
operator|->
name|bytesToWrite
argument_list|()
condition|)
name|QVERIFY
argument_list|(
name|clientSocket
operator|->
name|waitForBytesWritten
argument_list|()
argument_list|)
expr_stmt|;
name|clientSocket
operator|->
name|close
argument_list|()
expr_stmt|;
name|server
operator|.
name|close
argument_list|()
expr_stmt|;
name|client
operator|.
name|waitForDisconnected
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|readChannelFinishedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|const
name|QByteArray
name|received
init|=
name|client
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|received
operator|.
name|size
argument_list|()
argument_list|,
name|qint64
argument_list|(
sizeof|sizeof
argument_list|(
name|buffer
argument_list|)
operator|*
name|chunks
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|client
operator|.
name|state
argument_list|()
argument_list|,
name|QLocalSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|debug
name|void
name|tst_QLocalSocket
operator|::
name|debug
parameter_list|()
block|{
comment|// Make sure this compiles
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtDebugMsg
argument_list|,
literal|"QLocalSocket::ConnectionRefusedError QLocalSocket::UnconnectedState"
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
name|QLocalSocket
operator|::
name|ConnectionRefusedError
operator|<<
name|QLocalSocket
operator|::
name|UnconnectedState
expr_stmt|;
block|}
end_function
begin_class
DECL|class|WriteThread
class|class
name|WriteThread
super|:
specifier|public
name|QThread
block|{
name|Q_OBJECT
public|public:
DECL|function|run
name|void
name|run
parameter_list|()
block|{
name|QLocalSocket
name|socket
decl_stmt|;
name|socket
operator|.
name|connectToServer
argument_list|(
literal|"qlocalsocket_readyread"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|socket
operator|.
name|waitForConnected
argument_list|(
literal|3000
argument_list|)
condition|)
name|exec
argument_list|()
expr_stmt|;
name|connect
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|bytesWritten
argument_list|(
name|qint64
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|bytesWritten
argument_list|(
name|qint64
argument_list|)
argument_list|)
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
name|socket
operator|.
name|write
argument_list|(
literal|"testing\n"
argument_list|)
expr_stmt|;
name|exec
argument_list|()
expr_stmt|;
block|}
public|public
name|slots
public|:
DECL|function|bytesWritten
name|void
name|bytesWritten
parameter_list|(
name|qint64
parameter_list|)
block|{
name|exit
argument_list|()
expr_stmt|;
block|}
private|private:
block|}
class|;
end_class
begin_comment
comment|/*     Tests the emission of the bytesWritten(qint64)     signal.      Create a thread that will write to a socket.     If the bytesWritten(qint64) signal is generated,     the slot connected to it will exit the thread,     indicating test success.  */
end_comment
begin_function
DECL|function|bytesWrittenSignal
name|void
name|tst_QLocalSocket
operator|::
name|bytesWrittenSignal
parameter_list|()
block|{
name|QLocalServer
name|server
decl_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|listen
argument_list|(
literal|"qlocalsocket_readyread"
argument_list|)
argument_list|)
expr_stmt|;
name|WriteThread
name|writeThread
decl_stmt|;
name|writeThread
operator|.
name|start
argument_list|()
expr_stmt|;
name|bool
name|timedOut
init|=
literal|false
decl_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|waitForNewConnection
argument_list|(
literal|3000
argument_list|,
operator|&
name|timedOut
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|timedOut
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|writeThread
operator|.
name|wait
argument_list|(
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|syncDisconnectNotify
name|void
name|tst_QLocalSocket
operator|::
name|syncDisconnectNotify
parameter_list|()
block|{
name|QLocalServer
name|server
decl_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|listen
argument_list|(
literal|"syncDisconnectNotify"
argument_list|)
argument_list|)
expr_stmt|;
name|QLocalSocket
name|client
decl_stmt|;
name|client
operator|.
name|connectToServer
argument_list|(
literal|"syncDisconnectNotify"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|waitForNewConnection
argument_list|()
argument_list|)
expr_stmt|;
name|QLocalSocket
modifier|*
name|serverSocket
init|=
name|server
operator|.
name|nextPendingConnection
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|serverSocket
argument_list|)
expr_stmt|;
operator|delete
name|serverSocket
expr_stmt|;
name|QCOMPARE
argument_list|(
name|client
operator|.
name|waitForReadyRead
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|asyncDisconnectNotify
name|void
name|tst_QLocalSocket
operator|::
name|asyncDisconnectNotify
parameter_list|()
block|{
name|QLocalServer
name|server
decl_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|listen
argument_list|(
literal|"asyncDisconnectNotify"
argument_list|)
argument_list|)
expr_stmt|;
name|QLocalSocket
name|client
decl_stmt|;
name|QSignalSpy
name|disconnectedSpy
argument_list|(
operator|&
name|client
argument_list|,
name|SIGNAL
argument_list|(
name|disconnected
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|client
operator|.
name|connectToServer
argument_list|(
literal|"asyncDisconnectNotify"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|waitForNewConnection
argument_list|()
argument_list|)
expr_stmt|;
name|QLocalSocket
modifier|*
name|serverSocket
init|=
name|server
operator|.
name|nextPendingConnection
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|serverSocket
argument_list|)
expr_stmt|;
operator|delete
name|serverSocket
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
operator|!
name|disconnectedSpy
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|verifySocketOptions_data
name|void
name|tst_QLocalSocket
operator|::
name|verifySocketOptions_data
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_LINUX
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"service"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QLocalServer
operator|::
name|SocketOption
argument_list|>
argument_list|(
literal|"opts"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QFile
operator|::
name|Permissions
argument_list|>
argument_list|(
literal|"perms"
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|Permissions
name|p
init|=
name|QFile
operator|::
name|ExeOwner
operator||
name|QFile
operator|::
name|WriteOwner
operator||
name|QFile
operator|::
name|ReadOwner
operator||
name|QFile
operator|::
name|ExeUser
operator||
name|QFile
operator|::
name|WriteUser
operator||
name|QFile
operator|::
name|ReadUser
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"user"
argument_list|)
operator|<<
literal|"userPerms"
operator|<<
name|QLocalServer
operator|::
name|UserAccessOption
operator|<<
name|p
expr_stmt|;
name|p
operator|=
name|QFile
operator|::
name|ExeGroup
operator||
name|QFile
operator|::
name|WriteGroup
operator||
name|QFile
operator|::
name|ReadGroup
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"group"
argument_list|)
operator|<<
literal|"groupPerms"
operator|<<
name|QLocalServer
operator|::
name|GroupAccessOption
operator|<<
name|p
expr_stmt|;
name|p
operator|=
name|QFile
operator|::
name|ExeOther
operator||
name|QFile
operator|::
name|WriteOther
operator||
name|QFile
operator|::
name|ReadOther
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"other"
argument_list|)
operator|<<
literal|"otherPerms"
operator|<<
name|QLocalServer
operator|::
name|OtherAccessOption
operator|<<
name|p
expr_stmt|;
name|p
operator|=
name|QFile
operator|::
name|ExeOwner
operator||
name|QFile
operator|::
name|WriteOwner
operator||
name|QFile
operator|::
name|ReadOwner
operator||
name|QFile
operator|::
name|ExeUser
operator||
name|QFile
operator|::
name|WriteUser
operator||
name|QFile
operator|::
name|ReadUser
operator||
name|QFile
operator|::
name|ExeGroup
operator||
name|QFile
operator|::
name|WriteGroup
operator||
name|QFile
operator|::
name|ReadGroup
operator||
name|QFile
operator|::
name|ExeOther
operator||
name|QFile
operator|::
name|WriteOther
operator||
name|QFile
operator|::
name|ReadOther
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"all"
argument_list|)
operator|<<
literal|"worldPerms"
operator|<<
name|QLocalServer
operator|::
name|WorldAccessOption
operator|<<
name|p
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|verifySocketOptions
name|void
name|tst_QLocalSocket
operator|::
name|verifySocketOptions
parameter_list|()
block|{
comment|// These are only guaranteed to be useful on linux at this time
ifdef|#
directive|ifdef
name|Q_OS_LINUX
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|service
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QLocalServer
operator|::
name|SocketOption
argument_list|,
name|opts
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QFile
operator|::
name|Permissions
argument_list|,
name|perms
argument_list|)
expr_stmt|;
name|QLocalServer
operator|::
name|removeServer
argument_list|(
name|service
argument_list|)
expr_stmt|;
name|QLocalServer
name|server
decl_stmt|;
name|server
operator|.
name|setSocketOptions
argument_list|(
name|opts
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|server
operator|.
name|listen
argument_list|(
name|service
argument_list|)
argument_list|,
literal|"service failed to start listening"
argument_list|)
expr_stmt|;
comment|// find the socket
name|QString
name|fullServerPath
init|=
name|QDir
operator|::
name|cleanPath
argument_list|(
name|QDir
operator|::
name|tempPath
argument_list|()
argument_list|)
decl_stmt|;
name|fullServerPath
operator|+=
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
operator|+
name|service
expr_stmt|;
name|QFile
name|socketFile
argument_list|(
name|fullServerPath
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|perms
operator|==
name|socketFile
operator|.
name|permissions
argument_list|()
argument_list|,
literal|"permissions on the socket don't match"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|verifyListenWithDescriptor
name|void
name|tst_QLocalSocket
operator|::
name|verifyListenWithDescriptor
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_UNIX
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|abstract
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|bound
argument_list|)
expr_stmt|;
comment|//    qDebug()<< "socket"<< path<< abstract;
name|int
name|listenSocket
decl_stmt|;
if|if
condition|(
name|bound
condition|)
block|{
comment|// create the unix socket
name|listenSocket
operator|=
operator|::
name|socket
argument_list|(
name|PF_UNIX
argument_list|,
name|SOCK_STREAM
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|listenSocket
operator|!=
operator|-
literal|1
argument_list|,
literal|"failed to create test socket"
argument_list|)
expr_stmt|;
comment|// Construct the unix address
name|struct
operator|::
name|sockaddr_un
name|addr
decl_stmt|;
name|addr
operator|.
name|sun_family
operator|=
name|PF_UNIX
expr_stmt|;
name|QVERIFY2
argument_list|(
sizeof|sizeof
argument_list|(
name|addr
operator|.
name|sun_path
argument_list|)
operator|>
operator|(
operator|(
name|uint
operator|)
name|path
operator|.
name|size
argument_list|()
operator|+
literal|1
operator|)
argument_list|,
literal|"path to large to create socket"
argument_list|)
expr_stmt|;
operator|::
name|memset
argument_list|(
name|addr
operator|.
name|sun_path
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
argument_list|(
name|addr
operator|.
name|sun_path
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|abstract
condition|)
operator|::
name|memcpy
argument_list|(
name|addr
operator|.
name|sun_path
operator|+
literal|1
argument_list|,
name|path
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
name|path
operator|.
name|toLatin1
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
else|else
operator|::
name|memcpy
argument_list|(
name|addr
operator|.
name|sun_path
argument_list|,
name|path
operator|.
name|toLatin1
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
name|path
operator|.
name|toLatin1
argument_list|()
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|.
name|startsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
condition|)
block|{
operator|::
name|unlink
argument_list|(
name|path
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QVERIFY2
argument_list|(
operator|-
literal|1
operator|!=
operator|::
name|bind
argument_list|(
name|listenSocket
argument_list|,
operator|(
name|sockaddr
operator|*
operator|)
operator|&
name|addr
argument_list|,
sizeof|sizeof
argument_list|(
name|sockaddr_un
argument_list|)
argument_list|)
argument_list|,
literal|"failed to bind test socket to address"
argument_list|)
expr_stmt|;
comment|// listen for connections
name|QVERIFY2
argument_list|(
operator|-
literal|1
operator|!=
operator|::
name|listen
argument_list|(
name|listenSocket
argument_list|,
literal|50
argument_list|)
argument_list|,
literal|"failed to call listen on test socket"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|int
name|fds
index|[
literal|2
index|]
decl_stmt|;
name|QVERIFY2
argument_list|(
operator|-
literal|1
operator|!=
operator|::
name|socketpair
argument_list|(
name|PF_UNIX
argument_list|,
name|SOCK_STREAM
argument_list|,
literal|0
argument_list|,
name|fds
argument_list|)
argument_list|,
literal|"failed to create socket pair"
argument_list|)
expr_stmt|;
name|listenSocket
operator|=
name|fds
index|[
literal|0
index|]
expr_stmt|;
name|close
argument_list|(
name|fds
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
block|}
name|QLocalServer
name|server
decl_stmt|;
name|QVERIFY2
argument_list|(
name|server
operator|.
name|listen
argument_list|(
name|listenSocket
argument_list|)
argument_list|,
literal|"failed to start create QLocalServer with local socket"
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_LINUX
specifier|const
name|QChar
name|at
argument_list|(
name|QLatin1Char
argument_list|(
literal|'@'
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|bound
condition|)
block|{
name|QCOMPARE
argument_list|(
name|server
operator|.
name|serverName
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|at
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|server
operator|.
name|fullServerName
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|,
name|at
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|abstract
condition|)
block|{
name|QVERIFY2
argument_list|(
name|server
operator|.
name|fullServerName
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|==
name|at
argument_list|,
literal|"abstract sockets should start with a '@'"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|server
operator|.
name|fullServerName
argument_list|()
argument_list|,
name|path
argument_list|)
expr_stmt|;
if|if
condition|(
name|path
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"/"
argument_list|)
argument_list|)
condition|)
block|{
name|QVERIFY2
argument_list|(
name|server
operator|.
name|serverName
argument_list|()
operator|==
name|path
operator|.
name|mid
argument_list|(
name|path
operator|.
name|lastIndexOf
argument_list|(
name|QLatin1Char
argument_list|(
literal|'/'
argument_list|)
argument_list|)
operator|+
literal|1
argument_list|)
argument_list|,
literal|"server name invalid short name"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY2
argument_list|(
name|server
operator|.
name|serverName
argument_list|()
operator|==
name|path
argument_list|,
literal|"servier name doesn't match the path provided"
argument_list|)
expr_stmt|;
block|}
block|}
else|#
directive|else
name|QVERIFY
argument_list|(
name|server
operator|.
name|serverName
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|fullServerName
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|verifyListenWithDescriptor_data
name|void
name|tst_QLocalSocket
operator|::
name|verifyListenWithDescriptor_data
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_UNIX
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"abstract"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"bound"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"normal"
argument_list|)
operator|<<
name|QDir
operator|::
name|tempPath
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"/testsocket"
argument_list|)
operator|<<
literal|false
operator|<<
literal|true
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_LINUX
name|QTest
operator|::
name|newRow
argument_list|(
literal|"abstract"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"abstractsocketname"
argument_list|)
operator|<<
literal|true
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"abstractwithslash"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"abstractsocketwitha/inthename"
argument_list|)
operator|<<
literal|true
operator|<<
literal|true
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no path"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/invalid/no path name specified"
argument_list|)
operator|<<
literal|true
operator|<<
literal|false
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QLocalSocket
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qlocalsocket.moc"
end_include
end_unit
