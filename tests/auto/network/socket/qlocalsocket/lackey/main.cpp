begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qscriptengine.h>
end_include
begin_include
include|#
directive|include
file|<QFile>
end_include
begin_include
include|#
directive|include
file|<QTest>
end_include
begin_include
include|#
directive|include
file|<qlocalsocket.h>
end_include
begin_include
include|#
directive|include
file|<qlocalserver.h>
end_include
begin_class
DECL|class|QScriptLocalSocket
class|class
name|QScriptLocalSocket
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
name|Q_PROPERTY
parameter_list|(
name|QString
name|serverName
name|WRITE
name|connectToServer
name|READ
name|serverName
parameter_list|)
specifier|public
private|:
DECL|function|QScriptLocalSocket
name|QScriptLocalSocket
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
block|{
name|lc
operator|=
operator|new
name|QLocalSocket
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
public|public
name|slots
public|:
DECL|function|serverName
name|QString
name|serverName
parameter_list|()
block|{
return|return
name|lc
operator|->
name|serverName
argument_list|()
return|;
block|}
DECL|function|connectToServer
name|void
name|connectToServer
parameter_list|(
specifier|const
name|QString
modifier|&
name|name
parameter_list|)
block|{
name|lc
operator|->
name|connectToServer
argument_list|(
name|name
argument_list|)
expr_stmt|;
block|}
DECL|function|sleep
name|void
name|sleep
parameter_list|(
name|int
name|x
parameter_list|)
specifier|const
block|{
name|QTest
operator|::
name|qSleep
argument_list|(
name|x
argument_list|)
expr_stmt|;
block|}
DECL|function|isConnected
name|bool
name|isConnected
parameter_list|()
block|{
return|return
operator|(
name|lc
operator|->
name|state
argument_list|()
operator|==
name|QLocalSocket
operator|::
name|ConnectedState
operator|)
return|;
block|}
DECL|function|open
name|void
name|open
parameter_list|()
block|{
name|lc
operator|->
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
expr_stmt|;
block|}
DECL|function|waitForConnected
name|bool
name|waitForConnected
parameter_list|()
block|{
return|return
name|lc
operator|->
name|waitForConnected
argument_list|(
literal|100000
argument_list|)
return|;
block|}
DECL|function|waitForReadyRead
name|void
name|waitForReadyRead
parameter_list|()
block|{
name|lc
operator|->
name|waitForReadyRead
argument_list|()
expr_stmt|;
block|}
DECL|function|write
name|void
name|write
parameter_list|(
specifier|const
name|QString
modifier|&
name|string
parameter_list|)
block|{
name|QTextStream
name|out
argument_list|(
name|lc
argument_list|)
decl_stmt|;
name|out
operator|<<
name|string
operator|<<
name|endl
expr_stmt|;
block|}
DECL|function|waitForBytesWritten
name|bool
name|waitForBytesWritten
parameter_list|(
name|int
name|t
init|=
literal|3000
parameter_list|)
block|{
return|return
name|lc
operator|->
name|waitForBytesWritten
argument_list|(
name|t
argument_list|)
return|;
block|}
DECL|function|readLine
name|QString
name|readLine
parameter_list|()
block|{
name|QTextStream
name|in
argument_list|(
name|lc
argument_list|)
decl_stmt|;
return|return
name|in
operator|.
name|readLine
argument_list|()
return|;
block|}
DECL|function|errorString
name|QString
name|errorString
parameter_list|()
block|{
return|return
name|lc
operator|->
name|errorString
argument_list|()
return|;
block|}
DECL|function|close
name|void
name|close
parameter_list|()
block|{
name|lc
operator|->
name|close
argument_list|()
expr_stmt|;
block|}
public|public:
DECL|member|lc
name|QLocalSocket
modifier|*
name|lc
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|QScriptLocalServer
class|class
name|QScriptLocalServer
super|:
specifier|public
name|QLocalServer
block|{
name|Q_OBJECT
name|Q_PROPERTY
argument_list|(
name|int
name|maxPendingConnections
name|WRITE
name|setMaxPendingConnections
name|READ
name|maxPendingConnections
argument_list|)
name|Q_PROPERTY
argument_list|(
name|QString
name|name
name|WRITE
name|listen
name|READ
name|serverName
argument_list|)
name|Q_PROPERTY
argument_list|(
name|bool
name|listening
name|READ
name|isListening
argument_list|)
decl|public
range|:
DECL|function|QScriptLocalServer
name|QScriptLocalServer
argument_list|(
name|QObject
operator|*
name|parent
operator|=
literal|0
argument_list|)
operator|:
name|QLocalServer
argument_list|(
argument|parent
argument_list|)
block|{     }
specifier|public
name|slots
operator|:
DECL|function|listen
name|bool
name|listen
argument_list|(
argument|const QString&name
argument_list|)
block|{
if|if
condition|(
operator|!
name|QLocalServer
operator|::
name|listen
argument_list|(
name|name
argument_list|)
condition|)
block|{
if|if
condition|(
name|serverError
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|AddressInUseError
condition|)
block|{
name|QFile
operator|::
name|remove
argument_list|(
name|serverName
argument_list|()
argument_list|)
block|;
return|return
name|QLocalServer
operator|::
name|listen
argument_list|(
name|name
argument_list|)
return|;
block|}
return|return
literal|false
return|;
block|}
return|return
literal|true
return|;
block|}
DECL|function|nextConnection
name|QScriptLocalSocket
modifier|*
name|nextConnection
argument_list|()
argument_list|{
name|QLocalSocket
operator|*
name|other
operator|=
name|nextPendingConnection
argument_list|()
argument_list|;
name|QScriptLocalSocket
operator|*
name|s
operator|=
operator|new
name|QScriptLocalSocket
argument_list|(
name|this
argument_list|)
argument_list|;
operator|delete
name|s
operator|->
name|lc
argument_list|;
name|s
operator|->
name|lc
operator|=
name|other
argument_list|;         return
name|s
argument_list|;     }
DECL|function|waitForNewConnection
name|bool
name|waitForNewConnection
argument_list|()
argument_list|{         return
name|QLocalServer
operator|::
name|waitForNewConnection
argument_list|(
literal|30000
argument_list|)
argument_list|;     }
DECL|function|errorString
name|QString
name|errorString
argument_list|()
argument_list|{         return
name|QLocalServer
operator|::
name|errorString
argument_list|()
argument_list|;     }
end_class
begin_function
unit|};
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|_q_ScriptValueFromQObject
specifier|static
name|QScriptValue
name|_q_ScriptValueFromQObject
parameter_list|(
name|QScriptEngine
modifier|*
name|engine
parameter_list|,
name|T
modifier|*
specifier|const
modifier|&
name|in
parameter_list|)
block|{
return|return
name|engine
operator|->
name|newQObject
argument_list|(
name|in
argument_list|)
return|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|_q_ScriptValueToQObject
specifier|static
name|void
name|_q_ScriptValueToQObject
parameter_list|(
specifier|const
name|QScriptValue
modifier|&
name|v
parameter_list|,
name|T
modifier|*
modifier|&
name|out
parameter_list|)
block|{
name|out
operator|=
name|qobject_cast
argument_list|<
name|T
operator|*
argument_list|>
argument_list|(
name|v
operator|.
name|toQObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|_q_ScriptRegisterQObjectMetaType
specifier|static
name|int
name|_q_ScriptRegisterQObjectMetaType
parameter_list|(
name|QScriptEngine
modifier|*
name|engine
parameter_list|,
specifier|const
name|QScriptValue
modifier|&
name|prototype
parameter_list|)
block|{
return|return
name|qScriptRegisterMetaType
argument_list|<
name|T
operator|*
argument_list|>
argument_list|(
name|engine
argument_list|,
name|_q_ScriptValueFromQObject
argument_list|<
name|T
argument_list|>
argument_list|,
name|_q_ScriptValueToQObject
argument_list|<
name|T
argument_list|>
argument_list|,
name|prototype
argument_list|)
return|;
block|}
end_function
begin_function_decl
name|QT_BEGIN_NAMESPACE
name|Q_SCRIPT_DECLARE_QMETAOBJECT
parameter_list|(
name|QScriptLocalSocket
parameter_list|,
name|QObject
modifier|*
parameter_list|)
function_decl|;
end_function_decl
begin_expr_stmt
name|Q_SCRIPT_DECLARE_QMETAOBJECT
argument_list|(
name|QScriptLocalServer
argument_list|,
name|QObject
operator|*
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function
name|QT_END_NAMESPACE
DECL|function|interactive
specifier|static
name|void
name|interactive
parameter_list|(
name|QScriptEngine
modifier|&
name|eng
parameter_list|)
block|{
name|QTextStream
name|qin
argument_list|(
name|stdin
argument_list|,
name|QFile
operator|::
name|ReadOnly
argument_list|)
decl_stmt|;
specifier|const
name|char
modifier|*
name|qscript_prompt
init|=
literal|"qs> "
decl_stmt|;
specifier|const
name|char
modifier|*
name|dot_prompt
init|=
literal|".... "
decl_stmt|;
specifier|const
name|char
modifier|*
name|prompt
init|=
name|qscript_prompt
decl_stmt|;
name|QString
name|code
decl_stmt|;
forever|forever
block|{
name|QString
name|line
decl_stmt|;
name|printf
argument_list|(
literal|"%s"
argument_list|,
name|prompt
argument_list|)
expr_stmt|;
name|fflush
argument_list|(
name|stdout
argument_list|)
expr_stmt|;
name|line
operator|=
name|qin
operator|.
name|readLine
argument_list|()
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|isNull
argument_list|()
condition|)
break|break;
name|code
operator|+=
name|line
expr_stmt|;
name|code
operator|+=
name|QLatin1Char
argument_list|(
literal|'\n'
argument_list|)
expr_stmt|;
if|if
condition|(
name|line
operator|.
name|trimmed
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
continue|continue;
block|}
elseif|else
if|if
condition|(
operator|!
name|eng
operator|.
name|canEvaluate
argument_list|(
name|code
argument_list|)
condition|)
block|{
name|prompt
operator|=
name|dot_prompt
expr_stmt|;
block|}
else|else
block|{
name|QScriptValue
name|result
init|=
name|eng
operator|.
name|evaluate
argument_list|(
name|code
argument_list|)
decl_stmt|;
name|code
operator|.
name|clear
argument_list|()
expr_stmt|;
name|prompt
operator|=
name|qscript_prompt
expr_stmt|;
if|if
condition|(
operator|!
name|result
operator|.
name|isUndefined
argument_list|()
condition|)
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"%s\n"
argument_list|,
name|qPrintable
argument_list|(
name|result
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QScriptLocalSocket*
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QScriptLocalServer*
argument_list|)
end_macro
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
name|argv
index|[]
parameter_list|)
block|{
name|QCoreApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|QScriptEngine
name|eng
decl_stmt|;
name|QScriptValue
name|globalObject
init|=
name|eng
operator|.
name|globalObject
argument_list|()
decl_stmt|;
name|_q_ScriptRegisterQObjectMetaType
argument_list|<
name|QScriptLocalServer
argument_list|>
argument_list|(
operator|&
name|eng
argument_list|,
name|QScriptValue
argument_list|()
argument_list|)
expr_stmt|;
name|QScriptValue
name|lss
init|=
name|qScriptValueFromQMetaObject
argument_list|<
name|QScriptLocalServer
argument_list|>
argument_list|(
operator|&
name|eng
argument_list|)
decl_stmt|;
name|eng
operator|.
name|globalObject
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"QScriptLocalServer"
argument_list|,
name|lss
argument_list|)
expr_stmt|;
name|_q_ScriptRegisterQObjectMetaType
argument_list|<
name|QScriptLocalSocket
argument_list|>
argument_list|(
operator|&
name|eng
argument_list|,
name|QScriptValue
argument_list|()
argument_list|)
expr_stmt|;
name|QScriptValue
name|lsc
init|=
name|qScriptValueFromQMetaObject
argument_list|<
name|QScriptLocalSocket
argument_list|>
argument_list|(
operator|&
name|eng
argument_list|)
decl_stmt|;
name|eng
operator|.
name|globalObject
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"QScriptLocalSocket"
argument_list|,
name|lsc
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
operator|*
operator|++
name|argv
condition|)
block|{
name|interactive
argument_list|(
name|eng
argument_list|)
expr_stmt|;
return|return
name|EXIT_SUCCESS
return|;
block|}
name|QStringList
name|arguments
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|argc
operator|-
literal|1
condition|;
operator|++
name|i
control|)
name|arguments
operator|<<
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|argv
index|[
name|i
index|]
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|arguments
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QString
name|fn
init|=
name|arguments
operator|.
name|takeFirst
argument_list|()
decl_stmt|;
if|if
condition|(
name|fn
operator|==
name|QLatin1String
argument_list|(
literal|"-i"
argument_list|)
condition|)
block|{
name|interactive
argument_list|(
name|eng
argument_list|)
expr_stmt|;
break|break;
block|}
name|QString
name|contents
decl_stmt|;
if|if
condition|(
name|fn
operator|==
name|QLatin1String
argument_list|(
literal|"-"
argument_list|)
condition|)
block|{
name|QTextStream
name|stream
argument_list|(
name|stdin
argument_list|,
name|QFile
operator|::
name|ReadOnly
argument_list|)
decl_stmt|;
name|contents
operator|=
name|stream
operator|.
name|readAll
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|QFile
name|file
argument_list|(
name|fn
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|exists
argument_list|()
condition|)
block|{
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"%s doesn't exists\n"
argument_list|,
name|qPrintable
argument_list|(
name|fn
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EXIT_FAILURE
return|;
block|}
if|if
condition|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|QTextStream
name|stream
argument_list|(
operator|&
name|file
argument_list|)
decl_stmt|;
name|contents
operator|=
name|stream
operator|.
name|readAll
argument_list|()
expr_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
block|}
block|}
if|if
condition|(
name|contents
operator|.
name|isEmpty
argument_list|()
condition|)
continue|continue;
if|if
condition|(
name|contents
index|[
literal|0
index|]
operator|==
literal|'#'
condition|)
block|{
name|contents
operator|.
name|prepend
argument_list|(
literal|"//"
argument_list|)
expr_stmt|;
name|QScriptValue
name|args
init|=
name|eng
operator|.
name|newArray
argument_list|()
decl_stmt|;
name|args
operator|.
name|setProperty
argument_list|(
literal|"0"
argument_list|,
name|QScriptValue
argument_list|(
operator|&
name|eng
argument_list|,
name|fn
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
while|while
condition|(
operator|!
name|arguments
operator|.
name|isEmpty
argument_list|()
condition|)
name|args
operator|.
name|setProperty
argument_list|(
name|i
operator|++
argument_list|,
name|QScriptValue
argument_list|(
operator|&
name|eng
argument_list|,
name|arguments
operator|.
name|takeFirst
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|eng
operator|.
name|currentContext
argument_list|()
operator|->
name|activationObject
argument_list|()
operator|.
name|setProperty
argument_list|(
literal|"args"
argument_list|,
name|args
argument_list|)
expr_stmt|;
block|}
name|QScriptValue
name|r
init|=
name|eng
operator|.
name|evaluate
argument_list|(
name|contents
argument_list|)
decl_stmt|;
if|if
condition|(
name|eng
operator|.
name|hasUncaughtException
argument_list|()
condition|)
block|{
name|int
name|line
init|=
name|eng
operator|.
name|uncaughtExceptionLineNumber
argument_list|()
decl_stmt|;
name|fprintf
argument_list|(
name|stderr
argument_list|,
literal|"%d: %s\n\t%s\n\n"
argument_list|,
name|line
argument_list|,
name|qPrintable
argument_list|(
name|fn
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|r
operator|.
name|toString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
return|return
name|EXIT_FAILURE
return|;
block|}
if|if
condition|(
name|r
operator|.
name|isNumber
argument_list|()
condition|)
return|return
name|r
operator|.
name|toInt32
argument_list|()
return|;
block|}
return|return
name|EXIT_SUCCESS
return|;
block|}
end_function
begin_include
include|#
directive|include
file|"main.moc"
end_include
end_unit
