begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|<errno.h>
end_include
begin_include
include|#
directive|include
file|<string.h>
end_include
begin_include
include|#
directive|include
file|<qstring.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|"qlocalsocket.h"
end_include
begin_define
DECL|macro|SOCK_PATH
define|#
directive|define
name|SOCK_PATH
value|"echo_socket"
end_define
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|void
parameter_list|)
block|{
name|QLocalSocket
name|socket
decl_stmt|;
name|socket
operator|.
name|connectToServer
argument_list|(
name|SOCK_PATH
argument_list|)
expr_stmt|;
name|socket
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"Connected.\n"
argument_list|)
expr_stmt|;
name|char
name|str
index|[
literal|100
index|]
decl_stmt|;
while|while
condition|(
name|printf
argument_list|(
literal|"> "
argument_list|)
operator|,
name|fgets
argument_list|(
name|str
argument_list|,
literal|100
argument_list|,
name|stdin
argument_list|)
operator|,
operator|!
name|feof
argument_list|(
name|stdin
argument_list|)
condition|)
block|{
if|if
condition|(
name|socket
operator|.
name|write
argument_list|(
name|str
argument_list|,
name|strlen
argument_list|(
name|str
argument_list|)
argument_list|)
operator|==
operator|-
literal|1
condition|)
block|{
name|perror
argument_list|(
literal|"send"
argument_list|)
expr_stmt|;
return|return
name|EXIT_FAILURE
return|;
block|}
name|int
name|t
decl_stmt|;
if|if
condition|(
operator|(
name|t
operator|=
name|socket
operator|.
name|read
argument_list|(
name|str
argument_list|,
literal|100
argument_list|)
operator|)
operator|>
literal|0
condition|)
block|{
name|str
index|[
name|t
index|]
operator|=
literal|'\0'
expr_stmt|;
name|printf
argument_list|(
literal|"echo> %s"
argument_list|,
name|str
argument_list|)
expr_stmt|;
block|}
else|else
block|{
if|if
condition|(
name|t
operator|<
literal|0
condition|)
name|perror
argument_list|(
literal|"recv"
argument_list|)
expr_stmt|;
else|else
name|printf
argument_list|(
literal|"Server closed connection.\n"
argument_list|)
expr_stmt|;
return|return
name|EXIT_FAILURE
return|;
block|}
block|}
return|return
name|EXIT_SUCCESS
return|;
block|}
end_function
end_unit
