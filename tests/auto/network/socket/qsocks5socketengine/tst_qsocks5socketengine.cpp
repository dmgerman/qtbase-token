begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QTest>
end_include
begin_include
include|#
directive|include
file|<QtTest/QTestEventLoop>
end_include
begin_include
include|#
directive|include
file|<QtCore/QQueue>
end_include
begin_include
include|#
directive|include
file|<QtCore/QString>
end_include
begin_include
include|#
directive|include
file|<QtCore/QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QtCore/QMetaType>
end_include
begin_include
include|#
directive|include
file|<private/qsocks5socketengine_p.h>
end_include
begin_include
include|#
directive|include
file|<qhostinfo.h>
end_include
begin_include
include|#
directive|include
file|<qhostaddress.h>
end_include
begin_include
include|#
directive|include
file|<qtcpsocket.h>
end_include
begin_include
include|#
directive|include
file|<qauthenticator.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qtcpserver.h>
end_include
begin_include
include|#
directive|include
file|<qmetatype.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|"../../../network-settings.h"
end_include
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QQueue<QByteArray>
argument_list|)
end_macro
begin_class
DECL|class|tst_QSocks5SocketEngine
class|class
name|tst_QSocks5SocketEngine
super|:
specifier|public
name|QObject
super|,
specifier|public
name|QAbstractSocketEngineReceiver
block|{
name|Q_OBJECT
public|public:
name|tst_QSocks5SocketEngine
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_QSocks5SocketEngine
parameter_list|()
destructor_decl|;
public|public
name|slots
public|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|construction
parameter_list|()
function_decl|;
name|void
name|errorTest_data
parameter_list|()
function_decl|;
name|void
name|errorTest
parameter_list|()
function_decl|;
name|void
name|simpleConnectToIMAP
parameter_list|()
function_decl|;
name|void
name|simpleErrorsAndStates
parameter_list|()
function_decl|;
name|void
name|udpTest
parameter_list|()
function_decl|;
name|void
name|serverTest
parameter_list|()
function_decl|;
name|void
name|tcpSocketBlockingTest
parameter_list|()
function_decl|;
name|void
name|tcpSocketNonBlockingTest
parameter_list|()
function_decl|;
name|void
name|downloadBigFile
parameter_list|()
function_decl|;
comment|// void tcpLoopbackPerformance();
name|void
name|passwordAuth
parameter_list|()
function_decl|;
name|void
name|passwordAuth2
parameter_list|()
function_decl|;
protected|protected
name|slots
protected|:
name|void
name|tcpSocketNonBlocking_hostFound
parameter_list|()
function_decl|;
name|void
name|tcpSocketNonBlocking_connected
parameter_list|()
function_decl|;
name|void
name|tcpSocketNonBlocking_closed
parameter_list|()
function_decl|;
name|void
name|tcpSocketNonBlocking_readyRead
parameter_list|()
function_decl|;
name|void
name|tcpSocketNonBlocking_bytesWritten
parameter_list|(
name|qint64
parameter_list|)
function_decl|;
name|void
name|exitLoopSlot
parameter_list|()
function_decl|;
name|void
name|downloadBigFileSlot
parameter_list|()
function_decl|;
name|void
name|proxyAuthenticationRequired
parameter_list|(
specifier|const
name|QNetworkProxy
modifier|&
name|proxy
parameter_list|,
name|QAuthenticator
modifier|*
name|auth
parameter_list|)
function_decl|;
private|private:
DECL|function|readNotification
name|void
name|readNotification
parameter_list|()
block|{ }
DECL|function|writeNotification
name|void
name|writeNotification
parameter_list|()
block|{ }
DECL|function|exceptionNotification
name|void
name|exceptionNotification
parameter_list|()
block|{ }
DECL|function|connectionNotification
name|void
name|connectionNotification
parameter_list|()
block|{ }
DECL|member|tcpSocketNonBlocking_socket
name|QTcpSocket
modifier|*
name|tcpSocketNonBlocking_socket
decl_stmt|;
DECL|member|tcpSocketNonBlocking_data
name|QStringList
name|tcpSocketNonBlocking_data
decl_stmt|;
DECL|member|tcpSocketNonBlocking_totalWritten
name|qint64
name|tcpSocketNonBlocking_totalWritten
decl_stmt|;
DECL|member|tmpSocket
name|QTcpSocket
modifier|*
name|tmpSocket
decl_stmt|;
DECL|member|bytesAvailable
name|qint64
name|bytesAvailable
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|MiniSocks5Server
class|class
name|MiniSocks5Server
super|:
specifier|public
name|QTcpServer
block|{
name|Q_OBJECT
public|public:
DECL|member|responses
name|QQueue
argument_list|<
name|QByteArray
argument_list|>
name|responses
decl_stmt|;
DECL|function|MiniSocks5Server
name|MiniSocks5Server
parameter_list|(
specifier|const
name|QQueue
argument_list|<
name|QByteArray
argument_list|>
name|r
parameter_list|)
member_init_list|:
name|responses
argument_list|(
name|r
argument_list|)
block|{
name|listen
argument_list|()
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|newConnection
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|handleNewConnection
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
private|private
name|slots
private|:
DECL|function|handleNewConnection
name|void
name|handleNewConnection
parameter_list|()
block|{
name|QTcpSocket
modifier|*
name|client
init|=
name|nextPendingConnection
argument_list|()
decl_stmt|;
name|connect
argument_list|(
name|client
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|handleClientCommand
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|->
name|setProperty
argument_list|(
literal|"pendingResponses"
argument_list|,
name|qVariantFromValue
argument_list|(
name|responses
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|handleClientCommand
name|void
name|handleClientCommand
parameter_list|()
block|{
comment|// WARNING
comment|// this assumes that the client command is received in its entirety
comment|// should be ok, since SOCKSv5 commands are rather small
name|QTcpSocket
modifier|*
name|client
init|=
cast|static_cast
argument_list|<
name|QTcpSocket
operator|*
argument_list|>
argument_list|(
name|sender
argument_list|()
argument_list|)
decl_stmt|;
name|QQueue
argument_list|<
name|QByteArray
argument_list|>
name|pendingResponses
init|=
name|qvariant_cast
argument_list|<
name|QQueue
argument_list|<
name|QByteArray
argument_list|>
argument_list|>
argument_list|(
name|client
operator|->
name|property
argument_list|(
literal|"pendingResponses"
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|pendingResponses
operator|.
name|isEmpty
argument_list|()
condition|)
name|client
operator|->
name|disconnectFromHost
argument_list|()
expr_stmt|;
else|else
name|client
operator|->
name|write
argument_list|(
name|pendingResponses
operator|.
name|dequeue
argument_list|()
argument_list|)
expr_stmt|;
name|client
operator|->
name|setProperty
argument_list|(
literal|"pendingResponses"
argument_list|,
name|qVariantFromValue
argument_list|(
name|pendingResponses
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_constructor
DECL|function|tst_QSocks5SocketEngine
name|tst_QSocks5SocketEngine
operator|::
name|tst_QSocks5SocketEngine
parameter_list|()
block|{ }
end_constructor
begin_destructor
DECL|function|~tst_QSocks5SocketEngine
name|tst_QSocks5SocketEngine
operator|::
name|~
name|tst_QSocks5SocketEngine
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|initTestCase
name|void
name|tst_QSocks5SocketEngine
operator|::
name|initTestCase
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QtNetworkSettings
operator|::
name|verifyTestNetworkSettings
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|init
name|void
name|tst_QSocks5SocketEngine
operator|::
name|init
parameter_list|()
block|{
name|tmpSocket
operator|=
literal|0
expr_stmt|;
name|bytesAvailable
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QSocks5SocketEngine
operator|::
name|cleanup
parameter_list|()
block|{ }
end_function
begin_comment
comment|//---------------------------------------------------------------------------
end_comment
begin_function
DECL|function|construction
name|void
name|tst_QSocks5SocketEngine
operator|::
name|construction
parameter_list|()
block|{
name|QSocks5SocketEngine
name|socketDevice
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socketDevice
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
comment|// Initialize device
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|initialize
argument_list|(
name|QAbstractSocket
operator|::
name|TcpSocket
argument_list|,
name|QAbstractSocket
operator|::
name|IPv4Protocol
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|protocol
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|IPv4Protocol
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|socketType
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|TcpSocket
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
comment|// QVERIFY(socketDevice.socketDescriptor() != -1);
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|localAddress
argument_list|()
operator|==
name|QHostAddress
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|localPort
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|peerAddress
argument_list|()
operator|==
name|QHostAddress
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|peerPort
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|error
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnknownSocketError
argument_list|)
expr_stmt|;
comment|//QTest::ignoreMessage(QtWarningMsg, "QSocketLayer::bytesAvailable() was called in QAbstractSocket::UnconnectedState");
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|bytesAvailable
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|//QTest::ignoreMessage(QtWarningMsg, "QSocketLayer::hasPendingDatagrams() was called in QAbstractSocket::UnconnectedState");
name|QVERIFY
argument_list|(
operator|!
name|socketDevice
operator|.
name|hasPendingDatagrams
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//---------------------------------------------------------------------------
end_comment
begin_function
DECL|function|errorTest_data
name|void
name|tst_QSocks5SocketEngine
operator|::
name|errorTest_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"hostname"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"port"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"username"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QQueue
argument_list|<
name|QByteArray
argument_list|>
argument_list|>
argument_list|(
literal|"responses"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedError"
argument_list|)
expr_stmt|;
name|QQueue
argument_list|<
name|QByteArray
argument_list|>
name|responses
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"proxy-host-not-found"
argument_list|)
operator|<<
literal|"this-host-does-not-exist."
operator|<<
literal|1080
operator|<<
name|QString
argument_list|()
operator|<<
name|responses
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|ProxyNotFoundError
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"proxy-connection-refused"
argument_list|)
operator|<<
literal|"127.0.0.1"
operator|<<
literal|2
operator|<<
name|QString
argument_list|()
operator|<<
name|responses
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|ProxyConnectionRefusedError
argument_list|)
expr_stmt|;
DECL|macro|REPLY
define|#
directive|define
name|REPLY
parameter_list|(
name|name
parameter_list|,
name|contents
parameter_list|)
define|\
value|static const char raw_ ## name [] = contents;                       \     const QByteArray name = QByteArray::fromRawData(raw_ ## name, sizeof raw_ ## name - 1)
name|REPLY
argument_list|(
name|garbage
argument_list|,
literal|"\4\4\4\4"
argument_list|)
expr_stmt|;
comment|// authentication method replies
name|REPLY
argument_list|(
name|noAuthentication
argument_list|,
literal|"\5\0"
argument_list|)
expr_stmt|;
name|REPLY
argument_list|(
name|passwordAuthentication
argument_list|,
literal|"\5\2"
argument_list|)
expr_stmt|;
name|REPLY
argument_list|(
name|garbageAuthentication
argument_list|,
literal|"\5\177"
argument_list|)
expr_stmt|;
name|REPLY
argument_list|(
name|noAcceptableAuthentication
argument_list|,
literal|"\5\377"
argument_list|)
expr_stmt|;
comment|// authentication replies
name|REPLY
argument_list|(
name|authenticationAccepted
argument_list|,
literal|"\5\0"
argument_list|)
expr_stmt|;
name|REPLY
argument_list|(
name|authenticationNotAccepted
argument_list|,
literal|"\5\1"
argument_list|)
expr_stmt|;
comment|// connection replies
name|REPLY
argument_list|(
name|connectionAccepted
argument_list|,
literal|"\5\0\0\4\177\0\0\1\0\100"
argument_list|)
expr_stmt|;
name|REPLY
argument_list|(
name|connectionNotAllowed
argument_list|,
literal|"\5\2\0"
argument_list|)
expr_stmt|;
name|REPLY
argument_list|(
name|networkUnreachable
argument_list|,
literal|"\5\3\0"
argument_list|)
expr_stmt|;
name|REPLY
argument_list|(
name|hostUnreachable
argument_list|,
literal|"\5\4\0"
argument_list|)
expr_stmt|;
name|REPLY
argument_list|(
name|connectionRefused
argument_list|,
literal|"\5\5\0"
argument_list|)
expr_stmt|;
DECL|macro|REPLY
undef|#
directive|undef
name|REPLY
name|responses
operator|<<
name|garbage
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"garbage1"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
name|QString
argument_list|()
operator|<<
name|responses
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|ProxyProtocolError
argument_list|)
expr_stmt|;
name|responses
operator|.
name|clear
argument_list|()
expr_stmt|;
name|responses
operator|<<
name|noAuthentication
operator|<<
name|garbage
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"garbage2"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
name|QString
argument_list|()
operator|<<
name|responses
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|ProxyProtocolError
argument_list|)
expr_stmt|;
name|responses
operator|.
name|clear
argument_list|()
expr_stmt|;
name|responses
operator|<<
name|garbageAuthentication
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"unknown-auth-method"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
name|QString
argument_list|()
operator|<<
name|responses
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|SocketAccessError
argument_list|)
expr_stmt|;
name|responses
operator|.
name|clear
argument_list|()
expr_stmt|;
name|responses
operator|<<
name|noAcceptableAuthentication
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-acceptable-authentication"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
name|QString
argument_list|()
operator|<<
name|responses
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|ProxyAuthenticationRequiredError
argument_list|)
expr_stmt|;
name|responses
operator|.
name|clear
argument_list|()
expr_stmt|;
name|responses
operator|<<
name|passwordAuthentication
operator|<<
name|authenticationNotAccepted
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"authentication-required"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
literal|"foo"
operator|<<
name|responses
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|ProxyAuthenticationRequiredError
argument_list|)
expr_stmt|;
name|responses
operator|.
name|clear
argument_list|()
expr_stmt|;
name|responses
operator|<<
name|noAuthentication
operator|<<
name|connectionNotAllowed
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"connection-not-allowed"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
name|QString
argument_list|()
operator|<<
name|responses
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|SocketAccessError
argument_list|)
expr_stmt|;
name|responses
operator|.
name|clear
argument_list|()
expr_stmt|;
name|responses
operator|<<
name|noAuthentication
operator|<<
name|networkUnreachable
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"network-unreachable"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
name|QString
argument_list|()
operator|<<
name|responses
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|NetworkError
argument_list|)
expr_stmt|;
name|responses
operator|.
name|clear
argument_list|()
expr_stmt|;
name|responses
operator|<<
name|noAuthentication
operator|<<
name|hostUnreachable
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"host-unreachable"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
name|QString
argument_list|()
operator|<<
name|responses
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|HostNotFoundError
argument_list|)
expr_stmt|;
name|responses
operator|.
name|clear
argument_list|()
expr_stmt|;
name|responses
operator|<<
name|noAuthentication
operator|<<
name|connectionRefused
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"connection-refused"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
name|QString
argument_list|()
operator|<<
name|responses
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|ConnectionRefusedError
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|errorTest
name|void
name|tst_QSocks5SocketEngine
operator|::
name|errorTest
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|hostname
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|username
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QQueue
argument_list|<
name|QByteArray
argument_list|>
argument_list|,
name|responses
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expectedError
argument_list|)
expr_stmt|;
name|MiniSocks5Server
name|server
argument_list|(
name|responses
argument_list|)
decl_stmt|;
if|if
condition|(
name|hostname
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|hostname
operator|=
literal|"127.0.0.1"
expr_stmt|;
name|port
operator|=
name|server
operator|.
name|serverPort
argument_list|()
expr_stmt|;
block|}
name|QTcpSocket
name|socket
decl_stmt|;
name|socket
operator|.
name|setProxy
argument_list|(
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|Socks5Proxy
argument_list|,
name|hostname
argument_list|,
name|port
argument_list|,
name|username
argument_list|,
name|username
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|.
name|connectToHost
argument_list|(
literal|"0.1.2.3"
argument_list|,
literal|12345
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|error
argument_list|(
name|QAbstractSocket
operator|::
name|SocketError
argument_list|)
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|socket
operator|.
name|error
argument_list|()
argument_list|)
argument_list|,
name|expectedError
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//---------------------------------------------------------------------------
end_comment
begin_function
DECL|function|simpleConnectToIMAP
name|void
name|tst_QSocks5SocketEngine
operator|::
name|simpleConnectToIMAP
parameter_list|()
block|{
name|QSocks5SocketEngine
name|socketDevice
decl_stmt|;
comment|// Initialize device
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|initialize
argument_list|(
name|QAbstractSocket
operator|::
name|TcpSocket
argument_list|,
name|QAbstractSocket
operator|::
name|IPv4Protocol
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
name|socketDevice
operator|.
name|setProxy
argument_list|(
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|Socks5Proxy
argument_list|,
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|1080
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socketDevice
operator|.
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverIP
argument_list|()
argument_list|,
literal|143
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectingState
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|waitForWrite
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|peerAddress
argument_list|()
operator|==
name|QtNetworkSettings
operator|::
name|serverIP
argument_list|()
argument_list|)
expr_stmt|;
comment|// Wait for the greeting
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|waitForRead
argument_list|()
argument_list|)
expr_stmt|;
comment|// Read the greeting
name|qint64
name|available
init|=
name|socketDevice
operator|.
name|bytesAvailable
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|available
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QByteArray
name|array
decl_stmt|;
name|array
operator|.
name|resize
argument_list|(
name|available
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|read
argument_list|(
name|array
operator|.
name|data
argument_list|()
argument_list|,
name|array
operator|.
name|size
argument_list|()
argument_list|)
operator|==
name|available
argument_list|)
expr_stmt|;
comment|// Check that the greeting is what we expect it to be
name|QVERIFY2
argument_list|(
name|QtNetworkSettings
operator|::
name|compareReplyIMAP
argument_list|(
name|array
argument_list|)
argument_list|,
name|array
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
comment|// Write a logout message
name|QByteArray
name|array2
init|=
literal|"XXXX LOGOUT\r\n"
decl_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|write
argument_list|(
name|array2
operator|.
name|data
argument_list|()
argument_list|,
name|array2
operator|.
name|size
argument_list|()
argument_list|)
operator|==
name|array2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Wait for the response
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|waitForRead
argument_list|()
argument_list|)
expr_stmt|;
name|available
operator|=
name|socketDevice
operator|.
name|bytesAvailable
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|available
operator|>
literal|0
argument_list|)
expr_stmt|;
name|array
operator|.
name|resize
argument_list|(
name|available
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|read
argument_list|(
name|array
operator|.
name|data
argument_list|()
argument_list|,
name|array
operator|.
name|size
argument_list|()
argument_list|)
operator|==
name|available
argument_list|)
expr_stmt|;
comment|// Check that the greeting is what we expect it to be
name|QCOMPARE
argument_list|(
name|array
operator|.
name|constData
argument_list|()
argument_list|,
literal|"* BYE LOGOUT received\r\nXXXX OK Completed\r\n"
argument_list|)
expr_stmt|;
comment|// Wait for the response
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|waitForRead
argument_list|()
argument_list|)
expr_stmt|;
name|char
name|c
decl_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|read
argument_list|(
operator|&
name|c
argument_list|,
sizeof|sizeof
argument_list|(
name|c
argument_list|)
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|error
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|RemoteHostClosedError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//---------------------------------------------------------------------------
end_comment
begin_function
DECL|function|simpleErrorsAndStates
name|void
name|tst_QSocks5SocketEngine
operator|::
name|simpleErrorsAndStates
parameter_list|()
block|{
block|{
name|QSocks5SocketEngine
name|socketDevice
decl_stmt|;
comment|// Initialize device
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|initialize
argument_list|(
name|QAbstractSocket
operator|::
name|TcpSocket
argument_list|,
name|QAbstractSocket
operator|::
name|IPv4Protocol
argument_list|)
argument_list|)
expr_stmt|;
name|socketDevice
operator|.
name|setProxy
argument_list|(
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|Socks5Proxy
argument_list|,
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|1080
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socketDevice
operator|.
name|connectToHost
argument_list|(
name|QHostInfo
operator|::
name|fromName
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|)
operator|.
name|addresses
argument_list|()
operator|.
name|first
argument_list|()
argument_list|,
literal|8088
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectingState
argument_list|)
expr_stmt|;
if|if
condition|(
name|socketDevice
operator|.
name|waitForWrite
argument_list|(
literal|15000
argument_list|)
condition|)
block|{
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
operator|||
name|socketDevice
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|error
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|SocketTimeoutError
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/* //--------------------------------------------------------------------------- void tst_QSocks5SocketEngine::tcpLoopbackPerformance() {     QTcpServer server;      // Bind to any port on all interfaces     QVERIFY(server.bind(QHostAddress("0.0.0.0"), 0));     QVERIFY(server.state() == QAbstractSocket::BoundState);     quint16 port = server.localPort();      // Listen for incoming connections     QVERIFY(server.listen());     QVERIFY(server.state() == QAbstractSocket::ListeningState);      // Initialize a Tcp socket     QSocks5SocketEngine client;     QVERIFY(client.initialize(QAbstractSocket::TcpSocket));      client.setProxy(QHostAddress("80.232.37.158"), 1081);      // Connect to our server     if (!client.connectToHost(QHostAddress("127.0.0.1"), port)) {         QVERIFY(client.waitForWrite());         QVERIFY(client.connectToHost(QHostAddress("127.0.0.1"), port));     }      // The server accepts the connectio     int socketDescriptor = server.accept();     QVERIFY(socketDescriptor> 0);      // A socket device is initialized on the server side, passing the     // socket descriptor from accept(). It's pre-connected.     QSocketLayer serverSocket;     QVERIFY(serverSocket.initialize(socketDescriptor));     QVERIFY(serverSocket.state() == QAbstractSocket::ConnectedState);      const int messageSize = 1024 * 256;     QByteArray message1(messageSize, '@');     QByteArray answer(messageSize, '@');      QTime timer;     timer.start();     qlonglong readBytes = 0;     while (timer.elapsed()< 5000) {         qlonglong written = serverSocket.write(message1.data(), message1.size());         while (written> 0) {             client.waitForRead();             if (client.bytesAvailable()> 0) {                 qlonglong readNow = client.read(answer.data(), answer.size());                 written -= readNow;                 readBytes += readNow;             }         }     }      qDebug("\t\t%.1fMB/%.1fs: %.1fMB/s",            readBytes / (1024.0 * 1024.0),            timer.elapsed() / 1024.0,            (readBytes / (timer.elapsed() / 1000.0)) / (1024 * 1024)); } */
end_comment
begin_comment
comment|//---------------------------------------------------------------------------
end_comment
begin_function
DECL|function|serverTest
name|void
name|tst_QSocks5SocketEngine
operator|::
name|serverTest
parameter_list|()
block|{
name|QSocks5SocketEngine
name|server
decl_stmt|;
comment|// Initialize a Tcp socket
name|QVERIFY
argument_list|(
name|server
operator|.
name|initialize
argument_list|(
name|QAbstractSocket
operator|::
name|TcpSocket
argument_list|)
argument_list|)
expr_stmt|;
name|QNetworkProxy
name|proxy
argument_list|(
name|QNetworkProxy
operator|::
name|Socks5Proxy
argument_list|,
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|1080
argument_list|)
decl_stmt|;
name|server
operator|.
name|setProxy
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
comment|// Bind to any port on all interfaces
name|QVERIFY
argument_list|(
name|server
operator|.
name|bind
argument_list|(
name|QHostAddress
argument_list|(
literal|"0.0.0.0"
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|BoundState
argument_list|)
expr_stmt|;
comment|// Listen for incoming connections
name|QVERIFY
argument_list|(
name|server
operator|.
name|listen
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ListeningState
argument_list|)
expr_stmt|;
comment|// Initialize a Tcp socket
name|QSocks5SocketEngine
name|client
decl_stmt|;
name|QVERIFY
argument_list|(
name|client
operator|.
name|initialize
argument_list|(
name|QAbstractSocket
operator|::
name|TcpSocket
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|.
name|setProxy
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
comment|// QTest::wait(100000); // ### timing problem on win32
comment|// Connect to our server
if|if
condition|(
operator|!
name|client
operator|.
name|connectToHost
argument_list|(
name|server
operator|.
name|localAddress
argument_list|()
argument_list|,
name|server
operator|.
name|localPort
argument_list|()
argument_list|)
condition|)
block|{
name|QVERIFY
argument_list|(
name|client
operator|.
name|waitForWrite
argument_list|()
argument_list|)
expr_stmt|;
comment|// QTest::wait(100); // ### timing problem on win32
name|QVERIFY
argument_list|(
name|client
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
comment|//QTest::wait(100);
block|}
name|QVERIFY
argument_list|(
name|server
operator|.
name|waitForRead
argument_list|()
argument_list|)
expr_stmt|;
comment|// The server accepts the connection
name|int
name|socketDescriptor
init|=
name|server
operator|.
name|accept
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|socketDescriptor
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// A socket device is initialized on the server side, passing the
comment|// socket descriptor from accept(). It's pre-connected.
name|QSocks5SocketEngine
name|serverSocket
decl_stmt|;
name|QVERIFY
argument_list|(
name|serverSocket
operator|.
name|initialize
argument_list|(
name|socketDescriptor
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|serverSocket
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|serverSocket
operator|.
name|localAddress
argument_list|()
operator|==
name|client
operator|.
name|peerAddress
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|serverSocket
operator|.
name|localPort
argument_list|()
operator|==
name|client
operator|.
name|peerPort
argument_list|()
argument_list|)
expr_stmt|;
comment|// this seems depends on the socks server implementation, especially
comment|// when connecting /to/ the socks server /through/ the same socks server
comment|//QVERIFY(serverSocket.peerAddress() == client.localAddress());
comment|//QVERIFY(serverSocket.peerPort() == client.localPort());
comment|// The server socket sends a greeting to the client
name|QByteArray
name|greeting
init|=
literal|"Greetings!"
decl_stmt|;
name|QVERIFY
argument_list|(
name|serverSocket
operator|.
name|write
argument_list|(
name|greeting
operator|.
name|data
argument_list|()
argument_list|,
name|greeting
operator|.
name|size
argument_list|()
argument_list|)
operator|==
name|greeting
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// The client waits for the greeting to arrive
name|QVERIFY
argument_list|(
name|client
operator|.
name|waitForRead
argument_list|()
argument_list|)
expr_stmt|;
name|qint64
name|available
init|=
name|client
operator|.
name|bytesAvailable
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|available
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// The client reads the greeting and checks that it's correct
name|QByteArray
name|response
decl_stmt|;
name|response
operator|.
name|resize
argument_list|(
name|available
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|client
operator|.
name|read
argument_list|(
name|response
operator|.
name|data
argument_list|()
argument_list|,
name|response
operator|.
name|size
argument_list|()
argument_list|)
operator|==
name|response
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|response
argument_list|,
name|greeting
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//---------------------------------------------------------------------------
end_comment
begin_function
DECL|function|udpTest
name|void
name|tst_QSocks5SocketEngine
operator|::
name|udpTest
parameter_list|()
block|{
name|QSocks5SocketEngine
name|udpSocket
decl_stmt|;
comment|// Initialize device #1
name|QVERIFY
argument_list|(
name|udpSocket
operator|.
name|initialize
argument_list|(
name|QAbstractSocket
operator|::
name|UdpSocket
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|udpSocket
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QNetworkProxy
name|proxy
argument_list|(
name|QNetworkProxy
operator|::
name|Socks5Proxy
argument_list|,
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|1080
argument_list|)
decl_stmt|;
name|udpSocket
operator|.
name|setProxy
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|udpSocket
operator|.
name|protocol
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|IPv4Protocol
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|udpSocket
operator|.
name|socketType
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UdpSocket
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|udpSocket
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
comment|// Bind #1
name|QVERIFY
argument_list|(
name|udpSocket
operator|.
name|bind
argument_list|(
name|QHostAddress
argument_list|(
literal|"0.0.0.0"
argument_list|)
argument_list|,
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|udpSocket
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|BoundState
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|udpSocket
operator|.
name|localPort
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
comment|// Initialize device #2
name|QSocks5SocketEngine
name|udpSocket2
decl_stmt|;
name|QVERIFY
argument_list|(
name|udpSocket2
operator|.
name|initialize
argument_list|(
name|QAbstractSocket
operator|::
name|UdpSocket
argument_list|)
argument_list|)
expr_stmt|;
name|udpSocket2
operator|.
name|setProxy
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
comment|// Connect device #2 to #1
name|QVERIFY
argument_list|(
name|udpSocket2
operator|.
name|connectToHost
argument_list|(
name|udpSocket
operator|.
name|localAddress
argument_list|()
argument_list|,
name|udpSocket
operator|.
name|localPort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|udpSocket2
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
comment|// Write a message to #1
name|QByteArray
name|message1
init|=
literal|"hei der"
decl_stmt|;
name|QVERIFY
argument_list|(
name|udpSocket2
operator|.
name|write
argument_list|(
name|message1
operator|.
name|data
argument_list|()
argument_list|,
name|message1
operator|.
name|size
argument_list|()
argument_list|)
operator|==
name|message1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Read the message from #2
name|QVERIFY
argument_list|(
name|udpSocket
operator|.
name|waitForRead
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|udpSocket
operator|.
name|hasPendingDatagrams
argument_list|()
argument_list|)
expr_stmt|;
name|qint64
name|available
init|=
name|udpSocket
operator|.
name|pendingDatagramSize
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|available
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QByteArray
name|answer
decl_stmt|;
name|answer
operator|.
name|resize
argument_list|(
name|available
argument_list|)
expr_stmt|;
name|QHostAddress
name|senderAddress
decl_stmt|;
name|quint16
name|senderPort
init|=
literal|0
decl_stmt|;
name|QVERIFY
argument_list|(
name|udpSocket
operator|.
name|readDatagram
argument_list|(
name|answer
operator|.
name|data
argument_list|()
argument_list|,
name|answer
operator|.
name|size
argument_list|()
argument_list|,
operator|&
name|senderAddress
argument_list|,
operator|&
name|senderPort
argument_list|)
operator|==
name|message1
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|senderAddress
operator|==
name|udpSocket2
operator|.
name|localAddress
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|senderPort
operator|==
name|udpSocket2
operator|.
name|localPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tcpSocketBlockingTest
name|void
name|tst_QSocks5SocketEngine
operator|::
name|tcpSocketBlockingTest
parameter_list|()
block|{
name|QSocks5SocketEngineHandler
name|socks5
decl_stmt|;
name|QTcpSocket
name|socket
decl_stmt|;
comment|// Connect
name|socket
operator|.
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|143
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|.
name|waitForConnected
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|state
argument_list|()
argument_list|,
name|QTcpSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
comment|// Read greeting
name|QVERIFY
argument_list|(
name|socket
operator|.
name|waitForReadyRead
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|s
init|=
name|socket
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|QVERIFY2
argument_list|(
name|QtNetworkSettings
operator|::
name|compareReplyIMAP
argument_list|(
name|s
operator|.
name|toLatin1
argument_list|()
argument_list|)
argument_list|,
name|s
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
comment|// Write NOOP
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|socket
operator|.
name|write
argument_list|(
literal|"1 NOOP\r\n"
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|8
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|socket
operator|.
name|canReadLine
argument_list|()
condition|)
name|QVERIFY
argument_list|(
name|socket
operator|.
name|waitForReadyRead
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
comment|// Read response
name|s
operator|=
name|socket
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
literal|"1 OK Completed\r\n"
argument_list|)
expr_stmt|;
comment|// Write LOGOUT
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|socket
operator|.
name|write
argument_list|(
literal|"2 LOGOUT\r\n"
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|10
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|socket
operator|.
name|canReadLine
argument_list|()
condition|)
name|QVERIFY
argument_list|(
name|socket
operator|.
name|waitForReadyRead
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
comment|// Read two lines of respose
name|s
operator|=
name|socket
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
literal|"* BYE LOGOUT received\r\n"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|socket
operator|.
name|canReadLine
argument_list|()
condition|)
name|QVERIFY
argument_list|(
name|socket
operator|.
name|waitForReadyRead
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
name|socket
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
literal|"2 OK Completed\r\n"
argument_list|)
expr_stmt|;
comment|// Close the socket
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Check that it's closed
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|state
argument_list|()
argument_list|,
name|QTcpSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|tcpSocketNonBlockingTest
name|void
name|tst_QSocks5SocketEngine
operator|::
name|tcpSocketNonBlockingTest
parameter_list|()
block|{
name|QSocks5SocketEngineHandler
name|socks5
decl_stmt|;
name|QTcpSocket
name|socket
decl_stmt|;
name|connect
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|hostFound
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|tcpSocketNonBlocking_hostFound
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|connected
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|tcpSocketNonBlocking_connected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|disconnected
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|tcpSocketNonBlocking_closed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|bytesWritten
argument_list|(
name|qint64
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|tcpSocketNonBlocking_bytesWritten
argument_list|(
name|qint64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|tcpSocketNonBlocking_readyRead
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tcpSocketNonBlocking_socket
operator|=
operator|&
name|socket
expr_stmt|;
comment|// Connect
name|socket
operator|.
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|143
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|.
name|state
argument_list|()
operator|==
name|QTcpSocket
operator|::
name|HostLookupState
operator|||
name|socket
operator|.
name|state
argument_list|()
operator|==
name|QTcpSocket
operator|::
name|ConnectingState
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
block|{
name|QFAIL
argument_list|(
literal|"Timed out"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|socket
operator|.
name|state
argument_list|()
operator|==
name|QTcpSocket
operator|::
name|ConnectingState
condition|)
block|{
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
block|{
name|QFAIL
argument_list|(
literal|"Timed out"
argument_list|)
expr_stmt|;
block|}
block|}
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|state
argument_list|()
argument_list|,
name|QTcpSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
block|{
name|QFAIL
argument_list|(
literal|"Timed out"
argument_list|)
expr_stmt|;
block|}
comment|// Read greeting
name|QVERIFY
argument_list|(
operator|!
name|tcpSocketNonBlocking_data
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QByteArray
name|data
init|=
name|tcpSocketNonBlocking_data
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
name|QVERIFY2
argument_list|(
name|QtNetworkSettings
operator|::
name|compareReplyIMAP
argument_list|(
name|data
argument_list|)
argument_list|,
name|data
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|tcpSocketNonBlocking_data
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tcpSocketNonBlocking_totalWritten
operator|=
literal|0
expr_stmt|;
comment|// Write NOOP
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|socket
operator|.
name|write
argument_list|(
literal|"1 NOOP\r\n"
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
block|{
name|QFAIL
argument_list|(
literal|"Timed out"
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|tcpSocketNonBlocking_totalWritten
operator|==
literal|8
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
block|{
name|QFAIL
argument_list|(
literal|"Timed out"
argument_list|)
expr_stmt|;
block|}
comment|// Read response
name|QVERIFY
argument_list|(
operator|!
name|tcpSocketNonBlocking_data
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tcpSocketNonBlocking_data
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
literal|"1 OK Completed\r\n"
argument_list|)
expr_stmt|;
name|tcpSocketNonBlocking_data
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tcpSocketNonBlocking_totalWritten
operator|=
literal|0
expr_stmt|;
comment|// Write LOGOUT
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|socket
operator|.
name|write
argument_list|(
literal|"2 LOGOUT\r\n"
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
block|{
name|QFAIL
argument_list|(
literal|"Timed out"
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|tcpSocketNonBlocking_totalWritten
operator|==
literal|10
argument_list|)
expr_stmt|;
comment|// Wait for greeting
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
block|{
name|QFAIL
argument_list|(
literal|"Timed out"
argument_list|)
expr_stmt|;
block|}
comment|// Read two lines of respose
name|QCOMPARE
argument_list|(
name|tcpSocketNonBlocking_data
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
literal|"* BYE LOGOUT received\r\n"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tcpSocketNonBlocking_data
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
literal|"2 OK Completed\r\n"
argument_list|)
expr_stmt|;
name|tcpSocketNonBlocking_data
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Close the socket
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Check that it's closed
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|state
argument_list|()
argument_list|,
name|QTcpSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tcpSocketNonBlocking_hostFound
name|void
name|tst_QSocks5SocketEngine
operator|::
name|tcpSocketNonBlocking_hostFound
parameter_list|()
block|{
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|exitLoop
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tcpSocketNonBlocking_connected
name|void
name|tst_QSocks5SocketEngine
operator|::
name|tcpSocketNonBlocking_connected
parameter_list|()
block|{
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|exitLoop
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tcpSocketNonBlocking_readyRead
name|void
name|tst_QSocks5SocketEngine
operator|::
name|tcpSocketNonBlocking_readyRead
parameter_list|()
block|{
while|while
condition|(
name|tcpSocketNonBlocking_socket
operator|->
name|canReadLine
argument_list|()
condition|)
name|tcpSocketNonBlocking_data
operator|.
name|append
argument_list|(
name|tcpSocketNonBlocking_socket
operator|->
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|exitLoop
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tcpSocketNonBlocking_bytesWritten
name|void
name|tst_QSocks5SocketEngine
operator|::
name|tcpSocketNonBlocking_bytesWritten
parameter_list|(
name|qint64
name|written
parameter_list|)
block|{
name|tcpSocketNonBlocking_totalWritten
operator|+=
name|written
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|exitLoop
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tcpSocketNonBlocking_closed
name|void
name|tst_QSocks5SocketEngine
operator|::
name|tcpSocketNonBlocking_closed
parameter_list|()
block|{ }
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|downloadBigFile
name|void
name|tst_QSocks5SocketEngine
operator|::
name|downloadBigFile
parameter_list|()
block|{
name|QSocks5SocketEngineHandler
name|socks5
decl_stmt|;
if|if
condition|(
name|tmpSocket
condition|)
operator|delete
name|tmpSocket
expr_stmt|;
name|tmpSocket
operator|=
operator|new
name|QTcpSocket
expr_stmt|;
name|connect
argument_list|(
name|tmpSocket
argument_list|,
name|SIGNAL
argument_list|(
name|connected
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|exitLoopSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|tmpSocket
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|downloadBigFileSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tmpSocket
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|80
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
name|QFAIL
argument_list|(
literal|"Network operation timed out"
argument_list|)
expr_stmt|;
name|QByteArray
name|hostName
init|=
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|tmpSocket
operator|->
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tmpSocket
operator|->
name|write
argument_list|(
literal|"GET /qtest/mediumfile HTTP/1.0\r\n"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tmpSocket
operator|->
name|write
argument_list|(
literal|"HOST: "
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tmpSocket
operator|->
name|write
argument_list|(
name|hostName
operator|.
name|data
argument_list|()
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tmpSocket
operator|->
name|write
argument_list|(
literal|"\r\n"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tmpSocket
operator|->
name|write
argument_list|(
literal|"\r\n"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|bytesAvailable
operator|=
literal|0
expr_stmt|;
name|QTime
name|stopWatch
decl_stmt|;
name|stopWatch
operator|.
name|start
argument_list|()
expr_stmt|;
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|60
argument_list|)
expr_stmt|;
else|#
directive|else
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|180
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
name|QFAIL
argument_list|(
literal|"Network operation timed out"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|bytesAvailable
argument_list|,
name|qint64
argument_list|(
literal|10000000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tmpSocket
operator|->
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
comment|/*qDebug("\t\t%.1fMB/%.1fs: %.1fMB/s",            bytesAvailable / (1024.0 * 1024.0),            stopWatch.elapsed() / 1024.0,            (bytesAvailable / (stopWatch.elapsed() / 1000.0)) / (1024 * 1024));*/
operator|delete
name|tmpSocket
expr_stmt|;
name|tmpSocket
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|exitLoopSlot
name|void
name|tst_QSocks5SocketEngine
operator|::
name|exitLoopSlot
parameter_list|()
block|{
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|exitLoop
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|downloadBigFileSlot
name|void
name|tst_QSocks5SocketEngine
operator|::
name|downloadBigFileSlot
parameter_list|()
block|{
name|QByteArray
name|tmp
init|=
name|tmpSocket
operator|->
name|readAll
argument_list|()
decl_stmt|;
name|int
name|correction
init|=
name|tmp
operator|.
name|indexOf
argument_list|(
operator|(
name|char
operator|)
literal|0
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|//skip header
if|if
condition|(
name|correction
operator|==
operator|-
literal|1
condition|)
name|correction
operator|=
literal|0
expr_stmt|;
name|bytesAvailable
operator|+=
operator|(
name|tmp
operator|.
name|size
argument_list|()
operator|-
name|correction
operator|)
expr_stmt|;
if|if
condition|(
name|bytesAvailable
operator|>=
literal|10000000
condition|)
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|exitLoop
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|passwordAuth
name|void
name|tst_QSocks5SocketEngine
operator|::
name|passwordAuth
parameter_list|()
block|{
name|QSocks5SocketEngine
name|socketDevice
decl_stmt|;
comment|// Initialize device
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|initialize
argument_list|(
name|QAbstractSocket
operator|::
name|TcpSocket
argument_list|,
name|QAbstractSocket
operator|::
name|IPv4Protocol
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
name|socketDevice
operator|.
name|setProxy
argument_list|(
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|Socks5Proxy
argument_list|,
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|1080
argument_list|,
literal|"qsockstest"
argument_list|,
literal|"password"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Connect to imap.trolltech.com's IP
name|QVERIFY
argument_list|(
operator|!
name|socketDevice
operator|.
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverIP
argument_list|()
argument_list|,
literal|143
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectingState
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|waitForWrite
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|socketDevice
operator|.
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverIP
argument_list|()
argument_list|,
literal|143
argument_list|)
condition|)
block|{
name|qDebug
argument_list|(
literal|"%d, %s"
argument_list|,
name|socketDevice
operator|.
name|error
argument_list|()
argument_list|,
name|socketDevice
operator|.
name|errorString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|peerAddress
argument_list|()
operator|==
name|QtNetworkSettings
operator|::
name|serverIP
argument_list|()
argument_list|)
expr_stmt|;
comment|// Wait for the greeting
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|waitForRead
argument_list|()
argument_list|)
expr_stmt|;
comment|// Read the greeting
name|qint64
name|available
init|=
name|socketDevice
operator|.
name|bytesAvailable
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|available
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QByteArray
name|array
decl_stmt|;
name|array
operator|.
name|resize
argument_list|(
name|available
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|read
argument_list|(
name|array
operator|.
name|data
argument_list|()
argument_list|,
name|array
operator|.
name|size
argument_list|()
argument_list|)
operator|==
name|available
argument_list|)
expr_stmt|;
comment|// Check that the greeting is what we expect it to be
name|QVERIFY2
argument_list|(
name|QtNetworkSettings
operator|::
name|compareReplyIMAP
argument_list|(
name|array
argument_list|)
argument_list|,
name|array
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
comment|// Write a logout message
name|QByteArray
name|array2
init|=
literal|"XXXX LOGOUT\r\n"
decl_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|write
argument_list|(
name|array2
operator|.
name|data
argument_list|()
argument_list|,
name|array2
operator|.
name|size
argument_list|()
argument_list|)
operator|==
name|array2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Wait for the response
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|waitForRead
argument_list|()
argument_list|)
expr_stmt|;
name|available
operator|=
name|socketDevice
operator|.
name|bytesAvailable
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|available
operator|>
literal|0
argument_list|)
expr_stmt|;
name|array
operator|.
name|resize
argument_list|(
name|available
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|read
argument_list|(
name|array
operator|.
name|data
argument_list|()
argument_list|,
name|array
operator|.
name|size
argument_list|()
argument_list|)
operator|==
name|available
argument_list|)
expr_stmt|;
comment|// Check that the greeting is what we expect it to be
name|QCOMPARE
argument_list|(
name|array
operator|.
name|constData
argument_list|()
argument_list|,
literal|"* BYE LOGOUT received\r\nXXXX OK Completed\r\n"
argument_list|)
expr_stmt|;
comment|// Wait for the response
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|waitForRead
argument_list|()
argument_list|)
expr_stmt|;
name|char
name|c
decl_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|read
argument_list|(
operator|&
name|c
argument_list|,
sizeof|sizeof
argument_list|(
name|c
argument_list|)
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|error
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|RemoteHostClosedError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|proxyAuthenticationRequired
name|void
name|tst_QSocks5SocketEngine
operator|::
name|proxyAuthenticationRequired
parameter_list|(
specifier|const
name|QNetworkProxy
modifier|&
parameter_list|,
name|QAuthenticator
modifier|*
name|auth
parameter_list|)
block|{
name|auth
operator|->
name|setUser
argument_list|(
literal|"qsockstest"
argument_list|)
expr_stmt|;
name|auth
operator|->
name|setPassword
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|passwordAuth2
name|void
name|tst_QSocks5SocketEngine
operator|::
name|passwordAuth2
parameter_list|()
block|{
name|QSocks5SocketEngine
name|socketDevice
decl_stmt|;
comment|// Initialize device
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|initialize
argument_list|(
name|QAbstractSocket
operator|::
name|TcpSocket
argument_list|,
name|QAbstractSocket
operator|::
name|IPv4Protocol
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
name|socketDevice
operator|.
name|setProxy
argument_list|(
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|Socks5Proxy
argument_list|,
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|1081
argument_list|)
argument_list|)
expr_stmt|;
name|socketDevice
operator|.
name|setReceiver
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socketDevice
operator|.
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverIP
argument_list|()
argument_list|,
literal|143
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectingState
argument_list|)
expr_stmt|;
while|while
condition|(
name|socketDevice
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectingState
condition|)
block|{
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|waitForWrite
argument_list|()
argument_list|)
expr_stmt|;
name|socketDevice
operator|.
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverIP
argument_list|()
argument_list|,
literal|143
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|socketDevice
operator|.
name|state
argument_list|()
operator|!=
name|QAbstractSocket
operator|::
name|ConnectedState
condition|)
name|qDebug
argument_list|(
literal|"%d, %s"
argument_list|,
name|socketDevice
operator|.
name|error
argument_list|()
argument_list|,
name|socketDevice
operator|.
name|errorString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|peerAddress
argument_list|()
operator|==
name|QtNetworkSettings
operator|::
name|serverIP
argument_list|()
argument_list|)
expr_stmt|;
comment|// Wait for the greeting
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|waitForRead
argument_list|()
argument_list|)
expr_stmt|;
comment|// Read the greeting
name|qint64
name|available
init|=
name|socketDevice
operator|.
name|bytesAvailable
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|available
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QByteArray
name|array
decl_stmt|;
name|array
operator|.
name|resize
argument_list|(
name|available
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|read
argument_list|(
name|array
operator|.
name|data
argument_list|()
argument_list|,
name|array
operator|.
name|size
argument_list|()
argument_list|)
operator|==
name|available
argument_list|)
expr_stmt|;
comment|// Check that the greeting is what we expect it to be
name|QVERIFY2
argument_list|(
name|QtNetworkSettings
operator|::
name|compareReplyIMAP
argument_list|(
name|array
argument_list|)
argument_list|,
name|array
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
comment|// Write a logout message
name|QByteArray
name|array2
init|=
literal|"XXXX LOGOUT\r\n"
decl_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|write
argument_list|(
name|array2
operator|.
name|data
argument_list|()
argument_list|,
name|array2
operator|.
name|size
argument_list|()
argument_list|)
operator|==
name|array2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Wait for the response
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|waitForRead
argument_list|()
argument_list|)
expr_stmt|;
name|available
operator|=
name|socketDevice
operator|.
name|bytesAvailable
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|available
operator|>
literal|0
argument_list|)
expr_stmt|;
name|array
operator|.
name|resize
argument_list|(
name|available
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|read
argument_list|(
name|array
operator|.
name|data
argument_list|()
argument_list|,
name|array
operator|.
name|size
argument_list|()
argument_list|)
operator|==
name|available
argument_list|)
expr_stmt|;
comment|// Check that the greeting is what we expect it to be
name|QCOMPARE
argument_list|(
name|array
operator|.
name|constData
argument_list|()
argument_list|,
literal|"* BYE LOGOUT received\r\nXXXX OK Completed\r\n"
argument_list|)
expr_stmt|;
comment|// Wait for the response
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|waitForRead
argument_list|()
argument_list|)
expr_stmt|;
name|char
name|c
decl_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|read
argument_list|(
operator|&
name|c
argument_list|,
sizeof|sizeof
argument_list|(
name|c
argument_list|)
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|error
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|RemoteHostClosedError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QSocks5SocketEngine
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qsocks5socketengine.moc"
end_include
end_unit
