begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QTest>
end_include
begin_include
include|#
directive|include
file|<QtTest/QTestEventLoop>
end_include
begin_include
include|#
directive|include
file|<QtCore/QQueue>
end_include
begin_include
include|#
directive|include
file|<QtCore/QString>
end_include
begin_include
include|#
directive|include
file|<QtCore/QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<private/qhttpsocketengine_p.h>
end_include
begin_include
include|#
directive|include
file|<qhostinfo.h>
end_include
begin_include
include|#
directive|include
file|<qhostaddress.h>
end_include
begin_include
include|#
directive|include
file|<qtcpsocket.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qtcpserver.h>
end_include
begin_include
include|#
directive|include
file|"../../../network-settings.h"
end_include
begin_class
DECL|class|tst_QHttpSocketEngine
class|class
name|tst_QHttpSocketEngine
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QHttpSocketEngine
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_QHttpSocketEngine
parameter_list|()
destructor_decl|;
public|public
name|slots
public|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|construction
parameter_list|()
function_decl|;
name|void
name|errorTest_data
parameter_list|()
function_decl|;
name|void
name|errorTest
parameter_list|()
function_decl|;
name|void
name|simpleConnectToIMAP
parameter_list|()
function_decl|;
name|void
name|simpleErrorsAndStates
parameter_list|()
function_decl|;
name|void
name|tcpSocketBlockingTest
parameter_list|()
function_decl|;
name|void
name|tcpSocketNonBlockingTest
parameter_list|()
function_decl|;
name|void
name|downloadBigFile
parameter_list|()
function_decl|;
comment|// void tcpLoopbackPerformance();
name|void
name|passwordAuth
parameter_list|()
function_decl|;
protected|protected
name|slots
protected|:
name|void
name|tcpSocketNonBlocking_hostFound
parameter_list|()
function_decl|;
name|void
name|tcpSocketNonBlocking_connected
parameter_list|()
function_decl|;
name|void
name|tcpSocketNonBlocking_closed
parameter_list|()
function_decl|;
name|void
name|tcpSocketNonBlocking_readyRead
parameter_list|()
function_decl|;
name|void
name|tcpSocketNonBlocking_bytesWritten
parameter_list|(
name|qint64
parameter_list|)
function_decl|;
name|void
name|exitLoopSlot
parameter_list|()
function_decl|;
name|void
name|downloadBigFileSlot
parameter_list|()
function_decl|;
private|private:
DECL|member|tcpSocketNonBlocking_socket
name|QTcpSocket
modifier|*
name|tcpSocketNonBlocking_socket
decl_stmt|;
DECL|member|tcpSocketNonBlocking_data
name|QStringList
name|tcpSocketNonBlocking_data
decl_stmt|;
DECL|member|tcpSocketNonBlocking_totalWritten
name|qint64
name|tcpSocketNonBlocking_totalWritten
decl_stmt|;
DECL|member|tmpSocket
name|QTcpSocket
modifier|*
name|tmpSocket
decl_stmt|;
DECL|member|bytesAvailable
name|qint64
name|bytesAvailable
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|MiniHttpServer
class|class
name|MiniHttpServer
super|:
specifier|public
name|QTcpServer
block|{
name|Q_OBJECT
DECL|member|client
name|QTcpSocket
modifier|*
name|client
decl_stmt|;
DECL|member|dataToTransmit
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|dataToTransmit
decl_stmt|;
public|public:
DECL|member|receivedData
name|QByteArray
name|receivedData
decl_stmt|;
DECL|function|MiniHttpServer
name|MiniHttpServer
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QByteArray
argument_list|>
modifier|&
name|data
parameter_list|)
member_init_list|:
name|client
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|dataToTransmit
argument_list|(
name|data
argument_list|)
block|{
name|listen
argument_list|()
expr_stmt|;
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|newConnection
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|doAccept
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
public|public
name|slots
public|:
DECL|function|doAccept
name|void
name|doAccept
parameter_list|()
block|{
name|client
operator|=
name|nextPendingConnection
argument_list|()
expr_stmt|;
name|connect
argument_list|(
name|client
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|sendData
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|sendData
name|void
name|sendData
parameter_list|()
block|{
name|receivedData
operator|+=
name|client
operator|->
name|readAll
argument_list|()
expr_stmt|;
name|int
name|idx
init|=
name|client
operator|->
name|property
argument_list|(
literal|"dataTransmitionIdx"
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
if|if
condition|(
name|receivedData
operator|.
name|contains
argument_list|(
literal|"\r\n\r\n"
argument_list|)
operator|||
name|receivedData
operator|.
name|contains
argument_list|(
literal|"\n\n"
argument_list|)
condition|)
block|{
if|if
condition|(
name|idx
operator|<
name|dataToTransmit
operator|.
name|length
argument_list|()
condition|)
name|client
operator|->
name|write
argument_list|(
name|dataToTransmit
operator|.
name|at
argument_list|(
name|idx
operator|++
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|idx
operator|==
name|dataToTransmit
operator|.
name|length
argument_list|()
condition|)
block|{
name|client
operator|->
name|disconnectFromHost
argument_list|()
expr_stmt|;
name|disconnect
argument_list|(
name|client
argument_list|,
literal|0
argument_list|,
name|this
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|client
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|client
operator|->
name|setProperty
argument_list|(
literal|"dataTransmitionIdx"
argument_list|,
name|idx
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
class|;
end_class
begin_constructor
DECL|function|tst_QHttpSocketEngine
name|tst_QHttpSocketEngine
operator|::
name|tst_QHttpSocketEngine
parameter_list|()
block|{ }
end_constructor
begin_destructor
DECL|function|~tst_QHttpSocketEngine
name|tst_QHttpSocketEngine
operator|::
name|~
name|tst_QHttpSocketEngine
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|initTestCase
name|void
name|tst_QHttpSocketEngine
operator|::
name|initTestCase
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QtNetworkSettings
operator|::
name|verifyTestNetworkSettings
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|init
name|void
name|tst_QHttpSocketEngine
operator|::
name|init
parameter_list|()
block|{
name|tmpSocket
operator|=
literal|0
expr_stmt|;
name|bytesAvailable
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QHttpSocketEngine
operator|::
name|cleanup
parameter_list|()
block|{ }
end_function
begin_comment
comment|//---------------------------------------------------------------------------
end_comment
begin_function
DECL|function|construction
name|void
name|tst_QHttpSocketEngine
operator|::
name|construction
parameter_list|()
block|{
name|QHttpSocketEngine
name|socketDevice
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socketDevice
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
comment|// Initialize device
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|initialize
argument_list|(
name|QAbstractSocket
operator|::
name|TcpSocket
argument_list|,
name|QAbstractSocket
operator|::
name|IPv4Protocol
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|protocol
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|IPv4Protocol
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|socketType
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|TcpSocket
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
comment|// QVERIFY(socketDevice.socketDescriptor() != -1);
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|localAddress
argument_list|()
operator|==
name|QHostAddress
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|localPort
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|peerAddress
argument_list|()
operator|==
name|QHostAddress
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|peerPort
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|error
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnknownSocketError
argument_list|)
expr_stmt|;
comment|//QTest::ignoreMessage(QtWarningMsg, "QSocketLayer::bytesAvailable() was called in QAbstractSocket::UnconnectedState");
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|bytesAvailable
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|//QTest::ignoreMessage(QtWarningMsg, "QSocketLayer::hasPendingDatagrams() was called in QAbstractSocket::UnconnectedState");
name|QVERIFY
argument_list|(
operator|!
name|socketDevice
operator|.
name|hasPendingDatagrams
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//---------------------------------------------------------------------------
end_comment
begin_function
DECL|function|errorTest_data
name|void
name|tst_QHttpSocketEngine
operator|::
name|errorTest_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"hostname"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"port"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"username"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"response"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedError"
argument_list|)
expr_stmt|;
name|QQueue
argument_list|<
name|QByteArray
argument_list|>
name|responses
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"proxy-host-not-found"
argument_list|)
operator|<<
literal|"this-host-does-not-exist."
operator|<<
literal|1080
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|ProxyNotFoundError
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"proxy-connection-refused"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|2
operator|<<
name|QString
argument_list|()
operator|<<
name|QString
argument_list|()
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|ProxyConnectionRefusedError
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"garbage1"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
name|QString
argument_list|()
operator|<<
literal|"This is not HTTP\r\n\r\n"
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|ProxyProtocolError
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"garbage2"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
name|QString
argument_list|()
operator|<<
literal|"This is not HTTP"
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|ProxyProtocolError
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"garbage3"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
name|QString
argument_list|()
operator|<<
literal|""
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|ProxyConnectionClosedError
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"forbidden"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
name|QString
argument_list|()
operator|<<
literal|"HTTP/1.0 403 Forbidden\r\n\r\n"
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|SocketAccessError
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"method-not-allowed"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
name|QString
argument_list|()
operator|<<
literal|"HTTP/1.0 405 Method Not Allowed\r\n\r\n"
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|SocketAccessError
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"proxy-authentication-too-short"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
literal|"foo"
operator|<<
literal|"HTTP/1.0 407 Proxy Authentication Required\r\n\r\n"
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|ProxyProtocolError
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"proxy-authentication-invalid-method"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
literal|"foo"
operator|<<
literal|"HTTP/1.0 407 Proxy Authentication Required\r\n"
literal|"Proxy-Authenticate: Frobnicator\r\n\r\n"
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|ProxyProtocolError
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"proxy-authentication-required"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
literal|"foo"
operator|<<
literal|"HTTP/1.0 407 Proxy Authentication Required\r\n"
literal|"Proxy-Connection: close\r\n"
literal|"Proxy-Authenticate: Basic, realm=wonderland\r\n\r\n"
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|ProxyAuthenticationRequiredError
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"proxy-authentication-required2"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
literal|"foo"
operator|<<
literal|"HTTP/1.0 407 Proxy Authentication Required\r\n"
literal|"Proxy-Connection: keep-alive\r\n"
literal|"Proxy-Authenticate: Basic, realm=wonderland\r\n\r\n"
literal|"\1"
literal|"HTTP/1.0 407 Proxy Authentication Required\r\n"
literal|"Proxy-Authenticate: Basic, realm=wonderland\r\n\r\n"
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|ProxyAuthenticationRequiredError
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"proxy-authentication-required-noclose"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
literal|"foo"
operator|<<
literal|"HTTP/1.0 407 Proxy Authentication Required\r\n"
literal|"Proxy-Authenticate: Basic\r\n"
literal|"\r\n"
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|ProxyAuthenticationRequiredError
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"connection-refused"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
name|QString
argument_list|()
operator|<<
literal|"HTTP/1.0 503 Service Unavailable\r\n\r\n"
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|ConnectionRefusedError
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"host-not-found"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
name|QString
argument_list|()
operator|<<
literal|"HTTP/1.0 404 Not Found\r\n\r\n"
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|HostNotFoundError
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"weird-http-reply"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|0
operator|<<
name|QString
argument_list|()
operator|<<
literal|"HTTP/1.0 206 Partial Content\r\n\r\n"
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|ProxyProtocolError
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|errorTest
name|void
name|tst_QHttpSocketEngine
operator|::
name|errorTest
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|hostname
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|username
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|response
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expectedError
argument_list|)
expr_stmt|;
name|MiniHttpServer
name|server
argument_list|(
name|response
operator|.
name|toLatin1
argument_list|()
operator|.
name|split
argument_list|(
literal|'\1'
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|hostname
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|hostname
operator|=
literal|"127.0.0.1"
expr_stmt|;
name|port
operator|=
name|server
operator|.
name|serverPort
argument_list|()
expr_stmt|;
block|}
name|QTcpSocket
name|socket
decl_stmt|;
name|socket
operator|.
name|setProxy
argument_list|(
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|HttpProxy
argument_list|,
name|hostname
argument_list|,
name|port
argument_list|,
name|username
argument_list|,
name|username
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|.
name|connectToHost
argument_list|(
literal|"0.1.2.3"
argument_list|,
literal|12345
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|error
argument_list|(
name|QAbstractSocket
operator|::
name|SocketError
argument_list|)
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|socket
operator|.
name|error
argument_list|()
argument_list|)
argument_list|,
name|expectedError
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//---------------------------------------------------------------------------
end_comment
begin_function
DECL|function|simpleConnectToIMAP
name|void
name|tst_QHttpSocketEngine
operator|::
name|simpleConnectToIMAP
parameter_list|()
block|{
name|QHttpSocketEngine
name|socketDevice
decl_stmt|;
comment|// Initialize device
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|initialize
argument_list|(
name|QAbstractSocket
operator|::
name|TcpSocket
argument_list|,
name|QAbstractSocket
operator|::
name|IPv4Protocol
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
name|socketDevice
operator|.
name|setProxy
argument_list|(
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|HttpProxy
argument_list|,
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|3128
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socketDevice
operator|.
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverIP
argument_list|()
argument_list|,
literal|143
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectingState
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|waitForWrite
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|peerAddress
argument_list|()
operator|==
name|QtNetworkSettings
operator|::
name|serverIP
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socketDevice
operator|.
name|localAddress
argument_list|()
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|localPort
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// Wait for the greeting
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|waitForRead
argument_list|()
argument_list|)
expr_stmt|;
comment|// Read the greeting
name|qint64
name|available
init|=
name|socketDevice
operator|.
name|bytesAvailable
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|available
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QByteArray
name|array
decl_stmt|;
name|array
operator|.
name|resize
argument_list|(
name|available
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|read
argument_list|(
name|array
operator|.
name|data
argument_list|()
argument_list|,
name|array
operator|.
name|size
argument_list|()
argument_list|)
operator|==
name|available
argument_list|)
expr_stmt|;
comment|// Check that the greeting is what we expect it to be
name|QVERIFY2
argument_list|(
name|QtNetworkSettings
operator|::
name|compareReplyIMAP
argument_list|(
name|array
argument_list|)
argument_list|,
name|array
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
comment|// Write a logout message
name|QByteArray
name|array2
init|=
literal|"XXXX LOGOUT\r\n"
decl_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|write
argument_list|(
name|array2
operator|.
name|data
argument_list|()
argument_list|,
name|array2
operator|.
name|size
argument_list|()
argument_list|)
operator|==
name|array2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Wait for the response
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|waitForRead
argument_list|()
argument_list|)
expr_stmt|;
name|available
operator|=
name|socketDevice
operator|.
name|bytesAvailable
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|available
operator|>
literal|0
argument_list|)
expr_stmt|;
name|array
operator|.
name|resize
argument_list|(
name|available
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|read
argument_list|(
name|array
operator|.
name|data
argument_list|()
argument_list|,
name|array
operator|.
name|size
argument_list|()
argument_list|)
operator|==
name|available
argument_list|)
expr_stmt|;
comment|// Check that the greeting is what we expect it to be
name|QCOMPARE
argument_list|(
name|array
operator|.
name|constData
argument_list|()
argument_list|,
literal|"* BYE LOGOUT received\r\nXXXX OK Completed\r\n"
argument_list|)
expr_stmt|;
comment|// Wait for the response
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|waitForRead
argument_list|()
argument_list|)
expr_stmt|;
name|char
name|c
decl_stmt|;
name|QCOMPARE
argument_list|(
name|socketDevice
operator|.
name|read
argument_list|(
operator|&
name|c
argument_list|,
sizeof|sizeof
argument_list|(
name|c
argument_list|)
argument_list|)
argument_list|,
operator|(
name|qint64
operator|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|error
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|RemoteHostClosedError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//---------------------------------------------------------------------------
end_comment
begin_function
DECL|function|simpleErrorsAndStates
name|void
name|tst_QHttpSocketEngine
operator|::
name|simpleErrorsAndStates
parameter_list|()
block|{
block|{
name|QHttpSocketEngine
name|socketDevice
decl_stmt|;
comment|// Initialize device
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|initialize
argument_list|(
name|QAbstractSocket
operator|::
name|TcpSocket
argument_list|,
name|QAbstractSocket
operator|::
name|IPv4Protocol
argument_list|)
argument_list|)
expr_stmt|;
name|socketDevice
operator|.
name|setProxy
argument_list|(
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|HttpProxy
argument_list|,
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|3128
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socketDevice
operator|.
name|connectToHost
argument_list|(
name|QHostAddress
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|)
argument_list|,
literal|8088
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectingState
argument_list|)
expr_stmt|;
if|if
condition|(
name|socketDevice
operator|.
name|waitForWrite
argument_list|(
literal|30000
argument_list|)
condition|)
block|{
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
operator|||
name|socketDevice
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|error
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|SocketTimeoutError
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_comment
comment|/* //--------------------------------------------------------------------------- void tst_QHttpSocketEngine::tcpLoopbackPerformance() {     QTcpServer server;      // Bind to any port on all interfaces     QVERIFY(server.bind(QHostAddress("0.0.0.0"), 0));     QVERIFY(server.state() == QAbstractSocket::BoundState);     quint16 port = server.localPort();      // Listen for incoming connections     QVERIFY(server.listen());     QVERIFY(server.state() == QAbstractSocket::ListeningState);      // Initialize a Tcp socket     QHttpSocketEngine client;     QVERIFY(client.initialize(QAbstractSocket::TcpSocket));      client.setProxy(QHostAddress("80.232.37.158"), 1081);      // Connect to our server     if (!client.connectToHost(QHostAddress("127.0.0.1"), port)) {         QVERIFY(client.waitForWrite());         QVERIFY(client.connectToHost(QHostAddress("127.0.0.1"), port));     }      // The server accepts the connectio     int socketDescriptor = server.accept();     QVERIFY(socketDescriptor> 0);      // A socket device is initialized on the server side, passing the     // socket descriptor from accept(). It's pre-connected.     QSocketLayer serverSocket;     QVERIFY(serverSocket.initialize(socketDescriptor));     QVERIFY(serverSocket.state() == QAbstractSocket::ConnectedState);      const int messageSize = 1024 * 256;     QByteArray message1(messageSize, '@');     QByteArray answer(messageSize, '@');      QTime timer;     timer.start();     qlonglong readBytes = 0;     while (timer.elapsed()< 30000) {         qlonglong written = serverSocket.write(message1.data(), message1.size());         while (written> 0) {             client.waitForRead();             if (client.bytesAvailable()> 0) {                 qlonglong readNow = client.read(answer.data(), answer.size());                 written -= readNow;                 readBytes += readNow;             }         }     }      qDebug("\t\t%.1fMB/%.1fs: %.1fMB/s",            readBytes / (1024.0 * 1024.0),            timer.elapsed() / 1024.0,            (readBytes / (timer.elapsed() / 1000.0)) / (1024 * 1024)); } */
end_comment
begin_function
DECL|function|tcpSocketBlockingTest
name|void
name|tst_QHttpSocketEngine
operator|::
name|tcpSocketBlockingTest
parameter_list|()
block|{
name|QHttpSocketEngineHandler
name|http
decl_stmt|;
name|QTcpSocket
name|socket
decl_stmt|;
comment|// Connect
name|socket
operator|.
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|143
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|.
name|waitForConnected
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|state
argument_list|()
argument_list|,
name|QTcpSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
comment|// Read greeting
name|QVERIFY
argument_list|(
name|socket
operator|.
name|waitForReadyRead
argument_list|(
literal|30000
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|s
init|=
name|socket
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|QVERIFY2
argument_list|(
name|QtNetworkSettings
operator|::
name|compareReplyIMAP
argument_list|(
name|s
operator|.
name|toLatin1
argument_list|()
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|s
argument_list|)
argument_list|)
expr_stmt|;
comment|// Write NOOP
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|socket
operator|.
name|write
argument_list|(
literal|"1 NOOP\r\n"
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|8
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|socket
operator|.
name|canReadLine
argument_list|()
condition|)
name|QVERIFY
argument_list|(
name|socket
operator|.
name|waitForReadyRead
argument_list|(
literal|30000
argument_list|)
argument_list|)
expr_stmt|;
comment|// Read response
name|s
operator|=
name|socket
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
literal|"1 OK Completed\r\n"
argument_list|)
expr_stmt|;
comment|// Write LOGOUT
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|socket
operator|.
name|write
argument_list|(
literal|"2 LOGOUT\r\n"
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|10
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|socket
operator|.
name|canReadLine
argument_list|()
condition|)
name|QVERIFY
argument_list|(
name|socket
operator|.
name|waitForReadyRead
argument_list|(
literal|30000
argument_list|)
argument_list|)
expr_stmt|;
comment|// Read two lines of respose
name|s
operator|=
name|socket
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
literal|"* BYE LOGOUT received\r\n"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|socket
operator|.
name|canReadLine
argument_list|()
condition|)
name|QVERIFY
argument_list|(
name|socket
operator|.
name|waitForReadyRead
argument_list|(
literal|30000
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
name|socket
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
literal|"2 OK Completed\r\n"
argument_list|)
expr_stmt|;
comment|// Close the socket
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Check that it's closed
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|state
argument_list|()
argument_list|,
name|QTcpSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|tcpSocketNonBlockingTest
name|void
name|tst_QHttpSocketEngine
operator|::
name|tcpSocketNonBlockingTest
parameter_list|()
block|{
name|QHttpSocketEngineHandler
name|http
decl_stmt|;
name|QTcpSocket
name|socket
decl_stmt|;
name|connect
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|hostFound
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|tcpSocketNonBlocking_hostFound
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|connected
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|tcpSocketNonBlocking_connected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|disconnected
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|tcpSocketNonBlocking_closed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|bytesWritten
argument_list|(
name|qint64
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|tcpSocketNonBlocking_bytesWritten
argument_list|(
name|qint64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|tcpSocketNonBlocking_readyRead
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tcpSocketNonBlocking_socket
operator|=
operator|&
name|socket
expr_stmt|;
comment|// Connect
name|socket
operator|.
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|143
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|.
name|state
argument_list|()
operator|==
name|QTcpSocket
operator|::
name|HostLookupState
operator|||
name|socket
operator|.
name|state
argument_list|()
operator|==
name|QTcpSocket
operator|::
name|ConnectingState
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
block|{
name|QFAIL
argument_list|(
literal|"Timed out"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|socket
operator|.
name|state
argument_list|()
operator|==
name|QTcpSocket
operator|::
name|ConnectingState
condition|)
block|{
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
block|{
name|QFAIL
argument_list|(
literal|"Timed out"
argument_list|)
expr_stmt|;
block|}
block|}
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|state
argument_list|()
argument_list|,
name|QTcpSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
block|{
name|QFAIL
argument_list|(
literal|"Timed out"
argument_list|)
expr_stmt|;
block|}
comment|// Read greeting
name|QVERIFY
argument_list|(
operator|!
name|tcpSocketNonBlocking_data
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QByteArray
name|data
init|=
name|tcpSocketNonBlocking_data
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
name|QVERIFY2
argument_list|(
name|QtNetworkSettings
operator|::
name|compareReplyIMAP
argument_list|(
name|data
argument_list|)
argument_list|,
name|data
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|tcpSocketNonBlocking_data
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tcpSocketNonBlocking_totalWritten
operator|=
literal|0
expr_stmt|;
comment|// Write NOOP
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|socket
operator|.
name|write
argument_list|(
literal|"1 NOOP\r\n"
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
block|{
name|QFAIL
argument_list|(
literal|"Timed out"
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|tcpSocketNonBlocking_totalWritten
operator|==
literal|8
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
block|{
name|QFAIL
argument_list|(
literal|"Timed out"
argument_list|)
expr_stmt|;
block|}
comment|// Read response
name|QVERIFY
argument_list|(
operator|!
name|tcpSocketNonBlocking_data
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tcpSocketNonBlocking_data
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
literal|"1 OK Completed\r\n"
argument_list|)
expr_stmt|;
name|tcpSocketNonBlocking_data
operator|.
name|clear
argument_list|()
expr_stmt|;
name|tcpSocketNonBlocking_totalWritten
operator|=
literal|0
expr_stmt|;
comment|// Write LOGOUT
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|socket
operator|.
name|write
argument_list|(
literal|"2 LOGOUT\r\n"
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
block|{
name|QFAIL
argument_list|(
literal|"Timed out"
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|tcpSocketNonBlocking_totalWritten
operator|==
literal|10
argument_list|)
expr_stmt|;
comment|// Wait for greeting
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
block|{
name|QFAIL
argument_list|(
literal|"Timed out"
argument_list|)
expr_stmt|;
block|}
comment|// Read two lines of respose
name|QCOMPARE
argument_list|(
name|tcpSocketNonBlocking_data
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
literal|"* BYE LOGOUT received\r\n"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tcpSocketNonBlocking_data
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
literal|"2 OK Completed\r\n"
argument_list|)
expr_stmt|;
name|tcpSocketNonBlocking_data
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Close the socket
name|socket
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Check that it's closed
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|state
argument_list|()
argument_list|,
name|QTcpSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tcpSocketNonBlocking_hostFound
name|void
name|tst_QHttpSocketEngine
operator|::
name|tcpSocketNonBlocking_hostFound
parameter_list|()
block|{
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|exitLoop
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tcpSocketNonBlocking_connected
name|void
name|tst_QHttpSocketEngine
operator|::
name|tcpSocketNonBlocking_connected
parameter_list|()
block|{
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|exitLoop
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tcpSocketNonBlocking_readyRead
name|void
name|tst_QHttpSocketEngine
operator|::
name|tcpSocketNonBlocking_readyRead
parameter_list|()
block|{
while|while
condition|(
name|tcpSocketNonBlocking_socket
operator|->
name|canReadLine
argument_list|()
condition|)
name|tcpSocketNonBlocking_data
operator|.
name|append
argument_list|(
name|tcpSocketNonBlocking_socket
operator|->
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|exitLoop
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tcpSocketNonBlocking_bytesWritten
name|void
name|tst_QHttpSocketEngine
operator|::
name|tcpSocketNonBlocking_bytesWritten
parameter_list|(
name|qint64
name|written
parameter_list|)
block|{
name|tcpSocketNonBlocking_totalWritten
operator|+=
name|written
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|exitLoop
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tcpSocketNonBlocking_closed
name|void
name|tst_QHttpSocketEngine
operator|::
name|tcpSocketNonBlocking_closed
parameter_list|()
block|{ }
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|downloadBigFile
name|void
name|tst_QHttpSocketEngine
operator|::
name|downloadBigFile
parameter_list|()
block|{
name|QHttpSocketEngineHandler
name|http
decl_stmt|;
if|if
condition|(
name|tmpSocket
condition|)
operator|delete
name|tmpSocket
expr_stmt|;
name|tmpSocket
operator|=
operator|new
name|QTcpSocket
expr_stmt|;
name|connect
argument_list|(
name|tmpSocket
argument_list|,
name|SIGNAL
argument_list|(
name|connected
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|exitLoopSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|tmpSocket
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|downloadBigFileSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tmpSocket
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|80
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
name|QFAIL
argument_list|(
literal|"Network operation timed out"
argument_list|)
expr_stmt|;
name|QByteArray
name|hostName
init|=
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|tmpSocket
operator|->
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tmpSocket
operator|->
name|write
argument_list|(
literal|"GET /qtest/mediumfile HTTP/1.0\r\n"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tmpSocket
operator|->
name|write
argument_list|(
literal|"Host: "
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tmpSocket
operator|->
name|write
argument_list|(
name|hostName
operator|.
name|data
argument_list|()
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tmpSocket
operator|->
name|write
argument_list|(
literal|"\r\n"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tmpSocket
operator|->
name|write
argument_list|(
literal|"\r\n"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|bytesAvailable
operator|=
literal|0
expr_stmt|;
name|QTime
name|stopWatch
decl_stmt|;
name|stopWatch
operator|.
name|start
argument_list|()
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|240
argument_list|)
expr_stmt|;
else|#
directive|else
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|60
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
name|QFAIL
argument_list|(
literal|"Network operation timed out"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|bytesAvailable
operator|>=
literal|10000000
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tmpSocket
operator|->
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
name|qDebug
argument_list|(
literal|"\t\t%.1fMB/%.1fs: %.1fMB/s"
argument_list|,
name|bytesAvailable
operator|/
operator|(
literal|1024.0
operator|*
literal|1024.0
operator|)
argument_list|,
name|stopWatch
operator|.
name|elapsed
argument_list|()
operator|/
literal|1024.0
argument_list|,
operator|(
name|bytesAvailable
operator|/
operator|(
name|stopWatch
operator|.
name|elapsed
argument_list|()
operator|/
literal|1000.0
operator|)
operator|)
operator|/
operator|(
literal|1024
operator|*
literal|1024
operator|)
argument_list|)
expr_stmt|;
operator|delete
name|tmpSocket
expr_stmt|;
name|tmpSocket
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|exitLoopSlot
name|void
name|tst_QHttpSocketEngine
operator|::
name|exitLoopSlot
parameter_list|()
block|{
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|exitLoop
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|downloadBigFileSlot
name|void
name|tst_QHttpSocketEngine
operator|::
name|downloadBigFileSlot
parameter_list|()
block|{
name|bytesAvailable
operator|+=
name|tmpSocket
operator|->
name|readAll
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|bytesAvailable
operator|>=
literal|10000000
condition|)
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|exitLoop
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|passwordAuth
name|void
name|tst_QHttpSocketEngine
operator|::
name|passwordAuth
parameter_list|()
block|{
name|QHttpSocketEngine
name|socketDevice
decl_stmt|;
comment|// Initialize device
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|initialize
argument_list|(
name|QAbstractSocket
operator|::
name|TcpSocket
argument_list|,
name|QAbstractSocket
operator|::
name|IPv4Protocol
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
name|socketDevice
operator|.
name|setProxy
argument_list|(
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|HttpProxy
argument_list|,
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|3128
argument_list|,
literal|"qsockstest"
argument_list|,
literal|"password"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socketDevice
operator|.
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverIP
argument_list|()
argument_list|,
literal|143
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectingState
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|waitForWrite
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|peerAddress
argument_list|()
operator|==
name|QtNetworkSettings
operator|::
name|serverIP
argument_list|()
argument_list|)
expr_stmt|;
comment|// Wait for the greeting
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|waitForRead
argument_list|()
argument_list|)
expr_stmt|;
comment|// Read the greeting
name|qint64
name|available
init|=
name|socketDevice
operator|.
name|bytesAvailable
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|available
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QByteArray
name|array
decl_stmt|;
name|array
operator|.
name|resize
argument_list|(
name|available
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|read
argument_list|(
name|array
operator|.
name|data
argument_list|()
argument_list|,
name|array
operator|.
name|size
argument_list|()
argument_list|)
operator|==
name|available
argument_list|)
expr_stmt|;
comment|// Check that the greeting is what we expect it to be
name|QVERIFY2
argument_list|(
name|QtNetworkSettings
operator|::
name|compareReplyIMAP
argument_list|(
name|array
argument_list|)
argument_list|,
name|array
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
comment|// Write a logout message
name|QByteArray
name|array2
init|=
literal|"XXXX LOGOUT\r\n"
decl_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|write
argument_list|(
name|array2
operator|.
name|data
argument_list|()
argument_list|,
name|array2
operator|.
name|size
argument_list|()
argument_list|)
operator|==
name|array2
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
comment|// Wait for the response
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|waitForRead
argument_list|()
argument_list|)
expr_stmt|;
name|available
operator|=
name|socketDevice
operator|.
name|bytesAvailable
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|available
operator|>
literal|0
argument_list|)
expr_stmt|;
name|array
operator|.
name|resize
argument_list|(
name|available
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|read
argument_list|(
name|array
operator|.
name|data
argument_list|()
argument_list|,
name|array
operator|.
name|size
argument_list|()
argument_list|)
operator|==
name|available
argument_list|)
expr_stmt|;
comment|// Check that the greeting is what we expect it to be
name|QCOMPARE
argument_list|(
name|array
operator|.
name|constData
argument_list|()
argument_list|,
literal|"* BYE LOGOUT received\r\nXXXX OK Completed\r\n"
argument_list|)
expr_stmt|;
comment|// Wait for the response
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|waitForRead
argument_list|()
argument_list|)
expr_stmt|;
name|char
name|c
decl_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|read
argument_list|(
operator|&
name|c
argument_list|,
sizeof|sizeof
argument_list|(
name|c
argument_list|)
argument_list|)
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|error
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|RemoteHostClosedError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socketDevice
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QHttpSocketEngine
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qhttpsocketengine.moc"
end_include
end_unit
