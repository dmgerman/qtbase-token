begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<qglobal.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|_WIN32
argument_list|)
end_if
begin_include
include|#
directive|include
file|<winsock2.h>
end_include
begin_else
else|#
directive|else
end_else
begin_include
include|#
directive|include
file|<sys/types.h>
end_include
begin_include
include|#
directive|include
file|<sys/socket.h>
end_include
begin_include
include|#
directive|include
file|<fcntl.h>
end_include
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_define
DECL|macro|SOCKET
define|#
directive|define
name|SOCKET
value|int
end_define
begin_define
DECL|macro|INVALID_SOCKET
define|#
directive|define
name|INVALID_SOCKET
value|-1
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<qplatformdefs.h>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QAuthenticator>
end_include
begin_include
include|#
directive|include
file|<QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QEventLoop>
end_include
begin_include
include|#
directive|include
file|<QFile>
end_include
begin_include
include|#
directive|include
file|<QHostAddress>
end_include
begin_include
include|#
directive|include
file|<QHostInfo>
end_include
begin_include
include|#
directive|include
file|<QMap>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_VXWORKS
end_ifndef
begin_include
include|#
directive|include
file|<QMessageBox>
end_include
begin_include
include|#
directive|include
file|<QPushButton>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<QPointer>
end_include
begin_include
include|#
directive|include
file|<QProcess>
end_include
begin_include
include|#
directive|include
file|<QStringList>
end_include
begin_include
include|#
directive|include
file|<QTcpServer>
end_include
begin_include
include|#
directive|include
file|<QTcpSocket>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_OPENSSL
end_ifndef
begin_include
include|#
directive|include
file|<QSslSocket>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<QTextStream>
end_include
begin_include
include|#
directive|include
file|<QThread>
end_include
begin_include
include|#
directive|include
file|<QTime>
end_include
begin_include
include|#
directive|include
file|<QTimer>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_comment
comment|// RVCT compiles also unused inline methods
end_comment
begin_include
include|#
directive|include
file|<QNetworkProxy>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_LINUX
end_ifdef
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_include
include|#
directive|include
file|<stdlib.h>
end_include
begin_include
include|#
directive|include
file|<sys/stat.h>
end_include
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"private/qhostinfo_p.h"
end_include
begin_include
include|#
directive|include
file|"../../../network-settings.h"
end_include
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QAbstractSocket::SocketError
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QAbstractSocket::SocketState
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QNetworkProxy
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QList<QNetworkProxy>
argument_list|)
end_macro
begin_macro
name|QT_FORWARD_DECLARE_CLASS
argument_list|(
argument|QTcpSocket
argument_list|)
end_macro
begin_macro
name|QT_FORWARD_DECLARE_CLASS
argument_list|(
argument|SocketPair
argument_list|)
end_macro
begin_class
DECL|class|tst_QTcpSocket
class|class
name|tst_QTcpSocket
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QTcpSocket
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_QTcpSocket
parameter_list|()
destructor_decl|;
DECL|function|enterLoop
specifier|static
name|void
name|enterLoop
parameter_list|(
name|int
name|secs
parameter_list|)
block|{
operator|++
name|loopLevel
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
name|secs
argument_list|)
expr_stmt|;
operator|--
name|loopLevel
expr_stmt|;
block|}
DECL|function|exitLoop
specifier|static
name|void
name|exitLoop
parameter_list|()
block|{
comment|// Safe exit - if we aren't in an event loop, don't
comment|// exit one.
if|if
condition|(
name|loopLevel
operator|>
literal|0
condition|)
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|exitLoop
argument_list|()
expr_stmt|;
block|}
DECL|function|timeout
specifier|static
name|bool
name|timeout
parameter_list|()
block|{
return|return
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
return|;
block|}
public|public
name|slots
public|:
name|void
name|initTestCase_data
parameter_list|()
function_decl|;
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|socketsConstructedBeforeEventLoop
parameter_list|()
function_decl|;
name|void
name|constructing
parameter_list|()
function_decl|;
name|void
name|bind_data
parameter_list|()
function_decl|;
name|void
name|bind
parameter_list|()
function_decl|;
name|void
name|setInvalidSocketDescriptor
parameter_list|()
function_decl|;
name|void
name|setSocketDescriptor
parameter_list|()
function_decl|;
name|void
name|socketDescriptor
parameter_list|()
function_decl|;
name|void
name|blockingIMAP
parameter_list|()
function_decl|;
name|void
name|nonBlockingIMAP
parameter_list|()
function_decl|;
name|void
name|hostNotFound
parameter_list|()
function_decl|;
name|void
name|timeoutConnect_data
parameter_list|()
function_decl|;
name|void
name|timeoutConnect
parameter_list|()
function_decl|;
name|void
name|delayedClose
parameter_list|()
function_decl|;
name|void
name|partialRead
parameter_list|()
function_decl|;
name|void
name|unget
parameter_list|()
function_decl|;
name|void
name|readAllAfterClose
parameter_list|()
function_decl|;
name|void
name|openCloseOpenClose
parameter_list|()
function_decl|;
name|void
name|connectDisconnectConnectDisconnect
parameter_list|()
function_decl|;
name|void
name|disconnectWhileConnecting_data
parameter_list|()
function_decl|;
name|void
name|disconnectWhileConnecting
parameter_list|()
function_decl|;
name|void
name|disconnectWhileConnectingNoEventLoop_data
parameter_list|()
function_decl|;
name|void
name|disconnectWhileConnectingNoEventLoop
parameter_list|()
function_decl|;
name|void
name|disconnectWhileLookingUp_data
parameter_list|()
function_decl|;
name|void
name|disconnectWhileLookingUp
parameter_list|()
function_decl|;
name|void
name|downloadBigFile
parameter_list|()
function_decl|;
name|void
name|readLine
parameter_list|()
function_decl|;
name|void
name|readLineString
parameter_list|()
function_decl|;
name|void
name|readChunks
parameter_list|()
function_decl|;
name|void
name|waitForBytesWritten
parameter_list|()
function_decl|;
name|void
name|waitForBytesWrittenMinusOne
parameter_list|()
function_decl|;
name|void
name|waitForReadyRead
parameter_list|()
function_decl|;
name|void
name|waitForReadyReadMinusOne
parameter_list|()
function_decl|;
name|void
name|flush
parameter_list|()
function_decl|;
name|void
name|synchronousApi
parameter_list|()
function_decl|;
name|void
name|dontCloseOnTimeout
parameter_list|()
function_decl|;
name|void
name|recursiveReadyRead
parameter_list|()
function_decl|;
name|void
name|atEnd
parameter_list|()
function_decl|;
name|void
name|socketInAThread
parameter_list|()
function_decl|;
name|void
name|socketsInThreads
parameter_list|()
function_decl|;
name|void
name|waitForReadyReadInASlot
parameter_list|()
function_decl|;
name|void
name|remoteCloseError
parameter_list|()
function_decl|;
name|void
name|openMessageBoxInErrorSlot
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|Q_OS_WIN
name|void
name|connectToLocalHostNoService
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|waitForConnectedInHostLookupSlot
parameter_list|()
function_decl|;
name|void
name|waitForConnectedInHostLookupSlot2
parameter_list|()
function_decl|;
name|void
name|readyReadSignalsAfterWaitForReadyRead
parameter_list|()
function_decl|;
ifdef|#
directive|ifdef
name|Q_OS_LINUX
name|void
name|linuxKernelBugLocalSocket
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|abortiveClose
parameter_list|()
function_decl|;
name|void
name|localAddressEmptyOnBSD
parameter_list|()
function_decl|;
name|void
name|zeroAndMinusOneReturns
parameter_list|()
function_decl|;
name|void
name|connectionRefused
parameter_list|()
function_decl|;
name|void
name|suddenRemoteDisconnect_data
parameter_list|()
function_decl|;
name|void
name|suddenRemoteDisconnect
parameter_list|()
function_decl|;
name|void
name|connectToMultiIP
parameter_list|()
function_decl|;
name|void
name|moveToThread0
parameter_list|()
function_decl|;
name|void
name|increaseReadBufferSize
parameter_list|()
function_decl|;
name|void
name|taskQtBug5799ConnectionErrorWaitForConnected
parameter_list|()
function_decl|;
name|void
name|taskQtBug5799ConnectionErrorEventLoop
parameter_list|()
function_decl|;
name|void
name|taskQtBug7054TimeoutErrorResetting
parameter_list|()
function_decl|;
name|void
name|invalidProxy_data
parameter_list|()
function_decl|;
name|void
name|invalidProxy
parameter_list|()
function_decl|;
name|void
name|proxyFactory_data
parameter_list|()
function_decl|;
name|void
name|proxyFactory
parameter_list|()
function_decl|;
name|void
name|qtbug14268_peek
parameter_list|()
function_decl|;
protected|protected
name|slots
protected|:
name|void
name|nonBlockingIMAP_hostFound
parameter_list|()
function_decl|;
name|void
name|nonBlockingIMAP_connected
parameter_list|()
function_decl|;
name|void
name|nonBlockingIMAP_closed
parameter_list|()
function_decl|;
name|void
name|nonBlockingIMAP_readyRead
parameter_list|()
function_decl|;
name|void
name|nonBlockingIMAP_bytesWritten
parameter_list|(
name|qint64
parameter_list|)
function_decl|;
name|void
name|readRegularFile_readyRead
parameter_list|()
function_decl|;
name|void
name|exitLoopSlot
parameter_list|()
function_decl|;
name|void
name|downloadBigFileSlot
parameter_list|()
function_decl|;
name|void
name|recursiveReadyReadSlot
parameter_list|()
function_decl|;
name|void
name|waitForReadyReadInASlotSlot
parameter_list|()
function_decl|;
name|void
name|messageBoxSlot
parameter_list|()
function_decl|;
name|void
name|hostLookupSlot
parameter_list|()
function_decl|;
name|void
name|abortiveClose_abortSlot
parameter_list|()
function_decl|;
name|void
name|remoteCloseErrorSlot
parameter_list|()
function_decl|;
name|void
name|proxyAuthenticationRequired
parameter_list|(
specifier|const
name|QNetworkProxy
modifier|&
parameter_list|,
name|QAuthenticator
modifier|*
name|auth
parameter_list|)
function_decl|;
name|void
name|earlySocketBytesSent
parameter_list|(
name|qint64
name|bytes
parameter_list|)
function_decl|;
name|void
name|earlySocketReadyRead
parameter_list|()
function_decl|;
private|private:
name|QByteArray
name|expectedReplyIMAP
parameter_list|()
function_decl|;
name|void
name|fetchExpectedReplyIMAP
parameter_list|()
function_decl|;
name|QTcpSocket
modifier|*
name|newSocket
parameter_list|()
specifier|const
function_decl|;
DECL|member|nonBlockingIMAP_socket
name|QTcpSocket
modifier|*
name|nonBlockingIMAP_socket
decl_stmt|;
DECL|member|nonBlockingIMAP_data
name|QStringList
name|nonBlockingIMAP_data
decl_stmt|;
DECL|member|nonBlockingIMAP_totalWritten
name|qint64
name|nonBlockingIMAP_totalWritten
decl_stmt|;
DECL|member|tmpSocket
name|QTcpSocket
modifier|*
name|tmpSocket
decl_stmt|;
DECL|member|bytesAvailable
name|qint64
name|bytesAvailable
decl_stmt|;
DECL|member|expectedLength
name|qint64
name|expectedLength
decl_stmt|;
DECL|member|readingBody
name|bool
name|readingBody
decl_stmt|;
DECL|member|timer
name|QTime
name|timer
decl_stmt|;
DECL|member|expectedReplyIMAP_cached
name|QByteArray
name|expectedReplyIMAP_cached
decl_stmt|;
DECL|member|proxyAuthCalled
specifier|mutable
name|int
name|proxyAuthCalled
decl_stmt|;
DECL|member|gotClosedSignal
name|bool
name|gotClosedSignal
decl_stmt|;
DECL|member|numConnections
name|int
name|numConnections
decl_stmt|;
DECL|member|loopLevel
specifier|static
name|int
name|loopLevel
decl_stmt|;
DECL|member|earlyConstructedSockets
name|SocketPair
modifier|*
name|earlyConstructedSockets
decl_stmt|;
DECL|member|earlyBytesWrittenCount
name|int
name|earlyBytesWrittenCount
decl_stmt|;
DECL|member|earlyReadyReadCount
name|int
name|earlyReadyReadCount
decl_stmt|;
block|}
class|;
end_class
begin_enum
DECL|enum|ProxyTests
enum|enum
name|ProxyTests
block|{
DECL|enumerator|NoProxy
name|NoProxy
init|=
literal|0x00
block|,
DECL|enumerator|Socks5Proxy
name|Socks5Proxy
init|=
literal|0x01
block|,
DECL|enumerator|HttpProxy
name|HttpProxy
init|=
literal|0x02
block|,
DECL|enumerator|TypeMask
name|TypeMask
init|=
literal|0x0f
block|,
DECL|enumerator|NoAuth
name|NoAuth
init|=
literal|0x00
block|,
DECL|enumerator|AuthBasic
name|AuthBasic
init|=
literal|0x10
block|,
DECL|enumerator|AuthNtlm
name|AuthNtlm
init|=
literal|0x20
block|,
DECL|enumerator|AuthMask
name|AuthMask
init|=
literal|0xf0
block|}
enum|;
end_enum
begin_decl_stmt
DECL|member|loopLevel
name|int
name|tst_QTcpSocket
operator|::
name|loopLevel
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|SocketPair
class|class
name|SocketPair
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|member|endPoints
name|QTcpSocket
modifier|*
name|endPoints
index|[
literal|2
index|]
decl_stmt|;
DECL|function|SocketPair
name|SocketPair
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
block|{
name|endPoints
index|[
literal|0
index|]
operator|=
name|endPoints
index|[
literal|1
index|]
operator|=
literal|0
expr_stmt|;
block|}
DECL|function|create
name|bool
name|create
parameter_list|()
block|{
name|QTcpServer
name|server
decl_stmt|;
name|server
operator|.
name|listen
argument_list|()
expr_stmt|;
name|QTcpSocket
modifier|*
name|active
init|=
operator|new
name|QTcpSocket
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|active
operator|->
name|connectToHost
argument_list|(
literal|"127.0.0.1"
argument_list|,
name|server
operator|.
name|serverPort
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|active
operator|->
name|waitForConnected
argument_list|(
literal|1000
argument_list|)
condition|)
return|return
literal|false
return|;
if|if
condition|(
operator|!
name|server
operator|.
name|waitForNewConnection
argument_list|(
literal|1000
argument_list|)
condition|)
return|return
literal|false
return|;
name|QTcpSocket
modifier|*
name|passive
init|=
name|server
operator|.
name|nextPendingConnection
argument_list|()
decl_stmt|;
name|passive
operator|->
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|endPoints
index|[
literal|0
index|]
operator|=
name|active
expr_stmt|;
name|endPoints
index|[
literal|1
index|]
operator|=
name|passive
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
class|;
end_class
begin_constructor
DECL|function|tst_QTcpSocket
name|tst_QTcpSocket
operator|::
name|tst_QTcpSocket
parameter_list|()
block|{
name|tmpSocket
operator|=
literal|0
expr_stmt|;
comment|//This code relates to the socketsConstructedBeforeEventLoop test case
name|earlyConstructedSockets
operator|=
operator|new
name|SocketPair
expr_stmt|;
name|QVERIFY
argument_list|(
name|earlyConstructedSockets
operator|->
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|earlyBytesWrittenCount
operator|=
literal|0
expr_stmt|;
name|earlyReadyReadCount
operator|=
literal|0
expr_stmt|;
name|connect
argument_list|(
name|earlyConstructedSockets
operator|->
name|endPoints
index|[
literal|0
index|]
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|earlySocketReadyRead
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|earlyConstructedSockets
operator|->
name|endPoints
index|[
literal|1
index|]
argument_list|,
name|SIGNAL
argument_list|(
name|bytesWritten
argument_list|(
name|qint64
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|earlySocketBytesSent
argument_list|(
name|qint64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|earlyConstructedSockets
operator|->
name|endPoints
index|[
literal|1
index|]
operator|->
name|write
argument_list|(
literal|"hello work"
argument_list|)
expr_stmt|;
block|}
end_constructor
begin_destructor
DECL|function|~tst_QTcpSocket
name|tst_QTcpSocket
operator|::
name|~
name|tst_QTcpSocket
parameter_list|()
block|{  }
end_destructor
begin_function
DECL|function|initTestCase_data
name|void
name|tst_QTcpSocket
operator|::
name|initTestCase_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"setProxy"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"proxyType"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"ssl"
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"WithoutProxy"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"WithSocks5Proxy"
argument_list|)
operator|<<
literal|true
operator|<<
name|int
argument_list|(
name|Socks5Proxy
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"WithSocks5ProxyAuth"
argument_list|)
operator|<<
literal|true
operator|<<
name|int
argument_list|(
name|Socks5Proxy
operator||
name|AuthBasic
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"WithHttpProxy"
argument_list|)
operator|<<
literal|true
operator|<<
name|int
argument_list|(
name|HttpProxy
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"WithHttpProxyBasicAuth"
argument_list|)
operator|<<
literal|true
operator|<<
name|int
argument_list|(
name|HttpProxy
operator||
name|AuthBasic
argument_list|)
operator|<<
literal|false
expr_stmt|;
comment|//    QTest::newRow("WithHttpProxyNtlmAuth")<< true<< int(HttpProxy | AuthNtlm)<< false;
ifndef|#
directive|ifndef
name|QT_NO_OPENSSL
name|QTest
operator|::
name|newRow
argument_list|(
literal|"WithoutProxy SSL"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"WithSocks5Proxy SSL"
argument_list|)
operator|<<
literal|true
operator|<<
name|int
argument_list|(
name|Socks5Proxy
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"WithSocks5AuthProxy SSL"
argument_list|)
operator|<<
literal|true
operator|<<
name|int
argument_list|(
name|Socks5Proxy
operator||
name|AuthBasic
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"WithHttpProxy SSL"
argument_list|)
operator|<<
literal|true
operator|<<
name|int
argument_list|(
name|HttpProxy
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"WithHttpProxyBasicAuth SSL"
argument_list|)
operator|<<
literal|true
operator|<<
name|int
argument_list|(
name|HttpProxy
operator||
name|AuthBasic
argument_list|)
operator|<<
literal|true
expr_stmt|;
comment|//    QTest::newRow("WithHttpProxyNtlmAuth SSL")<< true<< int(HttpProxy | AuthNtlm)<< true;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|initTestCase
name|void
name|tst_QTcpSocket
operator|::
name|initTestCase
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QtNetworkSettings
operator|::
name|verifyTestNetworkSettings
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|init
name|void
name|tst_QTcpSocket
operator|::
name|init
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
block|{
name|QFETCH_GLOBAL
argument_list|(
name|int
argument_list|,
name|proxyType
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QHostAddress
argument_list|>
name|addresses
init|=
name|QHostInfo
operator|::
name|fromName
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|)
operator|.
name|addresses
argument_list|()
decl_stmt|;
name|QVERIFY2
argument_list|(
name|addresses
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|,
literal|"failed to get ip address for test server"
argument_list|)
expr_stmt|;
name|QString
name|fluke
init|=
name|addresses
operator|.
name|first
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|QNetworkProxy
name|proxy
decl_stmt|;
switch|switch
condition|(
name|proxyType
condition|)
block|{
case|case
name|Socks5Proxy
case|:
name|proxy
operator|=
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|Socks5Proxy
argument_list|,
name|fluke
argument_list|,
literal|1080
argument_list|)
expr_stmt|;
break|break;
case|case
name|Socks5Proxy
operator||
name|AuthBasic
case|:
name|proxy
operator|=
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|Socks5Proxy
argument_list|,
name|fluke
argument_list|,
literal|1081
argument_list|)
expr_stmt|;
break|break;
case|case
name|HttpProxy
operator||
name|NoAuth
case|:
name|proxy
operator|=
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|HttpProxy
argument_list|,
name|fluke
argument_list|,
literal|3128
argument_list|)
expr_stmt|;
break|break;
case|case
name|HttpProxy
operator||
name|AuthBasic
case|:
name|proxy
operator|=
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|HttpProxy
argument_list|,
name|fluke
argument_list|,
literal|3129
argument_list|)
expr_stmt|;
break|break;
case|case
name|HttpProxy
operator||
name|AuthNtlm
case|:
name|proxy
operator|=
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|HttpProxy
argument_list|,
name|fluke
argument_list|,
literal|3130
argument_list|)
expr_stmt|;
break|break;
block|}
name|QNetworkProxy
operator|::
name|setApplicationProxy
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
block|}
name|qt_qhostinfo_clear_cache
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|newSocket
name|QTcpSocket
modifier|*
name|tst_QTcpSocket
operator|::
name|newSocket
parameter_list|()
specifier|const
block|{
name|QTcpSocket
modifier|*
name|socket
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_OPENSSL
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|ssl
argument_list|)
expr_stmt|;
name|socket
operator|=
name|ssl
condition|?
operator|new
name|QSslSocket
else|:
operator|new
name|QTcpSocket
expr_stmt|;
else|#
directive|else
name|socket
operator|=
operator|new
name|QTcpSocket
expr_stmt|;
endif|#
directive|endif
name|proxyAuthCalled
operator|=
literal|0
expr_stmt|;
name|connect
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|proxyAuthenticationRequired
argument_list|(
name|QNetworkProxy
argument_list|,
name|QAuthenticator
operator|*
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|proxyAuthenticationRequired
argument_list|(
name|QNetworkProxy
argument_list|,
name|QAuthenticator
operator|*
argument_list|)
argument_list|)
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|)
expr_stmt|;
return|return
name|socket
return|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QTcpSocket
operator|::
name|cleanup
parameter_list|()
block|{
name|QNetworkProxy
operator|::
name|setApplicationProxy
argument_list|(
name|QNetworkProxy
operator|::
name|DefaultProxy
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|proxyAuthenticationRequired
name|void
name|tst_QTcpSocket
operator|::
name|proxyAuthenticationRequired
parameter_list|(
specifier|const
name|QNetworkProxy
modifier|&
parameter_list|,
name|QAuthenticator
modifier|*
name|auth
parameter_list|)
block|{
operator|++
name|proxyAuthCalled
expr_stmt|;
name|auth
operator|->
name|setUser
argument_list|(
literal|"qsockstest"
argument_list|)
expr_stmt|;
name|auth
operator|->
name|setPassword
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|socketsConstructedBeforeEventLoop
name|void
name|tst_QTcpSocket
operator|::
name|socketsConstructedBeforeEventLoop
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|ssl
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
operator|||
name|ssl
condition|)
return|return;
comment|//This test checks that sockets constructed before QCoreApplication::exec() still emit signals
comment|//see construction code in the tst_QTcpSocket constructor
name|enterLoop
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|earlyBytesWrittenCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|earlyReadyReadCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|earlyConstructedSockets
operator|->
name|endPoints
index|[
literal|0
index|]
operator|->
name|close
argument_list|()
expr_stmt|;
name|earlyConstructedSockets
operator|->
name|endPoints
index|[
literal|1
index|]
operator|->
name|close
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|earlySocketBytesSent
name|void
name|tst_QTcpSocket
operator|::
name|earlySocketBytesSent
parameter_list|(
name|qint64
comment|/* bytes */
parameter_list|)
block|{
name|earlyBytesWrittenCount
operator|++
expr_stmt|;
block|}
end_function
begin_function
DECL|function|earlySocketReadyRead
name|void
name|tst_QTcpSocket
operator|::
name|earlySocketReadyRead
parameter_list|()
block|{
name|earlyReadyReadCount
operator|++
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|constructing
name|void
name|tst_QTcpSocket
operator|::
name|constructing
parameter_list|()
block|{
name|QTcpSocket
modifier|*
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
comment|// Check the initial state of the QTcpSocket.
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|state
argument_list|()
argument_list|,
name|QTcpSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|isSequential
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|->
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|->
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|socketType
argument_list|()
argument_list|,
name|QTcpSocket
operator|::
name|TcpSocket
argument_list|)
expr_stmt|;
name|char
name|c
decl_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|getChar
argument_list|(
operator|&
name|c
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|socket
operator|->
name|bytesAvailable
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|canReadLine
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|readLine
argument_list|()
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|socketDescriptor
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|socket
operator|->
name|localPort
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|localAddress
argument_list|()
operator|==
name|QHostAddress
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|socket
operator|->
name|peerPort
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|peerAddress
argument_list|()
operator|==
name|QHostAddress
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|error
argument_list|()
argument_list|,
name|QTcpSocket
operator|::
name|UnknownSocketError
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|errorString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Unknown error"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Check the state of the socket layer?
operator|delete
name|socket
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|bind_data
name|void
name|tst_QTcpSocket
operator|::
name|bind_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"stringAddr"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"successExpected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"stringExpectedLocalAddress"
argument_list|)
expr_stmt|;
comment|// iterate all interfaces, add all addresses on them as test data
name|QList
argument_list|<
name|QNetworkInterface
argument_list|>
name|interfaces
init|=
name|QNetworkInterface
operator|::
name|allInterfaces
argument_list|()
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QNetworkInterface
modifier|&
name|interface
decl|,
name|interfaces
control|)
block|{
if|if
condition|(
operator|!
name|interface
operator|.
name|isValid
argument_list|()
condition|)
continue|continue;
foreach|foreach
control|(
specifier|const
name|QNetworkAddressEntry
modifier|&
name|entry
decl|,
name|interface
operator|.
name|addressEntries
argument_list|()
control|)
block|{
if|if
condition|(
name|entry
operator|.
name|ip
argument_list|()
operator|.
name|isInSubnet
argument_list|(
name|QHostAddress
operator|::
name|parseSubnet
argument_list|(
literal|"fe80::/10"
argument_list|)
argument_list|)
condition|)
continue|continue;
comment|// link-local bind will fail, at least on Linux, so skip it.
name|QString
name|ip
argument_list|(
name|entry
operator|.
name|ip
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|ip
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
operator|<<
name|ip
operator|<<
literal|true
operator|<<
name|ip
expr_stmt|;
block|}
block|}
comment|// additionally, try bind to known-bad addresses, and make sure this doesn't work
comment|// these ranges are guarenteed to be reserved for 'documentation purposes',
comment|// and thus, should be unused in the real world. Not that I'm assuming the
comment|// world is full of competent administrators, or anything.
name|QStringList
name|knownBad
decl_stmt|;
name|knownBad
operator|<<
literal|"198.51.100.1"
expr_stmt|;
name|knownBad
operator|<<
literal|"2001:0DB8::1"
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|badAddress
decl|,
name|knownBad
control|)
block|{
name|QTest
operator|::
name|newRow
argument_list|(
name|badAddress
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
operator|<<
name|badAddress
operator|<<
literal|false
operator|<<
name|QString
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|bind
name|void
name|tst_QTcpSocket
operator|::
name|bind
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|stringAddr
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|successExpected
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|stringExpectedLocalAddress
argument_list|)
expr_stmt|;
name|QHostAddress
name|addr
argument_list|(
name|stringAddr
argument_list|)
decl_stmt|;
name|QHostAddress
name|expectedLocalAddress
argument_list|(
name|stringExpectedLocalAddress
argument_list|)
decl_stmt|;
name|QTcpSocket
modifier|*
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Binding "
operator|<<
name|addr
expr_stmt|;
if|if
condition|(
name|successExpected
condition|)
block|{
name|QVERIFY2
argument_list|(
name|socket
operator|->
name|bind
argument_list|(
name|addr
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|socket
operator|->
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|->
name|bind
argument_list|(
name|addr
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|localAddress
argument_list|()
argument_list|,
name|expectedLocalAddress
argument_list|)
expr_stmt|;
operator|delete
name|socket
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|setInvalidSocketDescriptor
name|void
name|tst_QTcpSocket
operator|::
name|setInvalidSocketDescriptor
parameter_list|()
block|{
name|QTcpSocket
modifier|*
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|socketDescriptor
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|->
name|setSocketDescriptor
argument_list|(
operator|-
literal|5
argument_list|,
name|QTcpSocket
operator|::
name|UnconnectedState
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|socketDescriptor
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|error
argument_list|()
argument_list|,
name|QTcpSocket
operator|::
name|UnsupportedSocketOperationError
argument_list|)
expr_stmt|;
operator|delete
name|socket
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|setSocketDescriptor
name|void
name|tst_QTcpSocket
operator|::
name|setSocketDescriptor
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
return|return;
comment|// this test doesn't make sense with proxies
ifdef|#
directive|ifdef
name|Q_OS_WIN
comment|// need the dummy to ensure winsock is started
name|QTcpSocket
modifier|*
name|dummy
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|dummy
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|143
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|dummy
operator|->
name|waitForConnected
argument_list|()
argument_list|)
expr_stmt|;
name|SOCKET
name|sock
init|=
operator|::
name|socket
argument_list|(
name|AF_INET
argument_list|,
name|SOCK_STREAM
argument_list|,
name|IPPROTO_TCP
argument_list|)
decl_stmt|;
if|if
condition|(
name|sock
operator|==
name|INVALID_SOCKET
condition|)
block|{
name|qErrnoWarning
argument_list|(
name|WSAGetLastError
argument_list|()
argument_list|,
literal|"INVALID_SOCKET"
argument_list|)
expr_stmt|;
block|}
else|#
directive|else
name|SOCKET
name|sock
init|=
operator|::
name|socket
argument_list|(
name|AF_INET
argument_list|,
name|SOCK_STREAM
argument_list|,
literal|0
argument_list|)
decl_stmt|;
comment|// artificially increase the value of sock
name|SOCKET
name|sock2
init|=
operator|::
name|fcntl
argument_list|(
name|sock
argument_list|,
name|F_DUPFD
argument_list|,
name|sock
operator|+
literal|50
argument_list|)
decl_stmt|;
operator|::
name|close
argument_list|(
name|sock
argument_list|)
expr_stmt|;
name|sock
operator|=
name|sock2
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|sock
operator|!=
name|INVALID_SOCKET
argument_list|)
expr_stmt|;
name|QTcpSocket
modifier|*
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|setSocketDescriptor
argument_list|(
name|sock
argument_list|,
name|QTcpSocket
operator|::
name|UnconnectedState
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|socketDescriptor
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|sock
argument_list|)
expr_stmt|;
name|socket
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|143
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|state
argument_list|()
argument_list|,
name|QTcpSocket
operator|::
name|HostLookupState
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|socketDescriptor
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|sock
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForConnected
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
comment|// skip this, it has been broken for years, see task 260735
comment|// if somebody complains, consider fixing it, but it might break existing applications.
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"bug has been around for years, will not fix without need"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|socketDescriptor
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|sock
argument_list|)
expr_stmt|;
operator|delete
name|socket
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_WIN
operator|delete
name|dummy
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|socketDescriptor
name|void
name|tst_QTcpSocket
operator|::
name|socketDescriptor
parameter_list|()
block|{
name|QTcpSocket
modifier|*
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|socketDescriptor
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|socket
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|143
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|socket
operator|->
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|HostLookupState
operator|&&
name|socket
operator|->
name|socketDescriptor
argument_list|()
operator|==
operator|-
literal|1
operator|)
operator|||
operator|(
name|socket
operator|->
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectingState
operator|&&
name|socket
operator|->
name|socketDescriptor
argument_list|()
operator|!=
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForConnected
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|socketDescriptor
argument_list|()
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
operator|delete
name|socket
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|blockingIMAP
name|void
name|tst_QTcpSocket
operator|::
name|blockingIMAP
parameter_list|()
block|{
name|QTcpSocket
modifier|*
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
comment|// Connect
name|socket
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|143
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForConnected
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|state
argument_list|()
argument_list|,
name|QTcpSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
comment|// Read greeting
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForReadyRead
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|s
init|=
name|socket
operator|->
name|readLine
argument_list|()
decl_stmt|;
comment|// only test if an OK was returned, to make the test compatible between different
comment|// IMAP server versions
name|QCOMPARE
argument_list|(
name|s
operator|.
name|left
argument_list|(
literal|4
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
literal|"* OK"
argument_list|)
expr_stmt|;
comment|// Write NOOP
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|socket
operator|->
name|write
argument_list|(
literal|"1 NOOP\r\n"
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|socket
operator|->
name|write
argument_list|(
literal|"2 NOOP\r\n"
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|8
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|socket
operator|->
name|canReadLine
argument_list|()
condition|)
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForReadyRead
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
comment|// Read response
name|s
operator|=
name|socket
operator|->
name|readLine
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
literal|"1 OK Completed\r\n"
argument_list|)
expr_stmt|;
comment|// Write a third NOOP to verify that write doesn't clear the read buffer
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|socket
operator|->
name|write
argument_list|(
literal|"3 NOOP\r\n"
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|8
argument_list|)
expr_stmt|;
comment|// Read second response
if|if
condition|(
operator|!
name|socket
operator|->
name|canReadLine
argument_list|()
condition|)
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForReadyRead
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
name|socket
operator|->
name|readLine
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
literal|"2 OK Completed\r\n"
argument_list|)
expr_stmt|;
comment|// Read third response
if|if
condition|(
operator|!
name|socket
operator|->
name|canReadLine
argument_list|()
condition|)
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForReadyRead
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
name|socket
operator|->
name|readLine
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
literal|"3 OK Completed\r\n"
argument_list|)
expr_stmt|;
comment|// Write LOGOUT
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|socket
operator|->
name|write
argument_list|(
literal|"4 LOGOUT\r\n"
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|10
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|socket
operator|->
name|canReadLine
argument_list|()
condition|)
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForReadyRead
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
comment|// Read two lines of respose
name|s
operator|=
name|socket
operator|->
name|readLine
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
literal|"* BYE LOGOUT received\r\n"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|socket
operator|->
name|canReadLine
argument_list|()
condition|)
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForReadyRead
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|s
operator|=
name|socket
operator|->
name|readLine
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|s
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
literal|"4 OK Completed\r\n"
argument_list|)
expr_stmt|;
comment|// Close the socket
name|socket
operator|->
name|close
argument_list|()
expr_stmt|;
comment|// Check that it's closed
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|state
argument_list|()
argument_list|,
name|QTcpSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
operator|delete
name|socket
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|hostNotFound
name|void
name|tst_QTcpSocket
operator|::
name|hostNotFound
parameter_list|()
block|{
name|QTcpSocket
modifier|*
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|socket
operator|->
name|connectToHost
argument_list|(
literal|"nosuchserver.troll.no"
argument_list|,
literal|80
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|->
name|waitForConnected
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|state
argument_list|()
argument_list|,
name|QTcpSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|socket
operator|->
name|error
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|QTcpSocket
operator|::
name|HostNotFoundError
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|socket
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|timeoutConnect_data
name|void
name|tst_QTcpSocket
operator|::
name|timeoutConnect_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"address"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"host"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ip"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverIP
argument_list|()
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|timeoutConnect
name|void
name|tst_QTcpSocket
operator|::
name|timeoutConnect
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|address
argument_list|)
expr_stmt|;
name|QTcpSocket
modifier|*
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|QElapsedTimer
name|timer
decl_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
comment|// Port 1357 is configured to drop packets on the test server
name|socket
operator|->
name|connectToHost
argument_list|(
name|address
argument_list|,
literal|1357
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|timer
operator|.
name|elapsed
argument_list|()
operator|<
literal|150
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|->
name|waitForConnected
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
comment|//200ms is too short when using SOCKS proxy authentication
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|state
argument_list|()
argument_list|,
name|QTcpSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|socket
operator|->
name|error
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|QTcpSocket
operator|::
name|SocketTimeoutError
argument_list|)
argument_list|)
expr_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
name|socket
operator|->
name|connectToHost
argument_list|(
name|address
argument_list|,
literal|1357
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|timer
operator|.
name|elapsed
argument_list|()
operator|<
literal|150
argument_list|)
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|50
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|state
argument_list|()
operator|==
name|QTcpSocket
operator|::
name|ConnectingState
operator|||
name|socket
operator|->
name|state
argument_list|()
operator|==
name|QTcpSocket
operator|::
name|HostLookupState
argument_list|)
expr_stmt|;
name|socket
operator|->
name|abort
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|state
argument_list|()
argument_list|,
name|QTcpSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|openMode
argument_list|()
argument_list|,
name|QIODevice
operator|::
name|NotOpen
argument_list|)
expr_stmt|;
operator|delete
name|socket
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|nonBlockingIMAP
name|void
name|tst_QTcpSocket
operator|::
name|nonBlockingIMAP
parameter_list|()
block|{
name|QTcpSocket
modifier|*
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|connect
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|hostFound
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|nonBlockingIMAP_hostFound
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|connected
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|nonBlockingIMAP_connected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|disconnected
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|nonBlockingIMAP_closed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|bytesWritten
argument_list|(
name|qint64
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|nonBlockingIMAP_bytesWritten
argument_list|(
name|qint64
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|nonBlockingIMAP_readyRead
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|nonBlockingIMAP_socket
operator|=
name|socket
expr_stmt|;
comment|// Connect
name|socket
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|143
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|state
argument_list|()
operator|==
name|QTcpSocket
operator|::
name|HostLookupState
operator|||
name|socket
operator|->
name|state
argument_list|()
operator|==
name|QTcpSocket
operator|::
name|ConnectingState
argument_list|)
expr_stmt|;
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
if|if
condition|(
name|timeout
argument_list|()
condition|)
block|{
name|QFAIL
argument_list|(
literal|"Timed out"
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|socket
operator|->
name|state
argument_list|()
operator|==
name|QTcpSocket
operator|::
name|ConnectingState
condition|)
block|{
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
if|if
condition|(
name|timeout
argument_list|()
condition|)
block|{
name|QFAIL
argument_list|(
literal|"Timed out"
argument_list|)
expr_stmt|;
block|}
block|}
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|state
argument_list|()
argument_list|,
name|QTcpSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
if|if
condition|(
name|timeout
argument_list|()
condition|)
block|{
name|QFAIL
argument_list|(
literal|"Timed out"
argument_list|)
expr_stmt|;
block|}
comment|// Read greeting
name|QVERIFY
argument_list|(
operator|!
name|nonBlockingIMAP_data
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nonBlockingIMAP_data
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|left
argument_list|(
literal|4
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
literal|"* OK"
argument_list|)
expr_stmt|;
name|nonBlockingIMAP_data
operator|.
name|clear
argument_list|()
expr_stmt|;
name|nonBlockingIMAP_totalWritten
operator|=
literal|0
expr_stmt|;
comment|// Write NOOP
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|socket
operator|->
name|write
argument_list|(
literal|"1 NOOP\r\n"
argument_list|,
literal|8
argument_list|)
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
if|if
condition|(
name|timeout
argument_list|()
condition|)
block|{
name|QFAIL
argument_list|(
literal|"Timed out"
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|nonBlockingIMAP_totalWritten
operator|==
literal|8
argument_list|)
expr_stmt|;
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
if|if
condition|(
name|timeout
argument_list|()
condition|)
block|{
name|QFAIL
argument_list|(
literal|"Timed out"
argument_list|)
expr_stmt|;
block|}
comment|// Read response
name|QVERIFY
argument_list|(
operator|!
name|nonBlockingIMAP_data
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nonBlockingIMAP_data
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
literal|"1 OK Completed\r\n"
argument_list|)
expr_stmt|;
name|nonBlockingIMAP_data
operator|.
name|clear
argument_list|()
expr_stmt|;
name|nonBlockingIMAP_totalWritten
operator|=
literal|0
expr_stmt|;
comment|// Write LOGOUT
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|socket
operator|->
name|write
argument_list|(
literal|"2 LOGOUT\r\n"
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
if|if
condition|(
name|timeout
argument_list|()
condition|)
block|{
name|QFAIL
argument_list|(
literal|"Timed out"
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|nonBlockingIMAP_totalWritten
operator|==
literal|10
argument_list|)
expr_stmt|;
comment|// Wait for greeting
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
if|if
condition|(
name|timeout
argument_list|()
condition|)
block|{
name|QFAIL
argument_list|(
literal|"Timed out"
argument_list|)
expr_stmt|;
block|}
comment|// Read two lines of respose
name|QCOMPARE
argument_list|(
name|nonBlockingIMAP_data
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
literal|"* BYE LOGOUT received\r\n"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nonBlockingIMAP_data
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
literal|"2 OK Completed\r\n"
argument_list|)
expr_stmt|;
name|nonBlockingIMAP_data
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Close the socket
name|socket
operator|->
name|close
argument_list|()
expr_stmt|;
comment|// Check that it's closed
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|state
argument_list|()
argument_list|,
name|QTcpSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
operator|delete
name|socket
expr_stmt|;
block|}
end_function
begin_function
DECL|function|nonBlockingIMAP_hostFound
name|void
name|tst_QTcpSocket
operator|::
name|nonBlockingIMAP_hostFound
parameter_list|()
block|{
name|exitLoop
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|nonBlockingIMAP_connected
name|void
name|tst_QTcpSocket
operator|::
name|nonBlockingIMAP_connected
parameter_list|()
block|{
name|exitLoop
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|nonBlockingIMAP_readyRead
name|void
name|tst_QTcpSocket
operator|::
name|nonBlockingIMAP_readyRead
parameter_list|()
block|{
while|while
condition|(
name|nonBlockingIMAP_socket
operator|->
name|canReadLine
argument_list|()
condition|)
name|nonBlockingIMAP_data
operator|.
name|append
argument_list|(
name|nonBlockingIMAP_socket
operator|->
name|readLine
argument_list|()
argument_list|)
expr_stmt|;
name|exitLoop
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|nonBlockingIMAP_bytesWritten
name|void
name|tst_QTcpSocket
operator|::
name|nonBlockingIMAP_bytesWritten
parameter_list|(
name|qint64
name|written
parameter_list|)
block|{
name|nonBlockingIMAP_totalWritten
operator|+=
name|written
expr_stmt|;
name|exitLoop
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|nonBlockingIMAP_closed
name|void
name|tst_QTcpSocket
operator|::
name|nonBlockingIMAP_closed
parameter_list|()
block|{ }
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|delayedClose
name|void
name|tst_QTcpSocket
operator|::
name|delayedClose
parameter_list|()
block|{
name|QTcpSocket
modifier|*
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|connect
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|connected
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|nonBlockingIMAP_connected
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|disconnected
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|exitLoopSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|143
argument_list|)
expr_stmt|;
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
if|if
condition|(
name|timeout
argument_list|()
condition|)
name|QFAIL
argument_list|(
literal|"Timed out"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|state
argument_list|()
argument_list|,
name|QTcpSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|socket
operator|->
name|write
argument_list|(
literal|"1 LOGOUT\r\n"
argument_list|,
literal|10
argument_list|)
argument_list|,
literal|10
argument_list|)
expr_stmt|;
comment|// Add a huge bulk of data to be written after the logout
comment|// command. The server will shut down after receiving the LOGOUT,
comment|// so this data will not be read. But our close call should
comment|// schedule a delayed close because all the data can not be
comment|// written in one go.
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|socket
operator|->
name|write
argument_list|(
name|QByteArray
argument_list|(
literal|100000
argument_list|,
literal|'\n'
argument_list|)
argument_list|,
literal|100000
argument_list|)
argument_list|,
literal|100000
argument_list|)
expr_stmt|;
name|socket
operator|->
name|close
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|socket
operator|->
name|state
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|QTcpSocket
operator|::
name|ClosingState
argument_list|)
expr_stmt|;
name|enterLoop
argument_list|(
literal|10
argument_list|)
expr_stmt|;
if|if
condition|(
name|timeout
argument_list|()
condition|)
name|QFAIL
argument_list|(
literal|"Timed out"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|state
argument_list|()
argument_list|,
name|QTcpSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
operator|delete
name|socket
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|expectedReplyIMAP
name|QByteArray
name|tst_QTcpSocket
operator|::
name|expectedReplyIMAP
parameter_list|()
block|{
if|if
condition|(
name|expectedReplyIMAP_cached
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|fetchExpectedReplyIMAP
argument_list|()
expr_stmt|;
block|}
return|return
name|expectedReplyIMAP_cached
return|;
block|}
end_function
begin_comment
comment|// Figure out how the current IMAP server responds
end_comment
begin_function
DECL|function|fetchExpectedReplyIMAP
name|void
name|tst_QTcpSocket
operator|::
name|fetchExpectedReplyIMAP
parameter_list|()
block|{
name|QTcpSocket
modifier|*
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|socket
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|143
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|socket
operator|->
name|waitForConnected
argument_list|(
literal|10000
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|socket
operator|->
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|socket
operator|->
name|state
argument_list|()
operator|==
name|QTcpSocket
operator|::
name|ConnectedState
argument_list|,
name|qPrintable
argument_list|(
name|socket
operator|->
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|socket
operator|->
name|canReadLine
argument_list|()
argument_list|)
expr_stmt|;
name|QByteArray
name|greeting
init|=
name|socket
operator|->
name|readLine
argument_list|()
decl_stmt|;
operator|delete
name|socket
expr_stmt|;
name|QVERIFY2
argument_list|(
name|QtNetworkSettings
operator|::
name|compareReplyIMAP
argument_list|(
name|greeting
argument_list|)
argument_list|,
name|greeting
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|expectedReplyIMAP_cached
operator|=
name|greeting
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|partialRead
name|void
name|tst_QTcpSocket
operator|::
name|partialRead
parameter_list|()
block|{
name|QTcpSocket
modifier|*
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|socket
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|143
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForConnected
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|state
argument_list|()
operator|==
name|QTcpSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
name|char
name|buf
index|[
literal|512
index|]
decl_stmt|;
name|QByteArray
name|greeting
init|=
name|expectedReplyIMAP
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|greeting
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|+=
literal|2
control|)
block|{
while|while
condition|(
name|socket
operator|->
name|bytesAvailable
argument_list|()
operator|<
literal|2
condition|)
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForReadyRead
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|read
argument_list|(
name|buf
argument_list|,
literal|2
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|buf
index|[
literal|2
index|]
operator|=
literal|'\0'
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|char
operator|*
operator|)
name|buf
argument_list|,
name|greeting
operator|.
name|mid
argument_list|(
name|i
argument_list|,
literal|2
argument_list|)
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
operator|delete
name|socket
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|unget
name|void
name|tst_QTcpSocket
operator|::
name|unget
parameter_list|()
block|{
name|QTcpSocket
modifier|*
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|socket
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|143
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForConnected
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|state
argument_list|()
operator|==
name|QTcpSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
name|char
name|buf
index|[
literal|512
index|]
decl_stmt|;
name|QByteArray
name|greeting
init|=
name|expectedReplyIMAP
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|greeting
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
name|i
operator|+=
literal|2
control|)
block|{
while|while
condition|(
name|socket
operator|->
name|bytesAvailable
argument_list|()
operator|<
literal|2
condition|)
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForReadyRead
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|bA
init|=
name|socket
operator|->
name|bytesAvailable
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|read
argument_list|(
name|buf
argument_list|,
literal|2
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|buf
index|[
literal|2
index|]
operator|=
literal|'\0'
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|char
operator|*
operator|)
name|buf
argument_list|,
name|greeting
operator|.
name|mid
argument_list|(
name|i
argument_list|,
literal|2
argument_list|)
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|socket
operator|->
name|bytesAvailable
argument_list|()
argument_list|,
name|bA
operator|-
literal|2
argument_list|)
expr_stmt|;
name|socket
operator|->
name|ungetChar
argument_list|(
name|buf
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|socket
operator|->
name|ungetChar
argument_list|(
name|buf
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|socket
operator|->
name|bytesAvailable
argument_list|()
argument_list|,
name|bA
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|read
argument_list|(
name|buf
argument_list|,
literal|2
argument_list|)
operator|==
literal|2
argument_list|)
expr_stmt|;
name|buf
index|[
literal|2
index|]
operator|=
literal|'\0'
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|char
operator|*
operator|)
name|buf
argument_list|,
name|greeting
operator|.
name|mid
argument_list|(
name|i
argument_list|,
literal|2
argument_list|)
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
block|}
operator|delete
name|socket
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|readRegularFile_readyRead
name|void
name|tst_QTcpSocket
operator|::
name|readRegularFile_readyRead
parameter_list|()
block|{
name|exitLoop
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|readAllAfterClose
name|void
name|tst_QTcpSocket
operator|::
name|readAllAfterClose
parameter_list|()
block|{
name|QTcpSocket
modifier|*
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|socket
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|143
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|readRegularFile_readyRead
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|enterLoop
argument_list|(
literal|10
argument_list|)
expr_stmt|;
if|if
condition|(
name|timeout
argument_list|()
condition|)
name|QFAIL
argument_list|(
literal|"Network operation timed out"
argument_list|)
expr_stmt|;
name|socket
operator|->
name|close
argument_list|()
expr_stmt|;
name|QByteArray
name|array
init|=
name|socket
operator|->
name|readAll
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|array
operator|.
name|size
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|socket
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|openCloseOpenClose
name|void
name|tst_QTcpSocket
operator|::
name|openCloseOpenClose
parameter_list|()
block|{
name|QTcpSocket
modifier|*
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|state
argument_list|()
argument_list|,
name|QTcpSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|socket
operator|->
name|openMode
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|QIODevice
operator|::
name|NotOpen
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|isSequential
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|->
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|socketType
argument_list|()
operator|==
name|QTcpSocket
operator|::
name|TcpSocket
argument_list|)
expr_stmt|;
name|char
name|c
decl_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|getChar
argument_list|(
operator|&
name|c
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|socket
operator|->
name|bytesAvailable
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|canReadLine
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|readLine
argument_list|()
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|socketDescriptor
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|socket
operator|->
name|localPort
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|localAddress
argument_list|()
operator|==
name|QHostAddress
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|socket
operator|->
name|peerPort
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|peerAddress
argument_list|()
operator|==
name|QHostAddress
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|error
argument_list|()
argument_list|,
name|QTcpSocket
operator|::
name|UnknownSocketError
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|errorString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Unknown error"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|state
argument_list|()
operator|==
name|QTcpSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
name|socket
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|143
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForConnected
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|->
name|close
argument_list|()
expr_stmt|;
block|}
operator|delete
name|socket
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|connectDisconnectConnectDisconnect
name|void
name|tst_QTcpSocket
operator|::
name|connectDisconnectConnectDisconnect
parameter_list|()
block|{
name|QTcpSocket
modifier|*
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|state
argument_list|()
argument_list|,
name|QTcpSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|socketType
argument_list|()
operator|==
name|QTcpSocket
operator|::
name|TcpSocket
argument_list|)
expr_stmt|;
name|socket
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|143
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForReadyRead
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|socket
operator|->
name|read
argument_list|(
literal|4
argument_list|)
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"* OK"
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|->
name|disconnectFromHost
argument_list|()
expr_stmt|;
if|if
condition|(
name|socket
operator|->
name|state
argument_list|()
operator|!=
name|QTcpSocket
operator|::
name|UnconnectedState
condition|)
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForDisconnected
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|socket
operator|->
name|openMode
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
argument_list|)
expr_stmt|;
block|}
operator|delete
name|socket
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|disconnectWhileConnecting_data
name|void
name|tst_QTcpSocket
operator|::
name|disconnectWhileConnecting_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"data"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"closeDirectly"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"without-data"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"without-data+close"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"with-data"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Hello, world!"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"with-data+close"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Hello, world!"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QByteArray
name|bigData
argument_list|(
literal|1024
operator|*
literal|1024
argument_list|,
literal|'@'
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"with-big-data"
argument_list|)
operator|<<
name|bigData
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"with-big-data+close"
argument_list|)
operator|<<
name|bigData
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|disconnectWhileConnecting
name|void
name|tst_QTcpSocket
operator|::
name|disconnectWhileConnecting
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
return|return;
comment|//proxy not useful for localhost test case
name|QTcpServer
name|server
decl_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|listen
argument_list|(
name|QHostAddress
operator|::
name|LocalHost
argument_list|)
argument_list|)
expr_stmt|;
comment|// proceed to the connect-write-disconnect
name|QTcpSocket
modifier|*
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|socket
operator|->
name|connectToHost
argument_list|(
literal|"127.0.0.1"
argument_list|,
name|server
operator|.
name|serverPort
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|data
operator|.
name|isEmpty
argument_list|()
condition|)
name|socket
operator|->
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|socket
operator|->
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
condition|)
name|QSKIP
argument_list|(
literal|"localhost connections are immediate, test case is invalid"
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|closeDirectly
argument_list|)
expr_stmt|;
if|if
condition|(
name|closeDirectly
condition|)
block|{
name|socket
operator|->
name|close
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|socket
operator|->
name|openMode
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|QIODevice
operator|::
name|NotOpen
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|socket
operator|->
name|disconnectFromHost
argument_list|()
expr_stmt|;
block|}
name|connect
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|disconnected
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|exitLoopSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|enterLoop
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
operator|!
name|timeout
argument_list|()
argument_list|,
literal|"Network timeout"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|closeDirectly
condition|)
block|{
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|socket
operator|->
name|openMode
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|->
name|close
argument_list|()
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|socket
operator|->
name|openMode
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|QIODevice
operator|::
name|NotOpen
argument_list|)
argument_list|)
expr_stmt|;
comment|// accept the other side and verify that it was sent properly:
name|QVERIFY
argument_list|(
name|server
operator|.
name|hasPendingConnections
argument_list|()
operator|||
name|server
operator|.
name|waitForNewConnection
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QTcpSocket
modifier|*
name|othersocket
init|=
name|server
operator|.
name|nextPendingConnection
argument_list|()
decl_stmt|;
if|if
condition|(
name|othersocket
operator|->
name|state
argument_list|()
operator|!=
name|QAbstractSocket
operator|::
name|UnconnectedState
condition|)
name|QVERIFY2
argument_list|(
name|othersocket
operator|->
name|waitForDisconnected
argument_list|(
literal|10000
argument_list|)
argument_list|,
literal|"Network timeout"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|othersocket
operator|->
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|othersocket
operator|->
name|readAll
argument_list|()
argument_list|,
name|data
argument_list|)
expr_stmt|;
operator|delete
name|socket
expr_stmt|;
operator|delete
name|othersocket
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_class
DECL|class|ReceiverThread
class|class
name|ReceiverThread
super|:
specifier|public
name|QThread
block|{
DECL|member|server
name|QTcpServer
modifier|*
name|server
decl_stmt|;
public|public:
DECL|member|serverPort
name|int
name|serverPort
decl_stmt|;
DECL|member|ok
name|bool
name|ok
decl_stmt|;
DECL|member|receivedData
name|QByteArray
name|receivedData
decl_stmt|;
DECL|member|quit
specifier|volatile
name|bool
name|quit
decl_stmt|;
DECL|function|ReceiverThread
name|ReceiverThread
parameter_list|()
member_init_list|:
name|server
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|ok
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|quit
argument_list|(
literal|false
argument_list|)
block|{ }
DECL|function|~ReceiverThread
name|~
name|ReceiverThread
parameter_list|()
block|{ }
DECL|function|listen
name|bool
name|listen
parameter_list|()
block|{
name|server
operator|=
operator|new
name|QTcpServer
expr_stmt|;
if|if
condition|(
operator|!
name|server
operator|->
name|listen
argument_list|(
name|QHostAddress
operator|::
name|LocalHost
argument_list|)
condition|)
return|return
literal|false
return|;
name|serverPort
operator|=
name|server
operator|->
name|serverPort
argument_list|()
expr_stmt|;
name|server
operator|->
name|moveToThread
argument_list|(
name|this
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
DECL|function|cleanup
specifier|static
name|void
name|cleanup
parameter_list|(
name|void
modifier|*
name|ptr
parameter_list|)
block|{
name|ReceiverThread
modifier|*
name|self
init|=
cast|reinterpret_cast
argument_list|<
name|ReceiverThread
operator|*
argument_list|>
argument_list|(
name|ptr
argument_list|)
decl_stmt|;
name|self
operator|->
name|quit
operator|=
literal|true
expr_stmt|;
name|self
operator|->
name|wait
argument_list|(
literal|30000
argument_list|)
expr_stmt|;
operator|delete
name|self
expr_stmt|;
block|}
protected|protected:
DECL|function|run
name|void
name|run
parameter_list|()
block|{
name|bool
name|timedOut
init|=
literal|false
decl_stmt|;
while|while
condition|(
operator|!
name|quit
condition|)
block|{
if|if
condition|(
name|server
operator|->
name|waitForNewConnection
argument_list|(
literal|500
argument_list|,
operator|&
name|timedOut
argument_list|)
condition|)
break|break;
if|if
condition|(
operator|!
name|timedOut
condition|)
return|return;
block|}
name|QTcpSocket
modifier|*
name|socket
init|=
name|server
operator|->
name|nextPendingConnection
argument_list|()
decl_stmt|;
while|while
condition|(
operator|!
name|quit
condition|)
block|{
if|if
condition|(
name|socket
operator|->
name|waitForDisconnected
argument_list|(
literal|500
argument_list|)
condition|)
break|break;
if|if
condition|(
name|socket
operator|->
name|error
argument_list|()
operator|!=
name|QAbstractSocket
operator|::
name|SocketTimeoutError
condition|)
return|return;
block|}
if|if
condition|(
operator|!
name|quit
condition|)
block|{
name|receivedData
operator|=
name|socket
operator|->
name|readAll
argument_list|()
expr_stmt|;
name|ok
operator|=
literal|true
expr_stmt|;
block|}
operator|delete
name|socket
expr_stmt|;
operator|delete
name|server
expr_stmt|;
name|server
operator|=
literal|0
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|disconnectWhileConnectingNoEventLoop_data
name|void
name|tst_QTcpSocket
operator|::
name|disconnectWhileConnectingNoEventLoop_data
parameter_list|()
block|{
name|disconnectWhileConnecting_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|disconnectWhileConnectingNoEventLoop
name|void
name|tst_QTcpSocket
operator|::
name|disconnectWhileConnectingNoEventLoop
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
return|return;
comment|//proxy not useful for localhost test case
name|QScopedPointer
argument_list|<
name|ReceiverThread
argument_list|,
name|ReceiverThread
argument_list|>
name|thread
argument_list|(
operator|new
name|ReceiverThread
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|thread
operator|->
name|listen
argument_list|()
argument_list|)
expr_stmt|;
name|thread
operator|->
name|start
argument_list|()
expr_stmt|;
comment|// proceed to the connect-write-disconnect
name|QTcpSocket
modifier|*
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|socket
operator|->
name|connectToHost
argument_list|(
literal|"127.0.0.1"
argument_list|,
name|thread
operator|->
name|serverPort
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|data
operator|.
name|isEmpty
argument_list|()
condition|)
name|socket
operator|->
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
if|if
condition|(
name|socket
operator|->
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
condition|)
name|QSKIP
argument_list|(
literal|"localhost connections are immediate, test case is invalid"
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|closeDirectly
argument_list|)
expr_stmt|;
if|if
condition|(
name|closeDirectly
condition|)
block|{
name|socket
operator|->
name|close
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|socket
operator|->
name|openMode
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|QIODevice
operator|::
name|NotOpen
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|socket
operator|->
name|disconnectFromHost
argument_list|()
expr_stmt|;
block|}
name|QVERIFY2
argument_list|(
name|socket
operator|->
name|waitForDisconnected
argument_list|(
literal|10000
argument_list|)
argument_list|,
literal|"Network timeout"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|closeDirectly
condition|)
block|{
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|socket
operator|->
name|openMode
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|->
name|close
argument_list|()
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|socket
operator|->
name|openMode
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|QIODevice
operator|::
name|NotOpen
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|socket
expr_stmt|;
comment|// check if the other side received everything ok
name|QVERIFY
argument_list|(
name|thread
operator|->
name|wait
argument_list|(
literal|30000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|thread
operator|->
name|ok
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|thread
operator|->
name|receivedData
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|disconnectWhileLookingUp_data
name|void
name|tst_QTcpSocket
operator|::
name|disconnectWhileLookingUp_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"doClose"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"disconnect"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"close"
argument_list|)
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|disconnectWhileLookingUp
name|void
name|tst_QTcpSocket
operator|::
name|disconnectWhileLookingUp
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
return|return;
comment|// we let the proxies do the lookup now
comment|// just connect and disconnect, then make sure nothing weird happened
name|QTcpSocket
modifier|*
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|socket
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|21
argument_list|)
expr_stmt|;
comment|// check that connect is in progress
name|QVERIFY
argument_list|(
name|socket
operator|->
name|state
argument_list|()
operator|!=
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|doClose
argument_list|)
expr_stmt|;
if|if
condition|(
name|doClose
condition|)
block|{
name|socket
operator|->
name|close
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|openMode
argument_list|()
operator|==
name|QIODevice
operator|::
name|NotOpen
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|socket
operator|->
name|disconnectFromHost
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|openMode
argument_list|()
operator|==
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
expr_stmt|;
block|}
comment|// let anything queued happen
name|QEventLoop
name|loop
decl_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|50
argument_list|,
operator|&
name|loop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|loop
operator|.
name|exec
argument_list|()
expr_stmt|;
comment|// recheck
if|if
condition|(
name|doClose
condition|)
block|{
name|QVERIFY
argument_list|(
name|socket
operator|->
name|openMode
argument_list|()
operator|==
name|QIODevice
operator|::
name|NotOpen
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|socket
operator|->
name|openMode
argument_list|()
operator|==
name|QIODevice
operator|::
name|ReadWrite
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|socket
operator|->
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|downloadBigFile
name|void
name|tst_QTcpSocket
operator|::
name|downloadBigFile
parameter_list|()
block|{
if|if
condition|(
name|tmpSocket
condition|)
operator|delete
name|tmpSocket
expr_stmt|;
name|tmpSocket
operator|=
name|newSocket
argument_list|()
expr_stmt|;
name|connect
argument_list|(
name|tmpSocket
argument_list|,
name|SIGNAL
argument_list|(
name|connected
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|exitLoopSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|tmpSocket
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|downloadBigFileSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|tmpSocket
argument_list|,
name|SIGNAL
argument_list|(
name|disconnected
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|exitLoopSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tmpSocket
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|80
argument_list|)
expr_stmt|;
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
if|if
condition|(
name|timeout
argument_list|()
condition|)
block|{
operator|delete
name|tmpSocket
expr_stmt|;
name|tmpSocket
operator|=
literal|0
expr_stmt|;
name|QFAIL
argument_list|(
literal|"Network operation timed out"
argument_list|)
expr_stmt|;
block|}
name|QByteArray
name|hostName
init|=
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|tmpSocket
operator|->
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tmpSocket
operator|->
name|write
argument_list|(
literal|"GET /qtest/mediumfile HTTP/1.0\r\n"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tmpSocket
operator|->
name|write
argument_list|(
literal|"HOST: "
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tmpSocket
operator|->
name|write
argument_list|(
name|hostName
operator|.
name|data
argument_list|()
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tmpSocket
operator|->
name|write
argument_list|(
literal|"\r\n"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tmpSocket
operator|->
name|write
argument_list|(
literal|"\r\n"
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|bytesAvailable
operator|=
literal|0
expr_stmt|;
name|expectedLength
operator|=
literal|0
expr_stmt|;
name|readingBody
operator|=
literal|false
expr_stmt|;
name|QTime
name|stopWatch
decl_stmt|;
name|stopWatch
operator|.
name|start
argument_list|()
expr_stmt|;
name|enterLoop
argument_list|(
literal|600
argument_list|)
expr_stmt|;
if|if
condition|(
name|timeout
argument_list|()
condition|)
block|{
operator|delete
name|tmpSocket
expr_stmt|;
name|tmpSocket
operator|=
literal|0
expr_stmt|;
if|if
condition|(
name|bytesAvailable
operator|>
literal|0
condition|)
name|qDebug
argument_list|(
literal|"Slow Connection, only downloaded %ld of %d"
argument_list|,
name|long
argument_list|(
name|bytesAvailable
argument_list|)
argument_list|,
literal|10000281
argument_list|)
expr_stmt|;
name|QFAIL
argument_list|(
literal|"Network operation timed out"
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|bytesAvailable
argument_list|,
name|expectedLength
argument_list|)
expr_stmt|;
name|qDebug
argument_list|(
literal|"\t\t%.1fMB/%.1fs: %.1fMB/s"
argument_list|,
name|bytesAvailable
operator|/
operator|(
literal|1024.0
operator|*
literal|1024.0
operator|)
argument_list|,
name|stopWatch
operator|.
name|elapsed
argument_list|()
operator|/
literal|1024.0
argument_list|,
operator|(
name|bytesAvailable
operator|/
operator|(
name|stopWatch
operator|.
name|elapsed
argument_list|()
operator|/
literal|1000.0
operator|)
operator|)
operator|/
operator|(
literal|1024
operator|*
literal|1024
operator|)
argument_list|)
expr_stmt|;
operator|delete
name|tmpSocket
expr_stmt|;
name|tmpSocket
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|exitLoopSlot
name|void
name|tst_QTcpSocket
operator|::
name|exitLoopSlot
parameter_list|()
block|{
name|exitLoop
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|downloadBigFileSlot
name|void
name|tst_QTcpSocket
operator|::
name|downloadBigFileSlot
parameter_list|()
block|{
if|if
condition|(
operator|!
name|readingBody
condition|)
block|{
while|while
condition|(
name|tmpSocket
operator|->
name|canReadLine
argument_list|()
condition|)
block|{
name|QByteArray
name|array
init|=
name|tmpSocket
operator|->
name|readLine
argument_list|()
decl_stmt|;
if|if
condition|(
name|array
operator|.
name|startsWith
argument_list|(
literal|"Content-Length"
argument_list|)
condition|)
name|expectedLength
operator|=
name|array
operator|.
name|simplified
argument_list|()
operator|.
name|split
argument_list|(
literal|' '
argument_list|)
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
expr_stmt|;
if|if
condition|(
name|array
operator|==
literal|"\r\n"
condition|)
block|{
name|readingBody
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
block|}
if|if
condition|(
name|readingBody
condition|)
block|{
name|bytesAvailable
operator|+=
name|tmpSocket
operator|->
name|readAll
argument_list|()
operator|.
name|size
argument_list|()
expr_stmt|;
if|if
condition|(
name|bytesAvailable
operator|==
name|expectedLength
condition|)
name|exitLoop
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|readLine
name|void
name|tst_QTcpSocket
operator|::
name|readLine
parameter_list|()
block|{
name|QTcpSocket
modifier|*
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|socket
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|143
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForConnected
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|socket
operator|->
name|canReadLine
argument_list|()
condition|)
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForReadyRead
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|char
name|buffer
index|[
literal|1024
index|]
decl_stmt|;
name|qint64
name|linelen
init|=
name|socket
operator|->
name|readLine
argument_list|(
name|buffer
argument_list|,
sizeof|sizeof
argument_list|(
name|buffer
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|linelen
operator|>=
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|linelen
operator|<
literal|1024
argument_list|)
expr_stmt|;
name|QByteArray
name|reply
init|=
name|QByteArray
operator|::
name|fromRawData
argument_list|(
name|buffer
argument_list|,
name|linelen
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|buffer
index|[
name|linelen
operator|-
literal|2
index|]
argument_list|,
operator|(
name|int
operator|)
literal|'\r'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|buffer
index|[
name|linelen
operator|-
literal|1
index|]
argument_list|,
operator|(
name|int
operator|)
literal|'\n'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|buffer
index|[
name|linelen
index|]
argument_list|,
operator|(
name|int
operator|)
literal|'\0'
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|QtNetworkSettings
operator|::
name|compareReplyIMAP
argument_list|(
name|reply
argument_list|)
argument_list|,
name|reply
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|write
argument_list|(
literal|"1 NOOP\r\n"
argument_list|)
argument_list|,
name|qint64
argument_list|(
literal|8
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|socket
operator|->
name|bytesAvailable
argument_list|()
operator|<
literal|10
condition|)
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForReadyRead
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|readLine
argument_list|(
name|buffer
argument_list|,
literal|11
argument_list|)
argument_list|,
name|qint64
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|buffer
argument_list|,
literal|"1 OK Compl"
argument_list|)
expr_stmt|;
while|while
condition|(
name|socket
operator|->
name|bytesAvailable
argument_list|()
operator|<
literal|6
condition|)
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForReadyRead
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|readLine
argument_list|(
name|buffer
argument_list|,
literal|11
argument_list|)
argument_list|,
name|qint64
argument_list|(
literal|6
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
specifier|const
name|char
operator|*
operator|)
name|buffer
argument_list|,
literal|"eted\r\n"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|->
name|waitForReadyRead
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|readLine
argument_list|(
name|buffer
argument_list|,
sizeof|sizeof
argument_list|(
name|buffer
argument_list|)
argument_list|)
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|error
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|SocketTimeoutError
operator|||
name|socket
operator|->
name|error
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|RemoteHostClosedError
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|bytesAvailable
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|->
name|close
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|readLine
argument_list|(
name|buffer
argument_list|,
sizeof|sizeof
argument_list|(
name|buffer
argument_list|)
argument_list|)
argument_list|,
name|qint64
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|socket
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|readLineString
name|void
name|tst_QTcpSocket
operator|::
name|readLineString
parameter_list|()
block|{
name|QTcpSocket
modifier|*
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|socket
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|143
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForReadyRead
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|arr
init|=
name|socket
operator|->
name|readLine
argument_list|()
decl_stmt|;
name|QVERIFY2
argument_list|(
name|QtNetworkSettings
operator|::
name|compareReplyIMAP
argument_list|(
name|arr
argument_list|)
argument_list|,
name|arr
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|socket
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|readChunks
name|void
name|tst_QTcpSocket
operator|::
name|readChunks
parameter_list|()
block|{
name|QTcpSocket
modifier|*
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|socket
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|143
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForConnected
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForReadyRead
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|char
name|buf
index|[
literal|4096
index|]
decl_stmt|;
name|memset
argument_list|(
name|buf
argument_list|,
literal|'@'
argument_list|,
sizeof|sizeof
argument_list|(
name|buf
argument_list|)
argument_list|)
expr_stmt|;
name|qint64
name|dataLength
init|=
name|socket
operator|->
name|read
argument_list|(
name|buf
argument_list|,
sizeof|sizeof
argument_list|(
name|buf
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|dataLength
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|buf
index|[
name|dataLength
operator|-
literal|2
index|]
argument_list|,
literal|'\r'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|buf
index|[
name|dataLength
operator|-
literal|1
index|]
argument_list|,
literal|'\n'
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|buf
index|[
name|dataLength
index|]
argument_list|,
literal|'@'
argument_list|)
expr_stmt|;
operator|delete
name|socket
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|waitForBytesWritten
name|void
name|tst_QTcpSocket
operator|::
name|waitForBytesWritten
parameter_list|()
block|{
name|QTcpSocket
modifier|*
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|socket
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|80
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForConnected
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|->
name|write
argument_list|(
literal|"GET / HTTP/1.0\r\n\r\n"
argument_list|)
expr_stmt|;
name|qint64
name|toWrite
init|=
name|socket
operator|->
name|bytesToWrite
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForBytesWritten
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|toWrite
operator|>
name|socket
operator|->
name|bytesToWrite
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|socket
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|waitForBytesWrittenMinusOne
name|void
name|tst_QTcpSocket
operator|::
name|waitForBytesWrittenMinusOne
parameter_list|()
block|{
name|QTcpSocket
modifier|*
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|socket
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|80
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForConnected
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|->
name|write
argument_list|(
literal|"GET / HTTP/1.0\r\n\r\n"
argument_list|)
expr_stmt|;
name|qint64
name|toWrite
init|=
name|socket
operator|->
name|bytesToWrite
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForBytesWritten
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|toWrite
operator|>
name|socket
operator|->
name|bytesToWrite
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|socket
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|waitForReadyRead
name|void
name|tst_QTcpSocket
operator|::
name|waitForReadyRead
parameter_list|()
block|{
name|QTcpSocket
modifier|*
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|socket
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|80
argument_list|)
expr_stmt|;
name|socket
operator|->
name|write
argument_list|(
literal|"GET / HTTP/1.0\r\n\r\n"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForReadyRead
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|socket
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|waitForReadyReadMinusOne
name|void
name|tst_QTcpSocket
operator|::
name|waitForReadyReadMinusOne
parameter_list|()
block|{
name|QTcpSocket
modifier|*
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|socket
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|80
argument_list|)
expr_stmt|;
name|socket
operator|->
name|write
argument_list|(
literal|"GET / HTTP/1.0\r\n\r\n"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForReadyRead
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|socket
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|flush
name|void
name|tst_QTcpSocket
operator|::
name|flush
parameter_list|()
block|{
name|QTcpSocket
modifier|*
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|socket
operator|->
name|flush
argument_list|()
expr_stmt|;
name|connect
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|connected
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|exitLoopSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|143
argument_list|)
expr_stmt|;
name|enterLoop
argument_list|(
literal|60
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|socket
operator|->
name|write
argument_list|(
literal|"1 LOGOUT\r\n"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|bytesToWrite
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|->
name|flush
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|bytesToWrite
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|->
name|close
argument_list|()
expr_stmt|;
operator|delete
name|socket
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|synchronousApi
name|void
name|tst_QTcpSocket
operator|::
name|synchronousApi
parameter_list|()
block|{
name|QTcpSocket
modifier|*
name|ftpSocket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|ftpSocket
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|21
argument_list|)
expr_stmt|;
name|ftpSocket
operator|->
name|write
argument_list|(
literal|"QUIT\r\n"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ftpSocket
operator|->
name|waitForDisconnected
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ftpSocket
operator|->
name|bytesAvailable
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QByteArray
name|arr
init|=
name|ftpSocket
operator|->
name|readAll
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|arr
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|ftpSocket
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|dontCloseOnTimeout
name|void
name|tst_QTcpSocket
operator|::
name|dontCloseOnTimeout
parameter_list|()
block|{
name|QTcpServer
name|server
decl_stmt|;
name|server
operator|.
name|setProxy
argument_list|(
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|NoProxy
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|listen
argument_list|()
argument_list|)
expr_stmt|;
name|QHostAddress
name|serverAddress
init|=
name|QHostAddress
operator|::
name|LocalHost
decl_stmt|;
if|if
condition|(
operator|!
operator|(
name|server
operator|.
name|serverAddress
argument_list|()
operator|==
name|QHostAddress
operator|::
name|AnyIPv4
operator|)
operator|&&
operator|!
operator|(
name|server
operator|.
name|serverAddress
argument_list|()
operator|==
name|QHostAddress
operator|::
name|AnyIPv6
operator|)
operator|&&
operator|!
operator|(
name|server
operator|.
name|serverAddress
argument_list|()
operator|==
name|QHostAddress
operator|::
name|Any
operator|)
condition|)
name|serverAddress
operator|=
name|server
operator|.
name|serverAddress
argument_list|()
expr_stmt|;
name|QTcpSocket
modifier|*
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|socket
operator|->
name|connectToHost
argument_list|(
name|serverAddress
argument_list|,
name|server
operator|.
name|serverPort
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|->
name|waitForReadyRead
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|error
argument_list|()
argument_list|,
name|QTcpSocket
operator|::
name|SocketTimeoutError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|->
name|waitForDisconnected
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|error
argument_list|()
argument_list|,
name|QTcpSocket
operator|::
name|SocketTimeoutError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|socket
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|recursiveReadyRead
name|void
name|tst_QTcpSocket
operator|::
name|recursiveReadyRead
parameter_list|()
block|{
name|QTcpSocket
modifier|*
name|smtp
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|connect
argument_list|(
name|smtp
argument_list|,
name|SIGNAL
argument_list|(
name|connected
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|exitLoopSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|smtp
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|recursiveReadyReadSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tmpSocket
operator|=
name|smtp
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
name|smtp
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|smtp
operator|->
name|connectToHost
argument_list|(
literal|"smtp.trolltech.com"
argument_list|,
literal|25
argument_list|)
expr_stmt|;
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
operator|!
name|timeout
argument_list|()
argument_list|,
literal|"Timed out when connecting to smtp.trolltech.com:25"
argument_list|)
expr_stmt|;
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
operator|!
name|timeout
argument_list|()
argument_list|,
literal|"Timed out when waiting for the readyRead() signal"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
operator|delete
name|smtp
expr_stmt|;
block|}
end_function
begin_function
DECL|function|recursiveReadyReadSlot
name|void
name|tst_QTcpSocket
operator|::
name|recursiveReadyReadSlot
parameter_list|()
block|{
comment|// make sure the server spits out more data
name|tmpSocket
operator|->
name|write
argument_list|(
literal|"NOOP\r\n"
argument_list|)
expr_stmt|;
name|tmpSocket
operator|->
name|flush
argument_list|()
expr_stmt|;
comment|// indiscriminately enter the event loop and start processing
comment|// events again. but oops! future socket notifications will cause
comment|// undesired recursive behavior. Unless QTcpSocket is smart, which
comment|// it of course is. :-)
name|QEventLoop
name|loop
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
name|loop
operator|.
name|processEvents
argument_list|()
expr_stmt|;
comment|// all we really wanted to do was process some events, then exit
comment|// the loop
name|exitLoop
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|atEnd
name|void
name|tst_QTcpSocket
operator|::
name|atEnd
parameter_list|()
block|{
name|QTcpSocket
modifier|*
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|socket
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|21
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForReadyRead
argument_list|(
literal|15000
argument_list|)
argument_list|)
expr_stmt|;
name|QTextStream
name|stream
argument_list|(
name|socket
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|stream
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|greeting
init|=
name|stream
operator|.
name|readLine
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|stream
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
comment|// Test server must use some vsFTPd 2.x.x version
name|QVERIFY2
argument_list|(
name|greeting
operator|.
name|length
argument_list|()
operator|==
sizeof|sizeof
argument_list|(
literal|"220 (vsFTPd 2.x.x)"
argument_list|)
operator|-
literal|1
argument_list|,
name|qPrintable
argument_list|(
name|greeting
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|greeting
operator|.
name|startsWith
argument_list|(
literal|"220 (vsFTPd 2."
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|greeting
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|greeting
operator|.
name|endsWith
argument_list|(
literal|")"
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|greeting
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|socket
expr_stmt|;
block|}
end_function
begin_class
DECL|class|TestThread
class|class
name|TestThread
super|:
specifier|public
name|QThread
block|{
name|Q_OBJECT
public|public:
DECL|function|data
specifier|inline
name|QByteArray
name|data
parameter_list|()
specifier|const
block|{
return|return
name|socketData
return|;
block|}
protected|protected:
DECL|function|run
specifier|inline
name|void
name|run
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_OPENSSL
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|ssl
argument_list|)
expr_stmt|;
if|if
condition|(
name|ssl
condition|)
name|socket
operator|=
operator|new
name|QSslSocket
expr_stmt|;
else|else
endif|#
directive|endif
name|socket
operator|=
operator|new
name|QTcpSocket
expr_stmt|;
name|connect
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|getData
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|disconnected
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|closed
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|proxyAuthenticationRequired
argument_list|(
name|QNetworkProxy
argument_list|,
name|QAuthenticator
operator|*
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|proxyAuthenticationRequired
argument_list|(
name|QNetworkProxy
argument_list|,
name|QAuthenticator
operator|*
argument_list|)
argument_list|)
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|)
expr_stmt|;
name|socket
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|21
argument_list|)
expr_stmt|;
name|socket
operator|->
name|write
argument_list|(
literal|"QUIT\r\n"
argument_list|)
expr_stmt|;
name|exec
argument_list|()
expr_stmt|;
operator|delete
name|socket
expr_stmt|;
block|}
private|private
name|slots
private|:
DECL|function|getData
specifier|inline
name|void
name|getData
parameter_list|()
block|{
name|socketData
operator|+=
name|socket
operator|->
name|readAll
argument_list|()
expr_stmt|;
block|}
DECL|function|closed
specifier|inline
name|void
name|closed
parameter_list|()
block|{
name|quit
argument_list|()
expr_stmt|;
block|}
DECL|function|proxyAuthenticationRequired
specifier|inline
name|void
name|proxyAuthenticationRequired
parameter_list|(
specifier|const
name|QNetworkProxy
modifier|&
parameter_list|,
name|QAuthenticator
modifier|*
name|auth
parameter_list|)
block|{
name|auth
operator|->
name|setUser
argument_list|(
literal|"qsockstest"
argument_list|)
expr_stmt|;
name|auth
operator|->
name|setPassword
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
block|}
private|private:
DECL|member|exitCode
name|int
name|exitCode
decl_stmt|;
DECL|member|socket
name|QTcpSocket
modifier|*
name|socket
decl_stmt|;
DECL|member|socketData
name|QByteArray
name|socketData
decl_stmt|;
block|}
class|;
end_class
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|socketInAThread
name|void
name|tst_QTcpSocket
operator|::
name|socketInAThread
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
name|TestThread
name|thread
decl_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|thread
operator|.
name|wait
argument_list|(
literal|15000
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|data
init|=
name|thread
operator|.
name|data
argument_list|()
decl_stmt|;
name|QVERIFY2
argument_list|(
name|QtNetworkSettings
operator|::
name|compareReplyFtp
argument_list|(
name|data
argument_list|)
argument_list|,
name|data
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|socketsInThreads
name|void
name|tst_QTcpSocket
operator|::
name|socketsInThreads
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|3
condition|;
operator|++
name|i
control|)
block|{
name|TestThread
name|thread1
decl_stmt|;
name|TestThread
name|thread2
decl_stmt|;
name|TestThread
name|thread3
decl_stmt|;
name|thread1
operator|.
name|start
argument_list|()
expr_stmt|;
name|thread2
operator|.
name|start
argument_list|()
expr_stmt|;
name|thread3
operator|.
name|start
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|thread2
operator|.
name|wait
argument_list|(
literal|15000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|thread3
operator|.
name|wait
argument_list|(
literal|15000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|thread1
operator|.
name|wait
argument_list|(
literal|15000
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|data1
init|=
name|thread1
operator|.
name|data
argument_list|()
decl_stmt|;
name|QByteArray
name|data2
init|=
name|thread2
operator|.
name|data
argument_list|()
decl_stmt|;
name|QByteArray
name|data3
init|=
name|thread3
operator|.
name|data
argument_list|()
decl_stmt|;
name|QVERIFY2
argument_list|(
name|QtNetworkSettings
operator|::
name|compareReplyFtp
argument_list|(
name|data1
argument_list|)
argument_list|,
name|data1
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|QtNetworkSettings
operator|::
name|compareReplyFtp
argument_list|(
name|data2
argument_list|)
argument_list|,
name|data2
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|QtNetworkSettings
operator|::
name|compareReplyFtp
argument_list|(
name|data3
argument_list|)
argument_list|,
name|data3
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|waitForReadyReadInASlot
name|void
name|tst_QTcpSocket
operator|::
name|waitForReadyReadInASlot
parameter_list|()
block|{
name|QTcpSocket
modifier|*
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|tmpSocket
operator|=
name|socket
expr_stmt|;
name|connect
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|connected
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|waitForReadyReadInASlotSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|80
argument_list|)
expr_stmt|;
name|socket
operator|->
name|write
argument_list|(
literal|"GET / HTTP/1.0\r\n\r\n"
argument_list|)
expr_stmt|;
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|socket
expr_stmt|;
block|}
end_function
begin_function
DECL|function|waitForReadyReadInASlotSlot
name|void
name|tst_QTcpSocket
operator|::
name|waitForReadyReadInASlotSlot
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|tmpSocket
operator|->
name|waitForReadyRead
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|exitLoop
argument_list|()
expr_stmt|;
block|}
end_function
begin_class
DECL|class|RemoteCloseErrorServer
class|class
name|RemoteCloseErrorServer
super|:
specifier|public
name|QTcpServer
block|{
name|Q_OBJECT
public|public:
DECL|function|RemoteCloseErrorServer
name|RemoteCloseErrorServer
parameter_list|()
block|{
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|newConnection
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|getConnection
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
private|private
name|slots
private|:
DECL|function|getConnection
name|void
name|getConnection
parameter_list|()
block|{
name|tst_QTcpSocket
operator|::
name|exitLoop
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|remoteCloseError
name|void
name|tst_QTcpSocket
operator|::
name|remoteCloseError
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
return|return;
comment|//proxy not useful for localhost test case
name|RemoteCloseErrorServer
name|server
decl_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|listen
argument_list|(
name|QHostAddress
operator|::
name|LocalHost
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QTcpSocket
modifier|*
name|clientSocket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|connect
argument_list|(
name|clientSocket
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|exitLoopSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|clientSocket
operator|->
name|connectToHost
argument_list|(
name|server
operator|.
name|serverAddress
argument_list|()
argument_list|,
name|server
operator|.
name|serverPort
argument_list|()
argument_list|)
expr_stmt|;
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|hasPendingConnections
argument_list|()
argument_list|)
expr_stmt|;
name|QTcpSocket
modifier|*
name|serverSocket
init|=
name|server
operator|.
name|nextPendingConnection
argument_list|()
decl_stmt|;
name|connect
argument_list|(
name|clientSocket
argument_list|,
name|SIGNAL
argument_list|(
name|disconnected
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|exitLoopSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|serverSocket
operator|->
name|write
argument_list|(
literal|"Hello"
argument_list|)
expr_stmt|;
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|clientSocket
operator|->
name|bytesAvailable
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|qRegisterMetaType
argument_list|<
name|QAbstractSocket
operator|::
name|SocketError
argument_list|>
argument_list|(
literal|"QAbstractSocket::SocketError"
argument_list|)
expr_stmt|;
name|QSignalSpy
name|errorSpy
argument_list|(
name|clientSocket
argument_list|,
name|SIGNAL
argument_list|(
name|error
argument_list|(
name|QAbstractSocket
operator|::
name|SocketError
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|disconnectedSpy
argument_list|(
name|clientSocket
argument_list|,
name|SIGNAL
argument_list|(
name|disconnected
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|clientSocket
operator|->
name|write
argument_list|(
literal|"World"
argument_list|)
expr_stmt|;
name|serverSocket
operator|->
name|disconnectFromHost
argument_list|()
expr_stmt|;
name|tmpSocket
operator|=
name|clientSocket
expr_stmt|;
name|connect
argument_list|(
name|clientSocket
argument_list|,
name|SIGNAL
argument_list|(
name|error
argument_list|(
name|QAbstractSocket
operator|::
name|SocketError
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|remoteCloseErrorSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|disconnectedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|errorSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|clientSocket
operator|->
name|error
argument_list|()
argument_list|,
name|QAbstractSocket
operator|::
name|RemoteHostClosedError
argument_list|)
expr_stmt|;
operator|delete
name|serverSocket
expr_stmt|;
name|clientSocket
operator|->
name|connectToHost
argument_list|(
name|server
operator|.
name|serverAddress
argument_list|()
argument_list|,
name|server
operator|.
name|serverPort
argument_list|()
argument_list|)
expr_stmt|;
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|hasPendingConnections
argument_list|()
argument_list|)
expr_stmt|;
name|serverSocket
operator|=
name|server
operator|.
name|nextPendingConnection
argument_list|()
expr_stmt|;
name|serverSocket
operator|->
name|disconnectFromHost
argument_list|()
expr_stmt|;
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|clientSocket
operator|->
name|state
argument_list|()
argument_list|,
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
operator|delete
name|clientSocket
expr_stmt|;
block|}
end_function
begin_function
DECL|function|remoteCloseErrorSlot
name|void
name|tst_QTcpSocket
operator|::
name|remoteCloseErrorSlot
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
name|tmpSocket
operator|->
name|state
argument_list|()
argument_list|,
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
cast|static_cast
argument_list|<
name|QTcpSocket
operator|*
argument_list|>
argument_list|(
name|sender
argument_list|()
argument_list|)
operator|->
name|close
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|messageBoxSlot
name|void
name|tst_QTcpSocket
operator|::
name|messageBoxSlot
parameter_list|()
block|{
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_VXWORKS
argument_list|)
comment|// no gui
name|QTcpSocket
modifier|*
name|socket
init|=
name|qobject_cast
argument_list|<
name|QTcpSocket
operator|*
argument_list|>
argument_list|(
name|sender
argument_list|()
argument_list|)
decl_stmt|;
name|socket
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
name|QMessageBox
name|box
decl_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|100
argument_list|,
operator|&
name|box
argument_list|,
name|SLOT
argument_list|(
name|close
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// This should not delete the socket
name|box
operator|.
name|exec
argument_list|()
expr_stmt|;
comment|// Fire a non-0 singleshot to leave time for the delete
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|250
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|exitLoopSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|openMessageBoxInErrorSlot
name|void
name|tst_QTcpSocket
operator|::
name|openMessageBoxInErrorSlot
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_VXWORKS
argument_list|)
comment|// no gui
name|QSKIP
argument_list|(
literal|"no default gui available on VxWorks"
argument_list|)
expr_stmt|;
else|#
directive|else
name|QTcpSocket
modifier|*
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|QPointer
argument_list|<
name|QTcpSocket
argument_list|>
name|p
argument_list|(
name|socket
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|error
argument_list|(
name|QAbstractSocket
operator|::
name|SocketError
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|messageBoxSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|->
name|connectToHost
argument_list|(
literal|"hostnotfoundhostnotfound.troll.no"
argument_list|,
literal|9999
argument_list|)
expr_stmt|;
comment|// Host not found, fyi
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|p
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_ifndef
ifndef|#
directive|ifndef
name|Q_OS_WIN
end_ifndef
begin_function
DECL|function|connectToLocalHostNoService
name|void
name|tst_QTcpSocket
operator|::
name|connectToLocalHostNoService
parameter_list|()
block|{
comment|// This test was created after we received a report that claimed
comment|// QTcpSocket would crash if trying to connect to "localhost" on a random
comment|// port with no service listening.
name|QTcpSocket
modifier|*
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|socket
operator|->
name|connectToHost
argument_list|(
literal|"localhost"
argument_list|,
literal|31415
argument_list|)
expr_stmt|;
comment|// no service running here, one suspects
while|while
condition|(
name|socket
operator|->
name|state
argument_list|()
operator|==
name|QTcpSocket
operator|::
name|HostLookupState
operator|||
name|socket
operator|->
name|state
argument_list|()
operator|==
name|QTcpSocket
operator|::
name|ConnectingState
condition|)
block|{
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|state
argument_list|()
argument_list|,
name|QTcpSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
operator|delete
name|socket
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|waitForConnectedInHostLookupSlot
name|void
name|tst_QTcpSocket
operator|::
name|waitForConnectedInHostLookupSlot
parameter_list|()
block|{
comment|// This test tries to reproduce the problem where waitForConnected() is
comment|// called at a point where the host lookup is already done. QTcpSocket
comment|// will try to abort the "pending lookup", but since it's already done and
comment|// the queued signal is already underway, we will receive the signal after
comment|// waitForConnected() has returned, and control goes back to the event
comment|// loop. When the signal has been received, the connection is torn down,
comment|// then reopened. Yikes. If we reproduce this by calling
comment|// waitForConnected() inside hostLookupSlot(), it will even crash.
name|tmpSocket
operator|=
name|newSocket
argument_list|()
expr_stmt|;
name|QEventLoop
name|loop
decl_stmt|;
name|connect
argument_list|(
name|tmpSocket
argument_list|,
name|SIGNAL
argument_list|(
name|connected
argument_list|()
argument_list|)
argument_list|,
operator|&
name|loop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTimer
name|timer
decl_stmt|;
name|connect
argument_list|(
operator|&
name|timer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
operator|&
name|loop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QSignalSpy
name|timerSpy
argument_list|(
operator|&
name|timer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|timer
operator|.
name|start
argument_list|(
literal|15000
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|tmpSocket
argument_list|,
name|SIGNAL
argument_list|(
name|hostFound
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|hostLookupSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|tmpSocket
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|143
argument_list|)
expr_stmt|;
comment|// only execute the loop if not already connected
if|if
condition|(
name|tmpSocket
operator|->
name|state
argument_list|()
operator|!=
name|QAbstractSocket
operator|::
name|ConnectedState
condition|)
name|loop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|timerSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|tmpSocket
expr_stmt|;
block|}
end_function
begin_function
DECL|function|hostLookupSlot
name|void
name|tst_QTcpSocket
operator|::
name|hostLookupSlot
parameter_list|()
block|{
comment|// This will fail to cancel the pending signal
name|QVERIFY
argument_list|(
name|tmpSocket
operator|->
name|waitForConnected
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|Foo
class|class
name|Foo
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
DECL|member|sock
name|QTcpSocket
modifier|*
name|sock
decl_stmt|;
public|public:
DECL|member|attemptedToConnect
name|bool
name|attemptedToConnect
decl_stmt|;
DECL|member|networkTimeout
name|bool
name|networkTimeout
decl_stmt|;
DECL|member|count
name|int
name|count
decl_stmt|;
DECL|function|Foo
specifier|inline
name|Foo
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
block|{
name|attemptedToConnect
operator|=
literal|false
expr_stmt|;
name|networkTimeout
operator|=
literal|false
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_OPENSSL
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|ssl
argument_list|)
expr_stmt|;
if|if
condition|(
name|ssl
condition|)
name|sock
operator|=
operator|new
name|QSslSocket
expr_stmt|;
else|else
endif|#
directive|endif
name|sock
operator|=
operator|new
name|QTcpSocket
expr_stmt|;
name|connect
argument_list|(
name|sock
argument_list|,
name|SIGNAL
argument_list|(
name|connected
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|connectedToIt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|sock
argument_list|,
name|SIGNAL
argument_list|(
name|proxyAuthenticationRequired
argument_list|(
name|QNetworkProxy
argument_list|,
name|QAuthenticator
operator|*
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|proxyAuthenticationRequired
argument_list|(
name|QNetworkProxy
argument_list|,
name|QAuthenticator
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|~Foo
specifier|inline
name|~
name|Foo
parameter_list|()
block|{
operator|delete
name|sock
expr_stmt|;
block|}
public|public
name|slots
public|:
DECL|function|connectedToIt
specifier|inline
name|void
name|connectedToIt
parameter_list|()
block|{
name|count
operator|++
expr_stmt|;
block|}
DECL|function|doIt
specifier|inline
name|void
name|doIt
parameter_list|()
block|{
name|attemptedToConnect
operator|=
literal|true
expr_stmt|;
name|sock
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|80
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_MAC
name|pthread_yield_np
argument_list|()
expr_stmt|;
elif|#
directive|elif
name|defined
name|Q_OS_LINUX
name|pthread_yield
argument_list|()
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|sock
operator|->
name|waitForConnected
argument_list|()
condition|)
block|{
name|networkTimeout
operator|=
literal|true
expr_stmt|;
block|}
name|tst_QTcpSocket
operator|::
name|exitLoop
argument_list|()
expr_stmt|;
block|}
DECL|function|exitLoop
specifier|inline
name|void
name|exitLoop
parameter_list|()
block|{
name|tst_QTcpSocket
operator|::
name|exitLoop
argument_list|()
expr_stmt|;
block|}
DECL|function|proxyAuthenticationRequired
specifier|inline
name|void
name|proxyAuthenticationRequired
parameter_list|(
specifier|const
name|QNetworkProxy
modifier|&
parameter_list|,
name|QAuthenticator
modifier|*
name|auth
parameter_list|)
block|{
name|auth
operator|->
name|setUser
argument_list|(
literal|"qsockstest"
argument_list|)
expr_stmt|;
name|auth
operator|->
name|setPassword
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|waitForConnectedInHostLookupSlot2
name|void
name|tst_QTcpSocket
operator|::
name|waitForConnectedInHostLookupSlot2
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_VXWORKS
argument_list|)
name|QSKIP
argument_list|(
literal|"waitForConnectedInHostLookupSlot2 is not run on Windows and VxWorks"
argument_list|)
expr_stmt|;
else|#
directive|else
name|Foo
name|foo
decl_stmt|;
name|QPushButton
name|top
argument_list|(
literal|"Go"
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|top
operator|.
name|show
argument_list|()
expr_stmt|;
name|connect
argument_list|(
operator|&
name|top
argument_list|,
name|SIGNAL
argument_list|(
name|clicked
argument_list|()
argument_list|)
argument_list|,
operator|&
name|foo
argument_list|,
name|SLOT
argument_list|(
name|doIt
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|100
argument_list|,
operator|&
name|top
argument_list|,
name|SLOT
argument_list|(
name|animateClick
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|5000
argument_list|,
operator|&
name|foo
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
if|if
condition|(
name|timeout
argument_list|()
operator|||
name|foo
operator|.
name|networkTimeout
condition|)
name|QFAIL
argument_list|(
literal|"Network timeout"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|foo
operator|.
name|attemptedToConnect
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|foo
operator|.
name|count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|readyReadSignalsAfterWaitForReadyRead
name|void
name|tst_QTcpSocket
operator|::
name|readyReadSignalsAfterWaitForReadyRead
parameter_list|()
block|{
name|QTcpSocket
modifier|*
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|QSignalSpy
name|readyReadSpy
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
comment|// Connect
name|socket
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|143
argument_list|)
expr_stmt|;
comment|// Wait for the read
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForReadyRead
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|readyReadSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QString
name|s
init|=
name|socket
operator|->
name|readLine
argument_list|()
decl_stmt|;
name|QVERIFY2
argument_list|(
name|QtNetworkSettings
operator|::
name|compareReplyIMAP
argument_list|(
name|s
operator|.
name|toLatin1
argument_list|()
argument_list|)
argument_list|,
name|s
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|bytesAvailable
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|bytesAvailable
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|readyReadSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
operator|delete
name|socket
expr_stmt|;
block|}
end_function
begin_class
DECL|class|TestThread2
class|class
name|TestThread2
super|:
specifier|public
name|QThread
block|{
name|Q_OBJECT
public|public:
DECL|function|run
name|void
name|run
parameter_list|()
block|{
name|QFile
name|fileWriter
argument_list|(
literal|"fifo"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|fileWriter
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|WriteOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fileWriter
operator|.
name|write
argument_list|(
name|QByteArray
argument_list|(
literal|32
argument_list|,
literal|'@'
argument_list|)
argument_list|)
argument_list|,
name|qint64
argument_list|(
literal|32
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fileWriter
operator|.
name|write
argument_list|(
name|QByteArray
argument_list|(
literal|32
argument_list|,
literal|'@'
argument_list|)
argument_list|)
argument_list|,
name|qint64
argument_list|(
literal|32
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fileWriter
operator|.
name|write
argument_list|(
name|QByteArray
argument_list|(
literal|32
argument_list|,
literal|'@'
argument_list|)
argument_list|)
argument_list|,
name|qint64
argument_list|(
literal|32
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|fileWriter
operator|.
name|write
argument_list|(
name|QByteArray
argument_list|(
literal|32
argument_list|,
literal|'@'
argument_list|)
argument_list|)
argument_list|,
name|qint64
argument_list|(
literal|32
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_LINUX
end_ifdef
begin_function
DECL|function|linuxKernelBugLocalSocket
name|void
name|tst_QTcpSocket
operator|::
name|linuxKernelBugLocalSocket
parameter_list|()
block|{
name|QFile
operator|::
name|remove
argument_list|(
literal|"fifo"
argument_list|)
expr_stmt|;
name|mkfifo
argument_list|(
literal|"fifo"
argument_list|,
literal|0666
argument_list|)
expr_stmt|;
name|TestThread2
name|test
decl_stmt|;
name|test
operator|.
name|start
argument_list|()
expr_stmt|;
name|QFile
name|fileReader
argument_list|(
literal|"fifo"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|fileReader
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|test
operator|.
name|wait
argument_list|()
expr_stmt|;
name|QTcpSocket
modifier|*
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|socket
operator|->
name|setSocketDescriptor
argument_list|(
name|fileReader
operator|.
name|handle
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForReadyRead
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|bytesAvailable
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|128
argument_list|)
argument_list|)
expr_stmt|;
name|QFile
operator|::
name|remove
argument_list|(
literal|"fifo"
argument_list|)
expr_stmt|;
operator|delete
name|socket
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|abortiveClose
name|void
name|tst_QTcpSocket
operator|::
name|abortiveClose
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
return|return;
comment|//proxy not useful for localhost test case
name|QTcpServer
name|server
decl_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|listen
argument_list|(
name|QHostAddress
operator|::
name|LocalHost
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|server
argument_list|,
name|SIGNAL
argument_list|(
name|newConnection
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|exitLoopSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTcpSocket
modifier|*
name|clientSocket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|clientSocket
operator|->
name|connectToHost
argument_list|(
name|server
operator|.
name|serverAddress
argument_list|()
argument_list|,
name|server
operator|.
name|serverPort
argument_list|()
argument_list|)
expr_stmt|;
name|enterLoop
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|hasPendingConnections
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|tmpSocket
operator|=
name|server
operator|.
name|nextPendingConnection
argument_list|()
argument_list|)
expr_stmt|;
name|qRegisterMetaType
argument_list|<
name|QAbstractSocket
operator|::
name|SocketError
argument_list|>
argument_list|(
literal|"QAbstractSocket::SocketError"
argument_list|)
expr_stmt|;
name|QSignalSpy
name|readyReadSpy
argument_list|(
name|clientSocket
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|errorSpy
argument_list|(
name|clientSocket
argument_list|,
name|SIGNAL
argument_list|(
name|error
argument_list|(
name|QAbstractSocket
operator|::
name|SocketError
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|clientSocket
argument_list|,
name|SIGNAL
argument_list|(
name|disconnected
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|exitLoopSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|0
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|abortiveClose_abortSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|enterLoop
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|readyReadSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|errorSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|*
cast|static_cast
argument_list|<
specifier|const
name|int
operator|*
argument_list|>
argument_list|(
name|errorSpy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|RemoteHostClosedError
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|clientSocket
expr_stmt|;
block|}
end_function
begin_function
DECL|function|abortiveClose_abortSlot
name|void
name|tst_QTcpSocket
operator|::
name|abortiveClose_abortSlot
parameter_list|()
block|{
name|tmpSocket
operator|->
name|abort
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|localAddressEmptyOnBSD
name|void
name|tst_QTcpSocket
operator|::
name|localAddressEmptyOnBSD
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
return|return;
comment|//proxy not useful for localhost test case
name|QTcpServer
name|server
decl_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|listen
argument_list|(
name|QHostAddress
operator|::
name|LocalHost
argument_list|)
argument_list|)
expr_stmt|;
name|QTcpSocket
modifier|*
name|tcpSocket
init|=
literal|0
decl_stmt|;
comment|// we try 10 times, but note that this doesn't always provoke the bug
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|10
condition|;
operator|++
name|i
control|)
block|{
operator|delete
name|tcpSocket
expr_stmt|;
name|tcpSocket
operator|=
name|newSocket
argument_list|()
expr_stmt|;
name|tcpSocket
operator|->
name|connectToHost
argument_list|(
name|QHostAddress
operator|::
name|LocalHost
argument_list|,
name|server
operator|.
name|serverPort
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|tcpSocket
operator|->
name|waitForConnected
argument_list|(
literal|0
argument_list|)
condition|)
block|{
comment|// to provoke the bug, we need a local socket that connects immediately
comment|// --i;
name|tcpSocket
operator|->
name|abort
argument_list|()
expr_stmt|;
if|if
condition|(
name|tcpSocket
operator|->
name|state
argument_list|()
operator|!=
name|QTcpSocket
operator|::
name|UnconnectedState
condition|)
name|QVERIFY
argument_list|(
name|tcpSocket
operator|->
name|waitForDisconnected
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
continue|continue;
block|}
name|QCOMPARE
argument_list|(
name|tcpSocket
operator|->
name|localAddress
argument_list|()
argument_list|,
name|QHostAddress
argument_list|(
name|QHostAddress
operator|::
name|LocalHost
argument_list|)
argument_list|)
expr_stmt|;
block|}
operator|delete
name|tcpSocket
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|zeroAndMinusOneReturns
name|void
name|tst_QTcpSocket
operator|::
name|zeroAndMinusOneReturns
parameter_list|()
block|{
name|QTcpSocket
modifier|*
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|socket
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|80
argument_list|)
expr_stmt|;
name|socket
operator|->
name|write
argument_list|(
literal|"GET / HTTP/1.0\r\nConnection: keep-alive\r\n\r\n"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForReadyRead
argument_list|(
literal|15000
argument_list|)
argument_list|)
expr_stmt|;
name|char
name|c
index|[
literal|16
index|]
decl_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|getChar
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|read
argument_list|(
name|c
argument_list|,
literal|16
argument_list|)
argument_list|,
name|qint64
argument_list|(
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|readLine
argument_list|(
name|c
argument_list|,
literal|16
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|->
name|readAll
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// the last operation emptied the read buffer
comment|// all read operations from this point on should fail
comment|// with return 0 because the socket is still open
name|QVERIFY
argument_list|(
name|socket
operator|->
name|readAll
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|read
argument_list|(
name|c
argument_list|,
literal|16
argument_list|)
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|readLine
argument_list|(
name|c
argument_list|,
literal|16
argument_list|)
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|->
name|getChar
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|->
name|write
argument_list|(
literal|"GET / HTTP/1.0\r\n\r\n"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForDisconnected
argument_list|(
literal|15000
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|error
argument_list|()
argument_list|,
name|QAbstractSocket
operator|::
name|RemoteHostClosedError
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|write
argument_list|(
literal|"BLUBBER"
argument_list|)
argument_list|,
name|qint64
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|getChar
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|read
argument_list|(
name|c
argument_list|,
literal|16
argument_list|)
argument_list|,
name|qint64
argument_list|(
literal|16
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|readLine
argument_list|(
name|c
argument_list|,
literal|16
argument_list|)
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|->
name|readAll
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// the last operation emptied the read buffer
comment|// all read operations from this point on should fail
comment|// with return -1 because the socket is not connected
name|QVERIFY
argument_list|(
name|socket
operator|->
name|readAll
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|read
argument_list|(
name|c
argument_list|,
literal|16
argument_list|)
argument_list|,
name|qint64
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|readLine
argument_list|(
name|c
argument_list|,
literal|16
argument_list|)
argument_list|,
name|qint64
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|->
name|getChar
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|->
name|putChar
argument_list|(
literal|'a'
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|->
name|close
argument_list|()
expr_stmt|;
comment|// now the QIODevice is closed, which means getChar complains
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|write
argument_list|(
literal|"BLUBBER"
argument_list|)
argument_list|,
name|qint64
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|read
argument_list|(
name|c
argument_list|,
literal|16
argument_list|)
argument_list|,
name|qint64
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|readLine
argument_list|(
name|c
argument_list|,
literal|16
argument_list|)
argument_list|,
name|qint64
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|->
name|getChar
argument_list|(
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|->
name|putChar
argument_list|(
literal|'a'
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|socket
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|connectionRefused
name|void
name|tst_QTcpSocket
operator|::
name|connectionRefused
parameter_list|()
block|{
name|qRegisterMetaType
argument_list|<
name|QAbstractSocket
operator|::
name|SocketError
argument_list|>
argument_list|(
literal|"QAbstractSocket::SocketError"
argument_list|)
expr_stmt|;
name|qRegisterMetaType
argument_list|<
name|QAbstractSocket
operator|::
name|SocketState
argument_list|>
argument_list|(
literal|"QAbstractSocket::SocketState"
argument_list|)
expr_stmt|;
name|QTcpSocket
modifier|*
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|QSignalSpy
name|stateSpy
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|stateChanged
argument_list|(
name|QAbstractSocket
operator|::
name|SocketState
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|errorSpy
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|error
argument_list|(
name|QAbstractSocket
operator|::
name|SocketError
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|error
argument_list|(
name|QAbstractSocket
operator|::
name|SocketError
argument_list|)
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|144
argument_list|)
expr_stmt|;
name|enterLoop
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|error
argument_list|(
name|QAbstractSocket
operator|::
name|SocketError
argument_list|)
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
operator|!
name|timeout
argument_list|()
argument_list|,
literal|"Network timeout"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|state
argument_list|()
argument_list|,
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|error
argument_list|()
argument_list|,
name|QAbstractSocket
operator|::
name|ConnectionRefusedError
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|stateSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qVariantValue
argument_list|<
name|QAbstractSocket
operator|::
name|SocketState
argument_list|>
argument_list|(
name|stateSpy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|QAbstractSocket
operator|::
name|HostLookupState
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qVariantValue
argument_list|<
name|QAbstractSocket
operator|::
name|SocketState
argument_list|>
argument_list|(
name|stateSpy
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|QAbstractSocket
operator|::
name|ConnectingState
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qVariantValue
argument_list|<
name|QAbstractSocket
operator|::
name|SocketState
argument_list|>
argument_list|(
name|stateSpy
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
argument_list|,
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|errorSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
operator|delete
name|socket
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|suddenRemoteDisconnect_data
name|void
name|tst_QTcpSocket
operator|::
name|suddenRemoteDisconnect_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"client"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"server"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Qt4 Client<-> Qt4 Server"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"qt4client"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"qt4server"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|suddenRemoteDisconnect
name|void
name|tst_QTcpSocket
operator|::
name|suddenRemoteDisconnect
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|client
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|server
argument_list|)
expr_stmt|;
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
return|return;
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|ssl
argument_list|)
expr_stmt|;
if|if
condition|(
name|ssl
condition|)
return|return;
comment|// Start server
name|QProcess
name|serverProcess
decl_stmt|;
name|serverProcess
operator|.
name|setReadChannel
argument_list|(
name|QProcess
operator|::
name|StandardError
argument_list|)
expr_stmt|;
name|serverProcess
operator|.
name|start
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"stressTest/stressTest %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|server
argument_list|)
argument_list|,
name|QIODevice
operator|::
name|ReadWrite
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|serverProcess
operator|.
name|canReadLine
argument_list|()
condition|)
name|QVERIFY
argument_list|(
name|serverProcess
operator|.
name|waitForReadyRead
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|serverProcess
operator|.
name|readLine
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
operator|(
name|server
operator|.
name|toLatin1
argument_list|()
operator|+
literal|"\n"
operator|)
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
comment|// Start client
name|QProcess
name|clientProcess
decl_stmt|;
name|clientProcess
operator|.
name|setReadChannel
argument_list|(
name|QProcess
operator|::
name|StandardError
argument_list|)
expr_stmt|;
name|clientProcess
operator|.
name|start
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"stressTest/stressTest %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|client
argument_list|)
argument_list|,
name|QIODevice
operator|::
name|ReadWrite
operator||
name|QIODevice
operator|::
name|Text
argument_list|)
expr_stmt|;
while|while
condition|(
operator|!
name|clientProcess
operator|.
name|canReadLine
argument_list|()
condition|)
name|QVERIFY
argument_list|(
name|clientProcess
operator|.
name|waitForReadyRead
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|clientProcess
operator|.
name|readLine
argument_list|()
operator|.
name|data
argument_list|()
argument_list|,
operator|(
name|client
operator|.
name|toLatin1
argument_list|()
operator|+
literal|"\n"
operator|)
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
comment|// Let them play for a while
name|qDebug
argument_list|(
literal|"Running stress test for 5 seconds"
argument_list|)
expr_stmt|;
name|QEventLoop
name|loop
decl_stmt|;
name|connect
argument_list|(
operator|&
name|serverProcess
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
operator|&
name|loop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|clientProcess
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
operator|&
name|loop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTime
name|stopWatch
decl_stmt|;
name|stopWatch
operator|.
name|start
argument_list|()
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|20000
argument_list|,
operator|&
name|loop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
operator|(
name|serverProcess
operator|.
name|state
argument_list|()
operator|==
name|QProcess
operator|::
name|Running
operator|||
name|clientProcess
operator|.
name|state
argument_list|()
operator|==
name|QProcess
operator|::
name|Running
operator|)
operator|&&
name|stopWatch
operator|.
name|elapsed
argument_list|()
operator|<
literal|20000
condition|)
name|loop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|stopWatch
operator|.
name|elapsed
argument_list|()
operator|<
literal|20000
argument_list|)
expr_stmt|;
comment|// Check that both exited normally.
name|QCOMPARE
argument_list|(
name|clientProcess
operator|.
name|readAll
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
literal|"SUCCESS\n"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|serverProcess
operator|.
name|readAll
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
literal|"SUCCESS\n"
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|connectToMultiIP
name|void
name|tst_QTcpSocket
operator|::
name|connectToMultiIP
parameter_list|()
block|{
name|QSKIP
argument_list|(
literal|"TODO: setup DNS in the new network"
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_VXWORKS
argument_list|)
name|QSKIP
argument_list|(
literal|"VxSim in standard config doesn't even run a DNS resolver"
argument_list|)
expr_stmt|;
else|#
directive|else
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|ssl
argument_list|)
expr_stmt|;
if|if
condition|(
name|ssl
condition|)
return|return;
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
name|QSKIP
argument_list|(
literal|"This test takes too long if we also add the proxies."
argument_list|)
expr_stmt|;
name|qDebug
argument_list|(
literal|"Please wait, this test can take a while..."
argument_list|)
expr_stmt|;
name|QTcpSocket
modifier|*
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
comment|// rationale: this domain resolves to 3 A-records, 2 of them are
comment|// invalid. QTcpSocket should never spend more than 30 seconds per IP, and
comment|// 30s*2 = 60s.
name|QTime
name|stopWatch
decl_stmt|;
name|stopWatch
operator|.
name|start
argument_list|()
expr_stmt|;
name|socket
operator|->
name|connectToHost
argument_list|(
literal|"multi.dev.troll.no"
argument_list|,
literal|80
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForConnected
argument_list|(
literal|60500
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|stopWatch
operator|.
name|elapsed
argument_list|()
operator|<
literal|70000
argument_list|)
expr_stmt|;
name|socket
operator|->
name|abort
argument_list|()
expr_stmt|;
name|stopWatch
operator|.
name|restart
argument_list|()
expr_stmt|;
name|socket
operator|->
name|connectToHost
argument_list|(
literal|"multi.dev.troll.no"
argument_list|,
literal|81
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|->
name|waitForConnected
argument_list|(
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|stopWatch
operator|.
name|elapsed
argument_list|()
operator|<
literal|2000
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|error
argument_list|()
argument_list|,
name|QAbstractSocket
operator|::
name|SocketTimeoutError
argument_list|)
expr_stmt|;
operator|delete
name|socket
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|//----------------------------------------------------------------------------------
end_comment
begin_function
DECL|function|moveToThread0
name|void
name|tst_QTcpSocket
operator|::
name|moveToThread0
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|int
argument_list|,
name|proxyType
argument_list|)
expr_stmt|;
if|if
condition|(
name|proxyType
operator|&
name|AuthMask
condition|)
return|return;
block|{
comment|// Case 1: Moved after connecting, before waiting for connection.
name|QTcpSocket
modifier|*
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
empty_stmt|;
name|socket
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|143
argument_list|)
expr_stmt|;
name|socket
operator|->
name|moveToThread
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForConnected
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|->
name|write
argument_list|(
literal|"XXX LOGOUT\r\n"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForBytesWritten
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForDisconnected
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|socket
expr_stmt|;
block|}
block|{
comment|// Case 2: Moved before connecting
name|QTcpSocket
modifier|*
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|socket
operator|->
name|moveToThread
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|socket
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|143
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForConnected
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|->
name|write
argument_list|(
literal|"XXX LOGOUT\r\n"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForBytesWritten
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForDisconnected
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|socket
expr_stmt|;
block|}
block|{
comment|// Case 3: Moved after writing, while waiting for bytes to be written.
name|QTcpSocket
modifier|*
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|socket
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|143
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForConnected
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|->
name|write
argument_list|(
literal|"XXX LOGOUT\r\n"
argument_list|)
expr_stmt|;
name|socket
operator|->
name|moveToThread
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForBytesWritten
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForDisconnected
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|socket
expr_stmt|;
block|}
block|{
comment|// Case 4: Moved after writing, while waiting for response.
name|QTcpSocket
modifier|*
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|socket
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|143
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForConnected
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|->
name|write
argument_list|(
literal|"XXX LOGOUT\r\n"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForBytesWritten
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|->
name|moveToThread
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForDisconnected
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|socket
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|increaseReadBufferSize
name|void
name|tst_QTcpSocket
operator|::
name|increaseReadBufferSize
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
return|return;
comment|//proxy not useful for localhost test case
name|QTcpServer
name|server
decl_stmt|;
name|QTcpSocket
modifier|*
name|active
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|connect
argument_list|(
name|active
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|exitLoopSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// connect two sockets to each other:
name|QVERIFY
argument_list|(
name|server
operator|.
name|listen
argument_list|(
name|QHostAddress
operator|::
name|LocalHost
argument_list|)
argument_list|)
expr_stmt|;
name|active
operator|->
name|connectToHost
argument_list|(
literal|"127.0.0.1"
argument_list|,
name|server
operator|.
name|serverPort
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|active
operator|->
name|waitForConnected
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|waitForNewConnection
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QTcpSocket
modifier|*
name|passive
init|=
name|server
operator|.
name|nextPendingConnection
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|passive
argument_list|)
expr_stmt|;
comment|// now write 512 bytes of data on one end
name|QByteArray
name|data
argument_list|(
literal|512
argument_list|,
literal|'a'
argument_list|)
decl_stmt|;
name|passive
operator|->
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|passive
operator|->
name|waitForBytesWritten
argument_list|(
literal|5000
argument_list|)
argument_list|,
literal|"Network timeout"
argument_list|)
expr_stmt|;
comment|// set the read buffer size to less than what was written and iterate:
name|active
operator|->
name|setReadBufferSize
argument_list|(
literal|256
argument_list|)
expr_stmt|;
name|enterLoop
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
operator|!
name|timeout
argument_list|()
argument_list|,
literal|"Network timeout"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|active
operator|->
name|bytesAvailable
argument_list|()
argument_list|,
name|active
operator|->
name|readBufferSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// increase the buffer size and iterate again:
name|active
operator|->
name|setReadBufferSize
argument_list|(
literal|384
argument_list|)
expr_stmt|;
name|enterLoop
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
operator|!
name|timeout
argument_list|()
argument_list|,
literal|"Network timeout"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|active
operator|->
name|bytesAvailable
argument_list|()
argument_list|,
name|active
operator|->
name|readBufferSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// once more, but now it should read everything there was to read
name|active
operator|->
name|setReadBufferSize
argument_list|(
literal|1024
argument_list|)
expr_stmt|;
name|enterLoop
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
operator|!
name|timeout
argument_list|()
argument_list|,
literal|"Network timeout"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|active
operator|->
name|bytesAvailable
argument_list|()
argument_list|,
name|qint64
argument_list|(
name|data
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// drain it and compare
name|QCOMPARE
argument_list|(
name|active
operator|->
name|readAll
argument_list|()
argument_list|,
name|data
argument_list|)
expr_stmt|;
comment|// now one more test by setting the buffer size to unlimited:
name|passive
operator|->
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|passive
operator|->
name|waitForBytesWritten
argument_list|(
literal|5000
argument_list|)
argument_list|,
literal|"Network timeout"
argument_list|)
expr_stmt|;
name|active
operator|->
name|setReadBufferSize
argument_list|(
literal|256
argument_list|)
expr_stmt|;
name|enterLoop
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
operator|!
name|timeout
argument_list|()
argument_list|,
literal|"Network timeout"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|active
operator|->
name|bytesAvailable
argument_list|()
argument_list|,
name|active
operator|->
name|readBufferSize
argument_list|()
argument_list|)
expr_stmt|;
name|active
operator|->
name|setReadBufferSize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|enterLoop
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
operator|!
name|timeout
argument_list|()
argument_list|,
literal|"Network timeout"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|active
operator|->
name|bytesAvailable
argument_list|()
argument_list|,
name|qint64
argument_list|(
name|data
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|active
operator|->
name|readAll
argument_list|()
argument_list|,
name|data
argument_list|)
expr_stmt|;
operator|delete
name|active
expr_stmt|;
block|}
end_function
begin_function
DECL|function|taskQtBug5799ConnectionErrorWaitForConnected
name|void
name|tst_QTcpSocket
operator|::
name|taskQtBug5799ConnectionErrorWaitForConnected
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
return|return;
comment|// check that we get a proper error connecting to port 12346
comment|// use waitForConnected, e.g. this should use a synchronous select() on the OS level
name|QTcpSocket
name|socket
decl_stmt|;
name|socket
operator|.
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|12346
argument_list|)
expr_stmt|;
name|QTime
name|timer
decl_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
name|socket
operator|.
name|waitForConnected
argument_list|(
literal|10000
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|timer
operator|.
name|elapsed
argument_list|()
operator|<
literal|9900
argument_list|,
literal|"Connection to closed port timed out instead of refusing, something is wrong"
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|socket
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|,
literal|"Socket connected unexpectedly!"
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|socket
operator|.
name|error
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectionRefusedError
argument_list|,
name|QString
argument_list|(
literal|"Could not reach server: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|socket
operator|.
name|errorString
argument_list|()
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|taskQtBug5799ConnectionErrorEventLoop
name|void
name|tst_QTcpSocket
operator|::
name|taskQtBug5799ConnectionErrorEventLoop
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
return|return;
comment|// check that we get a proper error connecting to port 12346
comment|// This testcase uses an event loop
name|QTcpSocket
name|socket
decl_stmt|;
name|connect
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|error
argument_list|(
name|QAbstractSocket
operator|::
name|SocketError
argument_list|)
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|.
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|12346
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|,
literal|"Connection to closed port timed out instead of refusing, something is wrong"
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|socket
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|,
literal|"Socket connected unexpectedly!"
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|socket
operator|.
name|error
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectionRefusedError
argument_list|,
name|QString
argument_list|(
literal|"Could not reach server: %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|socket
operator|.
name|errorString
argument_list|()
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|taskQtBug7054TimeoutErrorResetting
name|void
name|tst_QTcpSocket
operator|::
name|taskQtBug7054TimeoutErrorResetting
parameter_list|()
block|{
name|QTcpSocket
modifier|*
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|socket
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|443
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForConnected
argument_list|(
literal|5
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|error
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnknownSocketError
argument_list|)
expr_stmt|;
comment|// We connected to the HTTPS port. Wait two seconds to receive data. We will receive
comment|// nothing because we would need to start the SSL handshake
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|->
name|waitForReadyRead
argument_list|(
literal|2
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|error
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|SocketTimeoutError
argument_list|)
expr_stmt|;
comment|// Now write some crap to make the server disconnect us. 4 lines are enough.
name|socket
operator|->
name|write
argument_list|(
literal|"a\r\nb\r\nc\r\nd\r\n"
argument_list|)
expr_stmt|;
name|socket
operator|->
name|waitForBytesWritten
argument_list|(
literal|2
operator|*
literal|1000
argument_list|)
expr_stmt|;
comment|// we try to waitForReadyRead another time, but this time instead of a timeout we
comment|// should get a better error since the server disconnected us
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|->
name|waitForReadyRead
argument_list|(
literal|2
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
comment|// It must NOT be the SocketTimeoutError that had been set before
name|QVERIFY
argument_list|(
name|socket
operator|->
name|error
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|RemoteHostClosedError
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|invalidProxy_data
name|void
name|tst_QTcpSocket
operator|::
name|invalidProxy_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"type"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"host"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"port"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"failsAtConnect"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedError"
argument_list|)
expr_stmt|;
name|QString
name|fluke
init|=
name|QHostInfo
operator|::
name|fromName
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|)
operator|.
name|addresses
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ftp-proxy"
argument_list|)
operator|<<
name|int
argument_list|(
name|QNetworkProxy
operator|::
name|FtpCachingProxy
argument_list|)
operator|<<
name|fluke
operator|<<
literal|21
operator|<<
literal|true
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|UnsupportedSocketOperationError
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http-caching-proxy"
argument_list|)
operator|<<
name|int
argument_list|(
name|QNetworkProxy
operator|::
name|HttpCachingProxy
argument_list|)
operator|<<
name|fluke
operator|<<
literal|3128
operator|<<
literal|true
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|UnsupportedSocketOperationError
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-such-host-socks5"
argument_list|)
operator|<<
name|int
argument_list|(
name|QNetworkProxy
operator|::
name|Socks5Proxy
argument_list|)
operator|<<
literal|"this-host-will-never-exist.troll.no"
operator|<<
literal|1080
operator|<<
literal|false
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|ProxyNotFoundError
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-such-host-http"
argument_list|)
operator|<<
name|int
argument_list|(
name|QNetworkProxy
operator|::
name|HttpProxy
argument_list|)
operator|<<
literal|"this-host-will-never-exist.troll.no"
operator|<<
literal|3128
operator|<<
literal|false
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|ProxyNotFoundError
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http-on-socks5"
argument_list|)
operator|<<
name|int
argument_list|(
name|QNetworkProxy
operator|::
name|HttpProxy
argument_list|)
operator|<<
name|fluke
operator|<<
literal|1080
operator|<<
literal|false
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|ProxyConnectionClosedError
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"socks5-on-http"
argument_list|)
operator|<<
name|int
argument_list|(
name|QNetworkProxy
operator|::
name|Socks5Proxy
argument_list|)
operator|<<
name|fluke
operator|<<
literal|3128
operator|<<
literal|false
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|SocketTimeoutError
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|invalidProxy
name|void
name|tst_QTcpSocket
operator|::
name|invalidProxy
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
return|return;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|failsAtConnect
argument_list|)
expr_stmt|;
name|QNetworkProxy
operator|::
name|ProxyType
name|proxyType
init|=
name|QNetworkProxy
operator|::
name|ProxyType
argument_list|(
name|type
argument_list|)
decl_stmt|;
name|QNetworkProxy
name|proxy
argument_list|(
name|proxyType
argument_list|,
name|host
argument_list|,
name|port
argument_list|)
decl_stmt|;
name|QTcpSocket
modifier|*
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|socket
operator|->
name|setProxy
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
name|socket
operator|->
name|connectToHost
argument_list|(
name|QHostInfo
operator|::
name|fromName
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|)
operator|.
name|addresses
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|80
argument_list|)
expr_stmt|;
if|if
condition|(
name|failsAtConnect
condition|)
block|{
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|state
argument_list|()
argument_list|,
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|state
argument_list|()
argument_list|,
name|QAbstractSocket
operator|::
name|ConnectingState
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|->
name|waitForConnected
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|->
name|errorString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// note: the following test is not a hard failure.
comment|// Sometimes, error codes change for the better
name|QTEST
argument_list|(
name|int
argument_list|(
name|socket
operator|->
name|error
argument_list|()
argument_list|)
argument_list|,
literal|"expectedError"
argument_list|)
expr_stmt|;
operator|delete
name|socket
expr_stmt|;
block|}
end_function
begin_comment
comment|// copied from tst_qnetworkreply.cpp
end_comment
begin_class
DECL|class|MyProxyFactory
class|class
name|MyProxyFactory
super|:
specifier|public
name|QNetworkProxyFactory
block|{
public|public:
DECL|member|callCount
name|int
name|callCount
decl_stmt|;
DECL|member|toReturn
name|QList
argument_list|<
name|QNetworkProxy
argument_list|>
name|toReturn
decl_stmt|;
DECL|member|lastQuery
name|QNetworkProxyQuery
name|lastQuery
decl_stmt|;
DECL|function|MyProxyFactory
specifier|inline
name|MyProxyFactory
parameter_list|()
block|{
name|clear
argument_list|()
expr_stmt|;
block|}
DECL|function|clear
specifier|inline
name|void
name|clear
parameter_list|()
block|{
name|callCount
operator|=
literal|0
expr_stmt|;
name|toReturn
operator|=
name|QList
argument_list|<
name|QNetworkProxy
argument_list|>
argument_list|()
operator|<<
name|QNetworkProxy
operator|::
name|DefaultProxy
expr_stmt|;
name|lastQuery
operator|=
name|QNetworkProxyQuery
argument_list|()
expr_stmt|;
block|}
DECL|function|queryProxy
specifier|virtual
name|QList
argument_list|<
name|QNetworkProxy
argument_list|>
name|queryProxy
parameter_list|(
specifier|const
name|QNetworkProxyQuery
modifier|&
name|query
parameter_list|)
block|{
name|lastQuery
operator|=
name|query
expr_stmt|;
operator|++
name|callCount
expr_stmt|;
return|return
name|toReturn
return|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|proxyFactory_data
name|void
name|tst_QTcpSocket
operator|::
name|proxyFactory_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QList
argument_list|<
name|QNetworkProxy
argument_list|>
argument_list|>
argument_list|(
literal|"proxyList"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QNetworkProxy
argument_list|>
argument_list|(
literal|"proxyUsed"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"failsAtConnect"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedError"
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QNetworkProxy
argument_list|>
name|proxyList
decl_stmt|;
comment|// tests that do connect
name|proxyList
operator|<<
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|HttpProxy
argument_list|,
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|3129
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http"
argument_list|)
operator|<<
name|proxyList
operator|<<
name|proxyList
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|<<
literal|false
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|UnknownSocketError
argument_list|)
expr_stmt|;
name|proxyList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|proxyList
operator|<<
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|Socks5Proxy
argument_list|,
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|1081
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"socks5"
argument_list|)
operator|<<
name|proxyList
operator|<<
name|proxyList
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|<<
literal|false
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|UnknownSocketError
argument_list|)
expr_stmt|;
name|proxyList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|proxyList
operator|<<
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|HttpCachingProxy
argument_list|,
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|3129
argument_list|)
operator|<<
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|Socks5Proxy
argument_list|,
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|1081
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"cachinghttp+socks5"
argument_list|)
operator|<<
name|proxyList
operator|<<
name|proxyList
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|<<
literal|false
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|UnknownSocketError
argument_list|)
expr_stmt|;
name|proxyList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|proxyList
operator|<<
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|FtpCachingProxy
argument_list|,
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|2121
argument_list|)
operator|<<
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|HttpCachingProxy
argument_list|,
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|3129
argument_list|)
operator|<<
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|Socks5Proxy
argument_list|,
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|1081
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ftp+cachinghttp+socks5"
argument_list|)
operator|<<
name|proxyList
operator|<<
name|proxyList
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|<<
literal|false
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|UnknownSocketError
argument_list|)
expr_stmt|;
comment|// tests that fail to connect
name|proxyList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|proxyList
operator|<<
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|HttpCachingProxy
argument_list|,
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|3129
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"cachinghttp"
argument_list|)
operator|<<
name|proxyList
operator|<<
name|QNetworkProxy
argument_list|()
operator|<<
literal|true
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|UnsupportedSocketOperationError
argument_list|)
expr_stmt|;
name|proxyList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|proxyList
operator|<<
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|FtpCachingProxy
argument_list|,
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|2121
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ftp"
argument_list|)
operator|<<
name|proxyList
operator|<<
name|QNetworkProxy
argument_list|()
operator|<<
literal|true
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|UnsupportedSocketOperationError
argument_list|)
expr_stmt|;
name|proxyList
operator|.
name|clear
argument_list|()
expr_stmt|;
name|proxyList
operator|<<
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|FtpCachingProxy
argument_list|,
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|2121
argument_list|)
operator|<<
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|HttpCachingProxy
argument_list|,
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|3129
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ftp+cachinghttp"
argument_list|)
operator|<<
name|proxyList
operator|<<
name|QNetworkProxy
argument_list|()
operator|<<
literal|true
operator|<<
name|int
argument_list|(
name|QAbstractSocket
operator|::
name|UnsupportedSocketOperationError
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|proxyFactory
name|void
name|tst_QTcpSocket
operator|::
name|proxyFactory
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
return|return;
name|QFETCH
argument_list|(
name|QList
argument_list|<
name|QNetworkProxy
argument_list|>
argument_list|,
name|proxyList
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QNetworkProxy
argument_list|,
name|proxyUsed
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|failsAtConnect
argument_list|)
expr_stmt|;
name|MyProxyFactory
modifier|*
name|factory
init|=
operator|new
name|MyProxyFactory
decl_stmt|;
name|factory
operator|->
name|toReturn
operator|=
name|proxyList
expr_stmt|;
name|QNetworkProxyFactory
operator|::
name|setApplicationProxyFactory
argument_list|(
name|factory
argument_list|)
expr_stmt|;
name|QTcpSocket
modifier|*
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|QString
name|host
init|=
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
decl_stmt|;
name|socket
operator|->
name|connectToHost
argument_list|(
name|host
argument_list|,
literal|80
argument_list|)
expr_stmt|;
comment|// Verify that the factory was called properly
name|QCOMPARE
argument_list|(
name|factory
operator|->
name|callCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|factory
operator|->
name|lastQuery
argument_list|,
name|QNetworkProxyQuery
argument_list|(
name|host
argument_list|,
literal|80
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|failsAtConnect
condition|)
block|{
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|state
argument_list|()
argument_list|,
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|state
argument_list|()
argument_list|,
name|QAbstractSocket
operator|::
name|ConnectingState
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForConnected
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proxyAuthCalled
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|->
name|errorString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// note: the following test is not a hard failure.
comment|// Sometimes, error codes change for the better
name|QTEST
argument_list|(
name|int
argument_list|(
name|socket
operator|->
name|error
argument_list|()
argument_list|)
argument_list|,
literal|"expectedError"
argument_list|)
expr_stmt|;
operator|delete
name|socket
expr_stmt|;
block|}
end_function
begin_comment
comment|// there is a similar test inside tst_qtcpserver that uses the event loop instead
end_comment
begin_function
DECL|function|qtbug14268_peek
name|void
name|tst_QTcpSocket
operator|::
name|qtbug14268_peek
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
return|return;
name|SocketPair
name|socketPair
decl_stmt|;
name|QVERIFY
argument_list|(
name|socketPair
operator|.
name|create
argument_list|()
argument_list|)
expr_stmt|;
name|QTcpSocket
modifier|*
name|outgoing
init|=
name|socketPair
operator|.
name|endPoints
index|[
literal|0
index|]
decl_stmt|;
name|QTcpSocket
modifier|*
name|incoming
init|=
name|socketPair
operator|.
name|endPoints
index|[
literal|1
index|]
decl_stmt|;
name|QVERIFY
argument_list|(
name|incoming
operator|->
name|state
argument_list|()
operator|==
name|QTcpSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|outgoing
operator|->
name|state
argument_list|()
operator|==
name|QTcpSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
name|outgoing
operator|->
name|write
argument_list|(
literal|"abc\n"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|outgoing
operator|->
name|waitForBytesWritten
argument_list|(
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|incoming
operator|->
name|waitForReadyRead
argument_list|(
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|incoming
operator|->
name|peek
argument_list|(
literal|128
operator|*
literal|1024
argument_list|)
operator|==
name|QByteArray
argument_list|(
literal|"abc\n"
argument_list|)
argument_list|)
expr_stmt|;
name|outgoing
operator|->
name|write
argument_list|(
literal|"def\n"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|outgoing
operator|->
name|waitForBytesWritten
argument_list|(
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|incoming
operator|->
name|waitForReadyRead
argument_list|(
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|incoming
operator|->
name|peek
argument_list|(
literal|128
operator|*
literal|1024
argument_list|)
operator|==
name|QByteArray
argument_list|(
literal|"abc\ndef\n"
argument_list|)
argument_list|)
expr_stmt|;
name|outgoing
operator|->
name|write
argument_list|(
literal|"ghi\n"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|outgoing
operator|->
name|waitForBytesWritten
argument_list|(
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|incoming
operator|->
name|waitForReadyRead
argument_list|(
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|incoming
operator|->
name|peek
argument_list|(
literal|128
operator|*
literal|1024
argument_list|)
operator|==
name|QByteArray
argument_list|(
literal|"abc\ndef\nghi\n"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|incoming
operator|->
name|read
argument_list|(
literal|128
operator|*
literal|1024
argument_list|)
operator|==
name|QByteArray
argument_list|(
literal|"abc\ndef\nghi\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QTcpSocket
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qtcpsocket.moc"
end_include
end_unit
