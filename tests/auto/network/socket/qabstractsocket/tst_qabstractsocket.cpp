begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<qdebug.h>
end_include
begin_include
include|#
directive|include
file|<qabstractsocket.h>
end_include
begin_include
include|#
directive|include
file|<qtcpserver.h>
end_include
begin_include
include|#
directive|include
file|<qtcpsocket.h>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SSL
end_ifndef
begin_include
include|#
directive|include
file|<qsslsocket.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_class
DECL|class|tst_QAbstractSocket
class|class
name|tst_QAbstractSocket
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QAbstractSocket
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_QAbstractSocket
parameter_list|()
destructor_decl|;
private|private
name|slots
private|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|getSetCheck
parameter_list|()
function_decl|;
name|void
name|serverDisconnectWithBuffered
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_constructor
DECL|function|tst_QAbstractSocket
name|tst_QAbstractSocket
operator|::
name|tst_QAbstractSocket
parameter_list|()
block|{ }
end_constructor
begin_destructor
DECL|function|~tst_QAbstractSocket
name|tst_QAbstractSocket
operator|::
name|~
name|tst_QAbstractSocket
parameter_list|()
block|{ }
end_destructor
begin_class
DECL|class|MyAbstractSocket
class|class
name|MyAbstractSocket
super|:
specifier|public
name|QAbstractSocket
block|{
public|public:
DECL|function|MyAbstractSocket
name|MyAbstractSocket
parameter_list|()
member_init_list|:
name|QAbstractSocket
argument_list|(
name|QAbstractSocket
operator|::
name|TcpSocket
argument_list|,
literal|0
argument_list|)
block|{}
DECL|function|setLocalPort
name|void
name|setLocalPort
parameter_list|(
name|quint16
name|port
parameter_list|)
block|{
name|QAbstractSocket
operator|::
name|setLocalPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
DECL|function|setPeerPort
name|void
name|setPeerPort
parameter_list|(
name|quint16
name|port
parameter_list|)
block|{
name|QAbstractSocket
operator|::
name|setPeerPort
argument_list|(
name|port
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|initTestCase
name|void
name|tst_QAbstractSocket
operator|::
name|initTestCase
parameter_list|()
block|{
name|qRegisterMetaType
argument_list|<
name|QAbstractSocket
operator|::
name|SocketState
argument_list|>
argument_list|(
literal|"QAbstractSocket::SocketState"
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Testing get/set functions
end_comment
begin_function
DECL|function|getSetCheck
name|void
name|tst_QAbstractSocket
operator|::
name|getSetCheck
parameter_list|()
block|{
name|MyAbstractSocket
name|obj1
decl_stmt|;
comment|// qint64 QAbstractSocket::readBufferSize()
comment|// void QAbstractSocket::setReadBufferSize(qint64)
name|obj1
operator|.
name|setReadBufferSize
argument_list|(
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|,
name|obj1
operator|.
name|readBufferSize
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setReadBufferSize
argument_list|(
operator|(
name|Q_INT64_C
argument_list|(
operator|-
literal|9223372036854775807
argument_list|)
operator|-
literal|1
operator|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|Q_INT64_C
argument_list|(
operator|-
literal|9223372036854775807
argument_list|)
operator|-
literal|1
operator|)
argument_list|,
name|obj1
operator|.
name|readBufferSize
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setReadBufferSize
argument_list|(
name|Q_INT64_C
argument_list|(
literal|9223372036854775807
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|Q_INT64_C
argument_list|(
literal|9223372036854775807
argument_list|)
argument_list|,
name|obj1
operator|.
name|readBufferSize
argument_list|()
argument_list|)
expr_stmt|;
comment|// quint16 QAbstractSocket::localPort()
comment|// void QAbstractSocket::setLocalPort(quint16)
name|obj1
operator|.
name|setLocalPort
argument_list|(
name|quint16
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|quint16
argument_list|(
literal|0
argument_list|)
argument_list|,
name|obj1
operator|.
name|localPort
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setLocalPort
argument_list|(
name|quint16
argument_list|(
literal|0xffff
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|quint16
argument_list|(
literal|0xffff
argument_list|)
argument_list|,
name|obj1
operator|.
name|localPort
argument_list|()
argument_list|)
expr_stmt|;
comment|// quint16 QAbstractSocket::peerPort()
comment|// void QAbstractSocket::setPeerPort(quint16)
name|obj1
operator|.
name|setPeerPort
argument_list|(
name|quint16
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|quint16
argument_list|(
literal|0
argument_list|)
argument_list|,
name|obj1
operator|.
name|peerPort
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setPeerPort
argument_list|(
name|quint16
argument_list|(
literal|0xffff
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|quint16
argument_list|(
literal|0xffff
argument_list|)
argument_list|,
name|obj1
operator|.
name|peerPort
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test buffered socket being properly closed on remote disconnect
end_comment
begin_function
DECL|function|serverDisconnectWithBuffered
name|void
name|tst_QAbstractSocket
operator|::
name|serverDisconnectWithBuffered
parameter_list|()
block|{
name|QTcpServer
name|tcpServer
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_SSL
name|QSslSocket
name|testSocket
decl_stmt|;
else|#
directive|else
name|QTcpSocket
name|testSocket
decl_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|tcpServer
operator|.
name|listen
argument_list|(
name|QHostAddress
operator|::
name|LocalHost
argument_list|)
argument_list|)
expr_stmt|;
name|testSocket
operator|.
name|connectToHost
argument_list|(
name|tcpServer
operator|.
name|serverAddress
argument_list|()
argument_list|,
name|tcpServer
operator|.
name|serverPort
argument_list|()
argument_list|)
expr_stmt|;
comment|// Accept connection on server side
name|QVERIFY
argument_list|(
name|tcpServer
operator|.
name|waitForNewConnection
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QTcpSocket
modifier|*
name|newConnection
init|=
name|tcpServer
operator|.
name|nextPendingConnection
argument_list|()
decl_stmt|;
comment|// Send one char and drop link
name|QVERIFY
argument_list|(
name|newConnection
operator|!=
name|NULL
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|newConnection
operator|->
name|putChar
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|newConnection
operator|->
name|flush
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|newConnection
expr_stmt|;
name|QVERIFY
argument_list|(
name|testSocket
operator|.
name|waitForConnected
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
comment|// ready for write
name|QVERIFY
argument_list|(
name|testSocket
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
name|QSignalSpy
name|spyStateChanged
argument_list|(
operator|&
name|testSocket
argument_list|,
name|SIGNAL
argument_list|(
name|stateChanged
argument_list|(
name|QAbstractSocket
operator|::
name|SocketState
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spyDisconnected
argument_list|(
operator|&
name|testSocket
argument_list|,
name|SIGNAL
argument_list|(
name|disconnected
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|testSocket
operator|.
name|waitForReadyRead
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
comment|// have one char already in internal buffer
name|char
name|buf
index|[
literal|128
index|]
decl_stmt|;
name|QCOMPARE
argument_list|(
name|testSocket
operator|.
name|read
argument_list|(
name|buf
argument_list|,
sizeof|sizeof
argument_list|(
name|buf
argument_list|)
argument_list|)
argument_list|,
name|Q_INT64_C
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|testSocket
operator|.
name|state
argument_list|()
operator|!=
name|QAbstractSocket
operator|::
name|UnconnectedState
condition|)
block|{
name|QVERIFY
argument_list|(
name|testSocket
operator|.
name|waitForDisconnected
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|testSocket
operator|.
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
block|}
comment|// Test signal emitting
name|QVERIFY
argument_list|(
name|spyDisconnected
operator|.
name|count
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|spyStateChanged
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qvariant_cast
argument_list|<
name|QAbstractSocket
operator|::
name|SocketState
argument_list|>
argument_list|(
name|spyStateChanged
operator|.
name|last
argument_list|()
operator|.
name|first
argument_list|()
argument_list|)
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QAbstractSocket
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qabstractsocket.moc"
end_include
end_unit
