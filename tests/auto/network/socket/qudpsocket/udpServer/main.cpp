begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:GPL-EXCEPT$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3 as published by the Free Software ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtNetwork>
end_include
begin_class
DECL|class|Server
class|class
name|Server
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|Server
name|Server
parameter_list|()
block|{
name|connect
argument_list|(
operator|&
name|serverSocket
argument_list|,
operator|&
name|QIODevice
operator|::
name|readyRead
argument_list|,
name|this
argument_list|,
operator|&
name|Server
operator|::
name|sendEcho
argument_list|)
expr_stmt|;
block|}
DECL|function|bind
name|bool
name|bind
parameter_list|(
name|quint16
name|port
parameter_list|)
block|{
specifier|const
name|bool
name|result
init|=
name|serverSocket
operator|.
name|bind
argument_list|(
name|QHostAddress
operator|::
name|Any
argument_list|,
name|port
argument_list|,
name|QUdpSocket
operator|::
name|ReuseAddressHint
operator||
name|QUdpSocket
operator|::
name|ShareAddress
argument_list|)
decl_stmt|;
if|if
condition|(
name|result
condition|)
block|{
name|printf
argument_list|(
literal|"OK\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|printf
argument_list|(
literal|"FAILED: %s\n"
argument_list|,
name|qPrintable
argument_list|(
name|serverSocket
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|fflush
argument_list|(
name|stdout
argument_list|)
expr_stmt|;
return|return
name|result
return|;
block|}
private|private
name|slots
private|:
DECL|function|sendEcho
name|void
name|sendEcho
parameter_list|()
block|{
name|QHostAddress
name|senderAddress
decl_stmt|;
name|quint16
name|senderPort
decl_stmt|;
name|char
name|data
index|[
literal|1024
index|]
decl_stmt|;
name|qint64
name|bytes
init|=
name|serverSocket
operator|.
name|readDatagram
argument_list|(
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|data
argument_list|)
argument_list|,
operator|&
name|senderAddress
argument_list|,
operator|&
name|senderPort
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytes
operator|==
literal|1
operator|&&
name|data
index|[
literal|0
index|]
operator|==
literal|'\0'
condition|)
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|quit
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bytes
condition|;
operator|++
name|i
control|)
name|data
index|[
name|i
index|]
operator|+=
literal|1
expr_stmt|;
name|serverSocket
operator|.
name|writeDatagram
argument_list|(
name|data
argument_list|,
name|bytes
argument_list|,
name|senderAddress
argument_list|,
name|senderPort
argument_list|)
expr_stmt|;
block|}
private|private:
DECL|member|serverSocket
name|QUdpSocket
name|serverSocket
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
modifier|*
name|argv
parameter_list|)
block|{
name|QCoreApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|QStringList
name|arguments
init|=
name|QCoreApplication
operator|::
name|arguments
argument_list|()
decl_stmt|;
name|arguments
operator|.
name|pop_front
argument_list|()
expr_stmt|;
name|quint16
name|port
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|arguments
operator|.
name|isEmpty
argument_list|()
condition|)
name|port
operator|=
name|arguments
operator|.
name|constFirst
argument_list|()
operator|.
name|toUShort
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|port
condition|)
block|{
name|printf
argument_list|(
literal|"Specify port number\n"
argument_list|)
expr_stmt|;
return|return
operator|-
literal|1
return|;
block|}
name|Server
name|server
decl_stmt|;
if|if
condition|(
operator|!
name|server
operator|.
name|bind
argument_list|(
name|port
argument_list|)
condition|)
return|return
operator|-
literal|2
return|;
return|return
name|app
operator|.
name|exec
argument_list|()
return|;
block|}
end_function
begin_include
include|#
directive|include
file|"main.moc"
end_include
end_unit
