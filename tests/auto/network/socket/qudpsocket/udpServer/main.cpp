begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtNetwork>
end_include
begin_class
DECL|class|Server
class|class
name|Server
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|Server
name|Server
parameter_list|(
name|int
name|port
parameter_list|)
block|{
name|connect
argument_list|(
operator|&
name|serverSocket
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|sendEcho
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|serverSocket
operator|.
name|bind
argument_list|(
name|QHostAddress
operator|::
name|Any
argument_list|,
name|port
argument_list|,
name|QUdpSocket
operator|::
name|ReuseAddressHint
operator||
name|QUdpSocket
operator|::
name|ShareAddress
argument_list|)
condition|)
block|{
name|printf
argument_list|(
literal|"OK\n"
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|printf
argument_list|(
literal|"FAILED\n"
argument_list|)
expr_stmt|;
block|}
name|fflush
argument_list|(
name|stdout
argument_list|)
expr_stmt|;
block|}
private|private
name|slots
private|:
DECL|function|sendEcho
name|void
name|sendEcho
parameter_list|()
block|{
name|QHostAddress
name|senderAddress
decl_stmt|;
name|quint16
name|senderPort
decl_stmt|;
name|char
name|data
index|[
literal|1024
index|]
decl_stmt|;
name|qint64
name|bytes
init|=
name|serverSocket
operator|.
name|readDatagram
argument_list|(
name|data
argument_list|,
sizeof|sizeof
argument_list|(
name|data
argument_list|)
argument_list|,
operator|&
name|senderAddress
argument_list|,
operator|&
name|senderPort
argument_list|)
decl_stmt|;
if|if
condition|(
name|bytes
operator|==
literal|1
operator|&&
name|data
index|[
literal|0
index|]
operator|==
literal|'\0'
condition|)
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|quit
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|bytes
condition|;
operator|++
name|i
control|)
name|data
index|[
name|i
index|]
operator|+=
literal|1
expr_stmt|;
name|serverSocket
operator|.
name|writeDatagram
argument_list|(
name|data
argument_list|,
name|bytes
argument_list|,
name|senderAddress
argument_list|,
name|senderPort
argument_list|)
expr_stmt|;
block|}
private|private:
DECL|member|serverSocket
name|QUdpSocket
name|serverSocket
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
modifier|*
name|argv
parameter_list|)
block|{
name|QCoreApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|Server
name|server
argument_list|(
name|app
operator|.
name|arguments
argument_list|()
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|)
decl_stmt|;
return|return
name|app
operator|.
name|exec
argument_list|()
return|;
block|}
end_function
begin_include
include|#
directive|include
file|"main.moc"
end_include
end_unit
