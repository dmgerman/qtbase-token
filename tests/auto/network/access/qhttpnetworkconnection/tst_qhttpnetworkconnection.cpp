begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|"private/qhttpnetworkconnection_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qnoncontiguousbytedevice_p.h"
end_include
begin_include
include|#
directive|include
file|<QAuthenticator>
end_include
begin_include
include|#
directive|include
file|"../../../network-settings.h"
end_include
begin_class
DECL|class|tst_QHttpNetworkConnection
class|class
name|tst_QHttpNetworkConnection
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QHttpNetworkConnection
parameter_list|()
constructor_decl|;
public|public
name|Q_SLOTS
public|:
name|void
name|finishedReply
parameter_list|()
function_decl|;
name|void
name|finishedWithError
parameter_list|(
name|QNetworkReply
operator|::
name|NetworkError
name|errorCode
parameter_list|,
specifier|const
name|QString
modifier|&
name|detail
parameter_list|)
function_decl|;
name|void
name|challenge401
parameter_list|(
specifier|const
name|QHttpNetworkRequest
modifier|&
name|request
parameter_list|,
name|QAuthenticator
modifier|*
name|authenticator
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_SSL
name|void
name|sslErrors
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QSslError
argument_list|>
modifier|&
name|errors
parameter_list|)
function_decl|;
endif|#
directive|endif
private|private:
DECL|member|finishedCalled
name|bool
name|finishedCalled
decl_stmt|;
DECL|member|finishedWithErrorCalled
name|bool
name|finishedWithErrorCalled
decl_stmt|;
DECL|member|netErrorCode
name|QNetworkReply
operator|::
name|NetworkError
name|netErrorCode
decl_stmt|;
private|private
name|Q_SLOTS
private|:
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
name|void
name|options_data
parameter_list|()
function_decl|;
name|void
name|options
parameter_list|()
function_decl|;
name|void
name|get_data
parameter_list|()
function_decl|;
name|void
name|get
parameter_list|()
function_decl|;
name|void
name|head_data
parameter_list|()
function_decl|;
name|void
name|head
parameter_list|()
function_decl|;
name|void
name|post_data
parameter_list|()
function_decl|;
name|void
name|post
parameter_list|()
function_decl|;
name|void
name|put_data
parameter_list|()
function_decl|;
name|void
name|put
parameter_list|()
function_decl|;
name|void
name|_delete_data
parameter_list|()
function_decl|;
name|void
name|_delete
parameter_list|()
function_decl|;
name|void
name|trace_data
parameter_list|()
function_decl|;
name|void
name|trace
parameter_list|()
function_decl|;
name|void
name|_connect_data
parameter_list|()
function_decl|;
name|void
name|_connect
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_COMPRESS
name|void
name|compression_data
parameter_list|()
function_decl|;
name|void
name|compression
parameter_list|()
function_decl|;
endif|#
directive|endif
ifndef|#
directive|ifndef
name|QT_NO_SSL
name|void
name|ignoresslerror_data
parameter_list|()
function_decl|;
name|void
name|ignoresslerror
parameter_list|()
function_decl|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|QT_NO_SSL
name|void
name|nossl_data
parameter_list|()
function_decl|;
name|void
name|nossl
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|get401_data
parameter_list|()
function_decl|;
name|void
name|get401
parameter_list|()
function_decl|;
name|void
name|getMultiple_data
parameter_list|()
function_decl|;
name|void
name|getMultiple
parameter_list|()
function_decl|;
name|void
name|getMultipleWithPipeliningAndMultiplePriorities
parameter_list|()
function_decl|;
name|void
name|getMultipleWithPriorities
parameter_list|()
function_decl|;
name|void
name|getEmptyWithPipelining
parameter_list|()
function_decl|;
name|void
name|getAndEverythingShouldBePipelined
parameter_list|()
function_decl|;
name|void
name|getAndThenDeleteObject
parameter_list|()
function_decl|;
name|void
name|getAndThenDeleteObject_data
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_constructor
DECL|function|tst_QHttpNetworkConnection
name|tst_QHttpNetworkConnection
operator|::
name|tst_QHttpNetworkConnection
parameter_list|()
block|{ }
end_constructor
begin_function
DECL|function|initTestCase
name|void
name|tst_QHttpNetworkConnection
operator|::
name|initTestCase
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QtNetworkSettings
operator|::
name|verifyTestNetworkSettings
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_QHttpNetworkConnection
operator|::
name|cleanupTestCase
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|init
name|void
name|tst_QHttpNetworkConnection
operator|::
name|init
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QHttpNetworkConnection
operator|::
name|cleanup
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|options_data
name|void
name|tst_QHttpNetworkConnection
operator|::
name|options_data
parameter_list|()
block|{
comment|// not tested yet
block|}
end_function
begin_function
DECL|function|options
name|void
name|tst_QHttpNetworkConnection
operator|::
name|options
parameter_list|()
block|{
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"not tested yet"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|head_data
name|void
name|tst_QHttpNetworkConnection
operator|::
name|head_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"protocol"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"host"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|ushort
argument_list|>
argument_list|(
literal|"port"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"encrypt"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"statusCode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"statusString"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"contentLength"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"success-internal"
argument_list|)
operator|<<
literal|"http://"
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|"/qtest/rfc3252.txt"
operator|<<
name|ushort
argument_list|(
literal|80
argument_list|)
operator|<<
literal|false
operator|<<
literal|200
operator|<<
literal|"OK"
operator|<<
literal|25962
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"success-external"
argument_list|)
operator|<<
literal|"http://"
operator|<<
literal|"www.ietf.org"
operator|<<
literal|"/rfc/rfc3252.txt"
operator|<<
name|ushort
argument_list|(
literal|80
argument_list|)
operator|<<
literal|false
operator|<<
literal|200
operator|<<
literal|"OK"
operator|<<
literal|25962
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"failure-path"
argument_list|)
operator|<<
literal|"http://"
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|"/t"
operator|<<
name|ushort
argument_list|(
literal|80
argument_list|)
operator|<<
literal|false
operator|<<
literal|404
operator|<<
literal|"Not Found"
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"failure-protocol"
argument_list|)
operator|<<
literal|""
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|"/qtest/rfc3252.txt"
operator|<<
name|ushort
argument_list|(
literal|80
argument_list|)
operator|<<
literal|false
operator|<<
literal|400
operator|<<
literal|"Bad Request"
operator|<<
operator|-
literal|1
expr_stmt|;
block|}
end_function
begin_function
DECL|function|head
name|void
name|tst_QHttpNetworkConnection
operator|::
name|head
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|protocol
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|ushort
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|encrypt
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|statusCode
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|statusString
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|contentLength
argument_list|)
expr_stmt|;
name|QHttpNetworkConnection
name|connection
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
name|encrypt
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|connection
operator|.
name|port
argument_list|()
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|connection
operator|.
name|hostName
argument_list|()
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|connection
operator|.
name|isSsl
argument_list|()
argument_list|,
name|encrypt
argument_list|)
expr_stmt|;
name|QHttpNetworkRequest
name|request
argument_list|(
name|protocol
operator|+
name|host
operator|+
name|path
argument_list|,
name|QHttpNetworkRequest
operator|::
name|Head
argument_list|)
decl_stmt|;
name|QHttpNetworkReply
modifier|*
name|reply
init|=
name|connection
operator|.
name|sendRequest
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|QTime
name|stopWatch
decl_stmt|;
name|stopWatch
operator|.
name|start
argument_list|()
expr_stmt|;
do|do
block|{
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|processEvents
argument_list|()
expr_stmt|;
if|if
condition|(
name|stopWatch
operator|.
name|elapsed
argument_list|()
operator|>=
literal|30000
condition|)
break|break;
block|}
do|while
condition|(
operator|!
name|reply
operator|->
name|isFinished
argument_list|()
condition|)
do|;
name|QCOMPARE
argument_list|(
name|reply
operator|->
name|statusCode
argument_list|()
argument_list|,
name|statusCode
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reply
operator|->
name|reasonPhrase
argument_list|()
argument_list|,
name|statusString
argument_list|)
expr_stmt|;
comment|// only check it if it is set and expected
if|if
condition|(
name|reply
operator|->
name|contentLength
argument_list|()
operator|!=
operator|-
literal|1
operator|&&
name|contentLength
operator|!=
operator|-
literal|1
condition|)
name|QCOMPARE
argument_list|(
name|reply
operator|->
name|contentLength
argument_list|()
argument_list|,
name|qint64
argument_list|(
name|contentLength
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|reply
operator|->
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|reply
expr_stmt|;
block|}
end_function
begin_function
DECL|function|get_data
name|void
name|tst_QHttpNetworkConnection
operator|::
name|get_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"protocol"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"host"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|ushort
argument_list|>
argument_list|(
literal|"port"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"encrypt"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"statusCode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"statusString"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"contentLength"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"downloadSize"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"success-internal"
argument_list|)
operator|<<
literal|"http://"
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|"/qtest/rfc3252.txt"
operator|<<
name|ushort
argument_list|(
literal|80
argument_list|)
operator|<<
literal|false
operator|<<
literal|200
operator|<<
literal|"OK"
operator|<<
literal|25962
operator|<<
literal|25962
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"success-external"
argument_list|)
operator|<<
literal|"http://"
operator|<<
literal|"www.ietf.org"
operator|<<
literal|"/rfc/rfc3252.txt"
operator|<<
name|ushort
argument_list|(
literal|80
argument_list|)
operator|<<
literal|false
operator|<<
literal|200
operator|<<
literal|"OK"
operator|<<
literal|25962
operator|<<
literal|25962
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"failure-path"
argument_list|)
operator|<<
literal|"http://"
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|"/t"
operator|<<
name|ushort
argument_list|(
literal|80
argument_list|)
operator|<<
literal|false
operator|<<
literal|404
operator|<<
literal|"Not Found"
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"failure-protocol"
argument_list|)
operator|<<
literal|""
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|"/qtest/rfc3252.txt"
operator|<<
name|ushort
argument_list|(
literal|80
argument_list|)
operator|<<
literal|false
operator|<<
literal|400
operator|<<
literal|"Bad Request"
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
expr_stmt|;
block|}
end_function
begin_function
DECL|function|get
name|void
name|tst_QHttpNetworkConnection
operator|::
name|get
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|protocol
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|ushort
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|encrypt
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|statusCode
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|statusString
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|contentLength
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|downloadSize
argument_list|)
expr_stmt|;
name|QHttpNetworkConnection
name|connection
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
name|encrypt
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|connection
operator|.
name|port
argument_list|()
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|connection
operator|.
name|hostName
argument_list|()
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|connection
operator|.
name|isSsl
argument_list|()
argument_list|,
name|encrypt
argument_list|)
expr_stmt|;
name|QHttpNetworkRequest
name|request
argument_list|(
name|protocol
operator|+
name|host
operator|+
name|path
argument_list|)
decl_stmt|;
name|QHttpNetworkReply
modifier|*
name|reply
init|=
name|connection
operator|.
name|sendRequest
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|QTime
name|stopWatch
decl_stmt|;
name|stopWatch
operator|.
name|start
argument_list|()
expr_stmt|;
forever|forever
block|{
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|processEvents
argument_list|()
expr_stmt|;
if|if
condition|(
name|reply
operator|->
name|bytesAvailable
argument_list|()
condition|)
break|break;
if|if
condition|(
name|stopWatch
operator|.
name|elapsed
argument_list|()
operator|>=
literal|30000
condition|)
break|break;
block|}
name|QCOMPARE
argument_list|(
name|reply
operator|->
name|statusCode
argument_list|()
argument_list|,
name|statusCode
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reply
operator|->
name|reasonPhrase
argument_list|()
argument_list|,
name|statusString
argument_list|)
expr_stmt|;
comment|// only check it if it is set and expected
if|if
condition|(
name|reply
operator|->
name|contentLength
argument_list|()
operator|!=
operator|-
literal|1
operator|&&
name|contentLength
operator|!=
operator|-
literal|1
condition|)
name|QCOMPARE
argument_list|(
name|reply
operator|->
name|contentLength
argument_list|()
argument_list|,
name|qint64
argument_list|(
name|contentLength
argument_list|)
argument_list|)
expr_stmt|;
name|stopWatch
operator|.
name|start
argument_list|()
expr_stmt|;
name|QByteArray
name|ba
decl_stmt|;
do|do
block|{
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|processEvents
argument_list|()
expr_stmt|;
while|while
condition|(
name|reply
operator|->
name|bytesAvailable
argument_list|()
condition|)
name|ba
operator|+=
name|reply
operator|->
name|readAny
argument_list|()
expr_stmt|;
if|if
condition|(
name|stopWatch
operator|.
name|elapsed
argument_list|()
operator|>=
literal|30000
condition|)
break|break;
block|}
do|while
condition|(
operator|!
name|reply
operator|->
name|isFinished
argument_list|()
condition|)
do|;
name|QVERIFY
argument_list|(
name|reply
operator|->
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
comment|//do not require server generated error pages to be a fixed size
if|if
condition|(
name|downloadSize
operator|!=
operator|-
literal|1
condition|)
name|QCOMPARE
argument_list|(
name|ba
operator|.
name|size
argument_list|()
argument_list|,
name|downloadSize
argument_list|)
expr_stmt|;
comment|//but check against content length if it was sent
if|if
condition|(
name|reply
operator|->
name|contentLength
argument_list|()
operator|!=
operator|-
literal|1
condition|)
name|QCOMPARE
argument_list|(
name|ba
operator|.
name|size
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|reply
operator|->
name|contentLength
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|reply
expr_stmt|;
block|}
end_function
begin_function
DECL|function|finishedReply
name|void
name|tst_QHttpNetworkConnection
operator|::
name|finishedReply
parameter_list|()
block|{
name|finishedCalled
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|finishedWithError
name|void
name|tst_QHttpNetworkConnection
operator|::
name|finishedWithError
parameter_list|(
name|QNetworkReply
operator|::
name|NetworkError
name|errorCode
parameter_list|,
specifier|const
name|QString
modifier|&
name|detail
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|detail
argument_list|)
name|finishedWithErrorCalled
operator|=
literal|true
expr_stmt|;
name|netErrorCode
operator|=
name|errorCode
expr_stmt|;
block|}
end_function
begin_function
DECL|function|put_data
name|void
name|tst_QHttpNetworkConnection
operator|::
name|put_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"protocol"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"host"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|ushort
argument_list|>
argument_list|(
literal|"port"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"encrypt"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"data"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"succeed"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"success-internal"
argument_list|)
operator|<<
literal|"http://"
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|"/dav/file1.txt"
operator|<<
name|ushort
argument_list|(
literal|80
argument_list|)
operator|<<
literal|false
operator|<<
literal|"Hello World\nEnd of file\n"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"fail-internal"
argument_list|)
operator|<<
literal|"http://"
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|"/dav2/file1.txt"
operator|<<
name|ushort
argument_list|(
literal|80
argument_list|)
operator|<<
literal|false
operator|<<
literal|"Hello World\nEnd of file\n"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"fail-host"
argument_list|)
operator|<<
literal|"http://"
operator|<<
literal|"fluke-nosuchhost.troll.no"
operator|<<
literal|"/dav2/file1.txt"
operator|<<
name|ushort
argument_list|(
literal|80
argument_list|)
operator|<<
literal|false
operator|<<
literal|"Hello World\nEnd of file\n"
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|put
name|void
name|tst_QHttpNetworkConnection
operator|::
name|put
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|protocol
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|ushort
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|encrypt
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|succeed
argument_list|)
expr_stmt|;
name|QHttpNetworkConnection
name|connection
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
name|encrypt
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|connection
operator|.
name|port
argument_list|()
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|connection
operator|.
name|hostName
argument_list|()
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|connection
operator|.
name|isSsl
argument_list|()
argument_list|,
name|encrypt
argument_list|)
expr_stmt|;
name|QHttpNetworkRequest
name|request
argument_list|(
name|protocol
operator|+
name|host
operator|+
name|path
argument_list|,
name|QHttpNetworkRequest
operator|::
name|Put
argument_list|)
decl_stmt|;
name|QByteArray
name|array
init|=
name|data
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
name|QNonContiguousByteDevice
modifier|*
name|bd
init|=
name|QNonContiguousByteDeviceFactory
operator|::
name|create
argument_list|(
operator|&
name|array
argument_list|)
decl_stmt|;
name|bd
operator|->
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|request
operator|.
name|setUploadByteDevice
argument_list|(
name|bd
argument_list|)
expr_stmt|;
name|finishedCalled
operator|=
literal|false
expr_stmt|;
name|finishedWithErrorCalled
operator|=
literal|false
expr_stmt|;
name|QHttpNetworkReply
modifier|*
name|reply
init|=
name|connection
operator|.
name|sendRequest
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|finishedReply
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|finishedWithError
argument_list|(
name|QNetworkReply
operator|::
name|NetworkError
argument_list|,
name|QString
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|finishedWithError
argument_list|(
name|QNetworkReply
operator|::
name|NetworkError
argument_list|,
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QTime
name|stopWatch
decl_stmt|;
name|stopWatch
operator|.
name|start
argument_list|()
expr_stmt|;
do|do
block|{
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|processEvents
argument_list|()
expr_stmt|;
if|if
condition|(
name|stopWatch
operator|.
name|elapsed
argument_list|()
operator|>=
literal|30000
condition|)
break|break;
block|}
do|while
condition|(
operator|!
name|reply
operator|->
name|isFinished
argument_list|()
operator|&&
operator|!
name|finishedCalled
operator|&&
operator|!
name|finishedWithErrorCalled
condition|)
do|;
if|if
condition|(
name|reply
operator|->
name|isFinished
argument_list|()
condition|)
block|{
name|QByteArray
name|ba
decl_stmt|;
while|while
condition|(
name|reply
operator|->
name|bytesAvailable
argument_list|()
condition|)
name|ba
operator|+=
name|reply
operator|->
name|readAny
argument_list|()
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|finishedWithErrorCalled
condition|)
block|{
if|if
condition|(
operator|!
name|succeed
condition|)
block|{
operator|delete
name|reply
expr_stmt|;
return|return;
block|}
else|else
block|{
name|QFAIL
argument_list|(
literal|"Error in PUT"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QFAIL
argument_list|(
literal|"PUT timed out"
argument_list|)
expr_stmt|;
block|}
name|int
name|status
init|=
name|reply
operator|->
name|statusCode
argument_list|()
decl_stmt|;
if|if
condition|(
name|status
operator|!=
literal|200
operator|&&
name|status
operator|!=
literal|201
operator|&&
name|status
operator|!=
literal|204
condition|)
block|{
if|if
condition|(
name|succeed
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"PUT failed, Status Code:"
operator|<<
name|status
expr_stmt|;
name|QFAIL
argument_list|(
literal|"Error in PUT"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
if|if
condition|(
operator|!
name|succeed
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"PUT Should fail, Status Code:"
operator|<<
name|status
expr_stmt|;
name|QFAIL
argument_list|(
literal|"Error in PUT"
argument_list|)
expr_stmt|;
block|}
block|}
operator|delete
name|reply
expr_stmt|;
block|}
end_function
begin_function
DECL|function|post_data
name|void
name|tst_QHttpNetworkConnection
operator|::
name|post_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"protocol"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"host"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|ushort
argument_list|>
argument_list|(
literal|"port"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"encrypt"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"data"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"statusCode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"statusString"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"contentLength"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"downloadSize"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"success-internal"
argument_list|)
operator|<<
literal|"http://"
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|"/qtest/cgi-bin/echo.cgi"
operator|<<
name|ushort
argument_list|(
literal|80
argument_list|)
operator|<<
literal|false
operator|<<
literal|"7 bytes"
operator|<<
literal|200
operator|<<
literal|"OK"
operator|<<
literal|7
operator|<<
literal|7
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"failure-internal"
argument_list|)
operator|<<
literal|"http://"
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|"/t"
operator|<<
name|ushort
argument_list|(
literal|80
argument_list|)
operator|<<
literal|false
operator|<<
literal|"Hello World"
operator|<<
literal|404
operator|<<
literal|"Not Found"
operator|<<
operator|-
literal|1
operator|<<
operator|-
literal|1
expr_stmt|;
block|}
end_function
begin_function
DECL|function|post
name|void
name|tst_QHttpNetworkConnection
operator|::
name|post
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|protocol
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|ushort
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|encrypt
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|statusCode
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|statusString
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|contentLength
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|downloadSize
argument_list|)
expr_stmt|;
name|QHttpNetworkConnection
name|connection
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
name|encrypt
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|connection
operator|.
name|port
argument_list|()
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|connection
operator|.
name|hostName
argument_list|()
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|connection
operator|.
name|isSsl
argument_list|()
argument_list|,
name|encrypt
argument_list|)
expr_stmt|;
name|QHttpNetworkRequest
name|request
argument_list|(
name|protocol
operator|+
name|host
operator|+
name|path
argument_list|,
name|QHttpNetworkRequest
operator|::
name|Post
argument_list|)
decl_stmt|;
name|QByteArray
name|array
init|=
name|data
operator|.
name|toLatin1
argument_list|()
decl_stmt|;
name|QNonContiguousByteDevice
modifier|*
name|bd
init|=
name|QNonContiguousByteDeviceFactory
operator|::
name|create
argument_list|(
operator|&
name|array
argument_list|)
decl_stmt|;
name|bd
operator|->
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|request
operator|.
name|setUploadByteDevice
argument_list|(
name|bd
argument_list|)
expr_stmt|;
name|QHttpNetworkReply
modifier|*
name|reply
init|=
name|connection
operator|.
name|sendRequest
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|QTime
name|stopWatch
decl_stmt|;
name|stopWatch
operator|.
name|start
argument_list|()
expr_stmt|;
forever|forever
block|{
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|processEvents
argument_list|()
expr_stmt|;
if|if
condition|(
name|reply
operator|->
name|bytesAvailable
argument_list|()
condition|)
break|break;
if|if
condition|(
name|stopWatch
operator|.
name|elapsed
argument_list|()
operator|>=
literal|30000
condition|)
break|break;
block|}
name|QCOMPARE
argument_list|(
name|reply
operator|->
name|statusCode
argument_list|()
argument_list|,
name|statusCode
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reply
operator|->
name|reasonPhrase
argument_list|()
argument_list|,
name|statusString
argument_list|)
expr_stmt|;
name|qint64
name|cLen
init|=
name|reply
operator|->
name|contentLength
argument_list|()
decl_stmt|;
if|if
condition|(
name|contentLength
operator|!=
operator|-
literal|1
condition|)
block|{
comment|// only check the content length if test expected it to be set
if|if
condition|(
name|cLen
operator|==
operator|-
literal|1
condition|)
block|{
comment|// HTTP 1.1 server may respond with chunked encoding and in that
comment|// case contentLength is not present in reply -> verify that it is the case
name|QByteArray
name|transferEnc
init|=
name|reply
operator|->
name|headerField
argument_list|(
literal|"Transfer-Encoding"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|transferEnc
argument_list|,
name|QByteArray
argument_list|(
literal|"chunked"
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|cLen
argument_list|,
name|qint64
argument_list|(
name|contentLength
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|stopWatch
operator|.
name|start
argument_list|()
expr_stmt|;
name|QByteArray
name|ba
decl_stmt|;
do|do
block|{
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|processEvents
argument_list|()
expr_stmt|;
while|while
condition|(
name|reply
operator|->
name|bytesAvailable
argument_list|()
condition|)
name|ba
operator|+=
name|reply
operator|->
name|readAny
argument_list|()
expr_stmt|;
if|if
condition|(
name|stopWatch
operator|.
name|elapsed
argument_list|()
operator|>=
literal|30000
condition|)
break|break;
block|}
do|while
condition|(
operator|!
name|reply
operator|->
name|isFinished
argument_list|()
condition|)
do|;
name|QVERIFY
argument_list|(
name|reply
operator|->
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
comment|//don't require fixed size for generated error pages
if|if
condition|(
name|downloadSize
operator|!=
operator|-
literal|1
condition|)
name|QCOMPARE
argument_list|(
name|ba
operator|.
name|size
argument_list|()
argument_list|,
name|downloadSize
argument_list|)
expr_stmt|;
comment|//but do compare with content length if possible
if|if
condition|(
name|cLen
operator|!=
operator|-
literal|1
condition|)
name|QCOMPARE
argument_list|(
name|ba
operator|.
name|size
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|cLen
argument_list|)
expr_stmt|;
operator|delete
name|reply
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_delete_data
name|void
name|tst_QHttpNetworkConnection
operator|::
name|_delete_data
parameter_list|()
block|{
comment|// not tested yet
block|}
end_function
begin_function
DECL|function|_delete
name|void
name|tst_QHttpNetworkConnection
operator|::
name|_delete
parameter_list|()
block|{
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"not tested yet"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|trace_data
name|void
name|tst_QHttpNetworkConnection
operator|::
name|trace_data
parameter_list|()
block|{
comment|// not tested yet
block|}
end_function
begin_function
DECL|function|trace
name|void
name|tst_QHttpNetworkConnection
operator|::
name|trace
parameter_list|()
block|{
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"not tested yet"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|_connect_data
name|void
name|tst_QHttpNetworkConnection
operator|::
name|_connect_data
parameter_list|()
block|{
comment|// not tested yet
block|}
end_function
begin_function
DECL|function|_connect
name|void
name|tst_QHttpNetworkConnection
operator|::
name|_connect
parameter_list|()
block|{
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"not tested yet"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|challenge401
name|void
name|tst_QHttpNetworkConnection
operator|::
name|challenge401
parameter_list|(
specifier|const
name|QHttpNetworkRequest
modifier|&
name|request
parameter_list|,
name|QAuthenticator
modifier|*
name|authenticator
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|request
argument_list|)
name|QHttpNetworkReply
modifier|*
name|reply
init|=
name|qobject_cast
argument_list|<
name|QHttpNetworkReply
operator|*
argument_list|>
argument_list|(
name|sender
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|reply
condition|)
block|{
name|QHttpNetworkConnection
modifier|*
name|c
init|=
name|reply
operator|->
name|connection
argument_list|()
decl_stmt|;
name|QVariant
name|val
init|=
name|c
operator|->
name|property
argument_list|(
literal|"setCredentials"
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|.
name|toBool
argument_list|()
condition|)
block|{
name|QVariant
name|user
init|=
name|c
operator|->
name|property
argument_list|(
literal|"username"
argument_list|)
decl_stmt|;
name|QVariant
name|password
init|=
name|c
operator|->
name|property
argument_list|(
literal|"password"
argument_list|)
decl_stmt|;
name|authenticator
operator|->
name|setUser
argument_list|(
name|user
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|authenticator
operator|->
name|setPassword
argument_list|(
name|password
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|c
operator|->
name|setProperty
argument_list|(
literal|"setCredentials"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|get401_data
name|void
name|tst_QHttpNetworkConnection
operator|::
name|get401_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"protocol"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"host"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|ushort
argument_list|>
argument_list|(
literal|"port"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"encrypt"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"setCredentials"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"username"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"statusCode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-credentials"
argument_list|)
operator|<<
literal|"http://"
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|"/qtest/rfcs-auth/index.html"
operator|<<
name|ushort
argument_list|(
literal|80
argument_list|)
operator|<<
literal|false
operator|<<
literal|false
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|401
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalid-credentials"
argument_list|)
operator|<<
literal|"http://"
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|"/qtest/rfcs-auth/index.html"
operator|<<
name|ushort
argument_list|(
literal|80
argument_list|)
operator|<<
literal|false
operator|<<
literal|true
operator|<<
literal|"test"
operator|<<
literal|"test"
operator|<<
literal|401
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"valid-credentials"
argument_list|)
operator|<<
literal|"http://"
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|"/qtest/rfcs-auth/index.html"
operator|<<
name|ushort
argument_list|(
literal|80
argument_list|)
operator|<<
literal|false
operator|<<
literal|true
operator|<<
literal|"httptest"
operator|<<
literal|"httptest"
operator|<<
literal|200
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"digest-authentication-invalid"
argument_list|)
operator|<<
literal|"http://"
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|"/qtest/auth-digest/index.html"
operator|<<
name|ushort
argument_list|(
literal|80
argument_list|)
operator|<<
literal|false
operator|<<
literal|true
operator|<<
literal|"wrong"
operator|<<
literal|"wrong"
operator|<<
literal|401
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"digest-authentication-valid"
argument_list|)
operator|<<
literal|"http://"
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|"/qtest/auth-digest/index.html"
operator|<<
name|ushort
argument_list|(
literal|80
argument_list|)
operator|<<
literal|false
operator|<<
literal|true
operator|<<
literal|"httptest"
operator|<<
literal|"httptest"
operator|<<
literal|200
expr_stmt|;
block|}
end_function
begin_function
DECL|function|get401
name|void
name|tst_QHttpNetworkConnection
operator|::
name|get401
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|protocol
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|ushort
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|encrypt
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|setCredentials
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|username
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|statusCode
argument_list|)
expr_stmt|;
name|QHttpNetworkConnection
name|connection
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
name|encrypt
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|connection
operator|.
name|port
argument_list|()
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|connection
operator|.
name|hostName
argument_list|()
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|connection
operator|.
name|isSsl
argument_list|()
argument_list|,
name|encrypt
argument_list|)
expr_stmt|;
name|connection
operator|.
name|setProperty
argument_list|(
literal|"setCredentials"
argument_list|,
name|setCredentials
argument_list|)
expr_stmt|;
name|connection
operator|.
name|setProperty
argument_list|(
literal|"username"
argument_list|,
name|username
argument_list|)
expr_stmt|;
name|connection
operator|.
name|setProperty
argument_list|(
literal|"password"
argument_list|,
name|password
argument_list|)
expr_stmt|;
name|QHttpNetworkRequest
name|request
argument_list|(
name|protocol
operator|+
name|host
operator|+
name|path
argument_list|)
decl_stmt|;
name|QHttpNetworkReply
modifier|*
name|reply
init|=
name|connection
operator|.
name|sendRequest
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|authenticationRequired
argument_list|(
name|QHttpNetworkRequest
argument_list|,
name|QAuthenticator
operator|*
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|challenge401
argument_list|(
name|QHttpNetworkRequest
argument_list|,
name|QAuthenticator
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|finishedCalled
operator|=
literal|false
expr_stmt|;
name|finishedWithErrorCalled
operator|=
literal|false
expr_stmt|;
name|connect
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|finishedReply
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|finishedWithError
argument_list|(
name|QNetworkReply
operator|::
name|NetworkError
argument_list|,
name|QString
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|finishedWithError
argument_list|(
name|QNetworkReply
operator|::
name|NetworkError
argument_list|,
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QTime
name|stopWatch
decl_stmt|;
name|stopWatch
operator|.
name|start
argument_list|()
expr_stmt|;
forever|forever
block|{
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|processEvents
argument_list|()
expr_stmt|;
if|if
condition|(
name|finishedCalled
condition|)
break|break;
if|if
condition|(
name|finishedWithErrorCalled
condition|)
break|break;
if|if
condition|(
name|stopWatch
operator|.
name|elapsed
argument_list|()
operator|>=
literal|30000
condition|)
break|break;
block|}
name|QCOMPARE
argument_list|(
name|reply
operator|->
name|statusCode
argument_list|()
argument_list|,
name|statusCode
argument_list|)
expr_stmt|;
operator|delete
name|reply
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_COMPRESS
end_ifndef
begin_function
DECL|function|compression_data
name|void
name|tst_QHttpNetworkConnection
operator|::
name|compression_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"protocol"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"host"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|ushort
argument_list|>
argument_list|(
literal|"port"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"encrypt"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"statusCode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"statusString"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"contentLength"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"downloadSize"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"autoCompress"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"contentCoding"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"success-autogzip-temp"
argument_list|)
operator|<<
literal|"http://"
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|"/qtest/rfcs/rfc2616.html"
operator|<<
name|ushort
argument_list|(
literal|80
argument_list|)
operator|<<
literal|false
operator|<<
literal|200
operator|<<
literal|"OK"
operator|<<
operator|-
literal|1
operator|<<
literal|418321
operator|<<
literal|true
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"success-nogzip-temp"
argument_list|)
operator|<<
literal|"http://"
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|"/qtest/rfcs/rfc2616.html"
operator|<<
name|ushort
argument_list|(
literal|80
argument_list|)
operator|<<
literal|false
operator|<<
literal|200
operator|<<
literal|"OK"
operator|<<
literal|418321
operator|<<
literal|418321
operator|<<
literal|false
operator|<<
literal|"identity"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"success-manualgzip-temp"
argument_list|)
operator|<<
literal|"http://"
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|"/qtest/deflate/rfc2616.html"
operator|<<
name|ushort
argument_list|(
literal|80
argument_list|)
operator|<<
literal|false
operator|<<
literal|200
operator|<<
literal|"OK"
operator|<<
literal|119124
operator|<<
literal|119124
operator|<<
literal|false
operator|<<
literal|"gzip"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compression
name|void
name|tst_QHttpNetworkConnection
operator|::
name|compression
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|protocol
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|ushort
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|encrypt
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|statusCode
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|statusString
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|contentLength
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|downloadSize
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|autoCompress
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|contentCoding
argument_list|)
expr_stmt|;
name|QHttpNetworkConnection
name|connection
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
name|encrypt
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|connection
operator|.
name|port
argument_list|()
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|connection
operator|.
name|hostName
argument_list|()
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|connection
operator|.
name|isSsl
argument_list|()
argument_list|,
name|encrypt
argument_list|)
expr_stmt|;
name|QHttpNetworkRequest
name|request
argument_list|(
name|protocol
operator|+
name|host
operator|+
name|path
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|autoCompress
condition|)
name|request
operator|.
name|setHeaderField
argument_list|(
literal|"Accept-Encoding"
argument_list|,
name|contentCoding
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
name|QHttpNetworkReply
modifier|*
name|reply
init|=
name|connection
operator|.
name|sendRequest
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|QTime
name|stopWatch
decl_stmt|;
name|stopWatch
operator|.
name|start
argument_list|()
expr_stmt|;
forever|forever
block|{
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|processEvents
argument_list|()
expr_stmt|;
if|if
condition|(
name|reply
operator|->
name|bytesAvailable
argument_list|()
condition|)
break|break;
if|if
condition|(
name|stopWatch
operator|.
name|elapsed
argument_list|()
operator|>=
literal|30000
condition|)
break|break;
block|}
name|QCOMPARE
argument_list|(
name|reply
operator|->
name|statusCode
argument_list|()
argument_list|,
name|statusCode
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reply
operator|->
name|reasonPhrase
argument_list|()
argument_list|,
name|statusString
argument_list|)
expr_stmt|;
name|bool
name|isLengthOk
init|=
operator|(
name|reply
operator|->
name|contentLength
argument_list|()
operator|==
name|qint64
argument_list|(
name|contentLength
argument_list|)
operator|||
name|reply
operator|->
name|contentLength
argument_list|()
operator|==
name|qint64
argument_list|(
name|downloadSize
argument_list|)
operator|||
name|reply
operator|->
name|contentLength
argument_list|()
operator|==
operator|-
literal|1
operator|)
decl_stmt|;
comment|//apache2 does not send content-length for compressed pages
name|QVERIFY
argument_list|(
name|isLengthOk
argument_list|)
expr_stmt|;
name|stopWatch
operator|.
name|start
argument_list|()
expr_stmt|;
name|QByteArray
name|ba
decl_stmt|;
do|do
block|{
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|processEvents
argument_list|()
expr_stmt|;
while|while
condition|(
name|reply
operator|->
name|bytesAvailable
argument_list|()
condition|)
name|ba
operator|+=
name|reply
operator|->
name|readAny
argument_list|()
expr_stmt|;
if|if
condition|(
name|stopWatch
operator|.
name|elapsed
argument_list|()
operator|>=
literal|30000
condition|)
break|break;
block|}
do|while
condition|(
operator|!
name|reply
operator|->
name|isFinished
argument_list|()
condition|)
do|;
name|QVERIFY
argument_list|(
name|reply
operator|->
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ba
operator|.
name|size
argument_list|()
argument_list|,
name|downloadSize
argument_list|)
expr_stmt|;
operator|delete
name|reply
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SSL
end_ifndef
begin_function
DECL|function|sslErrors
name|void
name|tst_QHttpNetworkConnection
operator|::
name|sslErrors
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QSslError
argument_list|>
modifier|&
name|errors
parameter_list|)
block|{
name|Q_UNUSED
argument_list|(
argument|errors
argument_list|)
name|QHttpNetworkReply
modifier|*
name|reply
init|=
name|qobject_cast
argument_list|<
name|QHttpNetworkReply
operator|*
argument_list|>
argument_list|(
name|sender
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|reply
condition|)
block|{
name|QHttpNetworkConnection
modifier|*
name|connection
init|=
name|reply
operator|->
name|connection
argument_list|()
decl_stmt|;
name|QVariant
name|val
init|=
name|connection
operator|->
name|property
argument_list|(
literal|"ignoreFromSignal"
argument_list|)
decl_stmt|;
if|if
condition|(
name|val
operator|.
name|toBool
argument_list|()
condition|)
name|connection
operator|->
name|ignoreSslErrors
argument_list|()
expr_stmt|;
name|finishedWithErrorCalled
operator|=
literal|true
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|ignoresslerror_data
name|void
name|tst_QHttpNetworkConnection
operator|::
name|ignoresslerror_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"protocol"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"host"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|ushort
argument_list|>
argument_list|(
literal|"port"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"encrypt"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"ignoreInit"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"ignoreFromSignal"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"statusCode"
argument_list|)
expr_stmt|;
comment|// This test will work only if the website has ssl errors.
comment|// fluke's certificate is signed by a non-standard authority.
comment|// Since we don't introduce that CA into the SSL verification chain,
comment|// connecting should fail.
name|QTest
operator|::
name|newRow
argument_list|(
literal|"success-init"
argument_list|)
operator|<<
literal|"https://"
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|"/"
operator|<<
name|ushort
argument_list|(
literal|443
argument_list|)
operator|<<
literal|true
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|200
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"success-fromSignal"
argument_list|)
operator|<<
literal|"https://"
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|"/"
operator|<<
name|ushort
argument_list|(
literal|443
argument_list|)
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|true
operator|<<
literal|200
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"failure"
argument_list|)
operator|<<
literal|"https://"
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|"/"
operator|<<
name|ushort
argument_list|(
literal|443
argument_list|)
operator|<<
literal|true
operator|<<
literal|false
operator|<<
literal|false
operator|<<
literal|100
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ignoresslerror
name|void
name|tst_QHttpNetworkConnection
operator|::
name|ignoresslerror
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|protocol
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|ushort
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|encrypt
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|ignoreInit
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|ignoreFromSignal
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|statusCode
argument_list|)
expr_stmt|;
name|QHttpNetworkConnection
name|connection
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
name|encrypt
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|connection
operator|.
name|port
argument_list|()
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|connection
operator|.
name|hostName
argument_list|()
argument_list|,
name|host
argument_list|)
expr_stmt|;
if|if
condition|(
name|ignoreInit
condition|)
name|connection
operator|.
name|ignoreSslErrors
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|connection
operator|.
name|isSsl
argument_list|()
argument_list|,
name|encrypt
argument_list|)
expr_stmt|;
name|connection
operator|.
name|setProperty
argument_list|(
literal|"ignoreFromSignal"
argument_list|,
name|ignoreFromSignal
argument_list|)
expr_stmt|;
name|QHttpNetworkRequest
name|request
argument_list|(
name|protocol
operator|+
name|host
operator|+
name|path
argument_list|)
decl_stmt|;
name|QHttpNetworkReply
modifier|*
name|reply
init|=
name|connection
operator|.
name|sendRequest
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|sslErrors
argument_list|(
name|QList
argument_list|<
name|QSslError
argument_list|>
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|sslErrors
argument_list|(
name|QList
argument_list|<
name|QSslError
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|finishedWithErrorCalled
operator|=
literal|false
expr_stmt|;
name|connect
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|finishedReply
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTime
name|stopWatch
decl_stmt|;
name|stopWatch
operator|.
name|start
argument_list|()
expr_stmt|;
forever|forever
block|{
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|processEvents
argument_list|()
expr_stmt|;
if|if
condition|(
name|reply
operator|->
name|bytesAvailable
argument_list|()
condition|)
break|break;
if|if
condition|(
name|statusCode
operator|==
literal|100
operator|&&
name|finishedWithErrorCalled
condition|)
break|break;
if|if
condition|(
name|stopWatch
operator|.
name|elapsed
argument_list|()
operator|>=
literal|30000
condition|)
break|break;
block|}
name|QCOMPARE
argument_list|(
name|reply
operator|->
name|statusCode
argument_list|()
argument_list|,
name|statusCode
argument_list|)
expr_stmt|;
operator|delete
name|reply
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|QT_NO_SSL
end_ifdef
begin_function
DECL|function|nossl_data
name|void
name|tst_QHttpNetworkConnection
operator|::
name|nossl_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"protocol"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"host"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|ushort
argument_list|>
argument_list|(
literal|"port"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"encrypt"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QNetworkReply
operator|::
name|NetworkError
argument_list|>
argument_list|(
literal|"networkError"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"protocol-error"
argument_list|)
operator|<<
literal|"https://"
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|"/"
operator|<<
name|ushort
argument_list|(
literal|443
argument_list|)
operator|<<
literal|true
operator|<<
name|QNetworkReply
operator|::
name|ProtocolUnknownError
expr_stmt|;
block|}
end_function
begin_function
DECL|function|nossl
name|void
name|tst_QHttpNetworkConnection
operator|::
name|nossl
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|protocol
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|ushort
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|encrypt
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QNetworkReply
operator|::
name|NetworkError
argument_list|,
name|networkError
argument_list|)
expr_stmt|;
name|QHttpNetworkConnection
name|connection
argument_list|(
name|host
argument_list|,
name|port
argument_list|,
name|encrypt
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|connection
operator|.
name|port
argument_list|()
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|connection
operator|.
name|hostName
argument_list|()
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|QHttpNetworkRequest
name|request
argument_list|(
name|protocol
operator|+
name|host
operator|+
name|path
argument_list|)
decl_stmt|;
name|QHttpNetworkReply
modifier|*
name|reply
init|=
name|connection
operator|.
name|sendRequest
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|finishedWithErrorCalled
operator|=
literal|false
expr_stmt|;
name|netErrorCode
operator|=
name|QNetworkReply
operator|::
name|NoError
expr_stmt|;
name|connect
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|finishedReply
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|finishedWithError
argument_list|(
name|QNetworkReply
operator|::
name|NetworkError
argument_list|,
name|QString
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|finishedWithError
argument_list|(
name|QNetworkReply
operator|::
name|NetworkError
argument_list|,
name|QString
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QTime
name|stopWatch
decl_stmt|;
name|stopWatch
operator|.
name|start
argument_list|()
expr_stmt|;
forever|forever
block|{
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|processEvents
argument_list|()
expr_stmt|;
if|if
condition|(
name|finishedWithErrorCalled
condition|)
break|break;
if|if
condition|(
name|stopWatch
operator|.
name|elapsed
argument_list|()
operator|>=
literal|30000
condition|)
break|break;
block|}
name|QCOMPARE
argument_list|(
name|netErrorCode
argument_list|,
name|networkError
argument_list|)
expr_stmt|;
operator|delete
name|reply
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|getMultiple_data
name|void
name|tst_QHttpNetworkConnection
operator|::
name|getMultiple_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|quint16
argument_list|>
argument_list|(
literal|"connectionCount"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"pipeliningAllowed"
argument_list|)
expr_stmt|;
comment|// send 100 requests. apache will usually force-close after 100 requests in a single tcp connection
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"requestCount"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"6 connections, no pipelining, 100 requests"
argument_list|)
operator|<<
name|quint16
argument_list|(
literal|6
argument_list|)
operator|<<
literal|false
operator|<<
literal|100
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1 connection, no pipelining, 100 requests"
argument_list|)
operator|<<
name|quint16
argument_list|(
literal|1
argument_list|)
operator|<<
literal|false
operator|<<
literal|100
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"6 connections, pipelining allowed, 100 requests"
argument_list|)
operator|<<
name|quint16
argument_list|(
literal|6
argument_list|)
operator|<<
literal|true
operator|<<
literal|100
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1 connection, pipelining allowed, 100 requests"
argument_list|)
operator|<<
name|quint16
argument_list|(
literal|1
argument_list|)
operator|<<
literal|true
operator|<<
literal|100
expr_stmt|;
block|}
end_function
begin_function
DECL|function|getMultiple
name|void
name|tst_QHttpNetworkConnection
operator|::
name|getMultiple
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|quint16
argument_list|,
name|connectionCount
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|pipeliningAllowed
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|requestCount
argument_list|)
expr_stmt|;
name|QHttpNetworkConnection
name|connection
argument_list|(
name|connectionCount
argument_list|,
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QHttpNetworkRequest
modifier|*
argument_list|>
name|requests
decl_stmt|;
name|QList
argument_list|<
name|QHttpNetworkReply
modifier|*
argument_list|>
name|replies
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|requestCount
condition|;
name|i
operator|++
control|)
block|{
comment|// depending on what you use the results will vary.
comment|// for the "real" results, use a URL that has "internet latency" for you. Then (6 connections, pipelining) will win.
comment|// for LAN latency, you will possibly get that (1 connection, no pipelining) is the fastest
name|QHttpNetworkRequest
modifier|*
name|request
init|=
operator|new
name|QHttpNetworkRequest
argument_list|(
literal|"http://"
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|+
literal|"/qtest/rfc3252.txt"
argument_list|)
decl_stmt|;
comment|// located in Berlin:
comment|//QHttpNetworkRequest *request = new QHttpNetworkRequest(QUrl("http://klinsmann.nokia.trolltech.de/~berlin/qtcreatorad.gif"));
if|if
condition|(
name|pipeliningAllowed
condition|)
name|request
operator|->
name|setPipeliningAllowed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|requests
operator|.
name|append
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|QHttpNetworkReply
modifier|*
name|reply
init|=
name|connection
operator|.
name|sendRequest
argument_list|(
operator|*
name|request
argument_list|)
decl_stmt|;
name|replies
operator|.
name|append
argument_list|(
name|reply
argument_list|)
expr_stmt|;
block|}
name|QTime
name|stopWatch
decl_stmt|;
name|stopWatch
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|finishedCount
init|=
literal|0
decl_stmt|;
do|do
block|{
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|processEvents
argument_list|()
expr_stmt|;
if|if
condition|(
name|stopWatch
operator|.
name|elapsed
argument_list|()
operator|>=
literal|60000
condition|)
break|break;
name|finishedCount
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|replies
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|replies
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|isFinished
argument_list|()
condition|)
name|finishedCount
operator|++
expr_stmt|;
block|}
do|while
condition|(
name|finishedCount
operator|!=
name|replies
operator|.
name|length
argument_list|()
condition|)
do|;
comment|// redundant
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|replies
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
name|QVERIFY
argument_list|(
name|replies
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"==="
operator|<<
name|stopWatch
operator|.
name|elapsed
argument_list|()
operator|<<
literal|"msec ==="
expr_stmt|;
name|qDeleteAll
argument_list|(
name|requests
argument_list|)
expr_stmt|;
name|qDeleteAll
argument_list|(
name|replies
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|getMultipleWithPipeliningAndMultiplePriorities
name|void
name|tst_QHttpNetworkConnection
operator|::
name|getMultipleWithPipeliningAndMultiplePriorities
parameter_list|()
block|{
name|quint16
name|requestCount
init|=
literal|100
decl_stmt|;
comment|// use 2 connections.
name|QHttpNetworkConnection
name|connection
argument_list|(
literal|2
argument_list|,
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QHttpNetworkRequest
modifier|*
argument_list|>
name|requests
decl_stmt|;
name|QList
argument_list|<
name|QHttpNetworkReply
modifier|*
argument_list|>
name|replies
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|requestCount
condition|;
name|i
operator|++
control|)
block|{
name|QHttpNetworkRequest
modifier|*
name|request
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|i
operator|%
literal|3
condition|)
name|request
operator|=
operator|new
name|QHttpNetworkRequest
argument_list|(
literal|"http://"
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|+
literal|"/qtest/rfc3252.txt"
argument_list|,
name|QHttpNetworkRequest
operator|::
name|Get
argument_list|)
expr_stmt|;
else|else
name|request
operator|=
operator|new
name|QHttpNetworkRequest
argument_list|(
literal|"http://"
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|+
literal|"/qtest/rfc3252.txt"
argument_list|,
name|QHttpNetworkRequest
operator|::
name|Head
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|2
operator|||
name|i
operator|%
literal|3
condition|)
name|request
operator|->
name|setPipeliningAllowed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|3
condition|)
name|request
operator|->
name|setPriority
argument_list|(
name|QHttpNetworkRequest
operator|::
name|HighPriority
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|i
operator|%
literal|5
condition|)
name|request
operator|->
name|setPriority
argument_list|(
name|QHttpNetworkRequest
operator|::
name|NormalPriority
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|i
operator|%
literal|7
condition|)
name|request
operator|->
name|setPriority
argument_list|(
name|QHttpNetworkRequest
operator|::
name|LowPriority
argument_list|)
expr_stmt|;
name|requests
operator|.
name|append
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|QHttpNetworkReply
modifier|*
name|reply
init|=
name|connection
operator|.
name|sendRequest
argument_list|(
operator|*
name|request
argument_list|)
decl_stmt|;
name|replies
operator|.
name|append
argument_list|(
name|reply
argument_list|)
expr_stmt|;
block|}
name|QTime
name|stopWatch
decl_stmt|;
name|stopWatch
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|finishedCount
init|=
literal|0
decl_stmt|;
do|do
block|{
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|processEvents
argument_list|()
expr_stmt|;
if|if
condition|(
name|stopWatch
operator|.
name|elapsed
argument_list|()
operator|>=
literal|60000
condition|)
break|break;
name|finishedCount
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|replies
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
if|if
condition|(
name|replies
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|isFinished
argument_list|()
condition|)
name|finishedCount
operator|++
expr_stmt|;
block|}
do|while
condition|(
name|finishedCount
operator|!=
name|replies
operator|.
name|length
argument_list|()
condition|)
do|;
name|int
name|pipelinedCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|replies
operator|.
name|length
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QVERIFY
argument_list|(
name|replies
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|replies
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|request
argument_list|()
operator|.
name|isPipeliningAllowed
argument_list|()
operator|==
literal|false
operator|&&
name|replies
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|isPipeliningUsed
argument_list|()
operator|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|replies
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|->
name|isPipeliningUsed
argument_list|()
condition|)
name|pipelinedCount
operator|++
expr_stmt|;
block|}
comment|// We allow pipelining for every 2nd,3rd,4th,6th,8th,9th,10th etc request.
comment|// Assume that half of the requests had been pipelined.
comment|// (this is a very relaxed condition, when last measured 79 of 100
comment|// requests had been pipelined)
name|QVERIFY
argument_list|(
name|pipelinedCount
operator|>=
name|requestCount
operator|/
literal|2
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"==="
operator|<<
name|stopWatch
operator|.
name|elapsed
argument_list|()
operator|<<
literal|"msec ==="
expr_stmt|;
name|qDeleteAll
argument_list|(
name|requests
argument_list|)
expr_stmt|;
name|qDeleteAll
argument_list|(
name|replies
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|GetMultipleWithPrioritiesReceiver
class|class
name|GetMultipleWithPrioritiesReceiver
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|member|highPrioReceived
name|int
name|highPrioReceived
decl_stmt|;
DECL|member|lowPrioReceived
name|int
name|lowPrioReceived
decl_stmt|;
DECL|member|requestCount
name|int
name|requestCount
decl_stmt|;
DECL|function|GetMultipleWithPrioritiesReceiver
name|GetMultipleWithPrioritiesReceiver
parameter_list|(
name|int
name|rq
parameter_list|)
member_init_list|:
name|highPrioReceived
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|lowPrioReceived
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|requestCount
argument_list|(
name|rq
argument_list|)
block|{ }
public|public
name|Q_SLOTS
public|:
DECL|function|finishedSlot
name|void
name|finishedSlot
parameter_list|()
block|{
name|QHttpNetworkReply
modifier|*
name|reply
init|=
operator|(
name|QHttpNetworkReply
operator|*
operator|)
name|sender
argument_list|()
decl_stmt|;
if|if
condition|(
name|reply
operator|->
name|request
argument_list|()
operator|.
name|priority
argument_list|()
operator|==
name|QHttpNetworkRequest
operator|::
name|HighPriority
condition|)
name|highPrioReceived
operator|++
expr_stmt|;
elseif|else
if|if
condition|(
name|reply
operator|->
name|request
argument_list|()
operator|.
name|priority
argument_list|()
operator|==
name|QHttpNetworkRequest
operator|::
name|LowPriority
condition|)
name|lowPrioReceived
operator|++
expr_stmt|;
else|else
name|QFAIL
argument_list|(
literal|"Wrong priority!?"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|highPrioReceived
operator|+
literal|7
operator|>=
name|lowPrioReceived
argument_list|)
expr_stmt|;
if|if
condition|(
name|highPrioReceived
operator|+
name|lowPrioReceived
operator|==
name|requestCount
condition|)
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|exitLoop
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|getMultipleWithPriorities
name|void
name|tst_QHttpNetworkConnection
operator|::
name|getMultipleWithPriorities
parameter_list|()
block|{
name|quint16
name|requestCount
init|=
literal|100
decl_stmt|;
comment|// use 2 connections.
name|QHttpNetworkConnection
name|connection
argument_list|(
literal|2
argument_list|,
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|)
decl_stmt|;
name|GetMultipleWithPrioritiesReceiver
name|receiver
argument_list|(
name|requestCount
argument_list|)
decl_stmt|;
name|QUrl
name|url
argument_list|(
literal|"http://"
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|+
literal|"/qtest/rfc3252.txt"
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QHttpNetworkRequest
modifier|*
argument_list|>
name|requests
decl_stmt|;
name|QList
argument_list|<
name|QHttpNetworkReply
modifier|*
argument_list|>
name|replies
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|requestCount
condition|;
name|i
operator|++
control|)
block|{
name|QHttpNetworkRequest
modifier|*
name|request
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|i
operator|%
literal|3
condition|)
name|request
operator|=
operator|new
name|QHttpNetworkRequest
argument_list|(
name|url
argument_list|,
name|QHttpNetworkRequest
operator|::
name|Get
argument_list|)
expr_stmt|;
else|else
name|request
operator|=
operator|new
name|QHttpNetworkRequest
argument_list|(
name|url
argument_list|,
name|QHttpNetworkRequest
operator|::
name|Head
argument_list|)
expr_stmt|;
if|if
condition|(
name|i
operator|%
literal|2
condition|)
name|request
operator|->
name|setPriority
argument_list|(
name|QHttpNetworkRequest
operator|::
name|HighPriority
argument_list|)
expr_stmt|;
else|else
name|request
operator|->
name|setPriority
argument_list|(
name|QHttpNetworkRequest
operator|::
name|LowPriority
argument_list|)
expr_stmt|;
name|requests
operator|.
name|append
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|QHttpNetworkReply
modifier|*
name|reply
init|=
name|connection
operator|.
name|sendRequest
argument_list|(
operator|*
name|request
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|receiver
argument_list|,
name|SLOT
argument_list|(
name|finishedSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|replies
operator|.
name|append
argument_list|(
name|reply
argument_list|)
expr_stmt|;
block|}
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|40
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|qDeleteAll
argument_list|(
name|requests
argument_list|)
expr_stmt|;
name|qDeleteAll
argument_list|(
name|replies
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|GetEmptyWithPipeliningReceiver
class|class
name|GetEmptyWithPipeliningReceiver
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|member|receivedCount
name|int
name|receivedCount
decl_stmt|;
DECL|member|requestCount
name|int
name|requestCount
decl_stmt|;
DECL|function|GetEmptyWithPipeliningReceiver
name|GetEmptyWithPipeliningReceiver
parameter_list|(
name|int
name|rq
parameter_list|)
member_init_list|:
name|receivedCount
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|requestCount
argument_list|(
name|rq
argument_list|)
block|{ }
public|public
name|Q_SLOTS
public|:
DECL|function|finishedSlot
name|void
name|finishedSlot
parameter_list|()
block|{
name|QHttpNetworkReply
modifier|*
name|reply
init|=
operator|(
name|QHttpNetworkReply
operator|*
operator|)
name|sender
argument_list|()
decl_stmt|;
name|Q_UNUSED
argument_list|(
name|reply
argument_list|)
expr_stmt|;
name|receivedCount
operator|++
expr_stmt|;
if|if
condition|(
name|receivedCount
operator|==
name|requestCount
condition|)
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|exitLoop
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|getEmptyWithPipelining
name|void
name|tst_QHttpNetworkConnection
operator|::
name|getEmptyWithPipelining
parameter_list|()
block|{
name|quint16
name|requestCount
init|=
literal|50
decl_stmt|;
comment|// use 2 connections.
name|QHttpNetworkConnection
name|connection
argument_list|(
literal|2
argument_list|,
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|)
decl_stmt|;
name|GetEmptyWithPipeliningReceiver
name|receiver
argument_list|(
name|requestCount
argument_list|)
decl_stmt|;
name|QUrl
name|url
argument_list|(
literal|"http://"
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|+
literal|"/cgi-bin/echo.cgi"
argument_list|)
decl_stmt|;
comment|// a get on this = getting an empty file
name|QList
argument_list|<
name|QHttpNetworkRequest
modifier|*
argument_list|>
name|requests
decl_stmt|;
name|QList
argument_list|<
name|QHttpNetworkReply
modifier|*
argument_list|>
name|replies
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|requestCount
condition|;
name|i
operator|++
control|)
block|{
name|QHttpNetworkRequest
modifier|*
name|request
init|=
literal|0
decl_stmt|;
name|request
operator|=
operator|new
name|QHttpNetworkRequest
argument_list|(
name|url
argument_list|,
name|QHttpNetworkRequest
operator|::
name|Get
argument_list|)
expr_stmt|;
name|request
operator|->
name|setPipeliningAllowed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|requests
operator|.
name|append
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|QHttpNetworkReply
modifier|*
name|reply
init|=
name|connection
operator|.
name|sendRequest
argument_list|(
operator|*
name|request
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|receiver
argument_list|,
name|SLOT
argument_list|(
name|finishedSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|replies
operator|.
name|append
argument_list|(
name|reply
argument_list|)
expr_stmt|;
block|}
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|qDeleteAll
argument_list|(
name|requests
argument_list|)
expr_stmt|;
name|qDeleteAll
argument_list|(
name|replies
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|GetAndEverythingShouldBePipelinedReceiver
class|class
name|GetAndEverythingShouldBePipelinedReceiver
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|member|receivedCount
name|int
name|receivedCount
decl_stmt|;
DECL|member|requestCount
name|int
name|requestCount
decl_stmt|;
DECL|function|GetAndEverythingShouldBePipelinedReceiver
name|GetAndEverythingShouldBePipelinedReceiver
parameter_list|(
name|int
name|rq
parameter_list|)
member_init_list|:
name|receivedCount
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|requestCount
argument_list|(
name|rq
argument_list|)
block|{ }
public|public
name|Q_SLOTS
public|:
DECL|function|finishedSlot
name|void
name|finishedSlot
parameter_list|()
block|{
name|QHttpNetworkReply
modifier|*
name|reply
init|=
operator|(
name|QHttpNetworkReply
operator|*
operator|)
name|sender
argument_list|()
decl_stmt|;
name|Q_UNUSED
argument_list|(
name|reply
argument_list|)
expr_stmt|;
name|receivedCount
operator|++
expr_stmt|;
if|if
condition|(
name|receivedCount
operator|==
name|requestCount
condition|)
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|exitLoop
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|getAndEverythingShouldBePipelined
name|void
name|tst_QHttpNetworkConnection
operator|::
name|getAndEverythingShouldBePipelined
parameter_list|()
block|{
name|quint16
name|requestCount
init|=
literal|100
decl_stmt|;
comment|// use 1 connection.
name|QHttpNetworkConnection
name|connection
argument_list|(
literal|1
argument_list|,
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|)
decl_stmt|;
name|QUrl
name|url
argument_list|(
literal|"http://"
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|+
literal|"/qtest/rfc3252.txt"
argument_list|)
decl_stmt|;
name|QList
argument_list|<
name|QHttpNetworkRequest
modifier|*
argument_list|>
name|requests
decl_stmt|;
name|QList
argument_list|<
name|QHttpNetworkReply
modifier|*
argument_list|>
name|replies
decl_stmt|;
name|GetAndEverythingShouldBePipelinedReceiver
name|receiver
argument_list|(
name|requestCount
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|requestCount
condition|;
name|i
operator|++
control|)
block|{
name|QHttpNetworkRequest
modifier|*
name|request
init|=
literal|0
decl_stmt|;
name|request
operator|=
operator|new
name|QHttpNetworkRequest
argument_list|(
name|url
argument_list|,
name|QHttpNetworkRequest
operator|::
name|Get
argument_list|)
expr_stmt|;
name|request
operator|->
name|setPipeliningAllowed
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|requests
operator|.
name|append
argument_list|(
name|request
argument_list|)
expr_stmt|;
name|QHttpNetworkReply
modifier|*
name|reply
init|=
name|connection
operator|.
name|sendRequest
argument_list|(
operator|*
name|request
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|receiver
argument_list|,
name|SLOT
argument_list|(
name|finishedSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|replies
operator|.
name|append
argument_list|(
name|reply
argument_list|)
expr_stmt|;
block|}
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|40
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|qDeleteAll
argument_list|(
name|requests
argument_list|)
expr_stmt|;
name|qDeleteAll
argument_list|(
name|replies
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|getAndThenDeleteObject_data
name|void
name|tst_QHttpNetworkConnection
operator|::
name|getAndThenDeleteObject_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"replyFirst"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"delete-reply-first"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"delete-connection-first"
argument_list|)
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|getAndThenDeleteObject
name|void
name|tst_QHttpNetworkConnection
operator|::
name|getAndThenDeleteObject
parameter_list|()
block|{
comment|// yes, this will leak if the testcase fails. I don't care. It must not fail then :P
name|QHttpNetworkConnection
modifier|*
name|connection
init|=
operator|new
name|QHttpNetworkConnection
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|)
decl_stmt|;
name|QHttpNetworkRequest
name|request
argument_list|(
literal|"http://"
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|+
literal|"/qtest/bigfile"
argument_list|)
decl_stmt|;
name|QHttpNetworkReply
modifier|*
name|reply
init|=
name|connection
operator|->
name|sendRequest
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|reply
operator|->
name|setDownstreamLimited
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QTime
name|stopWatch
decl_stmt|;
name|stopWatch
operator|.
name|start
argument_list|()
expr_stmt|;
forever|forever
block|{
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|processEvents
argument_list|()
expr_stmt|;
if|if
condition|(
name|reply
operator|->
name|bytesAvailable
argument_list|()
condition|)
break|break;
if|if
condition|(
name|stopWatch
operator|.
name|elapsed
argument_list|()
operator|>=
literal|30000
condition|)
break|break;
block|}
name|QVERIFY
argument_list|(
name|reply
operator|->
name|bytesAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reply
operator|->
name|statusCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|reply
operator|->
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
comment|// must not be finished
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|replyFirst
argument_list|)
expr_stmt|;
if|if
condition|(
name|replyFirst
condition|)
block|{
operator|delete
name|reply
expr_stmt|;
operator|delete
name|connection
expr_stmt|;
block|}
else|else
block|{
operator|delete
name|connection
expr_stmt|;
operator|delete
name|reply
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QHttpNetworkConnection
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qhttpnetworkconnection.moc"
end_include
end_unit
