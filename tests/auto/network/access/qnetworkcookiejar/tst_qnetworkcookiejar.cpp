begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtCore/QJsonArray>
end_include
begin_include
include|#
directive|include
file|<QtCore/QJsonDocument>
end_include
begin_include
include|#
directive|include
file|<QtCore/QJsonObject>
end_include
begin_include
include|#
directive|include
file|<QtCore/QJsonValue>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/QNetworkCookieJar>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/QNetworkCookie>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/QNetworkRequest>
end_include
begin_include
include|#
directive|include
file|"private/qtldurl_p.h"
end_include
begin_class
DECL|class|tst_QNetworkCookieJar
class|class
name|tst_QNetworkCookieJar
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|getterSetter
parameter_list|()
function_decl|;
name|void
name|setCookiesFromUrl_data
parameter_list|()
function_decl|;
name|void
name|setCookiesFromUrl
parameter_list|()
function_decl|;
name|void
name|cookiesForUrl_data
parameter_list|()
function_decl|;
name|void
name|cookiesForUrl
parameter_list|()
function_decl|;
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
name|void
name|effectiveTLDs_data
parameter_list|()
function_decl|;
name|void
name|effectiveTLDs
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|rfc6265_data
parameter_list|()
function_decl|;
name|void
name|rfc6265
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_namespace
DECL|namespace|QTest
namespace|namespace
name|QTest
block|{
template|template
parameter_list|<>
DECL|function|toString
name|char
modifier|*
name|toString
parameter_list|(
specifier|const
name|QNetworkCookie
modifier|&
name|cookie
parameter_list|)
block|{
return|return
name|qstrdup
argument_list|(
name|cookie
operator|.
name|toRawForm
argument_list|()
argument_list|)
return|;
block|}
template|template
parameter_list|<>
DECL|function|toString
name|char
modifier|*
name|toString
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
modifier|&
name|list
parameter_list|)
block|{
name|QString
name|result
init|=
literal|"QList("
decl_stmt|;
name|bool
name|first
init|=
literal|true
decl_stmt|;
foreach|foreach
control|(
name|QNetworkCookie
name|cookie
decl|,
name|list
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|result
operator|+=
literal|", "
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|result
operator|+=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"QNetworkCookie(%1)"
argument_list|)
operator|.
name|arg
argument_list|(
name|QLatin1String
argument_list|(
name|cookie
operator|.
name|toRawForm
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|qstrdup
argument_list|(
name|result
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
return|;
block|}
block|}
end_namespace
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_class
DECL|class|MyCookieJar
class|class
name|MyCookieJar
super|:
specifier|public
name|QNetworkCookieJar
block|{
public|public:
DECL|function|allCookies
specifier|inline
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
name|allCookies
parameter_list|()
specifier|const
block|{
return|return
name|QNetworkCookieJar
operator|::
name|allCookies
argument_list|()
return|;
block|}
DECL|function|setAllCookies
specifier|inline
name|void
name|setAllCookies
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
modifier|&
name|cookieList
parameter_list|)
block|{
name|QNetworkCookieJar
operator|::
name|setAllCookies
argument_list|(
name|cookieList
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|getterSetter
name|void
name|tst_QNetworkCookieJar
operator|::
name|getterSetter
parameter_list|()
block|{
name|MyCookieJar
name|jar
decl_stmt|;
name|QVERIFY
argument_list|(
name|jar
operator|.
name|allCookies
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
name|list
decl_stmt|;
name|QNetworkCookie
name|cookie
decl_stmt|;
name|cookie
operator|.
name|setName
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|list
operator|<<
name|cookie
expr_stmt|;
name|jar
operator|.
name|setAllCookies
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|jar
operator|.
name|allCookies
argument_list|()
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setCookiesFromUrl_data
name|void
name|tst_QNetworkCookieJar
operator|::
name|setCookiesFromUrl_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
argument_list|>
argument_list|(
literal|"preset"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QNetworkCookie
argument_list|>
argument_list|(
literal|"newCookie"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"referenceUrl"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
argument_list|>
argument_list|(
literal|"expectedResult"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"setCookies"
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
name|preset
decl_stmt|;
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
name|result
decl_stmt|;
name|QNetworkCookie
name|cookie
decl_stmt|;
name|cookie
operator|.
name|setName
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|cookie
operator|.
name|setPath
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|cookie
operator|.
name|setDomain
argument_list|(
literal|".foo.tld"
argument_list|)
expr_stmt|;
name|result
operator|+=
name|cookie
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"just-add"
argument_list|)
operator|<<
name|preset
operator|<<
name|cookie
operator|<<
literal|"http://www.foo.tld"
operator|<<
name|result
operator|<<
literal|true
expr_stmt|;
name|preset
operator|=
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"replace-1"
argument_list|)
operator|<<
name|preset
operator|<<
name|cookie
operator|<<
literal|"http://www.foo.tld"
operator|<<
name|result
operator|<<
literal|true
expr_stmt|;
name|cookie
operator|.
name|setValue
argument_list|(
literal|"bc"
argument_list|)
expr_stmt|;
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
name|result
operator|+=
name|cookie
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"replace-2"
argument_list|)
operator|<<
name|preset
operator|<<
name|cookie
operator|<<
literal|"http://www.foo.tld"
operator|<<
name|result
operator|<<
literal|true
expr_stmt|;
name|preset
operator|=
name|result
expr_stmt|;
name|cookie
operator|.
name|setName
argument_list|(
literal|"d"
argument_list|)
expr_stmt|;
name|result
operator|+=
name|cookie
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append"
argument_list|)
operator|<<
name|preset
operator|<<
name|cookie
operator|<<
literal|"http://www.foo.tld"
operator|<<
name|result
operator|<<
literal|true
expr_stmt|;
name|cookie
operator|=
name|preset
operator|.
name|at
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|=
name|preset
expr_stmt|;
name|cookie
operator|.
name|setPath
argument_list|(
literal|"/something"
argument_list|)
expr_stmt|;
name|result
operator|+=
name|cookie
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"diff-path"
argument_list|)
operator|<<
name|preset
operator|<<
name|cookie
operator|<<
literal|"http://www.foo.tld/something"
operator|<<
name|result
operator|<<
literal|true
expr_stmt|;
name|preset
operator|.
name|clear
argument_list|()
expr_stmt|;
name|preset
operator|+=
name|cookie
expr_stmt|;
name|cookie
operator|.
name|setPath
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"diff-path-order"
argument_list|)
operator|<<
name|preset
operator|<<
name|cookie
operator|<<
literal|"http://www.foo.tld"
operator|<<
name|result
operator|<<
literal|true
expr_stmt|;
name|preset
operator|.
name|clear
argument_list|()
expr_stmt|;
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QNetworkCookie
name|finalCookie
init|=
name|cookie
decl_stmt|;
name|cookie
operator|.
name|setDomain
argument_list|(
literal|"foo.tld"
argument_list|)
expr_stmt|;
name|finalCookie
operator|.
name|setDomain
argument_list|(
literal|".foo.tld"
argument_list|)
expr_stmt|;
name|result
operator|+=
name|finalCookie
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"should-add-dot-prefix"
argument_list|)
operator|<<
name|preset
operator|<<
name|cookie
operator|<<
literal|"http://www.foo.tld"
operator|<<
name|result
operator|<<
literal|true
expr_stmt|;
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cookie
operator|.
name|setDomain
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|finalCookie
operator|.
name|setDomain
argument_list|(
literal|"www.foo.tld"
argument_list|)
expr_stmt|;
name|result
operator|+=
name|finalCookie
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"should-set-default-domain"
argument_list|)
operator|<<
name|preset
operator|<<
name|cookie
operator|<<
literal|"http://www.foo.tld"
operator|<<
name|result
operator|<<
literal|true
expr_stmt|;
comment|// security test:
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
name|preset
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cookie
operator|.
name|setDomain
argument_list|(
literal|"something.completely.different"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"security-domain-1"
argument_list|)
operator|<<
name|preset
operator|<<
name|cookie
operator|<<
literal|"http://www.foo.tld"
operator|<<
name|result
operator|<<
literal|false
expr_stmt|;
comment|// we want the cookie to be accepted although the path does not match, see QTBUG-5815
name|cookie
operator|.
name|setDomain
argument_list|(
literal|".foo.tld"
argument_list|)
expr_stmt|;
name|cookie
operator|.
name|setPath
argument_list|(
literal|"/something"
argument_list|)
expr_stmt|;
name|result
operator|+=
name|cookie
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"security-path-1"
argument_list|)
operator|<<
name|preset
operator|<<
name|cookie
operator|<<
literal|"http://www.foo.tld"
operator|<<
name|result
operator|<<
literal|true
expr_stmt|;
comment|// check effective TLDs
comment|// 1. co.uk is an effective TLD, should be denied
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
name|preset
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cookie
operator|.
name|setPath
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|cookie
operator|.
name|setDomain
argument_list|(
literal|".co.uk"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"effective-tld1-denied"
argument_list|)
operator|<<
name|preset
operator|<<
name|cookie
operator|<<
literal|"http://something.co.uk"
operator|<<
name|result
operator|<<
literal|false
expr_stmt|;
name|cookie
operator|.
name|setDomain
argument_list|(
literal|"co.uk"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"effective-tld1-denied2"
argument_list|)
operator|<<
name|preset
operator|<<
name|cookie
operator|<<
literal|"http://something.co.uk"
operator|<<
name|result
operator|<<
literal|false
expr_stmt|;
name|cookie
operator|.
name|setDomain
argument_list|(
literal|".something.co.uk"
argument_list|)
expr_stmt|;
name|result
operator|+=
name|cookie
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"effective-tld1-accepted"
argument_list|)
operator|<<
name|preset
operator|<<
name|cookie
operator|<<
literal|"http://something.co.uk"
operator|<<
name|result
operator|<<
literal|true
expr_stmt|;
comment|// 2. anything .ar is an effective TLD ('*.ar'), but 'gobiernoelectronico.ar' is an exception
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
name|preset
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cookie
operator|.
name|setDomain
argument_list|(
literal|".farmacia.ar"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"effective-tld2-denied"
argument_list|)
operator|<<
name|preset
operator|<<
name|cookie
operator|<<
literal|"http://farmacia.ar"
operator|<<
name|result
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"effective-tld2-denied2"
argument_list|)
operator|<<
name|preset
operator|<<
name|cookie
operator|<<
literal|"http://www.farmacia.ar"
operator|<<
name|result
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"effective-tld2-denied3"
argument_list|)
operator|<<
name|preset
operator|<<
name|cookie
operator|<<
literal|"http://www.anything.farmacia.ar"
operator|<<
name|result
operator|<<
literal|false
expr_stmt|;
name|cookie
operator|.
name|setDomain
argument_list|(
literal|".gobiernoelectronico.ar"
argument_list|)
expr_stmt|;
name|result
operator|+=
name|cookie
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"effective-tld2-accepted"
argument_list|)
operator|<<
name|preset
operator|<<
name|cookie
operator|<<
literal|"http://www.gobiernoelectronico.ar"
operator|<<
name|result
operator|<<
literal|true
expr_stmt|;
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
name|preset
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cookie
operator|.
name|setDomain
argument_list|(
literal|"127.0.0.1"
argument_list|)
expr_stmt|;
name|result
operator|+=
name|cookie
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"IPv4-address-as-domain"
argument_list|)
operator|<<
name|preset
operator|<<
name|cookie
operator|<<
literal|"http://127.0.0.1/"
operator|<<
name|result
operator|<<
literal|true
expr_stmt|;
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
name|preset
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cookie
operator|.
name|setDomain
argument_list|(
literal|"fe80::250:56ff:fec0:1"
argument_list|)
expr_stmt|;
name|result
operator|+=
name|cookie
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"IPv6-address-as-domain"
argument_list|)
operator|<<
name|preset
operator|<<
name|cookie
operator|<<
literal|"http://[fe80::250:56ff:fec0:1]/"
operator|<<
name|result
operator|<<
literal|true
expr_stmt|;
comment|// setting the defaults:
name|finalCookie
operator|=
name|cookie
expr_stmt|;
name|finalCookie
operator|.
name|setPath
argument_list|(
literal|"/something/"
argument_list|)
expr_stmt|;
name|finalCookie
operator|.
name|setDomain
argument_list|(
literal|"www.foo.tld"
argument_list|)
expr_stmt|;
name|cookie
operator|.
name|setPath
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|cookie
operator|.
name|setDomain
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
name|result
operator|+=
name|finalCookie
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"defaults-1"
argument_list|)
operator|<<
name|preset
operator|<<
name|cookie
operator|<<
literal|"http://www.foo.tld/something/"
operator|<<
name|result
operator|<<
literal|true
expr_stmt|;
name|finalCookie
operator|.
name|setPath
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
name|result
operator|+=
name|finalCookie
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"defaults-2"
argument_list|)
operator|<<
name|preset
operator|<<
name|cookie
operator|<<
literal|"http://www.foo.tld"
operator|<<
name|result
operator|<<
literal|true
expr_stmt|;
comment|// security test: do not accept cookie domains like ".com" nor ".com." (see RFC 2109 section 4.3.2)
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
name|preset
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cookie
operator|.
name|setDomain
argument_list|(
literal|".com"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rfc2109-4.3.2-ex3"
argument_list|)
operator|<<
name|preset
operator|<<
name|cookie
operator|<<
literal|"http://x.foo.com"
operator|<<
name|result
operator|<<
literal|false
expr_stmt|;
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
name|preset
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cookie
operator|.
name|setDomain
argument_list|(
literal|".com."
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rfc2109-4.3.2-ex3-2"
argument_list|)
operator|<<
name|preset
operator|<<
name|cookie
operator|<<
literal|"http://x.foo.com"
operator|<<
name|result
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setCookiesFromUrl
name|void
name|tst_QNetworkCookieJar
operator|::
name|setCookiesFromUrl
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
argument_list|,
name|preset
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QNetworkCookie
argument_list|,
name|newCookie
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|referenceUrl
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
argument_list|,
name|expectedResult
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|setCookies
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
name|cookieList
decl_stmt|;
name|cookieList
operator|+=
name|newCookie
expr_stmt|;
name|MyCookieJar
name|jar
decl_stmt|;
name|jar
operator|.
name|setAllCookies
argument_list|(
name|preset
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|jar
operator|.
name|setCookiesFromUrl
argument_list|(
name|cookieList
argument_list|,
name|referenceUrl
argument_list|)
argument_list|,
name|setCookies
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
name|result
init|=
name|jar
operator|.
name|allCookies
argument_list|()
decl_stmt|;
foreach|foreach
control|(
name|QNetworkCookie
name|cookie
decl|,
name|expectedResult
control|)
block|{
name|QVERIFY2
argument_list|(
name|result
operator|.
name|contains
argument_list|(
name|cookie
argument_list|)
argument_list|,
name|cookie
operator|.
name|toRawForm
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|removeAll
argument_list|(
name|cookie
argument_list|)
expr_stmt|;
block|}
name|QVERIFY2
argument_list|(
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|QTest
operator|::
name|toString
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cookiesForUrl_data
name|void
name|tst_QNetworkCookieJar
operator|::
name|cookiesForUrl_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
argument_list|>
argument_list|(
literal|"allCookies"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"url"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
argument_list|>
argument_list|(
literal|"expectedResult"
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
name|allCookies
decl_stmt|;
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
name|result
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-cookies"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://foo.bar/"
operator|<<
name|result
expr_stmt|;
name|QNetworkCookie
name|cookie
decl_stmt|;
name|cookie
operator|.
name|setName
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|cookie
operator|.
name|setPath
argument_list|(
literal|"/web"
argument_list|)
expr_stmt|;
name|cookie
operator|.
name|setDomain
argument_list|(
literal|".qt-project.org"
argument_list|)
expr_stmt|;
name|allCookies
operator|+=
name|cookie
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-match-1"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://foo.bar/"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-match-2"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://foo.bar/web"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-match-3"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://foo.bar/web/wiki"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-match-4"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://qt-project.org"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-match-5"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://qt-project.org"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-match-6"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://qt-project.org/webinar"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-match-7"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://qt-project.org/webinar"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-match-8"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://qt-project.org./web"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-match-9"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://qt-project.org./web"
operator|<<
name|result
expr_stmt|;
name|result
operator|=
name|allCookies
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"match-1"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://qt-project.org/web"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"match-2"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://qt-project.org/web/"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"match-3"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://qt-project.org/web/content"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"match-4"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://qt-project.org/web"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"match-5"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://qt-project.org/web/"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"match-6"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://qt-project.org/web/content"
operator|<<
name|result
expr_stmt|;
name|cookie
operator|.
name|setPath
argument_list|(
literal|"/web/wiki"
argument_list|)
expr_stmt|;
name|allCookies
operator|+=
name|cookie
expr_stmt|;
comment|// exact same results as before:
name|QTest
operator|::
name|newRow
argument_list|(
literal|"one-match-1"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://qt-project.org/web"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"one-match-2"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://qt-project.org/web/"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"one-match-3"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://qt-project.org/web/content"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"one-match-4"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://qt-project.org/web"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"one-match-5"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://qt-project.org/web/"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"one-match-6"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://qt-project.org/web/content"
operator|<<
name|result
expr_stmt|;
name|result
operator|.
name|prepend
argument_list|(
name|cookie
argument_list|)
expr_stmt|;
comment|// longer path, it must match first
name|QTest
operator|::
name|newRow
argument_list|(
literal|"two-matches-1"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://qt-project.org/web/wiki"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"two-matches-2"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://qt-project.org/web/wiki"
operator|<<
name|result
expr_stmt|;
comment|// invert the order;
name|allCookies
operator|.
name|clear
argument_list|()
expr_stmt|;
name|allCookies
operator|<<
name|result
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|<<
name|result
operator|.
name|at
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"two-matches-3"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://qt-project.org/web/wiki"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"two-matches-4"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://qt-project.org/web/wiki"
operator|<<
name|result
expr_stmt|;
comment|// expired cookie
name|allCookies
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cookie
operator|.
name|setExpirationDate
argument_list|(
name|QDateTime
operator|::
name|fromString
argument_list|(
literal|"09-Nov-1999"
argument_list|,
literal|"dd-MMM-yyyy"
argument_list|)
argument_list|)
expr_stmt|;
name|allCookies
operator|+=
name|cookie
expr_stmt|;
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"exp-match-1"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://qt-project.org/web"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"exp-match-2"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://qt-project.org/web/"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"exp-match-3"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://qt-project.org/web/content"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"exp-match-4"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://qt-project.org/web"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"exp-match-5"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://qt-project.org/web/"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"exp-match-6"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://qt-project.org/web/content"
operator|<<
name|result
expr_stmt|;
comment|// path matching
name|allCookies
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QNetworkCookie
name|anotherCookie
decl_stmt|;
name|anotherCookie
operator|.
name|setName
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|anotherCookie
operator|.
name|setPath
argument_list|(
literal|"/web"
argument_list|)
expr_stmt|;
name|anotherCookie
operator|.
name|setDomain
argument_list|(
literal|".qt-project.org"
argument_list|)
expr_stmt|;
name|allCookies
operator|+=
name|anotherCookie
expr_stmt|;
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"path-unmatch-1"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://qt-project.org/"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"path-unmatch-2"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://qt-project.org/something/else"
operator|<<
name|result
expr_stmt|;
name|result
operator|+=
name|anotherCookie
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"path-match-1"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://qt-project.org/web"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"path-match-2"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://qt-project.org/web/"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"path-match-3"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://qt-project.org/web/content"
operator|<<
name|result
expr_stmt|;
comment|// secure cookies
name|allCookies
operator|.
name|clear
argument_list|()
expr_stmt|;
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QNetworkCookie
name|secureCookie
decl_stmt|;
name|secureCookie
operator|.
name|setName
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|secureCookie
operator|.
name|setPath
argument_list|(
literal|"/web"
argument_list|)
expr_stmt|;
name|secureCookie
operator|.
name|setDomain
argument_list|(
literal|".qt-project.org"
argument_list|)
expr_stmt|;
name|secureCookie
operator|.
name|setSecure
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|allCookies
operator|+=
name|secureCookie
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-match-secure-1"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://qt-project.org/web"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-match-secure-2"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://qt-project.org/web"
operator|<<
name|result
expr_stmt|;
name|result
operator|+=
name|secureCookie
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"match-secure-1"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"https://qt-project.org/web"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"match-secure-2"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"https://qt-project.org/web"
operator|<<
name|result
expr_stmt|;
comment|// domain ending in .
name|allCookies
operator|.
name|clear
argument_list|()
expr_stmt|;
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QNetworkCookie
name|cookieDot
decl_stmt|;
name|cookieDot
operator|.
name|setDomain
argument_list|(
literal|".example.com."
argument_list|)
expr_stmt|;
name|cookieDot
operator|.
name|setName
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|allCookies
operator|+=
name|cookieDot
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-match-domain-dot"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://example.com"
operator|<<
name|result
expr_stmt|;
name|result
operator|+=
name|cookieDot
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"match-domain-dot"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://example.com."
operator|<<
name|result
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cookiesForUrl
name|void
name|tst_QNetworkCookieJar
operator|::
name|cookiesForUrl
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
argument_list|,
name|allCookies
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
argument_list|,
name|expectedResult
argument_list|)
expr_stmt|;
name|MyCookieJar
name|jar
decl_stmt|;
name|jar
operator|.
name|setAllCookies
argument_list|(
name|allCookies
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
name|result
init|=
name|jar
operator|.
name|cookiesForUrl
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
name|expectedResult
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// This test requires private API.
end_comment
begin_ifdef
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
end_ifdef
begin_function
DECL|function|effectiveTLDs_data
name|void
name|tst_QNetworkCookieJar
operator|::
name|effectiveTLDs_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"domain"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"isTLD"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yes1"
argument_list|)
operator|<<
literal|"com"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yes2"
argument_list|)
operator|<<
literal|"de"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yes3"
argument_list|)
operator|<<
literal|"ulm.museum"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yes4"
argument_list|)
operator|<<
literal|"krodsherad.no"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yes5"
argument_list|)
operator|<<
literal|"1.bg"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yes6"
argument_list|)
operator|<<
literal|"com.cn"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yes7"
argument_list|)
operator|<<
literal|"org.ws"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yes8"
argument_list|)
operator|<<
literal|"co.uk"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yes9"
argument_list|)
operator|<<
literal|"wallonie.museum"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no1"
argument_list|)
operator|<<
literal|"anything.com"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no2"
argument_list|)
operator|<<
literal|"anything.de"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no3"
argument_list|)
operator|<<
literal|"eselsberg.ulm.museum"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no4"
argument_list|)
operator|<<
literal|"noe.krodsherad.no"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no5"
argument_list|)
operator|<<
literal|"2.1.bg"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no6"
argument_list|)
operator|<<
literal|"foo.com.cn"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no7"
argument_list|)
operator|<<
literal|"something.org.ws"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no8"
argument_list|)
operator|<<
literal|"teatime.co.uk"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no9"
argument_list|)
operator|<<
literal|"bla"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no10"
argument_list|)
operator|<<
literal|"bla.bla"
operator|<<
literal|false
expr_stmt|;
specifier|const
name|ushort
name|s1
index|[]
init|=
block|{
literal|0x74
block|,
literal|0x72
block|,
literal|0x61
block|,
literal|0x6e
block|,
literal|0xf8
block|,
literal|0x79
block|,
literal|0x2e
block|,
literal|0x6e
block|,
literal|0x6f
block|,
literal|0x00
block|}
decl_stmt|;
comment|// xn--trany-yua.no
specifier|const
name|ushort
name|s2
index|[]
init|=
block|{
literal|0x5d9
block|,
literal|0x5e8
block|,
literal|0x5d5
block|,
literal|0x5e9
block|,
literal|0x5dc
block|,
literal|0x5d9
block|,
literal|0x5dd
block|,
literal|0x2e
block|,
literal|0x6d
block|,
literal|0x75
block|,
literal|0x73
block|,
literal|0x65
block|,
literal|0x75
block|,
literal|0x6d
block|,
literal|0x00
block|}
decl_stmt|;
comment|// xn--9dbhblg6di.museum
specifier|const
name|ushort
name|s3
index|[]
init|=
block|{
literal|0x7ec4
block|,
literal|0x7e54
block|,
literal|0x2e
block|,
literal|0x68
block|,
literal|0x6b
block|,
literal|0x00
block|}
decl_stmt|;
comment|// xn--mk0axi.hk
specifier|const
name|ushort
name|s4
index|[]
init|=
block|{
literal|0x7f51
block|,
literal|0x7edc
block|,
literal|0x2e
block|,
literal|0x63
block|,
literal|0x6e
block|,
literal|0x00
block|}
decl_stmt|;
comment|// xn--io0a7i.cn
specifier|const
name|ushort
name|s5
index|[]
init|=
block|{
literal|0x72
block|,
literal|0xe1
block|,
literal|0x68
block|,
literal|0x6b
block|,
literal|0x6b
block|,
literal|0x65
block|,
literal|0x72
block|,
literal|0xe1
block|,
literal|0x76
block|,
literal|0x6a
block|,
literal|0x75
block|,
literal|0x2e
block|,
literal|0x6e
block|,
literal|0x6f
block|,
literal|0x00
block|}
decl_stmt|;
comment|// xn--rhkkervju-01af.no
specifier|const
name|ushort
name|s6
index|[]
init|=
block|{
literal|0xb9a
block|,
literal|0xbbf
block|,
literal|0xb99
block|,
literal|0xbcd
block|,
literal|0xb95
block|,
literal|0xbaa
block|,
literal|0xbcd
block|,
literal|0xbaa
block|,
literal|0xbc2
block|,
literal|0xbb0
block|,
literal|0xbcd
block|,
literal|0x00
block|}
decl_stmt|;
comment|// xn--clchc0ea0b2g2a9gcd
specifier|const
name|ushort
name|s7
index|[]
init|=
block|{
literal|0x627
block|,
literal|0x644
block|,
literal|0x627
block|,
literal|0x631
block|,
literal|0x62f
block|,
literal|0x646
block|,
literal|0x00
block|}
decl_stmt|;
comment|// xn--mgbayh7gpa
specifier|const
name|ushort
name|s8
index|[]
init|=
block|{
literal|0x63
block|,
literal|0x6f
block|,
literal|0x72
block|,
literal|0x72
block|,
literal|0x65
block|,
literal|0x69
block|,
literal|0x6f
block|,
literal|0x73
block|,
literal|0x2d
block|,
literal|0x65
block|,
literal|0x2d
block|,
literal|0x74
block|,
literal|0x65
block|,
literal|0x6c
block|,
literal|0x65
block|,
literal|0x63
block|,
literal|0x6f
block|,
literal|0x6d
block|,
literal|0x75
block|,
literal|0x6e
block|,
literal|0x69
block|,
literal|0x63
block|,
literal|0x61
block|,
literal|0xe7
block|,
literal|0xf5
block|,
literal|0x65
block|,
literal|0x73
block|,
literal|0x2e
block|,
literal|0x6d
block|,
literal|0x75
block|,
literal|0x73
block|,
literal|0x65
block|,
literal|0x75
block|,
literal|0x6d
block|,
literal|0x00
block|}
decl_stmt|;
comment|// xn--correios-e-telecomunicaes-ghc29a.museum
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yes-specialchars1"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|s1
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yes-specialchars2"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|s2
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yes-specialchars3"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|s3
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yes-specialchars4"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|s4
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yes-specialchars5"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|s5
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yes-specialchars6"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|s6
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yes-specialchars7"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|s7
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yes-specialchars8"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|s8
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-specialchars1"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|s1
argument_list|)
operator|.
name|prepend
argument_list|(
literal|"something"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-specialchars2"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|s2
argument_list|)
operator|.
name|prepend
argument_list|(
name|QString
operator|::
name|fromUtf16
argument_list|(
name|s2
argument_list|)
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-specialchars2.5"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|s2
argument_list|)
operator|.
name|prepend
argument_list|(
literal|"whatever"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-specialchars3"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|s3
argument_list|)
operator|.
name|prepend
argument_list|(
literal|"foo"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-specialchars4"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|s4
argument_list|)
operator|.
name|prepend
argument_list|(
literal|"bar"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-specialchars5"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|s5
argument_list|)
operator|.
name|prepend
argument_list|(
name|QString
operator|::
name|fromUtf16
argument_list|(
name|s2
argument_list|)
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-specialchars6"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|s6
argument_list|)
operator|.
name|prepend
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
operator|+
name|QString
operator|::
name|fromUtf16
argument_list|(
name|s6
argument_list|)
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-specialchars7"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|s7
argument_list|)
operator|.
name|prepend
argument_list|(
literal|"bla"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-specialchars8"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|s8
argument_list|)
operator|.
name|append
argument_list|(
literal|"foo"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"exception1"
argument_list|)
operator|<<
literal|"pref.iwate.jp"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"exception2"
argument_list|)
operator|<<
literal|"omanpost.om"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"exception3"
argument_list|)
operator|<<
literal|"omantel.om"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"exception4"
argument_list|)
operator|<<
literal|"gobiernoelectronico.ar"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"exception5"
argument_list|)
operator|<<
literal|"pref.ishikawa.jp"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yes-wildcard1"
argument_list|)
operator|<<
literal|"*.jm"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yes-wildcard1.5"
argument_list|)
operator|<<
literal|"anything.jm"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yes-wildcard2"
argument_list|)
operator|<<
literal|"something.kh"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yes-wildcard3"
argument_list|)
operator|<<
literal|"whatever.uk"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yes-wildcard4"
argument_list|)
operator|<<
literal|"anything.sendai.jp"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yes-wildcard5"
argument_list|)
operator|<<
literal|"foo.sch.uk"
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|effectiveTLDs
name|void
name|tst_QNetworkCookieJar
operator|::
name|effectiveTLDs
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|domain
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|isTLD
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qIsEffectiveTLD
argument_list|(
name|domain
argument_list|)
argument_list|,
name|isTLD
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|rfc6265_data
name|void
name|tst_QNetworkCookieJar
operator|::
name|rfc6265_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"received"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
argument_list|>
argument_list|(
literal|"sent"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"sentTo"
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
name|QFINDTESTDATA
argument_list|(
literal|"parser.json"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QFile
operator|::
name|ReadOnly
operator||
name|QFile
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
name|QJsonDocument
name|document
decl_stmt|;
name|document
operator|=
name|QJsonDocument
operator|::
name|fromJson
argument_list|(
name|file
operator|.
name|readAll
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|document
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|document
operator|.
name|isArray
argument_list|()
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QJsonValue
modifier|&
name|testCase
decl|,
name|document
operator|.
name|array
argument_list|()
control|)
block|{
name|QJsonObject
name|testObject
init|=
name|testCase
operator|.
name|toObject
argument_list|()
decl_stmt|;
comment|//"test" - the test case name
name|QString
name|testCaseName
init|=
name|testObject
operator|.
name|value
argument_list|(
literal|"test"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
if|if
condition|(
name|testCaseName
operator|.
name|toLower
argument_list|()
operator|.
name|startsWith
argument_list|(
literal|"disabled"
argument_list|)
condition|)
continue|continue;
comment|//"received" - the cookies received from the server
name|QJsonArray
name|received
init|=
name|testObject
operator|.
name|value
argument_list|(
literal|"received"
argument_list|)
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|QStringList
name|receivedList
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QJsonValue
modifier|&
name|receivedCookie
decl|,
name|received
control|)
name|receivedList
operator|.
name|append
argument_list|(
name|receivedCookie
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
comment|//"sent" - the cookies sent back to the server
name|QJsonArray
name|sent
init|=
name|testObject
operator|.
name|value
argument_list|(
literal|"sent"
argument_list|)
operator|.
name|toArray
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
name|sentList
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QJsonValue
modifier|&
name|sentCookie
decl|,
name|sent
control|)
block|{
name|QJsonObject
name|sentCookieObject
init|=
name|sentCookie
operator|.
name|toObject
argument_list|()
decl_stmt|;
name|QNetworkCookie
name|cookie
decl_stmt|;
name|cookie
operator|.
name|setName
argument_list|(
name|sentCookieObject
operator|.
name|value
argument_list|(
literal|"name"
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
name|cookie
operator|.
name|setValue
argument_list|(
name|sentCookieObject
operator|.
name|value
argument_list|(
literal|"value"
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|toUtf8
argument_list|()
argument_list|)
expr_stmt|;
name|sentList
operator|.
name|append
argument_list|(
name|cookie
argument_list|)
expr_stmt|;
block|}
comment|//"sent-to" - the relative url where cookies are sent
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|testCaseName
argument_list|)
argument_list|)
operator|<<
name|receivedList
operator|<<
name|sentList
operator|<<
name|testObject
operator|.
name|value
argument_list|(
literal|"sent-to"
argument_list|)
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|rfc6265
name|void
name|tst_QNetworkCookieJar
operator|::
name|rfc6265
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|received
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
argument_list|,
name|sent
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|sentTo
argument_list|)
expr_stmt|;
name|QUrl
name|receivedUrl
argument_list|(
literal|"http://home.example.org:8888/cookie-parser"
argument_list|)
decl_stmt|;
name|QUrl
name|sentUrl
argument_list|(
literal|"http://home.example.org:8888/cookie-parser-result"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|sentTo
operator|.
name|isEmpty
argument_list|()
condition|)
name|sentUrl
operator|=
name|receivedUrl
operator|.
name|resolved
argument_list|(
name|sentTo
argument_list|)
expr_stmt|;
name|QNetworkCookieJar
name|jar
decl_stmt|;
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
name|receivedCookies
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|cookieLine
decl|,
name|received
control|)
name|receivedCookies
operator|.
name|append
argument_list|(
name|QNetworkCookie
operator|::
name|parseCookies
argument_list|(
name|cookieLine
operator|.
name|toUtf8
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|jar
operator|.
name|setCookiesFromUrl
argument_list|(
name|receivedCookies
argument_list|,
name|receivedUrl
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
name|cookiesToSend
init|=
name|jar
operator|.
name|cookiesForUrl
argument_list|(
name|sentUrl
argument_list|)
decl_stmt|;
comment|//compare cookies only using name/value, as the metadata isn't sent over the network
name|QCOMPARE
argument_list|(
name|cookiesToSend
operator|.
name|count
argument_list|()
argument_list|,
name|sent
operator|.
name|count
argument_list|()
argument_list|)
expr_stmt|;
name|bool
name|ok
init|=
literal|true
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|cookiesToSend
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
if|if
condition|(
name|cookiesToSend
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|name
argument_list|()
operator|!=
name|sent
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|name
argument_list|()
condition|)
block|{
name|ok
operator|=
literal|false
expr_stmt|;
break|break;
block|}
if|if
condition|(
name|cookiesToSend
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|value
argument_list|()
operator|!=
name|sent
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|value
argument_list|()
condition|)
block|{
name|ok
operator|=
literal|false
expr_stmt|;
break|break;
block|}
block|}
if|if
condition|(
operator|!
name|ok
condition|)
block|{
name|QNetworkRequest
name|r
argument_list|(
name|sentUrl
argument_list|)
decl_stmt|;
name|r
operator|.
name|setHeader
argument_list|(
name|QNetworkRequest
operator|::
name|CookieHeader
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|cookiesToSend
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|actual
init|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|r
operator|.
name|rawHeader
argument_list|(
literal|"Cookie"
argument_list|)
argument_list|)
decl_stmt|;
name|r
operator|.
name|setHeader
argument_list|(
name|QNetworkRequest
operator|::
name|CookieHeader
argument_list|,
name|QVariant
operator|::
name|fromValue
argument_list|(
name|sent
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|expected
init|=
name|QString
operator|::
name|fromUtf8
argument_list|(
name|r
operator|.
name|rawHeader
argument_list|(
literal|"Cookie"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|ok
argument_list|,
name|qPrintable
argument_list|(
name|QString
argument_list|(
literal|"Expected: %1\nActual: %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|expected
argument_list|)
operator|.
name|arg
argument_list|(
name|actual
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QNetworkCookieJar
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qnetworkcookiejar.moc"
end_include
end_unit
