begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|"private/qhttpnetworkconnection_p.h"
end_include
begin_class
DECL|class|tst_QHttpNetworkReply
class|class
name|tst_QHttpNetworkReply
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|Q_SLOTS
private|:
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
name|void
name|parseHeader_data
parameter_list|()
function_decl|;
name|void
name|parseHeader
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|initTestCase
name|void
name|tst_QHttpNetworkReply
operator|::
name|initTestCase
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_QHttpNetworkReply
operator|::
name|cleanupTestCase
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|init
name|void
name|tst_QHttpNetworkReply
operator|::
name|init
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QHttpNetworkReply
operator|::
name|cleanup
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|parseHeader_data
name|void
name|tst_QHttpNetworkReply
operator|::
name|parseHeader_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"headers"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"fields"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"values"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty-field"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Set-Cookie: \r\n"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"Set-Cookie"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|""
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"single-field"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Content-Type: text/html; charset=utf-8\r\n"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"Content-Type"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"text/html; charset=utf-8"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"single-field-continued"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Content-Type: text/html;\r\n"
literal|" charset=utf-8\r\n"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"Content-Type"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"text/html; charset=utf-8"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"multi-field"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Content-Type: text/html; charset=utf-8\r\n"
literal|"Content-Length: 1024\r\n"
literal|"Content-Encoding: gzip\r\n"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"Content-Type"
operator|<<
literal|"Content-Length"
operator|<<
literal|"Content-Encoding"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"text/html; charset=utf-8"
operator|<<
literal|"1024"
operator|<<
literal|"gzip"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"multi-field-with-emtpy"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Content-Type: text/html; charset=utf-8\r\n"
literal|"Content-Length: 1024\r\n"
literal|"Set-Cookie: \r\n"
literal|"Content-Encoding: gzip\r\n"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"Content-Type"
operator|<<
literal|"Content-Length"
operator|<<
literal|"Set-Cookie"
operator|<<
literal|"Content-Encoding"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"text/html; charset=utf-8"
operator|<<
literal|"1024"
operator|<<
literal|""
operator|<<
literal|"gzip"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"lws-field"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Content-Type: text/html; charset=utf-8\r\n"
literal|"Content-Length:\r\n 1024\r\n"
literal|"Content-Encoding: gzip\r\n"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"Content-Type"
operator|<<
literal|"Content-Length"
operator|<<
literal|"Content-Encoding"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"text/html; charset=utf-8"
operator|<<
literal|"1024"
operator|<<
literal|"gzip"
operator|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"duplicated-field"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Vary: Accept-Language\r\n"
literal|"Vary: Cookie\r\n"
literal|"Vary: User-Agent\r\n"
argument_list|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"Vary"
operator|)
operator|<<
operator|(
name|QStringList
argument_list|()
operator|<<
literal|"Accept-Language, Cookie, User-Agent"
operator|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|parseHeader
name|void
name|tst_QHttpNetworkReply
operator|::
name|parseHeader
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|headers
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|fields
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|values
argument_list|)
expr_stmt|;
name|QHttpNetworkReply
name|reply
decl_stmt|;
name|reply
operator|.
name|parseHeader
argument_list|(
name|headers
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|fields
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
comment|//qDebug()<< "field"<< fields.at(i)<< "value"<< reply.headerField(fields.at(i))<< "expected"<< values.at(i);
name|QString
name|field
init|=
name|reply
operator|.
name|headerField
argument_list|(
name|fields
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|field
argument_list|,
name|values
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QHttpNetworkReply
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qhttpnetworkreply.moc"
end_include
end_unit
