begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 BlackBerry Limited. All rights reserved. ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/QNetworkAccessManager>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/QNetworkReply>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/QHttpPart>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/QHttpMultiPart>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/QNetworkProxy>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/QAuthenticator>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|QT_BUILD_INTERNAL
end_ifdef
begin_include
include|#
directive|include
file|<QtNetwork/private/qsslsocket_openssl_p.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_BUILD_INTERNAL
end_comment
begin_include
include|#
directive|include
file|"../../../network-settings.h"
end_include
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QAuthenticator*
argument_list|)
end_macro
begin_class
DECL|class|tst_Spdy
class|class
name|tst_Spdy
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_Spdy
parameter_list|()
constructor_decl|;
name|~
name|tst_Spdy
parameter_list|()
destructor_decl|;
private|private
name|Q_SLOTS
private|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|settingsAndNegotiation_data
parameter_list|()
function_decl|;
name|void
name|settingsAndNegotiation
parameter_list|()
function_decl|;
name|void
name|download_data
parameter_list|()
function_decl|;
name|void
name|download
parameter_list|()
function_decl|;
name|void
name|headerFields
parameter_list|()
function_decl|;
name|void
name|upload_data
parameter_list|()
function_decl|;
name|void
name|upload
parameter_list|()
function_decl|;
name|void
name|errors_data
parameter_list|()
function_decl|;
name|void
name|errors
parameter_list|()
function_decl|;
name|void
name|multipleRequests_data
parameter_list|()
function_decl|;
name|void
name|multipleRequests
parameter_list|()
function_decl|;
private|private:
DECL|member|m_manager
name|QNetworkAccessManager
name|m_manager
decl_stmt|;
DECL|member|m_multipleRequestsCount
name|int
name|m_multipleRequestsCount
decl_stmt|;
DECL|member|m_multipleRepliesFinishedCount
name|int
name|m_multipleRepliesFinishedCount
decl_stmt|;
protected|protected
name|Q_SLOTS
protected|:
name|void
name|proxyAuthenticationRequired
parameter_list|(
specifier|const
name|QNetworkProxy
modifier|&
parameter_list|,
name|QAuthenticator
modifier|*
name|authenticator
parameter_list|)
function_decl|;
name|void
name|multipleRequestsFinishedSlot
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_constructor
DECL|function|tst_Spdy
name|tst_Spdy
operator|::
name|tst_Spdy
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|QT_BUILD_INTERNAL
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_SSL
argument_list|)
operator|&&
name|OPENSSL_VERSION_NUMBER
operator|>=
literal|0x1000100fL
operator|&&
operator|!
name|defined
argument_list|(
name|OPENSSL_NO_TLSEXT
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|OPENSSL_NO_NEXTPROTONEG
argument_list|)
name|qRegisterMetaType
argument_list|<
name|QNetworkReply
operator|*
argument_list|>
argument_list|()
expr_stmt|;
comment|// for QSignalSpy
name|qRegisterMetaType
argument_list|<
name|QAuthenticator
operator|*
argument_list|>
argument_list|()
expr_stmt|;
name|connect
argument_list|(
operator|&
name|m_manager
argument_list|,
name|SIGNAL
argument_list|(
name|proxyAuthenticationRequired
argument_list|(
specifier|const
name|QNetworkProxy
operator|&
argument_list|,
name|QAuthenticator
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|proxyAuthenticationRequired
argument_list|(
specifier|const
name|QNetworkProxy
operator|&
argument_list|,
name|QAuthenticator
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
else|#
directive|else
name|QSKIP
argument_list|(
literal|"Qt built withouth OpenSSL, or the OpenSSL version is too old"
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// defined(QT_BUILD_INTERNAL)&& !defined(QT_NO_SSL) ...
block|}
end_constructor
begin_destructor
DECL|function|~tst_Spdy
name|tst_Spdy
operator|::
name|~
name|tst_Spdy
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|initTestCase
name|void
name|tst_Spdy
operator|::
name|initTestCase
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QtNetworkSettings
operator|::
name|verifyTestNetworkSettings
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|settingsAndNegotiation_data
name|void
name|tst_Spdy
operator|::
name|settingsAndNegotiation_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QUrl
argument_list|>
argument_list|(
literal|"url"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"setAttribute"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"enabled"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"expectedProtocol"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"expectedContent"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"default-settings"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"https://"
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|+
literal|"/qtest/cgi-bin/echo.cgi?1"
argument_list|)
operator|<<
literal|false
operator|<<
literal|false
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QByteArray
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http-url"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"http://"
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|+
literal|"/qtest/cgi-bin/echo.cgi?1"
argument_list|)
operator|<<
literal|true
operator|<<
literal|true
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QByteArray
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"spdy-disabled"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"https://"
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|+
literal|"/qtest/cgi-bin/echo.cgi?1"
argument_list|)
operator|<<
literal|true
operator|<<
literal|false
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QByteArray
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_OPENSSL
name|QTest
operator|::
name|newRow
argument_list|(
literal|"spdy-enabled"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"https://"
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|+
literal|"/qtest/cgi-bin/echo.cgi?1"
argument_list|)
operator|<<
literal|true
operator|<<
literal|true
operator|<<
name|QByteArray
argument_list|(
name|QSslConfiguration
operator|::
name|NextProtocolSpdy3_0
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"1"
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_OPENSSL
block|}
end_function
begin_function
DECL|function|settingsAndNegotiation
name|void
name|tst_Spdy
operator|::
name|settingsAndNegotiation
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QUrl
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|setAttribute
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|enabled
argument_list|)
expr_stmt|;
name|QNetworkRequest
name|request
argument_list|(
name|url
argument_list|)
decl_stmt|;
if|if
condition|(
name|setAttribute
condition|)
block|{
name|request
operator|.
name|setAttribute
argument_list|(
name|QNetworkRequest
operator|::
name|SpdyAllowedAttribute
argument_list|,
name|QVariant
argument_list|(
name|enabled
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QNetworkReply
modifier|*
name|reply
init|=
name|m_manager
operator|.
name|get
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|reply
operator|->
name|ignoreSslErrors
argument_list|()
expr_stmt|;
name|QSignalSpy
name|metaDataChangedSpy
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|metaDataChanged
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|readyReadSpy
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|finishedSpy
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QSignalSpy
name|finishedManagerSpy
argument_list|(
operator|&
name|m_manager
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|(
name|QNetworkReply
operator|*
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|15
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|expectedProtocol
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_OPENSSL
name|bool
name|expectedSpdyUsed
init|=
operator|(
name|expectedProtocol
operator|==
name|QSslConfiguration
operator|::
name|NextProtocolSpdy3_0
operator|)
condition|?
literal|true
else|:
literal|false
decl_stmt|;
name|QCOMPARE
argument_list|(
name|reply
operator|->
name|attribute
argument_list|(
name|QNetworkRequest
operator|::
name|SpdyWasUsedAttribute
argument_list|)
operator|.
name|toBool
argument_list|()
argument_list|,
name|expectedSpdyUsed
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_OPENSSL
name|QCOMPARE
argument_list|(
name|metaDataChangedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|finishedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|int
name|statusCode
init|=
name|reply
operator|->
name|attribute
argument_list|(
name|QNetworkRequest
operator|::
name|HttpStatusCodeAttribute
argument_list|)
operator|.
name|toInt
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|statusCode
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|QByteArray
name|content
init|=
name|reply
operator|->
name|readAll
argument_list|()
decl_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|expectedContent
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|expectedContent
argument_list|,
name|content
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_OPENSSL
name|QSslConfiguration
operator|::
name|NextProtocolNegotiationStatus
name|expectedStatus
init|=
operator|(
name|expectedProtocol
operator|.
name|isEmpty
argument_list|()
operator|)
condition|?
name|QSslConfiguration
operator|::
name|NextProtocolNegotiationNone
else|:
name|QSslConfiguration
operator|::
name|NextProtocolNegotiationNegotiated
decl_stmt|;
name|QCOMPARE
argument_list|(
name|reply
operator|->
name|sslConfiguration
argument_list|()
operator|.
name|nextProtocolNegotiationStatus
argument_list|()
argument_list|,
name|expectedStatus
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reply
operator|->
name|sslConfiguration
argument_list|()
operator|.
name|nextNegotiatedProtocol
argument_list|()
argument_list|,
name|expectedProtocol
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_OPENSSL
block|}
end_function
begin_function
DECL|function|proxyAuthenticationRequired
name|void
name|tst_Spdy
operator|::
name|proxyAuthenticationRequired
parameter_list|(
specifier|const
name|QNetworkProxy
modifier|&
comment|/*proxy*/
parameter_list|,
name|QAuthenticator
modifier|*
name|authenticator
parameter_list|)
block|{
name|authenticator
operator|->
name|setUser
argument_list|(
literal|"qsockstest"
argument_list|)
expr_stmt|;
name|authenticator
operator|->
name|setPassword
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|download_data
name|void
name|tst_Spdy
operator|::
name|download_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QUrl
argument_list|>
argument_list|(
literal|"url"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"fileName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QNetworkProxy
argument_list|>
argument_list|(
literal|"proxy"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mediumfile"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"https://"
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|+
literal|"/qtest/rfc3252.txt"
argument_list|)
operator|<<
name|QFINDTESTDATA
argument_list|(
literal|"../qnetworkreply/rfc3252.txt"
argument_list|)
operator|<<
name|QNetworkProxy
argument_list|()
expr_stmt|;
name|QHostInfo
name|hostInfo
init|=
name|QHostInfo
operator|::
name|fromName
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|)
decl_stmt|;
name|QString
name|proxyserver
init|=
name|hostInfo
operator|.
name|addresses
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mediumfile-http-proxy"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"https://"
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|+
literal|"/qtest/rfc3252.txt"
argument_list|)
operator|<<
name|QFINDTESTDATA
argument_list|(
literal|"../qnetworkreply/rfc3252.txt"
argument_list|)
operator|<<
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|HttpProxy
argument_list|,
name|proxyserver
argument_list|,
literal|3128
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mediumfile-http-proxy-auth"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"https://"
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|+
literal|"/qtest/rfc3252.txt"
argument_list|)
operator|<<
name|QFINDTESTDATA
argument_list|(
literal|"../qnetworkreply/rfc3252.txt"
argument_list|)
operator|<<
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|HttpProxy
argument_list|,
name|proxyserver
argument_list|,
literal|3129
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mediumfile-socks-proxy"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"https://"
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|+
literal|"/qtest/rfc3252.txt"
argument_list|)
operator|<<
name|QFINDTESTDATA
argument_list|(
literal|"../qnetworkreply/rfc3252.txt"
argument_list|)
operator|<<
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|Socks5Proxy
argument_list|,
name|proxyserver
argument_list|,
literal|1080
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mediumfile-socks-proxy-auth"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"https://"
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|+
literal|"/qtest/rfc3252.txt"
argument_list|)
operator|<<
name|QFINDTESTDATA
argument_list|(
literal|"../qnetworkreply/rfc3252.txt"
argument_list|)
operator|<<
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|Socks5Proxy
argument_list|,
name|proxyserver
argument_list|,
literal|1081
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bigfile"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"https://"
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|+
literal|"/qtest/bigfile"
argument_list|)
operator|<<
name|QFINDTESTDATA
argument_list|(
literal|"../qnetworkreply/bigfile"
argument_list|)
operator|<<
name|QNetworkProxy
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|download
name|void
name|tst_Spdy
operator|::
name|download
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QUrl
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|fileName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QNetworkProxy
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
name|QNetworkRequest
name|request
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|QNetworkRequest
operator|::
name|SpdyAllowedAttribute
argument_list|,
literal|true
argument_list|)
expr_stmt|;
if|if
condition|(
name|proxy
operator|.
name|type
argument_list|()
operator|!=
name|QNetworkProxy
operator|::
name|DefaultProxy
condition|)
block|{
name|m_manager
operator|.
name|setProxy
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
block|}
name|QNetworkReply
modifier|*
name|reply
init|=
name|m_manager
operator|.
name|get
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|reply
operator|->
name|ignoreSslErrors
argument_list|()
expr_stmt|;
name|QSignalSpy
name|metaDataChangedSpy
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|metaDataChanged
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|downloadProgressSpy
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|downloadProgress
argument_list|(
name|qint64
argument_list|,
name|qint64
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|readyReadSpy
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|finishedSpy
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QSignalSpy
name|finishedManagerSpy
argument_list|(
operator|&
name|m_manager
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|(
name|QNetworkReply
operator|*
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|proxyAuthRequiredSpy
argument_list|(
operator|&
name|m_manager
argument_list|,
name|SIGNAL
argument_list|(
name|proxyAuthenticationRequired
argument_list|(
specifier|const
name|QNetworkProxy
operator|&
argument_list|,
name|QAuthenticator
operator|*
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|15
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|finishedManagerSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|metaDataChangedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|finishedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|downloadProgressSpy
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|readyReadSpy
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proxyAuthRequiredSpy
operator|.
name|count
argument_list|()
operator|<=
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reply
operator|->
name|error
argument_list|()
argument_list|,
name|QNetworkReply
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reply
operator|->
name|attribute
argument_list|(
name|QNetworkRequest
operator|::
name|SpdyWasUsedAttribute
argument_list|)
operator|.
name|toBool
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reply
operator|->
name|attribute
argument_list|(
name|QNetworkRequest
operator|::
name|ConnectionEncryptedAttribute
argument_list|)
operator|.
name|toBool
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reply
operator|->
name|attribute
argument_list|(
name|QNetworkRequest
operator|::
name|HttpStatusCodeAttribute
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
name|fileName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|qint64
name|contentLength
init|=
name|reply
operator|->
name|header
argument_list|(
name|QNetworkRequest
operator|::
name|ContentLengthHeader
argument_list|)
operator|.
name|toLongLong
argument_list|()
decl_stmt|;
name|qint64
name|expectedContentLength
init|=
name|file
operator|.
name|bytesAvailable
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|contentLength
argument_list|,
name|expectedContentLength
argument_list|)
expr_stmt|;
name|QByteArray
name|expectedContent
init|=
name|file
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|QByteArray
name|content
init|=
name|reply
operator|->
name|readAll
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|content
argument_list|,
name|expectedContent
argument_list|)
expr_stmt|;
name|reply
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
name|m_manager
operator|.
name|setProxy
argument_list|(
name|QNetworkProxy
argument_list|()
argument_list|)
expr_stmt|;
comment|// reset
block|}
end_function
begin_function
DECL|function|headerFields
name|void
name|tst_Spdy
operator|::
name|headerFields
parameter_list|()
block|{
name|QUrl
name|url
argument_list|(
name|QUrl
argument_list|(
literal|"https://"
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QNetworkRequest
name|request
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|QNetworkRequest
operator|::
name|SpdyAllowedAttribute
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QNetworkReply
modifier|*
name|reply
init|=
name|m_manager
operator|.
name|get
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|reply
operator|->
name|ignoreSslErrors
argument_list|()
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|15
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reply
operator|->
name|rawHeader
argument_list|(
literal|"Content-Type"
argument_list|)
argument_list|,
name|QByteArray
argument_list|(
literal|"text/html"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|reply
operator|->
name|rawHeader
argument_list|(
literal|"Content-Length"
argument_list|)
operator|.
name|toInt
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|reply
operator|->
name|rawHeader
argument_list|(
literal|"server"
argument_list|)
operator|.
name|contains
argument_list|(
literal|"Apache"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reply
operator|->
name|header
argument_list|(
name|QNetworkRequest
operator|::
name|ContentTypeHeader
argument_list|)
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"text/html"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|reply
operator|->
name|header
argument_list|(
name|QNetworkRequest
operator|::
name|ContentLengthHeader
argument_list|)
operator|.
name|toLongLong
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|reply
operator|->
name|header
argument_list|(
name|QNetworkRequest
operator|::
name|LastModifiedHeader
argument_list|)
operator|.
name|toDateTime
argument_list|()
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|reply
operator|->
name|header
argument_list|(
name|QNetworkRequest
operator|::
name|ServerHeader
argument_list|)
operator|.
name|toByteArray
argument_list|()
operator|.
name|contains
argument_list|(
literal|"Apache"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|md5sum
specifier|static
specifier|inline
name|QByteArray
name|md5sum
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|data
parameter_list|)
block|{
return|return
name|QCryptographicHash
operator|::
name|hash
argument_list|(
name|data
argument_list|,
name|QCryptographicHash
operator|::
name|Md5
argument_list|)
operator|.
name|toHex
argument_list|()
operator|.
name|append
argument_list|(
literal|'\n'
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|upload_data
name|void
name|tst_Spdy
operator|::
name|upload_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QUrl
argument_list|>
argument_list|(
literal|"url"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"data"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"uploadMethod"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QObject
operator|*
argument_list|>
argument_list|(
literal|"uploadObject"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"md5sum"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QNetworkProxy
argument_list|>
argument_list|(
literal|"proxy"
argument_list|)
expr_stmt|;
comment|// 1. test uploading of byte arrays
name|QUrl
name|md5Url
argument_list|(
literal|"https://"
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|+
literal|"/qtest/cgi-bin/md5sum.cgi"
argument_list|)
decl_stmt|;
name|QByteArray
name|data
decl_stmt|;
name|data
operator|=
literal|""
expr_stmt|;
name|QObject
modifier|*
name|dummyObject
init|=
literal|0
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|md5Url
operator|<<
name|data
operator|<<
name|QByteArray
argument_list|(
literal|"POST"
argument_list|)
operator|<<
name|dummyObject
operator|<<
name|md5sum
argument_list|(
name|data
argument_list|)
operator|<<
name|QNetworkProxy
argument_list|()
expr_stmt|;
name|data
operator|=
literal|"This is a normal message."
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"generic"
argument_list|)
operator|<<
name|md5Url
operator|<<
name|data
operator|<<
name|QByteArray
argument_list|(
literal|"POST"
argument_list|)
operator|<<
name|dummyObject
operator|<<
name|md5sum
argument_list|(
name|data
argument_list|)
operator|<<
name|QNetworkProxy
argument_list|()
expr_stmt|;
name|data
operator|=
literal|"This is a message to show that Qt rocks!\r\n\n"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"small"
argument_list|)
operator|<<
name|md5Url
operator|<<
name|data
operator|<<
name|QByteArray
argument_list|(
literal|"POST"
argument_list|)
operator|<<
name|dummyObject
operator|<<
name|md5sum
argument_list|(
name|data
argument_list|)
operator|<<
name|QNetworkProxy
argument_list|()
expr_stmt|;
name|data
operator|=
name|QByteArray
argument_list|(
literal|"abcd\0\1\2\abcd"
argument_list|,
literal|12
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"with-nul"
argument_list|)
operator|<<
name|md5Url
operator|<<
name|data
operator|<<
name|QByteArray
argument_list|(
literal|"POST"
argument_list|)
operator|<<
name|dummyObject
operator|<<
name|md5sum
argument_list|(
name|data
argument_list|)
operator|<<
name|QNetworkProxy
argument_list|()
expr_stmt|;
name|data
operator|=
name|QByteArray
argument_list|(
literal|4097
argument_list|,
literal|'\4'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4k+1"
argument_list|)
operator|<<
name|md5Url
operator|<<
name|data
operator|<<
name|QByteArray
argument_list|(
literal|"POST"
argument_list|)
operator|<<
name|dummyObject
operator|<<
name|md5sum
argument_list|(
name|data
argument_list|)
operator|<<
name|QNetworkProxy
argument_list|()
expr_stmt|;
name|QHostInfo
name|hostInfo
init|=
name|QHostInfo
operator|::
name|fromName
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|)
decl_stmt|;
name|QString
name|proxyserver
init|=
name|hostInfo
operator|.
name|addresses
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4k+1-with-http-proxy"
argument_list|)
operator|<<
name|md5Url
operator|<<
name|data
operator|<<
name|QByteArray
argument_list|(
literal|"POST"
argument_list|)
operator|<<
name|dummyObject
operator|<<
name|md5sum
argument_list|(
name|data
argument_list|)
operator|<<
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|HttpProxy
argument_list|,
name|proxyserver
argument_list|,
literal|3128
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4k+1-with-http-proxy-auth"
argument_list|)
operator|<<
name|md5Url
operator|<<
name|data
operator|<<
name|QByteArray
argument_list|(
literal|"POST"
argument_list|)
operator|<<
name|dummyObject
operator|<<
name|md5sum
argument_list|(
name|data
argument_list|)
operator|<<
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|HttpProxy
argument_list|,
name|proxyserver
argument_list|,
literal|3129
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4k+1-with-socks-proxy"
argument_list|)
operator|<<
name|md5Url
operator|<<
name|data
operator|<<
name|QByteArray
argument_list|(
literal|"POST"
argument_list|)
operator|<<
name|dummyObject
operator|<<
name|md5sum
argument_list|(
name|data
argument_list|)
operator|<<
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|Socks5Proxy
argument_list|,
name|proxyserver
argument_list|,
literal|1080
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"4k+1-with-socks-proxy-auth"
argument_list|)
operator|<<
name|md5Url
operator|<<
name|data
operator|<<
name|QByteArray
argument_list|(
literal|"POST"
argument_list|)
operator|<<
name|dummyObject
operator|<<
name|md5sum
argument_list|(
name|data
argument_list|)
operator|<<
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|Socks5Proxy
argument_list|,
name|proxyserver
argument_list|,
literal|1081
argument_list|)
expr_stmt|;
name|data
operator|=
name|QByteArray
argument_list|(
literal|128
operator|*
literal|1024
operator|+
literal|1
argument_list|,
literal|'\177'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"128k+1"
argument_list|)
operator|<<
name|md5Url
operator|<<
name|data
operator|<<
name|QByteArray
argument_list|(
literal|"POST"
argument_list|)
operator|<<
name|dummyObject
operator|<<
name|md5sum
argument_list|(
name|data
argument_list|)
operator|<<
name|QNetworkProxy
argument_list|()
expr_stmt|;
name|data
operator|=
name|QByteArray
argument_list|(
literal|128
operator|*
literal|1024
operator|+
literal|1
argument_list|,
literal|'\177'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"128k+1-put"
argument_list|)
operator|<<
name|md5Url
operator|<<
name|data
operator|<<
name|QByteArray
argument_list|(
literal|"PUT"
argument_list|)
operator|<<
name|dummyObject
operator|<<
name|md5sum
argument_list|(
name|data
argument_list|)
operator|<<
name|QNetworkProxy
argument_list|()
expr_stmt|;
name|data
operator|=
name|QByteArray
argument_list|(
literal|2
operator|*
literal|1024
operator|*
literal|1024
operator|+
literal|1
argument_list|,
literal|'\177'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2MB+1"
argument_list|)
operator|<<
name|md5Url
operator|<<
name|data
operator|<<
name|QByteArray
argument_list|(
literal|"POST"
argument_list|)
operator|<<
name|dummyObject
operator|<<
name|md5sum
argument_list|(
name|data
argument_list|)
operator|<<
name|QNetworkProxy
argument_list|()
expr_stmt|;
comment|// 2. test uploading of files
name|QFile
modifier|*
name|file
init|=
operator|new
name|QFile
argument_list|(
name|QFINDTESTDATA
argument_list|(
literal|"../qnetworkreply/rfc3252.txt"
argument_list|)
argument_list|)
decl_stmt|;
name|file
operator|->
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"file-26K"
argument_list|)
operator|<<
name|md5Url
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QByteArray
argument_list|(
literal|"POST"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|QObject
operator|*
argument_list|>
argument_list|(
name|file
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"b3e32ac459b99d3f59318f3ac31e4bee\n"
argument_list|)
operator|<<
name|QNetworkProxy
argument_list|()
expr_stmt|;
name|QFile
modifier|*
name|file2
init|=
operator|new
name|QFile
argument_list|(
name|QFINDTESTDATA
argument_list|(
literal|"../qnetworkreply/image1.jpg"
argument_list|)
argument_list|)
decl_stmt|;
name|file2
operator|->
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"file-1MB"
argument_list|)
operator|<<
name|md5Url
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QByteArray
argument_list|(
literal|"POST"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|QObject
operator|*
argument_list|>
argument_list|(
name|file2
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"87ef3bb319b004ba9e5e9c9fa713776e\n"
argument_list|)
operator|<<
name|QNetworkProxy
argument_list|()
expr_stmt|;
comment|// 3. test uploading of multipart
name|QUrl
name|multiPartUrl
argument_list|(
literal|"https://"
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|+
literal|"/qtest/cgi-bin/multipart.cgi"
argument_list|)
decl_stmt|;
name|QHttpPart
name|imagePart31
decl_stmt|;
name|imagePart31
operator|.
name|setHeader
argument_list|(
name|QNetworkRequest
operator|::
name|ContentTypeHeader
argument_list|,
name|QVariant
argument_list|(
literal|"image/jpeg"
argument_list|)
argument_list|)
expr_stmt|;
name|imagePart31
operator|.
name|setHeader
argument_list|(
name|QNetworkRequest
operator|::
name|ContentDispositionHeader
argument_list|,
name|QVariant
argument_list|(
literal|"form-data; name=\"testImage1\""
argument_list|)
argument_list|)
expr_stmt|;
name|imagePart31
operator|.
name|setRawHeader
argument_list|(
literal|"Content-Location"
argument_list|,
literal|"http://my.test.location.tld"
argument_list|)
expr_stmt|;
name|imagePart31
operator|.
name|setRawHeader
argument_list|(
literal|"Content-ID"
argument_list|,
literal|"my@id.tld"
argument_list|)
expr_stmt|;
name|QFile
modifier|*
name|file31
init|=
operator|new
name|QFile
argument_list|(
name|QFINDTESTDATA
argument_list|(
literal|"../qnetworkreply/image1.jpg"
argument_list|)
argument_list|)
decl_stmt|;
name|file31
operator|->
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|imagePart31
operator|.
name|setBodyDevice
argument_list|(
name|file31
argument_list|)
expr_stmt|;
name|QHttpMultiPart
modifier|*
name|imageMultiPart3
init|=
operator|new
name|QHttpMultiPart
argument_list|(
name|QHttpMultiPart
operator|::
name|FormDataType
argument_list|)
decl_stmt|;
name|imageMultiPart3
operator|->
name|append
argument_list|(
name|imagePart31
argument_list|)
expr_stmt|;
name|file31
operator|->
name|setParent
argument_list|(
name|imageMultiPart3
argument_list|)
expr_stmt|;
name|QHttpPart
name|imagePart32
decl_stmt|;
name|imagePart32
operator|.
name|setHeader
argument_list|(
name|QNetworkRequest
operator|::
name|ContentTypeHeader
argument_list|,
name|QVariant
argument_list|(
literal|"image/jpeg"
argument_list|)
argument_list|)
expr_stmt|;
name|imagePart32
operator|.
name|setHeader
argument_list|(
name|QNetworkRequest
operator|::
name|ContentDispositionHeader
argument_list|,
name|QVariant
argument_list|(
literal|"form-data; name=\"testImage2\""
argument_list|)
argument_list|)
expr_stmt|;
name|QFile
modifier|*
name|file32
init|=
operator|new
name|QFile
argument_list|(
name|QFINDTESTDATA
argument_list|(
literal|"../qnetworkreply/image2.jpg"
argument_list|)
argument_list|)
decl_stmt|;
name|file32
operator|->
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|imagePart32
operator|.
name|setBodyDevice
argument_list|(
name|file31
argument_list|)
expr_stmt|;
comment|// check that resetting works
name|imagePart32
operator|.
name|setBodyDevice
argument_list|(
name|file32
argument_list|)
expr_stmt|;
name|imageMultiPart3
operator|->
name|append
argument_list|(
name|imagePart32
argument_list|)
expr_stmt|;
name|file32
operator|->
name|setParent
argument_list|(
name|imageMultiPart3
argument_list|)
expr_stmt|;
name|QHttpPart
name|imagePart33
decl_stmt|;
name|imagePart33
operator|.
name|setHeader
argument_list|(
name|QNetworkRequest
operator|::
name|ContentTypeHeader
argument_list|,
name|QVariant
argument_list|(
literal|"image/jpeg"
argument_list|)
argument_list|)
expr_stmt|;
name|imagePart33
operator|.
name|setHeader
argument_list|(
name|QNetworkRequest
operator|::
name|ContentDispositionHeader
argument_list|,
name|QVariant
argument_list|(
literal|"form-data; name=\"testImage3\""
argument_list|)
argument_list|)
expr_stmt|;
name|QFile
modifier|*
name|file33
init|=
operator|new
name|QFile
argument_list|(
name|QFINDTESTDATA
argument_list|(
literal|"../qnetworkreply/image3.jpg"
argument_list|)
argument_list|)
decl_stmt|;
name|file33
operator|->
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|imagePart33
operator|.
name|setBodyDevice
argument_list|(
name|file33
argument_list|)
expr_stmt|;
name|imageMultiPart3
operator|->
name|append
argument_list|(
name|imagePart33
argument_list|)
expr_stmt|;
name|file33
operator|->
name|setParent
argument_list|(
name|imageMultiPart3
argument_list|)
expr_stmt|;
name|QByteArray
name|expectedData
init|=
literal|"content type: multipart/form-data; boundary=\""
operator|+
name|imageMultiPart3
operator|->
name|boundary
argument_list|()
decl_stmt|;
name|expectedData
operator|.
name|append
argument_list|(
literal|"\"\nkey: testImage1, value: 87ef3bb319b004ba9e5e9c9fa713776e\n"
literal|"key: testImage2, value: 483761b893f7fb1bd2414344cd1f3dfb\n"
literal|"key: testImage3, value: ab0eb6fd4fcf8b4436254870b4513033\n"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"multipart-3images"
argument_list|)
operator|<<
name|multiPartUrl
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QByteArray
argument_list|(
literal|"POST"
argument_list|)
operator|<<
cast|static_cast
argument_list|<
name|QObject
operator|*
argument_list|>
argument_list|(
name|imageMultiPart3
argument_list|)
operator|<<
name|expectedData
operator|<<
name|QNetworkProxy
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|upload
name|void
name|tst_Spdy
operator|::
name|upload
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QUrl
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|QNetworkRequest
name|request
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|QNetworkRequest
operator|::
name|SpdyAllowedAttribute
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|data
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|uploadMethod
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QObject
operator|*
argument_list|,
name|uploadObject
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QNetworkProxy
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|proxy
operator|.
name|type
argument_list|()
operator|!=
name|QNetworkProxy
operator|::
name|DefaultProxy
condition|)
block|{
name|m_manager
operator|.
name|setProxy
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
block|}
name|QNetworkReply
modifier|*
name|reply
decl_stmt|;
name|QHttpMultiPart
modifier|*
name|multiPart
init|=
literal|0
decl_stmt|;
if|if
condition|(
name|uploadObject
condition|)
block|{
comment|// upload via device
if|if
condition|(
name|QIODevice
modifier|*
name|device
init|=
name|qobject_cast
argument_list|<
name|QIODevice
operator|*
argument_list|>
argument_list|(
name|uploadObject
argument_list|)
condition|)
block|{
name|reply
operator|=
name|m_manager
operator|.
name|post
argument_list|(
name|request
argument_list|,
name|device
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|multiPart
operator|=
name|qobject_cast
argument_list|<
name|QHttpMultiPart
operator|*
argument_list|>
argument_list|(
name|uploadObject
argument_list|)
operator|)
condition|)
block|{
name|reply
operator|=
name|m_manager
operator|.
name|post
argument_list|(
name|request
argument_list|,
name|multiPart
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QFAIL
argument_list|(
literal|"got unknown upload device"
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
comment|// upload via byte array
if|if
condition|(
name|uploadMethod
operator|==
literal|"PUT"
condition|)
block|{
name|reply
operator|=
name|m_manager
operator|.
name|put
argument_list|(
name|request
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|reply
operator|=
name|m_manager
operator|.
name|post
argument_list|(
name|request
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
block|}
name|reply
operator|->
name|ignoreSslErrors
argument_list|()
expr_stmt|;
name|QSignalSpy
name|metaDataChangedSpy
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|metaDataChanged
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|uploadProgressSpy
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|uploadProgress
argument_list|(
name|qint64
argument_list|,
name|qint64
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|readyReadSpy
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|finishedSpy
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QSignalSpy
name|finishedManagerSpy
argument_list|(
operator|&
name|m_manager
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|(
name|QNetworkReply
operator|*
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|finishedManagerSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|metaDataChangedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|finishedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|uploadProgressSpy
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|readyReadSpy
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reply
operator|->
name|error
argument_list|()
argument_list|,
name|QNetworkReply
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reply
operator|->
name|attribute
argument_list|(
name|QNetworkRequest
operator|::
name|SpdyWasUsedAttribute
argument_list|)
operator|.
name|toBool
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reply
operator|->
name|attribute
argument_list|(
name|QNetworkRequest
operator|::
name|ConnectionEncryptedAttribute
argument_list|)
operator|.
name|toBool
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reply
operator|->
name|attribute
argument_list|(
name|QNetworkRequest
operator|::
name|HttpStatusCodeAttribute
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|qint64
name|contentLength
init|=
name|reply
operator|->
name|header
argument_list|(
name|QNetworkRequest
operator|::
name|ContentLengthHeader
argument_list|)
operator|.
name|toLongLong
argument_list|()
decl_stmt|;
if|if
condition|(
operator|!
name|multiPart
condition|)
comment|// script to test multiparts does not return a content length
name|QCOMPARE
argument_list|(
name|contentLength
argument_list|,
literal|33
argument_list|)
expr_stmt|;
comment|// 33 bytes for md5 sums (including new line)
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|md5sum
argument_list|)
expr_stmt|;
name|QByteArray
name|content
init|=
name|reply
operator|->
name|readAll
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|content
argument_list|,
name|md5sum
argument_list|)
expr_stmt|;
name|reply
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
if|if
condition|(
name|uploadObject
condition|)
name|uploadObject
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
name|m_manager
operator|.
name|setProxy
argument_list|(
name|QNetworkProxy
argument_list|()
argument_list|)
expr_stmt|;
comment|// reset
block|}
end_function
begin_function
DECL|function|errors_data
name|void
name|tst_Spdy
operator|::
name|errors_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QUrl
argument_list|>
argument_list|(
literal|"url"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QNetworkProxy
argument_list|>
argument_list|(
literal|"proxy"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"ignoreSslErrors"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedReplyError"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http-404"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"https://"
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|+
literal|"/non-existent-url"
argument_list|)
operator|<<
name|QNetworkProxy
argument_list|()
operator|<<
literal|true
operator|<<
name|int
argument_list|(
name|QNetworkReply
operator|::
name|ContentNotFoundError
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ssl-errors"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"https://"
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|)
operator|<<
name|QNetworkProxy
argument_list|()
operator|<<
literal|false
operator|<<
name|int
argument_list|(
name|QNetworkReply
operator|::
name|SslHandshakeFailedError
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"host-not-found"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"https://this-host-does-not.exist"
argument_list|)
operator|<<
name|QNetworkProxy
argument_list|()
operator|<<
literal|true
operator|<<
name|int
argument_list|(
name|QNetworkReply
operator|::
name|HostNotFoundError
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"proxy-not-found"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"https://"
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|)
operator|<<
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|HttpProxy
argument_list|,
literal|"https://this-host-does-not.exist"
argument_list|,
literal|3128
argument_list|)
operator|<<
literal|true
operator|<<
name|int
argument_list|(
name|QNetworkReply
operator|::
name|HostNotFoundError
argument_list|)
expr_stmt|;
name|QHostInfo
name|hostInfo
init|=
name|QHostInfo
operator|::
name|fromName
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|)
decl_stmt|;
name|QString
name|proxyserver
init|=
name|hostInfo
operator|.
name|addresses
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"proxy-unavailable"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"https://"
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|)
operator|<<
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|HttpProxy
argument_list|,
name|proxyserver
argument_list|,
literal|10
argument_list|)
operator|<<
literal|true
operator|<<
name|int
argument_list|(
name|QNetworkReply
operator|::
name|UnknownNetworkError
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-proxy-credentials"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"https://"
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|)
operator|<<
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|HttpProxy
argument_list|,
name|proxyserver
argument_list|,
literal|3129
argument_list|)
operator|<<
literal|true
operator|<<
name|int
argument_list|(
name|QNetworkReply
operator|::
name|ProxyAuthenticationRequiredError
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|errors
name|void
name|tst_Spdy
operator|::
name|errors
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QUrl
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QNetworkProxy
argument_list|,
name|proxy
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|ignoreSslErrors
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expectedReplyError
argument_list|)
expr_stmt|;
name|QNetworkRequest
name|request
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|QNetworkRequest
operator|::
name|SpdyAllowedAttribute
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|disconnect
argument_list|(
operator|&
name|m_manager
argument_list|,
name|SIGNAL
argument_list|(
name|proxyAuthenticationRequired
argument_list|(
specifier|const
name|QNetworkProxy
operator|&
argument_list|,
name|QAuthenticator
operator|*
argument_list|)
argument_list|)
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
if|if
condition|(
name|proxy
operator|.
name|type
argument_list|()
operator|!=
name|QNetworkProxy
operator|::
name|DefaultProxy
condition|)
block|{
name|m_manager
operator|.
name|setProxy
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
block|}
name|QNetworkReply
modifier|*
name|reply
init|=
name|m_manager
operator|.
name|get
argument_list|(
name|request
argument_list|)
decl_stmt|;
if|if
condition|(
name|ignoreSslErrors
condition|)
name|reply
operator|->
name|ignoreSslErrors
argument_list|()
expr_stmt|;
name|QSignalSpy
name|finishedSpy
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|errorSpy
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|error
argument_list|(
name|QNetworkReply
operator|::
name|NetworkError
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|15
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|finishedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|errorSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reply
operator|->
name|error
argument_list|()
argument_list|,
cast|static_cast
argument_list|<
name|QNetworkReply
operator|::
name|NetworkError
argument_list|>
argument_list|(
name|expectedReplyError
argument_list|)
argument_list|)
expr_stmt|;
name|m_manager
operator|.
name|setProxy
argument_list|(
name|QNetworkProxy
argument_list|()
argument_list|)
expr_stmt|;
comment|// reset
name|m_manager
operator|.
name|clearAccessCache
argument_list|()
expr_stmt|;
comment|// e.g. to get an SSL error we need a new connection
name|connect
argument_list|(
operator|&
name|m_manager
argument_list|,
name|SIGNAL
argument_list|(
name|proxyAuthenticationRequired
argument_list|(
specifier|const
name|QNetworkProxy
operator|&
argument_list|,
name|QAuthenticator
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|proxyAuthenticationRequired
argument_list|(
specifier|const
name|QNetworkProxy
operator|&
argument_list|,
name|QAuthenticator
operator|*
argument_list|)
argument_list|)
argument_list|,
name|Qt
operator|::
name|UniqueConnection
argument_list|)
expr_stmt|;
comment|// reset
block|}
end_function
begin_function
DECL|function|multipleRequests_data
name|void
name|tst_Spdy
operator|::
name|multipleRequests_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QList
argument_list|<
name|QUrl
argument_list|>
argument_list|>
argument_list|(
literal|"urls"
argument_list|)
expr_stmt|;
name|QString
name|baseUrl
init|=
literal|"https://"
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|+
literal|"/qtest/cgi-bin/echo.cgi?"
decl_stmt|;
name|QList
argument_list|<
name|QUrl
argument_list|>
name|urls
decl_stmt|;
for|for
control|(
name|int
name|a
init|=
literal|1
init|;
name|a
operator|<=
literal|50
condition|;
operator|++
name|a
control|)
name|urls
operator|.
name|append
argument_list|(
name|QUrl
argument_list|(
name|baseUrl
operator|+
name|QLatin1String
argument_list|(
name|QByteArray
operator|::
name|number
argument_list|(
name|a
argument_list|)
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"one-request"
argument_list|)
operator|<<
name|urls
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"two-requests"
argument_list|)
operator|<<
name|urls
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ten-requests"
argument_list|)
operator|<<
name|urls
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"twenty-requests"
argument_list|)
operator|<<
name|urls
operator|.
name|mid
argument_list|(
literal|0
argument_list|,
literal|20
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"fifty-requests"
argument_list|)
operator|<<
name|urls
expr_stmt|;
block|}
end_function
begin_function
DECL|function|multipleRequestsFinishedSlot
name|void
name|tst_Spdy
operator|::
name|multipleRequestsFinishedSlot
parameter_list|()
block|{
name|m_multipleRepliesFinishedCount
operator|++
expr_stmt|;
if|if
condition|(
name|m_multipleRepliesFinishedCount
operator|==
name|m_multipleRequestsCount
condition|)
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|exitLoop
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|multipleRequests
name|void
name|tst_Spdy
operator|::
name|multipleRequests
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QList
argument_list|<
name|QUrl
argument_list|>
argument_list|,
name|urls
argument_list|)
expr_stmt|;
name|m_multipleRequestsCount
operator|=
name|urls
operator|.
name|count
argument_list|()
expr_stmt|;
name|m_multipleRepliesFinishedCount
operator|=
literal|0
expr_stmt|;
name|QList
argument_list|<
name|QNetworkReply
modifier|*
argument_list|>
name|replies
decl_stmt|;
name|QList
argument_list|<
name|QSignalSpy
modifier|*
argument_list|>
name|metaDataChangedSpies
decl_stmt|;
name|QList
argument_list|<
name|QSignalSpy
modifier|*
argument_list|>
name|readyReadSpies
decl_stmt|;
name|QList
argument_list|<
name|QSignalSpy
modifier|*
argument_list|>
name|finishedSpies
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QUrl
modifier|&
name|url
decl|,
name|urls
control|)
block|{
name|QNetworkRequest
name|request
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|request
operator|.
name|setAttribute
argument_list|(
name|QNetworkRequest
operator|::
name|SpdyAllowedAttribute
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QNetworkReply
modifier|*
name|reply
init|=
name|m_manager
operator|.
name|get
argument_list|(
name|request
argument_list|)
decl_stmt|;
name|replies
operator|.
name|append
argument_list|(
name|reply
argument_list|)
expr_stmt|;
name|reply
operator|->
name|ignoreSslErrors
argument_list|()
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|multipleRequestsFinishedSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QSignalSpy
modifier|*
name|metaDataChangedSpy
init|=
operator|new
name|QSignalSpy
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|metaDataChanged
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|metaDataChangedSpies
operator|<<
name|metaDataChangedSpy
expr_stmt|;
name|QSignalSpy
modifier|*
name|readyReadSpy
init|=
operator|new
name|QSignalSpy
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|readyReadSpies
operator|<<
name|readyReadSpy
expr_stmt|;
name|QSignalSpy
modifier|*
name|finishedSpy
init|=
operator|new
name|QSignalSpy
argument_list|(
name|reply
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|finishedSpies
operator|<<
name|finishedSpy
expr_stmt|;
block|}
name|QSignalSpy
name|finishedManagerSpy
argument_list|(
operator|&
name|m_manager
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|(
name|QNetworkReply
operator|*
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|15
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|finishedManagerSpy
operator|.
name|count
argument_list|()
argument_list|,
name|m_multipleRequestsCount
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|a
init|=
literal|0
init|;
name|a
operator|<
name|replies
operator|.
name|count
argument_list|()
condition|;
operator|++
name|a
control|)
block|{
ifndef|#
directive|ifndef
name|QT_NO_OPENSSL
name|QCOMPARE
argument_list|(
name|replies
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|->
name|sslConfiguration
argument_list|()
operator|.
name|nextProtocolNegotiationStatus
argument_list|()
argument_list|,
name|QSslConfiguration
operator|::
name|NextProtocolNegotiationNegotiated
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|replies
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|->
name|sslConfiguration
argument_list|()
operator|.
name|nextNegotiatedProtocol
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
name|QSslConfiguration
operator|::
name|NextProtocolSpdy3_0
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// QT_NO_OPENSSL
name|QCOMPARE
argument_list|(
name|replies
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|->
name|error
argument_list|()
argument_list|,
name|QNetworkReply
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|replies
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|->
name|attribute
argument_list|(
name|QNetworkRequest
operator|::
name|SpdyWasUsedAttribute
argument_list|)
operator|.
name|toBool
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|replies
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|->
name|attribute
argument_list|(
name|QNetworkRequest
operator|::
name|ConnectionEncryptedAttribute
argument_list|)
operator|.
name|toBool
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|replies
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|->
name|attribute
argument_list|(
name|QNetworkRequest
operator|::
name|HttpStatusCodeAttribute
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
comment|// using the echo script, a request to "echo.cgi?1" will return a body of "1"
name|QByteArray
name|expectedContent
init|=
name|replies
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|->
name|url
argument_list|()
operator|.
name|query
argument_list|()
operator|.
name|toUtf8
argument_list|()
decl_stmt|;
name|QByteArray
name|content
init|=
name|replies
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|->
name|readAll
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|expectedContent
argument_list|,
name|content
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|metaDataChangedSpies
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|->
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|metaDataChangedSpies
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|finishedSpies
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|->
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|finishedSpies
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|readyReadSpies
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|->
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|readyReadSpies
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
name|replies
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_Spdy
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_spdy.moc"
end_include
end_unit
