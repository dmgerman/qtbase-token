begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qbuffer.h>
end_include
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<qfile.h>
end_include
begin_include
include|#
directive|include
file|<qhostinfo.h>
end_include
begin_include
include|#
directive|include
file|<qhttp.h>
end_include
begin_include
include|#
directive|include
file|<qlist.h>
end_include
begin_include
include|#
directive|include
file|<qpointer.h>
end_include
begin_include
include|#
directive|include
file|<qtcpsocket.h>
end_include
begin_include
include|#
directive|include
file|<qtcpserver.h>
end_include
begin_include
include|#
directive|include
file|<qauthenticator.h>
end_include
begin_include
include|#
directive|include
file|<QNetworkProxy>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_OPENSSL
end_ifndef
begin_include
include|#
directive|include
file|<qsslsocket.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"../../../network-settings.h"
end_include
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QHttpResponseHeader
argument_list|)
end_macro
begin_class
DECL|class|tst_QHttp
class|class
name|tst_QHttp
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QHttp
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_QHttp
parameter_list|()
destructor_decl|;
public|public
name|slots
public|:
name|void
name|initTestCase_data
parameter_list|()
function_decl|;
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|constructing
parameter_list|()
function_decl|;
name|void
name|invalidRequests
parameter_list|()
function_decl|;
name|void
name|get_data
parameter_list|()
function_decl|;
name|void
name|get
parameter_list|()
function_decl|;
name|void
name|head_data
parameter_list|()
function_decl|;
name|void
name|head
parameter_list|()
function_decl|;
name|void
name|post_data
parameter_list|()
function_decl|;
name|void
name|post
parameter_list|()
function_decl|;
name|void
name|request_data
parameter_list|()
function_decl|;
name|void
name|request
parameter_list|()
function_decl|;
name|void
name|authorization_data
parameter_list|()
function_decl|;
name|void
name|authorization
parameter_list|()
function_decl|;
name|void
name|proxy_data
parameter_list|()
function_decl|;
name|void
name|proxy
parameter_list|()
function_decl|;
name|void
name|proxy2
parameter_list|()
function_decl|;
name|void
name|proxy3
parameter_list|()
function_decl|;
name|void
name|postAuthNtlm
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_OPENSSL
name|void
name|proxyAndSsl
parameter_list|()
function_decl|;
name|void
name|cachingProxyAndSsl
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|reconnect
parameter_list|()
function_decl|;
name|void
name|setSocket
parameter_list|()
function_decl|;
name|void
name|unexpectedRemoteClose
parameter_list|()
function_decl|;
name|void
name|pctEncodedPath
parameter_list|()
function_decl|;
name|void
name|caseInsensitiveKeys
parameter_list|()
function_decl|;
name|void
name|emptyBodyInReply
parameter_list|()
function_decl|;
name|void
name|abortInReadyRead
parameter_list|()
function_decl|;
name|void
name|abortInResponseHeaderReceived
parameter_list|()
function_decl|;
name|void
name|nestedEventLoop
parameter_list|()
function_decl|;
name|void
name|connectionClose
parameter_list|()
function_decl|;
protected|protected
name|slots
protected|:
name|void
name|stateChanged
parameter_list|(
name|int
parameter_list|)
function_decl|;
name|void
name|responseHeaderReceived
parameter_list|(
specifier|const
name|QHttpResponseHeader
modifier|&
parameter_list|)
function_decl|;
name|void
name|readyRead
parameter_list|(
specifier|const
name|QHttpResponseHeader
modifier|&
parameter_list|)
function_decl|;
name|void
name|dataSendProgress
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
name|dataReadProgress
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|void
name|requestStarted
parameter_list|(
name|int
parameter_list|)
function_decl|;
name|void
name|requestFinished
parameter_list|(
name|int
parameter_list|,
name|bool
parameter_list|)
function_decl|;
name|void
name|done
parameter_list|(
name|bool
parameter_list|)
function_decl|;
name|void
name|reconnect_state
parameter_list|(
name|int
name|state
parameter_list|)
function_decl|;
name|void
name|proxy2_slot
parameter_list|()
function_decl|;
name|void
name|nestedEventLoop_slot
parameter_list|(
name|int
name|id
parameter_list|)
function_decl|;
name|void
name|abortSender
parameter_list|()
function_decl|;
name|void
name|proxyAuthenticationRequired
parameter_list|(
specifier|const
name|QNetworkProxy
modifier|&
parameter_list|,
name|QAuthenticator
modifier|*
name|auth
parameter_list|)
function_decl|;
private|private:
name|QHttp
modifier|*
name|newHttp
parameter_list|(
name|bool
name|withAuth
init|=
literal|false
parameter_list|)
function_decl|;
name|void
name|addRequest
parameter_list|(
name|QHttpRequestHeader
parameter_list|,
name|int
parameter_list|)
function_decl|;
name|bool
name|headerAreEqual
parameter_list|(
specifier|const
name|QHttpHeader
modifier|&
parameter_list|,
specifier|const
name|QHttpHeader
modifier|&
parameter_list|)
function_decl|;
DECL|member|http
name|QHttp
modifier|*
name|http
decl_stmt|;
DECL|struct|RequestResult
struct|struct
name|RequestResult
block|{
DECL|member|req
name|QHttpRequestHeader
name|req
decl_stmt|;
DECL|member|resp
name|QHttpResponseHeader
name|resp
decl_stmt|;
DECL|member|success
name|int
name|success
decl_stmt|;
block|}
struct|;
DECL|member|resultMap
name|QMap
argument_list|<
name|int
argument_list|,
name|RequestResult
argument_list|>
name|resultMap
decl_stmt|;
DECL|typedef|ResMapIt
typedef|typedef
name|QMap
argument_list|<
name|int
argument_list|,
name|RequestResult
argument_list|>
operator|::
name|Iterator
name|ResMapIt
typedef|;
DECL|member|ids
name|QList
argument_list|<
name|int
argument_list|>
name|ids
decl_stmt|;
comment|// helper to make sure that all expected signals are emitted
DECL|member|current_id
name|int
name|current_id
decl_stmt|;
DECL|member|cur_state
name|int
name|cur_state
decl_stmt|;
DECL|member|done_success
name|int
name|done_success
decl_stmt|;
DECL|member|readyRead_ba
name|QByteArray
name|readyRead_ba
decl_stmt|;
DECL|member|bytesTotalSend
name|int
name|bytesTotalSend
decl_stmt|;
DECL|member|bytesDoneSend
name|int
name|bytesDoneSend
decl_stmt|;
DECL|member|bytesTotalRead
name|int
name|bytesTotalRead
decl_stmt|;
DECL|member|bytesDoneRead
name|int
name|bytesDoneRead
decl_stmt|;
DECL|member|getId
name|int
name|getId
decl_stmt|;
DECL|member|headId
name|int
name|headId
decl_stmt|;
DECL|member|postId
name|int
name|postId
decl_stmt|;
DECL|member|reconnect_state_connect_count
name|int
name|reconnect_state_connect_count
decl_stmt|;
DECL|member|connectionWithAuth
name|bool
name|connectionWithAuth
decl_stmt|;
DECL|member|proxyAuthCalled
name|bool
name|proxyAuthCalled
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|ClosingServer
class|class
name|ClosingServer
super|:
specifier|public
name|QTcpServer
block|{
name|Q_OBJECT
public|public:
DECL|function|ClosingServer
name|ClosingServer
parameter_list|()
block|{
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|newConnection
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|handleConnection
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|listen
argument_list|()
expr_stmt|;
block|}
public|public
name|slots
public|:
DECL|function|handleConnection
name|void
name|handleConnection
parameter_list|()
block|{
operator|delete
name|nextPendingConnection
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_comment
comment|//#define DUMP_SIGNALS
end_comment
begin_decl_stmt
DECL|variable|bytesTotal_init
specifier|const
name|int
name|bytesTotal_init
init|=
operator|-
literal|10
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|bytesDone_init
specifier|const
name|int
name|bytesDone_init
init|=
operator|-
literal|10
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|tst_QHttp
name|tst_QHttp
operator|::
name|tst_QHttp
parameter_list|()
block|{ }
end_constructor
begin_destructor
DECL|function|~tst_QHttp
name|tst_QHttp
operator|::
name|~
name|tst_QHttp
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|initTestCase_data
name|void
name|tst_QHttp
operator|::
name|initTestCase_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"setProxy"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"proxyType"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"WithoutProxy"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"WithSocks5Proxy"
argument_list|)
operator|<<
literal|true
operator|<<
name|int
argument_list|(
name|QNetworkProxy
operator|::
name|Socks5Proxy
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|initTestCase
name|void
name|tst_QHttp
operator|::
name|initTestCase
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QtNetworkSettings
operator|::
name|verifyTestNetworkSettings
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_QHttp
operator|::
name|cleanupTestCase
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|init
name|void
name|tst_QHttp
operator|::
name|init
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
block|{
name|QFETCH_GLOBAL
argument_list|(
name|int
argument_list|,
name|proxyType
argument_list|)
expr_stmt|;
if|if
condition|(
name|proxyType
operator|==
name|QNetworkProxy
operator|::
name|Socks5Proxy
condition|)
block|{
name|QNetworkProxy
operator|::
name|setApplicationProxy
argument_list|(
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|Socks5Proxy
argument_list|,
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|1080
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|http
operator|=
literal|0
expr_stmt|;
name|resultMap
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ids
operator|.
name|clear
argument_list|()
expr_stmt|;
name|current_id
operator|=
literal|0
expr_stmt|;
name|cur_state
operator|=
name|QHttp
operator|::
name|Unconnected
expr_stmt|;
name|done_success
operator|=
operator|-
literal|1
expr_stmt|;
name|readyRead_ba
operator|=
name|QByteArray
argument_list|()
expr_stmt|;
name|getId
operator|=
operator|-
literal|1
expr_stmt|;
name|headId
operator|=
operator|-
literal|1
expr_stmt|;
name|postId
operator|=
operator|-
literal|1
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QHttp
operator|::
name|cleanup
parameter_list|()
block|{
operator|delete
name|http
expr_stmt|;
name|http
operator|=
literal|0
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
block|{
name|QNetworkProxy
operator|::
name|setApplicationProxy
argument_list|(
name|QNetworkProxy
operator|::
name|DefaultProxy
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|constructing
name|void
name|tst_QHttp
operator|::
name|constructing
parameter_list|()
block|{
comment|//QHeader
block|{
name|QHttpRequestHeader
name|header
decl_stmt|;
name|header
operator|.
name|addValue
argument_list|(
literal|"key1"
argument_list|,
literal|"val1"
argument_list|)
expr_stmt|;
name|header
operator|.
name|addValue
argument_list|(
literal|"key2"
argument_list|,
literal|"val2"
argument_list|)
expr_stmt|;
name|header
operator|.
name|addValue
argument_list|(
literal|"key1"
argument_list|,
literal|"val3"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|header
operator|.
name|values
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|header
operator|.
name|allValues
argument_list|(
literal|"key1"
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|header
operator|.
name|hasKey
argument_list|(
literal|"key2"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|header
operator|.
name|keys
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|{
name|QHttpResponseHeader
name|header
argument_list|(
literal|200
argument_list|)
decl_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|invalidRequests
name|void
name|tst_QHttp
operator|::
name|invalidRequests
parameter_list|()
block|{
name|QHttp
name|http
decl_stmt|;
name|http
operator|.
name|setHost
argument_list|(
literal|"localhost"
argument_list|)
expr_stmt|;
comment|// we will not actually connect
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QHttp: empty path requested is invalid -- using '/'"
argument_list|)
expr_stmt|;
name|http
operator|.
name|get
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QHttp: empty path requested is invalid -- using '/'"
argument_list|)
expr_stmt|;
name|http
operator|.
name|head
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QHttp: empty path requested is invalid -- using '/'"
argument_list|)
expr_stmt|;
name|http
operator|.
name|post
argument_list|(
name|QString
argument_list|()
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QHttp: empty path requested is invalid -- using '/'"
argument_list|)
expr_stmt|;
name|http
operator|.
name|request
argument_list|(
name|QHttpRequestHeader
argument_list|(
literal|"PROPFIND"
argument_list|,
name|QString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|get_data
name|void
name|tst_QHttp
operator|::
name|get_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"host"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|uint
argument_list|>
argument_list|(
literal|"port"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"success"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"statusCode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"res"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"useIODevice"
argument_list|)
expr_stmt|;
comment|// ### move this into external testdata
name|QFile
name|file
argument_list|(
name|SRCDIR
literal|"rfc3252.txt"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|rfc3252
init|=
name|file
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
name|file
operator|.
name|setFileName
argument_list|(
name|SRCDIR
literal|"testhtml"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|testhtml
init|=
name|file
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|file
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// test the two get() modes in one routine
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|2
condition|;
name|i
operator|++
control|)
block|{
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"path_01_%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|80u
operator|<<
name|QString
argument_list|(
literal|"/qtest/rfc3252.txt"
argument_list|)
operator|<<
literal|1
operator|<<
literal|200
operator|<<
name|rfc3252
operator|<<
call|(
name|bool
call|)
argument_list|(
name|i
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"path_02_%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"www.ietf.org"
argument_list|)
operator|<<
literal|80u
operator|<<
name|QString
argument_list|(
literal|"/rfc/rfc3252.txt"
argument_list|)
operator|<<
literal|1
operator|<<
literal|200
operator|<<
name|rfc3252
operator|<<
call|(
name|bool
call|)
argument_list|(
name|i
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"uri_01_%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|80u
operator|<<
name|QString
argument_list|(
literal|"http://"
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|+
literal|"/qtest/rfc3252.txt"
argument_list|)
operator|<<
literal|1
operator|<<
literal|200
operator|<<
name|rfc3252
operator|<<
call|(
name|bool
call|)
argument_list|(
name|i
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"uri_02_%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
literal|"www.ietf.org"
operator|<<
literal|80u
operator|<<
name|QString
argument_list|(
literal|"http://www.ietf.org/rfc/rfc3252.txt"
argument_list|)
operator|<<
literal|1
operator|<<
literal|200
operator|<<
name|rfc3252
operator|<<
call|(
name|bool
call|)
argument_list|(
name|i
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"fail_01_%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"this-host-will-not-exist."
argument_list|)
operator|<<
literal|80u
operator|<<
name|QString
argument_list|(
literal|"/qtest/rfc3252.txt"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
name|QByteArray
argument_list|()
operator|<<
call|(
name|bool
call|)
argument_list|(
name|i
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"failprot_01_%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|80u
operator|<<
name|QString
argument_list|(
literal|"/t"
argument_list|)
operator|<<
literal|1
operator|<<
literal|404
operator|<<
name|QByteArray
argument_list|()
operator|<<
call|(
name|bool
call|)
argument_list|(
name|i
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"failprot_02_%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|80u
operator|<<
name|QString
argument_list|(
literal|"qtest/rfc3252.txt"
argument_list|)
operator|<<
literal|1
operator|<<
literal|400
operator|<<
name|QByteArray
argument_list|()
operator|<<
call|(
name|bool
call|)
argument_list|(
name|i
operator|==
literal|1
argument_list|)
expr_stmt|;
comment|// qt.nokia.com/doc uses transfer-encoding=chunked
comment|/* qt.nokia.com/doc no longer seams to be using chuncked encodig.     QTest::newRow( QString("chunked_01_%1").arg(i).toLatin1() )<< QString("test.troll.no")<< 80u<< QString("/")<< 1<< 200<< testhtml<< (bool)(i==1);     */
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
literal|"chunked_02_%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|i
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|80u
operator|<<
name|QString
argument_list|(
literal|"/qtest/cgi-bin/rfc.cgi"
argument_list|)
operator|<<
literal|1
operator|<<
literal|200
operator|<<
name|rfc3252
operator|<<
call|(
name|bool
call|)
argument_list|(
name|i
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|get
name|void
name|tst_QHttp
operator|::
name|get
parameter_list|()
block|{
comment|// for the overload that takes a QIODevice
name|QByteArray
name|buf_ba
decl_stmt|;
name|QBuffer
name|buf
argument_list|(
operator|&
name|buf_ba
argument_list|)
decl_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|uint
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|useIODevice
argument_list|)
expr_stmt|;
name|http
operator|=
name|newHttp
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|http
operator|->
name|currentId
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|http
operator|->
name|state
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|QHttp
operator|::
name|Unconnected
argument_list|)
expr_stmt|;
name|addRequest
argument_list|(
name|QHttpRequestHeader
argument_list|()
argument_list|,
name|http
operator|->
name|setHost
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|useIODevice
condition|)
block|{
name|buf
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
expr_stmt|;
name|getId
operator|=
name|http
operator|->
name|get
argument_list|(
name|path
argument_list|,
operator|&
name|buf
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|getId
operator|=
name|http
operator|->
name|get
argument_list|(
name|path
argument_list|)
expr_stmt|;
block|}
name|addRequest
argument_list|(
name|QHttpRequestHeader
argument_list|()
argument_list|,
name|getId
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|50
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
name|QFAIL
argument_list|(
literal|"Network operation timed out"
argument_list|)
expr_stmt|;
name|ResMapIt
name|res
init|=
name|resultMap
operator|.
name|find
argument_list|(
name|getId
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|res
operator|!=
name|resultMap
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|.
name|value
argument_list|()
operator|.
name|success
operator|!=
literal|1
operator|&&
name|host
operator|==
literal|"www.ietf.org"
condition|)
block|{
comment|// The nightly tests fail from time to time. In order to make them more
comment|// stable, add some debug output that might help locate the problem (I
comment|// can't reproduce the problem in the non-nightly builds).
name|qDebug
argument_list|(
literal|"Error %d: %s"
argument_list|,
name|http
operator|->
name|error
argument_list|()
argument_list|,
name|http
operator|->
name|errorString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QTEST
argument_list|(
name|res
operator|.
name|value
argument_list|()
operator|.
name|success
argument_list|,
literal|"success"
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|.
name|value
argument_list|()
operator|.
name|success
condition|)
block|{
name|QTEST
argument_list|(
name|res
operator|.
name|value
argument_list|()
operator|.
name|resp
operator|.
name|statusCode
argument_list|()
argument_list|,
literal|"statusCode"
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|res
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|.
name|count
argument_list|()
operator|>
literal|0
condition|)
block|{
if|if
condition|(
name|useIODevice
condition|)
block|{
name|QCOMPARE
argument_list|(
name|buf_ba
argument_list|,
name|res
argument_list|)
expr_stmt|;
if|if
condition|(
name|bytesDoneRead
operator|!=
name|bytesDone_init
condition|)
name|QVERIFY
argument_list|(
operator|(
name|int
operator|)
name|buf_ba
operator|.
name|size
argument_list|()
operator|==
name|bytesDoneRead
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|readyRead_ba
argument_list|,
name|res
argument_list|)
expr_stmt|;
if|if
condition|(
name|bytesDoneRead
operator|!=
name|bytesDone_init
condition|)
name|QVERIFY
argument_list|(
operator|(
name|int
operator|)
name|readyRead_ba
operator|.
name|size
argument_list|()
operator|==
name|bytesDoneRead
argument_list|)
expr_stmt|;
block|}
block|}
name|QVERIFY
argument_list|(
name|bytesTotalRead
operator|!=
name|bytesTotal_init
argument_list|)
expr_stmt|;
if|if
condition|(
name|bytesTotalRead
operator|>
literal|0
condition|)
name|QVERIFY
argument_list|(
name|bytesDoneRead
operator|==
name|bytesTotalRead
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
operator|!
name|res
operator|.
name|value
argument_list|()
operator|.
name|resp
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|head_data
name|void
name|tst_QHttp
operator|::
name|head_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"host"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|uint
argument_list|>
argument_list|(
literal|"port"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"success"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"statusCode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|uint
argument_list|>
argument_list|(
literal|"contentLength"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"path_01"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|80u
operator|<<
name|QString
argument_list|(
literal|"/qtest/rfc3252.txt"
argument_list|)
operator|<<
literal|1
operator|<<
literal|200
operator|<<
literal|25962u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"path_02"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"www.ietf.org"
argument_list|)
operator|<<
literal|80u
operator|<<
name|QString
argument_list|(
literal|"/rfc/rfc3252.txt"
argument_list|)
operator|<<
literal|1
operator|<<
literal|200
operator|<<
literal|25962u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"uri_01"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|80u
operator|<<
name|QString
argument_list|(
literal|"http://"
operator|+
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|+
literal|"/qtest/rfc3252.txt"
argument_list|)
operator|<<
literal|1
operator|<<
literal|200
operator|<<
literal|25962u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"uri_02"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"www.ietf.org"
argument_list|)
operator|<<
literal|80u
operator|<<
name|QString
argument_list|(
literal|"http://www.ietf.org/rfc/rfc3252.txt"
argument_list|)
operator|<<
literal|1
operator|<<
literal|200
operator|<<
literal|25962u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"fail_01"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"this-host-will-not-exist."
argument_list|)
operator|<<
literal|80u
operator|<<
name|QString
argument_list|(
literal|"/qtest/rfc3252.txt"
argument_list|)
operator|<<
literal|0
operator|<<
literal|0
operator|<<
literal|0u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"failprot_01"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|80u
operator|<<
name|QString
argument_list|(
literal|"/t"
argument_list|)
operator|<<
literal|1
operator|<<
literal|404
operator|<<
literal|0u
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"failprot_02"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|80u
operator|<<
name|QString
argument_list|(
literal|"qtest/rfc3252.txt"
argument_list|)
operator|<<
literal|1
operator|<<
literal|400
operator|<<
literal|0u
expr_stmt|;
comment|/* qt.nokia.com/doc no longer seams to be using chuncked encodig.     QTest::newRow( "chunked_01" )<< QString("qt.nokia.com/doc")<< 80u<< QString("/index.html")<< 1<< 200<< 0u;     */
name|QTest
operator|::
name|newRow
argument_list|(
literal|"chunked_02"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|80u
operator|<<
name|QString
argument_list|(
literal|"/qtest/cgi-bin/rfc.cgi"
argument_list|)
operator|<<
literal|1
operator|<<
literal|200
operator|<<
literal|0u
expr_stmt|;
block|}
end_function
begin_function
DECL|function|head
name|void
name|tst_QHttp
operator|::
name|head
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|uint
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|http
operator|=
name|newHttp
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|http
operator|->
name|currentId
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|http
operator|->
name|state
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|QHttp
operator|::
name|Unconnected
argument_list|)
expr_stmt|;
name|addRequest
argument_list|(
name|QHttpRequestHeader
argument_list|()
argument_list|,
name|http
operator|->
name|setHost
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
name|headId
operator|=
name|http
operator|->
name|head
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|addRequest
argument_list|(
name|QHttpRequestHeader
argument_list|()
argument_list|,
name|headId
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
name|QFAIL
argument_list|(
literal|"Network operation timed out"
argument_list|)
expr_stmt|;
name|ResMapIt
name|res
init|=
name|resultMap
operator|.
name|find
argument_list|(
name|headId
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|res
operator|!=
name|resultMap
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|.
name|value
argument_list|()
operator|.
name|success
operator|!=
literal|1
operator|&&
name|host
operator|==
literal|"www.ietf.org"
condition|)
block|{
comment|// The nightly tests fail from time to time. In order to make them more
comment|// stable, add some debug output that might help locate the problem (I
comment|// can't reproduce the problem in the non-nightly builds).
name|qDebug
argument_list|(
literal|"Error %d: %s"
argument_list|,
name|http
operator|->
name|error
argument_list|()
argument_list|,
name|http
operator|->
name|errorString
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QTEST
argument_list|(
name|res
operator|.
name|value
argument_list|()
operator|.
name|success
argument_list|,
literal|"success"
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|.
name|value
argument_list|()
operator|.
name|success
condition|)
block|{
name|QTEST
argument_list|(
name|res
operator|.
name|value
argument_list|()
operator|.
name|resp
operator|.
name|statusCode
argument_list|()
argument_list|,
literal|"statusCode"
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|res
operator|.
name|value
argument_list|()
operator|.
name|resp
operator|.
name|contentLength
argument_list|()
argument_list|,
literal|"contentLength"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|uint
operator|)
name|readyRead_ba
operator|.
name|size
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|bytesTotalRead
operator|==
name|bytesTotal_init
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|bytesDoneRead
operator|==
name|bytesDone_init
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
operator|!
name|res
operator|.
name|value
argument_list|()
operator|.
name|resp
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|post_data
name|void
name|tst_QHttp
operator|::
name|post_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"source"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"useIODevice"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"useProxy"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"host"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"port"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"ssl"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QByteArray
name|md5sum
decl_stmt|;
name|md5sum
operator|=
literal|"d41d8cd98f00b204e9800998ecf8427e"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty-data"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|false
operator|<<
literal|false
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|80
operator|<<
literal|false
operator|<<
literal|"/qtest/cgi-bin/md5sum.cgi"
operator|<<
name|md5sum
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty-device"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|true
operator|<<
literal|false
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|80
operator|<<
literal|false
operator|<<
literal|"/qtest/cgi-bin/md5sum.cgi"
operator|<<
name|md5sum
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"proxy-empty-data"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|false
operator|<<
literal|true
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|80
operator|<<
literal|false
operator|<<
literal|"/qtest/cgi-bin/md5sum.cgi"
operator|<<
name|md5sum
expr_stmt|;
name|md5sum
operator|=
literal|"b3e32ac459b99d3f59318f3ac31e4bee"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data"
argument_list|)
operator|<<
literal|"rfc3252.txt"
operator|<<
literal|false
operator|<<
literal|false
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|80
operator|<<
literal|false
operator|<<
literal|"/qtest/cgi-bin/md5sum.cgi"
operator|<<
name|md5sum
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"device"
argument_list|)
operator|<<
literal|"rfc3252.txt"
operator|<<
literal|true
operator|<<
literal|false
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|80
operator|<<
literal|false
operator|<<
literal|"/qtest/cgi-bin/md5sum.cgi"
operator|<<
name|md5sum
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"proxy-data"
argument_list|)
operator|<<
literal|"rfc3252.txt"
operator|<<
literal|false
operator|<<
literal|true
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|80
operator|<<
literal|false
operator|<<
literal|"/qtest/cgi-bin/md5sum.cgi"
operator|<<
name|md5sum
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_OPENSSL
name|md5sum
operator|=
literal|"d41d8cd98f00b204e9800998ecf8427e"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty-data-ssl"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|false
operator|<<
literal|false
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|443
operator|<<
literal|true
operator|<<
literal|"/qtest/cgi-bin/md5sum.cgi"
operator|<<
name|md5sum
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty-device-ssl"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|true
operator|<<
literal|false
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|443
operator|<<
literal|true
operator|<<
literal|"/qtest/cgi-bin/md5sum.cgi"
operator|<<
name|md5sum
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"proxy-empty-data-ssl"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|false
operator|<<
literal|true
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|443
operator|<<
literal|true
operator|<<
literal|"/qtest/cgi-bin/md5sum.cgi"
operator|<<
name|md5sum
expr_stmt|;
name|md5sum
operator|=
literal|"b3e32ac459b99d3f59318f3ac31e4bee"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data-ssl"
argument_list|)
operator|<<
literal|"rfc3252.txt"
operator|<<
literal|false
operator|<<
literal|false
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|443
operator|<<
literal|true
operator|<<
literal|"/qtest/cgi-bin/md5sum.cgi"
operator|<<
name|md5sum
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"device-ssl"
argument_list|)
operator|<<
literal|"rfc3252.txt"
operator|<<
literal|true
operator|<<
literal|false
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|443
operator|<<
literal|true
operator|<<
literal|"/qtest/cgi-bin/md5sum.cgi"
operator|<<
name|md5sum
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"proxy-data-ssl"
argument_list|)
operator|<<
literal|"rfc3252.txt"
operator|<<
literal|false
operator|<<
literal|true
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|443
operator|<<
literal|true
operator|<<
literal|"/qtest/cgi-bin/md5sum.cgi"
operator|<<
name|md5sum
expr_stmt|;
endif|#
directive|endif
comment|// the following test won't work. See task 185996
comment|/*     QTest::newRow("proxy-device")<< "rfc3252.txt"<< true<< true<< QtNetworkSettings::serverName()<< 80<< "/qtest/cgi-bin/md5sum.cgi"<< md5sum; */
block|}
end_function
begin_function
DECL|function|post
name|void
name|tst_QHttp
operator|::
name|post
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|useIODevice
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|useProxy
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|ssl
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|http
operator|=
name|newHttp
argument_list|(
name|useProxy
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_OPENSSL
name|QObject
operator|::
name|connect
argument_list|(
name|http
argument_list|,
name|SIGNAL
argument_list|(
name|sslErrors
argument_list|(
specifier|const
name|QList
argument_list|<
name|QSslError
argument_list|>
operator|&
argument_list|)
argument_list|)
argument_list|,
name|http
argument_list|,
name|SLOT
argument_list|(
name|ignoreSslErrors
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|http
operator|->
name|currentId
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|http
operator|->
name|state
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|QHttp
operator|::
name|Unconnected
argument_list|)
expr_stmt|;
if|if
condition|(
name|useProxy
condition|)
name|addRequest
argument_list|(
name|QHttpRequestHeader
argument_list|()
argument_list|,
name|http
operator|->
name|setProxy
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|3129
argument_list|)
argument_list|)
expr_stmt|;
name|addRequest
argument_list|(
name|QHttpRequestHeader
argument_list|()
argument_list|,
name|http
operator|->
name|setHost
argument_list|(
name|host
argument_list|,
operator|(
name|ssl
condition|?
name|QHttp
operator|::
name|ConnectionModeHttps
else|:
name|QHttp
operator|::
name|ConnectionModeHttp
operator|)
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
comment|// add the POST request
name|QFile
name|file
argument_list|(
name|SRCDIR
operator|+
name|source
argument_list|)
decl_stmt|;
name|QBuffer
name|emptyBuffer
decl_stmt|;
name|QIODevice
modifier|*
name|dev
decl_stmt|;
if|if
condition|(
operator|!
name|source
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|dev
operator|=
operator|&
name|file
expr_stmt|;
block|}
else|else
block|{
name|emptyBuffer
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|dev
operator|=
operator|&
name|emptyBuffer
expr_stmt|;
block|}
if|if
condition|(
name|useIODevice
condition|)
name|postId
operator|=
name|http
operator|->
name|post
argument_list|(
name|path
argument_list|,
name|dev
argument_list|)
expr_stmt|;
else|else
name|postId
operator|=
name|http
operator|->
name|post
argument_list|(
name|path
argument_list|,
name|dev
operator|->
name|readAll
argument_list|()
argument_list|)
expr_stmt|;
name|addRequest
argument_list|(
name|QHttpRequestHeader
argument_list|()
argument_list|,
name|postId
argument_list|)
expr_stmt|;
comment|// run request
name|connect
argument_list|(
name|http
argument_list|,
name|SIGNAL
argument_list|(
name|proxyAuthenticationRequired
argument_list|(
name|QNetworkProxy
argument_list|,
name|QAuthenticator
operator|*
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|proxyAuthenticationRequired
argument_list|(
name|QNetworkProxy
argument_list|,
name|QAuthenticator
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
name|QFAIL
argument_list|(
literal|"Network operation timed out"
argument_list|)
expr_stmt|;
name|ResMapIt
name|res
init|=
name|resultMap
operator|.
name|find
argument_list|(
name|postId
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|res
operator|!=
name|resultMap
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|res
operator|.
name|value
argument_list|()
operator|.
name|success
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|res
operator|.
name|value
argument_list|()
operator|.
name|resp
operator|.
name|statusCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|readyRead_ba
operator|.
name|trimmed
argument_list|()
argument_list|,
literal|"result"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|request_data
name|void
name|tst_QHttp
operator|::
name|request_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"source"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"useIODevice"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"useProxy"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"host"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"port"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"method"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QFile
name|source
argument_list|(
name|SRCDIR
literal|"rfc3252.txt"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|source
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
return|return;
name|QByteArray
name|contents
init|=
name|source
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|QByteArray
name|md5sum
init|=
name|QCryptographicHash
operator|::
name|hash
argument_list|(
name|contents
argument_list|,
name|QCryptographicHash
operator|::
name|Md5
argument_list|)
operator|.
name|toHex
argument_list|()
operator|+
literal|'\n'
decl_stmt|;
name|QByteArray
name|emptyMd5sum
init|=
literal|"d41d8cd98f00b204e9800998ecf8427e\n"
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"head"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|false
operator|<<
literal|false
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|80
operator|<<
literal|"HEAD"
operator|<<
literal|"/qtest/rfc3252.txt"
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"get"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|false
operator|<<
literal|false
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|80
operator|<<
literal|"GET"
operator|<<
literal|"/qtest/rfc3252.txt"
operator|<<
name|contents
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"post-empty-data"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|false
operator|<<
literal|false
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|80
operator|<<
literal|"POST"
operator|<<
literal|"/qtest/cgi-bin/md5sum.cgi"
operator|<<
name|emptyMd5sum
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"post-empty-device"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|true
operator|<<
literal|false
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|80
operator|<<
literal|"POST"
operator|<<
literal|"/qtest/cgi-bin/md5sum.cgi"
operator|<<
name|emptyMd5sum
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"post-data"
argument_list|)
operator|<<
literal|"rfc3252.txt"
operator|<<
literal|false
operator|<<
literal|false
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|80
operator|<<
literal|"POST"
operator|<<
literal|"/qtest/cgi-bin/md5sum.cgi"
operator|<<
name|md5sum
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"post-device"
argument_list|)
operator|<<
literal|"rfc3252.txt"
operator|<<
literal|true
operator|<<
literal|false
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|80
operator|<<
literal|"POST"
operator|<<
literal|"/qtest/cgi-bin/md5sum.cgi"
operator|<<
name|md5sum
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"proxy-head"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|false
operator|<<
literal|true
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|80
operator|<<
literal|"HEAD"
operator|<<
literal|"/qtest/rfc3252.txt"
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"proxy-get"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|false
operator|<<
literal|true
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|80
operator|<<
literal|"GET"
operator|<<
literal|"/qtest/rfc3252.txt"
operator|<<
name|contents
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"proxy-post-empty-data"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
literal|false
operator|<<
literal|true
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|80
operator|<<
literal|"POST"
operator|<<
literal|"/qtest/cgi-bin/md5sum.cgi"
operator|<<
name|emptyMd5sum
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"proxy-post-data"
argument_list|)
operator|<<
literal|"rfc3252.txt"
operator|<<
literal|false
operator|<<
literal|true
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|80
operator|<<
literal|"POST"
operator|<<
literal|"/qtest/cgi-bin/md5sum.cgi"
operator|<<
name|md5sum
expr_stmt|;
comment|// the following test won't work. See task 185996
comment|/*     QTest::newRow("proxy-post-device")<< "rfc3252.txt"<< true<< true<< QtNetworkSettings::serverName()<< 80<< "POST"<< "/qtest/cgi-bin/md5sum.cgi"<< md5sum; */
block|}
end_function
begin_function
DECL|function|request
name|void
name|tst_QHttp
operator|::
name|request
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|source
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|useIODevice
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|useProxy
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|method
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|http
operator|=
name|newHttp
argument_list|(
name|useProxy
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|http
operator|->
name|currentId
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|http
operator|->
name|state
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|QHttp
operator|::
name|Unconnected
argument_list|)
expr_stmt|;
if|if
condition|(
name|useProxy
condition|)
name|addRequest
argument_list|(
name|QHttpRequestHeader
argument_list|()
argument_list|,
name|http
operator|->
name|setProxy
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|3129
argument_list|)
argument_list|)
expr_stmt|;
name|addRequest
argument_list|(
name|QHttpRequestHeader
argument_list|()
argument_list|,
name|http
operator|->
name|setHost
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
name|SRCDIR
operator|+
name|source
argument_list|)
decl_stmt|;
name|QBuffer
name|emptyBuffer
decl_stmt|;
name|QIODevice
modifier|*
name|dev
decl_stmt|;
if|if
condition|(
operator|!
name|source
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|dev
operator|=
operator|&
name|file
expr_stmt|;
block|}
else|else
block|{
name|emptyBuffer
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
expr_stmt|;
name|dev
operator|=
operator|&
name|emptyBuffer
expr_stmt|;
block|}
comment|// prepare the request
name|QHttpRequestHeader
name|request
decl_stmt|;
name|request
operator|.
name|setRequest
argument_list|(
name|method
argument_list|,
name|path
argument_list|,
literal|1
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|request
operator|.
name|addValue
argument_list|(
literal|"Host"
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|int
modifier|*
name|theId
decl_stmt|;
if|if
condition|(
name|method
operator|==
literal|"POST"
condition|)
name|theId
operator|=
operator|&
name|postId
expr_stmt|;
elseif|else
if|if
condition|(
name|method
operator|==
literal|"GET"
condition|)
name|theId
operator|=
operator|&
name|getId
expr_stmt|;
elseif|else
if|if
condition|(
name|method
operator|==
literal|"HEAD"
condition|)
name|theId
operator|=
operator|&
name|headId
expr_stmt|;
else|else
name|QFAIL
argument_list|(
literal|"You're lazy! Please implement your test!"
argument_list|)
expr_stmt|;
comment|// now send the request
if|if
condition|(
name|useIODevice
condition|)
operator|*
name|theId
operator|=
name|http
operator|->
name|request
argument_list|(
name|request
argument_list|,
name|dev
argument_list|)
expr_stmt|;
else|else
operator|*
name|theId
operator|=
name|http
operator|->
name|request
argument_list|(
name|request
argument_list|,
name|dev
operator|->
name|readAll
argument_list|()
argument_list|)
expr_stmt|;
name|addRequest
argument_list|(
name|QHttpRequestHeader
argument_list|()
argument_list|,
operator|*
name|theId
argument_list|)
expr_stmt|;
comment|// run request
name|connect
argument_list|(
name|http
argument_list|,
name|SIGNAL
argument_list|(
name|proxyAuthenticationRequired
argument_list|(
name|QNetworkProxy
argument_list|,
name|QAuthenticator
operator|*
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|proxyAuthenticationRequired
argument_list|(
name|QNetworkProxy
argument_list|,
name|QAuthenticator
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
name|QFAIL
argument_list|(
literal|"Network operation timed out"
argument_list|)
expr_stmt|;
name|ResMapIt
name|res
init|=
name|resultMap
operator|.
name|find
argument_list|(
operator|*
name|theId
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|res
operator|!=
name|resultMap
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|res
operator|.
name|value
argument_list|()
operator|.
name|success
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|res
operator|.
name|value
argument_list|()
operator|.
name|resp
operator|.
name|statusCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
name|QTEST
argument_list|(
name|readyRead_ba
argument_list|,
literal|"result"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|authorization_data
name|void
name|tst_QHttp
operator|::
name|authorization_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"host"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"user"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"pass"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"correct password"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/qtest/rfcs-auth/index.html"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"httptest"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"httptest"
argument_list|)
operator|<<
literal|200
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no password"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/qtest/rfcs-auth/index.html"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|""
argument_list|)
operator|<<
literal|401
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"wrong password"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/qtest/rfcs-auth/index.html"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"maliciu0s"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"h4X0r"
argument_list|)
operator|<<
literal|401
expr_stmt|;
block|}
end_function
begin_function
DECL|function|authorization
name|void
name|tst_QHttp
operator|::
name|authorization
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|user
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|pass
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|QEventLoop
name|loop
decl_stmt|;
name|QHttp
name|http
decl_stmt|;
name|connect
argument_list|(
operator|&
name|http
argument_list|,
name|SIGNAL
argument_list|(
name|done
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
operator|&
name|loop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|user
operator|.
name|isEmpty
argument_list|()
condition|)
name|http
operator|.
name|setUser
argument_list|(
name|user
argument_list|,
name|pass
argument_list|)
expr_stmt|;
name|http
operator|.
name|setHost
argument_list|(
name|host
argument_list|)
expr_stmt|;
name|int
name|id
init|=
name|http
operator|.
name|get
argument_list|(
name|path
argument_list|)
decl_stmt|;
name|Q_UNUSED
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|5000
argument_list|,
operator|&
name|loop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|loop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|http
operator|.
name|lastResponse
argument_list|()
operator|.
name|statusCode
argument_list|()
argument_list|,
name|result
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|proxy_data
name|void
name|tst_QHttp
operator|::
name|proxy_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"proxyhost"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"port"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"host"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"proxyuser"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"proxypass"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qt-test-server"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|3128
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"qt.nokia.com"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qt-test-server pct"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|3128
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"qt.nokia.com"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/%64eveloper"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"qt-test-server-basic"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
literal|3129
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"qt.nokia.com"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"/"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"qsockstest"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
if|#
directive|if
literal|0
comment|// NTLM requires sending the same request three times for it to work
comment|// the tst_QHttp class is too strict to handle the byte counts sent by dataSendProgress
comment|// So don't run this test:
block|QTest::newRow("qt-test-server-ntlm")<< QtNetworkSettings::serverName()<< 3130<< QString::fromLatin1("qt.nokia.com")<< QString::fromLatin1("/")<< QString::fromLatin1("qsockstest")<< QString::fromLatin1("password");
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|proxy
name|void
name|tst_QHttp
operator|::
name|proxy
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|proxyhost
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|proxyuser
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|proxypass
argument_list|)
expr_stmt|;
name|http
operator|=
name|newHttp
argument_list|(
operator|!
name|proxyuser
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|http
operator|->
name|currentId
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|http
operator|->
name|state
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|QHttp
operator|::
name|Unconnected
argument_list|)
expr_stmt|;
name|addRequest
argument_list|(
name|QHttpRequestHeader
argument_list|()
argument_list|,
name|http
operator|->
name|setProxy
argument_list|(
name|proxyhost
argument_list|,
name|port
argument_list|,
name|proxyuser
argument_list|,
name|proxypass
argument_list|)
argument_list|)
expr_stmt|;
name|addRequest
argument_list|(
name|QHttpRequestHeader
argument_list|()
argument_list|,
name|http
operator|->
name|setHost
argument_list|(
name|host
argument_list|)
argument_list|)
expr_stmt|;
name|getId
operator|=
name|http
operator|->
name|get
argument_list|(
name|path
argument_list|)
expr_stmt|;
name|addRequest
argument_list|(
name|QHttpRequestHeader
argument_list|()
argument_list|,
name|getId
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
name|QFAIL
argument_list|(
literal|"Network operation timed out"
argument_list|)
expr_stmt|;
name|ResMapIt
name|res
init|=
name|resultMap
operator|.
name|find
argument_list|(
name|getId
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|res
operator|!=
name|resultMap
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|res
operator|.
name|value
argument_list|()
operator|.
name|success
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|res
operator|.
name|value
argument_list|()
operator|.
name|resp
operator|.
name|statusCode
argument_list|()
argument_list|,
literal|200
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|proxy2
name|void
name|tst_QHttp
operator|::
name|proxy2
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
return|return;
name|readyRead_ba
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QHttp
name|http
decl_stmt|;
name|http
operator|.
name|setProxy
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|3128
argument_list|)
expr_stmt|;
name|http
operator|.
name|setHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|)
expr_stmt|;
name|http
operator|.
name|get
argument_list|(
literal|"/index.html"
argument_list|)
expr_stmt|;
name|http
operator|.
name|get
argument_list|(
literal|"/index.html"
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|http
argument_list|,
name|SIGNAL
argument_list|(
name|requestFinished
argument_list|(
name|int
argument_list|,
name|bool
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|proxy2_slot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|readyRead_ba
operator|.
name|count
argument_list|(
literal|"Welcome to qt-test-server"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|readyRead_ba
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|proxy2_slot
name|void
name|tst_QHttp
operator|::
name|proxy2_slot
parameter_list|()
block|{
name|QHttp
modifier|*
name|http
init|=
cast|static_cast
argument_list|<
name|QHttp
operator|*
argument_list|>
argument_list|(
name|sender
argument_list|()
argument_list|)
decl_stmt|;
name|readyRead_ba
operator|.
name|append
argument_list|(
name|http
operator|->
name|readAll
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|http
operator|->
name|hasPendingRequests
argument_list|()
condition|)
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|exitLoop
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|proxy3
name|void
name|tst_QHttp
operator|::
name|proxy3
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
return|return;
name|readyRead_ba
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QTcpSocket
name|socket
decl_stmt|;
name|socket
operator|.
name|setProxy
argument_list|(
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|HttpProxy
argument_list|,
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|3128
argument_list|)
argument_list|)
expr_stmt|;
name|QHttp
name|http
decl_stmt|;
name|http
operator|.
name|setSocket
argument_list|(
operator|&
name|socket
argument_list|)
expr_stmt|;
name|http
operator|.
name|setHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|)
expr_stmt|;
name|http
operator|.
name|get
argument_list|(
literal|"/index.html"
argument_list|)
expr_stmt|;
name|http
operator|.
name|get
argument_list|(
literal|"/index.html"
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|http
argument_list|,
name|SIGNAL
argument_list|(
name|requestFinished
argument_list|(
name|int
argument_list|,
name|bool
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|proxy2_slot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|30
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|readyRead_ba
operator|.
name|count
argument_list|(
literal|"Welcome to qt-test-server"
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|readyRead_ba
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|// test QHttp::currentId() and QHttp::currentRequest()
end_comment
begin_define
DECL|macro|CURRENTREQUEST_TEST
define|#
directive|define
name|CURRENTREQUEST_TEST
define|\
value|{ \     ResMapIt res = resultMap.find( http->currentId() ); \     QVERIFY( res != resultMap.end() ); \     if ( http->currentId() == getId ) { \         QCOMPARE( http->currentRequest().method(), QString("GET") ); \     } else if ( http->currentId() == headId ) { \         QCOMPARE( http->currentRequest().method(), QString("HEAD") ); \         } else if ( http->currentId() == postId ) { \             QCOMPARE( http->currentRequest().method(), QString("POST") ); \     } else { \         QVERIFY( headerAreEqual( http->currentRequest(), res.value().req ) ); \     } \     }
end_define
begin_function
DECL|function|requestStarted
name|void
name|tst_QHttp
operator|::
name|requestStarted
parameter_list|(
name|int
name|id
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|DUMP_SIGNALS
argument_list|)
name|qDebug
argument_list|(
literal|"%d:requestStarted( %d )"
argument_list|,
name|http
operator|->
name|currentId
argument_list|()
argument_list|,
name|id
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// make sure that the requestStarted and requestFinished are nested correctly
name|QVERIFY
argument_list|(
name|current_id
operator|==
literal|0
argument_list|)
expr_stmt|;
name|current_id
operator|=
name|id
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ids
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ids
operator|.
name|first
argument_list|()
operator|==
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|ids
operator|.
name|count
argument_list|()
operator|>
literal|1
condition|)
block|{
name|QVERIFY
argument_list|(
name|http
operator|->
name|hasPendingRequests
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
operator|!
name|http
operator|->
name|hasPendingRequests
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|http
operator|->
name|currentId
argument_list|()
operator|==
name|id
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cur_state
operator|==
name|http
operator|->
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|CURRENTREQUEST_TEST
expr_stmt|;
name|QVERIFY
argument_list|(
name|http
operator|->
name|error
argument_list|()
operator|==
name|QHttp
operator|::
name|NoError
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|requestFinished
name|void
name|tst_QHttp
operator|::
name|requestFinished
parameter_list|(
name|int
name|id
parameter_list|,
name|bool
name|error
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|DUMP_SIGNALS
argument_list|)
name|qDebug
argument_list|(
literal|"%d:requestFinished( %d, %d ) -- errorString: '%s'"
argument_list|,
name|http
operator|->
name|currentId
argument_list|()
argument_list|,
name|id
argument_list|,
operator|(
name|int
operator|)
name|error
argument_list|,
name|http
operator|->
name|errorString
argument_list|()
operator|.
name|toAscii
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// make sure that the requestStarted and requestFinished are nested correctly
name|QVERIFY
argument_list|(
name|current_id
operator|==
name|id
argument_list|)
expr_stmt|;
name|current_id
operator|=
literal|0
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|ids
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ids
operator|.
name|first
argument_list|()
operator|==
name|id
argument_list|)
expr_stmt|;
if|if
condition|(
name|ids
operator|.
name|count
argument_list|()
operator|>
literal|1
condition|)
block|{
name|QVERIFY
argument_list|(
name|http
operator|->
name|hasPendingRequests
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
operator|!
name|http
operator|->
name|hasPendingRequests
argument_list|()
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|error
condition|)
block|{
name|QVERIFY
argument_list|(
name|http
operator|->
name|error
argument_list|()
operator|!=
name|QHttp
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|ids
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|http
operator|->
name|error
argument_list|()
operator|==
name|QHttp
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|ids
operator|.
name|pop_front
argument_list|()
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|http
operator|->
name|currentId
argument_list|()
operator|==
name|id
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cur_state
operator|==
name|http
operator|->
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|CURRENTREQUEST_TEST
expr_stmt|;
name|ResMapIt
name|res
init|=
name|resultMap
operator|.
name|find
argument_list|(
name|http
operator|->
name|currentId
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|res
operator|!=
name|resultMap
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|res
operator|.
name|value
argument_list|()
operator|.
name|success
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
condition|)
name|res
operator|.
name|value
argument_list|()
operator|.
name|success
operator|=
literal|0
expr_stmt|;
else|else
name|res
operator|.
name|value
argument_list|()
operator|.
name|success
operator|=
literal|1
expr_stmt|;
block|}
end_function
begin_function
DECL|function|done
name|void
name|tst_QHttp
operator|::
name|done
parameter_list|(
name|bool
name|error
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|DUMP_SIGNALS
argument_list|)
name|qDebug
argument_list|(
literal|"%d:done( %d )"
argument_list|,
name|http
operator|->
name|currentId
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|error
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY
argument_list|(
name|http
operator|->
name|currentId
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|current_id
operator|==
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ids
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cur_state
operator|==
name|http
operator|->
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|http
operator|->
name|hasPendingRequests
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|done_success
operator|==
operator|-
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
condition|)
block|{
name|QVERIFY
argument_list|(
name|http
operator|->
name|error
argument_list|()
operator|!=
name|QHttp
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|done_success
operator|=
literal|0
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|http
operator|->
name|error
argument_list|()
operator|==
name|QHttp
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|done_success
operator|=
literal|1
expr_stmt|;
block|}
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|exitLoop
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|stateChanged
name|void
name|tst_QHttp
operator|::
name|stateChanged
parameter_list|(
name|int
name|state
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|DUMP_SIGNALS
argument_list|)
name|qDebug
argument_list|(
literal|"%d:  stateChanged( %d )"
argument_list|,
name|http
operator|->
name|currentId
argument_list|()
argument_list|,
name|state
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|http
operator|->
name|currentId
argument_list|()
argument_list|,
name|current_id
argument_list|)
expr_stmt|;
if|if
condition|(
name|ids
operator|.
name|count
argument_list|()
operator|>
literal|0
condition|)
name|CURRENTREQUEST_TEST
expr_stmt|;
name|QVERIFY
argument_list|(
name|state
operator|!=
name|cur_state
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|state
operator|==
name|http
operator|->
name|state
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|state
operator|!=
name|QHttp
operator|::
name|Unconnected
operator|&&
operator|!
name|connectionWithAuth
condition|)
block|{
comment|// make sure that the states are always emitted in the right order (for
comment|// this, we assume an ordering on the enum values, which they have at
comment|// the moment)
comment|// connections with authentication will possibly reconnect, so ignore them
name|QVERIFY
argument_list|(
name|cur_state
operator|<
name|state
argument_list|)
expr_stmt|;
block|}
name|cur_state
operator|=
name|state
expr_stmt|;
if|if
condition|(
name|state
operator|==
name|QHttp
operator|::
name|Connecting
condition|)
block|{
name|bytesTotalSend
operator|=
name|bytesTotal_init
expr_stmt|;
name|bytesDoneSend
operator|=
name|bytesDone_init
expr_stmt|;
name|bytesTotalRead
operator|=
name|bytesTotal_init
expr_stmt|;
name|bytesDoneRead
operator|=
name|bytesDone_init
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|responseHeaderReceived
name|void
name|tst_QHttp
operator|::
name|responseHeaderReceived
parameter_list|(
specifier|const
name|QHttpResponseHeader
modifier|&
name|header
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|DUMP_SIGNALS
argument_list|)
name|qDebug
argument_list|(
literal|"%d:  responseHeaderReceived(\n---{\n%s}---)"
argument_list|,
name|http
operator|->
name|currentId
argument_list|()
argument_list|,
name|header
operator|.
name|toString
argument_list|()
operator|.
name|toAscii
argument_list|()
operator|.
name|data
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|http
operator|->
name|currentId
argument_list|()
argument_list|,
name|current_id
argument_list|)
expr_stmt|;
if|if
condition|(
name|ids
operator|.
name|count
argument_list|()
operator|>
literal|1
condition|)
block|{
name|QVERIFY
argument_list|(
name|http
operator|->
name|hasPendingRequests
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
operator|!
name|http
operator|->
name|hasPendingRequests
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|CURRENTREQUEST_TEST
expr_stmt|;
name|resultMap
index|[
name|http
operator|->
name|currentId
argument_list|()
index|]
operator|.
name|resp
operator|=
name|header
expr_stmt|;
block|}
end_function
begin_function
DECL|function|readyRead
name|void
name|tst_QHttp
operator|::
name|readyRead
parameter_list|(
specifier|const
name|QHttpResponseHeader
modifier|&
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|DUMP_SIGNALS
argument_list|)
name|qDebug
argument_list|(
literal|"%d:  readyRead()"
argument_list|,
name|http
operator|->
name|currentId
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|http
operator|->
name|currentId
argument_list|()
argument_list|,
name|current_id
argument_list|)
expr_stmt|;
if|if
condition|(
name|ids
operator|.
name|count
argument_list|()
operator|>
literal|1
condition|)
block|{
name|QVERIFY
argument_list|(
name|http
operator|->
name|hasPendingRequests
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
operator|!
name|http
operator|->
name|hasPendingRequests
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|cur_state
operator|==
name|http
operator|->
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|CURRENTREQUEST_TEST
expr_stmt|;
if|if
condition|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
operator|!=
name|QLatin1String
argument_list|(
literal|"bytesAvailable"
argument_list|)
condition|)
block|{
name|int
name|oldSize
init|=
name|readyRead_ba
operator|.
name|size
argument_list|()
decl_stmt|;
name|quint64
name|bytesAvail
init|=
name|http
operator|->
name|bytesAvailable
argument_list|()
decl_stmt|;
name|QByteArray
name|ba
init|=
name|http
operator|->
name|readAll
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|(
name|quint64
operator|)
name|ba
operator|.
name|size
argument_list|()
operator|==
name|bytesAvail
argument_list|)
expr_stmt|;
name|readyRead_ba
operator|.
name|resize
argument_list|(
name|oldSize
operator|+
name|ba
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
name|memcpy
argument_list|(
name|readyRead_ba
operator|.
name|data
argument_list|()
operator|+
name|oldSize
argument_list|,
name|ba
operator|.
name|data
argument_list|()
argument_list|,
name|ba
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|bytesTotalRead
operator|>
literal|0
condition|)
block|{
name|QVERIFY
argument_list|(
operator|(
name|int
operator|)
name|readyRead_ba
operator|.
name|size
argument_list|()
operator|<=
name|bytesTotalRead
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
operator|(
name|int
operator|)
name|readyRead_ba
operator|.
name|size
argument_list|()
operator|==
name|bytesDoneRead
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|dataSendProgress
name|void
name|tst_QHttp
operator|::
name|dataSendProgress
parameter_list|(
name|int
name|done
parameter_list|,
name|int
name|total
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|DUMP_SIGNALS
argument_list|)
name|qDebug
argument_list|(
literal|"%d:  dataSendProgress( %d, %d )"
argument_list|,
name|http
operator|->
name|currentId
argument_list|()
argument_list|,
name|done
argument_list|,
name|total
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|http
operator|->
name|currentId
argument_list|()
argument_list|,
name|current_id
argument_list|)
expr_stmt|;
if|if
condition|(
name|ids
operator|.
name|count
argument_list|()
operator|>
literal|1
condition|)
block|{
name|QVERIFY
argument_list|(
name|http
operator|->
name|hasPendingRequests
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
operator|!
name|http
operator|->
name|hasPendingRequests
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|cur_state
operator|==
name|http
operator|->
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|CURRENTREQUEST_TEST
expr_stmt|;
if|if
condition|(
name|bytesTotalSend
operator|==
name|bytesTotal_init
condition|)
block|{
name|bytesTotalSend
operator|=
name|total
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|bytesTotalSend
argument_list|,
name|total
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|bytesTotalSend
operator|!=
name|bytesTotal_init
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|bytesDoneSend
operator|<=
name|done
argument_list|)
expr_stmt|;
name|bytesDoneSend
operator|=
name|done
expr_stmt|;
if|if
condition|(
name|bytesTotalSend
operator|>
literal|0
condition|)
block|{
name|QVERIFY
argument_list|(
name|bytesDoneSend
operator|<=
name|bytesTotalSend
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"abort"
argument_list|)
condition|)
block|{
comment|// ### it would be nice if we could specify in our testdata when to do
comment|// the abort
if|if
condition|(
name|done
operator|>=
name|total
operator|/
literal|100000
condition|)
block|{
if|if
condition|(
name|ids
operator|.
name|count
argument_list|()
operator|!=
literal|1
condition|)
block|{
comment|// do abort only once
name|int
name|tmpId
init|=
name|ids
operator|.
name|first
argument_list|()
decl_stmt|;
name|ids
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ids
operator|<<
name|tmpId
expr_stmt|;
name|http
operator|->
name|abort
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|dataReadProgress
name|void
name|tst_QHttp
operator|::
name|dataReadProgress
parameter_list|(
name|int
name|done
parameter_list|,
name|int
name|total
parameter_list|)
block|{
if|#
directive|if
name|defined
argument_list|(
name|DUMP_SIGNALS
argument_list|)
name|qDebug
argument_list|(
literal|"%d:  dataReadProgress( %d, %d )"
argument_list|,
name|http
operator|->
name|currentId
argument_list|()
argument_list|,
name|done
argument_list|,
name|total
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|http
operator|->
name|currentId
argument_list|()
argument_list|,
name|current_id
argument_list|)
expr_stmt|;
if|if
condition|(
name|ids
operator|.
name|count
argument_list|()
operator|>
literal|1
condition|)
block|{
name|QVERIFY
argument_list|(
name|http
operator|->
name|hasPendingRequests
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
operator|!
name|http
operator|->
name|hasPendingRequests
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|cur_state
operator|==
name|http
operator|->
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|CURRENTREQUEST_TEST
expr_stmt|;
if|if
condition|(
name|bytesTotalRead
operator|==
name|bytesTotal_init
condition|)
name|bytesTotalRead
operator|=
name|total
expr_stmt|;
else|else
block|{
name|QVERIFY
argument_list|(
name|bytesTotalRead
operator|==
name|total
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|bytesTotalRead
operator|!=
name|bytesTotal_init
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|bytesDoneRead
operator|<=
name|done
argument_list|)
expr_stmt|;
name|bytesDoneRead
operator|=
name|done
expr_stmt|;
if|if
condition|(
name|bytesTotalRead
operator|>
literal|0
condition|)
block|{
name|QVERIFY
argument_list|(
name|bytesDoneRead
operator|<=
name|bytesTotalRead
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
operator|==
name|QLatin1String
argument_list|(
literal|"abort"
argument_list|)
condition|)
block|{
comment|// ### it would be nice if we could specify in our testdata when to do
comment|// the abort
if|if
condition|(
name|done
operator|>=
name|total
operator|/
literal|100000
condition|)
block|{
if|if
condition|(
name|ids
operator|.
name|count
argument_list|()
operator|!=
literal|1
condition|)
block|{
comment|// do abort only once
name|int
name|tmpId
init|=
name|ids
operator|.
name|first
argument_list|()
decl_stmt|;
name|ids
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ids
operator|<<
name|tmpId
expr_stmt|;
name|http
operator|->
name|abort
argument_list|()
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|newHttp
name|QHttp
modifier|*
name|tst_QHttp
operator|::
name|newHttp
parameter_list|(
name|bool
name|withAuth
parameter_list|)
block|{
name|QHttp
modifier|*
name|nHttp
init|=
operator|new
name|QHttp
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|nHttp
argument_list|,
name|SIGNAL
argument_list|(
name|requestStarted
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|requestStarted
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|nHttp
argument_list|,
name|SIGNAL
argument_list|(
name|requestFinished
argument_list|(
name|int
argument_list|,
name|bool
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|requestFinished
argument_list|(
name|int
argument_list|,
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|nHttp
argument_list|,
name|SIGNAL
argument_list|(
name|done
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|done
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|nHttp
argument_list|,
name|SIGNAL
argument_list|(
name|stateChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|stateChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|nHttp
argument_list|,
name|SIGNAL
argument_list|(
name|responseHeaderReceived
argument_list|(
specifier|const
name|QHttpResponseHeader
operator|&
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|responseHeaderReceived
argument_list|(
specifier|const
name|QHttpResponseHeader
operator|&
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|nHttp
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|(
specifier|const
name|QHttpResponseHeader
operator|&
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|readyRead
argument_list|(
specifier|const
name|QHttpResponseHeader
operator|&
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|nHttp
argument_list|,
name|SIGNAL
argument_list|(
name|dataSendProgress
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|dataSendProgress
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|nHttp
argument_list|,
name|SIGNAL
argument_list|(
name|dataReadProgress
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|dataReadProgress
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connectionWithAuth
operator|=
name|withAuth
expr_stmt|;
return|return
name|nHttp
return|;
block|}
end_function
begin_function
DECL|function|addRequest
name|void
name|tst_QHttp
operator|::
name|addRequest
parameter_list|(
name|QHttpRequestHeader
name|header
parameter_list|,
name|int
name|id
parameter_list|)
block|{
name|ids
operator|<<
name|id
expr_stmt|;
name|RequestResult
name|res
decl_stmt|;
name|res
operator|.
name|req
operator|=
name|header
expr_stmt|;
name|res
operator|.
name|success
operator|=
operator|-
literal|1
expr_stmt|;
name|resultMap
index|[
name|id
index|]
operator|=
name|res
expr_stmt|;
block|}
end_function
begin_function
DECL|function|headerAreEqual
name|bool
name|tst_QHttp
operator|::
name|headerAreEqual
parameter_list|(
specifier|const
name|QHttpHeader
modifier|&
name|h1
parameter_list|,
specifier|const
name|QHttpHeader
modifier|&
name|h2
parameter_list|)
block|{
if|if
condition|(
operator|!
name|h1
operator|.
name|isValid
argument_list|()
condition|)
return|return
operator|!
name|h2
operator|.
name|isValid
argument_list|()
return|;
if|if
condition|(
operator|!
name|h2
operator|.
name|isValid
argument_list|()
condition|)
return|return
operator|!
name|h1
operator|.
name|isValid
argument_list|()
return|;
return|return
name|h1
operator|.
name|toString
argument_list|()
operator|==
name|h2
operator|.
name|toString
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|reconnect
name|void
name|tst_QHttp
operator|::
name|reconnect
parameter_list|()
block|{
name|reconnect_state_connect_count
operator|=
literal|0
expr_stmt|;
name|QHttp
name|http
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|http
argument_list|,
name|SIGNAL
argument_list|(
name|stateChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|reconnect_state
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|http
operator|.
name|setHost
argument_list|(
literal|"trolltech.com"
argument_list|,
literal|80
argument_list|)
expr_stmt|;
name|http
operator|.
name|get
argument_list|(
literal|"/company/index.html"
argument_list|)
expr_stmt|;
name|http
operator|.
name|setHost
argument_list|(
literal|"trolltech.com"
argument_list|,
literal|8080
argument_list|)
expr_stmt|;
name|http
operator|.
name|get
argument_list|(
literal|"/company/index.html"
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|60
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
name|QFAIL
argument_list|(
literal|"Network operation timed out"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reconnect_state_connect_count
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|60
argument_list|)
expr_stmt|;
if|if
condition|(
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
condition|)
name|QFAIL
argument_list|(
literal|"Network operation timed out"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|reconnect_state_connect_count
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|reconnect_state
name|void
name|tst_QHttp
operator|::
name|reconnect_state
parameter_list|(
name|int
name|state
parameter_list|)
block|{
if|if
condition|(
name|state
operator|==
name|QHttp
operator|::
name|Connecting
condition|)
block|{
operator|++
name|reconnect_state_connect_count
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|exitLoop
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setSocket
name|void
name|tst_QHttp
operator|::
name|setSocket
parameter_list|()
block|{
name|QHttp
modifier|*
name|http
init|=
operator|new
name|QHttp
decl_stmt|;
name|QPointer
argument_list|<
name|QTcpSocket
argument_list|>
name|replacementSocket
init|=
operator|new
name|QTcpSocket
decl_stmt|;
name|http
operator|->
name|setSocket
argument_list|(
name|replacementSocket
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
operator|delete
name|http
expr_stmt|;
name|QVERIFY
argument_list|(
name|replacementSocket
argument_list|)
expr_stmt|;
operator|delete
name|replacementSocket
expr_stmt|;
block|}
end_function
begin_class
DECL|class|Server
class|class
name|Server
super|:
specifier|public
name|QTcpServer
block|{
name|Q_OBJECT
public|public:
DECL|function|Server
name|Server
parameter_list|()
block|{
name|connect
argument_list|(
name|this
argument_list|,
name|SIGNAL
argument_list|(
name|newConnection
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|serveConnection
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
private|private
name|slots
private|:
DECL|function|serveConnection
name|void
name|serveConnection
parameter_list|()
block|{
name|QTcpSocket
modifier|*
name|socket
init|=
name|nextPendingConnection
argument_list|()
decl_stmt|;
name|socket
operator|->
name|write
argument_list|(
literal|"HTTP/1.1 404 Not found\r\n"
literal|"content-length: 4\r\n\r\nabcd"
argument_list|)
expr_stmt|;
name|socket
operator|->
name|disconnectFromHost
argument_list|()
expr_stmt|;
block|}
empty_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|unexpectedRemoteClose
name|void
name|tst_QHttp
operator|::
name|unexpectedRemoteClose
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|int
argument_list|,
name|proxyType
argument_list|)
expr_stmt|;
if|if
condition|(
name|proxyType
operator|==
name|QNetworkProxy
operator|::
name|Socks5Proxy
condition|)
block|{
comment|// This test doesn't make sense for SOCKS5
return|return;
block|}
name|Server
name|server
decl_stmt|;
name|server
operator|.
name|listen
argument_list|()
expr_stmt|;
name|QCoreApplication
operator|::
name|instance
argument_list|()
operator|->
name|processEvents
argument_list|()
expr_stmt|;
name|QEventLoop
name|loop
decl_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|3000
argument_list|,
operator|&
name|loop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QHttp
name|http
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|http
argument_list|,
name|SIGNAL
argument_list|(
name|done
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
operator|&
name|loop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QSignalSpy
name|finishedSpy
argument_list|(
operator|&
name|http
argument_list|,
name|SIGNAL
argument_list|(
name|requestFinished
argument_list|(
name|int
argument_list|,
name|bool
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|doneSpy
argument_list|(
operator|&
name|http
argument_list|,
name|SIGNAL
argument_list|(
name|done
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|http
operator|.
name|setHost
argument_list|(
literal|"localhost"
argument_list|,
name|server
operator|.
name|serverPort
argument_list|()
argument_list|)
expr_stmt|;
name|http
operator|.
name|get
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|http
operator|.
name|get
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|http
operator|.
name|get
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|loop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|finishedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|finishedSpy
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toBool
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|finishedSpy
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toBool
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|finishedSpy
operator|.
name|at
argument_list|(
literal|3
argument_list|)
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toBool
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|doneSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|doneSpy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toBool
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|pctEncodedPath
name|void
name|tst_QHttp
operator|::
name|pctEncodedPath
parameter_list|()
block|{
name|QHttpRequestHeader
name|header
decl_stmt|;
name|header
operator|.
name|setRequest
argument_list|(
literal|"GET"
argument_list|,
literal|"/index.asp/a=%20&b=%20&c=%20"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|header
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"GET /index.asp/a=%20&b=%20&c=%20 HTTP/1.1\r\n\r\n"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|caseInsensitiveKeys
name|void
name|tst_QHttp
operator|::
name|caseInsensitiveKeys
parameter_list|()
block|{
name|QHttpResponseHeader
name|header
argument_list|(
literal|"HTTP/1.1 200 OK\r\nContent-Length: 213\r\nX-Been-There: True\r\nLocation: http://www.TrollTech.com/\r\n\r\n"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|header
operator|.
name|hasKey
argument_list|(
literal|"Content-Length"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|header
operator|.
name|hasKey
argument_list|(
literal|"X-Been-There"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|header
operator|.
name|hasKey
argument_list|(
literal|"Location"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|header
operator|.
name|hasKey
argument_list|(
literal|"content-length"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|header
operator|.
name|hasKey
argument_list|(
literal|"x-been-there"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|header
operator|.
name|hasKey
argument_list|(
literal|"location"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|header
operator|.
name|value
argument_list|(
literal|"Content-Length"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"213"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|header
operator|.
name|value
argument_list|(
literal|"X-Been-There"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"True"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|header
operator|.
name|value
argument_list|(
literal|"Location"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"http://www.TrollTech.com/"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|header
operator|.
name|value
argument_list|(
literal|"content-length"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"213"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|header
operator|.
name|value
argument_list|(
literal|"x-been-there"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"True"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|header
operator|.
name|value
argument_list|(
literal|"location"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"http://www.TrollTech.com/"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|header
operator|.
name|allValues
argument_list|(
literal|"location"
argument_list|)
argument_list|,
name|QStringList
argument_list|(
literal|"http://www.TrollTech.com/"
argument_list|)
argument_list|)
expr_stmt|;
name|header
operator|.
name|addValue
argument_list|(
literal|"Content-Length"
argument_list|,
literal|"213"
argument_list|)
expr_stmt|;
name|header
operator|.
name|addValue
argument_list|(
literal|"Content-Length"
argument_list|,
literal|"214"
argument_list|)
expr_stmt|;
name|header
operator|.
name|addValue
argument_list|(
literal|"Content-Length"
argument_list|,
literal|"215"
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
name|header
operator|.
name|toString
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|proxyAuthenticationRequired
name|void
name|tst_QHttp
operator|::
name|proxyAuthenticationRequired
parameter_list|(
specifier|const
name|QNetworkProxy
modifier|&
parameter_list|,
name|QAuthenticator
modifier|*
name|auth
parameter_list|)
block|{
name|proxyAuthCalled
operator|=
literal|true
expr_stmt|;
name|auth
operator|->
name|setUser
argument_list|(
literal|"qsockstest"
argument_list|)
expr_stmt|;
name|auth
operator|->
name|setPassword
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|postAuthNtlm
name|void
name|tst_QHttp
operator|::
name|postAuthNtlm
parameter_list|()
block|{
name|QSKIP
argument_list|(
literal|"NTLM not working"
argument_list|)
expr_stmt|;
name|QHostInfo
name|info
init|=
name|QHostInfo
operator|::
name|fromName
argument_list|(
name|QHostInfo
operator|::
name|localHostName
argument_list|()
argument_list|)
decl_stmt|;
name|QByteArray
name|postData
argument_list|(
literal|"Hello World"
argument_list|)
decl_stmt|;
name|QHttp
name|http
decl_stmt|;
name|http
operator|.
name|setHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|)
expr_stmt|;
name|http
operator|.
name|setProxy
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|3130
argument_list|)
expr_stmt|;
name|http
operator|.
name|post
argument_list|(
literal|"/"
argument_list|,
name|postData
argument_list|)
expr_stmt|;
name|proxyAuthCalled
operator|=
literal|false
expr_stmt|;
name|connect
argument_list|(
operator|&
name|http
argument_list|,
name|SIGNAL
argument_list|(
name|proxyAuthenticationRequired
argument_list|(
name|QNetworkProxy
argument_list|,
name|QAuthenticator
operator|*
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|proxyAuthenticationRequired
argument_list|(
name|QNetworkProxy
argument_list|,
name|QAuthenticator
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|http
argument_list|,
name|SIGNAL
argument_list|(
name|done
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|disconnect
argument_list|(
operator|&
name|http
argument_list|,
name|SIGNAL
argument_list|(
name|done
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proxyAuthCalled
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_empty_stmt
empty_stmt|;
end_empty_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_OPENSSL
end_ifndef
begin_function
DECL|function|proxyAndSsl
name|void
name|tst_QHttp
operator|::
name|proxyAndSsl
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
return|return;
name|QHttp
name|http
decl_stmt|;
name|http
operator|.
name|setHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
name|QHttp
operator|::
name|ConnectionModeHttps
argument_list|)
expr_stmt|;
name|http
operator|.
name|setProxy
argument_list|(
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|HttpProxy
argument_list|,
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|3129
argument_list|)
argument_list|)
expr_stmt|;
name|http
operator|.
name|get
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|proxyAuthCalled
operator|=
literal|false
expr_stmt|;
name|connect
argument_list|(
operator|&
name|http
argument_list|,
name|SIGNAL
argument_list|(
name|proxyAuthenticationRequired
argument_list|(
name|QNetworkProxy
argument_list|,
name|QAuthenticator
operator|*
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|proxyAuthenticationRequired
argument_list|(
name|QNetworkProxy
argument_list|,
name|QAuthenticator
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|http
argument_list|,
name|SIGNAL
argument_list|(
name|sslErrors
argument_list|(
name|QList
argument_list|<
name|QSslError
argument_list|>
argument_list|)
argument_list|)
argument_list|,
operator|&
name|http
argument_list|,
name|SLOT
argument_list|(
name|ignoreSslErrors
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|http
argument_list|,
name|SIGNAL
argument_list|(
name|done
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|disconnect
argument_list|(
operator|&
name|http
argument_list|,
name|SIGNAL
argument_list|(
name|done
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proxyAuthCalled
argument_list|)
expr_stmt|;
name|QHttpResponseHeader
name|header
init|=
name|http
operator|.
name|lastResponse
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|header
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|header
operator|.
name|statusCode
argument_list|()
operator|<
literal|400
argument_list|)
expr_stmt|;
comment|// Should be 200, but as long as it's not an error, we're happy
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_OPENSSL
end_ifndef
begin_function
DECL|function|cachingProxyAndSsl
name|void
name|tst_QHttp
operator|::
name|cachingProxyAndSsl
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
return|return;
name|QHttp
name|http
decl_stmt|;
name|http
operator|.
name|setHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
name|QHttp
operator|::
name|ConnectionModeHttps
argument_list|)
expr_stmt|;
name|http
operator|.
name|setProxy
argument_list|(
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|HttpCachingProxy
argument_list|,
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|3129
argument_list|)
argument_list|)
expr_stmt|;
name|http
operator|.
name|get
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|proxyAuthCalled
operator|=
literal|false
expr_stmt|;
name|connect
argument_list|(
operator|&
name|http
argument_list|,
name|SIGNAL
argument_list|(
name|proxyAuthenticationRequired
argument_list|(
name|QNetworkProxy
argument_list|,
name|QAuthenticator
operator|*
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|proxyAuthenticationRequired
argument_list|(
name|QNetworkProxy
argument_list|,
name|QAuthenticator
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|http
argument_list|,
name|SIGNAL
argument_list|(
name|done
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|3
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|disconnect
argument_list|(
operator|&
name|http
argument_list|,
name|SIGNAL
argument_list|(
name|done
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|proxyAuthCalled
argument_list|)
expr_stmt|;
comment|// NOT called! QHttp should get a socket error
name|QVERIFY
argument_list|(
name|http
operator|.
name|state
argument_list|()
operator|!=
name|QHttp
operator|::
name|Connected
argument_list|)
expr_stmt|;
name|QHttpResponseHeader
name|header
init|=
name|http
operator|.
name|lastResponse
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|header
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|emptyBodyInReply
name|void
name|tst_QHttp
operator|::
name|emptyBodyInReply
parameter_list|()
block|{
comment|// Note: if this test starts failing, please verify the date on the file
comment|// returned by Apache on http://netiks.troll.no/
comment|// It is right now hard-coded to the date below
name|QHttp
name|http
decl_stmt|;
name|http
operator|.
name|setHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|)
expr_stmt|;
name|QHttpRequestHeader
name|headers
argument_list|(
literal|"GET"
argument_list|,
literal|"/"
argument_list|)
decl_stmt|;
name|headers
operator|.
name|addValue
argument_list|(
literal|"If-Modified-Since"
argument_list|,
literal|"Sun, 16 Nov 2008 12:29:51 GMT"
argument_list|)
expr_stmt|;
name|headers
operator|.
name|addValue
argument_list|(
literal|"Host"
argument_list|,
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|)
expr_stmt|;
name|http
operator|.
name|request
argument_list|(
name|headers
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|http
argument_list|,
name|SIGNAL
argument_list|(
name|done
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|disconnect
argument_list|(
operator|&
name|http
argument_list|,
name|SIGNAL
argument_list|(
name|done
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
comment|// check the reply
if|if
condition|(
name|http
operator|.
name|lastResponse
argument_list|()
operator|.
name|statusCode
argument_list|()
operator|!=
literal|304
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
name|http
operator|.
name|lastResponse
argument_list|()
operator|.
name|statusCode
argument_list|()
operator|<<
name|qPrintable
argument_list|(
name|http
operator|.
name|lastResponse
argument_list|()
operator|.
name|reasonPhrase
argument_list|()
argument_list|)
expr_stmt|;
name|qWarning
argument_list|()
operator|<<
literal|"Last-Modified:"
operator|<<
name|qPrintable
argument_list|(
name|http
operator|.
name|lastResponse
argument_list|()
operator|.
name|value
argument_list|(
literal|"last-modified"
argument_list|)
argument_list|)
expr_stmt|;
name|QFAIL
argument_list|(
literal|"Server replied with the wrong status code; see warning output"
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|abortSender
name|void
name|tst_QHttp
operator|::
name|abortSender
parameter_list|()
block|{
name|QHttp
modifier|*
name|http
init|=
name|qobject_cast
argument_list|<
name|QHttp
operator|*
argument_list|>
argument_list|(
name|sender
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
name|http
condition|)
name|http
operator|->
name|abort
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|abortInReadyRead
name|void
name|tst_QHttp
operator|::
name|abortInReadyRead
parameter_list|()
block|{
name|QHttp
name|http
decl_stmt|;
name|http
operator|.
name|setHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|)
expr_stmt|;
name|http
operator|.
name|get
argument_list|(
literal|"/qtest/bigfile"
argument_list|)
expr_stmt|;
name|qRegisterMetaType
argument_list|<
name|QHttpResponseHeader
argument_list|>
argument_list|()
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
operator|&
name|http
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|(
name|QHttpResponseHeader
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|http
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|(
name|QHttpResponseHeader
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|abortSender
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|http
argument_list|,
name|SIGNAL
argument_list|(
name|done
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|disconnect
argument_list|(
operator|&
name|http
argument_list|,
name|SIGNAL
argument_list|(
name|done
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|,
literal|"Network timeout"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|http
operator|.
name|state
argument_list|()
operator|!=
name|QHttp
operator|::
name|Connected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|abortInResponseHeaderReceived
name|void
name|tst_QHttp
operator|::
name|abortInResponseHeaderReceived
parameter_list|()
block|{
name|QHttp
name|http
decl_stmt|;
name|http
operator|.
name|setHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|)
expr_stmt|;
name|http
operator|.
name|get
argument_list|(
literal|"/qtest/bigfile"
argument_list|)
expr_stmt|;
name|qRegisterMetaType
argument_list|<
name|QHttpResponseHeader
argument_list|>
argument_list|()
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
operator|&
name|http
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|(
name|QHttpResponseHeader
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|http
argument_list|,
name|SIGNAL
argument_list|(
name|responseHeaderReceived
argument_list|(
name|QHttpResponseHeader
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|abortSender
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|http
argument_list|,
name|SIGNAL
argument_list|(
name|done
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|disconnect
argument_list|(
operator|&
name|http
argument_list|,
name|SIGNAL
argument_list|(
name|done
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|,
literal|"Network timeout"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|http
operator|.
name|state
argument_list|()
operator|!=
name|QHttp
operator|::
name|Connected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|connectionClose
name|void
name|tst_QHttp
operator|::
name|connectionClose
parameter_list|()
block|{
comment|// This was added in response to bug 176822
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
return|return;
name|QHttp
name|http
decl_stmt|;
name|ClosingServer
name|server
decl_stmt|;
name|http
operator|.
name|setHost
argument_list|(
literal|"localhost"
argument_list|,
name|QHttp
operator|::
name|ConnectionModeHttps
argument_list|,
name|server
operator|.
name|serverPort
argument_list|()
argument_list|)
expr_stmt|;
name|http
operator|.
name|get
argument_list|(
literal|"/login/gateway/processLogin"
argument_list|)
expr_stmt|;
comment|// another possibility:
comment|//http.setHost("nexus.passport.com", QHttp::ConnectionModeHttps, 443);
comment|//http.get("/rdr/pprdr.asp");
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|http
argument_list|,
name|SIGNAL
argument_list|(
name|done
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|900
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|disconnect
argument_list|(
operator|&
name|http
argument_list|,
name|SIGNAL
argument_list|(
name|done
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|nestedEventLoop_slot
name|void
name|tst_QHttp
operator|::
name|nestedEventLoop_slot
parameter_list|(
name|int
name|id
parameter_list|)
block|{
if|if
condition|(
operator|!
name|ids
operator|.
name|contains
argument_list|(
name|id
argument_list|)
condition|)
return|return;
name|QEventLoop
name|subloop
decl_stmt|;
comment|// 16 seconds: fluke times out in 15 seconds, which triggers a QTcpSocket error
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|16000
argument_list|,
operator|&
name|subloop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|subloop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|exitLoop
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|nestedEventLoop
name|void
name|tst_QHttp
operator|::
name|nestedEventLoop
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
return|return;
name|http
operator|=
operator|new
name|QHttp
expr_stmt|;
name|http
operator|->
name|setHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|)
expr_stmt|;
name|int
name|getId
init|=
name|http
operator|->
name|get
argument_list|(
literal|"/"
argument_list|)
decl_stmt|;
name|ids
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ids
operator|<<
name|getId
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
name|http
argument_list|,
name|SIGNAL
argument_list|(
name|requestStarted
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spy2
argument_list|(
name|http
argument_list|,
name|SIGNAL
argument_list|(
name|done
argument_list|(
name|bool
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|http
argument_list|,
name|SIGNAL
argument_list|(
name|requestFinished
argument_list|(
name|int
argument_list|,
name|bool
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|nestedEventLoop_slot
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|20
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|,
literal|"Network timeout"
argument_list|)
expr_stmt|;
comment|// Find out how many signals with the first argument equalling our id were found
name|int
name|spyCount
init|=
literal|0
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|spy
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
if|if
condition|(
name|spy
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
operator|==
name|getId
condition|)
operator|++
name|spyCount
expr_stmt|;
comment|// each signal spied should have been emitted only once
name|QCOMPARE
argument_list|(
name|spyCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy2
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QHttp
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qhttp.moc"
end_include
end_unit
