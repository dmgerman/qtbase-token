begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|// Use if you need
end_comment
begin_decl_stmt
name|class
name|DummyHttpServer
range|:
name|public
name|QTcpServer
block|{
name|Q_OBJECT
name|public
operator|:
name|DummyHttpServer
argument_list|()
operator|:
name|phase
argument_list|(
argument|Header
argument_list|)
block|{
name|listen
argument_list|()
block|; }
name|protected
operator|:
expr|enum
block|{
name|Header
block|,
name|Data1
block|,
name|Data2
block|,
name|Close
block|}
name|phase
block|;
name|void
name|incomingConnection
argument_list|(
argument|int socketDescriptor
argument_list|)
block|{
name|QSslSocket
operator|*
name|socket
operator|=
name|new
name|QSslSocket
argument_list|(
name|this
argument_list|)
block|;
name|socket
operator|->
name|setSocketDescriptor
argument_list|(
name|socketDescriptor
argument_list|,
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
block|;
name|socket
operator|->
name|ignoreSslErrors
argument_list|()
block|;
name|socket
operator|->
name|startServerEncryption
argument_list|()
block|;
name|connect
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|handleReadyRead
argument_list|()
argument_list|)
argument_list|)
block|;     }
name|public
name|slots
operator|:
name|void
name|handleReadyRead
argument_list|()
block|{
name|QTcpSocket
operator|*
name|socket
operator|=
name|static_cast
operator|<
name|QTcpSocket
operator|*
operator|>
operator|(
name|sender
argument_list|()
operator|)
block|;
name|socket
operator|->
name|readAll
argument_list|()
block|;
if|if
condition|(
name|phase
operator|!=
name|Header
condition|)
return|return;
name|phase
operator|=
name|Data1
block|;
specifier|static
specifier|const
name|char
name|header
index|[]
operator|=
literal|"HTTP/1.0 200 OK\r\n"
literal|"Date: Fri, 07 Sep 2007 12:33:18 GMT\r\n"
literal|"Server: Apache\r\n"
literal|"Expires:\r\n"
literal|"Cache-Control:\r\n"
literal|"Pragma:\r\n"
literal|"Last-Modified: Thu, 06 Sep 2007 08:52:06 +0000\r\n"
literal|"Etag: a700f59a6ccb1ad39af68d998aa36fb1\r\n"
literal|"Vary: Accept-Encoding\r\n"
literal|"Content-Length: 6560\r\n"
literal|"Connection: close\r\n"
literal|"Content-Type: text/html; charset=utf-8\r\n"
literal|"\r\n"
block|;
name|socket
operator|->
name|write
argument_list|(
name|header
argument_list|,
sizeof|sizeof
name|header
operator|-
literal|1
argument_list|)
block|;
name|connect
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|bytesWritten
argument_list|(
name|qint64
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|handleBytesWritten
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
block|;     }
name|void
name|handleBytesWritten
argument_list|()
block|{
name|QTcpSocket
operator|*
name|socket
operator|=
name|static_cast
operator|<
name|QTcpSocket
operator|*
operator|>
operator|(
name|sender
argument_list|()
operator|)
block|;
if|if
condition|(
name|socket
operator|->
name|bytesToWrite
argument_list|()
operator|!=
literal|0
condition|)
return|return;
end_decl_stmt
begin_if
if|if
condition|(
name|phase
operator|==
name|Data1
condition|)
block|{
name|QByteArray
name|data
argument_list|(
literal|4096
argument_list|,
literal|'a'
argument_list|)
decl_stmt|;
name|socket
operator|->
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|phase
operator|=
name|Data2
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|phase
operator|==
name|Data2
condition|)
block|{
name|QByteArray
name|data
argument_list|(
literal|2464
argument_list|,
literal|'a'
argument_list|)
decl_stmt|;
name|socket
operator|->
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|phase
operator|=
name|Close
expr_stmt|;
block|}
else|else
block|{
comment|//socket->disconnectFromHost();
comment|//socket->deleteLater();
block|}
end_if
begin_empty_stmt
unit|} }
empty_stmt|;
end_empty_stmt
end_unit
