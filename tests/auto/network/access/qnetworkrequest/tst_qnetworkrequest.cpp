begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtCore/QUrl>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/QNetworkRequest>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/QNetworkCookie>
end_include
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QList<QByteArray>
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QNetworkRequest::KnownHeaders
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QVariant
argument_list|)
end_macro
begin_class
DECL|class|tst_QNetworkRequest
class|class
name|tst_QNetworkRequest
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|ctor_data
parameter_list|()
function_decl|;
name|void
name|ctor
parameter_list|()
function_decl|;
name|void
name|setUrl_data
parameter_list|()
function_decl|;
name|void
name|setUrl
parameter_list|()
function_decl|;
name|void
name|setRawHeader_data
parameter_list|()
function_decl|;
name|void
name|setRawHeader
parameter_list|()
function_decl|;
name|void
name|rawHeaderList_data
parameter_list|()
function_decl|;
name|void
name|rawHeaderList
parameter_list|()
function_decl|;
name|void
name|setHeader_data
parameter_list|()
function_decl|;
name|void
name|setHeader
parameter_list|()
function_decl|;
name|void
name|rawHeaderParsing_data
parameter_list|()
function_decl|;
name|void
name|rawHeaderParsing
parameter_list|()
function_decl|;
name|void
name|originatingObject
parameter_list|()
function_decl|;
name|void
name|removeHeader
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_namespace
DECL|namespace|QTest
namespace|namespace
name|QTest
block|{
template|template
parameter_list|<>
DECL|function|toString
name|char
modifier|*
name|toString
parameter_list|(
specifier|const
name|QNetworkCookie
modifier|&
name|cookie
parameter_list|)
block|{
return|return
name|qstrdup
argument_list|(
name|cookie
operator|.
name|toRawForm
argument_list|()
argument_list|)
return|;
block|}
template|template
parameter_list|<>
DECL|function|toString
name|char
modifier|*
name|toString
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
modifier|&
name|list
parameter_list|)
block|{
name|QString
name|result
init|=
literal|"QList("
decl_stmt|;
name|bool
name|first
init|=
literal|true
decl_stmt|;
foreach|foreach
control|(
name|QNetworkCookie
name|cookie
decl|,
name|list
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|result
operator|+=
literal|", "
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|result
operator|+=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"QNetworkCookie(%1)"
argument_list|)
operator|.
name|arg
argument_list|(
name|QLatin1String
argument_list|(
name|cookie
operator|.
name|toRawForm
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|qstrdup
argument_list|(
name|result
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
return|;
block|}
block|}
end_namespace
begin_function
name|QT_END_NAMESPACE
DECL|function|ctor_data
name|void
name|tst_QNetworkRequest
operator|::
name|ctor_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QUrl
argument_list|>
argument_list|(
literal|"url"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"nothing"
argument_list|)
operator|<<
name|QUrl
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QUrl
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"http"
argument_list|)
operator|<<
name|QUrl
argument_list|(
literal|"http://qt.nokia.com"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ctor
name|void
name|tst_QNetworkRequest
operator|::
name|ctor
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QUrl
argument_list|,
name|url
argument_list|)
expr_stmt|;
if|if
condition|(
name|qstrcmp
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|,
literal|"nothing"
argument_list|)
operator|==
literal|0
condition|)
block|{
name|QNetworkRequest
name|request
decl_stmt|;
name|QCOMPARE
argument_list|(
name|request
operator|.
name|url
argument_list|()
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QNetworkRequest
name|request
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|request
operator|.
name|url
argument_list|()
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setUrl_data
name|void
name|tst_QNetworkRequest
operator|::
name|setUrl_data
parameter_list|()
block|{
name|ctor_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setUrl
name|void
name|tst_QNetworkRequest
operator|::
name|setUrl
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QUrl
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|QNetworkRequest
name|request
decl_stmt|;
if|if
condition|(
name|qstrcmp
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|,
literal|"nothing"
argument_list|)
operator|!=
literal|0
condition|)
name|request
operator|.
name|setUrl
argument_list|(
name|url
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|request
operator|.
name|url
argument_list|()
argument_list|,
name|url
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setRawHeader_data
name|void
name|tst_QNetworkRequest
operator|::
name|setRawHeader_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"header"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"headerToGet"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"expectedValue"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"hasHeader"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null-header"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QByteArray
argument_list|()
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty-header"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null-value"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
name|QByteArray
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty-value"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty-value-vs-null"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|""
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"UPPER-UPPER"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"FOO"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"FOO"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"UPPER-Mixed"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"FOO"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Foo"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"UPPER-lower"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"FOO"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Mixed-UPPER"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Foo"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"FOO"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Mixed-Mixed"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Foo"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Foo"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Mixed-lower"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Foo"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"lower-UPPER"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"FOO"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"lower-Mixed"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"Foo"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"lower-lower"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"foo"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"abc"
argument_list|)
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setRawHeader
name|void
name|tst_QNetworkRequest
operator|::
name|setRawHeader
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|header
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|headerToGet
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|expectedValue
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|hasHeader
argument_list|)
expr_stmt|;
name|QNetworkRequest
name|request
decl_stmt|;
name|request
operator|.
name|setRawHeader
argument_list|(
name|header
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|request
operator|.
name|hasRawHeader
argument_list|(
name|headerToGet
argument_list|)
argument_list|,
name|hasHeader
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|request
operator|.
name|rawHeader
argument_list|(
name|headerToGet
argument_list|)
argument_list|,
name|expectedValue
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rawHeaderList_data
name|void
name|tst_QNetworkRequest
operator|::
name|rawHeaderList_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QList
argument_list|<
name|QByteArray
argument_list|>
argument_list|>
argument_list|(
literal|"set"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QList
argument_list|<
name|QByteArray
argument_list|>
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QList
argument_list|<
name|QByteArray
argument_list|>
argument_list|()
operator|<<
name|QList
argument_list|<
name|QByteArray
argument_list|>
argument_list|()
expr_stmt|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|set
decl_stmt|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|expected
decl_stmt|;
name|set
operator|<<
literal|"foo"
expr_stmt|;
name|expected
operator|=
name|set
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"one"
argument_list|)
operator|<<
name|set
operator|<<
name|expected
expr_stmt|;
name|set
operator|<<
literal|"bar"
expr_stmt|;
name|expected
operator|=
name|set
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"two"
argument_list|)
operator|<<
name|set
operator|<<
name|expected
expr_stmt|;
name|set
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expected
operator|.
name|clear
argument_list|()
expr_stmt|;
name|set
operator|<<
literal|"foo"
operator|<<
literal|"foo"
expr_stmt|;
name|expected
operator|<<
literal|"foo"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"repeated"
argument_list|)
operator|<<
name|set
operator|<<
name|expected
expr_stmt|;
name|set
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expected
operator|.
name|clear
argument_list|()
expr_stmt|;
name|set
operator|<<
literal|"foo"
operator|<<
literal|"bar"
operator|<<
literal|"foo"
expr_stmt|;
name|expected
operator|<<
literal|"bar"
operator|<<
literal|"foo"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"repeated-interleaved"
argument_list|)
operator|<<
name|set
operator|<<
name|expected
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rawHeaderList
name|void
name|tst_QNetworkRequest
operator|::
name|rawHeaderList
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QList
argument_list|<
name|QByteArray
argument_list|>
argument_list|,
name|set
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QList
argument_list|<
name|QByteArray
argument_list|>
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QNetworkRequest
name|request
decl_stmt|;
foreach|foreach
control|(
name|QByteArray
name|header
decl|,
name|set
control|)
name|request
operator|.
name|setRawHeader
argument_list|(
name|header
argument_list|,
literal|"a value"
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|got
init|=
name|request
operator|.
name|rawHeaderList
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|got
operator|.
name|size
argument_list|()
argument_list|,
name|expected
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|got
operator|.
name|size
argument_list|()
condition|;
operator|++
name|i
control|)
name|QCOMPARE
argument_list|(
name|got
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|expected
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setHeader_data
name|void
name|tst_QNetworkRequest
operator|::
name|setHeader_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QNetworkRequest
operator|::
name|KnownHeaders
argument_list|>
argument_list|(
literal|"cookedHeader"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"cookedValue"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"success"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"rawHeader"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"rawValue"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Content-Type-Null"
argument_list|)
operator|<<
name|QNetworkRequest
operator|::
name|ContentTypeHeader
operator|<<
name|QVariant
argument_list|()
operator|<<
literal|false
operator|<<
literal|"Content-Type"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Content-Type-String"
argument_list|)
operator|<<
name|QNetworkRequest
operator|::
name|ContentTypeHeader
operator|<<
name|QVariant
argument_list|(
literal|"text/html"
argument_list|)
operator|<<
literal|true
operator|<<
literal|"Content-Type"
operator|<<
literal|"text/html"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Content-Type-ByteArray"
argument_list|)
operator|<<
name|QNetworkRequest
operator|::
name|ContentTypeHeader
operator|<<
name|QVariant
argument_list|(
literal|"text/html"
argument_list|)
operator|<<
literal|true
operator|<<
literal|"Content-Type"
operator|<<
literal|"text/html"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Content-Length-Int"
argument_list|)
operator|<<
name|QNetworkRequest
operator|::
name|ContentLengthHeader
operator|<<
name|QVariant
argument_list|(
literal|1
argument_list|)
operator|<<
literal|true
operator|<<
literal|"Content-Length"
operator|<<
literal|"1"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Content-Length-Int64"
argument_list|)
operator|<<
name|QNetworkRequest
operator|::
name|ContentLengthHeader
operator|<<
name|QVariant
argument_list|(
name|qint64
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|<<
literal|true
operator|<<
literal|"Content-Length"
operator|<<
literal|"1"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Location-String"
argument_list|)
operator|<<
name|QNetworkRequest
operator|::
name|LocationHeader
operator|<<
name|QVariant
argument_list|(
literal|"http://foo/with space"
argument_list|)
operator|<<
literal|true
operator|<<
literal|"Location"
operator|<<
literal|"http://foo/with space"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Location-ByteArray"
argument_list|)
operator|<<
name|QNetworkRequest
operator|::
name|LocationHeader
operator|<<
name|QVariant
argument_list|(
literal|"http://foo/with space"
argument_list|)
operator|<<
literal|true
operator|<<
literal|"Location"
operator|<<
literal|"http://foo/with space"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Location-Url"
argument_list|)
operator|<<
name|QNetworkRequest
operator|::
name|LocationHeader
operator|<<
name|QVariant
argument_list|(
name|QUrl
argument_list|(
literal|"http://foo/with space"
argument_list|)
argument_list|)
operator|<<
literal|true
operator|<<
literal|"Location"
operator|<<
literal|"http://foo/with%20space"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Last-Modified-Date"
argument_list|)
operator|<<
name|QNetworkRequest
operator|::
name|LastModifiedHeader
operator|<<
name|QVariant
argument_list|(
name|QDate
argument_list|(
literal|2007
argument_list|,
literal|11
argument_list|,
literal|01
argument_list|)
argument_list|)
operator|<<
literal|true
operator|<<
literal|"Last-Modified"
operator|<<
literal|"Thu, 01 Nov 2007 00:00:00 GMT"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Last-Modified-DateTime"
argument_list|)
operator|<<
name|QNetworkRequest
operator|::
name|LastModifiedHeader
operator|<<
name|QVariant
argument_list|(
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2007
argument_list|,
literal|11
argument_list|,
literal|01
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|18
argument_list|,
literal|8
argument_list|,
literal|30
argument_list|)
argument_list|,
name|Qt
operator|::
name|UTC
argument_list|)
argument_list|)
operator|<<
literal|true
operator|<<
literal|"Last-Modified"
operator|<<
literal|"Thu, 01 Nov 2007 18:08:30 GMT"
expr_stmt|;
name|QNetworkCookie
name|cookie
decl_stmt|;
name|cookie
operator|.
name|setName
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|cookie
operator|.
name|setValue
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Cookie-1"
argument_list|)
operator|<<
name|QNetworkRequest
operator|::
name|CookieHeader
operator|<<
name|qVariantFromValue
argument_list|(
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
argument_list|()
operator|<<
name|cookie
argument_list|)
operator|<<
literal|true
operator|<<
literal|"Cookie"
operator|<<
literal|"a=b"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"SetCookie-1"
argument_list|)
operator|<<
name|QNetworkRequest
operator|::
name|SetCookieHeader
operator|<<
name|qVariantFromValue
argument_list|(
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
argument_list|()
operator|<<
name|cookie
argument_list|)
operator|<<
literal|true
operator|<<
literal|"Set-Cookie"
operator|<<
literal|"a=b"
expr_stmt|;
name|cookie
operator|.
name|setPath
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Cookie-2"
argument_list|)
operator|<<
name|QNetworkRequest
operator|::
name|CookieHeader
operator|<<
name|qVariantFromValue
argument_list|(
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
argument_list|()
operator|<<
name|cookie
argument_list|)
operator|<<
literal|true
operator|<<
literal|"Cookie"
operator|<<
literal|"a=b"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"SetCookie-2"
argument_list|)
operator|<<
name|QNetworkRequest
operator|::
name|SetCookieHeader
operator|<<
name|qVariantFromValue
argument_list|(
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
argument_list|()
operator|<<
name|cookie
argument_list|)
operator|<<
literal|true
operator|<<
literal|"Set-Cookie"
operator|<<
literal|"a=b; path=/"
expr_stmt|;
name|QNetworkCookie
name|cookie2
decl_stmt|;
name|cookie2
operator|.
name|setName
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|cookie2
operator|.
name|setValue
argument_list|(
literal|"d"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Cookie-3"
argument_list|)
operator|<<
name|QNetworkRequest
operator|::
name|CookieHeader
operator|<<
name|qVariantFromValue
argument_list|(
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
argument_list|()
operator|<<
name|cookie
operator|<<
name|cookie2
argument_list|)
operator|<<
literal|true
operator|<<
literal|"Cookie"
operator|<<
literal|"a=b; c=d"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"SetCookie-3"
argument_list|)
operator|<<
name|QNetworkRequest
operator|::
name|SetCookieHeader
operator|<<
name|qVariantFromValue
argument_list|(
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
argument_list|()
operator|<<
name|cookie
operator|<<
name|cookie2
argument_list|)
operator|<<
literal|true
operator|<<
literal|"Set-Cookie"
operator|<<
literal|"a=b; path=/, c=d"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setHeader
name|void
name|tst_QNetworkRequest
operator|::
name|setHeader
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QNetworkRequest
operator|::
name|KnownHeaders
argument_list|,
name|cookedHeader
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|cookedValue
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|success
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|rawHeader
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|rawValue
argument_list|)
expr_stmt|;
name|QNetworkRequest
name|request
decl_stmt|;
name|request
operator|.
name|setHeader
argument_list|(
name|cookedHeader
argument_list|,
name|cookedValue
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|request
operator|.
name|header
argument_list|(
name|cookedHeader
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|,
operator|!
name|success
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|request
operator|.
name|hasRawHeader
argument_list|(
name|rawHeader
operator|.
name|toLatin1
argument_list|()
argument_list|)
argument_list|,
name|success
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|request
operator|.
name|rawHeader
argument_list|(
name|rawHeader
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|,
operator|!
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|success
condition|)
block|{
name|QCOMPARE
argument_list|(
name|request
operator|.
name|header
argument_list|(
name|cookedHeader
argument_list|)
argument_list|,
name|cookedValue
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
name|request
operator|.
name|rawHeader
argument_list|(
name|rawHeader
operator|.
name|toLatin1
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|rawValue
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|rawHeaderParsing_data
name|void
name|tst_QNetworkRequest
operator|::
name|rawHeaderParsing_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QNetworkRequest
operator|::
name|KnownHeaders
argument_list|>
argument_list|(
literal|"cookedHeader"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"cookedValue"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"success"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"rawHeader"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"rawValue"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Content-Type"
argument_list|)
operator|<<
name|QNetworkRequest
operator|::
name|ContentTypeHeader
operator|<<
name|QVariant
argument_list|(
literal|"text/html"
argument_list|)
operator|<<
literal|true
operator|<<
literal|"Content-Type"
operator|<<
literal|"text/html"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Content-Length"
argument_list|)
operator|<<
name|QNetworkRequest
operator|::
name|ContentLengthHeader
operator|<<
name|QVariant
argument_list|(
name|qint64
argument_list|(
literal|1
argument_list|)
argument_list|)
operator|<<
literal|true
operator|<<
literal|"Content-Length"
operator|<<
literal|" 1 "
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Location"
argument_list|)
operator|<<
name|QNetworkRequest
operator|::
name|LocationHeader
operator|<<
name|QVariant
argument_list|(
name|QUrl
argument_list|(
literal|"http://foo/with space"
argument_list|)
argument_list|)
operator|<<
literal|true
operator|<<
literal|"Location"
operator|<<
literal|"http://foo/with%20space"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Last-Modified-RFC1123"
argument_list|)
operator|<<
name|QNetworkRequest
operator|::
name|LastModifiedHeader
operator|<<
name|QVariant
argument_list|(
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1994
argument_list|,
literal|11
argument_list|,
literal|06
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|8
argument_list|,
literal|49
argument_list|,
literal|37
argument_list|)
argument_list|,
name|Qt
operator|::
name|UTC
argument_list|)
argument_list|)
operator|<<
literal|true
operator|<<
literal|"Last-Modified"
operator|<<
literal|"Sun, 06 Nov 1994 08:49:37 GMT"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Last-Modified-RFC850"
argument_list|)
operator|<<
name|QNetworkRequest
operator|::
name|LastModifiedHeader
operator|<<
name|QVariant
argument_list|(
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1994
argument_list|,
literal|11
argument_list|,
literal|06
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|8
argument_list|,
literal|49
argument_list|,
literal|37
argument_list|)
argument_list|,
name|Qt
operator|::
name|UTC
argument_list|)
argument_list|)
operator|<<
literal|true
operator|<<
literal|"Last-Modified"
operator|<<
literal|"Sunday, 06-Nov-94 08:49:37 GMT"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Last-Modified-asctime"
argument_list|)
operator|<<
name|QNetworkRequest
operator|::
name|LastModifiedHeader
operator|<<
name|QVariant
argument_list|(
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|1994
argument_list|,
literal|11
argument_list|,
literal|06
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|8
argument_list|,
literal|49
argument_list|,
literal|37
argument_list|)
argument_list|,
name|Qt
operator|::
name|UTC
argument_list|)
argument_list|)
operator|<<
literal|true
operator|<<
literal|"Last-Modified"
operator|<<
literal|"Sun Nov  6 08:49:37 1994"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Content-Length-invalid1"
argument_list|)
operator|<<
name|QNetworkRequest
operator|::
name|ContentLengthHeader
operator|<<
name|QVariant
argument_list|()
operator|<<
literal|false
operator|<<
literal|"Content-Length"
operator|<<
literal|"1a"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Content-Length-invalid2"
argument_list|)
operator|<<
name|QNetworkRequest
operator|::
name|ContentLengthHeader
operator|<<
name|QVariant
argument_list|()
operator|<<
literal|false
operator|<<
literal|"Content-Length"
operator|<<
literal|"a"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Location-invalid1"
argument_list|)
operator|<<
name|QNetworkRequest
operator|::
name|LocationHeader
operator|<<
name|QVariant
argument_list|()
operator|<<
literal|false
operator|<<
literal|"Location"
operator|<<
literal|"abc"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Location-invalid2"
argument_list|)
operator|<<
name|QNetworkRequest
operator|::
name|LocationHeader
operator|<<
name|QVariant
argument_list|()
operator|<<
literal|false
operator|<<
literal|"Location"
operator|<<
literal|"1http://foo"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Location-invalid3"
argument_list|)
operator|<<
name|QNetworkRequest
operator|::
name|LocationHeader
operator|<<
name|QVariant
argument_list|()
operator|<<
literal|false
operator|<<
literal|"Location"
operator|<<
literal|"http://foo/%gg"
expr_stmt|;
comment|// don't test for invalid dates because we may want to support broken servers in the future
name|QNetworkCookie
name|cookie
decl_stmt|;
name|cookie
operator|.
name|setName
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|cookie
operator|.
name|setValue
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Cookie-1"
argument_list|)
operator|<<
name|QNetworkRequest
operator|::
name|CookieHeader
operator|<<
name|qVariantFromValue
argument_list|(
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
argument_list|()
operator|<<
name|cookie
argument_list|)
operator|<<
literal|true
operator|<<
literal|"Cookie"
operator|<<
literal|"a=b"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"SetCookie-1"
argument_list|)
operator|<<
name|QNetworkRequest
operator|::
name|SetCookieHeader
operator|<<
name|qVariantFromValue
argument_list|(
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
argument_list|()
operator|<<
name|cookie
argument_list|)
operator|<<
literal|true
operator|<<
literal|"Set-Cookie"
operator|<<
literal|"a=b"
expr_stmt|;
name|cookie
operator|.
name|setPath
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"SetCookie-2"
argument_list|)
operator|<<
name|QNetworkRequest
operator|::
name|SetCookieHeader
operator|<<
name|qVariantFromValue
argument_list|(
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
argument_list|()
operator|<<
name|cookie
argument_list|)
operator|<<
literal|true
operator|<<
literal|"Set-Cookie"
operator|<<
literal|"a=b; path=/"
expr_stmt|;
name|QNetworkCookie
name|cookie2
decl_stmt|;
name|cookie
operator|.
name|setPath
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|cookie2
operator|.
name|setName
argument_list|(
literal|"c"
argument_list|)
expr_stmt|;
name|cookie2
operator|.
name|setValue
argument_list|(
literal|"d"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Cookie-3"
argument_list|)
operator|<<
name|QNetworkRequest
operator|::
name|CookieHeader
operator|<<
name|qVariantFromValue
argument_list|(
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
argument_list|()
operator|<<
name|cookie
operator|<<
name|cookie2
argument_list|)
operator|<<
literal|true
operator|<<
literal|"Cookie"
operator|<<
literal|"a=b; c=d"
expr_stmt|;
name|cookie
operator|.
name|setPath
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"SetCookie-3"
argument_list|)
operator|<<
name|QNetworkRequest
operator|::
name|SetCookieHeader
operator|<<
name|qVariantFromValue
argument_list|(
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
argument_list|()
operator|<<
name|cookie
operator|<<
name|cookie2
argument_list|)
operator|<<
literal|true
operator|<<
literal|"Set-Cookie"
operator|<<
literal|"a=b; path=/, c=d"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|rawHeaderParsing
name|void
name|tst_QNetworkRequest
operator|::
name|rawHeaderParsing
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QNetworkRequest
operator|::
name|KnownHeaders
argument_list|,
name|cookedHeader
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|cookedValue
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|success
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|rawHeader
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|rawValue
argument_list|)
expr_stmt|;
name|QNetworkRequest
name|request
decl_stmt|;
name|request
operator|.
name|setRawHeader
argument_list|(
name|rawHeader
operator|.
name|toLatin1
argument_list|()
argument_list|,
name|rawValue
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
comment|// even if it doesn't parse, it's as a raw header
name|QVERIFY
argument_list|(
name|request
operator|.
name|hasRawHeader
argument_list|(
name|rawHeader
operator|.
name|toLatin1
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|request
operator|.
name|hasRawHeader
argument_list|(
name|rawHeader
operator|.
name|toLower
argument_list|()
operator|.
name|toLatin1
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
name|request
operator|.
name|rawHeader
argument_list|(
name|rawHeader
operator|.
name|toLatin1
argument_list|()
argument_list|)
argument_list|)
argument_list|,
name|rawValue
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|request
operator|.
name|header
argument_list|(
name|cookedHeader
argument_list|)
operator|.
name|isNull
argument_list|()
argument_list|,
operator|!
name|success
argument_list|)
expr_stmt|;
if|if
condition|(
name|cookedValue
operator|.
name|type
argument_list|()
operator|!=
name|QVariant
operator|::
name|UserType
condition|)
name|QCOMPARE
argument_list|(
name|request
operator|.
name|header
argument_list|(
name|cookedHeader
argument_list|)
argument_list|,
name|cookedValue
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|cookedValue
operator|.
name|userType
argument_list|()
operator|==
name|qMetaTypeId
argument_list|<
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
argument_list|>
argument_list|()
condition|)
name|QCOMPARE
argument_list|(
name|qvariant_cast
argument_list|<
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
argument_list|>
argument_list|(
name|request
operator|.
name|header
argument_list|(
name|cookedHeader
argument_list|)
argument_list|)
argument_list|,
name|qvariant_cast
argument_list|<
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
argument_list|>
argument_list|(
name|cookedValue
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removeHeader
name|void
name|tst_QNetworkRequest
operator|::
name|removeHeader
parameter_list|()
block|{
name|QNetworkRequest
name|request
decl_stmt|;
name|request
operator|.
name|setRawHeader
argument_list|(
literal|"Foo"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|request
operator|.
name|hasRawHeader
argument_list|(
literal|"Foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|request
operator|.
name|hasRawHeader
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setRawHeader
argument_list|(
literal|"Foo"
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|request
operator|.
name|hasRawHeader
argument_list|(
literal|"Foo"
argument_list|)
argument_list|)
expr_stmt|;
comment|// same, but remove with different capitalisation
name|request
operator|.
name|setRawHeader
argument_list|(
literal|"Foo"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|request
operator|.
name|hasRawHeader
argument_list|(
literal|"Foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|request
operator|.
name|hasRawHeader
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setRawHeader
argument_list|(
literal|"foo"
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|request
operator|.
name|hasRawHeader
argument_list|(
literal|"Foo"
argument_list|)
argument_list|)
expr_stmt|;
comment|// same, but not the first
name|request
operator|.
name|setRawHeader
argument_list|(
literal|"Bar"
argument_list|,
literal|"2"
argument_list|)
expr_stmt|;
name|request
operator|.
name|setRawHeader
argument_list|(
literal|"Foo"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|request
operator|.
name|hasRawHeader
argument_list|(
literal|"Foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|request
operator|.
name|hasRawHeader
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setRawHeader
argument_list|(
literal|"foo"
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|request
operator|.
name|hasRawHeader
argument_list|(
literal|"Foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|request
operator|.
name|hasRawHeader
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
comment|// same, but not the first nor last
name|request
operator|.
name|setRawHeader
argument_list|(
literal|"Foo"
argument_list|,
literal|"1"
argument_list|)
expr_stmt|;
name|request
operator|.
name|setRawHeader
argument_list|(
literal|"Bar"
argument_list|,
literal|"3"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|request
operator|.
name|hasRawHeader
argument_list|(
literal|"Foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|request
operator|.
name|hasRawHeader
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|request
operator|.
name|setRawHeader
argument_list|(
literal|"foo"
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|request
operator|.
name|hasRawHeader
argument_list|(
literal|"Foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|request
operator|.
name|hasRawHeader
argument_list|(
literal|"bar"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|originatingObject
name|void
name|tst_QNetworkRequest
operator|::
name|originatingObject
parameter_list|()
block|{
name|QNetworkRequest
name|request
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|request
operator|.
name|originatingObject
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|QObject
name|dummy
decl_stmt|;
name|request
operator|.
name|setOriginatingObject
argument_list|(
operator|&
name|dummy
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|request
operator|.
name|originatingObject
argument_list|()
argument_list|,
operator|&
name|dummy
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
operator|!
name|request
operator|.
name|originatingObject
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QNetworkRequest
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qnetworkrequest.moc"
end_include
end_unit
