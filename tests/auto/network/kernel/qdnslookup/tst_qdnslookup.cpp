begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Jeremy LainÃ©<jeremy.laine@m4x.org> ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/QDnsLookup>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/QHostAddress>
end_include
begin_function
DECL|function|waitForDone
specifier|static
name|bool
name|waitForDone
parameter_list|(
name|QDnsLookup
modifier|*
name|lookup
parameter_list|)
block|{
if|if
condition|(
name|lookup
operator|->
name|isFinished
argument_list|()
condition|)
return|return
literal|true
return|;
name|QObject
operator|::
name|connect
argument_list|(
name|lookup
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|10
argument_list|)
expr_stmt|;
return|return
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
return|;
block|}
end_function
begin_class
DECL|class|tst_QDnsLookup
class|class
name|tst_QDnsLookup
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|lookup_data
parameter_list|()
function_decl|;
name|void
name|lookup
parameter_list|()
function_decl|;
name|void
name|lookupReuse
parameter_list|()
function_decl|;
name|void
name|lookupAbortRetry
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|lookup_data
name|void
name|tst_QDnsLookup
operator|::
name|lookup_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"type"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"domain"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"error"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"cname"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"host"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"mx"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"ns"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"ptr"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"srv"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"txt"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"a-empty"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|A
argument_list|)
operator|<<
literal|""
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|InvalidRequestError
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"a-notfound"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|A
argument_list|)
operator|<<
literal|"invalid."
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NotFoundError
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"a-idn"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|A
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf8
argument_list|(
literal|"alqualondÃ«.troll.no"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NoError
argument_list|)
operator|<<
literal|"alqualonde.troll.no"
operator|<<
literal|"10.3.3.55"
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"a-single"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|A
argument_list|)
operator|<<
literal|"lupinella.troll.no"
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NoError
argument_list|)
operator|<<
literal|""
operator|<<
literal|"10.3.4.6"
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"a-multi"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|A
argument_list|)
operator|<<
literal|"multi.dev.troll.no"
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NoError
argument_list|)
operator|<<
literal|""
operator|<<
literal|"1.2.3.4 1.2.3.5 10.3.3.31"
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"aaaa-empty"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|AAAA
argument_list|)
operator|<<
literal|""
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|InvalidRequestError
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"aaaa-notfound"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|AAAA
argument_list|)
operator|<<
literal|"invalid."
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NotFoundError
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"aaaa-single"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|AAAA
argument_list|)
operator|<<
literal|"dns6-test-dev.troll.no"
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NoError
argument_list|)
operator|<<
literal|""
operator|<<
literal|"2001:470:1f01:115::10"
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"aaaa-multi"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|AAAA
argument_list|)
operator|<<
literal|"multi-dns6-test-dev.troll.no"
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NoError
argument_list|)
operator|<<
literal|""
operator|<<
literal|"2001:470:1f01:115::11 2001:470:1f01:115::12"
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"any-empty"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|ANY
argument_list|)
operator|<<
literal|""
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|InvalidRequestError
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"any-notfound"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|ANY
argument_list|)
operator|<<
literal|"invalid."
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NotFoundError
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"any-ascii"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|ANY
argument_list|)
operator|<<
literal|"fluke.troll.no"
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NoError
argument_list|)
operator|<<
literal|""
operator|<<
literal|"10.3.3.31"
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mx-empty"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|MX
argument_list|)
operator|<<
literal|""
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|InvalidRequestError
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mx-notfound"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|MX
argument_list|)
operator|<<
literal|"invalid."
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NotFoundError
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mx-ascii"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|MX
argument_list|)
operator|<<
literal|"troll.no"
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NoError
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|"10 smtp.trolltech.com"
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
if|#
directive|if
literal|0
comment|// FIXME: we need an IDN MX record in the troll.no domain
block|QTest::newRow("mx-idn")<< int(QDnsLookup::MX)<< QString::fromUtf8("rÃ¥kat.se")<< int(QDnsLookup::NoError)<< ""<< ""<< "10 mail.cdr.se"<< ""<< ""<< ""<< QByteArray();
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ns-empty"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NS
argument_list|)
operator|<<
literal|""
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|InvalidRequestError
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ns-notfound"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NS
argument_list|)
operator|<<
literal|"invalid."
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NotFoundError
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ns-ascii"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NS
argument_list|)
operator|<<
literal|"troll.no"
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NoError
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|"ns-0.trolltech.net ns-1.trolltech.net"
operator|<<
literal|""
operator|<<
literal|""
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ptr-empty"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|PTR
argument_list|)
operator|<<
literal|""
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|InvalidRequestError
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ptr-notfound"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|PTR
argument_list|)
operator|<<
literal|"invalid."
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NotFoundError
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
comment|// FIXME: we need PTR records in the troll.no domain
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ptr-ascii"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|PTR
argument_list|)
operator|<<
literal|"168.52.238.87.in-addr.arpa"
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NoError
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|"gitorious.org"
operator|<<
literal|""
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"srv-empty"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|SRV
argument_list|)
operator|<<
literal|""
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|InvalidRequestError
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"srv-notfound"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|SRV
argument_list|)
operator|<<
literal|"invalid."
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NotFoundError
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
if|#
directive|if
literal|0
comment|// FIXME: we need SRV records in the troll.no domain
block|QTest::newRow("srv-idn")<< int(QDnsLookup::SRV)<< QString::fromUtf8("_xmpp-client._tcp.rÃ¥kat.se")<< int(QDnsLookup::NoError)<< ""<< ""<< ""<< ""<< ""<< "5 0 5224 jabber.cdr.se"<< QByteArray();
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"txt-empty"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|TXT
argument_list|)
operator|<<
literal|""
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|InvalidRequestError
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"txt-notfound"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|TXT
argument_list|)
operator|<<
literal|"invalid."
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NotFoundError
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
comment|// FIXME: we need TXT records in the troll.no domain
name|QTest
operator|::
name|newRow
argument_list|(
literal|"txt-ascii"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|TXT
argument_list|)
operator|<<
literal|"gmail.com"
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NoError
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
name|QByteArray
argument_list|(
literal|"v=spf1 redirect=_spf.google.com"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|lookup
name|void
name|tst_QDnsLookup
operator|::
name|lookup
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|domain
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|error
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|cname
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|mx
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|ns
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|ptr
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|srv
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|txt
argument_list|)
expr_stmt|;
name|QDnsLookup
name|lookup
decl_stmt|;
name|lookup
operator|.
name|setType
argument_list|(
cast|static_cast
argument_list|<
name|QDnsLookup
operator|::
name|Type
argument_list|>
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|lookup
operator|.
name|setName
argument_list|(
name|domain
argument_list|)
expr_stmt|;
name|lookup
operator|.
name|lookup
parameter_list|()
constructor_decl|;
name|QVERIFY
argument_list|(
name|waitForDone
argument_list|(
operator|&
name|lookup
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|lookup
operator|.
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|int
argument_list|(
name|lookup
operator|.
name|error
argument_list|()
argument_list|)
operator|==
name|error
argument_list|,
name|qPrintable
argument_list|(
name|lookup
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|==
name|QDnsLookup
operator|::
name|NoError
condition|)
name|QVERIFY
argument_list|(
name|lookup
operator|.
name|errorString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|lookup
operator|.
name|type
argument_list|()
argument_list|)
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lookup
operator|.
name|name
argument_list|()
argument_list|,
name|domain
argument_list|)
expr_stmt|;
comment|// canonical names
if|if
condition|(
operator|!
name|cname
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QVERIFY
argument_list|(
operator|!
name|lookup
operator|.
name|canonicalNameRecords
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QDnsDomainNameRecord
name|cnameRecord
init|=
name|lookup
operator|.
name|canonicalNameRecords
argument_list|()
operator|.
name|first
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|cnameRecord
operator|.
name|name
argument_list|()
argument_list|,
name|domain
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cnameRecord
operator|.
name|value
argument_list|()
argument_list|,
name|cname
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|lookup
operator|.
name|canonicalNameRecords
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// host addresses
specifier|const
name|QString
name|hostName
init|=
name|cname
operator|.
name|isEmpty
argument_list|()
condition|?
name|domain
else|:
name|cname
decl_stmt|;
name|QStringList
name|addresses
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QDnsHostAddressRecord
modifier|&
name|record
decl|,
name|lookup
operator|.
name|hostAddressRecords
argument_list|()
control|)
block|{
comment|//reply may include A& AAAA records for nameservers, ignore them and only look at records matching the query
if|if
condition|(
name|record
operator|.
name|name
argument_list|()
operator|==
name|hostName
condition|)
name|addresses
operator|<<
name|record
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
expr_stmt|;
block|}
name|addresses
operator|.
name|sort
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|addresses
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
argument_list|,
name|host
argument_list|)
expr_stmt|;
comment|// mail exchanges
name|QStringList
name|mailExchanges
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QDnsMailExchangeRecord
modifier|&
name|record
decl|,
name|lookup
operator|.
name|mailExchangeRecords
argument_list|()
control|)
block|{
name|QCOMPARE
argument_list|(
name|record
operator|.
name|name
argument_list|()
argument_list|,
name|domain
argument_list|)
expr_stmt|;
name|mailExchanges
operator|<<
name|QString
argument_list|(
literal|"%1 %2"
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|record
operator|.
name|preference
argument_list|()
argument_list|)
argument_list|,
name|record
operator|.
name|exchange
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|mailExchanges
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
argument_list|,
name|mx
argument_list|)
expr_stmt|;
comment|// name servers
name|QStringList
name|nameServers
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QDnsDomainNameRecord
modifier|&
name|record
decl|,
name|lookup
operator|.
name|nameServerRecords
argument_list|()
control|)
block|{
comment|//reply may include NS records for authoritative nameservers, ignore them and only look at records matching the query
if|if
condition|(
name|record
operator|.
name|name
argument_list|()
operator|==
name|domain
condition|)
name|nameServers
operator|<<
name|record
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
name|nameServers
operator|.
name|sort
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nameServers
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
argument_list|,
name|ns
argument_list|)
expr_stmt|;
comment|// pointers
if|if
condition|(
operator|!
name|ptr
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QVERIFY
argument_list|(
operator|!
name|lookup
operator|.
name|pointerRecords
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QDnsDomainNameRecord
name|ptrRecord
init|=
name|lookup
operator|.
name|pointerRecords
argument_list|()
operator|.
name|first
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ptrRecord
operator|.
name|name
argument_list|()
argument_list|,
name|domain
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ptrRecord
operator|.
name|value
argument_list|()
argument_list|,
name|ptr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|lookup
operator|.
name|pointerRecords
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// services
name|QStringList
name|services
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QDnsServiceRecord
modifier|&
name|record
decl|,
name|lookup
operator|.
name|serviceRecords
argument_list|()
control|)
block|{
name|QCOMPARE
argument_list|(
name|record
operator|.
name|name
argument_list|()
argument_list|,
name|domain
argument_list|)
expr_stmt|;
name|services
operator|<<
name|QString
argument_list|(
literal|"%1 %2 %3 %4"
argument_list|)
operator|.
name|arg
argument_list|(
name|QString
operator|::
name|number
argument_list|(
name|record
operator|.
name|priority
argument_list|()
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|record
operator|.
name|weight
argument_list|()
argument_list|)
argument_list|,
name|QString
operator|::
name|number
argument_list|(
name|record
operator|.
name|port
argument_list|()
argument_list|)
argument_list|,
name|record
operator|.
name|target
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|services
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
argument_list|,
name|srv
argument_list|)
expr_stmt|;
comment|// text
if|if
condition|(
operator|!
name|txt
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QVERIFY
argument_list|(
operator|!
name|lookup
operator|.
name|textRecords
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QDnsTextRecord
name|firstRecord
init|=
name|lookup
operator|.
name|textRecords
argument_list|()
operator|.
name|first
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|firstRecord
operator|.
name|name
argument_list|()
argument_list|,
name|domain
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|firstRecord
operator|.
name|values
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|firstRecord
operator|.
name|values
argument_list|()
operator|.
name|first
argument_list|()
argument_list|,
name|txt
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|lookup
operator|.
name|textRecords
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|lookupReuse
name|void
name|tst_QDnsLookup
operator|::
name|lookupReuse
parameter_list|()
block|{
name|QDnsLookup
name|lookup
decl_stmt|;
comment|// first lookup
name|lookup
operator|.
name|setType
argument_list|(
name|QDnsLookup
operator|::
name|A
argument_list|)
expr_stmt|;
name|lookup
operator|.
name|setName
argument_list|(
literal|"lupinella.troll.no"
argument_list|)
expr_stmt|;
name|lookup
operator|.
name|lookup
parameter_list|()
constructor_decl|;
name|QVERIFY
argument_list|(
name|waitForDone
argument_list|(
operator|&
name|lookup
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|lookup
operator|.
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|lookup
operator|.
name|error
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NoError
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|lookup
operator|.
name|hostAddressRecords
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lookup
operator|.
name|hostAddressRecords
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"lupinella.troll.no"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lookup
operator|.
name|hostAddressRecords
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|value
argument_list|()
argument_list|,
name|QHostAddress
argument_list|(
literal|"10.3.4.6"
argument_list|)
argument_list|)
expr_stmt|;
comment|// second lookup
name|lookup
operator|.
name|setType
argument_list|(
name|QDnsLookup
operator|::
name|AAAA
argument_list|)
expr_stmt|;
name|lookup
operator|.
name|setName
argument_list|(
literal|"dns6-test-dev.troll.no"
argument_list|)
expr_stmt|;
name|lookup
operator|.
name|lookup
parameter_list|()
constructor_decl|;
name|QVERIFY
argument_list|(
name|waitForDone
argument_list|(
operator|&
name|lookup
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|lookup
operator|.
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|lookup
operator|.
name|error
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NoError
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|lookup
operator|.
name|hostAddressRecords
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lookup
operator|.
name|hostAddressRecords
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"dns6-test-dev.troll.no"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lookup
operator|.
name|hostAddressRecords
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|value
argument_list|()
argument_list|,
name|QHostAddress
argument_list|(
literal|"2001:470:1f01:115::10"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|lookupAbortRetry
name|void
name|tst_QDnsLookup
operator|::
name|lookupAbortRetry
parameter_list|()
block|{
name|QDnsLookup
name|lookup
decl_stmt|;
comment|// try and abort the lookup
name|lookup
operator|.
name|setType
argument_list|(
name|QDnsLookup
operator|::
name|A
argument_list|)
expr_stmt|;
name|lookup
operator|.
name|setName
argument_list|(
literal|"lupinella.troll.no"
argument_list|)
expr_stmt|;
name|lookup
operator|.
name|lookup
parameter_list|()
constructor_decl|;
name|lookup
operator|.
name|abort
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|waitForDone
argument_list|(
operator|&
name|lookup
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|lookup
operator|.
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|lookup
operator|.
name|error
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|QDnsLookup
operator|::
name|OperationCancelledError
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|lookup
operator|.
name|hostAddressRecords
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// retry a different lookup
name|lookup
operator|.
name|setType
argument_list|(
name|QDnsLookup
operator|::
name|AAAA
argument_list|)
expr_stmt|;
name|lookup
operator|.
name|setName
argument_list|(
literal|"dns6-test-dev.troll.no"
argument_list|)
expr_stmt|;
name|lookup
operator|.
name|lookup
parameter_list|()
constructor_decl|;
name|QVERIFY
argument_list|(
name|waitForDone
argument_list|(
operator|&
name|lookup
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|lookup
operator|.
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|lookup
operator|.
name|error
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NoError
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|lookup
operator|.
name|hostAddressRecords
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lookup
operator|.
name|hostAddressRecords
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"dns6-test-dev.troll.no"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lookup
operator|.
name|hostAddressRecords
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|value
argument_list|()
argument_list|,
name|QHostAddress
argument_list|(
literal|"2001:470:1f01:115::10"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QDnsLookup
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qdnslookup.moc"
end_include
end_unit
