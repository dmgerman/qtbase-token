begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Jeremy LainÃ©<jeremy.laine@m4x.org> ** Copyright (C) 2016 Intel Corporation. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:GPL-EXCEPT$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3 as published by the Free Software ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/QDnsLookup>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/QHostAddress>
end_include
begin_function
DECL|function|waitForDone
specifier|static
name|bool
name|waitForDone
parameter_list|(
name|QDnsLookup
modifier|*
name|lookup
parameter_list|)
block|{
if|if
condition|(
name|lookup
operator|->
name|isFinished
argument_list|()
condition|)
return|return
literal|true
return|;
name|QObject
operator|::
name|connect
argument_list|(
name|lookup
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|10
argument_list|)
expr_stmt|;
return|return
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
return|;
block|}
end_function
begin_class
DECL|class|tst_QDnsLookup
class|class
name|tst_QDnsLookup
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
name|QString
name|domainName
parameter_list|(
specifier|const
name|QString
modifier|&
name|input
parameter_list|)
function_decl|;
name|QString
name|domainNameList
parameter_list|(
specifier|const
name|QString
modifier|&
name|input
parameter_list|)
function_decl|;
name|QStringList
name|domainNameListAlternatives
parameter_list|(
specifier|const
name|QString
modifier|&
name|input
parameter_list|)
function_decl|;
public|public
name|slots
public|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|lookup_data
parameter_list|()
function_decl|;
name|void
name|lookup
parameter_list|()
function_decl|;
name|void
name|lookupReuse
parameter_list|()
function_decl|;
name|void
name|lookupAbortRetry
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|initTestCase
name|void
name|tst_QDnsLookup
operator|::
name|initTestCase
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"tld"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"normal"
argument_list|)
operator|<<
literal|".test.qt-project.org"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"idn"
argument_list|)
operator|<<
literal|".alqualond\xc3\xab.test.qt-project.org"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|domainName
name|QString
name|tst_QDnsLookup
operator|::
name|domainName
parameter_list|(
specifier|const
name|QString
modifier|&
name|input
parameter_list|)
block|{
if|if
condition|(
name|input
operator|.
name|isEmpty
argument_list|()
condition|)
return|return
name|input
return|;
if|if
condition|(
name|input
operator|.
name|endsWith
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
argument_list|)
condition|)
block|{
name|QString
name|nodot
init|=
name|input
decl_stmt|;
name|nodot
operator|.
name|chop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
return|return
name|nodot
return|;
block|}
name|QFETCH_GLOBAL
argument_list|(
name|QString
argument_list|,
name|tld
argument_list|)
expr_stmt|;
return|return
name|input
operator|+
name|tld
return|;
block|}
end_function
begin_function
DECL|function|domainNameList
name|QString
name|tst_QDnsLookup
operator|::
name|domainNameList
parameter_list|(
specifier|const
name|QString
modifier|&
name|input
parameter_list|)
block|{
name|QStringList
name|list
init|=
name|input
operator|.
name|split
argument_list|(
name|QLatin1Char
argument_list|(
literal|';'
argument_list|)
argument_list|)
decl_stmt|;
name|QString
name|result
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QString
modifier|&
name|s
decl|,
name|list
control|)
block|{
if|if
condition|(
operator|!
name|result
operator|.
name|isEmpty
argument_list|()
condition|)
name|result
operator|+=
literal|';'
expr_stmt|;
name|result
operator|+=
name|domainName
argument_list|(
name|s
argument_list|)
expr_stmt|;
block|}
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|domainNameListAlternatives
name|QStringList
name|tst_QDnsLookup
operator|::
name|domainNameListAlternatives
parameter_list|(
specifier|const
name|QString
modifier|&
name|input
parameter_list|)
block|{
name|QStringList
name|alternatives
init|=
name|input
operator|.
name|split
argument_list|(
literal|'|'
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|alternatives
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
name|alternatives
index|[
name|i
index|]
operator|=
name|domainNameList
argument_list|(
name|alternatives
index|[
name|i
index|]
argument_list|)
expr_stmt|;
return|return
name|alternatives
return|;
block|}
end_function
begin_function
DECL|function|lookup_data
name|void
name|tst_QDnsLookup
operator|::
name|lookup_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"type"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"domain"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"error"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"cname"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"host"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"mx"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"ns"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"ptr"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"srv"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"txt"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"a-empty"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|A
argument_list|)
operator|<<
literal|""
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|InvalidRequestError
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"a-notfound"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|A
argument_list|)
operator|<<
literal|"invalid.invalid"
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NotFoundError
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"a-single"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|A
argument_list|)
operator|<<
literal|"a-single"
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NoError
argument_list|)
operator|<<
literal|""
operator|<<
literal|"192.0.2.1"
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"a-multi"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|A
argument_list|)
operator|<<
literal|"a-multi"
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NoError
argument_list|)
operator|<<
literal|""
operator|<<
literal|"192.0.2.1;192.0.2.2;192.0.2.3"
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"aaaa-empty"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|AAAA
argument_list|)
operator|<<
literal|""
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|InvalidRequestError
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"aaaa-notfound"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|AAAA
argument_list|)
operator|<<
literal|"invalid.invalid"
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NotFoundError
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"aaaa-single"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|AAAA
argument_list|)
operator|<<
literal|"aaaa-single"
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NoError
argument_list|)
operator|<<
literal|""
operator|<<
literal|"2001:db8::1"
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"aaaa-multi"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|AAAA
argument_list|)
operator|<<
literal|"aaaa-multi"
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NoError
argument_list|)
operator|<<
literal|""
operator|<<
literal|"2001:db8::1;2001:db8::2;2001:db8::3"
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"any-empty"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|ANY
argument_list|)
operator|<<
literal|""
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|InvalidRequestError
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"any-notfound"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|ANY
argument_list|)
operator|<<
literal|"invalid.invalid"
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NotFoundError
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"any-a-single"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|ANY
argument_list|)
operator|<<
literal|"a-single"
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NoError
argument_list|)
operator|<<
literal|""
operator|<<
literal|"192.0.2.1"
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"any-a-plus-aaaa"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|ANY
argument_list|)
operator|<<
literal|"a-plus-aaaa"
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NoError
argument_list|)
operator|<<
literal|""
operator|<<
literal|"198.51.100.1;2001:db8::1:1"
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"any-multi"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|ANY
argument_list|)
operator|<<
literal|"multi"
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NoError
argument_list|)
operator|<<
literal|""
operator|<<
literal|"198.51.100.1;198.51.100.2;198.51.100.3;2001:db8::1:1;2001:db8::1:2"
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mx-empty"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|MX
argument_list|)
operator|<<
literal|""
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|InvalidRequestError
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mx-notfound"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|MX
argument_list|)
operator|<<
literal|"invalid.invalid"
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NotFoundError
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mx-single"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|MX
argument_list|)
operator|<<
literal|"mx-single"
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NoError
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|"10 multi"
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mx-single-cname"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|MX
argument_list|)
operator|<<
literal|"mx-single-cname"
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NoError
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|"10 cname"
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mx-multi"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|MX
argument_list|)
operator|<<
literal|"mx-multi"
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NoError
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|"10 multi;20 a-single"
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"mx-multi-sameprio"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|MX
argument_list|)
operator|<<
literal|"mx-multi-sameprio"
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NoError
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|"10 multi;10 a-single|"
literal|"10 a-single;10 multi"
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ns-empty"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NS
argument_list|)
operator|<<
literal|""
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|InvalidRequestError
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ns-notfound"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NS
argument_list|)
operator|<<
literal|"invalid.invalid"
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NotFoundError
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ns-single"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NS
argument_list|)
operator|<<
literal|"ns-single"
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NoError
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|"ns11.cloudns.net."
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ns-multi"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NS
argument_list|)
operator|<<
literal|"ns-multi"
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NoError
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|"ns11.cloudns.net.;ns12.cloudns.net."
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ptr-empty"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|PTR
argument_list|)
operator|<<
literal|""
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|InvalidRequestError
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ptr-notfound"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|PTR
argument_list|)
operator|<<
literal|"invalid.invalid"
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NotFoundError
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
if|#
directive|if
literal|0
comment|// temporarily disabled since the new hosting provider can't insert
comment|// PTR records outside of the in-addr.arpa zone
block|QTest::newRow("ptr-single")<< int(QDnsLookup::PTR)<< "ptr-single"<< int(QDnsLookup::NoError)<< ""<< ""<< ""<< ""<< "a-single"<< ""<< "";
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"srv-empty"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|SRV
argument_list|)
operator|<<
literal|""
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|InvalidRequestError
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"srv-notfound"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|SRV
argument_list|)
operator|<<
literal|"invalid.invalid"
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NotFoundError
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"srv-single"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|SRV
argument_list|)
operator|<<
literal|"_echo._tcp.srv-single"
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NoError
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|"5 0 7 multi"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"srv-prio"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|SRV
argument_list|)
operator|<<
literal|"_echo._tcp.srv-prio"
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NoError
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|"1 0 7 multi;2 0 7 a-plus-aaaa"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"srv-weighted"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|SRV
argument_list|)
operator|<<
literal|"_echo._tcp.srv-weighted"
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NoError
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|"5 75 7 multi;5 25 7 a-plus-aaaa|"
literal|"5 25 7 a-plus-aaaa;5 75 7 multi"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"srv-multi"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|SRV
argument_list|)
operator|<<
literal|"_echo._tcp.srv-multi"
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NoError
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|"1 50 7 multi;2 50 7 a-single;2 50 7 aaaa-single;3 50 7 a-multi|"
literal|"1 50 7 multi;2 50 7 aaaa-single;2 50 7 a-single;3 50 7 a-multi"
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"txt-empty"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|TXT
argument_list|)
operator|<<
literal|""
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|InvalidRequestError
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"txt-notfound"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|TXT
argument_list|)
operator|<<
literal|"invalid.invalid"
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NotFoundError
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"txt-single"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|TXT
argument_list|)
operator|<<
literal|"txt-single"
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NoError
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|"Hello"
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"txt-multi-onerr"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|TXT
argument_list|)
operator|<<
literal|"txt-multi-onerr"
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NoError
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"Hello\0World"
argument_list|,
sizeof|sizeof
argument_list|(
literal|"Hello\0World"
argument_list|)
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"txt-multi-multirr"
argument_list|)
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|TXT
argument_list|)
operator|<<
literal|"txt-multi-multirr"
operator|<<
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NoError
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|""
operator|<<
literal|"Hello;World"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|msgDnsLookup
specifier|static
name|QByteArray
name|msgDnsLookup
parameter_list|(
name|QDnsLookup
operator|::
name|Error
name|actualError
parameter_list|,
name|int
name|expectedError
parameter_list|,
specifier|const
name|QString
modifier|&
name|domain
parameter_list|,
specifier|const
name|QString
modifier|&
name|cname
parameter_list|,
specifier|const
name|QString
modifier|&
name|host
parameter_list|,
specifier|const
name|QString
modifier|&
name|srv
parameter_list|,
specifier|const
name|QString
modifier|&
name|mx
parameter_list|,
specifier|const
name|QString
modifier|&
name|ns
parameter_list|,
specifier|const
name|QString
modifier|&
name|ptr
parameter_list|,
specifier|const
name|QString
modifier|&
name|errorString
parameter_list|)
block|{
name|QString
name|result
decl_stmt|;
name|QTextStream
name|str
argument_list|(
operator|&
name|result
argument_list|)
decl_stmt|;
name|str
operator|<<
literal|"Actual error: "
operator|<<
name|actualError
expr_stmt|;
if|if
condition|(
operator|!
name|errorString
operator|.
name|isEmpty
argument_list|()
condition|)
name|str
operator|<<
literal|" ("
operator|<<
name|errorString
operator|<<
literal|')'
expr_stmt|;
name|str
operator|<<
literal|", expected: "
operator|<<
name|expectedError
expr_stmt|;
name|str
operator|<<
literal|", domain: "
operator|<<
name|domain
expr_stmt|;
if|if
condition|(
operator|!
name|cname
operator|.
name|isEmpty
argument_list|()
condition|)
name|str
operator|<<
literal|", cname: "
operator|<<
name|cname
expr_stmt|;
name|str
operator|<<
literal|", host: "
operator|<<
name|host
expr_stmt|;
if|if
condition|(
operator|!
name|srv
operator|.
name|isEmpty
argument_list|()
condition|)
name|str
operator|<<
literal|" server: "
operator|<<
name|srv
expr_stmt|;
if|if
condition|(
operator|!
name|mx
operator|.
name|isEmpty
argument_list|()
condition|)
name|str
operator|<<
literal|" mx: "
operator|<<
name|mx
expr_stmt|;
if|if
condition|(
operator|!
name|ns
operator|.
name|isEmpty
argument_list|()
condition|)
name|str
operator|<<
literal|" ns: "
operator|<<
name|ns
expr_stmt|;
if|if
condition|(
operator|!
name|ptr
operator|.
name|isEmpty
argument_list|()
condition|)
name|str
operator|<<
literal|" ptr: "
operator|<<
name|ptr
expr_stmt|;
return|return
name|result
operator|.
name|toLocal8Bit
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|lookup
name|void
name|tst_QDnsLookup
operator|::
name|lookup
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|domain
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|error
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|cname
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|mx
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|ns
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|ptr
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|srv
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|txt
argument_list|)
expr_stmt|;
comment|// transform the inputs
name|domain
operator|=
name|domainName
argument_list|(
name|domain
argument_list|)
expr_stmt|;
name|cname
operator|=
name|domainName
argument_list|(
name|cname
argument_list|)
expr_stmt|;
name|ns
operator|=
name|domainNameList
argument_list|(
name|ns
argument_list|)
expr_stmt|;
name|ptr
operator|=
name|domainNameList
argument_list|(
name|ptr
argument_list|)
expr_stmt|;
comment|// SRV and MX have reply entries that can change order
comment|// and we can't sort
name|QStringList
name|mx_alternatives
init|=
name|domainNameListAlternatives
argument_list|(
name|mx
argument_list|)
decl_stmt|;
name|QStringList
name|srv_alternatives
init|=
name|domainNameListAlternatives
argument_list|(
name|srv
argument_list|)
decl_stmt|;
name|QDnsLookup
name|lookup
decl_stmt|;
name|lookup
operator|.
name|setType
argument_list|(
cast|static_cast
argument_list|<
name|QDnsLookup
operator|::
name|Type
argument_list|>
argument_list|(
name|type
argument_list|)
argument_list|)
expr_stmt|;
name|lookup
operator|.
name|setName
argument_list|(
name|domain
argument_list|)
expr_stmt|;
name|lookup
operator|.
name|lookup
parameter_list|()
constructor_decl|;
name|QVERIFY
argument_list|(
name|waitForDone
argument_list|(
operator|&
name|lookup
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|lookup
operator|.
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_ANDROID
argument_list|)
if|if
condition|(
name|lookup
operator|.
name|errorString
argument_list|()
operator|==
name|QStringLiteral
argument_list|(
literal|"Not yet supported on Android"
argument_list|)
condition|)
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"Not yet supported on Android"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QVERIFY2
argument_list|(
name|int
argument_list|(
name|lookup
operator|.
name|error
argument_list|()
argument_list|)
operator|==
name|error
argument_list|,
name|msgDnsLookup
argument_list|(
name|lookup
operator|.
name|error
argument_list|()
argument_list|,
name|error
argument_list|,
name|domain
argument_list|,
name|cname
argument_list|,
name|host
argument_list|,
name|srv
argument_list|,
name|mx
argument_list|,
name|ns
argument_list|,
name|ptr
argument_list|,
name|lookup
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|==
name|QDnsLookup
operator|::
name|NoError
condition|)
name|QVERIFY
argument_list|(
name|lookup
operator|.
name|errorString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|lookup
operator|.
name|type
argument_list|()
argument_list|)
argument_list|,
name|type
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lookup
operator|.
name|name
argument_list|()
argument_list|,
name|domain
argument_list|)
expr_stmt|;
comment|// canonical names
if|if
condition|(
operator|!
name|cname
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QVERIFY
argument_list|(
operator|!
name|lookup
operator|.
name|canonicalNameRecords
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QDnsDomainNameRecord
name|cnameRecord
init|=
name|lookup
operator|.
name|canonicalNameRecords
argument_list|()
operator|.
name|first
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|cnameRecord
operator|.
name|name
argument_list|()
argument_list|,
name|domain
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cnameRecord
operator|.
name|value
argument_list|()
argument_list|,
name|cname
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|lookup
operator|.
name|canonicalNameRecords
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// host addresses
specifier|const
name|QString
name|hostName
init|=
name|cname
operator|.
name|isEmpty
argument_list|()
condition|?
name|domain
else|:
name|cname
decl_stmt|;
name|QStringList
name|addresses
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QDnsHostAddressRecord
modifier|&
name|record
decl|,
name|lookup
operator|.
name|hostAddressRecords
argument_list|()
control|)
block|{
comment|//reply may include A& AAAA records for nameservers, ignore them and only look at records matching the query
if|if
condition|(
name|record
operator|.
name|name
argument_list|()
operator|==
name|hostName
condition|)
name|addresses
operator|<<
name|record
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
operator|.
name|toLower
argument_list|()
expr_stmt|;
block|}
name|addresses
operator|.
name|sort
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|addresses
operator|.
name|join
argument_list|(
literal|';'
argument_list|)
argument_list|,
name|host
argument_list|)
expr_stmt|;
comment|// mail exchanges
name|QStringList
name|mailExchanges
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QDnsMailExchangeRecord
modifier|&
name|record
decl|,
name|lookup
operator|.
name|mailExchangeRecords
argument_list|()
control|)
block|{
name|QCOMPARE
argument_list|(
name|record
operator|.
name|name
argument_list|()
argument_list|,
name|domain
argument_list|)
expr_stmt|;
name|mailExchanges
operator|<<
name|QString
operator|::
name|number
argument_list|(
name|record
operator|.
name|preference
argument_list|()
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
operator|+
name|record
operator|.
name|exchange
argument_list|()
expr_stmt|;
block|}
name|QVERIFY2
argument_list|(
name|mx_alternatives
operator|.
name|contains
argument_list|(
name|mailExchanges
operator|.
name|join
argument_list|(
literal|';'
argument_list|)
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
literal|"Actual: "
operator|+
name|mailExchanges
operator|.
name|join
argument_list|(
literal|';'
argument_list|)
operator|+
literal|"\nExpected one of:\n"
operator|+
name|mx_alternatives
operator|.
name|join
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// name servers
name|QStringList
name|nameServers
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QDnsDomainNameRecord
modifier|&
name|record
decl|,
name|lookup
operator|.
name|nameServerRecords
argument_list|()
control|)
block|{
comment|//reply may include NS records for authoritative nameservers, ignore them and only look at records matching the query
if|if
condition|(
name|record
operator|.
name|name
argument_list|()
operator|==
name|domain
condition|)
name|nameServers
operator|<<
name|record
operator|.
name|value
argument_list|()
expr_stmt|;
block|}
name|nameServers
operator|.
name|sort
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|nameServers
operator|.
name|join
argument_list|(
literal|';'
argument_list|)
argument_list|,
name|ns
argument_list|)
expr_stmt|;
comment|// pointers
if|if
condition|(
operator|!
name|ptr
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QVERIFY
argument_list|(
operator|!
name|lookup
operator|.
name|pointerRecords
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|QDnsDomainNameRecord
name|ptrRecord
init|=
name|lookup
operator|.
name|pointerRecords
argument_list|()
operator|.
name|first
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|ptrRecord
operator|.
name|name
argument_list|()
argument_list|,
name|domain
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ptrRecord
operator|.
name|value
argument_list|()
argument_list|,
name|ptr
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|lookup
operator|.
name|pointerRecords
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// services
name|QStringList
name|services
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QDnsServiceRecord
modifier|&
name|record
decl|,
name|lookup
operator|.
name|serviceRecords
argument_list|()
control|)
block|{
name|QCOMPARE
argument_list|(
name|record
operator|.
name|name
argument_list|()
argument_list|,
name|domain
argument_list|)
expr_stmt|;
name|services
operator|<<
operator|(
name|QString
operator|::
name|number
argument_list|(
name|record
operator|.
name|priority
argument_list|()
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|record
operator|.
name|weight
argument_list|()
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
operator|+
name|QString
operator|::
name|number
argument_list|(
name|record
operator|.
name|port
argument_list|()
argument_list|)
operator|+
name|QLatin1Char
argument_list|(
literal|' '
argument_list|)
operator|+
name|record
operator|.
name|target
argument_list|()
operator|)
expr_stmt|;
block|}
name|QVERIFY2
argument_list|(
name|srv_alternatives
operator|.
name|contains
argument_list|(
name|services
operator|.
name|join
argument_list|(
literal|';'
argument_list|)
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
literal|"Actual: "
operator|+
name|services
operator|.
name|join
argument_list|(
literal|';'
argument_list|)
operator|+
literal|"\nExpected one of:\n"
operator|+
name|srv_alternatives
operator|.
name|join
argument_list|(
literal|'\n'
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|// text
name|QStringList
name|texts
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QDnsTextRecord
modifier|&
name|record
decl|,
name|lookup
operator|.
name|textRecords
argument_list|()
control|)
block|{
name|QCOMPARE
argument_list|(
name|record
operator|.
name|name
argument_list|()
argument_list|,
name|domain
argument_list|)
expr_stmt|;
name|QString
name|text
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QByteArray
modifier|&
name|ba
decl|,
name|record
operator|.
name|values
argument_list|()
control|)
block|{
if|if
condition|(
operator|!
name|text
operator|.
name|isEmpty
argument_list|()
condition|)
name|text
operator|+=
literal|'\0'
expr_stmt|;
name|text
operator|+=
name|QString
operator|::
name|fromLatin1
argument_list|(
name|ba
argument_list|)
expr_stmt|;
block|}
name|texts
operator|<<
name|text
expr_stmt|;
block|}
name|texts
operator|.
name|sort
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|texts
operator|.
name|join
argument_list|(
literal|';'
argument_list|)
argument_list|,
name|txt
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|lookupReuse
name|void
name|tst_QDnsLookup
operator|::
name|lookupReuse
parameter_list|()
block|{
name|QDnsLookup
name|lookup
decl_stmt|;
comment|// first lookup
name|lookup
operator|.
name|setType
argument_list|(
name|QDnsLookup
operator|::
name|A
argument_list|)
expr_stmt|;
name|lookup
operator|.
name|setName
argument_list|(
name|domainName
argument_list|(
literal|"a-single"
argument_list|)
argument_list|)
expr_stmt|;
name|lookup
operator|.
name|lookup
parameter_list|()
constructor_decl|;
name|QVERIFY
argument_list|(
name|waitForDone
argument_list|(
operator|&
name|lookup
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|lookup
operator|.
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_ANDROID
argument_list|)
if|if
condition|(
name|lookup
operator|.
name|errorString
argument_list|()
operator|==
name|QStringLiteral
argument_list|(
literal|"Not yet supported on Android"
argument_list|)
condition|)
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"Not yet supported on Android"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|lookup
operator|.
name|error
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NoError
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|lookup
operator|.
name|hostAddressRecords
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lookup
operator|.
name|hostAddressRecords
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|domainName
argument_list|(
literal|"a-single"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lookup
operator|.
name|hostAddressRecords
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|value
argument_list|()
argument_list|,
name|QHostAddress
argument_list|(
literal|"192.0.2.1"
argument_list|)
argument_list|)
expr_stmt|;
comment|// second lookup
name|lookup
operator|.
name|setType
argument_list|(
name|QDnsLookup
operator|::
name|AAAA
argument_list|)
expr_stmt|;
name|lookup
operator|.
name|setName
argument_list|(
name|domainName
argument_list|(
literal|"aaaa-single"
argument_list|)
argument_list|)
expr_stmt|;
name|lookup
operator|.
name|lookup
parameter_list|()
constructor_decl|;
name|QVERIFY
argument_list|(
name|waitForDone
argument_list|(
operator|&
name|lookup
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|lookup
operator|.
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|lookup
operator|.
name|error
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NoError
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|lookup
operator|.
name|hostAddressRecords
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lookup
operator|.
name|hostAddressRecords
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|domainName
argument_list|(
literal|"aaaa-single"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lookup
operator|.
name|hostAddressRecords
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|value
argument_list|()
argument_list|,
name|QHostAddress
argument_list|(
literal|"2001:db8::1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|lookupAbortRetry
name|void
name|tst_QDnsLookup
operator|::
name|lookupAbortRetry
parameter_list|()
block|{
name|QDnsLookup
name|lookup
decl_stmt|;
comment|// try and abort the lookup
name|lookup
operator|.
name|setType
argument_list|(
name|QDnsLookup
operator|::
name|A
argument_list|)
expr_stmt|;
name|lookup
operator|.
name|setName
argument_list|(
name|domainName
argument_list|(
literal|"a-single"
argument_list|)
argument_list|)
expr_stmt|;
name|lookup
operator|.
name|lookup
parameter_list|()
constructor_decl|;
name|lookup
operator|.
name|abort
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|waitForDone
argument_list|(
operator|&
name|lookup
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|lookup
operator|.
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|lookup
operator|.
name|error
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|QDnsLookup
operator|::
name|OperationCancelledError
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|lookup
operator|.
name|hostAddressRecords
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// retry a different lookup
name|lookup
operator|.
name|setType
argument_list|(
name|QDnsLookup
operator|::
name|AAAA
argument_list|)
expr_stmt|;
name|lookup
operator|.
name|setName
argument_list|(
name|domainName
argument_list|(
literal|"aaaa-single"
argument_list|)
argument_list|)
expr_stmt|;
name|lookup
operator|.
name|lookup
parameter_list|()
constructor_decl|;
name|QVERIFY
argument_list|(
name|waitForDone
argument_list|(
operator|&
name|lookup
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|lookup
operator|.
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_ANDROID
argument_list|)
if|if
condition|(
name|lookup
operator|.
name|errorString
argument_list|()
operator|==
name|QStringLiteral
argument_list|(
literal|"Not yet supported on Android"
argument_list|)
condition|)
name|QEXPECT_FAIL
argument_list|(
literal|""
argument_list|,
literal|"Not yet supported on Android"
argument_list|,
name|Abort
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|lookup
operator|.
name|error
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|QDnsLookup
operator|::
name|NoError
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|lookup
operator|.
name|hostAddressRecords
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lookup
operator|.
name|hostAddressRecords
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|name
argument_list|()
argument_list|,
name|domainName
argument_list|(
literal|"aaaa-single"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lookup
operator|.
name|hostAddressRecords
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|value
argument_list|()
argument_list|,
name|QHostAddress
argument_list|(
literal|"2001:db8::1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QDnsLookup
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qdnslookup.moc"
end_include
end_unit
