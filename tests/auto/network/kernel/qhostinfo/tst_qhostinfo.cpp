begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_comment
comment|// When using WinSock2 on Windows, it's the first thing that can be included
end_comment
begin_comment
comment|// (except qglobal.h), or else you'll get tons of compile errors
end_comment
begin_include
include|#
directive|include
file|<qglobal.h>
end_include
begin_comment
comment|// MinGW doesn't provide getaddrinfo(), so we test for Q_OS_WIN
end_comment
begin_comment
comment|// and Q_CC_GNU, which indirectly tells us whether we're using MinGW.
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
name|defined
argument_list|(
name|Q_CC_GNU
argument_list|)
end_if
begin_define
DECL|macro|QT_NO_GETADDRINFO
define|#
directive|define
name|QT_NO_GETADDRINFO
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_GETADDRINFO
argument_list|)
end_if
begin_include
include|#
directive|include
file|<winsock2.h>
end_include
begin_include
include|#
directive|include
file|<ws2tcpip.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qcoreapplication.h>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<QTcpSocket>
end_include
begin_include
include|#
directive|include
file|<private/qthread_p.h>
end_include
begin_include
include|#
directive|include
file|<QTcpServer>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_BEARERMANAGEMENT
end_ifndef
begin_include
include|#
directive|include
file|<QtNetwork/qnetworkconfigmanager.h>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qnetworkconfiguration.h>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qnetworksession.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<time.h>
end_include
begin_include
include|#
directive|include
file|<qlibrary.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN32
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
end_if
begin_include
include|#
directive|include
file|<windows.h>
end_include
begin_else
else|#
directive|else
end_else
begin_include
include|#
directive|include
file|<unistd.h>
end_include
begin_include
include|#
directive|include
file|<signal.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<qhostinfo.h>
end_include
begin_include
include|#
directive|include
file|"private/qhostinfo_p.h"
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_GETADDRINFO
argument_list|)
end_if
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
end_if
begin_include
include|#
directive|include
file|<sys/types.h>
end_include
begin_else
else|#
directive|else
end_else
begin_include
include|#
directive|include
file|<types.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
end_if
begin_include
include|#
directive|include
file|<sys/socket.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
end_if
begin_include
include|#
directive|include
file|<netdb.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"../../../network-settings.h"
end_include
begin_decl_stmt
DECL|variable|lupinellaIp
specifier|const
name|char
modifier|*
specifier|const
name|lupinellaIp
init|=
literal|"10.3.4.6"
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|tst_QHostInfo
class|class
name|tst_QHostInfo
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
name|tst_QHostInfo
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_QHostInfo
parameter_list|()
destructor_decl|;
public|public
name|slots
public|:
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
name|void
name|initTestCase
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|getSetCheck
parameter_list|()
function_decl|;
name|void
name|staticInformation
parameter_list|()
function_decl|;
name|void
name|lookupIPv4_data
parameter_list|()
function_decl|;
name|void
name|lookupIPv4
parameter_list|()
function_decl|;
name|void
name|lookupIPv6_data
parameter_list|()
function_decl|;
name|void
name|lookupIPv6
parameter_list|()
function_decl|;
name|void
name|reverseLookup_data
parameter_list|()
function_decl|;
name|void
name|reverseLookup
parameter_list|()
function_decl|;
name|void
name|blockingLookup_data
parameter_list|()
function_decl|;
name|void
name|blockingLookup
parameter_list|()
function_decl|;
name|void
name|raceCondition
parameter_list|()
function_decl|;
name|void
name|threadSafety
parameter_list|()
function_decl|;
name|void
name|threadSafetyAsynchronousAPI
parameter_list|()
function_decl|;
name|void
name|multipleSameLookups
parameter_list|()
function_decl|;
name|void
name|multipleDifferentLookups_data
parameter_list|()
function_decl|;
name|void
name|multipleDifferentLookups
parameter_list|()
function_decl|;
name|void
name|cache
parameter_list|()
function_decl|;
name|void
name|abortHostLookup
parameter_list|()
function_decl|;
name|void
name|abortHostLookupInDifferentThread
parameter_list|()
function_decl|;
protected|protected
name|slots
protected|:
name|void
name|resultsReady
parameter_list|(
specifier|const
name|QHostInfo
modifier|&
parameter_list|)
function_decl|;
private|private:
DECL|member|ipv6LookupsAvailable
name|bool
name|ipv6LookupsAvailable
decl_stmt|;
DECL|member|ipv6Available
name|bool
name|ipv6Available
decl_stmt|;
DECL|member|lookupDone
name|bool
name|lookupDone
decl_stmt|;
DECL|member|lookupsDoneCounter
name|int
name|lookupsDoneCounter
decl_stmt|;
DECL|member|lookupResults
name|QHostInfo
name|lookupResults
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_BEARERMANAGEMENT
DECL|member|netConfMan
name|QNetworkConfigurationManager
modifier|*
name|netConfMan
decl_stmt|;
DECL|member|networkConfiguration
name|QNetworkConfiguration
name|networkConfiguration
decl_stmt|;
DECL|member|networkSession
name|QScopedPointer
argument_list|<
name|QNetworkSession
argument_list|>
name|networkSession
decl_stmt|;
endif|#
directive|endif
block|}
class|;
end_class
begin_comment
comment|// Testing get/set functions
end_comment
begin_function
DECL|function|getSetCheck
name|void
name|tst_QHostInfo
operator|::
name|getSetCheck
parameter_list|()
block|{
name|QHostInfo
name|obj1
decl_stmt|;
comment|// HostInfoError QHostInfo::error()
comment|// void QHostInfo::setError(HostInfoError)
name|obj1
operator|.
name|setError
argument_list|(
name|QHostInfo
operator|::
name|HostInfoError
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QHostInfo
operator|::
name|HostInfoError
argument_list|(
literal|0
argument_list|)
argument_list|,
name|obj1
operator|.
name|error
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setError
argument_list|(
name|QHostInfo
operator|::
name|HostInfoError
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QHostInfo
operator|::
name|HostInfoError
argument_list|(
literal|1
argument_list|)
argument_list|,
name|obj1
operator|.
name|error
argument_list|()
argument_list|)
expr_stmt|;
comment|// int QHostInfo::lookupId()
comment|// void QHostInfo::setLookupId(int)
name|obj1
operator|.
name|setLookupId
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|0
argument_list|,
name|obj1
operator|.
name|lookupId
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setLookupId
argument_list|(
name|INT_MIN
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|INT_MIN
argument_list|,
name|obj1
operator|.
name|lookupId
argument_list|()
argument_list|)
expr_stmt|;
name|obj1
operator|.
name|setLookupId
argument_list|(
name|INT_MAX
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|INT_MAX
argument_list|,
name|obj1
operator|.
name|lookupId
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|staticInformation
name|void
name|tst_QHostInfo
operator|::
name|staticInformation
parameter_list|()
block|{
name|qDebug
argument_list|()
operator|<<
literal|"Hostname:"
operator|<<
name|QHostInfo
operator|::
name|localHostName
argument_list|()
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Domain name:"
operator|<<
name|QHostInfo
operator|::
name|localDomainName
argument_list|()
expr_stmt|;
block|}
end_function
begin_constructor
DECL|function|tst_QHostInfo
name|tst_QHostInfo
operator|::
name|tst_QHostInfo
parameter_list|()
block|{ }
end_constructor
begin_destructor
DECL|function|~tst_QHostInfo
name|tst_QHostInfo
operator|::
name|~
name|tst_QHostInfo
parameter_list|()
block|{ }
end_destructor
begin_function
DECL|function|initTestCase
name|void
name|tst_QHostInfo
operator|::
name|initTestCase
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QtNetworkSettings
operator|::
name|verifyTestNetworkSettings
argument_list|()
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_BEARERMANAGEMENT
comment|//start the default network
name|netConfMan
operator|=
operator|new
name|QNetworkConfigurationManager
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|networkConfiguration
operator|=
name|netConfMan
operator|->
name|defaultConfiguration
argument_list|()
expr_stmt|;
name|networkSession
operator|.
name|reset
argument_list|(
operator|new
name|QNetworkSession
argument_list|(
name|networkConfiguration
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|networkSession
operator|->
name|isOpen
argument_list|()
condition|)
block|{
name|networkSession
operator|->
name|open
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|networkSession
operator|->
name|waitForOpened
argument_list|(
literal|30000
argument_list|)
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
name|ipv6Available
operator|=
literal|false
expr_stmt|;
name|ipv6LookupsAvailable
operator|=
literal|false
expr_stmt|;
name|QTcpServer
name|server
decl_stmt|;
if|if
condition|(
name|server
operator|.
name|listen
argument_list|(
name|QHostAddress
argument_list|(
literal|"::1"
argument_list|)
argument_list|)
condition|)
block|{
comment|// We have IPv6 support
name|ipv6Available
operator|=
literal|true
expr_stmt|;
block|}
comment|// HP-UX 11i does not support IPv6 reverse lookups.
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_GETADDRINFO
argument_list|)
operator|||
operator|!
operator|(
name|defined
argument_list|(
name|Q_OS_HPUX
argument_list|)
operator|&&
name|defined
argument_list|(
name|__ia64
argument_list|)
operator|)
comment|// check if the system getaddrinfo can do IPv6 lookups
name|struct
name|addrinfo
name|hint
decl_stmt|,
modifier|*
name|result
init|=
literal|0
decl_stmt|;
name|memset
argument_list|(
operator|&
name|hint
argument_list|,
literal|0
argument_list|,
sizeof|sizeof
name|hint
argument_list|)
expr_stmt|;
name|hint
operator|.
name|ai_family
operator|=
name|AF_UNSPEC
expr_stmt|;
ifdef|#
directive|ifdef
name|AI_ADDRCONFIG
name|hint
operator|.
name|ai_flags
operator|=
name|AI_ADDRCONFIG
expr_stmt|;
endif|#
directive|endif
name|int
name|res
init|=
name|getaddrinfo
argument_list|(
literal|"::1"
argument_list|,
literal|"80"
argument_list|,
operator|&
name|hint
argument_list|,
operator|&
name|result
argument_list|)
decl_stmt|;
if|if
condition|(
name|res
operator|==
literal|0
condition|)
block|{
comment|// this test worked
name|freeaddrinfo
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|res
operator|=
name|getaddrinfo
argument_list|(
literal|"ipv6-test.dev.troll.no"
argument_list|,
literal|"80"
argument_list|,
operator|&
name|hint
argument_list|,
operator|&
name|result
argument_list|)
expr_stmt|;
if|if
condition|(
name|res
operator|==
literal|0
operator|&&
name|result
operator|!=
literal|0
operator|&&
name|result
operator|->
name|ai_family
operator|!=
name|AF_INET
condition|)
block|{
name|freeaddrinfo
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|ipv6LookupsAvailable
operator|=
literal|true
expr_stmt|;
block|}
block|}
endif|#
directive|endif
comment|// run each testcase with and without test enabled
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"cache"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"WithCache"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"WithoutCache"
argument_list|)
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|init
name|void
name|tst_QHostInfo
operator|::
name|init
parameter_list|()
block|{
comment|// delete the cache so inidividual testcase results are independent from each other
name|qt_qhostinfo_clear_cache
argument_list|()
expr_stmt|;
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|cache
argument_list|)
expr_stmt|;
name|qt_qhostinfo_enable_cache
argument_list|(
name|cache
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QHostInfo
operator|::
name|cleanup
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|lookupIPv4_data
name|void
name|tst_QHostInfo
operator|::
name|lookupIPv4_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"hostname"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"addresses"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"err"
argument_list|)
expr_stmt|;
comment|// Test server lookup
name|QTest
operator|::
name|newRow
argument_list|(
literal|"lookup_01"
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|<<
name|QtNetworkSettings
operator|::
name|serverIP
argument_list|()
operator|.
name|toString
argument_list|()
operator|<<
name|int
argument_list|(
name|QHostInfo
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
literal|""
operator|<<
literal|""
operator|<<
name|int
argument_list|(
name|QHostInfo
operator|::
name|HostNotFound
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"single_ip4"
argument_list|)
operator|<<
literal|"lupinella.troll.no"
operator|<<
name|lupinellaIp
operator|<<
name|int
argument_list|(
name|QHostInfo
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"multiple_ip4"
argument_list|)
operator|<<
literal|"multi.dev.troll.no"
operator|<<
literal|"1.2.3.4 1.2.3.5 10.3.3.31"
operator|<<
name|int
argument_list|(
name|QHostInfo
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"literal_ip4"
argument_list|)
operator|<<
name|lupinellaIp
operator|<<
name|lupinellaIp
operator|<<
name|int
argument_list|(
name|QHostInfo
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"notfound"
argument_list|)
operator|<<
literal|"this-name-does-not-exist-hopefully."
operator|<<
literal|""
operator|<<
name|int
argument_list|(
name|QHostInfo
operator|::
name|HostNotFound
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"idn-ace"
argument_list|)
operator|<<
literal|"xn--alqualond-34a.troll.no"
operator|<<
literal|"10.3.3.55"
operator|<<
name|int
argument_list|(
name|QHostInfo
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"idn-unicode"
argument_list|)
operator|<<
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"alqualond\353.troll.no"
argument_list|)
operator|<<
literal|"10.3.3.55"
operator|<<
name|int
argument_list|(
name|QHostInfo
operator|::
name|NoError
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|lookupIPv4
name|void
name|tst_QHostInfo
operator|::
name|lookupIPv4
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|hostname
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|err
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|addresses
argument_list|)
expr_stmt|;
name|lookupDone
operator|=
literal|false
expr_stmt|;
name|QHostInfo
operator|::
name|lookupHost
argument_list|(
name|hostname
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|resultsReady
argument_list|(
specifier|const
name|QHostInfo
operator|&
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|lookupDone
argument_list|)
expr_stmt|;
if|if
condition|(
operator|(
name|int
operator|)
name|lookupResults
operator|.
name|error
argument_list|()
operator|!=
operator|(
name|int
operator|)
name|err
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
name|hostname
operator|<<
literal|"=>"
operator|<<
name|lookupResults
operator|.
name|errorString
argument_list|()
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|lookupResults
operator|.
name|error
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|err
argument_list|)
expr_stmt|;
name|QStringList
name|tmp
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lookupResults
operator|.
name|addresses
argument_list|()
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|tmp
operator|.
name|append
argument_list|(
name|lookupResults
operator|.
name|addresses
argument_list|()
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|sort
argument_list|()
expr_stmt|;
name|QStringList
name|expected
init|=
name|addresses
operator|.
name|split
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
name|expected
operator|.
name|sort
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tmp
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
argument_list|,
name|expected
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|lookupIPv6_data
name|void
name|tst_QHostInfo
operator|::
name|lookupIPv6_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"hostname"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"addresses"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"err"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ipv6-net"
argument_list|)
operator|<<
literal|"www.ipv6-net.org"
operator|<<
literal|"62.93.217.177 2001:618:1401::4"
operator|<<
name|int
argument_list|(
name|QHostInfo
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ipv6-test"
argument_list|)
operator|<<
literal|"ipv6-test.dev.troll.no"
operator|<<
literal|"2001:638:a00:2::2"
operator|<<
name|int
argument_list|(
name|QHostInfo
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dns6-test"
argument_list|)
operator|<<
literal|"dns6-test-dev.troll.no"
operator|<<
literal|"2001:470:1f01:115::10"
operator|<<
name|int
argument_list|(
name|QHostInfo
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"multi-dns6"
argument_list|)
operator|<<
literal|"multi-dns6-test-dev.troll.no"
operator|<<
literal|"2001:470:1f01:115::11 2001:470:1f01:115::12"
operator|<<
name|int
argument_list|(
name|QHostInfo
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"dns46-test"
argument_list|)
operator|<<
literal|"dns46-test-dev.troll.no"
operator|<<
literal|"10.3.4.90 2001:470:1f01:115::13"
operator|<<
name|int
argument_list|(
name|QHostInfo
operator|::
name|NoError
argument_list|)
expr_stmt|;
comment|// avoid using real IPv6 addresses here because this will do a DNS query
comment|// real addresses are between 2000:: and 3fff:ffff:ffff:ffff:ffff:ffff:ffff
name|QTest
operator|::
name|newRow
argument_list|(
literal|"literal_ip6"
argument_list|)
operator|<<
literal|"f001:6b0:1:ea:202:a5ff:fecd:13a6"
operator|<<
literal|"f001:6b0:1:ea:202:a5ff:fecd:13a6"
operator|<<
name|int
argument_list|(
name|QHostInfo
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"literal_shortip6"
argument_list|)
operator|<<
literal|"f001:618:1401::4"
operator|<<
literal|"f001:618:1401::4"
operator|<<
name|int
argument_list|(
name|QHostInfo
operator|::
name|NoError
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|lookupIPv6
name|void
name|tst_QHostInfo
operator|::
name|lookupIPv6
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|hostname
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|err
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|addresses
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|ipv6LookupsAvailable
condition|)
name|QSKIP
argument_list|(
literal|"This platform does not support IPv6 lookups"
argument_list|)
expr_stmt|;
name|lookupDone
operator|=
literal|false
expr_stmt|;
name|QHostInfo
operator|::
name|lookupHost
argument_list|(
name|hostname
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|resultsReady
argument_list|(
specifier|const
name|QHostInfo
operator|&
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|lookupDone
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|lookupResults
operator|.
name|error
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|err
argument_list|)
expr_stmt|;
name|QStringList
name|tmp
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|lookupResults
operator|.
name|addresses
argument_list|()
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|tmp
operator|.
name|append
argument_list|(
name|lookupResults
operator|.
name|addresses
argument_list|()
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|sort
argument_list|()
expr_stmt|;
name|QStringList
name|expected
init|=
name|addresses
operator|.
name|split
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
name|expected
operator|.
name|sort
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tmp
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
operator|.
name|toLower
argument_list|()
argument_list|,
name|expected
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
operator|.
name|toLower
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|reverseLookup_data
name|void
name|tst_QHostInfo
operator|::
name|reverseLookup_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"address"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"hostNames"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"err"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"ipv6"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"trolltech.com"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"62.70.27.69"
argument_list|)
operator|<<
name|QStringList
argument_list|(
name|QString
argument_list|(
literal|"diverse.troll.no"
argument_list|)
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"gitorious.org"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"87.238.52.168"
argument_list|)
operator|<<
name|QStringList
argument_list|(
name|QString
argument_list|(
literal|"gitorious.org"
argument_list|)
argument_list|)
operator|<<
literal|0
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bogus-name"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"1::2::3::4"
argument_list|)
operator|<<
name|QStringList
argument_list|()
operator|<<
literal|1
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|reverseLookup
name|void
name|tst_QHostInfo
operator|::
name|reverseLookup
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|address
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|hostNames
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|err
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|ipv6
argument_list|)
expr_stmt|;
if|if
condition|(
name|ipv6
operator|&&
operator|!
name|ipv6LookupsAvailable
condition|)
block|{
name|QSKIP
argument_list|(
literal|"IPv6 reverse lookups are not supported on this platform"
argument_list|)
expr_stmt|;
block|}
name|QHostInfo
name|info
init|=
name|QHostInfo
operator|::
name|fromName
argument_list|(
name|address
argument_list|)
decl_stmt|;
if|if
condition|(
name|err
operator|==
literal|0
condition|)
block|{
name|QVERIFY
argument_list|(
name|hostNames
operator|.
name|contains
argument_list|(
name|info
operator|.
name|hostName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|info
operator|.
name|addresses
argument_list|()
operator|.
name|first
argument_list|()
argument_list|,
name|QHostAddress
argument_list|(
name|address
argument_list|)
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QCOMPARE
argument_list|(
name|info
operator|.
name|hostName
argument_list|()
argument_list|,
name|address
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|info
operator|.
name|error
argument_list|()
argument_list|,
name|QHostInfo
operator|::
name|HostNotFound
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|blockingLookup_data
name|void
name|tst_QHostInfo
operator|::
name|blockingLookup_data
parameter_list|()
block|{
name|lookupIPv4_data
argument_list|()
expr_stmt|;
if|if
condition|(
name|ipv6LookupsAvailable
condition|)
name|lookupIPv6_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|blockingLookup
name|void
name|tst_QHostInfo
operator|::
name|blockingLookup
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|hostname
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|err
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|addresses
argument_list|)
expr_stmt|;
name|QHostInfo
name|hostInfo
init|=
name|QHostInfo
operator|::
name|fromName
argument_list|(
name|hostname
argument_list|)
decl_stmt|;
name|QStringList
name|tmp
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hostInfo
operator|.
name|addresses
argument_list|()
operator|.
name|count
argument_list|()
condition|;
operator|++
name|i
control|)
name|tmp
operator|.
name|append
argument_list|(
name|hostInfo
operator|.
name|addresses
argument_list|()
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|)
expr_stmt|;
name|tmp
operator|.
name|sort
argument_list|()
expr_stmt|;
if|if
condition|(
operator|(
name|int
operator|)
name|hostInfo
operator|.
name|error
argument_list|()
operator|!=
operator|(
name|int
operator|)
name|err
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
name|hostname
operator|<<
literal|"=>"
operator|<<
name|lookupResults
operator|.
name|errorString
argument_list|()
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|hostInfo
operator|.
name|error
argument_list|()
argument_list|,
operator|(
name|int
operator|)
name|err
argument_list|)
expr_stmt|;
name|QStringList
name|expected
init|=
name|addresses
operator|.
name|split
argument_list|(
literal|' '
argument_list|)
decl_stmt|;
name|expected
operator|.
name|sort
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|tmp
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
operator|.
name|toUpper
argument_list|()
argument_list|,
name|expected
operator|.
name|join
argument_list|(
literal|" "
argument_list|)
operator|.
name|toUpper
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|raceCondition
name|void
name|tst_QHostInfo
operator|::
name|raceCondition
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
operator|++
name|i
control|)
block|{
name|QTcpSocket
name|socket
decl_stmt|;
name|socket
operator|.
name|connectToHost
argument_list|(
literal|"notavalidname.troll.no"
argument_list|,
literal|80
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_class
DECL|class|LookupThread
class|class
name|LookupThread
super|:
specifier|public
name|QThread
block|{
protected|protected:
DECL|function|run
specifier|inline
name|void
name|run
parameter_list|()
block|{
name|QHostInfo
name|info
init|=
name|QHostInfo
operator|::
name|fromName
argument_list|(
literal|"qt.nokia.com"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|info
operator|.
name|error
argument_list|()
argument_list|,
name|QHostInfo
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|info
operator|.
name|addresses
argument_list|()
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|info
operator|.
name|addresses
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"87.238.50.178"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|threadSafety
name|void
name|tst_QHostInfo
operator|::
name|threadSafety
parameter_list|()
block|{
specifier|const
name|int
name|nattempts
init|=
literal|5
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
specifier|const
name|int
name|runs
init|=
literal|10
decl_stmt|;
else|#
directive|else
specifier|const
name|int
name|runs
init|=
literal|100
decl_stmt|;
endif|#
directive|endif
name|LookupThread
name|thr
index|[
name|nattempts
index|]
decl_stmt|;
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|runs
condition|;
operator|++
name|j
control|)
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nattempts
condition|;
operator|++
name|i
control|)
name|thr
index|[
name|i
index|]
operator|.
name|start
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|k
init|=
name|nattempts
operator|-
literal|1
init|;
name|k
operator|>=
literal|0
condition|;
operator|--
name|k
control|)
name|thr
index|[
name|k
index|]
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_class
DECL|class|LookupReceiver
class|class
name|LookupReceiver
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
name|void
name|start
parameter_list|()
function_decl|;
name|void
name|resultsReady
parameter_list|(
specifier|const
name|QHostInfo
modifier|&
parameter_list|)
function_decl|;
public|public:
DECL|member|result
name|QHostInfo
name|result
decl_stmt|;
DECL|member|numrequests
name|int
name|numrequests
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|start
name|void
name|LookupReceiver
operator|::
name|start
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|numrequests
condition|;
name|i
operator|++
control|)
name|QHostInfo
operator|::
name|lookupHost
argument_list|(
name|QString
argument_list|(
literal|"qt.nokia.com"
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|resultsReady
argument_list|(
specifier|const
name|QHostInfo
operator|&
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resultsReady
name|void
name|LookupReceiver
operator|::
name|resultsReady
parameter_list|(
specifier|const
name|QHostInfo
modifier|&
name|info
parameter_list|)
block|{
name|result
operator|=
name|info
expr_stmt|;
name|numrequests
operator|--
expr_stmt|;
if|if
condition|(
name|numrequests
operator|==
literal|0
operator|||
name|info
operator|.
name|error
argument_list|()
operator|!=
name|QHostInfo
operator|::
name|NoError
condition|)
name|QThread
operator|::
name|currentThread
argument_list|()
operator|->
name|quit
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|threadSafetyAsynchronousAPI
name|void
name|tst_QHostInfo
operator|::
name|threadSafetyAsynchronousAPI
parameter_list|()
block|{
specifier|const
name|int
name|nattempts
init|=
literal|10
decl_stmt|;
specifier|const
name|int
name|lookupsperthread
init|=
literal|10
decl_stmt|;
name|QList
argument_list|<
name|QThread
modifier|*
argument_list|>
name|threads
decl_stmt|;
name|QList
argument_list|<
name|LookupReceiver
modifier|*
argument_list|>
name|receivers
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|nattempts
condition|;
operator|++
name|i
control|)
block|{
name|QThread
modifier|*
name|thread
init|=
operator|new
name|QThread
decl_stmt|;
name|LookupReceiver
modifier|*
name|receiver
init|=
operator|new
name|LookupReceiver
decl_stmt|;
name|receiver
operator|->
name|numrequests
operator|=
name|lookupsperthread
expr_stmt|;
name|receivers
operator|.
name|append
argument_list|(
name|receiver
argument_list|)
expr_stmt|;
name|receiver
operator|->
name|moveToThread
argument_list|(
name|thread
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|thread
argument_list|,
name|SIGNAL
argument_list|(
name|started
argument_list|()
argument_list|)
argument_list|,
name|receiver
argument_list|,
name|SLOT
argument_list|(
name|start
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|thread
operator|->
name|start
argument_list|()
expr_stmt|;
name|threads
operator|.
name|append
argument_list|(
name|thread
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|k
init|=
name|threads
operator|.
name|count
argument_list|()
operator|-
literal|1
init|;
name|k
operator|>=
literal|0
condition|;
operator|--
name|k
control|)
name|QVERIFY
argument_list|(
name|threads
operator|.
name|at
argument_list|(
name|k
argument_list|)
operator|->
name|wait
argument_list|(
literal|60000
argument_list|)
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|LookupReceiver
modifier|*
name|receiver
decl|,
name|receivers
control|)
block|{
name|QCOMPARE
argument_list|(
name|receiver
operator|->
name|result
operator|.
name|error
argument_list|()
argument_list|,
name|QHostInfo
operator|::
name|NoError
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|receiver
operator|->
name|result
operator|.
name|addresses
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"87.238.50.178"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|receiver
operator|->
name|numrequests
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// this test is for the multi-threaded QHostInfo rewrite. It is about getting results at all,
end_comment
begin_comment
comment|// not about getting correct IPs
end_comment
begin_function
DECL|function|multipleSameLookups
name|void
name|tst_QHostInfo
operator|::
name|multipleSameLookups
parameter_list|()
block|{
specifier|const
name|int
name|COUNT
init|=
literal|10
decl_stmt|;
name|lookupsDoneCounter
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|COUNT
condition|;
name|i
operator|++
control|)
name|QHostInfo
operator|::
name|lookupHost
argument_list|(
literal|"localhost"
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|resultsReady
argument_list|(
specifier|const
name|QHostInfo
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QElapsedTimer
name|timer
decl_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
name|timer
operator|.
name|elapsed
argument_list|()
operator|<
literal|10000
operator|&&
name|lookupsDoneCounter
operator|<
name|COUNT
condition|)
block|{
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|2
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|lookupsDoneCounter
argument_list|,
name|COUNT
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// this test is for the multi-threaded QHostInfo rewrite. It is about getting results at all,
end_comment
begin_comment
comment|// not about getting correct IPs
end_comment
begin_function
DECL|function|multipleDifferentLookups_data
name|void
name|tst_QHostInfo
operator|::
name|multipleDifferentLookups_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"repeats"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"2"
argument_list|)
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5"
argument_list|)
operator|<<
literal|5
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"10"
argument_list|)
operator|<<
literal|10
expr_stmt|;
block|}
end_function
begin_function
DECL|function|multipleDifferentLookups
name|void
name|tst_QHostInfo
operator|::
name|multipleDifferentLookups
parameter_list|()
block|{
name|QStringList
name|hostnameList
decl_stmt|;
name|hostnameList
operator|<<
literal|"www.ovi.com"
operator|<<
literal|"www.nokia.com"
operator|<<
literal|"qt.nokia.com"
operator|<<
literal|"www.trolltech.com"
operator|<<
literal|"troll.no"
operator|<<
literal|"www.qtcentre.org"
operator|<<
literal|"forum.nokia.com"
operator|<<
literal|"www.nokia.com"
operator|<<
literal|"wiki.forum.nokia.com"
operator|<<
literal|"www.nokia.com"
operator|<<
literal|"nokia.de"
operator|<<
literal|"127.0.0.1"
operator|<<
literal|"----"
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|repeats
argument_list|)
expr_stmt|;
specifier|const
name|int
name|COUNT
init|=
name|hostnameList
operator|.
name|size
argument_list|()
decl_stmt|;
name|lookupsDoneCounter
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|hostnameList
operator|.
name|size
argument_list|()
condition|;
name|i
operator|++
control|)
for|for
control|(
name|int
name|j
init|=
literal|0
init|;
name|j
operator|<
name|repeats
condition|;
operator|++
name|j
control|)
name|QHostInfo
operator|::
name|lookupHost
argument_list|(
name|hostnameList
operator|.
name|at
argument_list|(
name|i
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|resultsReady
argument_list|(
specifier|const
name|QHostInfo
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QElapsedTimer
name|timer
decl_stmt|;
name|timer
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
name|timer
operator|.
name|elapsed
argument_list|()
operator|<
literal|60000
operator|&&
name|lookupsDoneCounter
operator|<
name|repeats
operator|*
name|COUNT
condition|)
block|{
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|2
argument_list|)
expr_stmt|;
comment|//qDebug()<< "t:"<< timer.elapsed();
block|}
name|QCOMPARE
argument_list|(
name|lookupsDoneCounter
argument_list|,
name|repeats
operator|*
name|COUNT
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cache
name|void
name|tst_QHostInfo
operator|::
name|cache
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|cache
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|cache
condition|)
return|return;
comment|// test makes only sense when cache enabled
comment|// reset slot counter
name|lookupsDoneCounter
operator|=
literal|0
expr_stmt|;
comment|// lookup once, wait in event loop, result should not come directly.
name|bool
name|valid
init|=
literal|true
decl_stmt|;
name|int
name|id
init|=
operator|-
literal|1
decl_stmt|;
name|QHostInfo
name|result
init|=
name|qt_qhostinfo_lookup
argument_list|(
literal|"localhost"
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|resultsReady
argument_list|(
name|QHostInfo
argument_list|)
argument_list|)
argument_list|,
operator|&
name|valid
argument_list|,
operator|&
name|id
argument_list|)
decl_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|valid
operator|==
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|result
operator|.
name|addresses
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// loopkup second time, result should come directly
name|valid
operator|=
literal|false
expr_stmt|;
name|result
operator|=
name|qt_qhostinfo_lookup
argument_list|(
literal|"localhost"
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|resultsReady
argument_list|(
name|QHostInfo
argument_list|)
argument_list|)
argument_list|,
operator|&
name|valid
argument_list|,
operator|&
name|id
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|valid
operator|==
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|result
operator|.
name|addresses
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// clear the cache
name|qt_qhostinfo_clear_cache
argument_list|()
expr_stmt|;
comment|// lookup third time, result should not come directly.
name|valid
operator|=
literal|true
expr_stmt|;
name|result
operator|=
name|qt_qhostinfo_lookup
argument_list|(
literal|"localhost"
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|resultsReady
argument_list|(
name|QHostInfo
argument_list|)
argument_list|)
argument_list|,
operator|&
name|valid
argument_list|,
operator|&
name|id
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|valid
operator|==
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|result
operator|.
name|addresses
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// the slot should have been called 2 times.
name|QCOMPARE
argument_list|(
name|lookupsDoneCounter
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resultsReady
name|void
name|tst_QHostInfo
operator|::
name|resultsReady
parameter_list|(
specifier|const
name|QHostInfo
modifier|&
name|hi
parameter_list|)
block|{
name|lookupDone
operator|=
literal|true
expr_stmt|;
name|lookupResults
operator|=
name|hi
expr_stmt|;
name|lookupsDoneCounter
operator|++
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|exitLoop
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|abortHostLookup
name|void
name|tst_QHostInfo
operator|::
name|abortHostLookup
parameter_list|()
block|{
comment|//reset counter
name|lookupsDoneCounter
operator|=
literal|0
expr_stmt|;
name|bool
name|valid
init|=
literal|false
decl_stmt|;
name|int
name|id
init|=
operator|-
literal|1
decl_stmt|;
name|QHostInfo
name|result
init|=
name|qt_qhostinfo_lookup
argument_list|(
literal|"qt.nokia.com"
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|resultsReady
argument_list|(
name|QHostInfo
argument_list|)
argument_list|)
argument_list|,
operator|&
name|valid
argument_list|,
operator|&
name|id
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|valid
argument_list|)
expr_stmt|;
comment|//it is assumed that the DNS request/response in the backend is slower than it takes to call abort
name|QHostInfo
operator|::
name|abortHostLookup
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lookupsDoneCounter
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|LookupAborter
class|class
name|LookupAborter
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
DECL|function|abort
name|void
name|abort
parameter_list|()
block|{
name|QHostInfo
operator|::
name|abortHostLookup
argument_list|(
name|id
argument_list|)
expr_stmt|;
name|QThread
operator|::
name|currentThread
argument_list|()
operator|->
name|quit
argument_list|()
expr_stmt|;
block|}
public|public:
DECL|member|id
name|int
name|id
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|abortHostLookupInDifferentThread
name|void
name|tst_QHostInfo
operator|::
name|abortHostLookupInDifferentThread
parameter_list|()
block|{
comment|//reset counter
name|lookupsDoneCounter
operator|=
literal|0
expr_stmt|;
name|bool
name|valid
init|=
literal|false
decl_stmt|;
name|int
name|id
init|=
operator|-
literal|1
decl_stmt|;
name|QHostInfo
name|result
init|=
name|qt_qhostinfo_lookup
argument_list|(
literal|"qt.nokia.com"
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|resultsReady
argument_list|(
name|QHostInfo
argument_list|)
argument_list|)
argument_list|,
operator|&
name|valid
argument_list|,
operator|&
name|id
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|valid
argument_list|)
expr_stmt|;
name|QThread
name|thread
decl_stmt|;
name|LookupAborter
name|aborter
decl_stmt|;
name|aborter
operator|.
name|id
operator|=
name|id
expr_stmt|;
name|aborter
operator|.
name|moveToThread
argument_list|(
operator|&
name|thread
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|thread
argument_list|,
name|SIGNAL
argument_list|(
name|started
argument_list|()
argument_list|)
argument_list|,
operator|&
name|aborter
argument_list|,
name|SLOT
argument_list|(
name|abort
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|//it is assumed that the DNS request/response in the backend is slower than it takes to schedule the thread and call abort
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|thread
operator|.
name|wait
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lookupsDoneCounter
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QHostInfo
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qhostinfo.moc"
end_include
end_unit
