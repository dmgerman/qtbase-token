begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:GPL-EXCEPT$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3 as published by the Free Software ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QStringList>
end_include
begin_include
include|#
directive|include
file|<QLocalSocket>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_BEARERMANAGEMENT
end_ifndef
begin_include
include|#
directive|include
file|<QtNetwork/qnetworkconfiguration.h>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qnetworkconfigmanager.h>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qnetworksession.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|<QEventLoop>
end_include
begin_include
include|#
directive|include
file|<QTimer>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_function
name|QT_USE_NAMESPACE
DECL|macro|NO_DISCOVERED_CONFIGURATIONS_ERROR
define|#
directive|define
name|NO_DISCOVERED_CONFIGURATIONS_ERROR
value|1
DECL|macro|SESSION_OPEN_ERROR
define|#
directive|define
name|SESSION_OPEN_ERROR
value|2
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
modifier|*
name|argv
parameter_list|)
block|{
name|QCoreApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_BEARERMANAGEMENT
comment|// Update configurations so that everything is up to date for this process too.
comment|// Event loop is used to wait for awhile.
name|QNetworkConfigurationManager
name|manager
decl_stmt|;
name|manager
operator|.
name|updateConfigurations
argument_list|()
expr_stmt|;
name|QEventLoop
name|iIgnoreEventLoop
decl_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|3000
argument_list|,
operator|&
name|iIgnoreEventLoop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|iIgnoreEventLoop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QList
argument_list|<
name|QNetworkConfiguration
argument_list|>
name|discovered
init|=
name|manager
operator|.
name|allConfigurations
argument_list|(
name|QNetworkConfiguration
operator|::
name|Discovered
argument_list|)
decl_stmt|;
foreach|foreach
control|(
name|QNetworkConfiguration
name|config
decl|,
name|discovered
control|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"Lackey: Name of the config enumerated: "
operator|<<
name|config
operator|.
name|name
argument_list|()
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Lackey: State of the config enumerated: "
operator|<<
name|config
operator|.
name|state
argument_list|()
expr_stmt|;
block|}
if|if
condition|(
name|discovered
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qDebug
argument_list|(
literal|"Lackey: no discovered configurations, returning empty error."
argument_list|)
expr_stmt|;
return|return
name|NO_DISCOVERED_CONFIGURATIONS_ERROR
return|;
block|}
comment|// Cannot read/write to processes on WinCE.
comment|// Easiest alternative is to use sockets for IPC.
name|QLocalSocket
name|oopSocket
decl_stmt|;
name|oopSocket
operator|.
name|connectToServer
argument_list|(
literal|"tst_qnetworksession"
argument_list|)
expr_stmt|;
name|oopSocket
operator|.
name|waitForConnected
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Lackey started"
expr_stmt|;
name|QNetworkSession
modifier|*
name|session
init|=
literal|0
decl_stmt|;
do|do
block|{
if|if
condition|(
name|session
condition|)
block|{
operator|delete
name|session
expr_stmt|;
name|session
operator|=
literal|0
expr_stmt|;
block|}
name|qDebug
argument_list|()
operator|<<
literal|"Discovered configurations:"
operator|<<
name|discovered
operator|.
name|count
argument_list|()
expr_stmt|;
if|if
condition|(
name|discovered
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"No more discovered configurations"
expr_stmt|;
break|break;
block|}
name|qDebug
argument_list|()
operator|<<
literal|"Taking first configuration"
expr_stmt|;
name|QNetworkConfiguration
name|config
init|=
name|discovered
operator|.
name|takeFirst
argument_list|()
decl_stmt|;
if|if
condition|(
operator|(
name|config
operator|.
name|state
argument_list|()
operator|&
name|QNetworkConfiguration
operator|::
name|Active
operator|)
operator|==
name|QNetworkConfiguration
operator|::
name|Active
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
name|config
operator|.
name|name
argument_list|()
operator|<<
literal|"is active, therefore skipping it (looking for configs in 'discovered' state)."
expr_stmt|;
continue|continue;
block|}
name|qDebug
argument_list|()
operator|<<
literal|"Creating session for"
operator|<<
name|config
operator|.
name|name
argument_list|()
operator|<<
name|config
operator|.
name|identifier
argument_list|()
expr_stmt|;
name|session
operator|=
operator|new
name|QNetworkSession
argument_list|(
name|config
argument_list|)
expr_stmt|;
name|QString
name|output
init|=
name|QString
argument_list|(
literal|"Starting session for %1\n"
argument_list|)
operator|.
name|arg
argument_list|(
name|config
operator|.
name|identifier
argument_list|()
argument_list|)
decl_stmt|;
name|oopSocket
operator|.
name|write
argument_list|(
name|output
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
name|oopSocket
operator|.
name|waitForBytesWritten
argument_list|()
expr_stmt|;
name|session
operator|->
name|open
argument_list|()
expr_stmt|;
name|session
operator|->
name|waitForOpened
argument_list|()
expr_stmt|;
block|}
do|while
condition|(
operator|!
operator|(
name|session
operator|&&
name|session
operator|->
name|isOpen
argument_list|()
operator|)
condition|)
do|;
name|qDebug
argument_list|()
operator|<<
literal|"lackey: loop done"
expr_stmt|;
if|if
condition|(
operator|!
name|session
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"Could not start session"
expr_stmt|;
name|oopSocket
operator|.
name|disconnectFromServer
argument_list|()
expr_stmt|;
name|oopSocket
operator|.
name|waitForDisconnected
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
return|return
name|SESSION_OPEN_ERROR
return|;
block|}
name|QByteArray
name|output
init|=
literal|"Started session for "
operator|+
name|session
operator|->
name|configuration
argument_list|()
operator|.
name|identifier
argument_list|()
operator|.
name|toLatin1
argument_list|()
operator|+
literal|'\n'
decl_stmt|;
name|oopSocket
operator|.
name|write
argument_list|(
name|output
argument_list|)
expr_stmt|;
name|oopSocket
operator|.
name|waitForBytesWritten
argument_list|()
expr_stmt|;
name|oopSocket
operator|.
name|waitForReadyRead
argument_list|()
expr_stmt|;
name|oopSocket
operator|.
name|readLine
argument_list|()
expr_stmt|;
name|session
operator|->
name|stop
argument_list|()
expr_stmt|;
operator|delete
name|session
expr_stmt|;
name|oopSocket
operator|.
name|disconnectFromServer
argument_list|()
expr_stmt|;
name|oopSocket
operator|.
name|waitForDisconnected
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
endif|#
directive|endif
return|return
literal|0
return|;
block|}
end_function
end_unit
