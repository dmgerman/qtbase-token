begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QLocalServer>
end_include
begin_include
include|#
directive|include
file|<QLocalSocket>
end_include
begin_include
include|#
directive|include
file|<QTimer>
end_include
begin_include
include|#
directive|include
file|"../../qbearertestcommon.h"
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qnetworkconfigmanager.h>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qnetworksession.h>
end_include
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_ICD
argument_list|)
end_if
begin_include
include|#
directive|include
file|<stdio.h>
end_include
begin_include
include|#
directive|include
file|<iapconf.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_decl_stmt
name|QT_USE_NAMESPACE
comment|// Can be used to configure tests that require manual attention (such as roaming)
comment|//#define QNETWORKSESSION_MANUAL_TESTS 1
name|Q_DECLARE_METATYPE
argument_list|(
name|QNetworkConfiguration
argument_list|)
DECL|variable|Type
name|Q_DECLARE_METATYPE
argument_list|(
name|QNetworkConfiguration
operator|::
name|Type
argument_list|)
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|tst_QNetworkSession
class|class
name|tst_QNetworkSession
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|robustnessBombing
parameter_list|()
function_decl|;
name|void
name|sessionClosing_data
parameter_list|()
function_decl|;
name|void
name|sessionClosing
parameter_list|()
function_decl|;
name|void
name|outOfProcessSession
parameter_list|()
function_decl|;
name|void
name|invalidSession
parameter_list|()
function_decl|;
name|void
name|repeatedOpenClose_data
parameter_list|()
function_decl|;
name|void
name|repeatedOpenClose
parameter_list|()
function_decl|;
name|void
name|sessionProperties_data
parameter_list|()
function_decl|;
name|void
name|sessionProperties
parameter_list|()
function_decl|;
name|void
name|userChoiceSession_data
parameter_list|()
function_decl|;
name|void
name|userChoiceSession
parameter_list|()
function_decl|;
name|void
name|sessionOpenCloseStop_data
parameter_list|()
function_decl|;
name|void
name|sessionOpenCloseStop
parameter_list|()
function_decl|;
name|void
name|sessionAutoClose_data
parameter_list|()
function_decl|;
name|void
name|sessionAutoClose
parameter_list|()
function_decl|;
private|private:
DECL|member|manager
name|QNetworkConfigurationManager
name|manager
decl_stmt|;
DECL|member|inProcessSessionManagementCount
name|int
name|inProcessSessionManagementCount
decl_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_ICD
argument_list|)
DECL|member|iapconf
name|Maemo
operator|::
name|IAPConf
modifier|*
name|iapconf
decl_stmt|;
DECL|member|iapconf2
name|Maemo
operator|::
name|IAPConf
modifier|*
name|iapconf2
decl_stmt|;
DECL|member|gprsiap
name|Maemo
operator|::
name|IAPConf
modifier|*
name|gprsiap
decl_stmt|;
DECL|macro|MAX_IAPS
define|#
directive|define
name|MAX_IAPS
value|10
DECL|member|iaps
name|Maemo
operator|::
name|IAPConf
modifier|*
name|iaps
index|[
name|MAX_IAPS
index|]
decl_stmt|;
DECL|member|icd_stub
name|QProcess
modifier|*
name|icd_stub
decl_stmt|;
endif|#
directive|endif
block|}
class|;
end_class
begin_comment
comment|// Helper functions
end_comment
begin_function_decl
name|bool
name|openSession
parameter_list|(
name|QNetworkSession
modifier|*
name|session
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|bool
name|closeSession
parameter_list|(
name|QNetworkSession
modifier|*
name|session
parameter_list|,
name|bool
name|lastSessionOnConfiguration
init|=
literal|true
parameter_list|)
function_decl|;
end_function_decl
begin_function_decl
name|void
name|updateConfigurations
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|void
name|printConfigurations
parameter_list|()
function_decl|;
end_function_decl
begin_function_decl
name|QNetworkConfiguration
name|suitableConfiguration
parameter_list|(
name|QString
name|bearerType
parameter_list|,
name|QNetworkConfiguration
operator|::
name|Type
name|configType
parameter_list|)
function_decl|;
end_function_decl
begin_function
DECL|function|initTestCase
name|void
name|tst_QNetworkSession
operator|::
name|initTestCase
parameter_list|()
block|{
name|qRegisterMetaType
argument_list|<
name|QNetworkConfiguration
argument_list|>
argument_list|(
literal|"QNetworkConfiguration"
argument_list|)
expr_stmt|;
name|qRegisterMetaType
argument_list|<
name|QNetworkConfiguration
operator|::
name|Type
argument_list|>
argument_list|(
literal|"QNetworkConfiguration::Type"
argument_list|)
expr_stmt|;
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_ICD
argument_list|)
name|iapconf
operator|=
operator|new
name|Maemo
operator|::
name|IAPConf
argument_list|(
literal|"007"
argument_list|)
expr_stmt|;
name|iapconf
operator|->
name|setValue
argument_list|(
literal|"ipv4_type"
argument_list|,
literal|"AUTO"
argument_list|)
expr_stmt|;
name|iapconf
operator|->
name|setValue
argument_list|(
literal|"wlan_wepkey1"
argument_list|,
literal|"connt"
argument_list|)
expr_stmt|;
name|iapconf
operator|->
name|setValue
argument_list|(
literal|"wlan_wepdefkey"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|iapconf
operator|->
name|setValue
argument_list|(
literal|"wlan_ssid"
argument_list|,
name|QByteArray
argument_list|(
literal|"JamesBond"
argument_list|)
argument_list|)
expr_stmt|;
name|iapconf
operator|->
name|setValue
argument_list|(
literal|"name"
argument_list|,
literal|"James Bond"
argument_list|)
expr_stmt|;
name|iapconf
operator|->
name|setValue
argument_list|(
literal|"type"
argument_list|,
literal|"WLAN_INFRA"
argument_list|)
expr_stmt|;
name|gprsiap
operator|=
operator|new
name|Maemo
operator|::
name|IAPConf
argument_list|(
literal|"This-is-GPRS-IAP"
argument_list|)
expr_stmt|;
name|gprsiap
operator|->
name|setValue
argument_list|(
literal|"ask_password"
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|gprsiap
operator|->
name|setValue
argument_list|(
literal|"gprs_accesspointname"
argument_list|,
literal|"internet"
argument_list|)
expr_stmt|;
name|gprsiap
operator|->
name|setValue
argument_list|(
literal|"gprs_password"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|gprsiap
operator|->
name|setValue
argument_list|(
literal|"gprs_username"
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|gprsiap
operator|->
name|setValue
argument_list|(
literal|"ipv4_autodns"
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|gprsiap
operator|->
name|setValue
argument_list|(
literal|"ipv4_type"
argument_list|,
literal|"AUTO"
argument_list|)
expr_stmt|;
name|gprsiap
operator|->
name|setValue
argument_list|(
literal|"sim_imsi"
argument_list|,
literal|"244070123456789"
argument_list|)
expr_stmt|;
name|gprsiap
operator|->
name|setValue
argument_list|(
literal|"name"
argument_list|,
literal|"MI6"
argument_list|)
expr_stmt|;
name|gprsiap
operator|->
name|setValue
argument_list|(
literal|"type"
argument_list|,
literal|"GPRS"
argument_list|)
expr_stmt|;
name|iapconf2
operator|=
operator|new
name|Maemo
operator|::
name|IAPConf
argument_list|(
literal|"osso.net"
argument_list|)
expr_stmt|;
name|iapconf2
operator|->
name|setValue
argument_list|(
literal|"ipv4_type"
argument_list|,
literal|"AUTO"
argument_list|)
expr_stmt|;
name|iapconf2
operator|->
name|setValue
argument_list|(
literal|"wlan_wepkey1"
argument_list|,
literal|"osso.net"
argument_list|)
expr_stmt|;
name|iapconf2
operator|->
name|setValue
argument_list|(
literal|"wlan_wepdefkey"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|iapconf2
operator|->
name|setValue
argument_list|(
literal|"wlan_ssid"
argument_list|,
name|QByteArray
argument_list|(
literal|"osso.net"
argument_list|)
argument_list|)
expr_stmt|;
name|iapconf2
operator|->
name|setValue
argument_list|(
literal|"name"
argument_list|,
literal|"osso.net"
argument_list|)
expr_stmt|;
name|iapconf2
operator|->
name|setValue
argument_list|(
literal|"type"
argument_list|,
literal|"WLAN_INFRA"
argument_list|)
expr_stmt|;
name|iapconf2
operator|->
name|setValue
argument_list|(
literal|"wlan_security"
argument_list|,
literal|"WEP"
argument_list|)
expr_stmt|;
comment|/* Create large number of IAPs in the gconf and see what happens */
name|fflush
argument_list|(
name|stdout
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"Creating %d IAPS: "
argument_list|,
name|MAX_IAPS
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAX_IAPS
condition|;
name|i
operator|++
control|)
block|{
name|QString
name|num
init|=
name|QString
argument_list|()
operator|.
name|sprintf
argument_list|(
literal|"%d"
argument_list|,
name|i
argument_list|)
decl_stmt|;
name|QString
name|iap
init|=
literal|"iap-"
operator|+
name|num
decl_stmt|;
name|iaps
index|[
name|i
index|]
operator|=
operator|new
name|Maemo
operator|::
name|IAPConf
argument_list|(
name|iap
argument_list|)
expr_stmt|;
name|iaps
index|[
name|i
index|]
operator|->
name|setValue
argument_list|(
literal|"name"
argument_list|,
name|QString
argument_list|(
literal|"test-iap-"
argument_list|)
operator|+
name|num
argument_list|)
expr_stmt|;
name|iaps
index|[
name|i
index|]
operator|->
name|setValue
argument_list|(
literal|"type"
argument_list|,
literal|"WLAN_INFRA"
argument_list|)
expr_stmt|;
name|iaps
index|[
name|i
index|]
operator|->
name|setValue
argument_list|(
literal|"wlan_ssid"
argument_list|,
name|QString
argument_list|(
name|QString
argument_list|(
literal|"test-ssid-"
argument_list|)
operator|+
name|num
argument_list|)
operator|.
name|toAscii
argument_list|()
argument_list|)
expr_stmt|;
name|iaps
index|[
name|i
index|]
operator|->
name|setValue
argument_list|(
literal|"wlan_security"
argument_list|,
literal|"WPA_PSK"
argument_list|)
expr_stmt|;
name|iaps
index|[
name|i
index|]
operator|->
name|setValue
argument_list|(
literal|"EAP_wpa_preshared_passphrase"
argument_list|,
name|QString
argument_list|(
literal|"test-passphrase-"
argument_list|)
operator|+
name|num
argument_list|)
expr_stmt|;
name|printf
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|fflush
argument_list|(
name|stdout
argument_list|)
expr_stmt|;
block|}
name|printf
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|fflush
argument_list|(
name|stdout
argument_list|)
expr_stmt|;
name|icd_stub
operator|=
operator|new
name|QProcess
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|icd_stub
operator|->
name|start
argument_list|(
literal|"/usr/bin/icd2_stub.py"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// Add a known network to scan list that icd2 stub returns
name|QProcess
name|dbus_send
decl_stmt|;
comment|// 007 network
name|dbus_send
operator|.
name|start
argument_list|(
literal|"dbus-send --type=method_call --system "
literal|"--dest=com.nokia.icd2 /com/nokia/icd2 "
literal|"com.nokia.icd2.testing.add_available_network "
literal|"string:'' uint32:0 string:'' "
literal|"string:WLAN_INFRA uint32:5000011 array:byte:48,48,55"
argument_list|)
expr_stmt|;
name|dbus_send
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
comment|// osso.net network
name|dbus_send
operator|.
name|start
argument_list|(
literal|"dbus-send --type=method_call --system "
literal|"--dest=com.nokia.icd2 /com/nokia/icd2 "
literal|"com.nokia.icd2.testing.add_available_network "
literal|"string:'' uint32:0 string:'' "
literal|"string:WLAN_INFRA uint32:83886097 array:byte:111,115,115,111,46,110,101,116"
argument_list|)
expr_stmt|;
name|dbus_send
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|inProcessSessionManagementCount
operator|=
operator|-
literal|1
expr_stmt|;
name|QSignalSpy
name|spy
argument_list|(
operator|&
name|manager
argument_list|,
name|SIGNAL
argument_list|(
name|updateCompleted
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|manager
operator|.
name|updateConfigurations
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|spy
operator|.
name|count
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_QNetworkSession
operator|::
name|cleanupTestCase
parameter_list|()
block|{
if|if
condition|(
operator|!
operator|(
name|manager
operator|.
name|capabilities
argument_list|()
operator|&
name|QNetworkConfigurationManager
operator|::
name|SystemSessionSupport
operator|)
operator|&&
operator|(
name|manager
operator|.
name|capabilities
argument_list|()
operator|&
name|QNetworkConfigurationManager
operator|::
name|CanStartAndStopInterfaces
operator|)
operator|&&
name|inProcessSessionManagementCount
operator|==
literal|0
condition|)
block|{
name|qWarning
argument_list|(
literal|"No usable configurations found to complete all possible tests in "
literal|"inProcessSessionManagement()"
argument_list|)
expr_stmt|;
block|}
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_UNIX
argument_list|)
operator|&&
operator|!
name|defined
argument_list|(
name|QT_NO_ICD
argument_list|)
name|iapconf
operator|->
name|clear
argument_list|()
expr_stmt|;
operator|delete
name|iapconf
expr_stmt|;
name|iapconf2
operator|->
name|clear
argument_list|()
expr_stmt|;
operator|delete
name|iapconf2
expr_stmt|;
name|gprsiap
operator|->
name|clear
argument_list|()
expr_stmt|;
operator|delete
name|gprsiap
expr_stmt|;
name|printf
argument_list|(
literal|"Deleting %d IAPS : "
argument_list|,
name|MAX_IAPS
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|MAX_IAPS
condition|;
name|i
operator|++
control|)
block|{
name|iaps
index|[
name|i
index|]
operator|->
name|clear
argument_list|()
expr_stmt|;
operator|delete
name|iaps
index|[
name|i
index|]
expr_stmt|;
name|printf
argument_list|(
literal|"."
argument_list|)
expr_stmt|;
name|fflush
argument_list|(
name|stdout
argument_list|)
expr_stmt|;
block|}
name|printf
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Deleted"
operator|<<
name|MAX_IAPS
operator|<<
literal|"IAPs"
expr_stmt|;
name|icd_stub
operator|->
name|terminate
argument_list|()
expr_stmt|;
name|icd_stub
operator|->
name|waitForFinished
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_comment
comment|// Robustness test for calling interfaces in nonsense order / with nonsense parameters
end_comment
begin_function
DECL|function|robustnessBombing
name|void
name|tst_QNetworkSession
operator|::
name|robustnessBombing
parameter_list|()
block|{
name|QNetworkConfigurationManager
name|mgr
decl_stmt|;
name|QNetworkSession
name|testSession
argument_list|(
name|mgr
operator|.
name|defaultConfiguration
argument_list|()
argument_list|)
decl_stmt|;
comment|// Should not reset even session is not opened
name|testSession
operator|.
name|migrate
argument_list|()
expr_stmt|;
name|testSession
operator|.
name|accept
argument_list|()
expr_stmt|;
name|testSession
operator|.
name|ignore
argument_list|()
expr_stmt|;
name|testSession
operator|.
name|reject
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sessionClosing_data
name|void
name|tst_QNetworkSession
operator|::
name|sessionClosing_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"bearerType"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QNetworkConfiguration
operator|::
name|Type
argument_list|>
argument_list|(
literal|"configurationType"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"WLAN_IAP"
argument_list|)
operator|<<
literal|"WLAN"
operator|<<
name|QNetworkConfiguration
operator|::
name|InternetAccessPoint
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Cellular_IAP"
argument_list|)
operator|<<
literal|"cellular"
operator|<<
name|QNetworkConfiguration
operator|::
name|InternetAccessPoint
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"SNAP"
argument_list|)
operator|<<
literal|"bearer_type_not_relevant_with_SNAPs"
operator|<<
name|QNetworkConfiguration
operator|::
name|ServiceNetwork
expr_stmt|;
block|}
end_function
begin_comment
comment|// Testcase for closing the session at unexpected times
end_comment
begin_function
DECL|function|sessionClosing
name|void
name|tst_QNetworkSession
operator|::
name|sessionClosing
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|bearerType
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QNetworkConfiguration
operator|::
name|Type
argument_list|,
name|configurationType
argument_list|)
expr_stmt|;
comment|// Update configurations so that WLANs are discovered too.
name|updateConfigurations
argument_list|()
expr_stmt|;
comment|// First check that opening once succeeds and determine if test is doable
name|QNetworkConfiguration
name|config
init|=
name|suitableConfiguration
argument_list|(
name|bearerType
argument_list|,
name|configurationType
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|config
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QSKIP
argument_list|(
literal|"No suitable configurations, skipping this round of repeated open-close test."
argument_list|,
name|SkipSingle
argument_list|)
expr_stmt|;
block|}
name|qDebug
argument_list|()
operator|<<
literal|"Using following configuration to bomb with close(): "
operator|<<
name|config
operator|.
name|name
argument_list|()
expr_stmt|;
name|QNetworkSession
name|session
argument_list|(
name|config
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|openSession
argument_list|(
operator|&
name|session
argument_list|)
operator|||
operator|!
name|closeSession
argument_list|(
operator|&
name|session
argument_list|)
condition|)
block|{
name|QSKIP
argument_list|(
literal|"Unable to open/close session, skipping this round of close() bombing."
argument_list|,
name|SkipSingle
argument_list|)
expr_stmt|;
block|}
name|qDebug
argument_list|()
operator|<<
literal|"Closing without issuing open()"
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|25
condition|;
name|i
operator|++
control|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"Opening and then waiting: "
operator|<<
name|i
operator|*
literal|100
operator|<<
literal|" ms before closing."
expr_stmt|;
name|session
operator|.
name|open
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
name|i
operator|*
literal|100
argument_list|)
expr_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
comment|// Sooner or later session must end in Disconnected state,
comment|// no matter what the phase was.
name|QTRY_VERIFY
argument_list|(
name|session
operator|.
name|state
argument_list|()
operator|==
name|QNetworkSession
operator|::
name|Disconnected
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|200
argument_list|)
expr_stmt|;
comment|// Give platform a breathe, otherwise we'll be catching other errors
block|}
block|}
end_function
begin_function
DECL|function|invalidSession
name|void
name|tst_QNetworkSession
operator|::
name|invalidSession
parameter_list|()
block|{
comment|// 1. Verify that session created with invalid configuration remains in invalid state
name|QNetworkSession
name|session
argument_list|(
name|QNetworkConfiguration
argument_list|()
argument_list|,
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|session
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|session
operator|.
name|state
argument_list|()
operator|==
name|QNetworkSession
operator|::
name|Invalid
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|session
operator|.
name|error
argument_list|()
operator|==
name|QNetworkSession
operator|::
name|InvalidConfigurationError
argument_list|)
expr_stmt|;
comment|// 2. Verify that opening session with invalid configuration both 1) emits invalidconfigurationerror and 2) sets session's state as invalid.
name|QSignalSpy
name|errorSpy
argument_list|(
operator|&
name|session
argument_list|,
name|SIGNAL
argument_list|(
name|error
argument_list|(
name|QNetworkSession
operator|::
name|SessionError
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|session
operator|.
name|open
argument_list|()
expr_stmt|;
name|session
operator|.
name|waitForOpened
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// Should bail out right away
name|QVERIFY
argument_list|(
name|errorSpy
operator|.
name|count
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|QNetworkSession
operator|::
name|SessionError
name|error
init|=
name|qvariant_cast
argument_list|<
name|QNetworkSession
operator|::
name|SessionError
argument_list|>
argument_list|(
name|errorSpy
operator|.
name|first
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|error
operator|==
name|QNetworkSession
operator|::
name|InvalidConfigurationError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|session
operator|.
name|error
argument_list|()
operator|==
name|QNetworkSession
operator|::
name|InvalidConfigurationError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|session
operator|.
name|state
argument_list|()
operator|==
name|QNetworkSession
operator|::
name|Invalid
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QNETWORKSESSION_MANUAL_TESTS
name|QNetworkConfiguration
name|invalidatedConfig
init|=
name|suitableConfiguration
argument_list|(
literal|"WLAN"
argument_list|,
name|QNetworkConfiguration
operator|::
name|InternetAccessPoint
argument_list|)
decl_stmt|;
if|if
condition|(
name|invalidatedConfig
operator|.
name|isValid
argument_list|()
condition|)
block|{
comment|// 3. Verify that invalidating a session after its successfully configured works
name|QNetworkSession
name|invalidatedSession
argument_list|(
name|invalidatedConfig
argument_list|)
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Delete the WLAN IAP from phone now (waiting 60 seconds): "
operator|<<
name|invalidatedConfig
operator|.
name|name
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|60000
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|invalidatedConfig
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|invalidatedSession
operator|.
name|state
argument_list|()
operator|==
name|QNetworkSession
operator|::
name|Invalid
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Add the WLAN IAP back (waiting 60 seconds): "
operator|<<
name|invalidatedConfig
operator|.
name|name
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|60000
argument_list|)
expr_stmt|;
block|}
name|QNetworkConfiguration
name|definedConfig
init|=
name|suitableConfiguration
argument_list|(
literal|"WLAN"
argument_list|,
name|QNetworkConfiguration
operator|::
name|InternetAccessPoint
argument_list|)
decl_stmt|;
if|if
condition|(
name|definedConfig
operator|.
name|isValid
argument_list|()
condition|)
block|{
comment|// 4. Verify that opening a session with defined configuration emits error and enters notavailable-state
comment|// TODO these timer waits should be changed to waiting appropriate signals, now these wait excessively
name|qDebug
argument_list|()
operator|<<
literal|"Shutdown WLAN IAP (waiting 60 seconds): "
operator|<<
name|definedConfig
operator|.
name|name
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|60000
argument_list|)
expr_stmt|;
comment|// Shutting down WLAN should bring back to defined -state.
name|QVERIFY
argument_list|(
operator|(
name|definedConfig
operator|.
name|state
argument_list|()
operator|&
name|QNetworkConfiguration
operator|::
name|Defined
operator|)
operator|==
name|QNetworkConfiguration
operator|::
name|Defined
argument_list|)
expr_stmt|;
name|QNetworkSession
name|definedSession
argument_list|(
name|definedConfig
argument_list|)
decl_stmt|;
name|QSignalSpy
name|errorSpy
argument_list|(
operator|&
name|definedSession
argument_list|,
name|SIGNAL
argument_list|(
name|error
argument_list|(
name|QNetworkSession
operator|::
name|SessionError
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QNetworkSession
operator|::
name|SessionError
name|sessionError
decl_stmt|;
name|updateConfigurations
argument_list|()
expr_stmt|;
name|definedSession
operator|.
name|open
argument_list|()
expr_stmt|;
name|updateConfigurations
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|definedConfig
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
comment|// Session remains valid
name|QVERIFY
argument_list|(
name|definedSession
operator|.
name|state
argument_list|()
operator|==
name|QNetworkSession
operator|::
name|NotAvailable
argument_list|)
expr_stmt|;
comment|// State is not available because WLAN is not in coverage
name|QVERIFY
argument_list|(
operator|!
name|errorSpy
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Session tells with error about invalidated configuration
name|sessionError
operator|=
name|qvariant_cast
argument_list|<
name|QNetworkSession
operator|::
name|SessionError
argument_list|>
argument_list|(
name|errorSpy
operator|.
name|first
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sessionError
operator|==
name|QNetworkSession
operator|::
name|InvalidConfigurationError
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Turn the WLAN IAP back on (waiting 60 seconds): "
operator|<<
name|definedConfig
operator|.
name|name
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|60000
argument_list|)
expr_stmt|;
name|updateConfigurations
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|definedConfig
operator|.
name|state
argument_list|()
operator|==
name|QNetworkConfiguration
operator|::
name|Discovered
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|sessionProperties_data
name|void
name|tst_QNetworkSession
operator|::
name|sessionProperties_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QNetworkConfiguration
argument_list|>
argument_list|(
literal|"configuration"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"invalid configuration"
argument_list|)
operator|<<
name|QNetworkConfiguration
argument_list|()
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QNetworkConfiguration
modifier|&
name|config
decl|,
name|manager
operator|.
name|allConfigurations
argument_list|()
control|)
block|{
specifier|const
name|QString
name|name
init|=
name|config
operator|.
name|name
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
argument_list|(
literal|"<Hidden>"
argument_list|)
else|:
name|config
operator|.
name|name
argument_list|()
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|name
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
operator|<<
name|config
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|sessionProperties
name|void
name|tst_QNetworkSession
operator|::
name|sessionProperties
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QNetworkConfiguration
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
name|QNetworkSession
name|session
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|session
operator|.
name|configuration
argument_list|()
operator|==
name|configuration
argument_list|)
expr_stmt|;
name|QStringList
name|validBearerNames
init|=
name|QStringList
argument_list|()
operator|<<
name|QLatin1String
argument_list|(
literal|"Unknown"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"Ethernet"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"WLAN"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"2G"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"CDMA2000"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"WCDMA"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"HSPA"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"Bluetooth"
argument_list|)
operator|<<
name|QLatin1String
argument_list|(
literal|"WiMAX"
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|configuration
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QVERIFY
argument_list|(
name|configuration
operator|.
name|bearerName
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|configuration
operator|.
name|type
argument_list|()
condition|)
block|{
case|case
name|QNetworkConfiguration
operator|::
name|ServiceNetwork
case|:
case|case
name|QNetworkConfiguration
operator|::
name|UserChoice
case|:
default|default:
name|QVERIFY
argument_list|(
name|configuration
operator|.
name|bearerName
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
break|break;
case|case
name|QNetworkConfiguration
operator|::
name|InternetAccessPoint
case|:
name|QVERIFY
argument_list|(
name|validBearerNames
operator|.
name|contains
argument_list|(
name|configuration
operator|.
name|bearerName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
comment|// QNetworkSession::interface() should return an invalid interface unless
comment|// session is in the connected state.
ifndef|#
directive|ifndef
name|QT_NO_NETWORKINTERFACE
name|QCOMPARE
argument_list|(
name|session
operator|.
name|state
argument_list|()
operator|==
name|QNetworkSession
operator|::
name|Connected
argument_list|,
name|session
operator|.
name|interface
argument_list|()
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
if|if
condition|(
operator|!
name|configuration
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QVERIFY
argument_list|(
name|configuration
operator|.
name|state
argument_list|()
operator|==
name|QNetworkConfiguration
operator|::
name|Undefined
operator|&&
name|session
operator|.
name|state
argument_list|()
operator|==
name|QNetworkSession
operator|::
name|Invalid
argument_list|)
expr_stmt|;
block|}
else|else
block|{
switch|switch
condition|(
name|configuration
operator|.
name|state
argument_list|()
condition|)
block|{
case|case
name|QNetworkConfiguration
operator|::
name|Undefined
case|:
name|QVERIFY
argument_list|(
name|session
operator|.
name|state
argument_list|()
operator|==
name|QNetworkSession
operator|::
name|NotAvailable
argument_list|)
expr_stmt|;
break|break;
case|case
name|QNetworkConfiguration
operator|::
name|Defined
case|:
name|QVERIFY
argument_list|(
name|session
operator|.
name|state
argument_list|()
operator|==
name|QNetworkSession
operator|::
name|NotAvailable
argument_list|)
expr_stmt|;
break|break;
case|case
name|QNetworkConfiguration
operator|::
name|Discovered
case|:
name|QVERIFY
argument_list|(
name|session
operator|.
name|state
argument_list|()
operator|==
name|QNetworkSession
operator|::
name|Connecting
operator|||
name|session
operator|.
name|state
argument_list|()
operator|==
name|QNetworkSession
operator|::
name|Disconnected
argument_list|)
expr_stmt|;
break|break;
case|case
name|QNetworkConfiguration
operator|::
name|Active
case|:
name|QVERIFY
argument_list|(
name|session
operator|.
name|state
argument_list|()
operator|==
name|QNetworkSession
operator|::
name|Connected
operator|||
name|session
operator|.
name|state
argument_list|()
operator|==
name|QNetworkSession
operator|::
name|Closing
operator|||
name|session
operator|.
name|state
argument_list|()
operator|==
name|QNetworkSession
operator|::
name|Roaming
argument_list|)
expr_stmt|;
break|break;
default|default:
name|QFAIL
argument_list|(
literal|"Invalid configuration state"
argument_list|)
expr_stmt|;
block|}
empty_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|repeatedOpenClose_data
name|void
name|tst_QNetworkSession
operator|::
name|repeatedOpenClose_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"bearerType"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QNetworkConfiguration
operator|::
name|Type
argument_list|>
argument_list|(
literal|"configurationType"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"repeatTimes"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"WLAN_IAP"
argument_list|)
operator|<<
literal|"WLAN"
operator|<<
name|QNetworkConfiguration
operator|::
name|InternetAccessPoint
operator|<<
literal|3
expr_stmt|;
comment|// QTest::newRow("Cellular_IAP")<< "cellular"<< QNetworkConfiguration::InternetAccessPoint<< 3;
comment|// QTest::newRow("SNAP")<< "bearer_type_not_relevant_with_SNAPs"<< QNetworkConfiguration::ServiceNetwork<< 3;
block|}
end_function
begin_comment
comment|// Tests repeated-open close.
end_comment
begin_function
DECL|function|repeatedOpenClose
name|void
name|tst_QNetworkSession
operator|::
name|repeatedOpenClose
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|bearerType
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QNetworkConfiguration
operator|::
name|Type
argument_list|,
name|configurationType
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|repeatTimes
argument_list|)
expr_stmt|;
comment|// First check that opening once succeeds and determine if repeatable testing is doable
name|QNetworkConfiguration
name|config
init|=
name|suitableConfiguration
argument_list|(
name|bearerType
argument_list|,
name|configurationType
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|config
operator|.
name|isValid
argument_list|()
condition|)
block|{
name|QSKIP
argument_list|(
literal|"No suitable configurations, skipping this round of repeated open-close test."
argument_list|,
name|SkipSingle
argument_list|)
expr_stmt|;
block|}
name|qDebug
argument_list|()
operator|<<
literal|"Using following configuratio to repeatedly open and close: "
operator|<<
name|config
operator|.
name|name
argument_list|()
expr_stmt|;
name|QNetworkSession
name|permanentSession
argument_list|(
name|config
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|openSession
argument_list|(
operator|&
name|permanentSession
argument_list|)
operator|||
operator|!
name|closeSession
argument_list|(
operator|&
name|permanentSession
argument_list|)
condition|)
block|{
name|QSKIP
argument_list|(
literal|"Unable to open/close session, skipping this round of repeated open-close test."
argument_list|,
name|SkipSingle
argument_list|)
expr_stmt|;
block|}
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|repeatTimes
condition|;
name|i
operator|++
control|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"Opening, loop number "
operator|<<
name|i
expr_stmt|;
name|QVERIFY
argument_list|(
name|openSession
argument_list|(
operator|&
name|permanentSession
argument_list|)
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"Closing, loop number, then waiting 5 seconds: "
operator|<<
name|i
expr_stmt|;
name|QVERIFY
argument_list|(
name|closeSession
argument_list|(
operator|&
name|permanentSession
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|userChoiceSession_data
name|void
name|tst_QNetworkSession
operator|::
name|userChoiceSession_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QNetworkConfiguration
argument_list|>
argument_list|(
literal|"configuration"
argument_list|)
expr_stmt|;
name|QNetworkConfiguration
name|config
init|=
name|manager
operator|.
name|defaultConfiguration
argument_list|()
decl_stmt|;
if|if
condition|(
name|config
operator|.
name|type
argument_list|()
operator|==
name|QNetworkConfiguration
operator|::
name|UserChoice
condition|)
name|QTest
operator|::
name|newRow
argument_list|(
literal|"UserChoice"
argument_list|)
operator|<<
name|config
expr_stmt|;
else|else
name|QSKIP
argument_list|(
literal|"Default configuration is not a UserChoice configuration."
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|userChoiceSession
name|void
name|tst_QNetworkSession
operator|::
name|userChoiceSession
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QNetworkConfiguration
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|configuration
operator|.
name|type
argument_list|()
operator|==
name|QNetworkConfiguration
operator|::
name|UserChoice
argument_list|)
expr_stmt|;
name|QNetworkSession
name|session
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
comment|// Check that configuration was really set
name|QVERIFY
argument_list|(
name|session
operator|.
name|configuration
argument_list|()
operator|==
name|configuration
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|session
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
comment|// Check that session is not active
name|QVERIFY
argument_list|(
name|session
operator|.
name|sessionProperty
argument_list|(
literal|"ActiveConfiguration"
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// The remaining tests require the session to be not NotAvailable.
if|if
condition|(
name|session
operator|.
name|state
argument_list|()
operator|==
name|QNetworkSession
operator|::
name|NotAvailable
condition|)
name|QSKIP
argument_list|(
literal|"Network is not available."
argument_list|,
name|SkipSingle
argument_list|)
expr_stmt|;
name|QSignalSpy
name|sessionOpenedSpy
argument_list|(
operator|&
name|session
argument_list|,
name|SIGNAL
argument_list|(
name|opened
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|sessionClosedSpy
argument_list|(
operator|&
name|session
argument_list|,
name|SIGNAL
argument_list|(
name|closed
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|stateChangedSpy
argument_list|(
operator|&
name|session
argument_list|,
name|SIGNAL
argument_list|(
name|stateChanged
argument_list|(
name|QNetworkSession
operator|::
name|State
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|errorSpy
argument_list|(
operator|&
name|session
argument_list|,
name|SIGNAL
argument_list|(
name|error
argument_list|(
name|QNetworkSession
operator|::
name|SessionError
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// Test opening the session.
block|{
name|bool
name|expectStateChange
init|=
name|session
operator|.
name|state
argument_list|()
operator|!=
name|QNetworkSession
operator|::
name|Connected
decl_stmt|;
name|session
operator|.
name|open
argument_list|()
expr_stmt|;
name|session
operator|.
name|waitForOpened
argument_list|()
expr_stmt|;
if|if
condition|(
name|session
operator|.
name|isOpen
argument_list|()
condition|)
name|QVERIFY
argument_list|(
operator|!
name|sessionOpenedSpy
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|errorSpy
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|errorSpy
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QNetworkSession
operator|::
name|SessionError
name|error
init|=
name|qvariant_cast
argument_list|<
name|QNetworkSession
operator|::
name|SessionError
argument_list|>
argument_list|(
name|errorSpy
operator|.
name|first
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|==
name|QNetworkSession
operator|::
name|OperationNotSupportedError
condition|)
block|{
comment|// The session needed to bring up the interface,
comment|// but the operation is not supported.
name|QSKIP
argument_list|(
literal|"Configuration does not support open()."
argument_list|,
name|SkipSingle
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|error
operator|==
name|QNetworkSession
operator|::
name|InvalidConfigurationError
condition|)
block|{
comment|// The session needed to bring up the interface, but it is not possible for the
comment|// specified configuration.
if|if
condition|(
operator|(
name|session
operator|.
name|configuration
argument_list|()
operator|.
name|state
argument_list|()
operator|&
name|QNetworkConfiguration
operator|::
name|Discovered
operator|)
operator|==
name|QNetworkConfiguration
operator|::
name|Discovered
condition|)
block|{
name|QFAIL
argument_list|(
literal|"Failed to open session for Discovered configuration."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"Cannot test session for non-Discovered configuration."
argument_list|,
name|SkipSingle
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|error
operator|==
name|QNetworkSession
operator|::
name|UnknownSessionError
condition|)
block|{
name|QSKIP
argument_list|(
literal|"Unknown session error."
argument_list|,
name|SkipSingle
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QFAIL
argument_list|(
literal|"Error opening session."
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|sessionOpenedSpy
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QCOMPARE
argument_list|(
name|sessionOpenedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sessionClosedSpy
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|errorSpy
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectStateChange
condition|)
name|QTRY_VERIFY
argument_list|(
operator|!
name|stateChangedSpy
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|session
operator|.
name|state
argument_list|()
operator|==
name|QNetworkSession
operator|::
name|Connected
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_NETWORKINTERFACE
name|QVERIFY
argument_list|(
name|session
operator|.
name|interface
argument_list|()
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
specifier|const
name|QString
name|userChoiceIdentifier
init|=
name|session
operator|.
name|sessionProperty
argument_list|(
literal|"UserChoiceConfiguration"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|userChoiceIdentifier
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|userChoiceIdentifier
operator|!=
name|configuration
operator|.
name|identifier
argument_list|()
argument_list|)
expr_stmt|;
name|QNetworkConfiguration
name|userChoiceConfiguration
init|=
name|manager
operator|.
name|configurationFromIdentifier
argument_list|(
name|userChoiceIdentifier
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|userChoiceConfiguration
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|userChoiceConfiguration
operator|.
name|type
argument_list|()
operator|!=
name|QNetworkConfiguration
operator|::
name|UserChoice
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|testIdentifier
argument_list|(
literal|"abc"
argument_list|)
decl_stmt|;
comment|//resetting UserChoiceConfiguration is ignored (read only property)
name|session
operator|.
name|setSessionProperty
argument_list|(
literal|"UserChoiceConfiguration"
argument_list|,
name|testIdentifier
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|session
operator|.
name|sessionProperty
argument_list|(
literal|"UserChoiceConfiguration"
argument_list|)
operator|.
name|toString
argument_list|()
operator|!=
name|testIdentifier
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|activeIdentifier
init|=
name|session
operator|.
name|sessionProperty
argument_list|(
literal|"ActiveConfiguration"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|activeIdentifier
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|activeIdentifier
operator|!=
name|configuration
operator|.
name|identifier
argument_list|()
argument_list|)
expr_stmt|;
name|QNetworkConfiguration
name|activeConfiguration
init|=
name|manager
operator|.
name|configurationFromIdentifier
argument_list|(
name|activeIdentifier
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|activeConfiguration
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|activeConfiguration
operator|.
name|type
argument_list|()
operator|==
name|QNetworkConfiguration
operator|::
name|InternetAccessPoint
argument_list|)
expr_stmt|;
comment|//resetting ActiveConfiguration is ignored (read only property)
name|session
operator|.
name|setSessionProperty
argument_list|(
literal|"ActiveConfiguration"
argument_list|,
name|testIdentifier
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|session
operator|.
name|sessionProperty
argument_list|(
literal|"ActiveConfiguration"
argument_list|)
operator|.
name|toString
argument_list|()
operator|!=
name|testIdentifier
argument_list|)
expr_stmt|;
if|if
condition|(
name|userChoiceConfiguration
operator|.
name|type
argument_list|()
operator|==
name|QNetworkConfiguration
operator|::
name|InternetAccessPoint
condition|)
block|{
name|QVERIFY
argument_list|(
name|userChoiceConfiguration
operator|==
name|activeConfiguration
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|userChoiceConfiguration
operator|.
name|type
argument_list|()
operator|==
name|QNetworkConfiguration
operator|::
name|ServiceNetwork
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|userChoiceConfiguration
operator|.
name|children
argument_list|()
operator|.
name|contains
argument_list|(
name|activeConfiguration
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QFAIL
argument_list|(
literal|"Timeout waiting for session to open."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|sessionOpenCloseStop_data
name|void
name|tst_QNetworkSession
operator|::
name|sessionOpenCloseStop_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QNetworkConfiguration
argument_list|>
argument_list|(
literal|"configuration"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"forceSessionStop"
argument_list|)
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QNetworkConfiguration
modifier|&
name|config
decl|,
name|manager
operator|.
name|allConfigurations
argument_list|()
control|)
block|{
specifier|const
name|QString
name|name
init|=
name|config
operator|.
name|name
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
argument_list|(
literal|"<Hidden>"
argument_list|)
else|:
name|config
operator|.
name|name
argument_list|()
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
operator|(
name|name
operator|+
name|QLatin1String
argument_list|(
literal|" close"
argument_list|)
operator|)
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
operator|<<
name|config
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
operator|(
name|name
operator|+
name|QLatin1String
argument_list|(
literal|" stop"
argument_list|)
operator|)
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
operator|<<
name|config
operator|<<
literal|true
expr_stmt|;
block|}
name|inProcessSessionManagementCount
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sessionOpenCloseStop
name|void
name|tst_QNetworkSession
operator|::
name|sessionOpenCloseStop
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QNetworkConfiguration
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|forceSessionStop
argument_list|)
expr_stmt|;
name|QNetworkSession
name|session
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
comment|// Test initial state of the session.
block|{
name|QVERIFY
argument_list|(
name|session
operator|.
name|configuration
argument_list|()
operator|==
name|configuration
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|session
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
comment|// session may be invalid if configuration is removed between when
comment|// sessionOpenCloseStop_data() is called and here.
name|QVERIFY
argument_list|(
operator|(
name|configuration
operator|.
name|isValid
argument_list|()
operator|&&
operator|(
name|session
operator|.
name|state
argument_list|()
operator|!=
name|QNetworkSession
operator|::
name|Invalid
operator|)
operator|)
operator|||
operator|(
operator|!
name|configuration
operator|.
name|isValid
argument_list|()
operator|&&
operator|(
name|session
operator|.
name|state
argument_list|()
operator|==
name|QNetworkSession
operator|::
name|Invalid
operator|)
operator|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|session
operator|.
name|error
argument_list|()
operator|==
name|QNetworkSession
operator|::
name|UnknownSessionError
argument_list|)
expr_stmt|;
block|}
comment|// The remaining tests require the session to be not NotAvailable.
if|if
condition|(
name|session
operator|.
name|state
argument_list|()
operator|==
name|QNetworkSession
operator|::
name|NotAvailable
condition|)
name|QSKIP
argument_list|(
literal|"Network is not available."
argument_list|,
name|SkipSingle
argument_list|)
expr_stmt|;
name|QSignalSpy
name|sessionOpenedSpy
argument_list|(
operator|&
name|session
argument_list|,
name|SIGNAL
argument_list|(
name|opened
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|sessionClosedSpy
argument_list|(
operator|&
name|session
argument_list|,
name|SIGNAL
argument_list|(
name|closed
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|stateChangedSpy
argument_list|(
operator|&
name|session
argument_list|,
name|SIGNAL
argument_list|(
name|stateChanged
argument_list|(
name|QNetworkSession
operator|::
name|State
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|errorSpy
argument_list|(
operator|&
name|session
argument_list|,
name|SIGNAL
argument_list|(
name|error
argument_list|(
name|QNetworkSession
operator|::
name|SessionError
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// Test opening the session.
block|{
name|QNetworkSession
operator|::
name|State
name|previousState
init|=
name|session
operator|.
name|state
argument_list|()
decl_stmt|;
name|bool
name|expectStateChange
init|=
name|previousState
operator|!=
name|QNetworkSession
operator|::
name|Connected
decl_stmt|;
name|session
operator|.
name|open
argument_list|()
expr_stmt|;
name|session
operator|.
name|waitForOpened
argument_list|()
expr_stmt|;
comment|// Wait until the configuration is uptodate as well, it may be signaled 'connected'
comment|// bit later than the session
name|QTRY_VERIFY
argument_list|(
name|configuration
operator|.
name|state
argument_list|()
operator|==
name|QNetworkConfiguration
operator|::
name|Active
argument_list|)
expr_stmt|;
if|if
condition|(
name|session
operator|.
name|isOpen
argument_list|()
condition|)
name|QVERIFY
argument_list|(
operator|!
name|sessionOpenedSpy
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|errorSpy
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|errorSpy
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QNetworkSession
operator|::
name|SessionError
name|error
init|=
name|qvariant_cast
argument_list|<
name|QNetworkSession
operator|::
name|SessionError
argument_list|>
argument_list|(
name|errorSpy
operator|.
name|first
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|session
operator|.
name|state
argument_list|()
operator|==
name|previousState
argument_list|)
expr_stmt|;
if|if
condition|(
name|error
operator|==
name|QNetworkSession
operator|::
name|OperationNotSupportedError
condition|)
block|{
comment|// The session needed to bring up the interface,
comment|// but the operation is not supported.
name|QSKIP
argument_list|(
literal|"Configuration does not support open()."
argument_list|,
name|SkipSingle
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|error
operator|==
name|QNetworkSession
operator|::
name|InvalidConfigurationError
condition|)
block|{
comment|// The session needed to bring up the interface, but it is not possible for the
comment|// specified configuration.
if|if
condition|(
operator|(
name|session
operator|.
name|configuration
argument_list|()
operator|.
name|state
argument_list|()
operator|&
name|QNetworkConfiguration
operator|::
name|Discovered
operator|)
operator|==
name|QNetworkConfiguration
operator|::
name|Discovered
condition|)
block|{
name|QFAIL
argument_list|(
literal|"Failed to open session for Discovered configuration."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"Cannot test session for non-Discovered configuration."
argument_list|,
name|SkipSingle
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
name|error
operator|==
name|QNetworkSession
operator|::
name|UnknownSessionError
condition|)
block|{
name|QSKIP
argument_list|(
literal|"Unknown Session error."
argument_list|,
name|SkipSingle
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QFAIL
argument_list|(
literal|"Error opening session."
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|sessionOpenedSpy
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QCOMPARE
argument_list|(
name|sessionOpenedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sessionClosedSpy
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|errorSpy
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectStateChange
condition|)
block|{
name|QTRY_VERIFY
argument_list|(
name|stateChangedSpy
operator|.
name|count
argument_list|()
operator|>=
literal|2
argument_list|)
expr_stmt|;
name|QNetworkSession
operator|::
name|State
name|state
init|=
name|qvariant_cast
argument_list|<
name|QNetworkSession
operator|::
name|State
argument_list|>
argument_list|(
name|stateChangedSpy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|state
operator|==
name|QNetworkSession
operator|::
name|Connecting
argument_list|)
expr_stmt|;
name|state
operator|=
name|qvariant_cast
argument_list|<
name|QNetworkSession
operator|::
name|State
argument_list|>
argument_list|(
name|stateChangedSpy
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|state
operator|==
name|QNetworkSession
operator|::
name|Connected
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|session
operator|.
name|state
argument_list|()
operator|==
name|QNetworkSession
operator|::
name|Connected
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_NETWORKINTERFACE
name|QVERIFY
argument_list|(
name|session
operator|.
name|interface
argument_list|()
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
else|else
block|{
name|QFAIL
argument_list|(
literal|"Timeout waiting for session to open."
argument_list|)
expr_stmt|;
block|}
block|}
name|sessionOpenedSpy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|sessionClosedSpy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|stateChangedSpy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|errorSpy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QNetworkSession
name|session2
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|QSignalSpy
name|sessionOpenedSpy2
argument_list|(
operator|&
name|session2
argument_list|,
name|SIGNAL
argument_list|(
name|opened
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|sessionClosedSpy2
argument_list|(
operator|&
name|session2
argument_list|,
name|SIGNAL
argument_list|(
name|closed
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|stateChangedSpy2
argument_list|(
operator|&
name|session2
argument_list|,
name|SIGNAL
argument_list|(
name|stateChanged
argument_list|(
name|QNetworkSession
operator|::
name|State
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|errorSpy2
argument_list|(
operator|&
name|session2
argument_list|,
name|SIGNAL
argument_list|(
name|error
argument_list|(
name|QNetworkSession
operator|::
name|SessionError
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// Test opening a second session.
block|{
name|QVERIFY
argument_list|(
name|session2
operator|.
name|configuration
argument_list|()
operator|==
name|configuration
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|session2
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|session2
operator|.
name|state
argument_list|()
operator|==
name|QNetworkSession
operator|::
name|Connected
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|session
operator|.
name|error
argument_list|()
operator|==
name|QNetworkSession
operator|::
name|UnknownSessionError
argument_list|)
expr_stmt|;
name|session2
operator|.
name|open
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
operator|!
name|sessionOpenedSpy2
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|errorSpy2
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|errorSpy2
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QVERIFY
argument_list|(
name|session2
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|session2
operator|.
name|state
argument_list|()
operator|==
name|QNetworkSession
operator|::
name|Connected
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|session
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|session
operator|.
name|state
argument_list|()
operator|==
name|QNetworkSession
operator|::
name|Connected
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_NETWORKINTERFACE
name|QVERIFY
argument_list|(
name|session
operator|.
name|interface
argument_list|()
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|errorSpy2
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QCOMPARE
argument_list|(
name|session
operator|.
name|interface
argument_list|()
operator|.
name|hardwareAddress
argument_list|()
argument_list|,
name|session2
operator|.
name|interface
argument_list|()
operator|.
name|hardwareAddress
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|session
operator|.
name|interface
argument_list|()
operator|.
name|index
argument_list|()
argument_list|,
name|session2
operator|.
name|interface
argument_list|()
operator|.
name|index
argument_list|()
argument_list|)
expr_stmt|;
block|}
endif|#
directive|endif
block|}
name|sessionOpenedSpy2
operator|.
name|clear
argument_list|()
expr_stmt|;
if|if
condition|(
name|forceSessionStop
operator|&&
name|session2
operator|.
name|isOpen
argument_list|()
condition|)
block|{
comment|// Test forcing the second session to stop the interface.
name|QNetworkSession
operator|::
name|State
name|previousState
init|=
name|session
operator|.
name|state
argument_list|()
decl_stmt|;
name|bool
name|expectStateChange
init|=
name|previousState
operator|!=
name|QNetworkSession
operator|::
name|Disconnected
decl_stmt|;
name|session2
operator|.
name|stop
argument_list|()
expr_stmt|;
comment|// QNetworkSession::stop() must result either closed() signal
comment|// or error() signal
name|QTRY_VERIFY
argument_list|(
operator|!
name|sessionClosedSpy2
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|errorSpy2
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|session2
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|errorSpy2
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
comment|// QNetworkSession::stop() resulted error() signal for session2
comment|// => also session should emit error() signal
name|QTRY_VERIFY
argument_list|(
operator|!
name|errorSpy
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// check for SessionAbortedError
name|QNetworkSession
operator|::
name|SessionError
name|error
init|=
name|qvariant_cast
argument_list|<
name|QNetworkSession
operator|::
name|SessionError
argument_list|>
argument_list|(
name|errorSpy
operator|.
name|first
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|QNetworkSession
operator|::
name|SessionError
name|error2
init|=
name|qvariant_cast
argument_list|<
name|QNetworkSession
operator|::
name|SessionError
argument_list|>
argument_list|(
name|errorSpy2
operator|.
name|first
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|error
operator|==
name|QNetworkSession
operator|::
name|SessionAbortedError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|error2
operator|==
name|QNetworkSession
operator|::
name|SessionAbortedError
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|errorSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|errorSpy2
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|errorSpy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|errorSpy2
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|errorSpy
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|errorSpy2
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// Wait for Disconnected state
name|QTRY_NOOP
argument_list|(
name|session2
operator|.
name|state
argument_list|()
operator|==
name|QNetworkSession
operator|::
name|Disconnected
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectStateChange
condition|)
name|QTRY_VERIFY
argument_list|(
name|stateChangedSpy2
operator|.
name|count
argument_list|()
operator|>=
literal|1
operator|||
operator|!
name|errorSpy2
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|errorSpy2
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QVERIFY
argument_list|(
name|session2
operator|.
name|state
argument_list|()
operator|==
name|previousState
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|session
operator|.
name|state
argument_list|()
operator|==
name|previousState
argument_list|)
expr_stmt|;
name|QNetworkSession
operator|::
name|SessionError
name|error
init|=
name|qvariant_cast
argument_list|<
name|QNetworkSession
operator|::
name|SessionError
argument_list|>
argument_list|(
name|errorSpy2
operator|.
name|first
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|==
name|QNetworkSession
operator|::
name|OperationNotSupportedError
condition|)
block|{
comment|// The session needed to bring down the interface,
comment|// but the operation is not supported.
name|QSKIP
argument_list|(
literal|"Configuration does not support stop()."
argument_list|,
name|SkipSingle
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|error
operator|==
name|QNetworkSession
operator|::
name|InvalidConfigurationError
condition|)
block|{
comment|// The session needed to bring down the interface, but it is not possible for the
comment|// specified configuration.
if|if
condition|(
operator|(
name|session
operator|.
name|configuration
argument_list|()
operator|.
name|state
argument_list|()
operator|&
name|QNetworkConfiguration
operator|::
name|Discovered
operator|)
operator|==
name|QNetworkConfiguration
operator|::
name|Discovered
condition|)
block|{
name|QFAIL
argument_list|(
literal|"Failed to stop session for Discovered configuration."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"Cannot test session for non-Discovered configuration."
argument_list|,
name|SkipSingle
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QFAIL
argument_list|(
literal|"Error stopping session."
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|sessionClosedSpy2
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
if|if
condition|(
name|expectStateChange
condition|)
block|{
if|if
condition|(
name|configuration
operator|.
name|type
argument_list|()
operator|==
name|QNetworkConfiguration
operator|::
name|ServiceNetwork
condition|)
block|{
name|bool
name|roamedSuccessfully
init|=
literal|false
decl_stmt|;
name|QNetworkSession
operator|::
name|State
name|state
decl_stmt|;
if|if
condition|(
name|stateChangedSpy2
operator|.
name|count
argument_list|()
operator|==
literal|4
condition|)
block|{
name|state
operator|=
name|qvariant_cast
argument_list|<
name|QNetworkSession
operator|::
name|State
argument_list|>
argument_list|(
name|stateChangedSpy2
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|state
operator|==
name|QNetworkSession
operator|::
name|Connecting
argument_list|)
expr_stmt|;
name|state
operator|=
name|qvariant_cast
argument_list|<
name|QNetworkSession
operator|::
name|State
argument_list|>
argument_list|(
name|stateChangedSpy2
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|state
operator|==
name|QNetworkSession
operator|::
name|Connected
argument_list|)
expr_stmt|;
name|state
operator|=
name|qvariant_cast
argument_list|<
name|QNetworkSession
operator|::
name|State
argument_list|>
argument_list|(
name|stateChangedSpy2
operator|.
name|at
argument_list|(
literal|2
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|state
operator|==
name|QNetworkSession
operator|::
name|Closing
argument_list|)
expr_stmt|;
name|state
operator|=
name|qvariant_cast
argument_list|<
name|QNetworkSession
operator|::
name|State
argument_list|>
argument_list|(
name|stateChangedSpy2
operator|.
name|at
argument_list|(
literal|3
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|state
operator|==
name|QNetworkSession
operator|::
name|Disconnected
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|stateChangedSpy2
operator|.
name|count
argument_list|()
operator|==
literal|2
condition|)
block|{
name|state
operator|=
name|qvariant_cast
argument_list|<
name|QNetworkSession
operator|::
name|State
argument_list|>
argument_list|(
name|stateChangedSpy2
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|state
operator|==
name|QNetworkSession
operator|::
name|Closing
argument_list|)
expr_stmt|;
name|state
operator|=
name|qvariant_cast
argument_list|<
name|QNetworkSession
operator|::
name|State
argument_list|>
argument_list|(
name|stateChangedSpy2
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|state
operator|==
name|QNetworkSession
operator|::
name|Disconnected
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QFAIL
argument_list|(
literal|"Unexpected amount of state changes when roaming."
argument_list|)
expr_stmt|;
block|}
name|QTRY_VERIFY
argument_list|(
name|session
operator|.
name|state
argument_list|()
operator|==
name|QNetworkSession
operator|::
name|Roaming
operator|||
name|session
operator|.
name|state
argument_list|()
operator|==
name|QNetworkSession
operator|::
name|Connected
operator|||
name|session
operator|.
name|state
argument_list|()
operator|==
name|QNetworkSession
operator|::
name|Disconnected
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|stateChangedSpy
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|state
operator|=
name|qvariant_cast
argument_list|<
name|QNetworkSession
operator|::
name|State
argument_list|>
argument_list|(
name|stateChangedSpy
operator|.
name|at
argument_list|(
name|stateChangedSpy
operator|.
name|count
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stateChangedSpy
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QNetworkSession
operator|::
name|State
name|state_temp
init|=
name|qvariant_cast
argument_list|<
name|QNetworkSession
operator|::
name|State
argument_list|>
argument_list|(
name|stateChangedSpy
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
comment|// Extra debug because a fragile point in testcase because statuses vary.
name|qDebug
argument_list|()
operator|<<
literal|"------- Statechange spy at: "
operator|<<
name|i
operator|<<
literal|" is "
operator|<<
name|state_temp
expr_stmt|;
block|}
if|if
condition|(
name|state
operator|==
name|QNetworkSession
operator|::
name|Roaming
condition|)
block|{
name|QTRY_VERIFY
argument_list|(
name|session
operator|.
name|state
argument_list|()
operator|==
name|QNetworkSession
operator|::
name|Connected
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|session2
operator|.
name|state
argument_list|()
operator|==
name|QNetworkSession
operator|::
name|Connected
argument_list|)
expr_stmt|;
name|roamedSuccessfully
operator|=
literal|true
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|state
operator|==
name|QNetworkSession
operator|::
name|Closing
condition|)
block|{
name|QTRY_VERIFY
argument_list|(
name|session2
operator|.
name|state
argument_list|()
operator|==
name|QNetworkSession
operator|::
name|Disconnected
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|session
operator|.
name|state
argument_list|()
operator|==
name|QNetworkSession
operator|::
name|Connected
operator|||
name|session
operator|.
name|state
argument_list|()
operator|==
name|QNetworkSession
operator|::
name|Disconnected
argument_list|)
expr_stmt|;
name|roamedSuccessfully
operator|=
literal|false
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|state
operator|==
name|QNetworkSession
operator|::
name|Disconnected
condition|)
block|{
name|QTRY_VERIFY
argument_list|(
operator|!
name|errorSpy
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|session2
operator|.
name|state
argument_list|()
operator|==
name|QNetworkSession
operator|::
name|Disconnected
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|state
operator|==
name|QNetworkSession
operator|::
name|Connected
condition|)
block|{
name|QTRY_VERIFY
argument_list|(
name|errorSpy
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|stateChangedSpy
operator|.
name|count
argument_list|()
operator|>
literal|1
condition|)
block|{
name|state
operator|=
name|qvariant_cast
argument_list|<
name|QNetworkSession
operator|::
name|State
argument_list|>
argument_list|(
name|stateChangedSpy
operator|.
name|at
argument_list|(
name|stateChangedSpy
operator|.
name|count
argument_list|()
operator|-
literal|2
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|state
operator|==
name|QNetworkSession
operator|::
name|Roaming
argument_list|)
expr_stmt|;
block|}
name|roamedSuccessfully
operator|=
literal|true
expr_stmt|;
block|}
if|if
condition|(
name|roamedSuccessfully
condition|)
block|{
comment|// Verify that you can open session based on the disconnected configuration
name|QString
name|configId
init|=
name|session
operator|.
name|sessionProperty
argument_list|(
literal|"ActiveConfiguration"
argument_list|)
operator|.
name|toString
argument_list|()
decl_stmt|;
name|QNetworkConfiguration
name|config
init|=
name|manager
operator|.
name|configurationFromIdentifier
argument_list|(
name|configId
argument_list|)
decl_stmt|;
name|QNetworkSession
name|session3
argument_list|(
name|config
argument_list|)
decl_stmt|;
name|QSignalSpy
name|errorSpy3
argument_list|(
operator|&
name|session3
argument_list|,
name|SIGNAL
argument_list|(
name|error
argument_list|(
name|QNetworkSession
operator|::
name|SessionError
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|sessionOpenedSpy3
argument_list|(
operator|&
name|session3
argument_list|,
name|SIGNAL
argument_list|(
name|opened
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|session3
operator|.
name|open
argument_list|()
expr_stmt|;
name|session3
operator|.
name|waitForOpened
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// Wait awhile to get all signals from platform
if|if
condition|(
name|session
operator|.
name|isOpen
argument_list|()
condition|)
name|QVERIFY
argument_list|(
operator|!
name|sessionOpenedSpy3
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|errorSpy3
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|session
operator|.
name|stop
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|session
operator|.
name|state
argument_list|()
operator|==
name|QNetworkSession
operator|::
name|Disconnected
argument_list|)
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|roamedSuccessfully
condition|)
name|QVERIFY
argument_list|(
operator|!
name|errorSpy
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QTest
operator|::
name|qWait
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
comment|// Wait awhile to get all signals from platform
if|if
condition|(
name|stateChangedSpy2
operator|.
name|count
argument_list|()
operator|==
literal|2
condition|)
block|{
name|QNetworkSession
operator|::
name|State
name|state
init|=
name|qvariant_cast
argument_list|<
name|QNetworkSession
operator|::
name|State
argument_list|>
argument_list|(
name|stateChangedSpy2
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|state
operator|==
name|QNetworkSession
operator|::
name|Closing
argument_list|)
expr_stmt|;
name|state
operator|=
name|qvariant_cast
argument_list|<
name|QNetworkSession
operator|::
name|State
argument_list|>
argument_list|(
name|stateChangedSpy2
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|state
operator|==
name|QNetworkSession
operator|::
name|Disconnected
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QVERIFY
argument_list|(
name|stateChangedSpy2
operator|.
name|count
argument_list|()
operator|>=
literal|1
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|stateChangedSpy2
operator|.
name|count
argument_list|()
condition|;
name|i
operator|++
control|)
block|{
name|QNetworkSession
operator|::
name|State
name|state_temp
init|=
name|qvariant_cast
argument_list|<
name|QNetworkSession
operator|::
name|State
argument_list|>
argument_list|(
name|stateChangedSpy2
operator|.
name|at
argument_list|(
name|i
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
comment|// Extra debug because a fragile point in testcase.
name|qDebug
argument_list|()
operator|<<
literal|"+++++ Statechange spy at: "
operator|<<
name|i
operator|<<
literal|" is "
operator|<<
name|state_temp
expr_stmt|;
block|}
name|QNetworkSession
operator|::
name|State
name|state
init|=
name|qvariant_cast
argument_list|<
name|QNetworkSession
operator|::
name|State
argument_list|>
argument_list|(
name|stateChangedSpy2
operator|.
name|at
argument_list|(
name|stateChangedSpy2
operator|.
name|count
argument_list|()
operator|-
literal|1
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|state
operator|==
name|QNetworkSession
operator|::
name|Disconnected
argument_list|)
expr_stmt|;
block|}
block|}
name|QTRY_VERIFY
argument_list|(
operator|!
name|sessionClosedSpy
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|session
operator|.
name|state
argument_list|()
operator|==
name|QNetworkSession
operator|::
name|Disconnected
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|errorSpy2
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|inProcessSessionManagementCount
expr_stmt|;
block|}
else|else
block|{
name|QFAIL
argument_list|(
literal|"Timeout waiting for session to stop."
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
operator|!
name|sessionClosedSpy
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|sessionClosedSpy2
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|session
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|session2
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|session2
operator|.
name|isOpen
argument_list|()
condition|)
block|{
comment|// Test closing the second session.
block|{
name|int
name|stateChangedCountBeforeClose
init|=
name|stateChangedSpy2
operator|.
name|count
argument_list|()
decl_stmt|;
name|session2
operator|.
name|close
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
operator|!
name|sessionClosedSpy2
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|stateChangedSpy2
operator|.
name|count
argument_list|()
operator|==
name|stateChangedCountBeforeClose
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sessionClosedSpy
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|session
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|session2
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|session
operator|.
name|state
argument_list|()
operator|==
name|QNetworkSession
operator|::
name|Connected
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|session2
operator|.
name|state
argument_list|()
operator|==
name|QNetworkSession
operator|::
name|Connected
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|QT_NO_NETWORKINTERFACE
name|QVERIFY
argument_list|(
name|session
operator|.
name|interface
argument_list|()
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|session
operator|.
name|interface
argument_list|()
operator|.
name|hardwareAddress
argument_list|()
argument_list|,
name|session2
operator|.
name|interface
argument_list|()
operator|.
name|hardwareAddress
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|session
operator|.
name|interface
argument_list|()
operator|.
name|index
argument_list|()
argument_list|,
name|session2
operator|.
name|interface
argument_list|()
operator|.
name|index
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
name|sessionClosedSpy2
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Test closing the first session.
block|{
name|bool
name|expectStateChange
init|=
name|session
operator|.
name|state
argument_list|()
operator|!=
name|QNetworkSession
operator|::
name|Disconnected
operator|&&
name|manager
operator|.
name|capabilities
argument_list|()
operator|&
name|QNetworkConfigurationManager
operator|::
name|SystemSessionSupport
decl_stmt|;
name|session
operator|.
name|close
argument_list|()
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
operator|!
name|sessionClosedSpy
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|errorSpy
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|session
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectStateChange
condition|)
name|QTRY_VERIFY
argument_list|(
operator|!
name|stateChangedSpy
operator|.
name|isEmpty
argument_list|()
operator|||
operator|!
name|errorSpy
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|errorSpy
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QNetworkSession
operator|::
name|SessionError
name|error
init|=
name|qvariant_cast
argument_list|<
name|QNetworkSession
operator|::
name|SessionError
argument_list|>
argument_list|(
name|errorSpy
operator|.
name|first
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
if|if
condition|(
name|error
operator|==
name|QNetworkSession
operator|::
name|OperationNotSupportedError
condition|)
block|{
comment|// The session needed to bring down the interface,
comment|// but the operation is not supported.
name|QSKIP
argument_list|(
literal|"Configuration does not support close()."
argument_list|,
name|SkipSingle
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|error
operator|==
name|QNetworkSession
operator|::
name|InvalidConfigurationError
condition|)
block|{
comment|// The session needed to bring down the interface, but it is not possible for the
comment|// specified configuration.
if|if
condition|(
operator|(
name|session
operator|.
name|configuration
argument_list|()
operator|.
name|state
argument_list|()
operator|&
name|QNetworkConfiguration
operator|::
name|Discovered
operator|)
operator|==
name|QNetworkConfiguration
operator|::
name|Discovered
condition|)
block|{
name|QFAIL
argument_list|(
literal|"Failed to close session for Discovered configuration."
argument_list|)
expr_stmt|;
block|}
else|else
block|{
name|QSKIP
argument_list|(
literal|"Cannot test session for non-Discovered configuration."
argument_list|,
name|SkipSingle
argument_list|)
expr_stmt|;
block|}
block|}
else|else
block|{
name|QFAIL
argument_list|(
literal|"Error closing session."
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|!
name|sessionClosedSpy
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QVERIFY
argument_list|(
name|sessionOpenedSpy
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sessionClosedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectStateChange
condition|)
name|QVERIFY
argument_list|(
operator|!
name|stateChangedSpy
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|errorSpy
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|expectStateChange
condition|)
name|QTRY_VERIFY
argument_list|(
name|session
operator|.
name|state
argument_list|()
operator|==
name|QNetworkSession
operator|::
name|Disconnected
argument_list|)
expr_stmt|;
operator|++
name|inProcessSessionManagementCount
expr_stmt|;
block|}
else|else
block|{
name|QFAIL
argument_list|(
literal|"Timeout waiting for session to close."
argument_list|)
expr_stmt|;
block|}
block|}
block|}
block|}
end_function
begin_function
DECL|function|operator <<
name|QDebug
name|operator
name|<<
parameter_list|(
name|QDebug
name|debug
parameter_list|,
specifier|const
name|QList
argument_list|<
name|QNetworkConfiguration
argument_list|>
modifier|&
name|list
parameter_list|)
block|{
name|debug
operator|.
name|nospace
argument_list|()
operator|<<
literal|"( "
expr_stmt|;
foreach|foreach
control|(
specifier|const
name|QNetworkConfiguration
modifier|&
name|config
decl|,
name|list
control|)
name|debug
operator|.
name|nospace
argument_list|()
operator|<<
name|config
operator|.
name|identifier
argument_list|()
operator|<<
literal|", "
expr_stmt|;
name|debug
operator|.
name|nospace
argument_list|()
operator|<<
literal|")\n"
expr_stmt|;
return|return
name|debug
return|;
block|}
end_function
begin_comment
comment|// Note: outOfProcessSession requires that at least one configuration is
end_comment
begin_comment
comment|// at Discovered -state.
end_comment
begin_function
DECL|function|outOfProcessSession
name|void
name|tst_QNetworkSession
operator|::
name|outOfProcessSession
parameter_list|()
block|{
name|updateConfigurations
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|QNetworkConfigurationManager
name|manager
decl_stmt|;
comment|// Create a QNetworkConfigurationManager to detect configuration changes made in Lackey. This
comment|// is actually the essence of this testcase - to check that platform mediates/reflects changes
comment|// regardless of process boundaries. The interprocess communication is more like a way to get
comment|// this test-case act correctly and timely.
name|QList
argument_list|<
name|QNetworkConfiguration
argument_list|>
name|before
init|=
name|manager
operator|.
name|allConfigurations
argument_list|(
name|QNetworkConfiguration
operator|::
name|Active
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spy
argument_list|(
operator|&
name|manager
argument_list|,
name|SIGNAL
argument_list|(
name|configurationChanged
argument_list|(
name|QNetworkConfiguration
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// Cannot read/write to processes on WinCE.
comment|// Easiest alternative is to use sockets for IPC.
name|QLocalServer
name|oopServer
decl_stmt|;
comment|// First remove possible earlier listening address which would cause listen to fail
comment|// (e.g. previously abruptly ended unit test might cause this)
name|QLocalServer
operator|::
name|removeServer
argument_list|(
literal|"tst_qnetworksession"
argument_list|)
expr_stmt|;
name|oopServer
operator|.
name|listen
argument_list|(
literal|"tst_qnetworksession"
argument_list|)
expr_stmt|;
name|QProcess
name|lackey
decl_stmt|;
name|lackey
operator|.
name|start
argument_list|(
literal|"lackey/lackey"
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
name|lackey
operator|.
name|error
argument_list|()
operator|<<
name|lackey
operator|.
name|errorString
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|lackey
operator|.
name|waitForStarted
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|oopServer
operator|.
name|waitForNewConnection
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QLocalSocket
modifier|*
name|oopSocket
init|=
name|oopServer
operator|.
name|nextPendingConnection
argument_list|()
decl_stmt|;
do|do
block|{
name|QByteArray
name|output
decl_stmt|;
if|if
condition|(
name|oopSocket
operator|->
name|waitForReadyRead
argument_list|()
condition|)
name|output
operator|=
name|oopSocket
operator|->
name|readLine
argument_list|()
operator|.
name|trimmed
argument_list|()
expr_stmt|;
if|if
condition|(
name|output
operator|.
name|startsWith
argument_list|(
literal|"Started session "
argument_list|)
condition|)
block|{
name|QString
name|identifier
init|=
name|QString
operator|::
name|fromLocal8Bit
argument_list|(
name|output
operator|.
name|mid
argument_list|(
literal|20
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
decl_stmt|;
name|QNetworkConfiguration
name|changed
decl_stmt|;
do|do
block|{
name|QTRY_VERIFY
argument_list|(
operator|!
name|spy
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|changed
operator|=
name|qvariant_cast
argument_list|<
name|QNetworkConfiguration
argument_list|>
argument_list|(
name|spy
operator|.
name|takeFirst
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|changed
operator|.
name|identifier
argument_list|()
operator|!=
name|identifier
condition|)
do|;
name|QVERIFY
argument_list|(
operator|(
name|changed
operator|.
name|state
argument_list|()
operator|&
name|QNetworkConfiguration
operator|::
name|Active
operator|)
operator|==
name|QNetworkConfiguration
operator|::
name|Active
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|before
operator|.
name|contains
argument_list|(
name|changed
argument_list|)
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QNetworkConfiguration
argument_list|>
name|after
init|=
name|manager
operator|.
name|allConfigurations
argument_list|(
name|QNetworkConfiguration
operator|::
name|Active
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|after
operator|.
name|contains
argument_list|(
name|changed
argument_list|)
argument_list|)
expr_stmt|;
name|spy
operator|.
name|clear
argument_list|()
expr_stmt|;
name|oopSocket
operator|->
name|write
argument_list|(
literal|"stop\n"
argument_list|)
expr_stmt|;
name|oopSocket
operator|->
name|waitForBytesWritten
argument_list|()
expr_stmt|;
do|do
block|{
name|QTRY_VERIFY
argument_list|(
operator|!
name|spy
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|changed
operator|=
name|qvariant_cast
argument_list|<
name|QNetworkConfiguration
argument_list|>
argument_list|(
name|spy
operator|.
name|takeFirst
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
do|while
condition|(
name|changed
operator|.
name|identifier
argument_list|()
operator|!=
name|identifier
condition|)
do|;
name|QVERIFY
argument_list|(
operator|(
name|changed
operator|.
name|state
argument_list|()
operator|&
name|QNetworkConfiguration
operator|::
name|Active
operator|)
operator|!=
name|QNetworkConfiguration
operator|::
name|Active
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QNetworkConfiguration
argument_list|>
name|afterStop
init|=
name|manager
operator|.
name|allConfigurations
argument_list|(
name|QNetworkConfiguration
operator|::
name|Active
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|afterStop
operator|.
name|contains
argument_list|(
name|changed
argument_list|)
argument_list|)
expr_stmt|;
name|oopSocket
operator|->
name|disconnectFromServer
argument_list|()
expr_stmt|;
name|oopSocket
operator|->
name|waitForDisconnected
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|lackey
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
block|}
comment|// This is effected by QTBUG-4903, process will always report as running
comment|//} while (lackey.state() == QProcess::Running);
comment|// Workaround: the socket in the lackey will disconnect on exit
block|}
do|while
condition|(
name|oopSocket
operator|->
name|state
argument_list|()
operator|==
name|QLocalSocket
operator|::
name|ConnectedState
condition|)
do|;
switch|switch
condition|(
name|lackey
operator|.
name|exitCode
argument_list|()
condition|)
block|{
case|case
literal|0
case|:
name|qDebug
argument_list|(
literal|"Lackey returned exit success (0)"
argument_list|)
expr_stmt|;
break|break;
case|case
literal|1
case|:
name|QSKIP
argument_list|(
literal|"No discovered configurations found."
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
case|case
literal|2
case|:
name|QSKIP
argument_list|(
literal|"Lackey could not start session."
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
default|default:
name|QSKIP
argument_list|(
literal|"Lackey failed"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// A convenience / helper function for testcases. Return the first matching configuration.
end_comment
begin_comment
comment|// Ignores configurations in other than 'discovered' -state. Returns invalid (QNetworkConfiguration())
end_comment
begin_comment
comment|// if none found.
end_comment
begin_function
DECL|function|suitableConfiguration
name|QNetworkConfiguration
name|suitableConfiguration
parameter_list|(
name|QString
name|bearerType
parameter_list|,
name|QNetworkConfiguration
operator|::
name|Type
name|configType
parameter_list|)
block|{
comment|// Refresh configurations and derive configurations matching given parameters.
name|QNetworkConfigurationManager
name|mgr
decl_stmt|;
name|QSignalSpy
name|updateSpy
argument_list|(
operator|&
name|mgr
argument_list|,
name|SIGNAL
argument_list|(
name|updateCompleted
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|mgr
operator|.
name|updateConfigurations
argument_list|()
expr_stmt|;
name|QTRY_NOOP
argument_list|(
name|updateSpy
operator|.
name|count
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
if|if
condition|(
name|updateSpy
operator|.
name|count
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|qDebug
argument_list|(
literal|"tst_QNetworkSession::suitableConfiguration() failure: unable to update configurations"
argument_list|)
expr_stmt|;
return|return
name|QNetworkConfiguration
argument_list|()
return|;
block|}
name|QList
argument_list|<
name|QNetworkConfiguration
argument_list|>
name|discoveredConfigs
init|=
name|mgr
operator|.
name|allConfigurations
argument_list|(
name|QNetworkConfiguration
operator|::
name|Discovered
argument_list|)
decl_stmt|;
foreach|foreach
control|(
name|QNetworkConfiguration
name|config
decl|,
name|discoveredConfigs
control|)
block|{
if|if
condition|(
operator|(
name|config
operator|.
name|state
argument_list|()
operator|&
name|QNetworkConfiguration
operator|::
name|Active
operator|)
operator|==
name|QNetworkConfiguration
operator|::
name|Active
condition|)
block|{
name|discoveredConfigs
operator|.
name|removeOne
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|config
operator|.
name|type
argument_list|()
operator|!=
name|configType
condition|)
block|{
comment|// qDebug()<< "Dumping config because type (IAP/SNAP) mismatches: "<< config.name();
name|discoveredConfigs
operator|.
name|removeOne
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
operator|(
name|config
operator|.
name|type
argument_list|()
operator|==
name|QNetworkConfiguration
operator|::
name|InternetAccessPoint
operator|)
operator|&&
name|bearerType
operator|==
literal|"cellular"
condition|)
block|{
comment|// 'cellular' bearertype is for convenience
if|if
condition|(
name|config
operator|.
name|bearerName
argument_list|()
operator|!=
literal|"2G"
operator|&&
name|config
operator|.
name|bearerName
argument_list|()
operator|!=
literal|"CDMA2000"
operator|&&
name|config
operator|.
name|bearerName
argument_list|()
operator|!=
literal|"WCDMA"
operator|&&
name|config
operator|.
name|bearerName
argument_list|()
operator|!=
literal|"HSPA"
condition|)
block|{
comment|// qDebug()<< "Dumping config because bearer mismatches (cellular): "<< config.name();
name|discoveredConfigs
operator|.
name|removeOne
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
block|}
elseif|else
if|if
condition|(
operator|(
name|config
operator|.
name|type
argument_list|()
operator|==
name|QNetworkConfiguration
operator|::
name|InternetAccessPoint
operator|)
operator|&&
name|bearerType
operator|!=
name|config
operator|.
name|bearerName
argument_list|()
condition|)
block|{
comment|// qDebug()<< "Dumping config because bearer mismatches (WLAN): "<< config.name();
name|discoveredConfigs
operator|.
name|removeOne
argument_list|(
name|config
argument_list|)
expr_stmt|;
block|}
block|}
if|if
condition|(
name|discoveredConfigs
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qDebug
argument_list|(
literal|"tst_QNetworkSession::suitableConfiguration() failure: no suitable configurations present."
argument_list|)
expr_stmt|;
return|return
name|QNetworkConfiguration
argument_list|()
return|;
block|}
else|else
block|{
return|return
name|discoveredConfigs
operator|.
name|first
argument_list|()
return|;
block|}
block|}
end_function
begin_comment
comment|// A convenience-function: updates configurations and waits that they are updated.
end_comment
begin_function
DECL|function|updateConfigurations
name|void
name|updateConfigurations
parameter_list|()
block|{
name|QNetworkConfigurationManager
name|mgr
decl_stmt|;
name|QSignalSpy
name|updateSpy
argument_list|(
operator|&
name|mgr
argument_list|,
name|SIGNAL
argument_list|(
name|updateCompleted
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|mgr
operator|.
name|updateConfigurations
argument_list|()
expr_stmt|;
name|QTRY_NOOP
argument_list|(
name|updateSpy
operator|.
name|count
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// A convenience-function: updates and prints all available confiurations and their states
end_comment
begin_function
DECL|function|printConfigurations
name|void
name|printConfigurations
parameter_list|()
block|{
name|QNetworkConfigurationManager
name|manager
decl_stmt|;
name|QList
argument_list|<
name|QNetworkConfiguration
argument_list|>
name|allConfigs
init|=
name|manager
operator|.
name|allConfigurations
argument_list|()
decl_stmt|;
name|qDebug
argument_list|(
literal|"tst_QNetworkSession::printConfigurations QNetworkConfigurationManager gives following configurations: "
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|QNetworkConfiguration
name|config
decl|,
name|allConfigs
control|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"Name of the configuration: "
operator|<<
name|config
operator|.
name|name
argument_list|()
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"State of the configuration: "
operator|<<
name|config
operator|.
name|state
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// A convenience function for test-cases: opens the given configuration and return
end_comment
begin_comment
comment|// true if it was done gracefully.
end_comment
begin_function
DECL|function|openSession
name|bool
name|openSession
parameter_list|(
name|QNetworkSession
modifier|*
name|session
parameter_list|)
block|{
name|bool
name|result
init|=
literal|true
decl_stmt|;
name|QNetworkConfigurationManager
name|mgr
decl_stmt|;
name|QSignalSpy
name|openedSpy
argument_list|(
name|session
argument_list|,
name|SIGNAL
argument_list|(
name|opened
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|stateChangeSpy
argument_list|(
name|session
argument_list|,
name|SIGNAL
argument_list|(
name|stateChanged
argument_list|(
name|QNetworkSession
operator|::
name|State
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|errorSpy
argument_list|(
name|session
argument_list|,
name|SIGNAL
argument_list|(
name|error
argument_list|(
name|QNetworkSession
operator|::
name|SessionError
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|configChangeSpy
argument_list|(
operator|&
name|mgr
argument_list|,
name|SIGNAL
argument_list|(
name|configurationChanged
argument_list|(
name|QNetworkConfiguration
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
comment|// Store some initial statuses, because expected signals differ if the config is already
comment|// active by some other session
name|QNetworkConfiguration
operator|::
name|StateFlags
name|configInitState
init|=
name|session
operator|->
name|configuration
argument_list|()
operator|.
name|state
argument_list|()
decl_stmt|;
name|QNetworkSession
operator|::
name|State
name|sessionInitState
init|=
name|session
operator|->
name|state
argument_list|()
decl_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"tst_QNetworkSession::openSession() name of the configuration to be opened:  "
operator|<<
name|session
operator|->
name|configuration
argument_list|()
operator|.
name|name
argument_list|()
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"tst_QNetworkSession::openSession() state of the configuration to be opened:  "
operator|<<
name|session
operator|->
name|configuration
argument_list|()
operator|.
name|state
argument_list|()
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"tst_QNetworkSession::openSession() state of the session to be opened:  "
operator|<<
name|session
operator|->
name|state
argument_list|()
expr_stmt|;
if|if
condition|(
name|session
operator|->
name|isOpen
argument_list|()
operator|||
operator|!
name|session
operator|->
name|sessionProperty
argument_list|(
literal|"ActiveConfiguration"
argument_list|)
operator|.
name|toString
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qDebug
argument_list|(
literal|"tst_QNetworkSession::openSession() failure: session was already open / active."
argument_list|)
expr_stmt|;
name|result
operator|=
literal|false
expr_stmt|;
block|}
else|else
block|{
name|session
operator|->
name|open
argument_list|()
expr_stmt|;
name|session
operator|->
name|waitForOpened
argument_list|(
literal|120000
argument_list|)
expr_stmt|;
comment|// Bringing interfaces up and down may take time at platform
block|}
name|QTest
operator|::
name|qWait
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
comment|// Wait a moment to ensure all signals are propagated
comment|// Check that connection opening went by the book. Add checks here if more strictness needed.
if|if
condition|(
operator|!
name|session
operator|->
name|isOpen
argument_list|()
condition|)
block|{
name|qDebug
argument_list|(
literal|"tst_QNetworkSession::openSession() failure: QNetworkSession::open() failed."
argument_list|)
expr_stmt|;
name|result
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|openedSpy
operator|.
name|count
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|qDebug
argument_list|(
literal|"tst_QNetworkSession::openSession() failure: QNetworkSession::opened() - signal not received."
argument_list|)
expr_stmt|;
name|result
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|errorSpy
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qDebug
argument_list|(
literal|"tst_QNetworkSession::openSession() failure: QNetworkSession::error() - signal was detected."
argument_list|)
expr_stmt|;
name|result
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|sessionInitState
operator|!=
name|QNetworkSession
operator|::
name|Connected
operator|&&
name|stateChangeSpy
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qDebug
argument_list|(
literal|"tst_QNetworkSession::openSession() failure: QNetworkSession::stateChanged() - signals not detected."
argument_list|)
expr_stmt|;
name|result
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|configInitState
operator|!=
name|QNetworkConfiguration
operator|::
name|Active
operator|&&
name|configChangeSpy
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qDebug
argument_list|(
literal|"tst_QNetworkSession::openSession() failure: QNetworkConfigurationManager::configurationChanged() - signals not detected."
argument_list|)
expr_stmt|;
name|result
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|session
operator|->
name|configuration
argument_list|()
operator|.
name|state
argument_list|()
operator|!=
name|QNetworkConfiguration
operator|::
name|Active
condition|)
block|{
name|qDebug
argument_list|(
literal|"tst_QNetworkSession::openSession() failure: session's configuration is not in 'Active' -state."
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"tst_QNetworkSession::openSession() state is:  "
operator|<<
name|session
operator|->
name|configuration
argument_list|()
operator|.
name|state
argument_list|()
expr_stmt|;
name|result
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|==
literal|false
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"tst_QNetworkSession::openSession() opening session failed."
expr_stmt|;
block|}
else|else
block|{
name|qDebug
argument_list|()
operator|<<
literal|"tst_QNetworkSession::openSession() opening session succeeded."
expr_stmt|;
block|}
name|qDebug
argument_list|()
operator|<<
literal|"tst_QNetworkSession::openSession() name of the configuration is:  "
operator|<<
name|session
operator|->
name|configuration
argument_list|()
operator|.
name|name
argument_list|()
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"tst_QNetworkSession::openSession() configuration state is:  "
operator|<<
name|session
operator|->
name|configuration
argument_list|()
operator|.
name|state
argument_list|()
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"tst_QNetworkSession::openSession() session state is:  "
operator|<<
name|session
operator|->
name|state
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_comment
comment|// Helper function for closing opened session. Performs checks that
end_comment
begin_comment
comment|// session is closed gradefully (e.g. signals). Function does not delete
end_comment
begin_comment
comment|// the session. The lastSessionOnConfiguration (true by default) is used to
end_comment
begin_comment
comment|// tell if there are more sessions open, basing on same configuration. This
end_comment
begin_comment
comment|// impacts the checks made.
end_comment
begin_function
DECL|function|closeSession
name|bool
name|closeSession
parameter_list|(
name|QNetworkSession
modifier|*
name|session
parameter_list|,
name|bool
name|lastSessionOnConfiguration
parameter_list|)
block|{
if|if
condition|(
operator|!
name|session
condition|)
block|{
name|qDebug
argument_list|(
literal|"tst_QNetworkSession::closeSession() failure: NULL session given"
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|qDebug
argument_list|()
operator|<<
literal|"tst_QNetworkSession::closeSession() name of the configuration to be closed:  "
operator|<<
name|session
operator|->
name|configuration
argument_list|()
operator|.
name|name
argument_list|()
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"tst_QNetworkSession::closeSession() state of the configuration to be closed:  "
operator|<<
name|session
operator|->
name|configuration
argument_list|()
operator|.
name|state
argument_list|()
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"tst_QNetworkSession::closeSession() state of the session to be closed:  "
operator|<<
name|session
operator|->
name|state
argument_list|()
expr_stmt|;
if|if
condition|(
name|session
operator|->
name|state
argument_list|()
operator|!=
name|QNetworkSession
operator|::
name|Connected
operator|||
operator|!
name|session
operator|->
name|isOpen
argument_list|()
condition|)
block|{
name|qDebug
argument_list|(
literal|"tst_QNetworkSession::closeSession() failure: session is not opened."
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
name|QNetworkConfigurationManager
name|mgr
decl_stmt|;
name|QSignalSpy
name|sessionClosedSpy
argument_list|(
name|session
argument_list|,
name|SIGNAL
argument_list|(
name|closed
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|sessionStateChangedSpy
argument_list|(
name|session
argument_list|,
name|SIGNAL
argument_list|(
name|stateChanged
argument_list|(
name|QNetworkSession
operator|::
name|State
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|sessionErrorSpy
argument_list|(
name|session
argument_list|,
name|SIGNAL
argument_list|(
name|error
argument_list|(
name|QNetworkSession
operator|::
name|SessionError
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|configChangeSpy
argument_list|(
operator|&
name|mgr
argument_list|,
name|SIGNAL
argument_list|(
name|configurationChanged
argument_list|(
name|QNetworkConfiguration
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|bool
name|result
init|=
literal|true
decl_stmt|;
name|session
operator|->
name|close
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
comment|// Wait a moment so that all signals are propagated
if|if
condition|(
operator|!
name|sessionErrorSpy
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qDebug
argument_list|(
literal|"tst_QNetworkSession::closeSession() failure: QNetworkSession::error() received."
argument_list|)
expr_stmt|;
name|result
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|sessionClosedSpy
operator|.
name|count
argument_list|()
operator|!=
literal|1
condition|)
block|{
name|qDebug
argument_list|(
literal|"tst_QNetworkSession::closeSession() failure: QNetworkSession::closed() signal not received."
argument_list|)
expr_stmt|;
name|result
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|lastSessionOnConfiguration
operator|&&
name|sessionStateChangedSpy
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qDebug
argument_list|(
literal|"tst_QNetworkSession::closeSession() failure: QNetworkSession::stateChanged() signals not received."
argument_list|)
expr_stmt|;
name|result
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|lastSessionOnConfiguration
operator|&&
name|session
operator|->
name|state
argument_list|()
operator|!=
name|QNetworkSession
operator|::
name|Disconnected
condition|)
block|{
name|qDebug
argument_list|(
literal|"tst_QNetworkSession::closeSession() failure: QNetworkSession is not in Disconnected -state"
argument_list|)
expr_stmt|;
name|result
operator|=
literal|false
expr_stmt|;
block|}
name|QTRY_NOOP
argument_list|(
operator|!
name|configChangeSpy
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|lastSessionOnConfiguration
operator|&&
name|configChangeSpy
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|qDebug
argument_list|(
literal|"tst_QNetworkSession::closeSession() failure: QNetworkConfigurationManager::configurationChanged() - signal not detected."
argument_list|)
expr_stmt|;
name|result
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|lastSessionOnConfiguration
operator|&&
name|session
operator|->
name|configuration
argument_list|()
operator|.
name|state
argument_list|()
operator|==
name|QNetworkConfiguration
operator|::
name|Active
condition|)
block|{
name|qDebug
argument_list|(
literal|"tst_QNetworkSession::closeSession() failure: session's configuration is still in active state."
argument_list|)
expr_stmt|;
name|result
operator|=
literal|false
expr_stmt|;
block|}
if|if
condition|(
name|result
operator|==
literal|false
condition|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"tst_QNetworkSession::closeSession() closing session failed."
expr_stmt|;
block|}
else|else
block|{
name|qDebug
argument_list|()
operator|<<
literal|"tst_QNetworkSession::closeSession() closing session succeeded."
expr_stmt|;
block|}
name|qDebug
argument_list|()
operator|<<
literal|"tst_QNetworkSession::closeSession() name of the configuration is:  "
operator|<<
name|session
operator|->
name|configuration
argument_list|()
operator|.
name|name
argument_list|()
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"tst_QNetworkSession::closeSession() configuration state is:  "
operator|<<
name|session
operator|->
name|configuration
argument_list|()
operator|.
name|state
argument_list|()
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"tst_QNetworkSession::closeSession() session state is:  "
operator|<<
name|session
operator|->
name|state
argument_list|()
expr_stmt|;
return|return
name|result
return|;
block|}
end_function
begin_function
DECL|function|sessionAutoClose_data
name|void
name|tst_QNetworkSession
operator|::
name|sessionAutoClose_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QNetworkConfiguration
argument_list|>
argument_list|(
literal|"configuration"
argument_list|)
expr_stmt|;
name|bool
name|testData
init|=
literal|false
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QNetworkConfiguration
modifier|&
name|config
decl|,
name|manager
operator|.
name|allConfigurations
argument_list|(
name|QNetworkConfiguration
operator|::
name|Discovered
argument_list|)
control|)
block|{
name|QNetworkSession
name|session
argument_list|(
name|config
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|session
operator|.
name|sessionProperty
argument_list|(
name|QLatin1String
argument_list|(
literal|"AutoCloseSessionTimeout"
argument_list|)
argument_list|)
operator|.
name|isValid
argument_list|()
condition|)
continue|continue;
name|testData
operator|=
literal|true
expr_stmt|;
specifier|const
name|QString
name|name
init|=
name|config
operator|.
name|name
argument_list|()
operator|.
name|isEmpty
argument_list|()
condition|?
name|QString
argument_list|(
literal|"<Hidden>"
argument_list|)
else|:
name|config
operator|.
name|name
argument_list|()
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|name
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
operator|<<
name|config
expr_stmt|;
block|}
if|if
condition|(
operator|!
name|testData
condition|)
name|QSKIP
argument_list|(
literal|"No applicable configurations to test"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sessionAutoClose
name|void
name|tst_QNetworkSession
operator|::
name|sessionAutoClose
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QNetworkConfiguration
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
name|QNetworkSession
name|session
argument_list|(
name|configuration
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|session
operator|.
name|configuration
argument_list|()
operator|==
name|configuration
argument_list|)
expr_stmt|;
name|QVariant
name|autoCloseSession
init|=
name|session
operator|.
name|sessionProperty
argument_list|(
name|QLatin1String
argument_list|(
literal|"AutoCloseSessionTimeout"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|autoCloseSession
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
comment|// property defaults to false
name|QCOMPARE
argument_list|(
name|autoCloseSession
operator|.
name|toInt
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QSignalSpy
name|closeSpy
argument_list|(
operator|&
name|session
argument_list|,
name|SIGNAL
argument_list|(
name|closed
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|session
operator|.
name|open
argument_list|()
expr_stmt|;
name|session
operator|.
name|waitForOpened
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|session
operator|.
name|isOpen
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"Session not open"
argument_list|,
name|SkipSingle
argument_list|)
expr_stmt|;
comment|// set session to auto close at next polling interval.
name|session
operator|.
name|setSessionProperty
argument_list|(
name|QLatin1String
argument_list|(
literal|"AutoCloseSessionTimeout"
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
operator|!
name|closeSpy
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|session
operator|.
name|state
argument_list|()
argument_list|,
name|QNetworkSession
operator|::
name|Connected
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|session
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|session
operator|.
name|configuration
argument_list|()
operator|==
name|configuration
argument_list|)
expr_stmt|;
name|autoCloseSession
operator|=
name|session
operator|.
name|sessionProperty
argument_list|(
name|QLatin1String
argument_list|(
literal|"AutoCloseSessionTimeout"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|autoCloseSession
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|autoCloseSession
operator|.
name|toInt
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QNetworkSession
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qnetworksession.moc"
end_include
end_unit
