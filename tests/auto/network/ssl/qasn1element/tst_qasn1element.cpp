begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Jeremy LainÃ©<jeremy.laine@m4x.org> ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|"private/qasn1element_p.h"
end_include
begin_class
DECL|class|tst_QAsn1Element
class|class
name|tst_QAsn1Element
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|emptyConstructor
parameter_list|()
function_decl|;
name|void
name|equals_data
parameter_list|()
function_decl|;
name|void
name|equals
parameter_list|()
function_decl|;
name|void
name|toBool_data
parameter_list|()
function_decl|;
name|void
name|toBool
parameter_list|()
function_decl|;
name|void
name|dateTime_data
parameter_list|()
function_decl|;
name|void
name|dateTime
parameter_list|()
function_decl|;
name|void
name|integer_data
parameter_list|()
function_decl|;
name|void
name|integer
parameter_list|()
function_decl|;
name|void
name|invalid_data
parameter_list|()
function_decl|;
name|void
name|invalid
parameter_list|()
function_decl|;
name|void
name|octetString_data
parameter_list|()
function_decl|;
name|void
name|octetString
parameter_list|()
function_decl|;
name|void
name|objectIdentifier_data
parameter_list|()
function_decl|;
name|void
name|objectIdentifier
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|emptyConstructor
name|void
name|tst_QAsn1Element
operator|::
name|emptyConstructor
parameter_list|()
block|{
name|QAsn1Element
name|elem
decl_stmt|;
name|QCOMPARE
argument_list|(
name|elem
operator|.
name|type
argument_list|()
argument_list|,
name|quint8
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|elem
operator|.
name|value
argument_list|()
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QAsn1Element
argument_list|)
end_macro
begin_function
DECL|function|equals_data
name|void
name|tst_QAsn1Element
operator|::
name|equals_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QAsn1Element
argument_list|>
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QAsn1Element
argument_list|>
argument_list|(
literal|"b"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"equals"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"equal"
argument_list|)
operator|<<
name|QAsn1Element
argument_list|(
name|QAsn1Element
operator|::
name|BooleanType
argument_list|,
name|QByteArray
argument_list|(
literal|"\0"
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|<<
name|QAsn1Element
argument_list|(
name|QAsn1Element
operator|::
name|BooleanType
argument_list|,
name|QByteArray
argument_list|(
literal|"\0"
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"different type"
argument_list|)
operator|<<
name|QAsn1Element
argument_list|(
name|QAsn1Element
operator|::
name|BooleanType
argument_list|,
name|QByteArray
argument_list|(
literal|"\0"
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|<<
name|QAsn1Element
argument_list|(
name|QAsn1Element
operator|::
name|IntegerType
argument_list|,
name|QByteArray
argument_list|(
literal|"\0"
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"different value"
argument_list|)
operator|<<
name|QAsn1Element
argument_list|(
name|QAsn1Element
operator|::
name|BooleanType
argument_list|,
name|QByteArray
argument_list|(
literal|"\0"
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|<<
name|QAsn1Element
argument_list|(
name|QAsn1Element
operator|::
name|BooleanType
argument_list|,
name|QByteArray
argument_list|(
literal|"\xff"
argument_list|,
literal|1
argument_list|)
argument_list|)
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|equals
name|void
name|tst_QAsn1Element
operator|::
name|equals
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QAsn1Element
argument_list|,
name|a
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QAsn1Element
argument_list|,
name|b
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|equals
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|==
name|b
argument_list|,
name|equals
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|a
operator|!=
name|b
argument_list|,
operator|!
name|equals
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toBool_data
name|void
name|tst_QAsn1Element
operator|::
name|toBool_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"encoded"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"valid"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bad type"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromHex
argument_list|(
literal|"0201ff"
argument_list|)
operator|<<
literal|false
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bad value"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromHex
argument_list|(
literal|"010102"
argument_list|)
operator|<<
literal|false
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"false"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromHex
argument_list|(
literal|"010100"
argument_list|)
operator|<<
literal|false
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"true"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromHex
argument_list|(
literal|"0101ff"
argument_list|)
operator|<<
literal|true
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toBool
name|void
name|tst_QAsn1Element
operator|::
name|toBool
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|encoded
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|valid
argument_list|)
expr_stmt|;
name|bool
name|ok
decl_stmt|;
name|QAsn1Element
name|elem
decl_stmt|;
name|QVERIFY
argument_list|(
name|elem
operator|.
name|read
argument_list|(
name|encoded
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|elem
operator|.
name|toBool
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ok
argument_list|,
name|valid
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dateTime_data
name|void
name|tst_QAsn1Element
operator|::
name|dateTime_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"encoded"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QDateTime
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bad type"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromHex
argument_list|(
literal|"020100"
argument_list|)
operator|<<
name|QDateTime
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"UTCTime - 070417074026Z"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromHex
argument_list|(
literal|"170d3037303431373037343032365a"
argument_list|)
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2007
argument_list|,
literal|4
argument_list|,
literal|17
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|7
argument_list|,
literal|40
argument_list|,
literal|26
argument_list|)
argument_list|,
name|Qt
operator|::
name|UTC
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"UTCTime - bad length"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromHex
argument_list|(
literal|"170c30373034313730373430325a"
argument_list|)
operator|<<
name|QDateTime
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"UTCTime - no trailing Z"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromHex
argument_list|(
literal|"170d30373034313730373430323659"
argument_list|)
operator|<<
name|QDateTime
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"GeneralizedTime - 20510829095341Z"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromHex
argument_list|(
literal|"180f32303531303832393039353334315a"
argument_list|)
operator|<<
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2051
argument_list|,
literal|8
argument_list|,
literal|29
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|9
argument_list|,
literal|53
argument_list|,
literal|41
argument_list|)
argument_list|,
name|Qt
operator|::
name|UTC
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"GeneralizedTime - bad length"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromHex
argument_list|(
literal|"180e323035313038323930393533345a"
argument_list|)
operator|<<
name|QDateTime
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"GeneralizedTime - no trailing Z"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromHex
argument_list|(
literal|"180f323035313038323930393533343159"
argument_list|)
operator|<<
name|QDateTime
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|dateTime
name|void
name|tst_QAsn1Element
operator|::
name|dateTime
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|encoded
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QDateTime
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QAsn1Element
name|elem
decl_stmt|;
name|QVERIFY
argument_list|(
name|elem
operator|.
name|read
argument_list|(
name|encoded
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|elem
operator|.
name|toDateTime
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|integer_data
name|void
name|tst_QAsn1Element
operator|::
name|integer_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"encoded"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromHex
argument_list|(
literal|"020100"
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"127"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromHex
argument_list|(
literal|"02017F"
argument_list|)
operator|<<
literal|127
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"128"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromHex
argument_list|(
literal|"02020080"
argument_list|)
operator|<<
literal|128
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"256"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromHex
argument_list|(
literal|"02020100"
argument_list|)
operator|<<
literal|256
expr_stmt|;
block|}
end_function
begin_function
DECL|function|integer
name|void
name|tst_QAsn1Element
operator|::
name|integer
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|encoded
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|value
argument_list|)
expr_stmt|;
comment|// read
name|bool
name|ok
decl_stmt|;
name|QAsn1Element
name|elem
decl_stmt|;
name|QVERIFY
argument_list|(
name|elem
operator|.
name|read
argument_list|(
name|encoded
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|elem
operator|.
name|type
argument_list|()
argument_list|,
name|quint8
argument_list|(
name|QAsn1Element
operator|::
name|IntegerType
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|elem
operator|.
name|toInteger
argument_list|(
operator|&
name|ok
argument_list|)
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
comment|// write
name|QByteArray
name|buffer
decl_stmt|;
name|QDataStream
name|stream
argument_list|(
operator|&
name|buffer
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|QAsn1Element
operator|::
name|fromInteger
argument_list|(
name|value
argument_list|)
operator|.
name|write
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|buffer
argument_list|,
name|encoded
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|invalid_data
name|void
name|tst_QAsn1Element
operator|::
name|invalid_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"encoded"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bad type"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromHex
argument_list|(
literal|"000100"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"truncated value"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromHex
argument_list|(
literal|"0401"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|invalid
name|void
name|tst_QAsn1Element
operator|::
name|invalid
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|encoded
argument_list|)
expr_stmt|;
name|QAsn1Element
name|elem
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|elem
operator|.
name|read
argument_list|(
name|encoded
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|octetString_data
name|void
name|tst_QAsn1Element
operator|::
name|octetString_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"encoded"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"value"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0 byte"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromHex
argument_list|(
literal|"0400"
argument_list|)
operator|<<
name|QByteArray
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1 byte"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromHex
argument_list|(
literal|"040100"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|1
argument_list|,
literal|'\0'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"127 bytes"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromHex
argument_list|(
literal|"047f"
argument_list|)
operator|+
name|QByteArray
argument_list|(
literal|127
argument_list|,
literal|'\0'
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|127
argument_list|,
literal|'\0'
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"128 bytes"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromHex
argument_list|(
literal|"048180"
argument_list|)
operator|+
name|QByteArray
argument_list|(
literal|128
argument_list|,
literal|'\0'
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|128
argument_list|,
literal|'\0'
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|octetString
name|void
name|tst_QAsn1Element
operator|::
name|octetString
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|encoded
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|value
argument_list|)
expr_stmt|;
comment|// read
name|QAsn1Element
name|elem
decl_stmt|;
name|QVERIFY
argument_list|(
name|elem
operator|.
name|read
argument_list|(
name|encoded
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|elem
operator|.
name|type
argument_list|()
argument_list|,
name|quint8
argument_list|(
name|QAsn1Element
operator|::
name|OctetStringType
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|elem
operator|.
name|value
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
comment|// write
name|QByteArray
name|buffer
decl_stmt|;
name|QDataStream
name|stream
argument_list|(
operator|&
name|buffer
argument_list|,
name|QIODevice
operator|::
name|WriteOnly
argument_list|)
decl_stmt|;
name|elem
operator|.
name|write
argument_list|(
name|stream
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|buffer
argument_list|,
name|encoded
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|objectIdentifier_data
name|void
name|tst_QAsn1Element
operator|::
name|objectIdentifier_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"encoded"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"oid"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QByteArray
argument_list|>
argument_list|(
literal|"name"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1.2.3.4"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromHex
argument_list|(
literal|"06032a0304"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"1.2.3.4"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"1.2.3.4"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"favouriteDrink"
argument_list|)
operator|<<
name|QByteArray
operator|::
name|fromHex
argument_list|(
literal|"060a0992268993f22c640105"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"0.9.2342.19200300.100.1.5"
argument_list|)
operator|<<
name|QByteArray
argument_list|(
literal|"favouriteDrink"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|objectIdentifier
name|void
name|tst_QAsn1Element
operator|::
name|objectIdentifier
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|encoded
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|oid
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QByteArray
argument_list|,
name|name
argument_list|)
expr_stmt|;
name|QAsn1Element
name|elem
decl_stmt|;
name|QVERIFY
argument_list|(
name|elem
operator|.
name|read
argument_list|(
name|encoded
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|elem
operator|.
name|type
argument_list|()
argument_list|,
name|quint8
argument_list|(
name|QAsn1Element
operator|::
name|ObjectIdentifierType
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|elem
operator|.
name|toObjectId
argument_list|()
argument_list|,
name|oid
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QAsn1Element
operator|::
name|fromObjectId
argument_list|(
name|oid
argument_list|)
operator|.
name|toObjectId
argument_list|()
argument_list|,
name|oid
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|elem
operator|.
name|toObjectName
argument_list|()
argument_list|,
name|name
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QAsn1Element
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qasn1element.moc"
end_include
end_unit
