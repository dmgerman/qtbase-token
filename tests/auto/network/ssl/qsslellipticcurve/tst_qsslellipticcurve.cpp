begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Governikus GmbH& Co. KG. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QSslEllipticCurve>
end_include
begin_include
include|#
directive|include
file|<QSslSocket>
end_include
begin_class
DECL|class|tst_QSslEllipticCurve
class|class
name|tst_QSslEllipticCurve
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
ifndef|#
directive|ifndef
name|QT_NO_SSL
private|private
name|Q_SLOTS
private|:
name|void
name|constExpr
parameter_list|()
function_decl|;
name|void
name|construction
parameter_list|()
function_decl|;
name|void
name|fromShortName_data
parameter_list|()
function_decl|;
name|void
name|fromShortName
parameter_list|()
function_decl|;
name|void
name|fromLongName_data
parameter_list|()
function_decl|;
name|void
name|fromLongName
parameter_list|()
function_decl|;
endif|#
directive|endif
block|}
class|;
end_class
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SSL
end_ifndef
begin_function
DECL|function|constExpr
name|void
name|tst_QSslEllipticCurve
operator|::
name|constExpr
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_COMPILER_CONSTEXPR
comment|// check that default ctor and op ==/!= are constexpr:
name|char
name|array1
index|[
name|QSslEllipticCurve
argument_list|()
operator|==
name|QSslEllipticCurve
argument_list|()
condition|?
literal|1
else|:
operator|-
literal|1
index|]
decl_stmt|;
name|char
name|array2
index|[
name|QSslEllipticCurve
argument_list|()
operator|!=
name|QSslEllipticCurve
argument_list|()
condition|?
operator|-
literal|1
else|:
literal|1
index|]
decl_stmt|;
name|Q_UNUSED
argument_list|(
name|array1
argument_list|)
expr_stmt|;
name|Q_UNUSED
argument_list|(
name|array2
argument_list|)
expr_stmt|;
else|#
directive|else
name|QSKIP
argument_list|(
literal|"This test requires C++11 generalized constant expression support enabled in the compiler."
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|construction
name|void
name|tst_QSslEllipticCurve
operator|::
name|construction
parameter_list|()
block|{
name|QSslEllipticCurve
name|curve
decl_stmt|;
name|QCOMPARE
argument_list|(
name|curve
operator|.
name|isValid
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|curve
operator|.
name|shortName
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|curve
operator|.
name|longName
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|curve
operator|.
name|isTlsNamedCurve
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fromShortName_data
name|void
name|tst_QSslEllipticCurve
operator|::
name|fromShortName_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"shortName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QSslEllipticCurve
argument_list|>
argument_list|(
literal|"curve"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"valid"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QString()"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QSslEllipticCurve
argument_list|()
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"\""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QSslEllipticCurve
argument_list|()
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"does-not-exist"
argument_list|)
operator|<<
name|QStringLiteral
argument_list|(
literal|"does-not-exist"
argument_list|)
operator|<<
name|QSslEllipticCurve
argument_list|()
operator|<<
literal|false
expr_stmt|;
name|Q_FOREACH
argument_list|(
argument|QSslEllipticCurve ec
argument_list|,
argument|QSslSocket::supportedEllipticCurves()
argument_list|)
block|{
specifier|const
name|QString
name|sN
init|=
name|ec
operator|.
name|shortName
argument_list|()
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
literal|"supported EC \""
operator|+
name|sN
operator|+
literal|'"'
argument_list|)
argument_list|)
operator|<<
name|sN
operator|<<
name|ec
operator|<<
literal|true
expr_stmt|;
comment|// At least in the OpenSSL impl, the short name is case-sensitive. That feels odd.
comment|//const QString SN = sN.toUpper();
comment|//QTest::newRow(qPrintable("supported EC \"" + SN + '"'))<< SN<< ec<< true;
comment|//const QString sn = sN.toLower();
comment|//QTest::newRow(qPrintable("supported EC \"" + sn + '"'))<< sn<< ec<< true;
block|}
block|}
end_function
begin_function
DECL|function|fromShortName
name|void
name|tst_QSslEllipticCurve
operator|::
name|fromShortName
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|shortName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QSslEllipticCurve
argument_list|,
name|curve
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|valid
argument_list|)
expr_stmt|;
specifier|const
name|QSslEllipticCurve
name|result
init|=
name|QSslEllipticCurve
operator|::
name|fromShortName
argument_list|(
name|shortName
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
name|curve
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
operator|.
name|isValid
argument_list|()
argument_list|,
name|valid
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
operator|.
name|shortName
argument_list|()
argument_list|,
name|curve
operator|.
name|shortName
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
operator|.
name|shortName
argument_list|()
argument_list|,
name|valid
condition|?
name|shortName
else|:
name|QString
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fromLongName_data
name|void
name|tst_QSslEllipticCurve
operator|::
name|fromLongName_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"longName"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QSslEllipticCurve
argument_list|>
argument_list|(
literal|"curve"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"valid"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"QString()"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|QSslEllipticCurve
argument_list|()
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"\""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QSslEllipticCurve
argument_list|()
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"does-not-exist"
argument_list|)
operator|<<
name|QStringLiteral
argument_list|(
literal|"does-not-exist"
argument_list|)
operator|<<
name|QSslEllipticCurve
argument_list|()
operator|<<
literal|false
expr_stmt|;
name|Q_FOREACH
argument_list|(
argument|QSslEllipticCurve ec
argument_list|,
argument|QSslSocket::supportedEllipticCurves()
argument_list|)
block|{
specifier|const
name|QString
name|lN
init|=
name|ec
operator|.
name|longName
argument_list|()
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
literal|"supported EC \""
operator|+
name|lN
operator|+
literal|'"'
argument_list|)
argument_list|)
operator|<<
name|lN
operator|<<
name|ec
operator|<<
literal|true
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|fromLongName
name|void
name|tst_QSslEllipticCurve
operator|::
name|fromLongName
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|longName
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QSslEllipticCurve
argument_list|,
name|curve
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|valid
argument_list|)
expr_stmt|;
specifier|const
name|QSslEllipticCurve
name|result
init|=
name|QSslEllipticCurve
operator|::
name|fromLongName
argument_list|(
name|longName
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
name|curve
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
operator|.
name|isValid
argument_list|()
argument_list|,
name|valid
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
operator|.
name|longName
argument_list|()
argument_list|,
name|curve
operator|.
name|longName
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|result
operator|.
name|longName
argument_list|()
argument_list|,
name|valid
condition|?
name|longName
else|:
name|QString
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_SSL
end_comment
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QSslEllipticCurve
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qsslellipticcurve.moc"
end_include
end_unit
