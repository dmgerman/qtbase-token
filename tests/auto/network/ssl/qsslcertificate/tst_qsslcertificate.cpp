begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qsslcertificate.h>
end_include
begin_include
include|#
directive|include
file|<qsslkey.h>
end_include
begin_include
include|#
directive|include
file|<qsslsocket.h>
end_include
begin_include
include|#
directive|include
file|<qsslcertificateextension.h>
end_include
begin_class
DECL|class|tst_QSslCertificate
class|class
name|tst_QSslCertificate
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
DECL|struct|CertInfo
struct|struct
name|CertInfo
block|{
DECL|member|fileInfo
name|QFileInfo
name|fileInfo
decl_stmt|;
DECL|member|fileInfo_digest_md5
name|QFileInfo
name|fileInfo_digest_md5
decl_stmt|;
DECL|member|fileInfo_digest_sha1
name|QFileInfo
name|fileInfo_digest_sha1
decl_stmt|;
DECL|member|format
name|QSsl
operator|::
name|EncodingFormat
name|format
decl_stmt|;
DECL|function|CertInfo
name|CertInfo
parameter_list|(
specifier|const
name|QFileInfo
modifier|&
name|fileInfo
parameter_list|,
name|QSsl
operator|::
name|EncodingFormat
name|format
parameter_list|)
member_init_list|:
name|fileInfo
argument_list|(
name|fileInfo
argument_list|)
member_init_list|,
name|format
argument_list|(
name|format
argument_list|)
block|{}
block|}
struct|;
DECL|member|certInfoList
name|QList
argument_list|<
name|CertInfo
argument_list|>
name|certInfoList
decl_stmt|;
DECL|member|subjAltNameMap
name|QMap
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|subjAltNameMap
decl_stmt|;
DECL|member|pubkeyMap
name|QMap
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|pubkeyMap
decl_stmt|;
DECL|member|md5Map
name|QMap
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|md5Map
decl_stmt|;
DECL|member|sha1Map
name|QMap
argument_list|<
name|QString
argument_list|,
name|QString
argument_list|>
name|sha1Map
decl_stmt|;
name|void
name|createTestRows
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_SSL
name|void
name|compareCertificates
parameter_list|(
specifier|const
name|QSslCertificate
modifier|&
name|cert1
parameter_list|,
specifier|const
name|QSslCertificate
modifier|&
name|cert2
parameter_list|)
function_decl|;
endif|#
directive|endif
DECL|member|oldCurrentDir
name|QString
name|oldCurrentDir
decl_stmt|;
public|public
name|slots
public|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_SSL
private|private
name|slots
private|:
name|void
name|emptyConstructor
parameter_list|()
function_decl|;
name|void
name|constructor_data
parameter_list|()
function_decl|;
name|void
name|constructor
parameter_list|()
function_decl|;
name|void
name|constructingGarbage
parameter_list|()
function_decl|;
name|void
name|copyAndAssign_data
parameter_list|()
function_decl|;
name|void
name|copyAndAssign
parameter_list|()
function_decl|;
name|void
name|digest_data
parameter_list|()
function_decl|;
name|void
name|digest
parameter_list|()
function_decl|;
name|void
name|subjectAlternativeNames_data
parameter_list|()
function_decl|;
name|void
name|utf8SubjectNames
parameter_list|()
function_decl|;
name|void
name|subjectAlternativeNames
parameter_list|()
function_decl|;
name|void
name|publicKey_data
parameter_list|()
function_decl|;
name|void
name|publicKey
parameter_list|()
function_decl|;
name|void
name|toPemOrDer_data
parameter_list|()
function_decl|;
name|void
name|toPemOrDer
parameter_list|()
function_decl|;
name|void
name|fromDevice
parameter_list|()
function_decl|;
name|void
name|fromPath_data
parameter_list|()
function_decl|;
name|void
name|fromPath
parameter_list|()
function_decl|;
name|void
name|certInfo
parameter_list|()
function_decl|;
name|void
name|certInfoQByteArray
parameter_list|()
function_decl|;
name|void
name|task256066toPem
parameter_list|()
function_decl|;
name|void
name|nulInCN
parameter_list|()
function_decl|;
name|void
name|nulInSan
parameter_list|()
function_decl|;
name|void
name|largeSerialNumber
parameter_list|()
function_decl|;
name|void
name|largeExpirationDate
parameter_list|()
function_decl|;
name|void
name|blacklistedCertificates
parameter_list|()
function_decl|;
name|void
name|toText
parameter_list|()
function_decl|;
name|void
name|multipleCommonNames
parameter_list|()
function_decl|;
name|void
name|subjectAndIssuerAttributes
parameter_list|()
function_decl|;
name|void
name|verify
parameter_list|()
function_decl|;
name|void
name|extensions
parameter_list|()
function_decl|;
name|void
name|threadSafeConstMethods
parameter_list|()
function_decl|;
comment|// helper for verbose test failure messages
name|QString
name|toString
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QSslError
argument_list|>
modifier|&
parameter_list|)
function_decl|;
comment|// ### add tests for certificate bundles (multiple certificates concatenated into a single
comment|//     structure); both PEM and DER formatted
endif|#
directive|endif
private|private:
DECL|member|testDataDir
name|QString
name|testDataDir
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|initTestCase
name|void
name|tst_QSslCertificate
operator|::
name|initTestCase
parameter_list|()
block|{
name|testDataDir
operator|=
name|QFileInfo
argument_list|(
name|QFINDTESTDATA
argument_list|(
literal|"certificates"
argument_list|)
argument_list|)
operator|.
name|absolutePath
argument_list|()
expr_stmt|;
if|if
condition|(
name|testDataDir
operator|.
name|isEmpty
argument_list|()
condition|)
name|testDataDir
operator|=
name|QCoreApplication
operator|::
name|applicationDirPath
argument_list|()
expr_stmt|;
if|if
condition|(
name|QDir
operator|::
name|current
argument_list|()
operator|.
name|absolutePath
argument_list|()
operator|!=
name|testDataDir
condition|)
block|{
name|oldCurrentDir
operator|=
name|QDir
operator|::
name|current
argument_list|()
operator|.
name|absolutePath
argument_list|()
expr_stmt|;
name|QVERIFY2
argument_list|(
name|QDir
operator|::
name|setCurrent
argument_list|(
name|testDataDir
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|QString
argument_list|(
literal|"Cannot change directory to %1"
argument_list|)
operator|.
name|arg
argument_list|(
name|testDataDir
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QDir
name|dir
argument_list|(
name|testDataDir
operator|+
literal|"/certificates"
argument_list|)
decl_stmt|;
name|QFileInfoList
name|fileInfoList
init|=
name|dir
operator|.
name|entryInfoList
argument_list|(
name|QDir
operator|::
name|Files
operator||
name|QDir
operator|::
name|Readable
argument_list|)
decl_stmt|;
name|QRegExp
name|rxCert
argument_list|(
name|QLatin1String
argument_list|(
literal|"^.+\\.(pem|der)$"
argument_list|)
argument_list|)
decl_stmt|;
name|QRegExp
name|rxSan
argument_list|(
name|QLatin1String
argument_list|(
literal|"^(.+\\.(?:pem|der))\\.san$"
argument_list|)
argument_list|)
decl_stmt|;
name|QRegExp
name|rxPubKey
argument_list|(
name|QLatin1String
argument_list|(
literal|"^(.+\\.(?:pem|der))\\.pubkey$"
argument_list|)
argument_list|)
decl_stmt|;
name|QRegExp
name|rxDigest
argument_list|(
name|QLatin1String
argument_list|(
literal|"^(.+\\.(?:pem|der))\\.digest-(md5|sha1)$"
argument_list|)
argument_list|)
decl_stmt|;
foreach|foreach
control|(
name|QFileInfo
name|fileInfo
decl|,
name|fileInfoList
control|)
block|{
if|if
condition|(
name|rxCert
operator|.
name|indexIn
argument_list|(
name|fileInfo
operator|.
name|fileName
argument_list|()
argument_list|)
operator|>=
literal|0
condition|)
name|certInfoList
operator|<<
name|CertInfo
argument_list|(
name|fileInfo
argument_list|,
name|rxCert
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
operator|==
name|QLatin1String
argument_list|(
literal|"pem"
argument_list|)
condition|?
name|QSsl
operator|::
name|Pem
else|:
name|QSsl
operator|::
name|Der
argument_list|)
expr_stmt|;
if|if
condition|(
name|rxSan
operator|.
name|indexIn
argument_list|(
name|fileInfo
operator|.
name|fileName
argument_list|()
argument_list|)
operator|>=
literal|0
condition|)
name|subjAltNameMap
operator|.
name|insert
argument_list|(
name|rxSan
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
argument_list|,
name|fileInfo
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|rxPubKey
operator|.
name|indexIn
argument_list|(
name|fileInfo
operator|.
name|fileName
argument_list|()
argument_list|)
operator|>=
literal|0
condition|)
name|pubkeyMap
operator|.
name|insert
argument_list|(
name|rxPubKey
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
argument_list|,
name|fileInfo
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|rxDigest
operator|.
name|indexIn
argument_list|(
name|fileInfo
operator|.
name|fileName
argument_list|()
argument_list|)
operator|>=
literal|0
condition|)
block|{
if|if
condition|(
name|rxDigest
operator|.
name|cap
argument_list|(
literal|2
argument_list|)
operator|==
name|QLatin1String
argument_list|(
literal|"md5"
argument_list|)
condition|)
name|md5Map
operator|.
name|insert
argument_list|(
name|rxDigest
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
argument_list|,
name|fileInfo
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
expr_stmt|;
else|else
name|sha1Map
operator|.
name|insert
argument_list|(
name|rxDigest
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
argument_list|,
name|fileInfo
operator|.
name|absoluteFilePath
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_QSslCertificate
operator|::
name|cleanupTestCase
parameter_list|()
block|{
if|if
condition|(
operator|!
name|oldCurrentDir
operator|.
name|isEmpty
argument_list|()
condition|)
block|{
name|QDir
operator|::
name|setCurrent
argument_list|(
name|oldCurrentDir
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SSL
end_ifndef
begin_function
DECL|function|readFile
specifier|static
name|QByteArray
name|readFile
parameter_list|(
specifier|const
name|QString
modifier|&
name|absFilePath
parameter_list|)
block|{
name|QFile
name|file
argument_list|(
name|absFilePath
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
condition|)
block|{
name|QWARN
argument_list|(
literal|"failed to open file"
argument_list|)
expr_stmt|;
return|return
name|QByteArray
argument_list|()
return|;
block|}
return|return
name|file
operator|.
name|readAll
argument_list|()
return|;
block|}
end_function
begin_function
DECL|function|emptyConstructor
name|void
name|tst_QSslCertificate
operator|::
name|emptyConstructor
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QSslSocket
operator|::
name|supportsSsl
argument_list|()
condition|)
return|return;
name|QSslCertificate
name|certificate
decl_stmt|;
name|QVERIFY
argument_list|(
name|certificate
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
comment|//make sure none of the functions crash  (task 203035)
name|QVERIFY
argument_list|(
operator|!
name|certificate
operator|.
name|isBlacklisted
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|certificate
operator|.
name|version
argument_list|()
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|certificate
operator|.
name|serialNumber
argument_list|()
argument_list|,
name|QByteArray
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|certificate
operator|.
name|digest
argument_list|()
argument_list|,
name|QCryptographicHash
operator|::
name|hash
argument_list|(
name|QByteArray
argument_list|()
argument_list|,
name|QCryptographicHash
operator|::
name|Md5
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|certificate
operator|.
name|issuerInfo
argument_list|(
name|QSslCertificate
operator|::
name|Organization
argument_list|)
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|certificate
operator|.
name|subjectInfo
argument_list|(
name|QSslCertificate
operator|::
name|Organization
argument_list|)
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|certificate
operator|.
name|subjectAlternativeNames
argument_list|()
argument_list|,
operator|(
name|QMultiMap
argument_list|<
name|QSsl
operator|::
name|AlternativeNameEntryType
argument_list|,
name|QString
argument_list|>
argument_list|()
operator|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|certificate
operator|.
name|effectiveDate
argument_list|()
argument_list|,
name|QDateTime
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|certificate
operator|.
name|expiryDate
argument_list|()
argument_list|,
name|QDateTime
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_expr_stmt
DECL|variable|EncodingFormat
name|Q_DECLARE_METATYPE
argument_list|(
name|QSsl
operator|::
name|EncodingFormat
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function
DECL|function|createTestRows
name|void
name|tst_QSslCertificate
operator|::
name|createTestRows
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"absFilePath"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QSsl
operator|::
name|EncodingFormat
argument_list|>
argument_list|(
literal|"format"
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|CertInfo
name|certInfo
decl|,
name|certInfoList
control|)
block|{
name|QTest
operator|::
name|newRow
argument_list|(
name|certInfo
operator|.
name|fileInfo
operator|.
name|fileName
argument_list|()
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|certInfo
operator|.
name|fileInfo
operator|.
name|absoluteFilePath
argument_list|()
operator|<<
name|certInfo
operator|.
name|format
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|constructor_data
name|void
name|tst_QSslCertificate
operator|::
name|constructor_data
parameter_list|()
block|{
name|createTestRows
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|constructor
name|void
name|tst_QSslCertificate
operator|::
name|constructor
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QSslSocket
operator|::
name|supportsSsl
argument_list|()
condition|)
return|return;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|absFilePath
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QSsl
operator|::
name|EncodingFormat
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|QByteArray
name|encoded
init|=
name|readFile
argument_list|(
name|absFilePath
argument_list|)
decl_stmt|;
name|QSslCertificate
name|certificate
argument_list|(
name|encoded
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|certificate
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|constructingGarbage
name|void
name|tst_QSslCertificate
operator|::
name|constructingGarbage
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QSslSocket
operator|::
name|supportsSsl
argument_list|()
condition|)
return|return;
name|QByteArray
name|garbage
argument_list|(
literal|"garbage"
argument_list|)
decl_stmt|;
name|QSslCertificate
name|certificate
argument_list|(
name|garbage
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|certificate
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|copyAndAssign_data
name|void
name|tst_QSslCertificate
operator|::
name|copyAndAssign_data
parameter_list|()
block|{
name|createTestRows
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compareCertificates
name|void
name|tst_QSslCertificate
operator|::
name|compareCertificates
parameter_list|(
specifier|const
name|QSslCertificate
modifier|&
name|cert1
parameter_list|,
specifier|const
name|QSslCertificate
modifier|&
name|cert2
parameter_list|)
block|{
name|QCOMPARE
argument_list|(
name|cert1
operator|.
name|isNull
argument_list|()
argument_list|,
name|cert2
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
comment|// Note: in theory, the next line could fail even if the certificates are identical!
name|QCOMPARE
argument_list|(
name|cert1
operator|.
name|isBlacklisted
argument_list|()
argument_list|,
name|cert2
operator|.
name|isBlacklisted
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert1
operator|.
name|version
argument_list|()
argument_list|,
name|cert2
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert1
operator|.
name|serialNumber
argument_list|()
argument_list|,
name|cert2
operator|.
name|serialNumber
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert1
operator|.
name|digest
argument_list|()
argument_list|,
name|cert2
operator|.
name|digest
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert1
operator|.
name|toPem
argument_list|()
argument_list|,
name|cert2
operator|.
name|toPem
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert1
operator|.
name|toDer
argument_list|()
argument_list|,
name|cert2
operator|.
name|toDer
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|info
init|=
name|QSslCertificate
operator|::
name|Organization
init|;
name|info
operator|<=
name|QSslCertificate
operator|::
name|StateOrProvinceName
condition|;
name|info
operator|++
control|)
block|{
specifier|const
name|QSslCertificate
operator|::
name|SubjectInfo
name|subjectInfo
init|=
operator|(
name|QSslCertificate
operator|::
name|SubjectInfo
operator|)
name|info
decl_stmt|;
name|QCOMPARE
argument_list|(
name|cert1
operator|.
name|issuerInfo
argument_list|(
name|subjectInfo
argument_list|)
argument_list|,
name|cert2
operator|.
name|issuerInfo
argument_list|(
name|subjectInfo
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert1
operator|.
name|subjectInfo
argument_list|(
name|subjectInfo
argument_list|)
argument_list|,
name|cert2
operator|.
name|subjectInfo
argument_list|(
name|subjectInfo
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|cert1
operator|.
name|subjectAlternativeNames
argument_list|()
argument_list|,
name|cert2
operator|.
name|subjectAlternativeNames
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert1
operator|.
name|effectiveDate
argument_list|()
argument_list|,
name|cert2
operator|.
name|effectiveDate
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert1
operator|.
name|expiryDate
argument_list|()
argument_list|,
name|cert2
operator|.
name|expiryDate
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert1
operator|.
name|version
argument_list|()
argument_list|,
name|cert2
operator|.
name|version
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert1
operator|.
name|serialNumber
argument_list|()
argument_list|,
name|cert2
operator|.
name|serialNumber
argument_list|()
argument_list|)
expr_stmt|;
comment|// ### add more functions here ...
block|}
end_function
begin_function
DECL|function|copyAndAssign
name|void
name|tst_QSslCertificate
operator|::
name|copyAndAssign
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QSslSocket
operator|::
name|supportsSsl
argument_list|()
condition|)
return|return;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|absFilePath
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QSsl
operator|::
name|EncodingFormat
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|QByteArray
name|encoded
init|=
name|readFile
argument_list|(
name|absFilePath
argument_list|)
decl_stmt|;
name|QSslCertificate
name|certificate
argument_list|(
name|encoded
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|certificate
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QSslCertificate
name|copied
argument_list|(
name|certificate
argument_list|)
decl_stmt|;
name|compareCertificates
argument_list|(
name|certificate
argument_list|,
name|copied
argument_list|)
expr_stmt|;
name|QSslCertificate
name|assigned
init|=
name|certificate
decl_stmt|;
name|compareCertificates
argument_list|(
name|certificate
argument_list|,
name|assigned
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|digest_data
name|void
name|tst_QSslCertificate
operator|::
name|digest_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"absFilePath"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QSsl
operator|::
name|EncodingFormat
argument_list|>
argument_list|(
literal|"format"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"absFilePath_digest_md5"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"absFilePath_digest_sha1"
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|CertInfo
name|certInfo
decl|,
name|certInfoList
control|)
block|{
name|QString
name|certName
init|=
name|certInfo
operator|.
name|fileInfo
operator|.
name|fileName
argument_list|()
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|certName
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|certInfo
operator|.
name|fileInfo
operator|.
name|absoluteFilePath
argument_list|()
operator|<<
name|certInfo
operator|.
name|format
operator|<<
name|md5Map
operator|.
name|value
argument_list|(
name|certName
argument_list|)
operator|<<
name|sha1Map
operator|.
name|value
argument_list|(
name|certName
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// Converts a digest of the form '{MD5|SHA1} Fingerprint=AB:B8:32...' to binary format.
end_comment
begin_function
DECL|function|convertDigest
specifier|static
name|QByteArray
name|convertDigest
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|input
parameter_list|)
block|{
name|QByteArray
name|result
decl_stmt|;
name|QRegExp
name|rx
argument_list|(
name|QLatin1String
argument_list|(
literal|"(?:=|:)([0-9A-Fa-f]{2})"
argument_list|)
argument_list|)
decl_stmt|;
name|int
name|pos
init|=
literal|0
decl_stmt|;
while|while
condition|(
operator|(
name|pos
operator|=
name|rx
operator|.
name|indexIn
argument_list|(
name|input
argument_list|,
name|pos
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|)
block|{
name|result
operator|.
name|append
argument_list|(
name|rx
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
operator|.
name|toLatin1
argument_list|()
argument_list|)
expr_stmt|;
name|pos
operator|+=
name|rx
operator|.
name|matchedLength
argument_list|()
expr_stmt|;
block|}
return|return
name|QByteArray
operator|::
name|fromHex
argument_list|(
name|result
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|digest
name|void
name|tst_QSslCertificate
operator|::
name|digest
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QSslSocket
operator|::
name|supportsSsl
argument_list|()
condition|)
return|return;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|absFilePath
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QSsl
operator|::
name|EncodingFormat
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|absFilePath_digest_md5
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|absFilePath_digest_sha1
argument_list|)
expr_stmt|;
name|QByteArray
name|encoded
init|=
name|readFile
argument_list|(
name|absFilePath
argument_list|)
decl_stmt|;
name|QSslCertificate
name|certificate
argument_list|(
name|encoded
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|certificate
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|absFilePath_digest_md5
operator|.
name|isEmpty
argument_list|()
condition|)
name|QCOMPARE
argument_list|(
name|convertDigest
argument_list|(
name|readFile
argument_list|(
name|absFilePath_digest_md5
argument_list|)
argument_list|)
argument_list|,
name|certificate
operator|.
name|digest
argument_list|(
name|QCryptographicHash
operator|::
name|Md5
argument_list|)
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|absFilePath_digest_sha1
operator|.
name|isEmpty
argument_list|()
condition|)
name|QCOMPARE
argument_list|(
name|convertDigest
argument_list|(
name|readFile
argument_list|(
name|absFilePath_digest_sha1
argument_list|)
argument_list|)
argument_list|,
name|certificate
operator|.
name|digest
argument_list|(
name|QCryptographicHash
operator|::
name|Sha1
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|subjectAlternativeNames_data
name|void
name|tst_QSslCertificate
operator|::
name|subjectAlternativeNames_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"certFilePath"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QSsl
operator|::
name|EncodingFormat
argument_list|>
argument_list|(
literal|"format"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"subjAltNameFilePath"
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|CertInfo
name|certInfo
decl|,
name|certInfoList
control|)
block|{
name|QString
name|certName
init|=
name|certInfo
operator|.
name|fileInfo
operator|.
name|fileName
argument_list|()
decl_stmt|;
if|if
condition|(
name|subjAltNameMap
operator|.
name|contains
argument_list|(
name|certName
argument_list|)
condition|)
name|QTest
operator|::
name|newRow
argument_list|(
name|certName
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|certInfo
operator|.
name|fileInfo
operator|.
name|absoluteFilePath
argument_list|()
operator|<<
name|certInfo
operator|.
name|format
operator|<<
name|subjAltNameMap
operator|.
name|value
argument_list|(
name|certName
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|subjectAlternativeNames
name|void
name|tst_QSslCertificate
operator|::
name|subjectAlternativeNames
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QSslSocket
operator|::
name|supportsSsl
argument_list|()
condition|)
return|return;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|certFilePath
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QSsl
operator|::
name|EncodingFormat
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|subjAltNameFilePath
argument_list|)
expr_stmt|;
name|QByteArray
name|encodedCert
init|=
name|readFile
argument_list|(
name|certFilePath
argument_list|)
decl_stmt|;
name|QSslCertificate
name|certificate
argument_list|(
name|encodedCert
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|certificate
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QByteArray
name|fileContents
init|=
name|readFile
argument_list|(
name|subjAltNameFilePath
argument_list|)
decl_stmt|;
specifier|const
name|QMultiMap
argument_list|<
name|QSsl
operator|::
name|AlternativeNameEntryType
argument_list|,
name|QString
argument_list|>
name|altSubjectNames
init|=
name|certificate
operator|.
name|subjectAlternativeNames
argument_list|()
decl_stmt|;
comment|// verify that each entry in subjAltNames is present in fileContents
name|QMapIterator
argument_list|<
name|QSsl
operator|::
name|AlternativeNameEntryType
argument_list|,
name|QString
argument_list|>
name|it
argument_list|(
name|altSubjectNames
argument_list|)
decl_stmt|;
while|while
condition|(
name|it
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|it
operator|.
name|next
argument_list|()
expr_stmt|;
name|QString
name|type
decl_stmt|;
if|if
condition|(
name|it
operator|.
name|key
argument_list|()
operator|==
name|QSsl
operator|::
name|EmailEntry
condition|)
name|type
operator|=
name|QLatin1String
argument_list|(
literal|"email"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|it
operator|.
name|key
argument_list|()
operator|==
name|QSsl
operator|::
name|DnsEntry
condition|)
name|type
operator|=
name|QLatin1String
argument_list|(
literal|"DNS"
argument_list|)
expr_stmt|;
else|else
name|QFAIL
argument_list|(
literal|"unsupported alternative name type"
argument_list|)
expr_stmt|;
name|QString
name|entry
init|=
name|QString
argument_list|(
literal|"%1:%2"
argument_list|)
operator|.
name|arg
argument_list|(
name|type
argument_list|)
operator|.
name|arg
argument_list|(
name|it
operator|.
name|value
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|fileContents
operator|.
name|contains
argument_list|(
name|entry
operator|.
name|toLatin1
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// verify that each entry in fileContents is present in subjAltNames
name|QRegExp
name|rx
argument_list|(
name|QLatin1String
argument_list|(
literal|"(email|DNS):([^,\\r\\n]+)"
argument_list|)
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|pos
init|=
literal|0
init|;
operator|(
name|pos
operator|=
name|rx
operator|.
name|indexIn
argument_list|(
name|fileContents
argument_list|,
name|pos
argument_list|)
operator|)
operator|!=
operator|-
literal|1
condition|;
name|pos
operator|+=
name|rx
operator|.
name|matchedLength
argument_list|()
control|)
block|{
name|QSsl
operator|::
name|AlternativeNameEntryType
name|key
decl_stmt|;
if|if
condition|(
name|rx
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
operator|==
name|QLatin1String
argument_list|(
literal|"email"
argument_list|)
condition|)
name|key
operator|=
name|QSsl
operator|::
name|EmailEntry
expr_stmt|;
elseif|else
if|if
condition|(
name|rx
operator|.
name|cap
argument_list|(
literal|1
argument_list|)
operator|==
name|QLatin1String
argument_list|(
literal|"DNS"
argument_list|)
condition|)
name|key
operator|=
name|QSsl
operator|::
name|DnsEntry
expr_stmt|;
else|else
name|QFAIL
argument_list|(
literal|"unsupported alternative name type"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|altSubjectNames
operator|.
name|contains
argument_list|(
name|key
argument_list|,
name|rx
operator|.
name|cap
argument_list|(
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|utf8SubjectNames
name|void
name|tst_QSslCertificate
operator|::
name|utf8SubjectNames
parameter_list|()
block|{
name|QSslCertificate
name|cert
init|=
name|QSslCertificate
operator|::
name|fromPath
argument_list|(
literal|"certificates/cert-ss-san-utf8.pem"
argument_list|,
name|QSsl
operator|::
name|Pem
argument_list|,
name|QRegExp
operator|::
name|FixedString
argument_list|)
operator|.
name|first
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cert
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
comment|// O is "Heavy Metal Records" with heavy use of "decorations" like accents, umlauts etc.,
comment|// OU uses arabian / asian script letters near codepoint 64K.
comment|// strings split where the compiler would otherwise find three-digit hex numbers
specifier|static
specifier|const
name|char
modifier|*
name|o
init|=
literal|"H\xc4\x95\xc4\x82\xc6\xb2\xc3\xbf \xca\x8d\xe1\xba\xbf\xca\x88\xe1\xba"
literal|"\xb7\xe1\xb8\xbb R\xc3\xa9"
literal|"c"
literal|"\xc3\xb6rd\xc5\x9d"
decl_stmt|;
specifier|static
specifier|const
name|char
modifier|*
name|ou
init|=
literal|"\xe3\x88\xa7"
literal|"A"
literal|"\xe3\x89\x81\xef\xbd\xab"
literal|"BC"
decl_stmt|;
comment|// the following two tests should help find "\x"-literal encoding bugs in the test itself
name|QCOMPARE
argument_list|(
name|cert
operator|.
name|subjectInfo
argument_list|(
literal|"O"
argument_list|)
index|[
literal|0
index|]
operator|.
name|length
argument_list|()
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
name|o
argument_list|)
operator|.
name|length
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert
operator|.
name|subjectInfo
argument_list|(
literal|"O"
argument_list|)
index|[
literal|0
index|]
operator|.
name|toUtf8
argument_list|()
operator|.
name|toHex
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
name|o
argument_list|)
operator|.
name|toHex
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert
operator|.
name|subjectInfo
argument_list|(
literal|"O"
argument_list|)
index|[
literal|0
index|]
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
name|o
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert
operator|.
name|subjectInfo
argument_list|(
literal|"OU"
argument_list|)
index|[
literal|0
index|]
argument_list|,
name|QString
operator|::
name|fromUtf8
argument_list|(
name|ou
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|publicKey_data
name|void
name|tst_QSslCertificate
operator|::
name|publicKey_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"certFilePath"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QSsl
operator|::
name|EncodingFormat
argument_list|>
argument_list|(
literal|"format"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"pubkeyFilePath"
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|CertInfo
name|certInfo
decl|,
name|certInfoList
control|)
block|{
name|QString
name|certName
init|=
name|certInfo
operator|.
name|fileInfo
operator|.
name|fileName
argument_list|()
decl_stmt|;
if|if
condition|(
name|pubkeyMap
operator|.
name|contains
argument_list|(
name|certName
argument_list|)
condition|)
name|QTest
operator|::
name|newRow
argument_list|(
name|certName
operator|.
name|toLatin1
argument_list|()
argument_list|)
operator|<<
name|certInfo
operator|.
name|fileInfo
operator|.
name|absoluteFilePath
argument_list|()
operator|<<
name|certInfo
operator|.
name|format
operator|<<
name|pubkeyMap
operator|.
name|value
argument_list|(
name|certName
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|publicKey
name|void
name|tst_QSslCertificate
operator|::
name|publicKey
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QSslSocket
operator|::
name|supportsSsl
argument_list|()
condition|)
return|return;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|certFilePath
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QSsl
operator|::
name|EncodingFormat
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|pubkeyFilePath
argument_list|)
expr_stmt|;
name|QByteArray
name|encodedCert
init|=
name|readFile
argument_list|(
name|certFilePath
argument_list|)
decl_stmt|;
name|QSslCertificate
name|certificate
argument_list|(
name|encodedCert
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|certificate
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QByteArray
name|encodedPubkey
init|=
name|readFile
argument_list|(
name|pubkeyFilePath
argument_list|)
decl_stmt|;
name|QSslKey
name|pubkey
argument_list|(
name|encodedPubkey
argument_list|,
name|QSsl
operator|::
name|Rsa
argument_list|,
name|format
argument_list|,
name|QSsl
operator|::
name|PublicKey
argument_list|)
decl_stmt|;
comment|// ### support DSA as well!
name|QVERIFY
argument_list|(
operator|!
name|pubkey
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|certificate
operator|.
name|publicKey
argument_list|()
argument_list|,
name|pubkey
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|toPemOrDer_data
name|void
name|tst_QSslCertificate
operator|::
name|toPemOrDer_data
parameter_list|()
block|{
name|createTestRows
argument_list|()
expr_stmt|;
block|}
end_function
begin_decl_stmt
DECL|variable|BeginCertString
specifier|static
specifier|const
name|char
name|BeginCertString
index|[]
init|=
literal|"-----BEGIN CERTIFICATE-----"
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|EndCertString
specifier|static
specifier|const
name|char
name|EndCertString
index|[]
init|=
literal|"-----END CERTIFICATE-----"
decl_stmt|;
end_decl_stmt
begin_comment
comment|// Returns, in Pem-format, the first certificate found in a Pem-formatted block
end_comment
begin_comment
comment|// (Note that such a block may contain e.g. a private key at the end).
end_comment
begin_function
DECL|function|firstPemCertificateFromPem
specifier|static
name|QByteArray
name|firstPemCertificateFromPem
parameter_list|(
specifier|const
name|QByteArray
modifier|&
name|pem
parameter_list|)
block|{
name|int
name|startPos
init|=
name|pem
operator|.
name|indexOf
argument_list|(
name|BeginCertString
argument_list|)
decl_stmt|;
name|int
name|endPos
init|=
name|pem
operator|.
name|indexOf
argument_list|(
name|EndCertString
argument_list|)
decl_stmt|;
if|if
condition|(
name|startPos
operator|==
operator|-
literal|1
operator|||
name|endPos
operator|==
operator|-
literal|1
condition|)
return|return
name|QByteArray
argument_list|()
return|;
return|return
name|pem
operator|.
name|mid
argument_list|(
name|startPos
argument_list|,
name|endPos
operator|+
sizeof|sizeof
argument_list|(
name|EndCertString
argument_list|)
operator|-
name|startPos
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|toPemOrDer
name|void
name|tst_QSslCertificate
operator|::
name|toPemOrDer
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QSslSocket
operator|::
name|supportsSsl
argument_list|()
condition|)
return|return;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|absFilePath
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QSsl
operator|::
name|EncodingFormat
argument_list|,
name|format
argument_list|)
expr_stmt|;
name|QByteArray
name|encoded
init|=
name|readFile
argument_list|(
name|absFilePath
argument_list|)
decl_stmt|;
name|QSslCertificate
name|certificate
argument_list|(
name|encoded
argument_list|,
name|format
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|certificate
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
if|if
condition|(
name|format
operator|==
name|QSsl
operator|::
name|Pem
condition|)
block|{
name|encoded
operator|.
name|replace
argument_list|(
literal|'\r'
argument_list|,
literal|""
argument_list|)
expr_stmt|;
name|QByteArray
name|firstPem
init|=
name|firstPemCertificateFromPem
argument_list|(
name|encoded
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|certificate
operator|.
name|toPem
argument_list|()
argument_list|,
name|firstPem
argument_list|)
expr_stmt|;
block|}
else|else
block|{
comment|// ### for now, we assume that DER-encoded certificates don't contain bundled stuff
name|QCOMPARE
argument_list|(
name|certificate
operator|.
name|toDer
argument_list|()
argument_list|,
name|encoded
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|fromDevice
name|void
name|tst_QSslCertificate
operator|::
name|fromDevice
parameter_list|()
block|{
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QSslCertificate::fromDevice: cannot read from a null device"
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
name|certs
init|=
name|QSslCertificate
operator|::
name|fromDevice
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// don't crash
name|QVERIFY
argument_list|(
name|certs
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fromPath_data
name|void
name|tst_QSslCertificate
operator|::
name|fromPath_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"path"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"syntax"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"pemencoding"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"numCerts"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty fixed pem"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|FixedString
argument_list|)
operator|<<
literal|true
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty fixed der"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|FixedString
argument_list|)
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty regexp pem"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|RegExp
argument_list|)
operator|<<
literal|true
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty regexp der"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|RegExp
argument_list|)
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty wildcard pem"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|Wildcard
argument_list|)
operator|<<
literal|true
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty wildcard der"
argument_list|)
operator|<<
name|QString
argument_list|()
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|Wildcard
argument_list|)
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"certificates\" fixed pem"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"certificates"
argument_list|)
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|FixedString
argument_list|)
operator|<<
literal|true
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"certificates\" fixed der"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"certificates"
argument_list|)
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|FixedString
argument_list|)
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"certificates\" regexp pem"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"certificates"
argument_list|)
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|RegExp
argument_list|)
operator|<<
literal|true
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"certificates\" regexp der"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"certificates"
argument_list|)
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|RegExp
argument_list|)
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"certificates\" wildcard pem"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"certificates"
argument_list|)
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|Wildcard
argument_list|)
operator|<<
literal|true
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"certificates\" wildcard der"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"certificates"
argument_list|)
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|Wildcard
argument_list|)
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"certificates/cert.pem\" fixed pem"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"certificates/cert.pem"
argument_list|)
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|FixedString
argument_list|)
operator|<<
literal|true
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"certificates/cert.pem\" fixed der"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"certificates/cert.pem"
argument_list|)
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|FixedString
argument_list|)
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"certificates/cert.pem\" regexp pem"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"certificates/cert.pem"
argument_list|)
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|RegExp
argument_list|)
operator|<<
literal|true
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"certificates/cert.pem\" regexp der"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"certificates/cert.pem"
argument_list|)
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|RegExp
argument_list|)
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"certificates/cert.pem\" wildcard pem"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"certificates/cert.pem"
argument_list|)
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|Wildcard
argument_list|)
operator|<<
literal|true
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"certificates/cert.pem\" wildcard der"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"certificates/cert.pem"
argument_list|)
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|Wildcard
argument_list|)
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"certificates/*\" fixed pem"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"certificates/*"
argument_list|)
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|FixedString
argument_list|)
operator|<<
literal|true
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"certificates/*\" fixed der"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"certificates/*"
argument_list|)
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|FixedString
argument_list|)
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"certificates/*\" regexp pem"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"certificates/*"
argument_list|)
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|RegExp
argument_list|)
operator|<<
literal|true
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"certificates/*\" regexp der"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"certificates/*"
argument_list|)
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|RegExp
argument_list|)
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"certificates/*\" wildcard pem"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"certificates/*"
argument_list|)
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|Wildcard
argument_list|)
operator|<<
literal|true
operator|<<
literal|5
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"certificates/*\" wildcard der"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"certificates/*"
argument_list|)
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|Wildcard
argument_list|)
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"c*/c*.pem\" fixed pem"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"c*/c*.pem"
argument_list|)
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|FixedString
argument_list|)
operator|<<
literal|true
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"c*/c*.pem\" fixed der"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"c*/c*.pem"
argument_list|)
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|FixedString
argument_list|)
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"c*/c*.pem\" regexp pem"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"c*/c*.pem"
argument_list|)
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|RegExp
argument_list|)
operator|<<
literal|true
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"c*/c*.pem\" regexp der"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"c*/c*.pem"
argument_list|)
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|RegExp
argument_list|)
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"c*/c*.pem\" wildcard pem"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"c*/c*.pem"
argument_list|)
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|Wildcard
argument_list|)
operator|<<
literal|true
operator|<<
literal|5
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"c*/c*.pem\" wildcard der"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"c*/c*.pem"
argument_list|)
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|Wildcard
argument_list|)
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"d*/c*.pem\" fixed pem"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"d*/c*.pem"
argument_list|)
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|FixedString
argument_list|)
operator|<<
literal|true
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"d*/c*.pem\" fixed der"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"d*/c*.pem"
argument_list|)
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|FixedString
argument_list|)
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"d*/c*.pem\" regexp pem"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"d*/c*.pem"
argument_list|)
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|RegExp
argument_list|)
operator|<<
literal|true
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"d*/c*.pem\" regexp der"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"d*/c*.pem"
argument_list|)
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|RegExp
argument_list|)
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"d*/c*.pem\" wildcard pem"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"d*/c*.pem"
argument_list|)
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|Wildcard
argument_list|)
operator|<<
literal|true
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"d*/c*.pem\" wildcard der"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"d*/c*.pem"
argument_list|)
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|Wildcard
argument_list|)
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"c.*/c.*.pem\" fixed pem"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"c.*/c.*.pem"
argument_list|)
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|FixedString
argument_list|)
operator|<<
literal|true
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"c.*/c.*.pem\" fixed der"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"c.*/c.*.pem"
argument_list|)
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|FixedString
argument_list|)
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"c.*/c.*.pem\" regexp pem"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"c.*/c.*.pem"
argument_list|)
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|RegExp
argument_list|)
operator|<<
literal|true
operator|<<
literal|5
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"c.*/c.*.pem\" regexp der"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"c.*/c.*.pem"
argument_list|)
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|RegExp
argument_list|)
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"c.*/c.*.pem\" wildcard pem"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"c.*/c.*.pem"
argument_list|)
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|Wildcard
argument_list|)
operator|<<
literal|true
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"c.*/c.*.pem\" wildcard der"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"c.*/c.*.pem"
argument_list|)
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|Wildcard
argument_list|)
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"d.*/c.*.pem\" fixed pem"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"d.*/c.*.pem"
argument_list|)
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|FixedString
argument_list|)
operator|<<
literal|true
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"d.*/c.*.pem\" fixed der"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"d.*/c.*.pem"
argument_list|)
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|FixedString
argument_list|)
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"d.*/c.*.pem\" regexp pem"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"d.*/c.*.pem"
argument_list|)
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|RegExp
argument_list|)
operator|<<
literal|true
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"d.*/c.*.pem\" regexp der"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"d.*/c.*.pem"
argument_list|)
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|RegExp
argument_list|)
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"d.*/c.*.pem\" wildcard pem"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"d.*/c.*.pem"
argument_list|)
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|Wildcard
argument_list|)
operator|<<
literal|true
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"\"d.*/c.*.pem\" wildcard der"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"d.*/c.*.pem"
argument_list|)
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|Wildcard
argument_list|)
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_OS_LINUX
name|QTest
operator|::
name|newRow
argument_list|(
literal|"absolute path wildcard pem"
argument_list|)
operator|<<
operator|(
name|testDataDir
operator|+
literal|"/certificates/*.pem"
operator|)
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|Wildcard
argument_list|)
operator|<<
literal|true
operator|<<
literal|5
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"trailing-whitespace"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"more-certificates/trailing-whitespace.pem"
argument_list|)
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|FixedString
argument_list|)
operator|<<
literal|true
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-ending-newline"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"more-certificates/no-ending-newline.pem"
argument_list|)
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|FixedString
argument_list|)
operator|<<
literal|true
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"malformed-just-begin"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"more-certificates/malformed-just-begin.pem"
argument_list|)
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|FixedString
argument_list|)
operator|<<
literal|true
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"malformed-just-begin-no-newline"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"more-certificates/malformed-just-begin-no-newline.pem"
argument_list|)
operator|<<
name|int
argument_list|(
name|QRegExp
operator|::
name|FixedString
argument_list|)
operator|<<
literal|true
operator|<<
literal|0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|fromPath
name|void
name|tst_QSslCertificate
operator|::
name|fromPath
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|path
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|syntax
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|pemencoding
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|numCerts
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QSslCertificate
operator|::
name|fromPath
argument_list|(
name|path
argument_list|,
name|pemencoding
condition|?
name|QSsl
operator|::
name|Pem
else|:
name|QSsl
operator|::
name|Der
argument_list|,
name|QRegExp
operator|::
name|PatternSyntax
argument_list|(
name|syntax
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|numCerts
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|certInfo
name|void
name|tst_QSslCertificate
operator|::
name|certInfo
parameter_list|()
block|{
comment|// MD5 Fingerprint=B6:CF:57:34:DA:A9:73:21:82:F7:CF:4D:3D:85:31:88
comment|// SHA1 Fingerprint=B6:D1:51:82:E0:29:CA:59:96:38:BD:B6:F9:40:05:91:6D:49:09:60
comment|// Certificate:
comment|//     Data:
comment|//         Version: 1 (0x0)
comment|//         Serial Number: 17 (0x11)
comment|//         Signature Algorithm: sha1WithRSAEncryption
comment|//         Issuer: C=AU, ST=Queensland, O=CryptSoft Pty Ltd, CN=Test CA (1024 bit)
comment|//         Validity
comment|//             Not Before: Apr 17 07:40:26 2007 GMT
comment|//             Not After : May 17 07:40:26 2007 GMT
comment|//         Subject: CN=name/with/slashes, C=NO
comment|//         Subject Public Key Info:
comment|//             Public Key Algorithm: rsaEncryption
comment|//             RSA Public Key: (1024 bit)
comment|//                 Modulus (1024 bit):
comment|//                     00:eb:9d:e9:03:ac:30:4f:a9:58:03:44:c7:18:26:
comment|//                     2f:48:93:d5:ac:a0:fb:e8:53:c4:7b:2a:01:89:e6:
comment|//                     fc:5a:0c:c5:f5:21:f8:d7:4a:92:02:67:db:f1:9f:
comment|//                     36:9a:62:9d:f3:ce:48:8e:ba:ed:5a:a8:9d:4f:bb:
comment|//                     24:16:43:4c:b5:79:08:f6:d9:22:8f:5f:15:0a:43:
comment|//                     25:03:7a:9d:a7:af:e3:26:b1:53:55:5e:60:57:c8:
comment|//                     ed:2f:1c:f3:36:0a:78:64:91:f9:17:a7:34:d7:8b:
comment|//                     bd:f1:fc:d1:8c:4f:a5:96:75:b2:7b:fc:21:f0:c7:
comment|//                     d9:5f:0c:57:18:b2:af:b9:4b
comment|//                 Exponent: 65537 (0x10001)
comment|//     Signature Algorithm: sha1WithRSAEncryption
comment|//         95:e6:94:e2:98:33:57:a2:98:fa:af:50:b9:76:a9:51:83:2c:
comment|//         0b:61:a2:36:d0:e6:90:6d:e4:f8:c4:c7:50:ef:17:94:4e:21:
comment|//         a8:fa:c8:33:aa:d1:7f:bc:ca:41:d6:7d:e7:44:76:c0:bf:45:
comment|//         4a:76:25:42:6d:53:76:fd:fc:74:29:1a:ea:2b:cc:06:ab:d1:
comment|//         b8:eb:7d:6b:11:f7:9b:41:bb:9f:31:cb:ed:4d:f3:68:26:ed:
comment|//         13:1d:f2:56:59:fe:6f:7c:98:b6:25:69:4e:ea:b4:dc:c2:eb:
comment|//         b7:bb:50:18:05:ba:ad:af:08:49:fe:98:63:55:ba:e7:fb:95:
comment|//         5d:91
specifier|static
specifier|const
name|char
name|pem
index|[]
init|=
literal|"-----BEGIN CERTIFICATE-----\n"
literal|"MIIB8zCCAVwCAREwDQYJKoZIhvcNAQEFBQAwWzELMAkGA1UEBhMCQVUxEzARBgNV\n"
literal|"BAgTClF1ZWVuc2xhbmQxGjAYBgNVBAoTEUNyeXB0U29mdCBQdHkgTHRkMRswGQYD\n"
literal|"VQQDExJUZXN0IENBICgxMDI0IGJpdCkwHhcNMDcwNDE3MDc0MDI2WhcNMDcwNTE3\n"
literal|"MDc0MDI2WjApMRowGAYDVQQDExFuYW1lL3dpdGgvc2xhc2hlczELMAkGA1UEBhMC\n"
literal|"Tk8wgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBAOud6QOsME+pWANExxgmL0iT\n"
literal|"1ayg++hTxHsqAYnm/FoMxfUh+NdKkgJn2/GfNppinfPOSI667VqonU+7JBZDTLV5\n"
literal|"CPbZIo9fFQpDJQN6naev4yaxU1VeYFfI7S8c8zYKeGSR+RenNNeLvfH80YxPpZZ1\n"
literal|"snv8IfDH2V8MVxiyr7lLAgMBAAEwDQYJKoZIhvcNAQEFBQADgYEAleaU4pgzV6KY\n"
literal|"+q9QuXapUYMsC2GiNtDmkG3k+MTHUO8XlE4hqPrIM6rRf7zKQdZ950R2wL9FSnYl\n"
literal|"Qm1Tdv38dCka6ivMBqvRuOt9axH3m0G7nzHL7U3zaCbtEx3yVln+b3yYtiVpTuq0\n"
literal|"3MLrt7tQGAW6ra8ISf6YY1W65/uVXZE=\n"
literal|"-----END CERTIFICATE-----\n"
decl_stmt|;
specifier|static
specifier|const
name|char
name|der
index|[]
init|=
comment|// hex encoded
literal|"30:82:01:f3:30:82:01:5c:02:01:11:30:0d:06:09:2a"
literal|"86:48:86:f7:0d:01:01:05:05:00:30:5b:31:0b:30:09"
literal|"06:03:55:04:06:13:02:41:55:31:13:30:11:06:03:55"
literal|"04:08:13:0a:51:75:65:65:6e:73:6c:61:6e:64:31:1a"
literal|"30:18:06:03:55:04:0a:13:11:43:72:79:70:74:53:6f"
literal|"66:74:20:50:74:79:20:4c:74:64:31:1b:30:19:06:03"
literal|"55:04:03:13:12:54:65:73:74:20:43:41:20:28:31:30"
literal|"32:34:20:62:69:74:29:30:1e:17:0d:30:37:30:34:31"
literal|"37:30:37:34:30:32:36:5a:17:0d:30:37:30:35:31:37"
literal|"30:37:34:30:32:36:5a:30:29:31:1a:30:18:06:03:55"
literal|"04:03:13:11:6e:61:6d:65:2f:77:69:74:68:2f:73:6c"
literal|"61:73:68:65:73:31:0b:30:09:06:03:55:04:06:13:02"
literal|"4e:4f:30:81:9f:30:0d:06:09:2a:86:48:86:f7:0d:01"
literal|"01:01:05:00:03:81:8d:00:30:81:89:02:81:81:00:eb"
literal|"9d:e9:03:ac:30:4f:a9:58:03:44:c7:18:26:2f:48:93"
literal|"d5:ac:a0:fb:e8:53:c4:7b:2a:01:89:e6:fc:5a:0c:c5"
literal|"f5:21:f8:d7:4a:92:02:67:db:f1:9f:36:9a:62:9d:f3"
literal|"ce:48:8e:ba:ed:5a:a8:9d:4f:bb:24:16:43:4c:b5:79"
literal|"08:f6:d9:22:8f:5f:15:0a:43:25:03:7a:9d:a7:af:e3"
literal|"26:b1:53:55:5e:60:57:c8:ed:2f:1c:f3:36:0a:78:64"
literal|"91:f9:17:a7:34:d7:8b:bd:f1:fc:d1:8c:4f:a5:96:75"
literal|"b2:7b:fc:21:f0:c7:d9:5f:0c:57:18:b2:af:b9:4b:02"
literal|"03:01:00:01:30:0d:06:09:2a:86:48:86:f7:0d:01:01"
literal|"05:05:00:03:81:81:00:95:e6:94:e2:98:33:57:a2:98"
literal|"fa:af:50:b9:76:a9:51:83:2c:0b:61:a2:36:d0:e6:90"
literal|"6d:e4:f8:c4:c7:50:ef:17:94:4e:21:a8:fa:c8:33:aa"
literal|"d1:7f:bc:ca:41:d6:7d:e7:44:76:c0:bf:45:4a:76:25"
literal|"42:6d:53:76:fd:fc:74:29:1a:ea:2b:cc:06:ab:d1:b8"
literal|"eb:7d:6b:11:f7:9b:41:bb:9f:31:cb:ed:4d:f3:68:26"
literal|"ed:13:1d:f2:56:59:fe:6f:7c:98:b6:25:69:4e:ea:b4"
literal|"dc:c2:eb:b7:bb:50:18:05:ba:ad:af:08:49:fe:98:63"
literal|"55:ba:e7:fb:95:5d:91"
decl_stmt|;
name|QSslCertificate
name|cert
init|=
name|QSslCertificate
operator|::
name|fromPath
argument_list|(
literal|"certificates/cert.pem"
argument_list|,
name|QSsl
operator|::
name|Pem
argument_list|,
name|QRegExp
operator|::
name|FixedString
argument_list|)
operator|.
name|first
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cert
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert
operator|.
name|issuerInfo
argument_list|(
name|QSslCertificate
operator|::
name|Organization
argument_list|)
index|[
literal|0
index|]
argument_list|,
name|QString
argument_list|(
literal|"CryptSoft Pty Ltd"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert
operator|.
name|issuerInfo
argument_list|(
name|QSslCertificate
operator|::
name|CommonName
argument_list|)
index|[
literal|0
index|]
argument_list|,
name|QString
argument_list|(
literal|"Test CA (1024 bit)"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert
operator|.
name|issuerInfo
argument_list|(
name|QSslCertificate
operator|::
name|LocalityName
argument_list|)
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert
operator|.
name|issuerInfo
argument_list|(
name|QSslCertificate
operator|::
name|OrganizationalUnitName
argument_list|)
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert
operator|.
name|issuerInfo
argument_list|(
name|QSslCertificate
operator|::
name|CountryName
argument_list|)
index|[
literal|0
index|]
argument_list|,
name|QString
argument_list|(
literal|"AU"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert
operator|.
name|issuerInfo
argument_list|(
name|QSslCertificate
operator|::
name|StateOrProvinceName
argument_list|)
index|[
literal|0
index|]
argument_list|,
name|QString
argument_list|(
literal|"Queensland"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert
operator|.
name|issuerInfo
argument_list|(
literal|"O"
argument_list|)
index|[
literal|0
index|]
argument_list|,
name|QString
argument_list|(
literal|"CryptSoft Pty Ltd"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert
operator|.
name|issuerInfo
argument_list|(
literal|"CN"
argument_list|)
index|[
literal|0
index|]
argument_list|,
name|QString
argument_list|(
literal|"Test CA (1024 bit)"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert
operator|.
name|issuerInfo
argument_list|(
literal|"L"
argument_list|)
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert
operator|.
name|issuerInfo
argument_list|(
literal|"OU"
argument_list|)
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert
operator|.
name|issuerInfo
argument_list|(
literal|"C"
argument_list|)
index|[
literal|0
index|]
argument_list|,
name|QString
argument_list|(
literal|"AU"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert
operator|.
name|issuerInfo
argument_list|(
literal|"ST"
argument_list|)
index|[
literal|0
index|]
argument_list|,
name|QString
argument_list|(
literal|"Queensland"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert
operator|.
name|subjectInfo
argument_list|(
name|QSslCertificate
operator|::
name|Organization
argument_list|)
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert
operator|.
name|subjectInfo
argument_list|(
name|QSslCertificate
operator|::
name|CommonName
argument_list|)
index|[
literal|0
index|]
argument_list|,
name|QString
argument_list|(
literal|"name/with/slashes"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert
operator|.
name|subjectInfo
argument_list|(
name|QSslCertificate
operator|::
name|LocalityName
argument_list|)
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert
operator|.
name|subjectInfo
argument_list|(
name|QSslCertificate
operator|::
name|OrganizationalUnitName
argument_list|)
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert
operator|.
name|subjectInfo
argument_list|(
name|QSslCertificate
operator|::
name|CountryName
argument_list|)
index|[
literal|0
index|]
argument_list|,
name|QString
argument_list|(
literal|"NO"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert
operator|.
name|subjectInfo
argument_list|(
name|QSslCertificate
operator|::
name|StateOrProvinceName
argument_list|)
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert
operator|.
name|subjectInfo
argument_list|(
literal|"O"
argument_list|)
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert
operator|.
name|subjectInfo
argument_list|(
literal|"CN"
argument_list|)
index|[
literal|0
index|]
argument_list|,
name|QString
argument_list|(
literal|"name/with/slashes"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert
operator|.
name|subjectInfo
argument_list|(
literal|"L"
argument_list|)
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert
operator|.
name|subjectInfo
argument_list|(
literal|"OU"
argument_list|)
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert
operator|.
name|subjectInfo
argument_list|(
literal|"C"
argument_list|)
index|[
literal|0
index|]
argument_list|,
name|QString
argument_list|(
literal|"NO"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert
operator|.
name|subjectInfo
argument_list|(
literal|"ST"
argument_list|)
argument_list|,
name|QStringList
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert
operator|.
name|version
argument_list|()
argument_list|,
name|QByteArray
operator|::
name|number
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert
operator|.
name|serialNumber
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"11"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert
operator|.
name|toPem
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|,
operator|(
specifier|const
name|char
operator|*
operator|)
name|pem
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert
operator|.
name|toDer
argument_list|()
argument_list|,
name|QByteArray
operator|::
name|fromHex
argument_list|(
name|der
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert
operator|.
name|digest
argument_list|(
name|QCryptographicHash
operator|::
name|Md5
argument_list|)
argument_list|,
name|QByteArray
operator|::
name|fromHex
argument_list|(
literal|"B6:CF:57:34:DA:A9:73:21:82:F7:CF:4D:3D:85:31:88"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert
operator|.
name|digest
argument_list|(
name|QCryptographicHash
operator|::
name|Sha1
argument_list|)
argument_list|,
name|QByteArray
operator|::
name|fromHex
argument_list|(
literal|"B6:D1:51:82:E0:29:CA:59:96:38:BD:B6:F9:40:05:91:6D:49:09:60"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert
operator|.
name|effectiveDate
argument_list|()
operator|.
name|toUTC
argument_list|()
argument_list|,
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2007
argument_list|,
literal|4
argument_list|,
literal|17
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|7
argument_list|,
literal|40
argument_list|,
literal|26
argument_list|)
argument_list|,
name|Qt
operator|::
name|UTC
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert
operator|.
name|expiryDate
argument_list|()
operator|.
name|toUTC
argument_list|()
argument_list|,
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2007
argument_list|,
literal|5
argument_list|,
literal|17
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|7
argument_list|,
literal|40
argument_list|,
literal|26
argument_list|)
argument_list|,
name|Qt
operator|::
name|UTC
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cert
operator|.
name|expiryDate
argument_list|()
operator|<
name|QDateTime
operator|::
name|currentDateTime
argument_list|()
argument_list|)
expr_stmt|;
comment|// cert has expired
name|QSslCertificate
name|copy
init|=
name|cert
decl_stmt|;
name|QVERIFY
argument_list|(
name|cert
operator|==
name|copy
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
operator|(
name|cert
operator|!=
name|copy
operator|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert
argument_list|,
name|QSslCertificate
argument_list|(
name|pem
argument_list|,
name|QSsl
operator|::
name|Pem
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert
argument_list|,
name|QSslCertificate
argument_list|(
name|QByteArray
operator|::
name|fromHex
argument_list|(
name|der
argument_list|)
argument_list|,
name|QSsl
operator|::
name|Der
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|certInfoQByteArray
name|void
name|tst_QSslCertificate
operator|::
name|certInfoQByteArray
parameter_list|()
block|{
name|QSslCertificate
name|cert
init|=
name|QSslCertificate
operator|::
name|fromPath
argument_list|(
literal|"certificates/cert.pem"
argument_list|,
name|QSsl
operator|::
name|Pem
argument_list|,
name|QRegExp
operator|::
name|FixedString
argument_list|)
operator|.
name|first
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cert
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
comment|// in this test, check the bytearray variants before the enum variants to see if
comment|// we fixed a bug we had with lazy initialization of the values.
name|QCOMPARE
argument_list|(
name|cert
operator|.
name|issuerInfo
argument_list|(
literal|"CN"
argument_list|)
index|[
literal|0
index|]
argument_list|,
name|QString
argument_list|(
literal|"Test CA (1024 bit)"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert
operator|.
name|subjectInfo
argument_list|(
literal|"CN"
argument_list|)
index|[
literal|0
index|]
argument_list|,
name|QString
argument_list|(
literal|"name/with/slashes"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|task256066toPem
name|void
name|tst_QSslCertificate
operator|::
name|task256066toPem
parameter_list|()
block|{
comment|// a certificate whose PEM encoding's length is a multiple of 64
specifier|const
name|char
modifier|*
name|mycert
init|=
literal|"-----BEGIN CERTIFICATE-----\n"
expr|\
literal|"MIIEGjCCAwKgAwIBAgIESikYSjANBgkqhkiG9w0BAQUFADBbMQswCQYDVQQGEwJF\n"
expr|\
literal|"RTEiMCAGA1UEChMZQVMgU2VydGlmaXRzZWVyaW1pc2tlc2t1czEPMA0GA1UECxMG\n"
expr|\
literal|"RVNURUlEMRcwFQYDVQQDEw5FU1RFSUQtU0sgMjAwNzAeFw0wOTA2MDUxMzA2MTha\n"
expr|\
literal|"Fw0xNDA2MDkyMTAwMDBaMIGRMQswCQYDVQQGEwJFRTEPMA0GA1UEChMGRVNURUlE\n"
expr|\
literal|"MRcwFQYDVQQLEw5hdXRoZW50aWNhdGlvbjEhMB8GA1UEAxMYSEVJQkVSRyxTVkVO\n"
expr|\
literal|"LDM3NzA5MjcwMjg1MRAwDgYDVQQEEwdIRUlCRVJHMQ0wCwYDVQQqEwRTVkVOMRQw\n"
expr|\
literal|"EgYDVQQFEwszNzcwOTI3MDI4NTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA\n"
expr|\
literal|"k2Euwhm34vu1jOFp02J5fQRx9LW2C7x78CbJ7yInoAKn7QR8UdxTU7mJk90Opejo\n"
expr|\
literal|"71RUi2/aYl4jCr9gr99v2YoLufMRwAuqdmwmwqH1WAHRUtIcD0oPdKyelmmn9ig0\n"
expr|\
literal|"RV+yJLNT3dnyrwPw+uuzDe3DeKepGKE4lxexliCaAx0CAyCMW6OCATEwggEtMA4G\n"
expr|\
literal|"A1UdDwEB/wQEAwIEsDAdBgNVHSUEFjAUBggrBgEFBQcDAgYIKwYBBQUHAwQwPAYD\n"
expr|\
literal|"VR0fBDUwMzAxoC+gLYYraHR0cDovL3d3dy5zay5lZS9jcmxzL2VzdGVpZC9lc3Rl\n"
expr|\
literal|"aWQyMDA3LmNybDAgBgNVHREEGTAXgRVzdmVuLmhlaWJlcmdAZWVzdGkuZWUwUQYD\n"
expr|\
literal|"VR0gBEowSDBGBgsrBgEEAc4fAQEBATA3MBIGCCsGAQUFBwICMAYaBG5vbmUwIQYI\n"
expr|\
literal|"KwYBBQUHAgEWFWh0dHA6Ly93d3cuc2suZWUvY3BzLzAfBgNVHSMEGDAWgBRIBt6+\n"
expr|\
literal|"jIdXlYB4Y/qcIysroDoYdTAdBgNVHQ4EFgQUKCjpDf+LcvL6AH0QOiW6rMTtB/0w\n"
expr|\
literal|"CQYDVR0TBAIwADANBgkqhkiG9w0BAQUFAAOCAQEABRyRuUm9zt8V27WuNeXtCDmU\n"
expr|\
literal|"MGzA6g4QXNAd2nxFzT3k+kNzzQTOcgRdmjiEPuK49On+GWnBr/5MSBNhbCJVPWr/\n"
expr|\
literal|"yym1UYTBisaqhRt/N/kwZqd0bHeLJk+ZxSePXRyqkp9H8KPWqz7H+O/FxRS4ffxo\n"
expr|\
literal|"Q9Clem+e0bcjNlL5xXiRGycBeZq8cKj+0+A/UuattznQlvHdlCEsSeu1fPOORqFV\n"
expr|\
literal|"fZur4HC31lQD7xVvETLiL83CtOQC78+29XPD6Zlrrc5OF2yibSVParY19b8Zh6yu\n"
expr|\
literal|"p1dNvN8pBgXGrsyxRonwHooV2ghGNmGILkpdvlQfnxeCUg4erfHjDdSY9vmT7w==\n"
expr|\
literal|"-----END CERTIFICATE-----\n"
decl_stmt|;
name|QByteArray
name|pem1
argument_list|(
name|mycert
argument_list|)
decl_stmt|;
name|QSslCertificate
name|cert1
argument_list|(
name|pem1
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cert1
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QByteArray
name|pem2
argument_list|(
name|cert1
operator|.
name|toPem
argument_list|()
argument_list|)
decl_stmt|;
name|QSslCertificate
name|cert2
argument_list|(
name|pem2
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cert2
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|pem1
argument_list|,
name|pem2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|nulInCN
name|void
name|tst_QSslCertificate
operator|::
name|nulInCN
parameter_list|()
block|{
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
name|certList
init|=
name|QSslCertificate
operator|::
name|fromPath
argument_list|(
name|testDataDir
operator|+
literal|"/more-certificates/badguy-nul-cn.crt"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|certList
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|const
name|QSslCertificate
modifier|&
name|cert
init|=
name|certList
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cert
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|cn
init|=
name|cert
operator|.
name|subjectInfo
argument_list|(
name|QSslCertificate
operator|::
name|CommonName
argument_list|)
index|[
literal|0
index|]
decl_stmt|;
name|QVERIFY
argument_list|(
name|cn
operator|!=
literal|"www.bank.com"
argument_list|)
expr_stmt|;
specifier|static
specifier|const
name|char
name|realCN
index|[]
init|=
literal|"www.bank.com\0.badguy.com"
decl_stmt|;
name|QCOMPARE
argument_list|(
name|cn
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
name|realCN
argument_list|,
sizeof|sizeof
name|realCN
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|nulInSan
name|void
name|tst_QSslCertificate
operator|::
name|nulInSan
parameter_list|()
block|{
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
name|certList
init|=
name|QSslCertificate
operator|::
name|fromPath
argument_list|(
name|testDataDir
operator|+
literal|"/more-certificates/badguy-nul-san.crt"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|certList
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|const
name|QSslCertificate
modifier|&
name|cert
init|=
name|certList
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cert
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QMultiMap
argument_list|<
name|QSsl
operator|::
name|AlternativeNameEntryType
argument_list|,
name|QString
argument_list|>
name|san
init|=
name|cert
operator|.
name|subjectAlternativeNames
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|san
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QString
name|dnssan
init|=
name|san
operator|.
name|value
argument_list|(
name|QSsl
operator|::
name|DnsEntry
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|dnssan
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|dnssan
operator|!=
literal|"www.bank.com"
argument_list|)
expr_stmt|;
specifier|static
specifier|const
name|char
name|realSAN
index|[]
init|=
literal|"www.bank.com\0www.badguy.com"
decl_stmt|;
name|QCOMPARE
argument_list|(
name|dnssan
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
name|realSAN
argument_list|,
sizeof|sizeof
name|realSAN
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|largeSerialNumber
name|void
name|tst_QSslCertificate
operator|::
name|largeSerialNumber
parameter_list|()
block|{
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
name|certList
init|=
name|QSslCertificate
operator|::
name|fromPath
argument_list|(
name|testDataDir
operator|+
literal|"/more-certificates/cert-large-serial-number.pem"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|certList
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|const
name|QSslCertificate
modifier|&
name|cert
init|=
name|certList
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cert
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert
operator|.
name|serialNumber
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"01:02:03:04:05:06:07:08:09:10:aa:bb:cc:dd:ee:ff:17:18:19:20"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|largeExpirationDate
name|void
name|tst_QSslCertificate
operator|::
name|largeExpirationDate
parameter_list|()
comment|// QTBUG-12489
block|{
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
name|certList
init|=
name|QSslCertificate
operator|::
name|fromPath
argument_list|(
name|testDataDir
operator|+
literal|"/more-certificates/cert-large-expiration-date.pem"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|certList
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|const
name|QSslCertificate
modifier|&
name|cert
init|=
name|certList
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|cert
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|cert
operator|.
name|effectiveDate
argument_list|()
operator|.
name|toUTC
argument_list|()
argument_list|,
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2010
argument_list|,
literal|8
argument_list|,
literal|4
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|9
argument_list|,
literal|53
argument_list|,
literal|41
argument_list|)
argument_list|,
name|Qt
operator|::
name|UTC
argument_list|)
argument_list|)
expr_stmt|;
comment|// if the date is larger than 2049, then the generalized time format is used
name|QCOMPARE
argument_list|(
name|cert
operator|.
name|expiryDate
argument_list|()
operator|.
name|toUTC
argument_list|()
argument_list|,
name|QDateTime
argument_list|(
name|QDate
argument_list|(
literal|2051
argument_list|,
literal|8
argument_list|,
literal|29
argument_list|)
argument_list|,
name|QTime
argument_list|(
literal|9
argument_list|,
literal|53
argument_list|,
literal|41
argument_list|)
argument_list|,
name|Qt
operator|::
name|UTC
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|blacklistedCertificates
name|void
name|tst_QSslCertificate
operator|::
name|blacklistedCertificates
parameter_list|()
block|{
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
name|blacklistedCerts
init|=
name|QSslCertificate
operator|::
name|fromPath
argument_list|(
literal|"more-certificates/blacklisted*.pem"
argument_list|,
name|QSsl
operator|::
name|Pem
argument_list|,
name|QRegExp
operator|::
name|Wildcard
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|blacklistedCerts
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|,
literal|"Please run this test from the source directory"
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|a
init|=
literal|0
init|;
name|a
operator|<
name|blacklistedCerts
operator|.
name|count
argument_list|()
condition|;
name|a
operator|++
control|)
block|{
name|QVERIFY
argument_list|(
name|blacklistedCerts
operator|.
name|at
argument_list|(
name|a
argument_list|)
operator|.
name|isBlacklisted
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|toText
name|void
name|tst_QSslCertificate
operator|::
name|toText
parameter_list|()
block|{
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
name|certList
init|=
name|QSslCertificate
operator|::
name|fromPath
argument_list|(
name|testDataDir
operator|+
literal|"/more-certificates/cert-large-expiration-date.pem"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|certList
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
specifier|const
name|QSslCertificate
modifier|&
name|cert
init|=
name|certList
operator|.
name|at
argument_list|(
literal|0
argument_list|)
decl_stmt|;
comment|// Openssl's cert dump method changed slightly between 0.9.8 and 1.0.0 versions, so we want it to match any output
name|QFile
name|fOld
argument_list|(
name|testDataDir
operator|+
literal|"/more-certificates/cert-large-expiration-date.txt.0.9.8"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|fOld
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|QFile
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|txtOld
init|=
name|fOld
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|QFile
name|fNew
argument_list|(
name|testDataDir
operator|+
literal|"/more-certificates/cert-large-expiration-date.txt.1.0.0"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|fNew
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
operator||
name|QFile
operator|::
name|Text
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|txtNew
init|=
name|fNew
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|txtOld
argument_list|)
operator|==
name|cert
operator|.
name|toText
argument_list|()
operator|||
name|QString
operator|::
name|fromLatin1
argument_list|(
name|txtNew
argument_list|)
operator|==
name|cert
operator|.
name|toText
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|multipleCommonNames
name|void
name|tst_QSslCertificate
operator|::
name|multipleCommonNames
parameter_list|()
block|{
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
name|certList
init|=
name|QSslCertificate
operator|::
name|fromPath
argument_list|(
name|testDataDir
operator|+
literal|"/more-certificates/test-cn-two-cns-cert.pem"
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|certList
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|,
literal|"Please run this test from the source directory"
argument_list|)
expr_stmt|;
name|QStringList
name|commonNames
init|=
name|certList
index|[
literal|0
index|]
operator|.
name|subjectInfo
argument_list|(
name|QSslCertificate
operator|::
name|CommonName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|commonNames
operator|.
name|contains
argument_list|(
name|QString
argument_list|(
literal|"www.example.com"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|commonNames
operator|.
name|contains
argument_list|(
name|QString
argument_list|(
literal|"www2.example.com"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|subjectAndIssuerAttributes
name|void
name|tst_QSslCertificate
operator|::
name|subjectAndIssuerAttributes
parameter_list|()
block|{
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
name|certList
init|=
name|QSslCertificate
operator|::
name|fromPath
argument_list|(
name|testDataDir
operator|+
literal|"/more-certificates/test-cn-with-drink-cert.pem"
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|certList
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|,
literal|"Please run this test from the source directory"
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|attributes
init|=
name|certList
index|[
literal|0
index|]
operator|.
name|subjectInfoAttributes
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|attributes
operator|.
name|contains
argument_list|(
name|QByteArray
argument_list|(
literal|"favouriteDrink"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|attributes
operator|.
name|clear
argument_list|()
expr_stmt|;
name|certList
operator|=
name|QSslCertificate
operator|::
name|fromPath
argument_list|(
name|testDataDir
operator|+
literal|"/more-certificates/natwest-banking.pem"
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|certList
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|,
literal|"Please run this test from the source directory"
argument_list|)
expr_stmt|;
name|attributes
operator|=
name|certList
index|[
literal|0
index|]
operator|.
name|subjectInfoAttributes
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|attributes
operator|.
name|contains
argument_list|(
name|QByteArray
argument_list|(
literal|"1.3.6.1.4.1.311.60.2.1.3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|verify
name|void
name|tst_QSslCertificate
operator|::
name|verify
parameter_list|()
block|{
name|QList
argument_list|<
name|QSslError
argument_list|>
name|errors
decl_stmt|;
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
name|toVerify
decl_stmt|;
comment|// Like QVERIFY, but be verbose about the content of `errors' when failing
DECL|macro|VERIFY_VERBOSE
define|#
directive|define
name|VERIFY_VERBOSE
parameter_list|(
name|A
parameter_list|)
define|\
value|QVERIFY2((A),                                               \         qPrintable(QString("errors: %1").arg(toString(errors))) \     )
comment|// Empty chain is unspecified error
name|errors
operator|=
name|QSslCertificate
operator|::
name|verify
argument_list|(
name|toVerify
argument_list|)
expr_stmt|;
name|VERIFY_VERBOSE
argument_list|(
name|errors
operator|.
name|count
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|VERIFY_VERBOSE
argument_list|(
name|errors
index|[
literal|0
index|]
operator|==
name|QSslError
argument_list|(
name|QSslError
operator|::
name|UnspecifiedError
argument_list|)
argument_list|)
expr_stmt|;
name|errors
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Verify a valid cert signed by a CA
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
name|caCerts
init|=
name|QSslCertificate
operator|::
name|fromPath
argument_list|(
name|testDataDir
operator|+
literal|"/verify-certs/cacert.pem"
argument_list|)
decl_stmt|;
name|QSslSocket
operator|::
name|addDefaultCaCertificate
argument_list|(
name|caCerts
operator|.
name|first
argument_list|()
argument_list|)
expr_stmt|;
name|toVerify
operator|=
name|QSslCertificate
operator|::
name|fromPath
argument_list|(
name|testDataDir
operator|+
literal|"/verify-certs/test-ocsp-good-cert.pem"
argument_list|)
expr_stmt|;
name|errors
operator|=
name|QSslCertificate
operator|::
name|verify
argument_list|(
name|toVerify
argument_list|)
expr_stmt|;
name|VERIFY_VERBOSE
argument_list|(
name|errors
operator|.
name|count
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|errors
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Test a blacklisted certificate
name|toVerify
operator|=
name|QSslCertificate
operator|::
name|fromPath
argument_list|(
name|testDataDir
operator|+
literal|"/verify-certs/test-addons-mozilla-org-cert.pem"
argument_list|)
expr_stmt|;
name|errors
operator|=
name|QSslCertificate
operator|::
name|verify
argument_list|(
name|toVerify
argument_list|)
expr_stmt|;
name|bool
name|foundBlack
init|=
literal|false
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QSslError
modifier|&
name|error
decl|,
name|errors
control|)
block|{
if|if
condition|(
name|error
operator|.
name|error
argument_list|()
operator|==
name|QSslError
operator|::
name|CertificateBlacklisted
condition|)
block|{
name|foundBlack
operator|=
literal|true
expr_stmt|;
break|break;
block|}
block|}
name|QVERIFY
argument_list|(
name|foundBlack
argument_list|)
expr_stmt|;
name|errors
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// This one is expired and untrusted
name|toVerify
operator|=
name|QSslCertificate
operator|::
name|fromPath
argument_list|(
name|testDataDir
operator|+
literal|"/more-certificates/cert-large-serial-number.pem"
argument_list|)
expr_stmt|;
name|errors
operator|=
name|QSslCertificate
operator|::
name|verify
argument_list|(
name|toVerify
argument_list|)
expr_stmt|;
name|VERIFY_VERBOSE
argument_list|(
name|errors
operator|.
name|contains
argument_list|(
name|QSslError
argument_list|(
name|QSslError
operator|::
name|SelfSignedCertificate
argument_list|,
name|toVerify
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|VERIFY_VERBOSE
argument_list|(
name|errors
operator|.
name|contains
argument_list|(
name|QSslError
argument_list|(
name|QSslError
operator|::
name|CertificateExpired
argument_list|,
name|toVerify
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|errors
operator|.
name|clear
argument_list|()
expr_stmt|;
name|toVerify
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// This one is signed by a valid cert, but the signer is not a valid CA
name|toVerify
operator|<<
name|QSslCertificate
operator|::
name|fromPath
argument_list|(
name|testDataDir
operator|+
literal|"/verify-certs/test-intermediate-not-ca-cert.pem"
argument_list|)
operator|.
name|first
argument_list|()
expr_stmt|;
name|toVerify
operator|<<
name|QSslCertificate
operator|::
name|fromPath
argument_list|(
name|testDataDir
operator|+
literal|"/verify-certs/test-ocsp-good-cert.pem"
argument_list|)
operator|.
name|first
argument_list|()
expr_stmt|;
name|errors
operator|=
name|QSslCertificate
operator|::
name|verify
argument_list|(
name|toVerify
argument_list|)
expr_stmt|;
name|VERIFY_VERBOSE
argument_list|(
name|errors
operator|.
name|contains
argument_list|(
name|QSslError
argument_list|(
name|QSslError
operator|::
name|InvalidCaCertificate
argument_list|,
name|toVerify
index|[
literal|1
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|toVerify
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// This one is signed by a valid cert, and the signer is a valid CA
name|toVerify
operator|<<
name|QSslCertificate
operator|::
name|fromPath
argument_list|(
name|testDataDir
operator|+
literal|"/verify-certs/test-intermediate-is-ca-cert.pem"
argument_list|)
operator|.
name|first
argument_list|()
expr_stmt|;
name|toVerify
operator|<<
name|QSslCertificate
operator|::
name|fromPath
argument_list|(
name|testDataDir
operator|+
literal|"/verify-certs/test-intermediate-ca-cert.pem"
argument_list|)
operator|.
name|first
argument_list|()
expr_stmt|;
name|errors
operator|=
name|QSslCertificate
operator|::
name|verify
argument_list|(
name|toVerify
argument_list|)
expr_stmt|;
name|VERIFY_VERBOSE
argument_list|(
name|errors
operator|.
name|count
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// Recheck the above with hostname validation
name|errors
operator|=
name|QSslCertificate
operator|::
name|verify
argument_list|(
name|toVerify
argument_list|,
name|QLatin1String
argument_list|(
literal|"example.com"
argument_list|)
argument_list|)
expr_stmt|;
name|VERIFY_VERBOSE
argument_list|(
name|errors
operator|.
name|count
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
comment|// Recheck the above with a bad hostname
name|errors
operator|=
name|QSslCertificate
operator|::
name|verify
argument_list|(
name|toVerify
argument_list|,
name|QLatin1String
argument_list|(
literal|"fail.example.com"
argument_list|)
argument_list|)
expr_stmt|;
name|VERIFY_VERBOSE
argument_list|(
name|errors
operator|.
name|contains
argument_list|(
name|QSslError
argument_list|(
name|QSslError
operator|::
name|HostNameMismatch
argument_list|,
name|toVerify
index|[
literal|0
index|]
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|toVerify
operator|.
name|clear
argument_list|()
expr_stmt|;
DECL|macro|VERIFY_VERBOSE
undef|#
directive|undef
name|VERIFY_VERBOSE
block|}
end_function
begin_function
DECL|function|toString
name|QString
name|tst_QSslCertificate
operator|::
name|toString
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QSslError
argument_list|>
modifier|&
name|errors
parameter_list|)
block|{
name|QStringList
name|errorStrings
decl_stmt|;
foreach|foreach
control|(
specifier|const
name|QSslError
modifier|&
name|error
decl|,
name|errors
control|)
block|{
name|errorStrings
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"\""
argument_list|)
operator|+
name|error
operator|.
name|errorString
argument_list|()
operator|+
name|QLatin1String
argument_list|(
literal|"\""
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|QLatin1String
argument_list|(
literal|"[ "
argument_list|)
operator|+
name|errorStrings
operator|.
name|join
argument_list|(
name|QLatin1String
argument_list|(
literal|", "
argument_list|)
argument_list|)
operator|+
name|QLatin1String
argument_list|(
literal|" ]"
argument_list|)
return|;
block|}
end_function
begin_function
DECL|function|extensions
name|void
name|tst_QSslCertificate
operator|::
name|extensions
parameter_list|()
block|{
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
name|certList
init|=
name|QSslCertificate
operator|::
name|fromPath
argument_list|(
name|testDataDir
operator|+
literal|"/more-certificates/natwest-banking.pem"
argument_list|)
decl_stmt|;
name|QVERIFY2
argument_list|(
name|certList
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|,
literal|"Please run this test from the source directory"
argument_list|)
expr_stmt|;
name|QSslCertificate
name|cert
init|=
name|certList
index|[
literal|0
index|]
decl_stmt|;
name|QList
argument_list|<
name|QSslCertificateExtension
argument_list|>
name|extensions
init|=
name|cert
operator|.
name|extensions
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|extensions
operator|.
name|count
argument_list|()
operator|==
literal|9
argument_list|)
expr_stmt|;
name|int
name|unknown_idx
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|authority_info_idx
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|basic_constraints_idx
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|subject_key_idx
init|=
operator|-
literal|1
decl_stmt|;
name|int
name|auth_key_idx
init|=
operator|-
literal|1
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|extensions
operator|.
name|length
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|QSslCertificateExtension
name|ext
init|=
name|extensions
index|[
name|i
index|]
decl_stmt|;
comment|//qDebug()<< i<< ":"<< ext.name()<< ext.oid();
if|if
condition|(
name|ext
operator|.
name|oid
argument_list|()
operator|==
name|QStringLiteral
argument_list|(
literal|"1.3.6.1.5.5.7.1.12"
argument_list|)
condition|)
name|unknown_idx
operator|=
name|i
expr_stmt|;
if|if
condition|(
name|ext
operator|.
name|name
argument_list|()
operator|==
name|QStringLiteral
argument_list|(
literal|"authorityInfoAccess"
argument_list|)
condition|)
name|authority_info_idx
operator|=
name|i
expr_stmt|;
if|if
condition|(
name|ext
operator|.
name|name
argument_list|()
operator|==
name|QStringLiteral
argument_list|(
literal|"basicConstraints"
argument_list|)
condition|)
name|basic_constraints_idx
operator|=
name|i
expr_stmt|;
if|if
condition|(
name|ext
operator|.
name|name
argument_list|()
operator|==
name|QStringLiteral
argument_list|(
literal|"subjectKeyIdentifier"
argument_list|)
condition|)
name|subject_key_idx
operator|=
name|i
expr_stmt|;
if|if
condition|(
name|ext
operator|.
name|name
argument_list|()
operator|==
name|QStringLiteral
argument_list|(
literal|"authorityKeyIdentifier"
argument_list|)
condition|)
name|auth_key_idx
operator|=
name|i
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|unknown_idx
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|authority_info_idx
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|basic_constraints_idx
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|subject_key_idx
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|auth_key_idx
operator|!=
operator|-
literal|1
argument_list|)
expr_stmt|;
comment|// Unknown
name|QSslCertificateExtension
name|unknown
init|=
name|extensions
index|[
name|unknown_idx
index|]
decl_stmt|;
name|QVERIFY
argument_list|(
name|unknown
operator|.
name|oid
argument_list|()
operator|==
name|QStringLiteral
argument_list|(
literal|"1.3.6.1.5.5.7.1.12"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|unknown
operator|.
name|name
argument_list|()
operator|==
name|QStringLiteral
argument_list|(
literal|"1.3.6.1.5.5.7.1.12"
argument_list|)
argument_list|)
expr_stmt|;
name|QByteArray
name|unknownValue
init|=
name|QByteArray
operator|::
name|fromHex
argument_list|(
literal|"3060A15EA05C305A305830561609696D6167652F6769663021301F300706052B0E03021A0414"
expr|\
literal|"4B6BB92896060CBBD052389B29AC4B078B21051830261624687474703A2F2F6C6F676F2E7665"
expr|\
literal|"72697369676E2E636F6D2F76736C6F676F312E676966"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|unknown
operator|.
name|value
argument_list|()
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|unknownValue
argument_list|)
expr_stmt|;
comment|// Authority Info Access
name|QSslCertificateExtension
name|aia
init|=
name|extensions
index|[
name|authority_info_idx
index|]
decl_stmt|;
name|QVERIFY
argument_list|(
name|aia
operator|.
name|oid
argument_list|()
operator|==
name|QStringLiteral
argument_list|(
literal|"1.3.6.1.5.5.7.1.1"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|aia
operator|.
name|name
argument_list|()
operator|==
name|QStringLiteral
argument_list|(
literal|"authorityInfoAccess"
argument_list|)
argument_list|)
expr_stmt|;
name|QVariantMap
name|aiaValue
init|=
name|aia
operator|.
name|value
argument_list|()
operator|.
name|toMap
argument_list|()
decl_stmt|;
name|QString
name|ocsp
init|=
name|aiaValue
index|[
name|QStringLiteral
argument_list|(
literal|"OCSP"
argument_list|)
index|]
operator|.
name|toString
argument_list|()
decl_stmt|;
name|QString
name|caIssuers
init|=
name|aiaValue
index|[
name|QStringLiteral
argument_list|(
literal|"caIssuers"
argument_list|)
index|]
operator|.
name|toString
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|ocsp
operator|==
name|QStringLiteral
argument_list|(
literal|"http://EVIntl-ocsp.verisign.com"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|caIssuers
operator|==
name|QStringLiteral
argument_list|(
literal|"http://EVIntl-aia.verisign.com/EVIntl2006.cer"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Basic constraints
name|QSslCertificateExtension
name|basic
init|=
name|extensions
index|[
name|basic_constraints_idx
index|]
decl_stmt|;
name|QVERIFY
argument_list|(
name|basic
operator|.
name|oid
argument_list|()
operator|==
name|QStringLiteral
argument_list|(
literal|"2.5.29.19"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|basic
operator|.
name|name
argument_list|()
operator|==
name|QStringLiteral
argument_list|(
literal|"basicConstraints"
argument_list|)
argument_list|)
expr_stmt|;
name|QVariantMap
name|basicValue
init|=
name|basic
operator|.
name|value
argument_list|()
operator|.
name|toMap
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|basicValue
index|[
name|QStringLiteral
argument_list|(
literal|"ca"
argument_list|)
index|]
operator|.
name|toBool
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
comment|// Subject key identifier
name|QSslCertificateExtension
name|subjectKey
init|=
name|extensions
index|[
name|subject_key_idx
index|]
decl_stmt|;
name|QVERIFY
argument_list|(
name|subjectKey
operator|.
name|oid
argument_list|()
operator|==
name|QStringLiteral
argument_list|(
literal|"2.5.29.14"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|subjectKey
operator|.
name|name
argument_list|()
operator|==
name|QStringLiteral
argument_list|(
literal|"subjectKeyIdentifier"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|subjectKey
operator|.
name|value
argument_list|()
operator|.
name|toString
argument_list|()
operator|==
name|QStringLiteral
argument_list|(
literal|"5F:90:23:CD:24:CA:52:C9:36:29:F0:7E:9D:B1:FE:08:E0:EE:69:F0"
argument_list|)
argument_list|)
expr_stmt|;
comment|// Authority key identifier
name|QSslCertificateExtension
name|authKey
init|=
name|extensions
index|[
name|auth_key_idx
index|]
decl_stmt|;
name|QVERIFY
argument_list|(
name|authKey
operator|.
name|oid
argument_list|()
operator|==
name|QStringLiteral
argument_list|(
literal|"2.5.29.35"
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|authKey
operator|.
name|name
argument_list|()
operator|==
name|QStringLiteral
argument_list|(
literal|"authorityKeyIdentifier"
argument_list|)
argument_list|)
expr_stmt|;
name|QVariantMap
name|authValue
init|=
name|authKey
operator|.
name|value
argument_list|()
operator|.
name|toMap
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|authValue
index|[
name|QStringLiteral
argument_list|(
literal|"keyid"
argument_list|)
index|]
operator|.
name|toByteArray
argument_list|()
operator|==
name|QByteArray
argument_list|(
literal|"4e43c81d76ef37537a4ff2586f94f338e2d5bddf"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|TestThread
class|class
name|TestThread
super|:
specifier|public
name|QThread
block|{
public|public:
DECL|function|run
name|void
name|run
parameter_list|()
block|{
name|effectiveDate
operator|=
name|cert
operator|.
name|effectiveDate
argument_list|()
expr_stmt|;
name|expiryDate
operator|=
name|cert
operator|.
name|expiryDate
argument_list|()
expr_stmt|;
name|extensions
operator|=
name|cert
operator|.
name|extensions
argument_list|()
expr_stmt|;
name|isBlacklisted
operator|=
name|cert
operator|.
name|isBlacklisted
argument_list|()
expr_stmt|;
name|issuerInfo
operator|=
name|cert
operator|.
name|issuerInfo
argument_list|(
name|QSslCertificate
operator|::
name|CommonName
argument_list|)
expr_stmt|;
name|issuerInfoAttributes
operator|=
name|cert
operator|.
name|issuerInfoAttributes
argument_list|()
expr_stmt|;
name|publicKey
operator|=
name|cert
operator|.
name|publicKey
argument_list|()
expr_stmt|;
name|serialNumber
operator|=
name|cert
operator|.
name|serialNumber
argument_list|()
expr_stmt|;
name|subjectInfo
operator|=
name|cert
operator|.
name|subjectInfo
argument_list|(
name|QSslCertificate
operator|::
name|CommonName
argument_list|)
expr_stmt|;
name|subjectInfoAttributes
operator|=
name|cert
operator|.
name|subjectInfoAttributes
argument_list|()
expr_stmt|;
name|toDer
operator|=
name|cert
operator|.
name|toDer
argument_list|()
expr_stmt|;
name|toPem
operator|=
name|cert
operator|.
name|toPem
argument_list|()
expr_stmt|;
name|toText
operator|=
name|cert
operator|.
name|toText
argument_list|()
expr_stmt|;
name|version
operator|=
name|cert
operator|.
name|version
argument_list|()
expr_stmt|;
block|}
DECL|member|cert
name|QSslCertificate
name|cert
decl_stmt|;
DECL|member|effectiveDate
name|QDateTime
name|effectiveDate
decl_stmt|;
DECL|member|expiryDate
name|QDateTime
name|expiryDate
decl_stmt|;
DECL|member|extensions
name|QList
argument_list|<
name|QSslCertificateExtension
argument_list|>
name|extensions
decl_stmt|;
DECL|member|isBlacklisted
name|bool
name|isBlacklisted
decl_stmt|;
DECL|member|issuerInfo
name|QStringList
name|issuerInfo
decl_stmt|;
DECL|member|issuerInfoAttributes
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|issuerInfoAttributes
decl_stmt|;
DECL|member|publicKey
name|QSslKey
name|publicKey
decl_stmt|;
DECL|member|serialNumber
name|QByteArray
name|serialNumber
decl_stmt|;
DECL|member|subjectInfo
name|QStringList
name|subjectInfo
decl_stmt|;
DECL|member|subjectInfoAttributes
name|QList
argument_list|<
name|QByteArray
argument_list|>
name|subjectInfoAttributes
decl_stmt|;
DECL|member|toDer
name|QByteArray
name|toDer
decl_stmt|;
DECL|member|toPem
name|QByteArray
name|toPem
decl_stmt|;
DECL|member|toText
name|QString
name|toText
decl_stmt|;
DECL|member|version
name|QByteArray
name|version
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|threadSafeConstMethods
name|void
name|tst_QSslCertificate
operator|::
name|threadSafeConstMethods
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QSslSocket
operator|::
name|supportsSsl
argument_list|()
condition|)
return|return;
name|QByteArray
name|encoded
init|=
name|readFile
argument_list|(
name|testDataDir
operator|+
literal|"/certificates/cert.pem"
argument_list|)
decl_stmt|;
name|QSslCertificate
name|certificate
argument_list|(
name|encoded
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|certificate
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|TestThread
name|t1
decl_stmt|;
name|t1
operator|.
name|cert
operator|=
name|certificate
expr_stmt|;
comment|//shallow copy
name|TestThread
name|t2
decl_stmt|;
name|t2
operator|.
name|cert
operator|=
name|certificate
expr_stmt|;
comment|//shallow copy
name|t1
operator|.
name|start
argument_list|()
expr_stmt|;
name|t2
operator|.
name|start
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|t1
operator|.
name|wait
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|t2
operator|.
name|wait
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|t1
operator|.
name|cert
operator|==
name|t2
operator|.
name|cert
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|t1
operator|.
name|effectiveDate
operator|==
name|t2
operator|.
name|effectiveDate
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|t1
operator|.
name|expiryDate
operator|==
name|t2
operator|.
name|expiryDate
argument_list|)
expr_stmt|;
comment|//QVERIFY(t1.extensions == t2.extensions); // no equality operator, so not tested
name|QVERIFY
argument_list|(
name|t1
operator|.
name|isBlacklisted
operator|==
name|t2
operator|.
name|isBlacklisted
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|t1
operator|.
name|issuerInfo
operator|==
name|t2
operator|.
name|issuerInfo
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|t1
operator|.
name|issuerInfoAttributes
operator|==
name|t2
operator|.
name|issuerInfoAttributes
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|t1
operator|.
name|publicKey
operator|==
name|t2
operator|.
name|publicKey
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|t1
operator|.
name|serialNumber
operator|==
name|t2
operator|.
name|serialNumber
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|t1
operator|.
name|subjectInfo
operator|==
name|t2
operator|.
name|subjectInfo
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|t1
operator|.
name|subjectInfoAttributes
operator|==
name|t2
operator|.
name|subjectInfoAttributes
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|t1
operator|.
name|toDer
operator|==
name|t2
operator|.
name|toDer
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|t1
operator|.
name|toPem
operator|==
name|t2
operator|.
name|toPem
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|t1
operator|.
name|toText
operator|==
name|t2
operator|.
name|toText
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|t1
operator|.
name|version
operator|==
name|t2
operator|.
name|version
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_SSL
end_comment
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QSslCertificate
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qsslcertificate.moc"
end_include
end_unit
