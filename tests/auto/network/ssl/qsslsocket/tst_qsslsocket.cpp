begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore/qthread.h>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qhostaddress.h>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qhostinfo.h>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qnetworkproxy.h>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qsslcipher.h>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qsslconfiguration.h>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qsslkey.h>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qsslsocket.h>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qtcpserver.h>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QNetworkProxy>
end_include
begin_include
include|#
directive|include
file|<QAuthenticator>
end_include
begin_include
include|#
directive|include
file|"private/qhostinfo_p.h"
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_OPENSSL
end_ifndef
begin_include
include|#
directive|include
file|"private/qsslsocket_openssl_p.h"
end_include
begin_include
include|#
directive|include
file|"private/qsslsocket_openssl_symbols_p.h"
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"../../../network-settings.h"
end_include
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QAbstractSocket::SocketState
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QAbstractSocket::SocketError
argument_list|)
end_macro
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_OPENSSL
end_ifndef
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QSslSocket::SslMode
argument_list|)
end_macro
begin_typedef
DECL|typedef|SslErrorList
typedef|typedef
name|QList
argument_list|<
name|QSslError
operator|::
name|SslError
argument_list|>
name|SslErrorList
typedef|;
end_typedef
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|SslErrorList
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QSslError
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QSsl::SslProtocol
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QSslConfiguration
argument_list|)
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_if
if|#
directive|if
name|defined
name|Q_OS_HPUX
operator|&&
name|defined
name|Q_CC_GNU
end_if
begin_comment
comment|// This error is delivered every time we try to use the fluke CA
end_comment
begin_comment
comment|// certificate. For now we work around this bug. Task 202317.
end_comment
begin_define
DECL|macro|QSSLSOCKET_CERTUNTRUSTED_WORKAROUND
define|#
directive|define
name|QSSLSOCKET_CERTUNTRUSTED_WORKAROUND
end_define
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_OPENSSL
end_ifndef
begin_class
DECL|class|QSslSocketPtr
class|class
name|QSslSocketPtr
super|:
specifier|public
name|QSharedPointer
argument_list|<
name|QSslSocket
argument_list|>
block|{
public|public:
DECL|function|QSslSocketPtr
specifier|inline
name|QSslSocketPtr
parameter_list|(
name|QSslSocket
modifier|*
name|ptr
init|=
literal|0
parameter_list|)
member_init_list|:
name|QSharedPointer
argument_list|<
name|QSslSocket
argument_list|>
argument_list|(
name|ptr
argument_list|)
block|{ }
DECL|function|operator QSslSocket *
specifier|inline
name|operator
name|QSslSocket *
parameter_list|()
specifier|const
block|{
return|return
name|data
argument_list|()
return|;
block|}
block|}
class|;
end_class
begin_endif
endif|#
directive|endif
end_endif
begin_class
DECL|class|tst_QSslSocket
class|class
name|tst_QSslSocket
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
DECL|member|proxyAuthCalled
name|int
name|proxyAuthCalled
decl_stmt|;
public|public:
name|tst_QSslSocket
parameter_list|()
constructor_decl|;
specifier|virtual
name|~
name|tst_QSslSocket
parameter_list|()
destructor_decl|;
DECL|function|enterLoop
specifier|static
name|void
name|enterLoop
parameter_list|(
name|int
name|secs
parameter_list|)
block|{
operator|++
name|loopLevel
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
name|secs
argument_list|)
expr_stmt|;
block|}
DECL|function|timeout
specifier|static
name|bool
name|timeout
parameter_list|()
block|{
return|return
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
return|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_OPENSSL
name|QSslSocketPtr
name|newSocket
parameter_list|()
function_decl|;
endif|#
directive|endif
public|public
name|slots
public|:
name|void
name|initTestCase_data
parameter_list|()
function_decl|;
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
name|void
name|proxyAuthenticationRequired
parameter_list|(
specifier|const
name|QNetworkProxy
modifier|&
parameter_list|,
name|QAuthenticator
modifier|*
name|auth
parameter_list|)
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_OPENSSL
private|private
name|slots
private|:
name|void
name|constructing
parameter_list|()
function_decl|;
name|void
name|simpleConnect
parameter_list|()
function_decl|;
name|void
name|simpleConnectWithIgnore
parameter_list|()
function_decl|;
comment|// API tests
name|void
name|sslErrors_data
parameter_list|()
function_decl|;
name|void
name|sslErrors
parameter_list|()
function_decl|;
name|void
name|addCaCertificate
parameter_list|()
function_decl|;
name|void
name|addCaCertificates
parameter_list|()
function_decl|;
name|void
name|addCaCertificates2
parameter_list|()
function_decl|;
name|void
name|ciphers
parameter_list|()
function_decl|;
name|void
name|connectToHostEncrypted
parameter_list|()
function_decl|;
name|void
name|connectToHostEncryptedWithVerificationPeerName
parameter_list|()
function_decl|;
name|void
name|sessionCipher
parameter_list|()
function_decl|;
name|void
name|flush
parameter_list|()
function_decl|;
name|void
name|isEncrypted
parameter_list|()
function_decl|;
name|void
name|localCertificate
parameter_list|()
function_decl|;
name|void
name|mode
parameter_list|()
function_decl|;
name|void
name|peerCertificate
parameter_list|()
function_decl|;
name|void
name|peerCertificateChain
parameter_list|()
function_decl|;
name|void
name|privateKey
parameter_list|()
function_decl|;
name|void
name|privateKeyOpaque
parameter_list|()
function_decl|;
name|void
name|protocol
parameter_list|()
function_decl|;
name|void
name|protocolServerSide_data
parameter_list|()
function_decl|;
name|void
name|protocolServerSide
parameter_list|()
function_decl|;
name|void
name|setCaCertificates
parameter_list|()
function_decl|;
name|void
name|setLocalCertificate
parameter_list|()
function_decl|;
name|void
name|setPrivateKey
parameter_list|()
function_decl|;
name|void
name|setSocketDescriptor
parameter_list|()
function_decl|;
name|void
name|setSslConfiguration_data
parameter_list|()
function_decl|;
name|void
name|setSslConfiguration
parameter_list|()
function_decl|;
name|void
name|waitForEncrypted
parameter_list|()
function_decl|;
name|void
name|waitForEncryptedMinusOne
parameter_list|()
function_decl|;
name|void
name|waitForConnectedEncryptedReadyRead
parameter_list|()
function_decl|;
name|void
name|startClientEncryption
parameter_list|()
function_decl|;
name|void
name|startServerEncryption
parameter_list|()
function_decl|;
name|void
name|addDefaultCaCertificate
parameter_list|()
function_decl|;
name|void
name|addDefaultCaCertificates
parameter_list|()
function_decl|;
name|void
name|addDefaultCaCertificates2
parameter_list|()
function_decl|;
name|void
name|defaultCaCertificates
parameter_list|()
function_decl|;
name|void
name|defaultCiphers
parameter_list|()
function_decl|;
name|void
name|resetDefaultCiphers
parameter_list|()
function_decl|;
name|void
name|setDefaultCaCertificates
parameter_list|()
function_decl|;
name|void
name|setDefaultCiphers
parameter_list|()
function_decl|;
name|void
name|supportedCiphers
parameter_list|()
function_decl|;
name|void
name|systemCaCertificates
parameter_list|()
function_decl|;
name|void
name|wildcardCertificateNames
parameter_list|()
function_decl|;
name|void
name|wildcard
parameter_list|()
function_decl|;
name|void
name|setEmptyKey
parameter_list|()
function_decl|;
name|void
name|spontaneousWrite
parameter_list|()
function_decl|;
name|void
name|setReadBufferSize
parameter_list|()
function_decl|;
name|void
name|setReadBufferSize_task_250027
parameter_list|()
function_decl|;
name|void
name|waitForMinusOne
parameter_list|()
function_decl|;
name|void
name|verifyMode
parameter_list|()
function_decl|;
name|void
name|verifyDepth
parameter_list|()
function_decl|;
name|void
name|peerVerifyError
parameter_list|()
function_decl|;
name|void
name|disconnectFromHostWhenConnecting
parameter_list|()
function_decl|;
name|void
name|disconnectFromHostWhenConnected
parameter_list|()
function_decl|;
name|void
name|resetProxy
parameter_list|()
function_decl|;
name|void
name|ignoreSslErrorsList_data
parameter_list|()
function_decl|;
name|void
name|ignoreSslErrorsList
parameter_list|()
function_decl|;
name|void
name|ignoreSslErrorsListWithSlot_data
parameter_list|()
function_decl|;
name|void
name|ignoreSslErrorsListWithSlot
parameter_list|()
function_decl|;
name|void
name|readFromClosedSocket
parameter_list|()
function_decl|;
name|void
name|writeBigChunk
parameter_list|()
function_decl|;
name|void
name|blacklistedCertificates
parameter_list|()
function_decl|;
name|void
name|setEmptyDefaultConfiguration
parameter_list|()
function_decl|;
name|void
name|versionAccessors
parameter_list|()
function_decl|;
name|void
name|sslOptions
parameter_list|()
function_decl|;
DECL|function|exitLoop
specifier|static
name|void
name|exitLoop
parameter_list|()
block|{
comment|// Safe exit - if we aren't in an event loop, don't
comment|// exit one.
if|if
condition|(
name|loopLevel
operator|>
literal|0
condition|)
block|{
operator|--
name|loopLevel
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|exitLoop
argument_list|()
expr_stmt|;
block|}
block|}
protected|protected
name|slots
protected|:
DECL|function|ignoreErrorSlot
name|void
name|ignoreErrorSlot
parameter_list|()
block|{
name|socket
operator|->
name|ignoreSslErrors
argument_list|()
expr_stmt|;
block|}
DECL|function|untrustedWorkaroundSlot
name|void
name|untrustedWorkaroundSlot
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QSslError
argument_list|>
modifier|&
name|errors
parameter_list|)
block|{
if|if
condition|(
name|errors
operator|.
name|size
argument_list|()
operator|==
literal|1
operator|&&
operator|(
name|errors
operator|.
name|first
argument_list|()
operator|.
name|error
argument_list|()
operator|==
name|QSslError
operator|::
name|CertificateUntrusted
operator|||
name|errors
operator|.
name|first
argument_list|()
operator|.
name|error
argument_list|()
operator|==
name|QSslError
operator|::
name|SelfSignedCertificate
operator|)
condition|)
name|socket
operator|->
name|ignoreSslErrors
argument_list|()
expr_stmt|;
block|}
name|void
name|ignoreErrorListSlot
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QSslError
argument_list|>
modifier|&
name|errors
parameter_list|)
function_decl|;
private|private:
DECL|member|socket
name|QSslSocket
modifier|*
name|socket
decl_stmt|;
DECL|member|storedExpectedSslErrors
name|QList
argument_list|<
name|QSslError
argument_list|>
name|storedExpectedSslErrors
decl_stmt|;
endif|#
directive|endif
comment|// QT_NO_OPENSSL
private|private:
DECL|member|loopLevel
specifier|static
name|int
name|loopLevel
decl_stmt|;
block|}
class|;
end_class
begin_decl_stmt
DECL|member|loopLevel
name|int
name|tst_QSslSocket
operator|::
name|loopLevel
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_constructor
DECL|function|tst_QSslSocket
name|tst_QSslSocket
operator|::
name|tst_QSslSocket
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_NO_OPENSSL
name|qRegisterMetaType
argument_list|<
name|QList
argument_list|<
name|QSslError
argument_list|>
argument_list|>
argument_list|(
literal|"QList<QSslError>"
argument_list|)
expr_stmt|;
name|qRegisterMetaType
argument_list|<
name|QSslError
argument_list|>
argument_list|(
literal|"QSslError"
argument_list|)
expr_stmt|;
name|qRegisterMetaType
argument_list|<
name|QAbstractSocket
operator|::
name|SocketState
argument_list|>
argument_list|(
literal|"QAbstractSocket::SocketState"
argument_list|)
expr_stmt|;
name|qRegisterMetaType
argument_list|<
name|QAbstractSocket
operator|::
name|SocketError
argument_list|>
argument_list|(
literal|"QAbstractSocket::SocketError"
argument_list|)
expr_stmt|;
name|qRegisterMetaType
argument_list|<
name|QAbstractSocket
operator|::
name|SocketState
argument_list|>
argument_list|(
literal|"QSslSocket::SslMode"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_constructor
begin_destructor
DECL|function|~tst_QSslSocket
name|tst_QSslSocket
operator|::
name|~
name|tst_QSslSocket
parameter_list|()
block|{ }
end_destructor
begin_enum
DECL|enum|ProxyTests
enum|enum
name|ProxyTests
block|{
DECL|enumerator|NoProxy
name|NoProxy
init|=
literal|0x00
block|,
DECL|enumerator|Socks5Proxy
name|Socks5Proxy
init|=
literal|0x01
block|,
DECL|enumerator|HttpProxy
name|HttpProxy
init|=
literal|0x02
block|,
DECL|enumerator|TypeMask
name|TypeMask
init|=
literal|0x0f
block|,
DECL|enumerator|NoAuth
name|NoAuth
init|=
literal|0x00
block|,
DECL|enumerator|AuthBasic
name|AuthBasic
init|=
literal|0x10
block|,
DECL|enumerator|AuthNtlm
name|AuthNtlm
init|=
literal|0x20
block|,
DECL|enumerator|AuthMask
name|AuthMask
init|=
literal|0xf0
block|}
enum|;
end_enum
begin_function
DECL|function|initTestCase_data
name|void
name|tst_QSslSocket
operator|::
name|initTestCase_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"setProxy"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"proxyType"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"WithoutProxy"
argument_list|)
operator|<<
literal|false
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"WithSocks5Proxy"
argument_list|)
operator|<<
literal|true
operator|<<
name|int
argument_list|(
name|Socks5Proxy
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"WithSocks5ProxyAuth"
argument_list|)
operator|<<
literal|true
operator|<<
name|int
argument_list|(
name|Socks5Proxy
operator||
name|AuthBasic
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"WithHttpProxy"
argument_list|)
operator|<<
literal|true
operator|<<
name|int
argument_list|(
name|HttpProxy
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"WithHttpProxyBasicAuth"
argument_list|)
operator|<<
literal|true
operator|<<
name|int
argument_list|(
name|HttpProxy
operator||
name|AuthBasic
argument_list|)
expr_stmt|;
comment|// uncomment the line below when NTLM works
comment|//    QTest::newRow("WithHttpProxyNtlmAuth")<< true<< int(HttpProxy | AuthNtlm);
block|}
end_function
begin_function
DECL|function|init
name|void
name|tst_QSslSocket
operator|::
name|init
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
block|{
name|QFETCH_GLOBAL
argument_list|(
name|int
argument_list|,
name|proxyType
argument_list|)
expr_stmt|;
name|QString
name|fluke
init|=
name|QHostInfo
operator|::
name|fromName
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|)
operator|.
name|addresses
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|toString
argument_list|()
decl_stmt|;
name|QNetworkProxy
name|proxy
decl_stmt|;
switch|switch
condition|(
name|proxyType
condition|)
block|{
case|case
name|Socks5Proxy
case|:
name|proxy
operator|=
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|Socks5Proxy
argument_list|,
name|fluke
argument_list|,
literal|1080
argument_list|)
expr_stmt|;
break|break;
case|case
name|Socks5Proxy
operator||
name|AuthBasic
case|:
name|proxy
operator|=
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|Socks5Proxy
argument_list|,
name|fluke
argument_list|,
literal|1081
argument_list|)
expr_stmt|;
break|break;
case|case
name|HttpProxy
operator||
name|NoAuth
case|:
name|proxy
operator|=
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|HttpProxy
argument_list|,
name|fluke
argument_list|,
literal|3128
argument_list|)
expr_stmt|;
break|break;
case|case
name|HttpProxy
operator||
name|AuthBasic
case|:
name|proxy
operator|=
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|HttpProxy
argument_list|,
name|fluke
argument_list|,
literal|3129
argument_list|)
expr_stmt|;
break|break;
case|case
name|HttpProxy
operator||
name|AuthNtlm
case|:
name|proxy
operator|=
name|QNetworkProxy
argument_list|(
name|QNetworkProxy
operator|::
name|HttpProxy
argument_list|,
name|fluke
argument_list|,
literal|3130
argument_list|)
expr_stmt|;
break|break;
block|}
name|QNetworkProxy
operator|::
name|setApplicationProxy
argument_list|(
name|proxy
argument_list|)
expr_stmt|;
block|}
name|qt_qhostinfo_clear_cache
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_QSslSocket
operator|::
name|cleanup
parameter_list|()
block|{
name|QNetworkProxy
operator|::
name|setApplicationProxy
argument_list|(
name|QNetworkProxy
operator|::
name|DefaultProxy
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_OPENSSL
end_ifndef
begin_function
DECL|function|newSocket
name|QSslSocketPtr
name|tst_QSslSocket
operator|::
name|newSocket
parameter_list|()
block|{
name|QSslSocket
modifier|*
name|socket
init|=
operator|new
name|QSslSocket
decl_stmt|;
name|proxyAuthCalled
operator|=
literal|0
expr_stmt|;
name|connect
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|proxyAuthenticationRequired
argument_list|(
name|QNetworkProxy
argument_list|,
name|QAuthenticator
operator|*
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|proxyAuthenticationRequired
argument_list|(
name|QNetworkProxy
argument_list|,
name|QAuthenticator
operator|*
argument_list|)
argument_list|)
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|)
expr_stmt|;
return|return
name|QSslSocketPtr
argument_list|(
name|socket
argument_list|)
return|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|proxyAuthenticationRequired
name|void
name|tst_QSslSocket
operator|::
name|proxyAuthenticationRequired
parameter_list|(
specifier|const
name|QNetworkProxy
modifier|&
parameter_list|,
name|QAuthenticator
modifier|*
name|auth
parameter_list|)
block|{
operator|++
name|proxyAuthCalled
expr_stmt|;
name|auth
operator|->
name|setUser
argument_list|(
literal|"qsockstest"
argument_list|)
expr_stmt|;
name|auth
operator|->
name|setPassword
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_OPENSSL
end_ifndef
begin_function
DECL|function|constructing
name|void
name|tst_QSslSocket
operator|::
name|constructing
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QSslSocket
operator|::
name|supportsSsl
argument_list|()
condition|)
return|return;
name|QSslSocket
name|socket
decl_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|state
argument_list|()
argument_list|,
name|QSslSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|mode
argument_list|()
argument_list|,
name|QSslSocket
operator|::
name|UnencryptedMode
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|.
name|isEncrypted
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|bytesAvailable
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|bytesToWrite
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|.
name|canReadLine
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|.
name|atEnd
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|localCertificate
argument_list|()
argument_list|,
name|QSslCertificate
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|sslConfiguration
argument_list|()
argument_list|,
name|QSslConfiguration
operator|::
name|defaultConfiguration
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|errorString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"Unknown error"
argument_list|)
argument_list|)
expr_stmt|;
name|char
name|c
init|=
literal|'\0'
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|.
name|getChar
argument_list|(
operator|&
name|c
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|c
argument_list|,
literal|'\0'
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|.
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|.
name|isReadable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|.
name|isSequential
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|.
name|isTextModeEnabled
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|.
name|isWritable
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|openMode
argument_list|()
argument_list|,
name|QIODevice
operator|::
name|NotOpen
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|.
name|peek
argument_list|(
literal|2
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|pos
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|.
name|putChar
argument_list|(
literal|'c'
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|.
name|read
argument_list|(
literal|2
argument_list|)
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|read
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|qint64
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|.
name|readAll
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QIODevice::readLine: Called with maxSize< 2"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|readLine
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|qint64
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|char
name|buf
index|[
literal|10
index|]
decl_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|readLine
argument_list|(
name|buf
argument_list|,
sizeof|sizeof
argument_list|(
name|buf
argument_list|)
argument_list|)
argument_list|,
name|qint64
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QIODevice::seek: The device is not open"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|.
name|reset
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QIODevice::seek: The device is not open"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|.
name|seek
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|size
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|.
name|waitForBytesWritten
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|.
name|waitForReadyRead
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|write
argument_list|(
literal|0
argument_list|,
literal|0
argument_list|)
argument_list|,
name|qint64
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|write
argument_list|(
name|QByteArray
argument_list|()
argument_list|)
argument_list|,
name|qint64
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|error
argument_list|()
argument_list|,
name|QAbstractSocket
operator|::
name|UnknownSocketError
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|.
name|flush
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|localAddress
argument_list|()
argument_list|,
name|QHostAddress
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|localPort
argument_list|()
argument_list|,
name|quint16
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|peerAddress
argument_list|()
argument_list|,
name|QHostAddress
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|.
name|peerName
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|peerPort
argument_list|()
argument_list|,
name|quint16
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|proxy
argument_list|()
operator|.
name|type
argument_list|()
argument_list|,
name|QNetworkProxy
operator|::
name|DefaultProxy
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|readBufferSize
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|socketDescriptor
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|socketType
argument_list|()
argument_list|,
name|QAbstractSocket
operator|::
name|TcpSocket
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|.
name|waitForConnected
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QSslSocket::waitForDisconnected() is not allowed in UnconnectedState"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|.
name|waitForDisconnected
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|protocol
argument_list|()
argument_list|,
name|QSsl
operator|::
name|SecureProtocols
argument_list|)
expr_stmt|;
name|QSslConfiguration
name|savedDefault
init|=
name|QSslConfiguration
operator|::
name|defaultConfiguration
argument_list|()
decl_stmt|;
comment|// verify that changing the default config doesn't affect this socket
comment|// (on Unix, the ca certs might be empty, depending on whether we load
comment|// them on demand or not, so set them explicitly)
name|socket
operator|.
name|setCaCertificates
argument_list|(
name|QSslSocket
operator|::
name|systemCaCertificates
argument_list|()
argument_list|)
expr_stmt|;
name|QSslSocket
operator|::
name|setDefaultCaCertificates
argument_list|(
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|QSslSocket
operator|::
name|setDefaultCiphers
argument_list|(
name|QList
argument_list|<
name|QSslCipher
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|.
name|caCertificates
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|.
name|ciphers
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// verify the default as well:
name|QVERIFY
argument_list|(
name|QSslConfiguration
operator|::
name|defaultConfiguration
argument_list|()
operator|.
name|caCertificates
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QSslConfiguration
operator|::
name|defaultConfiguration
argument_list|()
operator|.
name|ciphers
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QSslConfiguration
operator|::
name|setDefaultConfiguration
argument_list|(
name|savedDefault
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|simpleConnect
name|void
name|tst_QSslSocket
operator|::
name|simpleConnect
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QSslSocket
operator|::
name|supportsSsl
argument_list|()
condition|)
return|return;
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
return|return;
name|QSslSocket
name|socket
decl_stmt|;
name|QSignalSpy
name|connectedSpy
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|connected
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|hostFoundSpy
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|hostFound
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|disconnectedSpy
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|disconnected
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|connectionEncryptedSpy
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|encrypted
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|sslErrorsSpy
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|sslErrors
argument_list|(
specifier|const
name|QList
argument_list|<
name|QSslError
argument_list|>
operator|&
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|connect
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|connected
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|disconnected
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|modeChanged
argument_list|(
name|QSslSocket
operator|::
name|SslMode
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|encrypted
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|stateChanged
argument_list|(
name|QAbstractSocket
operator|::
name|SocketState
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|sslErrors
argument_list|(
specifier|const
name|QList
argument_list|<
name|QSslError
argument_list|>
operator|&
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Start connecting
name|socket
operator|.
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|993
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|state
argument_list|()
argument_list|,
name|QAbstractSocket
operator|::
name|HostLookupState
argument_list|)
expr_stmt|;
name|enterLoop
argument_list|(
literal|10
argument_list|)
expr_stmt|;
comment|// Entered connecting state
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|state
argument_list|()
argument_list|,
name|QAbstractSocket
operator|::
name|ConnectingState
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|connectedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hostFoundSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|disconnectedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|enterLoop
argument_list|(
literal|10
argument_list|)
expr_stmt|;
comment|// Entered connected state
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|state
argument_list|()
argument_list|,
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|mode
argument_list|()
argument_list|,
name|QSslSocket
operator|::
name|UnencryptedMode
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|.
name|isEncrypted
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|connectedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|hostFoundSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|disconnectedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Enter encrypted mode
name|socket
operator|.
name|startClientEncryption
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|mode
argument_list|()
argument_list|,
name|QSslSocket
operator|::
name|SslClientMode
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|.
name|isEncrypted
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|connectionEncryptedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sslErrorsSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Starting handshake
name|enterLoop
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sslErrorsSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|connectionEncryptedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|.
name|isEncrypted
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|state
argument_list|()
argument_list|,
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|simpleConnectWithIgnore
name|void
name|tst_QSslSocket
operator|::
name|simpleConnectWithIgnore
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QSslSocket
operator|::
name|supportsSsl
argument_list|()
condition|)
return|return;
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
return|return;
name|QSslSocket
name|socket
decl_stmt|;
name|this
operator|->
name|socket
operator|=
operator|&
name|socket
expr_stmt|;
name|QSignalSpy
name|encryptedSpy
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|encrypted
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|sslErrorsSpy
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|sslErrors
argument_list|(
specifier|const
name|QList
argument_list|<
name|QSslError
argument_list|>
operator|&
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|connect
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|encrypted
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|connected
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|sslErrors
argument_list|(
specifier|const
name|QList
argument_list|<
name|QSslError
argument_list|>
operator|&
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|ignoreErrorSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|sslErrors
argument_list|(
specifier|const
name|QList
argument_list|<
name|QSslError
argument_list|>
operator|&
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Start connecting
name|socket
operator|.
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|993
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|.
name|state
argument_list|()
operator|!=
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
comment|// something must be in progress
name|enterLoop
argument_list|(
literal|10
argument_list|)
expr_stmt|;
comment|// Start handshake
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|state
argument_list|()
argument_list|,
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
name|socket
operator|.
name|startClientEncryption
argument_list|()
expr_stmt|;
name|enterLoop
argument_list|(
literal|10
argument_list|)
expr_stmt|;
comment|// Done; encryption should be enabled.
name|QCOMPARE
argument_list|(
name|sslErrorsSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|.
name|isEncrypted
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|state
argument_list|()
argument_list|,
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|encryptedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// Wait for incoming data
if|if
condition|(
operator|!
name|socket
operator|.
name|canReadLine
argument_list|()
condition|)
name|enterLoop
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QByteArray
name|data
init|=
name|socket
operator|.
name|readAll
argument_list|()
decl_stmt|;
name|socket
operator|.
name|disconnectFromHost
argument_list|()
expr_stmt|;
name|QVERIFY2
argument_list|(
name|QtNetworkSettings
operator|::
name|compareReplyIMAPSSL
argument_list|(
name|data
argument_list|)
argument_list|,
name|data
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sslErrors_data
name|void
name|tst_QSslSocket
operator|::
name|sslErrors_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"host"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"port"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|SslErrorList
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|qPrintable
argument_list|(
name|QtNetworkSettings
operator|::
name|serverLocalName
argument_list|()
argument_list|)
argument_list|)
operator|<<
name|QtNetworkSettings
operator|::
name|serverLocalName
argument_list|()
operator|<<
literal|993
operator|<<
operator|(
name|SslErrorList
argument_list|()
operator|<<
name|QSslError
operator|::
name|HostNameMismatch
operator|<<
name|QSslError
operator|::
name|SelfSignedCertificate
operator|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sslErrors
name|void
name|tst_QSslSocket
operator|::
name|sslErrors
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|host
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|port
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|SslErrorList
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QSslSocketPtr
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|socket
operator|->
name|connectToHostEncrypted
argument_list|(
name|host
argument_list|,
name|port
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|socket
operator|->
name|waitForConnected
argument_list|()
condition|)
name|QEXPECT_FAIL
argument_list|(
literal|"imap.trolltech.com"
argument_list|,
literal|"server not open to internet"
argument_list|,
name|Continue
argument_list|)
expr_stmt|;
name|socket
operator|->
name|waitForEncrypted
argument_list|(
literal|5000
argument_list|)
expr_stmt|;
name|SslErrorList
name|output
decl_stmt|;
foreach|foreach
control|(
name|QSslError
name|error
decl|,
name|socket
operator|->
name|sslErrors
argument_list|()
control|)
block|{
name|output
operator|<<
name|error
operator|.
name|error
argument_list|()
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|QSSLSOCKET_CERTUNTRUSTED_WORKAROUND
if|if
condition|(
name|output
operator|.
name|count
argument_list|()
operator|&&
name|output
operator|.
name|last
argument_list|()
operator|==
name|QSslError
operator|::
name|CertificateUntrusted
condition|)
name|output
operator|.
name|takeLast
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|output
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addCaCertificate
name|void
name|tst_QSslSocket
operator|::
name|addCaCertificate
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QSslSocket
operator|::
name|supportsSsl
argument_list|()
condition|)
return|return;
block|}
end_function
begin_function
DECL|function|addCaCertificates
name|void
name|tst_QSslSocket
operator|::
name|addCaCertificates
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QSslSocket
operator|::
name|supportsSsl
argument_list|()
condition|)
return|return;
block|}
end_function
begin_function
DECL|function|addCaCertificates2
name|void
name|tst_QSslSocket
operator|::
name|addCaCertificates2
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QSslSocket
operator|::
name|supportsSsl
argument_list|()
condition|)
return|return;
block|}
end_function
begin_function
DECL|function|ciphers
name|void
name|tst_QSslSocket
operator|::
name|ciphers
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QSslSocket
operator|::
name|supportsSsl
argument_list|()
condition|)
return|return;
name|QSslSocket
name|socket
decl_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|ciphers
argument_list|()
argument_list|,
name|QSslSocket
operator|::
name|supportedCiphers
argument_list|()
argument_list|)
expr_stmt|;
name|socket
operator|.
name|setCiphers
argument_list|(
name|QList
argument_list|<
name|QSslCipher
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|.
name|ciphers
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|socket
operator|.
name|setCiphers
argument_list|(
name|socket
operator|.
name|defaultCiphers
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|ciphers
argument_list|()
argument_list|,
name|QSslSocket
operator|::
name|supportedCiphers
argument_list|()
argument_list|)
expr_stmt|;
name|socket
operator|.
name|setCiphers
argument_list|(
name|socket
operator|.
name|defaultCiphers
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|ciphers
argument_list|()
argument_list|,
name|QSslSocket
operator|::
name|supportedCiphers
argument_list|()
argument_list|)
expr_stmt|;
comment|// Task 164356
name|socket
operator|.
name|setCiphers
argument_list|(
literal|"ALL:!ADH:!LOW:!EXP:!MD5:@STRENGTH"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|connectToHostEncrypted
name|void
name|tst_QSslSocket
operator|::
name|connectToHostEncrypted
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QSslSocket
operator|::
name|supportsSsl
argument_list|()
condition|)
return|return;
name|QSslSocketPtr
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|this
operator|->
name|socket
operator|=
name|socket
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|addCaCertificates
argument_list|(
name|QLatin1String
argument_list|(
name|SRCDIR
literal|"certs/qt-test-server-cacert.pem"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QSSLSOCKET_CERTUNTRUSTED_WORKAROUND
name|connect
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|sslErrors
argument_list|(
name|QList
argument_list|<
name|QSslError
argument_list|>
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|untrustedWorkaroundSlot
argument_list|(
name|QList
argument_list|<
name|QSslError
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|socket
operator|->
name|connectToHostEncrypted
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|443
argument_list|)
expr_stmt|;
comment|// This should pass unconditionally when using fluke's CA certificate.
comment|// or use untrusted certificate workaround
name|QVERIFY2
argument_list|(
name|socket
operator|->
name|waitForEncrypted
argument_list|(
literal|10000
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|socket
operator|->
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|->
name|disconnectFromHost
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForDisconnected
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|mode
argument_list|()
argument_list|,
name|QSslSocket
operator|::
name|SslClientMode
argument_list|)
expr_stmt|;
name|socket
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|13
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|mode
argument_list|()
argument_list|,
name|QSslSocket
operator|::
name|UnencryptedMode
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForDisconnected
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|connectToHostEncryptedWithVerificationPeerName
name|void
name|tst_QSslSocket
operator|::
name|connectToHostEncryptedWithVerificationPeerName
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QSslSocket
operator|::
name|supportsSsl
argument_list|()
condition|)
return|return;
name|QSslSocketPtr
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|this
operator|->
name|socket
operator|=
name|socket
expr_stmt|;
name|socket
operator|->
name|addCaCertificates
argument_list|(
name|QLatin1String
argument_list|(
name|SRCDIR
literal|"certs/qt-test-server-cacert.pem"
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QSSLSOCKET_CERTUNTRUSTED_WORKAROUND
name|connect
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|sslErrors
argument_list|(
name|QList
argument_list|<
name|QSslError
argument_list|>
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|untrustedWorkaroundSlot
argument_list|(
name|QList
argument_list|<
name|QSslError
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// connect to the server with its local name, but use the full name for verification.
name|socket
operator|->
name|connectToHostEncrypted
argument_list|(
name|QtNetworkSettings
operator|::
name|serverLocalName
argument_list|()
argument_list|,
literal|443
argument_list|,
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|)
expr_stmt|;
comment|// This should pass unconditionally when using fluke's CA certificate.
name|QVERIFY2
argument_list|(
name|socket
operator|->
name|waitForEncrypted
argument_list|(
literal|10000
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|socket
operator|->
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|->
name|disconnectFromHost
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForDisconnected
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|mode
argument_list|()
argument_list|,
name|QSslSocket
operator|::
name|SslClientMode
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sessionCipher
name|void
name|tst_QSslSocket
operator|::
name|sessionCipher
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QSslSocket
operator|::
name|supportsSsl
argument_list|()
condition|)
return|return;
name|QSslSocketPtr
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|this
operator|->
name|socket
operator|=
name|socket
expr_stmt|;
name|connect
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|sslErrors
argument_list|(
name|QList
argument_list|<
name|QSslError
argument_list|>
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|ignoreErrorSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|sessionCipher
argument_list|()
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|socket
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|443
comment|/* https */
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForConnected
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|sessionCipher
argument_list|()
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|socket
operator|->
name|startClientEncryption
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForEncrypted
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|->
name|sessionCipher
argument_list|()
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QSslSocket
operator|::
name|supportedCiphers
argument_list|()
operator|.
name|contains
argument_list|(
name|socket
operator|->
name|sessionCipher
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|->
name|disconnectFromHost
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForDisconnected
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|flush
name|void
name|tst_QSslSocket
operator|::
name|flush
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|isEncrypted
name|void
name|tst_QSslSocket
operator|::
name|isEncrypted
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|localCertificate
name|void
name|tst_QSslSocket
operator|::
name|localCertificate
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QSslSocket
operator|::
name|supportsSsl
argument_list|()
condition|)
return|return;
comment|// This test does not make 100% sense yet. We just set some local CA/cert/key and use it
comment|// to authenticate ourselves against the server. The server does not actually check this
comment|// values. This test should just run the codepath inside qsslsocket_openssl.cpp
name|QSslSocketPtr
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
name|localCert
init|=
name|QSslCertificate
operator|::
name|fromPath
argument_list|(
name|SRCDIR
literal|"certs/qt-test-server-cacert.pem"
argument_list|)
decl_stmt|;
name|socket
operator|->
name|setCaCertificates
argument_list|(
name|localCert
argument_list|)
expr_stmt|;
name|socket
operator|->
name|setLocalCertificate
argument_list|(
name|QLatin1String
argument_list|(
name|SRCDIR
literal|"certs/fluke.cert"
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|->
name|setPrivateKey
argument_list|(
name|QLatin1String
argument_list|(
name|SRCDIR
literal|"certs/fluke.key"
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|->
name|connectToHostEncrypted
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|443
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForEncrypted
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mode
name|void
name|tst_QSslSocket
operator|::
name|mode
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|peerCertificate
name|void
name|tst_QSslSocket
operator|::
name|peerCertificate
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|peerCertificateChain
name|void
name|tst_QSslSocket
operator|::
name|peerCertificateChain
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QSslSocket
operator|::
name|supportsSsl
argument_list|()
condition|)
return|return;
name|QSslSocketPtr
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|this
operator|->
name|socket
operator|=
name|socket
expr_stmt|;
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
name|caCertificates
init|=
name|QSslCertificate
operator|::
name|fromPath
argument_list|(
name|QLatin1String
argument_list|(
name|SRCDIR
literal|"certs/qt-test-server-cacert.pem"
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|caCertificates
operator|.
name|count
argument_list|()
operator|==
literal|1
argument_list|)
expr_stmt|;
name|socket
operator|->
name|addCaCertificates
argument_list|(
name|caCertificates
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QSSLSOCKET_CERTUNTRUSTED_WORKAROUND
name|connect
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|sslErrors
argument_list|(
name|QList
argument_list|<
name|QSslError
argument_list|>
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|untrustedWorkaroundSlot
argument_list|(
name|QList
argument_list|<
name|QSslError
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|socket
operator|->
name|connectToHostEncrypted
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|443
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|mode
argument_list|()
argument_list|,
name|QSslSocket
operator|::
name|UnencryptedMode
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|peerCertificateChain
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|socket
operator|->
name|waitForEncrypted
argument_list|(
literal|10000
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|socket
operator|->
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
name|certChain
init|=
name|socket
operator|->
name|peerCertificateChain
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|certChain
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|certChain
operator|.
name|first
argument_list|()
argument_list|,
name|socket
operator|->
name|peerCertificate
argument_list|()
argument_list|)
expr_stmt|;
name|socket
operator|->
name|disconnectFromHost
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForDisconnected
argument_list|()
argument_list|)
expr_stmt|;
comment|// connect again to a different server
name|socket
operator|->
name|connectToHostEncrypted
argument_list|(
literal|"trolltech.com"
argument_list|,
literal|443
argument_list|)
expr_stmt|;
name|socket
operator|->
name|ignoreSslErrors
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|mode
argument_list|()
argument_list|,
name|QSslSocket
operator|::
name|UnencryptedMode
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|peerCertificateChain
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|socket
operator|->
name|waitForEncrypted
argument_list|(
literal|10000
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|socket
operator|->
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|peerCertificateChain
argument_list|()
operator|.
name|first
argument_list|()
argument_list|,
name|socket
operator|->
name|peerCertificate
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|peerCertificateChain
argument_list|()
operator|!=
name|certChain
argument_list|)
expr_stmt|;
name|socket
operator|->
name|disconnectFromHost
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForDisconnected
argument_list|()
argument_list|)
expr_stmt|;
comment|// now do it again back to the original server
name|socket
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|443
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|mode
argument_list|()
argument_list|,
name|QSslSocket
operator|::
name|UnencryptedMode
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|peerCertificateChain
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|socket
operator|->
name|waitForConnected
argument_list|(
literal|10000
argument_list|)
argument_list|,
literal|"Network timeout"
argument_list|)
expr_stmt|;
name|socket
operator|->
name|startClientEncryption
argument_list|()
expr_stmt|;
name|QVERIFY2
argument_list|(
name|socket
operator|->
name|waitForEncrypted
argument_list|(
literal|10000
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|socket
operator|->
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|peerCertificateChain
argument_list|()
operator|.
name|first
argument_list|()
argument_list|,
name|socket
operator|->
name|peerCertificate
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|peerCertificateChain
argument_list|()
operator|==
name|certChain
argument_list|)
expr_stmt|;
name|socket
operator|->
name|disconnectFromHost
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForDisconnected
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|privateKey
name|void
name|tst_QSslSocket
operator|::
name|privateKey
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|privateKeyOpaque
name|void
name|tst_QSslSocket
operator|::
name|privateKeyOpaque
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QSslSocket
operator|::
name|supportsSsl
argument_list|()
condition|)
return|return;
name|QFile
name|file
argument_list|(
name|SRCDIR
literal|"certs/fluke.key"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QSslKey
name|key
argument_list|(
name|file
operator|.
name|readAll
argument_list|()
argument_list|,
name|QSsl
operator|::
name|Rsa
argument_list|,
name|QSsl
operator|::
name|Pem
argument_list|,
name|QSsl
operator|::
name|PrivateKey
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|key
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|EVP_PKEY
modifier|*
name|pkey
init|=
name|q_EVP_PKEY_new
argument_list|()
decl_stmt|;
name|q_EVP_PKEY_set1_RSA
argument_list|(
name|pkey
argument_list|,
cast|reinterpret_cast
argument_list|<
name|RSA
operator|*
argument_list|>
argument_list|(
name|key
operator|.
name|handle
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// This test does not make 100% sense yet. We just set some local CA/cert/key and use it
comment|// to authenticate ourselves against the server. The server does not actually check this
comment|// values. This test should just run the codepath inside qsslsocket_openssl.cpp
name|QSslSocketPtr
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
name|localCert
init|=
name|QSslCertificate
operator|::
name|fromPath
argument_list|(
name|SRCDIR
literal|"certs/qt-test-server-cacert.pem"
argument_list|)
decl_stmt|;
name|socket
operator|->
name|setCaCertificates
argument_list|(
name|localCert
argument_list|)
expr_stmt|;
name|socket
operator|->
name|setLocalCertificate
argument_list|(
name|QLatin1String
argument_list|(
name|SRCDIR
literal|"certs/fluke.cert"
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|->
name|setPrivateKey
argument_list|(
name|QSslKey
argument_list|(
cast|reinterpret_cast
argument_list|<
name|Qt
operator|::
name|HANDLE
argument_list|>
argument_list|(
name|pkey
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|->
name|setPeerVerifyMode
argument_list|(
name|QSslSocket
operator|::
name|QueryPeer
argument_list|)
expr_stmt|;
name|socket
operator|->
name|connectToHostEncrypted
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|443
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForEncrypted
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|protocol
name|void
name|tst_QSslSocket
operator|::
name|protocol
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QSslSocket
operator|::
name|supportsSsl
argument_list|()
condition|)
return|return;
name|QSslSocketPtr
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|this
operator|->
name|socket
operator|=
name|socket
expr_stmt|;
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
name|certs
init|=
name|QSslCertificate
operator|::
name|fromPath
argument_list|(
name|SRCDIR
literal|"certs/qt-test-server-cacert.pem"
argument_list|)
decl_stmt|;
name|socket
operator|->
name|setCaCertificates
argument_list|(
name|certs
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QSSLSOCKET_CERTUNTRUSTED_WORKAROUND
name|connect
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|sslErrors
argument_list|(
name|QList
argument_list|<
name|QSslError
argument_list|>
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|untrustedWorkaroundSlot
argument_list|(
name|QList
argument_list|<
name|QSslError
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|protocol
argument_list|()
argument_list|,
name|QSsl
operator|::
name|SecureProtocols
argument_list|)
expr_stmt|;
block|{
comment|// Fluke allows SSLv3.
name|socket
operator|->
name|setProtocol
argument_list|(
name|QSsl
operator|::
name|SslV3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|protocol
argument_list|()
argument_list|,
name|QSsl
operator|::
name|SslV3
argument_list|)
expr_stmt|;
name|socket
operator|->
name|connectToHostEncrypted
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|443
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|socket
operator|->
name|waitForEncrypted
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|socket
operator|->
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|protocol
argument_list|()
argument_list|,
name|QSsl
operator|::
name|SslV3
argument_list|)
expr_stmt|;
name|socket
operator|->
name|abort
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|protocol
argument_list|()
argument_list|,
name|QSsl
operator|::
name|SslV3
argument_list|)
expr_stmt|;
name|socket
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|443
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|socket
operator|->
name|waitForConnected
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|socket
operator|->
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|->
name|startClientEncryption
argument_list|()
expr_stmt|;
name|QVERIFY2
argument_list|(
name|socket
operator|->
name|waitForEncrypted
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|socket
operator|->
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|protocol
argument_list|()
argument_list|,
name|QSsl
operator|::
name|SslV3
argument_list|)
expr_stmt|;
name|socket
operator|->
name|abort
argument_list|()
expr_stmt|;
block|}
block|{
comment|// Fluke allows TLSV1.
name|socket
operator|->
name|setProtocol
argument_list|(
name|QSsl
operator|::
name|TlsV1_0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|protocol
argument_list|()
argument_list|,
name|QSsl
operator|::
name|TlsV1_0
argument_list|)
expr_stmt|;
name|socket
operator|->
name|connectToHostEncrypted
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|443
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|socket
operator|->
name|waitForEncrypted
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|socket
operator|->
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|protocol
argument_list|()
argument_list|,
name|QSsl
operator|::
name|TlsV1_0
argument_list|)
expr_stmt|;
name|socket
operator|->
name|abort
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|protocol
argument_list|()
argument_list|,
name|QSsl
operator|::
name|TlsV1_0
argument_list|)
expr_stmt|;
name|socket
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|443
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|socket
operator|->
name|waitForConnected
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|socket
operator|->
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|->
name|startClientEncryption
argument_list|()
expr_stmt|;
name|QVERIFY2
argument_list|(
name|socket
operator|->
name|waitForEncrypted
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|socket
operator|->
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|protocol
argument_list|()
argument_list|,
name|QSsl
operator|::
name|TlsV1_0
argument_list|)
expr_stmt|;
name|socket
operator|->
name|abort
argument_list|()
expr_stmt|;
block|}
ifndef|#
directive|ifndef
name|OPENSSL_NO_SSL2
block|{
comment|// Fluke allows SSLV2.
name|socket
operator|->
name|setProtocol
argument_list|(
name|QSsl
operator|::
name|SslV2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|protocol
argument_list|()
argument_list|,
name|QSsl
operator|::
name|SslV2
argument_list|)
expr_stmt|;
name|socket
operator|->
name|connectToHostEncrypted
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|443
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForEncrypted
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|protocol
argument_list|()
argument_list|,
name|QSsl
operator|::
name|SslV2
argument_list|)
expr_stmt|;
name|socket
operator|->
name|abort
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|protocol
argument_list|()
argument_list|,
name|QSsl
operator|::
name|SslV2
argument_list|)
expr_stmt|;
name|socket
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|443
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|socket
operator|->
name|waitForConnected
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|socket
operator|->
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|->
name|startClientEncryption
argument_list|()
expr_stmt|;
name|QVERIFY2
argument_list|(
name|socket
operator|->
name|waitForEncrypted
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|socket
operator|->
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|->
name|abort
argument_list|()
expr_stmt|;
block|}
endif|#
directive|endif
block|{
comment|// Fluke allows SSLV3, so it allows AnyProtocol.
name|socket
operator|->
name|setProtocol
argument_list|(
name|QSsl
operator|::
name|AnyProtocol
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|protocol
argument_list|()
argument_list|,
name|QSsl
operator|::
name|AnyProtocol
argument_list|)
expr_stmt|;
name|socket
operator|->
name|connectToHostEncrypted
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|443
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForEncrypted
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|protocol
argument_list|()
argument_list|,
name|QSsl
operator|::
name|AnyProtocol
argument_list|)
expr_stmt|;
name|socket
operator|->
name|abort
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|protocol
argument_list|()
argument_list|,
name|QSsl
operator|::
name|AnyProtocol
argument_list|)
expr_stmt|;
name|socket
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|443
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|socket
operator|->
name|waitForConnected
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|socket
operator|->
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|->
name|startClientEncryption
argument_list|()
expr_stmt|;
name|QVERIFY2
argument_list|(
name|socket
operator|->
name|waitForEncrypted
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|socket
operator|->
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|protocol
argument_list|()
argument_list|,
name|QSsl
operator|::
name|AnyProtocol
argument_list|)
expr_stmt|;
name|socket
operator|->
name|abort
argument_list|()
expr_stmt|;
block|}
block|{
comment|// Fluke allows SSLV3, so it allows NoSslV2
name|socket
operator|->
name|setProtocol
argument_list|(
name|QSsl
operator|::
name|TlsV1SslV3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|protocol
argument_list|()
argument_list|,
name|QSsl
operator|::
name|TlsV1SslV3
argument_list|)
expr_stmt|;
name|socket
operator|->
name|connectToHostEncrypted
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|443
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForEncrypted
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|protocol
argument_list|()
argument_list|,
name|QSsl
operator|::
name|TlsV1SslV3
argument_list|)
expr_stmt|;
name|socket
operator|->
name|abort
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|protocol
argument_list|()
argument_list|,
name|QSsl
operator|::
name|TlsV1SslV3
argument_list|)
expr_stmt|;
name|socket
operator|->
name|connectToHost
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|443
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|socket
operator|->
name|waitForConnected
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|socket
operator|->
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|->
name|startClientEncryption
argument_list|()
expr_stmt|;
name|QVERIFY2
argument_list|(
name|socket
operator|->
name|waitForEncrypted
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|socket
operator|->
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|protocol
argument_list|()
argument_list|,
name|QSsl
operator|::
name|TlsV1SslV3
argument_list|)
expr_stmt|;
name|socket
operator|->
name|abort
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_class
DECL|class|SslServer
class|class
name|SslServer
super|:
specifier|public
name|QTcpServer
block|{
name|Q_OBJECT
public|public:
DECL|function|SslServer
name|SslServer
parameter_list|(
specifier|const
name|QString
modifier|&
name|keyFile
init|=
name|SRCDIR
literal|"certs/fluke.key"
parameter_list|,
specifier|const
name|QString
modifier|&
name|certFile
init|=
name|SRCDIR
literal|"certs/fluke.cert"
parameter_list|)
member_init_list|:
name|socket
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|protocol
argument_list|(
name|QSsl
operator|::
name|TlsV1_0
argument_list|)
member_init_list|,
name|m_keyFile
argument_list|(
name|keyFile
argument_list|)
member_init_list|,
name|m_certFile
argument_list|(
name|certFile
argument_list|)
block|{ }
DECL|member|socket
name|QSslSocket
modifier|*
name|socket
decl_stmt|;
DECL|member|protocol
name|QSsl
operator|::
name|SslProtocol
name|protocol
decl_stmt|;
DECL|member|m_keyFile
name|QString
name|m_keyFile
decl_stmt|;
DECL|member|m_certFile
name|QString
name|m_certFile
decl_stmt|;
protected|protected:
DECL|function|incomingConnection
name|void
name|incomingConnection
parameter_list|(
name|int
name|socketDescriptor
parameter_list|)
block|{
name|socket
operator|=
operator|new
name|QSslSocket
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|socket
operator|->
name|setProtocol
argument_list|(
name|protocol
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|sslErrors
argument_list|(
specifier|const
name|QList
argument_list|<
name|QSslError
argument_list|>
operator|&
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|ignoreErrorSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
name|m_keyFile
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QSslKey
name|key
argument_list|(
name|file
operator|.
name|readAll
argument_list|()
argument_list|,
name|QSsl
operator|::
name|Rsa
argument_list|,
name|QSsl
operator|::
name|Pem
argument_list|,
name|QSsl
operator|::
name|PrivateKey
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|key
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|socket
operator|->
name|setPrivateKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
name|localCert
init|=
name|QSslCertificate
operator|::
name|fromPath
argument_list|(
name|m_certFile
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|localCert
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|localCert
operator|.
name|first
argument_list|()
operator|.
name|handle
argument_list|()
argument_list|)
expr_stmt|;
name|socket
operator|->
name|setLocalCertificate
argument_list|(
name|localCert
operator|.
name|first
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|setSocketDescriptor
argument_list|(
name|socketDescriptor
argument_list|,
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|->
name|peerAddress
argument_list|()
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|peerPort
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|->
name|localAddress
argument_list|()
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|localPort
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|socket
operator|->
name|startServerEncryption
argument_list|()
expr_stmt|;
block|}
protected|protected
name|slots
protected|:
DECL|function|ignoreErrorSlot
name|void
name|ignoreErrorSlot
parameter_list|()
block|{
name|socket
operator|->
name|ignoreSslErrors
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|protocolServerSide_data
name|void
name|tst_QSslSocket
operator|::
name|protocolServerSide_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QSsl
operator|::
name|SslProtocol
argument_list|>
argument_list|(
literal|"serverProtocol"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QSsl
operator|::
name|SslProtocol
argument_list|>
argument_list|(
literal|"clientProtocol"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"works"
argument_list|)
expr_stmt|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_SSL2
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ssl2-ssl2"
argument_list|)
operator|<<
name|QSsl
operator|::
name|SslV2
operator|<<
name|QSsl
operator|::
name|SslV2
operator|<<
literal|false
expr_stmt|;
comment|// no idea why it does not work, but we don't care about SSL 2
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ssl3-ssl3"
argument_list|)
operator|<<
name|QSsl
operator|::
name|SslV3
operator|<<
name|QSsl
operator|::
name|SslV3
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"tls1.0-tls1.0"
argument_list|)
operator|<<
name|QSsl
operator|::
name|TlsV1_0
operator|<<
name|QSsl
operator|::
name|TlsV1_0
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"tls1ssl3-tls1ssl3"
argument_list|)
operator|<<
name|QSsl
operator|::
name|TlsV1SslV3
operator|<<
name|QSsl
operator|::
name|TlsV1SslV3
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"any-any"
argument_list|)
operator|<<
name|QSsl
operator|::
name|AnyProtocol
operator|<<
name|QSsl
operator|::
name|AnyProtocol
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"secure-secure"
argument_list|)
operator|<<
name|QSsl
operator|::
name|SecureProtocols
operator|<<
name|QSsl
operator|::
name|SecureProtocols
operator|<<
literal|true
expr_stmt|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_SSL2
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ssl2-ssl3"
argument_list|)
operator|<<
name|QSsl
operator|::
name|SslV2
operator|<<
name|QSsl
operator|::
name|SslV3
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ssl2-tls1.0"
argument_list|)
operator|<<
name|QSsl
operator|::
name|SslV2
operator|<<
name|QSsl
operator|::
name|TlsV1_0
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ssl2-tls1ssl3"
argument_list|)
operator|<<
name|QSsl
operator|::
name|SslV2
operator|<<
name|QSsl
operator|::
name|TlsV1SslV3
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ssl2-secure"
argument_list|)
operator|<<
name|QSsl
operator|::
name|SslV2
operator|<<
name|QSsl
operator|::
name|SecureProtocols
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ssl2-any"
argument_list|)
operator|<<
name|QSsl
operator|::
name|SslV2
operator|<<
name|QSsl
operator|::
name|AnyProtocol
operator|<<
literal|false
expr_stmt|;
comment|// no idea why it does not work, but we don't care about SSL 2
endif|#
directive|endif
ifndef|#
directive|ifndef
name|OPENSSL_NO_SSL2
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ssl3-ssl2"
argument_list|)
operator|<<
name|QSsl
operator|::
name|SslV3
operator|<<
name|QSsl
operator|::
name|SslV2
operator|<<
literal|false
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ssl3-tls1.0"
argument_list|)
operator|<<
name|QSsl
operator|::
name|SslV3
operator|<<
name|QSsl
operator|::
name|TlsV1_0
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ssl3-tls1ssl3"
argument_list|)
operator|<<
name|QSsl
operator|::
name|SslV3
operator|<<
name|QSsl
operator|::
name|TlsV1SslV3
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ssl3-secure"
argument_list|)
operator|<<
name|QSsl
operator|::
name|SslV3
operator|<<
name|QSsl
operator|::
name|SecureProtocols
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"ssl3-any"
argument_list|)
operator|<<
name|QSsl
operator|::
name|SslV3
operator|<<
name|QSsl
operator|::
name|AnyProtocol
operator|<<
literal|false
expr_stmt|;
comment|// we wont set a SNI header here because we connect to a
comment|// numerical IP, so OpenSSL will send a SSL 2 handshake
ifndef|#
directive|ifndef
name|OPENSSL_NO_SSL2
name|QTest
operator|::
name|newRow
argument_list|(
literal|"tls1.0-ssl2"
argument_list|)
operator|<<
name|QSsl
operator|::
name|TlsV1_0
operator|<<
name|QSsl
operator|::
name|SslV2
operator|<<
literal|false
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"tls1.0-ssl3"
argument_list|)
operator|<<
name|QSsl
operator|::
name|TlsV1_0
operator|<<
name|QSsl
operator|::
name|SslV3
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"tls1-tls1ssl3"
argument_list|)
operator|<<
name|QSsl
operator|::
name|TlsV1_0
operator|<<
name|QSsl
operator|::
name|TlsV1SslV3
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"tls1.0-secure"
argument_list|)
operator|<<
name|QSsl
operator|::
name|TlsV1_0
operator|<<
name|QSsl
operator|::
name|SecureProtocols
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"tls1.0-any"
argument_list|)
operator|<<
name|QSsl
operator|::
name|TlsV1_0
operator|<<
name|QSsl
operator|::
name|AnyProtocol
operator|<<
literal|false
expr_stmt|;
comment|// we wont set a SNI header here because we connect to a
comment|// numerical IP, so OpenSSL will send a SSL 2 handshake
ifndef|#
directive|ifndef
name|OPENSSL_NO_SSL2
name|QTest
operator|::
name|newRow
argument_list|(
literal|"tls1ssl3-ssl2"
argument_list|)
operator|<<
name|QSsl
operator|::
name|TlsV1SslV3
operator|<<
name|QSsl
operator|::
name|SslV2
operator|<<
literal|false
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"tls1ssl3-ssl3"
argument_list|)
operator|<<
name|QSsl
operator|::
name|TlsV1SslV3
operator|<<
name|QSsl
operator|::
name|SslV3
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"tls1ssl3-tls1.0"
argument_list|)
operator|<<
name|QSsl
operator|::
name|TlsV1SslV3
operator|<<
name|QSsl
operator|::
name|TlsV1_0
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"tls1ssl3-secure"
argument_list|)
operator|<<
name|QSsl
operator|::
name|TlsV1SslV3
operator|<<
name|QSsl
operator|::
name|SecureProtocols
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"tls1ssl3-any"
argument_list|)
operator|<<
name|QSsl
operator|::
name|TlsV1SslV3
operator|<<
name|QSsl
operator|::
name|AnyProtocol
operator|<<
literal|true
expr_stmt|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_SSL2
name|QTest
operator|::
name|newRow
argument_list|(
literal|"secure-ssl2"
argument_list|)
operator|<<
name|QSsl
operator|::
name|SecureProtocols
operator|<<
name|QSsl
operator|::
name|SslV2
operator|<<
literal|false
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"secure-ssl3"
argument_list|)
operator|<<
name|QSsl
operator|::
name|SecureProtocols
operator|<<
name|QSsl
operator|::
name|SslV3
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"secure-tls1.0"
argument_list|)
operator|<<
name|QSsl
operator|::
name|SecureProtocols
operator|<<
name|QSsl
operator|::
name|TlsV1_0
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"secure-tls1ssl3"
argument_list|)
operator|<<
name|QSsl
operator|::
name|SecureProtocols
operator|<<
name|QSsl
operator|::
name|TlsV1SslV3
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"secure-any"
argument_list|)
operator|<<
name|QSsl
operator|::
name|SecureProtocols
operator|<<
name|QSsl
operator|::
name|AnyProtocol
operator|<<
literal|true
expr_stmt|;
ifndef|#
directive|ifndef
name|OPENSSL_NO_SSL2
name|QTest
operator|::
name|newRow
argument_list|(
literal|"any-ssl2"
argument_list|)
operator|<<
name|QSsl
operator|::
name|AnyProtocol
operator|<<
name|QSsl
operator|::
name|SslV2
operator|<<
literal|false
expr_stmt|;
comment|// no idea why it does not work, but we don't care about SSL 2
endif|#
directive|endif
name|QTest
operator|::
name|newRow
argument_list|(
literal|"any-ssl3"
argument_list|)
operator|<<
name|QSsl
operator|::
name|AnyProtocol
operator|<<
name|QSsl
operator|::
name|SslV3
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"any-tls1.0"
argument_list|)
operator|<<
name|QSsl
operator|::
name|AnyProtocol
operator|<<
name|QSsl
operator|::
name|TlsV1_0
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"any-tls1ssl3"
argument_list|)
operator|<<
name|QSsl
operator|::
name|AnyProtocol
operator|<<
name|QSsl
operator|::
name|TlsV1SslV3
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"any-secure"
argument_list|)
operator|<<
name|QSsl
operator|::
name|AnyProtocol
operator|<<
name|QSsl
operator|::
name|SecureProtocols
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|protocolServerSide
name|void
name|tst_QSslSocket
operator|::
name|protocolServerSide
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QSslSocket
operator|::
name|supportsSsl
argument_list|()
condition|)
block|{
name|qWarning
argument_list|(
literal|"SSL not supported, skipping test"
argument_list|)
expr_stmt|;
return|return;
block|}
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
return|return;
name|QFETCH
argument_list|(
name|QSsl
operator|::
name|SslProtocol
argument_list|,
name|serverProtocol
argument_list|)
expr_stmt|;
name|SslServer
name|server
decl_stmt|;
name|server
operator|.
name|protocol
operator|=
name|serverProtocol
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|listen
argument_list|()
argument_list|)
expr_stmt|;
name|QEventLoop
name|loop
decl_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|5000
argument_list|,
operator|&
name|loop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QSslSocketPtr
name|client
init|=
operator|new
name|QSslSocket
decl_stmt|;
name|socket
operator|=
name|client
expr_stmt|;
name|QFETCH
argument_list|(
name|QSsl
operator|::
name|SslProtocol
argument_list|,
name|clientProtocol
argument_list|)
expr_stmt|;
name|socket
operator|->
name|setProtocol
argument_list|(
name|clientProtocol
argument_list|)
expr_stmt|;
comment|// upon SSL wrong version error, error will be triggered, not sslErrors
name|connect
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|error
argument_list|(
name|QAbstractSocket
operator|::
name|SocketError
argument_list|)
argument_list|)
argument_list|,
operator|&
name|loop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|sslErrors
argument_list|(
specifier|const
name|QList
argument_list|<
name|QSslError
argument_list|>
operator|&
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|ignoreErrorSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|client
argument_list|,
name|SIGNAL
argument_list|(
name|encrypted
argument_list|()
argument_list|)
argument_list|,
operator|&
name|loop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|->
name|connectToHostEncrypted
argument_list|(
name|QHostAddress
argument_list|(
name|QHostAddress
operator|::
name|LocalHost
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|server
operator|.
name|serverPort
argument_list|()
argument_list|)
expr_stmt|;
name|loop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|works
argument_list|)
expr_stmt|;
name|QAbstractSocket
operator|::
name|SocketState
name|expectedState
init|=
operator|(
name|works
operator|)
condition|?
name|QAbstractSocket
operator|::
name|ConnectedState
else|:
name|QAbstractSocket
operator|::
name|UnconnectedState
decl_stmt|;
name|QCOMPARE
argument_list|(
name|int
argument_list|(
name|client
operator|->
name|state
argument_list|()
argument_list|)
argument_list|,
name|int
argument_list|(
name|expectedState
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|client
operator|->
name|isEncrypted
argument_list|()
argument_list|,
name|works
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setCaCertificates
name|void
name|tst_QSslSocket
operator|::
name|setCaCertificates
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QSslSocket
operator|::
name|supportsSsl
argument_list|()
condition|)
return|return;
name|QSslSocket
name|socket
decl_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|caCertificates
argument_list|()
argument_list|,
name|QSslSocket
operator|::
name|defaultCaCertificates
argument_list|()
argument_list|)
expr_stmt|;
name|socket
operator|.
name|setCaCertificates
argument_list|(
name|QSslCertificate
operator|::
name|fromPath
argument_list|(
name|SRCDIR
literal|"certs/qt-test-server-cacert.pem"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|caCertificates
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|socket
operator|.
name|setCaCertificates
argument_list|(
name|socket
operator|.
name|defaultCaCertificates
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|caCertificates
argument_list|()
argument_list|,
name|QSslSocket
operator|::
name|defaultCaCertificates
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setLocalCertificate
name|void
name|tst_QSslSocket
operator|::
name|setLocalCertificate
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|setPrivateKey
name|void
name|tst_QSslSocket
operator|::
name|setPrivateKey
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|setSocketDescriptor
name|void
name|tst_QSslSocket
operator|::
name|setSocketDescriptor
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QSslSocket
operator|::
name|supportsSsl
argument_list|()
condition|)
return|return;
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
return|return;
name|SslServer
name|server
decl_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|listen
argument_list|()
argument_list|)
expr_stmt|;
name|QEventLoop
name|loop
decl_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|5000
argument_list|,
operator|&
name|loop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QSslSocketPtr
name|client
init|=
operator|new
name|QSslSocket
decl_stmt|;
name|socket
operator|=
name|client
expr_stmt|;
name|connect
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|sslErrors
argument_list|(
specifier|const
name|QList
argument_list|<
name|QSslError
argument_list|>
operator|&
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|ignoreErrorSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|client
argument_list|,
name|SIGNAL
argument_list|(
name|encrypted
argument_list|()
argument_list|)
argument_list|,
operator|&
name|loop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|client
operator|->
name|connectToHostEncrypted
argument_list|(
name|QHostAddress
argument_list|(
name|QHostAddress
operator|::
name|LocalHost
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|server
operator|.
name|serverPort
argument_list|()
argument_list|)
expr_stmt|;
name|loop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|client
operator|->
name|state
argument_list|()
argument_list|,
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|client
operator|->
name|isEncrypted
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|client
operator|->
name|peerAddress
argument_list|()
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|client
operator|->
name|peerPort
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|client
operator|->
name|localAddress
argument_list|()
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|client
operator|->
name|localPort
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setSslConfiguration_data
name|void
name|tst_QSslSocket
operator|::
name|setSslConfiguration_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QSslConfiguration
argument_list|>
argument_list|(
literal|"configuration"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"works"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty"
argument_list|)
operator|<<
name|QSslConfiguration
argument_list|()
operator|<<
literal|false
expr_stmt|;
name|QSslConfiguration
name|conf
init|=
name|QSslConfiguration
operator|::
name|defaultConfiguration
argument_list|()
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"default"
argument_list|)
operator|<<
name|conf
operator|<<
literal|false
expr_stmt|;
comment|// does not contain test server cert
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
name|testServerCert
init|=
name|QSslCertificate
operator|::
name|fromPath
argument_list|(
name|SRCDIR
literal|"certs/qt-test-server-cacert.pem"
argument_list|)
decl_stmt|;
name|conf
operator|.
name|setCaCertificates
argument_list|(
name|testServerCert
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"set-root-cert"
argument_list|)
operator|<<
name|conf
operator|<<
literal|true
expr_stmt|;
name|conf
operator|.
name|setProtocol
argument_list|(
name|QSsl
operator|::
name|SecureProtocols
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"secure"
argument_list|)
operator|<<
name|conf
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setSslConfiguration
name|void
name|tst_QSslSocket
operator|::
name|setSslConfiguration
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QSslSocket
operator|::
name|supportsSsl
argument_list|()
condition|)
return|return;
name|QSslSocketPtr
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|QFETCH
argument_list|(
name|QSslConfiguration
argument_list|,
name|configuration
argument_list|)
expr_stmt|;
name|socket
operator|->
name|setSslConfiguration
argument_list|(
name|configuration
argument_list|)
expr_stmt|;
name|this
operator|->
name|socket
operator|=
name|socket
expr_stmt|;
name|socket
operator|->
name|connectToHostEncrypted
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|443
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|works
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|waitForEncrypted
argument_list|(
literal|10000
argument_list|)
argument_list|,
name|works
argument_list|)
expr_stmt|;
if|if
condition|(
name|works
condition|)
block|{
name|socket
operator|->
name|disconnectFromHost
argument_list|()
expr_stmt|;
name|QVERIFY2
argument_list|(
name|socket
operator|->
name|waitForDisconnected
argument_list|()
argument_list|,
name|qPrintable
argument_list|(
name|socket
operator|->
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|waitForEncrypted
name|void
name|tst_QSslSocket
operator|::
name|waitForEncrypted
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QSslSocket
operator|::
name|supportsSsl
argument_list|()
condition|)
return|return;
name|QSslSocketPtr
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|this
operator|->
name|socket
operator|=
name|socket
expr_stmt|;
name|connect
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|sslErrors
argument_list|(
specifier|const
name|QList
argument_list|<
name|QSslError
argument_list|>
operator|&
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|ignoreErrorSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|->
name|connectToHostEncrypted
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|443
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForEncrypted
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|waitForEncryptedMinusOne
name|void
name|tst_QSslSocket
operator|::
name|waitForEncryptedMinusOne
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QSslSocket
operator|::
name|supportsSsl
argument_list|()
condition|)
return|return;
name|QSslSocketPtr
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|this
operator|->
name|socket
operator|=
name|socket
expr_stmt|;
name|connect
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|sslErrors
argument_list|(
specifier|const
name|QList
argument_list|<
name|QSslError
argument_list|>
operator|&
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|ignoreErrorSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|->
name|connectToHostEncrypted
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|443
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForEncrypted
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|waitForConnectedEncryptedReadyRead
name|void
name|tst_QSslSocket
operator|::
name|waitForConnectedEncryptedReadyRead
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QSslSocket
operator|::
name|supportsSsl
argument_list|()
condition|)
return|return;
name|QSslSocketPtr
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|this
operator|->
name|socket
operator|=
name|socket
expr_stmt|;
name|connect
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|sslErrors
argument_list|(
specifier|const
name|QList
argument_list|<
name|QSslError
argument_list|>
operator|&
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|ignoreErrorSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|->
name|connectToHostEncrypted
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|993
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForConnected
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForEncrypted
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForReadyRead
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|->
name|peerCertificate
argument_list|()
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|->
name|peerCertificateChain
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|startClientEncryption
name|void
name|tst_QSslSocket
operator|::
name|startClientEncryption
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|startServerEncryption
name|void
name|tst_QSslSocket
operator|::
name|startServerEncryption
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|addDefaultCaCertificate
name|void
name|tst_QSslSocket
operator|::
name|addDefaultCaCertificate
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QSslSocket
operator|::
name|supportsSsl
argument_list|()
condition|)
return|return;
comment|// Reset the global CA chain
name|QSslSocket
operator|::
name|setDefaultCaCertificates
argument_list|(
name|QSslSocket
operator|::
name|systemCaCertificates
argument_list|()
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
name|flukeCerts
init|=
name|QSslCertificate
operator|::
name|fromPath
argument_list|(
name|SRCDIR
literal|"certs/qt-test-server-cacert.pem"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|flukeCerts
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
name|globalCerts
init|=
name|QSslSocket
operator|::
name|defaultCaCertificates
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|globalCerts
operator|.
name|contains
argument_list|(
name|flukeCerts
operator|.
name|first
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QSslSocket
operator|::
name|addDefaultCaCertificate
argument_list|(
name|flukeCerts
operator|.
name|first
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QSslSocket
operator|::
name|defaultCaCertificates
argument_list|()
operator|.
name|size
argument_list|()
argument_list|,
name|globalCerts
operator|.
name|size
argument_list|()
operator|+
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QSslSocket
operator|::
name|defaultCaCertificates
argument_list|()
operator|.
name|contains
argument_list|(
name|flukeCerts
operator|.
name|first
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// Restore the global CA chain
name|QSslSocket
operator|::
name|setDefaultCaCertificates
argument_list|(
name|QSslSocket
operator|::
name|systemCaCertificates
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|addDefaultCaCertificates
name|void
name|tst_QSslSocket
operator|::
name|addDefaultCaCertificates
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|addDefaultCaCertificates2
name|void
name|tst_QSslSocket
operator|::
name|addDefaultCaCertificates2
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|defaultCaCertificates
name|void
name|tst_QSslSocket
operator|::
name|defaultCaCertificates
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QSslSocket
operator|::
name|supportsSsl
argument_list|()
condition|)
return|return;
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
name|certs
init|=
name|QSslSocket
operator|::
name|defaultCaCertificates
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|certs
operator|.
name|size
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|certs
argument_list|,
name|QSslSocket
operator|::
name|systemCaCertificates
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|defaultCiphers
name|void
name|tst_QSslSocket
operator|::
name|defaultCiphers
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|resetDefaultCiphers
name|void
name|tst_QSslSocket
operator|::
name|resetDefaultCiphers
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|setDefaultCaCertificates
name|void
name|tst_QSslSocket
operator|::
name|setDefaultCaCertificates
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|setDefaultCiphers
name|void
name|tst_QSslSocket
operator|::
name|setDefaultCiphers
parameter_list|()
block|{ }
end_function
begin_function
DECL|function|supportedCiphers
name|void
name|tst_QSslSocket
operator|::
name|supportedCiphers
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QSslSocket
operator|::
name|supportsSsl
argument_list|()
condition|)
return|return;
name|QList
argument_list|<
name|QSslCipher
argument_list|>
name|ciphers
init|=
name|QSslSocket
operator|::
name|supportedCiphers
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|ciphers
operator|.
name|size
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
name|QSslSocket
name|socket
decl_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|supportedCiphers
argument_list|()
argument_list|,
name|ciphers
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|defaultCiphers
argument_list|()
argument_list|,
name|ciphers
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|ciphers
argument_list|()
argument_list|,
name|ciphers
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|systemCaCertificates
name|void
name|tst_QSslSocket
operator|::
name|systemCaCertificates
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QSslSocket
operator|::
name|supportsSsl
argument_list|()
condition|)
return|return;
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
name|certs
init|=
name|QSslSocket
operator|::
name|systemCaCertificates
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|certs
operator|.
name|size
argument_list|()
operator|>
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|certs
argument_list|,
name|QSslSocket
operator|::
name|defaultCaCertificates
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|wildcardCertificateNames
name|void
name|tst_QSslSocket
operator|::
name|wildcardCertificateNames
parameter_list|()
block|{
comment|// Passing CN matches
name|QCOMPARE
argument_list|(
name|QSslSocketBackendPrivate
operator|::
name|isMatchingHostname
argument_list|(
name|QString
argument_list|(
literal|"www.example.com"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"www.example.com"
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QSslSocketBackendPrivate
operator|::
name|isMatchingHostname
argument_list|(
name|QString
argument_list|(
literal|"*.example.com"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"www.example.com"
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QSslSocketBackendPrivate
operator|::
name|isMatchingHostname
argument_list|(
name|QString
argument_list|(
literal|"xxx*.example.com"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"xxxwww.example.com"
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QSslSocketBackendPrivate
operator|::
name|isMatchingHostname
argument_list|(
name|QString
argument_list|(
literal|"f*.example.com"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"foo.example.com"
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QSslSocketBackendPrivate
operator|::
name|isMatchingHostname
argument_list|(
name|QString
argument_list|(
literal|"192.168.0.0"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"192.168.0.0"
argument_list|)
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// Failing CN matches
name|QCOMPARE
argument_list|(
name|QSslSocketBackendPrivate
operator|::
name|isMatchingHostname
argument_list|(
name|QString
argument_list|(
literal|"xxx.example.com"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"www.example.com"
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QSslSocketBackendPrivate
operator|::
name|isMatchingHostname
argument_list|(
name|QString
argument_list|(
literal|"*"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"www.example.com"
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QSslSocketBackendPrivate
operator|::
name|isMatchingHostname
argument_list|(
name|QString
argument_list|(
literal|"*.*.com"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"www.example.com"
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QSslSocketBackendPrivate
operator|::
name|isMatchingHostname
argument_list|(
name|QString
argument_list|(
literal|"*.example.com"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"baa.foo.example.com"
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QSslSocketBackendPrivate
operator|::
name|isMatchingHostname
argument_list|(
name|QString
argument_list|(
literal|"f*.example.com"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"baa.example.com"
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QSslSocketBackendPrivate
operator|::
name|isMatchingHostname
argument_list|(
name|QString
argument_list|(
literal|"*.com"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"example.com"
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QSslSocketBackendPrivate
operator|::
name|isMatchingHostname
argument_list|(
name|QString
argument_list|(
literal|"*fail.com"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"example.com"
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QSslSocketBackendPrivate
operator|::
name|isMatchingHostname
argument_list|(
name|QString
argument_list|(
literal|"*.example."
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"www.example."
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QSslSocketBackendPrivate
operator|::
name|isMatchingHostname
argument_list|(
name|QString
argument_list|(
literal|"*.example."
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"www.example"
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QSslSocketBackendPrivate
operator|::
name|isMatchingHostname
argument_list|(
name|QString
argument_list|(
literal|""
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"www"
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QSslSocketBackendPrivate
operator|::
name|isMatchingHostname
argument_list|(
name|QString
argument_list|(
literal|"*"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"www"
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QSslSocketBackendPrivate
operator|::
name|isMatchingHostname
argument_list|(
name|QString
argument_list|(
literal|"*.168.0.0"
argument_list|)
argument_list|,
name|QString
argument_list|(
literal|"192.168.0.0"
argument_list|)
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|wildcard
name|void
name|tst_QSslSocket
operator|::
name|wildcard
parameter_list|()
block|{
name|QSKIP
argument_list|(
literal|"TODO: solve wildcard problem"
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|QSslSocket
operator|::
name|supportsSsl
argument_list|()
condition|)
return|return;
comment|// Fluke runs an apache server listening on port 4443, serving the
comment|// wildcard fluke.*.troll.no.  The DNS entry for
comment|// fluke.wildcard.dev.troll.no, served by ares (root for dev.troll.no),
comment|// returns the CNAME fluke.troll.no for this domain. The web server
comment|// responds with the wildcard, and QSslSocket should accept that as a
comment|// valid connection.  This was broken in 4.3.0.
name|QSslSocketPtr
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|socket
operator|->
name|addCaCertificates
argument_list|(
name|QLatin1String
argument_list|(
literal|"certs/aspiriniks.ca.crt"
argument_list|)
argument_list|)
expr_stmt|;
name|this
operator|->
name|socket
operator|=
name|socket
expr_stmt|;
ifdef|#
directive|ifdef
name|QSSLSOCKET_CERTUNTRUSTED_WORKAROUND
name|connect
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|sslErrors
argument_list|(
name|QList
argument_list|<
name|QSslError
argument_list|>
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|untrustedWorkaroundSlot
argument_list|(
name|QList
argument_list|<
name|QSslError
argument_list|>
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|socket
operator|->
name|connectToHostEncrypted
argument_list|(
name|QtNetworkSettings
operator|::
name|wildcardServerName
argument_list|()
argument_list|,
literal|4443
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|socket
operator|->
name|waitForEncrypted
argument_list|(
literal|3000
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|socket
operator|->
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QSslCertificate
name|certificate
init|=
name|socket
operator|->
name|peerCertificate
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|certificate
operator|.
name|subjectInfo
argument_list|(
name|QSslCertificate
operator|::
name|CommonName
argument_list|)
argument_list|,
name|QString
argument_list|(
name|QtNetworkSettings
operator|::
name|serverLocalName
argument_list|()
operator|+
literal|".*."
operator|+
name|QtNetworkSettings
operator|::
name|serverDomainName
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|certificate
operator|.
name|issuerInfo
argument_list|(
name|QSslCertificate
operator|::
name|CommonName
argument_list|)
argument_list|,
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|)
expr_stmt|;
name|socket
operator|->
name|close
argument_list|()
expr_stmt|;
block|}
end_function
begin_class
DECL|class|SslServer2
class|class
name|SslServer2
super|:
specifier|public
name|QTcpServer
block|{
protected|protected:
DECL|function|incomingConnection
name|void
name|incomingConnection
parameter_list|(
name|int
name|socketDescriptor
parameter_list|)
block|{
name|QSslSocket
modifier|*
name|socket
init|=
operator|new
name|QSslSocket
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|socket
operator|->
name|ignoreSslErrors
argument_list|()
expr_stmt|;
comment|// Only set the certificate
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
name|localCert
init|=
name|QSslCertificate
operator|::
name|fromPath
argument_list|(
name|SRCDIR
literal|"certs/fluke.cert"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|localCert
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|localCert
operator|.
name|first
argument_list|()
operator|.
name|handle
argument_list|()
argument_list|)
expr_stmt|;
name|socket
operator|->
name|setLocalCertificate
argument_list|(
name|localCert
operator|.
name|first
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|setSocketDescriptor
argument_list|(
name|socketDescriptor
argument_list|,
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|->
name|startServerEncryption
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|setEmptyKey
name|void
name|tst_QSslSocket
operator|::
name|setEmptyKey
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QSslSocket
operator|::
name|supportsSsl
argument_list|()
condition|)
return|return;
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
return|return;
name|SslServer2
name|server
decl_stmt|;
name|server
operator|.
name|listen
argument_list|()
expr_stmt|;
name|QSslSocket
name|socket
decl_stmt|;
name|socket
operator|.
name|connectToHostEncrypted
argument_list|(
literal|"127.0.0.1"
argument_list|,
name|server
operator|.
name|serverPort
argument_list|()
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|state
argument_list|()
argument_list|,
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|error
argument_list|()
argument_list|,
name|QAbstractSocket
operator|::
name|UnknownSocketError
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|spontaneousWrite
name|void
name|tst_QSslSocket
operator|::
name|spontaneousWrite
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
return|return;
name|SslServer
name|server
decl_stmt|;
name|QSslSocket
modifier|*
name|receiver
init|=
operator|new
name|QSslSocket
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|receiver
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// connect two sockets to each other:
name|QVERIFY
argument_list|(
name|server
operator|.
name|listen
argument_list|(
name|QHostAddress
operator|::
name|LocalHost
argument_list|)
argument_list|)
expr_stmt|;
name|receiver
operator|->
name|connectToHost
argument_list|(
literal|"127.0.0.1"
argument_list|,
name|server
operator|.
name|serverPort
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|receiver
operator|->
name|waitForConnected
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|waitForNewConnection
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QSslSocket
modifier|*
name|sender
init|=
name|server
operator|.
name|socket
decl_stmt|;
name|QVERIFY
argument_list|(
name|sender
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sender
operator|->
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
name|receiver
operator|->
name|setObjectName
argument_list|(
literal|"receiver"
argument_list|)
expr_stmt|;
name|sender
operator|->
name|setObjectName
argument_list|(
literal|"sender"
argument_list|)
expr_stmt|;
name|receiver
operator|->
name|ignoreSslErrors
argument_list|()
expr_stmt|;
name|receiver
operator|->
name|startClientEncryption
argument_list|()
expr_stmt|;
comment|// SSL handshake:
name|connect
argument_list|(
name|receiver
argument_list|,
name|SIGNAL
argument_list|(
name|encrypted
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|enterLoop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sender
operator|->
name|isEncrypted
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|receiver
operator|->
name|isEncrypted
argument_list|()
argument_list|)
expr_stmt|;
comment|// make sure there's nothing to be received on the sender:
while|while
condition|(
name|sender
operator|->
name|waitForReadyRead
argument_list|(
literal|10
argument_list|)
operator|||
name|receiver
operator|->
name|waitForBytesWritten
argument_list|(
literal|10
argument_list|)
condition|)
block|{}
comment|// spontaneously write something:
name|QByteArray
name|data
argument_list|(
literal|"Hello World"
argument_list|)
decl_stmt|;
name|sender
operator|->
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
comment|// check if the other side receives it:
name|enterLoop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|receiver
operator|->
name|bytesAvailable
argument_list|()
argument_list|,
name|qint64
argument_list|(
name|data
operator|.
name|size
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|receiver
operator|->
name|readAll
argument_list|()
argument_list|,
name|data
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setReadBufferSize
name|void
name|tst_QSslSocket
operator|::
name|setReadBufferSize
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
return|return;
name|SslServer
name|server
decl_stmt|;
name|QSslSocket
modifier|*
name|receiver
init|=
operator|new
name|QSslSocket
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|receiver
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// connect two sockets to each other:
name|QVERIFY
argument_list|(
name|server
operator|.
name|listen
argument_list|(
name|QHostAddress
operator|::
name|LocalHost
argument_list|)
argument_list|)
expr_stmt|;
name|receiver
operator|->
name|connectToHost
argument_list|(
literal|"127.0.0.1"
argument_list|,
name|server
operator|.
name|serverPort
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|receiver
operator|->
name|waitForConnected
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|waitForNewConnection
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QSslSocket
modifier|*
name|sender
init|=
name|server
operator|.
name|socket
decl_stmt|;
name|QVERIFY
argument_list|(
name|sender
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sender
operator|->
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
name|receiver
operator|->
name|setObjectName
argument_list|(
literal|"receiver"
argument_list|)
expr_stmt|;
name|sender
operator|->
name|setObjectName
argument_list|(
literal|"sender"
argument_list|)
expr_stmt|;
name|receiver
operator|->
name|ignoreSslErrors
argument_list|()
expr_stmt|;
name|receiver
operator|->
name|startClientEncryption
argument_list|()
expr_stmt|;
comment|// SSL handshake:
name|connect
argument_list|(
name|receiver
argument_list|,
name|SIGNAL
argument_list|(
name|encrypted
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|enterLoop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sender
operator|->
name|isEncrypted
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|receiver
operator|->
name|isEncrypted
argument_list|()
argument_list|)
expr_stmt|;
name|QByteArray
name|data
argument_list|(
literal|2048
argument_list|,
literal|'b'
argument_list|)
decl_stmt|;
name|receiver
operator|->
name|setReadBufferSize
argument_list|(
literal|39
operator|*
literal|1024
argument_list|)
expr_stmt|;
comment|// make it a non-multiple of the data.size()
comment|// saturate the incoming buffer
while|while
condition|(
name|sender
operator|->
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
operator|&&
name|receiver
operator|->
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
operator|&&
name|receiver
operator|->
name|bytesAvailable
argument_list|()
operator|<
name|receiver
operator|->
name|readBufferSize
argument_list|()
condition|)
block|{
name|sender
operator|->
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
comment|//qDebug()<< receiver->bytesAvailable()<< "<"<< receiver->readBufferSize()<< (receiver->bytesAvailable()< receiver->readBufferSize());
while|while
condition|(
name|sender
operator|->
name|bytesToWrite
argument_list|()
condition|)
name|QVERIFY
argument_list|(
name|sender
operator|->
name|waitForBytesWritten
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
comment|// drain it:
while|while
condition|(
name|receiver
operator|->
name|bytesAvailable
argument_list|()
operator|<
name|receiver
operator|->
name|readBufferSize
argument_list|()
operator|&&
name|receiver
operator|->
name|waitForReadyRead
argument_list|(
literal|10
argument_list|)
condition|)
block|{}
block|}
comment|//qDebug()<< sender->bytesToWrite()<< "bytes to write";
comment|//qDebug()<< receiver->bytesAvailable()<< "bytes available";
comment|// send a bit more
name|sender
operator|->
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|sender
operator|->
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|sender
operator|->
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|sender
operator|->
name|write
argument_list|(
name|data
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sender
operator|->
name|waitForBytesWritten
argument_list|(
literal|10
argument_list|)
argument_list|)
expr_stmt|;
name|qint64
name|oldBytesAvailable
init|=
name|receiver
operator|->
name|bytesAvailable
argument_list|()
decl_stmt|;
comment|// now unset the read buffer limit and iterate
name|receiver
operator|->
name|setReadBufferSize
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|enterLoop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|receiver
operator|->
name|bytesAvailable
argument_list|()
operator|>
name|oldBytesAvailable
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|SetReadBufferSize_task_250027_handler
class|class
name|SetReadBufferSize_task_250027_handler
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
DECL|function|readyReadSlot
name|void
name|readyReadSlot
parameter_list|()
block|{
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|exitLoop
argument_list|()
expr_stmt|;
block|}
DECL|function|waitSomeMore
name|void
name|waitSomeMore
parameter_list|(
name|QSslSocket
modifier|*
name|socket
parameter_list|)
block|{
name|QTime
name|t
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
operator|!
name|socket
operator|->
name|encryptedBytesAvailable
argument_list|()
condition|)
block|{
name|QCoreApplication
operator|::
name|processEvents
argument_list|(
name|QEventLoop
operator|::
name|AllEvents
operator||
name|QEventLoop
operator|::
name|WaitForMoreEvents
argument_list|,
literal|250
argument_list|)
expr_stmt|;
if|if
condition|(
name|t
operator|.
name|elapsed
argument_list|()
operator|>
literal|1000
operator|||
name|socket
operator|->
name|state
argument_list|()
operator|!=
name|QAbstractSocket
operator|::
name|ConnectedState
condition|)
return|return;
block|}
block|}
block|}
class|;
end_class
begin_function
DECL|function|setReadBufferSize_task_250027
name|void
name|tst_QSslSocket
operator|::
name|setReadBufferSize_task_250027
parameter_list|()
block|{
comment|// do not execute this when a proxy is set.
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
return|return;
name|QSslSocketPtr
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|socket
operator|->
name|setReadBufferSize
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
comment|// limit to 1 kb/sec
name|socket
operator|->
name|ignoreSslErrors
argument_list|()
expr_stmt|;
name|socket
operator|->
name|connectToHostEncrypted
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|443
argument_list|)
expr_stmt|;
name|socket
operator|->
name|ignoreSslErrors
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForConnected
argument_list|(
literal|10
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForEncrypted
argument_list|(
literal|10
operator|*
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
comment|// exit the event loop as soon as we receive a readyRead()
name|SetReadBufferSize_task_250027_handler
name|setReadBufferSize_task_250027_handler
decl_stmt|;
name|connect
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
operator|&
name|setReadBufferSize_task_250027_handler
argument_list|,
name|SLOT
argument_list|(
name|readyReadSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// provoke a response by sending a request
name|socket
operator|->
name|write
argument_list|(
literal|"GET /qtest/fluke.gif HTTP/1.0\n"
argument_list|)
expr_stmt|;
comment|// this file is 27 KB
name|socket
operator|->
name|write
argument_list|(
literal|"Host: "
argument_list|)
expr_stmt|;
name|socket
operator|->
name|write
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|socket
operator|->
name|write
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|socket
operator|->
name|write
argument_list|(
literal|"Connection: close\n"
argument_list|)
expr_stmt|;
name|socket
operator|->
name|write
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|socket
operator|->
name|flush
argument_list|()
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|setReadBufferSize_task_250027_handler
operator|.
name|waitSomeMore
argument_list|(
name|socket
argument_list|)
expr_stmt|;
name|QByteArray
name|firstRead
init|=
name|socket
operator|->
name|readAll
argument_list|()
decl_stmt|;
comment|// First read should be some data, but not the whole file
name|QVERIFY
argument_list|(
name|firstRead
operator|.
name|size
argument_list|()
operator|>
literal|0
operator|&&
name|firstRead
operator|.
name|size
argument_list|()
operator|<
literal|20
operator|*
literal|1024
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|setReadBufferSize_task_250027_handler
operator|.
name|waitSomeMore
argument_list|(
name|socket
argument_list|)
expr_stmt|;
name|QByteArray
name|secondRead
init|=
name|socket
operator|->
name|readAll
argument_list|()
decl_stmt|;
comment|// second read should be some more data
name|QVERIFY
argument_list|(
name|secondRead
operator|.
name|size
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
name|socket
operator|->
name|close
argument_list|()
expr_stmt|;
block|}
end_function
begin_class
DECL|class|SslServer3
class|class
name|SslServer3
super|:
specifier|public
name|QTcpServer
block|{
name|Q_OBJECT
public|public:
DECL|function|SslServer3
name|SslServer3
parameter_list|()
member_init_list|:
name|socket
argument_list|(
literal|0
argument_list|)
block|{ }
DECL|member|socket
name|QSslSocket
modifier|*
name|socket
decl_stmt|;
protected|protected:
DECL|function|incomingConnection
name|void
name|incomingConnection
parameter_list|(
name|int
name|socketDescriptor
parameter_list|)
block|{
name|socket
operator|=
operator|new
name|QSslSocket
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|sslErrors
argument_list|(
specifier|const
name|QList
argument_list|<
name|QSslError
argument_list|>
operator|&
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|ignoreErrorSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QFile
name|file
argument_list|(
name|SRCDIR
literal|"certs/fluke.key"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|file
operator|.
name|open
argument_list|(
name|QIODevice
operator|::
name|ReadOnly
argument_list|)
argument_list|)
expr_stmt|;
name|QSslKey
name|key
argument_list|(
name|file
operator|.
name|readAll
argument_list|()
argument_list|,
name|QSsl
operator|::
name|Rsa
argument_list|,
name|QSsl
operator|::
name|Pem
argument_list|,
name|QSsl
operator|::
name|PrivateKey
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|key
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|socket
operator|->
name|setPrivateKey
argument_list|(
name|key
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
name|localCert
init|=
name|QSslCertificate
operator|::
name|fromPath
argument_list|(
name|SRCDIR
literal|"certs/fluke.cert"
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|localCert
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|localCert
operator|.
name|first
argument_list|()
operator|.
name|handle
argument_list|()
argument_list|)
expr_stmt|;
name|socket
operator|->
name|setLocalCertificate
argument_list|(
name|localCert
operator|.
name|first
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|setSocketDescriptor
argument_list|(
name|socketDescriptor
argument_list|,
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|->
name|peerAddress
argument_list|()
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|peerPort
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|->
name|localAddress
argument_list|()
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|localPort
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
block|}
protected|protected
name|slots
protected|:
DECL|function|ignoreErrorSlot
name|void
name|ignoreErrorSlot
parameter_list|()
block|{
name|socket
operator|->
name|ignoreSslErrors
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|ThreadedSslServer
class|class
name|ThreadedSslServer
super|:
specifier|public
name|QThread
block|{
name|Q_OBJECT
public|public:
DECL|member|dataReadSemaphore
name|QSemaphore
name|dataReadSemaphore
decl_stmt|;
DECL|member|serverPort
name|int
name|serverPort
decl_stmt|;
DECL|member|ok
name|bool
name|ok
decl_stmt|;
DECL|function|ThreadedSslServer
name|ThreadedSslServer
parameter_list|()
member_init_list|:
name|serverPort
argument_list|(
operator|-
literal|1
argument_list|)
member_init_list|,
name|ok
argument_list|(
literal|false
argument_list|)
block|{ }
DECL|function|~ThreadedSslServer
name|~
name|ThreadedSslServer
parameter_list|()
block|{
if|if
condition|(
name|isRunning
argument_list|()
condition|)
name|wait
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ok
argument_list|)
expr_stmt|;
block|}
signals|signals:
name|void
name|listening
parameter_list|()
function_decl|;
protected|protected:
DECL|function|run
name|void
name|run
parameter_list|()
block|{
comment|// if all goes well (no timeouts), this thread will sleep for a total of 500 ms
comment|// (i.e., 5 times 100 ms, one sleep for each operation)
name|SslServer3
name|server
decl_stmt|;
name|server
operator|.
name|listen
argument_list|(
name|QHostAddress
operator|::
name|LocalHost
argument_list|)
expr_stmt|;
name|serverPort
operator|=
name|server
operator|.
name|serverPort
argument_list|()
expr_stmt|;
emit|emit
name|listening
argument_list|()
emit|;
comment|// delayed acceptance:
name|QTest
operator|::
name|qSleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|bool
name|ret
init|=
name|server
operator|.
name|waitForNewConnection
argument_list|(
literal|2000
argument_list|)
decl_stmt|;
name|Q_UNUSED
argument_list|(
name|ret
argument_list|)
expr_stmt|;
comment|// delayed start of encryption
name|QTest
operator|::
name|qSleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QSslSocket
modifier|*
name|socket
init|=
name|server
operator|.
name|socket
decl_stmt|;
if|if
condition|(
operator|!
name|socket
operator|||
operator|!
name|socket
operator|->
name|isValid
argument_list|()
condition|)
return|return;
comment|// error
name|socket
operator|->
name|ignoreSslErrors
argument_list|()
expr_stmt|;
name|socket
operator|->
name|startServerEncryption
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|socket
operator|->
name|waitForEncrypted
argument_list|(
literal|2000
argument_list|)
condition|)
return|return;
comment|// error
comment|// delayed reading data
name|QTest
operator|::
name|qSleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|socket
operator|->
name|waitForReadyRead
argument_list|(
literal|2000
argument_list|)
condition|)
return|return;
comment|// error
name|socket
operator|->
name|readAll
argument_list|()
expr_stmt|;
name|dataReadSemaphore
operator|.
name|release
argument_list|()
expr_stmt|;
comment|// delayed sending data
name|QTest
operator|::
name|qSleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|socket
operator|->
name|write
argument_list|(
literal|"Hello, World"
argument_list|)
expr_stmt|;
while|while
condition|(
name|socket
operator|->
name|bytesToWrite
argument_list|()
condition|)
if|if
condition|(
operator|!
name|socket
operator|->
name|waitForBytesWritten
argument_list|(
literal|2000
argument_list|)
condition|)
return|return;
comment|// error
comment|// delayed replying (reading then sending)
name|QTest
operator|::
name|qSleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
if|if
condition|(
operator|!
name|socket
operator|->
name|waitForReadyRead
argument_list|(
literal|2000
argument_list|)
condition|)
return|return;
comment|// error
name|socket
operator|->
name|write
argument_list|(
literal|"Hello, World"
argument_list|)
expr_stmt|;
while|while
condition|(
name|socket
operator|->
name|bytesToWrite
argument_list|()
condition|)
if|if
condition|(
operator|!
name|socket
operator|->
name|waitForBytesWritten
argument_list|(
literal|2000
argument_list|)
condition|)
return|return;
comment|// error
comment|// delayed disconnection:
name|QTest
operator|::
name|qSleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|socket
operator|->
name|disconnectFromHost
argument_list|()
expr_stmt|;
if|if
condition|(
operator|!
name|socket
operator|->
name|waitForDisconnected
argument_list|(
literal|2000
argument_list|)
condition|)
return|return;
comment|// error
operator|delete
name|socket
expr_stmt|;
name|ok
operator|=
literal|true
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|waitForMinusOne
name|void
name|tst_QSslSocket
operator|::
name|waitForMinusOne
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
return|return;
name|ThreadedSslServer
name|server
decl_stmt|;
name|connect
argument_list|(
operator|&
name|server
argument_list|,
name|SIGNAL
argument_list|(
name|listening
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// start the thread and wait for it to be ready
name|server
operator|.
name|start
argument_list|()
expr_stmt|;
name|enterLoop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
comment|// connect to the server
name|QSslSocket
name|socket
decl_stmt|;
name|QTest
operator|::
name|qSleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|socket
operator|.
name|connectToHost
argument_list|(
literal|"127.0.0.1"
argument_list|,
name|server
operator|.
name|serverPort
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|.
name|waitForConnected
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|.
name|ignoreSslErrors
argument_list|()
expr_stmt|;
name|socket
operator|.
name|startClientEncryption
argument_list|()
expr_stmt|;
comment|// first verification: this waiting should take 200 ms
name|QVERIFY2
argument_list|(
name|socket
operator|.
name|waitForEncrypted
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|socket
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|.
name|isEncrypted
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|state
argument_list|()
argument_list|,
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|bytesAvailable
argument_list|()
argument_list|,
name|Q_INT64_C
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// second verification: write and make sure the other side got it (100 ms)
name|socket
operator|.
name|write
argument_list|(
literal|"How are you doing?"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|.
name|bytesToWrite
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|.
name|waitForBytesWritten
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|dataReadSemaphore
operator|.
name|tryAcquire
argument_list|(
literal|1
argument_list|,
literal|2000
argument_list|)
argument_list|)
expr_stmt|;
comment|// third verification: it should wait for 100 ms:
name|QVERIFY
argument_list|(
name|socket
operator|.
name|waitForReadyRead
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|.
name|isEncrypted
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|state
argument_list|()
argument_list|,
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|.
name|bytesAvailable
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
comment|// fourth verification: deadlock prevention:
comment|// we write and then wait for reading; the other side needs to receive before
comment|// replying (100 ms delay)
name|socket
operator|.
name|write
argument_list|(
literal|"I'm doing just fine!"
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|.
name|bytesToWrite
argument_list|()
operator|!=
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|.
name|waitForReadyRead
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
comment|// fifth verification: it should wait for 200 ms more
name|QVERIFY
argument_list|(
name|socket
operator|.
name|waitForDisconnected
argument_list|(
operator|-
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|VerifyServer
class|class
name|VerifyServer
super|:
specifier|public
name|QTcpServer
block|{
name|Q_OBJECT
public|public:
DECL|function|VerifyServer
name|VerifyServer
parameter_list|()
member_init_list|:
name|socket
argument_list|(
literal|0
argument_list|)
block|{ }
DECL|member|socket
name|QSslSocket
modifier|*
name|socket
decl_stmt|;
protected|protected:
DECL|function|incomingConnection
name|void
name|incomingConnection
parameter_list|(
name|int
name|socketDescriptor
parameter_list|)
block|{
name|socket
operator|=
operator|new
name|QSslSocket
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|socket
operator|->
name|setPrivateKey
argument_list|(
name|SRCDIR
literal|"certs/fluke.key"
argument_list|)
expr_stmt|;
name|socket
operator|->
name|setLocalCertificate
argument_list|(
name|SRCDIR
literal|"certs/fluke.cert"
argument_list|)
expr_stmt|;
name|socket
operator|->
name|setSocketDescriptor
argument_list|(
name|socketDescriptor
argument_list|)
expr_stmt|;
name|socket
operator|->
name|startServerEncryption
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|verifyMode
name|void
name|tst_QSslSocket
operator|::
name|verifyMode
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
return|return;
name|QSslSocket
name|socket
decl_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|peerVerifyMode
argument_list|()
argument_list|,
name|QSslSocket
operator|::
name|AutoVerifyPeer
argument_list|)
expr_stmt|;
name|socket
operator|.
name|setPeerVerifyMode
argument_list|(
name|QSslSocket
operator|::
name|VerifyNone
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|peerVerifyMode
argument_list|()
argument_list|,
name|QSslSocket
operator|::
name|VerifyNone
argument_list|)
expr_stmt|;
name|socket
operator|.
name|setPeerVerifyMode
argument_list|(
name|QSslSocket
operator|::
name|VerifyNone
argument_list|)
expr_stmt|;
name|socket
operator|.
name|setPeerVerifyMode
argument_list|(
name|QSslSocket
operator|::
name|VerifyPeer
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|peerVerifyMode
argument_list|()
argument_list|,
name|QSslSocket
operator|::
name|VerifyPeer
argument_list|)
expr_stmt|;
name|socket
operator|.
name|connectToHostEncrypted
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|443
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|.
name|waitForEncrypted
argument_list|()
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QSslError
argument_list|>
name|expectedErrors
init|=
name|QList
argument_list|<
name|QSslError
argument_list|>
argument_list|()
operator|<<
name|QSslError
argument_list|(
name|QSslError
operator|::
name|SelfSignedCertificate
argument_list|,
name|socket
operator|.
name|peerCertificate
argument_list|()
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|sslErrors
argument_list|()
argument_list|,
name|expectedErrors
argument_list|)
expr_stmt|;
name|socket
operator|.
name|abort
argument_list|()
expr_stmt|;
name|VerifyServer
name|server
decl_stmt|;
name|server
operator|.
name|listen
argument_list|()
expr_stmt|;
name|QSslSocket
name|clientSocket
decl_stmt|;
name|clientSocket
operator|.
name|connectToHostEncrypted
argument_list|(
literal|"127.0.0.1"
argument_list|,
name|server
operator|.
name|serverPort
argument_list|()
argument_list|)
expr_stmt|;
name|clientSocket
operator|.
name|ignoreSslErrors
argument_list|()
expr_stmt|;
name|QEventLoop
name|loop
decl_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|5000
argument_list|,
operator|&
name|loop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|clientSocket
argument_list|,
name|SIGNAL
argument_list|(
name|encrypted
argument_list|()
argument_list|)
argument_list|,
operator|&
name|loop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|loop
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|clientSocket
operator|.
name|isEncrypted
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|socket
operator|->
name|sslErrors
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|verifyDepth
name|void
name|tst_QSslSocket
operator|::
name|verifyDepth
parameter_list|()
block|{
name|QSslSocket
name|socket
decl_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|peerVerifyDepth
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|socket
operator|.
name|setPeerVerifyDepth
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|peerVerifyDepth
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QSslSocket::setPeerVerifyDepth: cannot set negative depth of -1"
argument_list|)
expr_stmt|;
name|socket
operator|.
name|setPeerVerifyDepth
argument_list|(
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|peerVerifyDepth
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|peerVerifyError
name|void
name|tst_QSslSocket
operator|::
name|peerVerifyError
parameter_list|()
block|{
name|QSslSocketPtr
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|QSignalSpy
name|sslErrorsSpy
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|sslErrors
argument_list|(
name|QList
argument_list|<
name|QSslError
argument_list|>
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|peerVerifyErrorSpy
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|peerVerifyError
argument_list|(
name|QSslError
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|socket
operator|->
name|connectToHostEncrypted
argument_list|(
name|QHostInfo
operator|::
name|fromName
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|)
operator|.
name|addresses
argument_list|()
operator|.
name|first
argument_list|()
operator|.
name|toString
argument_list|()
argument_list|,
literal|443
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|->
name|waitForEncrypted
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|peerVerifyErrorSpy
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|sslErrorsSpy
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qVariantValue
argument_list|<
name|QSslError
argument_list|>
argument_list|(
name|peerVerifyErrorSpy
operator|.
name|last
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|error
argument_list|()
argument_list|,
name|QSslError
operator|::
name|HostNameMismatch
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qVariantValue
argument_list|<
name|QList
argument_list|<
name|QSslError
argument_list|>
argument_list|>
argument_list|(
name|sslErrorsSpy
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
operator|.
name|size
argument_list|()
argument_list|,
name|peerVerifyErrorSpy
operator|.
name|size
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|disconnectFromHostWhenConnecting
name|void
name|tst_QSslSocket
operator|::
name|disconnectFromHostWhenConnecting
parameter_list|()
block|{
name|QSslSocketPtr
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|socket
operator|->
name|connectToHostEncrypted
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|993
argument_list|)
expr_stmt|;
name|socket
operator|->
name|ignoreSslErrors
argument_list|()
expr_stmt|;
name|socket
operator|->
name|write
argument_list|(
literal|"XXXX LOGOUT\r\n"
argument_list|)
expr_stmt|;
name|QAbstractSocket
operator|::
name|SocketState
name|state
init|=
name|socket
operator|->
name|state
argument_list|()
decl_stmt|;
comment|// without proxy, the state will be HostLookupState;
comment|// with    proxy, the state will be ConnectingState.
name|QVERIFY
argument_list|(
name|socket
operator|->
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|HostLookupState
operator|||
name|socket
operator|->
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectingState
argument_list|)
expr_stmt|;
name|socket
operator|->
name|disconnectFromHost
argument_list|()
expr_stmt|;
comment|// the state of the socket must be the same before and after calling
comment|// disconnectFromHost()
name|QCOMPARE
argument_list|(
name|state
argument_list|,
name|socket
operator|->
name|state
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|HostLookupState
operator|||
name|socket
operator|->
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectingState
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForDisconnected
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|state
argument_list|()
argument_list|,
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
comment|// we did not call close, so the socket must be still open
name|QVERIFY
argument_list|(
name|socket
operator|->
name|isOpen
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|bytesToWrite
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
comment|// don't forget to login
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|socket
operator|->
name|write
argument_list|(
literal|"USER ftptest\r\n"
argument_list|)
argument_list|,
literal|14
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|disconnectFromHostWhenConnected
name|void
name|tst_QSslSocket
operator|::
name|disconnectFromHostWhenConnected
parameter_list|()
block|{
name|QSslSocketPtr
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|socket
operator|->
name|connectToHostEncrypted
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|993
argument_list|)
expr_stmt|;
name|socket
operator|->
name|ignoreSslErrors
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForEncrypted
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|->
name|write
argument_list|(
literal|"XXXX LOGOUT\r\n"
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|state
argument_list|()
argument_list|,
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
name|socket
operator|->
name|disconnectFromHost
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|state
argument_list|()
argument_list|,
name|QAbstractSocket
operator|::
name|ClosingState
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForDisconnected
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|->
name|bytesToWrite
argument_list|()
argument_list|,
name|qint64
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resetProxy
name|void
name|tst_QSslSocket
operator|::
name|resetProxy
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
return|return;
comment|// check fix for bug 199941
name|QNetworkProxy
name|goodProxy
argument_list|(
name|QNetworkProxy
operator|::
name|NoProxy
argument_list|)
decl_stmt|;
name|QNetworkProxy
name|badProxy
argument_list|(
name|QNetworkProxy
operator|::
name|HttpProxy
argument_list|,
literal|"thisCannotWorkAbsolutelyNotForSure"
argument_list|,
literal|333
argument_list|)
decl_stmt|;
comment|// make sure the connection works, and then set a nonsense proxy, and then
comment|// make sure it does not work anymore
name|QSslSocket
name|socket
decl_stmt|;
name|socket
operator|.
name|addCaCertificates
argument_list|(
name|QLatin1String
argument_list|(
name|SRCDIR
literal|"certs/qt-test-server-cacert.pem"
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|.
name|setProxy
argument_list|(
name|goodProxy
argument_list|)
expr_stmt|;
name|socket
operator|.
name|connectToHostEncrypted
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|443
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|socket
operator|.
name|waitForConnected
argument_list|(
literal|10000
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|socket
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|.
name|abort
argument_list|()
expr_stmt|;
name|socket
operator|.
name|setProxy
argument_list|(
name|badProxy
argument_list|)
expr_stmt|;
name|socket
operator|.
name|connectToHostEncrypted
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|443
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|.
name|waitForConnected
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
comment|// don't forget to login
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|socket
operator|.
name|write
argument_list|(
literal|"USER ftptest\r\n"
argument_list|)
argument_list|,
literal|14
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|(
name|int
operator|)
name|socket
operator|.
name|write
argument_list|(
literal|"PASS password\r\n"
argument_list|)
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|enterLoop
argument_list|(
literal|10
argument_list|)
expr_stmt|;
comment|// now the other way round:
comment|// set the nonsense proxy and make sure the connection does not work,
comment|// and then set the right proxy and make sure it works
name|QSslSocket
name|socket2
decl_stmt|;
name|socket2
operator|.
name|addCaCertificates
argument_list|(
name|QLatin1String
argument_list|(
name|SRCDIR
literal|"certs/qt-test-server-cacert.pem"
argument_list|)
argument_list|)
expr_stmt|;
name|socket2
operator|.
name|setProxy
argument_list|(
name|badProxy
argument_list|)
expr_stmt|;
name|socket2
operator|.
name|connectToHostEncrypted
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|443
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket2
operator|.
name|waitForConnected
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|socket2
operator|.
name|abort
argument_list|()
expr_stmt|;
name|socket2
operator|.
name|setProxy
argument_list|(
name|goodProxy
argument_list|)
expr_stmt|;
name|socket2
operator|.
name|connectToHostEncrypted
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|443
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|socket2
operator|.
name|waitForConnected
argument_list|(
literal|10000
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|socket
operator|.
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ignoreSslErrorsList_data
name|void
name|tst_QSslSocket
operator|::
name|ignoreSslErrorsList_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QList
argument_list|<
name|QSslError
argument_list|>
argument_list|>
argument_list|(
literal|"expectedSslErrors"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"expectedSslErrorSignalCount"
argument_list|)
expr_stmt|;
comment|// construct the list of errors that we will get with the SSL handshake and that we will ignore
name|QList
argument_list|<
name|QSslError
argument_list|>
name|expectedSslErrors
decl_stmt|;
comment|// fromPath gives us a list of certs, but it actually only contains one
name|QList
argument_list|<
name|QSslCertificate
argument_list|>
name|certs
init|=
name|QSslCertificate
operator|::
name|fromPath
argument_list|(
name|QLatin1String
argument_list|(
name|SRCDIR
literal|"certs/qt-test-server-cacert.pem"
argument_list|)
argument_list|)
decl_stmt|;
name|QSslError
name|rightError
argument_list|(
name|QSslError
operator|::
name|SelfSignedCertificate
argument_list|,
name|certs
operator|.
name|at
argument_list|(
literal|0
argument_list|)
argument_list|)
decl_stmt|;
name|QSslError
name|wrongError
argument_list|(
name|QSslError
operator|::
name|SelfSignedCertificate
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"SSL-failure-empty-list"
argument_list|)
operator|<<
name|expectedSslErrors
operator|<<
literal|1
expr_stmt|;
name|expectedSslErrors
operator|.
name|append
argument_list|(
name|wrongError
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"SSL-failure-wrong-error"
argument_list|)
operator|<<
name|expectedSslErrors
operator|<<
literal|1
expr_stmt|;
name|expectedSslErrors
operator|.
name|append
argument_list|(
name|rightError
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"allErrorsInExpectedList1"
argument_list|)
operator|<<
name|expectedSslErrors
operator|<<
literal|0
expr_stmt|;
name|expectedSslErrors
operator|.
name|removeAll
argument_list|(
name|wrongError
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"allErrorsInExpectedList2"
argument_list|)
operator|<<
name|expectedSslErrors
operator|<<
literal|0
expr_stmt|;
name|expectedSslErrors
operator|.
name|removeAll
argument_list|(
name|rightError
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"SSL-failure-empty-list-again"
argument_list|)
operator|<<
name|expectedSslErrors
operator|<<
literal|1
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ignoreSslErrorsList
name|void
name|tst_QSslSocket
operator|::
name|ignoreSslErrorsList
parameter_list|()
block|{
name|QSslSocket
name|socket
decl_stmt|;
name|connect
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|proxyAuthenticationRequired
argument_list|(
name|QNetworkProxy
argument_list|,
name|QAuthenticator
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|proxyAuthenticationRequired
argument_list|(
name|QNetworkProxy
argument_list|,
name|QAuthenticator
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
comment|//    this->socket =&socket;
name|QSslCertificate
name|cert
decl_stmt|;
name|QFETCH
argument_list|(
name|QList
argument_list|<
name|QSslError
argument_list|>
argument_list|,
name|expectedSslErrors
argument_list|)
expr_stmt|;
name|socket
operator|.
name|ignoreSslErrors
argument_list|(
name|expectedSslErrors
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expectedSslErrorSignalCount
argument_list|)
expr_stmt|;
name|QSignalSpy
name|sslErrorsSpy
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|error
argument_list|(
name|QAbstractSocket
operator|::
name|SocketError
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|socket
operator|.
name|connectToHostEncrypted
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|443
argument_list|)
expr_stmt|;
name|bool
name|expectEncryptionSuccess
init|=
operator|(
name|expectedSslErrorSignalCount
operator|==
literal|0
operator|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|waitForEncrypted
argument_list|(
literal|10000
argument_list|)
argument_list|,
name|expectEncryptionSuccess
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|sslErrorsSpy
operator|.
name|count
argument_list|()
argument_list|,
name|expectedSslErrorSignalCount
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ignoreSslErrorsListWithSlot_data
name|void
name|tst_QSslSocket
operator|::
name|ignoreSslErrorsListWithSlot_data
parameter_list|()
block|{
name|ignoreSslErrorsList_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|// this is not a test, just a slot called in the test below
end_comment
begin_function
DECL|function|ignoreErrorListSlot
name|void
name|tst_QSslSocket
operator|::
name|ignoreErrorListSlot
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QSslError
argument_list|>
modifier|&
parameter_list|)
block|{
name|socket
operator|->
name|ignoreSslErrors
argument_list|(
name|storedExpectedSslErrors
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|ignoreSslErrorsListWithSlot
name|void
name|tst_QSslSocket
operator|::
name|ignoreSslErrorsListWithSlot
parameter_list|()
block|{
name|QSslSocket
name|socket
decl_stmt|;
name|this
operator|->
name|socket
operator|=
operator|&
name|socket
expr_stmt|;
name|QFETCH
argument_list|(
name|QList
argument_list|<
name|QSslError
argument_list|>
argument_list|,
name|expectedSslErrors
argument_list|)
expr_stmt|;
comment|// store the errors to ignore them later in the slot connected below
name|storedExpectedSslErrors
operator|=
name|expectedSslErrors
expr_stmt|;
name|connect
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|proxyAuthenticationRequired
argument_list|(
name|QNetworkProxy
argument_list|,
name|QAuthenticator
operator|*
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|proxyAuthenticationRequired
argument_list|(
name|QNetworkProxy
argument_list|,
name|QAuthenticator
operator|*
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|sslErrors
argument_list|(
specifier|const
name|QList
argument_list|<
name|QSslError
argument_list|>
operator|&
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|ignoreErrorListSlot
argument_list|(
specifier|const
name|QList
argument_list|<
name|QSslError
argument_list|>
operator|&
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|.
name|connectToHostEncrypted
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|443
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|expectedSslErrorSignalCount
argument_list|)
expr_stmt|;
name|bool
name|expectEncryptionSuccess
init|=
operator|(
name|expectedSslErrorSignalCount
operator|==
literal|0
operator|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|socket
operator|.
name|waitForEncrypted
argument_list|(
literal|10000
argument_list|)
argument_list|,
name|expectEncryptionSuccess
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// make sure a closed socket has no bytesAvailable()
end_comment
begin_comment
comment|// related to https://bugs.webkit.org/show_bug.cgi?id=28016
end_comment
begin_function
DECL|function|readFromClosedSocket
name|void
name|tst_QSslSocket
operator|::
name|readFromClosedSocket
parameter_list|()
block|{
name|QSslSocketPtr
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|socket
operator|->
name|ignoreSslErrors
argument_list|()
expr_stmt|;
name|socket
operator|->
name|connectToHostEncrypted
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|443
argument_list|)
expr_stmt|;
name|socket
operator|->
name|ignoreSslErrors
argument_list|()
expr_stmt|;
name|socket
operator|->
name|waitForConnected
argument_list|()
expr_stmt|;
name|socket
operator|->
name|waitForEncrypted
argument_list|()
expr_stmt|;
comment|// provoke a response by sending a request
name|socket
operator|->
name|write
argument_list|(
literal|"GET /qtest/fluke.gif HTTP/1.1\n"
argument_list|)
expr_stmt|;
name|socket
operator|->
name|write
argument_list|(
literal|"Host: "
argument_list|)
expr_stmt|;
name|socket
operator|->
name|write
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
operator|.
name|toLocal8Bit
argument_list|()
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|socket
operator|->
name|write
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|socket
operator|->
name|write
argument_list|(
literal|"\n"
argument_list|)
expr_stmt|;
name|socket
operator|->
name|waitForBytesWritten
argument_list|()
expr_stmt|;
name|socket
operator|->
name|waitForReadyRead
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|bytesAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|socket
operator|->
name|close
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|->
name|bytesAvailable
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|socket
operator|->
name|bytesToWrite
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|socket
operator|->
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|UnconnectedState
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|writeBigChunk
name|void
name|tst_QSslSocket
operator|::
name|writeBigChunk
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QSslSocket
operator|::
name|supportsSsl
argument_list|()
condition|)
return|return;
name|QSslSocketPtr
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|this
operator|->
name|socket
operator|=
name|socket
expr_stmt|;
name|connect
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|sslErrors
argument_list|(
specifier|const
name|QList
argument_list|<
name|QSslError
argument_list|>
operator|&
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|ignoreErrorSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|->
name|connectToHostEncrypted
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|443
argument_list|)
expr_stmt|;
name|QByteArray
name|data
decl_stmt|;
name|data
operator|.
name|resize
argument_list|(
literal|1024
operator|*
literal|1024
operator|*
literal|10
argument_list|)
expr_stmt|;
comment|// 10 MB
comment|// init with garbage. needed so ssl cannot compress it in an efficient way.
for|for
control|(
name|size_t
name|i
init|=
literal|0
init|;
name|i
operator|<
name|data
operator|.
name|size
argument_list|()
operator|/
sizeof|sizeof
argument_list|(
name|int
argument_list|)
condition|;
name|i
operator|++
control|)
block|{
name|int
name|r
init|=
name|qrand
argument_list|()
decl_stmt|;
name|data
operator|.
name|data
argument_list|()
index|[
name|i
operator|*
sizeof|sizeof
argument_list|(
name|int
argument_list|)
index|]
operator|=
name|r
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|socket
operator|->
name|waitForEncrypted
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|QString
name|errorBefore
init|=
name|socket
operator|->
name|errorString
argument_list|()
decl_stmt|;
name|int
name|ret
init|=
name|socket
operator|->
name|write
argument_list|(
name|data
operator|.
name|constData
argument_list|()
argument_list|,
name|data
operator|.
name|size
argument_list|()
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|data
operator|.
name|size
argument_list|()
operator|==
name|ret
argument_list|)
expr_stmt|;
comment|// spin the event loop once so QSslSocket::transmit() gets called
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QString
name|errorAfter
init|=
name|socket
operator|->
name|errorString
argument_list|()
decl_stmt|;
comment|// no better way to do this right now since the error is the same as the default error.
if|if
condition|(
name|socket
operator|->
name|errorString
argument_list|()
operator|.
name|startsWith
argument_list|(
name|QLatin1String
argument_list|(
literal|"Unable to write data"
argument_list|)
argument_list|)
condition|)
block|{
name|qWarning
argument_list|()
operator|<<
name|socket
operator|->
name|error
argument_list|()
operator|<<
name|socket
operator|->
name|errorString
argument_list|()
expr_stmt|;
name|QFAIL
argument_list|(
literal|"Error while writing! Check if the OpenSSL BIO size is limited?!"
argument_list|)
expr_stmt|;
block|}
comment|// also check the error string. If another error (than UnknownError) occurred, it should be different than before
name|QVERIFY
argument_list|(
name|errorBefore
operator|==
name|errorAfter
argument_list|)
expr_stmt|;
comment|// check that everything has been written to OpenSSL
name|QVERIFY
argument_list|(
name|socket
operator|->
name|bytesToWrite
argument_list|()
operator|==
literal|0
argument_list|)
expr_stmt|;
name|socket
operator|->
name|close
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|blacklistedCertificates
name|void
name|tst_QSslSocket
operator|::
name|blacklistedCertificates
parameter_list|()
block|{
name|QFETCH_GLOBAL
argument_list|(
name|bool
argument_list|,
name|setProxy
argument_list|)
expr_stmt|;
if|if
condition|(
name|setProxy
condition|)
return|return;
name|SslServer
name|server
argument_list|(
name|SRCDIR
literal|"certs/fake-login.live.com.key"
argument_list|,
name|SRCDIR
literal|"certs/fake-login.live.com.pem"
argument_list|)
decl_stmt|;
name|QSslSocket
modifier|*
name|receiver
init|=
operator|new
name|QSslSocket
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|connect
argument_list|(
name|receiver
argument_list|,
name|SIGNAL
argument_list|(
name|readyRead
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
comment|// connect two sockets to each other:
name|QVERIFY
argument_list|(
name|server
operator|.
name|listen
argument_list|(
name|QHostAddress
operator|::
name|LocalHost
argument_list|)
argument_list|)
expr_stmt|;
name|receiver
operator|->
name|connectToHost
argument_list|(
literal|"127.0.0.1"
argument_list|,
name|server
operator|.
name|serverPort
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|receiver
operator|->
name|waitForConnected
argument_list|(
literal|5000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|server
operator|.
name|waitForNewConnection
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QSslSocket
modifier|*
name|sender
init|=
name|server
operator|.
name|socket
decl_stmt|;
name|QVERIFY
argument_list|(
name|sender
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|sender
operator|->
name|state
argument_list|()
operator|==
name|QAbstractSocket
operator|::
name|ConnectedState
argument_list|)
expr_stmt|;
name|receiver
operator|->
name|setObjectName
argument_list|(
literal|"receiver"
argument_list|)
expr_stmt|;
name|sender
operator|->
name|setObjectName
argument_list|(
literal|"sender"
argument_list|)
expr_stmt|;
name|receiver
operator|->
name|startClientEncryption
argument_list|()
expr_stmt|;
name|connect
argument_list|(
name|receiver
argument_list|,
name|SIGNAL
argument_list|(
name|sslErrors
argument_list|(
name|QList
argument_list|<
name|QSslError
argument_list|>
argument_list|)
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|receiver
argument_list|,
name|SIGNAL
argument_list|(
name|encrypted
argument_list|()
argument_list|)
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|enterLoop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QSslError
argument_list|>
name|sslErrors
init|=
name|receiver
operator|->
name|sslErrors
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|sslErrors
operator|.
name|count
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
comment|// there are more errors (self signed cert and hostname mismatch), but we only care about the blacklist error
name|QCOMPARE
argument_list|(
name|sslErrors
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|error
argument_list|()
argument_list|,
name|QSslError
operator|::
name|CertificateBlacklisted
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setEmptyDefaultConfiguration
name|void
name|tst_QSslSocket
operator|::
name|setEmptyDefaultConfiguration
parameter_list|()
block|{
comment|// used to produce a crash in QSslConfigurationPrivate::deepCopyDefaultConfiguration, QTBUG-13265
if|if
condition|(
operator|!
name|QSslSocket
operator|::
name|supportsSsl
argument_list|()
condition|)
return|return;
name|QSslConfiguration
name|emptyConf
decl_stmt|;
name|QSslConfiguration
operator|::
name|setDefaultConfiguration
argument_list|(
name|emptyConf
argument_list|)
expr_stmt|;
name|QSslSocketPtr
name|socket
init|=
name|newSocket
argument_list|()
decl_stmt|;
name|connect
argument_list|(
name|socket
argument_list|,
name|SIGNAL
argument_list|(
name|sslErrors
argument_list|(
specifier|const
name|QList
argument_list|<
name|QSslError
argument_list|>
operator|&
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|ignoreErrorSlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|socket
operator|->
name|connectToHostEncrypted
argument_list|(
name|QtNetworkSettings
operator|::
name|serverName
argument_list|()
argument_list|,
literal|443
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
operator|!
name|socket
operator|->
name|waitForEncrypted
argument_list|(
literal|4000
argument_list|)
argument_list|,
name|qPrintable
argument_list|(
name|socket
operator|->
name|errorString
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|versionAccessors
name|void
name|tst_QSslSocket
operator|::
name|versionAccessors
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QSslSocket
operator|::
name|supportsSsl
argument_list|()
condition|)
return|return;
name|qDebug
argument_list|()
operator|<<
name|QSslSocket
operator|::
name|sslLibraryVersionString
argument_list|()
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
name|QString
operator|::
name|number
argument_list|(
name|QSslSocket
operator|::
name|sslLibraryVersionNumber
argument_list|()
argument_list|,
literal|16
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sslOptions
name|void
name|tst_QSslSocket
operator|::
name|sslOptions
parameter_list|()
block|{
if|if
condition|(
operator|!
name|QSslSocket
operator|::
name|supportsSsl
argument_list|()
condition|)
return|return;
name|QCOMPARE
argument_list|(
name|QSslSocketBackendPrivate
operator|::
name|setupOpenSslOptions
argument_list|(
name|QSsl
operator|::
name|SecureProtocols
argument_list|,
name|QSsl
operator|::
name|SslOptionDisableEmptyFragments
operator||
name|QSsl
operator|::
name|SslOptionDisableLegacyRenegotiation
argument_list|)
argument_list|,
name|long
argument_list|(
name|SSL_OP_ALL
operator||
name|SSL_OP_NO_SSLv2
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION
name|QCOMPARE
argument_list|(
name|QSslSocketBackendPrivate
operator|::
name|setupOpenSslOptions
argument_list|(
name|QSsl
operator|::
name|SecureProtocols
argument_list|,
name|QSsl
operator|::
name|SslOptionDisableEmptyFragments
argument_list|)
argument_list|,
name|long
argument_list|(
operator|(
name|SSL_OP_ALL
operator||
name|SSL_OP_NO_SSLv2
operator||
name|SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION
operator|)
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS
name|QCOMPARE
argument_list|(
name|QSslSocketBackendPrivate
operator|::
name|setupOpenSslOptions
argument_list|(
name|QSsl
operator|::
name|SecureProtocols
argument_list|,
name|QSsl
operator|::
name|SslOptionDisableLegacyRenegotiation
argument_list|)
argument_list|,
name|long
argument_list|(
operator|(
name|SSL_OP_ALL
operator||
name|SSL_OP_NO_SSLv2
operator|)
operator|&
operator|~
name|SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|SSL_OP_NO_TICKET
name|QCOMPARE
argument_list|(
name|QSslSocketBackendPrivate
operator|::
name|setupOpenSslOptions
argument_list|(
name|QSsl
operator|::
name|SecureProtocols
argument_list|,
name|QSsl
operator|::
name|SslOptionDisableEmptyFragments
operator||
name|QSsl
operator|::
name|SslOptionDisableLegacyRenegotiation
operator||
name|QSsl
operator|::
name|SslOptionDisableSessionTickets
argument_list|)
argument_list|,
name|long
argument_list|(
operator|(
name|SSL_OP_ALL
operator||
name|SSL_OP_NO_SSLv2
operator||
name|SSL_OP_NO_TICKET
operator|)
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
ifdef|#
directive|ifdef
name|SSL_OP_NO_TICKET
ifdef|#
directive|ifdef
name|SSL_OP_NO_COMPRESSION
name|QCOMPARE
argument_list|(
name|QSslSocketBackendPrivate
operator|::
name|setupOpenSslOptions
argument_list|(
name|QSsl
operator|::
name|SecureProtocols
argument_list|,
name|QSsl
operator|::
name|SslOptionDisableEmptyFragments
operator||
name|QSsl
operator|::
name|SslOptionDisableLegacyRenegotiation
operator||
name|QSsl
operator|::
name|SslOptionDisableSessionTickets
operator||
name|QSsl
operator|::
name|SslOptionDisableCompression
argument_list|)
argument_list|,
name|long
argument_list|(
operator|(
name|SSL_OP_ALL
operator||
name|SSL_OP_NO_SSLv2
operator||
name|SSL_OP_NO_TICKET
operator||
name|SSL_OP_NO_COMPRESSION
operator|)
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
endif|#
directive|endif
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_OPENSSL
end_comment
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QSslSocket
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qsslsocket.moc"
end_include
end_unit
