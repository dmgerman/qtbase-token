begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2014 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia. For licensing terms and ** conditions see http://qt.digia.com/licensing. For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights. These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qsslerror.h>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qhostaddress.h>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/qnetworkproxy.h>
end_include
begin_class
DECL|class|tst_QSslError
class|class
name|tst_QSslError
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|enterLoop
specifier|static
name|void
name|enterLoop
parameter_list|(
name|int
name|secs
parameter_list|)
block|{
operator|++
name|loopLevel
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
name|secs
argument_list|)
expr_stmt|;
operator|--
name|loopLevel
expr_stmt|;
block|}
DECL|function|exitLoop
specifier|static
name|void
name|exitLoop
parameter_list|()
block|{
comment|// Safe exit - if we aren't in an event loop, don't
comment|// exit one.
if|if
condition|(
name|loopLevel
operator|>
literal|0
condition|)
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|exitLoop
argument_list|()
expr_stmt|;
block|}
DECL|function|timeout
specifier|static
name|bool
name|timeout
parameter_list|()
block|{
return|return
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
return|;
block|}
ifndef|#
directive|ifndef
name|QT_NO_SSL
private|private
name|slots
private|:
name|void
name|constructing
parameter_list|()
function_decl|;
name|void
name|hash
parameter_list|()
function_decl|;
endif|#
directive|endif
private|private:
DECL|member|loopLevel
specifier|static
name|int
name|loopLevel
decl_stmt|;
block|}
class|;
end_class
begin_decl_stmt
DECL|member|loopLevel
name|int
name|tst_QSslError
operator|::
name|loopLevel
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_SSL
end_ifndef
begin_function
DECL|function|constructing
name|void
name|tst_QSslError
operator|::
name|constructing
parameter_list|()
block|{
name|QSslError
name|error
decl_stmt|;
block|}
end_function
begin_function
DECL|function|hash
name|void
name|tst_QSslError
operator|::
name|hash
parameter_list|()
block|{
comment|// mostly a compile-only test, to check that qHash(QSslError) is found
name|QSet
argument_list|<
name|QSslError
argument_list|>
name|errors
decl_stmt|;
name|errors
operator|<<
name|QSslError
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|errors
operator|.
name|size
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_SSL
end_comment
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QSslError
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qsslerror.moc"
end_include
end_unit
