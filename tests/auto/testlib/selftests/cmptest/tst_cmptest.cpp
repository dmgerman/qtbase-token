begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:GPL-EXCEPT$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3 as published by the Free Software ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore/QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|QT_GUI_LIB
end_ifdef
begin_include
include|#
directive|include
file|<QtGui/QColor>
end_include
begin_include
include|#
directive|include
file|<QtGui/QImage>
end_include
begin_include
include|#
directive|include
file|<QtGui/QPixmap>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|/* XPM test data for QPixmap, QImage tests (use drag cursors as example) */
end_comment
begin_decl_stmt
DECL|variable|xpmPixmapData1
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|xpmPixmapData1
index|[]
init|=
block|{
literal|"11 20 3 1"
block|,
literal|".        c None"
block|,
literal|"a        c #FFFFFF"
block|,
literal|"X        c #000000"
block|,
comment|// X11 cursor is traditionally black
literal|"aa........."
block|,
literal|"aXa........"
block|,
literal|"aXXa......."
block|,
literal|"aXXXa......"
block|,
literal|"aXXXXa....."
block|,
literal|"aXXXXXa...."
block|,
literal|"aXXXXXXa..."
block|,
literal|"aXXXXXXXa.."
block|,
literal|"aXXXXXXXXa."
block|,
literal|"aXXXXXXXXXa"
block|,
literal|"aXXXXXXaaaa"
block|,
literal|"aXXXaXXa..."
block|,
literal|"aXXaaXXa..."
block|,
literal|"aXa..aXXa.."
block|,
literal|"aa...aXXa.."
block|,
literal|"a.....aXXa."
block|,
literal|"......aXXa."
block|,
literal|".......aXXa"
block|,
literal|".......aXXa"
block|,
literal|"........aa."
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|xpmPixmapData2
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|xpmPixmapData2
index|[]
init|=
block|{
literal|"11 20 4 1"
block|,
literal|".        c None"
block|,
literal|"a        c #FFFFFF"
block|,
literal|"b        c #0000FF"
block|,
literal|"X        c #000000"
block|,
literal|"aab........"
block|,
literal|"aXab......."
block|,
literal|"aXXab......"
block|,
literal|"aXXXab....."
block|,
literal|"aXXXXab...."
block|,
literal|"aXXXXXab..."
block|,
literal|"aXXXXXXab.."
block|,
literal|"aXXXXXXXa.."
block|,
literal|"aXXXXXXXXa."
block|,
literal|"aXXXXXXXXXa"
block|,
literal|"aXXXXXXaaaa"
block|,
literal|"aXXXaXXa..."
block|,
literal|"aXXaaXXa..."
block|,
literal|"aXa..aXXa.."
block|,
literal|"aa...aXXa.."
block|,
literal|"a.....aXXa."
block|,
literal|"......aXXa."
block|,
literal|".......aXXa"
block|,
literal|".......aXXa"
block|,
literal|"........aa."
block|}
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|xpmPixmapData3
specifier|static
specifier|const
name|char
modifier|*
specifier|const
name|xpmPixmapData3
index|[]
init|=
block|{
literal|"20 20 2 1"
block|,
literal|"       c #000000"
block|,
literal|".      c #C32D2D"
block|,
literal|"          .........."
block|,
literal|"            ........"
block|,
literal|"             ......."
block|,
literal|"              ......"
block|,
literal|"                ...."
block|,
literal|"                  .."
block|,
literal|"                   ."
block|,
literal|"                    "
block|,
literal|"                    "
block|,
literal|".                   "
block|,
literal|"...                 "
block|,
literal|".....               "
block|,
literal|"......              "
block|,
literal|".......             "
block|,
literal|".........           "
block|,
literal|"...........         "
block|,
literal|"...........         "
block|,
literal|"............        "
block|,
literal|"............        "
block|,
literal|".............       "
block|}
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|tst_Cmptest
class|class
name|tst_Cmptest
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|class|MyClassEnum
DECL|member|MyClassEnumValue1
enum|enum class
name|MyClassEnum
block|{
name|MyClassEnumValue1
block|,
name|MyClassEnumValue2
block|}
enum|;
name|Q_ENUM
parameter_list|(
name|MyClassEnum
parameter_list|)
specifier|private
name|slots
public|:
name|void
name|compare_unregistered_enums
parameter_list|()
function_decl|;
name|void
name|compare_registered_enums
parameter_list|()
function_decl|;
name|void
name|compare_class_enums
parameter_list|()
function_decl|;
name|void
name|compare_boolfuncs
parameter_list|()
function_decl|;
name|void
name|compare_pointerfuncs
parameter_list|()
function_decl|;
name|void
name|compare_tostring
parameter_list|()
function_decl|;
name|void
name|compare_tostring_data
parameter_list|()
function_decl|;
name|void
name|compareQStringLists
parameter_list|()
function_decl|;
name|void
name|compareQStringLists_data
parameter_list|()
function_decl|;
name|void
name|compareQListInt
parameter_list|()
function_decl|;
name|void
name|compareQListDouble
parameter_list|()
function_decl|;
ifdef|#
directive|ifdef
name|QT_GUI_LIB
name|void
name|compareQColor
parameter_list|()
function_decl|;
name|void
name|compareQPixmaps
parameter_list|()
function_decl|;
name|void
name|compareQPixmaps_data
parameter_list|()
function_decl|;
name|void
name|compareQImages
parameter_list|()
function_decl|;
name|void
name|compareQImages_data
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|verify
parameter_list|()
function_decl|;
name|void
name|verify2
parameter_list|()
function_decl|;
name|void
name|tryVerify
parameter_list|()
function_decl|;
name|void
name|tryVerify2
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_enum
DECL|enum|MyUnregisteredEnum
DECL|enumerator|MyUnregisteredEnumValue1
DECL|enumerator|MyUnregisteredEnumValue2
enum|enum
name|MyUnregisteredEnum
block|{
name|MyUnregisteredEnumValue1
block|,
name|MyUnregisteredEnumValue2
block|}
enum|;
end_enum
begin_function
DECL|function|compare_unregistered_enums
name|void
name|tst_Cmptest
operator|::
name|compare_unregistered_enums
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
name|MyUnregisteredEnumValue1
argument_list|,
name|MyUnregisteredEnumValue1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|MyUnregisteredEnumValue1
argument_list|,
name|MyUnregisteredEnumValue2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compare_registered_enums
name|void
name|tst_Cmptest
operator|::
name|compare_registered_enums
parameter_list|()
block|{
comment|// use an enum that doesn't start at 0
name|QCOMPARE
argument_list|(
name|Qt
operator|::
name|Monday
argument_list|,
name|Qt
operator|::
name|Monday
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|Qt
operator|::
name|Monday
argument_list|,
name|Qt
operator|::
name|Sunday
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compare_class_enums
name|void
name|tst_Cmptest
operator|::
name|compare_class_enums
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
name|MyClassEnum
operator|::
name|MyClassEnumValue1
argument_list|,
name|MyClassEnum
operator|::
name|MyClassEnumValue1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|MyClassEnum
operator|::
name|MyClassEnumValue1
argument_list|,
name|MyClassEnum
operator|::
name|MyClassEnumValue2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|boolfunc
specifier|static
name|bool
name|boolfunc
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|boolfunc2
specifier|static
name|bool
name|boolfunc2
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|compare_boolfuncs
name|void
name|tst_Cmptest
operator|::
name|compare_boolfuncs
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
name|boolfunc
argument_list|()
argument_list|,
name|boolfunc
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|boolfunc
argument_list|()
argument_list|,
name|boolfunc2
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|!
name|boolfunc
argument_list|()
argument_list|,
operator|!
name|boolfunc2
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|boolfunc
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|!
name|boolfunc
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_decl_stmt
DECL|variable|i
specifier|static
name|int
name|i
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|intptr
specifier|static
name|int
modifier|*
name|intptr
parameter_list|()
block|{
return|return
operator|&
name|i
return|;
block|}
end_function
begin_function
DECL|function|compare_pointerfuncs
name|void
name|tst_Cmptest
operator|::
name|compare_pointerfuncs
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
name|intptr
argument_list|()
argument_list|,
name|intptr
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|&
name|i
argument_list|,
operator|&
name|i
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|intptr
argument_list|()
argument_list|,
operator|&
name|i
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|&
name|i
argument_list|,
name|intptr
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_struct
DECL|struct|PhonyClass
struct|struct
name|PhonyClass
block|{
DECL|member|i
name|int
name|i
decl_stmt|;
block|}
struct|;
end_struct
begin_function
DECL|function|compare_tostring_data
name|void
name|tst_Cmptest
operator|::
name|compare_tostring_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"actual"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int, string"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
literal|123
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QString
argument_list|(
literal|"hi"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"both invalid"
argument_list|)
operator|<<
name|QVariant
argument_list|()
operator|<<
name|QVariant
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null hash, invalid"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QVariant
operator|::
name|Hash
argument_list|)
operator|<<
name|QVariant
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"string, null user type"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"A simple string"
argument_list|)
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QVariant
operator|::
name|Type
argument_list|(
name|qRegisterMetaType
argument_list|<
name|PhonyClass
argument_list|>
argument_list|(
literal|"PhonyClass"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|PhonyClass
name|fake1
init|=
block|{
literal|1
block|}
decl_stmt|;
name|PhonyClass
name|fake2
init|=
block|{
literal|2
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"both non-null user type"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|qRegisterMetaType
argument_list|<
name|PhonyClass
argument_list|>
argument_list|(
literal|"PhonyClass"
argument_list|)
argument_list|,
operator|(
specifier|const
name|void
operator|*
operator|)
operator|&
name|fake1
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|qRegisterMetaType
argument_list|<
name|PhonyClass
argument_list|>
argument_list|(
literal|"PhonyClass"
argument_list|)
argument_list|,
operator|(
specifier|const
name|void
operator|*
operator|)
operator|&
name|fake2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compare_tostring
name|void
name|tst_Cmptest
operator|::
name|compare_tostring
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|actual
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compareQStringLists_data
name|void
name|tst_Cmptest
operator|::
name|compareQStringLists_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"opA"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QStringList
argument_list|>
argument_list|(
literal|"opB"
argument_list|)
expr_stmt|;
block|{
name|QStringList
name|opA
decl_stmt|;
name|QStringList
name|opB
argument_list|(
name|opA
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"empty lists"
argument_list|)
operator|<<
name|opA
operator|<<
name|opB
expr_stmt|;
block|}
block|{
name|QStringList
name|opA
decl_stmt|;
name|opA
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"string1"
argument_list|)
argument_list|)
expr_stmt|;
name|opA
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"string2"
argument_list|)
argument_list|)
expr_stmt|;
name|opA
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"string3"
argument_list|)
argument_list|)
expr_stmt|;
name|opA
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"string4"
argument_list|)
argument_list|)
expr_stmt|;
name|QStringList
name|opB
argument_list|(
name|opA
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"equal lists"
argument_list|)
operator|<<
name|opA
operator|<<
name|opB
expr_stmt|;
block|}
block|{
name|QStringList
name|opA
decl_stmt|;
name|opA
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"string1"
argument_list|)
argument_list|)
expr_stmt|;
name|opA
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"string2"
argument_list|)
argument_list|)
expr_stmt|;
name|QStringList
name|opB
argument_list|(
name|opA
argument_list|)
decl_stmt|;
name|opA
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"string3"
argument_list|)
argument_list|)
expr_stmt|;
name|opB
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"DIFFERS"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"last item different"
argument_list|)
operator|<<
name|opA
operator|<<
name|opB
expr_stmt|;
block|}
block|{
name|QStringList
name|opA
decl_stmt|;
name|opA
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"string1"
argument_list|)
argument_list|)
expr_stmt|;
name|opA
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"string2"
argument_list|)
argument_list|)
expr_stmt|;
name|QStringList
name|opB
argument_list|(
name|opA
argument_list|)
decl_stmt|;
name|opA
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"string3"
argument_list|)
argument_list|)
expr_stmt|;
name|opA
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"string4"
argument_list|)
argument_list|)
expr_stmt|;
name|opB
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"DIFFERS"
argument_list|)
argument_list|)
expr_stmt|;
name|opB
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"string4"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"second-last item different"
argument_list|)
operator|<<
name|opA
operator|<<
name|opB
expr_stmt|;
block|}
block|{
name|QStringList
name|opA
decl_stmt|;
name|opA
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"string1"
argument_list|)
argument_list|)
expr_stmt|;
name|opA
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"string2"
argument_list|)
argument_list|)
expr_stmt|;
name|QStringList
name|opB
decl_stmt|;
name|opB
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"string1"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"prefix"
argument_list|)
operator|<<
name|opA
operator|<<
name|opB
expr_stmt|;
block|}
block|{
name|QStringList
name|opA
decl_stmt|;
name|opA
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"openInNewWindow"
argument_list|)
argument_list|)
expr_stmt|;
name|opA
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"openInNewTab"
argument_list|)
argument_list|)
expr_stmt|;
name|opA
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"separator"
argument_list|)
argument_list|)
expr_stmt|;
name|opA
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"bookmark_add"
argument_list|)
argument_list|)
expr_stmt|;
name|opA
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"savelinkas"
argument_list|)
argument_list|)
expr_stmt|;
name|opA
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"copylinklocation"
argument_list|)
argument_list|)
expr_stmt|;
name|opA
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"separator"
argument_list|)
argument_list|)
expr_stmt|;
name|opA
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"openWith_submenu"
argument_list|)
argument_list|)
expr_stmt|;
name|opA
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"preview1"
argument_list|)
argument_list|)
expr_stmt|;
name|opA
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"actions_submenu"
argument_list|)
argument_list|)
expr_stmt|;
name|opA
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"separator"
argument_list|)
argument_list|)
expr_stmt|;
name|opA
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"viewDocumentSource"
argument_list|)
argument_list|)
expr_stmt|;
name|QStringList
name|opB
decl_stmt|;
name|opB
operator|.
name|append
argument_list|(
name|QLatin1String
argument_list|(
literal|"viewDocumentSource"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"short list second"
argument_list|)
operator|<<
name|opA
operator|<<
name|opB
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"short list first"
argument_list|)
operator|<<
name|opB
operator|<<
name|opA
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|compareQStringLists
name|void
name|tst_Cmptest
operator|::
name|compareQStringLists
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|opA
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QStringList
argument_list|,
name|opB
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|opA
argument_list|,
name|opB
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compareQListInt
name|void
name|tst_Cmptest
operator|::
name|compareQListInt
parameter_list|()
block|{
name|QList
argument_list|<
name|int
argument_list|>
name|int1
decl_stmt|;
name|int1
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|3
expr_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|int2
decl_stmt|;
name|int2
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|4
expr_stmt|;
name|QCOMPARE
argument_list|(
name|int1
argument_list|,
name|int2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compareQListDouble
name|void
name|tst_Cmptest
operator|::
name|compareQListDouble
parameter_list|()
block|{
name|QList
argument_list|<
name|double
argument_list|>
name|double1
decl_stmt|;
name|double1
operator|<<
literal|1.5
operator|<<
literal|2
operator|<<
literal|3
expr_stmt|;
name|QList
argument_list|<
name|double
argument_list|>
name|double2
decl_stmt|;
name|double2
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|4
expr_stmt|;
name|QCOMPARE
argument_list|(
name|double1
argument_list|,
name|double2
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QT_GUI_LIB
end_ifdef
begin_function
DECL|function|compareQColor
name|void
name|tst_Cmptest
operator|::
name|compareQColor
parameter_list|()
block|{
specifier|const
name|QColor
name|yellow
argument_list|(
name|Qt
operator|::
name|yellow
argument_list|)
decl_stmt|;
specifier|const
name|QColor
name|yellowFromName
argument_list|(
name|QStringLiteral
argument_list|(
literal|"yellow"
argument_list|)
argument_list|)
decl_stmt|;
specifier|const
name|QColor
name|green
argument_list|(
name|Qt
operator|::
name|green
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|yellow
argument_list|,
name|yellowFromName
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|yellow
argument_list|,
name|green
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compareQPixmaps_data
name|void
name|tst_Cmptest
operator|::
name|compareQPixmaps_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QPixmap
argument_list|>
argument_list|(
literal|"opA"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QPixmap
argument_list|>
argument_list|(
literal|"opB"
argument_list|)
expr_stmt|;
specifier|const
name|QPixmap
name|pixmap1
argument_list|(
name|xpmPixmapData1
argument_list|)
decl_stmt|;
specifier|const
name|QPixmap
name|pixmap2
argument_list|(
name|xpmPixmapData2
argument_list|)
decl_stmt|;
specifier|const
name|QPixmap
name|pixmap3
argument_list|(
name|xpmPixmapData3
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"both null"
argument_list|)
operator|<<
name|QPixmap
argument_list|()
operator|<<
name|QPixmap
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"one null"
argument_list|)
operator|<<
name|QPixmap
argument_list|()
operator|<<
name|pixmap1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"other null"
argument_list|)
operator|<<
name|pixmap1
operator|<<
name|QPixmap
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"equal"
argument_list|)
operator|<<
name|pixmap1
operator|<<
name|pixmap1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"different size"
argument_list|)
operator|<<
name|pixmap1
operator|<<
name|pixmap3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"different pixels"
argument_list|)
operator|<<
name|pixmap1
operator|<<
name|pixmap2
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compareQPixmaps
name|void
name|tst_Cmptest
operator|::
name|compareQPixmaps
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QPixmap
argument_list|,
name|opA
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QPixmap
argument_list|,
name|opB
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|opA
argument_list|,
name|opB
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compareQImages_data
name|void
name|tst_Cmptest
operator|::
name|compareQImages_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QImage
argument_list|>
argument_list|(
literal|"opA"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QImage
argument_list|>
argument_list|(
literal|"opB"
argument_list|)
expr_stmt|;
specifier|const
name|QImage
name|image1
argument_list|(
name|QPixmap
argument_list|(
name|xpmPixmapData1
argument_list|)
operator|.
name|toImage
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QImage
name|image2
argument_list|(
name|QPixmap
argument_list|(
name|xpmPixmapData2
argument_list|)
operator|.
name|toImage
argument_list|()
argument_list|)
decl_stmt|;
specifier|const
name|QImage
name|image1Indexed
init|=
name|image1
operator|.
name|convertToFormat
argument_list|(
name|QImage
operator|::
name|Format_Indexed8
argument_list|)
decl_stmt|;
specifier|const
name|QImage
name|image3
argument_list|(
name|QPixmap
argument_list|(
name|xpmPixmapData3
argument_list|)
operator|.
name|toImage
argument_list|()
argument_list|)
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"both null"
argument_list|)
operator|<<
name|QImage
argument_list|()
operator|<<
name|QImage
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"one null"
argument_list|)
operator|<<
name|QImage
argument_list|()
operator|<<
name|image1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"other null"
argument_list|)
operator|<<
name|image1
operator|<<
name|QImage
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"equal"
argument_list|)
operator|<<
name|image1
operator|<<
name|image1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"different size"
argument_list|)
operator|<<
name|image1
operator|<<
name|image3
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"different format"
argument_list|)
operator|<<
name|image1
operator|<<
name|image1Indexed
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"different pixels"
argument_list|)
operator|<<
name|image1
operator|<<
name|image2
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compareQImages
name|void
name|tst_Cmptest
operator|::
name|compareQImages
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QImage
argument_list|,
name|opA
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QImage
argument_list|,
name|opB
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|opA
argument_list|,
name|opB
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_GUI_LIB
end_comment
begin_function
DECL|function|opaqueFunc
specifier|static
name|int
name|opaqueFunc
parameter_list|()
block|{
return|return
literal|42
return|;
block|}
end_function
begin_function
DECL|function|verify
name|void
name|tst_Cmptest
operator|::
name|verify
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|opaqueFunc
argument_list|()
operator|>
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|opaqueFunc
argument_list|()
operator|<
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|verify2
name|void
name|tst_Cmptest
operator|::
name|verify2
parameter_list|()
block|{
name|QVERIFY2
argument_list|(
name|opaqueFunc
argument_list|()
operator|>
literal|2
argument_list|,
name|QByteArray
operator|::
name|number
argument_list|(
name|opaqueFunc
argument_list|()
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY2
argument_list|(
name|opaqueFunc
argument_list|()
operator|<
literal|2
argument_list|,
name|QByteArray
operator|::
name|number
argument_list|(
name|opaqueFunc
argument_list|()
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tryVerify
name|void
name|tst_Cmptest
operator|::
name|tryVerify
parameter_list|()
block|{
name|QTRY_VERIFY
argument_list|(
name|opaqueFunc
argument_list|()
operator|>
literal|2
argument_list|)
expr_stmt|;
name|QTRY_VERIFY_WITH_TIMEOUT
argument_list|(
name|opaqueFunc
argument_list|()
operator|<
literal|2
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tryVerify2
name|void
name|tst_Cmptest
operator|::
name|tryVerify2
parameter_list|()
block|{
name|QTRY_VERIFY2
argument_list|(
name|opaqueFunc
argument_list|()
operator|>
literal|2
argument_list|,
name|QByteArray
operator|::
name|number
argument_list|(
name|opaqueFunc
argument_list|()
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|)
expr_stmt|;
name|QTRY_VERIFY2_WITH_TIMEOUT
argument_list|(
name|opaqueFunc
argument_list|()
operator|<
literal|2
argument_list|,
name|QByteArray
operator|::
name|number
argument_list|(
name|opaqueFunc
argument_list|()
argument_list|)
operator|.
name|constData
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_Cmptest
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_cmptest.moc"
end_include
end_unit
