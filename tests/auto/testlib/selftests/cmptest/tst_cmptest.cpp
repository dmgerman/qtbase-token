begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_class
DECL|class|tst_Cmptest
class|class
name|tst_Cmptest
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|compare_boolfuncs
parameter_list|()
function_decl|;
name|void
name|compare_pointerfuncs
parameter_list|()
function_decl|;
name|void
name|compare_tostring
parameter_list|()
function_decl|;
name|void
name|compare_tostring_data
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|boolfunc
specifier|static
name|bool
name|boolfunc
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|boolfunc2
specifier|static
name|bool
name|boolfunc2
parameter_list|()
block|{
return|return
literal|true
return|;
block|}
end_function
begin_function
DECL|function|compare_boolfuncs
name|void
name|tst_Cmptest
operator|::
name|compare_boolfuncs
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
name|boolfunc
argument_list|()
argument_list|,
name|boolfunc
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|boolfunc
argument_list|()
argument_list|,
name|boolfunc2
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|!
name|boolfunc
argument_list|()
argument_list|,
operator|!
name|boolfunc2
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|boolfunc
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|!
name|boolfunc
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
end_function
begin_decl_stmt
DECL|variable|i
specifier|static
name|int
name|i
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|intptr
specifier|static
name|int
modifier|*
name|intptr
parameter_list|()
block|{
return|return
operator|&
name|i
return|;
block|}
end_function
begin_function
DECL|function|compare_pointerfuncs
name|void
name|tst_Cmptest
operator|::
name|compare_pointerfuncs
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
name|intptr
argument_list|()
argument_list|,
name|intptr
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|&
name|i
argument_list|,
operator|&
name|i
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|intptr
argument_list|()
argument_list|,
operator|&
name|i
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
operator|&
name|i
argument_list|,
name|intptr
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QVariant
argument_list|)
end_macro
begin_struct
DECL|struct|PhonyClass
struct|struct
name|PhonyClass
block|{
DECL|member|i
name|int
name|i
decl_stmt|;
block|}
struct|;
end_struct
begin_function
DECL|function|compare_tostring_data
name|void
name|tst_Cmptest
operator|::
name|compare_tostring_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"actual"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QVariant
argument_list|>
argument_list|(
literal|"expected"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"int, string"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
literal|123
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QString
argument_list|(
literal|"hi"
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"both invalid"
argument_list|)
operator|<<
name|QVariant
argument_list|()
operator|<<
name|QVariant
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"null hash, invalid"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QVariant
operator|::
name|Hash
argument_list|)
operator|<<
name|QVariant
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"string, null user type"
argument_list|)
operator|<<
name|QVariant
operator|::
name|fromValue
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"A simple string"
argument_list|)
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|QVariant
operator|::
name|Type
argument_list|(
name|qRegisterMetaType
argument_list|<
name|PhonyClass
argument_list|>
argument_list|(
literal|"PhonyClass"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|PhonyClass
name|fake1
init|=
block|{
literal|1
block|}
decl_stmt|;
name|PhonyClass
name|fake2
init|=
block|{
literal|2
block|}
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"both non-null user type"
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|qRegisterMetaType
argument_list|<
name|PhonyClass
argument_list|>
argument_list|(
literal|"PhonyClass"
argument_list|)
argument_list|,
operator|(
specifier|const
name|void
operator|*
operator|)
operator|&
name|fake1
argument_list|)
operator|<<
name|QVariant
argument_list|(
name|qRegisterMetaType
argument_list|<
name|PhonyClass
argument_list|>
argument_list|(
literal|"PhonyClass"
argument_list|)
argument_list|,
operator|(
specifier|const
name|void
operator|*
operator|)
operator|&
name|fake2
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compare_tostring
name|void
name|tst_Cmptest
operator|::
name|compare_tostring
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|actual
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QVariant
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|actual
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_Cmptest
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_cmptest.moc"
end_include
end_unit
