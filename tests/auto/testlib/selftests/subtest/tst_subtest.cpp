begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore/QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QtCore/QDebug>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_class
DECL|class|tst_Subtest
class|class
name|tst_Subtest
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|initTestCase
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
name|void
name|cleanupTestCase
parameter_list|()
function_decl|;
private|private
name|slots
private|:
name|void
name|test1
parameter_list|()
function_decl|;
name|void
name|test2_data
parameter_list|()
function_decl|;
name|void
name|test2
parameter_list|()
function_decl|;
name|void
name|test3_data
parameter_list|()
function_decl|;
name|void
name|test3
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|initTestCase
name|void
name|tst_Subtest
operator|::
name|initTestCase
parameter_list|()
block|{
name|qDebug
argument_list|()
operator|<<
literal|"initTestCase"
operator|<<
operator|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
condition|?
name|QTest
operator|::
name|currentTestFunction
argument_list|()
else|:
literal|"(null)"
operator|)
operator|<<
operator|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
condition|?
name|QTest
operator|::
name|currentDataTag
argument_list|()
else|:
literal|"(null)"
operator|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanupTestCase
name|void
name|tst_Subtest
operator|::
name|cleanupTestCase
parameter_list|()
block|{
name|qDebug
argument_list|()
operator|<<
literal|"cleanupTestCase"
operator|<<
operator|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
condition|?
name|QTest
operator|::
name|currentTestFunction
argument_list|()
else|:
literal|"(null)"
operator|)
operator|<<
operator|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
condition|?
name|QTest
operator|::
name|currentDataTag
argument_list|()
else|:
literal|"(null)"
operator|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|init
name|void
name|tst_Subtest
operator|::
name|init
parameter_list|()
block|{
name|qDebug
argument_list|()
operator|<<
literal|"init"
operator|<<
operator|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
condition|?
name|QTest
operator|::
name|currentTestFunction
argument_list|()
else|:
literal|"(null)"
operator|)
operator|<<
operator|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
condition|?
name|QTest
operator|::
name|currentDataTag
argument_list|()
else|:
literal|"(null)"
operator|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_Subtest
operator|::
name|cleanup
parameter_list|()
block|{
name|qDebug
argument_list|()
operator|<<
literal|"cleanup"
operator|<<
operator|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
condition|?
name|QTest
operator|::
name|currentTestFunction
argument_list|()
else|:
literal|"(null)"
operator|)
operator|<<
operator|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
condition|?
name|QTest
operator|::
name|currentDataTag
argument_list|()
else|:
literal|"(null)"
operator|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|test1
name|void
name|tst_Subtest
operator|::
name|test1
parameter_list|()
block|{
name|qDebug
argument_list|()
operator|<<
literal|"test1"
operator|<<
operator|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
condition|?
name|QTest
operator|::
name|currentTestFunction
argument_list|()
else|:
literal|"(null)"
operator|)
operator|<<
operator|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
condition|?
name|QTest
operator|::
name|currentDataTag
argument_list|()
else|:
literal|"(null)"
operator|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|test2_data
name|void
name|tst_Subtest
operator|::
name|test2_data
parameter_list|()
block|{
name|qDebug
argument_list|()
operator|<<
literal|"test2_data"
operator|<<
operator|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
condition|?
name|QTest
operator|::
name|currentTestFunction
argument_list|()
else|:
literal|"(null)"
operator|)
operator|<<
operator|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
condition|?
name|QTest
operator|::
name|currentDataTag
argument_list|()
else|:
literal|"(null)"
operator|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"str"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"hello0"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"hello1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"hello2"
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"test2_data end"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|test2
name|void
name|tst_Subtest
operator|::
name|test2
parameter_list|()
block|{
name|qDebug
argument_list|()
operator|<<
literal|"test2"
operator|<<
operator|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
condition|?
name|QTest
operator|::
name|currentTestFunction
argument_list|()
else|:
literal|"(null)"
operator|)
operator|<<
operator|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
condition|?
name|QTest
operator|::
name|currentDataTag
argument_list|()
else|:
literal|"(null)"
operator|)
expr_stmt|;
specifier|static
name|int
name|count
init|=
literal|0
decl_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|str
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|str
argument_list|,
name|QString
argument_list|(
literal|"hello%1"
argument_list|)
operator|.
name|arg
argument_list|(
name|count
operator|++
argument_list|)
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"test2 end"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|test3_data
name|void
name|tst_Subtest
operator|::
name|test3_data
parameter_list|()
block|{
name|qDebug
argument_list|()
operator|<<
literal|"test3_data"
operator|<<
operator|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
condition|?
name|QTest
operator|::
name|currentTestFunction
argument_list|()
else|:
literal|"(null)"
operator|)
operator|<<
operator|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
condition|?
name|QTest
operator|::
name|currentDataTag
argument_list|()
else|:
literal|"(null)"
operator|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"str"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data0"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"hello0"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data1"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"hello1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"data2"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"hello2"
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"test3_data end"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|test3
name|void
name|tst_Subtest
operator|::
name|test3
parameter_list|()
block|{
name|qDebug
argument_list|()
operator|<<
literal|"test2"
operator|<<
operator|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
condition|?
name|QTest
operator|::
name|currentTestFunction
argument_list|()
else|:
literal|"(null)"
operator|)
operator|<<
operator|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
condition|?
name|QTest
operator|::
name|currentDataTag
argument_list|()
else|:
literal|"(null)"
operator|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|str
argument_list|)
expr_stmt|;
comment|// second and third time we call this it should FAIL
name|QCOMPARE
argument_list|(
name|str
argument_list|,
name|QString
argument_list|(
literal|"hello0"
argument_list|)
argument_list|)
expr_stmt|;
name|qDebug
argument_list|()
operator|<<
literal|"test2 end"
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_Subtest
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_subtest.moc"
end_include
end_unit
