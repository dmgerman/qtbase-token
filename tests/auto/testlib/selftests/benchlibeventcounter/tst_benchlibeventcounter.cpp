begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore/QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_comment
comment|/* Custom event dispatcher to ensure we don't receive any spontaneous events */
end_comment
begin_class
DECL|class|TestEventDispatcher
class|class
name|TestEventDispatcher
super|:
specifier|public
name|QAbstractEventDispatcher
block|{
name|Q_OBJECT
public|public:
DECL|function|TestEventDispatcher
name|TestEventDispatcher
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QAbstractEventDispatcher
argument_list|(
name|parent
argument_list|)
block|{}
DECL|function|flush
name|void
name|flush
parameter_list|()
block|{}
DECL|function|hasPendingEvents
name|bool
name|hasPendingEvents
parameter_list|()
block|{
return|return
literal|false
return|;
block|}
DECL|function|interrupt
name|void
name|interrupt
parameter_list|()
block|{}
DECL|function|processEvents
name|bool
name|processEvents
parameter_list|(
name|QEventLoop
operator|::
name|ProcessEventsFlags
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
DECL|function|registerSocketNotifier
name|void
name|registerSocketNotifier
parameter_list|(
name|QSocketNotifier
modifier|*
parameter_list|)
block|{}
DECL|function|registerTimer
name|void
name|registerTimer
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
name|Qt
operator|::
name|TimerType
parameter_list|,
name|QObject
modifier|*
parameter_list|)
block|{}
DECL|function|registeredTimers
name|QList
argument_list|<
name|TimerInfo
argument_list|>
name|registeredTimers
parameter_list|(
name|QObject
modifier|*
parameter_list|)
specifier|const
block|{
return|return
name|QList
argument_list|<
name|TimerInfo
argument_list|>
argument_list|()
return|;
block|}
DECL|function|unregisterSocketNotifier
name|void
name|unregisterSocketNotifier
parameter_list|(
name|QSocketNotifier
modifier|*
parameter_list|)
block|{}
DECL|function|unregisterTimer
name|bool
name|unregisterTimer
parameter_list|(
name|int
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
DECL|function|unregisterTimers
name|bool
name|unregisterTimers
parameter_list|(
name|QObject
modifier|*
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
DECL|function|remainingTime
name|int
name|remainingTime
parameter_list|(
name|int
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
DECL|function|wakeUp
name|void
name|wakeUp
parameter_list|()
block|{}
ifdef|#
directive|ifdef
name|Q_OS_WIN
DECL|function|registerEventNotifier
name|bool
name|registerEventNotifier
parameter_list|(
name|QWinEventNotifier
modifier|*
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
DECL|function|unregisterEventNotifier
name|void
name|unregisterEventNotifier
parameter_list|(
name|QWinEventNotifier
modifier|*
parameter_list|)
block|{ }
endif|#
directive|endif
block|}
class|;
end_class
begin_class
DECL|class|tst_BenchlibEventCounter
class|class
name|tst_BenchlibEventCounter
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|events
parameter_list|()
function_decl|;
name|void
name|events_data
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|events
name|void
name|tst_BenchlibEventCounter
operator|::
name|events
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|eventCount
argument_list|)
expr_stmt|;
name|QAbstractEventDispatcher
modifier|*
name|ed
init|=
name|QAbstractEventDispatcher
operator|::
name|instance
argument_list|()
decl_stmt|;
name|QBENCHMARK
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|eventCount
condition|;
operator|++
name|i
control|)
block|{
name|ed
operator|->
name|filterNativeEvent
argument_list|(
literal|""
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_function
DECL|function|events_data
name|void
name|tst_BenchlibEventCounter
operator|::
name|events_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"eventCount"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"0"
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1"
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"10"
argument_list|)
operator|<<
literal|10
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"100"
argument_list|)
operator|<<
literal|100
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"500"
argument_list|)
operator|<<
literal|500
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"5000"
argument_list|)
operator|<<
literal|5000
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"100000"
argument_list|)
operator|<<
literal|100000
expr_stmt|;
block|}
end_function
begin_function
DECL|function|main
name|int
name|main
parameter_list|(
name|int
name|argc
parameter_list|,
name|char
modifier|*
modifier|*
name|argv
parameter_list|)
block|{
name|TestEventDispatcher
name|dispatcher
decl_stmt|;
name|QCoreApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|tst_BenchlibEventCounter
name|test
decl_stmt|;
return|return
name|QTest
operator|::
name|qExec
argument_list|(
operator|&
name|test
argument_list|,
name|argc
argument_list|,
name|argv
argument_list|)
return|;
block|}
end_function
begin_include
include|#
directive|include
file|"tst_benchlibeventcounter.moc"
end_include
end_unit
