begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_EXCEPTIONS
end_ifndef
begin_include
include|#
directive|include
file|<stdexcept>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_EXCEPTIONS
end_ifndef
begin_class
DECL|class|MyBaseException
class|class
name|MyBaseException
block|{
block|}
class|;
end_class
begin_class
DECL|class|MyDerivedException
class|class
name|MyDerivedException
super|:
specifier|public
name|MyBaseException
super|,
specifier|public
name|std
operator|::
name|domain_error
block|{
public|public:
DECL|function|MyDerivedException
name|MyDerivedException
parameter_list|()
member_init_list|:
name|std
operator|::
name|domain_error
argument_list|(
literal|"MyDerivedException"
argument_list|)
block|{}
block|}
class|;
end_class
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !QT_NO_EXCEPTIONS
end_comment
begin_class
DECL|class|tst_VerifyExceptionThrown
class|class
name|tst_VerifyExceptionThrown
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private:
DECL|function|doSomething
name|void
name|doSomething
parameter_list|()
specifier|const
block|{}
private|private
name|slots
private|:
comment|// Remove all test cases if exceptions are not available
ifndef|#
directive|ifndef
name|QT_NO_EXCEPTIONS
name|void
name|testCorrectStdTypes
parameter_list|()
specifier|const
function_decl|;
name|void
name|testCorrectStdExceptions
parameter_list|()
specifier|const
function_decl|;
name|void
name|testCorrectMyExceptions
parameter_list|()
specifier|const
function_decl|;
name|void
name|testFailInt
parameter_list|()
specifier|const
function_decl|;
name|void
name|testFailStdString
parameter_list|()
specifier|const
function_decl|;
name|void
name|testFailStdRuntimeError
parameter_list|()
specifier|const
function_decl|;
name|void
name|testFailMyException
parameter_list|()
specifier|const
function_decl|;
name|void
name|testFailMyDerivedException
parameter_list|()
specifier|const
function_decl|;
name|void
name|testFailNoException
parameter_list|()
specifier|const
function_decl|;
endif|#
directive|endif
comment|// !QT_NO_EXCEPTIONS
block|}
class|;
end_class
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_EXCEPTIONS
end_ifndef
begin_function
DECL|function|testCorrectStdTypes
name|void
name|tst_VerifyExceptionThrown
operator|::
name|testCorrectStdTypes
parameter_list|()
specifier|const
block|{
name|QVERIFY_EXCEPTION_THROWN
argument_list|(
argument|throw int(
literal|5
argument|)
argument_list|,
argument|int
argument_list|)
empty_stmt|;
name|QVERIFY_EXCEPTION_THROWN
argument_list|(
argument|throw float(
literal|9.8
argument|)
argument_list|,
argument|float
argument_list|)
empty_stmt|;
name|QVERIFY_EXCEPTION_THROWN
argument_list|(
argument|throw bool(
literal|true
argument|)
argument_list|,
argument|bool
argument_list|)
empty_stmt|;
name|QVERIFY_EXCEPTION_THROWN
argument_list|(
argument|throw std::string(
literal|"some string"
argument|)
argument_list|,
argument|std::string
argument_list|)
empty_stmt|;
block|}
end_function
begin_function
DECL|function|testCorrectStdExceptions
name|void
name|tst_VerifyExceptionThrown
operator|::
name|testCorrectStdExceptions
parameter_list|()
specifier|const
block|{
comment|// same type
name|QVERIFY_EXCEPTION_THROWN
argument_list|(
argument|throw std::exception()
argument_list|,
argument|std::exception
argument_list|)
empty_stmt|;
name|QVERIFY_EXCEPTION_THROWN
argument_list|(
argument|throw std::runtime_error(
literal|"runtime error"
argument|)
argument_list|,
argument|std::runtime_error
argument_list|)
empty_stmt|;
name|QVERIFY_EXCEPTION_THROWN
argument_list|(
argument|throw std::overflow_error(
literal|"overflow error"
argument|)
argument_list|,
argument|std::overflow_error
argument_list|)
empty_stmt|;
comment|// inheritance
name|QVERIFY_EXCEPTION_THROWN
argument_list|(
argument|throw std::overflow_error(
literal|"overflow error"
argument|)
argument_list|,
argument|std::runtime_error
argument_list|)
empty_stmt|;
name|QVERIFY_EXCEPTION_THROWN
argument_list|(
argument|throw std::overflow_error(
literal|"overflow error"
argument|)
argument_list|,
argument|std::exception
argument_list|)
empty_stmt|;
block|}
end_function
begin_function
DECL|function|testCorrectMyExceptions
name|void
name|tst_VerifyExceptionThrown
operator|::
name|testCorrectMyExceptions
parameter_list|()
specifier|const
block|{
comment|// same type
name|QVERIFY_EXCEPTION_THROWN
argument_list|(
argument|throw MyBaseException()
argument_list|,
argument|MyBaseException
argument_list|)
empty_stmt|;
name|QVERIFY_EXCEPTION_THROWN
argument_list|(
argument|throw MyDerivedException()
argument_list|,
argument|MyDerivedException
argument_list|)
empty_stmt|;
comment|// inheritance
name|QVERIFY_EXCEPTION_THROWN
argument_list|(
argument|throw MyDerivedException()
argument_list|,
argument|MyBaseException
argument_list|)
empty_stmt|;
name|QVERIFY_EXCEPTION_THROWN
argument_list|(
argument|throw MyDerivedException()
argument_list|,
argument|std::domain_error
argument_list|)
empty_stmt|;
block|}
end_function
begin_function
DECL|function|testFailInt
name|void
name|tst_VerifyExceptionThrown
operator|::
name|testFailInt
parameter_list|()
specifier|const
block|{
name|QVERIFY_EXCEPTION_THROWN
argument_list|(
argument|throw int(
literal|5
argument|)
argument_list|,
argument|double
argument_list|)
empty_stmt|;
block|}
end_function
begin_function
DECL|function|testFailStdString
name|void
name|tst_VerifyExceptionThrown
operator|::
name|testFailStdString
parameter_list|()
specifier|const
block|{
name|QVERIFY_EXCEPTION_THROWN
argument_list|(
argument|throw std::string(
literal|"some string"
argument|)
argument_list|,
argument|char*
argument_list|)
empty_stmt|;
block|}
end_function
begin_function
DECL|function|testFailStdRuntimeError
name|void
name|tst_VerifyExceptionThrown
operator|::
name|testFailStdRuntimeError
parameter_list|()
specifier|const
block|{
name|QVERIFY_EXCEPTION_THROWN
argument_list|(
argument|throw std::logic_error(
literal|"logic error"
argument|)
argument_list|,
argument|std::runtime_error
argument_list|)
empty_stmt|;
block|}
end_function
begin_function
DECL|function|testFailMyException
name|void
name|tst_VerifyExceptionThrown
operator|::
name|testFailMyException
parameter_list|()
specifier|const
block|{
name|QVERIFY_EXCEPTION_THROWN
argument_list|(
argument|throw std::logic_error(
literal|"logic error"
argument|)
argument_list|,
argument|MyBaseException
argument_list|)
empty_stmt|;
block|}
end_function
begin_function
DECL|function|testFailMyDerivedException
name|void
name|tst_VerifyExceptionThrown
operator|::
name|testFailMyDerivedException
parameter_list|()
specifier|const
block|{
name|QVERIFY_EXCEPTION_THROWN
argument_list|(
argument|throw MyDerivedException()
argument_list|,
argument|std::runtime_error
argument_list|)
empty_stmt|;
block|}
end_function
begin_function
DECL|function|testFailNoException
name|void
name|tst_VerifyExceptionThrown
operator|::
name|testFailNoException
parameter_list|()
specifier|const
block|{
name|QVERIFY_EXCEPTION_THROWN
argument_list|(
name|doSomething
argument_list|()
argument_list|,
name|std
operator|::
name|exception
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// !QT_NO_EXCEPTIONS
end_comment
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_VerifyExceptionThrown
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_verifyexceptionthrown.moc"
end_include
end_unit
