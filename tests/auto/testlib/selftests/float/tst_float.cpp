begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2016 The Qt Company Ltd. ** Contact: https://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:GPL-EXCEPT$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see https://www.qt.io/terms-conditions. For further ** information use the contact form at https://www.qt.io/contact-us. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3 as published by the Free Software ** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT ** included in the packaging of this file. Please review the following ** information to ensure the GNU General Public License requirements will ** be met: https://www.gnu.org/licenses/gpl-3.0.html. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore/QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_class
DECL|class|tst_float
class|class
name|tst_float
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|floatComparisons
parameter_list|()
specifier|const
function_decl|;
name|void
name|floatComparisons_data
parameter_list|()
specifier|const
function_decl|;
name|void
name|compareFloatTests
parameter_list|()
specifier|const
function_decl|;
name|void
name|compareFloatTests_data
parameter_list|()
specifier|const
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|floatComparisons
name|void
name|tst_float
operator|::
name|floatComparisons
parameter_list|()
specifier|const
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|operandLeft
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|operandRight
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|operandLeft
argument_list|,
name|operandRight
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|floatComparisons_data
name|void
name|tst_float
operator|::
name|floatComparisons_data
parameter_list|()
specifier|const
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"operandLeft"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"operandRight"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"should SUCCEED 1"
argument_list|)
operator|<<
name|float
argument_list|(
literal|0
argument_list|)
operator|<<
name|float
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"should FAIL 1"
argument_list|)
operator|<<
name|float
argument_list|(
literal|1.00000
argument_list|)
operator|<<
name|float
argument_list|(
literal|3.00000
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"should FAIL 2"
argument_list|)
operator|<<
name|float
argument_list|(
literal|1.00000e-7f
argument_list|)
operator|<<
name|float
argument_list|(
literal|3.00000e-7f
argument_list|)
expr_stmt|;
comment|// QCOMPARE for floats uses qFuzzyCompare(), which succeeds if the numbers
comment|// differ by no more than 1/100,000th of the smaller value.  Thus
comment|// QCOMPARE(99998, 99999) should fail, while QCOMPARE(100001, 100002)
comment|// should pass.
name|QTest
operator|::
name|newRow
argument_list|(
literal|"should FAIL 3"
argument_list|)
operator|<<
name|float
argument_list|(
literal|99998
argument_list|)
operator|<<
name|float
argument_list|(
literal|99999
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"should SUCCEED 2"
argument_list|)
operator|<<
name|float
argument_list|(
literal|100001
argument_list|)
operator|<<
name|float
argument_list|(
literal|100002
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compareFloatTests
name|void
name|tst_float
operator|::
name|compareFloatTests
parameter_list|()
specifier|const
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|t1
argument_list|)
expr_stmt|;
comment|// Create two more values
comment|// t2 differs from t1 by 1 ppm (part per million)
comment|// t3 differs from t1 by 200%
comment|// we should consider that t1 == t2 and t1 != t3
specifier|const
name|float
name|t2
init|=
name|t1
operator|+
operator|(
name|t1
operator|/
literal|1e6
operator|)
decl_stmt|;
specifier|const
name|float
name|t3
init|=
literal|3
operator|*
name|t1
decl_stmt|;
name|QCOMPARE
argument_list|(
name|t1
argument_list|,
name|t2
argument_list|)
expr_stmt|;
comment|/* Should FAIL. */
name|QCOMPARE
argument_list|(
name|t1
argument_list|,
name|t3
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|compareFloatTests_data
name|void
name|tst_float
operator|::
name|compareFloatTests_data
parameter_list|()
specifier|const
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"t1"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1e0"
argument_list|)
operator|<<
literal|1e0f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1e-7"
argument_list|)
operator|<<
literal|1e-7f
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"1e+7"
argument_list|)
operator|<<
literal|1e+7f
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_float
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_float.moc"
end_include
end_unit
