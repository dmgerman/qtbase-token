begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore/QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_class
DECL|class|tst_Counting
class|class
name|tst_Counting
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|testPassPass_data
parameter_list|()
function_decl|;
name|void
name|testPassPass
parameter_list|()
function_decl|;
name|void
name|testPassSkip_data
parameter_list|()
function_decl|;
name|void
name|testPassSkip
parameter_list|()
function_decl|;
name|void
name|testPassFail_data
parameter_list|()
function_decl|;
name|void
name|testPassFail
parameter_list|()
function_decl|;
name|void
name|testSkipPass_data
parameter_list|()
function_decl|;
name|void
name|testSkipPass
parameter_list|()
function_decl|;
name|void
name|testSkipSkip_data
parameter_list|()
function_decl|;
name|void
name|testSkipSkip
parameter_list|()
function_decl|;
name|void
name|testSkipFail_data
parameter_list|()
function_decl|;
name|void
name|testSkipFail
parameter_list|()
function_decl|;
name|void
name|testFailPass_data
parameter_list|()
function_decl|;
name|void
name|testFailPass
parameter_list|()
function_decl|;
name|void
name|testFailSkip_data
parameter_list|()
function_decl|;
name|void
name|testFailSkip
parameter_list|()
function_decl|;
name|void
name|testFailFail_data
parameter_list|()
function_decl|;
name|void
name|testFailFail
parameter_list|()
function_decl|;
private|private:
name|void
name|helper
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_enum
DECL|enum|TestResult
enum|enum
name|TestResult
block|{
DECL|enumerator|Pass
name|Pass
block|,
DECL|enumerator|Fail
name|Fail
block|,
DECL|enumerator|Skip
name|Skip
block|}
enum|;
end_enum
begin_expr_stmt
DECL|variable|TestResult
name|Q_DECLARE_METATYPE
argument_list|(
name|TestResult
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function
DECL|function|helper
name|void
name|tst_Counting
operator|::
name|helper
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|TestResult
argument_list|,
name|result
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|result
condition|)
block|{
case|case
name|Pass
case|:
name|QVERIFY
argument_list|(
literal|true
argument_list|)
expr_stmt|;
break|break;
case|case
name|Fail
case|:
name|QVERIFY
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
case|case
name|Skip
case|:
name|QSKIP
argument_list|(
literal|"Skipping"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
end_function
begin_function
DECL|function|testPassPass_data
name|void
name|tst_Counting
operator|::
name|testPassPass_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|TestResult
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"row 1"
argument_list|)
operator|<<
name|Pass
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"row 2"
argument_list|)
operator|<<
name|Pass
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testPassPass
name|void
name|tst_Counting
operator|::
name|testPassPass
parameter_list|()
block|{
name|helper
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testPassSkip_data
name|void
name|tst_Counting
operator|::
name|testPassSkip_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|TestResult
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"row 1"
argument_list|)
operator|<<
name|Pass
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"row 2"
argument_list|)
operator|<<
name|Skip
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testPassSkip
name|void
name|tst_Counting
operator|::
name|testPassSkip
parameter_list|()
block|{
name|helper
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testPassFail_data
name|void
name|tst_Counting
operator|::
name|testPassFail_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|TestResult
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"row 1"
argument_list|)
operator|<<
name|Pass
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"row 2"
argument_list|)
operator|<<
name|Fail
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testPassFail
name|void
name|tst_Counting
operator|::
name|testPassFail
parameter_list|()
block|{
name|helper
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testSkipPass_data
name|void
name|tst_Counting
operator|::
name|testSkipPass_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|TestResult
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"row 1"
argument_list|)
operator|<<
name|Skip
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"row 2"
argument_list|)
operator|<<
name|Pass
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testSkipPass
name|void
name|tst_Counting
operator|::
name|testSkipPass
parameter_list|()
block|{
name|helper
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testSkipSkip_data
name|void
name|tst_Counting
operator|::
name|testSkipSkip_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|TestResult
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"row 1"
argument_list|)
operator|<<
name|Skip
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"row 2"
argument_list|)
operator|<<
name|Skip
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testSkipSkip
name|void
name|tst_Counting
operator|::
name|testSkipSkip
parameter_list|()
block|{
name|helper
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testSkipFail_data
name|void
name|tst_Counting
operator|::
name|testSkipFail_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|TestResult
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"row 1"
argument_list|)
operator|<<
name|Skip
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"row 2"
argument_list|)
operator|<<
name|Fail
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testSkipFail
name|void
name|tst_Counting
operator|::
name|testSkipFail
parameter_list|()
block|{
name|helper
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testFailPass_data
name|void
name|tst_Counting
operator|::
name|testFailPass_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|TestResult
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"row 1"
argument_list|)
operator|<<
name|Fail
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"row 2"
argument_list|)
operator|<<
name|Pass
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testFailPass
name|void
name|tst_Counting
operator|::
name|testFailPass
parameter_list|()
block|{
name|helper
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testFailSkip_data
name|void
name|tst_Counting
operator|::
name|testFailSkip_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|TestResult
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"row 1"
argument_list|)
operator|<<
name|Fail
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"row 2"
argument_list|)
operator|<<
name|Skip
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testFailSkip
name|void
name|tst_Counting
operator|::
name|testFailSkip
parameter_list|()
block|{
name|helper
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testFailFail_data
name|void
name|tst_Counting
operator|::
name|testFailFail_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|TestResult
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"row 1"
argument_list|)
operator|<<
name|Fail
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"row 2"
argument_list|)
operator|<<
name|Fail
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testFailFail
name|void
name|tst_Counting
operator|::
name|testFailFail
parameter_list|()
block|{
name|helper
argument_list|()
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_Counting
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_counting.moc"
end_include
end_unit
