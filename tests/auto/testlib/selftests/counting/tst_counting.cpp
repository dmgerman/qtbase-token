begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Digia Plc and/or its subsidiary(-ies). ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtCore/QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_class
DECL|class|tst_Counting
class|class
name|tst_Counting
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
comment|// The following test functions exercise each possible combination of test
comment|// results for two data rows.
name|void
name|testPassPass_data
parameter_list|()
function_decl|;
name|void
name|testPassPass
parameter_list|()
function_decl|;
name|void
name|testPassSkip_data
parameter_list|()
function_decl|;
name|void
name|testPassSkip
parameter_list|()
function_decl|;
name|void
name|testPassFail_data
parameter_list|()
function_decl|;
name|void
name|testPassFail
parameter_list|()
function_decl|;
name|void
name|testSkipPass_data
parameter_list|()
function_decl|;
name|void
name|testSkipPass
parameter_list|()
function_decl|;
name|void
name|testSkipSkip_data
parameter_list|()
function_decl|;
name|void
name|testSkipSkip
parameter_list|()
function_decl|;
name|void
name|testSkipFail_data
parameter_list|()
function_decl|;
name|void
name|testSkipFail
parameter_list|()
function_decl|;
name|void
name|testFailPass_data
parameter_list|()
function_decl|;
name|void
name|testFailPass
parameter_list|()
function_decl|;
name|void
name|testFailSkip_data
parameter_list|()
function_decl|;
name|void
name|testFailSkip
parameter_list|()
function_decl|;
name|void
name|testFailFail_data
parameter_list|()
function_decl|;
name|void
name|testFailFail
parameter_list|()
function_decl|;
comment|// The following test functions test skips and fails in the special
comment|// init() and cleanup() slots.
name|void
name|init
parameter_list|()
function_decl|;
name|void
name|cleanup
parameter_list|()
function_decl|;
name|void
name|testFailInInit_data
parameter_list|()
function_decl|;
name|void
name|testFailInInit
parameter_list|()
function_decl|;
name|void
name|testFailInCleanup_data
parameter_list|()
function_decl|;
name|void
name|testFailInCleanup
parameter_list|()
function_decl|;
name|void
name|testSkipInInit_data
parameter_list|()
function_decl|;
name|void
name|testSkipInInit
parameter_list|()
function_decl|;
name|void
name|testSkipInCleanup_data
parameter_list|()
function_decl|;
name|void
name|testSkipInCleanup
parameter_list|()
function_decl|;
private|private:
name|void
name|helper
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_enum
DECL|enum|TestResult
enum|enum
name|TestResult
block|{
DECL|enumerator|Pass
name|Pass
block|,
DECL|enumerator|Fail
name|Fail
block|,
DECL|enumerator|Skip
name|Skip
block|}
enum|;
end_enum
begin_expr_stmt
DECL|variable|TestResult
name|Q_DECLARE_METATYPE
argument_list|(
name|TestResult
argument_list|)
expr_stmt|;
end_expr_stmt
begin_function
DECL|function|helper
name|void
name|tst_Counting
operator|::
name|helper
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|TestResult
argument_list|,
name|result
argument_list|)
expr_stmt|;
switch|switch
condition|(
name|result
condition|)
block|{
case|case
name|Pass
case|:
name|QVERIFY
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
literal|2
operator|+
literal|1
argument_list|,
literal|3
argument_list|)
expr_stmt|;
break|break;
case|case
name|Fail
case|:
name|QVERIFY
argument_list|(
literal|false
argument_list|)
expr_stmt|;
break|break;
case|case
name|Skip
case|:
name|QSKIP
argument_list|(
literal|"Skipping"
argument_list|)
expr_stmt|;
break|break;
block|}
block|}
end_function
begin_function
DECL|function|testPassPass_data
name|void
name|tst_Counting
operator|::
name|testPassPass_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|TestResult
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"row 1"
argument_list|)
operator|<<
name|Pass
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"row 2"
argument_list|)
operator|<<
name|Pass
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testPassPass
name|void
name|tst_Counting
operator|::
name|testPassPass
parameter_list|()
block|{
name|helper
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testPassSkip_data
name|void
name|tst_Counting
operator|::
name|testPassSkip_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|TestResult
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"row 1"
argument_list|)
operator|<<
name|Pass
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"row 2"
argument_list|)
operator|<<
name|Skip
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testPassSkip
name|void
name|tst_Counting
operator|::
name|testPassSkip
parameter_list|()
block|{
name|helper
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testPassFail_data
name|void
name|tst_Counting
operator|::
name|testPassFail_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|TestResult
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"row 1"
argument_list|)
operator|<<
name|Pass
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"row 2"
argument_list|)
operator|<<
name|Fail
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testPassFail
name|void
name|tst_Counting
operator|::
name|testPassFail
parameter_list|()
block|{
name|helper
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testSkipPass_data
name|void
name|tst_Counting
operator|::
name|testSkipPass_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|TestResult
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"row 1"
argument_list|)
operator|<<
name|Skip
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"row 2"
argument_list|)
operator|<<
name|Pass
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testSkipPass
name|void
name|tst_Counting
operator|::
name|testSkipPass
parameter_list|()
block|{
name|helper
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testSkipSkip_data
name|void
name|tst_Counting
operator|::
name|testSkipSkip_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|TestResult
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"row 1"
argument_list|)
operator|<<
name|Skip
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"row 2"
argument_list|)
operator|<<
name|Skip
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testSkipSkip
name|void
name|tst_Counting
operator|::
name|testSkipSkip
parameter_list|()
block|{
name|helper
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testSkipFail_data
name|void
name|tst_Counting
operator|::
name|testSkipFail_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|TestResult
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"row 1"
argument_list|)
operator|<<
name|Skip
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"row 2"
argument_list|)
operator|<<
name|Fail
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testSkipFail
name|void
name|tst_Counting
operator|::
name|testSkipFail
parameter_list|()
block|{
name|helper
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testFailPass_data
name|void
name|tst_Counting
operator|::
name|testFailPass_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|TestResult
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"row 1"
argument_list|)
operator|<<
name|Fail
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"row 2"
argument_list|)
operator|<<
name|Pass
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testFailPass
name|void
name|tst_Counting
operator|::
name|testFailPass
parameter_list|()
block|{
name|helper
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testFailSkip_data
name|void
name|tst_Counting
operator|::
name|testFailSkip_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|TestResult
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"row 1"
argument_list|)
operator|<<
name|Fail
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"row 2"
argument_list|)
operator|<<
name|Skip
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testFailSkip
name|void
name|tst_Counting
operator|::
name|testFailSkip
parameter_list|()
block|{
name|helper
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testFailFail_data
name|void
name|tst_Counting
operator|::
name|testFailFail_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|TestResult
argument_list|>
argument_list|(
literal|"result"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"row 1"
argument_list|)
operator|<<
name|Fail
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"row 2"
argument_list|)
operator|<<
name|Fail
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testFailFail
name|void
name|tst_Counting
operator|::
name|testFailFail
parameter_list|()
block|{
name|helper
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|init
name|void
name|tst_Counting
operator|::
name|init
parameter_list|()
block|{
if|if
condition|(
name|strcmp
argument_list|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
argument_list|,
literal|"testFailInInit"
argument_list|)
operator|==
literal|0
operator|&&
name|strcmp
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|,
literal|"fail"
argument_list|)
operator|==
literal|0
condition|)
name|QFAIL
argument_list|(
literal|"Fail in init()"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|strcmp
argument_list|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
argument_list|,
literal|"testSkipInInit"
argument_list|)
operator|==
literal|0
operator|&&
name|strcmp
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|,
literal|"skip"
argument_list|)
operator|==
literal|0
condition|)
name|QSKIP
argument_list|(
literal|"Skip in init()"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cleanup
name|void
name|tst_Counting
operator|::
name|cleanup
parameter_list|()
block|{
if|if
condition|(
name|strcmp
argument_list|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
argument_list|,
literal|"testFailInCleanup"
argument_list|)
operator|==
literal|0
operator|&&
name|strcmp
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|,
literal|"fail"
argument_list|)
operator|==
literal|0
condition|)
name|QFAIL
argument_list|(
literal|"Fail in cleanup()"
argument_list|)
expr_stmt|;
elseif|else
if|if
condition|(
name|strcmp
argument_list|(
name|QTest
operator|::
name|currentTestFunction
argument_list|()
argument_list|,
literal|"testSkipInCleanup"
argument_list|)
operator|==
literal|0
operator|&&
name|strcmp
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|,
literal|"skip"
argument_list|)
operator|==
literal|0
condition|)
name|QSKIP
argument_list|(
literal|"Skip in cleanup()"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testFailInInit_data
name|void
name|tst_Counting
operator|::
name|testFailInInit_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"dummy"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"before"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"fail"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"after"
argument_list|)
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testFailInInit
name|void
name|tst_Counting
operator|::
name|testFailInInit
parameter_list|()
block|{
if|if
condition|(
name|strcmp
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|,
literal|"fail"
argument_list|)
operator|==
literal|0
condition|)
name|QFAIL
argument_list|(
literal|"This test function should have been skipped due to QFAIL in init()"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testFailInCleanup_data
name|void
name|tst_Counting
operator|::
name|testFailInCleanup_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"dummy"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"before"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"fail"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"after"
argument_list|)
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testFailInCleanup
name|void
name|tst_Counting
operator|::
name|testFailInCleanup
parameter_list|()
block|{
if|if
condition|(
name|strcmp
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|,
literal|"fail"
argument_list|)
operator|==
literal|0
condition|)
name|qDebug
argument_list|()
operator|<<
literal|"This test function should execute and then QFAIL in cleanup()"
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testSkipInInit_data
name|void
name|tst_Counting
operator|::
name|testSkipInInit_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"dummy"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"before"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"skip"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"after"
argument_list|)
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testSkipInInit
name|void
name|tst_Counting
operator|::
name|testSkipInInit
parameter_list|()
block|{
if|if
condition|(
name|strcmp
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|,
literal|"skip"
argument_list|)
operator|==
literal|0
condition|)
name|QFAIL
argument_list|(
literal|"This test function should have been skipped due to QSKIP in init()"
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testSkipInCleanup_data
name|void
name|tst_Counting
operator|::
name|testSkipInCleanup_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"dummy"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"before"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"skip"
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"after"
argument_list|)
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testSkipInCleanup
name|void
name|tst_Counting
operator|::
name|testSkipInCleanup
parameter_list|()
block|{
if|if
condition|(
name|strcmp
argument_list|(
name|QTest
operator|::
name|currentDataTag
argument_list|()
argument_list|,
literal|"skip"
argument_list|)
operator|==
literal|0
condition|)
name|qDebug
argument_list|()
operator|<<
literal|"This test function should execute and then QSKIP in cleanup()"
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_Counting
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_counting.moc"
end_include
end_unit
