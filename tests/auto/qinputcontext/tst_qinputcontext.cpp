begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|"../../shared/util.h"
end_include
begin_include
include|#
directive|include
file|<qinputcontext.h>
end_include
begin_include
include|#
directive|include
file|<qlineedit.h>
end_include
begin_include
include|#
directive|include
file|<qplaintextedit.h>
end_include
begin_include
include|#
directive|include
file|<qlayout.h>
end_include
begin_include
include|#
directive|include
file|<qradiobutton.h>
end_include
begin_include
include|#
directive|include
file|<qwindowsstyle.h>
end_include
begin_include
include|#
directive|include
file|<qdesktopwidget.h>
end_include
begin_include
include|#
directive|include
file|<qpushbutton.h>
end_include
begin_include
include|#
directive|include
file|<qgraphicsview.h>
end_include
begin_include
include|#
directive|include
file|<qgraphicsscene.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|QT_WEBKIT_LIB
end_ifdef
begin_include
include|#
directive|include
file|<qwebview.h>
end_include
begin_include
include|#
directive|include
file|<qgraphicswebview.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_class
DECL|class|tst_QInputContext
class|class
name|tst_QInputContext
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|tst_QInputContext
name|tst_QInputContext
parameter_list|()
member_init_list|:
name|m_phoneIsQwerty
argument_list|(
literal|false
argument_list|)
block|{}
DECL|function|~tst_QInputContext
specifier|virtual
name|~
name|tst_QInputContext
parameter_list|()
block|{}
public|public
name|slots
public|:
DECL|function|cleanupTestCase
name|void
name|cleanupTestCase
parameter_list|()
block|{}
DECL|function|init
name|void
name|init
parameter_list|()
block|{}
DECL|function|cleanup
name|void
name|cleanup
parameter_list|()
block|{}
private|private
name|slots
private|:
name|void
name|maximumTextLength
parameter_list|()
function_decl|;
name|void
name|filterMouseEvents
parameter_list|()
function_decl|;
name|void
name|requestSoftwareInputPanel
parameter_list|()
function_decl|;
name|void
name|closeSoftwareInputPanel
parameter_list|()
function_decl|;
name|void
name|selections
parameter_list|()
function_decl|;
name|void
name|focusProxy
parameter_list|()
function_decl|;
private|private:
DECL|member|m_phoneIsQwerty
name|bool
name|m_phoneIsQwerty
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|maximumTextLength
name|void
name|tst_QInputContext
operator|::
name|maximumTextLength
parameter_list|()
block|{
name|QLineEdit
name|le
decl_stmt|;
name|le
operator|.
name|setMaxLength
argument_list|(
literal|15
argument_list|)
expr_stmt|;
name|QVariant
name|variant
init|=
name|le
operator|.
name|inputMethodQuery
argument_list|(
name|Qt
operator|::
name|ImMaximumTextLength
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|variant
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|variant
operator|.
name|toInt
argument_list|()
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|QPlainTextEdit
name|pte
decl_stmt|;
comment|// For BC/historical reasons, QPlainTextEdit::inputMethodQuery is protected.
name|variant
operator|=
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
operator|&
name|pte
argument_list|)
operator|->
name|inputMethodQuery
argument_list|(
name|Qt
operator|::
name|ImMaximumTextLength
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|variant
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|QFilterInputContext
class|class
name|QFilterInputContext
super|:
specifier|public
name|QInputContext
block|{
public|public:
DECL|function|QFilterInputContext
name|QFilterInputContext
parameter_list|()
block|{}
DECL|function|~QFilterInputContext
name|~
name|QFilterInputContext
parameter_list|()
block|{}
DECL|function|identifierName
name|QString
name|identifierName
parameter_list|()
block|{
return|return
name|QString
argument_list|()
return|;
block|}
DECL|function|language
name|QString
name|language
parameter_list|()
block|{
return|return
name|QString
argument_list|()
return|;
block|}
DECL|function|reset
name|void
name|reset
parameter_list|()
block|{}
DECL|function|isComposing
name|bool
name|isComposing
parameter_list|()
specifier|const
block|{
return|return
literal|false
return|;
block|}
DECL|function|filterEvent
name|bool
name|filterEvent
parameter_list|(
specifier|const
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|lastTypes
operator|.
name|append
argument_list|(
name|event
operator|->
name|type
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
public|public:
DECL|member|lastTypes
name|QList
argument_list|<
name|QEvent
operator|::
name|Type
argument_list|>
name|lastTypes
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|filterMouseEvents
name|void
name|tst_QInputContext
operator|::
name|filterMouseEvents
parameter_list|()
block|{
name|QLineEdit
name|le
decl_stmt|;
name|le
operator|.
name|show
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|setActiveWindow
argument_list|(
operator|&
name|le
argument_list|)
expr_stmt|;
name|QFilterInputContext
modifier|*
name|ic
init|=
operator|new
name|QFilterInputContext
decl_stmt|;
name|qApp
operator|->
name|setInputContext
argument_list|(
name|ic
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|mouseClick
argument_list|(
operator|&
name|le
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ic
operator|->
name|lastTypes
operator|.
name|indexOf
argument_list|(
name|QEvent
operator|::
name|MouseButtonRelease
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|RequestSoftwareInputPanelStyle
class|class
name|RequestSoftwareInputPanelStyle
super|:
specifier|public
name|QWindowsStyle
block|{
public|public:
DECL|function|RequestSoftwareInputPanelStyle
name|RequestSoftwareInputPanelStyle
parameter_list|()
member_init_list|:
name|m_rsipBehavior
argument_list|(
name|RSIP_OnMouseClickAndAlreadyFocused
argument_list|)
block|{
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|qApp
operator|->
name|setAutoSipEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
DECL|function|~RequestSoftwareInputPanelStyle
name|~
name|RequestSoftwareInputPanelStyle
parameter_list|()
block|{     }
DECL|function|styleHint
name|int
name|styleHint
parameter_list|(
name|StyleHint
name|hint
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
init|=
literal|0
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
init|=
literal|0
parameter_list|,
name|QStyleHintReturn
modifier|*
name|returnData
init|=
literal|0
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|hint
operator|==
name|SH_RequestSoftwareInputPanel
condition|)
block|{
return|return
name|m_rsipBehavior
return|;
block|}
else|else
block|{
return|return
name|QWindowsStyle
operator|::
name|styleHint
argument_list|(
name|hint
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|,
name|returnData
argument_list|)
return|;
block|}
block|}
DECL|member|m_rsipBehavior
name|RequestSoftwareInputPanel
name|m_rsipBehavior
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|requestSoftwareInputPanel
name|void
name|tst_QInputContext
operator|::
name|requestSoftwareInputPanel
parameter_list|()
block|{
name|QStyle
modifier|*
name|oldStyle
init|=
name|qApp
operator|->
name|style
argument_list|()
decl_stmt|;
name|oldStyle
operator|->
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// Prevent it being deleted.
name|RequestSoftwareInputPanelStyle
modifier|*
name|newStyle
init|=
operator|new
name|RequestSoftwareInputPanelStyle
decl_stmt|;
name|qApp
operator|->
name|setStyle
argument_list|(
name|newStyle
argument_list|)
expr_stmt|;
name|QWidget
name|w
decl_stmt|;
name|QLayout
modifier|*
name|layout
init|=
operator|new
name|QVBoxLayout
decl_stmt|;
name|QLineEdit
modifier|*
name|le1
decl_stmt|,
modifier|*
name|le2
decl_stmt|;
name|le1
operator|=
operator|new
name|QLineEdit
expr_stmt|;
name|le2
operator|=
operator|new
name|QLineEdit
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|le1
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|le2
argument_list|)
expr_stmt|;
name|w
operator|.
name|setLayout
argument_list|(
name|layout
argument_list|)
expr_stmt|;
name|QFilterInputContext
modifier|*
name|ic
init|=
operator|new
name|QFilterInputContext
decl_stmt|;
name|qApp
operator|->
name|setInputContext
argument_list|(
name|ic
argument_list|)
expr_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|setActiveWindow
argument_list|(
operator|&
name|w
argument_list|)
expr_stmt|;
comment|// Testing single click panel activation.
name|newStyle
operator|->
name|m_rsipBehavior
operator|=
name|QStyle
operator|::
name|RSIP_OnMouseClick
expr_stmt|;
name|QTest
operator|::
name|mouseClick
argument_list|(
name|le2
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|,
name|QPoint
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ic
operator|->
name|lastTypes
operator|.
name|indexOf
argument_list|(
name|QEvent
operator|::
name|RequestSoftwareInputPanel
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|ic
operator|->
name|lastTypes
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Testing double click panel activation.
name|newStyle
operator|->
name|m_rsipBehavior
operator|=
name|QStyle
operator|::
name|RSIP_OnMouseClickAndAlreadyFocused
expr_stmt|;
name|QTest
operator|::
name|mouseClick
argument_list|(
name|le1
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|,
name|QPoint
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ic
operator|->
name|lastTypes
operator|.
name|indexOf
argument_list|(
name|QEvent
operator|::
name|RequestSoftwareInputPanel
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|mouseClick
argument_list|(
name|le1
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|,
name|QPoint
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ic
operator|->
name|lastTypes
operator|.
name|indexOf
argument_list|(
name|QEvent
operator|::
name|RequestSoftwareInputPanel
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|ic
operator|->
name|lastTypes
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Testing right mouse button
name|QTest
operator|::
name|mouseClick
argument_list|(
name|le1
argument_list|,
name|Qt
operator|::
name|RightButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|,
name|QPoint
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ic
operator|->
name|lastTypes
operator|.
name|indexOf
argument_list|(
name|QEvent
operator|::
name|RequestSoftwareInputPanel
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|setStyle
argument_list|(
name|oldStyle
argument_list|)
expr_stmt|;
name|oldStyle
operator|->
name|setParent
argument_list|(
name|qApp
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|closeSoftwareInputPanel
name|void
name|tst_QInputContext
operator|::
name|closeSoftwareInputPanel
parameter_list|()
block|{
name|QWidget
name|w
decl_stmt|;
name|QLayout
modifier|*
name|layout
init|=
operator|new
name|QVBoxLayout
decl_stmt|;
name|QLineEdit
modifier|*
name|le1
decl_stmt|,
modifier|*
name|le2
decl_stmt|;
name|QRadioButton
modifier|*
name|rb
decl_stmt|;
name|le1
operator|=
operator|new
name|QLineEdit
expr_stmt|;
name|le2
operator|=
operator|new
name|QLineEdit
expr_stmt|;
name|rb
operator|=
operator|new
name|QRadioButton
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|le1
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|le2
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|rb
argument_list|)
expr_stmt|;
name|w
operator|.
name|setLayout
argument_list|(
name|layout
argument_list|)
expr_stmt|;
name|QFilterInputContext
modifier|*
name|ic
init|=
operator|new
name|QFilterInputContext
decl_stmt|;
name|qApp
operator|->
name|setInputContext
argument_list|(
name|ic
argument_list|)
expr_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|setActiveWindow
argument_list|(
operator|&
name|w
argument_list|)
expr_stmt|;
comment|// Testing that panel doesn't close between two input methods aware widgets.
name|QTest
operator|::
name|mouseClick
argument_list|(
name|le1
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|,
name|QPoint
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|mouseClick
argument_list|(
name|le2
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|,
name|QPoint
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ic
operator|->
name|lastTypes
operator|.
name|indexOf
argument_list|(
name|QEvent
operator|::
name|CloseSoftwareInputPanel
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
comment|// Testing that panel closes when focusing non-aware widget.
name|QTest
operator|::
name|mouseClick
argument_list|(
name|rb
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|,
name|QPoint
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ic
operator|->
name|lastTypes
operator|.
name|indexOf
argument_list|(
name|QEvent
operator|::
name|CloseSoftwareInputPanel
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|selections
name|void
name|tst_QInputContext
operator|::
name|selections
parameter_list|()
block|{
name|QLineEdit
name|le
decl_stmt|;
name|le
operator|.
name|setText
argument_list|(
literal|"Test text"
argument_list|)
expr_stmt|;
name|le
operator|.
name|setSelection
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|le
operator|.
name|inputMethodQuery
argument_list|(
name|Qt
operator|::
name|ImCursorPosition
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|le
operator|.
name|inputMethodQuery
argument_list|(
name|Qt
operator|::
name|ImAnchorPosition
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|>
name|attributes
decl_stmt|;
name|attributes
operator|.
name|append
argument_list|(
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|(
name|QInputMethodEvent
operator|::
name|Selection
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|,
name|QVariant
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QInputMethodEvent
name|event
argument_list|(
literal|""
argument_list|,
name|attributes
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
operator|&
name|le
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|le
operator|.
name|cursorPosition
argument_list|()
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|le
operator|.
name|selectionStart
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|le
operator|.
name|inputMethodQuery
argument_list|(
name|Qt
operator|::
name|ImCursorPosition
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|le
operator|.
name|inputMethodQuery
argument_list|(
name|Qt
operator|::
name|ImAnchorPosition
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|focusProxy
name|void
name|tst_QInputContext
operator|::
name|focusProxy
parameter_list|()
block|{
name|QWidget
name|toplevel
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|X11BypassWindowManagerHint
argument_list|)
decl_stmt|;
name|toplevel
operator|.
name|setObjectName
argument_list|(
literal|"toplevel"
argument_list|)
expr_stmt|;
name|QWidget
name|w
argument_list|(
operator|&
name|toplevel
argument_list|)
decl_stmt|;
name|w
operator|.
name|setObjectName
argument_list|(
literal|"w"
argument_list|)
expr_stmt|;
name|QWidget
name|proxy
argument_list|(
operator|&
name|w
argument_list|)
decl_stmt|;
name|proxy
operator|.
name|setObjectName
argument_list|(
literal|"proxy"
argument_list|)
expr_stmt|;
name|QWidget
name|proxy2
argument_list|(
operator|&
name|w
argument_list|)
decl_stmt|;
name|proxy2
operator|.
name|setObjectName
argument_list|(
literal|"proxy2"
argument_list|)
expr_stmt|;
name|w
operator|.
name|setFocusProxy
argument_list|(
operator|&
name|proxy
argument_list|)
expr_stmt|;
name|w
operator|.
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_InputMethodEnabled
argument_list|)
expr_stmt|;
name|toplevel
operator|.
name|show
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|setActiveWindow
argument_list|(
operator|&
name|toplevel
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowShown
argument_list|(
operator|&
name|toplevel
argument_list|)
expr_stmt|;
name|w
operator|.
name|setFocus
argument_list|()
expr_stmt|;
name|w
operator|.
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_NativeWindow
argument_list|)
expr_stmt|;
comment|// we shouldn't crash!
name|proxy
operator|.
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_InputMethodEnabled
argument_list|)
expr_stmt|;
name|proxy2
operator|.
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_InputMethodEnabled
argument_list|)
expr_stmt|;
name|proxy2
operator|.
name|setFocus
argument_list|()
expr_stmt|;
name|w
operator|.
name|setFocus
argument_list|()
expr_stmt|;
name|QInputContext
modifier|*
name|gic
init|=
name|qApp
operator|->
name|inputContext
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|gic
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|gic
operator|->
name|focusWidget
argument_list|()
argument_list|,
operator|&
name|proxy
argument_list|)
expr_stmt|;
comment|// then change the focus proxy and check that input context is valid
name|QVERIFY
argument_list|(
name|w
operator|.
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proxy
operator|.
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|proxy2
operator|.
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|w
operator|.
name|setFocusProxy
argument_list|(
operator|&
name|proxy2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|w
operator|.
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proxy
operator|.
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|proxy2
operator|.
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|gic
operator|->
name|focusWidget
argument_list|()
argument_list|,
operator|&
name|proxy
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QT_WEBKIT_LIB
end_ifdef
begin_class
DECL|class|AutoWebView
class|class
name|AutoWebView
super|:
specifier|public
name|QWebView
block|{
name|Q_OBJECT
public|public:
DECL|function|AutoWebView
name|AutoWebView
parameter_list|()
member_init_list|:
name|m_length
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_mode
argument_list|(
name|QLineEdit
operator|::
name|Normal
argument_list|)
block|{
name|updatePage
argument_list|()
expr_stmt|;
block|}
DECL|function|~AutoWebView
name|~
name|AutoWebView
parameter_list|()
block|{}
DECL|function|updatePage
name|void
name|updatePage
parameter_list|()
block|{
comment|// The update might reset the input method parameters.
name|bool
name|imEnabled
init|=
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_InputMethodEnabled
argument_list|)
decl_stmt|;
name|Qt
operator|::
name|InputMethodHints
name|hints
init|=
name|inputMethodHints
argument_list|()
decl_stmt|;
name|QString
name|page
init|=
literal|"<html><body onLoad=\"document.forms.testform.testinput.focus()\">"
literal|"<form name=\"testform\"><input name=\"testinput\" type=\"%1\" %2></form></body></html>"
decl_stmt|;
if|if
condition|(
name|m_mode
operator|==
name|QLineEdit
operator|::
name|Password
condition|)
name|page
operator|=
name|page
operator|.
name|arg
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
else|else
name|page
operator|=
name|page
operator|.
name|arg
argument_list|(
literal|"text"
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_length
operator|==
literal|0
condition|)
name|page
operator|=
name|page
operator|.
name|arg
argument_list|(
literal|""
argument_list|)
expr_stmt|;
else|else
name|page
operator|=
name|page
operator|.
name|arg
argument_list|(
literal|"maxlength=\""
operator|+
name|QString
operator|::
name|number
argument_list|(
name|m_length
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|setHtml
argument_list|(
name|page
argument_list|)
expr_stmt|;
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_InputMethodEnabled
argument_list|,
name|imEnabled
argument_list|)
expr_stmt|;
name|setInputMethodHints
argument_list|(
name|hints
argument_list|)
expr_stmt|;
block|}
DECL|function|setMaxLength
name|void
name|setMaxLength
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|m_length
operator|=
name|length
expr_stmt|;
name|updatePage
argument_list|()
expr_stmt|;
block|}
DECL|function|setEchoMode
name|void
name|setEchoMode
parameter_list|(
name|QLineEdit
operator|::
name|EchoMode
name|mode
parameter_list|)
block|{
name|m_mode
operator|=
name|mode
expr_stmt|;
name|updatePage
argument_list|()
expr_stmt|;
block|}
DECL|member|m_length
name|int
name|m_length
decl_stmt|;
DECL|member|m_mode
name|QLineEdit
operator|::
name|EchoMode
name|m_mode
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|AutoGraphicsWebView
class|class
name|AutoGraphicsWebView
super|:
specifier|public
name|QGraphicsView
block|{
name|Q_OBJECT
public|public:
DECL|function|AutoGraphicsWebView
name|AutoGraphicsWebView
parameter_list|()
member_init_list|:
name|m_length
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_mode
argument_list|(
name|QLineEdit
operator|::
name|Normal
argument_list|)
block|{
name|m_scene
operator|.
name|addItem
argument_list|(
operator|&
name|m_view
argument_list|)
expr_stmt|;
name|setScene
argument_list|(
operator|&
name|m_scene
argument_list|)
expr_stmt|;
name|m_view
operator|.
name|setFocus
argument_list|()
expr_stmt|;
name|updatePage
argument_list|()
expr_stmt|;
block|}
DECL|function|~AutoGraphicsWebView
name|~
name|AutoGraphicsWebView
parameter_list|()
block|{}
DECL|function|updatePage
name|void
name|updatePage
parameter_list|()
block|{
comment|// The update might reset the input method parameters.
name|bool
name|imEnabled
init|=
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_InputMethodEnabled
argument_list|)
decl_stmt|;
name|Qt
operator|::
name|InputMethodHints
name|hints
init|=
name|inputMethodHints
argument_list|()
decl_stmt|;
name|QString
name|page
init|=
literal|"<html><body onLoad=\"document.forms.testform.testinput.focus()\">"
literal|"<form name=\"testform\"><input name=\"testinput\" type=\"%1\" %2></form></body></html>"
decl_stmt|;
if|if
condition|(
name|m_mode
operator|==
name|QLineEdit
operator|::
name|Password
condition|)
name|page
operator|=
name|page
operator|.
name|arg
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
else|else
name|page
operator|=
name|page
operator|.
name|arg
argument_list|(
literal|"text"
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_length
operator|==
literal|0
condition|)
name|page
operator|=
name|page
operator|.
name|arg
argument_list|(
literal|""
argument_list|)
expr_stmt|;
else|else
name|page
operator|=
name|page
operator|.
name|arg
argument_list|(
literal|"maxlength=\""
operator|+
name|QString
operator|::
name|number
argument_list|(
name|m_length
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|m_view
operator|.
name|setHtml
argument_list|(
name|page
argument_list|)
expr_stmt|;
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_InputMethodEnabled
argument_list|,
name|imEnabled
argument_list|)
expr_stmt|;
name|setInputMethodHints
argument_list|(
name|hints
argument_list|)
expr_stmt|;
block|}
DECL|function|setMaxLength
name|void
name|setMaxLength
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|m_length
operator|=
name|length
expr_stmt|;
name|updatePage
argument_list|()
expr_stmt|;
block|}
DECL|function|setEchoMode
name|void
name|setEchoMode
parameter_list|(
name|QLineEdit
operator|::
name|EchoMode
name|mode
parameter_list|)
block|{
name|m_mode
operator|=
name|mode
expr_stmt|;
name|updatePage
argument_list|()
expr_stmt|;
block|}
DECL|member|m_length
name|int
name|m_length
decl_stmt|;
DECL|member|m_mode
name|QLineEdit
operator|::
name|EchoMode
name|m_mode
decl_stmt|;
DECL|member|m_scene
name|QGraphicsScene
name|m_scene
decl_stmt|;
DECL|member|m_view
name|QGraphicsWebView
name|m_view
decl_stmt|;
block|}
class|;
end_class
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_WEBKIT_LIB
end_comment
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QInputContext
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qinputcontext.moc"
end_include
end_unit
