begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|"../../shared/util.h"
end_include
begin_include
include|#
directive|include
file|<qinputcontext.h>
end_include
begin_include
include|#
directive|include
file|<qlineedit.h>
end_include
begin_include
include|#
directive|include
file|<qplaintextedit.h>
end_include
begin_include
include|#
directive|include
file|<qlayout.h>
end_include
begin_include
include|#
directive|include
file|<qradiobutton.h>
end_include
begin_include
include|#
directive|include
file|<qwindowsstyle.h>
end_include
begin_include
include|#
directive|include
file|<qdesktopwidget.h>
end_include
begin_include
include|#
directive|include
file|<qpushbutton.h>
end_include
begin_include
include|#
directive|include
file|<qgraphicsview.h>
end_include
begin_include
include|#
directive|include
file|<qgraphicsscene.h>
end_include
begin_ifdef
ifdef|#
directive|ifdef
name|QT_WEBKIT_LIB
end_ifdef
begin_include
include|#
directive|include
file|<qwebview.h>
end_include
begin_include
include|#
directive|include
file|<qgraphicswebview.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
end_ifdef
begin_include
include|#
directive|include
file|<private/qt_s60_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qcoefepinputcontext_p.h>
end_include
begin_include
include|#
directive|include
file|<w32std.h>
end_include
begin_include
include|#
directive|include
file|<coecntrl.h>
end_include
begin_endif
endif|#
directive|endif
end_endif
begin_class
DECL|class|tst_QInputContext
class|class
name|tst_QInputContext
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|tst_QInputContext
name|tst_QInputContext
parameter_list|()
member_init_list|:
name|m_phoneIsQwerty
argument_list|(
literal|false
argument_list|)
block|{}
DECL|function|~tst_QInputContext
specifier|virtual
name|~
name|tst_QInputContext
parameter_list|()
block|{}
template|template
parameter_list|<
name|class
name|WidgetType
parameter_list|>
name|void
name|symbianTestCoeFepInputContext_addData
parameter_list|()
function_decl|;
public|public
name|slots
public|:
name|void
name|initTestCase
parameter_list|()
function_decl|;
DECL|function|cleanupTestCase
name|void
name|cleanupTestCase
parameter_list|()
block|{}
DECL|function|init
name|void
name|init
parameter_list|()
block|{}
DECL|function|cleanup
name|void
name|cleanup
parameter_list|()
block|{}
private|private
name|slots
private|:
name|void
name|maximumTextLength
parameter_list|()
function_decl|;
name|void
name|filterMouseEvents
parameter_list|()
function_decl|;
name|void
name|requestSoftwareInputPanel
parameter_list|()
function_decl|;
name|void
name|closeSoftwareInputPanel
parameter_list|()
function_decl|;
name|void
name|selections
parameter_list|()
function_decl|;
name|void
name|focusProxy
parameter_list|()
function_decl|;
name|void
name|contextInheritance
parameter_list|()
function_decl|;
name|void
name|symbianTestCoeFepInputContext_data
parameter_list|()
function_decl|;
name|void
name|symbianTestCoeFepInputContext
parameter_list|()
function_decl|;
name|void
name|symbianTestCoeFepAutoCommit_data
parameter_list|()
function_decl|;
name|void
name|symbianTestCoeFepAutoCommit
parameter_list|()
function_decl|;
private|private:
DECL|member|m_phoneIsQwerty
name|bool
name|m_phoneIsQwerty
decl_stmt|;
block|}
class|;
end_class
begin_ifdef
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
end_ifdef
begin_class
DECL|class|KeyEvent
class|class
name|KeyEvent
super|:
specifier|public
name|TWsEvent
block|{
public|public:
DECL|function|KeyEvent
name|KeyEvent
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|,
name|TInt
name|type
parameter_list|,
name|TInt
name|scanCode
parameter_list|,
name|TUint
name|code
parameter_list|,
name|TUint
name|modifiers
parameter_list|,
name|TInt
name|repeats
parameter_list|)
block|{
name|iHandle
operator|=
name|w
operator|->
name|effectiveWinId
argument_list|()
operator|->
name|DrawableWindow
argument_list|()
operator|->
name|WindowGroupId
argument_list|()
expr_stmt|;
name|iType
operator|=
name|type
expr_stmt|;
name|SetTimeNow
argument_list|()
expr_stmt|;
name|TKeyEvent
modifier|*
name|keyEvent
init|=
cast|reinterpret_cast
argument_list|<
name|TKeyEvent
operator|*
argument_list|>
argument_list|(
name|iEventData
argument_list|)
decl_stmt|;
name|keyEvent
operator|->
name|iScanCode
operator|=
name|scanCode
expr_stmt|;
name|keyEvent
operator|->
name|iCode
operator|=
name|code
expr_stmt|;
name|keyEvent
operator|->
name|iModifiers
operator|=
name|modifiers
expr_stmt|;
name|keyEvent
operator|->
name|iRepeats
operator|=
name|repeats
expr_stmt|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|FepReplayEvent
class|class
name|FepReplayEvent
block|{
public|public:
DECL|enum|Type
enum|enum
name|Type
block|{
DECL|enumerator|Pause
name|Pause
block|,
DECL|enumerator|Key
name|Key
block|,
DECL|enumerator|CompleteKey
name|CompleteKey
block|}
enum|;
DECL|function|FepReplayEvent
name|FepReplayEvent
parameter_list|(
name|int
name|msecsToPause
parameter_list|)
member_init_list|:
name|m_type
argument_list|(
name|Pause
argument_list|)
member_init_list|,
name|m_msecsToPause
argument_list|(
name|msecsToPause
argument_list|)
block|{     }
DECL|function|FepReplayEvent
name|FepReplayEvent
parameter_list|(
name|TInt
name|keyType
parameter_list|,
name|TInt
name|scanCode
parameter_list|,
name|TUint
name|code
parameter_list|,
name|TUint
name|modifiers
parameter_list|,
name|TInt
name|repeats
parameter_list|)
member_init_list|:
name|m_type
argument_list|(
name|Key
argument_list|)
member_init_list|,
name|m_keyType
argument_list|(
name|keyType
argument_list|)
member_init_list|,
name|m_scanCode
argument_list|(
name|scanCode
argument_list|)
member_init_list|,
name|m_code
argument_list|(
name|code
argument_list|)
member_init_list|,
name|m_modifiers
argument_list|(
name|modifiers
argument_list|)
member_init_list|,
name|m_repeats
argument_list|(
name|repeats
argument_list|)
block|{     }
DECL|function|FepReplayEvent
name|FepReplayEvent
parameter_list|(
name|TInt
name|scanCode
parameter_list|,
name|TUint
name|code
parameter_list|,
name|TUint
name|modifiers
parameter_list|,
name|TInt
name|repeats
parameter_list|)
member_init_list|:
name|m_type
argument_list|(
name|CompleteKey
argument_list|)
member_init_list|,
name|m_scanCode
argument_list|(
name|scanCode
argument_list|)
member_init_list|,
name|m_code
argument_list|(
name|code
argument_list|)
member_init_list|,
name|m_modifiers
argument_list|(
name|modifiers
argument_list|)
member_init_list|,
name|m_repeats
argument_list|(
name|repeats
argument_list|)
block|{     }
DECL|function|sendEvent
name|void
name|sendEvent
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|,
name|TInt
name|type
parameter_list|,
name|TInt
name|scanCode
parameter_list|,
name|TUint
name|code
parameter_list|,
name|TUint
name|modifiers
parameter_list|,
name|TInt
name|repeats
parameter_list|)
block|{
name|KeyEvent
name|event
argument_list|(
name|w
argument_list|,
name|type
argument_list|,
name|scanCode
argument_list|,
name|code
argument_list|,
name|modifiers
argument_list|,
name|repeats
argument_list|)
decl_stmt|;
name|S60
operator|->
name|wsSession
argument_list|()
operator|.
name|SendEventToWindowGroup
argument_list|(
name|w
operator|->
name|effectiveWinId
argument_list|()
operator|->
name|DrawableWindow
argument_list|()
operator|->
name|WindowGroupId
argument_list|()
argument_list|,
name|event
argument_list|)
expr_stmt|;
block|}
DECL|function|pause
name|void
name|pause
parameter_list|(
name|int
name|msecs
parameter_list|)
block|{
comment|// Don't use qWait here. The polling nature of that function screws up the test.
name|QTimer
name|timer
decl_stmt|;
name|QEventLoop
name|loop
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|timer
argument_list|,
name|SIGNAL
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|,
operator|&
name|loop
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|timer
operator|.
name|setSingleShot
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|timer
operator|.
name|start
argument_list|(
name|msecs
argument_list|)
expr_stmt|;
name|loop
operator|.
name|exec
argument_list|()
expr_stmt|;
block|}
comment|// For some reason, the test fails if using processEvents instead of an event loop
comment|// with a timer to quit it, so use the timer.
DECL|macro|KEY_WAIT
define|#
directive|define
name|KEY_WAIT
value|10
DECL|function|replay
name|void
name|replay
parameter_list|(
name|QWidget
modifier|*
name|w
parameter_list|)
block|{
if|if
condition|(
name|m_type
operator|==
name|Pause
condition|)
block|{
name|pause
argument_list|(
name|m_msecsToPause
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m_type
operator|==
name|Key
condition|)
block|{
name|sendEvent
argument_list|(
name|w
argument_list|,
name|m_keyType
argument_list|,
name|m_scanCode
argument_list|,
name|m_code
argument_list|,
name|m_modifiers
argument_list|,
name|m_repeats
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_keyType
operator|!=
name|EEventKeyDown
condition|)
comment|// EEventKeyDown events should have no pause before the EEventKey event.
name|pause
argument_list|(
name|KEY_WAIT
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|m_type
operator|==
name|CompleteKey
condition|)
block|{
name|sendEvent
argument_list|(
name|w
argument_list|,
name|EEventKeyDown
argument_list|,
name|m_scanCode
argument_list|,
literal|0
argument_list|,
name|m_modifiers
argument_list|,
name|m_repeats
argument_list|)
expr_stmt|;
comment|// EEventKeyDown events should have no pause before the EEventKey event.
name|sendEvent
argument_list|(
name|w
argument_list|,
name|EEventKey
argument_list|,
name|m_scanCode
argument_list|,
name|m_code
argument_list|,
name|m_modifiers
argument_list|,
name|m_repeats
argument_list|)
expr_stmt|;
name|pause
argument_list|(
name|KEY_WAIT
argument_list|)
expr_stmt|;
name|sendEvent
argument_list|(
name|w
argument_list|,
name|EEventKeyUp
argument_list|,
name|m_scanCode
argument_list|,
literal|0
argument_list|,
name|m_modifiers
argument_list|,
name|m_repeats
argument_list|)
expr_stmt|;
name|pause
argument_list|(
name|KEY_WAIT
argument_list|)
expr_stmt|;
block|}
block|}
private|private:
DECL|member|m_type
name|Type
name|m_type
decl_stmt|;
DECL|member|m_msecsToPause
name|int
name|m_msecsToPause
decl_stmt|;
DECL|member|m_keyType
name|TInt
name|m_keyType
decl_stmt|;
DECL|member|m_scanCode
name|TInt
name|m_scanCode
decl_stmt|;
DECL|member|m_code
name|TUint
name|m_code
decl_stmt|;
DECL|member|m_modifiers
name|TUint
name|m_modifiers
decl_stmt|;
DECL|member|m_repeats
name|TInt
name|m_repeats
decl_stmt|;
block|}
class|;
end_class
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QList<FepReplayEvent>
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|Qt::InputMethodHints
argument_list|)
end_macro
begin_expr_stmt
DECL|variable|EchoMode
name|Q_DECLARE_METATYPE
argument_list|(
name|QLineEdit
operator|::
name|EchoMode
argument_list|)
expr_stmt|;
end_expr_stmt
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// Q_OS_SYMBIAN
end_comment
begin_function
DECL|function|initTestCase
name|void
name|tst_QInputContext
operator|::
name|initTestCase
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
comment|// Sanity test. Checks FEP for:
comment|// - T9 mode is default (it will attempt to fix this)
comment|// - Language is English (it cannot fix this; bail out if not correct)
name|QWidget
name|w
decl_stmt|;
name|QLayout
modifier|*
name|layout
init|=
operator|new
name|QVBoxLayout
decl_stmt|;
name|w
operator|.
name|setLayout
argument_list|(
name|layout
argument_list|)
expr_stmt|;
name|QLineEdit
modifier|*
name|lineedit
init|=
operator|new
name|QLineEdit
decl_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|lineedit
argument_list|)
expr_stmt|;
name|lineedit
operator|->
name|setFocus
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
name|lineedit
operator|->
name|setEditFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
name|QDesktopWidget
name|desktop
decl_stmt|;
name|QRect
name|screenSize
init|=
name|desktop
operator|.
name|screenGeometry
argument_list|(
operator|&
name|w
argument_list|)
decl_stmt|;
if|if
condition|(
name|screenSize
operator|.
name|width
argument_list|()
operator|>
name|screenSize
operator|.
name|height
argument_list|()
condition|)
block|{
comment|// Crude way of finding out we are running on a qwerty phone.
name|m_phoneIsQwerty
operator|=
literal|true
expr_stmt|;
return|return;
block|}
for|for
control|(
name|int
name|iterations
init|=
literal|0
init|;
name|iterations
operator|<
literal|16
condition|;
name|iterations
operator|++
control|)
block|{
name|QTest
operator|::
name|qWait
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|FepReplayEvent
argument_list|>
name|keyEvents
decl_stmt|;
name|keyEvents
operator|<<
name|FepReplayEvent
argument_list|(
literal|'9'
argument_list|,
literal|'9'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|keyEvents
operator|<<
name|FepReplayEvent
argument_list|(
literal|'6'
argument_list|,
literal|'6'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|keyEvents
operator|<<
name|FepReplayEvent
argument_list|(
literal|'8'
argument_list|,
literal|'8'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|keyEvents
operator|<<
name|FepReplayEvent
argument_list|(
name|EStdKeyRightArrow
argument_list|,
name|EKeyRightArrow
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|FepReplayEvent
name|event
decl|,
name|keyEvents
control|)
block|{
name|event
operator|.
name|replay
argument_list|(
name|lineedit
argument_list|)
expr_stmt|;
block|}
name|QApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
if|if
condition|(
name|lineedit
operator|->
name|text
argument_list|()
operator|.
name|endsWith
argument_list|(
literal|"you"
argument_list|,
name|Qt
operator|::
name|CaseInsensitive
argument_list|)
condition|)
block|{
comment|// Success!
return|return;
block|}
comment|// Try changing modes.
comment|// After 8 iterations, try to press the mode switch twice before typing.
for|for
control|(
name|int
name|c
init|=
literal|0
init|;
name|c
operator|<=
name|iterations
operator|/
literal|8
condition|;
name|c
operator|++
control|)
block|{
name|FepReplayEvent
argument_list|(
name|EStdKeyHash
argument_list|,
literal|'#'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|replay
argument_list|(
name|lineedit
argument_list|)
expr_stmt|;
block|}
block|}
name|QFAIL
argument_list|(
literal|"FEP sanity test failed. Either the phone is not set to English, or the test was unable to enable T9"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|maximumTextLength
name|void
name|tst_QInputContext
operator|::
name|maximumTextLength
parameter_list|()
block|{
name|QLineEdit
name|le
decl_stmt|;
name|le
operator|.
name|setMaxLength
argument_list|(
literal|15
argument_list|)
expr_stmt|;
name|QVariant
name|variant
init|=
name|le
operator|.
name|inputMethodQuery
argument_list|(
name|Qt
operator|::
name|ImMaximumTextLength
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|variant
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|variant
operator|.
name|toInt
argument_list|()
argument_list|,
literal|15
argument_list|)
expr_stmt|;
name|QPlainTextEdit
name|pte
decl_stmt|;
comment|// For BC/historical reasons, QPlainTextEdit::inputMethodQuery is protected.
name|variant
operator|=
cast|static_cast
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
operator|&
name|pte
argument_list|)
operator|->
name|inputMethodQuery
argument_list|(
name|Qt
operator|::
name|ImMaximumTextLength
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|variant
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|QFilterInputContext
class|class
name|QFilterInputContext
super|:
specifier|public
name|QInputContext
block|{
public|public:
DECL|function|QFilterInputContext
name|QFilterInputContext
parameter_list|()
block|{}
DECL|function|~QFilterInputContext
name|~
name|QFilterInputContext
parameter_list|()
block|{}
DECL|function|identifierName
name|QString
name|identifierName
parameter_list|()
block|{
return|return
name|QString
argument_list|()
return|;
block|}
DECL|function|language
name|QString
name|language
parameter_list|()
block|{
return|return
name|QString
argument_list|()
return|;
block|}
DECL|function|reset
name|void
name|reset
parameter_list|()
block|{}
DECL|function|isComposing
name|bool
name|isComposing
parameter_list|()
specifier|const
block|{
return|return
literal|false
return|;
block|}
DECL|function|filterEvent
name|bool
name|filterEvent
parameter_list|(
specifier|const
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|lastTypes
operator|.
name|append
argument_list|(
name|event
operator|->
name|type
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
public|public:
DECL|member|lastTypes
name|QList
argument_list|<
name|QEvent
operator|::
name|Type
argument_list|>
name|lastTypes
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|filterMouseEvents
name|void
name|tst_QInputContext
operator|::
name|filterMouseEvents
parameter_list|()
block|{
name|QLineEdit
name|le
decl_stmt|;
name|le
operator|.
name|show
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|setActiveWindow
argument_list|(
operator|&
name|le
argument_list|)
expr_stmt|;
name|QFilterInputContext
modifier|*
name|ic
init|=
operator|new
name|QFilterInputContext
decl_stmt|;
name|le
operator|.
name|setInputContext
argument_list|(
name|ic
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|mouseClick
argument_list|(
operator|&
name|le
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ic
operator|->
name|lastTypes
operator|.
name|indexOf
argument_list|(
name|QEvent
operator|::
name|MouseButtonRelease
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|le
operator|.
name|setInputContext
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|RequestSoftwareInputPanelStyle
class|class
name|RequestSoftwareInputPanelStyle
super|:
specifier|public
name|QWindowsStyle
block|{
public|public:
DECL|function|RequestSoftwareInputPanelStyle
name|RequestSoftwareInputPanelStyle
parameter_list|()
member_init_list|:
name|m_rsipBehavior
argument_list|(
name|RSIP_OnMouseClickAndAlreadyFocused
argument_list|)
block|{
ifdef|#
directive|ifdef
name|Q_OS_WINCE
name|qApp
operator|->
name|setAutoSipEnabled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
DECL|function|~RequestSoftwareInputPanelStyle
name|~
name|RequestSoftwareInputPanelStyle
parameter_list|()
block|{     }
DECL|function|styleHint
name|int
name|styleHint
parameter_list|(
name|StyleHint
name|hint
parameter_list|,
specifier|const
name|QStyleOption
modifier|*
name|opt
init|=
literal|0
parameter_list|,
specifier|const
name|QWidget
modifier|*
name|widget
init|=
literal|0
parameter_list|,
name|QStyleHintReturn
modifier|*
name|returnData
init|=
literal|0
parameter_list|)
specifier|const
block|{
if|if
condition|(
name|hint
operator|==
name|SH_RequestSoftwareInputPanel
condition|)
block|{
return|return
name|m_rsipBehavior
return|;
block|}
else|else
block|{
return|return
name|QWindowsStyle
operator|::
name|styleHint
argument_list|(
name|hint
argument_list|,
name|opt
argument_list|,
name|widget
argument_list|,
name|returnData
argument_list|)
return|;
block|}
block|}
DECL|member|m_rsipBehavior
name|RequestSoftwareInputPanel
name|m_rsipBehavior
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|requestSoftwareInputPanel
name|void
name|tst_QInputContext
operator|::
name|requestSoftwareInputPanel
parameter_list|()
block|{
name|QStyle
modifier|*
name|oldStyle
init|=
name|qApp
operator|->
name|style
argument_list|()
decl_stmt|;
name|oldStyle
operator|->
name|setParent
argument_list|(
name|this
argument_list|)
expr_stmt|;
comment|// Prevent it being deleted.
name|RequestSoftwareInputPanelStyle
modifier|*
name|newStyle
init|=
operator|new
name|RequestSoftwareInputPanelStyle
decl_stmt|;
name|qApp
operator|->
name|setStyle
argument_list|(
name|newStyle
argument_list|)
expr_stmt|;
name|QWidget
name|w
decl_stmt|;
name|QLayout
modifier|*
name|layout
init|=
operator|new
name|QVBoxLayout
decl_stmt|;
name|QLineEdit
modifier|*
name|le1
decl_stmt|,
modifier|*
name|le2
decl_stmt|;
name|le1
operator|=
operator|new
name|QLineEdit
expr_stmt|;
name|le2
operator|=
operator|new
name|QLineEdit
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|le1
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|le2
argument_list|)
expr_stmt|;
name|w
operator|.
name|setLayout
argument_list|(
name|layout
argument_list|)
expr_stmt|;
name|QFilterInputContext
modifier|*
name|ic1
decl_stmt|,
modifier|*
name|ic2
decl_stmt|;
name|ic1
operator|=
operator|new
name|QFilterInputContext
expr_stmt|;
name|ic2
operator|=
operator|new
name|QFilterInputContext
expr_stmt|;
name|le1
operator|->
name|setInputContext
argument_list|(
name|ic1
argument_list|)
expr_stmt|;
name|le2
operator|->
name|setInputContext
argument_list|(
name|ic2
argument_list|)
expr_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|setActiveWindow
argument_list|(
operator|&
name|w
argument_list|)
expr_stmt|;
comment|// Testing single click panel activation.
name|newStyle
operator|->
name|m_rsipBehavior
operator|=
name|QStyle
operator|::
name|RSIP_OnMouseClick
expr_stmt|;
name|QTest
operator|::
name|mouseClick
argument_list|(
name|le2
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|,
name|QPoint
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ic2
operator|->
name|lastTypes
operator|.
name|indexOf
argument_list|(
name|QEvent
operator|::
name|RequestSoftwareInputPanel
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|ic2
operator|->
name|lastTypes
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Testing double click panel activation.
name|newStyle
operator|->
name|m_rsipBehavior
operator|=
name|QStyle
operator|::
name|RSIP_OnMouseClickAndAlreadyFocused
expr_stmt|;
name|QTest
operator|::
name|mouseClick
argument_list|(
name|le1
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|,
name|QPoint
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ic1
operator|->
name|lastTypes
operator|.
name|indexOf
argument_list|(
name|QEvent
operator|::
name|RequestSoftwareInputPanel
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|mouseClick
argument_list|(
name|le1
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|,
name|QPoint
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ic1
operator|->
name|lastTypes
operator|.
name|indexOf
argument_list|(
name|QEvent
operator|::
name|RequestSoftwareInputPanel
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
name|ic1
operator|->
name|lastTypes
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Testing right mouse button
name|QTest
operator|::
name|mouseClick
argument_list|(
name|le1
argument_list|,
name|Qt
operator|::
name|RightButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|,
name|QPoint
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ic1
operator|->
name|lastTypes
operator|.
name|indexOf
argument_list|(
name|QEvent
operator|::
name|RequestSoftwareInputPanel
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
name|qApp
operator|->
name|setStyle
argument_list|(
name|oldStyle
argument_list|)
expr_stmt|;
name|oldStyle
operator|->
name|setParent
argument_list|(
name|qApp
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|closeSoftwareInputPanel
name|void
name|tst_QInputContext
operator|::
name|closeSoftwareInputPanel
parameter_list|()
block|{
name|QWidget
name|w
decl_stmt|;
name|QLayout
modifier|*
name|layout
init|=
operator|new
name|QVBoxLayout
decl_stmt|;
name|QLineEdit
modifier|*
name|le1
decl_stmt|,
modifier|*
name|le2
decl_stmt|;
name|QRadioButton
modifier|*
name|rb
decl_stmt|;
name|le1
operator|=
operator|new
name|QLineEdit
expr_stmt|;
name|le2
operator|=
operator|new
name|QLineEdit
expr_stmt|;
name|rb
operator|=
operator|new
name|QRadioButton
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|le1
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|le2
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|rb
argument_list|)
expr_stmt|;
name|w
operator|.
name|setLayout
argument_list|(
name|layout
argument_list|)
expr_stmt|;
name|QFilterInputContext
modifier|*
name|ic1
decl_stmt|,
modifier|*
name|ic2
decl_stmt|;
name|ic1
operator|=
operator|new
name|QFilterInputContext
expr_stmt|;
name|ic2
operator|=
operator|new
name|QFilterInputContext
expr_stmt|;
name|le1
operator|->
name|setInputContext
argument_list|(
name|ic1
argument_list|)
expr_stmt|;
name|le2
operator|->
name|setInputContext
argument_list|(
name|ic2
argument_list|)
expr_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|setActiveWindow
argument_list|(
operator|&
name|w
argument_list|)
expr_stmt|;
comment|// Testing that panel doesn't close between two input methods aware widgets.
name|QTest
operator|::
name|mouseClick
argument_list|(
name|le1
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|,
name|QPoint
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|mouseClick
argument_list|(
name|le2
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|,
name|QPoint
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ic2
operator|->
name|lastTypes
operator|.
name|indexOf
argument_list|(
name|QEvent
operator|::
name|CloseSoftwareInputPanel
argument_list|)
operator|<
literal|0
argument_list|)
expr_stmt|;
comment|// Testing that panel closes when focusing non-aware widget.
name|QTest
operator|::
name|mouseClick
argument_list|(
name|rb
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|,
name|Qt
operator|::
name|NoModifier
argument_list|,
name|QPoint
argument_list|(
literal|5
argument_list|,
literal|5
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ic2
operator|->
name|lastTypes
operator|.
name|indexOf
argument_list|(
name|QEvent
operator|::
name|CloseSoftwareInputPanel
argument_list|)
operator|>=
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|selections
name|void
name|tst_QInputContext
operator|::
name|selections
parameter_list|()
block|{
name|QLineEdit
name|le
decl_stmt|;
name|le
operator|.
name|setText
argument_list|(
literal|"Test text"
argument_list|)
expr_stmt|;
name|le
operator|.
name|setSelection
argument_list|(
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|le
operator|.
name|inputMethodQuery
argument_list|(
name|Qt
operator|::
name|ImCursorPosition
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|le
operator|.
name|inputMethodQuery
argument_list|(
name|Qt
operator|::
name|ImAnchorPosition
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|>
name|attributes
decl_stmt|;
name|attributes
operator|.
name|append
argument_list|(
name|QInputMethodEvent
operator|::
name|Attribute
argument_list|(
name|QInputMethodEvent
operator|::
name|Selection
argument_list|,
literal|5
argument_list|,
literal|3
argument_list|,
name|QVariant
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QInputMethodEvent
name|event
argument_list|(
literal|""
argument_list|,
name|attributes
argument_list|)
decl_stmt|;
name|QApplication
operator|::
name|sendEvent
argument_list|(
operator|&
name|le
argument_list|,
operator|&
name|event
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|le
operator|.
name|cursorPosition
argument_list|()
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|le
operator|.
name|selectionStart
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|le
operator|.
name|inputMethodQuery
argument_list|(
name|Qt
operator|::
name|ImCursorPosition
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|8
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|le
operator|.
name|inputMethodQuery
argument_list|(
name|Qt
operator|::
name|ImAnchorPosition
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|focusProxy
name|void
name|tst_QInputContext
operator|::
name|focusProxy
parameter_list|()
block|{
name|QWidget
name|toplevel
argument_list|(
literal|0
argument_list|,
name|Qt
operator|::
name|X11BypassWindowManagerHint
argument_list|)
decl_stmt|;
name|toplevel
operator|.
name|setObjectName
argument_list|(
literal|"toplevel"
argument_list|)
expr_stmt|;
name|QWidget
name|w
argument_list|(
operator|&
name|toplevel
argument_list|)
decl_stmt|;
name|w
operator|.
name|setObjectName
argument_list|(
literal|"w"
argument_list|)
expr_stmt|;
name|QWidget
name|proxy
argument_list|(
operator|&
name|w
argument_list|)
decl_stmt|;
name|proxy
operator|.
name|setObjectName
argument_list|(
literal|"proxy"
argument_list|)
expr_stmt|;
name|QWidget
name|proxy2
argument_list|(
operator|&
name|w
argument_list|)
decl_stmt|;
name|proxy2
operator|.
name|setObjectName
argument_list|(
literal|"proxy2"
argument_list|)
expr_stmt|;
name|w
operator|.
name|setFocusProxy
argument_list|(
operator|&
name|proxy
argument_list|)
expr_stmt|;
name|w
operator|.
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_InputMethodEnabled
argument_list|)
expr_stmt|;
name|toplevel
operator|.
name|show
argument_list|()
expr_stmt|;
name|QApplication
operator|::
name|setActiveWindow
argument_list|(
operator|&
name|toplevel
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWaitForWindowShown
argument_list|(
operator|&
name|toplevel
argument_list|)
expr_stmt|;
name|w
operator|.
name|setFocus
argument_list|()
expr_stmt|;
name|w
operator|.
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_NativeWindow
argument_list|)
expr_stmt|;
comment|// we shouldn't crash!
name|proxy
operator|.
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_InputMethodEnabled
argument_list|)
expr_stmt|;
name|proxy2
operator|.
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_InputMethodEnabled
argument_list|)
expr_stmt|;
name|proxy2
operator|.
name|setFocus
argument_list|()
expr_stmt|;
name|w
operator|.
name|setFocus
argument_list|()
expr_stmt|;
name|QInputContext
modifier|*
name|gic
init|=
name|qApp
operator|->
name|inputContext
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|gic
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|gic
operator|->
name|focusWidget
argument_list|()
argument_list|,
operator|&
name|proxy
argument_list|)
expr_stmt|;
comment|// then change the focus proxy and check that input context is valid
name|QVERIFY
argument_list|(
name|w
operator|.
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proxy
operator|.
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|proxy2
operator|.
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|w
operator|.
name|setFocusProxy
argument_list|(
operator|&
name|proxy2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|w
operator|.
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proxy
operator|.
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|proxy2
operator|.
name|hasFocus
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|gic
operator|->
name|focusWidget
argument_list|()
argument_list|,
operator|&
name|proxy
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|contextInheritance
name|void
name|tst_QInputContext
operator|::
name|contextInheritance
parameter_list|()
block|{
name|QWidget
name|parent
decl_stmt|;
name|QWidget
name|child
argument_list|(
operator|&
name|parent
argument_list|)
decl_stmt|;
name|parent
operator|.
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_InputMethodEnabled
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|child
operator|.
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_InputMethodEnabled
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parent
operator|.
name|inputContext
argument_list|()
argument_list|,
name|qApp
operator|->
name|inputContext
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|child
operator|.
name|inputContext
argument_list|()
argument_list|,
name|qApp
operator|->
name|inputContext
argument_list|()
argument_list|)
expr_stmt|;
name|QInputContext
modifier|*
name|qic
init|=
operator|new
name|QFilterInputContext
decl_stmt|;
name|parent
operator|.
name|setInputContext
argument_list|(
name|qic
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parent
operator|.
name|inputContext
argument_list|()
argument_list|,
name|qic
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|child
operator|.
name|inputContext
argument_list|()
argument_list|,
name|qic
argument_list|)
expr_stmt|;
name|parent
operator|.
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_InputMethodEnabled
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|parent
operator|.
name|inputContext
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|child
operator|.
name|inputContext
argument_list|()
argument_list|,
name|qic
argument_list|)
expr_stmt|;
name|parent
operator|.
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_InputMethodEnabled
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|parent
operator|.
name|setInputContext
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parent
operator|.
name|inputContext
argument_list|()
argument_list|,
name|qApp
operator|->
name|inputContext
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|child
operator|.
name|inputContext
argument_list|()
argument_list|,
name|qApp
operator|->
name|inputContext
argument_list|()
argument_list|)
expr_stmt|;
name|qic
operator|=
operator|new
name|QFilterInputContext
expr_stmt|;
name|qApp
operator|->
name|setInputContext
argument_list|(
name|qic
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|parent
operator|.
name|inputContext
argument_list|()
argument_list|,
name|qic
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|child
operator|.
name|inputContext
argument_list|()
argument_list|,
name|qic
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifdef
ifdef|#
directive|ifdef
name|QT_WEBKIT_LIB
end_ifdef
begin_class
DECL|class|AutoWebView
class|class
name|AutoWebView
super|:
specifier|public
name|QWebView
block|{
name|Q_OBJECT
public|public:
DECL|function|AutoWebView
name|AutoWebView
parameter_list|()
member_init_list|:
name|m_length
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_mode
argument_list|(
name|QLineEdit
operator|::
name|Normal
argument_list|)
block|{
name|updatePage
argument_list|()
expr_stmt|;
block|}
DECL|function|~AutoWebView
name|~
name|AutoWebView
parameter_list|()
block|{}
DECL|function|updatePage
name|void
name|updatePage
parameter_list|()
block|{
comment|// The update might reset the input method parameters.
name|bool
name|imEnabled
init|=
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_InputMethodEnabled
argument_list|)
decl_stmt|;
name|Qt
operator|::
name|InputMethodHints
name|hints
init|=
name|inputMethodHints
argument_list|()
decl_stmt|;
name|QString
name|page
init|=
literal|"<html><body onLoad=\"document.forms.testform.testinput.focus()\">"
literal|"<form name=\"testform\"><input name=\"testinput\" type=\"%1\" %2></form></body></html>"
decl_stmt|;
if|if
condition|(
name|m_mode
operator|==
name|QLineEdit
operator|::
name|Password
condition|)
name|page
operator|=
name|page
operator|.
name|arg
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
else|else
name|page
operator|=
name|page
operator|.
name|arg
argument_list|(
literal|"text"
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_length
operator|==
literal|0
condition|)
name|page
operator|=
name|page
operator|.
name|arg
argument_list|(
literal|""
argument_list|)
expr_stmt|;
else|else
name|page
operator|=
name|page
operator|.
name|arg
argument_list|(
literal|"maxlength=\""
operator|+
name|QString
operator|::
name|number
argument_list|(
name|m_length
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|setHtml
argument_list|(
name|page
argument_list|)
expr_stmt|;
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_InputMethodEnabled
argument_list|,
name|imEnabled
argument_list|)
expr_stmt|;
name|setInputMethodHints
argument_list|(
name|hints
argument_list|)
expr_stmt|;
block|}
DECL|function|setMaxLength
name|void
name|setMaxLength
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|m_length
operator|=
name|length
expr_stmt|;
name|updatePage
argument_list|()
expr_stmt|;
block|}
DECL|function|setEchoMode
name|void
name|setEchoMode
parameter_list|(
name|QLineEdit
operator|::
name|EchoMode
name|mode
parameter_list|)
block|{
name|m_mode
operator|=
name|mode
expr_stmt|;
name|updatePage
argument_list|()
expr_stmt|;
block|}
DECL|member|m_length
name|int
name|m_length
decl_stmt|;
DECL|member|m_mode
name|QLineEdit
operator|::
name|EchoMode
name|m_mode
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|AutoGraphicsWebView
class|class
name|AutoGraphicsWebView
super|:
specifier|public
name|QGraphicsView
block|{
name|Q_OBJECT
public|public:
DECL|function|AutoGraphicsWebView
name|AutoGraphicsWebView
parameter_list|()
member_init_list|:
name|m_length
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|m_mode
argument_list|(
name|QLineEdit
operator|::
name|Normal
argument_list|)
block|{
name|m_scene
operator|.
name|addItem
argument_list|(
operator|&
name|m_view
argument_list|)
expr_stmt|;
name|setScene
argument_list|(
operator|&
name|m_scene
argument_list|)
expr_stmt|;
name|m_view
operator|.
name|setFocus
argument_list|()
expr_stmt|;
name|updatePage
argument_list|()
expr_stmt|;
block|}
DECL|function|~AutoGraphicsWebView
name|~
name|AutoGraphicsWebView
parameter_list|()
block|{}
DECL|function|updatePage
name|void
name|updatePage
parameter_list|()
block|{
comment|// The update might reset the input method parameters.
name|bool
name|imEnabled
init|=
name|testAttribute
argument_list|(
name|Qt
operator|::
name|WA_InputMethodEnabled
argument_list|)
decl_stmt|;
name|Qt
operator|::
name|InputMethodHints
name|hints
init|=
name|inputMethodHints
argument_list|()
decl_stmt|;
name|QString
name|page
init|=
literal|"<html><body onLoad=\"document.forms.testform.testinput.focus()\">"
literal|"<form name=\"testform\"><input name=\"testinput\" type=\"%1\" %2></form></body></html>"
decl_stmt|;
if|if
condition|(
name|m_mode
operator|==
name|QLineEdit
operator|::
name|Password
condition|)
name|page
operator|=
name|page
operator|.
name|arg
argument_list|(
literal|"password"
argument_list|)
expr_stmt|;
else|else
name|page
operator|=
name|page
operator|.
name|arg
argument_list|(
literal|"text"
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_length
operator|==
literal|0
condition|)
name|page
operator|=
name|page
operator|.
name|arg
argument_list|(
literal|""
argument_list|)
expr_stmt|;
else|else
name|page
operator|=
name|page
operator|.
name|arg
argument_list|(
literal|"maxlength=\""
operator|+
name|QString
operator|::
name|number
argument_list|(
name|m_length
argument_list|)
operator|+
literal|"\""
argument_list|)
expr_stmt|;
name|m_view
operator|.
name|setHtml
argument_list|(
name|page
argument_list|)
expr_stmt|;
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_InputMethodEnabled
argument_list|,
name|imEnabled
argument_list|)
expr_stmt|;
name|setInputMethodHints
argument_list|(
name|hints
argument_list|)
expr_stmt|;
block|}
DECL|function|setMaxLength
name|void
name|setMaxLength
parameter_list|(
name|int
name|length
parameter_list|)
block|{
name|m_length
operator|=
name|length
expr_stmt|;
name|updatePage
argument_list|()
expr_stmt|;
block|}
DECL|function|setEchoMode
name|void
name|setEchoMode
parameter_list|(
name|QLineEdit
operator|::
name|EchoMode
name|mode
parameter_list|)
block|{
name|m_mode
operator|=
name|mode
expr_stmt|;
name|updatePage
argument_list|()
expr_stmt|;
block|}
DECL|member|m_length
name|int
name|m_length
decl_stmt|;
DECL|member|m_mode
name|QLineEdit
operator|::
name|EchoMode
name|m_mode
decl_stmt|;
DECL|member|m_scene
name|QGraphicsScene
name|m_scene
decl_stmt|;
DECL|member|m_view
name|QGraphicsWebView
name|m_view
decl_stmt|;
block|}
class|;
end_class
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_WEBKIT_LIB
end_comment
begin_function
DECL|function|symbianTestCoeFepInputContext_data
name|void
name|tst_QInputContext
operator|::
name|symbianTestCoeFepInputContext_data
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
name|QTest
operator|::
name|addColumn
argument_list|<
name|QWidget
operator|*
argument_list|>
argument_list|(
literal|"editwidget"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"inputMethodEnabled"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|Qt
operator|::
name|InputMethodHints
argument_list|>
argument_list|(
literal|"inputMethodHints"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"maxLength"
argument_list|)
expr_stmt|;
comment|// Zero for no limit
name|QTest
operator|::
name|addColumn
argument_list|<
name|QLineEdit
operator|::
name|EchoMode
argument_list|>
argument_list|(
literal|"echoMode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QList
argument_list|<
name|FepReplayEvent
argument_list|>
argument_list|>
argument_list|(
literal|"keyEvents"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"finalString"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"preeditString"
argument_list|)
expr_stmt|;
name|symbianTestCoeFepInputContext_addData
argument_list|<
name|QLineEdit
argument_list|>
argument_list|()
expr_stmt|;
name|symbianTestCoeFepInputContext_addData
argument_list|<
name|QPlainTextEdit
argument_list|>
argument_list|()
expr_stmt|;
name|symbianTestCoeFepInputContext_addData
argument_list|<
name|QTextEdit
argument_list|>
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_WEBKIT_LIB
name|symbianTestCoeFepInputContext_addData
argument_list|<
name|AutoWebView
argument_list|>
argument_list|()
expr_stmt|;
name|symbianTestCoeFepInputContext_addData
argument_list|<
name|AutoGraphicsWebView
argument_list|>
argument_list|()
expr_stmt|;
endif|#
directive|endif
endif|#
directive|endif
block|}
end_function
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QWidget *
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QLineEdit *
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QPlainTextEdit *
argument_list|)
end_macro
begin_macro
name|Q_DECLARE_METATYPE
argument_list|(
argument|QTextEdit *
argument_list|)
end_macro
begin_function
template|template
parameter_list|<
name|class
name|WidgetType
parameter_list|>
DECL|function|symbianTestCoeFepInputContext_addData
name|void
name|tst_QInputContext
operator|::
name|symbianTestCoeFepInputContext_addData
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
name|QList
argument_list|<
name|FepReplayEvent
argument_list|>
name|events
decl_stmt|;
name|QWidget
modifier|*
name|editwidget
decl_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
name|EStdKeyBackspace
argument_list|,
name|EKeyBackspace
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
name|EStdKeyBackspace
argument_list|,
name|EKeyBackspace
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|'5'
argument_list|,
literal|'5'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|'4'
argument_list|,
literal|'4'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|'6'
argument_list|,
literal|'6'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
name|EStdKeyBackspace
argument_list|,
name|EKeyBackspace
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
name|EStdKeyBackspace
argument_list|,
name|EKeyBackspace
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|'1'
argument_list|,
literal|'1'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
name|EStdKeyBackspace
argument_list|,
name|EKeyBackspace
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|'2'
argument_list|,
literal|'2'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|'1'
argument_list|,
literal|'1'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|editwidget
operator|=
operator|new
name|WidgetType
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|editwidget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
operator|+
literal|": Numbers (no FEP)"
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
operator|<<
name|editwidget
operator|<<
literal|false
operator|<<
name|Qt
operator|::
name|InputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhNone
argument_list|)
operator|<<
literal|0
operator|<<
name|QLineEdit
operator|::
name|Normal
operator|<<
name|events
operator|<<
name|QString
argument_list|(
literal|"521"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|editwidget
operator|=
operator|new
name|WidgetType
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|editwidget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
operator|+
literal|": Numbers and password mode (no FEP)"
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
operator|<<
name|editwidget
operator|<<
literal|false
operator|<<
name|Qt
operator|::
name|InputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhNone
argument_list|)
operator|<<
literal|0
operator|<<
name|QLineEdit
operator|::
name|Password
operator|<<
name|events
operator|<<
name|QString
argument_list|(
literal|"521"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|editwidget
operator|=
operator|new
name|WidgetType
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|editwidget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
operator|+
literal|": Numbers"
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
operator|<<
name|editwidget
operator|<<
literal|true
operator|<<
name|Qt
operator|::
name|InputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhDigitsOnly
argument_list|)
operator|<<
literal|0
operator|<<
name|QLineEdit
operator|::
name|Normal
operator|<<
name|events
operator|<<
name|QString
argument_list|(
literal|"521"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|editwidget
operator|=
operator|new
name|WidgetType
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|editwidget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
operator|+
literal|": Numbers max length (no FEP)"
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
operator|<<
name|editwidget
operator|<<
literal|false
operator|<<
name|Qt
operator|::
name|InputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhNone
argument_list|)
operator|<<
literal|2
operator|<<
name|QLineEdit
operator|::
name|Normal
operator|<<
name|events
operator|<<
name|QString
argument_list|(
literal|"21"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|editwidget
operator|=
operator|new
name|WidgetType
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|editwidget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
operator|+
literal|": Numbers max length"
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
operator|<<
name|editwidget
operator|<<
literal|true
operator|<<
name|Qt
operator|::
name|InputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhDigitsOnly
argument_list|)
operator|<<
literal|2
operator|<<
name|QLineEdit
operator|::
name|Normal
operator|<<
name|events
operator|<<
name|QString
argument_list|(
literal|"21"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|events
operator|.
name|clear
argument_list|()
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
name|EEventKeyDown
argument_list|,
literal|'5'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
name|EEventKey
argument_list|,
literal|'5'
argument_list|,
literal|'5'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
name|EEventKey
argument_list|,
literal|'5'
argument_list|,
literal|'5'
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
name|EEventKey
argument_list|,
literal|'5'
argument_list|,
literal|'5'
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
name|EEventKeyUp
argument_list|,
literal|'5'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|editwidget
operator|=
operator|new
name|WidgetType
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|editwidget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
operator|+
literal|": Numbers and autorepeat (no FEP)"
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
operator|<<
name|editwidget
operator|<<
literal|false
operator|<<
name|Qt
operator|::
name|InputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhNone
argument_list|)
operator|<<
literal|0
operator|<<
name|QLineEdit
operator|::
name|Normal
operator|<<
name|events
operator|<<
name|QString
argument_list|(
literal|"555"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|events
operator|.
name|clear
argument_list|()
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
name|EStdKeyBackspace
argument_list|,
name|EKeyBackspace
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|'2'
argument_list|,
literal|'2'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|'3'
argument_list|,
literal|'3'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|'4'
argument_list|,
literal|'4'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|'4'
argument_list|,
literal|'4'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|'5'
argument_list|,
literal|'5'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|'5'
argument_list|,
literal|'5'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
name|EStdKeyBackspace
argument_list|,
name|EKeyBackspace
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|editwidget
operator|=
operator|new
name|WidgetType
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|editwidget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
operator|+
literal|": Multitap"
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
operator|<<
name|editwidget
operator|<<
literal|true
operator|<<
name|Qt
operator|::
name|InputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhNoPredictiveText
argument_list|)
operator|<<
literal|0
operator|<<
name|QLineEdit
operator|::
name|Normal
operator|<<
name|events
operator|<<
name|QString
argument_list|(
literal|"Adh"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|editwidget
operator|=
operator|new
name|WidgetType
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|editwidget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
operator|+
literal|": Multitap with no auto uppercase"
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
operator|<<
name|editwidget
operator|<<
literal|true
operator|<<
name|Qt
operator|::
name|InputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhNoPredictiveText
operator||
name|Qt
operator|::
name|ImhNoAutoUppercase
argument_list|)
operator|<<
literal|0
operator|<<
name|QLineEdit
operator|::
name|Normal
operator|<<
name|events
operator|<<
name|QString
argument_list|(
literal|"adh"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|editwidget
operator|=
operator|new
name|WidgetType
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|editwidget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
operator|+
literal|": Multitap with uppercase"
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
operator|<<
name|editwidget
operator|<<
literal|true
operator|<<
name|Qt
operator|::
name|InputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhNoPredictiveText
operator||
name|Qt
operator|::
name|ImhPreferUppercase
argument_list|)
operator|<<
literal|0
operator|<<
name|QLineEdit
operator|::
name|Normal
operator|<<
name|events
operator|<<
name|QString
argument_list|(
literal|"ADH"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|editwidget
operator|=
operator|new
name|WidgetType
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|editwidget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
operator|+
literal|": Multitap with lowercase"
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
operator|<<
name|editwidget
operator|<<
literal|true
operator|<<
name|Qt
operator|::
name|InputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhNoPredictiveText
operator||
name|Qt
operator|::
name|ImhPreferLowercase
argument_list|)
operator|<<
literal|0
operator|<<
name|QLineEdit
operator|::
name|Normal
operator|<<
name|events
operator|<<
name|QString
argument_list|(
literal|"adh"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|editwidget
operator|=
operator|new
name|WidgetType
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|editwidget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
operator|+
literal|": Multitap with forced uppercase"
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
operator|<<
name|editwidget
operator|<<
literal|true
operator|<<
name|Qt
operator|::
name|InputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhNoPredictiveText
operator||
name|Qt
operator|::
name|ImhUppercaseOnly
argument_list|)
operator|<<
literal|0
operator|<<
name|QLineEdit
operator|::
name|Normal
operator|<<
name|events
operator|<<
name|QString
argument_list|(
literal|"ADH"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|editwidget
operator|=
operator|new
name|WidgetType
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|editwidget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
operator|+
literal|": Multitap with forced lowercase"
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
operator|<<
name|editwidget
operator|<<
literal|true
operator|<<
name|Qt
operator|::
name|InputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhNoPredictiveText
operator||
name|Qt
operator|::
name|ImhLowercaseOnly
argument_list|)
operator|<<
literal|0
operator|<<
name|QLineEdit
operator|::
name|Normal
operator|<<
name|events
operator|<<
name|QString
argument_list|(
literal|"adh"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|events
operator|.
name|clear
argument_list|()
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
name|EStdKeyHash
argument_list|,
literal|'#'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|'2'
argument_list|,
literal|'2'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|'2'
argument_list|,
literal|'2'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|'3'
argument_list|,
literal|'3'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|'4'
argument_list|,
literal|'4'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|'4'
argument_list|,
literal|'4'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|'5'
argument_list|,
literal|'5'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|'5'
argument_list|,
literal|'5'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
name|EStdKeyBackspace
argument_list|,
name|EKeyBackspace
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|editwidget
operator|=
operator|new
name|WidgetType
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|editwidget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
operator|+
literal|": Multitap with mode switch"
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
operator|<<
name|editwidget
operator|<<
literal|true
operator|<<
name|Qt
operator|::
name|InputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhNoPredictiveText
argument_list|)
operator|<<
literal|0
operator|<<
name|QLineEdit
operator|::
name|Normal
operator|<<
name|events
operator|<<
name|QString
argument_list|(
literal|"bdh"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|events
operator|.
name|clear
argument_list|()
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|'7'
argument_list|,
literal|'7'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|'7'
argument_list|,
literal|'7'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|'8'
argument_list|,
literal|'8'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|'9'
argument_list|,
literal|'9'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|'9'
argument_list|,
literal|'9'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|editwidget
operator|=
operator|new
name|WidgetType
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|editwidget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
operator|+
literal|": Multitap with unfinished text"
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
operator|<<
name|editwidget
operator|<<
literal|true
operator|<<
name|Qt
operator|::
name|InputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhNoPredictiveText
argument_list|)
operator|<<
literal|0
operator|<<
name|QLineEdit
operator|::
name|Normal
operator|<<
name|events
operator|<<
name|QString
argument_list|(
literal|"Qt"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"x"
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|editwidget
operator|=
operator|new
name|WidgetType
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|editwidget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
operator|+
literal|": Multitap with committed text"
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
operator|<<
name|editwidget
operator|<<
literal|true
operator|<<
name|Qt
operator|::
name|InputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhNoPredictiveText
argument_list|)
operator|<<
literal|0
operator|<<
name|QLineEdit
operator|::
name|Normal
operator|<<
name|events
operator|<<
name|QString
argument_list|(
literal|"Qtx"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|events
operator|.
name|clear
argument_list|()
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|'4'
argument_list|,
literal|'4'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|'4'
argument_list|,
literal|'4'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Simulate holding down hash key.
name|events
operator|<<
name|FepReplayEvent
argument_list|(
name|EEventKeyDown
argument_list|,
name|EStdKeyHash
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
name|EEventKey
argument_list|,
name|EStdKeyHash
argument_list|,
literal|'#'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
name|EEventKey
argument_list|,
name|EStdKeyHash
argument_list|,
literal|'#'
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
name|EEventKey
argument_list|,
name|EStdKeyHash
argument_list|,
literal|'#'
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
name|EEventKey
argument_list|,
name|EStdKeyHash
argument_list|,
literal|'#'
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
name|EEventKeyUp
argument_list|,
name|EStdKeyHash
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|'7'
argument_list|,
literal|'7'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|'7'
argument_list|,
literal|'7'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|'8'
argument_list|,
literal|'8'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// QTBUG-9867: Switch back as well to make sure we don't get extra symbols
name|events
operator|<<
name|FepReplayEvent
argument_list|(
name|EEventKeyDown
argument_list|,
name|EStdKeyHash
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
name|EEventKey
argument_list|,
name|EStdKeyHash
argument_list|,
literal|'#'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|500
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
name|EEventKey
argument_list|,
name|EStdKeyHash
argument_list|,
literal|'#'
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
name|EEventKey
argument_list|,
name|EStdKeyHash
argument_list|,
literal|'#'
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
name|EEventKey
argument_list|,
name|EStdKeyHash
argument_list|,
literal|'#'
argument_list|,
literal|0
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
name|EEventKeyUp
argument_list|,
name|EStdKeyHash
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|'9'
argument_list|,
literal|'9'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|'6'
argument_list|,
literal|'6'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|'8'
argument_list|,
literal|'8'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|2000
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
name|EStdKeyDevice3
argument_list|,
name|EKeyDevice3
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Select key
name|editwidget
operator|=
operator|new
name|WidgetType
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|editwidget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
operator|+
literal|": Multitap and numbers"
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
operator|<<
name|editwidget
operator|<<
literal|true
operator|<<
name|Qt
operator|::
name|InputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhNoPredictiveText
argument_list|)
operator|<<
literal|0
operator|<<
name|QLineEdit
operator|::
name|Normal
operator|<<
name|events
operator|<<
name|QString
argument_list|(
literal|"H778wmt"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|editwidget
operator|=
operator|new
name|WidgetType
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|editwidget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
operator|+
literal|": T9 and numbers"
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
operator|<<
name|editwidget
operator|<<
literal|true
operator|<<
name|Qt
operator|::
name|InputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhPreferLowercase
argument_list|)
operator|<<
literal|0
operator|<<
name|QLineEdit
operator|::
name|Normal
operator|<<
name|events
operator|<<
name|QString
argument_list|(
literal|"hi778you"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|events
operator|.
name|clear
argument_list|()
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|'4'
argument_list|,
literal|'4'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|'4'
argument_list|,
literal|'4'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
name|EStdKeyDevice3
argument_list|,
name|EKeyDevice3
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Select key
name|editwidget
operator|=
operator|new
name|WidgetType
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|editwidget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
operator|+
literal|": T9"
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
operator|<<
name|editwidget
operator|<<
literal|true
operator|<<
name|Qt
operator|::
name|InputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhPreferLowercase
argument_list|)
operator|<<
literal|0
operator|<<
name|QLineEdit
operator|::
name|Normal
operator|<<
name|events
operator|<<
name|QString
argument_list|(
literal|"hi"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|editwidget
operator|=
operator|new
name|WidgetType
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|editwidget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
operator|+
literal|": T9 with uppercase"
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
operator|<<
name|editwidget
operator|<<
literal|true
operator|<<
name|Qt
operator|::
name|InputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhPreferUppercase
argument_list|)
operator|<<
literal|0
operator|<<
name|QLineEdit
operator|::
name|Normal
operator|<<
name|events
operator|<<
name|QString
argument_list|(
literal|"HI"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|editwidget
operator|=
operator|new
name|WidgetType
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|editwidget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
operator|+
literal|": T9 with forced lowercase"
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
operator|<<
name|editwidget
operator|<<
literal|true
operator|<<
name|Qt
operator|::
name|InputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhLowercaseOnly
argument_list|)
operator|<<
literal|0
operator|<<
name|QLineEdit
operator|::
name|Normal
operator|<<
name|events
operator|<<
name|QString
argument_list|(
literal|"hi"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|editwidget
operator|=
operator|new
name|WidgetType
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|editwidget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
operator|+
literal|": T9 with forced uppercase"
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
operator|<<
name|editwidget
operator|<<
literal|true
operator|<<
name|Qt
operator|::
name|InputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhUppercaseOnly
argument_list|)
operator|<<
literal|0
operator|<<
name|QLineEdit
operator|::
name|Normal
operator|<<
name|events
operator|<<
name|QString
argument_list|(
literal|"HI"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|editwidget
operator|=
operator|new
name|WidgetType
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|editwidget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
operator|+
literal|": T9 with maxlength"
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
operator|<<
name|editwidget
operator|<<
literal|true
operator|<<
name|Qt
operator|::
name|InputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhLowercaseOnly
argument_list|)
operator|<<
literal|1
operator|<<
name|QLineEdit
operator|::
name|Normal
operator|<<
name|events
operator|<<
name|QString
argument_list|(
literal|"i"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|events
operator|.
name|clear
argument_list|()
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|'4'
argument_list|,
literal|'4'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|'4'
argument_list|,
literal|'4'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
name|EStdKeyLeftArrow
argument_list|,
name|EKeyLeftArrow
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
name|EStdKeyLeftArrow
argument_list|,
name|EKeyLeftArrow
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|'9'
argument_list|,
literal|'9'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|'6'
argument_list|,
literal|'6'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|'8'
argument_list|,
literal|'8'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|'0'
argument_list|,
literal|'0'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
name|EStdKeyRightArrow
argument_list|,
name|EKeyRightArrow
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
name|EStdKeyRightArrow
argument_list|,
name|EKeyRightArrow
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|'8'
argument_list|,
literal|'8'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|'8'
argument_list|,
literal|'8'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|editwidget
operator|=
operator|new
name|WidgetType
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|editwidget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
operator|+
literal|": T9 with movement and unfinished text"
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
operator|<<
name|editwidget
operator|<<
literal|true
operator|<<
name|Qt
operator|::
name|InputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhPreferLowercase
argument_list|)
operator|<<
literal|0
operator|<<
name|QLineEdit
operator|::
name|Normal
operator|<<
name|events
operator|<<
name|QString
argument_list|(
literal|"you hi"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"tv"
argument_list|)
expr_stmt|;
name|editwidget
operator|=
operator|new
name|WidgetType
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|editwidget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
operator|+
literal|": T9 with movement, password and unfinished text"
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
operator|<<
name|editwidget
operator|<<
literal|true
operator|<<
name|Qt
operator|::
name|InputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhPreferLowercase
argument_list|)
operator|<<
literal|0
operator|<<
name|QLineEdit
operator|::
name|Password
operator|<<
name|events
operator|<<
name|QString
argument_list|(
literal|"wmt h"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"u"
argument_list|)
expr_stmt|;
name|editwidget
operator|=
operator|new
name|WidgetType
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|editwidget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
operator|+
literal|": T9 with movement, maxlength, password and unfinished text"
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
operator|<<
name|editwidget
operator|<<
literal|true
operator|<<
name|Qt
operator|::
name|InputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhPreferLowercase
argument_list|)
operator|<<
literal|2
operator|<<
name|QLineEdit
operator|::
name|Password
operator|<<
name|events
operator|<<
name|QString
argument_list|(
literal|"wh"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|editwidget
operator|=
operator|new
name|WidgetType
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|editwidget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
operator|+
literal|": T9 with movement, maxlength and unfinished text"
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
operator|<<
name|editwidget
operator|<<
literal|true
operator|<<
name|Qt
operator|::
name|InputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhPreferLowercase
argument_list|)
operator|<<
literal|2
operator|<<
name|QLineEdit
operator|::
name|Normal
operator|<<
name|events
operator|<<
name|QString
argument_list|(
literal|"hi"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|editwidget
operator|=
operator|new
name|WidgetType
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|editwidget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
operator|+
literal|": Multitap with movement and unfinished text"
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
operator|<<
name|editwidget
operator|<<
literal|true
operator|<<
name|Qt
operator|::
name|InputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhNoPredictiveText
operator||
name|Qt
operator|::
name|ImhPreferLowercase
argument_list|)
operator|<<
literal|0
operator|<<
name|QLineEdit
operator|::
name|Normal
operator|<<
name|events
operator|<<
name|QString
argument_list|(
literal|"wmt h"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"u"
argument_list|)
expr_stmt|;
name|editwidget
operator|=
operator|new
name|WidgetType
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|editwidget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
operator|+
literal|": Multitap with movement, maxlength and unfinished text"
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
operator|<<
name|editwidget
operator|<<
literal|true
operator|<<
name|Qt
operator|::
name|InputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhNoPredictiveText
operator||
name|Qt
operator|::
name|ImhPreferLowercase
argument_list|)
operator|<<
literal|2
operator|<<
name|QLineEdit
operator|::
name|Normal
operator|<<
name|events
operator|<<
name|QString
argument_list|(
literal|"wh"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|editwidget
operator|=
operator|new
name|WidgetType
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|editwidget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
operator|+
literal|": Numbers with movement"
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
operator|<<
name|editwidget
operator|<<
literal|true
operator|<<
name|Qt
operator|::
name|InputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhDigitsOnly
argument_list|)
operator|<<
literal|0
operator|<<
name|QLineEdit
operator|::
name|Normal
operator|<<
name|events
operator|<<
name|QString
argument_list|(
literal|"96804488"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|editwidget
operator|=
operator|new
name|WidgetType
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|editwidget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
operator|+
literal|": Numbers with movement and maxlength"
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
operator|<<
name|editwidget
operator|<<
literal|true
operator|<<
name|Qt
operator|::
name|InputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhDigitsOnly
argument_list|)
operator|<<
literal|2
operator|<<
name|QLineEdit
operator|::
name|Normal
operator|<<
name|events
operator|<<
name|QString
argument_list|(
literal|"44"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|editwidget
operator|=
operator|new
name|WidgetType
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|editwidget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
operator|+
literal|": Numbers with movement, password and unfinished text"
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
operator|<<
name|editwidget
operator|<<
literal|true
operator|<<
name|Qt
operator|::
name|InputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhDigitsOnly
argument_list|)
operator|<<
literal|0
operator|<<
name|QLineEdit
operator|::
name|Password
operator|<<
name|events
operator|<<
name|QString
argument_list|(
literal|"9680448"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|"8"
argument_list|)
expr_stmt|;
name|editwidget
operator|=
operator|new
name|WidgetType
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|editwidget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
operator|+
literal|": Numbers with movement, maxlength, password and unfinished text"
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
operator|<<
name|editwidget
operator|<<
literal|true
operator|<<
name|Qt
operator|::
name|InputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhDigitsOnly
argument_list|)
operator|<<
literal|2
operator|<<
name|QLineEdit
operator|::
name|Password
operator|<<
name|events
operator|<<
name|QString
argument_list|(
literal|"44"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
name|EStdKeyRightArrow
argument_list|,
name|EKeyRightArrow
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|editwidget
operator|=
operator|new
name|WidgetType
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|editwidget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
operator|+
literal|": T9 with movement"
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
operator|<<
name|editwidget
operator|<<
literal|true
operator|<<
name|Qt
operator|::
name|InputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhPreferLowercase
argument_list|)
operator|<<
literal|0
operator|<<
name|QLineEdit
operator|::
name|Normal
operator|<<
name|events
operator|<<
name|QString
argument_list|(
literal|"you htvi"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|editwidget
operator|=
operator|new
name|WidgetType
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|editwidget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
operator|+
literal|": T9 with movement and password"
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
operator|<<
name|editwidget
operator|<<
literal|true
operator|<<
name|Qt
operator|::
name|InputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhPreferLowercase
argument_list|)
operator|<<
literal|0
operator|<<
name|QLineEdit
operator|::
name|Password
operator|<<
name|events
operator|<<
name|QString
argument_list|(
literal|"wmt hu"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|editwidget
operator|=
operator|new
name|WidgetType
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|editwidget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
operator|+
literal|": T9 with movement, maxlength and password"
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
operator|<<
name|editwidget
operator|<<
literal|true
operator|<<
name|Qt
operator|::
name|InputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhPreferLowercase
argument_list|)
operator|<<
literal|2
operator|<<
name|QLineEdit
operator|::
name|Password
operator|<<
name|events
operator|<<
name|QString
argument_list|(
literal|"wh"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|editwidget
operator|=
operator|new
name|WidgetType
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|editwidget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
operator|+
literal|": Multitap with movement"
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
operator|<<
name|editwidget
operator|<<
literal|true
operator|<<
name|Qt
operator|::
name|InputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhNoPredictiveText
operator||
name|Qt
operator|::
name|ImhPreferLowercase
argument_list|)
operator|<<
literal|0
operator|<<
name|QLineEdit
operator|::
name|Normal
operator|<<
name|events
operator|<<
name|QString
argument_list|(
literal|"wmt hu"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|editwidget
operator|=
operator|new
name|WidgetType
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|editwidget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
operator|+
literal|": Multitap with movement and maxlength"
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
operator|<<
name|editwidget
operator|<<
literal|true
operator|<<
name|Qt
operator|::
name|InputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhNoPredictiveText
operator||
name|Qt
operator|::
name|ImhPreferLowercase
argument_list|)
operator|<<
literal|2
operator|<<
name|QLineEdit
operator|::
name|Normal
operator|<<
name|events
operator|<<
name|QString
argument_list|(
literal|"wh"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|editwidget
operator|=
operator|new
name|WidgetType
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|editwidget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
operator|+
literal|": Numbers with movement and password"
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
operator|<<
name|editwidget
operator|<<
literal|true
operator|<<
name|Qt
operator|::
name|InputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhDigitsOnly
argument_list|)
operator|<<
literal|0
operator|<<
name|QLineEdit
operator|::
name|Password
operator|<<
name|events
operator|<<
name|QString
argument_list|(
literal|"96804488"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|editwidget
operator|=
operator|new
name|WidgetType
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|editwidget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
operator|+
literal|": Numbers with movement, maxlength and password"
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
operator|<<
name|editwidget
operator|<<
literal|true
operator|<<
name|Qt
operator|::
name|InputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhDigitsOnly
argument_list|)
operator|<<
literal|2
operator|<<
name|QLineEdit
operator|::
name|Password
operator|<<
name|events
operator|<<
name|QString
argument_list|(
literal|"44"
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|events
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// Test that the symbol key successfully does nothing when in number-only mode.
name|events
operator|<<
name|FepReplayEvent
argument_list|(
name|EEventKeyDown
argument_list|,
name|EStdKeyLeftFunc
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
name|EEventKeyUp
argument_list|,
name|EStdKeyLeftFunc
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|editwidget
operator|=
operator|new
name|WidgetType
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|editwidget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
operator|+
literal|": Dead symbols key"
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
operator|<<
name|editwidget
operator|<<
literal|true
operator|<<
name|Qt
operator|::
name|InputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhDigitsOnly
argument_list|)
operator|<<
literal|0
operator|<<
name|QLineEdit
operator|::
name|Normal
operator|<<
name|events
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|editwidget
operator|=
operator|new
name|WidgetType
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
name|QString
argument_list|(
name|QString
operator|::
name|fromLatin1
argument_list|(
name|editwidget
operator|->
name|metaObject
argument_list|()
operator|->
name|className
argument_list|()
argument_list|)
operator|+
literal|": Dead symbols key and password"
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
operator|<<
name|editwidget
operator|<<
literal|true
operator|<<
name|Qt
operator|::
name|InputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhDigitsOnly
argument_list|)
operator|<<
literal|0
operator|<<
name|QLineEdit
operator|::
name|Password
operator|<<
name|events
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
operator|<<
name|QString
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|events
operator|.
name|clear
argument_list|()
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|symbianTestCoeFepInputContext
name|void
name|tst_QInputContext
operator|::
name|symbianTestCoeFepInputContext
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|Q_OS_SYMBIAN
name|QSKIP
argument_list|(
literal|"This is a Symbian-only test"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
else|#
directive|else
name|QCoeFepInputContext
modifier|*
name|ic
init|=
name|qobject_cast
argument_list|<
name|QCoeFepInputContext
operator|*
argument_list|>
argument_list|(
name|qApp
operator|->
name|inputContext
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ic
condition|)
block|{
name|QSKIP
argument_list|(
literal|"coefep is not the active input context; skipping test"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
name|QFETCH
argument_list|(
name|QWidget
operator|*
argument_list|,
name|editwidget
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|inputMethodEnabled
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|Qt
operator|::
name|InputMethodHints
argument_list|,
name|inputMethodHints
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|int
argument_list|,
name|maxLength
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QLineEdit
operator|::
name|EchoMode
argument_list|,
name|echoMode
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QList
argument_list|<
name|FepReplayEvent
argument_list|>
argument_list|,
name|keyEvents
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|finalString
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|preeditString
argument_list|)
expr_stmt|;
if|if
condition|(
name|inputMethodEnabled
operator|&&
name|m_phoneIsQwerty
condition|)
block|{
name|QSKIP
argument_list|(
literal|"Skipping advanced input method tests on QWERTY phones"
argument_list|,
name|SkipSingle
argument_list|)
expr_stmt|;
block|}
name|QWidget
name|w
decl_stmt|;
name|QLayout
modifier|*
name|layout
init|=
operator|new
name|QVBoxLayout
decl_stmt|;
name|w
operator|.
name|setLayout
argument_list|(
name|layout
argument_list|)
expr_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|editwidget
argument_list|)
expr_stmt|;
name|editwidget
operator|->
name|setFocus
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
name|editwidget
operator|->
name|setEditFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
name|editwidget
operator|->
name|setAttribute
argument_list|(
name|Qt
operator|::
name|WA_InputMethodEnabled
argument_list|,
name|inputMethodEnabled
argument_list|)
expr_stmt|;
name|editwidget
operator|->
name|setInputMethodHints
argument_list|(
name|inputMethodHints
argument_list|)
expr_stmt|;
if|if
condition|(
name|QLineEdit
modifier|*
name|lineedit
init|=
name|qobject_cast
argument_list|<
name|QLineEdit
operator|*
argument_list|>
argument_list|(
name|editwidget
argument_list|)
condition|)
block|{
if|if
condition|(
name|maxLength
operator|>
literal|0
condition|)
name|lineedit
operator|->
name|setMaxLength
argument_list|(
name|maxLength
argument_list|)
expr_stmt|;
name|lineedit
operator|->
name|setEchoMode
argument_list|(
name|echoMode
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_WEBKIT_LIB
block|}
elseif|else
if|if
condition|(
name|AutoWebView
modifier|*
name|webView
init|=
name|qobject_cast
argument_list|<
name|AutoWebView
operator|*
argument_list|>
argument_list|(
name|editwidget
argument_list|)
condition|)
block|{
if|if
condition|(
name|maxLength
operator|>
literal|0
condition|)
name|webView
operator|->
name|setMaxLength
argument_list|(
name|maxLength
argument_list|)
expr_stmt|;
name|webView
operator|->
name|setEchoMode
argument_list|(
name|echoMode
argument_list|)
expr_stmt|;
comment|// WebKit disables T9 everywhere.
if|if
condition|(
name|inputMethodEnabled
operator|&&
operator|!
operator|(
name|inputMethodHints
operator|&
name|Qt
operator|::
name|ImhNoPredictiveText
operator|)
condition|)
return|return;
block|}
elseif|else
if|if
condition|(
name|AutoGraphicsWebView
modifier|*
name|webView
init|=
name|qobject_cast
argument_list|<
name|AutoGraphicsWebView
operator|*
argument_list|>
argument_list|(
name|editwidget
argument_list|)
condition|)
block|{
if|if
condition|(
name|maxLength
operator|>
literal|0
condition|)
name|webView
operator|->
name|setMaxLength
argument_list|(
name|maxLength
argument_list|)
expr_stmt|;
name|webView
operator|->
name|setEchoMode
argument_list|(
name|echoMode
argument_list|)
expr_stmt|;
comment|// WebKit disables T9 everywhere.
if|if
condition|(
name|inputMethodEnabled
operator|&&
operator|!
operator|(
name|inputMethodHints
operator|&
name|Qt
operator|::
name|ImhNoPredictiveText
operator|)
condition|)
return|return;
endif|#
directive|endif
block|}
elseif|else
if|if
condition|(
name|maxLength
operator|>
literal|0
operator|||
name|echoMode
operator|!=
name|QLineEdit
operator|::
name|Normal
condition|)
block|{
comment|// Only some widgets support these features so don't attempt any tests using those
comment|// on other widgets.
return|return;
block|}
name|QTest
operator|::
name|qWait
argument_list|(
literal|200
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|FepReplayEvent
name|event
decl|,
name|keyEvents
control|)
block|{
name|event
operator|.
name|replay
argument_list|(
name|editwidget
argument_list|)
expr_stmt|;
block|}
name|QApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|editwidget
operator|->
name|inputMethodQuery
argument_list|(
name|Qt
operator|::
name|ImSurroundingText
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|finalString
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|ic
operator|->
name|m_preeditString
argument_list|,
name|preeditString
argument_list|)
expr_stmt|;
operator|delete
name|editwidget
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|symbianTestCoeFepAutoCommit_data
name|void
name|tst_QInputContext
operator|::
name|symbianTestCoeFepAutoCommit_data
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|Q_OS_SYMBIAN
name|QTest
operator|::
name|addColumn
argument_list|<
name|Qt
operator|::
name|InputMethodHints
argument_list|>
argument_list|(
literal|"inputMethodHints"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QLineEdit
operator|::
name|EchoMode
argument_list|>
argument_list|(
literal|"echoMode"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QList
argument_list|<
name|FepReplayEvent
argument_list|>
argument_list|>
argument_list|(
literal|"keyEvents"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"finalString"
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|FepReplayEvent
argument_list|>
name|events
decl_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|'4'
argument_list|,
literal|'4'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|'4'
argument_list|,
literal|'4'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|'0'
argument_list|,
literal|'0'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|'9'
argument_list|,
literal|'9'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|'6'
argument_list|,
literal|'6'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|events
operator|<<
name|FepReplayEvent
argument_list|(
literal|'8'
argument_list|,
literal|'8'
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Numbers"
argument_list|)
operator|<<
name|Qt
operator|::
name|InputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhDigitsOnly
argument_list|)
operator|<<
name|QLineEdit
operator|::
name|Normal
operator|<<
name|events
operator|<<
name|QString
argument_list|(
literal|"440968"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Numbers and password"
argument_list|)
operator|<<
name|Qt
operator|::
name|InputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhDigitsOnly
argument_list|)
operator|<<
name|QLineEdit
operator|::
name|Password
operator|<<
name|events
operator|<<
name|QString
argument_list|(
literal|"440968"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Multitap"
argument_list|)
operator|<<
name|Qt
operator|::
name|InputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhPreferLowercase
operator||
name|Qt
operator|::
name|ImhNoPredictiveText
argument_list|)
operator|<<
name|QLineEdit
operator|::
name|Normal
operator|<<
name|events
operator|<<
name|QString
argument_list|(
literal|"h wmt"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"T9"
argument_list|)
operator|<<
name|Qt
operator|::
name|InputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhPreferLowercase
argument_list|)
operator|<<
name|QLineEdit
operator|::
name|Normal
operator|<<
name|events
operator|<<
name|QString
argument_list|(
literal|"hi you"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"Multitap with password"
argument_list|)
operator|<<
name|Qt
operator|::
name|InputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhPreferLowercase
operator||
name|Qt
operator|::
name|ImhNoPredictiveText
argument_list|)
operator|<<
name|QLineEdit
operator|::
name|Password
operator|<<
name|events
operator|<<
name|QString
argument_list|(
literal|"h wmt"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"T9 with password"
argument_list|)
operator|<<
name|Qt
operator|::
name|InputMethodHints
argument_list|(
name|Qt
operator|::
name|ImhPreferLowercase
argument_list|)
operator|<<
name|QLineEdit
operator|::
name|Password
operator|<<
name|events
operator|<<
name|QString
argument_list|(
literal|"h wmt"
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|}
end_function
begin_function
DECL|function|symbianTestCoeFepAutoCommit
name|void
name|tst_QInputContext
operator|::
name|symbianTestCoeFepAutoCommit
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|Q_OS_SYMBIAN
name|QSKIP
argument_list|(
literal|"This is a Symbian-only test"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
else|#
directive|else
name|QCoeFepInputContext
modifier|*
name|ic
init|=
name|qobject_cast
argument_list|<
name|QCoeFepInputContext
operator|*
argument_list|>
argument_list|(
name|qApp
operator|->
name|inputContext
argument_list|()
argument_list|)
decl_stmt|;
if|if
condition|(
operator|!
name|ic
condition|)
block|{
name|QSKIP
argument_list|(
literal|"coefep is not the active input context; skipping test"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
block|}
name|QFETCH
argument_list|(
name|Qt
operator|::
name|InputMethodHints
argument_list|,
name|inputMethodHints
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QLineEdit
operator|::
name|EchoMode
argument_list|,
name|echoMode
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QList
argument_list|<
name|FepReplayEvent
argument_list|>
argument_list|,
name|keyEvents
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|finalString
argument_list|)
expr_stmt|;
if|if
condition|(
name|m_phoneIsQwerty
condition|)
block|{
name|QSKIP
argument_list|(
literal|"Skipping advanced input method tests on QWERTY phones"
argument_list|,
name|SkipSingle
argument_list|)
expr_stmt|;
block|}
name|QWidget
name|w
decl_stmt|;
name|QLayout
modifier|*
name|layout
init|=
operator|new
name|QVBoxLayout
decl_stmt|;
name|w
operator|.
name|setLayout
argument_list|(
name|layout
argument_list|)
expr_stmt|;
name|QLineEdit
modifier|*
name|lineedit
init|=
operator|new
name|QLineEdit
decl_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|lineedit
argument_list|)
expr_stmt|;
name|lineedit
operator|->
name|setFocus
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
name|lineedit
operator|->
name|setEditFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QPushButton
modifier|*
name|pushButton
init|=
operator|new
name|QPushButton
argument_list|(
literal|"Done"
argument_list|)
decl_stmt|;
name|layout
operator|->
name|addWidget
argument_list|(
name|pushButton
argument_list|)
expr_stmt|;
name|QAction
name|softkey
argument_list|(
literal|"Done"
argument_list|,
operator|&
name|w
argument_list|)
decl_stmt|;
name|softkey
operator|.
name|setSoftKeyRole
argument_list|(
name|QAction
operator|::
name|PositiveSoftKey
argument_list|)
expr_stmt|;
name|w
operator|.
name|addAction
argument_list|(
operator|&
name|softkey
argument_list|)
expr_stmt|;
name|w
operator|.
name|show
argument_list|()
expr_stmt|;
name|lineedit
operator|->
name|setInputMethodHints
argument_list|(
name|inputMethodHints
argument_list|)
expr_stmt|;
name|lineedit
operator|->
name|setEchoMode
argument_list|(
name|echoMode
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|200
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|FepReplayEvent
name|event
decl|,
name|keyEvents
control|)
block|{
name|event
operator|.
name|replay
argument_list|(
name|lineedit
argument_list|)
expr_stmt|;
block|}
name|QApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|mouseClick
argument_list|(
name|pushButton
argument_list|,
name|Qt
operator|::
name|LeftButton
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|lineedit
operator|->
name|text
argument_list|()
argument_list|,
name|finalString
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ic
operator|->
name|m_preeditString
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|Q_WS_S60
name|lineedit
operator|->
name|inputContext
argument_list|()
operator|->
name|reset
argument_list|()
expr_stmt|;
name|lineedit
operator|->
name|clear
argument_list|()
expr_stmt|;
name|lineedit
operator|->
name|setFocus
argument_list|()
expr_stmt|;
ifdef|#
directive|ifdef
name|QT_KEYPAD_NAVIGATION
name|lineedit
operator|->
name|setEditFocus
argument_list|(
literal|true
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QTest
operator|::
name|qWait
argument_list|(
literal|200
argument_list|)
expr_stmt|;
foreach|foreach
control|(
name|FepReplayEvent
name|event
decl|,
name|keyEvents
control|)
block|{
name|event
operator|.
name|replay
argument_list|(
name|lineedit
argument_list|)
expr_stmt|;
block|}
name|QApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|FepReplayEvent
argument_list|(
name|EStdKeyDevice0
argument_list|,
name|EKeyDevice0
argument_list|,
literal|0
argument_list|,
literal|0
argument_list|)
operator|.
name|replay
argument_list|(
name|lineedit
argument_list|)
expr_stmt|;
comment|// Left softkey
name|QCOMPARE
argument_list|(
name|lineedit
operator|->
name|text
argument_list|()
argument_list|,
name|finalString
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|ic
operator|->
name|m_preeditString
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// Q_WS_S60
endif|#
directive|endif
comment|// Q_OS_SYMBIAN
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QInputContext
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qinputcontext.moc"
end_include
end_unit
