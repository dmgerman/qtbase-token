begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_if
if|#
directive|if
operator|!
name|defined
argument_list|(
name|QT_NO_PROCESS
argument_list|)
end_if
begin_comment
comment|//TESTED_CLASS=
end_comment
begin_comment
comment|//TESTED_FILES=
end_comment
begin_include
include|#
directive|include
file|<QCopChannel>
end_include
begin_include
include|#
directive|include
file|<QProcess>
end_include
begin_include
include|#
directive|include
file|"../../shared/util.h"
end_include
begin_class
DECL|class|tst_QCopChannel
class|class
name|tst_QCopChannel
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|tst_QCopChannel
name|tst_QCopChannel
parameter_list|()
block|{}
DECL|function|~tst_QCopChannel
specifier|virtual
name|~
name|tst_QCopChannel
parameter_list|()
block|{}
private|private
name|slots
private|:
name|void
name|channel
parameter_list|()
function_decl|;
name|void
name|isRegistered
parameter_list|()
function_decl|;
name|void
name|sendreceivemp
parameter_list|()
function_decl|;
name|void
name|sendreceivesp
parameter_list|()
function_decl|;
protected|protected:
name|void
name|testSend
parameter_list|(
specifier|const
name|QString
modifier|&
name|channel
parameter_list|,
specifier|const
name|QString
modifier|&
name|msg
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|data
init|=
name|QByteArray
argument_list|()
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_class
DECL|class|tst_SendQCopProcess
class|class
name|tst_SendQCopProcess
super|:
specifier|public
name|QProcess
block|{
name|Q_OBJECT
public|public:
DECL|function|tst_SendQCopProcess
name|tst_SendQCopProcess
parameter_list|(
name|QObject
modifier|*
name|par
parameter_list|)
member_init_list|:
name|QProcess
argument_list|(
name|par
argument_list|)
block|{     }
signals|signals:
name|void
name|messageSent
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|channel
name|void
name|tst_QCopChannel
operator|::
name|channel
parameter_list|()
block|{
name|QCopChannel
name|channel1
argument_list|(
literal|"channel1"
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|channel1
operator|.
name|channel
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"channel1"
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|isRegistered
name|void
name|tst_QCopChannel
operator|::
name|isRegistered
parameter_list|()
block|{
name|QVERIFY
argument_list|(
operator|!
name|QCopChannel
operator|::
name|isRegistered
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|channelName
argument_list|(
literal|"registered/channel"
argument_list|)
decl_stmt|;
name|QCopChannel
modifier|*
name|channel
init|=
operator|new
name|QCopChannel
argument_list|(
name|channelName
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|QCopChannel
operator|::
name|isRegistered
argument_list|(
name|channelName
argument_list|)
argument_list|)
expr_stmt|;
operator|delete
name|channel
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QCopChannel
operator|::
name|isRegistered
argument_list|(
name|channelName
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendreceivemp
name|void
name|tst_QCopChannel
operator|::
name|sendreceivemp
parameter_list|()
block|{
specifier|const
name|QString
name|channelName
argument_list|(
literal|"tst_QcopChannel::send()"
argument_list|)
decl_stmt|;
name|QCopChannel
modifier|*
name|channel
init|=
operator|new
name|QCopChannel
argument_list|(
name|channelName
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spy
argument_list|(
name|channel
argument_list|,
name|SIGNAL
argument_list|(
name|received
argument_list|(
specifier|const
name|QString
operator|&
argument_list|,
specifier|const
name|QByteArray
operator|&
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|testSend
argument_list|(
literal|"foo"
argument_list|,
literal|"msg"
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|testSend
argument_list|(
name|channelName
argument_list|,
literal|"msg"
argument_list|,
literal|"data"
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QVariant
argument_list|>
name|args
init|=
name|spy
operator|.
name|takeFirst
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|args
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"msg"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|args
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"data"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|channel
expr_stmt|;
name|testSend
argument_list|(
name|channelName
argument_list|,
literal|"msg2"
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sendreceivesp
name|void
name|tst_QCopChannel
operator|::
name|sendreceivesp
parameter_list|()
block|{
specifier|const
name|QString
name|channelName
argument_list|(
literal|"tst_QcopChannel::send()"
argument_list|)
decl_stmt|;
name|QCopChannel
modifier|*
name|channel
init|=
operator|new
name|QCopChannel
argument_list|(
name|channelName
argument_list|)
decl_stmt|;
name|QSignalSpy
name|spy
argument_list|(
name|channel
argument_list|,
name|SIGNAL
argument_list|(
name|received
argument_list|(
specifier|const
name|QString
operator|&
argument_list|,
specifier|const
name|QByteArray
operator|&
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QCopChannel
operator|::
name|send
argument_list|(
literal|"foo"
argument_list|,
literal|"msg"
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCopChannel
operator|::
name|send
argument_list|(
name|channelName
argument_list|,
literal|"msg"
argument_list|,
literal|"data"
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QTRY_COMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QVariant
argument_list|>
name|args
init|=
name|spy
operator|.
name|takeFirst
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|args
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|QString
argument_list|(
literal|"msg"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|args
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|.
name|toByteArray
argument_list|()
argument_list|,
name|QByteArray
argument_list|(
literal|"data"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
operator|delete
name|channel
expr_stmt|;
name|QCopChannel
operator|::
name|send
argument_list|(
name|channelName
argument_list|,
literal|"msg2"
argument_list|)
expr_stmt|;
name|QApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|testSend
name|void
name|tst_QCopChannel
operator|::
name|testSend
parameter_list|(
specifier|const
name|QString
modifier|&
name|channel
parameter_list|,
specifier|const
name|QString
modifier|&
name|msg
parameter_list|,
specifier|const
name|QByteArray
modifier|&
name|data
parameter_list|)
block|{
name|QProcess
name|proc
decl_stmt|;
name|QStringList
name|args
decl_stmt|;
name|args
operator|<<
name|channel
operator|<<
name|msg
expr_stmt|;
if|if
condition|(
operator|!
name|data
operator|.
name|isEmpty
argument_list|()
condition|)
name|args
operator|<<
name|data
expr_stmt|;
name|proc
operator|.
name|start
argument_list|(
literal|"testSend/testSend"
argument_list|,
name|args
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proc
operator|.
name|state
argument_list|()
operator|==
name|QProcess
operator|::
name|NotRunning
operator|||
name|proc
operator|.
name|waitForFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|proc
operator|.
name|exitStatus
argument_list|()
argument_list|,
name|QProcess
operator|::
name|NormalExit
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|proc
operator|.
name|readAll
argument_list|()
operator|==
literal|"done"
argument_list|)
expr_stmt|;
comment|// sanity check
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QCopChannel
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qcopchannel.moc"
end_include
begin_else
else|#
directive|else
end_else
begin_comment
comment|// Q_WS_QWS
end_comment
begin_macro
name|QTEST_NOOP_MAIN
end_macro
begin_endif
endif|#
directive|endif
end_endif
end_unit
