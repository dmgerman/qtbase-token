begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<QtNetwork/QNetworkCookieJar>
end_include
begin_include
include|#
directive|include
file|"private/qnetworkcookiejar_p.h"
end_include
begin_class
DECL|class|tst_QNetworkCookieJar
class|class
name|tst_QNetworkCookieJar
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|getterSetter
parameter_list|()
function_decl|;
name|void
name|setCookiesFromUrl_data
parameter_list|()
function_decl|;
name|void
name|setCookiesFromUrl
parameter_list|()
function_decl|;
name|void
name|cookiesForUrl_data
parameter_list|()
function_decl|;
name|void
name|cookiesForUrl
parameter_list|()
function_decl|;
name|void
name|effectiveTLDs_data
parameter_list|()
function_decl|;
name|void
name|effectiveTLDs
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_macro
name|QT_BEGIN_NAMESPACE
end_macro
begin_namespace
DECL|namespace|QTest
namespace|namespace
name|QTest
block|{
template|template
parameter_list|<>
DECL|function|toString
name|char
modifier|*
name|toString
parameter_list|(
specifier|const
name|QNetworkCookie
modifier|&
name|cookie
parameter_list|)
block|{
return|return
name|qstrdup
argument_list|(
name|cookie
operator|.
name|toRawForm
argument_list|()
argument_list|)
return|;
block|}
template|template
parameter_list|<>
DECL|function|toString
name|char
modifier|*
name|toString
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
modifier|&
name|list
parameter_list|)
block|{
name|QString
name|result
init|=
literal|"QList("
decl_stmt|;
name|bool
name|first
init|=
literal|true
decl_stmt|;
foreach|foreach
control|(
name|QNetworkCookie
name|cookie
decl|,
name|list
control|)
block|{
if|if
condition|(
operator|!
name|first
condition|)
name|result
operator|+=
literal|", "
expr_stmt|;
name|first
operator|=
literal|false
expr_stmt|;
name|result
operator|+=
name|QString
operator|::
name|fromLatin1
argument_list|(
literal|"QNetworkCookie(%1)"
argument_list|)
operator|.
name|arg
argument_list|(
name|QLatin1String
argument_list|(
name|cookie
operator|.
name|toRawForm
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
return|return
name|qstrdup
argument_list|(
name|result
operator|.
name|append
argument_list|(
literal|')'
argument_list|)
operator|.
name|toLocal8Bit
argument_list|()
argument_list|)
return|;
block|}
block|}
end_namespace
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_class
DECL|class|MyCookieJar
class|class
name|MyCookieJar
super|:
specifier|public
name|QNetworkCookieJar
block|{
public|public:
DECL|function|allCookies
specifier|inline
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
name|allCookies
parameter_list|()
specifier|const
block|{
return|return
name|QNetworkCookieJar
operator|::
name|allCookies
argument_list|()
return|;
block|}
DECL|function|setAllCookies
specifier|inline
name|void
name|setAllCookies
parameter_list|(
specifier|const
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
modifier|&
name|cookieList
parameter_list|)
block|{
name|QNetworkCookieJar
operator|::
name|setAllCookies
argument_list|(
name|cookieList
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|getterSetter
name|void
name|tst_QNetworkCookieJar
operator|::
name|getterSetter
parameter_list|()
block|{
name|MyCookieJar
name|jar
decl_stmt|;
name|QVERIFY
argument_list|(
name|jar
operator|.
name|allCookies
argument_list|()
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
name|list
decl_stmt|;
name|QNetworkCookie
name|cookie
decl_stmt|;
name|cookie
operator|.
name|setName
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|list
operator|<<
name|cookie
expr_stmt|;
name|jar
operator|.
name|setAllCookies
argument_list|(
name|list
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|jar
operator|.
name|allCookies
argument_list|()
argument_list|,
name|list
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setCookiesFromUrl_data
name|void
name|tst_QNetworkCookieJar
operator|::
name|setCookiesFromUrl_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
argument_list|>
argument_list|(
literal|"preset"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QNetworkCookie
argument_list|>
argument_list|(
literal|"newCookie"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"referenceUrl"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
argument_list|>
argument_list|(
literal|"expectedResult"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"setCookies"
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
name|preset
decl_stmt|;
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
name|result
decl_stmt|;
name|QNetworkCookie
name|cookie
decl_stmt|;
name|cookie
operator|.
name|setName
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|cookie
operator|.
name|setPath
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|cookie
operator|.
name|setDomain
argument_list|(
literal|".foo.tld"
argument_list|)
expr_stmt|;
name|result
operator|+=
name|cookie
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"just-add"
argument_list|)
operator|<<
name|preset
operator|<<
name|cookie
operator|<<
literal|"http://www.foo.tld"
operator|<<
name|result
operator|<<
literal|true
expr_stmt|;
name|preset
operator|=
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"replace-1"
argument_list|)
operator|<<
name|preset
operator|<<
name|cookie
operator|<<
literal|"http://www.foo.tld"
operator|<<
name|result
operator|<<
literal|true
expr_stmt|;
name|cookie
operator|.
name|setValue
argument_list|(
literal|"bc"
argument_list|)
expr_stmt|;
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
name|result
operator|+=
name|cookie
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"replace-2"
argument_list|)
operator|<<
name|preset
operator|<<
name|cookie
operator|<<
literal|"http://www.foo.tld"
operator|<<
name|result
operator|<<
literal|true
expr_stmt|;
name|preset
operator|=
name|result
expr_stmt|;
name|cookie
operator|.
name|setName
argument_list|(
literal|"d"
argument_list|)
expr_stmt|;
name|result
operator|+=
name|cookie
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"append"
argument_list|)
operator|<<
name|preset
operator|<<
name|cookie
operator|<<
literal|"http://www.foo.tld"
operator|<<
name|result
operator|<<
literal|true
expr_stmt|;
name|cookie
operator|=
name|preset
operator|.
name|at
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|result
operator|=
name|preset
expr_stmt|;
name|cookie
operator|.
name|setPath
argument_list|(
literal|"/something"
argument_list|)
expr_stmt|;
name|result
operator|+=
name|cookie
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"diff-path"
argument_list|)
operator|<<
name|preset
operator|<<
name|cookie
operator|<<
literal|"http://www.foo.tld/something"
operator|<<
name|result
operator|<<
literal|true
expr_stmt|;
name|preset
operator|.
name|clear
argument_list|()
expr_stmt|;
name|preset
operator|+=
name|cookie
expr_stmt|;
name|cookie
operator|.
name|setPath
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"diff-path-order"
argument_list|)
operator|<<
name|preset
operator|<<
name|cookie
operator|<<
literal|"http://www.foo.tld"
operator|<<
name|result
operator|<<
literal|true
expr_stmt|;
name|preset
operator|.
name|clear
argument_list|()
expr_stmt|;
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QNetworkCookie
name|finalCookie
init|=
name|cookie
decl_stmt|;
name|cookie
operator|.
name|setDomain
argument_list|(
literal|"foo.tld"
argument_list|)
expr_stmt|;
name|finalCookie
operator|.
name|setDomain
argument_list|(
literal|".foo.tld"
argument_list|)
expr_stmt|;
name|result
operator|+=
name|finalCookie
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"should-add-dot-prefix"
argument_list|)
operator|<<
name|preset
operator|<<
name|cookie
operator|<<
literal|"http://www.foo.tld"
operator|<<
name|result
operator|<<
literal|true
expr_stmt|;
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cookie
operator|.
name|setDomain
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|finalCookie
operator|.
name|setDomain
argument_list|(
literal|"www.foo.tld"
argument_list|)
expr_stmt|;
name|result
operator|+=
name|finalCookie
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"should-set-default-domain"
argument_list|)
operator|<<
name|preset
operator|<<
name|cookie
operator|<<
literal|"http://www.foo.tld"
operator|<<
name|result
operator|<<
literal|true
expr_stmt|;
comment|// security test:
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
name|preset
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cookie
operator|.
name|setDomain
argument_list|(
literal|"something.completely.different"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"security-domain-1"
argument_list|)
operator|<<
name|preset
operator|<<
name|cookie
operator|<<
literal|"http://www.foo.tld"
operator|<<
name|result
operator|<<
literal|false
expr_stmt|;
comment|// we want the cookie to be accepted although the path does not match, see QTBUG-5815
name|cookie
operator|.
name|setDomain
argument_list|(
literal|".foo.tld"
argument_list|)
expr_stmt|;
name|cookie
operator|.
name|setPath
argument_list|(
literal|"/something"
argument_list|)
expr_stmt|;
name|result
operator|+=
name|cookie
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"security-path-1"
argument_list|)
operator|<<
name|preset
operator|<<
name|cookie
operator|<<
literal|"http://www.foo.tld"
operator|<<
name|result
operator|<<
literal|true
expr_stmt|;
comment|// check effective TLDs
comment|// 1. co.uk is an effective TLD, should be denied
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
name|preset
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cookie
operator|.
name|setPath
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|cookie
operator|.
name|setDomain
argument_list|(
literal|".co.uk"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"effective-tld1-denied"
argument_list|)
operator|<<
name|preset
operator|<<
name|cookie
operator|<<
literal|"http://something.co.uk"
operator|<<
name|result
operator|<<
literal|false
expr_stmt|;
name|cookie
operator|.
name|setDomain
argument_list|(
literal|"co.uk"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"effective-tld1-denied2"
argument_list|)
operator|<<
name|preset
operator|<<
name|cookie
operator|<<
literal|"http://something.co.uk"
operator|<<
name|result
operator|<<
literal|false
expr_stmt|;
name|cookie
operator|.
name|setDomain
argument_list|(
literal|".something.co.uk"
argument_list|)
expr_stmt|;
name|result
operator|+=
name|cookie
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"effective-tld1-accepted"
argument_list|)
operator|<<
name|preset
operator|<<
name|cookie
operator|<<
literal|"http://something.co.uk"
operator|<<
name|result
operator|<<
literal|true
expr_stmt|;
comment|// 2. anything .ar is an effective TLD ('*.ar'), but 'gobiernoelectronico.ar' is an exception
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
name|preset
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cookie
operator|.
name|setDomain
argument_list|(
literal|".farmacia.ar"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"effective-tld2-denied"
argument_list|)
operator|<<
name|preset
operator|<<
name|cookie
operator|<<
literal|"http://farmacia.ar"
operator|<<
name|result
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"effective-tld2-denied2"
argument_list|)
operator|<<
name|preset
operator|<<
name|cookie
operator|<<
literal|"http://www.farmacia.ar"
operator|<<
name|result
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"effective-tld2-denied3"
argument_list|)
operator|<<
name|preset
operator|<<
name|cookie
operator|<<
literal|"http://www.anything.farmacia.ar"
operator|<<
name|result
operator|<<
literal|false
expr_stmt|;
name|cookie
operator|.
name|setDomain
argument_list|(
literal|".gobiernoelectronico.ar"
argument_list|)
expr_stmt|;
name|result
operator|+=
name|cookie
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"effective-tld2-accepted"
argument_list|)
operator|<<
name|preset
operator|<<
name|cookie
operator|<<
literal|"http://www.gobiernoelectronico.ar"
operator|<<
name|result
operator|<<
literal|true
expr_stmt|;
comment|// setting the defaults:
name|finalCookie
operator|=
name|cookie
expr_stmt|;
name|finalCookie
operator|.
name|setPath
argument_list|(
literal|"/something/"
argument_list|)
expr_stmt|;
name|finalCookie
operator|.
name|setDomain
argument_list|(
literal|"www.foo.tld"
argument_list|)
expr_stmt|;
name|cookie
operator|.
name|setPath
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|cookie
operator|.
name|setDomain
argument_list|(
literal|""
argument_list|)
expr_stmt|;
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
name|result
operator|+=
name|finalCookie
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"defaults-1"
argument_list|)
operator|<<
name|preset
operator|<<
name|cookie
operator|<<
literal|"http://www.foo.tld/something/"
operator|<<
name|result
operator|<<
literal|true
expr_stmt|;
name|finalCookie
operator|.
name|setPath
argument_list|(
literal|"/"
argument_list|)
expr_stmt|;
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
name|result
operator|+=
name|finalCookie
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"defaults-2"
argument_list|)
operator|<<
name|preset
operator|<<
name|cookie
operator|<<
literal|"http://www.foo.tld"
operator|<<
name|result
operator|<<
literal|true
expr_stmt|;
comment|// security test: do not accept cookie domains like ".com" nor ".com." (see RFC 2109 section 4.3.2)
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
name|preset
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cookie
operator|.
name|setDomain
argument_list|(
literal|".com"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rfc2109-4.3.2-ex3"
argument_list|)
operator|<<
name|preset
operator|<<
name|cookie
operator|<<
literal|"http://x.foo.com"
operator|<<
name|result
operator|<<
literal|false
expr_stmt|;
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
name|preset
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cookie
operator|.
name|setDomain
argument_list|(
literal|".com."
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"rfc2109-4.3.2-ex3-2"
argument_list|)
operator|<<
name|preset
operator|<<
name|cookie
operator|<<
literal|"http://x.foo.com"
operator|<<
name|result
operator|<<
literal|false
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setCookiesFromUrl
name|void
name|tst_QNetworkCookieJar
operator|::
name|setCookiesFromUrl
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
argument_list|,
name|preset
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QNetworkCookie
argument_list|,
name|newCookie
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|referenceUrl
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
argument_list|,
name|expectedResult
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|setCookies
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
name|cookieList
decl_stmt|;
name|cookieList
operator|+=
name|newCookie
expr_stmt|;
name|MyCookieJar
name|jar
decl_stmt|;
name|jar
operator|.
name|setAllCookies
argument_list|(
name|preset
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|jar
operator|.
name|setCookiesFromUrl
argument_list|(
name|cookieList
argument_list|,
name|referenceUrl
argument_list|)
argument_list|,
name|setCookies
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
name|result
init|=
name|jar
operator|.
name|allCookies
argument_list|()
decl_stmt|;
foreach|foreach
control|(
name|QNetworkCookie
name|cookie
decl|,
name|expectedResult
control|)
block|{
name|QVERIFY2
argument_list|(
name|result
operator|.
name|contains
argument_list|(
name|cookie
argument_list|)
argument_list|,
name|cookie
operator|.
name|toRawForm
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|removeAll
argument_list|(
name|cookie
argument_list|)
expr_stmt|;
block|}
name|QVERIFY2
argument_list|(
name|result
operator|.
name|isEmpty
argument_list|()
argument_list|,
name|QTest
operator|::
name|toString
argument_list|(
name|result
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cookiesForUrl_data
name|void
name|tst_QNetworkCookieJar
operator|::
name|cookiesForUrl_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
argument_list|>
argument_list|(
literal|"allCookies"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"url"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
argument_list|>
argument_list|(
literal|"expectedResult"
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
name|allCookies
decl_stmt|;
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
name|result
decl_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-cookies"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://foo.bar/"
operator|<<
name|result
expr_stmt|;
name|QNetworkCookie
name|cookie
decl_stmt|;
name|cookie
operator|.
name|setName
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|cookie
operator|.
name|setPath
argument_list|(
literal|"/web"
argument_list|)
expr_stmt|;
name|cookie
operator|.
name|setDomain
argument_list|(
literal|".nokia.com"
argument_list|)
expr_stmt|;
name|allCookies
operator|+=
name|cookie
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-match-1"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://foo.bar/"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-match-2"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://foo.bar/web"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-match-3"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://foo.bar/web/wiki"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-match-4"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://nokia.com"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-match-5"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://qt.nokia.com"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-match-6"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://nokia.com/webinar"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-match-7"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://qt.nokia.com/webinar"
operator|<<
name|result
expr_stmt|;
name|result
operator|=
name|allCookies
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"match-1"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://nokia.com/web"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"match-2"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://nokia.com/web/"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"match-3"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://nokia.com/web/content"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"match-4"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://qt.nokia.com/web"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"match-4"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://qt.nokia.com/web/"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"match-6"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://qt.nokia.com/web/content"
operator|<<
name|result
expr_stmt|;
name|cookie
operator|.
name|setPath
argument_list|(
literal|"/web/wiki"
argument_list|)
expr_stmt|;
name|allCookies
operator|+=
name|cookie
expr_stmt|;
comment|// exact same results as before:
name|QTest
operator|::
name|newRow
argument_list|(
literal|"one-match-1"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://nokia.com/web"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"one-match-2"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://nokia.com/web/"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"one-match-3"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://nokia.com/web/content"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"one-match-4"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://qt.nokia.com/web"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"one-match-4"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://qt.nokia.com/web/"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"one-match-6"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://qt.nokia.com/web/content"
operator|<<
name|result
expr_stmt|;
name|result
operator|.
name|prepend
argument_list|(
name|cookie
argument_list|)
expr_stmt|;
comment|// longer path, it must match first
name|QTest
operator|::
name|newRow
argument_list|(
literal|"two-matches-1"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://nokia.com/web/wiki"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"two-matches-2"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://qt.nokia.com/web/wiki"
operator|<<
name|result
expr_stmt|;
comment|// invert the order;
name|allCookies
operator|.
name|clear
argument_list|()
expr_stmt|;
name|allCookies
operator|<<
name|result
operator|.
name|at
argument_list|(
literal|1
argument_list|)
operator|<<
name|result
operator|.
name|at
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"two-matches-3"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://nokia.com/web/wiki"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"two-matches-4"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://qt.nokia.com/web/wiki"
operator|<<
name|result
expr_stmt|;
comment|// expired cookie
name|allCookies
operator|.
name|clear
argument_list|()
expr_stmt|;
name|cookie
operator|.
name|setExpirationDate
argument_list|(
name|QDateTime
operator|::
name|fromString
argument_list|(
literal|"09-Nov-1999"
argument_list|,
literal|"dd-MMM-yyyy"
argument_list|)
argument_list|)
expr_stmt|;
name|allCookies
operator|+=
name|cookie
expr_stmt|;
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"exp-match-1"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://nokia.com/web"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"exp-match-2"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://nokia.com/web/"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"exp-match-3"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://nokia.com/web/content"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"exp-match-4"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://qt.nokia.com/web"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"exp-match-4"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://qt.nokia.com/web/"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"exp-match-6"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://qt.nokia.com/web/content"
operator|<<
name|result
expr_stmt|;
comment|// path matching
name|allCookies
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QNetworkCookie
name|anotherCookie
decl_stmt|;
name|anotherCookie
operator|.
name|setName
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|anotherCookie
operator|.
name|setPath
argument_list|(
literal|"/web"
argument_list|)
expr_stmt|;
name|anotherCookie
operator|.
name|setDomain
argument_list|(
literal|".nokia.com"
argument_list|)
expr_stmt|;
name|allCookies
operator|+=
name|anotherCookie
expr_stmt|;
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"path-unmatch-1"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://nokia.com/"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"path-unmatch-2"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://nokia.com/something/else"
operator|<<
name|result
expr_stmt|;
name|result
operator|+=
name|anotherCookie
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"path-match-1"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://nokia.com/web"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"path-match-2"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://nokia.com/web/"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"path-match-3"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://nokia.com/web/content"
operator|<<
name|result
expr_stmt|;
comment|// secure cookies
name|allCookies
operator|.
name|clear
argument_list|()
expr_stmt|;
name|result
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QNetworkCookie
name|secureCookie
decl_stmt|;
name|secureCookie
operator|.
name|setName
argument_list|(
literal|"a"
argument_list|)
expr_stmt|;
name|secureCookie
operator|.
name|setPath
argument_list|(
literal|"/web"
argument_list|)
expr_stmt|;
name|secureCookie
operator|.
name|setDomain
argument_list|(
literal|".nokia.com"
argument_list|)
expr_stmt|;
name|secureCookie
operator|.
name|setSecure
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|allCookies
operator|+=
name|secureCookie
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-match-secure-1"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://nokia.com/web"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-match-secure-2"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"http://qt.nokia.com/web"
operator|<<
name|result
expr_stmt|;
name|result
operator|+=
name|secureCookie
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"match-secure-1"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"https://nokia.com/web"
operator|<<
name|result
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"match-secure-2"
argument_list|)
operator|<<
name|allCookies
operator|<<
literal|"https://qt.nokia.com/web"
operator|<<
name|result
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cookiesForUrl
name|void
name|tst_QNetworkCookieJar
operator|::
name|cookiesForUrl
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
argument_list|,
name|allCookies
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|url
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
argument_list|,
name|expectedResult
argument_list|)
expr_stmt|;
name|MyCookieJar
name|jar
decl_stmt|;
name|jar
operator|.
name|setAllCookies
argument_list|(
name|allCookies
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|QNetworkCookie
argument_list|>
name|result
init|=
name|jar
operator|.
name|cookiesForUrl
argument_list|(
name|url
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
name|expectedResult
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|effectiveTLDs_data
name|void
name|tst_QNetworkCookieJar
operator|::
name|effectiveTLDs_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|QString
argument_list|>
argument_list|(
literal|"domain"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"isTLD"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yes1"
argument_list|)
operator|<<
literal|"com"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yes2"
argument_list|)
operator|<<
literal|"de"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yes3"
argument_list|)
operator|<<
literal|"ulm.museum"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yes4"
argument_list|)
operator|<<
literal|"krodsherad.no"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yes5"
argument_list|)
operator|<<
literal|"1.bg"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yes6"
argument_list|)
operator|<<
literal|"com.cn"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yes7"
argument_list|)
operator|<<
literal|"org.ws"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yes8"
argument_list|)
operator|<<
literal|"co.uk"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yes9"
argument_list|)
operator|<<
literal|"wallonie.museum"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no1"
argument_list|)
operator|<<
literal|"anything.com"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no2"
argument_list|)
operator|<<
literal|"anything.de"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no3"
argument_list|)
operator|<<
literal|"eselsberg.ulm.museum"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no4"
argument_list|)
operator|<<
literal|"noe.krodsherad.no"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no5"
argument_list|)
operator|<<
literal|"2.1.bg"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no6"
argument_list|)
operator|<<
literal|"foo.com.cn"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no7"
argument_list|)
operator|<<
literal|"something.org.ws"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no8"
argument_list|)
operator|<<
literal|"teatime.co.uk"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no9"
argument_list|)
operator|<<
literal|"bla"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no10"
argument_list|)
operator|<<
literal|"bla.bla"
operator|<<
literal|false
expr_stmt|;
specifier|const
name|ushort
name|s1
index|[]
init|=
block|{
literal|0x74
block|,
literal|0x72
block|,
literal|0x61
block|,
literal|0x6e
block|,
literal|0xf8
block|,
literal|0x79
block|,
literal|0x2e
block|,
literal|0x6e
block|,
literal|0x6f
block|,
literal|0x00
block|}
decl_stmt|;
comment|// xn--trany-yua.no
specifier|const
name|ushort
name|s2
index|[]
init|=
block|{
literal|0x5d9
block|,
literal|0x5e8
block|,
literal|0x5d5
block|,
literal|0x5e9
block|,
literal|0x5dc
block|,
literal|0x5d9
block|,
literal|0x5dd
block|,
literal|0x2e
block|,
literal|0x6d
block|,
literal|0x75
block|,
literal|0x73
block|,
literal|0x65
block|,
literal|0x75
block|,
literal|0x6d
block|,
literal|0x00
block|}
decl_stmt|;
comment|// xn--9dbhblg6di.museum
specifier|const
name|ushort
name|s3
index|[]
init|=
block|{
literal|0x7ec4
block|,
literal|0x7e54
block|,
literal|0x2e
block|,
literal|0x68
block|,
literal|0x6b
block|,
literal|0x00
block|}
decl_stmt|;
comment|// xn--mk0axi.hk
specifier|const
name|ushort
name|s4
index|[]
init|=
block|{
literal|0x7f51
block|,
literal|0x7edc
block|,
literal|0x2e
block|,
literal|0x63
block|,
literal|0x6e
block|,
literal|0x00
block|}
decl_stmt|;
comment|// xn--io0a7i.cn
specifier|const
name|ushort
name|s5
index|[]
init|=
block|{
literal|0x72
block|,
literal|0xe1
block|,
literal|0x68
block|,
literal|0x6b
block|,
literal|0x6b
block|,
literal|0x65
block|,
literal|0x72
block|,
literal|0xe1
block|,
literal|0x76
block|,
literal|0x6a
block|,
literal|0x75
block|,
literal|0x2e
block|,
literal|0x6e
block|,
literal|0x6f
block|,
literal|0x00
block|}
decl_stmt|;
comment|// xn--rhkkervju-01af.no
specifier|const
name|ushort
name|s6
index|[]
init|=
block|{
literal|0xb9a
block|,
literal|0xbbf
block|,
literal|0xb99
block|,
literal|0xbcd
block|,
literal|0xb95
block|,
literal|0xbaa
block|,
literal|0xbcd
block|,
literal|0xbaa
block|,
literal|0xbc2
block|,
literal|0xbb0
block|,
literal|0xbcd
block|,
literal|0x00
block|}
decl_stmt|;
comment|// xn--clchc0ea0b2g2a9gcd
specifier|const
name|ushort
name|s7
index|[]
init|=
block|{
literal|0x627
block|,
literal|0x644
block|,
literal|0x627
block|,
literal|0x631
block|,
literal|0x62f
block|,
literal|0x646
block|,
literal|0x00
block|}
decl_stmt|;
comment|// xn--mgbayh7gpa
specifier|const
name|ushort
name|s8
index|[]
init|=
block|{
literal|0x63
block|,
literal|0x6f
block|,
literal|0x72
block|,
literal|0x72
block|,
literal|0x65
block|,
literal|0x69
block|,
literal|0x6f
block|,
literal|0x73
block|,
literal|0x2d
block|,
literal|0x65
block|,
literal|0x2d
block|,
literal|0x74
block|,
literal|0x65
block|,
literal|0x6c
block|,
literal|0x65
block|,
literal|0x63
block|,
literal|0x6f
block|,
literal|0x6d
block|,
literal|0x75
block|,
literal|0x6e
block|,
literal|0x69
block|,
literal|0x63
block|,
literal|0x61
block|,
literal|0xe7
block|,
literal|0xf5
block|,
literal|0x65
block|,
literal|0x73
block|,
literal|0x2e
block|,
literal|0x6d
block|,
literal|0x75
block|,
literal|0x73
block|,
literal|0x65
block|,
literal|0x75
block|,
literal|0x6d
block|,
literal|0x00
block|}
decl_stmt|;
comment|// xn--correios-e-telecomunicaes-ghc29a.museum
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yes-specialchars1"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|s1
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yes-specialchars2"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|s2
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yes-specialchars3"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|s3
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yes-specialchars4"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|s4
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yes-specialchars5"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|s5
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yes-specialchars6"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|s6
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yes-specialchars7"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|s7
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yes-specialchars8"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|s8
argument_list|)
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-specialchars1"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|s1
argument_list|)
operator|.
name|prepend
argument_list|(
literal|"something"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-specialchars2"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|s2
argument_list|)
operator|.
name|prepend
argument_list|(
name|QString
operator|::
name|fromUtf16
argument_list|(
name|s2
argument_list|)
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-specialchars2.5"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|s2
argument_list|)
operator|.
name|prepend
argument_list|(
literal|"whatever"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-specialchars3"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|s3
argument_list|)
operator|.
name|prepend
argument_list|(
literal|"foo"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-specialchars4"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|s4
argument_list|)
operator|.
name|prepend
argument_list|(
literal|"bar"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-specialchars5"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|s5
argument_list|)
operator|.
name|prepend
argument_list|(
name|QString
operator|::
name|fromUtf16
argument_list|(
name|s2
argument_list|)
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-specialchars6"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|s6
argument_list|)
operator|.
name|prepend
argument_list|(
name|QLatin1Char
argument_list|(
literal|'.'
argument_list|)
operator|+
name|QString
operator|::
name|fromUtf16
argument_list|(
name|s6
argument_list|)
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-specialchars7"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|s7
argument_list|)
operator|.
name|prepend
argument_list|(
literal|"bla"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"no-specialchars8"
argument_list|)
operator|<<
name|QString
operator|::
name|fromUtf16
argument_list|(
name|s8
argument_list|)
operator|.
name|append
argument_list|(
literal|"foo"
argument_list|)
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"exception1"
argument_list|)
operator|<<
literal|"pref.iwate.jp"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"exception2"
argument_list|)
operator|<<
literal|"omanpost.om"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"exception3"
argument_list|)
operator|<<
literal|"omantel.om"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"exception4"
argument_list|)
operator|<<
literal|"gobiernoelectronico.ar"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"exception5"
argument_list|)
operator|<<
literal|"pref.ishikawa.jp"
operator|<<
literal|false
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yes-wildcard1"
argument_list|)
operator|<<
literal|"*.jm"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yes-wildcard1.5"
argument_list|)
operator|<<
literal|"anything.jm"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yes-wildcard2"
argument_list|)
operator|<<
literal|"something.kh"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yes-wildcard3"
argument_list|)
operator|<<
literal|"whatever.uk"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yes-wildcard4"
argument_list|)
operator|<<
literal|"anything.shizuoka.jp"
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"yes-wildcard5"
argument_list|)
operator|<<
literal|"foo.sch.uk"
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|effectiveTLDs
name|void
name|tst_QNetworkCookieJar
operator|::
name|effectiveTLDs
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|QT_BUILD_INTERNAL
name|QSKIP
argument_list|(
literal|"Test requires private API"
argument_list|,
name|SkipAll
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QFETCH
argument_list|(
name|QString
argument_list|,
name|domain
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|isTLD
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QNetworkCookieJarPrivate
operator|::
name|isEffectiveTLD
argument_list|(
name|domain
argument_list|)
argument_list|,
name|isTLD
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QNetworkCookieJar
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qnetworkcookiejar.moc"
end_include
end_unit
