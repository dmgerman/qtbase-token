begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** No Commercial Usage ** This file contains pre-release code and may not be distributed. ** You may use this file in accordance with the terms and conditions ** contained in the Technology Preview License Agreement accompanying ** this package. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights.  These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** If you have questions regarding the use of this file, please contact ** Nokia at qt-info@nokia.com. ** ** ** ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<windows.h>
end_include
begin_function
DECL|function|WinMain
name|int
name|APIENTRY
name|WinMain
parameter_list|(
name|HINSTANCE
name|hInstance
parameter_list|,
name|HINSTANCE
name|hPrevInstance
parameter_list|,
name|LPSTR
name|lpCmdLine
parameter_list|,
name|int
name|nCmdShow
parameter_list|)
block|{
name|HANDLE
name|hStdin
init|=
name|GetStdHandle
argument_list|(
name|STD_INPUT_HANDLE
argument_list|)
decl_stmt|;
name|HANDLE
name|hStdout
init|=
name|GetStdHandle
argument_list|(
name|STD_OUTPUT_HANDLE
argument_list|)
decl_stmt|;
name|HANDLE
name|hStderr
init|=
name|GetStdHandle
argument_list|(
name|STD_ERROR_HANDLE
argument_list|)
decl_stmt|;
for|for
control|(
init|;
condition|;
control|)
block|{
name|char
name|c
init|=
literal|0
decl_stmt|;
name|DWORD
name|read
init|=
literal|0
decl_stmt|;
if|if
condition|(
operator|!
name|ReadFile
argument_list|(
name|hStdin
argument_list|,
operator|&
name|c
argument_list|,
literal|1
argument_list|,
operator|&
name|read
argument_list|,
literal|0
argument_list|)
operator|||
name|read
operator|==
literal|0
operator|||
name|c
operator|==
literal|'q'
operator|||
name|c
operator|==
literal|'\0'
condition|)
break|break;
name|DWORD
name|wrote
init|=
literal|0
decl_stmt|;
name|WriteFile
argument_list|(
name|hStdout
argument_list|,
operator|&
name|c
argument_list|,
literal|1
argument_list|,
operator|&
name|wrote
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|WriteFile
argument_list|(
name|hStderr
argument_list|,
operator|&
name|c
argument_list|,
literal|1
argument_list|,
operator|&
name|wrote
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
return|return
literal|0
return|;
block|}
end_function
end_unit
