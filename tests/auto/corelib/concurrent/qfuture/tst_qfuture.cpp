begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_define
DECL|macro|QFUTURE_TEST
define|#
directive|define
name|QFUTURE_TEST
end_define
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qfuture.h>
end_include
begin_include
include|#
directive|include
file|<qfuturewatcher.h>
end_include
begin_include
include|#
directive|include
file|<qtconcurrentresultstore.h>
end_include
begin_include
include|#
directive|include
file|<qtconcurrentexception.h>
end_include
begin_include
include|#
directive|include
file|<private/qfutureinterface_p.h>
end_include
begin_using
using|using
namespace|namespace
name|QtConcurrent
namespace|;
end_using
begin_comment
comment|// COM interface macro.
end_comment
begin_if
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WIN
argument_list|)
operator|&&
name|defined
argument_list|(
name|interface
argument_list|)
end_if
begin_undef
DECL|macro|interface
undef|#
directive|undef
name|interface
end_undef
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|//TESTED_CLASS=
end_comment
begin_comment
comment|//TESTED_FILES=
end_comment
begin_class
DECL|class|tst_QFuture
class|class
name|tst_QFuture
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|resultStore
parameter_list|()
function_decl|;
name|void
name|future
parameter_list|()
function_decl|;
name|void
name|futureInterface
parameter_list|()
function_decl|;
name|void
name|refcounting
parameter_list|()
function_decl|;
name|void
name|cancel
parameter_list|()
function_decl|;
name|void
name|statePropagation
parameter_list|()
function_decl|;
name|void
name|multipleResults
parameter_list|()
function_decl|;
name|void
name|indexedResults
parameter_list|()
function_decl|;
name|void
name|progress
parameter_list|()
function_decl|;
name|void
name|progressText
parameter_list|()
function_decl|;
name|void
name|resultsAfterFinished
parameter_list|()
function_decl|;
name|void
name|resultsAsList
parameter_list|()
function_decl|;
name|void
name|implicitConversions
parameter_list|()
function_decl|;
name|void
name|iterators
parameter_list|()
function_decl|;
name|void
name|pause
parameter_list|()
function_decl|;
name|void
name|throttling
parameter_list|()
function_decl|;
name|void
name|voidConversions
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_EXCEPTIONS
name|void
name|exceptions
parameter_list|()
function_decl|;
name|void
name|exceptions_QTBUG18149
parameter_list|()
function_decl|;
endif|#
directive|endif
block|}
class|;
end_class
begin_function
DECL|function|resultStore
name|void
name|tst_QFuture
operator|::
name|resultStore
parameter_list|()
block|{
name|int
name|int0
init|=
literal|0
decl_stmt|;
name|int
name|int1
init|=
literal|1
decl_stmt|;
name|int
name|int2
init|=
literal|2
decl_stmt|;
block|{
name|ResultStore
argument_list|<
name|int
argument_list|>
name|store
decl_stmt|;
name|ResultIteratorBase
name|it
init|=
name|store
operator|.
name|begin
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|store
operator|.
name|begin
argument_list|()
operator|==
name|store
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|store
operator|.
name|resultAt
argument_list|(
literal|0
argument_list|)
operator|==
name|store
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|store
operator|.
name|resultAt
argument_list|(
literal|1
argument_list|)
operator|==
name|store
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|ResultStoreBase
name|store
decl_stmt|;
name|store
operator|.
name|addResult
argument_list|(
operator|-
literal|1
argument_list|,
operator|&
name|int0
argument_list|)
expr_stmt|;
comment|// note to self: adding a pointer to the stack here is ok since
name|store
operator|.
name|addResult
argument_list|(
literal|1
argument_list|,
operator|&
name|int1
argument_list|)
expr_stmt|;
comment|// ResultStoreBase does not take ownership, only ResultStore<> does.
name|ResultIteratorBase
name|it
init|=
name|store
operator|.
name|begin
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|it
operator|.
name|resultIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|==
name|store
operator|.
name|begin
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|!=
name|store
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|it
expr_stmt|;
name|QCOMPARE
argument_list|(
name|it
operator|.
name|resultIndex
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|!=
name|store
operator|.
name|begin
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|!=
name|store
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|it
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|!=
name|store
operator|.
name|begin
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|==
name|store
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QVector
argument_list|<
name|int
argument_list|>
name|vec0
init|=
name|QVector
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|2
operator|<<
literal|3
decl_stmt|;
name|QVector
argument_list|<
name|int
argument_list|>
name|vec1
init|=
name|QVector
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|4
operator|<<
literal|5
decl_stmt|;
block|{
name|ResultStoreBase
name|store
decl_stmt|;
name|store
operator|.
name|addResults
argument_list|(
operator|-
literal|1
argument_list|,
operator|&
name|vec0
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|store
operator|.
name|addResults
argument_list|(
operator|-
literal|1
argument_list|,
operator|&
name|vec1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|ResultIteratorBase
name|it
init|=
name|store
operator|.
name|begin
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|it
operator|.
name|resultIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|==
name|store
operator|.
name|begin
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|!=
name|store
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|it
expr_stmt|;
name|QCOMPARE
argument_list|(
name|it
operator|.
name|resultIndex
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|!=
name|store
operator|.
name|begin
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|!=
name|store
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|it
expr_stmt|;
name|QCOMPARE
argument_list|(
name|it
operator|.
name|resultIndex
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
operator|++
name|it
expr_stmt|;
name|QCOMPARE
argument_list|(
name|it
operator|.
name|resultIndex
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
operator|++
name|it
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|==
name|store
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|ResultStoreBase
name|store
decl_stmt|;
name|store
operator|.
name|addResult
argument_list|(
operator|-
literal|1
argument_list|,
operator|&
name|int0
argument_list|)
expr_stmt|;
name|store
operator|.
name|addResults
argument_list|(
operator|-
literal|1
argument_list|,
operator|&
name|vec1
argument_list|,
literal|2
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|store
operator|.
name|addResult
argument_list|(
operator|-
literal|1
argument_list|,
operator|&
name|int1
argument_list|)
expr_stmt|;
name|ResultIteratorBase
name|it
init|=
name|store
operator|.
name|begin
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|it
operator|.
name|resultIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|==
name|store
operator|.
name|begin
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|!=
name|store
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|it
expr_stmt|;
name|QCOMPARE
argument_list|(
name|it
operator|.
name|resultIndex
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|!=
name|store
operator|.
name|begin
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|!=
name|store
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|it
expr_stmt|;
name|QCOMPARE
argument_list|(
name|it
operator|.
name|resultIndex
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|!=
name|store
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|it
expr_stmt|;
name|QCOMPARE
argument_list|(
name|it
operator|.
name|resultIndex
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|!=
name|store
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|it
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|==
name|store
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|resultAt
argument_list|(
literal|0
argument_list|)
operator|.
name|resultIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|resultAt
argument_list|(
literal|1
argument_list|)
operator|.
name|resultIndex
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|resultAt
argument_list|(
literal|2
argument_list|)
operator|.
name|resultIndex
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|resultAt
argument_list|(
literal|3
argument_list|)
operator|.
name|resultIndex
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|resultAt
argument_list|(
literal|4
argument_list|)
argument_list|,
name|store
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|{
name|ResultStore
argument_list|<
name|int
argument_list|>
name|store
decl_stmt|;
name|store
operator|.
name|addResult
argument_list|(
operator|-
literal|1
argument_list|,
operator|&
name|int0
argument_list|)
expr_stmt|;
name|store
operator|.
name|addResults
argument_list|(
operator|-
literal|1
argument_list|,
operator|&
name|vec0
argument_list|)
expr_stmt|;
name|store
operator|.
name|addResult
argument_list|(
operator|-
literal|1
argument_list|,
operator|&
name|int1
argument_list|)
expr_stmt|;
name|ResultIteratorBase
name|it
init|=
name|store
operator|.
name|begin
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|it
operator|.
name|resultIndex
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|==
name|store
operator|.
name|begin
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|!=
name|store
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|it
expr_stmt|;
name|QCOMPARE
argument_list|(
name|it
operator|.
name|resultIndex
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|!=
name|store
operator|.
name|begin
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|!=
name|store
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|it
expr_stmt|;
name|QCOMPARE
argument_list|(
name|it
operator|.
name|resultIndex
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|!=
name|store
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|it
expr_stmt|;
name|QCOMPARE
argument_list|(
name|it
operator|.
name|resultIndex
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|!=
name|store
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|it
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|==
name|store
operator|.
name|end
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|resultAt
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
name|int0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|resultAt
argument_list|(
literal|1
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
name|vec0
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|resultAt
argument_list|(
literal|2
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
name|vec0
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|resultAt
argument_list|(
literal|3
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
name|int1
argument_list|)
expr_stmt|;
block|}
block|{
name|ResultStore
argument_list|<
name|int
argument_list|>
name|store
decl_stmt|;
name|store
operator|.
name|addResult
argument_list|(
operator|-
literal|1
argument_list|,
operator|&
name|int0
argument_list|)
expr_stmt|;
name|store
operator|.
name|addResults
argument_list|(
operator|-
literal|1
argument_list|,
operator|&
name|vec0
argument_list|)
expr_stmt|;
name|store
operator|.
name|addResult
argument_list|(
literal|200
argument_list|,
operator|&
name|int1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|resultAt
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
name|int0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|resultAt
argument_list|(
literal|1
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
name|vec0
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|resultAt
argument_list|(
literal|2
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
name|vec0
index|[
literal|1
index|]
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|resultAt
argument_list|(
literal|200
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
name|int1
argument_list|)
expr_stmt|;
block|}
block|{
name|ResultStore
argument_list|<
name|int
argument_list|>
name|store
decl_stmt|;
name|store
operator|.
name|addResult
argument_list|(
literal|1
argument_list|,
operator|&
name|int1
argument_list|)
expr_stmt|;
name|store
operator|.
name|addResult
argument_list|(
literal|0
argument_list|,
operator|&
name|int0
argument_list|)
expr_stmt|;
name|store
operator|.
name|addResult
argument_list|(
operator|-
literal|1
argument_list|,
operator|&
name|int2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|resultAt
argument_list|(
literal|0
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
name|int0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|resultAt
argument_list|(
literal|1
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
name|int1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|resultAt
argument_list|(
literal|2
argument_list|)
operator|.
name|value
argument_list|()
argument_list|,
name|int2
argument_list|)
expr_stmt|;
block|}
block|{
name|ResultStore
argument_list|<
name|int
argument_list|>
name|store
decl_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
name|INT_MAX
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|{
comment|// Test filter mode, where "gaps" in the result array aren't allowed.
name|ResultStore
argument_list|<
name|int
argument_list|>
name|store
decl_stmt|;
name|store
operator|.
name|setFilterMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|store
operator|.
name|addResult
argument_list|(
literal|0
argument_list|,
operator|&
name|int0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|store
operator|.
name|addResult
argument_list|(
literal|2
argument_list|,
operator|&
name|int2
argument_list|)
expr_stmt|;
comment|// add result at index 2
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
comment|// but 1 is missing, so this 2 won't be reported yet.
name|store
operator|.
name|addResult
argument_list|(
literal|1
argument_list|,
operator|&
name|int1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// 2 should be visible now.
name|store
operator|.
name|addResult
argument_list|(
literal|4
argument_list|,
operator|&
name|int0
argument_list|)
expr_stmt|;
name|store
operator|.
name|addResult
argument_list|(
literal|5
argument_list|,
operator|&
name|int0
argument_list|)
expr_stmt|;
name|store
operator|.
name|addResult
argument_list|(
literal|7
argument_list|,
operator|&
name|int0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|4
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|5
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|7
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|store
operator|.
name|addResult
argument_list|(
literal|3
argument_list|,
operator|&
name|int0
argument_list|)
expr_stmt|;
comment|// adding 3 makes 4 and 5 visible
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|4
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|5
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|7
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|store
operator|.
name|addResult
argument_list|(
literal|6
argument_list|,
operator|&
name|int0
argument_list|)
expr_stmt|;
comment|// adding 6 makes 7 visible
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|6
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|7
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|8
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|{
comment|// test canceled results
name|ResultStore
argument_list|<
name|int
argument_list|>
name|store
decl_stmt|;
name|store
operator|.
name|setFilterMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|store
operator|.
name|addResult
argument_list|(
literal|0
argument_list|,
operator|&
name|int0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|store
operator|.
name|addResult
argument_list|(
literal|2
argument_list|,
operator|&
name|int0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|store
operator|.
name|addCanceledResult
argument_list|(
literal|1
argument_list|)
expr_stmt|;
comment|// report no result at 1
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|// 2 gets renamed to 1
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|store
operator|.
name|addResult
argument_list|(
literal|3
argument_list|,
operator|&
name|int0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//3 gets renamed to 2
name|store
operator|.
name|addResult
argument_list|(
literal|6
argument_list|,
operator|&
name|int0
argument_list|)
expr_stmt|;
name|store
operator|.
name|addResult
argument_list|(
literal|7
argument_list|,
operator|&
name|int0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|3
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|store
operator|.
name|addCanceledResult
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|store
operator|.
name|addCanceledResult
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|3
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//6 gets renamed to 3
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|4
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//7 gets renamed to 4
name|store
operator|.
name|addResult
argument_list|(
literal|8
argument_list|,
operator|&
name|int0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|5
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
comment|//8 gets renamed to 4
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|6
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|7
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|{
comment|// test addResult return value
name|ResultStore
argument_list|<
name|int
argument_list|>
name|store
decl_stmt|;
name|store
operator|.
name|setFilterMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|store
operator|.
name|addResult
argument_list|(
literal|0
argument_list|,
operator|&
name|int0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
comment|// result 0 becomes available
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|store
operator|.
name|addResult
argument_list|(
literal|2
argument_list|,
operator|&
name|int0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|store
operator|.
name|addCanceledResult
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// result 2 is renamed to 1 and becomes available
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|store
operator|.
name|addResult
argument_list|(
literal|3
argument_list|,
operator|&
name|int0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|store
operator|.
name|addResult
argument_list|(
literal|6
argument_list|,
operator|&
name|int0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|store
operator|.
name|addResult
argument_list|(
literal|7
argument_list|,
operator|&
name|int0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|3
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|store
operator|.
name|addCanceledResult
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|store
operator|.
name|addCanceledResult
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|count
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
comment|// 6 and 7 is renamed to 3 and 4 and becomes available
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|3
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|4
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|store
operator|.
name|addResult
argument_list|(
literal|8
argument_list|,
operator|&
name|int0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|5
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|count
argument_list|()
argument_list|,
literal|6
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|6
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|7
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|{
comment|// test resultCount in non-filtered mode. It should always be possible
comment|// to iterate through the results 0 to resultCount.
name|ResultStore
argument_list|<
name|int
argument_list|>
name|store
decl_stmt|;
name|store
operator|.
name|addResult
argument_list|(
literal|0
argument_list|,
operator|&
name|int0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|store
operator|.
name|addResult
argument_list|(
literal|2
argument_list|,
operator|&
name|int0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|store
operator|.
name|addResult
argument_list|(
literal|1
argument_list|,
operator|&
name|int0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
block|{
name|ResultStore
argument_list|<
name|int
argument_list|>
name|store
decl_stmt|;
name|store
operator|.
name|addResult
argument_list|(
literal|2
argument_list|,
operator|&
name|int0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|store
operator|.
name|addResult
argument_list|(
literal|1
argument_list|,
operator|&
name|int0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|store
operator|.
name|addResult
argument_list|(
literal|0
argument_list|,
operator|&
name|int0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
block|}
block|{
name|ResultStore
argument_list|<
name|int
argument_list|>
name|store
decl_stmt|;
name|store
operator|.
name|addResults
argument_list|(
literal|2
argument_list|,
operator|&
name|vec1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|store
operator|.
name|addResult
argument_list|(
literal|1
argument_list|,
operator|&
name|int0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|store
operator|.
name|addResult
argument_list|(
literal|0
argument_list|,
operator|&
name|int0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|count
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
block|{
name|ResultStore
argument_list|<
name|int
argument_list|>
name|store
decl_stmt|;
name|store
operator|.
name|addResults
argument_list|(
literal|2
argument_list|,
operator|&
name|vec1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|store
operator|.
name|addResults
argument_list|(
literal|0
argument_list|,
operator|&
name|vec0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|count
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
block|{
name|ResultStore
argument_list|<
name|int
argument_list|>
name|store
decl_stmt|;
name|store
operator|.
name|addResults
argument_list|(
literal|3
argument_list|,
operator|&
name|vec1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|store
operator|.
name|addResults
argument_list|(
literal|0
argument_list|,
operator|&
name|vec0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|store
operator|.
name|addResult
argument_list|(
literal|2
argument_list|,
operator|&
name|int0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|count
argument_list|()
argument_list|,
literal|5
argument_list|)
expr_stmt|;
block|}
block|{
name|ResultStore
argument_list|<
name|int
argument_list|>
name|store
decl_stmt|;
name|store
operator|.
name|setFilterMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|store
operator|.
name|addResults
argument_list|(
literal|3
argument_list|,
operator|&
name|vec1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|store
operator|.
name|addResults
argument_list|(
literal|0
argument_list|,
operator|&
name|vec0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|store
operator|.
name|addCanceledResult
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|count
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
block|{
name|ResultStore
argument_list|<
name|int
argument_list|>
name|store
decl_stmt|;
name|store
operator|.
name|setFilterMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|store
operator|.
name|addResults
argument_list|(
literal|3
argument_list|,
operator|&
name|vec1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|store
operator|.
name|addCanceledResults
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
block|}
block|{
name|ResultStore
argument_list|<
name|int
argument_list|>
name|store
decl_stmt|;
name|store
operator|.
name|setFilterMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|store
operator|.
name|addResults
argument_list|(
literal|3
argument_list|,
operator|&
name|vec1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|store
operator|.
name|addCanceledResults
argument_list|(
literal|0
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// results at 3 and 4 become available at index 0, 1
name|store
operator|.
name|addResult
argument_list|(
literal|5
argument_list|,
operator|&
name|int0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|count
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
comment|// result 5 becomes available at index 2
block|}
block|{
name|ResultStore
argument_list|<
name|int
argument_list|>
name|store
decl_stmt|;
name|store
operator|.
name|addResult
argument_list|(
literal|1
argument_list|,
operator|&
name|int0
argument_list|)
expr_stmt|;
name|store
operator|.
name|addResult
argument_list|(
literal|3
argument_list|,
operator|&
name|int0
argument_list|)
expr_stmt|;
name|store
operator|.
name|addResults
argument_list|(
literal|6
argument_list|,
operator|&
name|vec0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|3
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|4
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|5
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|6
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|7
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
block|{
name|ResultStore
argument_list|<
name|int
argument_list|>
name|store
decl_stmt|;
name|store
operator|.
name|setFilterMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|store
operator|.
name|addResult
argument_list|(
literal|1
argument_list|,
operator|&
name|int0
argument_list|)
expr_stmt|;
name|store
operator|.
name|addResult
argument_list|(
literal|3
argument_list|,
operator|&
name|int0
argument_list|)
expr_stmt|;
name|store
operator|.
name|addResults
argument_list|(
literal|6
argument_list|,
operator|&
name|vec0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|3
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|4
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|5
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|6
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|7
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|store
operator|.
name|addCanceledResult
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|store
operator|.
name|addCanceledResult
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|store
operator|.
name|addCanceledResults
argument_list|(
literal|4
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|3
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|4
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|5
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|6
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|7
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|{
name|ResultStore
argument_list|<
name|int
argument_list|>
name|store
decl_stmt|;
name|store
operator|.
name|setFilterMode
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|store
operator|.
name|addCanceledResult
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|store
operator|.
name|addResult
argument_list|(
literal|1
argument_list|,
operator|&
name|int0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|store
operator|.
name|contains
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|false
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|future
name|void
name|tst_QFuture
operator|::
name|future
parameter_list|()
block|{
comment|// default constructors
name|QFuture
argument_list|<
name|int
argument_list|>
name|intFuture
decl_stmt|;
name|intFuture
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
name|QFuture
argument_list|<
name|QString
argument_list|>
name|stringFuture
decl_stmt|;
name|stringFuture
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
name|QFuture
argument_list|<
name|void
argument_list|>
name|voidFuture
decl_stmt|;
name|voidFuture
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
name|QFuture
argument_list|<
name|void
argument_list|>
name|defaultVoidFuture
decl_stmt|;
name|defaultVoidFuture
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
comment|// copy constructor
name|QFuture
argument_list|<
name|int
argument_list|>
name|intFuture2
argument_list|(
name|intFuture
argument_list|)
decl_stmt|;
name|QFuture
argument_list|<
name|void
argument_list|>
name|voidFuture2
argument_list|(
name|defaultVoidFuture
argument_list|)
decl_stmt|;
comment|// assigmnent operator
name|intFuture2
operator|=
name|QFuture
argument_list|<
name|int
argument_list|>
argument_list|()
expr_stmt|;
name|voidFuture2
operator|=
name|QFuture
argument_list|<
name|void
argument_list|>
argument_list|()
expr_stmt|;
comment|// state
name|QCOMPARE
argument_list|(
name|intFuture2
operator|.
name|isStarted
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|intFuture2
operator|.
name|isFinished
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|IntResult
class|class
name|IntResult
super|:
specifier|public
name|QFutureInterface
argument_list|<
name|int
argument_list|>
block|{
public|public:
DECL|function|run
name|QFuture
argument_list|<
name|int
argument_list|>
name|run
parameter_list|()
block|{
name|this
operator|->
name|reportStarted
argument_list|()
expr_stmt|;
name|QFuture
argument_list|<
name|int
argument_list|>
name|future
init|=
name|QFuture
argument_list|<
name|int
argument_list|>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|int
name|res
init|=
literal|10
decl_stmt|;
name|reportFinished
argument_list|(
operator|&
name|res
argument_list|)
expr_stmt|;
return|return
name|future
return|;
block|}
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|value
name|int
name|value
init|=
literal|10
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|VoidResult
class|class
name|VoidResult
super|:
specifier|public
name|QFutureInterfaceBase
block|{
public|public:
DECL|function|run
name|QFuture
argument_list|<
name|void
argument_list|>
name|run
parameter_list|()
block|{
name|this
operator|->
name|reportStarted
argument_list|()
expr_stmt|;
name|QFuture
argument_list|<
name|void
argument_list|>
name|future
init|=
name|QFuture
argument_list|<
name|void
argument_list|>
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|reportFinished
argument_list|()
expr_stmt|;
return|return
name|future
return|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|futureInterface
name|void
name|tst_QFuture
operator|::
name|futureInterface
parameter_list|()
block|{
block|{
name|QFuture
argument_list|<
name|void
argument_list|>
name|future
decl_stmt|;
block|{
name|QFutureInterface
argument_list|<
name|void
argument_list|>
name|i
decl_stmt|;
name|i
operator|.
name|reportStarted
argument_list|()
expr_stmt|;
name|future
operator|=
name|i
operator|.
name|future
argument_list|()
expr_stmt|;
name|i
operator|.
name|reportFinished
argument_list|()
expr_stmt|;
block|}
block|}
block|{
name|QFuture
argument_list|<
name|int
argument_list|>
name|future
decl_stmt|;
block|{
name|QFutureInterface
argument_list|<
name|int
argument_list|>
name|i
decl_stmt|;
name|i
operator|.
name|reportStarted
argument_list|()
expr_stmt|;
name|i
operator|.
name|reportResult
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|future
operator|=
name|i
operator|.
name|future
argument_list|()
expr_stmt|;
name|i
operator|.
name|reportFinished
argument_list|()
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|future
operator|.
name|resultAt
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
block|{
name|QFuture
argument_list|<
name|int
argument_list|>
name|intFuture
decl_stmt|;
name|QCOMPARE
argument_list|(
name|intFuture
operator|.
name|isStarted
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|intFuture
operator|.
name|isFinished
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|IntResult
name|result
decl_stmt|;
name|result
operator|.
name|reportStarted
argument_list|()
expr_stmt|;
name|intFuture
operator|=
name|result
operator|.
name|future
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|intFuture
operator|.
name|isStarted
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|intFuture
operator|.
name|isFinished
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|result
operator|.
name|reportFinished
argument_list|(
operator|&
name|value
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|intFuture
operator|.
name|isStarted
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|intFuture
operator|.
name|isFinished
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|int
name|e
init|=
name|intFuture
operator|.
name|result
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|intFuture
operator|.
name|isStarted
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|intFuture
operator|.
name|isFinished
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|intFuture
operator|.
name|isCanceled
argument_list|()
argument_list|,
literal|false
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|e
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|intFuture
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
name|IntResult
name|intAlgo
decl_stmt|;
name|intFuture
operator|=
name|intAlgo
operator|.
name|run
argument_list|()
expr_stmt|;
name|QFuture
argument_list|<
name|int
argument_list|>
name|intFuture2
argument_list|(
name|intFuture
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|intFuture
operator|.
name|result
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|intFuture2
operator|.
name|result
argument_list|()
argument_list|,
name|value
argument_list|)
expr_stmt|;
name|intFuture
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
name|VoidResult
name|a
decl_stmt|;
name|a
operator|.
name|run
argument_list|()
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|testRefCounting
name|void
name|testRefCounting
parameter_list|()
block|{
name|QFutureInterface
argument_list|<
name|T
argument_list|>
name|interface
decl_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|.
name|d
operator|->
name|refCount
operator|.
name|load
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|{
name|interface
operator|.
name|reportStarted
argument_list|()
expr_stmt|;
name|QFuture
argument_list|<
name|T
argument_list|>
name|f
init|=
name|interface
operator|.
name|future
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|.
name|d
operator|->
name|refCount
operator|.
name|load
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QFuture
argument_list|<
name|T
argument_list|>
name|f2
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|.
name|d
operator|->
name|refCount
operator|.
name|load
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QFuture
argument_list|<
name|T
argument_list|>
name|f3
decl_stmt|;
name|f3
operator|=
name|f2
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|.
name|d
operator|->
name|refCount
operator|.
name|load
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|interface
operator|.
name|reportFinished
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|interface
operator|.
name|d
operator|->
name|refCount
operator|.
name|load
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|interface
operator|.
name|d
operator|->
name|refCount
operator|.
name|load
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|refcounting
name|void
name|tst_QFuture
operator|::
name|refcounting
parameter_list|()
block|{
name|testRefCounting
argument_list|<
name|int
argument_list|>
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|cancel
name|void
name|tst_QFuture
operator|::
name|cancel
parameter_list|()
block|{
block|{
name|QFuture
argument_list|<
name|void
argument_list|>
name|f
decl_stmt|;
name|QFutureInterface
argument_list|<
name|void
argument_list|>
name|result
decl_stmt|;
name|result
operator|.
name|reportStarted
argument_list|()
expr_stmt|;
name|f
operator|=
name|result
operator|.
name|future
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|isCanceled
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
name|result
operator|.
name|reportCanceled
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|isCanceled
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|reportFinished
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|isCanceled
argument_list|()
argument_list|)
expr_stmt|;
name|f
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|isCanceled
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Cancel from the QFuture side and test if the result
comment|// interface detects it.
block|{
name|QFutureInterface
argument_list|<
name|void
argument_list|>
name|result
decl_stmt|;
name|QFuture
argument_list|<
name|void
argument_list|>
name|f
decl_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|isStarted
argument_list|()
operator|==
literal|true
argument_list|)
expr_stmt|;
name|result
operator|.
name|reportStarted
argument_list|()
expr_stmt|;
name|f
operator|=
name|result
operator|.
name|future
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|isStarted
argument_list|()
operator|==
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|result
operator|.
name|isCanceled
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|result
operator|.
name|isCanceled
argument_list|()
argument_list|)
expr_stmt|;
name|result
operator|.
name|reportFinished
argument_list|()
expr_stmt|;
block|}
comment|// Test that finished futures can be canceled.
block|{
name|QFutureInterface
argument_list|<
name|void
argument_list|>
name|result
decl_stmt|;
name|QFuture
argument_list|<
name|void
argument_list|>
name|f
decl_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|isStarted
argument_list|()
operator|==
literal|true
argument_list|)
expr_stmt|;
name|result
operator|.
name|reportStarted
argument_list|()
expr_stmt|;
name|f
operator|=
name|result
operator|.
name|future
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|isStarted
argument_list|()
operator|==
literal|true
argument_list|)
expr_stmt|;
name|result
operator|.
name|reportFinished
argument_list|()
expr_stmt|;
name|f
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|result
operator|.
name|isCanceled
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|isCanceled
argument_list|()
argument_list|)
expr_stmt|;
block|}
comment|// Results reported after canceled is called should not be propagated.
block|{
name|QFutureInterface
argument_list|<
name|int
argument_list|>
name|futureInterface
decl_stmt|;
name|futureInterface
operator|.
name|reportStarted
argument_list|()
expr_stmt|;
name|QFuture
argument_list|<
name|int
argument_list|>
name|f
init|=
name|futureInterface
operator|.
name|future
argument_list|()
decl_stmt|;
name|int
name|result
init|=
literal|0
decl_stmt|;
name|futureInterface
operator|.
name|reportResult
argument_list|(
operator|&
name|result
argument_list|)
expr_stmt|;
name|result
operator|=
literal|1
expr_stmt|;
name|futureInterface
operator|.
name|reportResult
argument_list|(
operator|&
name|result
argument_list|)
expr_stmt|;
name|f
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|result
operator|=
literal|2
expr_stmt|;
name|futureInterface
operator|.
name|reportResult
argument_list|(
operator|&
name|result
argument_list|)
expr_stmt|;
name|result
operator|=
literal|3
expr_stmt|;
name|futureInterface
operator|.
name|reportResult
argument_list|(
operator|&
name|result
argument_list|)
expr_stmt|;
name|futureInterface
operator|.
name|reportFinished
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|results
argument_list|()
argument_list|,
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|statePropagation
name|void
name|tst_QFuture
operator|::
name|statePropagation
parameter_list|()
block|{
name|QFuture
argument_list|<
name|void
argument_list|>
name|f1
decl_stmt|;
name|QFuture
argument_list|<
name|void
argument_list|>
name|f2
decl_stmt|;
name|QCOMPARE
argument_list|(
name|f1
operator|.
name|isStarted
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QFutureInterface
argument_list|<
name|void
argument_list|>
name|result
decl_stmt|;
name|result
operator|.
name|reportStarted
argument_list|()
expr_stmt|;
name|f1
operator|=
name|result
operator|.
name|future
argument_list|()
expr_stmt|;
name|f2
operator|=
name|f1
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f2
operator|.
name|isStarted
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|result
operator|.
name|reportCanceled
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f2
operator|.
name|isStarted
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f2
operator|.
name|isCanceled
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QFuture
argument_list|<
name|void
argument_list|>
name|f3
init|=
name|f2
decl_stmt|;
name|QCOMPARE
argument_list|(
name|f3
operator|.
name|isStarted
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f3
operator|.
name|isCanceled
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|result
operator|.
name|reportFinished
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f2
operator|.
name|isStarted
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f2
operator|.
name|isCanceled
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f3
operator|.
name|isStarted
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f3
operator|.
name|isCanceled
argument_list|()
argument_list|,
literal|true
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     Tests that a QFuture can return multiple results. */
end_comment
begin_function
DECL|function|multipleResults
name|void
name|tst_QFuture
operator|::
name|multipleResults
parameter_list|()
block|{
name|IntResult
name|a
decl_stmt|;
name|a
operator|.
name|reportStarted
argument_list|()
expr_stmt|;
name|QFuture
argument_list|<
name|int
argument_list|>
name|f
init|=
name|a
operator|.
name|future
argument_list|()
decl_stmt|;
name|QFuture
argument_list|<
name|int
argument_list|>
name|copy
init|=
name|f
decl_stmt|;
name|int
name|result
decl_stmt|;
name|result
operator|=
literal|1
expr_stmt|;
name|a
operator|.
name|reportResult
argument_list|(
operator|&
name|result
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|resultAt
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|result
operator|=
literal|2
expr_stmt|;
name|a
operator|.
name|reportResult
argument_list|(
operator|&
name|result
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|resultAt
argument_list|(
literal|1
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|result
operator|=
literal|3
expr_stmt|;
name|a
operator|.
name|reportResult
argument_list|(
operator|&
name|result
argument_list|)
expr_stmt|;
name|result
operator|=
literal|4
expr_stmt|;
name|a
operator|.
name|reportFinished
argument_list|(
operator|&
name|result
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|results
argument_list|()
argument_list|,
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|3
operator|<<
literal|4
argument_list|)
expr_stmt|;
comment|// test foreach
name|QList
argument_list|<
name|int
argument_list|>
name|fasit
init|=
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|1
operator|<<
literal|2
operator|<<
literal|3
operator|<<
literal|4
decl_stmt|;
block|{
name|QList
argument_list|<
name|int
argument_list|>
name|results
decl_stmt|;
foreach|foreach
control|(
name|int
name|result
decl|,
name|f
control|)
name|results
operator|.
name|append
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|results
argument_list|,
name|fasit
argument_list|)
expr_stmt|;
block|}
block|{
name|QList
argument_list|<
name|int
argument_list|>
name|results
decl_stmt|;
foreach|foreach
control|(
name|int
name|result
decl|,
name|copy
control|)
name|results
operator|.
name|append
argument_list|(
name|result
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|results
argument_list|,
name|fasit
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|/*     Test out-of-order result reporting using indexes */
end_comment
begin_function
DECL|function|indexedResults
name|void
name|tst_QFuture
operator|::
name|indexedResults
parameter_list|()
block|{
block|{
name|QFutureInterface
argument_list|<
name|QChar
argument_list|>
name|Interface
decl_stmt|;
name|QFuture
argument_list|<
name|QChar
argument_list|>
name|f
decl_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|isStarted
argument_list|()
operator|==
literal|true
argument_list|)
expr_stmt|;
name|Interface
operator|.
name|reportStarted
argument_list|()
expr_stmt|;
name|f
operator|=
name|Interface
operator|.
name|future
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|isStarted
argument_list|()
operator|==
literal|true
argument_list|)
expr_stmt|;
name|QChar
name|result
decl_stmt|;
name|result
operator|=
literal|'B'
expr_stmt|;
name|Interface
operator|.
name|reportResult
argument_list|(
operator|&
name|result
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|resultAt
argument_list|(
literal|1
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|result
operator|=
literal|'A'
expr_stmt|;
name|Interface
operator|.
name|reportResult
argument_list|(
operator|&
name|result
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|resultAt
argument_list|(
literal|0
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|result
operator|=
literal|'C'
expr_stmt|;
name|Interface
operator|.
name|reportResult
argument_list|(
operator|&
name|result
argument_list|)
expr_stmt|;
comment|// no index
name|QCOMPARE
argument_list|(
name|f
operator|.
name|resultAt
argument_list|(
literal|2
argument_list|)
argument_list|,
name|result
argument_list|)
expr_stmt|;
name|Interface
operator|.
name|reportFinished
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|results
argument_list|()
argument_list|,
name|QList
argument_list|<
name|QChar
argument_list|>
argument_list|()
operator|<<
literal|'A'
operator|<<
literal|'B'
operator|<<
literal|'C'
argument_list|)
expr_stmt|;
block|}
block|{
comment|// Test result reporting with a missing result in the middle
name|QFutureInterface
argument_list|<
name|int
argument_list|>
name|Interface
decl_stmt|;
name|Interface
operator|.
name|reportStarted
argument_list|()
expr_stmt|;
name|QFuture
argument_list|<
name|int
argument_list|>
name|f
init|=
name|Interface
operator|.
name|future
argument_list|()
decl_stmt|;
name|int
name|result
decl_stmt|;
name|result
operator|=
literal|0
expr_stmt|;
name|Interface
operator|.
name|reportResult
argument_list|(
operator|&
name|result
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|isResultReadyAt
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|resultAt
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|result
operator|=
literal|3
expr_stmt|;
name|Interface
operator|.
name|reportResult
argument_list|(
operator|&
name|result
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|isResultReadyAt
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|resultAt
argument_list|(
literal|3
argument_list|)
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|result
operator|=
literal|2
expr_stmt|;
name|Interface
operator|.
name|reportResult
argument_list|(
operator|&
name|result
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|f
operator|.
name|isResultReadyAt
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|resultAt
argument_list|(
literal|2
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|result
operator|=
literal|4
expr_stmt|;
name|Interface
operator|.
name|reportResult
argument_list|(
operator|&
name|result
argument_list|)
expr_stmt|;
comment|// no index
name|QVERIFY
argument_list|(
name|f
operator|.
name|isResultReadyAt
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|resultAt
argument_list|(
literal|4
argument_list|)
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|Interface
operator|.
name|reportFinished
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|results
argument_list|()
argument_list|,
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|0
operator|<<
literal|2
operator|<<
literal|3
operator|<<
literal|4
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|progress
name|void
name|tst_QFuture
operator|::
name|progress
parameter_list|()
block|{
name|QFutureInterface
argument_list|<
name|QChar
argument_list|>
name|result
decl_stmt|;
name|QFuture
argument_list|<
name|QChar
argument_list|>
name|f
decl_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|progressValue
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|reportStarted
argument_list|()
expr_stmt|;
name|f
operator|=
name|result
operator|.
name|future
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|progressValue
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|result
operator|.
name|setProgressValue
argument_list|(
literal|50
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|progressValue
argument_list|()
argument_list|,
literal|50
argument_list|)
expr_stmt|;
name|result
operator|.
name|reportFinished
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|progressValue
argument_list|()
argument_list|,
literal|50
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|progressText
name|void
name|tst_QFuture
operator|::
name|progressText
parameter_list|()
block|{
name|QFutureInterface
argument_list|<
name|void
argument_list|>
name|i
decl_stmt|;
name|i
operator|.
name|reportStarted
argument_list|()
expr_stmt|;
name|QFuture
argument_list|<
name|void
argument_list|>
name|f
init|=
name|i
operator|.
name|future
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|progressText
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|""
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|.
name|setProgressValueAndText
argument_list|(
literal|1
argument_list|,
name|QLatin1String
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|progressText
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"foo"
argument_list|)
argument_list|)
expr_stmt|;
name|i
operator|.
name|reportFinished
argument_list|()
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     Test that results reported after finished are ignored. */
end_comment
begin_function
DECL|function|resultsAfterFinished
name|void
name|tst_QFuture
operator|::
name|resultsAfterFinished
parameter_list|()
block|{
block|{
name|IntResult
name|a
decl_stmt|;
name|a
operator|.
name|reportStarted
argument_list|()
expr_stmt|;
name|QFuture
argument_list|<
name|int
argument_list|>
name|f
init|=
name|a
operator|.
name|future
argument_list|()
decl_stmt|;
name|int
name|result
decl_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|resultCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|result
operator|=
literal|1
expr_stmt|;
name|a
operator|.
name|reportResult
argument_list|(
operator|&
name|result
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|resultAt
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|a
operator|.
name|reportFinished
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|resultAt
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|resultCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|result
operator|=
literal|2
expr_stmt|;
name|a
operator|.
name|reportResult
argument_list|(
operator|&
name|result
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|resultCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
comment|// cancel it
block|{
name|IntResult
name|a
decl_stmt|;
name|a
operator|.
name|reportStarted
argument_list|()
expr_stmt|;
name|QFuture
argument_list|<
name|int
argument_list|>
name|f
init|=
name|a
operator|.
name|future
argument_list|()
decl_stmt|;
name|int
name|result
decl_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|resultCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|result
operator|=
literal|1
expr_stmt|;
name|a
operator|.
name|reportResult
argument_list|(
operator|&
name|result
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|resultAt
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|resultCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|a
operator|.
name|reportCanceled
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|resultAt
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|resultCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|result
operator|=
literal|2
expr_stmt|;
name|a
operator|.
name|reportResult
argument_list|(
operator|&
name|result
argument_list|)
expr_stmt|;
name|a
operator|.
name|reportFinished
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|resultsAsList
name|void
name|tst_QFuture
operator|::
name|resultsAsList
parameter_list|()
block|{
name|IntResult
name|a
decl_stmt|;
name|a
operator|.
name|reportStarted
argument_list|()
expr_stmt|;
name|QFuture
argument_list|<
name|int
argument_list|>
name|f
init|=
name|a
operator|.
name|future
argument_list|()
decl_stmt|;
name|int
name|result
decl_stmt|;
name|result
operator|=
literal|1
expr_stmt|;
name|a
operator|.
name|reportResult
argument_list|(
operator|&
name|result
argument_list|)
expr_stmt|;
name|result
operator|=
literal|2
expr_stmt|;
name|a
operator|.
name|reportResult
argument_list|(
operator|&
name|result
argument_list|)
expr_stmt|;
name|a
operator|.
name|reportFinished
argument_list|()
expr_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|results
init|=
name|f
operator|.
name|results
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|results
argument_list|,
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|1
operator|<<
literal|2
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     Test that QFuture<T> can be implicitly converted to T */
end_comment
begin_function
DECL|function|implicitConversions
name|void
name|tst_QFuture
operator|::
name|implicitConversions
parameter_list|()
block|{
name|QFutureInterface
argument_list|<
name|QString
argument_list|>
name|iface
decl_stmt|;
name|iface
operator|.
name|reportStarted
argument_list|()
expr_stmt|;
name|QFuture
argument_list|<
name|QString
argument_list|>
name|f
argument_list|(
operator|&
name|iface
argument_list|)
decl_stmt|;
specifier|const
name|QString
name|input
argument_list|(
literal|"FooBar 2000"
argument_list|)
decl_stmt|;
name|iface
operator|.
name|reportFinished
argument_list|(
operator|&
name|input
argument_list|)
expr_stmt|;
specifier|const
name|QString
name|result
init|=
name|f
decl_stmt|;
name|QCOMPARE
argument_list|(
name|result
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QString
argument_list|(
name|f
argument_list|)
argument_list|,
name|input
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
cast|static_cast
argument_list|<
name|QString
argument_list|>
argument_list|(
name|f
argument_list|)
argument_list|,
name|input
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|iterators
name|void
name|tst_QFuture
operator|::
name|iterators
parameter_list|()
block|{
block|{
name|QFutureInterface
argument_list|<
name|int
argument_list|>
name|e
decl_stmt|;
name|e
operator|.
name|reportStarted
argument_list|()
expr_stmt|;
name|QFuture
argument_list|<
name|int
argument_list|>
name|f
init|=
name|e
operator|.
name|future
argument_list|()
decl_stmt|;
name|int
name|result
decl_stmt|;
name|result
operator|=
literal|1
expr_stmt|;
name|e
operator|.
name|reportResult
argument_list|(
operator|&
name|result
argument_list|)
expr_stmt|;
name|result
operator|=
literal|2
expr_stmt|;
name|e
operator|.
name|reportResult
argument_list|(
operator|&
name|result
argument_list|)
expr_stmt|;
name|result
operator|=
literal|3
expr_stmt|;
name|e
operator|.
name|reportResult
argument_list|(
operator|&
name|result
argument_list|)
expr_stmt|;
name|e
operator|.
name|reportFinished
argument_list|()
expr_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|results
decl_stmt|;
name|QFutureIterator
argument_list|<
name|int
argument_list|>
name|i
argument_list|(
name|f
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|results
operator|.
name|append
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|results
argument_list|,
name|f
operator|.
name|results
argument_list|()
argument_list|)
expr_stmt|;
name|QFuture
argument_list|<
name|int
argument_list|>
operator|::
name|const_iterator
name|i1
init|=
name|f
operator|.
name|begin
argument_list|()
decl_stmt|,
name|i2
init|=
name|i1
operator|+
literal|1
decl_stmt|;
name|QFuture
argument_list|<
name|int
argument_list|>
operator|::
name|const_iterator
name|c1
init|=
name|i1
decl_stmt|,
name|c2
init|=
name|c1
operator|+
literal|1
decl_stmt|;
name|QVERIFY
argument_list|(
name|i1
operator|==
name|i1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i1
operator|==
name|c1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c1
operator|==
name|i1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c1
operator|==
name|c1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i2
operator|==
name|i2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i2
operator|==
name|c2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c2
operator|==
name|i2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c2
operator|==
name|c2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i1
operator|!=
name|i2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i1
operator|!=
name|c2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c1
operator|!=
name|i2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c1
operator|!=
name|c2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i2
operator|!=
name|i1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i2
operator|!=
name|c1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c2
operator|!=
name|i1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c2
operator|!=
name|c1
argument_list|)
expr_stmt|;
name|int
name|x1
init|=
operator|*
name|i1
decl_stmt|;
name|Q_UNUSED
argument_list|(
name|x1
argument_list|)
expr_stmt|;
name|int
name|x2
init|=
operator|*
name|i2
decl_stmt|;
name|Q_UNUSED
argument_list|(
name|x2
argument_list|)
expr_stmt|;
name|int
name|y1
init|=
operator|*
name|c1
decl_stmt|;
name|Q_UNUSED
argument_list|(
name|y1
argument_list|)
expr_stmt|;
name|int
name|y2
init|=
operator|*
name|c2
decl_stmt|;
name|Q_UNUSED
argument_list|(
name|y2
argument_list|)
expr_stmt|;
block|}
block|{
name|QFutureInterface
argument_list|<
name|QString
argument_list|>
name|e
decl_stmt|;
name|e
operator|.
name|reportStarted
argument_list|()
expr_stmt|;
name|QFuture
argument_list|<
name|QString
argument_list|>
name|f
init|=
name|e
operator|.
name|future
argument_list|()
decl_stmt|;
name|e
operator|.
name|reportResult
argument_list|(
name|QString
argument_list|(
literal|"one"
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|reportResult
argument_list|(
name|QString
argument_list|(
literal|"two"
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|reportResult
argument_list|(
name|QString
argument_list|(
literal|"three"
argument_list|)
argument_list|)
expr_stmt|;
name|e
operator|.
name|reportFinished
argument_list|()
expr_stmt|;
name|QList
argument_list|<
name|QString
argument_list|>
name|results
decl_stmt|;
name|QFutureIterator
argument_list|<
name|QString
argument_list|>
name|i
argument_list|(
name|f
argument_list|)
decl_stmt|;
while|while
condition|(
name|i
operator|.
name|hasNext
argument_list|()
condition|)
block|{
name|results
operator|.
name|append
argument_list|(
name|i
operator|.
name|next
argument_list|()
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|results
argument_list|,
name|f
operator|.
name|results
argument_list|()
argument_list|)
expr_stmt|;
name|QFuture
argument_list|<
name|QString
argument_list|>
operator|::
name|const_iterator
name|i1
init|=
name|f
operator|.
name|begin
argument_list|()
decl_stmt|,
name|i2
init|=
name|i1
operator|+
literal|1
decl_stmt|;
name|QFuture
argument_list|<
name|QString
argument_list|>
operator|::
name|const_iterator
name|c1
init|=
name|i1
decl_stmt|,
name|c2
init|=
name|c1
operator|+
literal|1
decl_stmt|;
name|QVERIFY
argument_list|(
name|i1
operator|==
name|i1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i1
operator|==
name|c1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c1
operator|==
name|i1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c1
operator|==
name|c1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i2
operator|==
name|i2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i2
operator|==
name|c2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c2
operator|==
name|i2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c2
operator|==
name|c2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i1
operator|!=
name|i2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i1
operator|!=
name|c2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c1
operator|!=
name|i2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c1
operator|!=
name|c2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i2
operator|!=
name|i1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i2
operator|!=
name|c1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c2
operator|!=
name|i1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|c2
operator|!=
name|c1
argument_list|)
expr_stmt|;
name|QString
name|x1
init|=
operator|*
name|i1
decl_stmt|;
name|QString
name|x2
init|=
operator|*
name|i2
decl_stmt|;
name|QString
name|y1
init|=
operator|*
name|c1
decl_stmt|;
name|QString
name|y2
init|=
operator|*
name|c2
decl_stmt|;
name|QCOMPARE
argument_list|(
name|x1
argument_list|,
name|y1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|x2
argument_list|,
name|y2
argument_list|)
expr_stmt|;
name|int
name|i1Size
init|=
name|i1
operator|->
name|size
argument_list|()
decl_stmt|;
name|int
name|i2Size
init|=
name|i2
operator|->
name|size
argument_list|()
decl_stmt|;
name|int
name|c1Size
init|=
name|c1
operator|->
name|size
argument_list|()
decl_stmt|;
name|int
name|c2Size
init|=
name|c2
operator|->
name|size
argument_list|()
decl_stmt|;
name|QCOMPARE
argument_list|(
name|i1Size
argument_list|,
name|c1Size
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|i2Size
argument_list|,
name|c2Size
argument_list|)
expr_stmt|;
block|}
block|{
specifier|const
name|int
name|resultCount
init|=
literal|20
decl_stmt|;
name|QFutureInterface
argument_list|<
name|int
argument_list|>
name|e
decl_stmt|;
name|e
operator|.
name|reportStarted
argument_list|()
expr_stmt|;
name|QFuture
argument_list|<
name|int
argument_list|>
name|f
init|=
name|e
operator|.
name|future
argument_list|()
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resultCount
condition|;
operator|++
name|i
control|)
block|{
name|e
operator|.
name|reportResult
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
name|e
operator|.
name|reportFinished
argument_list|()
expr_stmt|;
block|{
name|QFutureIterator
argument_list|<
name|int
argument_list|>
name|it
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|QFutureIterator
argument_list|<
name|int
argument_list|>
name|it2
argument_list|(
name|it
argument_list|)
decl_stmt|;
block|}
block|{
name|QFutureIterator
argument_list|<
name|int
argument_list|>
name|it
argument_list|(
name|f
argument_list|)
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|resultCount
operator|-
literal|1
condition|;
operator|++
name|i
control|)
block|{
name|QVERIFY
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|it
operator|.
name|peekNext
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|,
name|i
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|it
operator|.
name|peekNext
argument_list|()
argument_list|,
name|resultCount
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|it
operator|.
name|next
argument_list|()
argument_list|,
name|resultCount
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
block|}
block|{
name|QFutureIterator
argument_list|<
name|int
argument_list|>
name|it
argument_list|(
name|f
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
name|it
operator|.
name|toBack
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
name|it
operator|.
name|toFront
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|it
operator|.
name|hasNext
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
block|}
end_function
begin_class
DECL|class|SignalSlotObject
class|class
name|SignalSlotObject
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|SignalSlotObject
name|SignalSlotObject
parameter_list|()
member_init_list|:
name|finishedCalled
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|canceledCalled
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|rangeBegin
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|rangeEnd
argument_list|(
literal|0
argument_list|)
block|{ }
public|public
name|slots
public|:
DECL|function|finished
name|void
name|finished
parameter_list|()
block|{
name|finishedCalled
operator|=
literal|true
expr_stmt|;
block|}
DECL|function|canceled
name|void
name|canceled
parameter_list|()
block|{
name|canceledCalled
operator|=
literal|true
expr_stmt|;
block|}
DECL|function|resultReady
name|void
name|resultReady
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|results
operator|.
name|insert
argument_list|(
name|index
argument_list|)
expr_stmt|;
block|}
DECL|function|progressRange
name|void
name|progressRange
parameter_list|(
name|int
name|begin
parameter_list|,
name|int
name|end
parameter_list|)
block|{
name|rangeBegin
operator|=
name|begin
expr_stmt|;
name|rangeEnd
operator|=
name|end
expr_stmt|;
block|}
DECL|function|progress
name|void
name|progress
parameter_list|(
name|int
name|progress
parameter_list|)
block|{
name|reportedProgress
operator|.
name|insert
argument_list|(
name|progress
argument_list|)
expr_stmt|;
block|}
public|public:
DECL|member|finishedCalled
name|bool
name|finishedCalled
decl_stmt|;
DECL|member|canceledCalled
name|bool
name|canceledCalled
decl_stmt|;
DECL|member|results
name|QSet
argument_list|<
name|int
argument_list|>
name|results
decl_stmt|;
DECL|member|rangeBegin
name|int
name|rangeBegin
decl_stmt|;
DECL|member|rangeEnd
name|int
name|rangeEnd
decl_stmt|;
DECL|member|reportedProgress
name|QSet
argument_list|<
name|int
argument_list|>
name|reportedProgress
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|pause
name|void
name|tst_QFuture
operator|::
name|pause
parameter_list|()
block|{
name|QFutureInterface
argument_list|<
name|void
argument_list|>
name|Interface
decl_stmt|;
name|Interface
operator|.
name|reportStarted
argument_list|()
expr_stmt|;
name|QFuture
argument_list|<
name|void
argument_list|>
name|f
init|=
name|Interface
operator|.
name|future
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|Interface
operator|.
name|isPaused
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|pause
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|Interface
operator|.
name|isPaused
argument_list|()
operator|==
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|resume
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|Interface
operator|.
name|isPaused
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
name|f
operator|.
name|togglePaused
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|Interface
operator|.
name|isPaused
argument_list|()
operator|==
literal|true
argument_list|)
expr_stmt|;
name|f
operator|.
name|togglePaused
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|Interface
operator|.
name|isPaused
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
name|Interface
operator|.
name|reportFinished
argument_list|()
expr_stmt|;
block|}
end_function
begin_decl_stmt
DECL|variable|resultCount
specifier|const
name|int
name|resultCount
init|=
literal|1000
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|ResultObject
class|class
name|ResultObject
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
DECL|function|resultReady
name|void
name|resultReady
parameter_list|(
name|int
parameter_list|)
block|{      }
public|public:
block|}
class|;
end_class
begin_comment
comment|// Test that that the isPaused() on future result interface returns true
end_comment
begin_comment
comment|// if we report a lot of results that are not handled.
end_comment
begin_function
DECL|function|throttling
name|void
name|tst_QFuture
operator|::
name|throttling
parameter_list|()
block|{
block|{
name|QFutureInterface
argument_list|<
name|void
argument_list|>
name|i
decl_stmt|;
name|i
operator|.
name|reportStarted
argument_list|()
expr_stmt|;
name|QFuture
argument_list|<
name|void
argument_list|>
name|f
init|=
name|i
operator|.
name|future
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|.
name|isThrottled
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
name|i
operator|.
name|setThrottled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|.
name|isThrottled
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|.
name|setThrottled
argument_list|(
literal|false
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|.
name|isThrottled
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
name|i
operator|.
name|setThrottled
argument_list|(
literal|true
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|i
operator|.
name|isThrottled
argument_list|()
argument_list|)
expr_stmt|;
name|i
operator|.
name|reportFinished
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|voidConversions
name|void
name|tst_QFuture
operator|::
name|voidConversions
parameter_list|()
block|{
name|QFutureInterface
argument_list|<
name|int
argument_list|>
name|iface
decl_stmt|;
name|iface
operator|.
name|reportStarted
argument_list|()
expr_stmt|;
name|QFuture
argument_list|<
name|int
argument_list|>
name|intFuture
argument_list|(
operator|&
name|iface
argument_list|)
decl_stmt|;
name|int
name|value
init|=
literal|10
decl_stmt|;
name|iface
operator|.
name|reportFinished
argument_list|(
operator|&
name|value
argument_list|)
expr_stmt|;
name|QFuture
argument_list|<
name|void
argument_list|>
name|voidFuture
argument_list|(
name|intFuture
argument_list|)
decl_stmt|;
name|voidFuture
operator|=
name|intFuture
expr_stmt|;
name|QVERIFY
argument_list|(
name|voidFuture
operator|==
name|intFuture
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_EXCEPTIONS
end_ifndef
begin_function
DECL|function|createExceptionFuture
name|QFuture
argument_list|<
name|void
argument_list|>
name|createExceptionFuture
parameter_list|()
block|{
name|QFutureInterface
argument_list|<
name|void
argument_list|>
name|i
decl_stmt|;
name|i
operator|.
name|reportStarted
argument_list|()
expr_stmt|;
name|QFuture
argument_list|<
name|void
argument_list|>
name|f
init|=
name|i
operator|.
name|future
argument_list|()
decl_stmt|;
name|Exception
name|e
decl_stmt|;
name|i
operator|.
name|reportException
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|i
operator|.
name|reportFinished
argument_list|()
expr_stmt|;
return|return
name|f
return|;
block|}
end_function
begin_function
DECL|function|createExceptionResultFuture
name|QFuture
argument_list|<
name|int
argument_list|>
name|createExceptionResultFuture
parameter_list|()
block|{
name|QFutureInterface
argument_list|<
name|int
argument_list|>
name|i
decl_stmt|;
name|i
operator|.
name|reportStarted
argument_list|()
expr_stmt|;
name|QFuture
argument_list|<
name|int
argument_list|>
name|f
init|=
name|i
operator|.
name|future
argument_list|()
decl_stmt|;
name|int
name|r
init|=
literal|0
decl_stmt|;
name|i
operator|.
name|reportResult
argument_list|(
name|r
argument_list|)
expr_stmt|;
name|Exception
name|e
decl_stmt|;
name|i
operator|.
name|reportException
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|i
operator|.
name|reportFinished
argument_list|()
expr_stmt|;
return|return
name|f
return|;
block|}
end_function
begin_class
DECL|class|DerivedException
class|class
name|DerivedException
super|:
specifier|public
name|Exception
block|{
public|public:
DECL|function|raise
name|void
name|raise
parameter_list|()
specifier|const
block|{
throw|throw
operator|*
name|this
throw|;
block|}
DECL|function|clone
name|Exception
modifier|*
name|clone
parameter_list|()
specifier|const
block|{
return|return
operator|new
name|DerivedException
argument_list|(
operator|*
name|this
argument_list|)
return|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|createDerivedExceptionFuture
name|QFuture
argument_list|<
name|void
argument_list|>
name|createDerivedExceptionFuture
parameter_list|()
block|{
name|QFutureInterface
argument_list|<
name|void
argument_list|>
name|i
decl_stmt|;
name|i
operator|.
name|reportStarted
argument_list|()
expr_stmt|;
name|QFuture
argument_list|<
name|void
argument_list|>
name|f
init|=
name|i
operator|.
name|future
argument_list|()
decl_stmt|;
name|DerivedException
name|e
decl_stmt|;
name|i
operator|.
name|reportException
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|i
operator|.
name|reportFinished
argument_list|()
expr_stmt|;
return|return
name|f
return|;
block|}
end_function
begin_function
DECL|function|exceptions
name|void
name|tst_QFuture
operator|::
name|exceptions
parameter_list|()
block|{
comment|// test throwing from waitForFinished
block|{
name|QFuture
argument_list|<
name|void
argument_list|>
name|f
init|=
name|createExceptionFuture
argument_list|()
decl_stmt|;
name|bool
name|caught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|f
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
modifier|&
parameter_list|)
block|{
name|caught
operator|=
literal|true
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
comment|// test result()
block|{
name|QFuture
argument_list|<
name|int
argument_list|>
name|f
init|=
name|createExceptionResultFuture
argument_list|()
decl_stmt|;
name|bool
name|caught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|f
operator|.
name|result
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
modifier|&
parameter_list|)
block|{
name|caught
operator|=
literal|true
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
comment|// test result() and destroy
block|{
name|bool
name|caught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|createExceptionResultFuture
argument_list|()
operator|.
name|result
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
modifier|&
parameter_list|)
block|{
name|caught
operator|=
literal|true
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
comment|// test results()
block|{
name|QFuture
argument_list|<
name|int
argument_list|>
name|f
init|=
name|createExceptionResultFuture
argument_list|()
decl_stmt|;
name|bool
name|caught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|f
operator|.
name|results
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
modifier|&
parameter_list|)
block|{
name|caught
operator|=
literal|true
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
comment|// test foreach
block|{
name|QFuture
argument_list|<
name|int
argument_list|>
name|f
init|=
name|createExceptionResultFuture
argument_list|()
decl_stmt|;
name|bool
name|caught
init|=
literal|false
decl_stmt|;
try|try
block|{
foreach|foreach
control|(
name|int
name|e
decl|,
name|f
operator|.
name|results
argument_list|()
control|)
block|{
name|Q_UNUSED
argument_list|(
name|e
argument_list|)
expr_stmt|;
name|QFAIL
argument_list|(
literal|"did not get exception"
argument_list|)
expr_stmt|;
block|}
block|}
catch|catch
parameter_list|(
name|Exception
modifier|&
parameter_list|)
block|{
name|caught
operator|=
literal|true
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
comment|// catch derived exceptions
block|{
name|bool
name|caught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|createDerivedExceptionFuture
argument_list|()
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
modifier|&
parameter_list|)
block|{
name|caught
operator|=
literal|true
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
block|{
name|bool
name|caught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|createDerivedExceptionFuture
argument_list|()
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|DerivedException
modifier|&
parameter_list|)
block|{
name|caught
operator|=
literal|true
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|exceptions_QTBUG18149
name|void
name|tst_QFuture
operator|::
name|exceptions_QTBUG18149
parameter_list|()
block|{
class|class
name|MyClass
block|{
public|public:
name|~
name|MyClass
parameter_list|()
block|{
name|QFuture
argument_list|<
name|void
argument_list|>
name|f
init|=
name|createExceptionFuture
argument_list|()
decl_stmt|;
name|bool
name|caught
init|=
literal|false
decl_stmt|;
try|try
block|{
name|f
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
block|}
catch|catch
parameter_list|(
name|Exception
modifier|&
parameter_list|)
block|{
name|caught
operator|=
literal|true
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|caught
argument_list|)
expr_stmt|;
block|}
block|}
class|;
try|try
block|{
name|MyClass
name|m
decl_stmt|;
name|Q_UNUSED
argument_list|(
name|m
argument_list|)
expr_stmt|;
throw|throw
literal|0
throw|;
block|}
catch|catch
parameter_list|(
name|int
parameter_list|)
block|{}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_EXCEPTIONS
end_comment
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QFuture
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qfuture.moc"
end_include
end_unit
