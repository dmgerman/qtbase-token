begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: Nokia Corporation (qt-info@nokia.com) ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qdatetime.h>
end_include
begin_include
include|#
directive|include
file|<qthreadpool.h>
end_include
begin_include
include|#
directive|include
file|<qstring.h>
end_include
begin_include
include|#
directive|include
file|<qmutex.h>
end_include
begin_typedef
DECL|typedef|FunctionPointer
typedef|typedef
name|void
function_decl|(
modifier|*
name|FunctionPointer
function_decl|)
parameter_list|()
function_decl|;
end_typedef
begin_class
DECL|class|FunctionPointerTask
class|class
name|FunctionPointerTask
super|:
specifier|public
name|QRunnable
block|{
public|public:
DECL|function|FunctionPointerTask
name|FunctionPointerTask
parameter_list|(
name|FunctionPointer
name|function
parameter_list|)
member_init_list|:
name|function
argument_list|(
name|function
argument_list|)
block|{}
DECL|function|run
name|void
name|run
parameter_list|()
block|{
name|function
argument_list|()
expr_stmt|;
block|}
private|private:
DECL|member|function
name|FunctionPointer
name|function
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|createTask
name|QRunnable
modifier|*
name|createTask
parameter_list|(
name|FunctionPointer
name|pointer
parameter_list|)
block|{
return|return
operator|new
name|FunctionPointerTask
argument_list|(
name|pointer
argument_list|)
return|;
block|}
end_function
begin_class
DECL|class|tst_QThreadPool
class|class
name|tst_QThreadPool
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|runFunction
parameter_list|()
function_decl|;
name|void
name|createThreadRunFunction
parameter_list|()
function_decl|;
name|void
name|runMultiple
parameter_list|()
function_decl|;
name|void
name|waitcomplete
parameter_list|()
function_decl|;
name|void
name|runTask
parameter_list|()
function_decl|;
name|void
name|singleton
parameter_list|()
function_decl|;
name|void
name|destruction
parameter_list|()
function_decl|;
name|void
name|threadRecycling
parameter_list|()
function_decl|;
name|void
name|expiryTimeout
parameter_list|()
function_decl|;
ifndef|#
directive|ifndef
name|QT_NO_EXCEPTIONS
name|void
name|exceptions
parameter_list|()
function_decl|;
endif|#
directive|endif
name|void
name|setMaxThreadCount_data
parameter_list|()
function_decl|;
name|void
name|setMaxThreadCount
parameter_list|()
function_decl|;
name|void
name|setMaxThreadCountStartsAndStopsThreads
parameter_list|()
function_decl|;
name|void
name|reserveThread_data
parameter_list|()
function_decl|;
name|void
name|reserveThread
parameter_list|()
function_decl|;
name|void
name|releaseThread_data
parameter_list|()
function_decl|;
name|void
name|releaseThread
parameter_list|()
function_decl|;
name|void
name|start
parameter_list|()
function_decl|;
name|void
name|tryStart
parameter_list|()
function_decl|;
name|void
name|tryStartPeakThreadCount
parameter_list|()
function_decl|;
name|void
name|tryStartCount
parameter_list|()
function_decl|;
name|void
name|waitForDone
parameter_list|()
function_decl|;
name|void
name|waitForDoneTimeout
parameter_list|()
function_decl|;
name|void
name|destroyingWaitsForTasksToFinish
parameter_list|()
function_decl|;
name|void
name|stressTest
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_decl_stmt
DECL|variable|testFunctionCount
name|int
name|testFunctionCount
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|sleepTestFunction
name|void
name|sleepTestFunction
parameter_list|()
block|{
name|QTest
operator|::
name|qSleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
operator|++
name|testFunctionCount
expr_stmt|;
block|}
end_function
begin_function
DECL|function|emptyFunct
name|void
name|emptyFunct
parameter_list|()
block|{  }
end_function
begin_function
DECL|function|noSleepTestFunction
name|void
name|noSleepTestFunction
parameter_list|()
block|{
operator|++
name|testFunctionCount
expr_stmt|;
block|}
end_function
begin_function
DECL|function|sleepTestFunctionMutex
name|void
name|sleepTestFunctionMutex
parameter_list|()
block|{
specifier|static
name|QMutex
name|testMutex
decl_stmt|;
name|QTest
operator|::
name|qSleep
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|testMutex
operator|.
name|lock
argument_list|()
expr_stmt|;
operator|++
name|testFunctionCount
expr_stmt|;
name|testMutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|noSleepTestFunctionMutex
name|void
name|noSleepTestFunctionMutex
parameter_list|()
block|{
specifier|static
name|QMutex
name|testMutex
decl_stmt|;
name|testMutex
operator|.
name|lock
argument_list|()
expr_stmt|;
operator|++
name|testFunctionCount
expr_stmt|;
name|testMutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|runFunction
name|void
name|tst_QThreadPool
operator|::
name|runFunction
parameter_list|()
block|{
block|{
name|QThreadPool
name|manager
decl_stmt|;
name|testFunctionCount
operator|=
literal|0
expr_stmt|;
name|manager
operator|.
name|start
argument_list|(
name|createTask
argument_list|(
name|noSleepTestFunction
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|testFunctionCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|createThreadRunFunction
name|void
name|tst_QThreadPool
operator|::
name|createThreadRunFunction
parameter_list|()
block|{
block|{
name|QThreadPool
name|manager
decl_stmt|;
name|testFunctionCount
operator|=
literal|0
expr_stmt|;
name|manager
operator|.
name|start
argument_list|(
name|createTask
argument_list|(
name|noSleepTestFunction
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|testFunctionCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|runMultiple
name|void
name|tst_QThreadPool
operator|::
name|runMultiple
parameter_list|()
block|{
specifier|const
name|int
name|runs
init|=
literal|10
decl_stmt|;
block|{
name|QThreadPool
name|manager
decl_stmt|;
name|testFunctionCount
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|runs
condition|;
operator|++
name|i
control|)
block|{
name|manager
operator|.
name|start
argument_list|(
name|createTask
argument_list|(
name|sleepTestFunctionMutex
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|QCOMPARE
argument_list|(
name|testFunctionCount
argument_list|,
name|runs
argument_list|)
expr_stmt|;
block|{
name|QThreadPool
name|manager
decl_stmt|;
name|testFunctionCount
operator|=
literal|0
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|runs
condition|;
operator|++
name|i
control|)
block|{
name|manager
operator|.
name|start
argument_list|(
name|createTask
argument_list|(
name|noSleepTestFunctionMutex
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
name|QCOMPARE
argument_list|(
name|testFunctionCount
argument_list|,
name|runs
argument_list|)
expr_stmt|;
block|{
name|QThreadPool
name|manager
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|500
condition|;
operator|++
name|i
control|)
name|manager
operator|.
name|start
argument_list|(
name|createTask
argument_list|(
name|emptyFunct
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|waitcomplete
name|void
name|tst_QThreadPool
operator|::
name|waitcomplete
parameter_list|()
block|{
name|testFunctionCount
operator|=
literal|0
expr_stmt|;
specifier|const
name|int
name|runs
init|=
literal|500
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|500
condition|;
operator|++
name|i
control|)
block|{
name|QThreadPool
name|pool
decl_stmt|;
name|pool
operator|.
name|start
argument_list|(
name|createTask
argument_list|(
name|noSleepTestFunction
argument_list|)
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|testFunctionCount
argument_list|,
name|runs
argument_list|)
expr_stmt|;
block|}
end_function
begin_decl_stmt
DECL|variable|ran
specifier|volatile
name|bool
name|ran
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|TestTask
class|class
name|TestTask
super|:
specifier|public
name|QRunnable
block|{
public|public:
DECL|function|run
name|void
name|run
parameter_list|()
block|{
name|ran
operator|=
literal|true
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|runTask
name|void
name|tst_QThreadPool
operator|::
name|runTask
parameter_list|()
block|{
name|QThreadPool
name|manager
decl_stmt|;
name|ran
operator|=
literal|false
expr_stmt|;
name|manager
operator|.
name|start
argument_list|(
operator|new
name|TestTask
argument_list|()
argument_list|)
expr_stmt|;
comment|// Hang if task is not runned.
while|while
condition|(
name|ran
operator|==
literal|false
condition|)
name|QTest
operator|::
name|qSleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// no busy loop - this doesn't work with FIFO schedulers
block|}
end_function
begin_comment
comment|/*     Test running via QThreadPool::globalInstance() */
end_comment
begin_function
DECL|function|singleton
name|void
name|tst_QThreadPool
operator|::
name|singleton
parameter_list|()
block|{
name|ran
operator|=
literal|false
expr_stmt|;
name|QThreadPool
operator|::
name|globalInstance
argument_list|()
operator|->
name|start
argument_list|(
operator|new
name|TestTask
argument_list|()
argument_list|)
expr_stmt|;
while|while
condition|(
name|ran
operator|==
literal|false
condition|)
name|QTest
operator|::
name|qSleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// no busy loop - this doesn't work with FIFO schedulers
block|}
end_function
begin_decl_stmt
DECL|variable|value
name|int
modifier|*
name|value
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|IntAccessor
class|class
name|IntAccessor
super|:
specifier|public
name|QRunnable
block|{
public|public:
DECL|function|run
name|void
name|run
parameter_list|()
block|{
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|100
condition|;
operator|++
name|i
control|)
block|{
operator|++
operator|(
operator|*
name|value
operator|)
expr_stmt|;
name|QTest
operator|::
name|qSleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
block|}
class|;
end_class
begin_comment
comment|/*     Test that the ThreadManager destructor waits until     all threads have completed. */
end_comment
begin_function
DECL|function|destruction
name|void
name|tst_QThreadPool
operator|::
name|destruction
parameter_list|()
block|{
name|value
operator|=
operator|new
name|int
expr_stmt|;
name|QThreadPool
modifier|*
name|threadManager
init|=
operator|new
name|QThreadPool
argument_list|()
decl_stmt|;
name|threadManager
operator|->
name|start
argument_list|(
operator|new
name|IntAccessor
argument_list|()
argument_list|)
expr_stmt|;
name|threadManager
operator|->
name|start
argument_list|(
operator|new
name|IntAccessor
argument_list|()
argument_list|)
expr_stmt|;
operator|delete
name|threadManager
expr_stmt|;
operator|delete
name|value
expr_stmt|;
name|value
operator|=
literal|0
expr_stmt|;
block|}
end_function
begin_decl_stmt
DECL|variable|threadRecyclingSemaphore
name|QSemaphore
name|threadRecyclingSemaphore
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|recycledThread
name|QThread
modifier|*
name|recycledThread
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|ThreadRecorderTask
class|class
name|ThreadRecorderTask
super|:
specifier|public
name|QRunnable
block|{
public|public:
DECL|function|run
name|void
name|run
parameter_list|()
block|{
name|recycledThread
operator|=
name|QThread
operator|::
name|currentThread
argument_list|()
expr_stmt|;
name|threadRecyclingSemaphore
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_comment
comment|/*     Test that the thread pool really reuses threads. */
end_comment
begin_function
DECL|function|threadRecycling
name|void
name|tst_QThreadPool
operator|::
name|threadRecycling
parameter_list|()
block|{
name|QThreadPool
name|threadPool
decl_stmt|;
name|threadPool
operator|.
name|start
argument_list|(
operator|new
name|ThreadRecorderTask
argument_list|()
argument_list|)
expr_stmt|;
name|threadRecyclingSemaphore
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|QThread
modifier|*
name|thread1
init|=
name|recycledThread
decl_stmt|;
name|QTest
operator|::
name|qSleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|threadPool
operator|.
name|start
argument_list|(
operator|new
name|ThreadRecorderTask
argument_list|()
argument_list|)
expr_stmt|;
name|threadRecyclingSemaphore
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|QThread
modifier|*
name|thread2
init|=
name|recycledThread
decl_stmt|;
name|QCOMPARE
argument_list|(
name|thread1
argument_list|,
name|thread2
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qSleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
name|threadPool
operator|.
name|start
argument_list|(
operator|new
name|ThreadRecorderTask
argument_list|()
argument_list|)
expr_stmt|;
name|threadRecyclingSemaphore
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|QThread
modifier|*
name|thread3
init|=
name|recycledThread
decl_stmt|;
name|QCOMPARE
argument_list|(
name|thread2
argument_list|,
name|thread3
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|ExpiryTimeoutTask
class|class
name|ExpiryTimeoutTask
super|:
specifier|public
name|QRunnable
block|{
public|public:
DECL|member|thread
name|QThread
modifier|*
name|thread
decl_stmt|;
DECL|member|runCount
name|int
name|runCount
decl_stmt|;
DECL|member|semaphore
name|QSemaphore
name|semaphore
decl_stmt|;
DECL|function|ExpiryTimeoutTask
name|ExpiryTimeoutTask
parameter_list|()
member_init_list|:
name|thread
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|runCount
argument_list|(
literal|0
argument_list|)
block|{
name|setAutoDelete
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
DECL|function|run
name|void
name|run
parameter_list|()
block|{
name|thread
operator|=
name|QThread
operator|::
name|currentThread
argument_list|()
expr_stmt|;
operator|++
name|runCount
expr_stmt|;
name|semaphore
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|expiryTimeout
name|void
name|tst_QThreadPool
operator|::
name|expiryTimeout
parameter_list|()
block|{
name|ExpiryTimeoutTask
name|task
decl_stmt|;
name|QThreadPool
name|threadPool
decl_stmt|;
name|threadPool
operator|.
name|setMaxThreadCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|int
name|expiryTimeout
init|=
name|threadPool
operator|.
name|expiryTimeout
argument_list|()
decl_stmt|;
name|threadPool
operator|.
name|setExpiryTimeout
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|threadPool
operator|.
name|expiryTimeout
argument_list|()
argument_list|,
literal|1000
argument_list|)
expr_stmt|;
comment|// run the task
name|threadPool
operator|.
name|start
argument_list|(
operator|&
name|task
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|task
operator|.
name|semaphore
operator|.
name|tryAcquire
argument_list|(
literal|1
argument_list|,
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|task
operator|.
name|runCount
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|task
operator|.
name|thread
operator|->
name|wait
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
comment|// thread should expire
name|QThread
modifier|*
name|firstThread
init|=
name|task
operator|.
name|thread
decl_stmt|;
name|QVERIFY
argument_list|(
name|task
operator|.
name|thread
operator|->
name|wait
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
comment|// run task again, thread should be restarted
name|threadPool
operator|.
name|start
argument_list|(
operator|&
name|task
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|task
operator|.
name|semaphore
operator|.
name|tryAcquire
argument_list|(
literal|1
argument_list|,
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|task
operator|.
name|runCount
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|task
operator|.
name|thread
operator|->
name|wait
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
comment|// thread should expire again
name|QVERIFY
argument_list|(
name|task
operator|.
name|thread
operator|->
name|wait
argument_list|(
literal|10000
argument_list|)
argument_list|)
expr_stmt|;
comment|// thread pool should have reused the expired thread (instead of
comment|// starting a new one)
name|QCOMPARE
argument_list|(
name|firstThread
argument_list|,
name|task
operator|.
name|thread
argument_list|)
expr_stmt|;
name|threadPool
operator|.
name|setExpiryTimeout
argument_list|(
name|expiryTimeout
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|threadPool
operator|.
name|expiryTimeout
argument_list|()
argument_list|,
name|expiryTimeout
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_EXCEPTIONS
end_ifndef
begin_class
DECL|class|ExceptionTask
class|class
name|ExceptionTask
super|:
specifier|public
name|QRunnable
block|{
public|public:
DECL|function|run
name|void
name|run
parameter_list|()
block|{
throw|throw
operator|new
name|int
throw|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|exceptions
name|void
name|tst_QThreadPool
operator|::
name|exceptions
parameter_list|()
block|{
name|ExceptionTask
name|task
decl_stmt|;
block|{
name|QThreadPool
name|threadPool
decl_stmt|;
comment|//  Uncomment this for a nice crash.
comment|//        threadPool.start(&task);
block|}
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|setMaxThreadCount_data
name|void
name|tst_QThreadPool
operator|::
name|setMaxThreadCount_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|int
argument_list|>
argument_list|(
literal|"limit"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|""
argument_list|)
operator|<<
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|""
argument_list|)
operator|<<
operator|-
literal|1
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|""
argument_list|)
operator|<<
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|""
argument_list|)
operator|<<
operator|-
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|""
argument_list|)
operator|<<
literal|4
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|""
argument_list|)
operator|<<
operator|-
literal|4
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|""
argument_list|)
operator|<<
literal|0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|""
argument_list|)
operator|<<
literal|12345
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|""
argument_list|)
operator|<<
operator|-
literal|6789
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|""
argument_list|)
operator|<<
literal|42
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|""
argument_list|)
operator|<<
operator|-
literal|666
expr_stmt|;
block|}
end_function
begin_function
DECL|function|setMaxThreadCount
name|void
name|tst_QThreadPool
operator|::
name|setMaxThreadCount
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|limit
argument_list|)
expr_stmt|;
name|QThreadPool
modifier|*
name|threadPool
init|=
name|QThreadPool
operator|::
name|globalInstance
argument_list|()
decl_stmt|;
name|int
name|savedLimit
init|=
name|threadPool
operator|->
name|maxThreadCount
argument_list|()
decl_stmt|;
comment|// maxThreadCount() should always return the previous argument to
comment|// setMaxThreadCount(), regardless of input
name|threadPool
operator|->
name|setMaxThreadCount
argument_list|(
name|limit
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|threadPool
operator|->
name|maxThreadCount
argument_list|()
argument_list|,
name|limit
argument_list|)
expr_stmt|;
comment|// the value returned from maxThreadCount() should always be valid input for setMaxThreadCount()
name|threadPool
operator|->
name|setMaxThreadCount
argument_list|(
name|savedLimit
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|threadPool
operator|->
name|maxThreadCount
argument_list|()
argument_list|,
name|savedLimit
argument_list|)
expr_stmt|;
comment|// setting the limit on children should have no effect on the parent
block|{
name|QThreadPool
name|threadPool2
argument_list|(
name|threadPool
argument_list|)
decl_stmt|;
name|savedLimit
operator|=
name|threadPool2
operator|.
name|maxThreadCount
argument_list|()
expr_stmt|;
comment|// maxThreadCount() should always return the previous argument to
comment|// setMaxThreadCount(), regardless of input
name|threadPool2
operator|.
name|setMaxThreadCount
argument_list|(
name|limit
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|threadPool2
operator|.
name|maxThreadCount
argument_list|()
argument_list|,
name|limit
argument_list|)
expr_stmt|;
comment|// the value returned from maxThreadCount() should always be valid input for setMaxThreadCount()
name|threadPool2
operator|.
name|setMaxThreadCount
argument_list|(
name|savedLimit
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|threadPool2
operator|.
name|maxThreadCount
argument_list|()
argument_list|,
name|savedLimit
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|setMaxThreadCountStartsAndStopsThreads
name|void
name|tst_QThreadPool
operator|::
name|setMaxThreadCountStartsAndStopsThreads
parameter_list|()
block|{
class|class
name|WaitingTask
super|:
specifier|public
name|QRunnable
block|{
public|public:
name|QSemaphore
name|waitForStarted
decl_stmt|,
name|waitToFinish
decl_stmt|;
name|WaitingTask
parameter_list|()
block|{
name|setAutoDelete
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|void
name|run
parameter_list|()
block|{
name|waitForStarted
operator|.
name|release
argument_list|()
expr_stmt|;
name|waitToFinish
operator|.
name|acquire
argument_list|()
expr_stmt|;
block|}
block|}
class|;
name|QThreadPool
name|threadPool
decl_stmt|;
name|threadPool
operator|.
name|setMaxThreadCount
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|WaitingTask
modifier|*
name|task
init|=
operator|new
name|WaitingTask
decl_stmt|;
name|threadPool
operator|.
name|start
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|task
operator|->
name|waitForStarted
operator|.
name|tryAcquire
argument_list|(
literal|1
argument_list|,
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
comment|// thread limit is 1, cannot start more tasks
name|threadPool
operator|.
name|start
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|task
operator|->
name|waitForStarted
operator|.
name|tryAcquire
argument_list|(
literal|1
argument_list|,
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
comment|// increasing the limit by 1 should start the task immediately
name|threadPool
operator|.
name|setMaxThreadCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|task
operator|->
name|waitForStarted
operator|.
name|tryAcquire
argument_list|(
literal|1
argument_list|,
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
comment|// ... but we still cannot start more tasks
name|threadPool
operator|.
name|start
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|task
operator|->
name|waitForStarted
operator|.
name|tryAcquire
argument_list|(
literal|1
argument_list|,
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
comment|// increasing the limit should be able to start more than one at a time
name|threadPool
operator|.
name|start
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|threadPool
operator|.
name|setMaxThreadCount
argument_list|(
literal|4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|task
operator|->
name|waitForStarted
operator|.
name|tryAcquire
argument_list|(
literal|2
argument_list|,
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
comment|// ... but we still cannot start more tasks
name|threadPool
operator|.
name|start
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|threadPool
operator|.
name|start
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|task
operator|->
name|waitForStarted
operator|.
name|tryAcquire
argument_list|(
literal|2
argument_list|,
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
comment|// decreasing the thread limit should cause the active thread count to go down
name|threadPool
operator|.
name|setMaxThreadCount
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|threadPool
operator|.
name|activeThreadCount
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|task
operator|->
name|waitToFinish
operator|.
name|release
argument_list|(
literal|2
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|1000
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|threadPool
operator|.
name|activeThreadCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// ... and we still cannot start more tasks
name|threadPool
operator|.
name|start
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|threadPool
operator|.
name|start
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|task
operator|->
name|waitForStarted
operator|.
name|tryAcquire
argument_list|(
literal|2
argument_list|,
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
comment|// start all remaining tasks
name|threadPool
operator|.
name|start
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|threadPool
operator|.
name|start
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|threadPool
operator|.
name|start
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|threadPool
operator|.
name|start
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|threadPool
operator|.
name|setMaxThreadCount
argument_list|(
literal|8
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|task
operator|->
name|waitForStarted
operator|.
name|tryAcquire
argument_list|(
literal|6
argument_list|,
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|task
operator|->
name|waitToFinish
operator|.
name|release
argument_list|(
literal|10
argument_list|)
expr_stmt|;
comment|//    delete task;
block|}
end_function
begin_function
DECL|function|reserveThread_data
name|void
name|tst_QThreadPool
operator|::
name|reserveThread_data
parameter_list|()
block|{
name|setMaxThreadCount_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|reserveThread
name|void
name|tst_QThreadPool
operator|::
name|reserveThread
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|limit
argument_list|)
expr_stmt|;
name|QThreadPool
modifier|*
name|threadpool
init|=
name|QThreadPool
operator|::
name|globalInstance
argument_list|()
decl_stmt|;
name|int
name|savedLimit
init|=
name|threadpool
operator|->
name|maxThreadCount
argument_list|()
decl_stmt|;
name|threadpool
operator|->
name|setMaxThreadCount
argument_list|(
name|limit
argument_list|)
expr_stmt|;
comment|// reserve up to the limit
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|limit
condition|;
operator|++
name|i
control|)
name|threadpool
operator|->
name|reserveThread
argument_list|()
expr_stmt|;
comment|// reserveThread() should always reserve a thread, regardless of
comment|// how many have been previously reserved
name|threadpool
operator|->
name|reserveThread
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|threadpool
operator|->
name|activeThreadCount
argument_list|()
argument_list|,
operator|(
name|limit
operator|>
literal|0
condition|?
name|limit
else|:
literal|0
operator|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|threadpool
operator|->
name|reserveThread
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|threadpool
operator|->
name|activeThreadCount
argument_list|()
argument_list|,
operator|(
name|limit
operator|>
literal|0
condition|?
name|limit
else|:
literal|0
operator|)
operator|+
literal|2
argument_list|)
expr_stmt|;
comment|// cleanup
name|threadpool
operator|->
name|releaseThread
argument_list|()
expr_stmt|;
name|threadpool
operator|->
name|releaseThread
argument_list|()
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|limit
condition|;
operator|++
name|i
control|)
name|threadpool
operator|->
name|releaseThread
argument_list|()
expr_stmt|;
comment|// reserving threads in children should not effect the parent
block|{
name|QThreadPool
name|threadpool2
argument_list|(
name|threadpool
argument_list|)
decl_stmt|;
name|threadpool2
operator|.
name|setMaxThreadCount
argument_list|(
name|limit
argument_list|)
expr_stmt|;
comment|// reserve up to the limit
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|limit
condition|;
operator|++
name|i
control|)
name|threadpool2
operator|.
name|reserveThread
argument_list|()
expr_stmt|;
comment|// reserveThread() should always reserve a thread, regardless
comment|// of how many have been previously reserved
name|threadpool2
operator|.
name|reserveThread
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|threadpool2
operator|.
name|activeThreadCount
argument_list|()
argument_list|,
operator|(
name|limit
operator|>
literal|0
condition|?
name|limit
else|:
literal|0
operator|)
operator|+
literal|1
argument_list|)
expr_stmt|;
name|threadpool2
operator|.
name|reserveThread
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|threadpool2
operator|.
name|activeThreadCount
argument_list|()
argument_list|,
operator|(
name|limit
operator|>
literal|0
condition|?
name|limit
else|:
literal|0
operator|)
operator|+
literal|2
argument_list|)
expr_stmt|;
name|threadpool
operator|->
name|reserveThread
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|threadpool
operator|->
name|activeThreadCount
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|threadpool
operator|->
name|reserveThread
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|threadpool
operator|->
name|activeThreadCount
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
comment|// cleanup
name|threadpool2
operator|.
name|releaseThread
argument_list|()
expr_stmt|;
name|threadpool2
operator|.
name|releaseThread
argument_list|()
expr_stmt|;
name|threadpool
operator|->
name|releaseThread
argument_list|()
expr_stmt|;
name|threadpool
operator|->
name|releaseThread
argument_list|()
expr_stmt|;
while|while
condition|(
name|threadpool2
operator|.
name|activeThreadCount
argument_list|()
operator|>
literal|0
condition|)
name|threadpool2
operator|.
name|releaseThread
argument_list|()
expr_stmt|;
block|}
comment|// reset limit on global QThreadPool
name|threadpool
operator|->
name|setMaxThreadCount
argument_list|(
name|savedLimit
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|releaseThread_data
name|void
name|tst_QThreadPool
operator|::
name|releaseThread_data
parameter_list|()
block|{
name|setMaxThreadCount_data
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|releaseThread
name|void
name|tst_QThreadPool
operator|::
name|releaseThread
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|int
argument_list|,
name|limit
argument_list|)
expr_stmt|;
name|QThreadPool
modifier|*
name|threadpool
init|=
name|QThreadPool
operator|::
name|globalInstance
argument_list|()
decl_stmt|;
name|int
name|savedLimit
init|=
name|threadpool
operator|->
name|maxThreadCount
argument_list|()
decl_stmt|;
name|threadpool
operator|->
name|setMaxThreadCount
argument_list|(
name|limit
argument_list|)
expr_stmt|;
comment|// reserve up to the limit
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|limit
condition|;
operator|++
name|i
control|)
name|threadpool
operator|->
name|reserveThread
argument_list|()
expr_stmt|;
comment|// release should decrease the number of reserved threads
name|int
name|reserved
init|=
name|threadpool
operator|->
name|activeThreadCount
argument_list|()
decl_stmt|;
while|while
condition|(
name|reserved
operator|--
operator|>
literal|0
condition|)
block|{
name|threadpool
operator|->
name|releaseThread
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|threadpool
operator|->
name|activeThreadCount
argument_list|()
argument_list|,
name|reserved
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|threadpool
operator|->
name|activeThreadCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// releaseThread() can release more than have been reserved
name|threadpool
operator|->
name|releaseThread
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|threadpool
operator|->
name|activeThreadCount
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|threadpool
operator|->
name|reserveThread
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|threadpool
operator|->
name|activeThreadCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// releasing threads in children should not effect the parent
block|{
name|QThreadPool
name|threadpool2
argument_list|(
name|threadpool
argument_list|)
decl_stmt|;
name|threadpool2
operator|.
name|setMaxThreadCount
argument_list|(
name|limit
argument_list|)
expr_stmt|;
comment|// reserve up to the limit
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|limit
condition|;
operator|++
name|i
control|)
name|threadpool2
operator|.
name|reserveThread
argument_list|()
expr_stmt|;
comment|// release should decrease the number of reserved threads
name|int
name|reserved
init|=
name|threadpool2
operator|.
name|activeThreadCount
argument_list|()
decl_stmt|;
while|while
condition|(
name|reserved
operator|--
operator|>
literal|0
condition|)
block|{
name|threadpool2
operator|.
name|releaseThread
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|threadpool2
operator|.
name|activeThreadCount
argument_list|()
argument_list|,
name|reserved
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|threadpool
operator|->
name|activeThreadCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|threadpool2
operator|.
name|activeThreadCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|threadpool
operator|->
name|activeThreadCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// releaseThread() can release more than have been reserved
name|threadpool2
operator|.
name|releaseThread
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|threadpool2
operator|.
name|activeThreadCount
argument_list|()
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|threadpool
operator|->
name|activeThreadCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|threadpool2
operator|.
name|reserveThread
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|threadpool2
operator|.
name|activeThreadCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|threadpool
operator|->
name|activeThreadCount
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
comment|// reset limit on global QThreadPool
name|threadpool
operator|->
name|setMaxThreadCount
argument_list|(
name|savedLimit
argument_list|)
expr_stmt|;
block|}
end_function
begin_decl_stmt
DECL|variable|count
name|QAtomicInt
name|count
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|CountingRunnable
class|class
name|CountingRunnable
super|:
specifier|public
name|QRunnable
block|{
DECL|function|run
public|public:
name|void
name|run
parameter_list|()
block|{
name|count
operator|.
name|ref
argument_list|()
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|start
name|void
name|tst_QThreadPool
operator|::
name|start
parameter_list|()
block|{
specifier|const
name|int
name|runs
init|=
literal|1000
decl_stmt|;
name|count
operator|.
name|store
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|{
name|QThreadPool
name|threadPool
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|runs
condition|;
operator|++
name|i
control|)
block|{
name|threadPool
operator|.
name|start
argument_list|(
operator|new
name|CountingRunnable
argument_list|()
argument_list|)
expr_stmt|;
block|}
block|}
name|QCOMPARE
argument_list|(
name|count
operator|.
name|load
argument_list|()
argument_list|,
name|runs
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tryStart
name|void
name|tst_QThreadPool
operator|::
name|tryStart
parameter_list|()
block|{
class|class
name|WaitingTask
super|:
specifier|public
name|QRunnable
block|{
public|public:
name|QSemaphore
name|semaphore
decl_stmt|;
name|WaitingTask
parameter_list|()
block|{
name|setAutoDelete
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|void
name|run
parameter_list|()
block|{
name|semaphore
operator|.
name|acquire
argument_list|()
expr_stmt|;
name|count
operator|.
name|ref
argument_list|()
expr_stmt|;
block|}
block|}
class|;
name|count
operator|.
name|store
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|WaitingTask
name|task
decl_stmt|;
name|QThreadPool
name|threadPool
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|threadPool
operator|.
name|maxThreadCount
argument_list|()
condition|;
operator|++
name|i
control|)
block|{
name|threadPool
operator|.
name|start
argument_list|(
operator|&
name|task
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
operator|!
name|threadPool
operator|.
name|tryStart
argument_list|(
operator|&
name|task
argument_list|)
argument_list|)
expr_stmt|;
name|task
operator|.
name|semaphore
operator|.
name|release
argument_list|(
name|threadPool
operator|.
name|maxThreadCount
argument_list|()
argument_list|)
expr_stmt|;
name|threadPool
operator|.
name|waitForDone
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|count
operator|.
name|load
argument_list|()
argument_list|,
name|threadPool
operator|.
name|maxThreadCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_decl_stmt
DECL|variable|mutex
name|QMutex
name|mutex
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|activeThreads
name|int
name|activeThreads
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|peakActiveThreads
name|int
name|peakActiveThreads
init|=
literal|0
decl_stmt|;
end_decl_stmt
begin_function
DECL|function|tryStartPeakThreadCount
name|void
name|tst_QThreadPool
operator|::
name|tryStartPeakThreadCount
parameter_list|()
block|{
class|class
name|CounterTask
super|:
specifier|public
name|QRunnable
block|{
public|public:
name|CounterTask
parameter_list|()
block|{
name|setAutoDelete
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|void
name|run
parameter_list|()
block|{
block|{
name|QMutexLocker
name|lock
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
operator|++
name|activeThreads
expr_stmt|;
name|peakActiveThreads
operator|=
name|qMax
argument_list|(
name|peakActiveThreads
argument_list|,
name|activeThreads
argument_list|)
expr_stmt|;
block|}
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|{
name|QMutexLocker
name|lock
argument_list|(
operator|&
name|mutex
argument_list|)
decl_stmt|;
operator|--
name|activeThreads
expr_stmt|;
block|}
block|}
block|}
class|;
name|CounterTask
name|task
decl_stmt|;
name|QThreadPool
name|threadPool
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|threadPool
operator|.
name|tryStart
argument_list|(
operator|&
name|task
argument_list|)
operator|==
literal|false
condition|)
name|QTest
operator|::
name|qWait
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|peakActiveThreads
argument_list|,
name|QThread
operator|::
name|idealThreadCount
argument_list|()
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|20
condition|;
operator|++
name|i
control|)
block|{
if|if
condition|(
name|threadPool
operator|.
name|tryStart
argument_list|(
operator|&
name|task
argument_list|)
operator|==
literal|false
condition|)
name|QTest
operator|::
name|qWait
argument_list|(
literal|10
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|peakActiveThreads
argument_list|,
name|QThread
operator|::
name|idealThreadCount
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|tryStartCount
name|void
name|tst_QThreadPool
operator|::
name|tryStartCount
parameter_list|()
block|{
class|class
name|SleeperTask
super|:
specifier|public
name|QRunnable
block|{
public|public:
name|SleeperTask
parameter_list|()
block|{
name|setAutoDelete
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|void
name|run
parameter_list|()
block|{
name|QTest
operator|::
name|qWait
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
block|}
class|;
name|SleeperTask
name|task
decl_stmt|;
name|QThreadPool
name|threadPool
decl_stmt|;
specifier|const
name|int
name|runs
init|=
literal|5
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|runs
condition|;
operator|++
name|i
control|)
block|{
name|int
name|count
init|=
literal|0
decl_stmt|;
while|while
condition|(
name|threadPool
operator|.
name|tryStart
argument_list|(
operator|&
name|task
argument_list|)
condition|)
operator|++
name|count
expr_stmt|;
name|QCOMPARE
argument_list|(
name|count
argument_list|,
name|QThread
operator|::
name|idealThreadCount
argument_list|()
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|waitForDone
name|void
name|tst_QThreadPool
operator|::
name|waitForDone
parameter_list|()
block|{
name|QTime
name|total
decl_stmt|,
name|pass
decl_stmt|;
name|total
operator|.
name|start
argument_list|()
expr_stmt|;
name|QThreadPool
name|threadPool
decl_stmt|;
while|while
condition|(
name|total
operator|.
name|elapsed
argument_list|()
operator|<
literal|10000
condition|)
block|{
name|int
name|runs
decl_stmt|;
name|count
operator|.
name|store
argument_list|(
name|runs
operator|=
literal|0
argument_list|)
expr_stmt|;
name|pass
operator|.
name|restart
argument_list|()
expr_stmt|;
while|while
condition|(
name|pass
operator|.
name|elapsed
argument_list|()
operator|<
literal|100
condition|)
block|{
name|threadPool
operator|.
name|start
argument_list|(
operator|new
name|CountingRunnable
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|runs
expr_stmt|;
block|}
name|threadPool
operator|.
name|waitForDone
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|count
operator|.
name|load
argument_list|()
argument_list|,
name|runs
argument_list|)
expr_stmt|;
name|count
operator|.
name|store
argument_list|(
name|runs
operator|=
literal|0
argument_list|)
expr_stmt|;
name|pass
operator|.
name|restart
argument_list|()
expr_stmt|;
while|while
condition|(
name|pass
operator|.
name|elapsed
argument_list|()
operator|<
literal|100
condition|)
block|{
name|threadPool
operator|.
name|start
argument_list|(
operator|new
name|CountingRunnable
argument_list|()
argument_list|)
expr_stmt|;
name|threadPool
operator|.
name|start
argument_list|(
operator|new
name|CountingRunnable
argument_list|()
argument_list|)
expr_stmt|;
name|runs
operator|+=
literal|2
expr_stmt|;
block|}
name|threadPool
operator|.
name|waitForDone
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|count
operator|.
name|load
argument_list|()
argument_list|,
name|runs
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|waitForDoneTimeout
name|void
name|tst_QThreadPool
operator|::
name|waitForDoneTimeout
parameter_list|()
block|{
class|class
name|BlockedTask
super|:
specifier|public
name|QRunnable
block|{
public|public:
name|QMutex
name|mutex
decl_stmt|;
name|BlockedTask
parameter_list|()
block|{
name|setAutoDelete
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|void
name|run
parameter_list|()
block|{
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qSleep
argument_list|(
literal|50
argument_list|)
expr_stmt|;
block|}
block|}
class|;
name|QThreadPool
name|threadPool
decl_stmt|;
name|BlockedTask
modifier|*
name|task
init|=
operator|new
name|BlockedTask
decl_stmt|;
name|task
operator|->
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|threadPool
operator|.
name|start
argument_list|(
name|task
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|threadPool
operator|.
name|waitForDone
argument_list|(
literal|100
argument_list|)
argument_list|)
expr_stmt|;
name|task
operator|->
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|threadPool
operator|.
name|waitForDone
argument_list|(
literal|400
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|destroyingWaitsForTasksToFinish
name|void
name|tst_QThreadPool
operator|::
name|destroyingWaitsForTasksToFinish
parameter_list|()
block|{
name|QTime
name|total
decl_stmt|,
name|pass
decl_stmt|;
name|total
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
name|total
operator|.
name|elapsed
argument_list|()
operator|<
literal|10000
condition|)
block|{
name|int
name|runs
decl_stmt|;
name|count
operator|.
name|store
argument_list|(
name|runs
operator|=
literal|0
argument_list|)
expr_stmt|;
block|{
name|QThreadPool
name|threadPool
decl_stmt|;
name|pass
operator|.
name|restart
argument_list|()
expr_stmt|;
while|while
condition|(
name|pass
operator|.
name|elapsed
argument_list|()
operator|<
literal|100
condition|)
block|{
name|threadPool
operator|.
name|start
argument_list|(
operator|new
name|CountingRunnable
argument_list|()
argument_list|)
expr_stmt|;
operator|++
name|runs
expr_stmt|;
block|}
block|}
name|QCOMPARE
argument_list|(
name|count
operator|.
name|load
argument_list|()
argument_list|,
name|runs
argument_list|)
expr_stmt|;
name|count
operator|.
name|store
argument_list|(
name|runs
operator|=
literal|0
argument_list|)
expr_stmt|;
block|{
name|QThreadPool
name|threadPool
decl_stmt|;
name|pass
operator|.
name|restart
argument_list|()
expr_stmt|;
while|while
condition|(
name|pass
operator|.
name|elapsed
argument_list|()
operator|<
literal|100
condition|)
block|{
name|threadPool
operator|.
name|start
argument_list|(
operator|new
name|CountingRunnable
argument_list|()
argument_list|)
expr_stmt|;
name|threadPool
operator|.
name|start
argument_list|(
operator|new
name|CountingRunnable
argument_list|()
argument_list|)
expr_stmt|;
name|runs
operator|+=
literal|2
expr_stmt|;
block|}
block|}
name|QCOMPARE
argument_list|(
name|count
operator|.
name|load
argument_list|()
argument_list|,
name|runs
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|stressTest
name|void
name|tst_QThreadPool
operator|::
name|stressTest
parameter_list|()
block|{
class|class
name|Task
super|:
specifier|public
name|QRunnable
block|{
name|QSemaphore
name|semaphore
decl_stmt|;
public|public:
name|Task
parameter_list|()
block|{
name|setAutoDelete
argument_list|(
literal|false
argument_list|)
expr_stmt|;
block|}
name|void
name|start
parameter_list|()
block|{
name|QThreadPool
operator|::
name|globalInstance
argument_list|()
operator|->
name|start
argument_list|(
name|this
argument_list|)
expr_stmt|;
block|}
name|void
name|wait
parameter_list|()
block|{
name|semaphore
operator|.
name|acquire
argument_list|()
expr_stmt|;
block|}
name|void
name|run
parameter_list|()
block|{
name|semaphore
operator|.
name|release
argument_list|()
expr_stmt|;
block|}
block|}
class|;
name|QTime
name|total
decl_stmt|;
name|total
operator|.
name|start
argument_list|()
expr_stmt|;
while|while
condition|(
name|total
operator|.
name|elapsed
argument_list|()
operator|<
literal|30000
condition|)
block|{
name|Task
name|t
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|t
operator|.
name|wait
argument_list|()
expr_stmt|;
block|}
block|}
end_function
begin_expr_stmt
DECL|variable|tst_QThreadPool
name|QTEST_MAIN
argument_list|(
name|tst_QThreadPool
argument_list|)
expr_stmt|;
end_expr_stmt
begin_include
include|#
directive|include
file|"tst_qthreadpool.moc"
end_include
end_unit
