begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2012 Nokia Corporation and/or its subsidiary(-ies). ** All rights reserved. ** Contact: http://www.qt-project.org/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** GNU Lesser General Public License Usage ** This file may be used under the terms of the GNU Lesser General Public ** License version 2.1 as published by the Free Software Foundation and ** appearing in the file LICENSE.LGPL included in the packaging of this ** file. Please review the following information to ensure the GNU Lesser ** General Public License version 2.1 requirements will be met: ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Nokia gives you certain additional ** rights. These rights are described in the Nokia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU General ** Public License version 3.0 as published by the Free Software Foundation ** and appearing in the file LICENSE.GPL included in the packaging of this ** file. Please review the following information to ensure the GNU General ** Public License version 3.0 requirements will be met: ** http://www.gnu.org/copyleft/gpl.html. ** ** Other Usage ** Alternatively, this file may be used in accordance with the terms and ** conditions contained in a signed written agreement between you and Nokia. ** ** ** ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QCoreApplication>
end_include
begin_include
include|#
directive|include
file|<QDebug>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qfuture.h>
end_include
begin_include
include|#
directive|include
file|<qfuturewatcher.h>
end_include
begin_include
include|#
directive|include
file|<qtconcurrentrun.h>
end_include
begin_include
include|#
directive|include
file|<qtconcurrentmap.h>
end_include
begin_include
include|#
directive|include
file|<private/qfutureinterface_p.h>
end_include
begin_using
using|using
namespace|namespace
name|QtConcurrent
namespace|;
end_using
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_comment
comment|//#define PRINT
end_comment
begin_class
DECL|class|tst_QFutureWatcher
class|class
name|tst_QFutureWatcher
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|startFinish
parameter_list|()
function_decl|;
name|void
name|progressValueChanged
parameter_list|()
function_decl|;
name|void
name|canceled
parameter_list|()
function_decl|;
name|void
name|resultAt
parameter_list|()
function_decl|;
name|void
name|resultReadyAt
parameter_list|()
function_decl|;
name|void
name|futureSignals
parameter_list|()
function_decl|;
name|void
name|watchFinishedFuture
parameter_list|()
function_decl|;
name|void
name|watchCanceledFuture
parameter_list|()
function_decl|;
name|void
name|disconnectRunningFuture
parameter_list|()
function_decl|;
name|void
name|tooMuchProgress
parameter_list|()
function_decl|;
name|void
name|progressText
parameter_list|()
function_decl|;
name|void
name|sharedFutureInterface
parameter_list|()
function_decl|;
name|void
name|changeFuture
parameter_list|()
function_decl|;
name|void
name|cancelEvents
parameter_list|()
function_decl|;
name|void
name|pauseEvents
parameter_list|()
function_decl|;
name|void
name|finishedState
parameter_list|()
function_decl|;
name|void
name|throttling
parameter_list|()
function_decl|;
name|void
name|incrementalMapResults
parameter_list|()
function_decl|;
name|void
name|incrementalFilterResults
parameter_list|()
function_decl|;
name|void
name|qfutureSynchronizer
parameter_list|()
function_decl|;
name|void
name|warnRace
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|sleeper
name|void
name|sleeper
parameter_list|()
block|{
name|QTest
operator|::
name|qSleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|startFinish
name|void
name|tst_QFutureWatcher
operator|::
name|startFinish
parameter_list|()
block|{
name|QFutureWatcher
argument_list|<
name|void
argument_list|>
name|futureWatcher
decl_stmt|;
name|QSignalSpy
name|startedSpy
argument_list|(
operator|&
name|futureWatcher
argument_list|,
name|SIGNAL
argument_list|(
name|started
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|finishedSpy
argument_list|(
operator|&
name|futureWatcher
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|startedSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|finishedSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|futureWatcher
operator|.
name|setFuture
argument_list|(
name|QtConcurrent
operator|::
name|run
argument_list|(
name|sleeper
argument_list|)
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|10
argument_list|)
expr_stmt|;
comment|// spin the event loop to deliver queued signals.
name|QCOMPARE
argument_list|(
name|startedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|finishedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|futureWatcher
operator|.
name|future
argument_list|()
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|startedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|finishedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mapSleeper
name|void
name|mapSleeper
parameter_list|(
name|int
modifier|&
parameter_list|)
block|{
name|QTest
operator|::
name|qSleep
argument_list|(
literal|100
argument_list|)
expr_stmt|;
block|}
end_function
begin_decl_stmt
DECL|variable|progressValues
name|QSet
argument_list|<
name|int
argument_list|>
name|progressValues
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|progressTexts
name|QSet
argument_list|<
name|QString
argument_list|>
name|progressTexts
decl_stmt|;
end_decl_stmt
begin_decl_stmt
DECL|variable|mutex
name|QMutex
name|mutex
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|ProgressObject
class|class
name|ProgressObject
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
name|void
name|printProgress
parameter_list|(
name|int
parameter_list|)
function_decl|;
name|void
name|printText
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
function_decl|;
name|void
name|registerProgress
parameter_list|(
name|int
parameter_list|)
function_decl|;
name|void
name|registerText
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|printProgress
name|void
name|ProgressObject
operator|::
name|printProgress
parameter_list|(
name|int
name|progress
parameter_list|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"thread"
operator|<<
name|QThread
operator|::
name|currentThread
argument_list|()
operator|<<
literal|"reports progress"
operator|<<
name|progress
expr_stmt|;
block|}
end_function
begin_function
DECL|function|printText
name|void
name|ProgressObject
operator|::
name|printText
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"thread"
operator|<<
name|QThread
operator|::
name|currentThread
argument_list|()
operator|<<
literal|"reports progress text"
operator|<<
name|text
expr_stmt|;
block|}
end_function
begin_function
DECL|function|registerProgress
name|void
name|ProgressObject
operator|::
name|registerProgress
parameter_list|(
name|int
name|progress
parameter_list|)
block|{
name|QTest
operator|::
name|qSleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|progressValues
operator|.
name|insert
argument_list|(
name|progress
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|registerText
name|void
name|ProgressObject
operator|::
name|registerText
parameter_list|(
specifier|const
name|QString
modifier|&
name|text
parameter_list|)
block|{
name|QTest
operator|::
name|qSleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|progressTexts
operator|.
name|insert
argument_list|(
name|text
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|createList
name|QList
argument_list|<
name|int
argument_list|>
name|createList
parameter_list|(
name|int
name|listSize
parameter_list|)
block|{
name|QList
argument_list|<
name|int
argument_list|>
name|list
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|listSize
condition|;
operator|++
name|i
control|)
block|{
name|list
operator|.
name|append
argument_list|(
name|i
argument_list|)
expr_stmt|;
block|}
return|return
name|list
return|;
block|}
end_function
begin_function
DECL|function|progressValueChanged
name|void
name|tst_QFutureWatcher
operator|::
name|progressValueChanged
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|PRINT
name|qDebug
argument_list|()
operator|<<
literal|"main thread"
operator|<<
name|QThread
operator|::
name|currentThread
argument_list|()
expr_stmt|;
endif|#
directive|endif
name|progressValues
operator|.
name|clear
argument_list|()
expr_stmt|;
specifier|const
name|int
name|listSize
init|=
literal|20
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|list
init|=
name|createList
argument_list|(
name|listSize
argument_list|)
decl_stmt|;
name|QFutureWatcher
argument_list|<
name|void
argument_list|>
name|futureWatcher
decl_stmt|;
name|ProgressObject
name|progressObject
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|futureWatcher
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|PRINT
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|futureWatcher
argument_list|,
name|SIGNAL
argument_list|(
name|progressValueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
operator|&
name|progressObject
argument_list|,
name|SLOT
argument_list|(
name|printProgress
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|Qt
operator|::
name|DirectConnection
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|futureWatcher
argument_list|,
name|SIGNAL
argument_list|(
name|progressValueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
operator|&
name|progressObject
argument_list|,
name|SLOT
argument_list|(
name|registerProgress
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|futureWatcher
operator|.
name|setFuture
argument_list|(
name|QtConcurrent
operator|::
name|map
argument_list|(
name|list
argument_list|,
name|mapSleeper
argument_list|)
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|futureWatcher
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|progressValues
operator|.
name|contains
argument_list|(
literal|0
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|progressValues
operator|.
name|contains
argument_list|(
name|listSize
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|CancelObject
class|class
name|CancelObject
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|member|wasCanceled
name|bool
name|wasCanceled
decl_stmt|;
DECL|function|CancelObject
name|CancelObject
parameter_list|()
member_init_list|:
name|wasCanceled
argument_list|(
literal|false
argument_list|)
block|{}
empty_stmt|;
public|public
name|slots
public|:
name|void
name|cancel
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|cancel
name|void
name|CancelObject
operator|::
name|cancel
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|PRINT
name|qDebug
argument_list|()
operator|<<
literal|"thread"
operator|<<
name|QThread
operator|::
name|currentThread
argument_list|()
operator|<<
literal|"reports canceled"
expr_stmt|;
endif|#
directive|endif
name|wasCanceled
operator|=
literal|true
expr_stmt|;
block|}
end_function
begin_function
DECL|function|canceled
name|void
name|tst_QFutureWatcher
operator|::
name|canceled
parameter_list|()
block|{
specifier|const
name|int
name|listSize
init|=
literal|20
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|list
init|=
name|createList
argument_list|(
name|listSize
argument_list|)
decl_stmt|;
name|QFutureWatcher
argument_list|<
name|void
argument_list|>
name|futureWatcher
decl_stmt|;
name|QFuture
argument_list|<
name|void
argument_list|>
name|future
decl_stmt|;
name|CancelObject
name|cancelObject
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|futureWatcher
argument_list|,
name|SIGNAL
argument_list|(
name|canceled
argument_list|()
argument_list|)
argument_list|,
operator|&
name|cancelObject
argument_list|,
name|SLOT
argument_list|(
name|cancel
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|futureWatcher
argument_list|,
name|SIGNAL
argument_list|(
name|canceled
argument_list|()
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
name|future
operator|=
name|QtConcurrent
operator|::
name|map
argument_list|(
name|list
argument_list|,
name|mapSleeper
argument_list|)
expr_stmt|;
name|futureWatcher
operator|.
name|setFuture
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|futureWatcher
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|future
operator|.
name|isCanceled
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|cancelObject
operator|.
name|wasCanceled
argument_list|)
expr_stmt|;
name|futureWatcher
operator|.
name|disconnect
argument_list|()
expr_stmt|;
name|future
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
block|}
end_function
begin_class
DECL|class|IntTask
class|class
name|IntTask
super|:
specifier|public
name|RunFunctionTask
argument_list|<
name|int
argument_list|>
block|{
public|public:
DECL|function|runFunctor
name|void
name|runFunctor
parameter_list|()
block|{
name|result
operator|=
literal|10
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|resultAt
name|void
name|tst_QFutureWatcher
operator|::
name|resultAt
parameter_list|()
block|{
name|QFutureWatcher
argument_list|<
name|int
argument_list|>
name|futureWatcher
decl_stmt|;
name|futureWatcher
operator|.
name|setFuture
argument_list|(
operator|(
operator|new
name|IntTask
argument_list|()
operator|)
operator|->
name|start
argument_list|()
argument_list|)
expr_stmt|;
name|futureWatcher
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|futureWatcher
operator|.
name|result
argument_list|()
argument_list|,
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|futureWatcher
operator|.
name|resultAt
argument_list|(
literal|0
argument_list|)
argument_list|,
literal|10
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|resultReadyAt
name|void
name|tst_QFutureWatcher
operator|::
name|resultReadyAt
parameter_list|()
block|{
name|QFutureWatcher
argument_list|<
name|int
argument_list|>
name|futureWatcher
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|futureWatcher
argument_list|,
name|SIGNAL
argument_list|(
name|resultReadyAt
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
name|QFuture
argument_list|<
name|int
argument_list|>
name|future
init|=
operator|(
operator|new
name|IntTask
argument_list|()
operator|)
operator|->
name|start
argument_list|()
decl_stmt|;
name|futureWatcher
operator|.
name|setFuture
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
comment|// Setting the future again should give us another signal.
comment|// (this is to prevent the race where the task associated
comment|// with the future finishes before setFuture is called.)
name|futureWatcher
operator|.
name|setFuture
argument_list|(
name|QFuture
argument_list|<
name|int
argument_list|>
argument_list|()
argument_list|)
expr_stmt|;
name|futureWatcher
operator|.
name|setFuture
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|SignalSlotObject
class|class
name|SignalSlotObject
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
signals|signals:
name|void
name|cancel
parameter_list|()
function_decl|;
public|public
name|slots
public|:
DECL|function|started
name|void
name|started
parameter_list|()
block|{
name|qDebug
argument_list|()
operator|<<
literal|"started called"
expr_stmt|;
block|}
DECL|function|finished
name|void
name|finished
parameter_list|()
block|{
name|qDebug
argument_list|()
operator|<<
literal|"finished called"
expr_stmt|;
block|}
DECL|function|canceled
name|void
name|canceled
parameter_list|()
block|{
name|qDebug
argument_list|()
operator|<<
literal|"canceled called"
expr_stmt|;
block|}
ifdef|#
directive|ifdef
name|PRINT
DECL|function|resultReadyAt
name|void
name|resultReadyAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"result"
operator|<<
name|index
operator|<<
literal|"ready"
expr_stmt|;
block|}
else|#
directive|else
DECL|function|resultReadyAt
name|void
name|resultReadyAt
parameter_list|(
name|int
parameter_list|)
block|{ }
endif|#
directive|endif
DECL|function|progressValueChanged
name|void
name|progressValueChanged
parameter_list|(
name|int
name|progress
parameter_list|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"progress"
operator|<<
name|progress
expr_stmt|;
block|}
DECL|function|progressRangeChanged
name|void
name|progressRangeChanged
parameter_list|(
name|int
name|min
parameter_list|,
name|int
name|max
parameter_list|)
block|{
name|qDebug
argument_list|()
operator|<<
literal|"progress range"
operator|<<
name|min
operator|<<
name|max
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|futureSignals
name|void
name|tst_QFutureWatcher
operator|::
name|futureSignals
parameter_list|()
block|{
block|{
name|QFutureInterface
argument_list|<
name|int
argument_list|>
name|a
decl_stmt|;
name|QFutureWatcher
argument_list|<
name|int
argument_list|>
name|f
decl_stmt|;
name|SignalSlotObject
name|object
decl_stmt|;
ifdef|#
directive|ifdef
name|PRINT
name|connect
argument_list|(
operator|&
name|f
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|object
argument_list|,
name|SLOT
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|f
argument_list|,
name|SIGNAL
argument_list|(
name|progressValueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
operator|&
name|object
argument_list|,
name|SLOT
argument_list|(
name|progressValueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
comment|// must connect to resultReadyAt so that the watcher can detect the connection
comment|// (QSignalSpy does not trigger it.)
name|connect
argument_list|(
operator|&
name|f
argument_list|,
name|SIGNAL
argument_list|(
name|resultReadyAt
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
operator|&
name|object
argument_list|,
name|SLOT
argument_list|(
name|resultReadyAt
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|a
operator|.
name|reportStarted
argument_list|()
expr_stmt|;
name|f
operator|.
name|setFuture
argument_list|(
name|a
operator|.
name|future
argument_list|()
argument_list|)
expr_stmt|;
name|QSignalSpy
name|progressSpy
argument_list|(
operator|&
name|f
argument_list|,
name|SIGNAL
argument_list|(
name|progressValueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|progressSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|int
name|progress
init|=
literal|1
decl_stmt|;
name|a
operator|.
name|setProgressValue
argument_list|(
name|progress
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|progressSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|progressSpy
operator|.
name|takeFirst
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|progressSpy
operator|.
name|takeFirst
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QSignalSpy
name|finishedSpy
argument_list|(
operator|&
name|f
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|resultReadySpy
argument_list|(
operator|&
name|f
argument_list|,
name|SIGNAL
argument_list|(
name|resultReadyAt
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|finishedSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|resultReadySpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|int
name|result
init|=
literal|10
decl_stmt|;
name|a
operator|.
name|reportResult
argument_list|(
operator|&
name|result
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|resultReadySpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|a
operator|.
name|reportFinished
argument_list|(
operator|&
name|result
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|resultReadySpy
operator|.
name|count
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|resultReadySpy
operator|.
name|takeFirst
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// check the index
name|QCOMPARE
argument_list|(
name|resultReadySpy
operator|.
name|takeFirst
argument_list|()
operator|.
name|at
argument_list|(
literal|0
argument_list|)
operator|.
name|toInt
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|finishedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|watchFinishedFuture
name|void
name|tst_QFutureWatcher
operator|::
name|watchFinishedFuture
parameter_list|()
block|{
name|QFutureInterface
argument_list|<
name|int
argument_list|>
name|iface
decl_stmt|;
name|iface
operator|.
name|reportStarted
argument_list|()
expr_stmt|;
name|QFuture
argument_list|<
name|int
argument_list|>
name|f
init|=
name|iface
operator|.
name|future
argument_list|()
decl_stmt|;
name|int
name|value
init|=
literal|100
decl_stmt|;
name|iface
operator|.
name|reportFinished
argument_list|(
operator|&
name|value
argument_list|)
expr_stmt|;
name|QFutureWatcher
argument_list|<
name|int
argument_list|>
name|watcher
decl_stmt|;
name|SignalSlotObject
name|object
decl_stmt|;
ifdef|#
directive|ifdef
name|PRINT
name|connect
argument_list|(
operator|&
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|started
argument_list|()
argument_list|)
argument_list|,
operator|&
name|object
argument_list|,
name|SLOT
argument_list|(
name|started
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|canceled
argument_list|()
argument_list|)
argument_list|,
operator|&
name|object
argument_list|,
name|SLOT
argument_list|(
name|canceled
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|object
argument_list|,
name|SLOT
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|progressValueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
operator|&
name|object
argument_list|,
name|SLOT
argument_list|(
name|progressValueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|progressRangeChanged
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
operator|&
name|object
argument_list|,
name|SLOT
argument_list|(
name|progressRangeChanged
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|connect
argument_list|(
operator|&
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|resultReadyAt
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
operator|&
name|object
argument_list|,
name|SLOT
argument_list|(
name|resultReadyAt
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QSignalSpy
name|startedSpy
argument_list|(
operator|&
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|started
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|finishedSpy
argument_list|(
operator|&
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|resultReadySpy
argument_list|(
operator|&
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|resultReadyAt
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|canceledSpy
argument_list|(
operator|&
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|canceled
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|startedSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|finishedSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|resultReadySpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|canceledSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|watcher
operator|.
name|setFuture
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|startedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|finishedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|resultReadySpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|canceledSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|watchCanceledFuture
name|void
name|tst_QFutureWatcher
operator|::
name|watchCanceledFuture
parameter_list|()
block|{
name|QFuture
argument_list|<
name|int
argument_list|>
name|f
decl_stmt|;
name|QFutureWatcher
argument_list|<
name|int
argument_list|>
name|watcher
decl_stmt|;
name|SignalSlotObject
name|object
decl_stmt|;
ifdef|#
directive|ifdef
name|PRINT
name|connect
argument_list|(
operator|&
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|started
argument_list|()
argument_list|)
argument_list|,
operator|&
name|object
argument_list|,
name|SLOT
argument_list|(
name|started
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|canceled
argument_list|()
argument_list|)
argument_list|,
operator|&
name|object
argument_list|,
name|SLOT
argument_list|(
name|canceled
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|object
argument_list|,
name|SLOT
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|progressValueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
operator|&
name|object
argument_list|,
name|SLOT
argument_list|(
name|progressValueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|progressRangeChanged
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|,
operator|&
name|object
argument_list|,
name|SLOT
argument_list|(
name|progressRangeChanged
argument_list|(
name|int
argument_list|,
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|connect
argument_list|(
operator|&
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|resultReadyAt
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
operator|&
name|object
argument_list|,
name|SLOT
argument_list|(
name|resultReadyAt
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QSignalSpy
name|startedSpy
argument_list|(
operator|&
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|started
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|finishedSpy
argument_list|(
operator|&
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|resultReadySpy
argument_list|(
operator|&
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|resultReadyAt
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|canceledSpy
argument_list|(
operator|&
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|canceled
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|startedSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|finishedSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|resultReadySpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|canceledSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|watcher
operator|.
name|setFuture
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|startedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|finishedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|resultReadySpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|canceledSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|disconnectRunningFuture
name|void
name|tst_QFutureWatcher
operator|::
name|disconnectRunningFuture
parameter_list|()
block|{
name|QFutureInterface
argument_list|<
name|int
argument_list|>
name|a
decl_stmt|;
name|a
operator|.
name|reportStarted
argument_list|()
expr_stmt|;
name|QFuture
argument_list|<
name|int
argument_list|>
name|f
init|=
name|a
operator|.
name|future
argument_list|()
decl_stmt|;
name|QFutureWatcher
argument_list|<
name|int
argument_list|>
modifier|*
name|watcher
init|=
operator|new
name|QFutureWatcher
argument_list|<
name|int
argument_list|>
argument_list|()
decl_stmt|;
name|watcher
operator|->
name|setFuture
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|SignalSlotObject
name|object
decl_stmt|;
name|connect
argument_list|(
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|resultReadyAt
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
operator|&
name|object
argument_list|,
name|SLOT
argument_list|(
name|resultReadyAt
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QSignalSpy
name|finishedSpy
argument_list|(
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|)
decl_stmt|;
name|QSignalSpy
name|resultReadySpy
argument_list|(
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|resultReadyAt
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|finishedSpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|resultReadySpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
specifier|const
name|int
name|result
init|=
literal|10
decl_stmt|;
name|a
operator|.
name|reportResult
argument_list|(
operator|&
name|result
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|resultReadySpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
operator|delete
name|watcher
expr_stmt|;
name|a
operator|.
name|reportResult
argument_list|(
operator|&
name|result
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|resultReadySpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|a
operator|.
name|reportFinished
argument_list|(
operator|&
name|result
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|finishedSpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_decl_stmt
DECL|variable|maxProgress
specifier|const
name|int
name|maxProgress
init|=
literal|100000
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|ProgressEmitterTask
class|class
name|ProgressEmitterTask
super|:
specifier|public
name|RunFunctionTask
argument_list|<
name|void
argument_list|>
block|{
public|public:
DECL|function|runFunctor
name|void
name|runFunctor
parameter_list|()
block|{
name|setProgressRange
argument_list|(
literal|0
argument_list|,
name|maxProgress
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|p
init|=
literal|0
init|;
name|p
operator|<=
name|maxProgress
condition|;
operator|++
name|p
control|)
name|setProgressValue
argument_list|(
name|p
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|tooMuchProgress
name|void
name|tst_QFutureWatcher
operator|::
name|tooMuchProgress
parameter_list|()
block|{
name|progressValues
operator|.
name|clear
argument_list|()
expr_stmt|;
name|ProgressObject
name|o
decl_stmt|;
name|QFutureWatcher
argument_list|<
name|void
argument_list|>
name|f
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|f
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|PRINT
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|f
argument_list|,
name|SIGNAL
argument_list|(
name|progressValueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
operator|&
name|o
argument_list|,
name|SLOT
argument_list|(
name|printProgress
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|f
argument_list|,
name|SIGNAL
argument_list|(
name|progressValueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
operator|&
name|o
argument_list|,
name|SLOT
argument_list|(
name|registerProgress
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|f
operator|.
name|setFuture
argument_list|(
operator|(
operator|new
name|ProgressEmitterTask
argument_list|()
operator|)
operator|->
name|start
argument_list|()
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|progressValues
operator|.
name|contains
argument_list|(
name|maxProgress
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
class|class
DECL|class|ProgressTextTask
name|ProgressTextTask
super|:
specifier|public
name|RunFunctionTask
argument_list|<
name|T
argument_list|>
block|{
public|public:
DECL|function|runFunctor
name|void
name|runFunctor
parameter_list|()
block|{
name|this
operator|->
name|setProgressValueAndText
argument_list|(
literal|1
argument_list|,
name|QLatin1String
argument_list|(
literal|"Foo 1"
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|this
operator|->
name|isProgressUpdateNeeded
argument_list|()
operator|==
literal|false
condition|)
name|QTest
operator|::
name|qSleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|this
operator|->
name|setProgressValueAndText
argument_list|(
literal|2
argument_list|,
name|QLatin1String
argument_list|(
literal|"Foo 2"
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|this
operator|->
name|isProgressUpdateNeeded
argument_list|()
operator|==
literal|false
condition|)
name|QTest
operator|::
name|qSleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|this
operator|->
name|setProgressValueAndText
argument_list|(
literal|3
argument_list|,
name|QLatin1String
argument_list|(
literal|"Foo 3"
argument_list|)
argument_list|)
expr_stmt|;
while|while
condition|(
name|this
operator|->
name|isProgressUpdateNeeded
argument_list|()
operator|==
literal|false
condition|)
name|QTest
operator|::
name|qSleep
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|this
operator|->
name|setProgressValueAndText
argument_list|(
literal|4
argument_list|,
name|QLatin1String
argument_list|(
literal|"Foo 4"
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|progressText
name|void
name|tst_QFutureWatcher
operator|::
name|progressText
parameter_list|()
block|{
block|{
comment|// instantiate API for T=int and T=void.
name|ProgressTextTask
argument_list|<
name|int
argument_list|>
name|a
decl_stmt|;
name|ProgressTextTask
argument_list|<
name|void
argument_list|>
name|b
decl_stmt|;
block|}
block|{
name|progressValues
operator|.
name|clear
argument_list|()
expr_stmt|;
name|progressTexts
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QFuture
argument_list|<
name|int
argument_list|>
name|f
init|=
operator|(
operator|(
operator|new
name|ProgressTextTask
argument_list|<
name|int
argument_list|>
argument_list|()
operator|)
operator|->
name|start
argument_list|()
operator|)
decl_stmt|;
name|QFutureWatcher
argument_list|<
name|int
argument_list|>
name|watcher
decl_stmt|;
name|ProgressObject
name|o
decl_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
ifdef|#
directive|ifdef
name|PRINT
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|progressValueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
operator|&
name|o
argument_list|,
name|SLOT
argument_list|(
name|printProgress
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|progressTextChanged
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
argument_list|)
argument_list|,
operator|&
name|o
argument_list|,
name|SLOT
argument_list|(
name|printText
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|progressValueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
operator|&
name|o
argument_list|,
name|SLOT
argument_list|(
name|registerProgress
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|progressTextChanged
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
argument_list|)
argument_list|,
operator|&
name|o
argument_list|,
name|SLOT
argument_list|(
name|registerText
argument_list|(
specifier|const
name|QString
operator|&
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|watcher
operator|.
name|setFuture
argument_list|(
name|f
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|progressText
argument_list|()
argument_list|,
name|QLatin1String
argument_list|(
literal|"Foo 4"
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|f
operator|.
name|progressValue
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|progressValues
operator|.
name|contains
argument_list|(
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|progressValues
operator|.
name|contains
argument_list|(
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|progressValues
operator|.
name|contains
argument_list|(
literal|3
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|progressValues
operator|.
name|contains
argument_list|(
literal|4
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|progressTexts
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"Foo 1"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|progressTexts
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"Foo 2"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|progressTexts
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"Foo 3"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|progressTexts
operator|.
name|contains
argument_list|(
name|QLatin1String
argument_list|(
literal|"Foo 4"
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|callInterface
name|void
name|callInterface
parameter_list|(
name|T
modifier|&
name|obj
parameter_list|)
block|{
name|obj
operator|.
name|progressValue
argument_list|()
expr_stmt|;
name|obj
operator|.
name|progressMinimum
argument_list|()
expr_stmt|;
name|obj
operator|.
name|progressMaximum
argument_list|()
expr_stmt|;
name|obj
operator|.
name|progressText
argument_list|()
expr_stmt|;
name|obj
operator|.
name|isStarted
argument_list|()
expr_stmt|;
name|obj
operator|.
name|isFinished
argument_list|()
expr_stmt|;
name|obj
operator|.
name|isRunning
argument_list|()
expr_stmt|;
name|obj
operator|.
name|isCanceled
argument_list|()
expr_stmt|;
name|obj
operator|.
name|isPaused
argument_list|()
expr_stmt|;
name|obj
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|obj
operator|.
name|pause
argument_list|()
expr_stmt|;
name|obj
operator|.
name|resume
argument_list|()
expr_stmt|;
name|obj
operator|.
name|togglePaused
argument_list|()
expr_stmt|;
name|obj
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
specifier|const
name|T
modifier|&
name|objConst
init|=
name|obj
decl_stmt|;
name|objConst
operator|.
name|progressValue
argument_list|()
expr_stmt|;
name|objConst
operator|.
name|progressMinimum
argument_list|()
expr_stmt|;
name|objConst
operator|.
name|progressMaximum
argument_list|()
expr_stmt|;
name|objConst
operator|.
name|progressText
argument_list|()
expr_stmt|;
name|objConst
operator|.
name|isStarted
argument_list|()
expr_stmt|;
name|objConst
operator|.
name|isFinished
argument_list|()
expr_stmt|;
name|objConst
operator|.
name|isRunning
argument_list|()
expr_stmt|;
name|objConst
operator|.
name|isCanceled
argument_list|()
expr_stmt|;
name|objConst
operator|.
name|isPaused
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
template|template
parameter_list|<
name|typename
name|T
parameter_list|>
DECL|function|callInterface
name|void
name|callInterface
parameter_list|(
specifier|const
name|T
modifier|&
name|obj
parameter_list|)
block|{
name|obj
operator|.
name|result
argument_list|()
expr_stmt|;
name|obj
operator|.
name|resultAt
argument_list|(
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// QFutureWatcher and QFuture has a similar interface. Test
end_comment
begin_comment
comment|// that the functions we want ot have in both are actually
end_comment
begin_comment
comment|// there.
end_comment
begin_function
DECL|function|sharedFutureInterface
name|void
name|tst_QFutureWatcher
operator|::
name|sharedFutureInterface
parameter_list|()
block|{
name|QFutureInterface
argument_list|<
name|int
argument_list|>
name|iface
decl_stmt|;
name|iface
operator|.
name|reportStarted
argument_list|()
expr_stmt|;
name|QFuture
argument_list|<
name|int
argument_list|>
name|intFuture
init|=
name|iface
operator|.
name|future
argument_list|()
decl_stmt|;
name|int
name|value
init|=
literal|0
decl_stmt|;
name|iface
operator|.
name|reportFinished
argument_list|(
operator|&
name|value
argument_list|)
expr_stmt|;
name|QFuture
argument_list|<
name|void
argument_list|>
name|voidFuture
decl_stmt|;
name|QFutureWatcher
argument_list|<
name|int
argument_list|>
name|intWatcher
decl_stmt|;
name|intWatcher
operator|.
name|setFuture
argument_list|(
name|intFuture
argument_list|)
expr_stmt|;
name|QFutureWatcher
argument_list|<
name|void
argument_list|>
name|voidWatcher
decl_stmt|;
name|callInterface
argument_list|(
name|intFuture
argument_list|)
expr_stmt|;
name|callInterface
argument_list|(
name|voidFuture
argument_list|)
expr_stmt|;
name|callInterface
argument_list|(
name|intWatcher
argument_list|)
expr_stmt|;
name|callInterface
argument_list|(
name|voidWatcher
argument_list|)
expr_stmt|;
name|callInterface
argument_list|(
name|intFuture
argument_list|)
expr_stmt|;
name|callInterface
argument_list|(
name|intWatcher
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|changeFuture
name|void
name|tst_QFutureWatcher
operator|::
name|changeFuture
parameter_list|()
block|{
name|QFutureInterface
argument_list|<
name|int
argument_list|>
name|iface
decl_stmt|;
name|iface
operator|.
name|reportStarted
argument_list|()
expr_stmt|;
name|QFuture
argument_list|<
name|int
argument_list|>
name|a
init|=
name|iface
operator|.
name|future
argument_list|()
decl_stmt|;
name|int
name|value
init|=
literal|0
decl_stmt|;
name|iface
operator|.
name|reportFinished
argument_list|(
operator|&
name|value
argument_list|)
expr_stmt|;
name|QFuture
argument_list|<
name|int
argument_list|>
name|b
decl_stmt|;
name|QFutureWatcher
argument_list|<
name|int
argument_list|>
name|watcher
decl_stmt|;
name|SignalSlotObject
name|object
decl_stmt|;
name|connect
argument_list|(
operator|&
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|resultReadyAt
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
operator|&
name|object
argument_list|,
name|SLOT
argument_list|(
name|resultReadyAt
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QSignalSpy
name|resultReadySpy
argument_list|(
operator|&
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|resultReadyAt
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|resultReadySpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|watcher
operator|.
name|setFuture
argument_list|(
name|a
argument_list|)
expr_stmt|;
comment|// Watch 'a' which will genere a resultReady event.
name|watcher
operator|.
name|setFuture
argument_list|(
name|b
argument_list|)
expr_stmt|;
comment|// But oh no! we're switching to another future
name|QTest
operator|::
name|qWait
argument_list|(
literal|10
argument_list|)
expr_stmt|;
comment|// before the event gets delivered.
name|QCOMPARE
argument_list|(
name|resultReadySpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|watcher
operator|.
name|setFuture
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|watcher
operator|.
name|setFuture
argument_list|(
name|b
argument_list|)
expr_stmt|;
name|watcher
operator|.
name|setFuture
argument_list|(
name|a
argument_list|)
expr_stmt|;
comment|// setting it back gets us one event, not two.
name|QTest
operator|::
name|qWait
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|resultReadySpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Test that events aren't delivered from canceled futures
end_comment
begin_function
DECL|function|cancelEvents
name|void
name|tst_QFutureWatcher
operator|::
name|cancelEvents
parameter_list|()
block|{
name|QFutureInterface
argument_list|<
name|int
argument_list|>
name|iface
decl_stmt|;
name|iface
operator|.
name|reportStarted
argument_list|()
expr_stmt|;
name|QFuture
argument_list|<
name|int
argument_list|>
name|a
init|=
name|iface
operator|.
name|future
argument_list|()
decl_stmt|;
name|int
name|value
init|=
literal|0
decl_stmt|;
name|iface
operator|.
name|reportFinished
argument_list|(
operator|&
name|value
argument_list|)
expr_stmt|;
name|QFutureWatcher
argument_list|<
name|int
argument_list|>
name|watcher
decl_stmt|;
name|SignalSlotObject
name|object
decl_stmt|;
name|connect
argument_list|(
operator|&
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|resultReadyAt
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
operator|&
name|object
argument_list|,
name|SLOT
argument_list|(
name|resultReadyAt
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QSignalSpy
name|resultReadySpy
argument_list|(
operator|&
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|resultReadyAt
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|resultReadySpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|watcher
operator|.
name|setFuture
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|watcher
operator|.
name|cancel
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|resultReadySpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// Tests that events from paused futures are saved and
end_comment
begin_comment
comment|// delivered on resume.
end_comment
begin_function
DECL|function|pauseEvents
name|void
name|tst_QFutureWatcher
operator|::
name|pauseEvents
parameter_list|()
block|{
block|{
name|QFutureInterface
argument_list|<
name|int
argument_list|>
name|iface
decl_stmt|;
name|iface
operator|.
name|reportStarted
argument_list|()
expr_stmt|;
name|QFuture
argument_list|<
name|int
argument_list|>
name|a
init|=
name|iface
operator|.
name|future
argument_list|()
decl_stmt|;
name|int
name|value
init|=
literal|0
decl_stmt|;
name|iface
operator|.
name|reportFinished
argument_list|(
operator|&
name|value
argument_list|)
expr_stmt|;
name|QFutureWatcher
argument_list|<
name|int
argument_list|>
name|watcher
decl_stmt|;
name|SignalSlotObject
name|object
decl_stmt|;
name|connect
argument_list|(
operator|&
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|resultReadyAt
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
operator|&
name|object
argument_list|,
name|SLOT
argument_list|(
name|resultReadyAt
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QSignalSpy
name|resultReadySpy
argument_list|(
operator|&
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|resultReadyAt
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|resultReadySpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|watcher
operator|.
name|setFuture
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|watcher
operator|.
name|pause
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|resultReadySpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|watcher
operator|.
name|resume
argument_list|()
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|resultReadySpy
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|{
name|QFutureInterface
argument_list|<
name|int
argument_list|>
name|iface
decl_stmt|;
name|iface
operator|.
name|reportStarted
argument_list|()
expr_stmt|;
name|QFuture
argument_list|<
name|int
argument_list|>
name|a
init|=
name|iface
operator|.
name|future
argument_list|()
decl_stmt|;
name|int
name|value
init|=
literal|0
decl_stmt|;
name|iface
operator|.
name|reportFinished
argument_list|(
operator|&
name|value
argument_list|)
expr_stmt|;
name|QFutureWatcher
argument_list|<
name|int
argument_list|>
name|watcher
decl_stmt|;
name|SignalSlotObject
name|object
decl_stmt|;
name|connect
argument_list|(
operator|&
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|resultReadyAt
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
operator|&
name|object
argument_list|,
name|SLOT
argument_list|(
name|resultReadyAt
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QSignalSpy
name|resultReadySpy
argument_list|(
operator|&
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|resultReadyAt
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|resultReadySpy
operator|.
name|isValid
argument_list|()
argument_list|)
expr_stmt|;
name|watcher
operator|.
name|setFuture
argument_list|(
name|a
argument_list|)
expr_stmt|;
name|a
operator|.
name|pause
argument_list|()
expr_stmt|;
name|QFuture
argument_list|<
name|int
argument_list|>
name|b
decl_stmt|;
name|watcher
operator|.
name|setFuture
argument_list|(
name|b
argument_list|)
expr_stmt|;
comment|// If we watch b instead, resuming a
name|a
operator|.
name|resume
argument_list|()
expr_stmt|;
comment|// should give us no results.
name|QTest
operator|::
name|qWait
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|resultReadySpy
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_comment
comment|// Test that the finished state for the watcher gets
end_comment
begin_comment
comment|// set when the finished event is delivered.
end_comment
begin_comment
comment|// This means it will lag the finished state for the future,
end_comment
begin_comment
comment|// but makes it more useful.
end_comment
begin_function
DECL|function|finishedState
name|void
name|tst_QFutureWatcher
operator|::
name|finishedState
parameter_list|()
block|{
name|QFutureInterface
argument_list|<
name|int
argument_list|>
name|iface
decl_stmt|;
name|iface
operator|.
name|reportStarted
argument_list|()
expr_stmt|;
name|QFuture
argument_list|<
name|int
argument_list|>
name|future
init|=
name|iface
operator|.
name|future
argument_list|()
decl_stmt|;
name|QFutureWatcher
argument_list|<
name|int
argument_list|>
name|watcher
decl_stmt|;
name|watcher
operator|.
name|setFuture
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|iface
operator|.
name|reportFinished
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|future
operator|.
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|watcher
operator|.
name|isFinished
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|watcher
operator|.
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|/*     Verify that throttling kicks in if you report a lot of results,     and that it clears when the result events are processed. */
end_comment
begin_function
DECL|function|throttling
name|void
name|tst_QFutureWatcher
operator|::
name|throttling
parameter_list|()
block|{
name|QFutureInterface
argument_list|<
name|int
argument_list|>
name|iface
decl_stmt|;
name|iface
operator|.
name|reportStarted
argument_list|()
expr_stmt|;
name|QFuture
argument_list|<
name|int
argument_list|>
name|future
init|=
name|iface
operator|.
name|future
argument_list|()
decl_stmt|;
name|QFutureWatcher
argument_list|<
name|int
argument_list|>
name|watcher
decl_stmt|;
name|watcher
operator|.
name|setFuture
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|iface
operator|.
name|isThrottled
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
literal|1000
condition|;
operator|++
name|i
control|)
block|{
name|int
name|result
init|=
literal|0
decl_stmt|;
name|iface
operator|.
name|reportResult
argument_list|(
name|result
argument_list|)
expr_stmt|;
block|}
name|QVERIFY
argument_list|(
name|iface
operator|.
name|isThrottled
argument_list|()
operator|==
literal|true
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|qWait
argument_list|(
literal|100
argument_list|)
expr_stmt|;
comment|// process events.
name|QVERIFY
argument_list|(
name|iface
operator|.
name|isThrottled
argument_list|()
operator|==
literal|false
argument_list|)
expr_stmt|;
name|iface
operator|.
name|reportFinished
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|mapper
name|int
name|mapper
parameter_list|(
specifier|const
name|int
modifier|&
name|i
parameter_list|)
block|{
return|return
name|i
return|;
block|}
end_function
begin_class
DECL|class|ResultReadyTester
class|class
name|ResultReadyTester
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|ResultReadyTester
name|ResultReadyTester
parameter_list|(
name|QFutureWatcher
argument_list|<
name|int
argument_list|>
modifier|*
name|watcher
parameter_list|)
member_init_list|:
name|m_watcher
argument_list|(
name|watcher
argument_list|)
member_init_list|,
name|filter
argument_list|(
literal|false
argument_list|)
member_init_list|,
name|ok
argument_list|(
literal|true
argument_list|)
member_init_list|,
name|count
argument_list|(
literal|0
argument_list|)
block|{              }
public|public
name|slots
public|:
DECL|function|resultReadyAt
name|void
name|resultReadyAt
parameter_list|(
name|int
name|index
parameter_list|)
block|{
operator|++
name|count
expr_stmt|;
if|if
condition|(
name|m_watcher
operator|->
name|future
argument_list|()
operator|.
name|isResultReadyAt
argument_list|(
name|index
argument_list|)
operator|==
literal|false
condition|)
name|ok
operator|=
literal|false
expr_stmt|;
if|if
condition|(
operator|!
name|filter
operator|&&
name|m_watcher
operator|->
name|future
argument_list|()
operator|.
name|resultAt
argument_list|(
name|index
argument_list|)
operator|!=
name|index
condition|)
name|ok
operator|=
literal|false
expr_stmt|;
if|if
condition|(
name|filter
operator|&&
name|m_watcher
operator|->
name|future
argument_list|()
operator|.
name|resultAt
argument_list|(
name|index
argument_list|)
operator|!=
name|index
operator|*
literal|2
operator|+
literal|1
condition|)
name|ok
operator|=
literal|false
expr_stmt|;
block|}
public|public:
DECL|member|m_watcher
name|QFutureWatcher
argument_list|<
name|int
argument_list|>
modifier|*
name|m_watcher
decl_stmt|;
DECL|member|filter
name|bool
name|filter
decl_stmt|;
DECL|member|ok
name|bool
name|ok
decl_stmt|;
DECL|member|count
name|int
name|count
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|incrementalMapResults
name|void
name|tst_QFutureWatcher
operator|::
name|incrementalMapResults
parameter_list|()
block|{
name|QFutureWatcher
argument_list|<
name|int
argument_list|>
name|watcher
decl_stmt|;
name|SignalSlotObject
name|object
decl_stmt|;
ifdef|#
directive|ifdef
name|PRINT
name|connect
argument_list|(
operator|&
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|object
argument_list|,
name|SLOT
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|progressValueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
operator|&
name|object
argument_list|,
name|SLOT
argument_list|(
name|progressValueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|resultReadyAt
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
operator|&
name|object
argument_list|,
name|SLOT
argument_list|(
name|resultReadyAt
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ResultReadyTester
name|resultReadyTester
argument_list|(
operator|&
name|watcher
argument_list|)
decl_stmt|;
name|connect
argument_list|(
operator|&
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|resultReadyAt
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
operator|&
name|resultReadyTester
argument_list|,
name|SLOT
argument_list|(
name|resultReadyAt
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|int
name|count
init|=
literal|10000
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|ints
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
name|ints
operator|<<
name|i
expr_stmt|;
name|QFuture
argument_list|<
name|int
argument_list|>
name|future
init|=
name|QtConcurrent
operator|::
name|mapped
argument_list|(
name|ints
argument_list|,
name|mapper
argument_list|)
decl_stmt|;
name|watcher
operator|.
name|setFuture
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|resultReadyTester
operator|.
name|count
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|resultReadyTester
operator|.
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|watcher
operator|.
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
name|future
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|filterer
name|bool
name|filterer
parameter_list|(
name|int
name|i
parameter_list|)
block|{
return|return
operator|(
name|i
operator|%
literal|2
operator|)
return|;
block|}
end_function
begin_function
DECL|function|incrementalFilterResults
name|void
name|tst_QFutureWatcher
operator|::
name|incrementalFilterResults
parameter_list|()
block|{
name|QFutureWatcher
argument_list|<
name|int
argument_list|>
name|watcher
decl_stmt|;
name|SignalSlotObject
name|object
decl_stmt|;
ifdef|#
directive|ifdef
name|PRINT
name|connect
argument_list|(
operator|&
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|object
argument_list|,
name|SLOT
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|progressValueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
operator|&
name|object
argument_list|,
name|SLOT
argument_list|(
name|progressValueChanged
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|resultReadyAt
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
operator|&
name|object
argument_list|,
name|SLOT
argument_list|(
name|resultReadyAt
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
endif|#
directive|endif
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|QTestEventLoop
operator|::
name|instance
argument_list|()
argument_list|,
name|SLOT
argument_list|(
name|exitLoop
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|ResultReadyTester
name|resultReadyTester
argument_list|(
operator|&
name|watcher
argument_list|)
decl_stmt|;
name|resultReadyTester
operator|.
name|filter
operator|=
literal|true
expr_stmt|;
name|connect
argument_list|(
operator|&
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|resultReadyAt
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
operator|&
name|resultReadyTester
argument_list|,
name|SLOT
argument_list|(
name|resultReadyAt
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
specifier|const
name|int
name|count
init|=
literal|10000
decl_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|ints
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|count
condition|;
operator|++
name|i
control|)
name|ints
operator|<<
name|i
expr_stmt|;
name|QFuture
argument_list|<
name|int
argument_list|>
name|future
init|=
name|QtConcurrent
operator|::
name|filtered
argument_list|(
name|ints
argument_list|,
name|filterer
argument_list|)
decl_stmt|;
name|watcher
operator|.
name|setFuture
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|enterLoop
argument_list|(
literal|10
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QTestEventLoop
operator|::
name|instance
argument_list|()
operator|.
name|timeout
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|resultReadyTester
operator|.
name|count
argument_list|,
name|count
operator|/
literal|2
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|resultReadyTester
operator|.
name|ok
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|watcher
operator|.
name|isFinished
argument_list|()
argument_list|)
expr_stmt|;
name|future
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qfutureSynchronizer
name|void
name|tst_QFutureWatcher
operator|::
name|qfutureSynchronizer
parameter_list|()
block|{
name|int
name|taskCount
init|=
literal|1000
decl_stmt|;
name|QTime
name|t
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
block|{
name|QFutureSynchronizer
argument_list|<
name|void
argument_list|>
name|sync
decl_stmt|;
name|sync
operator|.
name|setCancelOnWait
argument_list|(
literal|true
argument_list|)
expr_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|taskCount
condition|;
operator|++
name|i
control|)
block|{
name|sync
operator|.
name|addFuture
argument_list|(
name|run
argument_list|(
name|sleeper
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
comment|// Test that we're not running each task.
name|QVERIFY
argument_list|(
name|t
operator|.
name|elapsed
argument_list|()
operator|<
name|taskCount
operator|*
literal|10
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|DummyObject
class|class
name|DummyObject
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public
name|slots
public|:
DECL|function|dummySlot
name|void
name|dummySlot
parameter_list|()
block|{}
public|public:
DECL|function|function
specifier|static
name|void
name|function
parameter_list|(
name|QMutex
modifier|*
name|m
parameter_list|)
block|{
name|QMutexLocker
name|lock
argument_list|(
name|m
argument_list|)
decl_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|warnRace
name|void
name|tst_QFutureWatcher
operator|::
name|warnRace
parameter_list|()
block|{
ifndef|#
directive|ifndef
name|Q_OS_MAC
comment|//I don't know why it is not working on mac
ifndef|#
directive|ifndef
name|QT_NO_DEBUG
name|QTest
operator|::
name|ignoreMessage
argument_list|(
name|QtWarningMsg
argument_list|,
literal|"QFutureWatcher::connect: connecting after calling setFuture() is likely to produce race"
argument_list|)
expr_stmt|;
endif|#
directive|endif
endif|#
directive|endif
name|QFutureWatcher
argument_list|<
name|void
argument_list|>
name|watcher
decl_stmt|;
name|DummyObject
name|object
decl_stmt|;
name|QMutex
name|mutex
decl_stmt|;
name|mutex
operator|.
name|lock
argument_list|()
expr_stmt|;
name|QFuture
argument_list|<
name|void
argument_list|>
name|future
init|=
name|QtConcurrent
operator|::
name|run
argument_list|(
name|DummyObject
operator|::
name|function
argument_list|,
operator|&
name|mutex
argument_list|)
decl_stmt|;
name|watcher
operator|.
name|setFuture
argument_list|(
name|future
argument_list|)
expr_stmt|;
name|QTRY_VERIFY
argument_list|(
name|future
operator|.
name|isStarted
argument_list|()
argument_list|)
expr_stmt|;
name|connect
argument_list|(
operator|&
name|watcher
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
operator|&
name|object
argument_list|,
name|SLOT
argument_list|(
name|dummySlot
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|mutex
operator|.
name|unlock
argument_list|()
expr_stmt|;
name|future
operator|.
name|waitForFinished
argument_list|()
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_MAIN
argument_list|(
argument|tst_QFutureWatcher
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qfuturewatcher.moc"
end_include
end_unit
