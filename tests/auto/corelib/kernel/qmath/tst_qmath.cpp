begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2013 Digia Plc and/or its subsidiary(-ies). ** Copyright (C) 2013 Laszlo Papp<lpapp@kde.org> ** Contact: http://www.qt-project.org/legal ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and Digia.  For licensing terms and ** conditions see http://qt.digia.com/licensing.  For further information ** use the contact form at http://qt.digia.com/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 as published by the Free Software ** Foundation and appearing in the file LICENSE.LGPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU Lesser General Public License version 2.1 requirements ** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** In addition, as a special exception, Digia gives you certain additional ** rights.  These rights are described in the Digia Qt LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** GNU General Public License Usage ** Alternatively, this file may be used under the terms of the GNU ** General Public License version 3.0 as published by the Free Software ** Foundation and appearing in the file LICENSE.GPL included in the ** packaging of this file.  Please review the following information to ** ensure the GNU General Public License version 3.0 requirements will be ** met: http://www.gnu.org/copyleft/gpl.html. ** ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<qmath.h>
end_include
begin_decl_stmt
DECL|variable|PI
specifier|static
specifier|const
name|qreal
name|PI
init|=
literal|3.14159265358979323846264338327950288
decl_stmt|;
end_decl_stmt
begin_class
DECL|class|tst_QMath
class|class
name|tst_QMath
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
private|private
name|slots
private|:
name|void
name|fastSinCos
parameter_list|()
function_decl|;
name|void
name|degreesToRadians_data
parameter_list|()
function_decl|;
name|void
name|degreesToRadians
parameter_list|()
function_decl|;
name|void
name|radiansToDegrees_data
parameter_list|()
function_decl|;
name|void
name|radiansToDegrees
parameter_list|()
function_decl|;
block|}
class|;
end_class
begin_function
DECL|function|fastSinCos
name|void
name|tst_QMath
operator|::
name|fastSinCos
parameter_list|()
block|{
comment|// Test evenly spaced angles from 0 to 2pi radians.
specifier|const
name|int
name|LOOP_COUNT
init|=
literal|100000
decl_stmt|;
for|for
control|(
name|int
name|i
init|=
literal|0
init|;
name|i
operator|<
name|LOOP_COUNT
condition|;
operator|++
name|i
control|)
block|{
name|qreal
name|angle
init|=
name|i
operator|*
literal|2
operator|*
name|PI
operator|/
operator|(
name|LOOP_COUNT
operator|-
literal|1
operator|)
decl_stmt|;
name|QVERIFY
argument_list|(
name|qAbs
argument_list|(
name|qSin
argument_list|(
name|angle
argument_list|)
operator|-
name|qFastSin
argument_list|(
name|angle
argument_list|)
argument_list|)
operator|<
literal|1e-5
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|qAbs
argument_list|(
name|qCos
argument_list|(
name|angle
argument_list|)
operator|-
name|qFastCos
argument_list|(
name|angle
argument_list|)
argument_list|)
operator|<
literal|1e-5
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_function
DECL|function|degreesToRadians_data
name|void
name|tst_QMath
operator|::
name|degreesToRadians_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"degreesFloat"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"radiansFloat"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|double
argument_list|>
argument_list|(
literal|"degreesDouble"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|double
argument_list|>
argument_list|(
literal|"radiansDouble"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"pi"
argument_list|)
operator|<<
literal|180.0f
operator|<<
name|float
argument_list|(
name|M_PI
argument_list|)
operator|<<
literal|180.0
operator|<<
name|PI
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"doublepi"
argument_list|)
operator|<<
literal|360.0f
operator|<<
name|float
argument_list|(
literal|2
operator|*
name|M_PI
argument_list|)
operator|<<
literal|360.0
operator|<<
literal|2
operator|*
name|PI
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"halfpi"
argument_list|)
operator|<<
literal|90.0f
operator|<<
name|float
argument_list|(
name|M_PI_2
argument_list|)
operator|<<
literal|90.0
operator|<<
name|PI
operator|/
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"random"
argument_list|)
operator|<<
literal|123.1234567f
operator|<<
literal|2.1489097058516724f
operator|<<
literal|123.123456789123456789
operator|<<
literal|2.148909707407169856192285627
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bigrandom"
argument_list|)
operator|<<
literal|987654321.9876543f
operator|<<
literal|17237819.79023679f
operator|<<
literal|987654321987654321.987654321987654321
operator|<<
literal|17237819790236794.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"zero"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"minuspi"
argument_list|)
operator|<<
operator|-
literal|180.0f
operator|<<
name|float
argument_list|(
operator|-
name|M_PI
argument_list|)
operator|<<
literal|180.0
operator|<<
name|PI
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"minusdoublepi"
argument_list|)
operator|<<
operator|-
literal|360.0f
operator|<<
name|float
argument_list|(
operator|-
literal|2
operator|*
name|M_PI
argument_list|)
operator|<<
operator|-
literal|360.0
operator|<<
operator|-
literal|2
operator|*
name|PI
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"minushalfpi"
argument_list|)
operator|<<
operator|-
literal|90.0f
operator|<<
name|float
argument_list|(
operator|-
name|M_PI_2
argument_list|)
operator|<<
operator|-
literal|90.0
operator|<<
operator|-
name|PI
operator|/
literal|2
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"minusrandom"
argument_list|)
operator|<<
operator|-
literal|123.1234567f
operator|<<
operator|-
literal|2.1489097058516724f
operator|<<
operator|-
literal|123.123456789123456789
operator|<<
operator|-
literal|2.148909707407169856192285627
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"minusbigrandom"
argument_list|)
operator|<<
operator|-
literal|987654321.9876543f
operator|<<
operator|-
literal|17237819.79023679f
operator|<<
operator|-
literal|987654321987654321.987654321987654321
operator|<<
operator|-
literal|17237819790236794.0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|degreesToRadians
name|void
name|tst_QMath
operator|::
name|degreesToRadians
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|degreesFloat
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|radiansFloat
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|double
argument_list|,
name|degreesDouble
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|double
argument_list|,
name|radiansDouble
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qDegreesToRadians
argument_list|(
name|degreesFloat
argument_list|)
argument_list|,
name|radiansFloat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qDegreesToRadians
argument_list|(
name|degreesDouble
argument_list|)
argument_list|,
name|radiansDouble
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|radiansToDegrees_data
name|void
name|tst_QMath
operator|::
name|radiansToDegrees_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"radiansFloat"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|float
argument_list|>
argument_list|(
literal|"degreesFloat"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|double
argument_list|>
argument_list|(
literal|"radiansDouble"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|double
argument_list|>
argument_list|(
literal|"degreesDouble"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"pi"
argument_list|)
operator|<<
name|float
argument_list|(
name|M_PI
argument_list|)
operator|<<
literal|180.0f
operator|<<
name|PI
operator|<<
literal|180.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"doublepi"
argument_list|)
operator|<<
name|float
argument_list|(
literal|2
operator|*
name|M_PI
argument_list|)
operator|<<
literal|360.0f
operator|<<
literal|2
operator|*
name|PI
operator|<<
literal|360.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"halfpi"
argument_list|)
operator|<<
name|float
argument_list|(
name|M_PI_2
argument_list|)
operator|<<
literal|90.0f
operator|<<
name|PI
operator|/
literal|2
operator|<<
literal|90.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"random"
argument_list|)
operator|<<
literal|123.1234567f
operator|<<
literal|7054.454427971739f
operator|<<
literal|123.123456789123456789
operator|<<
literal|7054.4544330781363896676339209079742431640625
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"bigrandom"
argument_list|)
operator|<<
literal|987654321.9876543f
operator|<<
literal|56588424267.74745f
operator|<<
literal|987654321987654321.987654321987654321
operator|<<
literal|56588424267747450880.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"zero"
argument_list|)
operator|<<
literal|0.0f
operator|<<
literal|0.0f
operator|<<
literal|0.0
operator|<<
literal|0.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"minuspi"
argument_list|)
operator|<<
name|float
argument_list|(
operator|-
name|M_PI
argument_list|)
operator|<<
operator|-
literal|180.0f
operator|<<
operator|-
name|PI
operator|<<
operator|-
literal|180.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"minusdoublepi"
argument_list|)
operator|<<
name|float
argument_list|(
operator|-
literal|2
operator|*
name|M_PI
argument_list|)
operator|<<
operator|-
literal|360.0f
operator|<<
operator|-
literal|2
operator|*
name|PI
operator|<<
operator|-
literal|360.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"minushalfpi"
argument_list|)
operator|<<
name|float
argument_list|(
operator|-
name|M_PI_2
argument_list|)
operator|<<
operator|-
literal|90.0f
operator|<<
operator|-
name|PI
operator|/
literal|2
operator|<<
operator|-
literal|90.0
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"minusrandom"
argument_list|)
operator|<<
operator|-
literal|123.1234567f
operator|<<
operator|-
literal|7054.454427971739f
operator|<<
operator|-
literal|123.123456789123456789
operator|<<
operator|-
literal|7054.4544330781363896676339209079742431640625
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"minusbigrandom"
argument_list|)
operator|<<
operator|-
literal|987654321.9876543f
operator|<<
operator|-
literal|56588424267.74745f
operator|<<
operator|-
literal|987654321987654321.987654321987654321
operator|<<
operator|-
literal|56588424267747450880.0
expr_stmt|;
block|}
end_function
begin_function
DECL|function|radiansToDegrees
name|void
name|tst_QMath
operator|::
name|radiansToDegrees
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|float
argument_list|,
name|radiansFloat
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|float
argument_list|,
name|degreesFloat
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|double
argument_list|,
name|radiansDouble
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|double
argument_list|,
name|degreesDouble
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qRadiansToDegrees
argument_list|(
name|radiansFloat
argument_list|)
argument_list|,
name|degreesFloat
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qRadiansToDegrees
argument_list|(
name|radiansDouble
argument_list|)
argument_list|,
name|degreesDouble
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|QTEST_APPLESS_MAIN
argument_list|(
argument|tst_QMath
argument_list|)
end_macro
begin_include
include|#
directive|include
file|"tst_qmath.moc"
end_include
end_unit
