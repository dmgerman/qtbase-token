begin_unit
begin_comment
comment|/**************************************************************************** ** ** Copyright (C) 2015 The Qt Company Ltd. ** Copyright (C) 2015 Intel Corporation. ** Contact: http://www.qt.io/licensing/ ** ** This file is part of the test suite of the Qt Toolkit. ** ** $QT_BEGIN_LICENSE:LGPL21$ ** Commercial License Usage ** Licensees holding valid commercial Qt licenses may use this file in ** accordance with the commercial license agreement provided with the ** Software or, alternatively, in accordance with the terms contained in ** a written agreement between you and The Qt Company. For licensing terms ** and conditions see http://www.qt.io/terms-conditions. For further ** information use the contact form at http://www.qt.io/contact-us. ** ** GNU Lesser General Public License Usage ** Alternatively, this file may be used under the terms of the GNU Lesser ** General Public License version 2.1 or version 3 as published by the Free ** Software Foundation and appearing in the file LICENSE.LGPLv21 and ** LICENSE.LGPLv3 included in the packaging of this file. Please review the ** following information to ensure the GNU Lesser General Public License ** requirements will be met: https://www.gnu.org/licenses/lgpl.html and ** http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html. ** ** As a special exception, The Qt Company gives you certain additional ** rights. These rights are described in The Qt Company LGPL Exception ** version 1.1, included in the file LGPL_EXCEPTION.txt in this package. ** ** $QT_END_LICENSE$ ** ****************************************************************************/
end_comment
begin_include
include|#
directive|include
file|"tst_qcoreapplication.h"
end_include
begin_include
include|#
directive|include
file|<QtCore/QtCore>
end_include
begin_include
include|#
directive|include
file|<QtTest/QtTest>
end_include
begin_include
include|#
directive|include
file|<private/qcoreapplication_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qeventloop_p.h>
end_include
begin_include
include|#
directive|include
file|<private/qthread_p.h>
end_include
begin_typedef
DECL|typedef|TestApplication
typedef|typedef
name|QCoreApplication
name|TestApplication
typedef|;
end_typedef
begin_class
DECL|class|EventSpy
class|class
name|EventSpy
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|member|recordedEvents
name|QList
argument_list|<
name|int
argument_list|>
name|recordedEvents
decl_stmt|;
DECL|function|eventFilter
name|bool
name|eventFilter
parameter_list|(
name|QObject
modifier|*
parameter_list|,
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
name|recordedEvents
operator|.
name|append
argument_list|(
name|event
operator|->
name|type
argument_list|()
argument_list|)
expr_stmt|;
return|return
literal|false
return|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|ThreadedEventReceiver
class|class
name|ThreadedEventReceiver
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|member|recordedEvents
name|QList
argument_list|<
name|int
argument_list|>
name|recordedEvents
decl_stmt|;
name|bool
name|event
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
name|Q_DECL_OVERRIDE
block|{
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|!=
name|QEvent
operator|::
name|Type
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|1
argument_list|)
condition|)
return|return
name|QObject
operator|::
name|event
argument_list|(
name|event
argument_list|)
return|;
name|recordedEvents
operator|.
name|append
argument_list|(
name|event
operator|->
name|type
argument_list|()
argument_list|)
expr_stmt|;
name|QThread
operator|::
name|currentThread
argument_list|()
operator|->
name|quit
argument_list|()
expr_stmt|;
name|QCoreApplication
operator|::
name|quit
argument_list|()
expr_stmt|;
name|moveToThread
argument_list|(
literal|0
argument_list|)
expr_stmt|;
return|return
literal|true
return|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|Thread
class|class
name|Thread
super|:
specifier|public
name|QDaemonThread
block|{
name|void
name|run
parameter_list|()
name|Q_DECL_OVERRIDE
block|{
name|QThreadData
modifier|*
name|data
init|=
name|QThreadData
operator|::
name|current
argument_list|()
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|data
operator|->
name|requiresCoreApplication
argument_list|)
expr_stmt|;
comment|// daemon thread
name|data
operator|->
name|requiresCoreApplication
operator|=
name|requiresCoreApplication
expr_stmt|;
name|QThread
operator|::
name|run
argument_list|()
expr_stmt|;
block|}
public|public:
DECL|function|Thread
name|Thread
parameter_list|()
member_init_list|:
name|requiresCoreApplication
argument_list|(
literal|true
argument_list|)
block|{}
DECL|member|requiresCoreApplication
name|bool
name|requiresCoreApplication
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|sendEventsOnProcessEvents
name|void
name|tst_QCoreApplication
operator|::
name|sendEventsOnProcessEvents
parameter_list|()
block|{
name|int
name|argc
init|=
literal|1
decl_stmt|;
name|char
modifier|*
name|argv
index|[]
init|=
block|{
expr|const_cast
operator|<
name|char
operator|*
operator|>
operator|(
name|QTest
operator|::
name|currentAppName
argument_list|()
operator|)
block|}
decl_stmt|;
name|TestApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|EventSpy
name|spy
decl_stmt|;
name|app
operator|.
name|installEventFilter
argument_list|(
operator|&
name|spy
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|app
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|Type
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|spy
operator|.
name|recordedEvents
operator|.
name|contains
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|getSetCheck
name|void
name|tst_QCoreApplication
operator|::
name|getSetCheck
parameter_list|()
block|{
comment|// do not crash
name|QString
name|v
init|=
name|QCoreApplication
operator|::
name|applicationVersion
argument_list|()
decl_stmt|;
name|v
operator|=
name|QLatin1String
argument_list|(
literal|"3.0.0 prerelease 1"
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|setApplicationVersion
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QCoreApplication
operator|::
name|applicationVersion
argument_list|()
argument_list|,
name|v
argument_list|)
expr_stmt|;
comment|// Test the property
block|{
name|int
name|argc
init|=
literal|1
decl_stmt|;
name|char
modifier|*
name|argv
index|[]
init|=
block|{
expr|const_cast
operator|<
name|char
operator|*
operator|>
operator|(
name|QTest
operator|::
name|currentAppName
argument_list|()
operator|)
block|}
decl_stmt|;
name|TestApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|app
operator|.
name|property
argument_list|(
literal|"applicationVersion"
argument_list|)
operator|.
name|toString
argument_list|()
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
name|v
operator|=
name|QString
argument_list|()
expr_stmt|;
name|QCoreApplication
operator|::
name|setApplicationVersion
argument_list|(
name|v
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QCoreApplication
operator|::
name|applicationVersion
argument_list|()
argument_list|,
name|v
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|qAppName
name|void
name|tst_QCoreApplication
operator|::
name|qAppName
parameter_list|()
block|{
ifdef|#
directive|ifdef
name|QT_GUI_LIB
specifier|const
name|char
modifier|*
name|appName
init|=
literal|"tst_qguiapplication"
decl_stmt|;
else|#
directive|else
specifier|const
name|char
modifier|*
name|appName
init|=
literal|"tst_qcoreapplication"
decl_stmt|;
endif|#
directive|endif
block|{
name|int
name|argc
init|=
literal|1
decl_stmt|;
name|char
modifier|*
name|argv
index|[]
init|=
block|{
expr|const_cast
operator|<
name|char
operator|*
operator|>
operator|(
name|appName
operator|)
block|}
decl_stmt|;
name|TestApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|::
name|qAppName
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
name|appName
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QCoreApplication
operator|::
name|applicationName
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
name|appName
argument_list|)
argument_list|)
expr_stmt|;
block|}
comment|// The application name should still be available after destruction;
comment|// global statics often rely on this.
name|QCOMPARE
argument_list|(
name|QCoreApplication
operator|::
name|applicationName
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
name|appName
argument_list|)
argument_list|)
expr_stmt|;
comment|// Setting the appname before creating the application should work (QTBUG-45283)
specifier|const
name|QString
name|wantedAppName
argument_list|(
literal|"my app name"
argument_list|)
decl_stmt|;
block|{
name|int
name|argc
init|=
literal|1
decl_stmt|;
name|char
modifier|*
name|argv
index|[]
init|=
block|{
expr|const_cast
operator|<
name|char
operator|*
operator|>
operator|(
name|appName
operator|)
block|}
decl_stmt|;
name|QCoreApplication
operator|::
name|setApplicationName
argument_list|(
name|wantedAppName
argument_list|)
expr_stmt|;
name|TestApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
operator|::
name|qAppName
argument_list|()
argument_list|,
name|QString
operator|::
name|fromLatin1
argument_list|(
name|appName
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QCoreApplication
operator|::
name|applicationName
argument_list|()
argument_list|,
name|wantedAppName
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|QCoreApplication
operator|::
name|applicationName
argument_list|()
argument_list|,
name|wantedAppName
argument_list|)
expr_stmt|;
comment|// Restore to initial value
name|QCoreApplication
operator|::
name|setApplicationName
argument_list|(
name|QString
argument_list|()
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QCoreApplication
operator|::
name|applicationName
argument_list|()
argument_list|,
name|QString
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|argc
name|void
name|tst_QCoreApplication
operator|::
name|argc
parameter_list|()
block|{
if|#
directive|if
name|defined
argument_list|(
name|Q_OS_WINCE
argument_list|)
operator|||
name|defined
argument_list|(
name|Q_OS_WINRT
argument_list|)
name|QSKIP
argument_list|(
literal|"QCoreApplication::arguments() parses arguments from actual command line on this platform."
argument_list|)
expr_stmt|;
endif|#
directive|endif
block|{
name|int
name|argc
init|=
literal|1
decl_stmt|;
name|char
modifier|*
name|argv
index|[]
init|=
block|{
expr|const_cast
operator|<
name|char
operator|*
operator|>
operator|(
name|QTest
operator|::
name|currentAppName
argument_list|()
operator|)
block|}
decl_stmt|;
name|TestApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|argc
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|app
operator|.
name|arguments
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|{
name|int
name|argc
init|=
literal|4
decl_stmt|;
name|char
modifier|*
name|argv
index|[]
init|=
block|{
cast|const_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|QTest
operator|::
name|currentAppName
argument_list|()
argument_list|)
block|,
cast|const_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
literal|"arg1"
argument_list|)
block|,
cast|const_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
literal|"arg2"
argument_list|)
block|,
expr|const_cast
operator|<
name|char
operator|*
operator|>
operator|(
literal|"arg3"
operator|)
block|}
decl_stmt|;
name|TestApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|argc
argument_list|,
literal|4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|app
operator|.
name|arguments
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
block|}
block|{
name|int
name|argc
init|=
literal|0
decl_stmt|;
name|char
modifier|*
modifier|*
name|argv
init|=
literal|0
decl_stmt|;
name|TestApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|argc
argument_list|,
literal|0
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|app
operator|.
name|arguments
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|{
name|int
name|argc
init|=
literal|2
decl_stmt|;
name|char
modifier|*
name|argv
index|[]
init|=
block|{
cast|const_cast
argument_list|<
name|char
operator|*
argument_list|>
argument_list|(
name|QTest
operator|::
name|currentAppName
argument_list|()
argument_list|)
block|,
expr|const_cast
operator|<
name|char
operator|*
operator|>
operator|(
literal|"-qmljsdebugger=port:3768,block"
operator|)
block|}
decl_stmt|;
name|TestApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|argc
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|app
operator|.
name|arguments
argument_list|()
operator|.
name|count
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
block|}
end_function
begin_class
DECL|class|EventGenerator
class|class
name|EventGenerator
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|member|other
name|QObject
modifier|*
name|other
decl_stmt|;
DECL|function|event
name|bool
name|event
parameter_list|(
name|QEvent
modifier|*
name|e
parameter_list|)
block|{
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|MaxUser
condition|)
block|{
name|QCoreApplication
operator|::
name|sendPostedEvents
argument_list|(
name|other
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
elseif|else
if|if
condition|(
name|e
operator|->
name|type
argument_list|()
operator|<=
name|QEvent
operator|::
name|User
operator|+
literal|999
condition|)
block|{
comment|// post a new event in response to this posted event
name|int
name|offset
init|=
name|e
operator|->
name|type
argument_list|()
operator|-
name|QEvent
operator|::
name|User
decl_stmt|;
name|offset
operator|=
operator|(
name|offset
operator|*
literal|10
operator|+
name|offset
operator|%
literal|10
operator|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
name|this
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|Type
argument_list|(
name|QEvent
operator|::
name|User
operator|+
name|offset
argument_list|)
argument_list|)
argument_list|,
name|offset
argument_list|)
expr_stmt|;
block|}
return|return
name|QObject
operator|::
name|event
argument_list|(
name|e
argument_list|)
return|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|postEvent
name|void
name|tst_QCoreApplication
operator|::
name|postEvent
parameter_list|()
block|{
name|int
name|argc
init|=
literal|1
decl_stmt|;
name|char
modifier|*
name|argv
index|[]
init|=
block|{
expr|const_cast
operator|<
name|char
operator|*
operator|>
operator|(
name|QTest
operator|::
name|currentAppName
argument_list|()
operator|)
block|}
decl_stmt|;
name|TestApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|EventSpy
name|spy
decl_stmt|;
name|EventGenerator
name|odd
decl_stmt|,
name|even
decl_stmt|;
name|odd
operator|.
name|other
operator|=
operator|&
name|even
expr_stmt|;
name|odd
operator|.
name|installEventFilter
argument_list|(
operator|&
name|spy
argument_list|)
expr_stmt|;
name|even
operator|.
name|other
operator|=
operator|&
name|odd
expr_stmt|;
name|even
operator|.
name|installEventFilter
argument_list|(
operator|&
name|spy
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|odd
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|Type
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|even
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|Type
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|odd
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|Type
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|3
argument_list|)
argument_list|)
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|even
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|Type
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|4
argument_list|)
argument_list|)
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|odd
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|Type
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|5
argument_list|)
argument_list|)
argument_list|,
operator|-
literal|2
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|even
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|Type
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|6
argument_list|)
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|expected
decl_stmt|;
name|expected
operator|<<
name|QEvent
operator|::
name|User
operator|+
literal|4
operator|<<
name|QEvent
operator|::
name|User
operator|+
literal|3
operator|<<
name|QEvent
operator|::
name|User
operator|+
literal|1
operator|<<
name|QEvent
operator|::
name|User
operator|+
literal|2
operator|<<
name|QEvent
operator|::
name|User
operator|+
literal|6
operator|<<
name|QEvent
operator|::
name|User
operator|+
literal|5
expr_stmt|;
name|QCoreApplication
operator|::
name|sendPostedEvents
argument_list|()
expr_stmt|;
comment|// live lock protection ensures that we only send the initial events
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|recordedEvents
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|expected
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expected
operator|<<
name|QEvent
operator|::
name|User
operator|+
literal|66
operator|<<
name|QEvent
operator|::
name|User
operator|+
literal|55
operator|<<
name|QEvent
operator|::
name|User
operator|+
literal|44
operator|<<
name|QEvent
operator|::
name|User
operator|+
literal|33
operator|<<
name|QEvent
operator|::
name|User
operator|+
literal|22
operator|<<
name|QEvent
operator|::
name|User
operator|+
literal|11
expr_stmt|;
name|spy
operator|.
name|recordedEvents
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QCoreApplication
operator|::
name|sendPostedEvents
argument_list|()
expr_stmt|;
comment|// expect next sequence events
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|recordedEvents
argument_list|,
name|expected
argument_list|)
expr_stmt|;
comment|// have the generators call sendPostedEvents() on each other in
comment|// response to an event
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|odd
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|MaxUser
argument_list|)
argument_list|,
name|INT_MAX
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|even
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|MaxUser
argument_list|)
argument_list|,
name|INT_MAX
argument_list|)
expr_stmt|;
name|expected
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expected
operator|<<
name|int
argument_list|(
name|QEvent
operator|::
name|MaxUser
argument_list|)
operator|<<
name|int
argument_list|(
name|QEvent
operator|::
name|MaxUser
argument_list|)
operator|<<
name|QEvent
operator|::
name|User
operator|+
literal|555
operator|<<
name|QEvent
operator|::
name|User
operator|+
literal|333
operator|<<
name|QEvent
operator|::
name|User
operator|+
literal|111
operator|<<
name|QEvent
operator|::
name|User
operator|+
literal|666
operator|<<
name|QEvent
operator|::
name|User
operator|+
literal|444
operator|<<
name|QEvent
operator|::
name|User
operator|+
literal|222
expr_stmt|;
name|spy
operator|.
name|recordedEvents
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QCoreApplication
operator|::
name|sendPostedEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|recordedEvents
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|expected
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expected
operator|<<
name|QEvent
operator|::
name|User
operator|+
literal|6666
operator|<<
name|QEvent
operator|::
name|User
operator|+
literal|5555
operator|<<
name|QEvent
operator|::
name|User
operator|+
literal|4444
operator|<<
name|QEvent
operator|::
name|User
operator|+
literal|3333
operator|<<
name|QEvent
operator|::
name|User
operator|+
literal|2222
operator|<<
name|QEvent
operator|::
name|User
operator|+
literal|1111
expr_stmt|;
name|spy
operator|.
name|recordedEvents
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QCoreApplication
operator|::
name|sendPostedEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|recordedEvents
argument_list|,
name|expected
argument_list|)
expr_stmt|;
comment|// no more events
name|expected
operator|.
name|clear
argument_list|()
expr_stmt|;
name|spy
operator|.
name|recordedEvents
operator|.
name|clear
argument_list|()
expr_stmt|;
name|QCoreApplication
operator|::
name|sendPostedEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|recordedEvents
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|removePostedEvents
name|void
name|tst_QCoreApplication
operator|::
name|removePostedEvents
parameter_list|()
block|{
name|int
name|argc
init|=
literal|1
decl_stmt|;
name|char
modifier|*
name|argv
index|[]
init|=
block|{
expr|const_cast
operator|<
name|char
operator|*
operator|>
operator|(
name|QTest
operator|::
name|currentAppName
argument_list|()
operator|)
block|}
decl_stmt|;
name|TestApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|EventSpy
name|spy
decl_stmt|;
name|QObject
name|one
decl_stmt|,
name|two
decl_stmt|;
name|one
operator|.
name|installEventFilter
argument_list|(
operator|&
name|spy
argument_list|)
expr_stmt|;
name|two
operator|.
name|installEventFilter
argument_list|(
operator|&
name|spy
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|expected
decl_stmt|;
comment|// remove all events for one object
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|one
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|Type
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|one
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|Type
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|one
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|Type
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|3
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|two
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|Type
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|4
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|two
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|Type
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|5
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|two
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|Type
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|6
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|removePostedEvents
argument_list|(
operator|&
name|one
argument_list|)
expr_stmt|;
name|expected
operator|<<
name|QEvent
operator|::
name|User
operator|+
literal|4
operator|<<
name|QEvent
operator|::
name|User
operator|+
literal|5
operator|<<
name|QEvent
operator|::
name|User
operator|+
literal|6
expr_stmt|;
name|QCoreApplication
operator|::
name|sendPostedEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|recordedEvents
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|spy
operator|.
name|recordedEvents
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expected
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// remove all events for all objects
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|one
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|Type
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|7
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|two
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|Type
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|8
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|one
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|Type
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|9
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|two
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|Type
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|10
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|one
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|Type
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|11
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|two
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|Type
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|12
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|removePostedEvents
argument_list|(
literal|0
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|sendPostedEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|spy
operator|.
name|recordedEvents
operator|.
name|isEmpty
argument_list|()
argument_list|)
expr_stmt|;
comment|// remove a specific type of event for one object
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|one
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|Type
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|13
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|two
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|Type
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|14
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|one
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|Type
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|15
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|two
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|Type
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|16
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|one
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|Type
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|17
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|two
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|Type
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|18
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|removePostedEvents
argument_list|(
operator|&
name|one
argument_list|,
name|QEvent
operator|::
name|User
operator|+
literal|13
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|removePostedEvents
argument_list|(
operator|&
name|two
argument_list|,
name|QEvent
operator|::
name|User
operator|+
literal|18
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|sendPostedEvents
argument_list|()
expr_stmt|;
name|expected
operator|<<
name|QEvent
operator|::
name|User
operator|+
literal|14
operator|<<
name|QEvent
operator|::
name|User
operator|+
literal|15
operator|<<
name|QEvent
operator|::
name|User
operator|+
literal|16
operator|<<
name|QEvent
operator|::
name|User
operator|+
literal|17
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|recordedEvents
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|spy
operator|.
name|recordedEvents
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expected
operator|.
name|clear
argument_list|()
expr_stmt|;
comment|// remove a specific type of event for all objects
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|one
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|Type
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|19
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|two
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|Type
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|19
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|one
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|Type
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|20
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|two
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|Type
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|20
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|one
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|Type
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|21
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|two
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|Type
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|21
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|removePostedEvents
argument_list|(
literal|0
argument_list|,
name|QEvent
operator|::
name|User
operator|+
literal|20
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|sendPostedEvents
argument_list|()
expr_stmt|;
name|expected
operator|<<
name|QEvent
operator|::
name|User
operator|+
literal|19
operator|<<
name|QEvent
operator|::
name|User
operator|+
literal|19
operator|<<
name|QEvent
operator|::
name|User
operator|+
literal|21
operator|<<
name|QEvent
operator|::
name|User
operator|+
literal|21
expr_stmt|;
name|QCOMPARE
argument_list|(
name|spy
operator|.
name|recordedEvents
argument_list|,
name|expected
argument_list|)
expr_stmt|;
name|spy
operator|.
name|recordedEvents
operator|.
name|clear
argument_list|()
expr_stmt|;
name|expected
operator|.
name|clear
argument_list|()
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_THREAD
end_ifndef
begin_class
DECL|class|DeliverInDefinedOrderThread
class|class
name|DeliverInDefinedOrderThread
super|:
specifier|public
name|QThread
block|{
name|Q_OBJECT
public|public:
DECL|function|DeliverInDefinedOrderThread
name|DeliverInDefinedOrderThread
parameter_list|()
member_init_list|:
name|QThread
argument_list|()
block|{ }
signals|signals:
name|void
name|progress
parameter_list|(
name|int
parameter_list|)
function_decl|;
protected|protected:
DECL|function|run
name|void
name|run
parameter_list|()
block|{
emit|emit
name|progress
argument_list|(
literal|1
argument_list|)
emit|;
emit|emit
name|progress
argument_list|(
literal|2
argument_list|)
emit|;
emit|emit
name|progress
argument_list|(
literal|3
argument_list|)
emit|;
emit|emit
name|progress
argument_list|(
literal|4
argument_list|)
emit|;
emit|emit
name|progress
argument_list|(
literal|5
argument_list|)
emit|;
emit|emit
name|progress
argument_list|(
literal|6
argument_list|)
emit|;
emit|emit
name|progress
argument_list|(
literal|7
argument_list|)
emit|;
block|}
block|}
class|;
end_class
begin_class
DECL|class|DeliverInDefinedOrderObject
class|class
name|DeliverInDefinedOrderObject
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
DECL|member|thread
name|QPointer
argument_list|<
name|QThread
argument_list|>
name|thread
decl_stmt|;
DECL|member|count
name|int
name|count
decl_stmt|;
DECL|member|startCount
name|int
name|startCount
decl_stmt|;
DECL|member|loopLevel
name|int
name|loopLevel
decl_stmt|;
public|public:
DECL|function|DeliverInDefinedOrderObject
name|DeliverInDefinedOrderObject
parameter_list|(
name|QObject
modifier|*
name|parent
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|thread
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|count
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|startCount
argument_list|(
literal|0
argument_list|)
member_init_list|,
name|loopLevel
argument_list|(
literal|0
argument_list|)
block|{ }
signals|signals:
name|void
name|done
parameter_list|()
function_decl|;
public|public
name|slots
public|:
DECL|function|startThread
name|void
name|startThread
parameter_list|()
block|{
name|QVERIFY
argument_list|(
operator|!
name|thread
argument_list|)
expr_stmt|;
name|thread
operator|=
operator|new
name|DeliverInDefinedOrderThread
argument_list|()
expr_stmt|;
name|connect
argument_list|(
name|thread
argument_list|,
name|SIGNAL
argument_list|(
name|progress
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|threadProgress
argument_list|(
name|int
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|thread
argument_list|,
name|SIGNAL
argument_list|(
name|finished
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|threadFinished
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|connect
argument_list|(
name|thread
argument_list|,
name|SIGNAL
argument_list|(
name|destroyed
argument_list|()
argument_list|)
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|threadDestroyed
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|thread
operator|->
name|start
argument_list|()
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
name|this
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|MaxUser
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|function|threadProgress
name|void
name|threadProgress
parameter_list|(
name|int
name|v
parameter_list|)
block|{
operator|++
name|count
expr_stmt|;
name|QCOMPARE
argument_list|(
name|v
argument_list|,
name|count
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
name|this
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|MaxUser
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|function|threadFinished
name|void
name|threadFinished
parameter_list|()
block|{
name|QCOMPARE
argument_list|(
name|count
argument_list|,
literal|7
argument_list|)
expr_stmt|;
name|count
operator|=
literal|0
expr_stmt|;
name|thread
operator|->
name|deleteLater
argument_list|()
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
name|this
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|MaxUser
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
block|}
DECL|function|threadDestroyed
name|void
name|threadDestroyed
parameter_list|()
block|{
if|if
condition|(
operator|++
name|startCount
operator|<
literal|20
condition|)
name|startThread
argument_list|()
expr_stmt|;
else|else
emit|emit
name|done
argument_list|()
emit|;
block|}
public|public:
DECL|function|event
name|bool
name|event
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
switch|switch
condition|(
name|event
operator|->
name|type
argument_list|()
condition|)
block|{
case|case
name|QEvent
operator|::
name|User
case|:
block|{
operator|++
name|loopLevel
expr_stmt|;
if|if
condition|(
name|loopLevel
operator|==
literal|2
condition|)
block|{
comment|// Ready. Starts a thread that emits (queued) signals, which should be handled in order
name|startThread
argument_list|()
expr_stmt|;
block|}
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
name|this
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|MaxUser
argument_list|)
argument_list|,
operator|-
literal|1
argument_list|)
expr_stmt|;
operator|(
name|void
operator|)
name|QEventLoop
argument_list|()
operator|.
name|exec
argument_list|()
expr_stmt|;
break|break;
block|}
default|default:
break|break;
block|}
return|return
name|QObject
operator|::
name|event
argument_list|(
name|event
argument_list|)
return|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|deliverInDefinedOrder
name|void
name|tst_QCoreApplication
operator|::
name|deliverInDefinedOrder
parameter_list|()
block|{
name|int
name|argc
init|=
literal|1
decl_stmt|;
name|char
modifier|*
name|argv
index|[]
init|=
block|{
expr|const_cast
operator|<
name|char
operator|*
operator|>
operator|(
name|QTest
operator|::
name|currentAppName
argument_list|()
operator|)
block|}
decl_stmt|;
name|TestApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|DeliverInDefinedOrderObject
name|obj
argument_list|(
operator|&
name|app
argument_list|)
decl_stmt|;
comment|// causes sendPostedEvents() to recurse twice
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|obj
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|User
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|obj
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|User
argument_list|)
argument_list|)
expr_stmt|;
name|QObject
operator|::
name|connect
argument_list|(
operator|&
name|obj
argument_list|,
name|SIGNAL
argument_list|(
name|done
argument_list|()
argument_list|)
argument_list|,
operator|&
name|app
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|app
operator|.
name|exec
argument_list|()
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_comment
comment|// QT_NO_QTHREAD
end_comment
begin_function
DECL|function|applicationPid
name|void
name|tst_QCoreApplication
operator|::
name|applicationPid
parameter_list|()
block|{
name|QVERIFY
argument_list|(
name|QCoreApplication
operator|::
name|applicationPid
argument_list|()
operator|>
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function_decl
name|QT_BEGIN_NAMESPACE
name|Q_CORE_EXPORT
name|uint
name|qGlobalPostedEventsCount
parameter_list|()
function_decl|;
end_function_decl
begin_macro
name|QT_END_NAMESPACE
end_macro
begin_class
DECL|class|GlobalPostedEventsCountObject
class|class
name|GlobalPostedEventsCountObject
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|member|globalPostedEventsCount
name|QList
argument_list|<
name|int
argument_list|>
name|globalPostedEventsCount
decl_stmt|;
DECL|function|event
name|bool
name|event
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|User
condition|)
name|globalPostedEventsCount
operator|.
name|append
argument_list|(
name|qGlobalPostedEventsCount
argument_list|()
argument_list|)
expr_stmt|;
return|return
name|QObject
operator|::
name|event
argument_list|(
name|event
argument_list|)
return|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|globalPostedEventsCount
name|void
name|tst_QCoreApplication
operator|::
name|globalPostedEventsCount
parameter_list|()
block|{
name|int
name|argc
init|=
literal|1
decl_stmt|;
name|char
modifier|*
name|argv
index|[]
init|=
block|{
expr|const_cast
operator|<
name|char
operator|*
operator|>
operator|(
name|QTest
operator|::
name|currentAppName
argument_list|()
operator|)
block|}
decl_stmt|;
name|TestApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|QCoreApplication
operator|::
name|sendPostedEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qGlobalPostedEventsCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|GlobalPostedEventsCountObject
name|x
decl_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|x
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|User
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|x
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|User
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|x
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|User
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|x
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|User
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|x
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|User
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qGlobalPostedEventsCount
argument_list|()
argument_list|,
literal|5u
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|sendPostedEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|qGlobalPostedEventsCount
argument_list|()
argument_list|,
literal|0u
argument_list|)
expr_stmt|;
name|QList
argument_list|<
name|int
argument_list|>
name|expected
init|=
name|QList
argument_list|<
name|int
argument_list|>
argument_list|()
operator|<<
literal|4
operator|<<
literal|3
operator|<<
literal|2
operator|<<
literal|1
operator|<<
literal|0
decl_stmt|;
name|QCOMPARE
argument_list|(
name|x
operator|.
name|globalPostedEventsCount
argument_list|,
name|expected
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|ProcessEventsAlwaysSendsPostedEventsObject
class|class
name|ProcessEventsAlwaysSendsPostedEventsObject
super|:
specifier|public
name|QObject
block|{
public|public:
DECL|member|counter
name|int
name|counter
decl_stmt|;
DECL|function|ProcessEventsAlwaysSendsPostedEventsObject
specifier|inline
name|ProcessEventsAlwaysSendsPostedEventsObject
parameter_list|()
member_init_list|:
name|counter
argument_list|(
literal|0
argument_list|)
block|{ }
DECL|function|event
name|bool
name|event
parameter_list|(
name|QEvent
modifier|*
name|event
parameter_list|)
block|{
if|if
condition|(
name|event
operator|->
name|type
argument_list|()
operator|==
name|QEvent
operator|::
name|User
condition|)
operator|++
name|counter
expr_stmt|;
return|return
name|QObject
operator|::
name|event
argument_list|(
name|event
argument_list|)
return|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|processEventsAlwaysSendsPostedEvents
name|void
name|tst_QCoreApplication
operator|::
name|processEventsAlwaysSendsPostedEvents
parameter_list|()
block|{
name|int
name|argc
init|=
literal|1
decl_stmt|;
name|char
modifier|*
name|argv
index|[]
init|=
block|{
expr|const_cast
operator|<
name|char
operator|*
operator|>
operator|(
name|QTest
operator|::
name|currentAppName
argument_list|()
operator|)
block|}
decl_stmt|;
name|TestApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|ProcessEventsAlwaysSendsPostedEventsObject
name|object
decl_stmt|;
name|QTime
name|t
decl_stmt|;
name|t
operator|.
name|start
argument_list|()
expr_stmt|;
name|int
name|i
init|=
literal|1
decl_stmt|;
do|do
block|{
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|object
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|User
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QCOMPARE
argument_list|(
name|object
operator|.
name|counter
argument_list|,
name|i
argument_list|)
expr_stmt|;
operator|++
name|i
expr_stmt|;
block|}
do|while
condition|(
name|t
operator|.
name|elapsed
argument_list|()
operator|<
literal|1000
condition|)
do|;
block|}
end_function
begin_function
DECL|function|reexec
name|void
name|tst_QCoreApplication
operator|::
name|reexec
parameter_list|()
block|{
name|int
name|argc
init|=
literal|1
decl_stmt|;
name|char
modifier|*
name|argv
index|[]
init|=
block|{
expr|const_cast
operator|<
name|char
operator|*
operator|>
operator|(
name|QTest
operator|::
name|currentAppName
argument_list|()
operator|)
block|}
decl_stmt|;
name|TestApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
comment|// exec once
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|app
argument_list|,
literal|"quit"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|app
operator|.
name|exec
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// and again
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|app
argument_list|,
literal|"quit"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|app
operator|.
name|exec
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|execAfterExit
name|void
name|tst_QCoreApplication
operator|::
name|execAfterExit
parameter_list|()
block|{
name|int
name|argc
init|=
literal|1
decl_stmt|;
name|char
modifier|*
name|argv
index|[]
init|=
block|{
expr|const_cast
operator|<
name|char
operator|*
operator|>
operator|(
name|QTest
operator|::
name|currentAppName
argument_list|()
operator|)
block|}
decl_stmt|;
name|TestApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|app
operator|.
name|exit
argument_list|(
literal|1
argument_list|)
expr_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|app
argument_list|,
literal|"quit"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|app
operator|.
name|exec
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|eventLoopExecAfterExit
name|void
name|tst_QCoreApplication
operator|::
name|eventLoopExecAfterExit
parameter_list|()
block|{
name|int
name|argc
init|=
literal|1
decl_stmt|;
name|char
modifier|*
name|argv
index|[]
init|=
block|{
expr|const_cast
operator|<
name|char
operator|*
operator|>
operator|(
name|QTest
operator|::
name|currentAppName
argument_list|()
operator|)
block|}
decl_stmt|;
name|TestApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
comment|// exec once and exit
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|app
argument_list|,
literal|"quit"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|app
operator|.
name|exec
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// and again, but this time using a QEventLoop
name|QEventLoop
name|loop
decl_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|loop
argument_list|,
literal|"quit"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|loop
operator|.
name|exec
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|DummyEventDispatcher
class|class
name|DummyEventDispatcher
super|:
specifier|public
name|QAbstractEventDispatcher
block|{
public|public:
DECL|function|DummyEventDispatcher
name|DummyEventDispatcher
parameter_list|()
member_init_list|:
name|QAbstractEventDispatcher
argument_list|()
member_init_list|,
name|visited
argument_list|(
literal|false
argument_list|)
block|{}
DECL|function|processEvents
name|bool
name|processEvents
parameter_list|(
name|QEventLoop
operator|::
name|ProcessEventsFlags
parameter_list|)
block|{
name|visited
operator|=
literal|true
expr_stmt|;
emit|emit
name|awake
argument_list|()
emit|;
name|QCoreApplication
operator|::
name|sendPostedEvents
argument_list|()
expr_stmt|;
return|return
literal|false
return|;
block|}
DECL|function|hasPendingEvents
name|bool
name|hasPendingEvents
parameter_list|()
block|{
return|return
name|qGlobalPostedEventsCount
argument_list|()
return|;
block|}
DECL|function|registerSocketNotifier
name|void
name|registerSocketNotifier
parameter_list|(
name|QSocketNotifier
modifier|*
parameter_list|)
block|{}
DECL|function|unregisterSocketNotifier
name|void
name|unregisterSocketNotifier
parameter_list|(
name|QSocketNotifier
modifier|*
parameter_list|)
block|{}
DECL|function|registerTimer
name|void
name|registerTimer
parameter_list|(
name|int
parameter_list|,
name|int
parameter_list|,
name|Qt
operator|::
name|TimerType
parameter_list|,
name|QObject
modifier|*
parameter_list|)
block|{}
DECL|function|unregisterTimer
name|bool
name|unregisterTimer
parameter_list|(
name|int
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
DECL|function|unregisterTimers
name|bool
name|unregisterTimers
parameter_list|(
name|QObject
modifier|*
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
DECL|function|registeredTimers
name|QList
argument_list|<
name|TimerInfo
argument_list|>
name|registeredTimers
parameter_list|(
name|QObject
modifier|*
parameter_list|)
specifier|const
block|{
return|return
name|QList
argument_list|<
name|TimerInfo
argument_list|>
argument_list|()
return|;
block|}
DECL|function|remainingTime
name|int
name|remainingTime
parameter_list|(
name|int
parameter_list|)
block|{
return|return
literal|0
return|;
block|}
DECL|function|wakeUp
name|void
name|wakeUp
parameter_list|()
block|{}
DECL|function|interrupt
name|void
name|interrupt
parameter_list|()
block|{}
DECL|function|flush
name|void
name|flush
parameter_list|()
block|{}
ifdef|#
directive|ifdef
name|Q_OS_WIN
DECL|function|registerEventNotifier
name|bool
name|registerEventNotifier
parameter_list|(
name|QWinEventNotifier
modifier|*
parameter_list|)
block|{
return|return
literal|false
return|;
block|}
DECL|function|unregisterEventNotifier
name|void
name|unregisterEventNotifier
parameter_list|(
name|QWinEventNotifier
modifier|*
parameter_list|)
block|{ }
endif|#
directive|endif
DECL|member|visited
name|bool
name|visited
decl_stmt|;
block|}
class|;
end_class
begin_function
DECL|function|customEventDispatcher
name|void
name|tst_QCoreApplication
operator|::
name|customEventDispatcher
parameter_list|()
block|{
comment|// there should be no ED yet
name|QVERIFY
argument_list|(
operator|!
name|QCoreApplication
operator|::
name|eventDispatcher
argument_list|()
argument_list|)
expr_stmt|;
name|DummyEventDispatcher
modifier|*
name|ed
init|=
operator|new
name|DummyEventDispatcher
decl_stmt|;
name|QCoreApplication
operator|::
name|setEventDispatcher
argument_list|(
name|ed
argument_list|)
expr_stmt|;
comment|// the new ED should be set
name|QCOMPARE
argument_list|(
name|QCoreApplication
operator|::
name|eventDispatcher
argument_list|()
argument_list|,
name|ed
argument_list|)
expr_stmt|;
comment|// test the alternative API of QAbstractEventDispatcher
name|QCOMPARE
argument_list|(
name|QAbstractEventDispatcher
operator|::
name|instance
argument_list|()
argument_list|,
name|ed
argument_list|)
expr_stmt|;
name|QPointer
argument_list|<
name|DummyEventDispatcher
argument_list|>
name|weak_ed
argument_list|(
name|ed
argument_list|)
decl_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|weak_ed
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|{
name|int
name|argc
init|=
literal|1
decl_stmt|;
name|char
modifier|*
name|argv
index|[]
init|=
block|{
expr|const_cast
operator|<
name|char
operator|*
operator|>
operator|(
name|QTest
operator|::
name|currentAppName
argument_list|()
operator|)
block|}
decl_stmt|;
name|TestApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
comment|// instantiating app should not overwrite the ED
name|QCOMPARE
argument_list|(
name|QCoreApplication
operator|::
name|eventDispatcher
argument_list|()
argument_list|,
name|ed
argument_list|)
expr_stmt|;
name|QMetaObject
operator|::
name|invokeMethod
argument_list|(
operator|&
name|app
argument_list|,
literal|"quit"
argument_list|,
name|Qt
operator|::
name|QueuedConnection
argument_list|)
expr_stmt|;
name|app
operator|.
name|exec
argument_list|()
expr_stmt|;
comment|// the custom ED has really been used?
name|QVERIFY
argument_list|(
name|ed
operator|->
name|visited
argument_list|)
expr_stmt|;
block|}
comment|// ED has been deleted?
name|QVERIFY
argument_list|(
name|weak_ed
operator|.
name|isNull
argument_list|()
argument_list|)
expr_stmt|;
block|}
end_function
begin_class
DECL|class|JobObject
class|class
name|JobObject
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|JobObject
specifier|explicit
name|JobObject
parameter_list|(
name|QEventLoop
modifier|*
name|loop
parameter_list|,
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
member_init_list|,
name|locker
argument_list|(
name|loop
argument_list|)
block|{
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|1000
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
DECL|function|JobObject
specifier|explicit
name|JobObject
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
block|{
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|1000
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|timeout
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
public|public
name|slots
public|:
DECL|function|startSecondaryJob
name|void
name|startSecondaryJob
parameter_list|()
block|{
operator|new
name|JobObject
argument_list|()
expr_stmt|;
block|}
private|private
name|slots
private|:
DECL|function|timeout
name|void
name|timeout
parameter_list|()
block|{
emit|emit
name|done
argument_list|()
emit|;
name|deleteLater
argument_list|()
expr_stmt|;
block|}
signals|signals:
name|void
name|done
parameter_list|()
function_decl|;
private|private:
DECL|member|locker
name|QEventLoopLocker
name|locker
decl_stmt|;
block|}
class|;
end_class
begin_class
DECL|class|QuitTester
class|class
name|QuitTester
super|:
specifier|public
name|QObject
block|{
name|Q_OBJECT
public|public:
DECL|function|QuitTester
name|QuitTester
parameter_list|(
name|QObject
modifier|*
name|parent
init|=
literal|0
parameter_list|)
member_init_list|:
name|QObject
argument_list|(
name|parent
argument_list|)
block|{
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|0
argument_list|,
name|this
argument_list|,
name|SLOT
argument_list|(
name|doTest
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
block|}
private|private
name|slots
private|:
DECL|function|doTest
name|void
name|doTest
parameter_list|()
block|{
name|QCoreApplicationPrivate
modifier|*
name|privateClass
init|=
cast|static_cast
argument_list|<
name|QCoreApplicationPrivate
operator|*
argument_list|>
argument_list|(
name|QObjectPrivate
operator|::
name|get
argument_list|(
name|qApp
argument_list|)
argument_list|)
decl_stmt|;
block|{
name|QCOMPARE
argument_list|(
name|privateClass
operator|->
name|quitLockRef
operator|.
name|load
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
comment|// Test with a lock active so that the refcount doesn't drop to zero during these tests, causing a quit.
comment|// (until we exit the scope)
name|QEventLoopLocker
name|locker
decl_stmt|;
name|QCOMPARE
argument_list|(
name|privateClass
operator|->
name|quitLockRef
operator|.
name|load
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|JobObject
modifier|*
name|job1
init|=
operator|new
name|JobObject
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|privateClass
operator|->
name|quitLockRef
operator|.
name|load
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
operator|delete
name|job1
expr_stmt|;
name|QCOMPARE
argument_list|(
name|privateClass
operator|->
name|quitLockRef
operator|.
name|load
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
name|job1
operator|=
operator|new
name|JobObject
argument_list|(
name|this
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|privateClass
operator|->
name|quitLockRef
operator|.
name|load
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|JobObject
modifier|*
name|job2
init|=
operator|new
name|JobObject
argument_list|(
name|this
argument_list|)
decl_stmt|;
name|QCOMPARE
argument_list|(
name|privateClass
operator|->
name|quitLockRef
operator|.
name|load
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
operator|delete
name|job1
expr_stmt|;
name|QCOMPARE
argument_list|(
name|privateClass
operator|->
name|quitLockRef
operator|.
name|load
argument_list|()
argument_list|,
literal|2
argument_list|)
expr_stmt|;
name|JobObject
modifier|*
name|job3
init|=
operator|new
name|JobObject
argument_list|(
name|job2
argument_list|)
decl_stmt|;
name|Q_UNUSED
argument_list|(
name|job3
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|privateClass
operator|->
name|quitLockRef
operator|.
name|load
argument_list|()
argument_list|,
literal|3
argument_list|)
expr_stmt|;
name|JobObject
modifier|*
name|job4
init|=
operator|new
name|JobObject
argument_list|(
name|job2
argument_list|)
decl_stmt|;
name|Q_UNUSED
argument_list|(
name|job4
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|privateClass
operator|->
name|quitLockRef
operator|.
name|load
argument_list|()
argument_list|,
literal|4
argument_list|)
expr_stmt|;
operator|delete
name|job2
expr_stmt|;
name|QCOMPARE
argument_list|(
name|privateClass
operator|->
name|quitLockRef
operator|.
name|load
argument_list|()
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
name|QCOMPARE
argument_list|(
name|privateClass
operator|->
name|quitLockRef
operator|.
name|load
argument_list|()
argument_list|,
literal|0
argument_list|)
expr_stmt|;
block|}
block|}
class|;
end_class
begin_function
DECL|function|testQuitLock
name|void
name|tst_QCoreApplication
operator|::
name|testQuitLock
parameter_list|()
block|{
name|int
name|argc
init|=
literal|1
decl_stmt|;
name|char
modifier|*
name|argv
index|[]
init|=
block|{
expr|const_cast
operator|<
name|char
operator|*
operator|>
operator|(
name|QTest
operator|::
name|currentAppName
argument_list|()
operator|)
block|}
decl_stmt|;
name|TestApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|QuitTester
name|tester
decl_stmt|;
name|app
operator|.
name|exec
argument_list|()
expr_stmt|;
block|}
end_function
begin_function
DECL|function|QTBUG31606_QEventDestructorDeadLock
name|void
name|tst_QCoreApplication
operator|::
name|QTBUG31606_QEventDestructorDeadLock
parameter_list|()
block|{
class|class
name|MyEvent
super|:
specifier|public
name|QEvent
block|{
public|public:
name|MyEvent
parameter_list|()
member_init_list|:
name|QEvent
argument_list|(
name|QEvent
operator|::
name|Type
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|1
argument_list|)
argument_list|)
block|{}
name|~
name|MyEvent
parameter_list|()
block|{
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
name|qApp
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|Type
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|2
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
block|}
block|}
class|;
name|int
name|argc
init|=
literal|1
decl_stmt|;
name|char
modifier|*
name|argv
index|[]
init|=
block|{
expr|const_cast
operator|<
name|char
operator|*
operator|>
operator|(
name|QTest
operator|::
name|currentAppName
argument_list|()
operator|)
block|}
decl_stmt|;
name|TestApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|EventSpy
name|spy
decl_stmt|;
name|app
operator|.
name|installEventFilter
argument_list|(
operator|&
name|spy
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|app
argument_list|,
operator|new
name|MyEvent
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|spy
operator|.
name|recordedEvents
operator|.
name|contains
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|spy
operator|.
name|recordedEvents
operator|.
name|contains
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|2
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|processEvents
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|spy
operator|.
name|recordedEvents
operator|.
name|contains
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|2
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_comment
comment|// this is almost identical to sendEventsOnProcessEvents
end_comment
begin_function
DECL|function|applicationEventFilters_mainThread
name|void
name|tst_QCoreApplication
operator|::
name|applicationEventFilters_mainThread
parameter_list|()
block|{
name|int
name|argc
init|=
literal|1
decl_stmt|;
name|char
modifier|*
name|argv
index|[]
init|=
block|{
expr|const_cast
operator|<
name|char
operator|*
operator|>
operator|(
name|QTest
operator|::
name|currentAppName
argument_list|()
operator|)
block|}
decl_stmt|;
name|TestApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|EventSpy
name|spy
decl_stmt|;
name|app
operator|.
name|installEventFilter
argument_list|(
operator|&
name|spy
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|app
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|Type
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|10
argument_list|,
operator|&
name|app
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|app
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|spy
operator|.
name|recordedEvents
operator|.
name|contains
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|applicationEventFilters_auxThread
name|void
name|tst_QCoreApplication
operator|::
name|applicationEventFilters_auxThread
parameter_list|()
block|{
name|int
name|argc
init|=
literal|1
decl_stmt|;
name|char
modifier|*
name|argv
index|[]
init|=
block|{
expr|const_cast
operator|<
name|char
operator|*
operator|>
operator|(
name|QTest
operator|::
name|currentAppName
argument_list|()
operator|)
block|}
decl_stmt|;
name|TestApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
name|QThread
name|thread
decl_stmt|;
name|ThreadedEventReceiver
name|receiver
decl_stmt|;
name|receiver
operator|.
name|moveToThread
argument_list|(
operator|&
name|thread
argument_list|)
expr_stmt|;
name|EventSpy
name|spy
decl_stmt|;
name|app
operator|.
name|installEventFilter
argument_list|(
operator|&
name|spy
argument_list|)
expr_stmt|;
comment|// this is very similar to sendEventsOnProcessEvents
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|receiver
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|Type
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|QTimer
operator|::
name|singleShot
argument_list|(
literal|1000
argument_list|,
operator|&
name|app
argument_list|,
name|SLOT
argument_list|(
name|quit
argument_list|()
argument_list|)
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|app
operator|.
name|exec
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|thread
operator|.
name|wait
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|receiver
operator|.
name|recordedEvents
operator|.
name|contains
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|spy
operator|.
name|recordedEvents
operator|.
name|contains
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|1
argument_list|)
argument_list|)
expr_stmt|;
block|}
end_function
begin_function
DECL|function|threadedEventDelivery_data
name|void
name|tst_QCoreApplication
operator|::
name|threadedEventDelivery_data
parameter_list|()
block|{
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"requiresCoreApplication"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"createCoreApplication"
argument_list|)
expr_stmt|;
name|QTest
operator|::
name|addColumn
argument_list|<
name|bool
argument_list|>
argument_list|(
literal|"eventsReceived"
argument_list|)
expr_stmt|;
comment|// invalid combination:
comment|//QTest::newRow("default-without-coreapp")<< true<< false<< false;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"default"
argument_list|)
operator|<<
literal|true
operator|<<
literal|true
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"independent-without-coreapp"
argument_list|)
operator|<<
literal|false
operator|<<
literal|false
operator|<<
literal|true
expr_stmt|;
name|QTest
operator|::
name|newRow
argument_list|(
literal|"independent-with-coreapp"
argument_list|)
operator|<<
literal|false
operator|<<
literal|true
operator|<<
literal|true
expr_stmt|;
block|}
end_function
begin_comment
comment|// posts the event before the QCoreApplication is destroyed, starts thread after
end_comment
begin_function
DECL|function|threadedEventDelivery
name|void
name|tst_QCoreApplication
operator|::
name|threadedEventDelivery
parameter_list|()
block|{
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|requiresCoreApplication
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|createCoreApplication
argument_list|)
expr_stmt|;
name|QFETCH
argument_list|(
name|bool
argument_list|,
name|eventsReceived
argument_list|)
expr_stmt|;
name|int
name|argc
init|=
literal|1
decl_stmt|;
name|char
modifier|*
name|argv
index|[]
init|=
block|{
expr|const_cast
operator|<
name|char
operator|*
operator|>
operator|(
name|QTest
operator|::
name|currentAppName
argument_list|()
operator|)
block|}
decl_stmt|;
name|QScopedPointer
argument_list|<
name|TestApplication
argument_list|>
name|app
argument_list|(
name|createCoreApplication
condition|?
operator|new
name|TestApplication
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
else|:
literal|0
argument_list|)
decl_stmt|;
name|Thread
name|thread
decl_stmt|;
name|thread
operator|.
name|requiresCoreApplication
operator|=
name|requiresCoreApplication
expr_stmt|;
name|ThreadedEventReceiver
name|receiver
decl_stmt|;
name|receiver
operator|.
name|moveToThread
argument_list|(
operator|&
name|thread
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|postEvent
argument_list|(
operator|&
name|receiver
argument_list|,
operator|new
name|QEvent
argument_list|(
name|QEvent
operator|::
name|Type
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|1
argument_list|)
argument_list|)
argument_list|)
expr_stmt|;
name|thread
operator|.
name|start
argument_list|()
expr_stmt|;
name|QVERIFY
argument_list|(
name|thread
operator|.
name|wait
argument_list|(
literal|1000
argument_list|)
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|receiver
operator|.
name|recordedEvents
operator|.
name|contains
argument_list|(
name|QEvent
operator|::
name|User
operator|+
literal|1
argument_list|)
argument_list|,
name|eventsReceived
argument_list|)
expr_stmt|;
block|}
end_function
begin_ifndef
ifndef|#
directive|ifndef
name|QT_NO_LIBRARY
end_ifndef
begin_function
DECL|function|addRemoveLibPaths
name|void
name|tst_QCoreApplication
operator|::
name|addRemoveLibPaths
parameter_list|()
block|{
name|QStringList
name|paths
init|=
name|QCoreApplication
operator|::
name|libraryPaths
argument_list|()
decl_stmt|;
if|if
condition|(
name|paths
operator|.
name|isEmpty
argument_list|()
condition|)
name|QSKIP
argument_list|(
literal|"Cannot add/remove library paths if there are none."
argument_list|)
expr_stmt|;
name|QString
name|currentDir
init|=
name|QDir
argument_list|()
operator|.
name|absolutePath
argument_list|()
decl_stmt|;
name|QCoreApplication
operator|::
name|addLibraryPath
argument_list|(
name|currentDir
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
name|QCoreApplication
operator|::
name|libraryPaths
argument_list|()
operator|.
name|contains
argument_list|(
name|currentDir
argument_list|)
argument_list|)
expr_stmt|;
name|QCoreApplication
operator|::
name|removeLibraryPath
argument_list|(
name|paths
index|[
literal|0
index|]
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QCoreApplication
operator|::
name|libraryPaths
argument_list|()
operator|.
name|contains
argument_list|(
name|paths
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|int
name|argc
init|=
literal|1
decl_stmt|;
name|char
modifier|*
name|argv
index|[]
init|=
block|{
expr|const_cast
operator|<
name|char
operator|*
operator|>
operator|(
name|QTest
operator|::
name|currentAppName
argument_list|()
operator|)
block|}
decl_stmt|;
name|TestApplication
name|app
argument_list|(
name|argc
argument_list|,
name|argv
argument_list|)
decl_stmt|;
comment|// Check that modifications stay alive across the creation of an application.
name|QVERIFY
argument_list|(
name|QCoreApplication
operator|::
name|libraryPaths
argument_list|()
operator|.
name|contains
argument_list|(
name|currentDir
argument_list|)
argument_list|)
expr_stmt|;
name|QVERIFY
argument_list|(
operator|!
name|QCoreApplication
operator|::
name|libraryPaths
argument_list|()
operator|.
name|contains
argument_list|(
name|paths
index|[
literal|0
index|]
argument_list|)
argument_list|)
expr_stmt|;
name|QStringList
name|replace
decl_stmt|;
name|replace
operator|<<
name|currentDir
operator|<<
name|paths
index|[
literal|0
index|]
expr_stmt|;
name|QCoreApplication
operator|::
name|setLibraryPaths
argument_list|(
name|replace
argument_list|)
expr_stmt|;
name|QCOMPARE
argument_list|(
name|QCoreApplication
operator|::
name|libraryPaths
argument_list|()
argument_list|,
name|replace
argument_list|)
expr_stmt|;
block|}
end_function
begin_endif
endif|#
directive|endif
end_endif
begin_function
DECL|function|createQObjectOnDestruction
specifier|static
name|void
name|createQObjectOnDestruction
parameter_list|()
block|{
comment|// Make sure that we can create a QObject after the last QObject has been
comment|// destroyed (especially after QCoreApplication has).
comment|//
comment|// Before the fixes, this would cause a dangling pointer dereference. If
comment|// the problem comes back, it's possible that the following causes no
comment|// effect.
name|QObject
name|obj
decl_stmt|;
name|obj
operator|.
name|thread
argument_list|()
operator|->
name|setProperty
argument_list|(
literal|"testing"
argument_list|,
literal|1
argument_list|)
expr_stmt|;
block|}
end_function
begin_macro
name|Q_DESTRUCTOR_FUNCTION
argument_list|(
argument|createQObjectOnDestruction
argument_list|)
end_macro
begin_ifndef
ifndef|#
directive|ifndef
name|QT_GUI_LIB
end_ifndef
begin_macro
name|QTEST_APPLESS_MAIN
argument_list|(
argument|tst_QCoreApplication
argument_list|)
end_macro
begin_endif
endif|#
directive|endif
end_endif
begin_include
include|#
directive|include
file|"tst_qcoreapplication.moc"
end_include
end_unit
